#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1094;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _234 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _234 + 1u;
    uint _244 = _234 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _275 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _281 = _275.x * cbMtdParam._m0[11u].x;
    float _282 = _275.y * cbMtdParam._m0[11u].y;
    float _283 = _275.z * cbMtdParam._m0[11u].z;
    vec4 _302 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _254) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _255) + cbTextureTilingScale._m0[5u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _342 = _340.x;
    float _354 = dot(vec4(_342, _340.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _371 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_342 - _354) * cbMtdParam._m0[24u].y) + _354) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3423 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _372 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
    float _379 = (_372 * ((_302.x * cbMtdParam._m0[12u].x) - _281)) + _281;
    float _380 = (_372 * ((_302.y * cbMtdParam._m0[12u].y) - _282)) + _282;
    float _381 = (_372 * ((_302.z * cbMtdParam._m0[12u].z) - _283)) + _283;
    vec4 _394 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _254) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _255) + cbTextureTilingScale._m0[20u].w));
    vec4 _419 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _254) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _255) + cbTextureTilingScale._m0[4u].w));
    vec4 _436 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _438 = _436.x;
    float _439 = _436.y;
    float _440 = _436.z;
    float _449 = ((_419.z - _440) * _372) + _440;
    float _452 = ((((_419.x - _438) * _372) + _438) * 2.0) + (-1.0);
    float _453 = ((((_419.y - _439) * _372) + _439) * 2.0) + (-1.0);
    float _454 = dot(vec2(_452, _453), vec2(_452, _453));
    float _3434 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _459 = sqrt(1.0 - (isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0))));
    float _464 = _452 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_394.x * 2.0) + (-1.0)));
    float _465 = _453 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_394.y * 2.0) + (-1.0)));
    vec4 _478 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _492 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _506 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _508 = _506.x;
    float _526 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _254) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _255) + cbTextureTilingScale._m0[9u].w)).x - _508) * _372) + _508;
    float _530 = ((_492.x - _526) * cbMtdParam._m0[19u].z) + _526;
    float _535 = (((_394.z - _449) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _449;
    float _540 = cbMtdParam._m0[22u].x + _478.w;
    float _543 = fma(_459, _221 * NORMAL.x, fma(_465, _228 * TANGENT.x, (_214 * _206) * _464));
    float _546 = fma(_459, _221 * NORMAL.y, fma(_465, _228 * TANGENT.y, (_214 * _207) * _464));
    float _549 = fma(_459, _221 * NORMAL.z, fma(_465, _228 * TANGENT.z, (_214 * _208) * _464));
    float _553 = inversesqrt(dot(vec3(_543, _546, _549), vec3(_543, _546, _549)));
    float _554 = _553 * _543;
    float _555 = _553 * _546;
    float _556 = _553 * _549;
    float _3445 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _557 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
    float _3456 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _3467 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _3478 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _3489 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _3500 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _562 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
    float _576 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _617 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _627 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _617);
    float _628 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _617);
    float _629 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _617);
    float _633 = inversesqrt(dot(vec3(_627, _628, _629), vec3(_627, _628, _629)));
    float _634 = _627 * _633;
    float _635 = _628 * _633;
    float _636 = _629 * _633;
    float _642 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _643 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _661 = fma(_556, cbSceneParam._m0[5u].z, fma(_555, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _554));
    float _664 = fma(_556, cbSceneParam._m0[6u].z, fma(_555, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _554));
    float _667 = fma(_556, cbSceneParam._m0[7u].z, fma(_555, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _554));
    uint _681 = (_234 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _687 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0)))) * cbInstanceData._m0[_681].x;
    float _688 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0)))) * cbInstanceData._m0[_681].y;
    float _689 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0)))) * cbInstanceData._m0[_681].z;
    float _3511 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _690 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
    float _3522 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _691 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
    float _3533 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _692 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
    float _693 = 1.0 - _562;
    float _694 = _690 * _693;
    float _695 = _691 * _693;
    float _696 = _692 * _693;
    float _701 = (_690 + (-0.039999999105930328369140625)) * _562;
    float _702 = (_691 + (-0.039999999105930328369140625)) * _562;
    float _703 = (_692 + (-0.039999999105930328369140625)) * _562;
    float _704 = _701 + 0.039999999105930328369140625;
    float _706 = _702 + 0.039999999105930328369140625;
    float _707 = _703 + 0.039999999105930328369140625;
    vec4 _716 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _642, cbSceneParam._m0[86u].y * _643));
    float _720 = ((isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0))) * TEXCOORD_5.w) * _716.x;
    float _721 = dot(vec3(_554, _555, _556), vec3(_634, _635, _636));
    float _724 = _721 * 2.0;
    float _728 = (_724 * _554) - _634;
    float _729 = (_724 * _555) - _635;
    float _730 = (_724 * _556) - _636;
    float _734 = abs(dot(vec3(_634, _635, _636), vec3(_554, _555, _556)));
    float _3544 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _736 = sqrt(_557);
    float _749 = exp2((_736 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_736 * 3.0));
    float _755 = (1.0 - _749) * ((_736 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _756 = _749 * _736;
    float _784 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _788 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _792 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1093;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _818 = fma(_792, cbModelParam._m0[26u].z, fma(_788, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _784));
        float _822 = fma(_792, cbModelParam._m0[27u].z, fma(_788, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _784));
        float _826 = fma(_792, cbModelParam._m0[28u].z, fma(_788, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _784));
        float _851 = _784 + _554;
        float _852 = _788 + _555;
        float _853 = _792 + _556;
        float _863 = fma(_853, cbModelParam._m0[26u].z, fma(_852, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _851)) - _818;
        float _864 = fma(_853, cbModelParam._m0[27u].z, fma(_852, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _851)) - _822;
        float _865 = fma(_853, cbModelParam._m0[28u].z, fma(_852, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _851)) - _826;
        float _869 = inversesqrt(dot(vec3(_863, _864, _865), vec3(_863, _864, _865)));
        float _882 = ((_869 * _863) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_818 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _883 = ((_869 * _864) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_822 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _884 = ((_869 * _865) / cbModelParam._m0[34u].z) + ((((((_826 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        vec4 _901 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        vec4 _908 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        float _921 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_887.x + (-0.5));
        float _923 = _921 * (_887.y + (-0.5));
        float _924 = _921 * (_887.z + (-0.5));
        float _931 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _932 = _931 * (_894.x + (-0.5));
        float _933 = _931 * (_894.y + (-0.5));
        float _934 = _931 * (_894.z + (-0.5));
        float _941 = exp2((_901.w + (-0.5)) * 20.0) * 2.0;
        float _942 = _941 * (_901.x + (-0.5));
        float _943 = _941 * (_901.y + (-0.5));
        float _944 = _941 * (_901.z + (-0.5));
        float _951 = exp2((_908.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_908.x + (-0.5));
        float _953 = _951 * (_908.y + (-0.5));
        float _954 = _951 * (_908.z + (-0.5));
        float _955 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _956 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _957 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _958 = _922 * 0.5;
        float _959 = _932 * 0.5;
        float _960 = _942 * 0.5;
        float _961 = dot(vec3(_958, _959, _960), vec3(_958, _959, _960));
        float _966 = (_961 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_961);
        float _975 = (dot(vec3(_554, _555, _556), vec3(_966 * _958, _966 * _959, _966 * _960)) + 1.0) * 0.5;
        float _3570 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _985 = sqrt(((_959 * _959) + (_958 * _958)) + (_960 * _960)) / (_955 + 9.9999997473787516355514526367188e-06);
        float _3581 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _987 = _986 * 2.0;
        float _991 = (1.0 - _986) / (_986 + 1.0);
        float _3592 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _1001 = ((((1.0 - _992) * (_987 + 2.0)) * exp2(log2(isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * (_987 + 1.0))) + _992) * _955;
        float _1002 = _923 * 0.5;
        float _1003 = _933 * 0.5;
        float _1004 = _943 * 0.5;
        float _1005 = dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004));
        float _1010 = (_1005 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1005);
        float _1018 = (dot(vec3(_554, _555, _556), vec3(_1010 * _1002, _1010 * _1003, _1010 * _1004)) + 1.0) * 0.5;
        float _3603 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1027 = sqrt(((_1003 * _1003) + (_1002 * _1002)) + (_1004 * _1004)) / (_956 + 9.9999997473787516355514526367188e-06);
        float _3614 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _1029 = _1028 * 2.0;
        float _1033 = (1.0 - _1028) / (_1028 + 1.0);
        float _3625 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _1043 = ((((1.0 - _1034) * (_1029 + 2.0)) * exp2(log2(isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * (_1029 + 1.0))) + _1034) * _956;
        float _1044 = _924 * 0.5;
        float _1045 = _934 * 0.5;
        float _1046 = _944 * 0.5;
        float _1047 = dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046));
        float _1052 = (_1047 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1047);
        float _1060 = (dot(vec3(_554, _555, _556), vec3(_1052 * _1044, _1052 * _1045, _1052 * _1046)) + 1.0) * 0.5;
        float _3636 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1069 = sqrt(((_1045 * _1045) + (_1044 * _1044)) + (_1046 * _1046)) / (_957 + 9.9999997473787516355514526367188e-06);
        float _3647 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _1071 = _1070 * 2.0;
        float _1075 = (1.0 - _1070) / (_1070 + 1.0);
        float _3658 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1085 = ((((1.0 - _1076) * (_1071 + 2.0)) * exp2(log2(isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))) * (_1071 + 1.0))) + _1076) * _957;
        _1093 = _924;
        _1095 = _923;
        _1096 = _922;
        _1097 = _934;
        _1098 = _933;
        _1099 = _932;
        _1100 = _944;
        _1101 = _943;
        _1102 = _942;
        _1103 = _957;
        _1104 = _956;
        _1105 = _955;
        _1106 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0)));
        _1107 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0)));
        _1108 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0)));
    }
    else
    {
        _1093 = _1094;
        _1095 = _1094;
        _1096 = _1094;
        _1097 = _1094;
        _1098 = _1094;
        _1099 = _1094;
        _1100 = _1094;
        _1101 = _1094;
        _1102 = _1094;
        _1103 = _1094;
        _1104 = _1094;
        _1105 = _1094;
        _1106 = 0.0;
        _1107 = 0.0;
        _1108 = 0.0;
    }
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1133 = fma(_792, cbModelParam._m0[30u].z, fma(_788, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _784));
        float _1137 = fma(_792, cbModelParam._m0[31u].z, fma(_788, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _784));
        float _1141 = fma(_792, cbModelParam._m0[32u].z, fma(_788, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _784));
        float _1164 = _784 + _554;
        float _1165 = _788 + _555;
        float _1166 = _792 + _556;
        float _1176 = fma(_1166, cbModelParam._m0[30u].z, fma(_1165, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1164)) - _1133;
        float _1177 = fma(_1166, cbModelParam._m0[31u].z, fma(_1165, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1164)) - _1137;
        float _1178 = fma(_1166, cbModelParam._m0[32u].z, fma(_1165, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1164)) - _1141;
        float _1182 = inversesqrt(dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178)));
        float _1195 = ((_1182 * _1176) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1133 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1196 = ((_1182 * _1177) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1137 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1197 = ((_1182 * _1178) / cbModelParam._m0[35u].z) + ((((((_1141 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1206 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1213 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        float _1232 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1199.x + (-0.5));
        float _1234 = _1232 * (_1199.y + (-0.5));
        float _1235 = _1232 * (_1199.z + (-0.5));
        float _1242 = exp2((_1206.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1206.x + (-0.5));
        float _1244 = _1242 * (_1206.y + (-0.5));
        float _1245 = _1242 * (_1206.z + (-0.5));
        float _1252 = exp2((_1213.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1213.x + (-0.5));
        float _1254 = _1252 * (_1213.y + (-0.5));
        float _1255 = _1252 * (_1213.z + (-0.5));
        float _1262 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1220.x + (-0.5));
        float _1264 = _1262 * (_1220.y + (-0.5));
        float _1265 = _1262 * (_1220.z + (-0.5));
        float _1266 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1267 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1268 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1269 = _1233 * 0.5;
        float _1270 = _1243 * 0.5;
        float _1271 = _1253 * 0.5;
        float _1272 = dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271));
        float _1277 = (_1272 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1272);
        float _1285 = (dot(vec3(_554, _555, _556), vec3(_1277 * _1269, _1277 * _1270, _1277 * _1271)) + 1.0) * 0.5;
        float _3699 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1294 = sqrt(((_1270 * _1270) + (_1269 * _1269)) + (_1271 * _1271)) / (_1266 + 9.9999997473787516355514526367188e-06);
        float _3710 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1296 = _1295 * 2.0;
        float _1300 = (1.0 - _1295) / (_1295 + 1.0);
        float _3721 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1310 = ((((1.0 - _1301) * (_1296 + 2.0)) * exp2(log2(isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) * (_1296 + 1.0))) + _1301) * _1266;
        float _1311 = _1234 * 0.5;
        float _1312 = _1244 * 0.5;
        float _1313 = _1254 * 0.5;
        float _1314 = dot(vec3(_1311, _1312, _1313), vec3(_1311, _1312, _1313));
        float _1319 = (_1314 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1314);
        float _1327 = (dot(vec3(_554, _555, _556), vec3(_1319 * _1311, _1319 * _1312, _1319 * _1313)) + 1.0) * 0.5;
        float _3732 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1336 = sqrt(((_1312 * _1312) + (_1311 * _1311)) + (_1313 * _1313)) / (_1267 + 9.9999997473787516355514526367188e-06);
        float _3743 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1338 = _1337 * 2.0;
        float _1342 = (1.0 - _1337) / (_1337 + 1.0);
        float _3754 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1352 = ((((1.0 - _1343) * (_1338 + 2.0)) * exp2(log2(isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * (_1338 + 1.0))) + _1343) * _1267;
        float _1353 = _1235 * 0.5;
        float _1354 = _1245 * 0.5;
        float _1355 = _1255 * 0.5;
        float _1356 = dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355));
        float _1361 = (_1356 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1356);
        float _1369 = (dot(vec3(_554, _555, _556), vec3(_1361 * _1353, _1361 * _1354, _1361 * _1355)) + 1.0) * 0.5;
        float _3765 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1378 = sqrt(((_1354 * _1354) + (_1353 * _1353)) + (_1355 * _1355)) / (_1268 + 9.9999997473787516355514526367188e-06);
        float _3776 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1380 = _1379 * 2.0;
        float _1384 = (1.0 - _1379) / (_1379 + 1.0);
        float _3787 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1394 = ((((1.0 - _1385) * (_1380 + 2.0)) * exp2(log2(isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * (_1380 + 1.0))) + _1385) * _1268;
        _1402 = _1235;
        _1403 = _1234;
        _1404 = _1233;
        _1405 = _1245;
        _1406 = _1244;
        _1407 = _1243;
        _1408 = _1255;
        _1409 = _1254;
        _1410 = _1253;
        _1411 = _1268;
        _1412 = _1267;
        _1413 = _1266;
        _1414 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)));
        _1415 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)));
        _1416 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)));
    }
    else
    {
        _1402 = _1094;
        _1403 = _1094;
        _1404 = _1094;
        _1405 = _1094;
        _1406 = _1094;
        _1407 = _1094;
        _1408 = _1094;
        _1409 = _1094;
        _1410 = _1094;
        _1411 = _1094;
        _1412 = _1094;
        _1413 = _1094;
        _1414 = 0.0;
        _1415 = 0.0;
        _1416 = 0.0;
    }
    float _1426 = (cbModelParam._m0[1u].x * (_1414 - _1106)) + _1106;
    float _1427 = (cbModelParam._m0[1u].x * (_1415 - _1107)) + _1107;
    float _1428 = (cbModelParam._m0[1u].x * (_1416 - _1108)) + _1108;
    float _1449 = fma(_1428, cbSceneParam._m0[89u].z, fma(_1427, cbSceneParam._m0[89u].y, _1426 * cbSceneParam._m0[89u].x));
    float _1452 = fma(_1428, cbSceneParam._m0[90u].z, fma(_1427, cbSceneParam._m0[90u].y, _1426 * cbSceneParam._m0[90u].x));
    float _1455 = fma(_1428, cbSceneParam._m0[91u].z, fma(_1427, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1426));
    float _1470 = _728 * 0.5;
    float _1471 = _729 * 0.5;
    float _1472 = _730 * 0.5;
    float _1473 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1404, _1407, _1410, _1413));
    float _1476 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1403, _1406, _1409, _1412));
    float _1479 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1402, _1405, _1408, _1411));
    float _1513;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1486 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1093, _1097, _1100, _1103));
        float _1490 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1095, _1098, _1101, _1104));
        float _1494 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1096, _1099, _1102, _1105));
        float _1501 = dot(vec4(cbModelParam._m0[39u]), vec4(_1470, _1471, _1472, 1.0));
        _1513 = dot(vec3(isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)), isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)), isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1501) ? 0.0 : (isnan(0.0) ? _1501 : max(0.0, _1501))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1513 = 1.0;
    }
    float _1524;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1515 = dot(vec4(cbModelParam._m0[40u]), vec4(_1470, _1471, _1472, 1.0));
        _1524 = dot(vec3(isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)), isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)), isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1515) ? 0.0 : (isnan(0.0) ? _1515 : max(0.0, _1515))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1524 = 1.0;
    }
    float _1528 = (_1524 * cbModelParam._m0[1u].x) + (_1513 * (1.0 - cbModelParam._m0[1u].x));
    float _1538 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _557);
    float _1539 = isnan(_1538) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1538 : min(cbModelParam._m0[25u].z, _1538));
    float _1621;
    float _1623;
    float _1625;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1588 = fma(_792, cbModelParam._m0[13u].z, fma(_788, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _784)) + cbModelParam._m0[13u].w;
        float _1592 = fma(_792, cbModelParam._m0[14u].z, fma(_788, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _784)) + cbModelParam._m0[14u].w;
        float _1596 = fma(_792, cbModelParam._m0[15u].z, fma(_788, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _784)) + cbModelParam._m0[15u].w;
        float _1599 = fma(_730, cbModelParam._m0[13u].z, fma(_729, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _728));
        float _1602 = fma(_730, cbModelParam._m0[14u].z, fma(_729, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _728));
        float _1605 = fma(_730, cbModelParam._m0[15u].z, fma(_729, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _728));
        float _1633;
        if (_1599 > 0.0)
        {
            _1633 = abs((1.0 - _1588) / _1599);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1599 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1588 + 1.0) / _1599);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1633 = frontier_phi_14_12_ladder;
        }
        float _1837;
        if (_1602 > 0.0)
        {
            _1837 = abs((1.0 - _1592) / _1602);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1602 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1592 + 1.0) / _1602);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1837 = frontier_phi_23_19_ladder;
        }
        float _2091;
        if (_1605 > 0.0)
        {
            _2091 = abs((1.0 - _1596) / _1605);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1605 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1596 + 1.0) / _1605);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2091 = frontier_phi_35_30_ladder;
        }
        float _2093 = isnan(_1837) ? _1633 : (isnan(_1633) ? _1837 : min(_1633, _1837));
        float _2094 = isnan(_2091) ? _2093 : (isnan(_2093) ? _2091 : min(_2093, _2091));
        float _2098 = (_2094 * _1599) + _1588;
        float _2099 = (_2094 * _1602) + _1592;
        float _2100 = (_2094 * _1605) + _1596;
        float _2101 = _2094 * 9.9999997473787516355514526367188e-05;
        float _2103 = (-1.0) - _2101;
        float _2105 = _2101 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2100 > _2105) || ((_2100 < _2103) || ((_2099 > _2105) || ((_2099 < _2103) || ((_2098 < _2103) || (_2098 > _2105))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2228 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2100, cbModelParam._m0[9u].z, fma(_2099, cbModelParam._m0[9u].y, _2098 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2100, cbModelParam._m0[10u].z, fma(_2099, cbModelParam._m0[10u].y, _2098 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2100, cbModelParam._m0[11u].z, fma(_2099, cbModelParam._m0[11u].y, _2098 * cbModelParam._m0[11u].x))), _1539);
            frontier_phi_13_35_ladder = _2228.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2228.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2228.x * cbModelParam._m0[1u].y;
        }
        _1621 = frontier_phi_13_35_ladder_2;
        _1623 = frontier_phi_13_35_ladder_1;
        _1625 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1609 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_728, _729, _730), _1539);
        _1621 = _1609.x * cbModelParam._m0[1u].y;
        _1623 = _1609.y * cbModelParam._m0[1u].y;
        _1625 = _1609.z * cbModelParam._m0[1u].y;
    }
    float _1629 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _557);
    float _1630 = isnan(_1629) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1629 : min(cbModelParam._m0[25u].w, _1629));
    float _1721;
    float _1723;
    float _1725;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1685 = fma(_792, cbModelParam._m0[21u].z, fma(_788, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _784)) + cbModelParam._m0[21u].w;
        float _1689 = fma(_792, cbModelParam._m0[22u].z, fma(_788, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _784)) + cbModelParam._m0[22u].w;
        float _1693 = fma(_792, cbModelParam._m0[23u].z, fma(_788, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _784)) + cbModelParam._m0[23u].w;
        float _1696 = fma(_730, cbModelParam._m0[21u].z, fma(_729, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _728));
        float _1699 = fma(_730, cbModelParam._m0[22u].z, fma(_729, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _728));
        float _1702 = fma(_730, cbModelParam._m0[23u].z, fma(_729, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _728));
        float _1842;
        if (_1696 > 0.0)
        {
            _1842 = abs((1.0 - _1685) / _1696);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1696 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1685 + 1.0) / _1696);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1842 = frontier_phi_25_21_ladder;
        }
        float _2118;
        if (_1699 > 0.0)
        {
            _2118 = abs((1.0 - _1689) / _1699);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1699 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1689 + 1.0) / _1699);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2118 = frontier_phi_37_32_ladder;
        }
        float _2331;
        if (_1702 > 0.0)
        {
            _2331 = abs((1.0 - _1693) / _1702);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1702 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1693 + 1.0) / _1702);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2331 = frontier_phi_46_43_ladder;
        }
        float _2333 = isnan(_2118) ? _1842 : (isnan(_1842) ? _2118 : min(_1842, _2118));
        float _2334 = isnan(_2331) ? _2333 : (isnan(_2333) ? _2331 : min(_2333, _2331));
        float _2338 = (_2334 * _1696) + _1685;
        float _2339 = (_2334 * _1699) + _1689;
        float _2340 = (_2334 * _1702) + _1693;
        float _2341 = _2334 * 9.9999997473787516355514526367188e-05;
        float _2342 = (-1.0) - _2341;
        float _2344 = _2341 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2340 > _2344) || ((_2340 < _2342) || ((_2339 > _2344) || ((_2339 < _2342) || ((_2338 < _2342) || (_2338 > _2344))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2539 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2340, cbModelParam._m0[17u].z, fma(_2339, cbModelParam._m0[17u].y, _2338 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2340, cbModelParam._m0[18u].z, fma(_2339, cbModelParam._m0[18u].y, _2338 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2340, cbModelParam._m0[19u].z, fma(_2339, cbModelParam._m0[19u].y, _2338 * cbModelParam._m0[19u].x))), _1630);
            frontier_phi_22_46_ladder = _2539.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2539.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2539.x * cbModelParam._m0[1u].z;
        }
        _1721 = frontier_phi_22_46_ladder_2;
        _1723 = frontier_phi_22_46_ladder_1;
        _1725 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1705 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_728, _729, _730), _1630);
        _1721 = _1705.x * cbModelParam._m0[1u].z;
        _1723 = _1705.y * cbModelParam._m0[1u].z;
        _1725 = _1705.z * cbModelParam._m0[1u].z;
    }
    float _1738 = (((_755 * _704) + _756) * _720) * ((cbModelParam._m0[1u].w * (_1721 - _1621)) + _1621);
    float _1740 = (((_755 * _706) + _756) * _720) * ((cbModelParam._m0[1u].w * (_1723 - _1623)) + _1623);
    float _1742 = (((_755 * _707) + _756) * _720) * ((cbModelParam._m0[1u].w * (_1725 - _1625)) + _1625);
    float _1745 = fma(_1742, cbSceneParam._m0[89u].z, fma(_1740, cbSceneParam._m0[89u].y, _1738 * cbSceneParam._m0[89u].x));
    float _1748 = fma(_1742, cbSceneParam._m0[90u].z, fma(_1740, cbSceneParam._m0[90u].y, _1738 * cbSceneParam._m0[90u].x));
    float _1751 = fma(_1742, cbSceneParam._m0[91u].z, fma(_1740, cbSceneParam._m0[91u].y, _1738 * cbSceneParam._m0[91u].x));
    uvec4 _1761 = floatBitsToUint(cbInstanceData._m0[_234 + 5u]);
    uint _1763 = _1761.x * 14u;
    uint _1764 = _1763 + 13u;
    float _1771 = _720 + (-1.0);
    float _1776 = (cbLight._m0[_1764].x * _1771) + 1.0;
    float _1777 = (cbLight._m0[_1764].y * _1771) + 1.0;
    float _1778 = (cbLight._m0[_1764].z * _1771) + 1.0;
    float _1779 = (cbLight._m0[_1764].w * _1771) + 1.0;
    uint _1780 = _1763 + 5u;
    float _1786 = isnan(1.0) ? _1777 : (isnan(_1777) ? 1.0 : min(_1777, 1.0));
    uint _1790 = _1763 + 4u;
    float _1796 = isnan(1.0) ? _1776 : (isnan(_1776) ? 1.0 : min(_1776, 1.0));
    uint _1800 = _1763 | 1u;
    float _1811 = dot(vec3(cbLight._m0[_1763].xyz), vec3(_554, _555, _556));
    float _1814 = dot(vec3(cbLight._m0[_1800].xyz), vec3(_554, _555, _556));
    float _3923 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
    float _3934 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1819 = (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * 0.3183098733425140380859375;
    float _1821 = (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * 0.3183098733425140380859375;
    float _1828 = ((cbLight._m0[_1780].x * _1786) * _1821) + ((cbLight._m0[_1790].x * _1796) * _1819);
    float _1829 = ((_1786 * cbLight._m0[_1780].y) * _1821) + ((_1796 * cbLight._m0[_1790].y) * _1819);
    float _1830 = ((_1786 * cbLight._m0[_1780].z) * _1821) + ((_1796 * cbLight._m0[_1790].z) * _1819);
    uvec4 _1834 = floatBitsToUint(cbLight._m0[_1763 + 12u]);
    bool _1836 = _1834.x == 0u;
    float _1847;
    float _1849;
    float _1851;
    if (_1836)
    {
        _1847 = _1828;
        _1849 = _1829;
        _1851 = _1830;
    }
    else
    {
        uint _1855 = _1763 + 6u;
        float _1871 = (dot(vec3(cbLight._m0[_1763 + 2u].xyz), vec3(_554, _555, _556)) * 0.5) + 0.5;
        float _1872 = _1871 * _1871;
        float _3945 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
        float _1873 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1874 = isnan(1.0) ? _1778 : (isnan(_1778) ? 1.0 : min(_1778, 1.0));
        _1847 = (((cbLight._m0[_1855].x * 0.3183098733425140380859375) * _1873) * _1874) + _1828;
        _1849 = (((cbLight._m0[_1855].y * 0.3183098733425140380859375) * _1873) * _1874) + _1829;
        _1851 = (((cbLight._m0[_1855].z * 0.3183098733425140380859375) * _1873) * _1874) + _1830;
    }
    bool _1854 = _1834.y == 0u;
    float _1892;
    float _1894;
    float _1896;
    if (_1854)
    {
        _1892 = _1847;
        _1894 = _1849;
        _1896 = _1851;
    }
    else
    {
        uint _2062 = _1763 + 7u;
        float _2078 = (dot(vec3(cbLight._m0[_1763 + 3u].xyz), vec3(_554, _555, _556)) * 0.5) + 0.5;
        float _2079 = _2078 * _2078;
        float _3961 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2080 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _2081 = isnan(1.0) ? _1779 : (isnan(_1779) ? 1.0 : min(_1779, 1.0));
        _1892 = (((cbLight._m0[_2062].x * 0.3183098733425140380859375) * _2080) * _2081) + _1847;
        _1894 = (((cbLight._m0[_2062].y * 0.3183098733425140380859375) * _2080) * _2081) + _1849;
        _1896 = (((cbLight._m0[_2062].z * 0.3183098733425140380859375) * _2080) * _2081) + _1851;
    }
    uint _1899 = _1763 + 8u;
    float _1912 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1763].w)) * _557) * 0.949999988079071044921875);
    float _1913 = _1912 * _1912;
    float _1914 = cbLight._m0[_1763].x + _634;
    float _1915 = cbLight._m0[_1763].y + _635;
    float _1916 = cbLight._m0[_1763].z + _636;
    float _1920 = inversesqrt(dot(vec3(_1914, _1915, _1916), vec3(_1914, _1915, _1916)));
    float _1921 = _1920 * _1914;
    float _1922 = _1920 * _1915;
    float _1923 = _1920 * _1916;
    float _1924 = dot(vec3(_554, _555, _556), vec3(cbLight._m0[_1763].xyz));
    float _3977 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1927 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _3988 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _1928 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _1929 = dot(vec3(_554, _555, _556), vec3(_1921, _1922, _1923));
    float _3999 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
    float _1932 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _1933 = dot(vec3(cbLight._m0[_1763].xyz), vec3(_1921, _1922, _1923));
    float _4010 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _1937 = _1913 * _1913;
    float _1941 = ((_1932 * _1932) * (_1937 + (-1.0))) + 1.0;
    float _1949 = exp2(log2(1.0 - (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0)))) * 5.0);
    float _1950 = 0.959999978542327880859375 - _701;
    float _1952 = 0.959999978542327880859375 - _702;
    float _1953 = 0.959999978542327880859375 - _703;
    float _1960 = 1.0 - _1913;
    float _1971 = (0.5 / (((_1928 * ((_1927 * _1960) + _1913)) + 9.9999999392252902907785028219223e-09) + (((_1928 * _1960) + _1913) * _1927))) * _1927;
    float _4021 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _1973 = (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_1937 / ((_1941 * _1941) * 3.141590118408203125));
    uint _1984 = _1763 + 9u;
    float _1995 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1800].w)) * _557) * 0.949999988079071044921875);
    float _1996 = _1995 * _1995;
    float _1997 = cbLight._m0[_1800].x + _634;
    float _1998 = cbLight._m0[_1800].y + _635;
    float _1999 = cbLight._m0[_1800].z + _636;
    float _2003 = inversesqrt(dot(vec3(_1997, _1998, _1999), vec3(_1997, _1998, _1999)));
    float _2004 = _2003 * _1997;
    float _2005 = _2003 * _1998;
    float _2006 = _2003 * _1999;
    float _2007 = dot(vec3(_554, _555, _556), vec3(cbLight._m0[_1800].xyz));
    float _4032 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2010 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _2011 = dot(vec3(_554, _555, _556), vec3(_2004, _2005, _2006));
    float _4043 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2014 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _2015 = dot(vec3(cbLight._m0[_1800].xyz), vec3(_2004, _2005, _2006));
    float _4054 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2019 = _1996 * _1996;
    float _2023 = ((_2014 * _2014) * (_2019 + (-1.0))) + 1.0;
    float _2030 = exp2(log2(1.0 - (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0)))) * 5.0);
    float _2037 = 1.0 - _1996;
    float _2047 = (0.5 / (((_1928 * ((_2010 * _2037) + _1996)) + 9.9999999392252902907785028219223e-09) + (((_1928 * _2037) + _1996) * _2010))) * _2010;
    float _4065 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2049 = (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_2019 / ((_2023 * _2023) * 3.141590118408203125));
    float _2059 = (((((_2030 * _1950) + _704) * cbLight._m0[_1984].x) * _2049) * _1786) + (((((_1949 * _1950) + _704) * cbLight._m0[_1899].x) * _1973) * _1796);
    float _2060 = (((((_2030 * _1952) + _706) * cbLight._m0[_1984].y) * _2049) * _1786) + (((((_1949 * _1952) + _706) * cbLight._m0[_1899].y) * _1973) * _1796);
    float _2061 = (((((_2030 * _1953) + _707) * cbLight._m0[_1984].z) * _2049) * _1786) + (((((_1949 * _1953) + _707) * cbLight._m0[_1899].z) * _1973) * _1796);
    float _2123;
    float _2125;
    float _2127;
    if (_1836)
    {
        _2123 = _2059;
        _2125 = _2060;
        _2127 = _2061;
    }
    else
    {
        uint _2129 = _1763 + 2u;
        uint _2133 = _1763 + 10u;
        float _2147 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2129].w)) * _557) * 0.949999988079071044921875);
        float _2148 = _2147 * _2147;
        float _2149 = cbLight._m0[_2129].x + _634;
        float _2150 = cbLight._m0[_2129].y + _635;
        float _2151 = cbLight._m0[_2129].z + _636;
        float _2155 = inversesqrt(dot(vec3(_2149, _2150, _2151), vec3(_2149, _2150, _2151)));
        float _2156 = _2155 * _2149;
        float _2157 = _2155 * _2150;
        float _2158 = _2155 * _2151;
        float _2159 = dot(vec3(_554, _555, _556), vec3(cbLight._m0[_2129].xyz));
        float _4076 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2162 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _2163 = dot(vec3(_554, _555, _556), vec3(_2156, _2157, _2158));
        float _4087 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
        float _2166 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _2167 = dot(vec3(cbLight._m0[_2129].xyz), vec3(_2156, _2157, _2158));
        float _4098 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
        float _2171 = _2148 * _2148;
        float _2175 = ((_2166 * _2166) * (_2171 + (-1.0))) + 1.0;
        float _2182 = exp2(log2(1.0 - (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) * 5.0);
        float _2189 = 1.0 - _2148;
        float _2199 = (0.5 / (((_1928 * ((_2162 * _2189) + _2148)) + 9.9999999392252902907785028219223e-09) + (((_1928 * _2189) + _2148) * _2162))) * _2162;
        float _4109 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2201 = (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * (_2171 / ((_2175 * _2175) * 3.141590118408203125));
        float _2202 = isnan(1.0) ? _1778 : (isnan(_1778) ? 1.0 : min(_1778, 1.0));
        _2123 = (((((_2182 * _1950) + _704) * cbLight._m0[_2133].x) * _2201) * _2202) + _2059;
        _2125 = (((((_2182 * _1952) + _706) * cbLight._m0[_2133].y) * _2201) * _2202) + _2060;
        _2127 = (((((_2182 * _1953) + _707) * cbLight._m0[_2133].z) * _2201) * _2202) + _2061;
    }
    float _2237;
    float _2239;
    float _2241;
    if (_1854)
    {
        _2237 = _2123;
        _2239 = _2125;
        _2241 = _2127;
    }
    else
    {
        uint _2248 = _1763 + 3u;
        uint _2252 = _1763 + 11u;
        float _2266 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2248].w)) * _557) * 0.949999988079071044921875);
        float _2267 = _2266 * _2266;
        float _2268 = cbLight._m0[_2248].x + _634;
        float _2269 = cbLight._m0[_2248].y + _635;
        float _2270 = cbLight._m0[_2248].z + _636;
        float _2274 = inversesqrt(dot(vec3(_2268, _2269, _2270), vec3(_2268, _2269, _2270)));
        float _2275 = _2274 * _2268;
        float _2276 = _2274 * _2269;
        float _2277 = _2274 * _2270;
        float _2278 = dot(vec3(_554, _555, _556), vec3(cbLight._m0[_2248].xyz));
        float _4125 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        float _2281 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _2282 = dot(vec3(_554, _555, _556), vec3(_2275, _2276, _2277));
        float _4136 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2285 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _2286 = dot(vec3(cbLight._m0[_2248].xyz), vec3(_2275, _2276, _2277));
        float _4147 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        float _2290 = _2267 * _2267;
        float _2294 = ((_2285 * _2285) * (_2290 + (-1.0))) + 1.0;
        float _2301 = exp2(log2(1.0 - (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0)))) * 5.0);
        float _2308 = 1.0 - _2267;
        float _2318 = (0.5 / (((_1928 * ((_2281 * _2308) + _2267)) + 9.9999999392252902907785028219223e-09) + (((_1928 * _2308) + _2267) * _2281))) * _2281;
        float _4158 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        float _2320 = (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_2290 / ((_2294 * _2294) * 3.141590118408203125));
        float _2321 = isnan(1.0) ? _1779 : (isnan(_1779) ? 1.0 : min(_1779, 1.0));
        _2237 = (((((_2301 * _1950) + _704) * cbLight._m0[_2252].x) * _2320) * _2321) + _2123;
        _2239 = (((((_2301 * _1952) + _706) * cbLight._m0[_2252].y) * _2320) * _2321) + _2125;
        _2241 = (((((_2301 * _1953) + _707) * cbLight._m0[_2252].z) * _2320) * _2321) + _2127;
    }
    float _2456;
    float _2458;
    float _2460;
    float _2462;
    float _2464;
    float _2466;
    if (_1761.y == 0u)
    {
        float _2396 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2397 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2396;
        float _2398 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2396;
        float _2399 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2396;
        uvec4 _2411 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2412 = _2411.x;
        uint _2423 = uint((float(_2411.y) * floor(float(uint(cbSceneParam._m0[85u].y * _643) / _2412))) + floor(float(uint(cbSceneParam._m0[85u].x * _642) / _2412)));
        float _2433 = (log2(_2399 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2434 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        uint _2437 = uint(isnan(14.0) ? _2434 : (isnan(_2434) ? 14.0 : min(_2434, 14.0)));
        uvec4 _2442 = texelFetch(g_lightClusterGridBuffer, int(((_2437 << 2u) + (_2423 << 6u)) >> 2u));
        uint _2443 = _2442.x;
        uint _2444 = _2411.z;
        float _2544;
        float _2546;
        float _2548;
        float _2550;
        float _2552;
        float _2554;
        if (((((1u << ((_2444 >> 4u) & 15u)) + 4294967295u) & _2443) == 0u) || ((_2444 & 240u) == 0u))
        {
            _2544 = 0.0;
            _2546 = 0.0;
            _2548 = 0.0;
            _2550 = 0.0;
            _2552 = 0.0;
            _2554 = 0.0;
        }
        else
        {
            float _2545;
            float _2547;
            float _2549;
            float _2551;
            float _2553;
            float _2555;
            float _2689 = 0.0;
            float _2690 = 0.0;
            float _2691 = 0.0;
            float _2692 = 0.0;
            float _2693 = 0.0;
            float _2694 = 0.0;
            uint _2695 = 0u;
            uint _2704;
            bool _2705;
            for (;;)
            {
                _2704 = texelFetch(g_lightClassification, int((((_2437 << 5u) + (_2423 << 9u)) + (_2695 << 2u)) >> 2u)).x;
                _2705 = _2704 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2705)
                {
                    frontier_phi_61_pred = _2689;
                    frontier_phi_61_pred_1 = _2694;
                    frontier_phi_61_pred_2 = _2693;
                    frontier_phi_61_pred_3 = _2692;
                    frontier_phi_61_pred_4 = _2691;
                    frontier_phi_61_pred_5 = _2690;
                }
                else
                {
                    float _2813;
                    float _2814;
                    float _2815;
                    float _2816;
                    float _2817;
                    float _2818;
                    uint _2819;
                    _2813 = _2689;
                    _2814 = _2690;
                    _2815 = _2691;
                    _2816 = _2692;
                    _2817 = _2693;
                    _2818 = _2694;
                    _2819 = _2704;
                    float _2745;
                    float _2746;
                    float _2747;
                    float _2748;
                    float _2749;
                    float _2750;
                    for (;;)
                    {
                        uint _2823 = uint(findLSB(_2819)) + (_2695 << 5u);
                        uint _2820 = (_2819 + 4294967295u) & _2819;
                        uint _2825 = _2823 * 48u;
                        vec4 _2839 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2825)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 3u)).x));
                        uint _2845 = (_2823 * 48u) + 4u;
                        vec4 _2858 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2845)).x, texelFetch(g_PointLightRenderingBuffer, int(_2845 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2845 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2845 + 3u)).x));
                        uint _2864 = (_2823 * 48u) + 8u;
                        vec3 _2875 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2864)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 2u)).x));
                        float _2879 = _2839.x - _2397;
                        float _2880 = _2839.y - _2398;
                        float _2881 = _2839.z - _2399;
                        float _2882 = dot(vec3(_2879, _2880, _2881), vec3(_2879, _2880, _2881));
                        float _2885 = inversesqrt(_2882);
                        float _2886 = _2885 * _2879;
                        float _2887 = _2885 * _2880;
                        float _2888 = _2885 * _2881;
                        float _2889 = dot(vec3(_661, _664, _667), vec3(_2886, _2887, _2888));
                        float _2894 = 1.0 - (_2882 * _2839.w);
                        float _4184 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
                        float _2895 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
                        float _2896 = sqrt(_2882) * _2858.w;
                        float _2899 = 1.39999997615814208984375 / (_2896 + 1.39999997615814208984375);
                        float _2900 = _2899 * _2899;
                        float _2903 = ((1.0 - _2900) * _2889) + _2900;
                        float _2906 = _2896 * _2896;
                        float _2910 = ((isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0))) * _2895) / ((_2906 * 0.699999988079071044921875) + 1.0);
                        float _2914 = (-0.0) - _2397;
                        float _2915 = (-0.0) - _2398;
                        float _2916 = (-0.0) - _2399;
                        float _2920 = inversesqrt(dot(vec3(_2914, _2915, _2916), vec3(_2914, _2915, _2916)));
                        float _2921 = _2920 * _2914;
                        float _2922 = _2920 * _2915;
                        float _2923 = _2920 * _2916;
                        float _2931 = exp2(log2(1.0 / ((_2906 * 3.5) + 5.0)) * 0.25);
                        float _2932 = 1.0 - _736;
                        float _2939 = sqrt(1.0 - ((1.0 - (_2932 * _2932)) * (1.0 - (_2931 * _2931))));
                        float _2940 = _2939 * _2939;
                        float _2941 = _2940 * _2940;
                        float _2942 = _2921 + _2886;
                        float _2943 = _2922 + _2887;
                        float _2944 = _2923 + _2888;
                        float _2948 = inversesqrt(dot(vec3(_2942, _2943, _2944), vec3(_2942, _2943, _2944)));
                        float _2952 = dot(vec3(_661, _664, _667), vec3(_2921, _2922, _2923));
                        float _4200 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
                        float _2955 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
                        float _2956 = dot(vec3(_661, _664, _667), vec3(_2948 * _2942, _2948 * _2943, _2948 * _2944));
                        float _4211 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
                        float _2959 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
                        float _2963 = ((_2959 * _2959) * (_2941 + (-1.0))) + 1.0;
                        float _2964 = _2899 * _2940;
                        float _2965 = _2964 * _2964;
                        float _2968 = ((1.0 - _2965) * _2889) + _2965;
                        float _4222 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
                        float _2969 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
                        float _2970 = 1.0 - _2940;
                        float _2980 = (0.5 / (((_2969 * ((_2955 * _2970) + _2940)) + 9.9999999392252902907785028219223e-09) + (((_2969 * _2970) + _2940) * _2955))) * _2969;
                        float _4233 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
                        float _2991 = (((_2941 * 3.1415927410125732421875) * (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0)))) / ((_2963 * _2963) * ((_2906 * 2.1991131305694580078125) + 3.141590118408203125))) * _2895;
                        _2748 = (_2910 * _2858.x) + _2816;
                        _2749 = (_2910 * _2858.y) + _2817;
                        _2750 = (_2910 * _2858.z) + _2818;
                        _2745 = (_2991 * _2875.x) + _2813;
                        _2746 = (_2991 * _2875.y) + _2814;
                        _2747 = (_2991 * _2875.z) + _2815;
                        if (_2820 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2813 = _2745;
                            _2814 = _2746;
                            _2815 = _2747;
                            _2816 = _2748;
                            _2817 = _2749;
                            _2818 = _2750;
                            _2819 = _2820;
                        }
                    }
                    frontier_phi_61_pred = _2745;
                    frontier_phi_61_pred_1 = _2750;
                    frontier_phi_61_pred_2 = _2749;
                    frontier_phi_61_pred_3 = _2748;
                    frontier_phi_61_pred_4 = _2747;
                    frontier_phi_61_pred_5 = _2746;
                }
                _2545 = frontier_phi_61_pred;
                _2555 = frontier_phi_61_pred_1;
                _2553 = frontier_phi_61_pred_2;
                _2551 = frontier_phi_61_pred_3;
                _2549 = frontier_phi_61_pred_4;
                _2547 = frontier_phi_61_pred_5;
                uint _2696 = _2695 + 1u;
                if (_2696 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2689 = _2545;
                    _2690 = _2547;
                    _2691 = _2549;
                    _2692 = _2551;
                    _2693 = _2553;
                    _2694 = _2555;
                    _2695 = _2696;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2544 = _2545;
            _2546 = _2547;
            _2548 = _2549;
            _2550 = _2551;
            _2552 = _2553;
            _2554 = _2555;
        }
        uvec4 _2558 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2559 = _2558.z;
        uint _2561 = (_2559 >> 8u) & 15u;
        float _2657;
        float _2659;
        float _2661;
        float _2663;
        float _2665;
        float _2667;
        if (((4294967295u << _2561) & _2443) == 0u)
        {
            _2657 = _2544;
            _2659 = _2546;
            _2661 = _2548;
            _2663 = _2550;
            _2665 = _2552;
            _2667 = _2554;
        }
        else
        {
            float _2682 = inversesqrt(dot(vec3(_2397, _2398, _2399), vec3(_2397, _2398, _2399)));
            float _2683 = _2682 * _2397;
            float _2684 = _2682 * _2398;
            float _2685 = _2682 * _2399;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2561 < ((_2559 >> 12u) & 15u))
            {
                float _2658;
                float _2660;
                float _2662;
                float _2664;
                float _2666;
                float _2668;
                float _2796 = _2544;
                float _2797 = _2546;
                float _2798 = _2548;
                float _2799 = _2550;
                float _2800 = _2552;
                float _2801 = _2554;
                uint _2802 = _2561;
                uint _2811;
                bool _2812;
                for (;;)
                {
                    _2811 = texelFetch(g_lightClassification, int((((_2437 << 5u) + (_2423 << 9u)) + (_2802 << 2u)) >> 2u)).x;
                    _2812 = _2811 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2812)
                    {
                        frontier_phi_67_pred = _2799;
                        frontier_phi_67_pred_1 = _2800;
                        frontier_phi_67_pred_2 = _2801;
                        frontier_phi_67_pred_3 = _2798;
                        frontier_phi_67_pred_4 = _2797;
                        frontier_phi_67_pred_5 = _2796;
                    }
                    else
                    {
                        float _2996;
                        float _2997;
                        float _2998;
                        float _2999;
                        float _3000;
                        float _3001;
                        float _3289;
                        float _3290;
                        float _3291;
                        float _3292;
                        float _3293;
                        float _3294;
                        float _3009 = _2796;
                        float _3010 = _2797;
                        float _3011 = _2798;
                        float _3012 = _2799;
                        float _3013 = _2800;
                        float _3014 = _2801;
                        uint _3015 = _2811;
                        uint _3016;
                        vec4 _3041;
                        float _3042;
                        vec4 _3057;
                        vec3 _3069;
                        vec4 _3084;
                        vec4 _3099;
                        float _3145;
                        bool _3146;
                        for (;;)
                        {
                            uint _3026 = ((_2802 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3015));
                            _3016 = (_3015 + 4294967295u) & _3015;
                            uint _3028 = _3026 * 40u;
                            _3041 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3028)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 3u)).x));
                            _3042 = _3041.w;
                            uint _3044 = (_3026 * 40u) + 4u;
                            _3057 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3044)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 3u)).x));
                            uint _3059 = (_3026 * 40u) + 8u;
                            _3069 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3059)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 2u)).x));
                            uint _3071 = (_3026 * 40u) + 16u;
                            _3084 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3071)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 3u)).x));
                            uint _3086 = (_3026 * 40u) + 20u;
                            _3099 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 3u)).x));
                            uint _3101 = (_3026 * 40u) + 24u;
                            vec4 _3114 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3101)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 3u)).x));
                            uint _3120 = (_3026 * 40u) + 28u;
                            vec4 _3133 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3120)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 3u)).x));
                            _3145 = fma(_2399, _3133.z, fma(_2398, _3133.y, _3133.x * _2397)) + _3133.w;
                            _3146 = !((fma(_2399, _3114.z, fma(_2398, _3114.y, _3114.x * _2397)) + _3114.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3146)
                            {
                                float _3173 = _3041.x - _2397;
                                float _3174 = _3041.y - _2398;
                                float _3175 = _3041.z - _2399;
                                float _3176 = dot(vec3(_3173, _3174, _3175), vec3(_3173, _3174, _3175));
                                float _3179 = inversesqrt(_3176);
                                float _3180 = _3179 * _3173;
                                float _3181 = _3179 * _3174;
                                float _3182 = _3179 * _3175;
                                float _3186 = 1.0 - (_3176 / (_3042 * _3042));
                                float _4244 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
                                float _3187 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
                                float _3191 = sqrt(_3176) * _3057.w;
                                float _3193 = 1.39999997615814208984375 / (_3191 + 1.39999997615814208984375);
                                float _3194 = _3193 * _3193;
                                float _3197 = ((1.0 - _3194) * dot(vec3(_3180, _3181, _3182), vec3(_661, _664, _667))) + _3194;
                                float _3200 = _3191 * _3191;
                                float _3204 = (fma(_2399, _3084.z, fma(_2398, _3084.y, _3084.x * _2397)) + _3084.w) / _3145;
                                float _3205 = (fma(_2399, _3099.z, fma(_2398, _3099.y, _3099.x * _2397)) + _3099.w) / _3145;
                                float _3209 = 1.0 - dot(vec2(_3204, _3205), vec2(_3204, _3205));
                                float _4260 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                                float _3210 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
                                float _3211 = _3210 * (((isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0))) * _3187) / ((_3200 * 0.699999988079071044921875) + 1.0));
                                float _3223 = exp2(log2(1.0 / ((_3200 * 3.5) + 5.0)) * 0.25);
                                float _3224 = 1.0 - _736;
                                float _3231 = sqrt(1.0 - ((1.0 - (_3224 * _3224)) * (1.0 - (_3223 * _3223))));
                                float _3232 = _3231 * _3231;
                                float _3233 = _3232 * _3232;
                                float _3234 = _3180 - _2683;
                                float _3235 = _3181 - _2684;
                                float _3236 = _3182 - _2685;
                                float _3240 = inversesqrt(dot(vec3(_3234, _3235, _3236), vec3(_3234, _3235, _3236)));
                                float _3244 = dot(vec3(_661, _664, _667), vec3((-0.0) - _2683, (-0.0) - _2684, (-0.0) - _2685));
                                float _4271 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                                float _3247 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
                                float _3248 = dot(vec3(_661, _664, _667), vec3(_3240 * _3234, _3240 * _3235, _3240 * _3236));
                                float _4282 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                                float _3251 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
                                float _3255 = ((_3251 * _3251) * (_3233 + (-1.0))) + 1.0;
                                float _3256 = _3193 * _3232;
                                float _3257 = _3256 * _3256;
                                float _3263 = ((1.0 - _3257) * dot(vec3(_661, _664, _667), vec3(_3180, _3181, _3182))) + _3257;
                                float _4293 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                                float _3264 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
                                float _3265 = 1.0 - _3232;
                                float _3275 = (0.5 / (((_3264 * ((_3247 * _3265) + _3232)) + 9.9999999392252902907785028219223e-09) + (((_3264 * _3265) + _3232) * _3247))) * _3264;
                                float _4304 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                                float _3285 = (_3210 * _3187) * (((_3233 * 3.1415927410125732421875) * (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0)))) / ((_3255 * _3255) * ((_3200 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3285 * _3069.x;
                                frontier_phi_73_pred_1 = _3285 * _3069.y;
                                frontier_phi_73_pred_2 = _3211 * _3057.z;
                                frontier_phi_73_pred_3 = _3211 * _3057.y;
                                frontier_phi_73_pred_4 = _3211 * _3057.x;
                                frontier_phi_73_pred_5 = _3285 * _3069.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3289 = frontier_phi_73_pred;
                            _3290 = frontier_phi_73_pred_1;
                            _3294 = frontier_phi_73_pred_2;
                            _3293 = frontier_phi_73_pred_3;
                            _3292 = frontier_phi_73_pred_4;
                            _3291 = frontier_phi_73_pred_5;
                            _2999 = _3292 + _3012;
                            _3000 = _3293 + _3013;
                            _3001 = _3294 + _3014;
                            _2996 = _3289 + _3009;
                            _2997 = _3290 + _3010;
                            _2998 = _3291 + _3011;
                            if (_3016 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3009 = _2996;
                                _3010 = _2997;
                                _3011 = _2998;
                                _3012 = _2999;
                                _3013 = _3000;
                                _3014 = _3001;
                                _3015 = _3016;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2999;
                        frontier_phi_67_pred_1 = _3000;
                        frontier_phi_67_pred_2 = _3001;
                        frontier_phi_67_pred_3 = _2998;
                        frontier_phi_67_pred_4 = _2997;
                        frontier_phi_67_pred_5 = _2996;
                    }
                    _2664 = frontier_phi_67_pred;
                    _2666 = frontier_phi_67_pred_1;
                    _2668 = frontier_phi_67_pred_2;
                    _2662 = frontier_phi_67_pred_3;
                    _2660 = frontier_phi_67_pred_4;
                    _2658 = frontier_phi_67_pred_5;
                    uint _2803 = _2802 + 1u;
                    if (_2803 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2796 = _2658;
                        _2797 = _2660;
                        _2798 = _2662;
                        _2799 = _2664;
                        _2800 = _2666;
                        _2801 = _2668;
                        _2802 = _2803;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2666;
                frontier_phi_55_56_ladder_1 = _2668;
                frontier_phi_55_56_ladder_2 = _2664;
                frontier_phi_55_56_ladder_3 = _2662;
                frontier_phi_55_56_ladder_4 = _2660;
                frontier_phi_55_56_ladder_5 = _2658;
            }
            else
            {
                frontier_phi_55_56_ladder = _2552;
                frontier_phi_55_56_ladder_1 = _2554;
                frontier_phi_55_56_ladder_2 = _2550;
                frontier_phi_55_56_ladder_3 = _2548;
                frontier_phi_55_56_ladder_4 = _2546;
                frontier_phi_55_56_ladder_5 = _2544;
            }
            _2657 = frontier_phi_55_56_ladder_5;
            _2659 = frontier_phi_55_56_ladder_4;
            _2661 = frontier_phi_55_56_ladder_3;
            _2663 = frontier_phi_55_56_ladder_2;
            _2665 = frontier_phi_55_56_ladder;
            _2667 = frontier_phi_55_56_ladder_1;
        }
        float _2672 = isnan(1.0) ? _720 : (isnan(_720) ? 1.0 : min(_720, 1.0));
        _2456 = (_2672 * _2663) + _1892;
        _2458 = (_2672 * _2665) + _1894;
        _2460 = (_2672 * _2667) + _1896;
        _2462 = ((_2657 * _704) * _2672) + _2237;
        _2464 = ((_2659 * _706) * _2672) + _2239;
        _2466 = ((_2661 * _707) * _2672) + _2241;
    }
    else
    {
        _2456 = _1892;
        _2458 = _1894;
        _2460 = _1896;
        _2462 = _2237;
        _2464 = _2239;
        _2466 = _2241;
    }
    float _4320 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _4331 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _4342 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    uint _2486 = _234 + 6u;
    float _2494 = _642 / cbSceneParam._m0[86u].x;
    float _2495 = _643 / cbSceneParam._m0[86u].y;
    vec4 _2509 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2494, _2495, (log2((isnan(cbSceneParam._m0[77u].w) ? _576 : (isnan(_576) ? cbSceneParam._m0[77u].w : min(_576, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2511 = _2509.x;
    float _2512 = _2509.y;
    float _2513 = _2509.z;
    float _2514 = _2509.w;
    float _2607;
    float _2609;
    float _2611;
    float _2613;
    if (_576 > cbSceneParam._m0[78u].w)
    {
        float _2569 = isnan(_576) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _576 : min(cbSceneParam._m0[80u].w, _576));
        float _2570 = _2569 / _576;
        float _2581 = _2570 * _627;
        float _2582 = _628 * _2570;
        float _2583 = (-0.0) - _2582;
        float _2585 = _2570 * _629;
        float _2587 = (cbSceneParam._m0[77u].w * _2583) / _2569;
        float _2588 = _2587 + cbSceneParam._m0[79u].w;
        float _2589 = cbSceneParam._m0[79u].w - _2582;
        float _2595 = sqrt(((_2581 * _2581) + (_2582 * _2582)) + (_2585 * _2585));
        float _2598 = (1.0 - (cbSceneParam._m0[77u].w / _2569)) * _2595;
        float _2603 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2605 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2758;
        if (abs((_2583 - _2587) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2758 = ((((_2588 > 0.0) ? exp2(_2603 * _2588) : (2.0 - exp2(_2605 * _2588))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2598;
        }
        else
        {
            float _2718 = 1.0 / cbSceneParam._m0[80u].x;
            float _2719 = isnan(_2589) ? _2588 : (isnan(_2588) ? _2589 : max(_2588, _2589));
            float _2720 = isnan(_2589) ? _2588 : (isnan(_2588) ? _2589 : min(_2588, _2589));
            float _2729 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : min(_2719, 0.0));
            float _2730 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : min(_2720, 0.0));
            _2758 = ((abs(_2595 / _2583) * cbSceneParam._m0[80u].y) * ((((_2729 - _2730) * 2.0) - ((exp2(_2603 * (isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0)))) - exp2(_2603 * (isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0))))) * _2718)) - ((exp2(_2605 * _2729) - exp2(_2605 * _2730)) * _2718))) + (_2598 * cbSceneParam._m0[80u].z);
        }
        vec4 _2760 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2494, _2495, 1.0), 0.0);
        float _2769 = exp2((_2758 * (-1.44269502162933349609375)) * (1.0 - _2760.w));
        float _2770 = log2(_2769);
        float _2786 = log2(_2514);
        _2607 = (exp2(_2786 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2770 * cbSceneParam._m0[78u].x)) * _2760.x) / cbSceneParam._m0[78u].x)) + _2511;
        _2609 = (exp2(_2786 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2770 * cbSceneParam._m0[78u].y)) * _2760.y) / cbSceneParam._m0[78u].y)) + _2512;
        _2611 = (exp2(_2786 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2770 * cbSceneParam._m0[78u].z)) * _2760.z) / cbSceneParam._m0[78u].z)) + _2513;
        _2613 = _2769 * _2514;
    }
    else
    {
        _2607 = _2511;
        _2609 = _2512;
        _2611 = _2513;
        _2613 = _2514;
    }
    float _2625 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2626 = _2625 == 3.0;
    float _2627 = log2(_2613);
    float _2634 = exp2(_2627 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_2456 + ((isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))) * _720))) + ((_2462 + ((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _1528)) * cbPerFrame._m0[3u].x));
    float _2635 = exp2(_2627 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (_2458 + ((isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))) * _720))) + ((_2464 + ((isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))) * _1528)) * cbPerFrame._m0[3u].x));
    float _2636 = exp2(_2627 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_2460 + ((isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0))) * _720))) + ((_2466 + ((isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0))) * _1528)) * cbPerFrame._m0[3u].x));
    float _2645 = (_2625 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2645 * (_2626 ? _2634 : (_2634 + (cbSceneParam._m0[72u].w * _2607)));
    SV_Target.y = _2645 * (_2626 ? _2635 : (_2635 + (cbSceneParam._m0[72u].w * _2609)));
    SV_Target.z = _2645 * (_2626 ? _2636 : (_2636 + (cbSceneParam._m0[72u].w * _2611)));
    SV_Target.w = cbInstanceData._m0[_2486].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2486].w;
}


