#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1362;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _238 = _237 * _229;
    float _239 = _237 * _230;
    float _240 = _237 * _231;
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = _244 * NORMAL.x;
    float _246 = _244 * NORMAL.y;
    float _247 = _244 * NORMAL.z;
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252 = _251 * TANGENT.x;
    float _253 = _251 * TANGENT.y;
    float _254 = _251 * TANGENT.z;
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _362 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _364 = _362.x;
    float _376 = dot(vec4(_364, _362.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _393 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_364 - _376) * cbMtdParam._m0[24u].y) + _376) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3712 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _394 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
    float _401 = (_394 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _402 = (_394 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _403 = (_394 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _421 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _276) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _277) + cbTextureTilingScale._m0[20u].w));
    vec4 _448 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _465 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _467 = _465.x;
    float _468 = _465.y;
    float _469 = _465.z;
    float _478 = ((_448.z - _469) * _394) + _469;
    float _481 = ((((_448.x - _467) * _394) + _467) * 2.0) + (-1.0);
    float _482 = ((((_448.y - _468) * _394) + _468) * 2.0) + (-1.0);
    float _483 = dot(vec2(_481, _482), vec2(_481, _482));
    float _3723 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _488 = sqrt(1.0 - (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))));
    float _491 = _481 + ((((_421.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _492 = _482 + ((((_421.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _495 = fma(_488, _245, fma(_492, _252, _491 * _238));
    float _498 = fma(_488, _246, fma(_492, _253, _491 * _239));
    float _501 = fma(_488, _247, fma(_492, _254, _491 * _240));
    float _505 = inversesqrt(dot(vec3(_495, _498, _501), vec3(_495, _498, _501)));
    vec4 _521 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _547 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _549 = _547.x;
    float _550 = 1.0 - _549;
    float _554 = ((_549 - _550) * cbMtdParam._m0[24u].z) + _550;
    float _556 = (cbMtdParam._m0[19u].x + dot(vec4(_505 * _495, _505 * _498, _505 * _501, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_554 * cbMtdParam._m0[21u].z);
    float _3734 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _557 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _559 = (-0.0) - cbMtdParam._m0[24u].x;
    float _561 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _562 = isnan(1.0) ? _561 : (isnan(_561) ? 1.0 : min(_561, 1.0));
    float _569 = _557 - ((_557 * TEXCOORD_8.x) * _562);
    float _570 = _557 - ((_557 * TEXCOORD_8.y) * _562);
    float _571 = _557 - ((_557 * TEXCOORD_8.z) * _562);
    float _578 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _582 = ((isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : min(_578, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _590 = (_582 - (((_554 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _582))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3765 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _591 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
    float _595 = ((_569 * (cbMtdParam._m0[17u].x - _401)) * _591) + _401;
    float _596 = ((_570 * (cbMtdParam._m0[17u].y - _402)) * _591) + _402;
    float _597 = ((_571 * (cbMtdParam._m0[17u].z - _403)) * _591) + _403;
    vec4 _609 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _611 = _609.x;
    float _612 = 1.0 - _611;
    float _639 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_611 - _612) * cbMtdParam._m0[24u].w) + _612) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3776 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _640 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _648 = ((((cbMtdParam._m0[10u].x - _595) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _640) + _595;
    float _649 = ((((cbMtdParam._m0[10u].y - _596) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _640) + _596;
    float _650 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _597)) * _640) + _597;
    vec4 _676 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _678 = _676.x;
    float _696 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _276) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _277) + cbTextureTilingScale._m0[9u].w)).x - _678) * _394) + _678;
    float _700 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _696) * cbMtdParam._m0[19u].z) + _696;
    float _703 = _700 - ((_591 * _569) * _700);
    float _705 = _703 - (_703 * _640);
    float _710 = (((_421.z - _478) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _478;
    vec4 _724 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _731 = (_724.x * 2.0) + (-1.0);
    float _732 = (_724.y * 2.0) + (-1.0);
    float _733 = dot(vec2(_731, _732), vec2(_731, _732));
    float _3787 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _742 = (((_724.z - _710) * _569) * _591) + _710;
    float _745 = ((cbMtdParam._m0[23u].y - _742) * _640) + _742;
    vec4 _764 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _770 = (_764.x * 2.0) + (-1.0);
    float _771 = (_764.y * 2.0) + (-1.0);
    float _772 = dot(vec2(_770, _771), vec2(_770, _771));
    float _3798 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _792 = (((cbMtdParam._m0[21u].x * _491) + ((_731 - _491) * _569)) * _591) + _491;
    float _793 = (((cbMtdParam._m0[21u].x * _492) + ((_732 - _492) * _570)) * _591) + _492;
    float _794 = (((sqrt(1.0 - (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0)))) - _488) * _571) * _591) + _488;
    float _805 = (((_770 - _792) + (_792 * cbMtdParam._m0[22u].z)) * _640) + _792;
    float _806 = (((_771 - _793) + (_793 * cbMtdParam._m0[22u].z)) * _640) + _793;
    float _807 = ((sqrt(1.0 - (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0)))) - _794) * _640) + _794;
    float _809 = cbMtdParam._m0[22u].x + _521.w;
    float _812 = fma(_807, _245, fma(_806, _252, _805 * _238));
    float _815 = fma(_807, _246, fma(_806, _253, _805 * _239));
    float _818 = fma(_807, _247, fma(_806, _254, _805 * _240));
    float _822 = inversesqrt(dot(vec3(_812, _815, _818), vec3(_812, _815, _818)));
    float _823 = _822 * _812;
    float _824 = _822 * _815;
    float _825 = _822 * _818;
    float _3809 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _826 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _3820 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _3831 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _3842 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _3853 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _3864 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _831 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
    float _845 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _885 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _895 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _885);
    float _896 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _885);
    float _897 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _885);
    float _901 = inversesqrt(dot(vec3(_895, _896, _897), vec3(_895, _896, _897)));
    float _902 = _895 * _901;
    float _903 = _896 * _901;
    float _904 = _897 * _901;
    float _910 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _911 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _929 = fma(_825, cbSceneParam._m0[5u].z, fma(_824, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _823));
    float _932 = fma(_825, cbSceneParam._m0[6u].z, fma(_824, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _823));
    float _935 = fma(_825, cbSceneParam._m0[7u].z, fma(_824, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _823));
    uint _949 = (_257 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _955 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0)))) * cbInstanceData._m0[_949].x;
    float _956 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0)))) * cbInstanceData._m0[_949].y;
    float _957 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0)))) * cbInstanceData._m0[_949].z;
    float _3875 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _958 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
    float _3886 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _959 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _3897 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _960 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _961 = 1.0 - _831;
    float _962 = _958 * _961;
    float _963 = _959 * _961;
    float _964 = _960 * _961;
    float _969 = (_958 + (-0.039999999105930328369140625)) * _831;
    float _970 = (_959 + (-0.039999999105930328369140625)) * _831;
    float _971 = (_960 + (-0.039999999105930328369140625)) * _831;
    float _972 = _969 + 0.039999999105930328369140625;
    float _974 = _970 + 0.039999999105930328369140625;
    float _975 = _971 + 0.039999999105930328369140625;
    vec4 _984 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _910, cbSceneParam._m0[86u].y * _911));
    float _988 = ((isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * TEXCOORD_5.w) * _984.x;
    float _989 = dot(vec3(_823, _824, _825), vec3(_902, _903, _904));
    float _992 = _989 * 2.0;
    float _996 = (_992 * _823) - _902;
    float _997 = (_992 * _824) - _903;
    float _998 = (_992 * _825) - _904;
    float _1002 = abs(dot(vec3(_902, _903, _904), vec3(_823, _824, _825)));
    float _3908 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _1004 = sqrt(_826);
    float _1017 = exp2((_1004 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1004 * 3.0));
    float _1023 = (1.0 - _1017) * ((_1004 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1024 = _1017 * _1004;
    float _1052 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1056 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1060 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1361;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1086 = fma(_1060, cbModelParam._m0[26u].z, fma(_1056, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1052));
        float _1090 = fma(_1060, cbModelParam._m0[27u].z, fma(_1056, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1052));
        float _1094 = fma(_1060, cbModelParam._m0[28u].z, fma(_1056, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1052));
        float _1119 = _1052 + _823;
        float _1120 = _1056 + _824;
        float _1121 = _1060 + _825;
        float _1131 = fma(_1121, cbModelParam._m0[26u].z, fma(_1120, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1119)) - _1086;
        float _1132 = fma(_1121, cbModelParam._m0[27u].z, fma(_1120, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1119)) - _1090;
        float _1133 = fma(_1121, cbModelParam._m0[28u].z, fma(_1120, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1119)) - _1094;
        float _1137 = inversesqrt(dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133)));
        float _1150 = ((_1137 * _1131) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1086 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1151 = ((_1137 * _1132) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1090 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1152 = ((_1137 * _1133) / cbModelParam._m0[34u].z) + ((((((_1094 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        vec4 _1162 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        float _1189 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1155.x + (-0.5));
        float _1191 = _1189 * (_1155.y + (-0.5));
        float _1192 = _1189 * (_1155.z + (-0.5));
        float _1199 = exp2((_1162.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1162.x + (-0.5));
        float _1201 = _1199 * (_1162.y + (-0.5));
        float _1202 = _1199 * (_1162.z + (-0.5));
        float _1209 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1169.x + (-0.5));
        float _1211 = _1209 * (_1169.y + (-0.5));
        float _1212 = _1209 * (_1169.z + (-0.5));
        float _1219 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1176.x + (-0.5));
        float _1221 = _1219 * (_1176.y + (-0.5));
        float _1222 = _1219 * (_1176.z + (-0.5));
        float _1223 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1224 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1225 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1226 = _1190 * 0.5;
        float _1227 = _1200 * 0.5;
        float _1228 = _1210 * 0.5;
        float _1229 = dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228));
        float _1234 = (_1229 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1229);
        float _1243 = (dot(vec3(_823, _824, _825), vec3(_1234 * _1226, _1234 * _1227, _1234 * _1228)) + 1.0) * 0.5;
        float _3934 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1253 = sqrt(((_1227 * _1227) + (_1226 * _1226)) + (_1228 * _1228)) / (_1223 + 9.9999997473787516355514526367188e-06);
        float _3945 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1255 = _1254 * 2.0;
        float _1259 = (1.0 - _1254) / (_1254 + 1.0);
        float _3956 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1269 = ((((1.0 - _1260) * (_1255 + 2.0)) * exp2(log2(isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * (_1255 + 1.0))) + _1260) * _1223;
        float _1270 = _1191 * 0.5;
        float _1271 = _1201 * 0.5;
        float _1272 = _1211 * 0.5;
        float _1273 = dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272));
        float _1278 = (_1273 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1273);
        float _1286 = (dot(vec3(_823, _824, _825), vec3(_1278 * _1270, _1278 * _1271, _1278 * _1272)) + 1.0) * 0.5;
        float _3967 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1295 = sqrt(((_1271 * _1271) + (_1270 * _1270)) + (_1272 * _1272)) / (_1224 + 9.9999997473787516355514526367188e-06);
        float _3978 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1297 = _1296 * 2.0;
        float _1301 = (1.0 - _1296) / (_1296 + 1.0);
        float _3989 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1311 = ((((1.0 - _1302) * (_1297 + 2.0)) * exp2(log2(isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * (_1297 + 1.0))) + _1302) * _1224;
        float _1312 = _1192 * 0.5;
        float _1313 = _1202 * 0.5;
        float _1314 = _1212 * 0.5;
        float _1315 = dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314));
        float _1320 = (_1315 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1315);
        float _1328 = (dot(vec3(_823, _824, _825), vec3(_1320 * _1312, _1320 * _1313, _1320 * _1314)) + 1.0) * 0.5;
        float _4000 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1337 = sqrt(((_1313 * _1313) + (_1312 * _1312)) + (_1314 * _1314)) / (_1225 + 9.9999997473787516355514526367188e-06);
        float _4011 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1339 = _1338 * 2.0;
        float _1343 = (1.0 - _1338) / (_1338 + 1.0);
        float _4022 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1353 = ((((1.0 - _1344) * (_1339 + 2.0)) * exp2(log2(isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_1339 + 1.0))) + _1344) * _1225;
        _1361 = _1192;
        _1363 = _1191;
        _1364 = _1190;
        _1365 = _1202;
        _1366 = _1201;
        _1367 = _1200;
        _1368 = _1212;
        _1369 = _1211;
        _1370 = _1210;
        _1371 = _1225;
        _1372 = _1224;
        _1373 = _1223;
        _1374 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)));
        _1375 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)));
        _1376 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)));
    }
    else
    {
        _1361 = _1362;
        _1363 = _1362;
        _1364 = _1362;
        _1365 = _1362;
        _1366 = _1362;
        _1367 = _1362;
        _1368 = _1362;
        _1369 = _1362;
        _1370 = _1362;
        _1371 = _1362;
        _1372 = _1362;
        _1373 = _1362;
        _1374 = 0.0;
        _1375 = 0.0;
        _1376 = 0.0;
    }
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1401 = fma(_1060, cbModelParam._m0[30u].z, fma(_1056, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1052));
        float _1405 = fma(_1060, cbModelParam._m0[31u].z, fma(_1056, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1052));
        float _1409 = fma(_1060, cbModelParam._m0[32u].z, fma(_1056, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1052));
        float _1432 = _1052 + _823;
        float _1433 = _1056 + _824;
        float _1434 = _1060 + _825;
        float _1444 = fma(_1434, cbModelParam._m0[30u].z, fma(_1433, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1432)) - _1401;
        float _1445 = fma(_1434, cbModelParam._m0[31u].z, fma(_1433, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1432)) - _1405;
        float _1446 = fma(_1434, cbModelParam._m0[32u].z, fma(_1433, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1432)) - _1409;
        float _1450 = inversesqrt(dot(vec3(_1444, _1445, _1446), vec3(_1444, _1445, _1446)));
        float _1463 = ((_1450 * _1444) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1401 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1464 = ((_1450 * _1445) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1405 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1465 = ((_1450 * _1446) / cbModelParam._m0[35u].z) + ((((((_1409 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1467 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1463, _1464, _1465), 0.0);
        vec4 _1474 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1463, _1464, _1465), 0.0);
        vec4 _1481 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1463, _1464, _1465), 0.0);
        vec4 _1488 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1463, _1464, _1465), 0.0);
        float _1500 = exp2((_1467.w + (-0.5)) * 20.0) * 2.0;
        float _1501 = _1500 * (_1467.x + (-0.5));
        float _1502 = _1500 * (_1467.y + (-0.5));
        float _1503 = _1500 * (_1467.z + (-0.5));
        float _1510 = exp2((_1474.w + (-0.5)) * 20.0) * 2.0;
        float _1511 = _1510 * (_1474.x + (-0.5));
        float _1512 = _1510 * (_1474.y + (-0.5));
        float _1513 = _1510 * (_1474.z + (-0.5));
        float _1520 = exp2((_1481.w + (-0.5)) * 20.0) * 2.0;
        float _1521 = _1520 * (_1481.x + (-0.5));
        float _1522 = _1520 * (_1481.y + (-0.5));
        float _1523 = _1520 * (_1481.z + (-0.5));
        float _1530 = exp2((_1488.w + (-0.5)) * 20.0) * 2.0;
        float _1531 = _1530 * (_1488.x + (-0.5));
        float _1532 = _1530 * (_1488.y + (-0.5));
        float _1533 = _1530 * (_1488.z + (-0.5));
        float _1534 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1535 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1536 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1537 = _1501 * 0.5;
        float _1538 = _1511 * 0.5;
        float _1539 = _1521 * 0.5;
        float _1540 = dot(vec3(_1537, _1538, _1539), vec3(_1537, _1538, _1539));
        float _1545 = (_1540 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1540);
        float _1553 = (dot(vec3(_823, _824, _825), vec3(_1545 * _1537, _1545 * _1538, _1545 * _1539)) + 1.0) * 0.5;
        float _4063 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1562 = sqrt(((_1538 * _1538) + (_1537 * _1537)) + (_1539 * _1539)) / (_1534 + 9.9999997473787516355514526367188e-06);
        float _4074 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1564 = _1563 * 2.0;
        float _1568 = (1.0 - _1563) / (_1563 + 1.0);
        float _4085 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1578 = ((((1.0 - _1569) * (_1564 + 2.0)) * exp2(log2(isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * (_1564 + 1.0))) + _1569) * _1534;
        float _1579 = _1502 * 0.5;
        float _1580 = _1512 * 0.5;
        float _1581 = _1522 * 0.5;
        float _1582 = dot(vec3(_1579, _1580, _1581), vec3(_1579, _1580, _1581));
        float _1587 = (_1582 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1582);
        float _1595 = (dot(vec3(_823, _824, _825), vec3(_1587 * _1579, _1587 * _1580, _1587 * _1581)) + 1.0) * 0.5;
        float _4096 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1604 = sqrt(((_1580 * _1580) + (_1579 * _1579)) + (_1581 * _1581)) / (_1535 + 9.9999997473787516355514526367188e-06);
        float _4107 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1605 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1606 = _1605 * 2.0;
        float _1610 = (1.0 - _1605) / (_1605 + 1.0);
        float _4118 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1620 = ((((1.0 - _1611) * (_1606 + 2.0)) * exp2(log2(isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (_1606 + 1.0))) + _1611) * _1535;
        float _1621 = _1503 * 0.5;
        float _1622 = _1513 * 0.5;
        float _1623 = _1523 * 0.5;
        float _1624 = dot(vec3(_1621, _1622, _1623), vec3(_1621, _1622, _1623));
        float _1629 = (_1624 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1624);
        float _1637 = (dot(vec3(_823, _824, _825), vec3(_1629 * _1621, _1629 * _1622, _1629 * _1623)) + 1.0) * 0.5;
        float _4129 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1646 = sqrt(((_1622 * _1622) + (_1621 * _1621)) + (_1623 * _1623)) / (_1536 + 9.9999997473787516355514526367188e-06);
        float _4140 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1647 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1648 = _1647 * 2.0;
        float _1652 = (1.0 - _1647) / (_1647 + 1.0);
        float _4151 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1662 = ((((1.0 - _1653) * (_1648 + 2.0)) * exp2(log2(isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_1648 + 1.0))) + _1653) * _1536;
        _1670 = _1503;
        _1671 = _1502;
        _1672 = _1501;
        _1673 = _1513;
        _1674 = _1512;
        _1675 = _1511;
        _1676 = _1523;
        _1677 = _1522;
        _1678 = _1521;
        _1679 = _1536;
        _1680 = _1535;
        _1681 = _1534;
        _1682 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0)));
        _1683 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)));
        _1684 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)));
    }
    else
    {
        _1670 = _1362;
        _1671 = _1362;
        _1672 = _1362;
        _1673 = _1362;
        _1674 = _1362;
        _1675 = _1362;
        _1676 = _1362;
        _1677 = _1362;
        _1678 = _1362;
        _1679 = _1362;
        _1680 = _1362;
        _1681 = _1362;
        _1682 = 0.0;
        _1683 = 0.0;
        _1684 = 0.0;
    }
    float _1694 = (cbModelParam._m0[1u].x * (_1682 - _1374)) + _1374;
    float _1695 = (cbModelParam._m0[1u].x * (_1683 - _1375)) + _1375;
    float _1696 = (cbModelParam._m0[1u].x * (_1684 - _1376)) + _1376;
    float _1717 = fma(_1696, cbSceneParam._m0[89u].z, fma(_1695, cbSceneParam._m0[89u].y, _1694 * cbSceneParam._m0[89u].x));
    float _1720 = fma(_1696, cbSceneParam._m0[90u].z, fma(_1695, cbSceneParam._m0[90u].y, _1694 * cbSceneParam._m0[90u].x));
    float _1723 = fma(_1696, cbSceneParam._m0[91u].z, fma(_1695, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1694));
    float _1738 = _996 * 0.5;
    float _1739 = _997 * 0.5;
    float _1740 = _998 * 0.5;
    float _1741 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1672, _1675, _1678, _1681));
    float _1744 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1671, _1674, _1677, _1680));
    float _1747 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1670, _1673, _1676, _1679));
    float _1781;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1754 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1361, _1365, _1368, _1371));
        float _1758 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1363, _1366, _1369, _1372));
        float _1762 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1364, _1367, _1370, _1373));
        float _1769 = dot(vec4(cbModelParam._m0[39u]), vec4(_1738, _1739, _1740, 1.0));
        _1781 = dot(vec3(isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0)), isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0)), isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1769) ? 0.0 : (isnan(0.0) ? _1769 : max(0.0, _1769))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1781 = 1.0;
    }
    float _1792;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1783 = dot(vec4(cbModelParam._m0[40u]), vec4(_1738, _1739, _1740, 1.0));
        _1792 = dot(vec3(isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0)), isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)), isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1783) ? 0.0 : (isnan(0.0) ? _1783 : max(0.0, _1783))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1792 = 1.0;
    }
    float _1796 = (_1792 * cbModelParam._m0[1u].x) + (_1781 * (1.0 - cbModelParam._m0[1u].x));
    float _1806 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _826);
    float _1807 = isnan(_1806) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1806 : min(cbModelParam._m0[25u].z, _1806));
    float _1888;
    float _1890;
    float _1892;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1855 = fma(_1060, cbModelParam._m0[13u].z, fma(_1056, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1052)) + cbModelParam._m0[13u].w;
        float _1859 = fma(_1060, cbModelParam._m0[14u].z, fma(_1056, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1052)) + cbModelParam._m0[14u].w;
        float _1863 = fma(_1060, cbModelParam._m0[15u].z, fma(_1056, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1052)) + cbModelParam._m0[15u].w;
        float _1866 = fma(_998, cbModelParam._m0[13u].z, fma(_997, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _996));
        float _1869 = fma(_998, cbModelParam._m0[14u].z, fma(_997, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _996));
        float _1872 = fma(_998, cbModelParam._m0[15u].z, fma(_997, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _996));
        float _1900;
        if (_1866 > 0.0)
        {
            _1900 = abs((1.0 - _1855) / _1866);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1855 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1900 = frontier_phi_14_12_ladder;
        }
        float _2124;
        if (_1869 > 0.0)
        {
            _2124 = abs((1.0 - _1859) / _1869);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1859 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2124 = frontier_phi_23_19_ladder;
        }
        float _2381;
        if (_1872 > 0.0)
        {
            _2381 = abs((1.0 - _1863) / _1872);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1872 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1863 + 1.0) / _1872);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2381 = frontier_phi_35_30_ladder;
        }
        float _2383 = isnan(_2124) ? _1900 : (isnan(_1900) ? _2124 : min(_1900, _2124));
        float _2384 = isnan(_2381) ? _2383 : (isnan(_2383) ? _2381 : min(_2383, _2381));
        float _2388 = (_2384 * _1866) + _1855;
        float _2389 = (_2384 * _1869) + _1859;
        float _2390 = (_2384 * _1872) + _1863;
        float _2391 = _2384 * 9.9999997473787516355514526367188e-05;
        float _2393 = (-1.0) - _2391;
        float _2395 = _2391 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2390 > _2395) || ((_2390 < _2393) || ((_2389 > _2395) || ((_2389 < _2393) || ((_2388 < _2393) || (_2388 > _2395))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2518 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2390, cbModelParam._m0[9u].z, fma(_2389, cbModelParam._m0[9u].y, _2388 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2390, cbModelParam._m0[10u].z, fma(_2389, cbModelParam._m0[10u].y, _2388 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2390, cbModelParam._m0[11u].z, fma(_2389, cbModelParam._m0[11u].y, _2388 * cbModelParam._m0[11u].x))), _1807);
            frontier_phi_13_35_ladder = _2518.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2518.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2518.x * cbModelParam._m0[1u].y;
        }
        _1888 = frontier_phi_13_35_ladder_2;
        _1890 = frontier_phi_13_35_ladder_1;
        _1892 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1876 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_996, _997, _998), _1807);
        _1888 = _1876.x * cbModelParam._m0[1u].y;
        _1890 = _1876.y * cbModelParam._m0[1u].y;
        _1892 = _1876.z * cbModelParam._m0[1u].y;
    }
    float _1896 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _826);
    float _1897 = isnan(_1896) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1896 : min(cbModelParam._m0[25u].w, _1896));
    float _1987;
    float _1989;
    float _1991;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1951 = fma(_1060, cbModelParam._m0[21u].z, fma(_1056, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1052)) + cbModelParam._m0[21u].w;
        float _1955 = fma(_1060, cbModelParam._m0[22u].z, fma(_1056, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1052)) + cbModelParam._m0[22u].w;
        float _1959 = fma(_1060, cbModelParam._m0[23u].z, fma(_1056, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1052)) + cbModelParam._m0[23u].w;
        float _1962 = fma(_998, cbModelParam._m0[21u].z, fma(_997, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _996));
        float _1965 = fma(_998, cbModelParam._m0[22u].z, fma(_997, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _996));
        float _1968 = fma(_998, cbModelParam._m0[23u].z, fma(_997, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _996));
        float _2129;
        if (_1962 > 0.0)
        {
            _2129 = abs((1.0 - _1951) / _1962);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1962 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1951 + 1.0) / _1962);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2129 = frontier_phi_25_21_ladder;
        }
        float _2408;
        if (_1965 > 0.0)
        {
            _2408 = abs((1.0 - _1955) / _1965);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1965 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1955 + 1.0) / _1965);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2408 = frontier_phi_37_32_ladder;
        }
        float _2621;
        if (_1968 > 0.0)
        {
            _2621 = abs((1.0 - _1959) / _1968);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1968 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1959 + 1.0) / _1968);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2621 = frontier_phi_46_43_ladder;
        }
        float _2623 = isnan(_2408) ? _2129 : (isnan(_2129) ? _2408 : min(_2129, _2408));
        float _2624 = isnan(_2621) ? _2623 : (isnan(_2623) ? _2621 : min(_2623, _2621));
        float _2628 = (_2624 * _1962) + _1951;
        float _2629 = (_2624 * _1965) + _1955;
        float _2630 = (_2624 * _1968) + _1959;
        float _2631 = _2624 * 9.9999997473787516355514526367188e-05;
        float _2632 = (-1.0) - _2631;
        float _2634 = _2631 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2630 > _2634) || ((_2630 < _2632) || ((_2629 > _2634) || ((_2629 < _2632) || ((_2628 < _2632) || (_2628 > _2634))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2829 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2630, cbModelParam._m0[17u].z, fma(_2629, cbModelParam._m0[17u].y, _2628 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2630, cbModelParam._m0[18u].z, fma(_2629, cbModelParam._m0[18u].y, _2628 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2630, cbModelParam._m0[19u].z, fma(_2629, cbModelParam._m0[19u].y, _2628 * cbModelParam._m0[19u].x))), _1897);
            frontier_phi_22_46_ladder = _2829.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2829.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2829.x * cbModelParam._m0[1u].z;
        }
        _1987 = frontier_phi_22_46_ladder_2;
        _1989 = frontier_phi_22_46_ladder_1;
        _1991 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1971 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_996, _997, _998), _1897);
        _1987 = _1971.x * cbModelParam._m0[1u].z;
        _1989 = _1971.y * cbModelParam._m0[1u].z;
        _1991 = _1971.z * cbModelParam._m0[1u].z;
    }
    float _2004 = (((_1023 * _972) + _1024) * _988) * ((cbModelParam._m0[1u].w * (_1987 - _1888)) + _1888);
    float _2006 = (((_1023 * _974) + _1024) * _988) * ((cbModelParam._m0[1u].w * (_1989 - _1890)) + _1890);
    float _2008 = (((_1023 * _975) + _1024) * _988) * ((cbModelParam._m0[1u].w * (_1991 - _1892)) + _1892);
    float _2011 = fma(_2008, cbSceneParam._m0[89u].z, fma(_2006, cbSceneParam._m0[89u].y, _2004 * cbSceneParam._m0[89u].x));
    float _2014 = fma(_2008, cbSceneParam._m0[90u].z, fma(_2006, cbSceneParam._m0[90u].y, _2004 * cbSceneParam._m0[90u].x));
    float _2017 = fma(_2008, cbSceneParam._m0[91u].z, fma(_2006, cbSceneParam._m0[91u].y, _2004 * cbSceneParam._m0[91u].x));
    vec4 _2025 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_910, _911));
    float _2027 = _2025.w;
    float _2039 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2027);
    float _2040 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2027);
    float _2041 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2027);
    uvec4 _2045 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2047 = _2045.x * 14u;
    uint _2048 = _2047 + 13u;
    float _2055 = _988 + (-1.0);
    float _2060 = (cbLight._m0[_2048].x * _2055) + 1.0;
    float _2061 = (cbLight._m0[_2048].y * _2055) + 1.0;
    float _2062 = (cbLight._m0[_2048].z * _2055) + 1.0;
    float _2063 = (cbLight._m0[_2048].w * _2055) + 1.0;
    uint _2064 = _2047 + 5u;
    float _2070 = isnan(1.0) ? _2061 : (isnan(_2061) ? 1.0 : min(_2061, 1.0));
    uint _2074 = _2047 + 4u;
    float _2083 = isnan(1.0) ? _2060 : (isnan(_2060) ? 1.0 : min(_2060, 1.0));
    uint _2087 = _2047 | 1u;
    float _2098 = dot(vec3(cbLight._m0[_2047].xyz), vec3(_823, _824, _825));
    float _2101 = dot(vec3(cbLight._m0[_2087].xyz), vec3(_823, _824, _825));
    float _4287 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _4298 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2106 = (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * 0.3183098733425140380859375;
    float _2108 = (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * 0.3183098733425140380859375;
    float _2115 = ((cbLight._m0[_2064].x * _2070) * _2108) + (((cbLight._m0[_2074].x * _2039) * _2083) * _2106);
    float _2116 = ((_2070 * cbLight._m0[_2064].y) * _2108) + (((cbLight._m0[_2074].y * _2040) * _2083) * _2106);
    float _2117 = ((_2070 * cbLight._m0[_2064].z) * _2108) + (((cbLight._m0[_2074].z * _2041) * _2083) * _2106);
    uvec4 _2121 = floatBitsToUint(cbLight._m0[_2047 + 12u]);
    bool _2123 = _2121.x == 0u;
    float _2134;
    float _2136;
    float _2138;
    if (_2123)
    {
        _2134 = _2115;
        _2136 = _2116;
        _2138 = _2117;
    }
    else
    {
        uint _2142 = _2047 + 6u;
        float _2158 = (dot(vec3(cbLight._m0[_2047 + 2u].xyz), vec3(_823, _824, _825)) * 0.5) + 0.5;
        float _2159 = _2158 * _2158;
        float _4309 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2160 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _2161 = isnan(1.0) ? _2062 : (isnan(_2062) ? 1.0 : min(_2062, 1.0));
        _2134 = (((cbLight._m0[_2142].x * 0.3183098733425140380859375) * _2160) * _2161) + _2115;
        _2136 = (((cbLight._m0[_2142].y * 0.3183098733425140380859375) * _2160) * _2161) + _2116;
        _2138 = (((cbLight._m0[_2142].z * 0.3183098733425140380859375) * _2160) * _2161) + _2117;
    }
    bool _2141 = _2121.y == 0u;
    float _2179;
    float _2181;
    float _2183;
    if (_2141)
    {
        _2179 = _2134;
        _2181 = _2136;
        _2183 = _2138;
    }
    else
    {
        uint _2352 = _2047 + 7u;
        float _2368 = (dot(vec3(cbLight._m0[_2047 + 3u].xyz), vec3(_823, _824, _825)) * 0.5) + 0.5;
        float _2369 = _2368 * _2368;
        float _4325 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2370 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _2371 = isnan(1.0) ? _2063 : (isnan(_2063) ? 1.0 : min(_2063, 1.0));
        _2179 = (((cbLight._m0[_2352].x * 0.3183098733425140380859375) * _2370) * _2371) + _2134;
        _2181 = (((cbLight._m0[_2352].y * 0.3183098733425140380859375) * _2370) * _2371) + _2136;
        _2183 = (((cbLight._m0[_2352].z * 0.3183098733425140380859375) * _2370) * _2371) + _2138;
    }
    uint _2186 = _2047 + 8u;
    float _2199 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2047].w)) * _826) * 0.949999988079071044921875);
    float _2200 = _2199 * _2199;
    float _2201 = cbLight._m0[_2047].x + _902;
    float _2202 = cbLight._m0[_2047].y + _903;
    float _2203 = cbLight._m0[_2047].z + _904;
    float _2207 = inversesqrt(dot(vec3(_2201, _2202, _2203), vec3(_2201, _2202, _2203)));
    float _2208 = _2207 * _2201;
    float _2209 = _2207 * _2202;
    float _2210 = _2207 * _2203;
    float _2211 = dot(vec3(_823, _824, _825), vec3(cbLight._m0[_2047].xyz));
    float _4341 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2214 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
    float _4352 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _2215 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
    float _2216 = dot(vec3(_823, _824, _825), vec3(_2208, _2209, _2210));
    float _4363 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
    float _2219 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
    float _2220 = dot(vec3(cbLight._m0[_2047].xyz), vec3(_2208, _2209, _2210));
    float _4374 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2224 = _2200 * _2200;
    float _2228 = ((_2219 * _2219) * (_2224 + (-1.0))) + 1.0;
    float _2236 = exp2(log2(1.0 - (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0)))) * 5.0);
    float _2237 = 0.959999978542327880859375 - _969;
    float _2239 = 0.959999978542327880859375 - _970;
    float _2240 = 0.959999978542327880859375 - _971;
    float _2247 = 1.0 - _2200;
    float _2258 = (0.5 / (((_2215 * ((_2214 * _2247) + _2200)) + 9.9999999392252902907785028219223e-09) + (((_2215 * _2247) + _2200) * _2214))) * _2214;
    float _4385 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2260 = (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_2224 / ((_2228 * _2228) * 3.141590118408203125));
    uint _2274 = _2047 + 9u;
    float _2285 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2087].w)) * _826) * 0.949999988079071044921875);
    float _2286 = _2285 * _2285;
    float _2287 = cbLight._m0[_2087].x + _902;
    float _2288 = cbLight._m0[_2087].y + _903;
    float _2289 = cbLight._m0[_2087].z + _904;
    float _2293 = inversesqrt(dot(vec3(_2287, _2288, _2289), vec3(_2287, _2288, _2289)));
    float _2294 = _2293 * _2287;
    float _2295 = _2293 * _2288;
    float _2296 = _2293 * _2289;
    float _2297 = dot(vec3(_823, _824, _825), vec3(cbLight._m0[_2087].xyz));
    float _4396 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
    float _2300 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
    float _2301 = dot(vec3(_823, _824, _825), vec3(_2294, _2295, _2296));
    float _4407 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2304 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
    float _2305 = dot(vec3(cbLight._m0[_2087].xyz), vec3(_2294, _2295, _2296));
    float _4418 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2309 = _2286 * _2286;
    float _2313 = ((_2304 * _2304) * (_2309 + (-1.0))) + 1.0;
    float _2320 = exp2(log2(1.0 - (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0)))) * 5.0);
    float _2327 = 1.0 - _2286;
    float _2337 = (0.5 / (((_2215 * ((_2300 * _2327) + _2286)) + 9.9999999392252902907785028219223e-09) + (((_2215 * _2327) + _2286) * _2300))) * _2300;
    float _4429 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2339 = (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_2309 / ((_2313 * _2313) * 3.141590118408203125));
    float _2349 = (((((_2320 * _2237) + _972) * cbLight._m0[_2274].x) * _2339) * _2070) + ((((cbLight._m0[_2186].x * _2039) * ((_2236 * _2237) + _972)) * _2260) * _2083);
    float _2350 = (((((_2320 * _2239) + _974) * cbLight._m0[_2274].y) * _2339) * _2070) + ((((cbLight._m0[_2186].y * _2040) * ((_2236 * _2239) + _974)) * _2260) * _2083);
    float _2351 = (((((_2320 * _2240) + _975) * cbLight._m0[_2274].z) * _2339) * _2070) + ((((cbLight._m0[_2186].z * _2041) * ((_2236 * _2240) + _975)) * _2260) * _2083);
    float _2413;
    float _2415;
    float _2417;
    if (_2123)
    {
        _2413 = _2349;
        _2415 = _2350;
        _2417 = _2351;
    }
    else
    {
        uint _2419 = _2047 + 2u;
        uint _2423 = _2047 + 10u;
        float _2437 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2419].w)) * _826) * 0.949999988079071044921875);
        float _2438 = _2437 * _2437;
        float _2439 = cbLight._m0[_2419].x + _902;
        float _2440 = cbLight._m0[_2419].y + _903;
        float _2441 = cbLight._m0[_2419].z + _904;
        float _2445 = inversesqrt(dot(vec3(_2439, _2440, _2441), vec3(_2439, _2440, _2441)));
        float _2446 = _2445 * _2439;
        float _2447 = _2445 * _2440;
        float _2448 = _2445 * _2441;
        float _2449 = dot(vec3(_823, _824, _825), vec3(cbLight._m0[_2419].xyz));
        float _4440 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2452 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
        float _2453 = dot(vec3(_823, _824, _825), vec3(_2446, _2447, _2448));
        float _4451 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2456 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _2457 = dot(vec3(cbLight._m0[_2419].xyz), vec3(_2446, _2447, _2448));
        float _4462 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2461 = _2438 * _2438;
        float _2465 = ((_2456 * _2456) * (_2461 + (-1.0))) + 1.0;
        float _2472 = exp2(log2(1.0 - (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0)))) * 5.0);
        float _2479 = 1.0 - _2438;
        float _2489 = (0.5 / (((_2215 * ((_2452 * _2479) + _2438)) + 9.9999999392252902907785028219223e-09) + (((_2215 * _2479) + _2438) * _2452))) * _2452;
        float _4473 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2491 = (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (_2461 / ((_2465 * _2465) * 3.141590118408203125));
        float _2492 = isnan(1.0) ? _2062 : (isnan(_2062) ? 1.0 : min(_2062, 1.0));
        _2413 = (((((_2472 * _2237) + _972) * cbLight._m0[_2423].x) * _2491) * _2492) + _2349;
        _2415 = (((((_2472 * _2239) + _974) * cbLight._m0[_2423].y) * _2491) * _2492) + _2350;
        _2417 = (((((_2472 * _2240) + _975) * cbLight._m0[_2423].z) * _2491) * _2492) + _2351;
    }
    float _2527;
    float _2529;
    float _2531;
    if (_2141)
    {
        _2527 = _2413;
        _2529 = _2415;
        _2531 = _2417;
    }
    else
    {
        uint _2538 = _2047 + 3u;
        uint _2542 = _2047 + 11u;
        float _2556 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2538].w)) * _826) * 0.949999988079071044921875);
        float _2557 = _2556 * _2556;
        float _2558 = cbLight._m0[_2538].x + _902;
        float _2559 = cbLight._m0[_2538].y + _903;
        float _2560 = cbLight._m0[_2538].z + _904;
        float _2564 = inversesqrt(dot(vec3(_2558, _2559, _2560), vec3(_2558, _2559, _2560)));
        float _2565 = _2564 * _2558;
        float _2566 = _2564 * _2559;
        float _2567 = _2564 * _2560;
        float _2568 = dot(vec3(_823, _824, _825), vec3(cbLight._m0[_2538].xyz));
        float _4489 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
        float _2571 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
        float _2572 = dot(vec3(_823, _824, _825), vec3(_2565, _2566, _2567));
        float _4500 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
        float _2575 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _2576 = dot(vec3(cbLight._m0[_2538].xyz), vec3(_2565, _2566, _2567));
        float _4511 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2580 = _2557 * _2557;
        float _2584 = ((_2575 * _2575) * (_2580 + (-1.0))) + 1.0;
        float _2591 = exp2(log2(1.0 - (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0)))) * 5.0);
        float _2598 = 1.0 - _2557;
        float _2608 = (0.5 / (((_2215 * ((_2571 * _2598) + _2557)) + 9.9999999392252902907785028219223e-09) + (((_2215 * _2598) + _2557) * _2571))) * _2571;
        float _4522 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2610 = (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0))) * (_2580 / ((_2584 * _2584) * 3.141590118408203125));
        float _2611 = isnan(1.0) ? _2063 : (isnan(_2063) ? 1.0 : min(_2063, 1.0));
        _2527 = (((((_2591 * _2237) + _972) * cbLight._m0[_2542].x) * _2610) * _2611) + _2413;
        _2529 = (((((_2591 * _2239) + _974) * cbLight._m0[_2542].y) * _2610) * _2611) + _2415;
        _2531 = (((((_2591 * _2240) + _975) * cbLight._m0[_2542].z) * _2610) * _2611) + _2417;
    }
    float _2746;
    float _2748;
    float _2750;
    float _2752;
    float _2754;
    float _2756;
    if (_2045.y == 0u)
    {
        float _2686 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2687 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2686;
        float _2688 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2686;
        float _2689 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2686;
        uvec4 _2701 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2702 = _2701.x;
        uint _2713 = uint((float(_2701.y) * floor(float(uint(cbSceneParam._m0[85u].y * _911) / _2702))) + floor(float(uint(cbSceneParam._m0[85u].x * _910) / _2702)));
        float _2723 = (log2(_2689 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2724 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
        uint _2727 = uint(isnan(14.0) ? _2724 : (isnan(_2724) ? 14.0 : min(_2724, 14.0)));
        uvec4 _2732 = texelFetch(g_lightClusterGridBuffer, int(((_2727 << 2u) + (_2713 << 6u)) >> 2u));
        uint _2733 = _2732.x;
        uint _2734 = _2701.z;
        float _2834;
        float _2836;
        float _2838;
        float _2840;
        float _2842;
        float _2844;
        if (((((1u << ((_2734 >> 4u) & 15u)) + 4294967295u) & _2733) == 0u) || ((_2734 & 240u) == 0u))
        {
            _2834 = 0.0;
            _2836 = 0.0;
            _2838 = 0.0;
            _2840 = 0.0;
            _2842 = 0.0;
            _2844 = 0.0;
        }
        else
        {
            float _2835;
            float _2837;
            float _2839;
            float _2841;
            float _2843;
            float _2845;
            float _2978 = 0.0;
            float _2979 = 0.0;
            float _2980 = 0.0;
            float _2981 = 0.0;
            float _2982 = 0.0;
            float _2983 = 0.0;
            uint _2984 = 0u;
            uint _2993;
            bool _2994;
            for (;;)
            {
                _2993 = texelFetch(g_lightClassification, int((((_2727 << 5u) + (_2713 << 9u)) + (_2984 << 2u)) >> 2u)).x;
                _2994 = _2993 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2994)
                {
                    frontier_phi_61_pred = _2978;
                    frontier_phi_61_pred_1 = _2983;
                    frontier_phi_61_pred_2 = _2982;
                    frontier_phi_61_pred_3 = _2981;
                    frontier_phi_61_pred_4 = _2980;
                    frontier_phi_61_pred_5 = _2979;
                }
                else
                {
                    float _3102;
                    float _3103;
                    float _3104;
                    float _3105;
                    float _3106;
                    float _3107;
                    uint _3108;
                    _3102 = _2978;
                    _3103 = _2979;
                    _3104 = _2980;
                    _3105 = _2981;
                    _3106 = _2982;
                    _3107 = _2983;
                    _3108 = _2993;
                    float _3034;
                    float _3035;
                    float _3036;
                    float _3037;
                    float _3038;
                    float _3039;
                    for (;;)
                    {
                        uint _3112 = uint(findLSB(_3108)) + (_2984 << 5u);
                        uint _3109 = (_3108 + 4294967295u) & _3108;
                        uint _3114 = _3112 * 48u;
                        vec4 _3128 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3114)).x, texelFetch(g_PointLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3114 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3114 + 3u)).x));
                        uint _3134 = (_3112 * 48u) + 4u;
                        vec4 _3147 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3134)).x, texelFetch(g_PointLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3134 + 3u)).x));
                        uint _3153 = (_3112 * 48u) + 8u;
                        vec3 _3164 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3153)).x, texelFetch(g_PointLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3153 + 2u)).x));
                        float _3168 = _3128.x - _2687;
                        float _3169 = _3128.y - _2688;
                        float _3170 = _3128.z - _2689;
                        float _3171 = dot(vec3(_3168, _3169, _3170), vec3(_3168, _3169, _3170));
                        float _3174 = inversesqrt(_3171);
                        float _3175 = _3174 * _3168;
                        float _3176 = _3174 * _3169;
                        float _3177 = _3174 * _3170;
                        float _3178 = dot(vec3(_929, _932, _935), vec3(_3175, _3176, _3177));
                        float _3183 = 1.0 - (_3171 * _3128.w);
                        float _4548 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
                        float _3184 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
                        float _3185 = sqrt(_3171) * _3147.w;
                        float _3188 = 1.39999997615814208984375 / (_3185 + 1.39999997615814208984375);
                        float _3189 = _3188 * _3188;
                        float _3192 = ((1.0 - _3189) * _3178) + _3189;
                        float _3195 = _3185 * _3185;
                        float _3199 = ((isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0))) * _3184) / ((_3195 * 0.699999988079071044921875) + 1.0);
                        float _3203 = (-0.0) - _2687;
                        float _3204 = (-0.0) - _2688;
                        float _3205 = (-0.0) - _2689;
                        float _3209 = inversesqrt(dot(vec3(_3203, _3204, _3205), vec3(_3203, _3204, _3205)));
                        float _3210 = _3209 * _3203;
                        float _3211 = _3209 * _3204;
                        float _3212 = _3209 * _3205;
                        float _3220 = exp2(log2(1.0 / ((_3195 * 3.5) + 5.0)) * 0.25);
                        float _3221 = 1.0 - _1004;
                        float _3228 = sqrt(1.0 - ((1.0 - (_3221 * _3221)) * (1.0 - (_3220 * _3220))));
                        float _3229 = _3228 * _3228;
                        float _3230 = _3229 * _3229;
                        float _3231 = _3210 + _3175;
                        float _3232 = _3211 + _3176;
                        float _3233 = _3212 + _3177;
                        float _3237 = inversesqrt(dot(vec3(_3231, _3232, _3233), vec3(_3231, _3232, _3233)));
                        float _3241 = dot(vec3(_929, _932, _935), vec3(_3210, _3211, _3212));
                        float _4564 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                        float _3244 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
                        float _3245 = dot(vec3(_929, _932, _935), vec3(_3237 * _3231, _3237 * _3232, _3237 * _3233));
                        float _4575 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                        float _3248 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
                        float _3252 = ((_3248 * _3248) * (_3230 + (-1.0))) + 1.0;
                        float _3253 = _3188 * _3229;
                        float _3254 = _3253 * _3253;
                        float _3257 = ((1.0 - _3254) * _3178) + _3254;
                        float _4586 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                        float _3258 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
                        float _3259 = 1.0 - _3229;
                        float _3269 = (0.5 / (((_3258 * ((_3244 * _3259) + _3229)) + 9.9999999392252902907785028219223e-09) + (((_3258 * _3259) + _3229) * _3244))) * _3258;
                        float _4597 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                        float _3280 = (((_3230 * 3.1415927410125732421875) * (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0)))) / ((_3252 * _3252) * ((_3195 * 2.1991131305694580078125) + 3.141590118408203125))) * _3184;
                        _3037 = (_3199 * _3147.x) + _3105;
                        _3038 = (_3199 * _3147.y) + _3106;
                        _3039 = (_3199 * _3147.z) + _3107;
                        _3034 = (_3280 * _3164.x) + _3102;
                        _3035 = (_3280 * _3164.y) + _3103;
                        _3036 = (_3280 * _3164.z) + _3104;
                        if (_3109 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3102 = _3034;
                            _3103 = _3035;
                            _3104 = _3036;
                            _3105 = _3037;
                            _3106 = _3038;
                            _3107 = _3039;
                            _3108 = _3109;
                        }
                    }
                    frontier_phi_61_pred = _3034;
                    frontier_phi_61_pred_1 = _3039;
                    frontier_phi_61_pred_2 = _3038;
                    frontier_phi_61_pred_3 = _3037;
                    frontier_phi_61_pred_4 = _3036;
                    frontier_phi_61_pred_5 = _3035;
                }
                _2835 = frontier_phi_61_pred;
                _2845 = frontier_phi_61_pred_1;
                _2843 = frontier_phi_61_pred_2;
                _2841 = frontier_phi_61_pred_3;
                _2839 = frontier_phi_61_pred_4;
                _2837 = frontier_phi_61_pred_5;
                uint _2985 = _2984 + 1u;
                if (_2985 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2978 = _2835;
                    _2979 = _2837;
                    _2980 = _2839;
                    _2981 = _2841;
                    _2982 = _2843;
                    _2983 = _2845;
                    _2984 = _2985;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2834 = _2835;
            _2836 = _2837;
            _2838 = _2839;
            _2840 = _2841;
            _2842 = _2843;
            _2844 = _2845;
        }
        uvec4 _2848 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2849 = _2848.z;
        uint _2851 = (_2849 >> 8u) & 15u;
        float _2946;
        float _2948;
        float _2950;
        float _2952;
        float _2954;
        float _2956;
        if (((4294967295u << _2851) & _2733) == 0u)
        {
            _2946 = _2834;
            _2948 = _2836;
            _2950 = _2838;
            _2952 = _2840;
            _2954 = _2842;
            _2956 = _2844;
        }
        else
        {
            float _2971 = inversesqrt(dot(vec3(_2687, _2688, _2689), vec3(_2687, _2688, _2689)));
            float _2972 = _2971 * _2687;
            float _2973 = _2971 * _2688;
            float _2974 = _2971 * _2689;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2851 < ((_2849 >> 12u) & 15u))
            {
                float _2947;
                float _2949;
                float _2951;
                float _2953;
                float _2955;
                float _2957;
                float _3085 = _2834;
                float _3086 = _2836;
                float _3087 = _2838;
                float _3088 = _2840;
                float _3089 = _2842;
                float _3090 = _2844;
                uint _3091 = _2851;
                uint _3100;
                bool _3101;
                for (;;)
                {
                    _3100 = texelFetch(g_lightClassification, int((((_2727 << 5u) + (_2713 << 9u)) + (_3091 << 2u)) >> 2u)).x;
                    _3101 = _3100 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3101)
                    {
                        frontier_phi_67_pred = _3088;
                        frontier_phi_67_pred_1 = _3089;
                        frontier_phi_67_pred_2 = _3090;
                        frontier_phi_67_pred_3 = _3087;
                        frontier_phi_67_pred_4 = _3086;
                        frontier_phi_67_pred_5 = _3085;
                    }
                    else
                    {
                        float _3285;
                        float _3286;
                        float _3287;
                        float _3288;
                        float _3289;
                        float _3290;
                        float _3578;
                        float _3579;
                        float _3580;
                        float _3581;
                        float _3582;
                        float _3583;
                        float _3298 = _3085;
                        float _3299 = _3086;
                        float _3300 = _3087;
                        float _3301 = _3088;
                        float _3302 = _3089;
                        float _3303 = _3090;
                        uint _3304 = _3100;
                        uint _3305;
                        vec4 _3330;
                        float _3331;
                        vec4 _3346;
                        vec3 _3358;
                        vec4 _3373;
                        vec4 _3388;
                        float _3434;
                        bool _3435;
                        for (;;)
                        {
                            uint _3315 = ((_3091 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3304));
                            _3305 = (_3304 + 4294967295u) & _3304;
                            uint _3317 = _3315 * 40u;
                            _3330 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3317)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 3u)).x));
                            _3331 = _3330.w;
                            uint _3333 = (_3315 * 40u) + 4u;
                            _3346 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3333)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 3u)).x));
                            uint _3348 = (_3315 * 40u) + 8u;
                            _3358 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3348)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 2u)).x));
                            uint _3360 = (_3315 * 40u) + 16u;
                            _3373 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3360)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 3u)).x));
                            uint _3375 = (_3315 * 40u) + 20u;
                            _3388 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3375)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 3u)).x));
                            uint _3390 = (_3315 * 40u) + 24u;
                            vec4 _3403 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3390)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 3u)).x));
                            uint _3409 = (_3315 * 40u) + 28u;
                            vec4 _3422 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3409)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 3u)).x));
                            _3434 = fma(_2689, _3422.z, fma(_2688, _3422.y, _3422.x * _2687)) + _3422.w;
                            _3435 = !((fma(_2689, _3403.z, fma(_2688, _3403.y, _3403.x * _2687)) + _3403.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3435)
                            {
                                float _3462 = _3330.x - _2687;
                                float _3463 = _3330.y - _2688;
                                float _3464 = _3330.z - _2689;
                                float _3465 = dot(vec3(_3462, _3463, _3464), vec3(_3462, _3463, _3464));
                                float _3468 = inversesqrt(_3465);
                                float _3469 = _3468 * _3462;
                                float _3470 = _3468 * _3463;
                                float _3471 = _3468 * _3464;
                                float _3475 = 1.0 - (_3465 / (_3331 * _3331));
                                float _4608 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                                float _3476 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
                                float _3480 = sqrt(_3465) * _3346.w;
                                float _3482 = 1.39999997615814208984375 / (_3480 + 1.39999997615814208984375);
                                float _3483 = _3482 * _3482;
                                float _3486 = ((1.0 - _3483) * dot(vec3(_3469, _3470, _3471), vec3(_929, _932, _935))) + _3483;
                                float _3489 = _3480 * _3480;
                                float _3493 = (fma(_2689, _3373.z, fma(_2688, _3373.y, _3373.x * _2687)) + _3373.w) / _3434;
                                float _3494 = (fma(_2689, _3388.z, fma(_2688, _3388.y, _3388.x * _2687)) + _3388.w) / _3434;
                                float _3498 = 1.0 - dot(vec2(_3493, _3494), vec2(_3493, _3494));
                                float _4624 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                                float _3499 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
                                float _3500 = _3499 * (((isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0))) * _3476) / ((_3489 * 0.699999988079071044921875) + 1.0));
                                float _3512 = exp2(log2(1.0 / ((_3489 * 3.5) + 5.0)) * 0.25);
                                float _3513 = 1.0 - _1004;
                                float _3520 = sqrt(1.0 - ((1.0 - (_3513 * _3513)) * (1.0 - (_3512 * _3512))));
                                float _3521 = _3520 * _3520;
                                float _3522 = _3521 * _3521;
                                float _3523 = _3469 - _2972;
                                float _3524 = _3470 - _2973;
                                float _3525 = _3471 - _2974;
                                float _3529 = inversesqrt(dot(vec3(_3523, _3524, _3525), vec3(_3523, _3524, _3525)));
                                float _3533 = dot(vec3(_929, _932, _935), vec3((-0.0) - _2972, (-0.0) - _2973, (-0.0) - _2974));
                                float _4635 = isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0));
                                float _3536 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
                                float _3537 = dot(vec3(_929, _932, _935), vec3(_3529 * _3523, _3529 * _3524, _3529 * _3525));
                                float _4646 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                                float _3540 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                                float _3544 = ((_3540 * _3540) * (_3522 + (-1.0))) + 1.0;
                                float _3545 = _3482 * _3521;
                                float _3546 = _3545 * _3545;
                                float _3552 = ((1.0 - _3546) * dot(vec3(_929, _932, _935), vec3(_3469, _3470, _3471))) + _3546;
                                float _4657 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                                float _3553 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                                float _3554 = 1.0 - _3521;
                                float _3564 = (0.5 / (((_3553 * ((_3536 * _3554) + _3521)) + 9.9999999392252902907785028219223e-09) + (((_3553 * _3554) + _3521) * _3536))) * _3553;
                                float _4668 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                                float _3574 = (_3499 * _3476) * (((_3522 * 3.1415927410125732421875) * (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0)))) / ((_3544 * _3544) * ((_3489 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3574 * _3358.x;
                                frontier_phi_73_pred_1 = _3574 * _3358.y;
                                frontier_phi_73_pred_2 = _3500 * _3346.z;
                                frontier_phi_73_pred_3 = _3500 * _3346.y;
                                frontier_phi_73_pred_4 = _3500 * _3346.x;
                                frontier_phi_73_pred_5 = _3574 * _3358.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3578 = frontier_phi_73_pred;
                            _3579 = frontier_phi_73_pred_1;
                            _3583 = frontier_phi_73_pred_2;
                            _3582 = frontier_phi_73_pred_3;
                            _3581 = frontier_phi_73_pred_4;
                            _3580 = frontier_phi_73_pred_5;
                            _3288 = _3581 + _3301;
                            _3289 = _3582 + _3302;
                            _3290 = _3583 + _3303;
                            _3285 = _3578 + _3298;
                            _3286 = _3579 + _3299;
                            _3287 = _3580 + _3300;
                            if (_3305 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3298 = _3285;
                                _3299 = _3286;
                                _3300 = _3287;
                                _3301 = _3288;
                                _3302 = _3289;
                                _3303 = _3290;
                                _3304 = _3305;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3288;
                        frontier_phi_67_pred_1 = _3289;
                        frontier_phi_67_pred_2 = _3290;
                        frontier_phi_67_pred_3 = _3287;
                        frontier_phi_67_pred_4 = _3286;
                        frontier_phi_67_pred_5 = _3285;
                    }
                    _2953 = frontier_phi_67_pred;
                    _2955 = frontier_phi_67_pred_1;
                    _2957 = frontier_phi_67_pred_2;
                    _2951 = frontier_phi_67_pred_3;
                    _2949 = frontier_phi_67_pred_4;
                    _2947 = frontier_phi_67_pred_5;
                    uint _3092 = _3091 + 1u;
                    if (_3092 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3085 = _2947;
                        _3086 = _2949;
                        _3087 = _2951;
                        _3088 = _2953;
                        _3089 = _2955;
                        _3090 = _2957;
                        _3091 = _3092;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2955;
                frontier_phi_55_56_ladder_1 = _2957;
                frontier_phi_55_56_ladder_2 = _2953;
                frontier_phi_55_56_ladder_3 = _2951;
                frontier_phi_55_56_ladder_4 = _2949;
                frontier_phi_55_56_ladder_5 = _2947;
            }
            else
            {
                frontier_phi_55_56_ladder = _2842;
                frontier_phi_55_56_ladder_1 = _2844;
                frontier_phi_55_56_ladder_2 = _2840;
                frontier_phi_55_56_ladder_3 = _2838;
                frontier_phi_55_56_ladder_4 = _2836;
                frontier_phi_55_56_ladder_5 = _2834;
            }
            _2946 = frontier_phi_55_56_ladder_5;
            _2948 = frontier_phi_55_56_ladder_4;
            _2950 = frontier_phi_55_56_ladder_3;
            _2952 = frontier_phi_55_56_ladder_2;
            _2954 = frontier_phi_55_56_ladder;
            _2956 = frontier_phi_55_56_ladder_1;
        }
        float _2961 = isnan(1.0) ? _988 : (isnan(_988) ? 1.0 : min(_988, 1.0));
        _2746 = (_2961 * _2952) + _2179;
        _2748 = (_2961 * _2954) + _2181;
        _2750 = (_2961 * _2956) + _2183;
        _2752 = ((_2946 * _972) * _2961) + _2527;
        _2754 = ((_2948 * _974) * _2961) + _2529;
        _2756 = ((_2950 * _975) * _2961) + _2531;
    }
    else
    {
        _2746 = _2179;
        _2748 = _2181;
        _2750 = _2183;
        _2752 = _2527;
        _2754 = _2529;
        _2756 = _2531;
    }
    float _4684 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _4695 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _4706 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    uint _2776 = _257 + 6u;
    float _2784 = _910 / cbSceneParam._m0[86u].x;
    float _2785 = _911 / cbSceneParam._m0[86u].y;
    vec4 _2799 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2784, _2785, (log2((isnan(cbSceneParam._m0[77u].w) ? _845 : (isnan(_845) ? cbSceneParam._m0[77u].w : min(_845, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2801 = _2799.x;
    float _2802 = _2799.y;
    float _2803 = _2799.z;
    float _2804 = _2799.w;
    float _2896;
    float _2898;
    float _2900;
    float _2902;
    if (_845 > cbSceneParam._m0[78u].w)
    {
        float _2859 = isnan(_845) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _845 : min(cbSceneParam._m0[80u].w, _845));
        float _2860 = _2859 / _845;
        float _2871 = _2860 * _895;
        float _2872 = _896 * _2860;
        float _2873 = (-0.0) - _2872;
        float _2874 = _2860 * _897;
        float _2876 = (cbSceneParam._m0[77u].w * _2873) / _2859;
        float _2877 = _2876 + cbSceneParam._m0[79u].w;
        float _2878 = cbSceneParam._m0[79u].w - _2872;
        float _2884 = sqrt(((_2871 * _2871) + (_2872 * _2872)) + (_2874 * _2874));
        float _2887 = (1.0 - (cbSceneParam._m0[77u].w / _2859)) * _2884;
        float _2892 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2894 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3047;
        if (abs((_2873 - _2876) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3047 = ((((_2877 > 0.0) ? exp2(_2892 * _2877) : (2.0 - exp2(_2894 * _2877))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2887;
        }
        else
        {
            float _3007 = 1.0 / cbSceneParam._m0[80u].x;
            float _3008 = isnan(_2878) ? _2877 : (isnan(_2877) ? _2878 : max(_2877, _2878));
            float _3009 = isnan(_2878) ? _2877 : (isnan(_2877) ? _2878 : min(_2877, _2878));
            float _3018 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : min(_3008, 0.0));
            float _3019 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : min(_3009, 0.0));
            _3047 = ((abs(_2884 / _2873) * cbSceneParam._m0[80u].y) * ((((_3018 - _3019) * 2.0) - ((exp2(_2892 * (isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0)))) - exp2(_2892 * (isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0))))) * _3007)) - ((exp2(_2894 * _3018) - exp2(_2894 * _3019)) * _3007))) + (_2887 * cbSceneParam._m0[80u].z);
        }
        vec4 _3049 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2784, _2785, 1.0), 0.0);
        float _3058 = exp2((_3047 * (-1.44269502162933349609375)) * (1.0 - _3049.w));
        float _3059 = log2(_3058);
        float _3075 = log2(_2804);
        _2896 = (exp2(_3075 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3059 * cbSceneParam._m0[78u].x)) * _3049.x) / cbSceneParam._m0[78u].x)) + _2801;
        _2898 = (exp2(_3075 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3059 * cbSceneParam._m0[78u].y)) * _3049.y) / cbSceneParam._m0[78u].y)) + _2802;
        _2900 = (exp2(_3075 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3059 * cbSceneParam._m0[78u].z)) * _3049.z) / cbSceneParam._m0[78u].z)) + _2803;
        _2902 = _3058 * _2804;
    }
    else
    {
        _2896 = _2801;
        _2898 = _2802;
        _2900 = _2803;
        _2902 = _2804;
    }
    float _2914 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2915 = _2914 == 3.0;
    float _2916 = log2(_2902);
    float _2923 = exp2(_2916 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0))) * (_2746 + ((isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))) * _988))) + ((_2752 + ((isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0))) * _1796)) * cbPerFrame._m0[3u].x));
    float _2924 = exp2(_2916 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0))) * (_2748 + ((isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))) * _988))) + ((_2754 + ((isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0))) * _1796)) * cbPerFrame._m0[3u].x));
    float _2925 = exp2(_2916 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0))) * (_2750 + ((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _988))) + ((_2756 + ((isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0))) * _1796)) * cbPerFrame._m0[3u].x));
    float _2934 = (_2914 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2934 * (_2915 ? _2923 : (_2923 + (cbSceneParam._m0[72u].w * _2896)));
    SV_Target.y = _2934 * (_2915 ? _2924 : (_2924 + (cbSceneParam._m0[72u].w * _2898)));
    SV_Target.z = _2934 * (_2915 ? _2925 : (_2925 + (cbSceneParam._m0[72u].w * _2900)));
    SV_Target.w = cbInstanceData._m0[_2776].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2776].w;
}


