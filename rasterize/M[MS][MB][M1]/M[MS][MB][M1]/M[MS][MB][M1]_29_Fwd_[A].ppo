#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1060;
float _3444;
float _3445;
float _3446;
float _3447;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _205 = _204 * _196;
    float _206 = _204 * _197;
    float _207 = _204 * _198;
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219 = _218 * TANGENT.x;
    float _220 = _218 * TANGENT.y;
    float _221 = _218 * TANGENT.z;
    uint _224 = uint(roundEven(NORMAL.w)) * 13u;
    uint _230 = _224 + 1u;
    uint _234 = _224 + 2u;
    float _243 = sqrt(((cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x) + (cbInstanceData._m0[_224].x * cbInstanceData._m0[_224].x)) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x));
    float _244 = _243 * TEXCOORD.z;
    float _245 = _243 * TEXCOORD.w;
    vec4 _264 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _270 = _264.x * cbMtdParam._m0[9u].x;
    float _271 = _264.y * cbMtdParam._m0[9u].y;
    float _272 = _264.z * cbMtdParam._m0[9u].z;
    vec4 _290 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _294 = _290.z;
    float _299 = (_290.x * 2.0) + (-1.0);
    float _301 = (_290.y * 2.0) + (-1.0);
    float _302 = dot(vec2(_299, _301), vec2(_299, _301));
    float _3456 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _308 = sqrt(1.0 - (isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0))));
    float _311 = fma(_308, _212, fma(_301, _219, _299 * _205));
    float _314 = fma(_308, _213, fma(_301, _220, _299 * _206));
    float _317 = fma(_308, _214, fma(_301, _221, _299 * _207));
    float _321 = inversesqrt(dot(vec3(_311, _314, _317), vec3(_311, _314, _317)));
    vec4 _357 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _244) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _245) + cbTextureTilingScale._m0[11u].w));
    float _359 = _357.x;
    float _360 = 1.0 - _359;
    float _367 = ((_359 - _360) * cbMtdParam._m0[24u].z) + _360;
    float _369 = (cbMtdParam._m0[19u].x + dot(vec4(_321 * _311, _321 * _314, _321 * _317, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_367 * cbMtdParam._m0[21u].z);
    float _3467 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _370 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
    float _385 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_367 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3478 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _386 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
    float _390 = ((_370 * (cbMtdParam._m0[17u].x - _270)) * _386) + _270;
    float _391 = ((_370 * (cbMtdParam._m0[17u].y - _271)) * _386) + _271;
    float _392 = ((_370 * (cbMtdParam._m0[17u].z - _272)) * _386) + _272;
    vec4 _405 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _407 = _405.x;
    float _410 = _407 - ((_407 * _370) * _386);
    vec4 _423 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _244) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _245) + cbTextureTilingScale._m0[15u].w));
    float _430 = (_423.x * 2.0) + (-1.0);
    float _431 = (_423.y * 2.0) + (-1.0);
    float _432 = dot(vec2(_430, _431), vec2(_430, _431));
    float _3489 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _441 = (((_423.z - _294) * _370) * _386) + _294;
    float _456 = (((cbMtdParam._m0[21u].x * _299) + ((_430 - _299) * _370)) * _386) + _299;
    float _457 = (((cbMtdParam._m0[21u].x * _301) + ((_431 - _301) * _370)) * _386) + _301;
    float _458 = (((sqrt(1.0 - (isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0)))) - _308) * _370) * _386) + _308;
    float _463 = cbMtdParam._m0[22u].x + _290.w;
    float _466 = fma(_458, _212, fma(_457, _219, _456 * _205));
    float _469 = fma(_458, _213, fma(_457, _220, _456 * _206));
    float _472 = fma(_458, _214, fma(_457, _221, _456 * _207));
    float _476 = inversesqrt(dot(vec3(_466, _469, _472), vec3(_466, _469, _472)));
    float _477 = _476 * _466;
    float _478 = _476 * _469;
    float _479 = _476 * _472;
    float _3500 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _480 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
    float _3511 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _3522 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _3533 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _3544 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _3555 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _485 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
    float _499 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _540 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _550 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _540);
    float _551 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _540);
    float _552 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _540);
    float _556 = inversesqrt(dot(vec3(_550, _551, _552), vec3(_550, _551, _552)));
    float _557 = _550 * _556;
    float _558 = _551 * _556;
    float _559 = _552 * _556;
    vec4 _564 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _566 = _564.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _741 = sqrt(((_550 * _550) + (_551 * _551)) + (_552 * _552));
        float _747 = (cbMatDynParam._m0[5u].x * _741) + cbMatDynParam._m0[5u].y;
        float _3566 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _748 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _752 = (cbMatDynParam._m0[5u].z * _741) + cbMatDynParam._m0[5u].w;
        float _3577 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) - _748)) + _748) < ((_566 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _578 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _579 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _599 = fma(_479, cbSceneParam._m0[5u].z, fma(_478, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _477));
    float _602 = fma(_479, cbSceneParam._m0[6u].z, fma(_478, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _477));
    float _605 = fma(_479, cbSceneParam._m0[7u].z, fma(_478, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _477));
    uint _618 = _224 + 9u;
    uint _619 = _618 + uint(cbMatDynParam._m0[0u].w);
    float _625 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0)))) * cbInstanceData._m0[_619].x;
    float _626 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0)))) * cbInstanceData._m0[_619].y;
    float _627 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0)))) * cbInstanceData._m0[_619].z;
    float _3588 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _628 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
    float _3599 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _629 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
    float _3610 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _630 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _631 = 1.0 - _485;
    float _632 = _628 * _631;
    float _633 = _629 * _631;
    float _634 = _630 * _631;
    float _639 = (_628 + (-0.039999999105930328369140625)) * _485;
    float _640 = (_629 + (-0.039999999105930328369140625)) * _485;
    float _641 = (_630 + (-0.039999999105930328369140625)) * _485;
    float _642 = _639 + 0.039999999105930328369140625;
    float _644 = _640 + 0.039999999105930328369140625;
    float _645 = _641 + 0.039999999105930328369140625;
    vec4 _654 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _578, cbSceneParam._m0[86u].y * _579));
    float _658 = ((isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0))) * TEXCOORD_5.w) * _654.x;
    float _659 = dot(vec3(_477, _478, _479), vec3(_557, _558, _559));
    float _662 = _659 * 2.0;
    float _666 = (_662 * _477) - _557;
    float _667 = (_662 * _478) - _558;
    float _668 = (_662 * _479) - _559;
    float _672 = abs(dot(vec3(_557, _558, _559), vec3(_477, _478, _479)));
    float _3621 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _674 = sqrt(_480);
    float _687 = exp2((_674 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_674 * 3.0));
    float _693 = (1.0 - _687) * ((_674 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _694 = _687 * _674;
    float _722 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _726 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _730 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1059;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _784 = fma(_730, cbModelParam._m0[26u].z, fma(_726, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _722));
        float _788 = fma(_730, cbModelParam._m0[27u].z, fma(_726, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _722));
        float _792 = fma(_730, cbModelParam._m0[28u].z, fma(_726, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _722));
        float _817 = _722 + _477;
        float _818 = _726 + _478;
        float _819 = _730 + _479;
        float _829 = fma(_819, cbModelParam._m0[26u].z, fma(_818, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _817)) - _784;
        float _830 = fma(_819, cbModelParam._m0[27u].z, fma(_818, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _817)) - _788;
        float _831 = fma(_819, cbModelParam._m0[28u].z, fma(_818, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _817)) - _792;
        float _835 = inversesqrt(dot(vec3(_829, _830, _831), vec3(_829, _830, _831)));
        float _848 = ((_835 * _829) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_784 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _849 = ((_835 * _830) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_788 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _850 = ((_835 * _831) / cbModelParam._m0[34u].z) + ((((((_792 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _853 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_848, _849, _850), 0.0);
        vec4 _860 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_848, _849, _850), 0.0);
        vec4 _867 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_848, _849, _850), 0.0);
        vec4 _874 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_848, _849, _850), 0.0);
        float _887 = exp2((_853.w + (-0.5)) * 20.0) * 2.0;
        float _888 = _887 * (_853.x + (-0.5));
        float _889 = _887 * (_853.y + (-0.5));
        float _890 = _887 * (_853.z + (-0.5));
        float _897 = exp2((_860.w + (-0.5)) * 20.0) * 2.0;
        float _898 = _897 * (_860.x + (-0.5));
        float _899 = _897 * (_860.y + (-0.5));
        float _900 = _897 * (_860.z + (-0.5));
        float _907 = exp2((_867.w + (-0.5)) * 20.0) * 2.0;
        float _908 = _907 * (_867.x + (-0.5));
        float _909 = _907 * (_867.y + (-0.5));
        float _910 = _907 * (_867.z + (-0.5));
        float _917 = exp2((_874.w + (-0.5)) * 20.0) * 2.0;
        float _918 = _917 * (_874.x + (-0.5));
        float _919 = _917 * (_874.y + (-0.5));
        float _920 = _917 * (_874.z + (-0.5));
        float _921 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _922 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _923 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _924 = _888 * 0.5;
        float _925 = _898 * 0.5;
        float _926 = _908 * 0.5;
        float _927 = dot(vec3(_924, _925, _926), vec3(_924, _925, _926));
        float _932 = (_927 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_927);
        float _941 = (dot(vec3(_477, _478, _479), vec3(_932 * _924, _932 * _925, _932 * _926)) + 1.0) * 0.5;
        float _3647 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _951 = sqrt(((_925 * _925) + (_924 * _924)) + (_926 * _926)) / (_921 + 9.9999997473787516355514526367188e-06);
        float _3658 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _953 = _952 * 2.0;
        float _957 = (1.0 - _952) / (_952 + 1.0);
        float _3669 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _967 = ((((1.0 - _958) * (_953 + 2.0)) * exp2(log2(isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * (_953 + 1.0))) + _958) * _921;
        float _968 = _889 * 0.5;
        float _969 = _899 * 0.5;
        float _970 = _909 * 0.5;
        float _971 = dot(vec3(_968, _969, _970), vec3(_968, _969, _970));
        float _976 = (_971 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_971);
        float _984 = (dot(vec3(_477, _478, _479), vec3(_976 * _968, _976 * _969, _976 * _970)) + 1.0) * 0.5;
        float _3680 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _993 = sqrt(((_969 * _969) + (_968 * _968)) + (_970 * _970)) / (_922 + 9.9999997473787516355514526367188e-06);
        float _3691 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _995 = _994 * 2.0;
        float _999 = (1.0 - _994) / (_994 + 1.0);
        float _3702 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1009 = ((((1.0 - _1000) * (_995 + 2.0)) * exp2(log2(isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * (_995 + 1.0))) + _1000) * _922;
        float _1010 = _890 * 0.5;
        float _1011 = _900 * 0.5;
        float _1012 = _910 * 0.5;
        float _1013 = dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012));
        float _1018 = (_1013 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1013);
        float _1026 = (dot(vec3(_477, _478, _479), vec3(_1018 * _1010, _1018 * _1011, _1018 * _1012)) + 1.0) * 0.5;
        float _3713 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1035 = sqrt(((_1011 * _1011) + (_1010 * _1010)) + (_1012 * _1012)) / (_923 + 9.9999997473787516355514526367188e-06);
        float _3724 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1037 = _1036 * 2.0;
        float _1041 = (1.0 - _1036) / (_1036 + 1.0);
        float _3735 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1051 = ((((1.0 - _1042) * (_1037 + 2.0)) * exp2(log2(isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * (_1037 + 1.0))) + _1042) * _923;
        _1059 = _890;
        _1061 = _889;
        _1062 = _888;
        _1063 = _900;
        _1064 = _899;
        _1065 = _898;
        _1066 = _910;
        _1067 = _909;
        _1068 = _908;
        _1069 = _923;
        _1070 = _922;
        _1071 = _921;
        _1072 = cbModelParam._m0[36u].z * (isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0)));
        _1073 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0)));
        _1074 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0)));
    }
    else
    {
        _1059 = _1060;
        _1061 = _1060;
        _1062 = _1060;
        _1063 = _1060;
        _1064 = _1060;
        _1065 = _1060;
        _1066 = _1060;
        _1067 = _1060;
        _1068 = _1060;
        _1069 = _1060;
        _1070 = _1060;
        _1071 = _1060;
        _1072 = 0.0;
        _1073 = 0.0;
        _1074 = 0.0;
    }
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1102 = fma(_730, cbModelParam._m0[30u].z, fma(_726, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _722));
        float _1106 = fma(_730, cbModelParam._m0[31u].z, fma(_726, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _722));
        float _1110 = fma(_730, cbModelParam._m0[32u].z, fma(_726, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _722));
        float _1133 = _722 + _477;
        float _1134 = _726 + _478;
        float _1135 = _730 + _479;
        float _1145 = fma(_1135, cbModelParam._m0[30u].z, fma(_1134, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1133)) - _1102;
        float _1146 = fma(_1135, cbModelParam._m0[31u].z, fma(_1134, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1133)) - _1106;
        float _1147 = fma(_1135, cbModelParam._m0[32u].z, fma(_1134, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1133)) - _1110;
        float _1151 = inversesqrt(dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147)));
        float _1164 = ((_1151 * _1145) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1102 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1165 = ((_1151 * _1146) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1106 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1166 = ((_1151 * _1147) / cbModelParam._m0[35u].z) + ((((((_1110 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        float _1201 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1168.x + (-0.5));
        float _1203 = _1201 * (_1168.y + (-0.5));
        float _1204 = _1201 * (_1168.z + (-0.5));
        float _1211 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1175.x + (-0.5));
        float _1213 = _1211 * (_1175.y + (-0.5));
        float _1214 = _1211 * (_1175.z + (-0.5));
        float _1221 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1182.x + (-0.5));
        float _1223 = _1221 * (_1182.y + (-0.5));
        float _1224 = _1221 * (_1182.z + (-0.5));
        float _1231 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1189.x + (-0.5));
        float _1233 = _1231 * (_1189.y + (-0.5));
        float _1234 = _1231 * (_1189.z + (-0.5));
        float _1235 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = _1202 * 0.5;
        float _1239 = _1212 * 0.5;
        float _1240 = _1222 * 0.5;
        float _1241 = dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240));
        float _1246 = (_1241 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1241);
        float _1254 = (dot(vec3(_477, _478, _479), vec3(_1246 * _1238, _1246 * _1239, _1246 * _1240)) + 1.0) * 0.5;
        float _3776 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1263 = sqrt(((_1239 * _1239) + (_1238 * _1238)) + (_1240 * _1240)) / (_1235 + 9.9999997473787516355514526367188e-06);
        float _3787 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1265 = _1264 * 2.0;
        float _1269 = (1.0 - _1264) / (_1264 + 1.0);
        float _3798 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1279 = ((((1.0 - _1270) * (_1265 + 2.0)) * exp2(log2(isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) * (_1265 + 1.0))) + _1270) * _1235;
        float _1280 = _1203 * 0.5;
        float _1281 = _1213 * 0.5;
        float _1282 = _1223 * 0.5;
        float _1283 = dot(vec3(_1280, _1281, _1282), vec3(_1280, _1281, _1282));
        float _1288 = (_1283 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1283);
        float _1296 = (dot(vec3(_477, _478, _479), vec3(_1288 * _1280, _1288 * _1281, _1288 * _1282)) + 1.0) * 0.5;
        float _3809 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1305 = sqrt(((_1281 * _1281) + (_1280 * _1280)) + (_1282 * _1282)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _3820 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1307 = _1306 * 2.0;
        float _1311 = (1.0 - _1306) / (_1306 + 1.0);
        float _3831 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1321 = ((((1.0 - _1312) * (_1307 + 2.0)) * exp2(log2(isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * (_1307 + 1.0))) + _1312) * _1236;
        float _1322 = _1204 * 0.5;
        float _1323 = _1214 * 0.5;
        float _1324 = _1224 * 0.5;
        float _1325 = dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324));
        float _1330 = (_1325 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1325);
        float _1338 = (dot(vec3(_477, _478, _479), vec3(_1330 * _1322, _1330 * _1323, _1330 * _1324)) + 1.0) * 0.5;
        float _3842 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1347 = sqrt(((_1323 * _1323) + (_1322 * _1322)) + (_1324 * _1324)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _3853 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1349 = _1348 * 2.0;
        float _1353 = (1.0 - _1348) / (_1348 + 1.0);
        float _3864 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1363 = ((((1.0 - _1354) * (_1349 + 2.0)) * exp2(log2(isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * (_1349 + 1.0))) + _1354) * _1237;
        _1371 = _1204;
        _1372 = _1203;
        _1373 = _1202;
        _1374 = _1214;
        _1375 = _1213;
        _1376 = _1212;
        _1377 = _1224;
        _1378 = _1223;
        _1379 = _1222;
        _1380 = _1237;
        _1381 = _1236;
        _1382 = _1235;
        _1383 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)));
        _1384 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)));
        _1385 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)));
    }
    else
    {
        _1371 = _1060;
        _1372 = _1060;
        _1373 = _1060;
        _1374 = _1060;
        _1375 = _1060;
        _1376 = _1060;
        _1377 = _1060;
        _1378 = _1060;
        _1379 = _1060;
        _1380 = _1060;
        _1381 = _1060;
        _1382 = _1060;
        _1383 = 0.0;
        _1384 = 0.0;
        _1385 = 0.0;
    }
    float _1395 = (cbModelParam._m0[1u].x * (_1383 - _1072)) + _1072;
    float _1396 = (cbModelParam._m0[1u].x * (_1384 - _1073)) + _1073;
    float _1397 = (cbModelParam._m0[1u].x * (_1385 - _1074)) + _1074;
    float _1418 = fma(_1397, cbSceneParam._m0[89u].z, fma(_1396, cbSceneParam._m0[89u].y, _1395 * cbSceneParam._m0[89u].x));
    float _1421 = fma(_1397, cbSceneParam._m0[90u].z, fma(_1396, cbSceneParam._m0[90u].y, _1395 * cbSceneParam._m0[90u].x));
    float _1424 = fma(_1397, cbSceneParam._m0[91u].z, fma(_1396, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1395));
    float _1439 = _666 * 0.5;
    float _1440 = _667 * 0.5;
    float _1441 = _668 * 0.5;
    float _1442 = dot(vec4(_1439, _1440, _1441, 1.0), vec4(_1373, _1376, _1379, _1382));
    float _1445 = dot(vec4(_1439, _1440, _1441, 1.0), vec4(_1372, _1375, _1378, _1381));
    float _1448 = dot(vec4(_1439, _1440, _1441, 1.0), vec4(_1371, _1374, _1377, _1380));
    float _1482;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1455 = dot(vec4(_1439, _1440, _1441, 1.0), vec4(_1059, _1063, _1066, _1069));
        float _1459 = dot(vec4(_1439, _1440, _1441, 1.0), vec4(_1061, _1064, _1067, _1070));
        float _1463 = dot(vec4(_1439, _1440, _1441, 1.0), vec4(_1062, _1065, _1068, _1071));
        float _1470 = dot(vec4(cbModelParam._m0[39u]), vec4(_1439, _1440, _1441, 1.0));
        _1482 = dot(vec3(isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)), isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)), isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1470) ? 0.0 : (isnan(0.0) ? _1470 : max(0.0, _1470))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1482 = 1.0;
    }
    float _1493;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1484 = dot(vec4(cbModelParam._m0[40u]), vec4(_1439, _1440, _1441, 1.0));
        _1493 = dot(vec3(isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)), isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)), isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1484) ? 0.0 : (isnan(0.0) ? _1484 : max(0.0, _1484))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1493 = 1.0;
    }
    float _1497 = (_1493 * cbModelParam._m0[1u].x) + (_1482 * (1.0 - cbModelParam._m0[1u].x));
    float _1507 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _480);
    float _1508 = isnan(_1507) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1507 : min(cbModelParam._m0[25u].z, _1507));
    float _1589;
    float _1591;
    float _1593;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1556 = fma(_730, cbModelParam._m0[13u].z, fma(_726, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _722)) + cbModelParam._m0[13u].w;
        float _1560 = fma(_730, cbModelParam._m0[14u].z, fma(_726, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _722)) + cbModelParam._m0[14u].w;
        float _1564 = fma(_730, cbModelParam._m0[15u].z, fma(_726, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _722)) + cbModelParam._m0[15u].w;
        float _1567 = fma(_668, cbModelParam._m0[13u].z, fma(_667, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _666));
        float _1570 = fma(_668, cbModelParam._m0[14u].z, fma(_667, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _666));
        float _1573 = fma(_668, cbModelParam._m0[15u].z, fma(_667, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _666));
        float _1601;
        if (_1567 > 0.0)
        {
            _1601 = abs((1.0 - _1556) / _1567);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1567 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1556 + 1.0) / _1567);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1601 = frontier_phi_17_15_ladder;
        }
        float _1805;
        if (_1570 > 0.0)
        {
            _1805 = abs((1.0 - _1560) / _1570);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1570 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1560 + 1.0) / _1570);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1805 = frontier_phi_26_22_ladder;
        }
        float _2059;
        if (_1573 > 0.0)
        {
            _2059 = abs((1.0 - _1564) / _1573);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1573 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1564 + 1.0) / _1573);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2059 = frontier_phi_38_33_ladder;
        }
        float _2061 = isnan(_1805) ? _1601 : (isnan(_1601) ? _1805 : min(_1601, _1805));
        float _2062 = isnan(_2059) ? _2061 : (isnan(_2061) ? _2059 : min(_2061, _2059));
        float _2066 = (_2062 * _1567) + _1556;
        float _2067 = (_2062 * _1570) + _1560;
        float _2068 = (_2062 * _1573) + _1564;
        float _2069 = _2062 * 9.9999997473787516355514526367188e-05;
        float _2071 = (-1.0) - _2069;
        float _2073 = _2069 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2068 > _2073) || ((_2068 < _2071) || ((_2067 > _2073) || ((_2067 < _2071) || ((_2066 < _2071) || (_2066 > _2073))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2196 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2068, cbModelParam._m0[9u].z, fma(_2067, cbModelParam._m0[9u].y, _2066 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2068, cbModelParam._m0[10u].z, fma(_2067, cbModelParam._m0[10u].y, _2066 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2068, cbModelParam._m0[11u].z, fma(_2067, cbModelParam._m0[11u].y, _2066 * cbModelParam._m0[11u].x))), _1508);
            frontier_phi_16_38_ladder = _2196.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2196.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2196.x * cbModelParam._m0[1u].y;
        }
        _1589 = frontier_phi_16_38_ladder_2;
        _1591 = frontier_phi_16_38_ladder_1;
        _1593 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1577 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_666, _667, _668), _1508);
        _1589 = _1577.x * cbModelParam._m0[1u].y;
        _1591 = _1577.y * cbModelParam._m0[1u].y;
        _1593 = _1577.z * cbModelParam._m0[1u].y;
    }
    float _1597 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _480);
    float _1598 = isnan(_1597) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1597 : min(cbModelParam._m0[25u].w, _1597));
    float _1688;
    float _1690;
    float _1692;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1652 = fma(_730, cbModelParam._m0[21u].z, fma(_726, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _722)) + cbModelParam._m0[21u].w;
        float _1656 = fma(_730, cbModelParam._m0[22u].z, fma(_726, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _722)) + cbModelParam._m0[22u].w;
        float _1660 = fma(_730, cbModelParam._m0[23u].z, fma(_726, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _722)) + cbModelParam._m0[23u].w;
        float _1663 = fma(_668, cbModelParam._m0[21u].z, fma(_667, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _666));
        float _1666 = fma(_668, cbModelParam._m0[22u].z, fma(_667, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _666));
        float _1669 = fma(_668, cbModelParam._m0[23u].z, fma(_667, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _666));
        float _1810;
        if (_1663 > 0.0)
        {
            _1810 = abs((1.0 - _1652) / _1663);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1663 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1652 + 1.0) / _1663);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1810 = frontier_phi_28_24_ladder;
        }
        float _2086;
        if (_1666 > 0.0)
        {
            _2086 = abs((1.0 - _1656) / _1666);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1666 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1656 + 1.0) / _1666);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2086 = frontier_phi_40_35_ladder;
        }
        float _2299;
        if (_1669 > 0.0)
        {
            _2299 = abs((1.0 - _1660) / _1669);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1669 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1660 + 1.0) / _1669);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2299 = frontier_phi_49_46_ladder;
        }
        float _2301 = isnan(_2086) ? _1810 : (isnan(_1810) ? _2086 : min(_1810, _2086));
        float _2302 = isnan(_2299) ? _2301 : (isnan(_2301) ? _2299 : min(_2301, _2299));
        float _2306 = (_2302 * _1663) + _1652;
        float _2307 = (_2302 * _1666) + _1656;
        float _2308 = (_2302 * _1669) + _1660;
        float _2309 = _2302 * 9.9999997473787516355514526367188e-05;
        float _2310 = (-1.0) - _2309;
        float _2312 = _2309 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2308 > _2312) || ((_2308 < _2310) || ((_2307 > _2312) || ((_2307 < _2310) || ((_2306 < _2310) || (_2306 > _2312))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2507 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2308, cbModelParam._m0[17u].z, fma(_2307, cbModelParam._m0[17u].y, _2306 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2308, cbModelParam._m0[18u].z, fma(_2307, cbModelParam._m0[18u].y, _2306 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2308, cbModelParam._m0[19u].z, fma(_2307, cbModelParam._m0[19u].y, _2306 * cbModelParam._m0[19u].x))), _1598);
            frontier_phi_25_49_ladder = _2507.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2507.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2507.x * cbModelParam._m0[1u].z;
        }
        _1688 = frontier_phi_25_49_ladder_2;
        _1690 = frontier_phi_25_49_ladder_1;
        _1692 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1672 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_666, _667, _668), _1598);
        _1688 = _1672.x * cbModelParam._m0[1u].z;
        _1690 = _1672.y * cbModelParam._m0[1u].z;
        _1692 = _1672.z * cbModelParam._m0[1u].z;
    }
    float _1705 = (((_693 * _642) + _694) * _658) * ((cbModelParam._m0[1u].w * (_1688 - _1589)) + _1589);
    float _1707 = (((_693 * _644) + _694) * _658) * ((cbModelParam._m0[1u].w * (_1690 - _1591)) + _1591);
    float _1709 = (((_693 * _645) + _694) * _658) * ((cbModelParam._m0[1u].w * (_1692 - _1593)) + _1593);
    float _1712 = fma(_1709, cbSceneParam._m0[89u].z, fma(_1707, cbSceneParam._m0[89u].y, _1705 * cbSceneParam._m0[89u].x));
    float _1715 = fma(_1709, cbSceneParam._m0[90u].z, fma(_1707, cbSceneParam._m0[90u].y, _1705 * cbSceneParam._m0[90u].x));
    float _1718 = fma(_1709, cbSceneParam._m0[91u].z, fma(_1707, cbSceneParam._m0[91u].y, _1705 * cbSceneParam._m0[91u].x));
    uvec4 _1728 = floatBitsToUint(cbInstanceData._m0[_224 + 5u]);
    uint _1730 = _1728.x * 14u;
    uint _1731 = _1730 + 13u;
    float _1738 = _658 + (-1.0);
    float _1743 = (cbLight._m0[_1731].x * _1738) + 1.0;
    float _1744 = (cbLight._m0[_1731].y * _1738) + 1.0;
    float _1745 = (cbLight._m0[_1731].z * _1738) + 1.0;
    float _1746 = (cbLight._m0[_1731].w * _1738) + 1.0;
    uint _1747 = _1730 + 5u;
    float _1753 = isnan(1.0) ? _1744 : (isnan(_1744) ? 1.0 : min(_1744, 1.0));
    uint _1757 = _1730 + 4u;
    float _1764 = isnan(1.0) ? _1743 : (isnan(_1743) ? 1.0 : min(_1743, 1.0));
    uint _1768 = _1730 | 1u;
    float _1779 = dot(vec3(cbLight._m0[_1730].xyz), vec3(_477, _478, _479));
    float _1782 = dot(vec3(cbLight._m0[_1768].xyz), vec3(_477, _478, _479));
    float _4000 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
    float _4011 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
    float _1787 = (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * 0.3183098733425140380859375;
    float _1789 = (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * 0.3183098733425140380859375;
    float _1796 = ((cbLight._m0[_1747].x * _1753) * _1789) + ((cbLight._m0[_1757].x * _1764) * _1787);
    float _1797 = ((_1753 * cbLight._m0[_1747].y) * _1789) + ((_1764 * cbLight._m0[_1757].y) * _1787);
    float _1798 = ((_1753 * cbLight._m0[_1747].z) * _1789) + ((_1764 * cbLight._m0[_1757].z) * _1787);
    uvec4 _1802 = floatBitsToUint(cbLight._m0[_1730 + 12u]);
    bool _1804 = _1802.x == 0u;
    float _1815;
    float _1817;
    float _1819;
    if (_1804)
    {
        _1815 = _1796;
        _1817 = _1797;
        _1819 = _1798;
    }
    else
    {
        uint _1823 = _1730 + 6u;
        float _1839 = (dot(vec3(cbLight._m0[_1730 + 2u].xyz), vec3(_477, _478, _479)) * 0.5) + 0.5;
        float _1840 = _1839 * _1839;
        float _4022 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
        float _1841 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1842 = isnan(1.0) ? _1745 : (isnan(_1745) ? 1.0 : min(_1745, 1.0));
        _1815 = (((cbLight._m0[_1823].x * 0.3183098733425140380859375) * _1841) * _1842) + _1796;
        _1817 = (((cbLight._m0[_1823].y * 0.3183098733425140380859375) * _1841) * _1842) + _1797;
        _1819 = (((cbLight._m0[_1823].z * 0.3183098733425140380859375) * _1841) * _1842) + _1798;
    }
    bool _1822 = _1802.y == 0u;
    float _1860;
    float _1862;
    float _1864;
    if (_1822)
    {
        _1860 = _1815;
        _1862 = _1817;
        _1864 = _1819;
    }
    else
    {
        uint _2030 = _1730 + 7u;
        float _2046 = (dot(vec3(cbLight._m0[_1730 + 3u].xyz), vec3(_477, _478, _479)) * 0.5) + 0.5;
        float _2047 = _2046 * _2046;
        float _4038 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        float _2048 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _2049 = isnan(1.0) ? _1746 : (isnan(_1746) ? 1.0 : min(_1746, 1.0));
        _1860 = (((cbLight._m0[_2030].x * 0.3183098733425140380859375) * _2048) * _2049) + _1815;
        _1862 = (((cbLight._m0[_2030].y * 0.3183098733425140380859375) * _2048) * _2049) + _1817;
        _1864 = (((cbLight._m0[_2030].z * 0.3183098733425140380859375) * _2048) * _2049) + _1819;
    }
    uint _1867 = _1730 + 8u;
    float _1880 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1730].w)) * _480) * 0.949999988079071044921875);
    float _1881 = _1880 * _1880;
    float _1882 = cbLight._m0[_1730].x + _557;
    float _1883 = cbLight._m0[_1730].y + _558;
    float _1884 = cbLight._m0[_1730].z + _559;
    float _1888 = inversesqrt(dot(vec3(_1882, _1883, _1884), vec3(_1882, _1883, _1884)));
    float _1889 = _1888 * _1882;
    float _1890 = _1888 * _1883;
    float _1891 = _1888 * _1884;
    float _1892 = dot(vec3(_477, _478, _479), vec3(cbLight._m0[_1730].xyz));
    float _4054 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1895 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
    float _4065 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _1896 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _1897 = dot(vec3(_477, _478, _479), vec3(_1889, _1890, _1891));
    float _4076 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _1900 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _1901 = dot(vec3(cbLight._m0[_1730].xyz), vec3(_1889, _1890, _1891));
    float _4087 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1905 = _1881 * _1881;
    float _1909 = ((_1900 * _1900) * (_1905 + (-1.0))) + 1.0;
    float _1917 = exp2(log2(1.0 - (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0)))) * 5.0);
    float _1918 = 0.959999978542327880859375 - _639;
    float _1920 = 0.959999978542327880859375 - _640;
    float _1921 = 0.959999978542327880859375 - _641;
    float _1928 = 1.0 - _1881;
    float _1939 = (0.5 / (((_1896 * ((_1895 * _1928) + _1881)) + 9.9999999392252902907785028219223e-09) + (((_1896 * _1928) + _1881) * _1895))) * _1895;
    float _4098 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
    float _1941 = (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_1905 / ((_1909 * _1909) * 3.141590118408203125));
    uint _1952 = _1730 + 9u;
    float _1963 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1768].w)) * _480) * 0.949999988079071044921875);
    float _1964 = _1963 * _1963;
    float _1965 = cbLight._m0[_1768].x + _557;
    float _1966 = cbLight._m0[_1768].y + _558;
    float _1967 = cbLight._m0[_1768].z + _559;
    float _1971 = inversesqrt(dot(vec3(_1965, _1966, _1967), vec3(_1965, _1966, _1967)));
    float _1972 = _1971 * _1965;
    float _1973 = _1971 * _1966;
    float _1974 = _1971 * _1967;
    float _1975 = dot(vec3(_477, _478, _479), vec3(cbLight._m0[_1768].xyz));
    float _4109 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _1978 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _1979 = dot(vec3(_477, _478, _479), vec3(_1972, _1973, _1974));
    float _4120 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _1982 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _1983 = dot(vec3(cbLight._m0[_1768].xyz), vec3(_1972, _1973, _1974));
    float _4131 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _1987 = _1964 * _1964;
    float _1991 = ((_1982 * _1982) * (_1987 + (-1.0))) + 1.0;
    float _1998 = exp2(log2(1.0 - (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0)))) * 5.0);
    float _2005 = 1.0 - _1964;
    float _2015 = (0.5 / (((_1896 * ((_1978 * _2005) + _1964)) + 9.9999999392252902907785028219223e-09) + (((_1896 * _2005) + _1964) * _1978))) * _1978;
    float _4142 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2017 = (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_1987 / ((_1991 * _1991) * 3.141590118408203125));
    float _2027 = (((((_1998 * _1918) + _642) * cbLight._m0[_1952].x) * _2017) * _1753) + (((((_1917 * _1918) + _642) * cbLight._m0[_1867].x) * _1941) * _1764);
    float _2028 = (((((_1998 * _1920) + _644) * cbLight._m0[_1952].y) * _2017) * _1753) + (((((_1917 * _1920) + _644) * cbLight._m0[_1867].y) * _1941) * _1764);
    float _2029 = (((((_1998 * _1921) + _645) * cbLight._m0[_1952].z) * _2017) * _1753) + (((((_1917 * _1921) + _645) * cbLight._m0[_1867].z) * _1941) * _1764);
    float _2091;
    float _2093;
    float _2095;
    if (_1804)
    {
        _2091 = _2027;
        _2093 = _2028;
        _2095 = _2029;
    }
    else
    {
        uint _2097 = _1730 + 2u;
        uint _2101 = _1730 + 10u;
        float _2115 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2097].w)) * _480) * 0.949999988079071044921875);
        float _2116 = _2115 * _2115;
        float _2117 = cbLight._m0[_2097].x + _557;
        float _2118 = cbLight._m0[_2097].y + _558;
        float _2119 = cbLight._m0[_2097].z + _559;
        float _2123 = inversesqrt(dot(vec3(_2117, _2118, _2119), vec3(_2117, _2118, _2119)));
        float _2124 = _2123 * _2117;
        float _2125 = _2123 * _2118;
        float _2126 = _2123 * _2119;
        float _2127 = dot(vec3(_477, _478, _479), vec3(cbLight._m0[_2097].xyz));
        float _4153 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
        float _2130 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _2131 = dot(vec3(_477, _478, _479), vec3(_2124, _2125, _2126));
        float _4164 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
        float _2134 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _2135 = dot(vec3(cbLight._m0[_2097].xyz), vec3(_2124, _2125, _2126));
        float _4175 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2139 = _2116 * _2116;
        float _2143 = ((_2134 * _2134) * (_2139 + (-1.0))) + 1.0;
        float _2150 = exp2(log2(1.0 - (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0)))) * 5.0);
        float _2157 = 1.0 - _2116;
        float _2167 = (0.5 / (((_1896 * ((_2130 * _2157) + _2116)) + 9.9999999392252902907785028219223e-09) + (((_1896 * _2157) + _2116) * _2130))) * _2130;
        float _4186 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
        float _2169 = (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (_2139 / ((_2143 * _2143) * 3.141590118408203125));
        float _2170 = isnan(1.0) ? _1745 : (isnan(_1745) ? 1.0 : min(_1745, 1.0));
        _2091 = (((((_2150 * _1918) + _642) * cbLight._m0[_2101].x) * _2169) * _2170) + _2027;
        _2093 = (((((_2150 * _1920) + _644) * cbLight._m0[_2101].y) * _2169) * _2170) + _2028;
        _2095 = (((((_2150 * _1921) + _645) * cbLight._m0[_2101].z) * _2169) * _2170) + _2029;
    }
    float _2205;
    float _2207;
    float _2209;
    if (_1822)
    {
        _2205 = _2091;
        _2207 = _2093;
        _2209 = _2095;
    }
    else
    {
        uint _2216 = _1730 + 3u;
        uint _2220 = _1730 + 11u;
        float _2234 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2216].w)) * _480) * 0.949999988079071044921875);
        float _2235 = _2234 * _2234;
        float _2236 = cbLight._m0[_2216].x + _557;
        float _2237 = cbLight._m0[_2216].y + _558;
        float _2238 = cbLight._m0[_2216].z + _559;
        float _2242 = inversesqrt(dot(vec3(_2236, _2237, _2238), vec3(_2236, _2237, _2238)));
        float _2243 = _2242 * _2236;
        float _2244 = _2242 * _2237;
        float _2245 = _2242 * _2238;
        float _2246 = dot(vec3(_477, _478, _479), vec3(cbLight._m0[_2216].xyz));
        float _4202 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2249 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _2250 = dot(vec3(_477, _478, _479), vec3(_2243, _2244, _2245));
        float _4213 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2253 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _2254 = dot(vec3(cbLight._m0[_2216].xyz), vec3(_2243, _2244, _2245));
        float _4224 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        float _2258 = _2235 * _2235;
        float _2262 = ((_2253 * _2253) * (_2258 + (-1.0))) + 1.0;
        float _2269 = exp2(log2(1.0 - (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0)))) * 5.0);
        float _2276 = 1.0 - _2235;
        float _2286 = (0.5 / (((_1896 * ((_2249 * _2276) + _2235)) + 9.9999999392252902907785028219223e-09) + (((_1896 * _2276) + _2235) * _2249))) * _2249;
        float _4235 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        float _2288 = (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_2258 / ((_2262 * _2262) * 3.141590118408203125));
        float _2289 = isnan(1.0) ? _1746 : (isnan(_1746) ? 1.0 : min(_1746, 1.0));
        _2205 = (((((_2269 * _1918) + _642) * cbLight._m0[_2220].x) * _2288) * _2289) + _2091;
        _2207 = (((((_2269 * _1920) + _644) * cbLight._m0[_2220].y) * _2288) * _2289) + _2093;
        _2209 = (((((_2269 * _1921) + _645) * cbLight._m0[_2220].z) * _2288) * _2289) + _2095;
    }
    float _2424;
    float _2426;
    float _2428;
    float _2430;
    float _2432;
    float _2434;
    if (_1728.y == 0u)
    {
        float _2364 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2365 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2364;
        float _2366 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2364;
        float _2367 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2364;
        uvec4 _2379 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2380 = _2379.x;
        uint _2391 = uint((float(_2379.y) * floor(float(uint(cbSceneParam._m0[85u].y * _579) / _2380))) + floor(float(uint(cbSceneParam._m0[85u].x * _578) / _2380)));
        float _2401 = (log2(_2367 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2402 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        uint _2405 = uint(isnan(14.0) ? _2402 : (isnan(_2402) ? 14.0 : min(_2402, 14.0)));
        uvec4 _2410 = texelFetch(g_lightClusterGridBuffer, int(((_2405 << 2u) + (_2391 << 6u)) >> 2u));
        uint _2411 = _2410.x;
        uint _2412 = _2379.z;
        float _2512;
        float _2514;
        float _2516;
        float _2518;
        float _2520;
        float _2522;
        if (((((1u << ((_2412 >> 4u) & 15u)) + 4294967295u) & _2411) == 0u) || ((_2412 & 240u) == 0u))
        {
            _2512 = 0.0;
            _2514 = 0.0;
            _2516 = 0.0;
            _2518 = 0.0;
            _2520 = 0.0;
            _2522 = 0.0;
        }
        else
        {
            float _2513;
            float _2515;
            float _2517;
            float _2519;
            float _2521;
            float _2523;
            float _2665 = 0.0;
            float _2666 = 0.0;
            float _2667 = 0.0;
            float _2668 = 0.0;
            float _2669 = 0.0;
            float _2670 = 0.0;
            uint _2671 = 0u;
            uint _2680;
            bool _2681;
            for (;;)
            {
                _2680 = texelFetch(g_lightClassification, int((((_2405 << 5u) + (_2391 << 9u)) + (_2671 << 2u)) >> 2u)).x;
                _2681 = _2680 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2681)
                {
                    frontier_phi_66_pred = _2665;
                    frontier_phi_66_pred_1 = _2670;
                    frontier_phi_66_pred_2 = _2669;
                    frontier_phi_66_pred_3 = _2668;
                    frontier_phi_66_pred_4 = _2667;
                    frontier_phi_66_pred_5 = _2666;
                }
                else
                {
                    float _2810;
                    float _2811;
                    float _2812;
                    float _2813;
                    float _2814;
                    float _2815;
                    uint _2816;
                    _2810 = _2665;
                    _2811 = _2666;
                    _2812 = _2667;
                    _2813 = _2668;
                    _2814 = _2669;
                    _2815 = _2670;
                    _2816 = _2680;
                    float _2737;
                    float _2738;
                    float _2739;
                    float _2740;
                    float _2741;
                    float _2742;
                    for (;;)
                    {
                        uint _2820 = uint(findLSB(_2816)) + (_2671 << 5u);
                        uint _2817 = (_2816 + 4294967295u) & _2816;
                        uint _2822 = _2820 * 48u;
                        vec4 _2836 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2822)).x, texelFetch(g_PointLightRenderingBuffer, int(_2822 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2822 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2822 + 3u)).x));
                        uint _2842 = (_2820 * 48u) + 4u;
                        vec4 _2855 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2842)).x, texelFetch(g_PointLightRenderingBuffer, int(_2842 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2842 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2842 + 3u)).x));
                        uint _2861 = (_2820 * 48u) + 8u;
                        vec3 _2872 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2861)).x, texelFetch(g_PointLightRenderingBuffer, int(_2861 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2861 + 2u)).x));
                        float _2876 = _2836.x - _2365;
                        float _2877 = _2836.y - _2366;
                        float _2878 = _2836.z - _2367;
                        float _2879 = dot(vec3(_2876, _2877, _2878), vec3(_2876, _2877, _2878));
                        float _2882 = inversesqrt(_2879);
                        float _2883 = _2882 * _2876;
                        float _2884 = _2882 * _2877;
                        float _2885 = _2882 * _2878;
                        float _2886 = dot(vec3(_599, _602, _605), vec3(_2883, _2884, _2885));
                        float _2891 = 1.0 - (_2879 * _2836.w);
                        float _4261 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
                        float _2892 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
                        float _2893 = sqrt(_2879) * _2855.w;
                        float _2896 = 1.39999997615814208984375 / (_2893 + 1.39999997615814208984375);
                        float _2897 = _2896 * _2896;
                        float _2900 = ((1.0 - _2897) * _2886) + _2897;
                        float _2903 = _2893 * _2893;
                        float _2907 = ((isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0))) * _2892) / ((_2903 * 0.699999988079071044921875) + 1.0);
                        float _2911 = (-0.0) - _2365;
                        float _2912 = (-0.0) - _2366;
                        float _2913 = (-0.0) - _2367;
                        float _2917 = inversesqrt(dot(vec3(_2911, _2912, _2913), vec3(_2911, _2912, _2913)));
                        float _2918 = _2917 * _2911;
                        float _2919 = _2917 * _2912;
                        float _2920 = _2917 * _2913;
                        float _2928 = exp2(log2(1.0 / ((_2903 * 3.5) + 5.0)) * 0.25);
                        float _2929 = 1.0 - _674;
                        float _2936 = sqrt(1.0 - ((1.0 - (_2929 * _2929)) * (1.0 - (_2928 * _2928))));
                        float _2937 = _2936 * _2936;
                        float _2938 = _2937 * _2937;
                        float _2939 = _2918 + _2883;
                        float _2940 = _2919 + _2884;
                        float _2941 = _2920 + _2885;
                        float _2945 = inversesqrt(dot(vec3(_2939, _2940, _2941), vec3(_2939, _2940, _2941)));
                        float _2949 = dot(vec3(_599, _602, _605), vec3(_2918, _2919, _2920));
                        float _4277 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
                        float _2952 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
                        float _2953 = dot(vec3(_599, _602, _605), vec3(_2945 * _2939, _2945 * _2940, _2945 * _2941));
                        float _4288 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
                        float _2956 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
                        float _2960 = ((_2956 * _2956) * (_2938 + (-1.0))) + 1.0;
                        float _2961 = _2896 * _2937;
                        float _2962 = _2961 * _2961;
                        float _2965 = ((1.0 - _2962) * _2886) + _2962;
                        float _4299 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
                        float _2966 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
                        float _2967 = 1.0 - _2937;
                        float _2977 = (0.5 / (((_2966 * ((_2952 * _2967) + _2937)) + 9.9999999392252902907785028219223e-09) + (((_2966 * _2967) + _2937) * _2952))) * _2966;
                        float _4310 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
                        float _2988 = (((_2938 * 3.1415927410125732421875) * (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0)))) / ((_2960 * _2960) * ((_2903 * 2.1991131305694580078125) + 3.141590118408203125))) * _2892;
                        _2740 = (_2907 * _2855.x) + _2813;
                        _2741 = (_2907 * _2855.y) + _2814;
                        _2742 = (_2907 * _2855.z) + _2815;
                        _2737 = (_2988 * _2872.x) + _2810;
                        _2738 = (_2988 * _2872.y) + _2811;
                        _2739 = (_2988 * _2872.z) + _2812;
                        if (_2817 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2810 = _2737;
                            _2811 = _2738;
                            _2812 = _2739;
                            _2813 = _2740;
                            _2814 = _2741;
                            _2815 = _2742;
                            _2816 = _2817;
                        }
                    }
                    frontier_phi_66_pred = _2737;
                    frontier_phi_66_pred_1 = _2742;
                    frontier_phi_66_pred_2 = _2741;
                    frontier_phi_66_pred_3 = _2740;
                    frontier_phi_66_pred_4 = _2739;
                    frontier_phi_66_pred_5 = _2738;
                }
                _2513 = frontier_phi_66_pred;
                _2523 = frontier_phi_66_pred_1;
                _2521 = frontier_phi_66_pred_2;
                _2519 = frontier_phi_66_pred_3;
                _2517 = frontier_phi_66_pred_4;
                _2515 = frontier_phi_66_pred_5;
                uint _2672 = _2671 + 1u;
                if (_2672 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2665 = _2513;
                    _2666 = _2515;
                    _2667 = _2517;
                    _2668 = _2519;
                    _2669 = _2521;
                    _2670 = _2523;
                    _2671 = _2672;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2512 = _2513;
            _2514 = _2515;
            _2516 = _2517;
            _2518 = _2519;
            _2520 = _2521;
            _2522 = _2523;
        }
        uvec4 _2526 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2527 = _2526.z;
        uint _2529 = (_2527 >> 8u) & 15u;
        float _2633;
        float _2635;
        float _2637;
        float _2639;
        float _2641;
        float _2643;
        if (((4294967295u << _2529) & _2411) == 0u)
        {
            _2633 = _2512;
            _2635 = _2514;
            _2637 = _2516;
            _2639 = _2518;
            _2641 = _2520;
            _2643 = _2522;
        }
        else
        {
            float _2658 = inversesqrt(dot(vec3(_2365, _2366, _2367), vec3(_2365, _2366, _2367)));
            float _2659 = _2658 * _2365;
            float _2660 = _2658 * _2366;
            float _2661 = _2658 * _2367;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2529 < ((_2527 >> 12u) & 15u))
            {
                float _2634;
                float _2636;
                float _2638;
                float _2640;
                float _2642;
                float _2644;
                float _2793 = _2512;
                float _2794 = _2514;
                float _2795 = _2516;
                float _2796 = _2518;
                float _2797 = _2520;
                float _2798 = _2522;
                uint _2799 = _2529;
                uint _2808;
                bool _2809;
                for (;;)
                {
                    _2808 = texelFetch(g_lightClassification, int((((_2405 << 5u) + (_2391 << 9u)) + (_2799 << 2u)) >> 2u)).x;
                    _2809 = _2808 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2809)
                    {
                        frontier_phi_77_pred = _2798;
                        frontier_phi_77_pred_1 = _2797;
                        frontier_phi_77_pred_2 = _2796;
                        frontier_phi_77_pred_3 = _2795;
                        frontier_phi_77_pred_4 = _2794;
                        frontier_phi_77_pred_5 = _2793;
                    }
                    else
                    {
                        float _3002;
                        float _3003;
                        float _3004;
                        float _3005;
                        float _3006;
                        float _3007;
                        float _3297;
                        float _3298;
                        float _3299;
                        float _3300;
                        float _3301;
                        float _3302;
                        float _3015 = _2793;
                        float _3016 = _2794;
                        float _3017 = _2795;
                        float _3018 = _2796;
                        float _3019 = _2797;
                        float _3020 = _2798;
                        uint _3021 = _2808;
                        uint _3022;
                        vec4 _3047;
                        float _3048;
                        vec4 _3063;
                        vec3 _3075;
                        vec4 _3091;
                        vec4 _3107;
                        float _3153;
                        bool _3154;
                        for (;;)
                        {
                            uint _3032 = ((_2799 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3021));
                            _3022 = (_3021 + 4294967295u) & _3021;
                            uint _3034 = _3032 * 40u;
                            _3047 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3034)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 3u)).x));
                            _3048 = _3047.w;
                            uint _3050 = (_3032 * 40u) + 4u;
                            _3063 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3050)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 3u)).x));
                            uint _3065 = (_3032 * 40u) + 8u;
                            _3075 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3065)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 2u)).x));
                            uint _3078 = (_3032 * 40u) + 16u;
                            _3091 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3078)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 3u)).x));
                            uint _3094 = (_3032 * 40u) + 20u;
                            _3107 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3094)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 3u)).x));
                            uint _3109 = (_3032 * 40u) + 24u;
                            vec4 _3122 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3109)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 3u)).x));
                            uint _3128 = (_3032 * 40u) + 28u;
                            vec4 _3141 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3128)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 3u)).x));
                            _3153 = fma(_2367, _3141.z, fma(_2366, _3141.y, _3141.x * _2365)) + _3141.w;
                            _3154 = !((fma(_2367, _3122.z, fma(_2366, _3122.y, _3122.x * _2365)) + _3122.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3154)
                            {
                                float _3181 = _3047.x - _2365;
                                float _3182 = _3047.y - _2366;
                                float _3183 = _3047.z - _2367;
                                float _3184 = dot(vec3(_3181, _3182, _3183), vec3(_3181, _3182, _3183));
                                float _3187 = inversesqrt(_3184);
                                float _3188 = _3187 * _3181;
                                float _3189 = _3187 * _3182;
                                float _3190 = _3187 * _3183;
                                float _3194 = 1.0 - (_3184 / (_3048 * _3048));
                                float _4321 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                                float _3195 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
                                float _3199 = sqrt(_3184) * _3063.w;
                                float _3201 = 1.39999997615814208984375 / (_3199 + 1.39999997615814208984375);
                                float _3202 = _3201 * _3201;
                                float _3205 = ((1.0 - _3202) * dot(vec3(_3188, _3189, _3190), vec3(_599, _602, _605))) + _3202;
                                float _3208 = _3199 * _3199;
                                float _3212 = (fma(_2367, _3091.z, fma(_2366, _3091.y, _3091.x * _2365)) + _3091.w) / _3153;
                                float _3213 = (fma(_2367, _3107.z, fma(_2366, _3107.y, _3107.x * _2365)) + _3107.w) / _3153;
                                float _3217 = 1.0 - dot(vec2(_3212, _3213), vec2(_3212, _3213));
                                float _4337 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                                float _3218 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                                float _3219 = _3218 * (((isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0))) * _3195) / ((_3208 * 0.699999988079071044921875) + 1.0));
                                float _3231 = exp2(log2(1.0 / ((_3208 * 3.5) + 5.0)) * 0.25);
                                float _3232 = 1.0 - _674;
                                float _3239 = sqrt(1.0 - ((1.0 - (_3232 * _3232)) * (1.0 - (_3231 * _3231))));
                                float _3240 = _3239 * _3239;
                                float _3241 = _3240 * _3240;
                                float _3242 = _3188 - _2659;
                                float _3243 = _3189 - _2660;
                                float _3244 = _3190 - _2661;
                                float _3248 = inversesqrt(dot(vec3(_3242, _3243, _3244), vec3(_3242, _3243, _3244)));
                                float _3252 = dot(vec3(_599, _602, _605), vec3((-0.0) - _2659, (-0.0) - _2660, (-0.0) - _2661));
                                float _4348 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                                float _3255 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
                                float _3256 = dot(vec3(_599, _602, _605), vec3(_3248 * _3242, _3248 * _3243, _3248 * _3244));
                                float _4359 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                                float _3259 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
                                float _3263 = ((_3259 * _3259) * (_3241 + (-1.0))) + 1.0;
                                float _3264 = _3201 * _3240;
                                float _3265 = _3264 * _3264;
                                float _3271 = ((1.0 - _3265) * dot(vec3(_599, _602, _605), vec3(_3188, _3189, _3190))) + _3265;
                                float _4370 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                                float _3272 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
                                float _3273 = 1.0 - _3240;
                                float _3283 = (0.5 / (((_3272 * ((_3255 * _3273) + _3240)) + 9.9999999392252902907785028219223e-09) + (((_3272 * _3273) + _3240) * _3255))) * _3272;
                                float _4381 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                                float _3293 = (_3218 * _3195) * (((_3241 * 3.1415927410125732421875) * (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0)))) / ((_3263 * _3263) * ((_3208 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3219 * _3063.y;
                                frontier_phi_83_pred_1 = _3219 * _3063.x;
                                frontier_phi_83_pred_2 = _3293 * _3075.z;
                                frontier_phi_83_pred_3 = _3293 * _3075.y;
                                frontier_phi_83_pred_4 = _3293 * _3075.x;
                                frontier_phi_83_pred_5 = _3219 * _3063.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3301 = frontier_phi_83_pred;
                            _3300 = frontier_phi_83_pred_1;
                            _3299 = frontier_phi_83_pred_2;
                            _3298 = frontier_phi_83_pred_3;
                            _3297 = frontier_phi_83_pred_4;
                            _3302 = frontier_phi_83_pred_5;
                            _3005 = _3300 + _3018;
                            _3006 = _3301 + _3019;
                            _3007 = _3302 + _3020;
                            _3002 = _3297 + _3015;
                            _3003 = _3298 + _3016;
                            _3004 = _3299 + _3017;
                            if (_3022 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3015 = _3002;
                                _3016 = _3003;
                                _3017 = _3004;
                                _3018 = _3005;
                                _3019 = _3006;
                                _3020 = _3007;
                                _3021 = _3022;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3007;
                        frontier_phi_77_pred_1 = _3006;
                        frontier_phi_77_pred_2 = _3005;
                        frontier_phi_77_pred_3 = _3004;
                        frontier_phi_77_pred_4 = _3003;
                        frontier_phi_77_pred_5 = _3002;
                    }
                    _2644 = frontier_phi_77_pred;
                    _2642 = frontier_phi_77_pred_1;
                    _2640 = frontier_phi_77_pred_2;
                    _2638 = frontier_phi_77_pred_3;
                    _2636 = frontier_phi_77_pred_4;
                    _2634 = frontier_phi_77_pred_5;
                    uint _2800 = _2799 + 1u;
                    if (_2800 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2793 = _2634;
                        _2794 = _2636;
                        _2795 = _2638;
                        _2796 = _2640;
                        _2797 = _2642;
                        _2798 = _2644;
                        _2799 = _2800;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2638;
                frontier_phi_58_59_ladder_1 = _2644;
                frontier_phi_58_59_ladder_2 = _2642;
                frontier_phi_58_59_ladder_3 = _2640;
                frontier_phi_58_59_ladder_4 = _2636;
                frontier_phi_58_59_ladder_5 = _2634;
            }
            else
            {
                frontier_phi_58_59_ladder = _2516;
                frontier_phi_58_59_ladder_1 = _2522;
                frontier_phi_58_59_ladder_2 = _2520;
                frontier_phi_58_59_ladder_3 = _2518;
                frontier_phi_58_59_ladder_4 = _2514;
                frontier_phi_58_59_ladder_5 = _2512;
            }
            _2633 = frontier_phi_58_59_ladder_5;
            _2635 = frontier_phi_58_59_ladder_4;
            _2637 = frontier_phi_58_59_ladder;
            _2639 = frontier_phi_58_59_ladder_3;
            _2641 = frontier_phi_58_59_ladder_2;
            _2643 = frontier_phi_58_59_ladder_1;
        }
        float _2648 = isnan(1.0) ? _658 : (isnan(_658) ? 1.0 : min(_658, 1.0));
        _2424 = (_2648 * _2639) + _1860;
        _2426 = (_2648 * _2641) + _1862;
        _2428 = (_2648 * _2643) + _1864;
        _2430 = ((_2633 * _642) * _2648) + _2205;
        _2432 = ((_2635 * _644) * _2648) + _2207;
        _2434 = ((_2637 * _645) * _2648) + _2209;
    }
    else
    {
        _2424 = _1860;
        _2426 = _1862;
        _2428 = _1864;
        _2430 = _2205;
        _2432 = _2207;
        _2434 = _2209;
    }
    float _4397 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _4408 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _4419 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _2451 = ((isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_2424 + ((isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0))) * _658))) + ((_2430 + ((isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))) * _1497)) * cbPerFrame._m0[3u].x);
    float _2452 = ((isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * (_2426 + ((isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0))) * _658))) + ((_2432 + ((isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))) * _1497)) * cbPerFrame._m0[3u].x);
    float _2453 = ((isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * (_2428 + ((isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0))) * _658))) + ((_2434 + ((isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))) * _1497)) * cbPerFrame._m0[3u].x);
    uint _2454 = _224 + 6u;
    float _2462 = _578 / cbSceneParam._m0[86u].x;
    float _2463 = _579 / cbSceneParam._m0[86u].y;
    vec4 _2477 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2462, _2463, (log2((isnan(cbSceneParam._m0[77u].w) ? _499 : (isnan(_499) ? cbSceneParam._m0[77u].w : min(_499, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2479 = _2477.x;
    float _2480 = _2477.y;
    float _2481 = _2477.z;
    float _2482 = _2477.w;
    float _2575;
    float _2577;
    float _2579;
    float _2581;
    if (_499 > cbSceneParam._m0[78u].w)
    {
        float _2537 = isnan(_499) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _499 : min(cbSceneParam._m0[80u].w, _499));
        float _2538 = _2537 / _499;
        float _2549 = _2538 * _550;
        float _2550 = _551 * _2538;
        float _2551 = (-0.0) - _2550;
        float _2553 = _2538 * _552;
        float _2555 = (cbSceneParam._m0[77u].w * _2551) / _2537;
        float _2556 = _2555 + cbSceneParam._m0[79u].w;
        float _2557 = cbSceneParam._m0[79u].w - _2550;
        float _2563 = sqrt(((_2549 * _2549) + (_2550 * _2550)) + (_2553 * _2553));
        float _2566 = (1.0 - (cbSceneParam._m0[77u].w / _2537)) * _2563;
        float _2571 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2573 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2750;
        if (abs((_2551 - _2555) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2750 = ((((_2556 > 0.0) ? exp2(_2571 * _2556) : (2.0 - exp2(_2573 * _2556))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2566;
        }
        else
        {
            float _2694 = 1.0 / cbSceneParam._m0[80u].x;
            float _2695 = isnan(_2557) ? _2556 : (isnan(_2556) ? _2557 : max(_2556, _2557));
            float _2696 = isnan(_2557) ? _2556 : (isnan(_2556) ? _2557 : min(_2556, _2557));
            float _2705 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : min(_2695, 0.0));
            float _2706 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : min(_2696, 0.0));
            _2750 = ((abs(_2563 / _2551) * cbSceneParam._m0[80u].y) * ((((_2705 - _2706) * 2.0) - ((exp2(_2571 * (isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0)))) - exp2(_2571 * (isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0))))) * _2694)) - ((exp2(_2573 * _2705) - exp2(_2573 * _2706)) * _2694))) + (_2566 * cbSceneParam._m0[80u].z);
        }
        vec4 _2752 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2462, _2463, 1.0), 0.0);
        float _2761 = exp2((_2750 * (-1.44269502162933349609375)) * (1.0 - _2752.w));
        float _2762 = log2(_2761);
        float _2778 = log2(_2482);
        _2575 = (exp2(_2778 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2762 * cbSceneParam._m0[78u].x)) * _2752.x) / cbSceneParam._m0[78u].x)) + _2479;
        _2577 = (exp2(_2778 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2762 * cbSceneParam._m0[78u].y)) * _2752.y) / cbSceneParam._m0[78u].y)) + _2480;
        _2579 = (exp2(_2778 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2762 * cbSceneParam._m0[78u].z)) * _2752.z) / cbSceneParam._m0[78u].z)) + _2481;
        _2581 = _2761 * _2482;
    }
    else
    {
        _2575 = _2479;
        _2577 = _2480;
        _2579 = _2481;
        _2581 = _2482;
    }
    bool _2788;
    vec4 _2591;
    vec4 _2613;
    float _2615;
    float _2619;
    float _2620;
    float _2621;
    float _2622;
    bool _2632;
    for (;;)
    {
        _2591 = cbMatDynParam._m0[0u];
        float _2593 = roundEven(_2591.y);
        bool _2594 = _2593 == 3.0;
        float _2595 = log2(_2581);
        float _2602 = exp2(_2595 * cbSceneParam._m0[78u].x) * _2451;
        float _2603 = exp2(_2595 * cbSceneParam._m0[78u].y) * _2452;
        float _2604 = exp2(_2595 * cbSceneParam._m0[78u].z) * _2453;
        float _2611 = _566 + (-0.5);
        _2613 = cbMtdParam._m0[1u];
        _2615 = _2613.y * _2611;
        float _2618 = (_2593 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2619 = _2618 * (_2594 ? _2602 : (_2602 + (cbSceneParam._m0[72u].w * _2575)));
        _2620 = _2618 * (_2594 ? _2603 : (_2603 + (cbSceneParam._m0[72u].w * _2577)));
        _2621 = _2618 * (_2594 ? _2604 : (_2604 + (cbSceneParam._m0[72u].w * _2579)));
        _2622 = _2611 * 0.999000012874603271484375;
        _2632 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2632)
        {
            if ((cbInstanceData._m0[_224 + 7u].x + _2622) < 0.5)
            {
                _2788 = true;
                break;
            }
        }
        uint _2729 = _618 + uint(_2591.w);
        if ((cbInstanceData._m0[_2729].w < 1.0) && ((cbInstanceData._m0[_2729].w + _2622) < 0.5))
        {
            _2788 = true;
            break;
        }
        if ((_2615 + 1.0) < _2613.x)
        {
            _2788 = true;
            break;
        }
        _2788 = false;
        break;
    }
    float _2993;
    if (_2788)
    {
        discard_state = true;
        _2993 = 0.0;
    }
    else
    {
        _2993 = cbInstanceData._m0[_2454].w;
    }
    SV_Target.x = _2619;
    SV_Target.y = _2620;
    SV_Target.z = _2621;
    SV_Target.w = _2993;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2454].w;
    discard_exit();
}


