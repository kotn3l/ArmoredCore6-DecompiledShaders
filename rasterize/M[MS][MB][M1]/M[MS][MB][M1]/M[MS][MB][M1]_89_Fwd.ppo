#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1271;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _249 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _249 + 1u;
    uint _258 = _249 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_249].x * cbInstanceData._m0[_249].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _295 = _289.x * cbMtdParam._m0[11u].x;
    float _296 = _289.y * cbMtdParam._m0[11u].y;
    float _297 = _289.z * cbMtdParam._m0[11u].z;
    vec4 _316 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _354 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _356 = _354.x;
    float _368 = dot(vec4(_356, _354.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _385 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_356 - _368) * cbMtdParam._m0[24u].y) + _368) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3599 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _386 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
    float _393 = (_386 * ((_316.x * cbMtdParam._m0[12u].x) - _295)) + _295;
    float _394 = (_386 * ((_316.y * cbMtdParam._m0[12u].y) - _296)) + _296;
    float _395 = (_386 * ((_316.z * cbMtdParam._m0[12u].z) - _297)) + _297;
    vec4 _413 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _430 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _432 = _430.x;
    float _433 = _430.y;
    float _434 = _430.z;
    float _443 = ((_413.z - _434) * _386) + _434;
    float _446 = ((((_413.x - _432) * _386) + _432) * 2.0) + (-1.0);
    float _448 = ((((_413.y - _433) * _386) + _433) * 2.0) + (-1.0);
    float _449 = dot(vec2(_446, _448), vec2(_446, _448));
    float _3610 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _454 = sqrt(1.0 - (isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))));
    vec4 _467 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _485 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _268) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _487 = _485.x;
    float _488 = 1.0 - _487;
    float _494 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _497 = ((isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : min(_494, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _506 = (_497 - ((((((_487 - _488) * cbMtdParam._m0[24u].z) + _488) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _497))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3631 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _507 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
    float _514 = (_507 * (cbMtdParam._m0[17u].x - _393)) + _393;
    float _515 = (_507 * (cbMtdParam._m0[17u].y - _394)) + _394;
    float _516 = (_507 * (cbMtdParam._m0[17u].z - _395)) + _395;
    vec4 _528 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _268) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _269) + cbTextureTilingScale._m0[19u].w));
    float _530 = _528.x;
    float _531 = 1.0 - _530;
    float _558 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_530 - _531) * cbMtdParam._m0[24u].w) + _531) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3642 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _559 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
    float _567 = ((((cbMtdParam._m0[10u].x - _514) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _559) + _514;
    float _568 = ((((cbMtdParam._m0[10u].y - _515) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _559) + _515;
    float _569 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _516)) * _559) + _516;
    vec4 _595 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _597 = _595.x;
    float _615 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _268) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _269) + cbTextureTilingScale._m0[9u].w)).x - _597) * _386) + _597;
    float _619 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _615) * cbMtdParam._m0[19u].z) + _615;
    float _621 = _619 - (_619 * _507);
    float _623 = _621 - (_621 * _559);
    vec4 _637 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _268) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _269) + cbTextureTilingScale._m0[15u].w));
    float _644 = (_637.x * 2.0) + (-1.0);
    float _645 = (_637.y * 2.0) + (-1.0);
    float _646 = dot(vec2(_644, _645), vec2(_644, _645));
    float _3653 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _654 = (_507 * (_637.z - _443)) + _443;
    float _657 = ((cbMtdParam._m0[23u].y - _654) * _559) + _654;
    vec4 _676 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _268) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _269) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _682 = (_676.x * 2.0) + (-1.0);
    float _683 = (_676.y * 2.0) + (-1.0);
    float _684 = dot(vec2(_682, _683), vec2(_682, _683));
    float _3664 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _701 = (((_644 - _446) + (cbMtdParam._m0[21u].x * _446)) * _507) + _446;
    float _702 = (((_645 - _448) + (cbMtdParam._m0[21u].x * _448)) * _507) + _448;
    float _703 = (_507 * (sqrt(1.0 - (isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0)))) - _454)) + _454;
    float _714 = (((_682 - _701) + (_701 * cbMtdParam._m0[22u].z)) * _559) + _701;
    float _715 = (((_683 - _702) + (_702 * cbMtdParam._m0[22u].z)) * _559) + _702;
    float _716 = ((sqrt(1.0 - (isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0)))) - _703) * _559) + _703;
    float _718 = cbMtdParam._m0[22u].x + _467.w;
    float _721 = fma(_716, _236 * NORMAL.x, fma(_715, _243 * TANGENT.x, (_229 * _221) * _714));
    float _724 = fma(_716, _236 * NORMAL.y, fma(_715, _243 * TANGENT.y, (_229 * _222) * _714));
    float _727 = fma(_716, _236 * NORMAL.z, fma(_715, _243 * TANGENT.z, (_229 * _223) * _714));
    float _731 = inversesqrt(dot(vec3(_721, _724, _727), vec3(_721, _724, _727)));
    float _732 = _731 * _721;
    float _733 = _731 * _724;
    float _734 = _731 * _727;
    float _3675 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _735 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
    float _3686 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _3697 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _3708 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _3719 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _3730 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _740 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
    float _754 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _794 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _804 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _794);
    float _805 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _794);
    float _806 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _794);
    float _810 = inversesqrt(dot(vec3(_804, _805, _806), vec3(_804, _805, _806)));
    float _811 = _804 * _810;
    float _812 = _805 * _810;
    float _813 = _806 * _810;
    float _819 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _820 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _838 = fma(_734, cbSceneParam._m0[5u].z, fma(_733, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _732));
    float _841 = fma(_734, cbSceneParam._m0[6u].z, fma(_733, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _732));
    float _844 = fma(_734, cbSceneParam._m0[7u].z, fma(_733, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _732));
    uint _858 = (_249 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _864 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0)))) * cbInstanceData._m0[_858].x;
    float _865 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0)))) * cbInstanceData._m0[_858].y;
    float _866 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0)))) * cbInstanceData._m0[_858].z;
    float _3741 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _867 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
    float _3752 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _868 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
    float _3763 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _869 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _870 = 1.0 - _740;
    float _871 = _867 * _870;
    float _872 = _868 * _870;
    float _873 = _869 * _870;
    float _878 = (_867 + (-0.039999999105930328369140625)) * _740;
    float _879 = (_868 + (-0.039999999105930328369140625)) * _740;
    float _880 = (_869 + (-0.039999999105930328369140625)) * _740;
    float _881 = _878 + 0.039999999105930328369140625;
    float _883 = _879 + 0.039999999105930328369140625;
    float _884 = _880 + 0.039999999105930328369140625;
    vec4 _893 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _819, cbSceneParam._m0[86u].y * _820));
    float _897 = ((isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) * TEXCOORD_5.w) * _893.x;
    float _898 = dot(vec3(_732, _733, _734), vec3(_811, _812, _813));
    float _901 = _898 * 2.0;
    float _905 = (_901 * _732) - _811;
    float _906 = (_901 * _733) - _812;
    float _907 = (_901 * _734) - _813;
    float _911 = abs(dot(vec3(_811, _812, _813), vec3(_732, _733, _734)));
    float _3774 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _913 = sqrt(_735);
    float _926 = exp2((_913 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_913 * 3.0));
    float _932 = (1.0 - _926) * ((_913 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _933 = _926 * _913;
    float _961 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _965 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _969 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1270;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _995 = fma(_969, cbModelParam._m0[26u].z, fma(_965, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _961));
        float _999 = fma(_969, cbModelParam._m0[27u].z, fma(_965, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _961));
        float _1003 = fma(_969, cbModelParam._m0[28u].z, fma(_965, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _961));
        float _1028 = _961 + _732;
        float _1029 = _965 + _733;
        float _1030 = _969 + _734;
        float _1040 = fma(_1030, cbModelParam._m0[26u].z, fma(_1029, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1028)) - _995;
        float _1041 = fma(_1030, cbModelParam._m0[27u].z, fma(_1029, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1028)) - _999;
        float _1042 = fma(_1030, cbModelParam._m0[28u].z, fma(_1029, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1028)) - _1003;
        float _1046 = inversesqrt(dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042)));
        float _1059 = ((_1046 * _1040) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_995 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1060 = ((_1046 * _1041) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_999 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1061 = ((_1046 * _1042) / cbModelParam._m0[34u].z) + ((((((_1003 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        vec4 _1071 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        vec4 _1078 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        vec4 _1085 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        float _1098 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1099 = _1098 * (_1064.x + (-0.5));
        float _1100 = _1098 * (_1064.y + (-0.5));
        float _1101 = _1098 * (_1064.z + (-0.5));
        float _1108 = exp2((_1071.w + (-0.5)) * 20.0) * 2.0;
        float _1109 = _1108 * (_1071.x + (-0.5));
        float _1110 = _1108 * (_1071.y + (-0.5));
        float _1111 = _1108 * (_1071.z + (-0.5));
        float _1118 = exp2((_1078.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1078.x + (-0.5));
        float _1120 = _1118 * (_1078.y + (-0.5));
        float _1121 = _1118 * (_1078.z + (-0.5));
        float _1128 = exp2((_1085.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1085.x + (-0.5));
        float _1130 = _1128 * (_1085.y + (-0.5));
        float _1131 = _1128 * (_1085.z + (-0.5));
        float _1132 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1133 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1134 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1135 = _1099 * 0.5;
        float _1136 = _1109 * 0.5;
        float _1137 = _1119 * 0.5;
        float _1138 = dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137));
        float _1143 = (_1138 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1138);
        float _1152 = (dot(vec3(_732, _733, _734), vec3(_1143 * _1135, _1143 * _1136, _1143 * _1137)) + 1.0) * 0.5;
        float _3800 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1162 = sqrt(((_1136 * _1136) + (_1135 * _1135)) + (_1137 * _1137)) / (_1132 + 9.9999997473787516355514526367188e-06);
        float _3811 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1164 = _1163 * 2.0;
        float _1168 = (1.0 - _1163) / (_1163 + 1.0);
        float _3822 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _1178 = ((((1.0 - _1169) * (_1164 + 2.0)) * exp2(log2(isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * (_1164 + 1.0))) + _1169) * _1132;
        float _1179 = _1100 * 0.5;
        float _1180 = _1110 * 0.5;
        float _1181 = _1120 * 0.5;
        float _1182 = dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181));
        float _1187 = (_1182 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1182);
        float _1195 = (dot(vec3(_732, _733, _734), vec3(_1187 * _1179, _1187 * _1180, _1187 * _1181)) + 1.0) * 0.5;
        float _3833 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1204 = sqrt(((_1180 * _1180) + (_1179 * _1179)) + (_1181 * _1181)) / (_1133 + 9.9999997473787516355514526367188e-06);
        float _3844 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1206 = _1205 * 2.0;
        float _1210 = (1.0 - _1205) / (_1205 + 1.0);
        float _3855 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1220 = ((((1.0 - _1211) * (_1206 + 2.0)) * exp2(log2(isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * (_1206 + 1.0))) + _1211) * _1133;
        float _1221 = _1101 * 0.5;
        float _1222 = _1111 * 0.5;
        float _1223 = _1121 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1237 = (dot(vec3(_732, _733, _734), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _3866 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1246 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1134 + 9.9999997473787516355514526367188e-06);
        float _3877 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1248 = _1247 * 2.0;
        float _1252 = (1.0 - _1247) / (_1247 + 1.0);
        float _3888 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1262 = ((((1.0 - _1253) * (_1248 + 2.0)) * exp2(log2(isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * (_1248 + 1.0))) + _1253) * _1134;
        _1270 = _1101;
        _1272 = _1100;
        _1273 = _1099;
        _1274 = _1111;
        _1275 = _1110;
        _1276 = _1109;
        _1277 = _1121;
        _1278 = _1120;
        _1279 = _1119;
        _1280 = _1134;
        _1281 = _1133;
        _1282 = _1132;
        _1283 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0)));
        _1284 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0)));
        _1285 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)));
    }
    else
    {
        _1270 = _1271;
        _1272 = _1271;
        _1273 = _1271;
        _1274 = _1271;
        _1275 = _1271;
        _1276 = _1271;
        _1277 = _1271;
        _1278 = _1271;
        _1279 = _1271;
        _1280 = _1271;
        _1281 = _1271;
        _1282 = _1271;
        _1283 = 0.0;
        _1284 = 0.0;
        _1285 = 0.0;
    }
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1310 = fma(_969, cbModelParam._m0[30u].z, fma(_965, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _961));
        float _1314 = fma(_969, cbModelParam._m0[31u].z, fma(_965, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _961));
        float _1318 = fma(_969, cbModelParam._m0[32u].z, fma(_965, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _961));
        float _1341 = _961 + _732;
        float _1342 = _965 + _733;
        float _1343 = _969 + _734;
        float _1353 = fma(_1343, cbModelParam._m0[30u].z, fma(_1342, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1341)) - _1310;
        float _1354 = fma(_1343, cbModelParam._m0[31u].z, fma(_1342, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1341)) - _1314;
        float _1355 = fma(_1343, cbModelParam._m0[32u].z, fma(_1342, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1341)) - _1318;
        float _1359 = inversesqrt(dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355)));
        float _1372 = ((_1359 * _1353) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1310 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1373 = ((_1359 * _1354) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1314 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1374 = ((_1359 * _1355) / cbModelParam._m0[35u].z) + ((((((_1318 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1376 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        vec4 _1383 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        vec4 _1390 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        vec4 _1397 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        float _1409 = exp2((_1376.w + (-0.5)) * 20.0) * 2.0;
        float _1410 = _1409 * (_1376.x + (-0.5));
        float _1411 = _1409 * (_1376.y + (-0.5));
        float _1412 = _1409 * (_1376.z + (-0.5));
        float _1419 = exp2((_1383.w + (-0.5)) * 20.0) * 2.0;
        float _1420 = _1419 * (_1383.x + (-0.5));
        float _1421 = _1419 * (_1383.y + (-0.5));
        float _1422 = _1419 * (_1383.z + (-0.5));
        float _1429 = exp2((_1390.w + (-0.5)) * 20.0) * 2.0;
        float _1430 = _1429 * (_1390.x + (-0.5));
        float _1431 = _1429 * (_1390.y + (-0.5));
        float _1432 = _1429 * (_1390.z + (-0.5));
        float _1439 = exp2((_1397.w + (-0.5)) * 20.0) * 2.0;
        float _1440 = _1439 * (_1397.x + (-0.5));
        float _1441 = _1439 * (_1397.y + (-0.5));
        float _1442 = _1439 * (_1397.z + (-0.5));
        float _1443 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1444 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1445 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1446 = _1410 * 0.5;
        float _1447 = _1420 * 0.5;
        float _1448 = _1430 * 0.5;
        float _1449 = dot(vec3(_1446, _1447, _1448), vec3(_1446, _1447, _1448));
        float _1454 = (_1449 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1449);
        float _1462 = (dot(vec3(_732, _733, _734), vec3(_1454 * _1446, _1454 * _1447, _1454 * _1448)) + 1.0) * 0.5;
        float _3929 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1471 = sqrt(((_1447 * _1447) + (_1446 * _1446)) + (_1448 * _1448)) / (_1443 + 9.9999997473787516355514526367188e-06);
        float _3940 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1473 = _1472 * 2.0;
        float _1477 = (1.0 - _1472) / (_1472 + 1.0);
        float _3951 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1487 = ((((1.0 - _1478) * (_1473 + 2.0)) * exp2(log2(isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * (_1473 + 1.0))) + _1478) * _1443;
        float _1488 = _1411 * 0.5;
        float _1489 = _1421 * 0.5;
        float _1490 = _1431 * 0.5;
        float _1491 = dot(vec3(_1488, _1489, _1490), vec3(_1488, _1489, _1490));
        float _1496 = (_1491 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1491);
        float _1504 = (dot(vec3(_732, _733, _734), vec3(_1496 * _1488, _1496 * _1489, _1496 * _1490)) + 1.0) * 0.5;
        float _3962 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1513 = sqrt(((_1489 * _1489) + (_1488 * _1488)) + (_1490 * _1490)) / (_1444 + 9.9999997473787516355514526367188e-06);
        float _3973 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1515 = _1514 * 2.0;
        float _1519 = (1.0 - _1514) / (_1514 + 1.0);
        float _3984 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1529 = ((((1.0 - _1520) * (_1515 + 2.0)) * exp2(log2(isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (_1515 + 1.0))) + _1520) * _1444;
        float _1530 = _1412 * 0.5;
        float _1531 = _1422 * 0.5;
        float _1532 = _1432 * 0.5;
        float _1533 = dot(vec3(_1530, _1531, _1532), vec3(_1530, _1531, _1532));
        float _1538 = (_1533 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1533);
        float _1546 = (dot(vec3(_732, _733, _734), vec3(_1538 * _1530, _1538 * _1531, _1538 * _1532)) + 1.0) * 0.5;
        float _3995 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1555 = sqrt(((_1531 * _1531) + (_1530 * _1530)) + (_1532 * _1532)) / (_1445 + 9.9999997473787516355514526367188e-06);
        float _4006 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1557 = _1556 * 2.0;
        float _1561 = (1.0 - _1556) / (_1556 + 1.0);
        float _4017 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1571 = ((((1.0 - _1562) * (_1557 + 2.0)) * exp2(log2(isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1557 + 1.0))) + _1562) * _1445;
        _1579 = _1412;
        _1580 = _1411;
        _1581 = _1410;
        _1582 = _1422;
        _1583 = _1421;
        _1584 = _1420;
        _1585 = _1432;
        _1586 = _1431;
        _1587 = _1430;
        _1588 = _1445;
        _1589 = _1444;
        _1590 = _1443;
        _1591 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)));
        _1592 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)));
        _1593 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)));
    }
    else
    {
        _1579 = _1271;
        _1580 = _1271;
        _1581 = _1271;
        _1582 = _1271;
        _1583 = _1271;
        _1584 = _1271;
        _1585 = _1271;
        _1586 = _1271;
        _1587 = _1271;
        _1588 = _1271;
        _1589 = _1271;
        _1590 = _1271;
        _1591 = 0.0;
        _1592 = 0.0;
        _1593 = 0.0;
    }
    float _1603 = (cbModelParam._m0[1u].x * (_1591 - _1283)) + _1283;
    float _1604 = (cbModelParam._m0[1u].x * (_1592 - _1284)) + _1284;
    float _1605 = (cbModelParam._m0[1u].x * (_1593 - _1285)) + _1285;
    float _1626 = fma(_1605, cbSceneParam._m0[89u].z, fma(_1604, cbSceneParam._m0[89u].y, _1603 * cbSceneParam._m0[89u].x));
    float _1629 = fma(_1605, cbSceneParam._m0[90u].z, fma(_1604, cbSceneParam._m0[90u].y, _1603 * cbSceneParam._m0[90u].x));
    float _1632 = fma(_1605, cbSceneParam._m0[91u].z, fma(_1604, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1603));
    float _1647 = _905 * 0.5;
    float _1648 = _906 * 0.5;
    float _1649 = _907 * 0.5;
    float _1650 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1581, _1584, _1587, _1590));
    float _1653 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1580, _1583, _1586, _1589));
    float _1656 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1579, _1582, _1585, _1588));
    float _1690;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1663 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1270, _1274, _1277, _1280));
        float _1667 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1272, _1275, _1278, _1281));
        float _1671 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1273, _1276, _1279, _1282));
        float _1678 = dot(vec4(cbModelParam._m0[39u]), vec4(_1647, _1648, _1649, 1.0));
        _1690 = dot(vec3(isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0)), isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)), isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1678) ? 0.0 : (isnan(0.0) ? _1678 : max(0.0, _1678))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1690 = 1.0;
    }
    float _1701;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1692 = dot(vec4(cbModelParam._m0[40u]), vec4(_1647, _1648, _1649, 1.0));
        _1701 = dot(vec3(isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)), isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)), isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1692) ? 0.0 : (isnan(0.0) ? _1692 : max(0.0, _1692))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1701 = 1.0;
    }
    float _1705 = (_1701 * cbModelParam._m0[1u].x) + (_1690 * (1.0 - cbModelParam._m0[1u].x));
    float _1715 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _735);
    float _1716 = isnan(_1715) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1715 : min(cbModelParam._m0[25u].z, _1715));
    float _1797;
    float _1799;
    float _1801;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1764 = fma(_969, cbModelParam._m0[13u].z, fma(_965, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _961)) + cbModelParam._m0[13u].w;
        float _1768 = fma(_969, cbModelParam._m0[14u].z, fma(_965, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _961)) + cbModelParam._m0[14u].w;
        float _1772 = fma(_969, cbModelParam._m0[15u].z, fma(_965, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _961)) + cbModelParam._m0[15u].w;
        float _1775 = fma(_907, cbModelParam._m0[13u].z, fma(_906, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _905));
        float _1778 = fma(_907, cbModelParam._m0[14u].z, fma(_906, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _905));
        float _1781 = fma(_907, cbModelParam._m0[15u].z, fma(_906, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _905));
        float _1809;
        if (_1775 > 0.0)
        {
            _1809 = abs((1.0 - _1764) / _1775);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1764 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1809 = frontier_phi_14_12_ladder;
        }
        float _2012;
        if (_1778 > 0.0)
        {
            _2012 = abs((1.0 - _1768) / _1778);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1768 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2012 = frontier_phi_23_19_ladder;
        }
        float _2266;
        if (_1781 > 0.0)
        {
            _2266 = abs((1.0 - _1772) / _1781);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1781 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1772 + 1.0) / _1781);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2266 = frontier_phi_35_30_ladder;
        }
        float _2268 = isnan(_2012) ? _1809 : (isnan(_1809) ? _2012 : min(_1809, _2012));
        float _2269 = isnan(_2266) ? _2268 : (isnan(_2268) ? _2266 : min(_2268, _2266));
        float _2273 = (_2269 * _1775) + _1764;
        float _2274 = (_2269 * _1778) + _1768;
        float _2275 = (_2269 * _1781) + _1772;
        float _2276 = _2269 * 9.9999997473787516355514526367188e-05;
        float _2278 = (-1.0) - _2276;
        float _2280 = _2276 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2275 > _2280) || ((_2275 < _2278) || ((_2274 > _2280) || ((_2274 < _2278) || ((_2273 < _2278) || (_2273 > _2280))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2403 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2275, cbModelParam._m0[9u].z, fma(_2274, cbModelParam._m0[9u].y, _2273 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2275, cbModelParam._m0[10u].z, fma(_2274, cbModelParam._m0[10u].y, _2273 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2275, cbModelParam._m0[11u].z, fma(_2274, cbModelParam._m0[11u].y, _2273 * cbModelParam._m0[11u].x))), _1716);
            frontier_phi_13_35_ladder = _2403.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2403.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2403.x * cbModelParam._m0[1u].y;
        }
        _1797 = frontier_phi_13_35_ladder_2;
        _1799 = frontier_phi_13_35_ladder_1;
        _1801 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1785 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_905, _906, _907), _1716);
        _1797 = _1785.x * cbModelParam._m0[1u].y;
        _1799 = _1785.y * cbModelParam._m0[1u].y;
        _1801 = _1785.z * cbModelParam._m0[1u].y;
    }
    float _1805 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _735);
    float _1806 = isnan(_1805) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1805 : min(cbModelParam._m0[25u].w, _1805));
    float _1896;
    float _1898;
    float _1900;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1860 = fma(_969, cbModelParam._m0[21u].z, fma(_965, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _961)) + cbModelParam._m0[21u].w;
        float _1864 = fma(_969, cbModelParam._m0[22u].z, fma(_965, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _961)) + cbModelParam._m0[22u].w;
        float _1868 = fma(_969, cbModelParam._m0[23u].z, fma(_965, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _961)) + cbModelParam._m0[23u].w;
        float _1871 = fma(_907, cbModelParam._m0[21u].z, fma(_906, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _905));
        float _1874 = fma(_907, cbModelParam._m0[22u].z, fma(_906, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _905));
        float _1877 = fma(_907, cbModelParam._m0[23u].z, fma(_906, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _905));
        float _2017;
        if (_1871 > 0.0)
        {
            _2017 = abs((1.0 - _1860) / _1871);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1871 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1860 + 1.0) / _1871);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2017 = frontier_phi_25_21_ladder;
        }
        float _2293;
        if (_1874 > 0.0)
        {
            _2293 = abs((1.0 - _1864) / _1874);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1874 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1864 + 1.0) / _1874);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2293 = frontier_phi_37_32_ladder;
        }
        float _2506;
        if (_1877 > 0.0)
        {
            _2506 = abs((1.0 - _1868) / _1877);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1877 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1868 + 1.0) / _1877);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2506 = frontier_phi_46_43_ladder;
        }
        float _2508 = isnan(_2293) ? _2017 : (isnan(_2017) ? _2293 : min(_2017, _2293));
        float _2509 = isnan(_2506) ? _2508 : (isnan(_2508) ? _2506 : min(_2508, _2506));
        float _2513 = (_2509 * _1871) + _1860;
        float _2514 = (_2509 * _1874) + _1864;
        float _2515 = (_2509 * _1877) + _1868;
        float _2516 = _2509 * 9.9999997473787516355514526367188e-05;
        float _2517 = (-1.0) - _2516;
        float _2519 = _2516 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2515 > _2519) || ((_2515 < _2517) || ((_2514 > _2519) || ((_2514 < _2517) || ((_2513 < _2517) || (_2513 > _2519))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2714 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2515, cbModelParam._m0[17u].z, fma(_2514, cbModelParam._m0[17u].y, _2513 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2515, cbModelParam._m0[18u].z, fma(_2514, cbModelParam._m0[18u].y, _2513 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2515, cbModelParam._m0[19u].z, fma(_2514, cbModelParam._m0[19u].y, _2513 * cbModelParam._m0[19u].x))), _1806);
            frontier_phi_22_46_ladder = _2714.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2714.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2714.x * cbModelParam._m0[1u].z;
        }
        _1896 = frontier_phi_22_46_ladder_2;
        _1898 = frontier_phi_22_46_ladder_1;
        _1900 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1880 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_905, _906, _907), _1806);
        _1896 = _1880.x * cbModelParam._m0[1u].z;
        _1898 = _1880.y * cbModelParam._m0[1u].z;
        _1900 = _1880.z * cbModelParam._m0[1u].z;
    }
    float _1913 = (((_932 * _881) + _933) * _897) * ((cbModelParam._m0[1u].w * (_1896 - _1797)) + _1797);
    float _1915 = (((_932 * _883) + _933) * _897) * ((cbModelParam._m0[1u].w * (_1898 - _1799)) + _1799);
    float _1917 = (((_932 * _884) + _933) * _897) * ((cbModelParam._m0[1u].w * (_1900 - _1801)) + _1801);
    float _1920 = fma(_1917, cbSceneParam._m0[89u].z, fma(_1915, cbSceneParam._m0[89u].y, _1913 * cbSceneParam._m0[89u].x));
    float _1923 = fma(_1917, cbSceneParam._m0[90u].z, fma(_1915, cbSceneParam._m0[90u].y, _1913 * cbSceneParam._m0[90u].x));
    float _1926 = fma(_1917, cbSceneParam._m0[91u].z, fma(_1915, cbSceneParam._m0[91u].y, _1913 * cbSceneParam._m0[91u].x));
    uvec4 _1936 = floatBitsToUint(cbInstanceData._m0[_249 + 5u]);
    uint _1938 = _1936.x * 14u;
    uint _1939 = _1938 + 13u;
    float _1946 = _897 + (-1.0);
    float _1951 = (cbLight._m0[_1939].x * _1946) + 1.0;
    float _1952 = (cbLight._m0[_1939].y * _1946) + 1.0;
    float _1953 = (cbLight._m0[_1939].z * _1946) + 1.0;
    float _1954 = (cbLight._m0[_1939].w * _1946) + 1.0;
    uint _1955 = _1938 + 5u;
    float _1961 = isnan(1.0) ? _1952 : (isnan(_1952) ? 1.0 : min(_1952, 1.0));
    uint _1965 = _1938 + 4u;
    float _1971 = isnan(1.0) ? _1951 : (isnan(_1951) ? 1.0 : min(_1951, 1.0));
    uint _1975 = _1938 | 1u;
    float _1986 = dot(vec3(cbLight._m0[_1938].xyz), vec3(_732, _733, _734));
    float _1989 = dot(vec3(cbLight._m0[_1975].xyz), vec3(_732, _733, _734));
    float _4153 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _4164 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1994 = (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * 0.3183098733425140380859375;
    float _1996 = (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * 0.3183098733425140380859375;
    float _2003 = ((cbLight._m0[_1955].x * _1961) * _1996) + ((cbLight._m0[_1965].x * _1971) * _1994);
    float _2004 = ((_1961 * cbLight._m0[_1955].y) * _1996) + ((_1971 * cbLight._m0[_1965].y) * _1994);
    float _2005 = ((_1961 * cbLight._m0[_1955].z) * _1996) + ((_1971 * cbLight._m0[_1965].z) * _1994);
    uvec4 _2009 = floatBitsToUint(cbLight._m0[_1938 + 12u]);
    bool _2011 = _2009.x == 0u;
    float _2022;
    float _2024;
    float _2026;
    if (_2011)
    {
        _2022 = _2003;
        _2024 = _2004;
        _2026 = _2005;
    }
    else
    {
        uint _2030 = _1938 + 6u;
        float _2046 = (dot(vec3(cbLight._m0[_1938 + 2u].xyz), vec3(_732, _733, _734)) * 0.5) + 0.5;
        float _2047 = _2046 * _2046;
        float _4175 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        float _2048 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _2049 = isnan(1.0) ? _1953 : (isnan(_1953) ? 1.0 : min(_1953, 1.0));
        _2022 = (((cbLight._m0[_2030].x * 0.3183098733425140380859375) * _2048) * _2049) + _2003;
        _2024 = (((cbLight._m0[_2030].y * 0.3183098733425140380859375) * _2048) * _2049) + _2004;
        _2026 = (((cbLight._m0[_2030].z * 0.3183098733425140380859375) * _2048) * _2049) + _2005;
    }
    bool _2029 = _2009.y == 0u;
    float _2067;
    float _2069;
    float _2071;
    if (_2029)
    {
        _2067 = _2022;
        _2069 = _2024;
        _2071 = _2026;
    }
    else
    {
        uint _2237 = _1938 + 7u;
        float _2253 = (dot(vec3(cbLight._m0[_1938 + 3u].xyz), vec3(_732, _733, _734)) * 0.5) + 0.5;
        float _2254 = _2253 * _2253;
        float _4191 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        float _2255 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _2256 = isnan(1.0) ? _1954 : (isnan(_1954) ? 1.0 : min(_1954, 1.0));
        _2067 = (((cbLight._m0[_2237].x * 0.3183098733425140380859375) * _2255) * _2256) + _2022;
        _2069 = (((cbLight._m0[_2237].y * 0.3183098733425140380859375) * _2255) * _2256) + _2024;
        _2071 = (((cbLight._m0[_2237].z * 0.3183098733425140380859375) * _2255) * _2256) + _2026;
    }
    uint _2074 = _1938 + 8u;
    float _2087 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1938].w)) * _735) * 0.949999988079071044921875);
    float _2088 = _2087 * _2087;
    float _2089 = cbLight._m0[_1938].x + _811;
    float _2090 = cbLight._m0[_1938].y + _812;
    float _2091 = cbLight._m0[_1938].z + _813;
    float _2095 = inversesqrt(dot(vec3(_2089, _2090, _2091), vec3(_2089, _2090, _2091)));
    float _2096 = _2095 * _2089;
    float _2097 = _2095 * _2090;
    float _2098 = _2095 * _2091;
    float _2099 = dot(vec3(_732, _733, _734), vec3(cbLight._m0[_1938].xyz));
    float _4207 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2102 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
    float _4218 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _2103 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
    float _2104 = dot(vec3(_732, _733, _734), vec3(_2096, _2097, _2098));
    float _4229 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2107 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
    float _2108 = dot(vec3(cbLight._m0[_1938].xyz), vec3(_2096, _2097, _2098));
    float _4240 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2112 = _2088 * _2088;
    float _2116 = ((_2107 * _2107) * (_2112 + (-1.0))) + 1.0;
    float _2124 = exp2(log2(1.0 - (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0)))) * 5.0);
    float _2125 = 0.959999978542327880859375 - _878;
    float _2127 = 0.959999978542327880859375 - _879;
    float _2128 = 0.959999978542327880859375 - _880;
    float _2135 = 1.0 - _2088;
    float _2146 = (0.5 / (((_2103 * ((_2102 * _2135) + _2088)) + 9.9999999392252902907785028219223e-09) + (((_2103 * _2135) + _2088) * _2102))) * _2102;
    float _4251 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2148 = (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_2112 / ((_2116 * _2116) * 3.141590118408203125));
    uint _2159 = _1938 + 9u;
    float _2170 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1975].w)) * _735) * 0.949999988079071044921875);
    float _2171 = _2170 * _2170;
    float _2172 = cbLight._m0[_1975].x + _811;
    float _2173 = cbLight._m0[_1975].y + _812;
    float _2174 = cbLight._m0[_1975].z + _813;
    float _2178 = inversesqrt(dot(vec3(_2172, _2173, _2174), vec3(_2172, _2173, _2174)));
    float _2179 = _2178 * _2172;
    float _2180 = _2178 * _2173;
    float _2181 = _2178 * _2174;
    float _2182 = dot(vec3(_732, _733, _734), vec3(cbLight._m0[_1975].xyz));
    float _4262 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2185 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
    float _2186 = dot(vec3(_732, _733, _734), vec3(_2179, _2180, _2181));
    float _4273 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2189 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
    float _2190 = dot(vec3(cbLight._m0[_1975].xyz), vec3(_2179, _2180, _2181));
    float _4284 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2194 = _2171 * _2171;
    float _2198 = ((_2189 * _2189) * (_2194 + (-1.0))) + 1.0;
    float _2205 = exp2(log2(1.0 - (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0)))) * 5.0);
    float _2212 = 1.0 - _2171;
    float _2222 = (0.5 / (((_2103 * ((_2185 * _2212) + _2171)) + 9.9999999392252902907785028219223e-09) + (((_2103 * _2212) + _2171) * _2185))) * _2185;
    float _4295 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2224 = (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_2194 / ((_2198 * _2198) * 3.141590118408203125));
    float _2234 = (((((_2205 * _2125) + _881) * cbLight._m0[_2159].x) * _2224) * _1961) + (((((_2124 * _2125) + _881) * cbLight._m0[_2074].x) * _2148) * _1971);
    float _2235 = (((((_2205 * _2127) + _883) * cbLight._m0[_2159].y) * _2224) * _1961) + (((((_2124 * _2127) + _883) * cbLight._m0[_2074].y) * _2148) * _1971);
    float _2236 = (((((_2205 * _2128) + _884) * cbLight._m0[_2159].z) * _2224) * _1961) + (((((_2124 * _2128) + _884) * cbLight._m0[_2074].z) * _2148) * _1971);
    float _2298;
    float _2300;
    float _2302;
    if (_2011)
    {
        _2298 = _2234;
        _2300 = _2235;
        _2302 = _2236;
    }
    else
    {
        uint _2304 = _1938 + 2u;
        uint _2308 = _1938 + 10u;
        float _2322 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2304].w)) * _735) * 0.949999988079071044921875);
        float _2323 = _2322 * _2322;
        float _2324 = cbLight._m0[_2304].x + _811;
        float _2325 = cbLight._m0[_2304].y + _812;
        float _2326 = cbLight._m0[_2304].z + _813;
        float _2330 = inversesqrt(dot(vec3(_2324, _2325, _2326), vec3(_2324, _2325, _2326)));
        float _2331 = _2330 * _2324;
        float _2332 = _2330 * _2325;
        float _2333 = _2330 * _2326;
        float _2334 = dot(vec3(_732, _733, _734), vec3(cbLight._m0[_2304].xyz));
        float _4306 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2337 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _2338 = dot(vec3(_732, _733, _734), vec3(_2331, _2332, _2333));
        float _4317 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2341 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _2342 = dot(vec3(cbLight._m0[_2304].xyz), vec3(_2331, _2332, _2333));
        float _4328 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2346 = _2323 * _2323;
        float _2350 = ((_2341 * _2341) * (_2346 + (-1.0))) + 1.0;
        float _2357 = exp2(log2(1.0 - (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) * 5.0);
        float _2364 = 1.0 - _2323;
        float _2374 = (0.5 / (((_2103 * ((_2337 * _2364) + _2323)) + 9.9999999392252902907785028219223e-09) + (((_2103 * _2364) + _2323) * _2337))) * _2337;
        float _4339 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2376 = (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_2346 / ((_2350 * _2350) * 3.141590118408203125));
        float _2377 = isnan(1.0) ? _1953 : (isnan(_1953) ? 1.0 : min(_1953, 1.0));
        _2298 = (((((_2357 * _2125) + _881) * cbLight._m0[_2308].x) * _2376) * _2377) + _2234;
        _2300 = (((((_2357 * _2127) + _883) * cbLight._m0[_2308].y) * _2376) * _2377) + _2235;
        _2302 = (((((_2357 * _2128) + _884) * cbLight._m0[_2308].z) * _2376) * _2377) + _2236;
    }
    float _2412;
    float _2414;
    float _2416;
    if (_2029)
    {
        _2412 = _2298;
        _2414 = _2300;
        _2416 = _2302;
    }
    else
    {
        uint _2423 = _1938 + 3u;
        uint _2427 = _1938 + 11u;
        float _2441 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2423].w)) * _735) * 0.949999988079071044921875);
        float _2442 = _2441 * _2441;
        float _2443 = cbLight._m0[_2423].x + _811;
        float _2444 = cbLight._m0[_2423].y + _812;
        float _2445 = cbLight._m0[_2423].z + _813;
        float _2449 = inversesqrt(dot(vec3(_2443, _2444, _2445), vec3(_2443, _2444, _2445)));
        float _2450 = _2449 * _2443;
        float _2451 = _2449 * _2444;
        float _2452 = _2449 * _2445;
        float _2453 = dot(vec3(_732, _733, _734), vec3(cbLight._m0[_2423].xyz));
        float _4355 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2456 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _2457 = dot(vec3(_732, _733, _734), vec3(_2450, _2451, _2452));
        float _4366 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2460 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _2461 = dot(vec3(cbLight._m0[_2423].xyz), vec3(_2450, _2451, _2452));
        float _4377 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2465 = _2442 * _2442;
        float _2469 = ((_2460 * _2460) * (_2465 + (-1.0))) + 1.0;
        float _2476 = exp2(log2(1.0 - (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0)))) * 5.0);
        float _2483 = 1.0 - _2442;
        float _2493 = (0.5 / (((_2103 * ((_2456 * _2483) + _2442)) + 9.9999999392252902907785028219223e-09) + (((_2103 * _2483) + _2442) * _2456))) * _2456;
        float _4388 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2495 = (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_2465 / ((_2469 * _2469) * 3.141590118408203125));
        float _2496 = isnan(1.0) ? _1954 : (isnan(_1954) ? 1.0 : min(_1954, 1.0));
        _2412 = (((((_2476 * _2125) + _881) * cbLight._m0[_2427].x) * _2495) * _2496) + _2298;
        _2414 = (((((_2476 * _2127) + _883) * cbLight._m0[_2427].y) * _2495) * _2496) + _2300;
        _2416 = (((((_2476 * _2128) + _884) * cbLight._m0[_2427].z) * _2495) * _2496) + _2302;
    }
    float _2631;
    float _2633;
    float _2635;
    float _2637;
    float _2639;
    float _2641;
    if (_1936.y == 0u)
    {
        float _2571 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2572 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2571;
        float _2573 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2571;
        float _2574 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2571;
        uvec4 _2586 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2587 = _2586.x;
        uint _2598 = uint((float(_2586.y) * floor(float(uint(cbSceneParam._m0[85u].y * _820) / _2587))) + floor(float(uint(cbSceneParam._m0[85u].x * _819) / _2587)));
        float _2608 = (log2(_2574 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2609 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        uint _2612 = uint(isnan(14.0) ? _2609 : (isnan(_2609) ? 14.0 : min(_2609, 14.0)));
        uvec4 _2617 = texelFetch(g_lightClusterGridBuffer, int(((_2612 << 2u) + (_2598 << 6u)) >> 2u));
        uint _2618 = _2617.x;
        uint _2619 = _2586.z;
        float _2719;
        float _2721;
        float _2723;
        float _2725;
        float _2727;
        float _2729;
        if (((((1u << ((_2619 >> 4u) & 15u)) + 4294967295u) & _2618) == 0u) || ((_2619 & 240u) == 0u))
        {
            _2719 = 0.0;
            _2721 = 0.0;
            _2723 = 0.0;
            _2725 = 0.0;
            _2727 = 0.0;
            _2729 = 0.0;
        }
        else
        {
            float _2720;
            float _2722;
            float _2724;
            float _2726;
            float _2728;
            float _2730;
            float _2864 = 0.0;
            float _2865 = 0.0;
            float _2866 = 0.0;
            float _2867 = 0.0;
            float _2868 = 0.0;
            float _2869 = 0.0;
            uint _2870 = 0u;
            uint _2879;
            bool _2880;
            for (;;)
            {
                _2879 = texelFetch(g_lightClassification, int((((_2612 << 5u) + (_2598 << 9u)) + (_2870 << 2u)) >> 2u)).x;
                _2880 = _2879 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2880)
                {
                    frontier_phi_61_pred = _2864;
                    frontier_phi_61_pred_1 = _2869;
                    frontier_phi_61_pred_2 = _2868;
                    frontier_phi_61_pred_3 = _2867;
                    frontier_phi_61_pred_4 = _2866;
                    frontier_phi_61_pred_5 = _2865;
                }
                else
                {
                    float _2988;
                    float _2989;
                    float _2990;
                    float _2991;
                    float _2992;
                    float _2993;
                    uint _2994;
                    _2988 = _2864;
                    _2989 = _2865;
                    _2990 = _2866;
                    _2991 = _2867;
                    _2992 = _2868;
                    _2993 = _2869;
                    _2994 = _2879;
                    float _2920;
                    float _2921;
                    float _2922;
                    float _2923;
                    float _2924;
                    float _2925;
                    for (;;)
                    {
                        uint _2998 = uint(findLSB(_2994)) + (_2870 << 5u);
                        uint _2995 = (_2994 + 4294967295u) & _2994;
                        uint _3000 = _2998 * 48u;
                        vec4 _3014 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3000)).x, texelFetch(g_PointLightRenderingBuffer, int(_3000 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3000 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3000 + 3u)).x));
                        uint _3020 = (_2998 * 48u) + 4u;
                        vec4 _3033 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3020)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 3u)).x));
                        uint _3039 = (_2998 * 48u) + 8u;
                        vec3 _3050 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3039)).x, texelFetch(g_PointLightRenderingBuffer, int(_3039 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3039 + 2u)).x));
                        float _3054 = _3014.x - _2572;
                        float _3055 = _3014.y - _2573;
                        float _3056 = _3014.z - _2574;
                        float _3057 = dot(vec3(_3054, _3055, _3056), vec3(_3054, _3055, _3056));
                        float _3060 = inversesqrt(_3057);
                        float _3061 = _3060 * _3054;
                        float _3062 = _3060 * _3055;
                        float _3063 = _3060 * _3056;
                        float _3064 = dot(vec3(_838, _841, _844), vec3(_3061, _3062, _3063));
                        float _3069 = 1.0 - (_3057 * _3014.w);
                        float _4414 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                        float _3070 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
                        float _3071 = sqrt(_3057) * _3033.w;
                        float _3074 = 1.39999997615814208984375 / (_3071 + 1.39999997615814208984375);
                        float _3075 = _3074 * _3074;
                        float _3078 = ((1.0 - _3075) * _3064) + _3075;
                        float _3081 = _3071 * _3071;
                        float _3085 = ((isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0))) * _3070) / ((_3081 * 0.699999988079071044921875) + 1.0);
                        float _3089 = (-0.0) - _2572;
                        float _3090 = (-0.0) - _2573;
                        float _3091 = (-0.0) - _2574;
                        float _3095 = inversesqrt(dot(vec3(_3089, _3090, _3091), vec3(_3089, _3090, _3091)));
                        float _3096 = _3095 * _3089;
                        float _3097 = _3095 * _3090;
                        float _3098 = _3095 * _3091;
                        float _3106 = exp2(log2(1.0 / ((_3081 * 3.5) + 5.0)) * 0.25);
                        float _3107 = 1.0 - _913;
                        float _3114 = sqrt(1.0 - ((1.0 - (_3107 * _3107)) * (1.0 - (_3106 * _3106))));
                        float _3115 = _3114 * _3114;
                        float _3116 = _3115 * _3115;
                        float _3117 = _3096 + _3061;
                        float _3118 = _3097 + _3062;
                        float _3119 = _3098 + _3063;
                        float _3123 = inversesqrt(dot(vec3(_3117, _3118, _3119), vec3(_3117, _3118, _3119)));
                        float _3127 = dot(vec3(_838, _841, _844), vec3(_3096, _3097, _3098));
                        float _4430 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                        float _3130 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
                        float _3131 = dot(vec3(_838, _841, _844), vec3(_3123 * _3117, _3123 * _3118, _3123 * _3119));
                        float _4441 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                        float _3134 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
                        float _3138 = ((_3134 * _3134) * (_3116 + (-1.0))) + 1.0;
                        float _3139 = _3074 * _3115;
                        float _3140 = _3139 * _3139;
                        float _3143 = ((1.0 - _3140) * _3064) + _3140;
                        float _4452 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                        float _3144 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
                        float _3145 = 1.0 - _3115;
                        float _3155 = (0.5 / (((_3144 * ((_3130 * _3145) + _3115)) + 9.9999999392252902907785028219223e-09) + (((_3144 * _3145) + _3115) * _3130))) * _3144;
                        float _4463 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                        float _3166 = (((_3116 * 3.1415927410125732421875) * (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0)))) / ((_3138 * _3138) * ((_3081 * 2.1991131305694580078125) + 3.141590118408203125))) * _3070;
                        _2923 = (_3085 * _3033.x) + _2991;
                        _2924 = (_3085 * _3033.y) + _2992;
                        _2925 = (_3085 * _3033.z) + _2993;
                        _2920 = (_3166 * _3050.x) + _2988;
                        _2921 = (_3166 * _3050.y) + _2989;
                        _2922 = (_3166 * _3050.z) + _2990;
                        if (_2995 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2988 = _2920;
                            _2989 = _2921;
                            _2990 = _2922;
                            _2991 = _2923;
                            _2992 = _2924;
                            _2993 = _2925;
                            _2994 = _2995;
                        }
                    }
                    frontier_phi_61_pred = _2920;
                    frontier_phi_61_pred_1 = _2925;
                    frontier_phi_61_pred_2 = _2924;
                    frontier_phi_61_pred_3 = _2923;
                    frontier_phi_61_pred_4 = _2922;
                    frontier_phi_61_pred_5 = _2921;
                }
                _2720 = frontier_phi_61_pred;
                _2730 = frontier_phi_61_pred_1;
                _2728 = frontier_phi_61_pred_2;
                _2726 = frontier_phi_61_pred_3;
                _2724 = frontier_phi_61_pred_4;
                _2722 = frontier_phi_61_pred_5;
                uint _2871 = _2870 + 1u;
                if (_2871 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2864 = _2720;
                    _2865 = _2722;
                    _2866 = _2724;
                    _2867 = _2726;
                    _2868 = _2728;
                    _2869 = _2730;
                    _2870 = _2871;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2719 = _2720;
            _2721 = _2722;
            _2723 = _2724;
            _2725 = _2726;
            _2727 = _2728;
            _2729 = _2730;
        }
        uvec4 _2733 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2734 = _2733.z;
        uint _2736 = (_2734 >> 8u) & 15u;
        float _2832;
        float _2834;
        float _2836;
        float _2838;
        float _2840;
        float _2842;
        if (((4294967295u << _2736) & _2618) == 0u)
        {
            _2832 = _2719;
            _2834 = _2721;
            _2836 = _2723;
            _2838 = _2725;
            _2840 = _2727;
            _2842 = _2729;
        }
        else
        {
            float _2857 = inversesqrt(dot(vec3(_2572, _2573, _2574), vec3(_2572, _2573, _2574)));
            float _2858 = _2857 * _2572;
            float _2859 = _2857 * _2573;
            float _2860 = _2857 * _2574;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2736 < ((_2734 >> 12u) & 15u))
            {
                float _2833;
                float _2835;
                float _2837;
                float _2839;
                float _2841;
                float _2843;
                float _2971 = _2719;
                float _2972 = _2721;
                float _2973 = _2723;
                float _2974 = _2725;
                float _2975 = _2727;
                float _2976 = _2729;
                uint _2977 = _2736;
                uint _2986;
                bool _2987;
                for (;;)
                {
                    _2986 = texelFetch(g_lightClassification, int((((_2612 << 5u) + (_2598 << 9u)) + (_2977 << 2u)) >> 2u)).x;
                    _2987 = _2986 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2987)
                    {
                        frontier_phi_67_pred = _2974;
                        frontier_phi_67_pred_1 = _2975;
                        frontier_phi_67_pred_2 = _2976;
                        frontier_phi_67_pred_3 = _2973;
                        frontier_phi_67_pred_4 = _2972;
                        frontier_phi_67_pred_5 = _2971;
                    }
                    else
                    {
                        float _3171;
                        float _3172;
                        float _3173;
                        float _3174;
                        float _3175;
                        float _3176;
                        float _3465;
                        float _3466;
                        float _3467;
                        float _3468;
                        float _3469;
                        float _3470;
                        float _3184 = _2971;
                        float _3185 = _2972;
                        float _3186 = _2973;
                        float _3187 = _2974;
                        float _3188 = _2975;
                        float _3189 = _2976;
                        uint _3190 = _2986;
                        uint _3191;
                        vec4 _3216;
                        float _3217;
                        vec4 _3232;
                        vec3 _3244;
                        vec4 _3259;
                        vec4 _3275;
                        float _3321;
                        bool _3322;
                        for (;;)
                        {
                            uint _3201 = ((_2977 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3190));
                            _3191 = (_3190 + 4294967295u) & _3190;
                            uint _3203 = _3201 * 40u;
                            _3216 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3203)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 3u)).x));
                            _3217 = _3216.w;
                            uint _3219 = (_3201 * 40u) + 4u;
                            _3232 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3219)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 3u)).x));
                            uint _3234 = (_3201 * 40u) + 8u;
                            _3244 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3234)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 2u)).x));
                            uint _3246 = (_3201 * 40u) + 16u;
                            _3259 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3246)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 3u)).x));
                            uint _3262 = (_3201 * 40u) + 20u;
                            _3275 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3262)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 3u)).x));
                            uint _3277 = (_3201 * 40u) + 24u;
                            vec4 _3290 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3277)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 3u)).x));
                            uint _3296 = (_3201 * 40u) + 28u;
                            vec4 _3309 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3296)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 3u)).x));
                            _3321 = fma(_2574, _3309.z, fma(_2573, _3309.y, _3309.x * _2572)) + _3309.w;
                            _3322 = !((fma(_2574, _3290.z, fma(_2573, _3290.y, _3290.x * _2572)) + _3290.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3322)
                            {
                                float _3349 = _3216.x - _2572;
                                float _3350 = _3216.y - _2573;
                                float _3351 = _3216.z - _2574;
                                float _3352 = dot(vec3(_3349, _3350, _3351), vec3(_3349, _3350, _3351));
                                float _3355 = inversesqrt(_3352);
                                float _3356 = _3355 * _3349;
                                float _3357 = _3355 * _3350;
                                float _3358 = _3355 * _3351;
                                float _3362 = 1.0 - (_3352 / (_3217 * _3217));
                                float _4474 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                                float _3363 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
                                float _3367 = sqrt(_3352) * _3232.w;
                                float _3369 = 1.39999997615814208984375 / (_3367 + 1.39999997615814208984375);
                                float _3370 = _3369 * _3369;
                                float _3373 = ((1.0 - _3370) * dot(vec3(_3356, _3357, _3358), vec3(_838, _841, _844))) + _3370;
                                float _3376 = _3367 * _3367;
                                float _3380 = (fma(_2574, _3259.z, fma(_2573, _3259.y, _3259.x * _2572)) + _3259.w) / _3321;
                                float _3381 = (fma(_2574, _3275.z, fma(_2573, _3275.y, _3275.x * _2572)) + _3275.w) / _3321;
                                float _3385 = 1.0 - dot(vec2(_3380, _3381), vec2(_3380, _3381));
                                float _4490 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                                float _3386 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
                                float _3387 = _3386 * (((isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0))) * _3363) / ((_3376 * 0.699999988079071044921875) + 1.0));
                                float _3399 = exp2(log2(1.0 / ((_3376 * 3.5) + 5.0)) * 0.25);
                                float _3400 = 1.0 - _913;
                                float _3407 = sqrt(1.0 - ((1.0 - (_3400 * _3400)) * (1.0 - (_3399 * _3399))));
                                float _3408 = _3407 * _3407;
                                float _3409 = _3408 * _3408;
                                float _3410 = _3356 - _2858;
                                float _3411 = _3357 - _2859;
                                float _3412 = _3358 - _2860;
                                float _3416 = inversesqrt(dot(vec3(_3410, _3411, _3412), vec3(_3410, _3411, _3412)));
                                float _3420 = dot(vec3(_838, _841, _844), vec3((-0.0) - _2858, (-0.0) - _2859, (-0.0) - _2860));
                                float _4501 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                                float _3423 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
                                float _3424 = dot(vec3(_838, _841, _844), vec3(_3416 * _3410, _3416 * _3411, _3416 * _3412));
                                float _4512 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                                float _3427 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                                float _3431 = ((_3427 * _3427) * (_3409 + (-1.0))) + 1.0;
                                float _3432 = _3369 * _3408;
                                float _3433 = _3432 * _3432;
                                float _3439 = ((1.0 - _3433) * dot(vec3(_838, _841, _844), vec3(_3356, _3357, _3358))) + _3433;
                                float _4523 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                                float _3440 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                                float _3441 = 1.0 - _3408;
                                float _3451 = (0.5 / (((_3440 * ((_3423 * _3441) + _3408)) + 9.9999999392252902907785028219223e-09) + (((_3440 * _3441) + _3408) * _3423))) * _3440;
                                float _4534 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                                float _3461 = (_3386 * _3363) * (((_3409 * 3.1415927410125732421875) * (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0)))) / ((_3431 * _3431) * ((_3376 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3461 * _3244.x;
                                frontier_phi_73_pred_1 = _3461 * _3244.y;
                                frontier_phi_73_pred_2 = _3387 * _3232.z;
                                frontier_phi_73_pred_3 = _3387 * _3232.y;
                                frontier_phi_73_pred_4 = _3387 * _3232.x;
                                frontier_phi_73_pred_5 = _3461 * _3244.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3465 = frontier_phi_73_pred;
                            _3466 = frontier_phi_73_pred_1;
                            _3470 = frontier_phi_73_pred_2;
                            _3469 = frontier_phi_73_pred_3;
                            _3468 = frontier_phi_73_pred_4;
                            _3467 = frontier_phi_73_pred_5;
                            _3174 = _3468 + _3187;
                            _3175 = _3469 + _3188;
                            _3176 = _3470 + _3189;
                            _3171 = _3465 + _3184;
                            _3172 = _3466 + _3185;
                            _3173 = _3467 + _3186;
                            if (_3191 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3184 = _3171;
                                _3185 = _3172;
                                _3186 = _3173;
                                _3187 = _3174;
                                _3188 = _3175;
                                _3189 = _3176;
                                _3190 = _3191;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3174;
                        frontier_phi_67_pred_1 = _3175;
                        frontier_phi_67_pred_2 = _3176;
                        frontier_phi_67_pred_3 = _3173;
                        frontier_phi_67_pred_4 = _3172;
                        frontier_phi_67_pred_5 = _3171;
                    }
                    _2839 = frontier_phi_67_pred;
                    _2841 = frontier_phi_67_pred_1;
                    _2843 = frontier_phi_67_pred_2;
                    _2837 = frontier_phi_67_pred_3;
                    _2835 = frontier_phi_67_pred_4;
                    _2833 = frontier_phi_67_pred_5;
                    uint _2978 = _2977 + 1u;
                    if (_2978 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2971 = _2833;
                        _2972 = _2835;
                        _2973 = _2837;
                        _2974 = _2839;
                        _2975 = _2841;
                        _2976 = _2843;
                        _2977 = _2978;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2841;
                frontier_phi_55_56_ladder_1 = _2843;
                frontier_phi_55_56_ladder_2 = _2839;
                frontier_phi_55_56_ladder_3 = _2837;
                frontier_phi_55_56_ladder_4 = _2835;
                frontier_phi_55_56_ladder_5 = _2833;
            }
            else
            {
                frontier_phi_55_56_ladder = _2727;
                frontier_phi_55_56_ladder_1 = _2729;
                frontier_phi_55_56_ladder_2 = _2725;
                frontier_phi_55_56_ladder_3 = _2723;
                frontier_phi_55_56_ladder_4 = _2721;
                frontier_phi_55_56_ladder_5 = _2719;
            }
            _2832 = frontier_phi_55_56_ladder_5;
            _2834 = frontier_phi_55_56_ladder_4;
            _2836 = frontier_phi_55_56_ladder_3;
            _2838 = frontier_phi_55_56_ladder_2;
            _2840 = frontier_phi_55_56_ladder;
            _2842 = frontier_phi_55_56_ladder_1;
        }
        float _2847 = isnan(1.0) ? _897 : (isnan(_897) ? 1.0 : min(_897, 1.0));
        _2631 = (_2847 * _2838) + _2067;
        _2633 = (_2847 * _2840) + _2069;
        _2635 = (_2847 * _2842) + _2071;
        _2637 = ((_2832 * _881) * _2847) + _2412;
        _2639 = ((_2834 * _883) * _2847) + _2414;
        _2641 = ((_2836 * _884) * _2847) + _2416;
    }
    else
    {
        _2631 = _2067;
        _2633 = _2069;
        _2635 = _2071;
        _2637 = _2412;
        _2639 = _2414;
        _2641 = _2416;
    }
    float _4550 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _4561 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _4572 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    uint _2661 = _249 + 6u;
    float _2669 = _819 / cbSceneParam._m0[86u].x;
    float _2670 = _820 / cbSceneParam._m0[86u].y;
    vec4 _2684 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2669, _2670, (log2((isnan(cbSceneParam._m0[77u].w) ? _754 : (isnan(_754) ? cbSceneParam._m0[77u].w : min(_754, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2686 = _2684.x;
    float _2687 = _2684.y;
    float _2688 = _2684.z;
    float _2689 = _2684.w;
    float _2782;
    float _2784;
    float _2786;
    float _2788;
    if (_754 > cbSceneParam._m0[78u].w)
    {
        float _2744 = isnan(_754) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _754 : min(cbSceneParam._m0[80u].w, _754));
        float _2745 = _2744 / _754;
        float _2756 = _2745 * _804;
        float _2757 = _805 * _2745;
        float _2758 = (-0.0) - _2757;
        float _2760 = _2745 * _806;
        float _2762 = (cbSceneParam._m0[77u].w * _2758) / _2744;
        float _2763 = _2762 + cbSceneParam._m0[79u].w;
        float _2764 = cbSceneParam._m0[79u].w - _2757;
        float _2770 = sqrt(((_2756 * _2756) + (_2757 * _2757)) + (_2760 * _2760));
        float _2773 = (1.0 - (cbSceneParam._m0[77u].w / _2744)) * _2770;
        float _2778 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2780 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2933;
        if (abs((_2758 - _2762) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2933 = ((((_2763 > 0.0) ? exp2(_2778 * _2763) : (2.0 - exp2(_2780 * _2763))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2773;
        }
        else
        {
            float _2893 = 1.0 / cbSceneParam._m0[80u].x;
            float _2894 = isnan(_2764) ? _2763 : (isnan(_2763) ? _2764 : max(_2763, _2764));
            float _2895 = isnan(_2764) ? _2763 : (isnan(_2763) ? _2764 : min(_2763, _2764));
            float _2904 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : min(_2894, 0.0));
            float _2905 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : min(_2895, 0.0));
            _2933 = ((abs(_2770 / _2758) * cbSceneParam._m0[80u].y) * ((((_2904 - _2905) * 2.0) - ((exp2(_2778 * (isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0)))) - exp2(_2778 * (isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0))))) * _2893)) - ((exp2(_2780 * _2904) - exp2(_2780 * _2905)) * _2893))) + (_2773 * cbSceneParam._m0[80u].z);
        }
        vec4 _2935 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2669, _2670, 1.0), 0.0);
        float _2944 = exp2((_2933 * (-1.44269502162933349609375)) * (1.0 - _2935.w));
        float _2945 = log2(_2944);
        float _2961 = log2(_2689);
        _2782 = (exp2(_2961 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2945 * cbSceneParam._m0[78u].x)) * _2935.x) / cbSceneParam._m0[78u].x)) + _2686;
        _2784 = (exp2(_2961 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2945 * cbSceneParam._m0[78u].y)) * _2935.y) / cbSceneParam._m0[78u].y)) + _2687;
        _2786 = (exp2(_2961 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2945 * cbSceneParam._m0[78u].z)) * _2935.z) / cbSceneParam._m0[78u].z)) + _2688;
        _2788 = _2944 * _2689;
    }
    else
    {
        _2782 = _2686;
        _2784 = _2687;
        _2786 = _2688;
        _2788 = _2689;
    }
    float _2800 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2801 = _2800 == 3.0;
    float _2802 = log2(_2788);
    float _2809 = exp2(_2802 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * (_2631 + ((isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))) * _897))) + ((_2637 + ((isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0))) * _1705)) * cbPerFrame._m0[3u].x));
    float _2810 = exp2(_2802 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * (_2633 + ((isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))) * _897))) + ((_2639 + ((isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0))) * _1705)) * cbPerFrame._m0[3u].x));
    float _2811 = exp2(_2802 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * (_2635 + ((isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))) * _897))) + ((_2641 + ((isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0))) * _1705)) * cbPerFrame._m0[3u].x));
    float _2820 = (_2800 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2820 * (_2801 ? _2809 : (_2809 + (cbSceneParam._m0[72u].w * _2782)));
    SV_Target.y = _2820 * (_2801 ? _2810 : (_2810 + (cbSceneParam._m0[72u].w * _2784)));
    SV_Target.z = _2820 * (_2801 ? _2811 : (_2811 + (cbSceneParam._m0[72u].w * _2786)));
    SV_Target.w = cbInstanceData._m0[_2661].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2661].w;
}


