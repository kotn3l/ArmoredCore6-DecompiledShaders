#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1019;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _201 = _200 * _192;
    float _202 = _200 * _193;
    float _203 = _200 * _194;
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = _207 * NORMAL.x;
    float _209 = _207 * NORMAL.y;
    float _210 = _207 * NORMAL.z;
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215 = _214 * TANGENT.x;
    float _216 = _214 * TANGENT.y;
    float _217 = _214 * TANGENT.z;
    uint _220 = uint(roundEven(NORMAL.w)) * 13u;
    uint _226 = _220 + 1u;
    uint _230 = _220 + 2u;
    float _239 = sqrt(((cbInstanceData._m0[_226].x * cbInstanceData._m0[_226].x) + (cbInstanceData._m0[_220].x * cbInstanceData._m0[_220].x)) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x));
    float _240 = _239 * TEXCOORD.z;
    float _241 = _239 * TEXCOORD.w;
    vec4 _260 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _266 = _260.x * cbMtdParam._m0[9u].x;
    float _267 = _260.y * cbMtdParam._m0[9u].y;
    float _268 = _260.z * cbMtdParam._m0[9u].z;
    vec4 _287 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _240) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _241) + cbTextureTilingScale._m0[14u].w));
    vec4 _307 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _311 = _307.z;
    float _316 = (_307.x * 2.0) + (-1.0);
    float _318 = (_307.y * 2.0) + (-1.0);
    float _319 = dot(vec2(_316, _318), vec2(_316, _318));
    float _3347 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _325 = sqrt(1.0 - (isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0))));
    float _328 = fma(_325, _208, fma(_318, _215, _316 * _201));
    float _331 = fma(_325, _209, fma(_318, _216, _316 * _202));
    float _334 = fma(_325, _210, fma(_318, _217, _316 * _203));
    float _338 = inversesqrt(dot(vec3(_328, _331, _334), vec3(_328, _331, _334)));
    vec4 _374 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _240) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _241) + cbTextureTilingScale._m0[11u].w));
    float _376 = _374.x;
    float _377 = 1.0 - _376;
    float _386 = (cbMtdParam._m0[19u].x + dot(vec4(_338 * _328, _338 * _331, _338 * _334, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_376 - _377) * cbMtdParam._m0[24u].z) + _377) * cbMtdParam._m0[21u].z);
    float _3358 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _387 = isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0));
    float _394 = (_387 * ((_287.x * cbMtdParam._m0[18u].x) - _266)) + _266;
    float _395 = (_387 * ((_287.y * cbMtdParam._m0[18u].y) - _267)) + _267;
    float _396 = (_387 * ((_287.z * cbMtdParam._m0[18u].z) - _268)) + _268;
    vec4 _409 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _411 = _409.x;
    float _413 = _411 - (_411 * _387);
    vec4 _426 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _240) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _241) + cbTextureTilingScale._m0[15u].w));
    float _433 = (_426.x * 2.0) + (-1.0);
    float _434 = (_426.y * 2.0) + (-1.0);
    float _435 = dot(vec2(_433, _434), vec2(_433, _434));
    float _3369 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _443 = ((_426.z - _311) * _387) + _311;
    float _453 = ((sqrt(1.0 - (isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0)))) - _325) * _387) + _325;
    float _456 = (((_433 - _316) * _387) + _316) + (cbMtdParam._m0[21u].x * _316);
    float _457 = (((_434 - _318) * _387) + _318) + (cbMtdParam._m0[21u].x * _318);
    float _462 = cbMtdParam._m0[22u].x + _307.w;
    float _465 = fma(_453, _208, fma(_457, _215, _456 * _201));
    float _468 = fma(_453, _209, fma(_457, _216, _456 * _202));
    float _471 = fma(_453, _210, fma(_457, _217, _456 * _203));
    float _475 = inversesqrt(dot(vec3(_465, _468, _471), vec3(_465, _468, _471)));
    float _476 = _475 * _465;
    float _477 = _475 * _468;
    float _478 = _475 * _471;
    float _3380 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _479 = isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0));
    float _3391 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _3402 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _3413 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _3424 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _3435 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _484 = isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0));
    float _498 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _539 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _549 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _539);
    float _550 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _539);
    float _551 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _539);
    float _555 = inversesqrt(dot(vec3(_549, _550, _551), vec3(_549, _550, _551)));
    float _556 = _549 * _555;
    float _557 = _550 * _555;
    float _558 = _551 * _555;
    float _564 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _565 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _586 = fma(_478, cbSceneParam._m0[5u].z, fma(_477, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _476));
    float _589 = fma(_478, cbSceneParam._m0[6u].z, fma(_477, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _476));
    float _592 = fma(_478, cbSceneParam._m0[7u].z, fma(_477, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _476));
    uint _606 = (_220 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _612 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0)))) * cbInstanceData._m0[_606].x;
    float _613 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0)))) * cbInstanceData._m0[_606].y;
    float _614 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0)))) * cbInstanceData._m0[_606].z;
    float _3446 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _615 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
    float _3457 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _616 = isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0));
    float _3468 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _617 = isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0));
    float _618 = 1.0 - _484;
    float _619 = _615 * _618;
    float _620 = _616 * _618;
    float _621 = _617 * _618;
    float _626 = (_615 + (-0.039999999105930328369140625)) * _484;
    float _627 = (_616 + (-0.039999999105930328369140625)) * _484;
    float _628 = (_617 + (-0.039999999105930328369140625)) * _484;
    float _629 = _626 + 0.039999999105930328369140625;
    float _631 = _627 + 0.039999999105930328369140625;
    float _632 = _628 + 0.039999999105930328369140625;
    vec4 _641 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _564, cbSceneParam._m0[86u].y * _565));
    float _645 = ((isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0))) * TEXCOORD_5.w) * _641.x;
    float _646 = dot(vec3(_476, _477, _478), vec3(_556, _557, _558));
    float _649 = _646 * 2.0;
    float _653 = (_649 * _476) - _556;
    float _654 = (_649 * _477) - _557;
    float _655 = (_649 * _478) - _558;
    float _659 = abs(dot(vec3(_556, _557, _558), vec3(_476, _477, _478)));
    float _3479 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _661 = sqrt(_479);
    float _674 = exp2((_661 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_661 * 3.0));
    float _680 = (1.0 - _674) * ((_661 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _681 = _674 * _661;
    float _709 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _713 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _717 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1018;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _743 = fma(_717, cbModelParam._m0[26u].z, fma(_713, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _709));
        float _747 = fma(_717, cbModelParam._m0[27u].z, fma(_713, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _709));
        float _751 = fma(_717, cbModelParam._m0[28u].z, fma(_713, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _709));
        float _776 = _709 + _476;
        float _777 = _713 + _477;
        float _778 = _717 + _478;
        float _788 = fma(_778, cbModelParam._m0[26u].z, fma(_777, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _776)) - _743;
        float _789 = fma(_778, cbModelParam._m0[27u].z, fma(_777, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _776)) - _747;
        float _790 = fma(_778, cbModelParam._m0[28u].z, fma(_777, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _776)) - _751;
        float _794 = inversesqrt(dot(vec3(_788, _789, _790), vec3(_788, _789, _790)));
        float _807 = ((_794 * _788) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_743 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _808 = ((_794 * _789) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_747 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _809 = ((_794 * _790) / cbModelParam._m0[34u].z) + ((((((_751 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _812 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_807, _808, _809), 0.0);
        vec4 _819 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_807, _808, _809), 0.0);
        vec4 _826 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_807, _808, _809), 0.0);
        vec4 _833 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_807, _808, _809), 0.0);
        float _846 = exp2((_812.w + (-0.5)) * 20.0) * 2.0;
        float _847 = _846 * (_812.x + (-0.5));
        float _848 = _846 * (_812.y + (-0.5));
        float _849 = _846 * (_812.z + (-0.5));
        float _856 = exp2((_819.w + (-0.5)) * 20.0) * 2.0;
        float _857 = _856 * (_819.x + (-0.5));
        float _858 = _856 * (_819.y + (-0.5));
        float _859 = _856 * (_819.z + (-0.5));
        float _866 = exp2((_826.w + (-0.5)) * 20.0) * 2.0;
        float _867 = _866 * (_826.x + (-0.5));
        float _868 = _866 * (_826.y + (-0.5));
        float _869 = _866 * (_826.z + (-0.5));
        float _876 = exp2((_833.w + (-0.5)) * 20.0) * 2.0;
        float _877 = _876 * (_833.x + (-0.5));
        float _878 = _876 * (_833.y + (-0.5));
        float _879 = _876 * (_833.z + (-0.5));
        float _880 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _881 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _882 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _883 = _847 * 0.5;
        float _884 = _857 * 0.5;
        float _885 = _867 * 0.5;
        float _886 = dot(vec3(_883, _884, _885), vec3(_883, _884, _885));
        float _891 = (_886 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_886);
        float _900 = (dot(vec3(_476, _477, _478), vec3(_891 * _883, _891 * _884, _891 * _885)) + 1.0) * 0.5;
        float _3505 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _910 = sqrt(((_884 * _884) + (_883 * _883)) + (_885 * _885)) / (_880 + 9.9999997473787516355514526367188e-06);
        float _3516 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _911 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
        float _912 = _911 * 2.0;
        float _916 = (1.0 - _911) / (_911 + 1.0);
        float _3527 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _917 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
        float _926 = ((((1.0 - _917) * (_912 + 2.0)) * exp2(log2(isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0))) * (_912 + 1.0))) + _917) * _880;
        float _927 = _848 * 0.5;
        float _928 = _858 * 0.5;
        float _929 = _868 * 0.5;
        float _930 = dot(vec3(_927, _928, _929), vec3(_927, _928, _929));
        float _935 = (_930 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_930);
        float _943 = (dot(vec3(_476, _477, _478), vec3(_935 * _927, _935 * _928, _935 * _929)) + 1.0) * 0.5;
        float _3538 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _952 = sqrt(((_928 * _928) + (_927 * _927)) + (_929 * _929)) / (_881 + 9.9999997473787516355514526367188e-06);
        float _3549 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _953 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _954 = _953 * 2.0;
        float _958 = (1.0 - _953) / (_953 + 1.0);
        float _3560 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _959 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
        float _968 = ((((1.0 - _959) * (_954 + 2.0)) * exp2(log2(isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))) * (_954 + 1.0))) + _959) * _881;
        float _969 = _849 * 0.5;
        float _970 = _859 * 0.5;
        float _971 = _869 * 0.5;
        float _972 = dot(vec3(_969, _970, _971), vec3(_969, _970, _971));
        float _977 = (_972 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_972);
        float _985 = (dot(vec3(_476, _477, _478), vec3(_977 * _969, _977 * _970, _977 * _971)) + 1.0) * 0.5;
        float _3571 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _994 = sqrt(((_970 * _970) + (_969 * _969)) + (_971 * _971)) / (_882 + 9.9999997473787516355514526367188e-06);
        float _3582 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _995 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _996 = _995 * 2.0;
        float _1000 = (1.0 - _995) / (_995 + 1.0);
        float _3593 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1001 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
        float _1010 = ((((1.0 - _1001) * (_996 + 2.0)) * exp2(log2(isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0))) * (_996 + 1.0))) + _1001) * _882;
        _1018 = _849;
        _1020 = _848;
        _1021 = _847;
        _1022 = _859;
        _1023 = _858;
        _1024 = _857;
        _1025 = _869;
        _1026 = _868;
        _1027 = _867;
        _1028 = _882;
        _1029 = _881;
        _1030 = _880;
        _1031 = cbModelParam._m0[36u].z * (isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0)));
        _1032 = cbModelParam._m0[36u].z * (isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0)));
        _1033 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0)));
    }
    else
    {
        _1018 = _1019;
        _1020 = _1019;
        _1021 = _1019;
        _1022 = _1019;
        _1023 = _1019;
        _1024 = _1019;
        _1025 = _1019;
        _1026 = _1019;
        _1027 = _1019;
        _1028 = _1019;
        _1029 = _1019;
        _1030 = _1019;
        _1031 = 0.0;
        _1032 = 0.0;
        _1033 = 0.0;
    }
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1058 = fma(_717, cbModelParam._m0[30u].z, fma(_713, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _709));
        float _1062 = fma(_717, cbModelParam._m0[31u].z, fma(_713, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _709));
        float _1066 = fma(_717, cbModelParam._m0[32u].z, fma(_713, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _709));
        float _1089 = _709 + _476;
        float _1090 = _713 + _477;
        float _1091 = _717 + _478;
        float _1101 = fma(_1091, cbModelParam._m0[30u].z, fma(_1090, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1089)) - _1058;
        float _1102 = fma(_1091, cbModelParam._m0[31u].z, fma(_1090, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1089)) - _1062;
        float _1103 = fma(_1091, cbModelParam._m0[32u].z, fma(_1090, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1089)) - _1066;
        float _1107 = inversesqrt(dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103)));
        float _1120 = ((_1107 * _1101) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1058 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1121 = ((_1107 * _1102) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1062 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1122 = ((_1107 * _1103) / cbModelParam._m0[35u].z) + ((((((_1066 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        vec4 _1131 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        vec4 _1138 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        vec4 _1145 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        float _1157 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1124.x + (-0.5));
        float _1159 = _1157 * (_1124.y + (-0.5));
        float _1160 = _1157 * (_1124.z + (-0.5));
        float _1167 = exp2((_1131.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1131.x + (-0.5));
        float _1169 = _1167 * (_1131.y + (-0.5));
        float _1170 = _1167 * (_1131.z + (-0.5));
        float _1177 = exp2((_1138.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1138.x + (-0.5));
        float _1179 = _1177 * (_1138.y + (-0.5));
        float _1180 = _1177 * (_1138.z + (-0.5));
        float _1187 = exp2((_1145.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1145.x + (-0.5));
        float _1189 = _1187 * (_1145.y + (-0.5));
        float _1190 = _1187 * (_1145.z + (-0.5));
        float _1191 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1192 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1193 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1194 = _1158 * 0.5;
        float _1195 = _1168 * 0.5;
        float _1196 = _1178 * 0.5;
        float _1197 = dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196));
        float _1202 = (_1197 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1197);
        float _1210 = (dot(vec3(_476, _477, _478), vec3(_1202 * _1194, _1202 * _1195, _1202 * _1196)) + 1.0) * 0.5;
        float _3634 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1219 = sqrt(((_1195 * _1195) + (_1194 * _1194)) + (_1196 * _1196)) / (_1191 + 9.9999997473787516355514526367188e-06);
        float _3645 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _1221 = _1220 * 2.0;
        float _1225 = (1.0 - _1220) / (_1220 + 1.0);
        float _3656 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _1235 = ((((1.0 - _1226) * (_1221 + 2.0)) * exp2(log2(isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) * (_1221 + 1.0))) + _1226) * _1191;
        float _1236 = _1159 * 0.5;
        float _1237 = _1169 * 0.5;
        float _1238 = _1179 * 0.5;
        float _1239 = dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238));
        float _1244 = (_1239 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1239);
        float _1252 = (dot(vec3(_476, _477, _478), vec3(_1244 * _1236, _1244 * _1237, _1244 * _1238)) + 1.0) * 0.5;
        float _3667 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1261 = sqrt(((_1237 * _1237) + (_1236 * _1236)) + (_1238 * _1238)) / (_1192 + 9.9999997473787516355514526367188e-06);
        float _3678 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _1263 = _1262 * 2.0;
        float _1267 = (1.0 - _1262) / (_1262 + 1.0);
        float _3689 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
        float _1277 = ((((1.0 - _1268) * (_1263 + 2.0)) * exp2(log2(isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * (_1263 + 1.0))) + _1268) * _1192;
        float _1278 = _1160 * 0.5;
        float _1279 = _1170 * 0.5;
        float _1280 = _1180 * 0.5;
        float _1281 = dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280));
        float _1286 = (_1281 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1281);
        float _1294 = (dot(vec3(_476, _477, _478), vec3(_1286 * _1278, _1286 * _1279, _1286 * _1280)) + 1.0) * 0.5;
        float _3700 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1303 = sqrt(((_1279 * _1279) + (_1278 * _1278)) + (_1280 * _1280)) / (_1193 + 9.9999997473787516355514526367188e-06);
        float _3711 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _1305 = _1304 * 2.0;
        float _1309 = (1.0 - _1304) / (_1304 + 1.0);
        float _3722 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _1319 = ((((1.0 - _1310) * (_1305 + 2.0)) * exp2(log2(isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * (_1305 + 1.0))) + _1310) * _1193;
        _1327 = _1160;
        _1328 = _1159;
        _1329 = _1158;
        _1330 = _1170;
        _1331 = _1169;
        _1332 = _1168;
        _1333 = _1180;
        _1334 = _1179;
        _1335 = _1178;
        _1336 = _1193;
        _1337 = _1192;
        _1338 = _1191;
        _1339 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)));
        _1340 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)));
        _1341 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)));
    }
    else
    {
        _1327 = _1019;
        _1328 = _1019;
        _1329 = _1019;
        _1330 = _1019;
        _1331 = _1019;
        _1332 = _1019;
        _1333 = _1019;
        _1334 = _1019;
        _1335 = _1019;
        _1336 = _1019;
        _1337 = _1019;
        _1338 = _1019;
        _1339 = 0.0;
        _1340 = 0.0;
        _1341 = 0.0;
    }
    float _1351 = (cbModelParam._m0[1u].x * (_1339 - _1031)) + _1031;
    float _1352 = (cbModelParam._m0[1u].x * (_1340 - _1032)) + _1032;
    float _1353 = (cbModelParam._m0[1u].x * (_1341 - _1033)) + _1033;
    float _1374 = fma(_1353, cbSceneParam._m0[89u].z, fma(_1352, cbSceneParam._m0[89u].y, _1351 * cbSceneParam._m0[89u].x));
    float _1377 = fma(_1353, cbSceneParam._m0[90u].z, fma(_1352, cbSceneParam._m0[90u].y, _1351 * cbSceneParam._m0[90u].x));
    float _1380 = fma(_1353, cbSceneParam._m0[91u].z, fma(_1352, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1351));
    float _1395 = _653 * 0.5;
    float _1396 = _654 * 0.5;
    float _1397 = _655 * 0.5;
    float _1398 = dot(vec4(_1395, _1396, _1397, 1.0), vec4(_1329, _1332, _1335, _1338));
    float _1401 = dot(vec4(_1395, _1396, _1397, 1.0), vec4(_1328, _1331, _1334, _1337));
    float _1404 = dot(vec4(_1395, _1396, _1397, 1.0), vec4(_1327, _1330, _1333, _1336));
    float _1438;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1411 = dot(vec4(_1395, _1396, _1397, 1.0), vec4(_1018, _1022, _1025, _1028));
        float _1415 = dot(vec4(_1395, _1396, _1397, 1.0), vec4(_1020, _1023, _1026, _1029));
        float _1419 = dot(vec4(_1395, _1396, _1397, 1.0), vec4(_1021, _1024, _1027, _1030));
        float _1426 = dot(vec4(cbModelParam._m0[39u]), vec4(_1395, _1396, _1397, 1.0));
        _1438 = dot(vec3(isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)), isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)), isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1426) ? 0.0 : (isnan(0.0) ? _1426 : max(0.0, _1426))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1438 = 1.0;
    }
    float _1449;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1440 = dot(vec4(cbModelParam._m0[40u]), vec4(_1395, _1396, _1397, 1.0));
        _1449 = dot(vec3(isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)), isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)), isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1440) ? 0.0 : (isnan(0.0) ? _1440 : max(0.0, _1440))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1449 = 1.0;
    }
    float _1453 = (_1449 * cbModelParam._m0[1u].x) + (_1438 * (1.0 - cbModelParam._m0[1u].x));
    float _1463 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _479);
    float _1464 = isnan(_1463) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1463 : min(cbModelParam._m0[25u].z, _1463));
    float _1544;
    float _1546;
    float _1548;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1511 = fma(_717, cbModelParam._m0[13u].z, fma(_713, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _709)) + cbModelParam._m0[13u].w;
        float _1515 = fma(_717, cbModelParam._m0[14u].z, fma(_713, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _709)) + cbModelParam._m0[14u].w;
        float _1519 = fma(_717, cbModelParam._m0[15u].z, fma(_713, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _709)) + cbModelParam._m0[15u].w;
        float _1522 = fma(_655, cbModelParam._m0[13u].z, fma(_654, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _653));
        float _1525 = fma(_655, cbModelParam._m0[14u].z, fma(_654, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _653));
        float _1528 = fma(_655, cbModelParam._m0[15u].z, fma(_654, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _653));
        float _1556;
        if (_1522 > 0.0)
        {
            _1556 = abs((1.0 - _1511) / _1522);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1522 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1511 + 1.0) / _1522);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1556 = frontier_phi_14_12_ladder;
        }
        float _1759;
        if (_1525 > 0.0)
        {
            _1759 = abs((1.0 - _1515) / _1525);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1525 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1515 + 1.0) / _1525);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1759 = frontier_phi_23_19_ladder;
        }
        float _2013;
        if (_1528 > 0.0)
        {
            _2013 = abs((1.0 - _1519) / _1528);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1528 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1519 + 1.0) / _1528);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2013 = frontier_phi_35_30_ladder;
        }
        float _2015 = isnan(_1759) ? _1556 : (isnan(_1556) ? _1759 : min(_1556, _1759));
        float _2016 = isnan(_2013) ? _2015 : (isnan(_2015) ? _2013 : min(_2015, _2013));
        float _2020 = (_2016 * _1522) + _1511;
        float _2021 = (_2016 * _1525) + _1515;
        float _2022 = (_2016 * _1528) + _1519;
        float _2023 = _2016 * 9.9999997473787516355514526367188e-05;
        float _2025 = (-1.0) - _2023;
        float _2027 = _2023 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2022 > _2027) || ((_2022 < _2025) || ((_2021 > _2027) || ((_2021 < _2025) || ((_2020 < _2025) || (_2020 > _2027))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2150 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2022, cbModelParam._m0[9u].z, fma(_2021, cbModelParam._m0[9u].y, _2020 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2022, cbModelParam._m0[10u].z, fma(_2021, cbModelParam._m0[10u].y, _2020 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2022, cbModelParam._m0[11u].z, fma(_2021, cbModelParam._m0[11u].y, _2020 * cbModelParam._m0[11u].x))), _1464);
            frontier_phi_13_35_ladder = _2150.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2150.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2150.x * cbModelParam._m0[1u].y;
        }
        _1544 = frontier_phi_13_35_ladder_2;
        _1546 = frontier_phi_13_35_ladder_1;
        _1548 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1532 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_653, _654, _655), _1464);
        _1544 = _1532.x * cbModelParam._m0[1u].y;
        _1546 = _1532.y * cbModelParam._m0[1u].y;
        _1548 = _1532.z * cbModelParam._m0[1u].y;
    }
    float _1552 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _479);
    float _1553 = isnan(_1552) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1552 : min(cbModelParam._m0[25u].w, _1552));
    float _1642;
    float _1644;
    float _1646;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1606 = fma(_717, cbModelParam._m0[21u].z, fma(_713, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _709)) + cbModelParam._m0[21u].w;
        float _1610 = fma(_717, cbModelParam._m0[22u].z, fma(_713, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _709)) + cbModelParam._m0[22u].w;
        float _1614 = fma(_717, cbModelParam._m0[23u].z, fma(_713, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _709)) + cbModelParam._m0[23u].w;
        float _1617 = fma(_655, cbModelParam._m0[21u].z, fma(_654, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _653));
        float _1620 = fma(_655, cbModelParam._m0[22u].z, fma(_654, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _653));
        float _1623 = fma(_655, cbModelParam._m0[23u].z, fma(_654, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _653));
        float _1764;
        if (_1617 > 0.0)
        {
            _1764 = abs((1.0 - _1606) / _1617);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1617 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1606 + 1.0) / _1617);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1764 = frontier_phi_25_21_ladder;
        }
        float _2040;
        if (_1620 > 0.0)
        {
            _2040 = abs((1.0 - _1610) / _1620);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1620 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1610 + 1.0) / _1620);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2040 = frontier_phi_37_32_ladder;
        }
        float _2253;
        if (_1623 > 0.0)
        {
            _2253 = abs((1.0 - _1614) / _1623);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1623 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1614 + 1.0) / _1623);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2253 = frontier_phi_46_43_ladder;
        }
        float _2255 = isnan(_2040) ? _1764 : (isnan(_1764) ? _2040 : min(_1764, _2040));
        float _2256 = isnan(_2253) ? _2255 : (isnan(_2255) ? _2253 : min(_2255, _2253));
        float _2260 = (_2256 * _1617) + _1606;
        float _2261 = (_2256 * _1620) + _1610;
        float _2262 = (_2256 * _1623) + _1614;
        float _2263 = _2256 * 9.9999997473787516355514526367188e-05;
        float _2264 = (-1.0) - _2263;
        float _2266 = _2263 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2262 > _2266) || ((_2262 < _2264) || ((_2261 > _2266) || ((_2261 < _2264) || ((_2260 < _2264) || (_2260 > _2266))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2461 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2262, cbModelParam._m0[17u].z, fma(_2261, cbModelParam._m0[17u].y, _2260 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2262, cbModelParam._m0[18u].z, fma(_2261, cbModelParam._m0[18u].y, _2260 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2262, cbModelParam._m0[19u].z, fma(_2261, cbModelParam._m0[19u].y, _2260 * cbModelParam._m0[19u].x))), _1553);
            frontier_phi_22_46_ladder = _2461.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2461.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2461.x * cbModelParam._m0[1u].z;
        }
        _1642 = frontier_phi_22_46_ladder_2;
        _1644 = frontier_phi_22_46_ladder_1;
        _1646 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1626 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_653, _654, _655), _1553);
        _1642 = _1626.x * cbModelParam._m0[1u].z;
        _1644 = _1626.y * cbModelParam._m0[1u].z;
        _1646 = _1626.z * cbModelParam._m0[1u].z;
    }
    float _1659 = (((_680 * _629) + _681) * _645) * ((cbModelParam._m0[1u].w * (_1642 - _1544)) + _1544);
    float _1661 = (((_680 * _631) + _681) * _645) * ((cbModelParam._m0[1u].w * (_1644 - _1546)) + _1546);
    float _1663 = (((_680 * _632) + _681) * _645) * ((cbModelParam._m0[1u].w * (_1646 - _1548)) + _1548);
    float _1666 = fma(_1663, cbSceneParam._m0[89u].z, fma(_1661, cbSceneParam._m0[89u].y, _1659 * cbSceneParam._m0[89u].x));
    float _1669 = fma(_1663, cbSceneParam._m0[90u].z, fma(_1661, cbSceneParam._m0[90u].y, _1659 * cbSceneParam._m0[90u].x));
    float _1672 = fma(_1663, cbSceneParam._m0[91u].z, fma(_1661, cbSceneParam._m0[91u].y, _1659 * cbSceneParam._m0[91u].x));
    uvec4 _1682 = floatBitsToUint(cbInstanceData._m0[_220 + 5u]);
    uint _1684 = _1682.x * 14u;
    uint _1685 = _1684 + 13u;
    float _1692 = _645 + (-1.0);
    float _1697 = (cbLight._m0[_1685].x * _1692) + 1.0;
    float _1698 = (cbLight._m0[_1685].y * _1692) + 1.0;
    float _1699 = (cbLight._m0[_1685].z * _1692) + 1.0;
    float _1700 = (cbLight._m0[_1685].w * _1692) + 1.0;
    uint _1701 = _1684 + 5u;
    float _1707 = isnan(1.0) ? _1698 : (isnan(_1698) ? 1.0 : min(_1698, 1.0));
    uint _1711 = _1684 + 4u;
    float _1718 = isnan(1.0) ? _1697 : (isnan(_1697) ? 1.0 : min(_1697, 1.0));
    uint _1722 = _1684 | 1u;
    float _1733 = dot(vec3(cbLight._m0[_1684].xyz), vec3(_476, _477, _478));
    float _1736 = dot(vec3(cbLight._m0[_1722].xyz), vec3(_476, _477, _478));
    float _3858 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
    float _3869 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
    float _1741 = (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * 0.3183098733425140380859375;
    float _1743 = (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))) * 0.3183098733425140380859375;
    float _1750 = ((cbLight._m0[_1701].x * _1707) * _1743) + ((cbLight._m0[_1711].x * _1718) * _1741);
    float _1751 = ((_1707 * cbLight._m0[_1701].y) * _1743) + ((_1718 * cbLight._m0[_1711].y) * _1741);
    float _1752 = ((_1707 * cbLight._m0[_1701].z) * _1743) + ((_1718 * cbLight._m0[_1711].z) * _1741);
    uvec4 _1756 = floatBitsToUint(cbLight._m0[_1684 + 12u]);
    bool _1758 = _1756.x == 0u;
    float _1769;
    float _1771;
    float _1773;
    if (_1758)
    {
        _1769 = _1750;
        _1771 = _1751;
        _1773 = _1752;
    }
    else
    {
        uint _1777 = _1684 + 6u;
        float _1793 = (dot(vec3(cbLight._m0[_1684 + 2u].xyz), vec3(_476, _477, _478)) * 0.5) + 0.5;
        float _1794 = _1793 * _1793;
        float _3880 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
        float _1795 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1796 = isnan(1.0) ? _1699 : (isnan(_1699) ? 1.0 : min(_1699, 1.0));
        _1769 = (((cbLight._m0[_1777].x * 0.3183098733425140380859375) * _1795) * _1796) + _1750;
        _1771 = (((cbLight._m0[_1777].y * 0.3183098733425140380859375) * _1795) * _1796) + _1751;
        _1773 = (((cbLight._m0[_1777].z * 0.3183098733425140380859375) * _1795) * _1796) + _1752;
    }
    bool _1776 = _1756.y == 0u;
    float _1814;
    float _1816;
    float _1818;
    if (_1776)
    {
        _1814 = _1769;
        _1816 = _1771;
        _1818 = _1773;
    }
    else
    {
        uint _1984 = _1684 + 7u;
        float _2000 = (dot(vec3(cbLight._m0[_1684 + 3u].xyz), vec3(_476, _477, _478)) * 0.5) + 0.5;
        float _2001 = _2000 * _2000;
        float _3896 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
        float _2002 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _2003 = isnan(1.0) ? _1700 : (isnan(_1700) ? 1.0 : min(_1700, 1.0));
        _1814 = (((cbLight._m0[_1984].x * 0.3183098733425140380859375) * _2002) * _2003) + _1769;
        _1816 = (((cbLight._m0[_1984].y * 0.3183098733425140380859375) * _2002) * _2003) + _1771;
        _1818 = (((cbLight._m0[_1984].z * 0.3183098733425140380859375) * _2002) * _2003) + _1773;
    }
    uint _1821 = _1684 + 8u;
    float _1834 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1684].w)) * _479) * 0.949999988079071044921875);
    float _1835 = _1834 * _1834;
    float _1836 = cbLight._m0[_1684].x + _556;
    float _1837 = cbLight._m0[_1684].y + _557;
    float _1838 = cbLight._m0[_1684].z + _558;
    float _1842 = inversesqrt(dot(vec3(_1836, _1837, _1838), vec3(_1836, _1837, _1838)));
    float _1843 = _1842 * _1836;
    float _1844 = _1842 * _1837;
    float _1845 = _1842 * _1838;
    float _1846 = dot(vec3(_476, _477, _478), vec3(cbLight._m0[_1684].xyz));
    float _3912 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
    float _1849 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _3923 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _1850 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _1851 = dot(vec3(_476, _477, _478), vec3(_1843, _1844, _1845));
    float _3934 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1854 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _1855 = dot(vec3(cbLight._m0[_1684].xyz), vec3(_1843, _1844, _1845));
    float _3945 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _1859 = _1835 * _1835;
    float _1863 = ((_1854 * _1854) * (_1859 + (-1.0))) + 1.0;
    float _1871 = exp2(log2(1.0 - (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0)))) * 5.0);
    float _1872 = 0.959999978542327880859375 - _626;
    float _1874 = 0.959999978542327880859375 - _627;
    float _1875 = 0.959999978542327880859375 - _628;
    float _1882 = 1.0 - _1835;
    float _1893 = (0.5 / (((_1850 * ((_1849 * _1882) + _1835)) + 9.9999999392252902907785028219223e-09) + (((_1850 * _1882) + _1835) * _1849))) * _1849;
    float _3956 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
    float _1895 = (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * (_1859 / ((_1863 * _1863) * 3.141590118408203125));
    uint _1906 = _1684 + 9u;
    float _1917 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1722].w)) * _479) * 0.949999988079071044921875);
    float _1918 = _1917 * _1917;
    float _1919 = cbLight._m0[_1722].x + _556;
    float _1920 = cbLight._m0[_1722].y + _557;
    float _1921 = cbLight._m0[_1722].z + _558;
    float _1925 = inversesqrt(dot(vec3(_1919, _1920, _1921), vec3(_1919, _1920, _1921)));
    float _1926 = _1925 * _1919;
    float _1927 = _1925 * _1920;
    float _1928 = _1925 * _1921;
    float _1929 = dot(vec3(_476, _477, _478), vec3(cbLight._m0[_1722].xyz));
    float _3967 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
    float _1932 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _1933 = dot(vec3(_476, _477, _478), vec3(_1926, _1927, _1928));
    float _3978 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _1936 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _1937 = dot(vec3(cbLight._m0[_1722].xyz), vec3(_1926, _1927, _1928));
    float _3989 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1941 = _1918 * _1918;
    float _1945 = ((_1936 * _1936) * (_1941 + (-1.0))) + 1.0;
    float _1952 = exp2(log2(1.0 - (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0)))) * 5.0);
    float _1959 = 1.0 - _1918;
    float _1969 = (0.5 / (((_1850 * ((_1932 * _1959) + _1918)) + 9.9999999392252902907785028219223e-09) + (((_1850 * _1959) + _1918) * _1932))) * _1932;
    float _4000 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
    float _1971 = (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_1941 / ((_1945 * _1945) * 3.141590118408203125));
    float _1981 = (((((_1952 * _1872) + _629) * cbLight._m0[_1906].x) * _1971) * _1707) + (((((_1871 * _1872) + _629) * cbLight._m0[_1821].x) * _1895) * _1718);
    float _1982 = (((((_1952 * _1874) + _631) * cbLight._m0[_1906].y) * _1971) * _1707) + (((((_1871 * _1874) + _631) * cbLight._m0[_1821].y) * _1895) * _1718);
    float _1983 = (((((_1952 * _1875) + _632) * cbLight._m0[_1906].z) * _1971) * _1707) + (((((_1871 * _1875) + _632) * cbLight._m0[_1821].z) * _1895) * _1718);
    float _2045;
    float _2047;
    float _2049;
    if (_1758)
    {
        _2045 = _1981;
        _2047 = _1982;
        _2049 = _1983;
    }
    else
    {
        uint _2051 = _1684 + 2u;
        uint _2055 = _1684 + 10u;
        float _2069 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2051].w)) * _479) * 0.949999988079071044921875);
        float _2070 = _2069 * _2069;
        float _2071 = cbLight._m0[_2051].x + _556;
        float _2072 = cbLight._m0[_2051].y + _557;
        float _2073 = cbLight._m0[_2051].z + _558;
        float _2077 = inversesqrt(dot(vec3(_2071, _2072, _2073), vec3(_2071, _2072, _2073)));
        float _2078 = _2077 * _2071;
        float _2079 = _2077 * _2072;
        float _2080 = _2077 * _2073;
        float _2081 = dot(vec3(_476, _477, _478), vec3(cbLight._m0[_2051].xyz));
        float _4011 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
        float _2084 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _2085 = dot(vec3(_476, _477, _478), vec3(_2078, _2079, _2080));
        float _4022 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
        float _2088 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _2089 = dot(vec3(cbLight._m0[_2051].xyz), vec3(_2078, _2079, _2080));
        float _4033 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
        float _2093 = _2070 * _2070;
        float _2097 = ((_2088 * _2088) * (_2093 + (-1.0))) + 1.0;
        float _2104 = exp2(log2(1.0 - (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0)))) * 5.0);
        float _2111 = 1.0 - _2070;
        float _2121 = (0.5 / (((_1850 * ((_2084 * _2111) + _2070)) + 9.9999999392252902907785028219223e-09) + (((_1850 * _2111) + _2070) * _2084))) * _2084;
        float _4044 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        float _2123 = (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_2093 / ((_2097 * _2097) * 3.141590118408203125));
        float _2124 = isnan(1.0) ? _1699 : (isnan(_1699) ? 1.0 : min(_1699, 1.0));
        _2045 = (((((_2104 * _1872) + _629) * cbLight._m0[_2055].x) * _2123) * _2124) + _1981;
        _2047 = (((((_2104 * _1874) + _631) * cbLight._m0[_2055].y) * _2123) * _2124) + _1982;
        _2049 = (((((_2104 * _1875) + _632) * cbLight._m0[_2055].z) * _2123) * _2124) + _1983;
    }
    float _2159;
    float _2161;
    float _2163;
    if (_1776)
    {
        _2159 = _2045;
        _2161 = _2047;
        _2163 = _2049;
    }
    else
    {
        uint _2170 = _1684 + 3u;
        uint _2174 = _1684 + 11u;
        float _2188 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2170].w)) * _479) * 0.949999988079071044921875);
        float _2189 = _2188 * _2188;
        float _2190 = cbLight._m0[_2170].x + _556;
        float _2191 = cbLight._m0[_2170].y + _557;
        float _2192 = cbLight._m0[_2170].z + _558;
        float _2196 = inversesqrt(dot(vec3(_2190, _2191, _2192), vec3(_2190, _2191, _2192)));
        float _2197 = _2196 * _2190;
        float _2198 = _2196 * _2191;
        float _2199 = _2196 * _2192;
        float _2200 = dot(vec3(_476, _477, _478), vec3(cbLight._m0[_2170].xyz));
        float _4060 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
        float _2203 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _2204 = dot(vec3(_476, _477, _478), vec3(_2197, _2198, _2199));
        float _4071 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
        float _2207 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _2208 = dot(vec3(cbLight._m0[_2170].xyz), vec3(_2197, _2198, _2199));
        float _4082 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2212 = _2189 * _2189;
        float _2216 = ((_2207 * _2207) * (_2212 + (-1.0))) + 1.0;
        float _2223 = exp2(log2(1.0 - (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0)))) * 5.0);
        float _2230 = 1.0 - _2189;
        float _2240 = (0.5 / (((_1850 * ((_2203 * _2230) + _2189)) + 9.9999999392252902907785028219223e-09) + (((_1850 * _2230) + _2189) * _2203))) * _2203;
        float _4093 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2242 = (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * (_2212 / ((_2216 * _2216) * 3.141590118408203125));
        float _2243 = isnan(1.0) ? _1700 : (isnan(_1700) ? 1.0 : min(_1700, 1.0));
        _2159 = (((((_2223 * _1872) + _629) * cbLight._m0[_2174].x) * _2242) * _2243) + _2045;
        _2161 = (((((_2223 * _1874) + _631) * cbLight._m0[_2174].y) * _2242) * _2243) + _2047;
        _2163 = (((((_2223 * _1875) + _632) * cbLight._m0[_2174].z) * _2242) * _2243) + _2049;
    }
    float _2378;
    float _2380;
    float _2382;
    float _2384;
    float _2386;
    float _2388;
    if (_1682.y == 0u)
    {
        float _2318 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2319 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2318;
        float _2320 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2318;
        float _2321 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2318;
        uvec4 _2333 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2334 = _2333.x;
        uint _2345 = uint((float(_2333.y) * floor(float(uint(cbSceneParam._m0[85u].y * _565) / _2334))) + floor(float(uint(cbSceneParam._m0[85u].x * _564) / _2334)));
        float _2355 = (log2(_2321 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2356 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        uint _2359 = uint(isnan(14.0) ? _2356 : (isnan(_2356) ? 14.0 : min(_2356, 14.0)));
        uvec4 _2364 = texelFetch(g_lightClusterGridBuffer, int(((_2359 << 2u) + (_2345 << 6u)) >> 2u));
        uint _2365 = _2364.x;
        uint _2366 = _2333.z;
        float _2466;
        float _2468;
        float _2470;
        float _2472;
        float _2474;
        float _2476;
        if (((((1u << ((_2366 >> 4u) & 15u)) + 4294967295u) & _2365) == 0u) || ((_2366 & 240u) == 0u))
        {
            _2466 = 0.0;
            _2468 = 0.0;
            _2470 = 0.0;
            _2472 = 0.0;
            _2474 = 0.0;
            _2476 = 0.0;
        }
        else
        {
            float _2467;
            float _2469;
            float _2471;
            float _2473;
            float _2475;
            float _2477;
            float _2611 = 0.0;
            float _2612 = 0.0;
            float _2613 = 0.0;
            float _2614 = 0.0;
            float _2615 = 0.0;
            float _2616 = 0.0;
            uint _2617 = 0u;
            uint _2626;
            bool _2627;
            for (;;)
            {
                _2626 = texelFetch(g_lightClassification, int((((_2359 << 5u) + (_2345 << 9u)) + (_2617 << 2u)) >> 2u)).x;
                _2627 = _2626 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2627)
                {
                    frontier_phi_61_pred = _2611;
                    frontier_phi_61_pred_1 = _2616;
                    frontier_phi_61_pred_2 = _2615;
                    frontier_phi_61_pred_3 = _2614;
                    frontier_phi_61_pred_4 = _2613;
                    frontier_phi_61_pred_5 = _2612;
                }
                else
                {
                    float _2735;
                    float _2736;
                    float _2737;
                    float _2738;
                    float _2739;
                    float _2740;
                    uint _2741;
                    _2735 = _2611;
                    _2736 = _2612;
                    _2737 = _2613;
                    _2738 = _2614;
                    _2739 = _2615;
                    _2740 = _2616;
                    _2741 = _2626;
                    float _2667;
                    float _2668;
                    float _2669;
                    float _2670;
                    float _2671;
                    float _2672;
                    for (;;)
                    {
                        uint _2745 = uint(findLSB(_2741)) + (_2617 << 5u);
                        uint _2742 = (_2741 + 4294967295u) & _2741;
                        uint _2747 = _2745 * 48u;
                        vec4 _2761 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2747)).x, texelFetch(g_PointLightRenderingBuffer, int(_2747 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2747 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2747 + 3u)).x));
                        uint _2767 = (_2745 * 48u) + 4u;
                        vec4 _2780 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2767)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 3u)).x));
                        uint _2786 = (_2745 * 48u) + 8u;
                        vec3 _2797 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2786)).x, texelFetch(g_PointLightRenderingBuffer, int(_2786 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2786 + 2u)).x));
                        float _2801 = _2761.x - _2319;
                        float _2802 = _2761.y - _2320;
                        float _2803 = _2761.z - _2321;
                        float _2804 = dot(vec3(_2801, _2802, _2803), vec3(_2801, _2802, _2803));
                        float _2807 = inversesqrt(_2804);
                        float _2808 = _2807 * _2801;
                        float _2809 = _2807 * _2802;
                        float _2810 = _2807 * _2803;
                        float _2811 = dot(vec3(_586, _589, _592), vec3(_2808, _2809, _2810));
                        float _2816 = 1.0 - (_2804 * _2761.w);
                        float _4119 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
                        float _2817 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
                        float _2818 = sqrt(_2804) * _2780.w;
                        float _2821 = 1.39999997615814208984375 / (_2818 + 1.39999997615814208984375);
                        float _2822 = _2821 * _2821;
                        float _2825 = ((1.0 - _2822) * _2811) + _2822;
                        float _2828 = _2818 * _2818;
                        float _2832 = ((isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0))) * _2817) / ((_2828 * 0.699999988079071044921875) + 1.0);
                        float _2836 = (-0.0) - _2319;
                        float _2837 = (-0.0) - _2320;
                        float _2838 = (-0.0) - _2321;
                        float _2842 = inversesqrt(dot(vec3(_2836, _2837, _2838), vec3(_2836, _2837, _2838)));
                        float _2843 = _2842 * _2836;
                        float _2844 = _2842 * _2837;
                        float _2845 = _2842 * _2838;
                        float _2853 = exp2(log2(1.0 / ((_2828 * 3.5) + 5.0)) * 0.25);
                        float _2854 = 1.0 - _661;
                        float _2861 = sqrt(1.0 - ((1.0 - (_2854 * _2854)) * (1.0 - (_2853 * _2853))));
                        float _2862 = _2861 * _2861;
                        float _2863 = _2862 * _2862;
                        float _2864 = _2843 + _2808;
                        float _2865 = _2844 + _2809;
                        float _2866 = _2845 + _2810;
                        float _2870 = inversesqrt(dot(vec3(_2864, _2865, _2866), vec3(_2864, _2865, _2866)));
                        float _2874 = dot(vec3(_586, _589, _592), vec3(_2843, _2844, _2845));
                        float _4135 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
                        float _2877 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
                        float _2878 = dot(vec3(_586, _589, _592), vec3(_2870 * _2864, _2870 * _2865, _2870 * _2866));
                        float _4146 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
                        float _2881 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
                        float _2885 = ((_2881 * _2881) * (_2863 + (-1.0))) + 1.0;
                        float _2886 = _2821 * _2862;
                        float _2887 = _2886 * _2886;
                        float _2890 = ((1.0 - _2887) * _2811) + _2887;
                        float _4157 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
                        float _2891 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
                        float _2892 = 1.0 - _2862;
                        float _2902 = (0.5 / (((_2891 * ((_2877 * _2892) + _2862)) + 9.9999999392252902907785028219223e-09) + (((_2891 * _2892) + _2862) * _2877))) * _2891;
                        float _4168 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
                        float _2913 = (((_2863 * 3.1415927410125732421875) * (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0)))) / ((_2885 * _2885) * ((_2828 * 2.1991131305694580078125) + 3.141590118408203125))) * _2817;
                        _2670 = (_2832 * _2780.x) + _2738;
                        _2671 = (_2832 * _2780.y) + _2739;
                        _2672 = (_2832 * _2780.z) + _2740;
                        _2667 = (_2913 * _2797.x) + _2735;
                        _2668 = (_2913 * _2797.y) + _2736;
                        _2669 = (_2913 * _2797.z) + _2737;
                        if (_2742 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2735 = _2667;
                            _2736 = _2668;
                            _2737 = _2669;
                            _2738 = _2670;
                            _2739 = _2671;
                            _2740 = _2672;
                            _2741 = _2742;
                        }
                    }
                    frontier_phi_61_pred = _2667;
                    frontier_phi_61_pred_1 = _2672;
                    frontier_phi_61_pred_2 = _2671;
                    frontier_phi_61_pred_3 = _2670;
                    frontier_phi_61_pred_4 = _2669;
                    frontier_phi_61_pred_5 = _2668;
                }
                _2467 = frontier_phi_61_pred;
                _2477 = frontier_phi_61_pred_1;
                _2475 = frontier_phi_61_pred_2;
                _2473 = frontier_phi_61_pred_3;
                _2471 = frontier_phi_61_pred_4;
                _2469 = frontier_phi_61_pred_5;
                uint _2618 = _2617 + 1u;
                if (_2618 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2611 = _2467;
                    _2612 = _2469;
                    _2613 = _2471;
                    _2614 = _2473;
                    _2615 = _2475;
                    _2616 = _2477;
                    _2617 = _2618;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2466 = _2467;
            _2468 = _2469;
            _2470 = _2471;
            _2472 = _2473;
            _2474 = _2475;
            _2476 = _2477;
        }
        uvec4 _2480 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2481 = _2480.z;
        uint _2483 = (_2481 >> 8u) & 15u;
        float _2579;
        float _2581;
        float _2583;
        float _2585;
        float _2587;
        float _2589;
        if (((4294967295u << _2483) & _2365) == 0u)
        {
            _2579 = _2466;
            _2581 = _2468;
            _2583 = _2470;
            _2585 = _2472;
            _2587 = _2474;
            _2589 = _2476;
        }
        else
        {
            float _2604 = inversesqrt(dot(vec3(_2319, _2320, _2321), vec3(_2319, _2320, _2321)));
            float _2605 = _2604 * _2319;
            float _2606 = _2604 * _2320;
            float _2607 = _2604 * _2321;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2483 < ((_2481 >> 12u) & 15u))
            {
                float _2580;
                float _2582;
                float _2584;
                float _2586;
                float _2588;
                float _2590;
                float _2718 = _2466;
                float _2719 = _2468;
                float _2720 = _2470;
                float _2721 = _2472;
                float _2722 = _2474;
                float _2723 = _2476;
                uint _2724 = _2483;
                uint _2733;
                bool _2734;
                for (;;)
                {
                    _2733 = texelFetch(g_lightClassification, int((((_2359 << 5u) + (_2345 << 9u)) + (_2724 << 2u)) >> 2u)).x;
                    _2734 = _2733 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2734)
                    {
                        frontier_phi_67_pred = _2721;
                        frontier_phi_67_pred_1 = _2722;
                        frontier_phi_67_pred_2 = _2723;
                        frontier_phi_67_pred_3 = _2720;
                        frontier_phi_67_pred_4 = _2719;
                        frontier_phi_67_pred_5 = _2718;
                    }
                    else
                    {
                        float _2918;
                        float _2919;
                        float _2920;
                        float _2921;
                        float _2922;
                        float _2923;
                        float _3213;
                        float _3214;
                        float _3215;
                        float _3216;
                        float _3217;
                        float _3218;
                        float _2931 = _2718;
                        float _2932 = _2719;
                        float _2933 = _2720;
                        float _2934 = _2721;
                        float _2935 = _2722;
                        float _2936 = _2723;
                        uint _2937 = _2733;
                        uint _2938;
                        vec4 _2963;
                        float _2964;
                        vec4 _2979;
                        vec3 _2991;
                        vec4 _3007;
                        vec4 _3023;
                        float _3069;
                        bool _3070;
                        for (;;)
                        {
                            uint _2948 = ((_2724 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2937));
                            _2938 = (_2937 + 4294967295u) & _2937;
                            uint _2950 = _2948 * 40u;
                            _2963 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2950)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 3u)).x));
                            _2964 = _2963.w;
                            uint _2966 = (_2948 * 40u) + 4u;
                            _2979 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2966)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 3u)).x));
                            uint _2981 = (_2948 * 40u) + 8u;
                            _2991 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2981)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 2u)).x));
                            uint _2994 = (_2948 * 40u) + 16u;
                            _3007 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2994)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 3u)).x));
                            uint _3010 = (_2948 * 40u) + 20u;
                            _3023 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3010)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 3u)).x));
                            uint _3025 = (_2948 * 40u) + 24u;
                            vec4 _3038 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3025)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 3u)).x));
                            uint _3044 = (_2948 * 40u) + 28u;
                            vec4 _3057 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3044)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 3u)).x));
                            _3069 = fma(_2321, _3057.z, fma(_2320, _3057.y, _3057.x * _2319)) + _3057.w;
                            _3070 = !((fma(_2321, _3038.z, fma(_2320, _3038.y, _3038.x * _2319)) + _3038.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3070)
                            {
                                float _3097 = _2963.x - _2319;
                                float _3098 = _2963.y - _2320;
                                float _3099 = _2963.z - _2321;
                                float _3100 = dot(vec3(_3097, _3098, _3099), vec3(_3097, _3098, _3099));
                                float _3103 = inversesqrt(_3100);
                                float _3104 = _3103 * _3097;
                                float _3105 = _3103 * _3098;
                                float _3106 = _3103 * _3099;
                                float _3110 = 1.0 - (_3100 / (_2964 * _2964));
                                float _4179 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                                float _3111 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
                                float _3115 = sqrt(_3100) * _2979.w;
                                float _3117 = 1.39999997615814208984375 / (_3115 + 1.39999997615814208984375);
                                float _3118 = _3117 * _3117;
                                float _3121 = ((1.0 - _3118) * dot(vec3(_3104, _3105, _3106), vec3(_586, _589, _592))) + _3118;
                                float _3124 = _3115 * _3115;
                                float _3128 = (fma(_2321, _3007.z, fma(_2320, _3007.y, _3007.x * _2319)) + _3007.w) / _3069;
                                float _3129 = (fma(_2321, _3023.z, fma(_2320, _3023.y, _3023.x * _2319)) + _3023.w) / _3069;
                                float _3133 = 1.0 - dot(vec2(_3128, _3129), vec2(_3128, _3129));
                                float _4195 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                                float _3134 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
                                float _3135 = _3134 * (((isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0))) * _3111) / ((_3124 * 0.699999988079071044921875) + 1.0));
                                float _3147 = exp2(log2(1.0 / ((_3124 * 3.5) + 5.0)) * 0.25);
                                float _3148 = 1.0 - _661;
                                float _3155 = sqrt(1.0 - ((1.0 - (_3148 * _3148)) * (1.0 - (_3147 * _3147))));
                                float _3156 = _3155 * _3155;
                                float _3157 = _3156 * _3156;
                                float _3158 = _3104 - _2605;
                                float _3159 = _3105 - _2606;
                                float _3160 = _3106 - _2607;
                                float _3164 = inversesqrt(dot(vec3(_3158, _3159, _3160), vec3(_3158, _3159, _3160)));
                                float _3168 = dot(vec3(_586, _589, _592), vec3((-0.0) - _2605, (-0.0) - _2606, (-0.0) - _2607));
                                float _4206 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                                float _3171 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
                                float _3172 = dot(vec3(_586, _589, _592), vec3(_3164 * _3158, _3164 * _3159, _3164 * _3160));
                                float _4217 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                                float _3175 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
                                float _3179 = ((_3175 * _3175) * (_3157 + (-1.0))) + 1.0;
                                float _3180 = _3117 * _3156;
                                float _3181 = _3180 * _3180;
                                float _3187 = ((1.0 - _3181) * dot(vec3(_586, _589, _592), vec3(_3104, _3105, _3106))) + _3181;
                                float _4228 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                                float _3188 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
                                float _3189 = 1.0 - _3156;
                                float _3199 = (0.5 / (((_3188 * ((_3171 * _3189) + _3156)) + 9.9999999392252902907785028219223e-09) + (((_3188 * _3189) + _3156) * _3171))) * _3188;
                                float _4239 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                                float _3209 = (_3134 * _3111) * (((_3157 * 3.1415927410125732421875) * (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0)))) / ((_3179 * _3179) * ((_3124 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3209 * _2991.x;
                                frontier_phi_73_pred_1 = _3209 * _2991.y;
                                frontier_phi_73_pred_2 = _3135 * _2979.z;
                                frontier_phi_73_pred_3 = _3135 * _2979.y;
                                frontier_phi_73_pred_4 = _3135 * _2979.x;
                                frontier_phi_73_pred_5 = _3209 * _2991.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3213 = frontier_phi_73_pred;
                            _3214 = frontier_phi_73_pred_1;
                            _3218 = frontier_phi_73_pred_2;
                            _3217 = frontier_phi_73_pred_3;
                            _3216 = frontier_phi_73_pred_4;
                            _3215 = frontier_phi_73_pred_5;
                            _2921 = _3216 + _2934;
                            _2922 = _3217 + _2935;
                            _2923 = _3218 + _2936;
                            _2918 = _3213 + _2931;
                            _2919 = _3214 + _2932;
                            _2920 = _3215 + _2933;
                            if (_2938 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2931 = _2918;
                                _2932 = _2919;
                                _2933 = _2920;
                                _2934 = _2921;
                                _2935 = _2922;
                                _2936 = _2923;
                                _2937 = _2938;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2921;
                        frontier_phi_67_pred_1 = _2922;
                        frontier_phi_67_pred_2 = _2923;
                        frontier_phi_67_pred_3 = _2920;
                        frontier_phi_67_pred_4 = _2919;
                        frontier_phi_67_pred_5 = _2918;
                    }
                    _2586 = frontier_phi_67_pred;
                    _2588 = frontier_phi_67_pred_1;
                    _2590 = frontier_phi_67_pred_2;
                    _2584 = frontier_phi_67_pred_3;
                    _2582 = frontier_phi_67_pred_4;
                    _2580 = frontier_phi_67_pred_5;
                    uint _2725 = _2724 + 1u;
                    if (_2725 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2718 = _2580;
                        _2719 = _2582;
                        _2720 = _2584;
                        _2721 = _2586;
                        _2722 = _2588;
                        _2723 = _2590;
                        _2724 = _2725;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2588;
                frontier_phi_55_56_ladder_1 = _2590;
                frontier_phi_55_56_ladder_2 = _2586;
                frontier_phi_55_56_ladder_3 = _2584;
                frontier_phi_55_56_ladder_4 = _2582;
                frontier_phi_55_56_ladder_5 = _2580;
            }
            else
            {
                frontier_phi_55_56_ladder = _2474;
                frontier_phi_55_56_ladder_1 = _2476;
                frontier_phi_55_56_ladder_2 = _2472;
                frontier_phi_55_56_ladder_3 = _2470;
                frontier_phi_55_56_ladder_4 = _2468;
                frontier_phi_55_56_ladder_5 = _2466;
            }
            _2579 = frontier_phi_55_56_ladder_5;
            _2581 = frontier_phi_55_56_ladder_4;
            _2583 = frontier_phi_55_56_ladder_3;
            _2585 = frontier_phi_55_56_ladder_2;
            _2587 = frontier_phi_55_56_ladder;
            _2589 = frontier_phi_55_56_ladder_1;
        }
        float _2594 = isnan(1.0) ? _645 : (isnan(_645) ? 1.0 : min(_645, 1.0));
        _2378 = (_2594 * _2585) + _1814;
        _2380 = (_2594 * _2587) + _1816;
        _2382 = (_2594 * _2589) + _1818;
        _2384 = ((_2579 * _629) * _2594) + _2159;
        _2386 = ((_2581 * _631) * _2594) + _2161;
        _2388 = ((_2583 * _632) * _2594) + _2163;
    }
    else
    {
        _2378 = _1814;
        _2380 = _1816;
        _2382 = _1818;
        _2384 = _2159;
        _2386 = _2161;
        _2388 = _2163;
    }
    float _4255 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _4266 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _4277 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    uint _2408 = _220 + 6u;
    float _2416 = _564 / cbSceneParam._m0[86u].x;
    float _2417 = _565 / cbSceneParam._m0[86u].y;
    vec4 _2431 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2416, _2417, (log2((isnan(cbSceneParam._m0[77u].w) ? _498 : (isnan(_498) ? cbSceneParam._m0[77u].w : min(_498, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2433 = _2431.x;
    float _2434 = _2431.y;
    float _2435 = _2431.z;
    float _2436 = _2431.w;
    float _2529;
    float _2531;
    float _2533;
    float _2535;
    if (_498 > cbSceneParam._m0[78u].w)
    {
        float _2491 = isnan(_498) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _498 : min(cbSceneParam._m0[80u].w, _498));
        float _2492 = _2491 / _498;
        float _2503 = _2492 * _549;
        float _2504 = _550 * _2492;
        float _2505 = (-0.0) - _2504;
        float _2507 = _2492 * _551;
        float _2509 = (cbSceneParam._m0[77u].w * _2505) / _2491;
        float _2510 = _2509 + cbSceneParam._m0[79u].w;
        float _2511 = cbSceneParam._m0[79u].w - _2504;
        float _2517 = sqrt(((_2503 * _2503) + (_2504 * _2504)) + (_2507 * _2507));
        float _2520 = (1.0 - (cbSceneParam._m0[77u].w / _2491)) * _2517;
        float _2525 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2527 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2680;
        if (abs((_2505 - _2509) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2680 = ((((_2510 > 0.0) ? exp2(_2525 * _2510) : (2.0 - exp2(_2527 * _2510))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2520;
        }
        else
        {
            float _2640 = 1.0 / cbSceneParam._m0[80u].x;
            float _2641 = isnan(_2511) ? _2510 : (isnan(_2510) ? _2511 : max(_2510, _2511));
            float _2642 = isnan(_2511) ? _2510 : (isnan(_2510) ? _2511 : min(_2510, _2511));
            float _2651 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : min(_2641, 0.0));
            float _2652 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : min(_2642, 0.0));
            _2680 = ((abs(_2517 / _2505) * cbSceneParam._m0[80u].y) * ((((_2651 - _2652) * 2.0) - ((exp2(_2525 * (isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0)))) - exp2(_2525 * (isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0))))) * _2640)) - ((exp2(_2527 * _2651) - exp2(_2527 * _2652)) * _2640))) + (_2520 * cbSceneParam._m0[80u].z);
        }
        vec4 _2682 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2416, _2417, 1.0), 0.0);
        float _2691 = exp2((_2680 * (-1.44269502162933349609375)) * (1.0 - _2682.w));
        float _2692 = log2(_2691);
        float _2708 = log2(_2436);
        _2529 = (exp2(_2708 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2692 * cbSceneParam._m0[78u].x)) * _2682.x) / cbSceneParam._m0[78u].x)) + _2433;
        _2531 = (exp2(_2708 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2692 * cbSceneParam._m0[78u].y)) * _2682.y) / cbSceneParam._m0[78u].y)) + _2434;
        _2533 = (exp2(_2708 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2692 * cbSceneParam._m0[78u].z)) * _2682.z) / cbSceneParam._m0[78u].z)) + _2435;
        _2535 = _2691 * _2436;
    }
    else
    {
        _2529 = _2433;
        _2531 = _2434;
        _2533 = _2435;
        _2535 = _2436;
    }
    float _2547 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2548 = _2547 == 3.0;
    float _2549 = log2(_2535);
    float _2556 = exp2(_2549 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_2378 + ((isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0))) * _645))) + ((_2384 + ((isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))) * _1453)) * cbPerFrame._m0[3u].x));
    float _2557 = exp2(_2549 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_2380 + ((isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0))) * _645))) + ((_2386 + ((isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))) * _1453)) * cbPerFrame._m0[3u].x));
    float _2558 = exp2(_2549 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_2382 + ((isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0))) * _645))) + ((_2388 + ((isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))) * _1453)) * cbPerFrame._m0[3u].x));
    float _2567 = (_2547 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2567 * (_2548 ? _2556 : (_2556 + (cbSceneParam._m0[72u].w * _2529)));
    SV_Target.y = _2567 * (_2548 ? _2557 : (_2557 + (cbSceneParam._m0[72u].w * _2531)));
    SV_Target.z = _2567 * (_2548 ? _2558 : (_2558 + (cbSceneParam._m0[72u].w * _2533)));
    SV_Target.w = cbInstanceData._m0[_2408].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2408].w;
}


