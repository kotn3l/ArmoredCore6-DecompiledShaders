#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1120;
float _3787;
float _3788;
float _3789;
float _3790;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _236 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _236 + 1u;
    uint _246 = _236 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _277 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _283 = _277.x * cbMtdParam._m0[11u].x;
    float _284 = _277.y * cbMtdParam._m0[11u].y;
    float _285 = _277.z * cbMtdParam._m0[11u].z;
    vec4 _304 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _256) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _257) + cbTextureTilingScale._m0[5u].w));
    vec4 _342 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _344 = _342.x;
    float _356 = dot(vec4(_344, _342.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _373 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_344 - _356) * cbMtdParam._m0[24u].y) + _356) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3799 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _374 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    float _381 = (_374 * ((_304.x * cbMtdParam._m0[12u].x) - _283)) + _283;
    float _382 = (_374 * ((_304.y * cbMtdParam._m0[12u].y) - _284)) + _284;
    float _383 = (_374 * ((_304.z * cbMtdParam._m0[12u].z) - _285)) + _285;
    vec4 _396 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _256) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _257) + cbTextureTilingScale._m0[4u].w));
    vec4 _413 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _415 = _413.x;
    float _416 = _413.y;
    float _417 = _413.z;
    float _426 = ((_396.z - _417) * _374) + _417;
    float _429 = ((((_396.x - _415) * _374) + _415) * 2.0) + (-1.0);
    float _431 = ((((_396.y - _416) * _374) + _416) * 2.0) + (-1.0);
    float _432 = dot(vec2(_429, _431), vec2(_429, _431));
    float _3810 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _437 = sqrt(1.0 - (isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))));
    vec4 _453 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _465 = (((_453.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _429;
    float _466 = (((_453.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _431;
    vec4 _478 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _492 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _494 = _492.x;
    float _512 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _256) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _257) + cbTextureTilingScale._m0[9u].w)).x - _494) * _374) + _494;
    float _516 = ((_478.x - _512) * cbMtdParam._m0[19u].z) + _512;
    float _520 = (cbMtdParam._m0[19u].w * (_453.z - _426)) + _426;
    float _525 = cbMtdParam._m0[22u].x + _453.w;
    float _528 = fma(_437, _223 * NORMAL.x, fma(_466, _230 * TANGENT.x, (_216 * _208) * _465));
    float _531 = fma(_437, _223 * NORMAL.y, fma(_466, _230 * TANGENT.y, (_216 * _209) * _465));
    float _534 = fma(_437, _223 * NORMAL.z, fma(_466, _230 * TANGENT.z, (_216 * _210) * _465));
    float _538 = inversesqrt(dot(vec3(_528, _531, _534), vec3(_528, _531, _534)));
    float _539 = _538 * _528;
    float _540 = _538 * _531;
    float _541 = _538 * _534;
    float _3821 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _542 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
    float _3832 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _3843 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _3854 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _3865 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _3876 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _547 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
    float _561 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _602 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _612 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _602);
    float _613 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _602);
    float _614 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _602);
    float _618 = inversesqrt(dot(vec3(_612, _613, _614), vec3(_612, _613, _614)));
    float _619 = _612 * _618;
    float _620 = _613 * _618;
    float _621 = _614 * _618;
    vec4 _626 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _628 = _626.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _800 = sqrt(((_612 * _612) + (_613 * _613)) + (_614 * _614));
        float _806 = (cbMatDynParam._m0[5u].x * _800) + cbMatDynParam._m0[5u].y;
        float _3887 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _807 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _811 = (cbMatDynParam._m0[5u].z * _800) + cbMatDynParam._m0[5u].w;
        float _3898 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) - _807)) + _807) < ((_628 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _639 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _640 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _658 = fma(_541, cbSceneParam._m0[5u].z, fma(_540, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _539));
    float _661 = fma(_541, cbSceneParam._m0[6u].z, fma(_540, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _539));
    float _664 = fma(_541, cbSceneParam._m0[7u].z, fma(_540, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _539));
    uint _677 = _236 + 9u;
    uint _678 = _677 + uint(cbMatDynParam._m0[0u].w);
    float _684 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0)))) * cbInstanceData._m0[_678].x;
    float _685 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0)))) * cbInstanceData._m0[_678].y;
    float _686 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0)))) * cbInstanceData._m0[_678].z;
    float _3909 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _687 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
    float _3920 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _688 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
    float _3931 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _689 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _690 = 1.0 - _547;
    float _691 = _687 * _690;
    float _692 = _688 * _690;
    float _693 = _689 * _690;
    float _698 = (_687 + (-0.039999999105930328369140625)) * _547;
    float _699 = (_688 + (-0.039999999105930328369140625)) * _547;
    float _700 = (_689 + (-0.039999999105930328369140625)) * _547;
    float _701 = _698 + 0.039999999105930328369140625;
    float _703 = _699 + 0.039999999105930328369140625;
    float _704 = _700 + 0.039999999105930328369140625;
    vec4 _713 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _639, cbSceneParam._m0[86u].y * _640));
    float _717 = ((isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * TEXCOORD_5.w) * _713.x;
    float _718 = dot(vec3(_539, _540, _541), vec3(_619, _620, _621));
    float _721 = _718 * 2.0;
    float _725 = (_721 * _539) - _619;
    float _726 = (_721 * _540) - _620;
    float _727 = (_721 * _541) - _621;
    float _731 = abs(dot(vec3(_619, _620, _621), vec3(_539, _540, _541)));
    float _3942 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _733 = sqrt(_542);
    float _746 = exp2((_733 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_733 * 3.0));
    float _752 = (1.0 - _746) * ((_733 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _753 = _746 * _733;
    float _781 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _785 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _789 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1119;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _844 = fma(_789, cbModelParam._m0[26u].z, fma(_785, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _781));
        float _848 = fma(_789, cbModelParam._m0[27u].z, fma(_785, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _781));
        float _852 = fma(_789, cbModelParam._m0[28u].z, fma(_785, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _781));
        float _877 = _781 + _539;
        float _878 = _785 + _540;
        float _879 = _789 + _541;
        float _889 = fma(_879, cbModelParam._m0[26u].z, fma(_878, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _877)) - _844;
        float _890 = fma(_879, cbModelParam._m0[27u].z, fma(_878, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _877)) - _848;
        float _891 = fma(_879, cbModelParam._m0[28u].z, fma(_878, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _877)) - _852;
        float _895 = inversesqrt(dot(vec3(_889, _890, _891), vec3(_889, _890, _891)));
        float _908 = ((_895 * _889) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_844 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _909 = ((_895 * _890) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_848 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _910 = ((_895 * _891) / cbModelParam._m0[34u].z) + ((((((_852 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _913 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_908, _909, _910), 0.0);
        vec4 _920 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_908, _909, _910), 0.0);
        vec4 _927 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_908, _909, _910), 0.0);
        vec4 _934 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_908, _909, _910), 0.0);
        float _947 = exp2((_913.w + (-0.5)) * 20.0) * 2.0;
        float _948 = _947 * (_913.x + (-0.5));
        float _949 = _947 * (_913.y + (-0.5));
        float _950 = _947 * (_913.z + (-0.5));
        float _957 = exp2((_920.w + (-0.5)) * 20.0) * 2.0;
        float _958 = _957 * (_920.x + (-0.5));
        float _959 = _957 * (_920.y + (-0.5));
        float _960 = _957 * (_920.z + (-0.5));
        float _967 = exp2((_927.w + (-0.5)) * 20.0) * 2.0;
        float _968 = _967 * (_927.x + (-0.5));
        float _969 = _967 * (_927.y + (-0.5));
        float _970 = _967 * (_927.z + (-0.5));
        float _977 = exp2((_934.w + (-0.5)) * 20.0) * 2.0;
        float _978 = _977 * (_934.x + (-0.5));
        float _979 = _977 * (_934.y + (-0.5));
        float _980 = _977 * (_934.z + (-0.5));
        float _981 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _982 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _983 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _984 = _948 * 0.5;
        float _985 = _958 * 0.5;
        float _986 = _968 * 0.5;
        float _987 = dot(vec3(_984, _985, _986), vec3(_984, _985, _986));
        float _992 = (_987 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_987);
        float _1001 = (dot(vec3(_539, _540, _541), vec3(_992 * _984, _992 * _985, _992 * _986)) + 1.0) * 0.5;
        float _3968 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1011 = sqrt(((_985 * _985) + (_984 * _984)) + (_986 * _986)) / (_981 + 9.9999997473787516355514526367188e-06);
        float _3979 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1013 = _1012 * 2.0;
        float _1017 = (1.0 - _1012) / (_1012 + 1.0);
        float _3990 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1027 = ((((1.0 - _1018) * (_1013 + 2.0)) * exp2(log2(isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * (_1013 + 1.0))) + _1018) * _981;
        float _1028 = _949 * 0.5;
        float _1029 = _959 * 0.5;
        float _1030 = _969 * 0.5;
        float _1031 = dot(vec3(_1028, _1029, _1030), vec3(_1028, _1029, _1030));
        float _1036 = (_1031 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1031);
        float _1044 = (dot(vec3(_539, _540, _541), vec3(_1036 * _1028, _1036 * _1029, _1036 * _1030)) + 1.0) * 0.5;
        float _4001 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1053 = sqrt(((_1029 * _1029) + (_1028 * _1028)) + (_1030 * _1030)) / (_982 + 9.9999997473787516355514526367188e-06);
        float _4012 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1055 = _1054 * 2.0;
        float _1059 = (1.0 - _1054) / (_1054 + 1.0);
        float _4023 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1069 = ((((1.0 - _1060) * (_1055 + 2.0)) * exp2(log2(isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * (_1055 + 1.0))) + _1060) * _982;
        float _1070 = _950 * 0.5;
        float _1071 = _960 * 0.5;
        float _1072 = _970 * 0.5;
        float _1073 = dot(vec3(_1070, _1071, _1072), vec3(_1070, _1071, _1072));
        float _1078 = (_1073 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1073);
        float _1086 = (dot(vec3(_539, _540, _541), vec3(_1078 * _1070, _1078 * _1071, _1078 * _1072)) + 1.0) * 0.5;
        float _4034 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1095 = sqrt(((_1071 * _1071) + (_1070 * _1070)) + (_1072 * _1072)) / (_983 + 9.9999997473787516355514526367188e-06);
        float _4045 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1097 = _1096 * 2.0;
        float _1101 = (1.0 - _1096) / (_1096 + 1.0);
        float _4056 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1111 = ((((1.0 - _1102) * (_1097 + 2.0)) * exp2(log2(isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (_1097 + 1.0))) + _1102) * _983;
        _1119 = _950;
        _1121 = _949;
        _1122 = _948;
        _1123 = _960;
        _1124 = _959;
        _1125 = _958;
        _1126 = _970;
        _1127 = _969;
        _1128 = _968;
        _1129 = _983;
        _1130 = _982;
        _1131 = _981;
        _1132 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0)));
        _1133 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0)));
        _1134 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0)));
    }
    else
    {
        _1119 = _1120;
        _1121 = _1120;
        _1122 = _1120;
        _1123 = _1120;
        _1124 = _1120;
        _1125 = _1120;
        _1126 = _1120;
        _1127 = _1120;
        _1128 = _1120;
        _1129 = _1120;
        _1130 = _1120;
        _1131 = _1120;
        _1132 = 0.0;
        _1133 = 0.0;
        _1134 = 0.0;
    }
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1162 = fma(_789, cbModelParam._m0[30u].z, fma(_785, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _781));
        float _1166 = fma(_789, cbModelParam._m0[31u].z, fma(_785, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _781));
        float _1170 = fma(_789, cbModelParam._m0[32u].z, fma(_785, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _781));
        float _1193 = _781 + _539;
        float _1194 = _785 + _540;
        float _1195 = _789 + _541;
        float _1205 = fma(_1195, cbModelParam._m0[30u].z, fma(_1194, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1193)) - _1162;
        float _1206 = fma(_1195, cbModelParam._m0[31u].z, fma(_1194, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1193)) - _1166;
        float _1207 = fma(_1195, cbModelParam._m0[32u].z, fma(_1194, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1193)) - _1170;
        float _1211 = inversesqrt(dot(vec3(_1205, _1206, _1207), vec3(_1205, _1206, _1207)));
        float _1224 = ((_1211 * _1205) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1162 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1225 = ((_1211 * _1206) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1166 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1226 = ((_1211 * _1207) / cbModelParam._m0[35u].z) + ((((((_1170 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1224, _1225, _1226), 0.0);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1224, _1225, _1226), 0.0);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1224, _1225, _1226), 0.0);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1224, _1225, _1226), 0.0);
        float _1261 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1228.x + (-0.5));
        float _1263 = _1261 * (_1228.y + (-0.5));
        float _1264 = _1261 * (_1228.z + (-0.5));
        float _1271 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1235.x + (-0.5));
        float _1273 = _1271 * (_1235.y + (-0.5));
        float _1274 = _1271 * (_1235.z + (-0.5));
        float _1281 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1242.x + (-0.5));
        float _1283 = _1281 * (_1242.y + (-0.5));
        float _1284 = _1281 * (_1242.z + (-0.5));
        float _1291 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1292 = _1291 * (_1249.x + (-0.5));
        float _1293 = _1291 * (_1249.y + (-0.5));
        float _1294 = _1291 * (_1249.z + (-0.5));
        float _1295 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1296 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1297 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1298 = _1262 * 0.5;
        float _1299 = _1272 * 0.5;
        float _1300 = _1282 * 0.5;
        float _1301 = dot(vec3(_1298, _1299, _1300), vec3(_1298, _1299, _1300));
        float _1306 = (_1301 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1301);
        float _1314 = (dot(vec3(_539, _540, _541), vec3(_1306 * _1298, _1306 * _1299, _1306 * _1300)) + 1.0) * 0.5;
        float _4097 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1323 = sqrt(((_1299 * _1299) + (_1298 * _1298)) + (_1300 * _1300)) / (_1295 + 9.9999997473787516355514526367188e-06);
        float _4108 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1325 = _1324 * 2.0;
        float _1329 = (1.0 - _1324) / (_1324 + 1.0);
        float _4119 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _1339 = ((((1.0 - _1330) * (_1325 + 2.0)) * exp2(log2(isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (_1325 + 1.0))) + _1330) * _1295;
        float _1340 = _1263 * 0.5;
        float _1341 = _1273 * 0.5;
        float _1342 = _1283 * 0.5;
        float _1343 = dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342));
        float _1348 = (_1343 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1343);
        float _1356 = (dot(vec3(_539, _540, _541), vec3(_1348 * _1340, _1348 * _1341, _1348 * _1342)) + 1.0) * 0.5;
        float _4130 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1365 = sqrt(((_1341 * _1341) + (_1340 * _1340)) + (_1342 * _1342)) / (_1296 + 9.9999997473787516355514526367188e-06);
        float _4141 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1367 = _1366 * 2.0;
        float _1371 = (1.0 - _1366) / (_1366 + 1.0);
        float _4152 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1381 = ((((1.0 - _1372) * (_1367 + 2.0)) * exp2(log2(isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_1367 + 1.0))) + _1372) * _1296;
        float _1382 = _1264 * 0.5;
        float _1383 = _1274 * 0.5;
        float _1384 = _1284 * 0.5;
        float _1385 = dot(vec3(_1382, _1383, _1384), vec3(_1382, _1383, _1384));
        float _1390 = (_1385 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1385);
        float _1398 = (dot(vec3(_539, _540, _541), vec3(_1390 * _1382, _1390 * _1383, _1390 * _1384)) + 1.0) * 0.5;
        float _4163 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1407 = sqrt(((_1383 * _1383) + (_1382 * _1382)) + (_1384 * _1384)) / (_1297 + 9.9999997473787516355514526367188e-06);
        float _4174 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1409 = _1408 * 2.0;
        float _1413 = (1.0 - _1408) / (_1408 + 1.0);
        float _4185 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1423 = ((((1.0 - _1414) * (_1409 + 2.0)) * exp2(log2(isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_1409 + 1.0))) + _1414) * _1297;
        _1431 = _1264;
        _1432 = _1263;
        _1433 = _1262;
        _1434 = _1274;
        _1435 = _1273;
        _1436 = _1272;
        _1437 = _1284;
        _1438 = _1283;
        _1439 = _1282;
        _1440 = _1297;
        _1441 = _1296;
        _1442 = _1295;
        _1443 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)));
        _1444 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)));
        _1445 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)));
    }
    else
    {
        _1431 = _1120;
        _1432 = _1120;
        _1433 = _1120;
        _1434 = _1120;
        _1435 = _1120;
        _1436 = _1120;
        _1437 = _1120;
        _1438 = _1120;
        _1439 = _1120;
        _1440 = _1120;
        _1441 = _1120;
        _1442 = _1120;
        _1443 = 0.0;
        _1444 = 0.0;
        _1445 = 0.0;
    }
    float _1455 = (cbModelParam._m0[1u].x * (_1443 - _1132)) + _1132;
    float _1456 = (cbModelParam._m0[1u].x * (_1444 - _1133)) + _1133;
    float _1457 = (cbModelParam._m0[1u].x * (_1445 - _1134)) + _1134;
    float _1478 = fma(_1457, cbSceneParam._m0[89u].z, fma(_1456, cbSceneParam._m0[89u].y, _1455 * cbSceneParam._m0[89u].x));
    float _1481 = fma(_1457, cbSceneParam._m0[90u].z, fma(_1456, cbSceneParam._m0[90u].y, _1455 * cbSceneParam._m0[90u].x));
    float _1484 = fma(_1457, cbSceneParam._m0[91u].z, fma(_1456, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1455));
    float _1499 = _725 * 0.5;
    float _1500 = _726 * 0.5;
    float _1501 = _727 * 0.5;
    float _1502 = dot(vec4(_1499, _1500, _1501, 1.0), vec4(_1433, _1436, _1439, _1442));
    float _1505 = dot(vec4(_1499, _1500, _1501, 1.0), vec4(_1432, _1435, _1438, _1441));
    float _1508 = dot(vec4(_1499, _1500, _1501, 1.0), vec4(_1431, _1434, _1437, _1440));
    float _1542;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1515 = dot(vec4(_1499, _1500, _1501, 1.0), vec4(_1119, _1123, _1126, _1129));
        float _1519 = dot(vec4(_1499, _1500, _1501, 1.0), vec4(_1121, _1124, _1127, _1130));
        float _1523 = dot(vec4(_1499, _1500, _1501, 1.0), vec4(_1122, _1125, _1128, _1131));
        float _1530 = dot(vec4(cbModelParam._m0[39u]), vec4(_1499, _1500, _1501, 1.0));
        _1542 = dot(vec3(isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)), isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)), isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1530) ? 0.0 : (isnan(0.0) ? _1530 : max(0.0, _1530))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1542 = 1.0;
    }
    float _1553;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1544 = dot(vec4(cbModelParam._m0[40u]), vec4(_1499, _1500, _1501, 1.0));
        _1553 = dot(vec3(isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)), isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)), isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1544) ? 0.0 : (isnan(0.0) ? _1544 : max(0.0, _1544))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1553 = 1.0;
    }
    float _1557 = (_1553 * cbModelParam._m0[1u].x) + (_1542 * (1.0 - cbModelParam._m0[1u].x));
    float _1567 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _542);
    float _1568 = isnan(_1567) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1567 : min(cbModelParam._m0[25u].z, _1567));
    float _1650;
    float _1652;
    float _1654;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1617 = fma(_789, cbModelParam._m0[13u].z, fma(_785, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _781)) + cbModelParam._m0[13u].w;
        float _1621 = fma(_789, cbModelParam._m0[14u].z, fma(_785, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _781)) + cbModelParam._m0[14u].w;
        float _1625 = fma(_789, cbModelParam._m0[15u].z, fma(_785, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _781)) + cbModelParam._m0[15u].w;
        float _1628 = fma(_727, cbModelParam._m0[13u].z, fma(_726, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _725));
        float _1631 = fma(_727, cbModelParam._m0[14u].z, fma(_726, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _725));
        float _1634 = fma(_727, cbModelParam._m0[15u].z, fma(_726, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _725));
        float _1662;
        if (_1628 > 0.0)
        {
            _1662 = abs((1.0 - _1617) / _1628);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1628 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1617 + 1.0) / _1628);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1662 = frontier_phi_17_15_ladder;
        }
        float _1835;
        if (_1631 > 0.0)
        {
            _1835 = abs((1.0 - _1621) / _1631);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1631 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1621 + 1.0) / _1631);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1835 = frontier_phi_26_22_ladder;
        }
        float _2130;
        if (_1634 > 0.0)
        {
            _2130 = abs((1.0 - _1625) / _1634);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1634 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1625 + 1.0) / _1634);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2130 = frontier_phi_38_33_ladder;
        }
        float _2132 = isnan(_1835) ? _1662 : (isnan(_1662) ? _1835 : min(_1662, _1835));
        float _2133 = isnan(_2130) ? _2132 : (isnan(_2132) ? _2130 : min(_2132, _2130));
        float _2137 = (_2133 * _1628) + _1617;
        float _2138 = (_2133 * _1631) + _1621;
        float _2139 = (_2133 * _1634) + _1625;
        float _2140 = _2133 * 9.9999997473787516355514526367188e-05;
        float _2142 = (-1.0) - _2140;
        float _2144 = _2140 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2139 > _2144) || ((_2139 < _2142) || ((_2138 > _2144) || ((_2138 < _2142) || ((_2137 < _2142) || (_2137 > _2144))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2284 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2139, cbModelParam._m0[9u].z, fma(_2138, cbModelParam._m0[9u].y, _2137 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2139, cbModelParam._m0[10u].z, fma(_2138, cbModelParam._m0[10u].y, _2137 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2139, cbModelParam._m0[11u].z, fma(_2138, cbModelParam._m0[11u].y, _2137 * cbModelParam._m0[11u].x))), _1568);
            frontier_phi_16_38_ladder = _2284.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2284.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2284.x * cbModelParam._m0[1u].y;
        }
        _1650 = frontier_phi_16_38_ladder_2;
        _1652 = frontier_phi_16_38_ladder_1;
        _1654 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1638 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_725, _726, _727), _1568);
        _1650 = _1638.x * cbModelParam._m0[1u].y;
        _1652 = _1638.y * cbModelParam._m0[1u].y;
        _1654 = _1638.z * cbModelParam._m0[1u].y;
    }
    float _1658 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _542);
    float _1659 = isnan(_1658) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1658 : min(cbModelParam._m0[25u].w, _1658));
    float _1750;
    float _1752;
    float _1754;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1714 = fma(_789, cbModelParam._m0[21u].z, fma(_785, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _781)) + cbModelParam._m0[21u].w;
        float _1718 = fma(_789, cbModelParam._m0[22u].z, fma(_785, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _781)) + cbModelParam._m0[22u].w;
        float _1722 = fma(_789, cbModelParam._m0[23u].z, fma(_785, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _781)) + cbModelParam._m0[23u].w;
        float _1725 = fma(_727, cbModelParam._m0[21u].z, fma(_726, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _725));
        float _1728 = fma(_727, cbModelParam._m0[22u].z, fma(_726, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _725));
        float _1731 = fma(_727, cbModelParam._m0[23u].z, fma(_726, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _725));
        float _1840;
        if (_1725 > 0.0)
        {
            _1840 = abs((1.0 - _1714) / _1725);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1725 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1714 + 1.0) / _1725);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1840 = frontier_phi_28_24_ladder;
        }
        float _2157;
        if (_1728 > 0.0)
        {
            _2157 = abs((1.0 - _1718) / _1728);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1718 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2157 = frontier_phi_40_35_ladder;
        }
        float _2495;
        if (_1731 > 0.0)
        {
            _2495 = abs((1.0 - _1722) / _1731);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1722 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2495 = frontier_phi_50_47_ladder;
        }
        float _2497 = isnan(_2157) ? _1840 : (isnan(_1840) ? _2157 : min(_1840, _2157));
        float _2498 = isnan(_2495) ? _2497 : (isnan(_2497) ? _2495 : min(_2497, _2495));
        float _2502 = (_2498 * _1725) + _1714;
        float _2503 = (_2498 * _1728) + _1718;
        float _2504 = (_2498 * _1731) + _1722;
        float _2505 = _2498 * 9.9999997473787516355514526367188e-05;
        float _2506 = (-1.0) - _2505;
        float _2508 = _2505 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2504 > _2508) || ((_2504 < _2506) || ((_2503 > _2508) || ((_2503 < _2506) || ((_2502 < _2506) || (_2502 > _2508))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2626 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2504, cbModelParam._m0[17u].z, fma(_2503, cbModelParam._m0[17u].y, _2502 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2504, cbModelParam._m0[18u].z, fma(_2503, cbModelParam._m0[18u].y, _2502 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2504, cbModelParam._m0[19u].z, fma(_2503, cbModelParam._m0[19u].y, _2502 * cbModelParam._m0[19u].x))), _1659);
            frontier_phi_25_50_ladder = _2626.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2626.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2626.x * cbModelParam._m0[1u].z;
        }
        _1750 = frontier_phi_25_50_ladder_2;
        _1752 = frontier_phi_25_50_ladder_1;
        _1754 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1734 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_725, _726, _727), _1659);
        _1750 = _1734.x * cbModelParam._m0[1u].z;
        _1752 = _1734.y * cbModelParam._m0[1u].z;
        _1754 = _1734.z * cbModelParam._m0[1u].z;
    }
    float _1767 = (((_752 * _701) + _753) * _717) * ((cbModelParam._m0[1u].w * (_1750 - _1650)) + _1650);
    float _1769 = (((_752 * _703) + _753) * _717) * ((cbModelParam._m0[1u].w * (_1752 - _1652)) + _1652);
    float _1771 = (((_752 * _704) + _753) * _717) * ((cbModelParam._m0[1u].w * (_1754 - _1654)) + _1654);
    float _1774 = fma(_1771, cbSceneParam._m0[89u].z, fma(_1769, cbSceneParam._m0[89u].y, _1767 * cbSceneParam._m0[89u].x));
    float _1777 = fma(_1771, cbSceneParam._m0[90u].z, fma(_1769, cbSceneParam._m0[90u].y, _1767 * cbSceneParam._m0[90u].x));
    float _1780 = fma(_1771, cbSceneParam._m0[91u].z, fma(_1769, cbSceneParam._m0[91u].y, _1767 * cbSceneParam._m0[91u].x));
    float _1814 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1818 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1822 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1826 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1827 = _1814 / _1826;
    float _1828 = _1818 / _1826;
    float _1829 = _1822 / _1826;
    float _1976;
    float _1977;
    float _1978;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1856 = ((uint(_1829 > cbSceneParam._m0[59u].y) + uint(_1829 > cbSceneParam._m0[59u].x)) + uint(_1829 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1857 = _1856 + 43u;
        uint _1865 = _1856 + 44u;
        uint _1873 = _1856 + 45u;
        uint _1881 = _1856 + 46u;
        float _1892 = fma(_1826, cbSceneParam._m0[_1857].w, fma(_1822, cbSceneParam._m0[_1857].z, fma(_1818, cbSceneParam._m0[_1857].y, _1814 * cbSceneParam._m0[_1857].x)));
        float _1896 = fma(_1826, cbSceneParam._m0[_1865].w, fma(_1822, cbSceneParam._m0[_1865].z, fma(_1818, cbSceneParam._m0[_1865].y, _1814 * cbSceneParam._m0[_1865].x)));
        float _1904 = fma(_1826, cbSceneParam._m0[_1881].w, fma(_1822, cbSceneParam._m0[_1881].z, fma(_1818, cbSceneParam._m0[_1881].y, _1814 * cbSceneParam._m0[_1881].x)));
        float _1909 = cbSceneParam._m0[33u].z * _1904;
        float _1911 = cbSceneParam._m0[33u].w * _1904;
        float _1914 = fma(_1826, cbSceneParam._m0[_1873].w, fma(_1822, cbSceneParam._m0[_1873].z, fma(_1818, cbSceneParam._m0[_1873].y, _1814 * cbSceneParam._m0[_1873].x))) / _1904;
        float _1962 = (cbSceneParam._m0[33u].x - sqrt(((_1828 * _1828) + (_1827 * _1827)) + (_1829 * _1829))) * cbSceneParam._m0[33u].y;
        float _4311 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
        float _1969 = (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1909 + _1892) / _1904, (_1911 + _1896) / _1904), _1914), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1911 + _1892) / _1904, (_1896 - _1909) / _1904), _1914), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1892 - _1909) / _1904, (_1896 - _1911) / _1904), _1914), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1892 - _1911) / _1904, (_1909 + _1896) / _1904), _1914), 0.0)).x), vec4(0.25)));
        _1976 = 1.0 - (_1969 * cbSceneParam._m0[34u].x);
        _1977 = 1.0 - (_1969 * cbSceneParam._m0[34u].y);
        _1978 = 1.0 - (_1969 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1976 = 1.0;
        _1977 = 1.0;
        _1978 = 1.0;
    }
    float _2042;
    float _2044;
    float _2046;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2030 = fma(_1826, cbSceneParam._m0[63u].w, fma(_1822, cbSceneParam._m0[63u].z, fma(_1818, cbSceneParam._m0[63u].y, _1814 * cbSceneParam._m0[63u].x)));
        float _2031 = fma(_1826, cbSceneParam._m0[60u].w, fma(_1822, cbSceneParam._m0[60u].z, fma(_1818, cbSceneParam._m0[60u].y, _1814 * cbSceneParam._m0[60u].x))) / _2030;
        float _2032 = fma(_1826, cbSceneParam._m0[61u].w, fma(_1822, cbSceneParam._m0[61u].z, fma(_1818, cbSceneParam._m0[61u].y, _1814 * cbSceneParam._m0[61u].x))) / _2030;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2031 >= cbSceneParam._m0[64u].x) && (_2032 >= cbSceneParam._m0[64u].y)) && (_2031 <= cbSceneParam._m0[64u].z)) && (_2032 <= cbSceneParam._m0[64u].w))
        {
            float _2170 = fma(_1826, cbSceneParam._m0[62u].w, fma(_1822, cbSceneParam._m0[62u].z, fma(_1818, cbSceneParam._m0[62u].y, _1814 * cbSceneParam._m0[62u].x))) / _2030;
            float _2174 = isnan(cbSceneParam._m0[41u].w) ? _2170 : (isnan(_2170) ? cbSceneParam._m0[41u].w : max(_2170, cbSceneParam._m0[41u].w));
            float _2217 = (cbSceneParam._m0[33u].x - sqrt(((_1828 * _1828) + (_1827 * _1827)) + (_1829 * _1829))) * cbSceneParam._m0[33u].y;
            float _4327 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
            float _2224 = (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2031, cbSceneParam._m0[33u].w + _2032), _2174), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2031, _2032 - cbSceneParam._m0[33u].z), _2174), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2031 - cbSceneParam._m0[33u].z, _2032 - cbSceneParam._m0[33u].w), _2174), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2031 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2032), _2174), 0.0)).x), vec4(0.25)));
            float _2228 = 1.0 - (_2224 * cbSceneParam._m0[34u].x);
            float _2229 = 1.0 - (_2224 * cbSceneParam._m0[34u].y);
            float _2230 = 1.0 - (_2224 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2230) ? _1978 : (isnan(_1978) ? _2230 : min(_1978, _2230));
            frontier_phi_37_36_ladder_1 = isnan(_2229) ? _1977 : (isnan(_1977) ? _2229 : min(_1977, _2229));
            frontier_phi_37_36_ladder_2 = isnan(_2228) ? _1976 : (isnan(_1976) ? _2228 : min(_1976, _2228));
        }
        else
        {
            frontier_phi_37_36_ladder = _1978;
            frontier_phi_37_36_ladder_1 = _1977;
            frontier_phi_37_36_ladder_2 = _1976;
        }
        _2042 = frontier_phi_37_36_ladder_2;
        _2044 = frontier_phi_37_36_ladder_1;
        _2046 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2042 = _1976;
        _2044 = _1977;
        _2046 = _1978;
    }
    uvec4 _2051 = floatBitsToUint(cbInstanceData._m0[_236 + 5u]);
    uint _2053 = _2051.x * 14u;
    uint _2054 = _2053 + 13u;
    float _2061 = _717 + (-1.0);
    float _2066 = (cbLight._m0[_2054].x * _2061) + 1.0;
    float _2067 = (cbLight._m0[_2054].y * _2061) + 1.0;
    float _2068 = (cbLight._m0[_2054].z * _2061) + 1.0;
    float _2069 = (cbLight._m0[_2054].w * _2061) + 1.0;
    uint _2070 = _2053 + 5u;
    float _2076 = isnan(1.0) ? _2067 : (isnan(_2067) ? 1.0 : min(_2067, 1.0));
    uint _2080 = _2053 + 4u;
    float _2089 = isnan(1.0) ? _2066 : (isnan(_2066) ? 1.0 : min(_2066, 1.0));
    uint _2093 = _2053 | 1u;
    float _2104 = dot(vec3(cbLight._m0[_2053].xyz), vec3(_539, _540, _541));
    float _2107 = dot(vec3(cbLight._m0[_2093].xyz), vec3(_539, _540, _541));
    float _4363 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _4374 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2112 = (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * 0.3183098733425140380859375;
    float _2114 = (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * 0.3183098733425140380859375;
    float _2121 = ((cbLight._m0[_2070].x * _2076) * _2114) + (((cbLight._m0[_2080].x * _2042) * _2089) * _2112);
    float _2122 = ((_2076 * cbLight._m0[_2070].y) * _2114) + (((cbLight._m0[_2080].y * _2044) * _2089) * _2112);
    float _2123 = ((_2076 * cbLight._m0[_2070].z) * _2114) + (((cbLight._m0[_2080].z * _2046) * _2089) * _2112);
    uvec4 _2127 = floatBitsToUint(cbLight._m0[_2053 + 12u]);
    bool _2129 = _2127.x == 0u;
    float _2231;
    float _2233;
    float _2235;
    if (_2129)
    {
        _2231 = _2121;
        _2233 = _2122;
        _2235 = _2123;
    }
    else
    {
        uint _2239 = _2053 + 6u;
        float _2255 = (dot(vec3(cbLight._m0[_2053 + 2u].xyz), vec3(_539, _540, _541)) * 0.5) + 0.5;
        float _2256 = _2255 * _2255;
        float _4385 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2257 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _2258 = isnan(1.0) ? _2068 : (isnan(_2068) ? 1.0 : min(_2068, 1.0));
        _2231 = (((cbLight._m0[_2239].x * 0.3183098733425140380859375) * _2257) * _2258) + _2121;
        _2233 = (((cbLight._m0[_2239].y * 0.3183098733425140380859375) * _2257) * _2258) + _2122;
        _2235 = (((cbLight._m0[_2239].z * 0.3183098733425140380859375) * _2257) * _2258) + _2123;
    }
    bool _2238 = _2127.y == 0u;
    float _2293;
    float _2295;
    float _2297;
    if (_2238)
    {
        _2293 = _2231;
        _2295 = _2233;
        _2297 = _2235;
    }
    else
    {
        uint _2466 = _2053 + 7u;
        float _2482 = (dot(vec3(cbLight._m0[_2053 + 3u].xyz), vec3(_539, _540, _541)) * 0.5) + 0.5;
        float _2483 = _2482 * _2482;
        float _4401 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2484 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _2485 = isnan(1.0) ? _2069 : (isnan(_2069) ? 1.0 : min(_2069, 1.0));
        _2293 = (((cbLight._m0[_2466].x * 0.3183098733425140380859375) * _2484) * _2485) + _2231;
        _2295 = (((cbLight._m0[_2466].y * 0.3183098733425140380859375) * _2484) * _2485) + _2233;
        _2297 = (((cbLight._m0[_2466].z * 0.3183098733425140380859375) * _2484) * _2485) + _2235;
    }
    uint _2300 = _2053 + 8u;
    float _2313 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2053].w)) * _542) * 0.949999988079071044921875);
    float _2314 = _2313 * _2313;
    float _2315 = cbLight._m0[_2053].x + _619;
    float _2316 = cbLight._m0[_2053].y + _620;
    float _2317 = cbLight._m0[_2053].z + _621;
    float _2321 = inversesqrt(dot(vec3(_2315, _2316, _2317), vec3(_2315, _2316, _2317)));
    float _2322 = _2321 * _2315;
    float _2323 = _2321 * _2316;
    float _2324 = _2321 * _2317;
    float _2325 = dot(vec3(_539, _540, _541), vec3(cbLight._m0[_2053].xyz));
    float _4417 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2328 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
    float _4428 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _2329 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
    float _2330 = dot(vec3(_539, _540, _541), vec3(_2322, _2323, _2324));
    float _4439 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2333 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
    float _2334 = dot(vec3(cbLight._m0[_2053].xyz), vec3(_2322, _2323, _2324));
    float _4450 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2338 = _2314 * _2314;
    float _2342 = ((_2333 * _2333) * (_2338 + (-1.0))) + 1.0;
    float _2350 = exp2(log2(1.0 - (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0)))) * 5.0);
    float _2351 = 0.959999978542327880859375 - _698;
    float _2353 = 0.959999978542327880859375 - _699;
    float _2354 = 0.959999978542327880859375 - _700;
    float _2361 = 1.0 - _2314;
    float _2372 = (0.5 / (((_2329 * ((_2328 * _2361) + _2314)) + 9.9999999392252902907785028219223e-09) + (((_2329 * _2361) + _2314) * _2328))) * _2328;
    float _4461 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
    float _2374 = (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_2338 / ((_2342 * _2342) * 3.141590118408203125));
    uint _2388 = _2053 + 9u;
    float _2399 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2093].w)) * _542) * 0.949999988079071044921875);
    float _2400 = _2399 * _2399;
    float _2401 = cbLight._m0[_2093].x + _619;
    float _2402 = cbLight._m0[_2093].y + _620;
    float _2403 = cbLight._m0[_2093].z + _621;
    float _2407 = inversesqrt(dot(vec3(_2401, _2402, _2403), vec3(_2401, _2402, _2403)));
    float _2408 = _2407 * _2401;
    float _2409 = _2407 * _2402;
    float _2410 = _2407 * _2403;
    float _2411 = dot(vec3(_539, _540, _541), vec3(cbLight._m0[_2093].xyz));
    float _4472 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
    float _2414 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
    float _2415 = dot(vec3(_539, _540, _541), vec3(_2408, _2409, _2410));
    float _4483 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
    float _2418 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
    float _2419 = dot(vec3(cbLight._m0[_2093].xyz), vec3(_2408, _2409, _2410));
    float _4494 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
    float _2423 = _2400 * _2400;
    float _2427 = ((_2418 * _2418) * (_2423 + (-1.0))) + 1.0;
    float _2434 = exp2(log2(1.0 - (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0)))) * 5.0);
    float _2441 = 1.0 - _2400;
    float _2451 = (0.5 / (((_2329 * ((_2414 * _2441) + _2400)) + 9.9999999392252902907785028219223e-09) + (((_2329 * _2441) + _2400) * _2414))) * _2414;
    float _4505 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
    float _2453 = (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * (_2423 / ((_2427 * _2427) * 3.141590118408203125));
    float _2463 = (((((_2434 * _2351) + _701) * cbLight._m0[_2388].x) * _2453) * _2076) + ((((cbLight._m0[_2300].x * _2042) * ((_2350 * _2351) + _701)) * _2374) * _2089);
    float _2464 = (((((_2434 * _2353) + _703) * cbLight._m0[_2388].y) * _2453) * _2076) + ((((cbLight._m0[_2300].y * _2044) * ((_2350 * _2353) + _703)) * _2374) * _2089);
    float _2465 = (((((_2434 * _2354) + _704) * cbLight._m0[_2388].z) * _2453) * _2076) + ((((cbLight._m0[_2300].z * _2046) * ((_2350 * _2354) + _704)) * _2374) * _2089);
    float _2521;
    float _2523;
    float _2525;
    if (_2129)
    {
        _2521 = _2463;
        _2523 = _2464;
        _2525 = _2465;
    }
    else
    {
        uint _2527 = _2053 + 2u;
        uint _2531 = _2053 + 10u;
        float _2545 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2527].w)) * _542) * 0.949999988079071044921875);
        float _2546 = _2545 * _2545;
        float _2547 = cbLight._m0[_2527].x + _619;
        float _2548 = cbLight._m0[_2527].y + _620;
        float _2549 = cbLight._m0[_2527].z + _621;
        float _2553 = inversesqrt(dot(vec3(_2547, _2548, _2549), vec3(_2547, _2548, _2549)));
        float _2554 = _2553 * _2547;
        float _2555 = _2553 * _2548;
        float _2556 = _2553 * _2549;
        float _2557 = dot(vec3(_539, _540, _541), vec3(cbLight._m0[_2527].xyz));
        float _4516 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
        float _2560 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _2561 = dot(vec3(_539, _540, _541), vec3(_2554, _2555, _2556));
        float _4527 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        float _2564 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
        float _2565 = dot(vec3(cbLight._m0[_2527].xyz), vec3(_2554, _2555, _2556));
        float _4538 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2569 = _2546 * _2546;
        float _2573 = ((_2564 * _2564) * (_2569 + (-1.0))) + 1.0;
        float _2580 = exp2(log2(1.0 - (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0)))) * 5.0);
        float _2587 = 1.0 - _2546;
        float _2597 = (0.5 / (((_2329 * ((_2560 * _2587) + _2546)) + 9.9999999392252902907785028219223e-09) + (((_2329 * _2587) + _2546) * _2560))) * _2560;
        float _4549 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        float _2599 = (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * (_2569 / ((_2573 * _2573) * 3.141590118408203125));
        float _2600 = isnan(1.0) ? _2068 : (isnan(_2068) ? 1.0 : min(_2068, 1.0));
        _2521 = (((((_2580 * _2351) + _701) * cbLight._m0[_2531].x) * _2599) * _2600) + _2463;
        _2523 = (((((_2580 * _2353) + _703) * cbLight._m0[_2531].y) * _2599) * _2600) + _2464;
        _2525 = (((((_2580 * _2354) + _704) * cbLight._m0[_2531].z) * _2599) * _2600) + _2465;
    }
    float _2631;
    float _2633;
    float _2635;
    if (_2238)
    {
        _2631 = _2521;
        _2633 = _2523;
        _2635 = _2525;
    }
    else
    {
        uint _2642 = _2053 + 3u;
        uint _2646 = _2053 + 11u;
        float _2660 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2642].w)) * _542) * 0.949999988079071044921875);
        float _2661 = _2660 * _2660;
        float _2662 = cbLight._m0[_2642].x + _619;
        float _2663 = cbLight._m0[_2642].y + _620;
        float _2664 = cbLight._m0[_2642].z + _621;
        float _2668 = inversesqrt(dot(vec3(_2662, _2663, _2664), vec3(_2662, _2663, _2664)));
        float _2669 = _2668 * _2662;
        float _2670 = _2668 * _2663;
        float _2671 = _2668 * _2664;
        float _2672 = dot(vec3(_539, _540, _541), vec3(cbLight._m0[_2642].xyz));
        float _4565 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
        float _2675 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
        float _2676 = dot(vec3(_539, _540, _541), vec3(_2669, _2670, _2671));
        float _4576 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
        float _2679 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
        float _2680 = dot(vec3(cbLight._m0[_2642].xyz), vec3(_2669, _2670, _2671));
        float _4587 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
        float _2684 = _2661 * _2661;
        float _2688 = ((_2679 * _2679) * (_2684 + (-1.0))) + 1.0;
        float _2695 = exp2(log2(1.0 - (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0)))) * 5.0);
        float _2702 = 1.0 - _2661;
        float _2712 = (0.5 / (((_2329 * ((_2675 * _2702) + _2661)) + 9.9999999392252902907785028219223e-09) + (((_2329 * _2702) + _2661) * _2675))) * _2675;
        float _4598 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
        float _2714 = (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * (_2684 / ((_2688 * _2688) * 3.141590118408203125));
        float _2715 = isnan(1.0) ? _2069 : (isnan(_2069) ? 1.0 : min(_2069, 1.0));
        _2631 = (((((_2695 * _2351) + _701) * cbLight._m0[_2646].x) * _2714) * _2715) + _2521;
        _2633 = (((((_2695 * _2353) + _703) * cbLight._m0[_2646].y) * _2714) * _2715) + _2523;
        _2635 = (((((_2695 * _2354) + _704) * cbLight._m0[_2646].z) * _2714) * _2715) + _2525;
    }
    float _2781;
    float _2783;
    float _2785;
    float _2787;
    float _2789;
    float _2791;
    if (_2051.y == 0u)
    {
        uvec4 _2736 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2737 = _2736.x;
        uint _2748 = uint((float(_2736.y) * floor(float(uint(cbSceneParam._m0[85u].y * _640) / _2737))) + floor(float(uint(cbSceneParam._m0[85u].x * _639) / _2737)));
        float _2758 = (log2(_1829 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2759 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
        uint _2762 = uint(isnan(14.0) ? _2759 : (isnan(_2759) ? 14.0 : min(_2759, 14.0)));
        uvec4 _2767 = texelFetch(g_lightClusterGridBuffer, int(((_2762 << 2u) + (_2748 << 6u)) >> 2u));
        uint _2768 = _2767.x;
        uint _2769 = _2736.z;
        float _2848;
        float _2850;
        float _2852;
        float _2854;
        float _2856;
        float _2858;
        if (((((1u << ((_2769 >> 4u) & 15u)) + 4294967295u) & _2768) == 0u) || ((_2769 & 240u) == 0u))
        {
            _2848 = 0.0;
            _2850 = 0.0;
            _2852 = 0.0;
            _2854 = 0.0;
            _2856 = 0.0;
            _2858 = 0.0;
        }
        else
        {
            float _2849;
            float _2851;
            float _2853;
            float _2855;
            float _2857;
            float _2859;
            float _3001 = 0.0;
            float _3002 = 0.0;
            float _3003 = 0.0;
            float _3004 = 0.0;
            float _3005 = 0.0;
            float _3006 = 0.0;
            uint _3007 = 0u;
            uint _3016;
            bool _3017;
            for (;;)
            {
                _3016 = texelFetch(g_lightClassification, int((((_2762 << 5u) + (_2748 << 9u)) + (_3007 << 2u)) >> 2u)).x;
                _3017 = _3016 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3017)
                {
                    frontier_phi_71_pred = _3006;
                    frontier_phi_71_pred_1 = _3005;
                    frontier_phi_71_pred_2 = _3004;
                    frontier_phi_71_pred_3 = _3003;
                    frontier_phi_71_pred_4 = _3002;
                    frontier_phi_71_pred_5 = _3001;
                }
                else
                {
                    float _3146;
                    float _3147;
                    float _3148;
                    float _3149;
                    float _3150;
                    float _3151;
                    uint _3152;
                    _3146 = _3001;
                    _3147 = _3002;
                    _3148 = _3003;
                    _3149 = _3004;
                    _3150 = _3005;
                    _3151 = _3006;
                    _3152 = _3016;
                    float _3073;
                    float _3074;
                    float _3075;
                    float _3076;
                    float _3077;
                    float _3078;
                    for (;;)
                    {
                        uint _3156 = uint(findLSB(_3152)) + (_3007 << 5u);
                        uint _3153 = (_3152 + 4294967295u) & _3152;
                        uint _3158 = _3156 * 48u;
                        vec4 _3172 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3158)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 3u)).x));
                        uint _3178 = (_3156 * 48u) + 4u;
                        vec4 _3191 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3178)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 3u)).x));
                        uint _3197 = (_3156 * 48u) + 8u;
                        vec3 _3208 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3197)).x, texelFetch(g_PointLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3197 + 2u)).x));
                        float _3212 = _3172.x - _1827;
                        float _3213 = _3172.y - _1828;
                        float _3214 = _3172.z - _1829;
                        float _3215 = dot(vec3(_3212, _3213, _3214), vec3(_3212, _3213, _3214));
                        float _3218 = inversesqrt(_3215);
                        float _3219 = _3218 * _3212;
                        float _3220 = _3218 * _3213;
                        float _3221 = _3218 * _3214;
                        float _3222 = dot(vec3(_658, _661, _664), vec3(_3219, _3220, _3221));
                        float _3227 = 1.0 - (_3215 * _3172.w);
                        float _4624 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                        float _3228 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
                        float _3229 = sqrt(_3215) * _3191.w;
                        float _3232 = 1.39999997615814208984375 / (_3229 + 1.39999997615814208984375);
                        float _3233 = _3232 * _3232;
                        float _3236 = ((1.0 - _3233) * _3222) + _3233;
                        float _3239 = _3229 * _3229;
                        float _3243 = ((isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0))) * _3228) / ((_3239 * 0.699999988079071044921875) + 1.0);
                        float _3247 = (-0.0) - _1827;
                        float _3248 = (-0.0) - _1828;
                        float _3249 = (-0.0) - _1829;
                        float _3253 = inversesqrt(dot(vec3(_3247, _3248, _3249), vec3(_3247, _3248, _3249)));
                        float _3254 = _3253 * _3247;
                        float _3255 = _3253 * _3248;
                        float _3256 = _3253 * _3249;
                        float _3263 = exp2(log2(1.0 / ((_3239 * 3.5) + 5.0)) * 0.25);
                        float _3264 = 1.0 - _733;
                        float _3271 = sqrt(1.0 - ((1.0 - (_3264 * _3264)) * (1.0 - (_3263 * _3263))));
                        float _3272 = _3271 * _3271;
                        float _3273 = _3272 * _3272;
                        float _3274 = _3254 + _3219;
                        float _3275 = _3255 + _3220;
                        float _3276 = _3256 + _3221;
                        float _3280 = inversesqrt(dot(vec3(_3274, _3275, _3276), vec3(_3274, _3275, _3276)));
                        float _3284 = dot(vec3(_658, _661, _664), vec3(_3254, _3255, _3256));
                        float _4640 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                        float _3287 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
                        float _3288 = dot(vec3(_658, _661, _664), vec3(_3280 * _3274, _3280 * _3275, _3280 * _3276));
                        float _4651 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                        float _3291 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
                        float _3295 = ((_3291 * _3291) * (_3273 + (-1.0))) + 1.0;
                        float _3296 = _3232 * _3272;
                        float _3297 = _3296 * _3296;
                        float _3300 = ((1.0 - _3297) * _3222) + _3297;
                        float _4662 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                        float _3301 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
                        float _3302 = 1.0 - _3272;
                        float _3312 = (0.5 / (((_3301 * ((_3287 * _3302) + _3272)) + 9.9999999392252902907785028219223e-09) + (((_3301 * _3302) + _3272) * _3287))) * _3301;
                        float _4673 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                        float _3323 = (((_3273 * 3.1415927410125732421875) * (isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0)))) / ((_3295 * _3295) * ((_3239 * 2.1991131305694580078125) + 3.141590118408203125))) * _3228;
                        _3076 = (_3243 * _3191.x) + _3149;
                        _3077 = (_3243 * _3191.y) + _3150;
                        _3078 = (_3243 * _3191.z) + _3151;
                        _3073 = (_3323 * _3208.x) + _3146;
                        _3074 = (_3323 * _3208.y) + _3147;
                        _3075 = (_3323 * _3208.z) + _3148;
                        if (_3153 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3146 = _3073;
                            _3147 = _3074;
                            _3148 = _3075;
                            _3149 = _3076;
                            _3150 = _3077;
                            _3151 = _3078;
                            _3152 = _3153;
                        }
                    }
                    frontier_phi_71_pred = _3078;
                    frontier_phi_71_pred_1 = _3077;
                    frontier_phi_71_pred_2 = _3076;
                    frontier_phi_71_pred_3 = _3075;
                    frontier_phi_71_pred_4 = _3074;
                    frontier_phi_71_pred_5 = _3073;
                }
                _2859 = frontier_phi_71_pred;
                _2857 = frontier_phi_71_pred_1;
                _2855 = frontier_phi_71_pred_2;
                _2853 = frontier_phi_71_pred_3;
                _2851 = frontier_phi_71_pred_4;
                _2849 = frontier_phi_71_pred_5;
                uint _3008 = _3007 + 1u;
                if (_3008 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3001 = _2849;
                    _3002 = _2851;
                    _3003 = _2853;
                    _3004 = _2855;
                    _3005 = _2857;
                    _3006 = _2859;
                    _3007 = _3008;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2848 = _2849;
            _2850 = _2851;
            _2852 = _2853;
            _2854 = _2855;
            _2856 = _2857;
            _2858 = _2859;
        }
        uvec4 _2862 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2863 = _2862.z;
        uint _2865 = (_2863 >> 8u) & 15u;
        float _2969;
        float _2971;
        float _2973;
        float _2975;
        float _2977;
        float _2979;
        if (((4294967295u << _2865) & _2768) == 0u)
        {
            _2969 = _2848;
            _2971 = _2850;
            _2973 = _2852;
            _2975 = _2854;
            _2977 = _2856;
            _2979 = _2858;
        }
        else
        {
            float _2994 = inversesqrt(dot(vec3(_1827, _1828, _1829), vec3(_1827, _1828, _1829)));
            float _2995 = _2994 * _1827;
            float _2996 = _2994 * _1828;
            float _2997 = _2994 * _1829;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2865 < ((_2863 >> 12u) & 15u))
            {
                float _2970;
                float _2972;
                float _2974;
                float _2976;
                float _2978;
                float _2980;
                float _3129 = _2848;
                float _3130 = _2850;
                float _3131 = _2852;
                float _3132 = _2854;
                float _3133 = _2856;
                float _3134 = _2858;
                uint _3135 = _2865;
                uint _3144;
                bool _3145;
                for (;;)
                {
                    _3144 = texelFetch(g_lightClassification, int((((_2762 << 5u) + (_2748 << 9u)) + (_3135 << 2u)) >> 2u)).x;
                    _3145 = _3144 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3145)
                    {
                        frontier_phi_82_pred = _3134;
                        frontier_phi_82_pred_1 = _3133;
                        frontier_phi_82_pred_2 = _3132;
                        frontier_phi_82_pred_3 = _3131;
                        frontier_phi_82_pred_4 = _3130;
                        frontier_phi_82_pred_5 = _3129;
                    }
                    else
                    {
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3631;
                        float _3632;
                        float _3633;
                        float _3634;
                        float _3635;
                        float _3636;
                        float _3350 = _3129;
                        float _3351 = _3130;
                        float _3352 = _3131;
                        float _3353 = _3132;
                        float _3354 = _3133;
                        float _3355 = _3134;
                        uint _3356 = _3144;
                        uint _3357;
                        vec4 _3382;
                        float _3383;
                        vec4 _3398;
                        vec3 _3410;
                        vec4 _3425;
                        vec4 _3441;
                        float _3487;
                        bool _3488;
                        for (;;)
                        {
                            uint _3367 = ((_3135 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3356));
                            _3357 = (_3356 + 4294967295u) & _3356;
                            uint _3369 = _3367 * 40u;
                            _3382 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3369)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 3u)).x));
                            _3383 = _3382.w;
                            uint _3385 = (_3367 * 40u) + 4u;
                            _3398 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 3u)).x));
                            uint _3400 = (_3367 * 40u) + 8u;
                            _3410 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3400)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 2u)).x));
                            uint _3412 = (_3367 * 40u) + 16u;
                            _3425 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 3u)).x));
                            uint _3428 = (_3367 * 40u) + 20u;
                            _3441 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3428)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 3u)).x));
                            uint _3443 = (_3367 * 40u) + 24u;
                            vec4 _3456 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3443)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 3u)).x));
                            uint _3462 = (_3367 * 40u) + 28u;
                            vec4 _3475 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3462)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 3u)).x));
                            _3487 = fma(_1829, _3475.z, fma(_1828, _3475.y, _3475.x * _1827)) + _3475.w;
                            _3488 = !((fma(_1829, _3456.z, fma(_1828, _3456.y, _3456.x * _1827)) + _3456.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3488)
                            {
                                float _3515 = _3382.x - _1827;
                                float _3516 = _3382.y - _1828;
                                float _3517 = _3382.z - _1829;
                                float _3518 = dot(vec3(_3515, _3516, _3517), vec3(_3515, _3516, _3517));
                                float _3521 = inversesqrt(_3518);
                                float _3522 = _3521 * _3515;
                                float _3523 = _3521 * _3516;
                                float _3524 = _3521 * _3517;
                                float _3528 = 1.0 - (_3518 / (_3383 * _3383));
                                float _4684 = isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0));
                                float _3529 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
                                float _3533 = sqrt(_3518) * _3398.w;
                                float _3535 = 1.39999997615814208984375 / (_3533 + 1.39999997615814208984375);
                                float _3536 = _3535 * _3535;
                                float _3539 = ((1.0 - _3536) * dot(vec3(_3522, _3523, _3524), vec3(_658, _661, _664))) + _3536;
                                float _3542 = _3533 * _3533;
                                float _3546 = (fma(_1829, _3425.z, fma(_1828, _3425.y, _3425.x * _1827)) + _3425.w) / _3487;
                                float _3547 = (fma(_1829, _3441.z, fma(_1828, _3441.y, _3441.x * _1827)) + _3441.w) / _3487;
                                float _3551 = 1.0 - dot(vec2(_3546, _3547), vec2(_3546, _3547));
                                float _4700 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                                float _3552 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                                float _3553 = _3552 * (((isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0))) * _3529) / ((_3542 * 0.699999988079071044921875) + 1.0));
                                float _3565 = exp2(log2(1.0 / ((_3542 * 3.5) + 5.0)) * 0.25);
                                float _3566 = 1.0 - _733;
                                float _3573 = sqrt(1.0 - ((1.0 - (_3566 * _3566)) * (1.0 - (_3565 * _3565))));
                                float _3574 = _3573 * _3573;
                                float _3575 = _3574 * _3574;
                                float _3576 = _3522 - _2995;
                                float _3577 = _3523 - _2996;
                                float _3578 = _3524 - _2997;
                                float _3582 = inversesqrt(dot(vec3(_3576, _3577, _3578), vec3(_3576, _3577, _3578)));
                                float _3586 = dot(vec3(_658, _661, _664), vec3((-0.0) - _2995, (-0.0) - _2996, (-0.0) - _2997));
                                float _4711 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                                float _3589 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
                                float _3590 = dot(vec3(_658, _661, _664), vec3(_3582 * _3576, _3582 * _3577, _3582 * _3578));
                                float _4722 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                                float _3593 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
                                float _3597 = ((_3593 * _3593) * (_3575 + (-1.0))) + 1.0;
                                float _3598 = _3535 * _3574;
                                float _3599 = _3598 * _3598;
                                float _3605 = ((1.0 - _3599) * dot(vec3(_658, _661, _664), vec3(_3522, _3523, _3524))) + _3599;
                                float _4733 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                                float _3606 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
                                float _3607 = 1.0 - _3574;
                                float _3617 = (0.5 / (((_3606 * ((_3589 * _3607) + _3574)) + 9.9999999392252902907785028219223e-09) + (((_3606 * _3607) + _3574) * _3589))) * _3606;
                                float _4744 = isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0));
                                float _3627 = (_3552 * _3529) * (((_3575 * 3.1415927410125732421875) * (isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0)))) / ((_3597 * _3597) * ((_3542 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3553 * _3398.z;
                                frontier_phi_88_pred_1 = _3553 * _3398.y;
                                frontier_phi_88_pred_2 = _3553 * _3398.x;
                                frontier_phi_88_pred_3 = _3627 * _3410.z;
                                frontier_phi_88_pred_4 = _3627 * _3410.y;
                                frontier_phi_88_pred_5 = _3627 * _3410.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3636 = frontier_phi_88_pred;
                            _3635 = frontier_phi_88_pred_1;
                            _3634 = frontier_phi_88_pred_2;
                            _3633 = frontier_phi_88_pred_3;
                            _3632 = frontier_phi_88_pred_4;
                            _3631 = frontier_phi_88_pred_5;
                            _3340 = _3634 + _3353;
                            _3341 = _3635 + _3354;
                            _3342 = _3636 + _3355;
                            _3337 = _3631 + _3350;
                            _3338 = _3632 + _3351;
                            _3339 = _3633 + _3352;
                            if (_3357 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3350 = _3337;
                                _3351 = _3338;
                                _3352 = _3339;
                                _3353 = _3340;
                                _3354 = _3341;
                                _3355 = _3342;
                                _3356 = _3357;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3342;
                        frontier_phi_82_pred_1 = _3341;
                        frontier_phi_82_pred_2 = _3340;
                        frontier_phi_82_pred_3 = _3339;
                        frontier_phi_82_pred_4 = _3338;
                        frontier_phi_82_pred_5 = _3337;
                    }
                    _2980 = frontier_phi_82_pred;
                    _2978 = frontier_phi_82_pred_1;
                    _2976 = frontier_phi_82_pred_2;
                    _2974 = frontier_phi_82_pred_3;
                    _2972 = frontier_phi_82_pred_4;
                    _2970 = frontier_phi_82_pred_5;
                    uint _3136 = _3135 + 1u;
                    if (_3136 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3129 = _2970;
                        _3130 = _2972;
                        _3131 = _2974;
                        _3132 = _2976;
                        _3133 = _2978;
                        _3134 = _2980;
                        _3135 = _3136;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2976;
                frontier_phi_63_64_ladder_1 = _2980;
                frontier_phi_63_64_ladder_2 = _2978;
                frontier_phi_63_64_ladder_3 = _2974;
                frontier_phi_63_64_ladder_4 = _2972;
                frontier_phi_63_64_ladder_5 = _2970;
            }
            else
            {
                frontier_phi_63_64_ladder = _2854;
                frontier_phi_63_64_ladder_1 = _2858;
                frontier_phi_63_64_ladder_2 = _2856;
                frontier_phi_63_64_ladder_3 = _2852;
                frontier_phi_63_64_ladder_4 = _2850;
                frontier_phi_63_64_ladder_5 = _2848;
            }
            _2969 = frontier_phi_63_64_ladder_5;
            _2971 = frontier_phi_63_64_ladder_4;
            _2973 = frontier_phi_63_64_ladder_3;
            _2975 = frontier_phi_63_64_ladder;
            _2977 = frontier_phi_63_64_ladder_2;
            _2979 = frontier_phi_63_64_ladder_1;
        }
        float _2984 = isnan(1.0) ? _717 : (isnan(_717) ? 1.0 : min(_717, 1.0));
        _2781 = (_2984 * _2975) + _2293;
        _2783 = (_2984 * _2977) + _2295;
        _2785 = (_2984 * _2979) + _2297;
        _2787 = ((_2969 * _701) * _2984) + _2631;
        _2789 = ((_2971 * _703) * _2984) + _2633;
        _2791 = ((_2973 * _704) * _2984) + _2635;
    }
    else
    {
        _2781 = _2293;
        _2783 = _2295;
        _2785 = _2297;
        _2787 = _2631;
        _2789 = _2633;
        _2791 = _2635;
    }
    float _4760 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _4771 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _4782 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _2808 = ((isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0))) * (_2781 + ((isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0))) * _717))) + ((_2787 + ((isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))) * _1557)) * cbPerFrame._m0[3u].x);
    float _2809 = ((isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0))) * (_2783 + ((isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0))) * _717))) + ((_2789 + ((isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))) * _1557)) * cbPerFrame._m0[3u].x);
    float _2810 = ((isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0))) * (_2785 + ((isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0))) * _717))) + ((_2791 + ((isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))) * _1557)) * cbPerFrame._m0[3u].x);
    uint _2811 = _236 + 6u;
    float _2819 = _639 / cbSceneParam._m0[86u].x;
    float _2820 = _640 / cbSceneParam._m0[86u].y;
    vec4 _2834 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2819, _2820, (log2((isnan(cbSceneParam._m0[77u].w) ? _561 : (isnan(_561) ? cbSceneParam._m0[77u].w : min(_561, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2836 = _2834.x;
    float _2837 = _2834.y;
    float _2838 = _2834.z;
    float _2839 = _2834.w;
    float _2911;
    float _2913;
    float _2915;
    float _2917;
    if (_561 > cbSceneParam._m0[78u].w)
    {
        float _2873 = isnan(_561) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _561 : min(cbSceneParam._m0[80u].w, _561));
        float _2874 = _2873 / _561;
        float _2885 = _2874 * _612;
        float _2886 = _613 * _2874;
        float _2887 = (-0.0) - _2886;
        float _2889 = _2874 * _614;
        float _2891 = (cbSceneParam._m0[77u].w * _2887) / _2873;
        float _2892 = _2891 + cbSceneParam._m0[79u].w;
        float _2893 = cbSceneParam._m0[79u].w - _2886;
        float _2899 = sqrt(((_2885 * _2885) + (_2886 * _2886)) + (_2889 * _2889));
        float _2902 = (1.0 - (cbSceneParam._m0[77u].w / _2873)) * _2899;
        float _2907 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2909 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3086;
        if (abs((_2887 - _2891) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3086 = ((((_2892 > 0.0) ? exp2(_2907 * _2892) : (2.0 - exp2(_2909 * _2892))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2902;
        }
        else
        {
            float _3030 = 1.0 / cbSceneParam._m0[80u].x;
            float _3031 = isnan(_2893) ? _2892 : (isnan(_2892) ? _2893 : max(_2892, _2893));
            float _3032 = isnan(_2893) ? _2892 : (isnan(_2892) ? _2893 : min(_2892, _2893));
            float _3041 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : min(_3031, 0.0));
            float _3042 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : min(_3032, 0.0));
            _3086 = ((abs(_2899 / _2887) * cbSceneParam._m0[80u].y) * ((((_3041 - _3042) * 2.0) - ((exp2(_2907 * (isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0)))) - exp2(_2907 * (isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0))))) * _3030)) - ((exp2(_2909 * _3041) - exp2(_2909 * _3042)) * _3030))) + (_2902 * cbSceneParam._m0[80u].z);
        }
        vec4 _3088 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2819, _2820, 1.0), 0.0);
        float _3097 = exp2((_3086 * (-1.44269502162933349609375)) * (1.0 - _3088.w));
        float _3098 = log2(_3097);
        float _3114 = log2(_2839);
        _2911 = (exp2(_3114 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3098 * cbSceneParam._m0[78u].x)) * _3088.x) / cbSceneParam._m0[78u].x)) + _2836;
        _2913 = (exp2(_3114 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3098 * cbSceneParam._m0[78u].y)) * _3088.y) / cbSceneParam._m0[78u].y)) + _2837;
        _2915 = (exp2(_3114 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3098 * cbSceneParam._m0[78u].z)) * _3088.z) / cbSceneParam._m0[78u].z)) + _2838;
        _2917 = _3097 * _2839;
    }
    else
    {
        _2911 = _2836;
        _2913 = _2837;
        _2915 = _2838;
        _2917 = _2839;
    }
    bool _3124;
    vec4 _2927;
    vec4 _2949;
    float _2951;
    float _2955;
    float _2956;
    float _2957;
    float _2958;
    bool _2968;
    for (;;)
    {
        _2927 = cbMatDynParam._m0[0u];
        float _2929 = roundEven(_2927.y);
        bool _2930 = _2929 == 3.0;
        float _2931 = log2(_2917);
        float _2938 = exp2(_2931 * cbSceneParam._m0[78u].x) * _2808;
        float _2939 = exp2(_2931 * cbSceneParam._m0[78u].y) * _2809;
        float _2940 = exp2(_2931 * cbSceneParam._m0[78u].z) * _2810;
        float _2947 = _628 + (-0.5);
        _2949 = cbMtdParam._m0[1u];
        _2951 = _2949.y * _2947;
        float _2954 = (_2929 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2955 = _2954 * (_2930 ? _2938 : (_2938 + (cbSceneParam._m0[72u].w * _2911)));
        _2956 = _2954 * (_2930 ? _2939 : (_2939 + (cbSceneParam._m0[72u].w * _2913)));
        _2957 = _2954 * (_2930 ? _2940 : (_2940 + (cbSceneParam._m0[72u].w * _2915)));
        _2958 = _2947 * 0.999000012874603271484375;
        _2968 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2968)
        {
            if ((cbInstanceData._m0[_236 + 7u].x + _2958) < 0.5)
            {
                _3124 = true;
                break;
            }
        }
        uint _3065 = _677 + uint(_2927.w);
        if ((cbInstanceData._m0[_3065].w < 1.0) && ((cbInstanceData._m0[_3065].w + _2958) < 0.5))
        {
            _3124 = true;
            break;
        }
        if ((_2951 + 1.0) < _2949.x)
        {
            _3124 = true;
            break;
        }
        _3124 = false;
        break;
    }
    float _3328;
    if (_3124)
    {
        discard_state = true;
        _3328 = 0.0;
    }
    else
    {
        _3328 = cbInstanceData._m0[_2811].w;
    }
    SV_Target.x = _2955;
    SV_Target.y = _2956;
    SV_Target.z = _2957;
    SV_Target.w = _3328;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2811].w;
    discard_exit();
}


