#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1173;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _218 = _217 * _209;
    float _219 = _217 * _210;
    float _220 = _217 * _211;
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = _224 * NORMAL.x;
    float _226 = _224 * NORMAL.y;
    float _227 = _224 * NORMAL.z;
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _232 = _231 * TANGENT.x;
    float _233 = _231 * TANGENT.y;
    float _234 = _231 * TANGENT.z;
    uint _237 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _237 + 1u;
    uint _246 = _237 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_237].x * cbInstanceData._m0[_237].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _276 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _282 = _276.x * cbMtdParam._m0[9u].x;
    float _283 = _276.y * cbMtdParam._m0[9u].y;
    float _284 = _276.z * cbMtdParam._m0[9u].z;
    vec4 _303 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _256) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _257) + cbTextureTilingScale._m0[14u].w));
    vec4 _323 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _327 = _323.z;
    float _332 = (_323.x * 2.0) + (-1.0);
    float _334 = (_323.y * 2.0) + (-1.0);
    float _335 = dot(vec2(_332, _334), vec2(_332, _334));
    float _3500 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _341 = sqrt(1.0 - (isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0))));
    float _344 = fma(_341, _225, fma(_334, _232, _332 * _218));
    float _347 = fma(_341, _226, fma(_334, _233, _332 * _219));
    float _350 = fma(_341, _227, fma(_334, _234, _332 * _220));
    float _354 = inversesqrt(dot(vec3(_344, _347, _350), vec3(_344, _347, _350)));
    vec4 _390 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _256) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _257) + cbTextureTilingScale._m0[11u].w));
    float _392 = _390.x;
    float _393 = 1.0 - _392;
    float _400 = ((_392 - _393) * cbMtdParam._m0[24u].z) + _393;
    float _402 = (cbMtdParam._m0[19u].x + dot(vec4(_354 * _344, _354 * _347, _354 * _350, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_400 * cbMtdParam._m0[21u].z);
    float _3511 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _403 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
    float _405 = (-0.0) - cbMtdParam._m0[24u].x;
    float _407 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _408 = isnan(1.0) ? _407 : (isnan(_407) ? 1.0 : min(_407, 1.0));
    float _415 = _403 - ((_403 * TEXCOORD_8.x) * _408);
    float _416 = _403 - ((_403 * TEXCOORD_8.y) * _408);
    float _417 = _403 - ((_403 * TEXCOORD_8.z) * _408);
    float _424 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _428 = ((isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : min(_424, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _436 = (_428 - (((_400 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _428))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3542 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _437 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
    float _441 = ((_415 * ((_303.x * cbMtdParam._m0[18u].x) - _282)) * _437) + _282;
    float _442 = ((_416 * ((_303.y * cbMtdParam._m0[18u].y) - _283)) * _437) + _283;
    float _443 = ((_417 * ((_303.z * cbMtdParam._m0[18u].z) - _284)) * _437) + _284;
    vec4 _455 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _256) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _257) + cbTextureTilingScale._m0[19u].w));
    float _457 = _455.x;
    float _458 = 1.0 - _457;
    float _487 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_457 - _458) * cbMtdParam._m0[24u].w) + _458) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3553 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _488 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
    float _496 = ((((cbMtdParam._m0[10u].x - _441) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _488) + _441;
    float _497 = ((((cbMtdParam._m0[10u].y - _442) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _488) + _442;
    float _498 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _443)) * _488) + _443;
    vec4 _511 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _513 = _511.x;
    float _516 = _513 - ((_513 * _415) * _437);
    float _518 = _516 - (_516 * _488);
    vec4 _532 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _256) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _257) + cbTextureTilingScale._m0[15u].w));
    float _539 = (_532.x * 2.0) + (-1.0);
    float _540 = (_532.y * 2.0) + (-1.0);
    float _541 = dot(vec2(_539, _540), vec2(_539, _540));
    float _3564 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _550 = (((_532.z - _327) * _415) * _437) + _327;
    float _553 = ((cbMtdParam._m0[23u].y - _550) * _488) + _550;
    vec4 _572 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _256) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _257) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _578 = (_572.x * 2.0) + (-1.0);
    float _579 = (_572.y * 2.0) + (-1.0);
    float _580 = dot(vec2(_578, _579), vec2(_578, _579));
    float _3575 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _600 = (((cbMtdParam._m0[21u].x * _332) + ((_539 - _332) * _415)) * _437) + _332;
    float _601 = (((cbMtdParam._m0[21u].x * _334) + ((_540 - _334) * _416)) * _437) + _334;
    float _602 = (((sqrt(1.0 - (isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0)))) - _341) * _417) * _437) + _341;
    float _613 = (((_578 - _600) + (_600 * cbMtdParam._m0[22u].z)) * _488) + _600;
    float _614 = (((_579 - _601) + (_601 * cbMtdParam._m0[22u].z)) * _488) + _601;
    float _615 = ((sqrt(1.0 - (isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0)))) - _602) * _488) + _602;
    float _617 = cbMtdParam._m0[22u].x + _323.w;
    float _620 = fma(_615, _225, fma(_614, _232, _613 * _218));
    float _623 = fma(_615, _226, fma(_614, _233, _613 * _219));
    float _626 = fma(_615, _227, fma(_614, _234, _613 * _220));
    float _630 = inversesqrt(dot(vec3(_620, _623, _626), vec3(_620, _623, _626)));
    float _631 = _630 * _620;
    float _632 = _630 * _623;
    float _633 = _630 * _626;
    float _3586 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _634 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
    float _3597 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _3608 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _3619 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _3630 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _3641 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _639 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
    float _653 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _693 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _703 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _693);
    float _704 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _693);
    float _705 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _693);
    float _709 = inversesqrt(dot(vec3(_703, _704, _705), vec3(_703, _704, _705)));
    float _710 = _703 * _709;
    float _711 = _704 * _709;
    float _712 = _705 * _709;
    float _718 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _719 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _740 = fma(_633, cbSceneParam._m0[5u].z, fma(_632, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _631));
    float _743 = fma(_633, cbSceneParam._m0[6u].z, fma(_632, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _631));
    float _746 = fma(_633, cbSceneParam._m0[7u].z, fma(_632, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _631));
    uint _760 = (_237 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _766 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0)))) * cbInstanceData._m0[_760].x;
    float _767 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0)))) * cbInstanceData._m0[_760].y;
    float _768 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0)))) * cbInstanceData._m0[_760].z;
    float _3652 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _769 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
    float _3663 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _770 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
    float _3674 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _771 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
    float _772 = 1.0 - _639;
    float _773 = _769 * _772;
    float _774 = _770 * _772;
    float _775 = _771 * _772;
    float _780 = (_769 + (-0.039999999105930328369140625)) * _639;
    float _781 = (_770 + (-0.039999999105930328369140625)) * _639;
    float _782 = (_771 + (-0.039999999105930328369140625)) * _639;
    float _783 = _780 + 0.039999999105930328369140625;
    float _785 = _781 + 0.039999999105930328369140625;
    float _786 = _782 + 0.039999999105930328369140625;
    vec4 _795 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _718, cbSceneParam._m0[86u].y * _719));
    float _799 = ((isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0))) * TEXCOORD_5.w) * _795.x;
    float _800 = dot(vec3(_631, _632, _633), vec3(_710, _711, _712));
    float _803 = _800 * 2.0;
    float _807 = (_803 * _631) - _710;
    float _808 = (_803 * _632) - _711;
    float _809 = (_803 * _633) - _712;
    float _813 = abs(dot(vec3(_710, _711, _712), vec3(_631, _632, _633)));
    float _3685 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _815 = sqrt(_634);
    float _828 = exp2((_815 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_815 * 3.0));
    float _834 = (1.0 - _828) * ((_815 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _835 = _828 * _815;
    float _863 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _867 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _871 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1172;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _897 = fma(_871, cbModelParam._m0[26u].z, fma(_867, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _863));
        float _901 = fma(_871, cbModelParam._m0[27u].z, fma(_867, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _863));
        float _905 = fma(_871, cbModelParam._m0[28u].z, fma(_867, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _863));
        float _930 = _863 + _631;
        float _931 = _867 + _632;
        float _932 = _871 + _633;
        float _942 = fma(_932, cbModelParam._m0[26u].z, fma(_931, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _930)) - _897;
        float _943 = fma(_932, cbModelParam._m0[27u].z, fma(_931, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _930)) - _901;
        float _944 = fma(_932, cbModelParam._m0[28u].z, fma(_931, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _930)) - _905;
        float _948 = inversesqrt(dot(vec3(_942, _943, _944), vec3(_942, _943, _944)));
        float _961 = ((_948 * _942) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_897 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _962 = ((_948 * _943) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_901 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _963 = ((_948 * _944) / cbModelParam._m0[34u].z) + ((((((_905 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        float _1000 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1001 = _1000 * (_966.x + (-0.5));
        float _1002 = _1000 * (_966.y + (-0.5));
        float _1003 = _1000 * (_966.z + (-0.5));
        float _1010 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_973.x + (-0.5));
        float _1012 = _1010 * (_973.y + (-0.5));
        float _1013 = _1010 * (_973.z + (-0.5));
        float _1020 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_980.x + (-0.5));
        float _1022 = _1020 * (_980.y + (-0.5));
        float _1023 = _1020 * (_980.z + (-0.5));
        float _1030 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_987.x + (-0.5));
        float _1032 = _1030 * (_987.y + (-0.5));
        float _1033 = _1030 * (_987.z + (-0.5));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1036 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1037 = _1001 * 0.5;
        float _1038 = _1011 * 0.5;
        float _1039 = _1021 * 0.5;
        float _1040 = dot(vec3(_1037, _1038, _1039), vec3(_1037, _1038, _1039));
        float _1045 = (_1040 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1040);
        float _1054 = (dot(vec3(_631, _632, _633), vec3(_1045 * _1037, _1045 * _1038, _1045 * _1039)) + 1.0) * 0.5;
        float _3711 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1064 = sqrt(((_1038 * _1038) + (_1037 * _1037)) + (_1039 * _1039)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3722 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _1066 = _1065 * 2.0;
        float _1070 = (1.0 - _1065) / (_1065 + 1.0);
        float _3733 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _1080 = ((((1.0 - _1071) * (_1066 + 2.0)) * exp2(log2(isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))) * (_1066 + 1.0))) + _1071) * _1034;
        float _1081 = _1002 * 0.5;
        float _1082 = _1012 * 0.5;
        float _1083 = _1022 * 0.5;
        float _1084 = dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083));
        float _1089 = (_1084 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1084);
        float _1097 = (dot(vec3(_631, _632, _633), vec3(_1089 * _1081, _1089 * _1082, _1089 * _1083)) + 1.0) * 0.5;
        float _3744 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1106 = sqrt(((_1082 * _1082) + (_1081 * _1081)) + (_1083 * _1083)) / (_1035 + 9.9999997473787516355514526367188e-06);
        float _3755 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1108 = _1107 * 2.0;
        float _1112 = (1.0 - _1107) / (_1107 + 1.0);
        float _3766 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1122 = ((((1.0 - _1113) * (_1108 + 2.0)) * exp2(log2(isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))) * (_1108 + 1.0))) + _1113) * _1035;
        float _1123 = _1003 * 0.5;
        float _1124 = _1013 * 0.5;
        float _1125 = _1023 * 0.5;
        float _1126 = dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125));
        float _1131 = (_1126 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1126);
        float _1139 = (dot(vec3(_631, _632, _633), vec3(_1131 * _1123, _1131 * _1124, _1131 * _1125)) + 1.0) * 0.5;
        float _3777 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1148 = sqrt(((_1124 * _1124) + (_1123 * _1123)) + (_1125 * _1125)) / (_1036 + 9.9999997473787516355514526367188e-06);
        float _3788 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1150 = _1149 * 2.0;
        float _1154 = (1.0 - _1149) / (_1149 + 1.0);
        float _3799 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1164 = ((((1.0 - _1155) * (_1150 + 2.0)) * exp2(log2(isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))) * (_1150 + 1.0))) + _1155) * _1036;
        _1172 = _1003;
        _1174 = _1002;
        _1175 = _1001;
        _1176 = _1013;
        _1177 = _1012;
        _1178 = _1011;
        _1179 = _1023;
        _1180 = _1022;
        _1181 = _1021;
        _1182 = _1036;
        _1183 = _1035;
        _1184 = _1034;
        _1185 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0)));
        _1186 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0)));
        _1187 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)));
    }
    else
    {
        _1172 = _1173;
        _1174 = _1173;
        _1175 = _1173;
        _1176 = _1173;
        _1177 = _1173;
        _1178 = _1173;
        _1179 = _1173;
        _1180 = _1173;
        _1181 = _1173;
        _1182 = _1173;
        _1183 = _1173;
        _1184 = _1173;
        _1185 = 0.0;
        _1186 = 0.0;
        _1187 = 0.0;
    }
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1212 = fma(_871, cbModelParam._m0[30u].z, fma(_867, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _863));
        float _1216 = fma(_871, cbModelParam._m0[31u].z, fma(_867, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _863));
        float _1220 = fma(_871, cbModelParam._m0[32u].z, fma(_867, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _863));
        float _1243 = _863 + _631;
        float _1244 = _867 + _632;
        float _1245 = _871 + _633;
        float _1255 = fma(_1245, cbModelParam._m0[30u].z, fma(_1244, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1243)) - _1212;
        float _1256 = fma(_1245, cbModelParam._m0[31u].z, fma(_1244, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1243)) - _1216;
        float _1257 = fma(_1245, cbModelParam._m0[32u].z, fma(_1244, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1243)) - _1220;
        float _1261 = inversesqrt(dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257)));
        float _1274 = ((_1261 * _1255) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1212 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1275 = ((_1261 * _1256) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1216 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1276 = ((_1261 * _1257) / cbModelParam._m0[35u].z) + ((((((_1220 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        vec4 _1299 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        float _1311 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1278.x + (-0.5));
        float _1313 = _1311 * (_1278.y + (-0.5));
        float _1314 = _1311 * (_1278.z + (-0.5));
        float _1321 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1322 = _1321 * (_1285.x + (-0.5));
        float _1323 = _1321 * (_1285.y + (-0.5));
        float _1324 = _1321 * (_1285.z + (-0.5));
        float _1331 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1292.x + (-0.5));
        float _1333 = _1331 * (_1292.y + (-0.5));
        float _1334 = _1331 * (_1292.z + (-0.5));
        float _1341 = exp2((_1299.w + (-0.5)) * 20.0) * 2.0;
        float _1342 = _1341 * (_1299.x + (-0.5));
        float _1343 = _1341 * (_1299.y + (-0.5));
        float _1344 = _1341 * (_1299.z + (-0.5));
        float _1345 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1346 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1347 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1348 = _1312 * 0.5;
        float _1349 = _1322 * 0.5;
        float _1350 = _1332 * 0.5;
        float _1351 = dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350));
        float _1356 = (_1351 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1351);
        float _1364 = (dot(vec3(_631, _632, _633), vec3(_1356 * _1348, _1356 * _1349, _1356 * _1350)) + 1.0) * 0.5;
        float _3840 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1373 = sqrt(((_1349 * _1349) + (_1348 * _1348)) + (_1350 * _1350)) / (_1345 + 9.9999997473787516355514526367188e-06);
        float _3851 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1375 = _1374 * 2.0;
        float _1379 = (1.0 - _1374) / (_1374 + 1.0);
        float _3862 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1389 = ((((1.0 - _1380) * (_1375 + 2.0)) * exp2(log2(isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) * (_1375 + 1.0))) + _1380) * _1345;
        float _1390 = _1313 * 0.5;
        float _1391 = _1323 * 0.5;
        float _1392 = _1333 * 0.5;
        float _1393 = dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392));
        float _1398 = (_1393 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1393);
        float _1406 = (dot(vec3(_631, _632, _633), vec3(_1398 * _1390, _1398 * _1391, _1398 * _1392)) + 1.0) * 0.5;
        float _3873 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1415 = sqrt(((_1391 * _1391) + (_1390 * _1390)) + (_1392 * _1392)) / (_1346 + 9.9999997473787516355514526367188e-06);
        float _3884 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1417 = _1416 * 2.0;
        float _1421 = (1.0 - _1416) / (_1416 + 1.0);
        float _3895 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1431 = ((((1.0 - _1422) * (_1417 + 2.0)) * exp2(log2(isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * (_1417 + 1.0))) + _1422) * _1346;
        float _1432 = _1314 * 0.5;
        float _1433 = _1324 * 0.5;
        float _1434 = _1334 * 0.5;
        float _1435 = dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434));
        float _1440 = (_1435 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1435);
        float _1448 = (dot(vec3(_631, _632, _633), vec3(_1440 * _1432, _1440 * _1433, _1440 * _1434)) + 1.0) * 0.5;
        float _3906 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1457 = sqrt(((_1433 * _1433) + (_1432 * _1432)) + (_1434 * _1434)) / (_1347 + 9.9999997473787516355514526367188e-06);
        float _3917 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1459 = _1458 * 2.0;
        float _1463 = (1.0 - _1458) / (_1458 + 1.0);
        float _3928 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1473 = ((((1.0 - _1464) * (_1459 + 2.0)) * exp2(log2(isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) * (_1459 + 1.0))) + _1464) * _1347;
        _1481 = _1314;
        _1482 = _1313;
        _1483 = _1312;
        _1484 = _1324;
        _1485 = _1323;
        _1486 = _1322;
        _1487 = _1334;
        _1488 = _1333;
        _1489 = _1332;
        _1490 = _1347;
        _1491 = _1346;
        _1492 = _1345;
        _1493 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)));
        _1494 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)));
        _1495 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)));
    }
    else
    {
        _1481 = _1173;
        _1482 = _1173;
        _1483 = _1173;
        _1484 = _1173;
        _1485 = _1173;
        _1486 = _1173;
        _1487 = _1173;
        _1488 = _1173;
        _1489 = _1173;
        _1490 = _1173;
        _1491 = _1173;
        _1492 = _1173;
        _1493 = 0.0;
        _1494 = 0.0;
        _1495 = 0.0;
    }
    float _1505 = (cbModelParam._m0[1u].x * (_1493 - _1185)) + _1185;
    float _1506 = (cbModelParam._m0[1u].x * (_1494 - _1186)) + _1186;
    float _1507 = (cbModelParam._m0[1u].x * (_1495 - _1187)) + _1187;
    float _1528 = fma(_1507, cbSceneParam._m0[89u].z, fma(_1506, cbSceneParam._m0[89u].y, _1505 * cbSceneParam._m0[89u].x));
    float _1531 = fma(_1507, cbSceneParam._m0[90u].z, fma(_1506, cbSceneParam._m0[90u].y, _1505 * cbSceneParam._m0[90u].x));
    float _1534 = fma(_1507, cbSceneParam._m0[91u].z, fma(_1506, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1505));
    float _1549 = _807 * 0.5;
    float _1550 = _808 * 0.5;
    float _1551 = _809 * 0.5;
    float _1552 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1483, _1486, _1489, _1492));
    float _1555 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1482, _1485, _1488, _1491));
    float _1558 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1481, _1484, _1487, _1490));
    float _1592;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1565 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1172, _1176, _1179, _1182));
        float _1569 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1174, _1177, _1180, _1183));
        float _1573 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1175, _1178, _1181, _1184));
        float _1580 = dot(vec4(cbModelParam._m0[39u]), vec4(_1549, _1550, _1551, 1.0));
        _1592 = dot(vec3(isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)), isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)), isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1580) ? 0.0 : (isnan(0.0) ? _1580 : max(0.0, _1580))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1592 = 1.0;
    }
    float _1603;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1594 = dot(vec4(cbModelParam._m0[40u]), vec4(_1549, _1550, _1551, 1.0));
        _1603 = dot(vec3(isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)), isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)), isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1594) ? 0.0 : (isnan(0.0) ? _1594 : max(0.0, _1594))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1603 = 1.0;
    }
    float _1607 = (_1603 * cbModelParam._m0[1u].x) + (_1592 * (1.0 - cbModelParam._m0[1u].x));
    float _1617 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _634);
    float _1618 = isnan(_1617) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1617 : min(cbModelParam._m0[25u].z, _1617));
    float _1698;
    float _1700;
    float _1702;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1665 = fma(_871, cbModelParam._m0[13u].z, fma(_867, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _863)) + cbModelParam._m0[13u].w;
        float _1669 = fma(_871, cbModelParam._m0[14u].z, fma(_867, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _863)) + cbModelParam._m0[14u].w;
        float _1673 = fma(_871, cbModelParam._m0[15u].z, fma(_867, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _863)) + cbModelParam._m0[15u].w;
        float _1676 = fma(_809, cbModelParam._m0[13u].z, fma(_808, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _807));
        float _1679 = fma(_809, cbModelParam._m0[14u].z, fma(_808, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _807));
        float _1682 = fma(_809, cbModelParam._m0[15u].z, fma(_808, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _807));
        float _1710;
        if (_1676 > 0.0)
        {
            _1710 = abs((1.0 - _1665) / _1676);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1665 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1710 = frontier_phi_14_12_ladder;
        }
        float _1913;
        if (_1679 > 0.0)
        {
            _1913 = abs((1.0 - _1669) / _1679);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1669 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1913 = frontier_phi_23_19_ladder;
        }
        float _2167;
        if (_1682 > 0.0)
        {
            _2167 = abs((1.0 - _1673) / _1682);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1673 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2167 = frontier_phi_35_30_ladder;
        }
        float _2169 = isnan(_1913) ? _1710 : (isnan(_1710) ? _1913 : min(_1710, _1913));
        float _2170 = isnan(_2167) ? _2169 : (isnan(_2169) ? _2167 : min(_2169, _2167));
        float _2174 = (_2170 * _1676) + _1665;
        float _2175 = (_2170 * _1679) + _1669;
        float _2176 = (_2170 * _1682) + _1673;
        float _2177 = _2170 * 9.9999997473787516355514526367188e-05;
        float _2179 = (-1.0) - _2177;
        float _2181 = _2177 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2176 > _2181) || ((_2176 < _2179) || ((_2175 > _2181) || ((_2175 < _2179) || ((_2174 < _2179) || (_2174 > _2181))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2304 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2176, cbModelParam._m0[9u].z, fma(_2175, cbModelParam._m0[9u].y, _2174 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2176, cbModelParam._m0[10u].z, fma(_2175, cbModelParam._m0[10u].y, _2174 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2176, cbModelParam._m0[11u].z, fma(_2175, cbModelParam._m0[11u].y, _2174 * cbModelParam._m0[11u].x))), _1618);
            frontier_phi_13_35_ladder = _2304.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2304.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2304.x * cbModelParam._m0[1u].y;
        }
        _1698 = frontier_phi_13_35_ladder_2;
        _1700 = frontier_phi_13_35_ladder_1;
        _1702 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1686 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_807, _808, _809), _1618);
        _1698 = _1686.x * cbModelParam._m0[1u].y;
        _1700 = _1686.y * cbModelParam._m0[1u].y;
        _1702 = _1686.z * cbModelParam._m0[1u].y;
    }
    float _1706 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _634);
    float _1707 = isnan(_1706) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1706 : min(cbModelParam._m0[25u].w, _1706));
    float _1796;
    float _1798;
    float _1800;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1760 = fma(_871, cbModelParam._m0[21u].z, fma(_867, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _863)) + cbModelParam._m0[21u].w;
        float _1764 = fma(_871, cbModelParam._m0[22u].z, fma(_867, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _863)) + cbModelParam._m0[22u].w;
        float _1768 = fma(_871, cbModelParam._m0[23u].z, fma(_867, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _863)) + cbModelParam._m0[23u].w;
        float _1771 = fma(_809, cbModelParam._m0[21u].z, fma(_808, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _807));
        float _1774 = fma(_809, cbModelParam._m0[22u].z, fma(_808, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _807));
        float _1777 = fma(_809, cbModelParam._m0[23u].z, fma(_808, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _807));
        float _1918;
        if (_1771 > 0.0)
        {
            _1918 = abs((1.0 - _1760) / _1771);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1771 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1760 + 1.0) / _1771);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1918 = frontier_phi_25_21_ladder;
        }
        float _2194;
        if (_1774 > 0.0)
        {
            _2194 = abs((1.0 - _1764) / _1774);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1774 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1764 + 1.0) / _1774);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2194 = frontier_phi_37_32_ladder;
        }
        float _2407;
        if (_1777 > 0.0)
        {
            _2407 = abs((1.0 - _1768) / _1777);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1777 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1768 + 1.0) / _1777);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2407 = frontier_phi_46_43_ladder;
        }
        float _2409 = isnan(_2194) ? _1918 : (isnan(_1918) ? _2194 : min(_1918, _2194));
        float _2410 = isnan(_2407) ? _2409 : (isnan(_2409) ? _2407 : min(_2409, _2407));
        float _2414 = (_2410 * _1771) + _1760;
        float _2415 = (_2410 * _1774) + _1764;
        float _2416 = (_2410 * _1777) + _1768;
        float _2417 = _2410 * 9.9999997473787516355514526367188e-05;
        float _2418 = (-1.0) - _2417;
        float _2420 = _2417 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2416 > _2420) || ((_2416 < _2418) || ((_2415 > _2420) || ((_2415 < _2418) || ((_2414 < _2418) || (_2414 > _2420))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2615 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2416, cbModelParam._m0[17u].z, fma(_2415, cbModelParam._m0[17u].y, _2414 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2416, cbModelParam._m0[18u].z, fma(_2415, cbModelParam._m0[18u].y, _2414 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2416, cbModelParam._m0[19u].z, fma(_2415, cbModelParam._m0[19u].y, _2414 * cbModelParam._m0[19u].x))), _1707);
            frontier_phi_22_46_ladder = _2615.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2615.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2615.x * cbModelParam._m0[1u].z;
        }
        _1796 = frontier_phi_22_46_ladder_2;
        _1798 = frontier_phi_22_46_ladder_1;
        _1800 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1780 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_807, _808, _809), _1707);
        _1796 = _1780.x * cbModelParam._m0[1u].z;
        _1798 = _1780.y * cbModelParam._m0[1u].z;
        _1800 = _1780.z * cbModelParam._m0[1u].z;
    }
    float _1813 = (((_834 * _783) + _835) * _799) * ((cbModelParam._m0[1u].w * (_1796 - _1698)) + _1698);
    float _1815 = (((_834 * _785) + _835) * _799) * ((cbModelParam._m0[1u].w * (_1798 - _1700)) + _1700);
    float _1817 = (((_834 * _786) + _835) * _799) * ((cbModelParam._m0[1u].w * (_1800 - _1702)) + _1702);
    float _1820 = fma(_1817, cbSceneParam._m0[89u].z, fma(_1815, cbSceneParam._m0[89u].y, _1813 * cbSceneParam._m0[89u].x));
    float _1823 = fma(_1817, cbSceneParam._m0[90u].z, fma(_1815, cbSceneParam._m0[90u].y, _1813 * cbSceneParam._m0[90u].x));
    float _1826 = fma(_1817, cbSceneParam._m0[91u].z, fma(_1815, cbSceneParam._m0[91u].y, _1813 * cbSceneParam._m0[91u].x));
    uvec4 _1836 = floatBitsToUint(cbInstanceData._m0[_237 + 5u]);
    uint _1838 = _1836.x * 14u;
    uint _1839 = _1838 + 13u;
    float _1846 = _799 + (-1.0);
    float _1851 = (cbLight._m0[_1839].x * _1846) + 1.0;
    float _1852 = (cbLight._m0[_1839].y * _1846) + 1.0;
    float _1853 = (cbLight._m0[_1839].z * _1846) + 1.0;
    float _1854 = (cbLight._m0[_1839].w * _1846) + 1.0;
    uint _1855 = _1838 + 5u;
    float _1861 = isnan(1.0) ? _1852 : (isnan(_1852) ? 1.0 : min(_1852, 1.0));
    uint _1865 = _1838 + 4u;
    float _1872 = isnan(1.0) ? _1851 : (isnan(_1851) ? 1.0 : min(_1851, 1.0));
    uint _1876 = _1838 | 1u;
    float _1887 = dot(vec3(cbLight._m0[_1838].xyz), vec3(_631, _632, _633));
    float _1890 = dot(vec3(cbLight._m0[_1876].xyz), vec3(_631, _632, _633));
    float _4064 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _4075 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _1895 = (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * 0.3183098733425140380859375;
    float _1897 = (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * 0.3183098733425140380859375;
    float _1904 = ((cbLight._m0[_1855].x * _1861) * _1897) + ((cbLight._m0[_1865].x * _1872) * _1895);
    float _1905 = ((_1861 * cbLight._m0[_1855].y) * _1897) + ((_1872 * cbLight._m0[_1865].y) * _1895);
    float _1906 = ((_1861 * cbLight._m0[_1855].z) * _1897) + ((_1872 * cbLight._m0[_1865].z) * _1895);
    uvec4 _1910 = floatBitsToUint(cbLight._m0[_1838 + 12u]);
    bool _1912 = _1910.x == 0u;
    float _1923;
    float _1925;
    float _1927;
    if (_1912)
    {
        _1923 = _1904;
        _1925 = _1905;
        _1927 = _1906;
    }
    else
    {
        uint _1931 = _1838 + 6u;
        float _1947 = (dot(vec3(cbLight._m0[_1838 + 2u].xyz), vec3(_631, _632, _633)) * 0.5) + 0.5;
        float _1948 = _1947 * _1947;
        float _4086 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
        float _1949 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1950 = isnan(1.0) ? _1853 : (isnan(_1853) ? 1.0 : min(_1853, 1.0));
        _1923 = (((cbLight._m0[_1931].x * 0.3183098733425140380859375) * _1949) * _1950) + _1904;
        _1925 = (((cbLight._m0[_1931].y * 0.3183098733425140380859375) * _1949) * _1950) + _1905;
        _1927 = (((cbLight._m0[_1931].z * 0.3183098733425140380859375) * _1949) * _1950) + _1906;
    }
    bool _1930 = _1910.y == 0u;
    float _1968;
    float _1970;
    float _1972;
    if (_1930)
    {
        _1968 = _1923;
        _1970 = _1925;
        _1972 = _1927;
    }
    else
    {
        uint _2138 = _1838 + 7u;
        float _2154 = (dot(vec3(cbLight._m0[_1838 + 3u].xyz), vec3(_631, _632, _633)) * 0.5) + 0.5;
        float _2155 = _2154 * _2154;
        float _4102 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2156 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _2157 = isnan(1.0) ? _1854 : (isnan(_1854) ? 1.0 : min(_1854, 1.0));
        _1968 = (((cbLight._m0[_2138].x * 0.3183098733425140380859375) * _2156) * _2157) + _1923;
        _1970 = (((cbLight._m0[_2138].y * 0.3183098733425140380859375) * _2156) * _2157) + _1925;
        _1972 = (((cbLight._m0[_2138].z * 0.3183098733425140380859375) * _2156) * _2157) + _1927;
    }
    uint _1975 = _1838 + 8u;
    float _1988 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1838].w)) * _634) * 0.949999988079071044921875);
    float _1989 = _1988 * _1988;
    float _1990 = cbLight._m0[_1838].x + _710;
    float _1991 = cbLight._m0[_1838].y + _711;
    float _1992 = cbLight._m0[_1838].z + _712;
    float _1996 = inversesqrt(dot(vec3(_1990, _1991, _1992), vec3(_1990, _1991, _1992)));
    float _1997 = _1996 * _1990;
    float _1998 = _1996 * _1991;
    float _1999 = _1996 * _1992;
    float _2000 = dot(vec3(_631, _632, _633), vec3(cbLight._m0[_1838].xyz));
    float _4118 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2003 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _4129 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _2004 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _2005 = dot(vec3(_631, _632, _633), vec3(_1997, _1998, _1999));
    float _4140 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _2008 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _2009 = dot(vec3(cbLight._m0[_1838].xyz), vec3(_1997, _1998, _1999));
    float _4151 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
    float _2013 = _1989 * _1989;
    float _2017 = ((_2008 * _2008) * (_2013 + (-1.0))) + 1.0;
    float _2025 = exp2(log2(1.0 - (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0)))) * 5.0);
    float _2026 = 0.959999978542327880859375 - _780;
    float _2028 = 0.959999978542327880859375 - _781;
    float _2029 = 0.959999978542327880859375 - _782;
    float _2036 = 1.0 - _1989;
    float _2047 = (0.5 / (((_2004 * ((_2003 * _2036) + _1989)) + 9.9999999392252902907785028219223e-09) + (((_2004 * _2036) + _1989) * _2003))) * _2003;
    float _4162 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2049 = (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_2013 / ((_2017 * _2017) * 3.141590118408203125));
    uint _2060 = _1838 + 9u;
    float _2071 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1876].w)) * _634) * 0.949999988079071044921875);
    float _2072 = _2071 * _2071;
    float _2073 = cbLight._m0[_1876].x + _710;
    float _2074 = cbLight._m0[_1876].y + _711;
    float _2075 = cbLight._m0[_1876].z + _712;
    float _2079 = inversesqrt(dot(vec3(_2073, _2074, _2075), vec3(_2073, _2074, _2075)));
    float _2080 = _2079 * _2073;
    float _2081 = _2079 * _2074;
    float _2082 = _2079 * _2075;
    float _2083 = dot(vec3(_631, _632, _633), vec3(cbLight._m0[_1876].xyz));
    float _4173 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
    float _2086 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _2087 = dot(vec3(_631, _632, _633), vec3(_2080, _2081, _2082));
    float _4184 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2090 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    float _2091 = dot(vec3(cbLight._m0[_1876].xyz), vec3(_2080, _2081, _2082));
    float _4195 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2095 = _2072 * _2072;
    float _2099 = ((_2090 * _2090) * (_2095 + (-1.0))) + 1.0;
    float _2106 = exp2(log2(1.0 - (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0)))) * 5.0);
    float _2113 = 1.0 - _2072;
    float _2123 = (0.5 / (((_2004 * ((_2086 * _2113) + _2072)) + 9.9999999392252902907785028219223e-09) + (((_2004 * _2113) + _2072) * _2086))) * _2086;
    float _4206 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2125 = (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_2095 / ((_2099 * _2099) * 3.141590118408203125));
    float _2135 = (((((_2106 * _2026) + _783) * cbLight._m0[_2060].x) * _2125) * _1861) + (((((_2025 * _2026) + _783) * cbLight._m0[_1975].x) * _2049) * _1872);
    float _2136 = (((((_2106 * _2028) + _785) * cbLight._m0[_2060].y) * _2125) * _1861) + (((((_2025 * _2028) + _785) * cbLight._m0[_1975].y) * _2049) * _1872);
    float _2137 = (((((_2106 * _2029) + _786) * cbLight._m0[_2060].z) * _2125) * _1861) + (((((_2025 * _2029) + _786) * cbLight._m0[_1975].z) * _2049) * _1872);
    float _2199;
    float _2201;
    float _2203;
    if (_1912)
    {
        _2199 = _2135;
        _2201 = _2136;
        _2203 = _2137;
    }
    else
    {
        uint _2205 = _1838 + 2u;
        uint _2209 = _1838 + 10u;
        float _2223 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2205].w)) * _634) * 0.949999988079071044921875);
        float _2224 = _2223 * _2223;
        float _2225 = cbLight._m0[_2205].x + _710;
        float _2226 = cbLight._m0[_2205].y + _711;
        float _2227 = cbLight._m0[_2205].z + _712;
        float _2231 = inversesqrt(dot(vec3(_2225, _2226, _2227), vec3(_2225, _2226, _2227)));
        float _2232 = _2231 * _2225;
        float _2233 = _2231 * _2226;
        float _2234 = _2231 * _2227;
        float _2235 = dot(vec3(_631, _632, _633), vec3(cbLight._m0[_2205].xyz));
        float _4217 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2238 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _2239 = dot(vec3(_631, _632, _633), vec3(_2232, _2233, _2234));
        float _4228 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2242 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _2243 = dot(vec3(cbLight._m0[_2205].xyz), vec3(_2232, _2233, _2234));
        float _4239 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        float _2247 = _2224 * _2224;
        float _2251 = ((_2242 * _2242) * (_2247 + (-1.0))) + 1.0;
        float _2258 = exp2(log2(1.0 - (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0)))) * 5.0);
        float _2265 = 1.0 - _2224;
        float _2275 = (0.5 / (((_2004 * ((_2238 * _2265) + _2224)) + 9.9999999392252902907785028219223e-09) + (((_2004 * _2265) + _2224) * _2238))) * _2238;
        float _4250 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2277 = (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_2247 / ((_2251 * _2251) * 3.141590118408203125));
        float _2278 = isnan(1.0) ? _1853 : (isnan(_1853) ? 1.0 : min(_1853, 1.0));
        _2199 = (((((_2258 * _2026) + _783) * cbLight._m0[_2209].x) * _2277) * _2278) + _2135;
        _2201 = (((((_2258 * _2028) + _785) * cbLight._m0[_2209].y) * _2277) * _2278) + _2136;
        _2203 = (((((_2258 * _2029) + _786) * cbLight._m0[_2209].z) * _2277) * _2278) + _2137;
    }
    float _2313;
    float _2315;
    float _2317;
    if (_1930)
    {
        _2313 = _2199;
        _2315 = _2201;
        _2317 = _2203;
    }
    else
    {
        uint _2324 = _1838 + 3u;
        uint _2328 = _1838 + 11u;
        float _2342 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2324].w)) * _634) * 0.949999988079071044921875);
        float _2343 = _2342 * _2342;
        float _2344 = cbLight._m0[_2324].x + _710;
        float _2345 = cbLight._m0[_2324].y + _711;
        float _2346 = cbLight._m0[_2324].z + _712;
        float _2350 = inversesqrt(dot(vec3(_2344, _2345, _2346), vec3(_2344, _2345, _2346)));
        float _2351 = _2350 * _2344;
        float _2352 = _2350 * _2345;
        float _2353 = _2350 * _2346;
        float _2354 = dot(vec3(_631, _632, _633), vec3(cbLight._m0[_2324].xyz));
        float _4266 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        float _2357 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _2358 = dot(vec3(_631, _632, _633), vec3(_2351, _2352, _2353));
        float _4277 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        float _2361 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _2362 = dot(vec3(cbLight._m0[_2324].xyz), vec3(_2351, _2352, _2353));
        float _4288 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        float _2366 = _2343 * _2343;
        float _2370 = ((_2361 * _2361) * (_2366 + (-1.0))) + 1.0;
        float _2377 = exp2(log2(1.0 - (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0)))) * 5.0);
        float _2384 = 1.0 - _2343;
        float _2394 = (0.5 / (((_2004 * ((_2357 * _2384) + _2343)) + 9.9999999392252902907785028219223e-09) + (((_2004 * _2384) + _2343) * _2357))) * _2357;
        float _4299 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2396 = (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_2366 / ((_2370 * _2370) * 3.141590118408203125));
        float _2397 = isnan(1.0) ? _1854 : (isnan(_1854) ? 1.0 : min(_1854, 1.0));
        _2313 = (((((_2377 * _2026) + _783) * cbLight._m0[_2328].x) * _2396) * _2397) + _2199;
        _2315 = (((((_2377 * _2028) + _785) * cbLight._m0[_2328].y) * _2396) * _2397) + _2201;
        _2317 = (((((_2377 * _2029) + _786) * cbLight._m0[_2328].z) * _2396) * _2397) + _2203;
    }
    float _2532;
    float _2534;
    float _2536;
    float _2538;
    float _2540;
    float _2542;
    if (_1836.y == 0u)
    {
        float _2472 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2473 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2472;
        float _2474 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2472;
        float _2475 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2472;
        uvec4 _2487 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2488 = _2487.x;
        uint _2499 = uint((float(_2487.y) * floor(float(uint(cbSceneParam._m0[85u].y * _719) / _2488))) + floor(float(uint(cbSceneParam._m0[85u].x * _718) / _2488)));
        float _2509 = (log2(_2475 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2510 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        uint _2513 = uint(isnan(14.0) ? _2510 : (isnan(_2510) ? 14.0 : min(_2510, 14.0)));
        uvec4 _2518 = texelFetch(g_lightClusterGridBuffer, int(((_2513 << 2u) + (_2499 << 6u)) >> 2u));
        uint _2519 = _2518.x;
        uint _2520 = _2487.z;
        float _2620;
        float _2622;
        float _2624;
        float _2626;
        float _2628;
        float _2630;
        if (((((1u << ((_2520 >> 4u) & 15u)) + 4294967295u) & _2519) == 0u) || ((_2520 & 240u) == 0u))
        {
            _2620 = 0.0;
            _2622 = 0.0;
            _2624 = 0.0;
            _2626 = 0.0;
            _2628 = 0.0;
            _2630 = 0.0;
        }
        else
        {
            float _2621;
            float _2623;
            float _2625;
            float _2627;
            float _2629;
            float _2631;
            float _2764 = 0.0;
            float _2765 = 0.0;
            float _2766 = 0.0;
            float _2767 = 0.0;
            float _2768 = 0.0;
            float _2769 = 0.0;
            uint _2770 = 0u;
            uint _2779;
            bool _2780;
            for (;;)
            {
                _2779 = texelFetch(g_lightClassification, int((((_2513 << 5u) + (_2499 << 9u)) + (_2770 << 2u)) >> 2u)).x;
                _2780 = _2779 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2780)
                {
                    frontier_phi_61_pred = _2764;
                    frontier_phi_61_pred_1 = _2769;
                    frontier_phi_61_pred_2 = _2768;
                    frontier_phi_61_pred_3 = _2767;
                    frontier_phi_61_pred_4 = _2766;
                    frontier_phi_61_pred_5 = _2765;
                }
                else
                {
                    float _2888;
                    float _2889;
                    float _2890;
                    float _2891;
                    float _2892;
                    float _2893;
                    uint _2894;
                    _2888 = _2764;
                    _2889 = _2765;
                    _2890 = _2766;
                    _2891 = _2767;
                    _2892 = _2768;
                    _2893 = _2769;
                    _2894 = _2779;
                    float _2820;
                    float _2821;
                    float _2822;
                    float _2823;
                    float _2824;
                    float _2825;
                    for (;;)
                    {
                        uint _2898 = uint(findLSB(_2894)) + (_2770 << 5u);
                        uint _2895 = (_2894 + 4294967295u) & _2894;
                        uint _2900 = _2898 * 48u;
                        vec4 _2914 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2900)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 3u)).x));
                        uint _2920 = (_2898 * 48u) + 4u;
                        vec4 _2933 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2920)).x, texelFetch(g_PointLightRenderingBuffer, int(_2920 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2920 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2920 + 3u)).x));
                        uint _2939 = (_2898 * 48u) + 8u;
                        vec3 _2950 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2939)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 2u)).x));
                        float _2954 = _2914.x - _2473;
                        float _2955 = _2914.y - _2474;
                        float _2956 = _2914.z - _2475;
                        float _2957 = dot(vec3(_2954, _2955, _2956), vec3(_2954, _2955, _2956));
                        float _2960 = inversesqrt(_2957);
                        float _2961 = _2960 * _2954;
                        float _2962 = _2960 * _2955;
                        float _2963 = _2960 * _2956;
                        float _2964 = dot(vec3(_740, _743, _746), vec3(_2961, _2962, _2963));
                        float _2969 = 1.0 - (_2957 * _2914.w);
                        float _4325 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
                        float _2970 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
                        float _2971 = sqrt(_2957) * _2933.w;
                        float _2974 = 1.39999997615814208984375 / (_2971 + 1.39999997615814208984375);
                        float _2975 = _2974 * _2974;
                        float _2978 = ((1.0 - _2975) * _2964) + _2975;
                        float _2981 = _2971 * _2971;
                        float _2985 = ((isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0))) * _2970) / ((_2981 * 0.699999988079071044921875) + 1.0);
                        float _2989 = (-0.0) - _2473;
                        float _2990 = (-0.0) - _2474;
                        float _2991 = (-0.0) - _2475;
                        float _2995 = inversesqrt(dot(vec3(_2989, _2990, _2991), vec3(_2989, _2990, _2991)));
                        float _2996 = _2995 * _2989;
                        float _2997 = _2995 * _2990;
                        float _2998 = _2995 * _2991;
                        float _3006 = exp2(log2(1.0 / ((_2981 * 3.5) + 5.0)) * 0.25);
                        float _3007 = 1.0 - _815;
                        float _3014 = sqrt(1.0 - ((1.0 - (_3007 * _3007)) * (1.0 - (_3006 * _3006))));
                        float _3015 = _3014 * _3014;
                        float _3016 = _3015 * _3015;
                        float _3017 = _2996 + _2961;
                        float _3018 = _2997 + _2962;
                        float _3019 = _2998 + _2963;
                        float _3023 = inversesqrt(dot(vec3(_3017, _3018, _3019), vec3(_3017, _3018, _3019)));
                        float _3027 = dot(vec3(_740, _743, _746), vec3(_2996, _2997, _2998));
                        float _4341 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                        float _3030 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
                        float _3031 = dot(vec3(_740, _743, _746), vec3(_3023 * _3017, _3023 * _3018, _3023 * _3019));
                        float _4352 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                        float _3034 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
                        float _3038 = ((_3034 * _3034) * (_3016 + (-1.0))) + 1.0;
                        float _3039 = _2974 * _3015;
                        float _3040 = _3039 * _3039;
                        float _3043 = ((1.0 - _3040) * _2964) + _3040;
                        float _4363 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                        float _3044 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
                        float _3045 = 1.0 - _3015;
                        float _3055 = (0.5 / (((_3044 * ((_3030 * _3045) + _3015)) + 9.9999999392252902907785028219223e-09) + (((_3044 * _3045) + _3015) * _3030))) * _3044;
                        float _4374 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                        float _3066 = (((_3016 * 3.1415927410125732421875) * (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0)))) / ((_3038 * _3038) * ((_2981 * 2.1991131305694580078125) + 3.141590118408203125))) * _2970;
                        _2823 = (_2985 * _2933.x) + _2891;
                        _2824 = (_2985 * _2933.y) + _2892;
                        _2825 = (_2985 * _2933.z) + _2893;
                        _2820 = (_3066 * _2950.x) + _2888;
                        _2821 = (_3066 * _2950.y) + _2889;
                        _2822 = (_3066 * _2950.z) + _2890;
                        if (_2895 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2888 = _2820;
                            _2889 = _2821;
                            _2890 = _2822;
                            _2891 = _2823;
                            _2892 = _2824;
                            _2893 = _2825;
                            _2894 = _2895;
                        }
                    }
                    frontier_phi_61_pred = _2820;
                    frontier_phi_61_pred_1 = _2825;
                    frontier_phi_61_pred_2 = _2824;
                    frontier_phi_61_pred_3 = _2823;
                    frontier_phi_61_pred_4 = _2822;
                    frontier_phi_61_pred_5 = _2821;
                }
                _2621 = frontier_phi_61_pred;
                _2631 = frontier_phi_61_pred_1;
                _2629 = frontier_phi_61_pred_2;
                _2627 = frontier_phi_61_pred_3;
                _2625 = frontier_phi_61_pred_4;
                _2623 = frontier_phi_61_pred_5;
                uint _2771 = _2770 + 1u;
                if (_2771 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2764 = _2621;
                    _2765 = _2623;
                    _2766 = _2625;
                    _2767 = _2627;
                    _2768 = _2629;
                    _2769 = _2631;
                    _2770 = _2771;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2620 = _2621;
            _2622 = _2623;
            _2624 = _2625;
            _2626 = _2627;
            _2628 = _2629;
            _2630 = _2631;
        }
        uvec4 _2634 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2635 = _2634.z;
        uint _2637 = (_2635 >> 8u) & 15u;
        float _2732;
        float _2734;
        float _2736;
        float _2738;
        float _2740;
        float _2742;
        if (((4294967295u << _2637) & _2519) == 0u)
        {
            _2732 = _2620;
            _2734 = _2622;
            _2736 = _2624;
            _2738 = _2626;
            _2740 = _2628;
            _2742 = _2630;
        }
        else
        {
            float _2757 = inversesqrt(dot(vec3(_2473, _2474, _2475), vec3(_2473, _2474, _2475)));
            float _2758 = _2757 * _2473;
            float _2759 = _2757 * _2474;
            float _2760 = _2757 * _2475;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2637 < ((_2635 >> 12u) & 15u))
            {
                float _2733;
                float _2735;
                float _2737;
                float _2739;
                float _2741;
                float _2743;
                float _2871 = _2620;
                float _2872 = _2622;
                float _2873 = _2624;
                float _2874 = _2626;
                float _2875 = _2628;
                float _2876 = _2630;
                uint _2877 = _2637;
                uint _2886;
                bool _2887;
                for (;;)
                {
                    _2886 = texelFetch(g_lightClassification, int((((_2513 << 5u) + (_2499 << 9u)) + (_2877 << 2u)) >> 2u)).x;
                    _2887 = _2886 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2887)
                    {
                        frontier_phi_67_pred = _2874;
                        frontier_phi_67_pred_1 = _2875;
                        frontier_phi_67_pred_2 = _2876;
                        frontier_phi_67_pred_3 = _2873;
                        frontier_phi_67_pred_4 = _2872;
                        frontier_phi_67_pred_5 = _2871;
                    }
                    else
                    {
                        float _3071;
                        float _3072;
                        float _3073;
                        float _3074;
                        float _3075;
                        float _3076;
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3084 = _2871;
                        float _3085 = _2872;
                        float _3086 = _2873;
                        float _3087 = _2874;
                        float _3088 = _2875;
                        float _3089 = _2876;
                        uint _3090 = _2886;
                        uint _3091;
                        vec4 _3116;
                        float _3117;
                        vec4 _3132;
                        vec3 _3144;
                        vec4 _3160;
                        vec4 _3176;
                        float _3222;
                        bool _3223;
                        for (;;)
                        {
                            uint _3101 = ((_2877 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3090));
                            _3091 = (_3090 + 4294967295u) & _3090;
                            uint _3103 = _3101 * 40u;
                            _3116 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3103)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 3u)).x));
                            _3117 = _3116.w;
                            uint _3119 = (_3101 * 40u) + 4u;
                            _3132 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3119)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 3u)).x));
                            uint _3134 = (_3101 * 40u) + 8u;
                            _3144 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 2u)).x));
                            uint _3147 = (_3101 * 40u) + 16u;
                            _3160 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3147)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 3u)).x));
                            uint _3163 = (_3101 * 40u) + 20u;
                            _3176 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 3u)).x));
                            uint _3178 = (_3101 * 40u) + 24u;
                            vec4 _3191 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3178)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 3u)).x));
                            uint _3197 = (_3101 * 40u) + 28u;
                            vec4 _3210 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3197)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 3u)).x));
                            _3222 = fma(_2475, _3210.z, fma(_2474, _3210.y, _3210.x * _2473)) + _3210.w;
                            _3223 = !((fma(_2475, _3191.z, fma(_2474, _3191.y, _3191.x * _2473)) + _3191.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3223)
                            {
                                float _3250 = _3116.x - _2473;
                                float _3251 = _3116.y - _2474;
                                float _3252 = _3116.z - _2475;
                                float _3253 = dot(vec3(_3250, _3251, _3252), vec3(_3250, _3251, _3252));
                                float _3256 = inversesqrt(_3253);
                                float _3257 = _3256 * _3250;
                                float _3258 = _3256 * _3251;
                                float _3259 = _3256 * _3252;
                                float _3263 = 1.0 - (_3253 / (_3117 * _3117));
                                float _4385 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                                float _3264 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                                float _3268 = sqrt(_3253) * _3132.w;
                                float _3270 = 1.39999997615814208984375 / (_3268 + 1.39999997615814208984375);
                                float _3271 = _3270 * _3270;
                                float _3274 = ((1.0 - _3271) * dot(vec3(_3257, _3258, _3259), vec3(_740, _743, _746))) + _3271;
                                float _3277 = _3268 * _3268;
                                float _3281 = (fma(_2475, _3160.z, fma(_2474, _3160.y, _3160.x * _2473)) + _3160.w) / _3222;
                                float _3282 = (fma(_2475, _3176.z, fma(_2474, _3176.y, _3176.x * _2473)) + _3176.w) / _3222;
                                float _3286 = 1.0 - dot(vec2(_3281, _3282), vec2(_3281, _3282));
                                float _4401 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                                float _3287 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
                                float _3288 = _3287 * (((isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0))) * _3264) / ((_3277 * 0.699999988079071044921875) + 1.0));
                                float _3300 = exp2(log2(1.0 / ((_3277 * 3.5) + 5.0)) * 0.25);
                                float _3301 = 1.0 - _815;
                                float _3308 = sqrt(1.0 - ((1.0 - (_3301 * _3301)) * (1.0 - (_3300 * _3300))));
                                float _3309 = _3308 * _3308;
                                float _3310 = _3309 * _3309;
                                float _3311 = _3257 - _2758;
                                float _3312 = _3258 - _2759;
                                float _3313 = _3259 - _2760;
                                float _3317 = inversesqrt(dot(vec3(_3311, _3312, _3313), vec3(_3311, _3312, _3313)));
                                float _3321 = dot(vec3(_740, _743, _746), vec3((-0.0) - _2758, (-0.0) - _2759, (-0.0) - _2760));
                                float _4412 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                                float _3324 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
                                float _3325 = dot(vec3(_740, _743, _746), vec3(_3317 * _3311, _3317 * _3312, _3317 * _3313));
                                float _4423 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                                float _3328 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                                float _3332 = ((_3328 * _3328) * (_3310 + (-1.0))) + 1.0;
                                float _3333 = _3270 * _3309;
                                float _3334 = _3333 * _3333;
                                float _3340 = ((1.0 - _3334) * dot(vec3(_740, _743, _746), vec3(_3257, _3258, _3259))) + _3334;
                                float _4434 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                                float _3341 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
                                float _3342 = 1.0 - _3309;
                                float _3352 = (0.5 / (((_3341 * ((_3324 * _3342) + _3309)) + 9.9999999392252902907785028219223e-09) + (((_3341 * _3342) + _3309) * _3324))) * _3341;
                                float _4445 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                                float _3362 = (_3287 * _3264) * (((_3310 * 3.1415927410125732421875) * (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0)))) / ((_3332 * _3332) * ((_3277 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3362 * _3144.x;
                                frontier_phi_73_pred_1 = _3362 * _3144.y;
                                frontier_phi_73_pred_2 = _3288 * _3132.z;
                                frontier_phi_73_pred_3 = _3288 * _3132.y;
                                frontier_phi_73_pred_4 = _3288 * _3132.x;
                                frontier_phi_73_pred_5 = _3362 * _3144.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3366 = frontier_phi_73_pred;
                            _3367 = frontier_phi_73_pred_1;
                            _3371 = frontier_phi_73_pred_2;
                            _3370 = frontier_phi_73_pred_3;
                            _3369 = frontier_phi_73_pred_4;
                            _3368 = frontier_phi_73_pred_5;
                            _3074 = _3369 + _3087;
                            _3075 = _3370 + _3088;
                            _3076 = _3371 + _3089;
                            _3071 = _3366 + _3084;
                            _3072 = _3367 + _3085;
                            _3073 = _3368 + _3086;
                            if (_3091 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3084 = _3071;
                                _3085 = _3072;
                                _3086 = _3073;
                                _3087 = _3074;
                                _3088 = _3075;
                                _3089 = _3076;
                                _3090 = _3091;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3074;
                        frontier_phi_67_pred_1 = _3075;
                        frontier_phi_67_pred_2 = _3076;
                        frontier_phi_67_pred_3 = _3073;
                        frontier_phi_67_pred_4 = _3072;
                        frontier_phi_67_pred_5 = _3071;
                    }
                    _2739 = frontier_phi_67_pred;
                    _2741 = frontier_phi_67_pred_1;
                    _2743 = frontier_phi_67_pred_2;
                    _2737 = frontier_phi_67_pred_3;
                    _2735 = frontier_phi_67_pred_4;
                    _2733 = frontier_phi_67_pred_5;
                    uint _2878 = _2877 + 1u;
                    if (_2878 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2871 = _2733;
                        _2872 = _2735;
                        _2873 = _2737;
                        _2874 = _2739;
                        _2875 = _2741;
                        _2876 = _2743;
                        _2877 = _2878;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2741;
                frontier_phi_55_56_ladder_1 = _2743;
                frontier_phi_55_56_ladder_2 = _2739;
                frontier_phi_55_56_ladder_3 = _2737;
                frontier_phi_55_56_ladder_4 = _2735;
                frontier_phi_55_56_ladder_5 = _2733;
            }
            else
            {
                frontier_phi_55_56_ladder = _2628;
                frontier_phi_55_56_ladder_1 = _2630;
                frontier_phi_55_56_ladder_2 = _2626;
                frontier_phi_55_56_ladder_3 = _2624;
                frontier_phi_55_56_ladder_4 = _2622;
                frontier_phi_55_56_ladder_5 = _2620;
            }
            _2732 = frontier_phi_55_56_ladder_5;
            _2734 = frontier_phi_55_56_ladder_4;
            _2736 = frontier_phi_55_56_ladder_3;
            _2738 = frontier_phi_55_56_ladder_2;
            _2740 = frontier_phi_55_56_ladder;
            _2742 = frontier_phi_55_56_ladder_1;
        }
        float _2747 = isnan(1.0) ? _799 : (isnan(_799) ? 1.0 : min(_799, 1.0));
        _2532 = (_2747 * _2738) + _1968;
        _2534 = (_2747 * _2740) + _1970;
        _2536 = (_2747 * _2742) + _1972;
        _2538 = ((_2732 * _783) * _2747) + _2313;
        _2540 = ((_2734 * _785) * _2747) + _2315;
        _2542 = ((_2736 * _786) * _2747) + _2317;
    }
    else
    {
        _2532 = _1968;
        _2534 = _1970;
        _2536 = _1972;
        _2538 = _2313;
        _2540 = _2315;
        _2542 = _2317;
    }
    float _4461 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _4472 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _4483 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    uint _2562 = _237 + 6u;
    float _2570 = _718 / cbSceneParam._m0[86u].x;
    float _2571 = _719 / cbSceneParam._m0[86u].y;
    vec4 _2585 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2570, _2571, (log2((isnan(cbSceneParam._m0[77u].w) ? _653 : (isnan(_653) ? cbSceneParam._m0[77u].w : min(_653, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2587 = _2585.x;
    float _2588 = _2585.y;
    float _2589 = _2585.z;
    float _2590 = _2585.w;
    float _2682;
    float _2684;
    float _2686;
    float _2688;
    if (_653 > cbSceneParam._m0[78u].w)
    {
        float _2645 = isnan(_653) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _653 : min(cbSceneParam._m0[80u].w, _653));
        float _2646 = _2645 / _653;
        float _2657 = _2646 * _703;
        float _2658 = _704 * _2646;
        float _2659 = (-0.0) - _2658;
        float _2660 = _2646 * _705;
        float _2662 = (cbSceneParam._m0[77u].w * _2659) / _2645;
        float _2663 = _2662 + cbSceneParam._m0[79u].w;
        float _2664 = cbSceneParam._m0[79u].w - _2658;
        float _2670 = sqrt(((_2657 * _2657) + (_2658 * _2658)) + (_2660 * _2660));
        float _2673 = (1.0 - (cbSceneParam._m0[77u].w / _2645)) * _2670;
        float _2678 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2680 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2833;
        if (abs((_2659 - _2662) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2833 = ((((_2663 > 0.0) ? exp2(_2678 * _2663) : (2.0 - exp2(_2680 * _2663))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2673;
        }
        else
        {
            float _2793 = 1.0 / cbSceneParam._m0[80u].x;
            float _2794 = isnan(_2664) ? _2663 : (isnan(_2663) ? _2664 : max(_2663, _2664));
            float _2795 = isnan(_2664) ? _2663 : (isnan(_2663) ? _2664 : min(_2663, _2664));
            float _2804 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : min(_2794, 0.0));
            float _2805 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : min(_2795, 0.0));
            _2833 = ((abs(_2670 / _2659) * cbSceneParam._m0[80u].y) * ((((_2804 - _2805) * 2.0) - ((exp2(_2678 * (isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0)))) - exp2(_2678 * (isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0))))) * _2793)) - ((exp2(_2680 * _2804) - exp2(_2680 * _2805)) * _2793))) + (_2673 * cbSceneParam._m0[80u].z);
        }
        vec4 _2835 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2570, _2571, 1.0), 0.0);
        float _2844 = exp2((_2833 * (-1.44269502162933349609375)) * (1.0 - _2835.w));
        float _2845 = log2(_2844);
        float _2861 = log2(_2590);
        _2682 = (exp2(_2861 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2845 * cbSceneParam._m0[78u].x)) * _2835.x) / cbSceneParam._m0[78u].x)) + _2587;
        _2684 = (exp2(_2861 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2845 * cbSceneParam._m0[78u].y)) * _2835.y) / cbSceneParam._m0[78u].y)) + _2588;
        _2686 = (exp2(_2861 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2845 * cbSceneParam._m0[78u].z)) * _2835.z) / cbSceneParam._m0[78u].z)) + _2589;
        _2688 = _2844 * _2590;
    }
    else
    {
        _2682 = _2587;
        _2684 = _2588;
        _2686 = _2589;
        _2688 = _2590;
    }
    float _2700 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2701 = _2700 == 3.0;
    float _2702 = log2(_2688);
    float _2709 = exp2(_2702 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_2532 + ((isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))) * _799))) + ((_2538 + ((isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0))) * _1607)) * cbPerFrame._m0[3u].x));
    float _2710 = exp2(_2702 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_2534 + ((isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0))) * _799))) + ((_2540 + ((isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))) * _1607)) * cbPerFrame._m0[3u].x));
    float _2711 = exp2(_2702 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * (_2536 + ((isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0))) * _799))) + ((_2542 + ((isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))) * _1607)) * cbPerFrame._m0[3u].x));
    float _2720 = (_2700 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2720 * (_2701 ? _2709 : (_2709 + (cbSceneParam._m0[72u].w * _2682)));
    SV_Target.y = _2720 * (_2701 ? _2710 : (_2710 + (cbSceneParam._m0[72u].w * _2684)));
    SV_Target.z = _2720 * (_2701 ? _2711 : (_2711 + (cbSceneParam._m0[72u].w * _2686)));
    SV_Target.w = cbInstanceData._m0[_2562].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2562].w;
}


