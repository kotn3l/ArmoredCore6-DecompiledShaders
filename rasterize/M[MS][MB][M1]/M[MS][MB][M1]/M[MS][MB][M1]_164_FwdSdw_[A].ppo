#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1506;
float _4167;
float _4168;
float _4169;
float _4170;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _242 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _243 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _244 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _250 = inversesqrt(dot(vec3(_242, _243, _244), vec3(_242, _243, _244)));
    float _251 = _250 * _242;
    float _252 = _250 * _243;
    float _253 = _250 * _244;
    float _257 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = _257 * NORMAL.x;
    float _259 = _257 * NORMAL.y;
    float _260 = _257 * NORMAL.z;
    float _264 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _265 = _264 * TANGENT.x;
    float _266 = _264 * TANGENT.y;
    float _267 = _264 * TANGENT.z;
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4179 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _4190 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _4201 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    uint _289 = uint(roundEven(NORMAL.w)) * 13u;
    uint _294 = _289 + 1u;
    uint _298 = _289 + 2u;
    float _307 = sqrt(((cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x)) + (cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x));
    float _308 = _307 * TEXCOORD.z;
    float _309 = _307 * TEXCOORD.w;
    vec4 _322 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _308) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _309) + cbTextureTilingScale._m0[13u].w));
    vec4 _346 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _351 = _346.x * cbMtdParam._m0[11u].x;
    float _352 = _346.y * cbMtdParam._m0[11u].y;
    float _353 = _346.z * cbMtdParam._m0[11u].z;
    vec4 _372 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _308) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _309) + cbTextureTilingScale._m0[5u].w));
    vec4 _408 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _410 = _408.x;
    float _422 = dot(vec4(_410, _408.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _439 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_410 - _422) * cbMtdParam._m0[24u].y) + _422) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4212 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _440 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
    float _447 = (_440 * ((_372.x * cbMtdParam._m0[12u].x) - _351)) + _351;
    float _448 = (_440 * ((_372.y * cbMtdParam._m0[12u].y) - _352)) + _352;
    float _449 = (_440 * ((_372.z * cbMtdParam._m0[12u].z) - _353)) + _353;
    float _453 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _322.x) * _447;
    float _456 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _322.y) * _448;
    float _459 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _322.z) * _449;
    float _466 = ((_447 - _453) * (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0)))) + _453;
    float _467 = ((_448 - _456) * (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0)))) + _456;
    float _468 = ((_449 - _459) * (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0)))) + _459;
    vec4 _487 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _308) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _309) + cbTextureTilingScale._m0[14u].w));
    vec4 _507 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _308) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _309) + cbTextureTilingScale._m0[20u].w));
    vec4 _534 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _308) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _309) + cbTextureTilingScale._m0[4u].w));
    vec4 _551 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _553 = _551.x;
    float _554 = _551.y;
    float _555 = _551.z;
    float _564 = ((_534.z - _555) * _440) + _555;
    float _567 = ((((_534.x - _553) * _440) + _553) * 2.0) + (-1.0);
    float _568 = ((((_534.y - _554) * _440) + _554) * 2.0) + (-1.0);
    float _569 = dot(vec2(_567, _568), vec2(_567, _568));
    float _4223 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _574 = sqrt(1.0 - (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))));
    vec4 _594 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _606 = (_567 + ((((_507.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_594.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _607 = (_568 + ((((_507.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_594.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _610 = fma(_574, _258, fma(_607, _265, _606 * _251));
    float _613 = fma(_574, _259, fma(_607, _266, _606 * _252));
    float _616 = fma(_574, _260, fma(_607, _267, _606 * _253));
    float _620 = inversesqrt(dot(vec3(_610, _613, _616), vec3(_610, _613, _616)));
    vec4 _647 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _308) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _309) + cbTextureTilingScale._m0[11u].w));
    float _649 = _647.x;
    float _650 = 1.0 - _649;
    float _654 = ((_649 - _650) * cbMtdParam._m0[24u].z) + _650;
    float _656 = (cbMtdParam._m0[19u].x + dot(vec4(_620 * _610, _620 * _613, _620 * _616, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_654 * cbMtdParam._m0[21u].z);
    float _4234 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _657 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
    float _659 = (-0.0) - cbMtdParam._m0[24u].x;
    float _661 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _662 = isnan(1.0) ? _661 : (isnan(_661) ? 1.0 : min(_661, 1.0));
    float _669 = _657 - ((_657 * TEXCOORD_8.x) * _662);
    float _670 = _657 - ((_657 * TEXCOORD_8.y) * _662);
    float _671 = _657 - ((_657 * TEXCOORD_8.z) * _662);
    float _678 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _682 = ((isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : min(_678, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _690 = (_682 - (((_654 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _682))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4265 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _691 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
    float _695 = ((_669 * ((_487.x * cbMtdParam._m0[18u].x) - _466)) * _691) + _466;
    float _696 = ((_670 * ((_487.y * cbMtdParam._m0[18u].y) - _467)) * _691) + _467;
    float _697 = ((_671 * ((_487.z * cbMtdParam._m0[18u].z) - _468)) * _691) + _468;
    vec4 _709 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _308) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _309) + cbTextureTilingScale._m0[19u].w));
    float _711 = _709.x;
    float _712 = 1.0 - _711;
    float _737 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_711 - _712) * cbMtdParam._m0[24u].w) + _712) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4276 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _738 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
    float _746 = ((((cbMtdParam._m0[10u].x - _695) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _738) + _695;
    float _747 = ((((cbMtdParam._m0[10u].y - _696) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _738) + _696;
    float _748 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _697)) * _738) + _697;
    vec4 _774 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _776 = _774.x;
    float _794 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _308) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _309) + cbTextureTilingScale._m0[9u].w)).x - _776) * _440) + _776;
    float _798 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _794) * cbMtdParam._m0[19u].z) + _794;
    float _801 = _798 - ((_691 * _669) * _798);
    float _803 = _801 - (_801 * _738);
    float _808 = (((_507.z - _564) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _564;
    float _812 = ((_594.z - _808) * cbMtdParam._m0[19u].w) + _808;
    vec4 _826 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _308) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _309) + cbTextureTilingScale._m0[15u].w));
    float _833 = (_826.x * 2.0) + (-1.0);
    float _834 = (_826.y * 2.0) + (-1.0);
    float _835 = dot(vec2(_833, _834), vec2(_833, _834));
    float _4287 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _844 = (((_826.z - _812) * _669) * _691) + _812;
    float _847 = ((cbMtdParam._m0[23u].y - _844) * _738) + _844;
    vec4 _868 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _308) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _309) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _874 = (_868.x * 2.0) + (-1.0);
    float _875 = (_868.y * 2.0) + (-1.0);
    float _876 = dot(vec2(_874, _875), vec2(_874, _875));
    float _4298 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _896 = (((cbMtdParam._m0[21u].x * _606) + ((_833 - _606) * _669)) * _691) + _606;
    float _897 = (((cbMtdParam._m0[21u].x * _607) + ((_834 - _607) * _670)) * _691) + _607;
    float _898 = (((sqrt(1.0 - (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0)))) - _574) * _671) * _691) + _574;
    float _909 = (((_874 - _896) + (_896 * cbMtdParam._m0[22u].z)) * _738) + _896;
    float _910 = (((_875 - _897) + (_897 * cbMtdParam._m0[22u].z)) * _738) + _897;
    float _911 = ((sqrt(1.0 - (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0)))) - _898) * _738) + _898;
    float _913 = cbMtdParam._m0[22u].x + _594.w;
    float _916 = fma(_911, _258, fma(_910, _265, _909 * _251));
    float _919 = fma(_911, _259, fma(_910, _266, _909 * _252));
    float _922 = fma(_911, _260, fma(_910, _267, _909 * _253));
    float _926 = inversesqrt(dot(vec3(_916, _919, _922), vec3(_916, _919, _922)));
    float _927 = _926 * _916;
    float _928 = _926 * _919;
    float _929 = _926 * _922;
    float _4309 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _930 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
    float _4320 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _4331 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _4342 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _4353 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _4364 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _935 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
    float _949 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _989 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _999 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _989);
    float _1000 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _989);
    float _1001 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _989);
    float _1005 = inversesqrt(dot(vec3(_999, _1000, _1001), vec3(_999, _1000, _1001)));
    float _1006 = _999 * _1005;
    float _1007 = _1000 * _1005;
    float _1008 = _1001 * _1005;
    vec4 _1013 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1015 = _1013.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1187 = sqrt(((_999 * _999) + (_1000 * _1000)) + (_1001 * _1001));
        float _1193 = (cbMatDynParam._m0[5u].x * _1187) + cbMatDynParam._m0[5u].y;
        float _4375 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _1198 = (cbMatDynParam._m0[5u].z * _1187) + cbMatDynParam._m0[5u].w;
        float _4386 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) - _1194)) + _1194) < ((_1015 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1026 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1027 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1045 = fma(_929, cbSceneParam._m0[5u].z, fma(_928, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _927));
    float _1048 = fma(_929, cbSceneParam._m0[6u].z, fma(_928, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _927));
    float _1051 = fma(_929, cbSceneParam._m0[7u].z, fma(_928, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _927));
    uint _1064 = _289 + 9u;
    uint _1065 = _1064 + uint(cbMatDynParam._m0[0u].w);
    float _1071 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0)))) * cbInstanceData._m0[_1065].x;
    float _1072 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0)))) * cbInstanceData._m0[_1065].y;
    float _1073 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0)))) * cbInstanceData._m0[_1065].z;
    float _4397 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
    float _1074 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
    float _4408 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
    float _1075 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
    float _4419 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
    float _1076 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
    float _1077 = 1.0 - _935;
    float _1078 = _1074 * _1077;
    float _1079 = _1075 * _1077;
    float _1080 = _1076 * _1077;
    float _1085 = (_1074 + (-0.039999999105930328369140625)) * _935;
    float _1086 = (_1075 + (-0.039999999105930328369140625)) * _935;
    float _1087 = (_1076 + (-0.039999999105930328369140625)) * _935;
    float _1088 = _1085 + 0.039999999105930328369140625;
    float _1090 = _1086 + 0.039999999105930328369140625;
    float _1091 = _1087 + 0.039999999105930328369140625;
    vec4 _1100 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1026, cbSceneParam._m0[86u].y * _1027));
    float _1104 = ((isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * TEXCOORD_5.w) * _1100.x;
    float _1105 = dot(vec3(_927, _928, _929), vec3(_1006, _1007, _1008));
    float _1108 = _1105 * 2.0;
    float _1112 = (_1108 * _927) - _1006;
    float _1113 = (_1108 * _928) - _1007;
    float _1114 = (_1108 * _929) - _1008;
    float _1118 = abs(dot(vec3(_1006, _1007, _1008), vec3(_927, _928, _929)));
    float _4430 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
    float _1120 = sqrt(_930);
    float _1133 = exp2((_1120 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1120 * 3.0));
    float _1139 = (1.0 - _1133) * ((_1120 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1140 = _1133 * _1120;
    float _1168 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1172 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1176 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1505;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1230 = fma(_1176, cbModelParam._m0[26u].z, fma(_1172, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1168));
        float _1234 = fma(_1176, cbModelParam._m0[27u].z, fma(_1172, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1168));
        float _1238 = fma(_1176, cbModelParam._m0[28u].z, fma(_1172, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1168));
        float _1263 = _1168 + _927;
        float _1264 = _1172 + _928;
        float _1265 = _1176 + _929;
        float _1275 = fma(_1265, cbModelParam._m0[26u].z, fma(_1264, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1263)) - _1230;
        float _1276 = fma(_1265, cbModelParam._m0[27u].z, fma(_1264, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1263)) - _1234;
        float _1277 = fma(_1265, cbModelParam._m0[28u].z, fma(_1264, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1263)) - _1238;
        float _1281 = inversesqrt(dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277)));
        float _1294 = ((_1281 * _1275) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1230 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1295 = ((_1281 * _1276) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1234 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1296 = ((_1281 * _1277) / cbModelParam._m0[34u].z) + ((((((_1238 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1299 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        vec4 _1306 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        vec4 _1313 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        vec4 _1320 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        float _1333 = exp2((_1299.w + (-0.5)) * 20.0) * 2.0;
        float _1334 = _1333 * (_1299.x + (-0.5));
        float _1335 = _1333 * (_1299.y + (-0.5));
        float _1336 = _1333 * (_1299.z + (-0.5));
        float _1343 = exp2((_1306.w + (-0.5)) * 20.0) * 2.0;
        float _1344 = _1343 * (_1306.x + (-0.5));
        float _1345 = _1343 * (_1306.y + (-0.5));
        float _1346 = _1343 * (_1306.z + (-0.5));
        float _1353 = exp2((_1313.w + (-0.5)) * 20.0) * 2.0;
        float _1354 = _1353 * (_1313.x + (-0.5));
        float _1355 = _1353 * (_1313.y + (-0.5));
        float _1356 = _1353 * (_1313.z + (-0.5));
        float _1363 = exp2((_1320.w + (-0.5)) * 20.0) * 2.0;
        float _1364 = _1363 * (_1320.x + (-0.5));
        float _1365 = _1363 * (_1320.y + (-0.5));
        float _1366 = _1363 * (_1320.z + (-0.5));
        float _1367 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1368 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1369 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1370 = _1334 * 0.5;
        float _1371 = _1344 * 0.5;
        float _1372 = _1354 * 0.5;
        float _1373 = dot(vec3(_1370, _1371, _1372), vec3(_1370, _1371, _1372));
        float _1378 = (_1373 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1373);
        float _1387 = (dot(vec3(_927, _928, _929), vec3(_1378 * _1370, _1378 * _1371, _1378 * _1372)) + 1.0) * 0.5;
        float _4456 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1397 = sqrt(((_1371 * _1371) + (_1370 * _1370)) + (_1372 * _1372)) / (_1367 + 9.9999997473787516355514526367188e-06);
        float _4467 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _1399 = _1398 * 2.0;
        float _1403 = (1.0 - _1398) / (_1398 + 1.0);
        float _4478 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _1413 = ((((1.0 - _1404) * (_1399 + 2.0)) * exp2(log2(isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_1399 + 1.0))) + _1404) * _1367;
        float _1414 = _1335 * 0.5;
        float _1415 = _1345 * 0.5;
        float _1416 = _1355 * 0.5;
        float _1417 = dot(vec3(_1414, _1415, _1416), vec3(_1414, _1415, _1416));
        float _1422 = (_1417 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1417);
        float _1430 = (dot(vec3(_927, _928, _929), vec3(_1422 * _1414, _1422 * _1415, _1422 * _1416)) + 1.0) * 0.5;
        float _4489 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1439 = sqrt(((_1415 * _1415) + (_1414 * _1414)) + (_1416 * _1416)) / (_1368 + 9.9999997473787516355514526367188e-06);
        float _4500 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _1441 = _1440 * 2.0;
        float _1445 = (1.0 - _1440) / (_1440 + 1.0);
        float _4511 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _1455 = ((((1.0 - _1446) * (_1441 + 2.0)) * exp2(log2(isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (_1441 + 1.0))) + _1446) * _1368;
        float _1456 = _1336 * 0.5;
        float _1457 = _1346 * 0.5;
        float _1458 = _1356 * 0.5;
        float _1459 = dot(vec3(_1456, _1457, _1458), vec3(_1456, _1457, _1458));
        float _1464 = (_1459 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1459);
        float _1472 = (dot(vec3(_927, _928, _929), vec3(_1464 * _1456, _1464 * _1457, _1464 * _1458)) + 1.0) * 0.5;
        float _4522 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1481 = sqrt(((_1457 * _1457) + (_1456 * _1456)) + (_1458 * _1458)) / (_1369 + 9.9999997473787516355514526367188e-06);
        float _4533 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _1483 = _1482 * 2.0;
        float _1487 = (1.0 - _1482) / (_1482 + 1.0);
        float _4544 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
        float _1497 = ((((1.0 - _1488) * (_1483 + 2.0)) * exp2(log2(isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0))) * (_1483 + 1.0))) + _1488) * _1369;
        _1505 = _1336;
        _1507 = _1335;
        _1508 = _1334;
        _1509 = _1346;
        _1510 = _1345;
        _1511 = _1344;
        _1512 = _1356;
        _1513 = _1355;
        _1514 = _1354;
        _1515 = _1369;
        _1516 = _1368;
        _1517 = _1367;
        _1518 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)));
        _1519 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)));
        _1520 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)));
    }
    else
    {
        _1505 = _1506;
        _1507 = _1506;
        _1508 = _1506;
        _1509 = _1506;
        _1510 = _1506;
        _1511 = _1506;
        _1512 = _1506;
        _1513 = _1506;
        _1514 = _1506;
        _1515 = _1506;
        _1516 = _1506;
        _1517 = _1506;
        _1518 = 0.0;
        _1519 = 0.0;
        _1520 = 0.0;
    }
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1548 = fma(_1176, cbModelParam._m0[30u].z, fma(_1172, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1168));
        float _1552 = fma(_1176, cbModelParam._m0[31u].z, fma(_1172, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1168));
        float _1556 = fma(_1176, cbModelParam._m0[32u].z, fma(_1172, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1168));
        float _1579 = _1168 + _927;
        float _1580 = _1172 + _928;
        float _1581 = _1176 + _929;
        float _1591 = fma(_1581, cbModelParam._m0[30u].z, fma(_1580, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1579)) - _1548;
        float _1592 = fma(_1581, cbModelParam._m0[31u].z, fma(_1580, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1579)) - _1552;
        float _1593 = fma(_1581, cbModelParam._m0[32u].z, fma(_1580, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1579)) - _1556;
        float _1597 = inversesqrt(dot(vec3(_1591, _1592, _1593), vec3(_1591, _1592, _1593)));
        float _1610 = ((_1597 * _1591) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1548 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1611 = ((_1597 * _1592) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1552 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1612 = ((_1597 * _1593) / cbModelParam._m0[35u].z) + ((((((_1556 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1614 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1610, _1611, _1612), 0.0);
        vec4 _1621 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1610, _1611, _1612), 0.0);
        vec4 _1628 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1610, _1611, _1612), 0.0);
        vec4 _1635 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1610, _1611, _1612), 0.0);
        float _1647 = exp2((_1614.w + (-0.5)) * 20.0) * 2.0;
        float _1648 = _1647 * (_1614.x + (-0.5));
        float _1649 = _1647 * (_1614.y + (-0.5));
        float _1650 = _1647 * (_1614.z + (-0.5));
        float _1657 = exp2((_1621.w + (-0.5)) * 20.0) * 2.0;
        float _1658 = _1657 * (_1621.x + (-0.5));
        float _1659 = _1657 * (_1621.y + (-0.5));
        float _1660 = _1657 * (_1621.z + (-0.5));
        float _1667 = exp2((_1628.w + (-0.5)) * 20.0) * 2.0;
        float _1668 = _1667 * (_1628.x + (-0.5));
        float _1669 = _1667 * (_1628.y + (-0.5));
        float _1670 = _1667 * (_1628.z + (-0.5));
        float _1677 = exp2((_1635.w + (-0.5)) * 20.0) * 2.0;
        float _1678 = _1677 * (_1635.x + (-0.5));
        float _1679 = _1677 * (_1635.y + (-0.5));
        float _1680 = _1677 * (_1635.z + (-0.5));
        float _1681 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1682 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1683 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1684 = _1648 * 0.5;
        float _1685 = _1658 * 0.5;
        float _1686 = _1668 * 0.5;
        float _1687 = dot(vec3(_1684, _1685, _1686), vec3(_1684, _1685, _1686));
        float _1692 = (_1687 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1687);
        float _1700 = (dot(vec3(_927, _928, _929), vec3(_1692 * _1684, _1692 * _1685, _1692 * _1686)) + 1.0) * 0.5;
        float _4585 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1709 = sqrt(((_1685 * _1685) + (_1684 * _1684)) + (_1686 * _1686)) / (_1681 + 9.9999997473787516355514526367188e-06);
        float _4596 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1710 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
        float _1711 = _1710 * 2.0;
        float _1715 = (1.0 - _1710) / (_1710 + 1.0);
        float _4607 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1716 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
        float _1725 = ((((1.0 - _1716) * (_1711 + 2.0)) * exp2(log2(isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0))) * (_1711 + 1.0))) + _1716) * _1681;
        float _1726 = _1649 * 0.5;
        float _1727 = _1659 * 0.5;
        float _1728 = _1669 * 0.5;
        float _1729 = dot(vec3(_1726, _1727, _1728), vec3(_1726, _1727, _1728));
        float _1734 = (_1729 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1729);
        float _1742 = (dot(vec3(_927, _928, _929), vec3(_1734 * _1726, _1734 * _1727, _1734 * _1728)) + 1.0) * 0.5;
        float _4618 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1751 = sqrt(((_1727 * _1727) + (_1726 * _1726)) + (_1728 * _1728)) / (_1682 + 9.9999997473787516355514526367188e-06);
        float _4629 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1752 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
        float _1753 = _1752 * 2.0;
        float _1757 = (1.0 - _1752) / (_1752 + 1.0);
        float _4640 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
        float _1758 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
        float _1767 = ((((1.0 - _1758) * (_1753 + 2.0)) * exp2(log2(isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (_1753 + 1.0))) + _1758) * _1682;
        float _1768 = _1650 * 0.5;
        float _1769 = _1660 * 0.5;
        float _1770 = _1670 * 0.5;
        float _1771 = dot(vec3(_1768, _1769, _1770), vec3(_1768, _1769, _1770));
        float _1776 = (_1771 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1771);
        float _1784 = (dot(vec3(_927, _928, _929), vec3(_1776 * _1768, _1776 * _1769, _1776 * _1770)) + 1.0) * 0.5;
        float _4651 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _1793 = sqrt(((_1769 * _1769) + (_1768 * _1768)) + (_1770 * _1770)) / (_1683 + 9.9999997473787516355514526367188e-06);
        float _4662 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1794 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
        float _1795 = _1794 * 2.0;
        float _1799 = (1.0 - _1794) / (_1794 + 1.0);
        float _4673 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
        float _1800 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
        float _1809 = ((((1.0 - _1800) * (_1795 + 2.0)) * exp2(log2(isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0))) * (_1795 + 1.0))) + _1800) * _1683;
        _1817 = _1650;
        _1818 = _1649;
        _1819 = _1648;
        _1820 = _1660;
        _1821 = _1659;
        _1822 = _1658;
        _1823 = _1670;
        _1824 = _1669;
        _1825 = _1668;
        _1826 = _1683;
        _1827 = _1682;
        _1828 = _1681;
        _1829 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0)));
        _1830 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0)));
        _1831 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0)));
    }
    else
    {
        _1817 = _1506;
        _1818 = _1506;
        _1819 = _1506;
        _1820 = _1506;
        _1821 = _1506;
        _1822 = _1506;
        _1823 = _1506;
        _1824 = _1506;
        _1825 = _1506;
        _1826 = _1506;
        _1827 = _1506;
        _1828 = _1506;
        _1829 = 0.0;
        _1830 = 0.0;
        _1831 = 0.0;
    }
    float _1841 = (cbModelParam._m0[1u].x * (_1829 - _1518)) + _1518;
    float _1842 = (cbModelParam._m0[1u].x * (_1830 - _1519)) + _1519;
    float _1843 = (cbModelParam._m0[1u].x * (_1831 - _1520)) + _1520;
    float _1864 = fma(_1843, cbSceneParam._m0[89u].z, fma(_1842, cbSceneParam._m0[89u].y, _1841 * cbSceneParam._m0[89u].x));
    float _1867 = fma(_1843, cbSceneParam._m0[90u].z, fma(_1842, cbSceneParam._m0[90u].y, _1841 * cbSceneParam._m0[90u].x));
    float _1870 = fma(_1843, cbSceneParam._m0[91u].z, fma(_1842, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1841));
    float _1885 = _1112 * 0.5;
    float _1886 = _1113 * 0.5;
    float _1887 = _1114 * 0.5;
    float _1888 = dot(vec4(_1885, _1886, _1887, 1.0), vec4(_1819, _1822, _1825, _1828));
    float _1891 = dot(vec4(_1885, _1886, _1887, 1.0), vec4(_1818, _1821, _1824, _1827));
    float _1894 = dot(vec4(_1885, _1886, _1887, 1.0), vec4(_1817, _1820, _1823, _1826));
    float _1928;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1901 = dot(vec4(_1885, _1886, _1887, 1.0), vec4(_1505, _1509, _1512, _1515));
        float _1905 = dot(vec4(_1885, _1886, _1887, 1.0), vec4(_1507, _1510, _1513, _1516));
        float _1909 = dot(vec4(_1885, _1886, _1887, 1.0), vec4(_1508, _1511, _1514, _1517));
        float _1916 = dot(vec4(cbModelParam._m0[39u]), vec4(_1885, _1886, _1887, 1.0));
        _1928 = dot(vec3(isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0)), isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0)), isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1916) ? 0.0 : (isnan(0.0) ? _1916 : max(0.0, _1916))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1928 = 1.0;
    }
    float _1939;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1930 = dot(vec4(cbModelParam._m0[40u]), vec4(_1885, _1886, _1887, 1.0));
        _1939 = dot(vec3(isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0)), isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0)), isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1930) ? 0.0 : (isnan(0.0) ? _1930 : max(0.0, _1930))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1939 = 1.0;
    }
    float _1943 = (_1939 * cbModelParam._m0[1u].x) + (_1928 * (1.0 - cbModelParam._m0[1u].x));
    float _1953 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _930);
    float _1954 = isnan(_1953) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1953 : min(cbModelParam._m0[25u].z, _1953));
    float _2034;
    float _2036;
    float _2038;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2001 = fma(_1176, cbModelParam._m0[13u].z, fma(_1172, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1168)) + cbModelParam._m0[13u].w;
        float _2005 = fma(_1176, cbModelParam._m0[14u].z, fma(_1172, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1168)) + cbModelParam._m0[14u].w;
        float _2009 = fma(_1176, cbModelParam._m0[15u].z, fma(_1172, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1168)) + cbModelParam._m0[15u].w;
        float _2012 = fma(_1114, cbModelParam._m0[13u].z, fma(_1113, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1112));
        float _2015 = fma(_1114, cbModelParam._m0[14u].z, fma(_1113, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1112));
        float _2018 = fma(_1114, cbModelParam._m0[15u].z, fma(_1113, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1112));
        float _2046;
        if (_2012 > 0.0)
        {
            _2046 = abs((1.0 - _2001) / _2012);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2012 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2001 + 1.0) / _2012);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2046 = frontier_phi_17_15_ladder;
        }
        float _2217;
        if (_2015 > 0.0)
        {
            _2217 = abs((1.0 - _2005) / _2015);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2015 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2005 + 1.0) / _2015);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2217 = frontier_phi_26_22_ladder;
        }
        float _2512;
        if (_2018 > 0.0)
        {
            _2512 = abs((1.0 - _2009) / _2018);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2018 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2009 + 1.0) / _2018);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2512 = frontier_phi_38_33_ladder;
        }
        float _2514 = isnan(_2217) ? _2046 : (isnan(_2046) ? _2217 : min(_2046, _2217));
        float _2515 = isnan(_2512) ? _2514 : (isnan(_2514) ? _2512 : min(_2514, _2512));
        float _2519 = (_2515 * _2012) + _2001;
        float _2520 = (_2515 * _2015) + _2005;
        float _2521 = (_2515 * _2018) + _2009;
        float _2522 = _2515 * 9.9999997473787516355514526367188e-05;
        float _2524 = (-1.0) - _2522;
        float _2526 = _2522 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2521 > _2526) || ((_2521 < _2524) || ((_2520 > _2526) || ((_2520 < _2524) || ((_2519 < _2524) || (_2519 > _2526))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2666 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2521, cbModelParam._m0[9u].z, fma(_2520, cbModelParam._m0[9u].y, _2519 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2521, cbModelParam._m0[10u].z, fma(_2520, cbModelParam._m0[10u].y, _2519 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2521, cbModelParam._m0[11u].z, fma(_2520, cbModelParam._m0[11u].y, _2519 * cbModelParam._m0[11u].x))), _1954);
            frontier_phi_16_38_ladder = _2666.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2666.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2666.x * cbModelParam._m0[1u].y;
        }
        _2034 = frontier_phi_16_38_ladder_2;
        _2036 = frontier_phi_16_38_ladder_1;
        _2038 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2022 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1112, _1113, _1114), _1954);
        _2034 = _2022.x * cbModelParam._m0[1u].y;
        _2036 = _2022.y * cbModelParam._m0[1u].y;
        _2038 = _2022.z * cbModelParam._m0[1u].y;
    }
    float _2042 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _930);
    float _2043 = isnan(_2042) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2042 : min(cbModelParam._m0[25u].w, _2042));
    float _2132;
    float _2134;
    float _2136;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2096 = fma(_1176, cbModelParam._m0[21u].z, fma(_1172, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1168)) + cbModelParam._m0[21u].w;
        float _2100 = fma(_1176, cbModelParam._m0[22u].z, fma(_1172, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1168)) + cbModelParam._m0[22u].w;
        float _2104 = fma(_1176, cbModelParam._m0[23u].z, fma(_1172, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1168)) + cbModelParam._m0[23u].w;
        float _2107 = fma(_1114, cbModelParam._m0[21u].z, fma(_1113, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1112));
        float _2110 = fma(_1114, cbModelParam._m0[22u].z, fma(_1113, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1112));
        float _2113 = fma(_1114, cbModelParam._m0[23u].z, fma(_1113, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1112));
        float _2222;
        if (_2107 > 0.0)
        {
            _2222 = abs((1.0 - _2096) / _2107);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2107 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2096 + 1.0) / _2107);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2222 = frontier_phi_28_24_ladder;
        }
        float _2539;
        if (_2110 > 0.0)
        {
            _2539 = abs((1.0 - _2100) / _2110);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2110 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2100 + 1.0) / _2110);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2539 = frontier_phi_40_35_ladder;
        }
        float _2877;
        if (_2113 > 0.0)
        {
            _2877 = abs((1.0 - _2104) / _2113);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2113 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2104 + 1.0) / _2113);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2877 = frontier_phi_50_47_ladder;
        }
        float _2879 = isnan(_2539) ? _2222 : (isnan(_2222) ? _2539 : min(_2222, _2539));
        float _2880 = isnan(_2877) ? _2879 : (isnan(_2879) ? _2877 : min(_2879, _2877));
        float _2884 = (_2880 * _2107) + _2096;
        float _2885 = (_2880 * _2110) + _2100;
        float _2886 = (_2880 * _2113) + _2104;
        float _2887 = _2880 * 9.9999997473787516355514526367188e-05;
        float _2888 = (-1.0) - _2887;
        float _2890 = _2887 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2886 > _2890) || ((_2886 < _2888) || ((_2885 > _2890) || ((_2885 < _2888) || ((_2884 < _2888) || (_2884 > _2890))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3008 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2886, cbModelParam._m0[17u].z, fma(_2885, cbModelParam._m0[17u].y, _2884 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2886, cbModelParam._m0[18u].z, fma(_2885, cbModelParam._m0[18u].y, _2884 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2886, cbModelParam._m0[19u].z, fma(_2885, cbModelParam._m0[19u].y, _2884 * cbModelParam._m0[19u].x))), _2043);
            frontier_phi_25_50_ladder = _3008.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3008.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3008.x * cbModelParam._m0[1u].z;
        }
        _2132 = frontier_phi_25_50_ladder_2;
        _2134 = frontier_phi_25_50_ladder_1;
        _2136 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2116 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1112, _1113, _1114), _2043);
        _2132 = _2116.x * cbModelParam._m0[1u].z;
        _2134 = _2116.y * cbModelParam._m0[1u].z;
        _2136 = _2116.z * cbModelParam._m0[1u].z;
    }
    float _2149 = (((_1139 * _1088) + _1140) * _1104) * ((cbModelParam._m0[1u].w * (_2132 - _2034)) + _2034);
    float _2151 = (((_1139 * _1090) + _1140) * _1104) * ((cbModelParam._m0[1u].w * (_2134 - _2036)) + _2036);
    float _2153 = (((_1139 * _1091) + _1140) * _1104) * ((cbModelParam._m0[1u].w * (_2136 - _2038)) + _2038);
    float _2156 = fma(_2153, cbSceneParam._m0[89u].z, fma(_2151, cbSceneParam._m0[89u].y, _2149 * cbSceneParam._m0[89u].x));
    float _2159 = fma(_2153, cbSceneParam._m0[90u].z, fma(_2151, cbSceneParam._m0[90u].y, _2149 * cbSceneParam._m0[90u].x));
    float _2162 = fma(_2153, cbSceneParam._m0[91u].z, fma(_2151, cbSceneParam._m0[91u].y, _2149 * cbSceneParam._m0[91u].x));
    float _2196 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2200 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2204 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2208 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2209 = _2196 / _2208;
    float _2210 = _2200 / _2208;
    float _2211 = _2204 / _2208;
    float _2358;
    float _2359;
    float _2360;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2238 = ((uint(_2211 > cbSceneParam._m0[59u].y) + uint(_2211 > cbSceneParam._m0[59u].x)) + uint(_2211 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2239 = _2238 + 43u;
        uint _2247 = _2238 + 44u;
        uint _2255 = _2238 + 45u;
        uint _2263 = _2238 + 46u;
        float _2274 = fma(_2208, cbSceneParam._m0[_2239].w, fma(_2204, cbSceneParam._m0[_2239].z, fma(_2200, cbSceneParam._m0[_2239].y, _2196 * cbSceneParam._m0[_2239].x)));
        float _2278 = fma(_2208, cbSceneParam._m0[_2247].w, fma(_2204, cbSceneParam._m0[_2247].z, fma(_2200, cbSceneParam._m0[_2247].y, _2196 * cbSceneParam._m0[_2247].x)));
        float _2286 = fma(_2208, cbSceneParam._m0[_2263].w, fma(_2204, cbSceneParam._m0[_2263].z, fma(_2200, cbSceneParam._m0[_2263].y, _2196 * cbSceneParam._m0[_2263].x)));
        float _2291 = cbSceneParam._m0[33u].z * _2286;
        float _2293 = cbSceneParam._m0[33u].w * _2286;
        float _2296 = fma(_2208, cbSceneParam._m0[_2255].w, fma(_2204, cbSceneParam._m0[_2255].z, fma(_2200, cbSceneParam._m0[_2255].y, _2196 * cbSceneParam._m0[_2255].x))) / _2286;
        float _2344 = (cbSceneParam._m0[33u].x - sqrt(((_2210 * _2210) + (_2209 * _2209)) + (_2211 * _2211))) * cbSceneParam._m0[33u].y;
        float _4799 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
        float _2351 = (isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2291 + _2274) / _2286, (_2293 + _2278) / _2286), _2296), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2293 + _2274) / _2286, (_2278 - _2291) / _2286), _2296), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2274 - _2291) / _2286, (_2278 - _2293) / _2286), _2296), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2274 - _2293) / _2286, (_2291 + _2278) / _2286), _2296), 0.0)).x), vec4(0.25)));
        _2358 = 1.0 - (_2351 * cbSceneParam._m0[34u].x);
        _2359 = 1.0 - (_2351 * cbSceneParam._m0[34u].y);
        _2360 = 1.0 - (_2351 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2358 = 1.0;
        _2359 = 1.0;
        _2360 = 1.0;
    }
    float _2424;
    float _2426;
    float _2428;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2412 = fma(_2208, cbSceneParam._m0[63u].w, fma(_2204, cbSceneParam._m0[63u].z, fma(_2200, cbSceneParam._m0[63u].y, _2196 * cbSceneParam._m0[63u].x)));
        float _2413 = fma(_2208, cbSceneParam._m0[60u].w, fma(_2204, cbSceneParam._m0[60u].z, fma(_2200, cbSceneParam._m0[60u].y, _2196 * cbSceneParam._m0[60u].x))) / _2412;
        float _2414 = fma(_2208, cbSceneParam._m0[61u].w, fma(_2204, cbSceneParam._m0[61u].z, fma(_2200, cbSceneParam._m0[61u].y, _2196 * cbSceneParam._m0[61u].x))) / _2412;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2413 >= cbSceneParam._m0[64u].x) && (_2414 >= cbSceneParam._m0[64u].y)) && (_2413 <= cbSceneParam._m0[64u].z)) && (_2414 <= cbSceneParam._m0[64u].w))
        {
            float _2552 = fma(_2208, cbSceneParam._m0[62u].w, fma(_2204, cbSceneParam._m0[62u].z, fma(_2200, cbSceneParam._m0[62u].y, _2196 * cbSceneParam._m0[62u].x))) / _2412;
            float _2556 = isnan(cbSceneParam._m0[41u].w) ? _2552 : (isnan(_2552) ? cbSceneParam._m0[41u].w : max(_2552, cbSceneParam._m0[41u].w));
            float _2599 = (cbSceneParam._m0[33u].x - sqrt(((_2210 * _2210) + (_2209 * _2209)) + (_2211 * _2211))) * cbSceneParam._m0[33u].y;
            float _4815 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
            float _2606 = (isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2413, cbSceneParam._m0[33u].w + _2414), _2556), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2413, _2414 - cbSceneParam._m0[33u].z), _2556), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2413 - cbSceneParam._m0[33u].z, _2414 - cbSceneParam._m0[33u].w), _2556), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2413 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2414), _2556), 0.0)).x), vec4(0.25)));
            float _2610 = 1.0 - (_2606 * cbSceneParam._m0[34u].x);
            float _2611 = 1.0 - (_2606 * cbSceneParam._m0[34u].y);
            float _2612 = 1.0 - (_2606 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2612) ? _2360 : (isnan(_2360) ? _2612 : min(_2360, _2612));
            frontier_phi_37_36_ladder_1 = isnan(_2611) ? _2359 : (isnan(_2359) ? _2611 : min(_2359, _2611));
            frontier_phi_37_36_ladder_2 = isnan(_2610) ? _2358 : (isnan(_2358) ? _2610 : min(_2358, _2610));
        }
        else
        {
            frontier_phi_37_36_ladder = _2360;
            frontier_phi_37_36_ladder_1 = _2359;
            frontier_phi_37_36_ladder_2 = _2358;
        }
        _2424 = frontier_phi_37_36_ladder_2;
        _2426 = frontier_phi_37_36_ladder_1;
        _2428 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2424 = _2358;
        _2426 = _2359;
        _2428 = _2360;
    }
    uvec4 _2433 = floatBitsToUint(cbInstanceData._m0[_289 + 5u]);
    uint _2435 = _2433.x * 14u;
    uint _2436 = _2435 + 13u;
    float _2443 = _1104 + (-1.0);
    float _2448 = (cbLight._m0[_2436].x * _2443) + 1.0;
    float _2449 = (cbLight._m0[_2436].y * _2443) + 1.0;
    float _2450 = (cbLight._m0[_2436].z * _2443) + 1.0;
    float _2451 = (cbLight._m0[_2436].w * _2443) + 1.0;
    uint _2452 = _2435 + 5u;
    float _2458 = isnan(1.0) ? _2449 : (isnan(_2449) ? 1.0 : min(_2449, 1.0));
    uint _2462 = _2435 + 4u;
    float _2471 = isnan(1.0) ? _2448 : (isnan(_2448) ? 1.0 : min(_2448, 1.0));
    uint _2475 = _2435 | 1u;
    float _2486 = dot(vec3(cbLight._m0[_2435].xyz), vec3(_927, _928, _929));
    float _2489 = dot(vec3(cbLight._m0[_2475].xyz), vec3(_927, _928, _929));
    float _4851 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
    float _4862 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
    float _2494 = (isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0))) * 0.3183098733425140380859375;
    float _2496 = (isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0))) * 0.3183098733425140380859375;
    float _2503 = ((cbLight._m0[_2452].x * _2458) * _2496) + (((cbLight._m0[_2462].x * _2424) * _2471) * _2494);
    float _2504 = ((_2458 * cbLight._m0[_2452].y) * _2496) + (((cbLight._m0[_2462].y * _2426) * _2471) * _2494);
    float _2505 = ((_2458 * cbLight._m0[_2452].z) * _2496) + (((cbLight._m0[_2462].z * _2428) * _2471) * _2494);
    uvec4 _2509 = floatBitsToUint(cbLight._m0[_2435 + 12u]);
    bool _2511 = _2509.x == 0u;
    float _2613;
    float _2615;
    float _2617;
    if (_2511)
    {
        _2613 = _2503;
        _2615 = _2504;
        _2617 = _2505;
    }
    else
    {
        uint _2621 = _2435 + 6u;
        float _2637 = (dot(vec3(cbLight._m0[_2435 + 2u].xyz), vec3(_927, _928, _929)) * 0.5) + 0.5;
        float _2638 = _2637 * _2637;
        float _4873 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2639 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
        float _2640 = isnan(1.0) ? _2450 : (isnan(_2450) ? 1.0 : min(_2450, 1.0));
        _2613 = (((cbLight._m0[_2621].x * 0.3183098733425140380859375) * _2639) * _2640) + _2503;
        _2615 = (((cbLight._m0[_2621].y * 0.3183098733425140380859375) * _2639) * _2640) + _2504;
        _2617 = (((cbLight._m0[_2621].z * 0.3183098733425140380859375) * _2639) * _2640) + _2505;
    }
    bool _2620 = _2509.y == 0u;
    float _2675;
    float _2677;
    float _2679;
    if (_2620)
    {
        _2675 = _2613;
        _2677 = _2615;
        _2679 = _2617;
    }
    else
    {
        uint _2848 = _2435 + 7u;
        float _2864 = (dot(vec3(cbLight._m0[_2435 + 3u].xyz), vec3(_927, _928, _929)) * 0.5) + 0.5;
        float _2865 = _2864 * _2864;
        float _4889 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
        float _2866 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
        float _2867 = isnan(1.0) ? _2451 : (isnan(_2451) ? 1.0 : min(_2451, 1.0));
        _2675 = (((cbLight._m0[_2848].x * 0.3183098733425140380859375) * _2866) * _2867) + _2613;
        _2677 = (((cbLight._m0[_2848].y * 0.3183098733425140380859375) * _2866) * _2867) + _2615;
        _2679 = (((cbLight._m0[_2848].z * 0.3183098733425140380859375) * _2866) * _2867) + _2617;
    }
    uint _2682 = _2435 + 8u;
    float _2695 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2435].w)) * _930) * 0.949999988079071044921875);
    float _2696 = _2695 * _2695;
    float _2697 = cbLight._m0[_2435].x + _1006;
    float _2698 = cbLight._m0[_2435].y + _1007;
    float _2699 = cbLight._m0[_2435].z + _1008;
    float _2703 = inversesqrt(dot(vec3(_2697, _2698, _2699), vec3(_2697, _2698, _2699)));
    float _2704 = _2703 * _2697;
    float _2705 = _2703 * _2698;
    float _2706 = _2703 * _2699;
    float _2707 = dot(vec3(_927, _928, _929), vec3(cbLight._m0[_2435].xyz));
    float _4905 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
    float _2710 = isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0));
    float _4916 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    float _2711 = isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0));
    float _2712 = dot(vec3(_927, _928, _929), vec3(_2704, _2705, _2706));
    float _4927 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
    float _2715 = isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0));
    float _2716 = dot(vec3(cbLight._m0[_2435].xyz), vec3(_2704, _2705, _2706));
    float _4938 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
    float _2720 = _2696 * _2696;
    float _2724 = ((_2715 * _2715) * (_2720 + (-1.0))) + 1.0;
    float _2732 = exp2(log2(1.0 - (isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0)))) * 5.0);
    float _2733 = 0.959999978542327880859375 - _1085;
    float _2735 = 0.959999978542327880859375 - _1086;
    float _2736 = 0.959999978542327880859375 - _1087;
    float _2743 = 1.0 - _2696;
    float _2754 = (0.5 / (((_2711 * ((_2710 * _2743) + _2696)) + 9.9999999392252902907785028219223e-09) + (((_2711 * _2743) + _2696) * _2710))) * _2710;
    float _4949 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
    float _2756 = (isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0))) * (_2720 / ((_2724 * _2724) * 3.141590118408203125));
    uint _2770 = _2435 + 9u;
    float _2781 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2475].w)) * _930) * 0.949999988079071044921875);
    float _2782 = _2781 * _2781;
    float _2783 = cbLight._m0[_2475].x + _1006;
    float _2784 = cbLight._m0[_2475].y + _1007;
    float _2785 = cbLight._m0[_2475].z + _1008;
    float _2789 = inversesqrt(dot(vec3(_2783, _2784, _2785), vec3(_2783, _2784, _2785)));
    float _2790 = _2789 * _2783;
    float _2791 = _2789 * _2784;
    float _2792 = _2789 * _2785;
    float _2793 = dot(vec3(_927, _928, _929), vec3(cbLight._m0[_2475].xyz));
    float _4960 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
    float _2796 = isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0));
    float _2797 = dot(vec3(_927, _928, _929), vec3(_2790, _2791, _2792));
    float _4971 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
    float _2800 = isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0));
    float _2801 = dot(vec3(cbLight._m0[_2475].xyz), vec3(_2790, _2791, _2792));
    float _4982 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
    float _2805 = _2782 * _2782;
    float _2809 = ((_2800 * _2800) * (_2805 + (-1.0))) + 1.0;
    float _2816 = exp2(log2(1.0 - (isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0)))) * 5.0);
    float _2823 = 1.0 - _2782;
    float _2833 = (0.5 / (((_2711 * ((_2796 * _2823) + _2782)) + 9.9999999392252902907785028219223e-09) + (((_2711 * _2823) + _2782) * _2796))) * _2796;
    float _4993 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
    float _2835 = (isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0))) * (_2805 / ((_2809 * _2809) * 3.141590118408203125));
    float _2845 = (((((_2816 * _2733) + _1088) * cbLight._m0[_2770].x) * _2835) * _2458) + ((((cbLight._m0[_2682].x * _2424) * ((_2732 * _2733) + _1088)) * _2756) * _2471);
    float _2846 = (((((_2816 * _2735) + _1090) * cbLight._m0[_2770].y) * _2835) * _2458) + ((((cbLight._m0[_2682].y * _2426) * ((_2732 * _2735) + _1090)) * _2756) * _2471);
    float _2847 = (((((_2816 * _2736) + _1091) * cbLight._m0[_2770].z) * _2835) * _2458) + ((((cbLight._m0[_2682].z * _2428) * ((_2732 * _2736) + _1091)) * _2756) * _2471);
    float _2903;
    float _2905;
    float _2907;
    if (_2511)
    {
        _2903 = _2845;
        _2905 = _2846;
        _2907 = _2847;
    }
    else
    {
        uint _2909 = _2435 + 2u;
        uint _2913 = _2435 + 10u;
        float _2927 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2909].w)) * _930) * 0.949999988079071044921875);
        float _2928 = _2927 * _2927;
        float _2929 = cbLight._m0[_2909].x + _1006;
        float _2930 = cbLight._m0[_2909].y + _1007;
        float _2931 = cbLight._m0[_2909].z + _1008;
        float _2935 = inversesqrt(dot(vec3(_2929, _2930, _2931), vec3(_2929, _2930, _2931)));
        float _2936 = _2935 * _2929;
        float _2937 = _2935 * _2930;
        float _2938 = _2935 * _2931;
        float _2939 = dot(vec3(_927, _928, _929), vec3(cbLight._m0[_2909].xyz));
        float _5004 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
        float _2942 = isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0));
        float _2943 = dot(vec3(_927, _928, _929), vec3(_2936, _2937, _2938));
        float _5015 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
        float _2946 = isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0));
        float _2947 = dot(vec3(cbLight._m0[_2909].xyz), vec3(_2936, _2937, _2938));
        float _5026 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
        float _2951 = _2928 * _2928;
        float _2955 = ((_2946 * _2946) * (_2951 + (-1.0))) + 1.0;
        float _2962 = exp2(log2(1.0 - (isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0)))) * 5.0);
        float _2969 = 1.0 - _2928;
        float _2979 = (0.5 / (((_2711 * ((_2942 * _2969) + _2928)) + 9.9999999392252902907785028219223e-09) + (((_2711 * _2969) + _2928) * _2942))) * _2942;
        float _5037 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
        float _2981 = (isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0))) * (_2951 / ((_2955 * _2955) * 3.141590118408203125));
        float _2982 = isnan(1.0) ? _2450 : (isnan(_2450) ? 1.0 : min(_2450, 1.0));
        _2903 = (((((_2962 * _2733) + _1088) * cbLight._m0[_2913].x) * _2981) * _2982) + _2845;
        _2905 = (((((_2962 * _2735) + _1090) * cbLight._m0[_2913].y) * _2981) * _2982) + _2846;
        _2907 = (((((_2962 * _2736) + _1091) * cbLight._m0[_2913].z) * _2981) * _2982) + _2847;
    }
    float _3013;
    float _3015;
    float _3017;
    if (_2620)
    {
        _3013 = _2903;
        _3015 = _2905;
        _3017 = _2907;
    }
    else
    {
        uint _3024 = _2435 + 3u;
        uint _3028 = _2435 + 11u;
        float _3042 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3024].w)) * _930) * 0.949999988079071044921875);
        float _3043 = _3042 * _3042;
        float _3044 = cbLight._m0[_3024].x + _1006;
        float _3045 = cbLight._m0[_3024].y + _1007;
        float _3046 = cbLight._m0[_3024].z + _1008;
        float _3050 = inversesqrt(dot(vec3(_3044, _3045, _3046), vec3(_3044, _3045, _3046)));
        float _3051 = _3050 * _3044;
        float _3052 = _3050 * _3045;
        float _3053 = _3050 * _3046;
        float _3054 = dot(vec3(_927, _928, _929), vec3(cbLight._m0[_3024].xyz));
        float _5053 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
        float _3057 = isnan(1.0) ? _5053 : (isnan(_5053) ? 1.0 : min(_5053, 1.0));
        float _3058 = dot(vec3(_927, _928, _929), vec3(_3051, _3052, _3053));
        float _5064 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
        float _3061 = isnan(1.0) ? _5064 : (isnan(_5064) ? 1.0 : min(_5064, 1.0));
        float _3062 = dot(vec3(cbLight._m0[_3024].xyz), vec3(_3051, _3052, _3053));
        float _5075 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
        float _3066 = _3043 * _3043;
        float _3070 = ((_3061 * _3061) * (_3066 + (-1.0))) + 1.0;
        float _3077 = exp2(log2(1.0 - (isnan(1.0) ? _5075 : (isnan(_5075) ? 1.0 : min(_5075, 1.0)))) * 5.0);
        float _3084 = 1.0 - _3043;
        float _3094 = (0.5 / (((_2711 * ((_3057 * _3084) + _3043)) + 9.9999999392252902907785028219223e-09) + (((_2711 * _3084) + _3043) * _3057))) * _3057;
        float _5086 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
        float _3096 = (isnan(1.0) ? _5086 : (isnan(_5086) ? 1.0 : min(_5086, 1.0))) * (_3066 / ((_3070 * _3070) * 3.141590118408203125));
        float _3097 = isnan(1.0) ? _2451 : (isnan(_2451) ? 1.0 : min(_2451, 1.0));
        _3013 = (((((_3077 * _2733) + _1088) * cbLight._m0[_3028].x) * _3096) * _3097) + _2903;
        _3015 = (((((_3077 * _2735) + _1090) * cbLight._m0[_3028].y) * _3096) * _3097) + _2905;
        _3017 = (((((_3077 * _2736) + _1091) * cbLight._m0[_3028].z) * _3096) * _3097) + _2907;
    }
    float _3163;
    float _3165;
    float _3167;
    float _3169;
    float _3171;
    float _3173;
    if (_2433.y == 0u)
    {
        uvec4 _3118 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3119 = _3118.x;
        uint _3130 = uint((float(_3118.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1027) / _3119))) + floor(float(uint(cbSceneParam._m0[85u].x * _1026) / _3119)));
        float _3140 = (log2(_2211 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3141 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
        uint _3144 = uint(isnan(14.0) ? _3141 : (isnan(_3141) ? 14.0 : min(_3141, 14.0)));
        uvec4 _3149 = texelFetch(g_lightClusterGridBuffer, int(((_3144 << 2u) + (_3130 << 6u)) >> 2u));
        uint _3150 = _3149.x;
        uint _3151 = _3118.z;
        float _3230;
        float _3232;
        float _3234;
        float _3236;
        float _3238;
        float _3240;
        if (((((1u << ((_3151 >> 4u) & 15u)) + 4294967295u) & _3150) == 0u) || ((_3151 & 240u) == 0u))
        {
            _3230 = 0.0;
            _3232 = 0.0;
            _3234 = 0.0;
            _3236 = 0.0;
            _3238 = 0.0;
            _3240 = 0.0;
        }
        else
        {
            float _3231;
            float _3233;
            float _3235;
            float _3237;
            float _3239;
            float _3241;
            float _3382 = 0.0;
            float _3383 = 0.0;
            float _3384 = 0.0;
            float _3385 = 0.0;
            float _3386 = 0.0;
            float _3387 = 0.0;
            uint _3388 = 0u;
            uint _3397;
            bool _3398;
            for (;;)
            {
                _3397 = texelFetch(g_lightClassification, int((((_3144 << 5u) + (_3130 << 9u)) + (_3388 << 2u)) >> 2u)).x;
                _3398 = _3397 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3398)
                {
                    frontier_phi_71_pred = _3387;
                    frontier_phi_71_pred_1 = _3386;
                    frontier_phi_71_pred_2 = _3385;
                    frontier_phi_71_pred_3 = _3384;
                    frontier_phi_71_pred_4 = _3383;
                    frontier_phi_71_pred_5 = _3382;
                }
                else
                {
                    float _3527;
                    float _3528;
                    float _3529;
                    float _3530;
                    float _3531;
                    float _3532;
                    uint _3533;
                    _3527 = _3382;
                    _3528 = _3383;
                    _3529 = _3384;
                    _3530 = _3385;
                    _3531 = _3386;
                    _3532 = _3387;
                    _3533 = _3397;
                    float _3454;
                    float _3455;
                    float _3456;
                    float _3457;
                    float _3458;
                    float _3459;
                    for (;;)
                    {
                        uint _3537 = uint(findLSB(_3533)) + (_3388 << 5u);
                        uint _3534 = (_3533 + 4294967295u) & _3533;
                        uint _3539 = _3537 * 48u;
                        vec4 _3553 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3539)).x, texelFetch(g_PointLightRenderingBuffer, int(_3539 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3539 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3539 + 3u)).x));
                        uint _3559 = (_3537 * 48u) + 4u;
                        vec4 _3572 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3559)).x, texelFetch(g_PointLightRenderingBuffer, int(_3559 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3559 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3559 + 3u)).x));
                        uint _3578 = (_3537 * 48u) + 8u;
                        vec3 _3589 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3578)).x, texelFetch(g_PointLightRenderingBuffer, int(_3578 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3578 + 2u)).x));
                        float _3593 = _3553.x - _2209;
                        float _3594 = _3553.y - _2210;
                        float _3595 = _3553.z - _2211;
                        float _3596 = dot(vec3(_3593, _3594, _3595), vec3(_3593, _3594, _3595));
                        float _3599 = inversesqrt(_3596);
                        float _3600 = _3599 * _3593;
                        float _3601 = _3599 * _3594;
                        float _3602 = _3599 * _3595;
                        float _3603 = dot(vec3(_1045, _1048, _1051), vec3(_3600, _3601, _3602));
                        float _3608 = 1.0 - (_3596 * _3553.w);
                        float _5112 = isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0));
                        float _3609 = isnan(1.0) ? _5112 : (isnan(_5112) ? 1.0 : min(_5112, 1.0));
                        float _3610 = sqrt(_3596) * _3572.w;
                        float _3613 = 1.39999997615814208984375 / (_3610 + 1.39999997615814208984375);
                        float _3614 = _3613 * _3613;
                        float _3617 = ((1.0 - _3614) * _3603) + _3614;
                        float _3620 = _3610 * _3610;
                        float _3624 = ((isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0))) * _3609) / ((_3620 * 0.699999988079071044921875) + 1.0);
                        float _3628 = (-0.0) - _2209;
                        float _3629 = (-0.0) - _2210;
                        float _3630 = (-0.0) - _2211;
                        float _3634 = inversesqrt(dot(vec3(_3628, _3629, _3630), vec3(_3628, _3629, _3630)));
                        float _3635 = _3634 * _3628;
                        float _3636 = _3634 * _3629;
                        float _3637 = _3634 * _3630;
                        float _3644 = exp2(log2(1.0 / ((_3620 * 3.5) + 5.0)) * 0.25);
                        float _3645 = 1.0 - _1120;
                        float _3652 = sqrt(1.0 - ((1.0 - (_3645 * _3645)) * (1.0 - (_3644 * _3644))));
                        float _3653 = _3652 * _3652;
                        float _3654 = _3653 * _3653;
                        float _3655 = _3635 + _3600;
                        float _3656 = _3636 + _3601;
                        float _3657 = _3637 + _3602;
                        float _3661 = inversesqrt(dot(vec3(_3655, _3656, _3657), vec3(_3655, _3656, _3657)));
                        float _3665 = dot(vec3(_1045, _1048, _1051), vec3(_3635, _3636, _3637));
                        float _5128 = isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0));
                        float _3668 = isnan(1.0) ? _5128 : (isnan(_5128) ? 1.0 : min(_5128, 1.0));
                        float _3669 = dot(vec3(_1045, _1048, _1051), vec3(_3661 * _3655, _3661 * _3656, _3661 * _3657));
                        float _5139 = isnan(0.0) ? _3669 : (isnan(_3669) ? 0.0 : max(_3669, 0.0));
                        float _3672 = isnan(1.0) ? _5139 : (isnan(_5139) ? 1.0 : min(_5139, 1.0));
                        float _3676 = ((_3672 * _3672) * (_3654 + (-1.0))) + 1.0;
                        float _3677 = _3613 * _3653;
                        float _3678 = _3677 * _3677;
                        float _3681 = ((1.0 - _3678) * _3603) + _3678;
                        float _5150 = isnan(0.0) ? _3681 : (isnan(_3681) ? 0.0 : max(_3681, 0.0));
                        float _3682 = isnan(1.0) ? _5150 : (isnan(_5150) ? 1.0 : min(_5150, 1.0));
                        float _3683 = 1.0 - _3653;
                        float _3693 = (0.5 / (((_3682 * ((_3668 * _3683) + _3653)) + 9.9999999392252902907785028219223e-09) + (((_3682 * _3683) + _3653) * _3668))) * _3682;
                        float _5161 = isnan(0.0) ? _3693 : (isnan(_3693) ? 0.0 : max(_3693, 0.0));
                        float _3704 = (((_3654 * 3.1415927410125732421875) * (isnan(1.0) ? _5161 : (isnan(_5161) ? 1.0 : min(_5161, 1.0)))) / ((_3676 * _3676) * ((_3620 * 2.1991131305694580078125) + 3.141590118408203125))) * _3609;
                        _3457 = (_3624 * _3572.x) + _3530;
                        _3458 = (_3624 * _3572.y) + _3531;
                        _3459 = (_3624 * _3572.z) + _3532;
                        _3454 = (_3704 * _3589.x) + _3527;
                        _3455 = (_3704 * _3589.y) + _3528;
                        _3456 = (_3704 * _3589.z) + _3529;
                        if (_3534 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3527 = _3454;
                            _3528 = _3455;
                            _3529 = _3456;
                            _3530 = _3457;
                            _3531 = _3458;
                            _3532 = _3459;
                            _3533 = _3534;
                        }
                    }
                    frontier_phi_71_pred = _3459;
                    frontier_phi_71_pred_1 = _3458;
                    frontier_phi_71_pred_2 = _3457;
                    frontier_phi_71_pred_3 = _3456;
                    frontier_phi_71_pred_4 = _3455;
                    frontier_phi_71_pred_5 = _3454;
                }
                _3241 = frontier_phi_71_pred;
                _3239 = frontier_phi_71_pred_1;
                _3237 = frontier_phi_71_pred_2;
                _3235 = frontier_phi_71_pred_3;
                _3233 = frontier_phi_71_pred_4;
                _3231 = frontier_phi_71_pred_5;
                uint _3389 = _3388 + 1u;
                if (_3389 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3382 = _3231;
                    _3383 = _3233;
                    _3384 = _3235;
                    _3385 = _3237;
                    _3386 = _3239;
                    _3387 = _3241;
                    _3388 = _3389;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3230 = _3231;
            _3232 = _3233;
            _3234 = _3235;
            _3236 = _3237;
            _3238 = _3239;
            _3240 = _3241;
        }
        uvec4 _3244 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3245 = _3244.z;
        uint _3247 = (_3245 >> 8u) & 15u;
        float _3350;
        float _3352;
        float _3354;
        float _3356;
        float _3358;
        float _3360;
        if (((4294967295u << _3247) & _3150) == 0u)
        {
            _3350 = _3230;
            _3352 = _3232;
            _3354 = _3234;
            _3356 = _3236;
            _3358 = _3238;
            _3360 = _3240;
        }
        else
        {
            float _3375 = inversesqrt(dot(vec3(_2209, _2210, _2211), vec3(_2209, _2210, _2211)));
            float _3376 = _3375 * _2209;
            float _3377 = _3375 * _2210;
            float _3378 = _3375 * _2211;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3247 < ((_3245 >> 12u) & 15u))
            {
                float _3351;
                float _3353;
                float _3355;
                float _3357;
                float _3359;
                float _3361;
                float _3510 = _3230;
                float _3511 = _3232;
                float _3512 = _3234;
                float _3513 = _3236;
                float _3514 = _3238;
                float _3515 = _3240;
                uint _3516 = _3247;
                uint _3525;
                bool _3526;
                for (;;)
                {
                    _3525 = texelFetch(g_lightClassification, int((((_3144 << 5u) + (_3130 << 9u)) + (_3516 << 2u)) >> 2u)).x;
                    _3526 = _3525 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3526)
                    {
                        frontier_phi_82_pred = _3515;
                        frontier_phi_82_pred_1 = _3514;
                        frontier_phi_82_pred_2 = _3513;
                        frontier_phi_82_pred_3 = _3512;
                        frontier_phi_82_pred_4 = _3511;
                        frontier_phi_82_pred_5 = _3510;
                    }
                    else
                    {
                        float _3718;
                        float _3719;
                        float _3720;
                        float _3721;
                        float _3722;
                        float _3723;
                        float _4011;
                        float _4012;
                        float _4013;
                        float _4014;
                        float _4015;
                        float _4016;
                        float _3731 = _3510;
                        float _3732 = _3511;
                        float _3733 = _3512;
                        float _3734 = _3513;
                        float _3735 = _3514;
                        float _3736 = _3515;
                        uint _3737 = _3525;
                        uint _3738;
                        vec4 _3763;
                        float _3764;
                        vec4 _3779;
                        vec3 _3791;
                        vec4 _3806;
                        vec4 _3821;
                        float _3867;
                        bool _3868;
                        for (;;)
                        {
                            uint _3748 = ((_3516 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3737));
                            _3738 = (_3737 + 4294967295u) & _3737;
                            uint _3750 = _3748 * 40u;
                            _3763 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3750)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3750 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3750 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3750 + 3u)).x));
                            _3764 = _3763.w;
                            uint _3766 = (_3748 * 40u) + 4u;
                            _3779 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3766)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3766 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3766 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3766 + 3u)).x));
                            uint _3781 = (_3748 * 40u) + 8u;
                            _3791 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3781)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3781 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3781 + 2u)).x));
                            uint _3793 = (_3748 * 40u) + 16u;
                            _3806 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3793)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3793 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3793 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3793 + 3u)).x));
                            uint _3808 = (_3748 * 40u) + 20u;
                            _3821 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3808)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3808 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3808 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3808 + 3u)).x));
                            uint _3823 = (_3748 * 40u) + 24u;
                            vec4 _3836 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3823)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3823 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3823 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3823 + 3u)).x));
                            uint _3842 = (_3748 * 40u) + 28u;
                            vec4 _3855 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3842)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3842 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3842 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3842 + 3u)).x));
                            _3867 = fma(_2211, _3855.z, fma(_2210, _3855.y, _3855.x * _2209)) + _3855.w;
                            _3868 = !((fma(_2211, _3836.z, fma(_2210, _3836.y, _3836.x * _2209)) + _3836.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3868)
                            {
                                float _3895 = _3763.x - _2209;
                                float _3896 = _3763.y - _2210;
                                float _3897 = _3763.z - _2211;
                                float _3898 = dot(vec3(_3895, _3896, _3897), vec3(_3895, _3896, _3897));
                                float _3901 = inversesqrt(_3898);
                                float _3902 = _3901 * _3895;
                                float _3903 = _3901 * _3896;
                                float _3904 = _3901 * _3897;
                                float _3908 = 1.0 - (_3898 / (_3764 * _3764));
                                float _5172 = isnan(0.0) ? _3908 : (isnan(_3908) ? 0.0 : max(_3908, 0.0));
                                float _3909 = isnan(1.0) ? _5172 : (isnan(_5172) ? 1.0 : min(_5172, 1.0));
                                float _3913 = sqrt(_3898) * _3779.w;
                                float _3915 = 1.39999997615814208984375 / (_3913 + 1.39999997615814208984375);
                                float _3916 = _3915 * _3915;
                                float _3919 = ((1.0 - _3916) * dot(vec3(_3902, _3903, _3904), vec3(_1045, _1048, _1051))) + _3916;
                                float _3922 = _3913 * _3913;
                                float _3926 = (fma(_2211, _3806.z, fma(_2210, _3806.y, _3806.x * _2209)) + _3806.w) / _3867;
                                float _3927 = (fma(_2211, _3821.z, fma(_2210, _3821.y, _3821.x * _2209)) + _3821.w) / _3867;
                                float _3931 = 1.0 - dot(vec2(_3926, _3927), vec2(_3926, _3927));
                                float _5188 = isnan(0.0) ? _3931 : (isnan(_3931) ? 0.0 : max(_3931, 0.0));
                                float _3932 = isnan(1.0) ? _5188 : (isnan(_5188) ? 1.0 : min(_5188, 1.0));
                                float _3933 = _3932 * (((isnan(0.0) ? _3919 : (isnan(_3919) ? 0.0 : max(_3919, 0.0))) * _3909) / ((_3922 * 0.699999988079071044921875) + 1.0));
                                float _3945 = exp2(log2(1.0 / ((_3922 * 3.5) + 5.0)) * 0.25);
                                float _3946 = 1.0 - _1120;
                                float _3953 = sqrt(1.0 - ((1.0 - (_3946 * _3946)) * (1.0 - (_3945 * _3945))));
                                float _3954 = _3953 * _3953;
                                float _3955 = _3954 * _3954;
                                float _3956 = _3902 - _3376;
                                float _3957 = _3903 - _3377;
                                float _3958 = _3904 - _3378;
                                float _3962 = inversesqrt(dot(vec3(_3956, _3957, _3958), vec3(_3956, _3957, _3958)));
                                float _3966 = dot(vec3(_1045, _1048, _1051), vec3((-0.0) - _3376, (-0.0) - _3377, (-0.0) - _3378));
                                float _5199 = isnan(0.0) ? _3966 : (isnan(_3966) ? 0.0 : max(_3966, 0.0));
                                float _3969 = isnan(1.0) ? _5199 : (isnan(_5199) ? 1.0 : min(_5199, 1.0));
                                float _3970 = dot(vec3(_1045, _1048, _1051), vec3(_3962 * _3956, _3962 * _3957, _3962 * _3958));
                                float _5210 = isnan(0.0) ? _3970 : (isnan(_3970) ? 0.0 : max(_3970, 0.0));
                                float _3973 = isnan(1.0) ? _5210 : (isnan(_5210) ? 1.0 : min(_5210, 1.0));
                                float _3977 = ((_3973 * _3973) * (_3955 + (-1.0))) + 1.0;
                                float _3978 = _3915 * _3954;
                                float _3979 = _3978 * _3978;
                                float _3985 = ((1.0 - _3979) * dot(vec3(_1045, _1048, _1051), vec3(_3902, _3903, _3904))) + _3979;
                                float _5221 = isnan(0.0) ? _3985 : (isnan(_3985) ? 0.0 : max(_3985, 0.0));
                                float _3986 = isnan(1.0) ? _5221 : (isnan(_5221) ? 1.0 : min(_5221, 1.0));
                                float _3987 = 1.0 - _3954;
                                float _3997 = (0.5 / (((_3986 * ((_3969 * _3987) + _3954)) + 9.9999999392252902907785028219223e-09) + (((_3986 * _3987) + _3954) * _3969))) * _3986;
                                float _5232 = isnan(0.0) ? _3997 : (isnan(_3997) ? 0.0 : max(_3997, 0.0));
                                float _4007 = (_3932 * _3909) * (((_3955 * 3.1415927410125732421875) * (isnan(1.0) ? _5232 : (isnan(_5232) ? 1.0 : min(_5232, 1.0)))) / ((_3977 * _3977) * ((_3922 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3933 * _3779.z;
                                frontier_phi_88_pred_1 = _3933 * _3779.y;
                                frontier_phi_88_pred_2 = _3933 * _3779.x;
                                frontier_phi_88_pred_3 = _4007 * _3791.z;
                                frontier_phi_88_pred_4 = _4007 * _3791.y;
                                frontier_phi_88_pred_5 = _4007 * _3791.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4016 = frontier_phi_88_pred;
                            _4015 = frontier_phi_88_pred_1;
                            _4014 = frontier_phi_88_pred_2;
                            _4013 = frontier_phi_88_pred_3;
                            _4012 = frontier_phi_88_pred_4;
                            _4011 = frontier_phi_88_pred_5;
                            _3721 = _4014 + _3734;
                            _3722 = _4015 + _3735;
                            _3723 = _4016 + _3736;
                            _3718 = _4011 + _3731;
                            _3719 = _4012 + _3732;
                            _3720 = _4013 + _3733;
                            if (_3738 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3731 = _3718;
                                _3732 = _3719;
                                _3733 = _3720;
                                _3734 = _3721;
                                _3735 = _3722;
                                _3736 = _3723;
                                _3737 = _3738;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3723;
                        frontier_phi_82_pred_1 = _3722;
                        frontier_phi_82_pred_2 = _3721;
                        frontier_phi_82_pred_3 = _3720;
                        frontier_phi_82_pred_4 = _3719;
                        frontier_phi_82_pred_5 = _3718;
                    }
                    _3361 = frontier_phi_82_pred;
                    _3359 = frontier_phi_82_pred_1;
                    _3357 = frontier_phi_82_pred_2;
                    _3355 = frontier_phi_82_pred_3;
                    _3353 = frontier_phi_82_pred_4;
                    _3351 = frontier_phi_82_pred_5;
                    uint _3517 = _3516 + 1u;
                    if (_3517 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3510 = _3351;
                        _3511 = _3353;
                        _3512 = _3355;
                        _3513 = _3357;
                        _3514 = _3359;
                        _3515 = _3361;
                        _3516 = _3517;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3357;
                frontier_phi_63_64_ladder_1 = _3361;
                frontier_phi_63_64_ladder_2 = _3359;
                frontier_phi_63_64_ladder_3 = _3355;
                frontier_phi_63_64_ladder_4 = _3353;
                frontier_phi_63_64_ladder_5 = _3351;
            }
            else
            {
                frontier_phi_63_64_ladder = _3236;
                frontier_phi_63_64_ladder_1 = _3240;
                frontier_phi_63_64_ladder_2 = _3238;
                frontier_phi_63_64_ladder_3 = _3234;
                frontier_phi_63_64_ladder_4 = _3232;
                frontier_phi_63_64_ladder_5 = _3230;
            }
            _3350 = frontier_phi_63_64_ladder_5;
            _3352 = frontier_phi_63_64_ladder_4;
            _3354 = frontier_phi_63_64_ladder_3;
            _3356 = frontier_phi_63_64_ladder;
            _3358 = frontier_phi_63_64_ladder_2;
            _3360 = frontier_phi_63_64_ladder_1;
        }
        float _3365 = isnan(1.0) ? _1104 : (isnan(_1104) ? 1.0 : min(_1104, 1.0));
        _3163 = (_3365 * _3356) + _2675;
        _3165 = (_3365 * _3358) + _2677;
        _3167 = (_3365 * _3360) + _2679;
        _3169 = ((_3350 * _1088) * _3365) + _3013;
        _3171 = ((_3352 * _1090) * _3365) + _3015;
        _3173 = ((_3354 * _1091) * _3365) + _3017;
    }
    else
    {
        _3163 = _2675;
        _3165 = _2677;
        _3167 = _2679;
        _3169 = _3013;
        _3171 = _3015;
        _3173 = _3017;
    }
    float _5248 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _5259 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
    float _5270 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
    float _3190 = ((isnan(1.0) ? _5248 : (isnan(_5248) ? 1.0 : min(_5248, 1.0))) * (_3163 + ((isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))) * _1104))) + ((_3169 + ((isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0))) * _1943)) * cbPerFrame._m0[3u].x);
    float _3191 = ((isnan(1.0) ? _5259 : (isnan(_5259) ? 1.0 : min(_5259, 1.0))) * (_3165 + ((isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))) * _1104))) + ((_3171 + ((isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0))) * _1943)) * cbPerFrame._m0[3u].x);
    float _3192 = ((isnan(1.0) ? _5270 : (isnan(_5270) ? 1.0 : min(_5270, 1.0))) * (_3167 + ((isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0))) * _1104))) + ((_3173 + ((isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0))) * _1943)) * cbPerFrame._m0[3u].x);
    uint _3193 = _289 + 6u;
    float _3201 = _1026 / cbSceneParam._m0[86u].x;
    float _3202 = _1027 / cbSceneParam._m0[86u].y;
    vec4 _3216 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3201, _3202, (log2((isnan(cbSceneParam._m0[77u].w) ? _949 : (isnan(_949) ? cbSceneParam._m0[77u].w : min(_949, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3218 = _3216.x;
    float _3219 = _3216.y;
    float _3220 = _3216.z;
    float _3221 = _3216.w;
    float _3292;
    float _3294;
    float _3296;
    float _3298;
    if (_949 > cbSceneParam._m0[78u].w)
    {
        float _3255 = isnan(_949) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _949 : min(cbSceneParam._m0[80u].w, _949));
        float _3256 = _3255 / _949;
        float _3267 = _3256 * _999;
        float _3268 = _1000 * _3256;
        float _3269 = (-0.0) - _3268;
        float _3270 = _3256 * _1001;
        float _3272 = (cbSceneParam._m0[77u].w * _3269) / _3255;
        float _3273 = _3272 + cbSceneParam._m0[79u].w;
        float _3274 = cbSceneParam._m0[79u].w - _3268;
        float _3280 = sqrt(((_3267 * _3267) + (_3268 * _3268)) + (_3270 * _3270));
        float _3283 = (1.0 - (cbSceneParam._m0[77u].w / _3255)) * _3280;
        float _3288 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3290 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3467;
        if (abs((_3269 - _3272) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3467 = ((((_3273 > 0.0) ? exp2(_3288 * _3273) : (2.0 - exp2(_3290 * _3273))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3283;
        }
        else
        {
            float _3411 = 1.0 / cbSceneParam._m0[80u].x;
            float _3412 = isnan(_3274) ? _3273 : (isnan(_3273) ? _3274 : max(_3273, _3274));
            float _3413 = isnan(_3274) ? _3273 : (isnan(_3273) ? _3274 : min(_3273, _3274));
            float _3422 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : min(_3412, 0.0));
            float _3423 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : min(_3413, 0.0));
            _3467 = ((abs(_3280 / _3269) * cbSceneParam._m0[80u].y) * ((((_3422 - _3423) * 2.0) - ((exp2(_3288 * (isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0)))) - exp2(_3288 * (isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0))))) * _3411)) - ((exp2(_3290 * _3422) - exp2(_3290 * _3423)) * _3411))) + (_3283 * cbSceneParam._m0[80u].z);
        }
        vec4 _3469 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3201, _3202, 1.0), 0.0);
        float _3478 = exp2((_3467 * (-1.44269502162933349609375)) * (1.0 - _3469.w));
        float _3479 = log2(_3478);
        float _3495 = log2(_3221);
        _3292 = (exp2(_3495 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3479 * cbSceneParam._m0[78u].x)) * _3469.x) / cbSceneParam._m0[78u].x)) + _3218;
        _3294 = (exp2(_3495 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3479 * cbSceneParam._m0[78u].y)) * _3469.y) / cbSceneParam._m0[78u].y)) + _3219;
        _3296 = (exp2(_3495 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3479 * cbSceneParam._m0[78u].z)) * _3469.z) / cbSceneParam._m0[78u].z)) + _3220;
        _3298 = _3478 * _3221;
    }
    else
    {
        _3292 = _3218;
        _3294 = _3219;
        _3296 = _3220;
        _3298 = _3221;
    }
    bool _3505;
    vec4 _3308;
    vec4 _3330;
    float _3332;
    float _3336;
    float _3337;
    float _3338;
    float _3339;
    bool _3349;
    for (;;)
    {
        _3308 = cbMatDynParam._m0[0u];
        float _3310 = roundEven(_3308.y);
        bool _3311 = _3310 == 3.0;
        float _3312 = log2(_3298);
        float _3319 = exp2(_3312 * cbSceneParam._m0[78u].x) * _3190;
        float _3320 = exp2(_3312 * cbSceneParam._m0[78u].y) * _3191;
        float _3321 = exp2(_3312 * cbSceneParam._m0[78u].z) * _3192;
        float _3328 = _1015 + (-0.5);
        _3330 = cbMtdParam._m0[1u];
        _3332 = _3330.y * _3328;
        float _3335 = (_3310 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3336 = _3335 * (_3311 ? _3319 : (_3319 + (cbSceneParam._m0[72u].w * _3292)));
        _3337 = _3335 * (_3311 ? _3320 : (_3320 + (cbSceneParam._m0[72u].w * _3294)));
        _3338 = _3335 * (_3311 ? _3321 : (_3321 + (cbSceneParam._m0[72u].w * _3296)));
        _3339 = _3328 * 0.999000012874603271484375;
        _3349 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3349)
        {
            if ((cbInstanceData._m0[_289 + 7u].x + _3339) < 0.5)
            {
                _3505 = true;
                break;
            }
        }
        uint _3446 = _1064 + uint(_3308.w);
        if ((cbInstanceData._m0[_3446].w < 1.0) && ((cbInstanceData._m0[_3446].w + _3339) < 0.5))
        {
            _3505 = true;
            break;
        }
        if ((_3332 + 1.0) < _3330.x)
        {
            _3505 = true;
            break;
        }
        _3505 = false;
        break;
    }
    float _3709;
    if (_3505)
    {
        discard_state = true;
        _3709 = 0.0;
    }
    else
    {
        _3709 = cbInstanceData._m0[_3193].w;
    }
    SV_Target.x = _3336;
    SV_Target.y = _3337;
    SV_Target.z = _3338;
    SV_Target.w = _3709;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3193].w;
    discard_exit();
}


