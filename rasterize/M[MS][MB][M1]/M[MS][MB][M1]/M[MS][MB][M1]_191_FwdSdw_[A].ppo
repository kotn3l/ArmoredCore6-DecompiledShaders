#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1497;
float _4160;
float _4161;
float _4162;
float _4163;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _243 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _244 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _245 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _251 = inversesqrt(dot(vec3(_243, _244, _245), vec3(_243, _244, _245)));
    float _258 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _265 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _271 = uint(roundEven(NORMAL.w)) * 13u;
    uint _276 = _271 + 1u;
    uint _280 = _271 + 2u;
    float _289 = sqrt(((cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x) + (cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x)) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x));
    float _290 = _289 * TEXCOORD.z;
    float _291 = _289 * TEXCOORD.w;
    vec4 _311 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _317 = _311.x * cbMtdParam._m0[11u].x;
    float _318 = _311.y * cbMtdParam._m0[11u].y;
    float _319 = _311.z * cbMtdParam._m0[11u].z;
    vec4 _338 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _290) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _291) + cbTextureTilingScale._m0[5u].w));
    vec4 _377 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _379 = _377.x;
    float _391 = dot(vec4(_379, _377.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _408 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_379 - _391) * cbMtdParam._m0[24u].y) + _391) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4172 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _409 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
    float _416 = (_409 * ((_338.x * cbMtdParam._m0[12u].x) - _317)) + _317;
    float _417 = (_409 * ((_338.y * cbMtdParam._m0[12u].y) - _318)) + _318;
    float _418 = (_409 * ((_338.z * cbMtdParam._m0[12u].z) - _319)) + _319;
    vec4 _435 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _290) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _291) + cbTextureTilingScale._m0[3u].w));
    vec4 _455 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _457 = _455.x;
    float _467 = dot(vec4(_457, _455.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _481 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_457 - _467) * cbMtdParam._m0[24u].y) + _467) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4183 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _482 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    float _489 = (_482 * ((_435.x * cbMtdParam._m0[13u].x) - _416)) + _416;
    float _490 = (_482 * ((_435.y * cbMtdParam._m0[13u].y) - _417)) + _417;
    float _491 = (_482 * ((_435.z * cbMtdParam._m0[13u].z) - _418)) + _418;
    vec4 _508 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _290) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _291) + cbTextureTilingScale._m0[20u].w));
    vec4 _531 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _290) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _291) + cbTextureTilingScale._m0[4u].w));
    vec4 _548 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _550 = _548.x;
    float _551 = _548.y;
    float _552 = _548.z;
    float _559 = ((_531.x - _550) * _409) + _550;
    float _560 = ((_531.y - _551) * _409) + _551;
    float _561 = ((_531.z - _552) * _409) + _552;
    vec4 _573 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _290) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _291) + cbTextureTilingScale._m0[2u].w));
    float _586 = ((_573.z - _561) * _482) + _561;
    float _589 = ((((_573.x - _559) * _482) + _559) * 2.0) + (-1.0);
    float _590 = ((((_573.y - _560) * _482) + _560) * 2.0) + (-1.0);
    float _591 = dot(vec2(_589, _590), vec2(_589, _590));
    float _4194 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _596 = sqrt(1.0 - (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))));
    vec4 _610 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _635 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _290) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _291) + cbTextureTilingScale._m0[11u].w));
    float _637 = _635.x;
    float _638 = 1.0 - _637;
    float _644 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _647 = ((isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : min(_644, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _656 = (_647 - ((((((_637 - _638) * cbMtdParam._m0[24u].z) + _638) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _647))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4215 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _657 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
    float _664 = (_657 * (cbMtdParam._m0[17u].x - _489)) + _489;
    float _665 = (_657 * (cbMtdParam._m0[17u].y - _490)) + _490;
    float _666 = (_657 * (cbMtdParam._m0[17u].z - _491)) + _491;
    vec4 _678 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _290) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _291) + cbTextureTilingScale._m0[19u].w));
    float _680 = _678.x;
    float _681 = 1.0 - _680;
    float _708 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_680 - _681) * cbMtdParam._m0[24u].w) + _681) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4226 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _709 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _717 = ((((cbMtdParam._m0[10u].x - _664) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _709) + _664;
    float _718 = ((((cbMtdParam._m0[10u].y - _665) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _709) + _665;
    float _719 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _666)) * _709) + _666;
    vec4 _745 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _747 = _745.x;
    float _765 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _290) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _291) + cbTextureTilingScale._m0[9u].w)).x - _747) * _409) + _747;
    float _782 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _290) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _291) + cbTextureTilingScale._m0[21u].w)).x - _765) * _482) + _765;
    float _786 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _782) * cbMtdParam._m0[19u].z) + _782;
    float _788 = _786 - (_786 * _657);
    float _790 = _788 - (_788 * _709);
    float _795 = (((_508.z - _586) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _586;
    float _799 = ((_610.z - _795) * cbMtdParam._m0[19u].w) + _795;
    vec4 _813 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _290) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _291) + cbTextureTilingScale._m0[15u].w));
    float _820 = (_813.x * 2.0) + (-1.0);
    float _821 = (_813.y * 2.0) + (-1.0);
    float _822 = dot(vec2(_820, _821), vec2(_820, _821));
    float _4237 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _830 = (_657 * (_813.z - _799)) + _799;
    float _833 = ((cbMtdParam._m0[23u].y - _830) * _709) + _830;
    vec4 _852 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _290) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _291) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _858 = (_852.x * 2.0) + (-1.0);
    float _859 = (_852.y * 2.0) + (-1.0);
    float _860 = dot(vec2(_858, _859), vec2(_858, _859));
    float _4248 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _874 = (_589 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_508.x * 2.0) + (-1.0)))) + (((_610.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _875 = (_590 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_508.y * 2.0) + (-1.0)))) + (((_610.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _887 = (((_820 - _874) + (cbMtdParam._m0[21u].x * _874)) * _657) + _874;
    float _888 = (((_821 - _875) + (cbMtdParam._m0[21u].x * _875)) * _657) + _875;
    float _889 = (_657 * (sqrt(1.0 - (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0)))) - _596)) + _596;
    float _900 = (((_858 - _887) + (_887 * cbMtdParam._m0[22u].z)) * _709) + _887;
    float _901 = (((_859 - _888) + (_888 * cbMtdParam._m0[22u].z)) * _709) + _888;
    float _902 = ((sqrt(1.0 - (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0)))) - _889) * _709) + _889;
    float _904 = cbMtdParam._m0[22u].x + _610.w;
    float _907 = fma(_902, _258 * NORMAL.x, fma(_901, _265 * TANGENT.x, (_251 * _243) * _900));
    float _910 = fma(_902, _258 * NORMAL.y, fma(_901, _265 * TANGENT.y, (_251 * _244) * _900));
    float _913 = fma(_902, _258 * NORMAL.z, fma(_901, _265 * TANGENT.z, (_251 * _245) * _900));
    float _917 = inversesqrt(dot(vec3(_907, _910, _913), vec3(_907, _910, _913)));
    float _918 = _917 * _907;
    float _919 = _917 * _910;
    float _920 = _917 * _913;
    float _4259 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _921 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
    float _4270 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _4281 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _4292 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _4303 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _4314 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _926 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
    float _940 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _980 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _990 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _980);
    float _991 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _980);
    float _992 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _980);
    float _996 = inversesqrt(dot(vec3(_990, _991, _992), vec3(_990, _991, _992)));
    float _997 = _990 * _996;
    float _998 = _991 * _996;
    float _999 = _992 * _996;
    vec4 _1004 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1006 = _1004.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1178 = sqrt(((_990 * _990) + (_991 * _991)) + (_992 * _992));
        float _1184 = (cbMatDynParam._m0[5u].x * _1178) + cbMatDynParam._m0[5u].y;
        float _4325 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1189 = (cbMatDynParam._m0[5u].z * _1178) + cbMatDynParam._m0[5u].w;
        float _4336 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) - _1185)) + _1185) < ((_1006 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1017 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1018 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1036 = fma(_920, cbSceneParam._m0[5u].z, fma(_919, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _918));
    float _1039 = fma(_920, cbSceneParam._m0[6u].z, fma(_919, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _918));
    float _1042 = fma(_920, cbSceneParam._m0[7u].z, fma(_919, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _918));
    uint _1055 = _271 + 9u;
    uint _1056 = _1055 + uint(cbMatDynParam._m0[0u].w);
    float _1062 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0)))) * cbInstanceData._m0[_1056].x;
    float _1063 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0)))) * cbInstanceData._m0[_1056].y;
    float _1064 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0)))) * cbInstanceData._m0[_1056].z;
    float _4347 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    float _1065 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
    float _4358 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
    float _1066 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
    float _4369 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    float _1067 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
    float _1068 = 1.0 - _926;
    float _1069 = _1065 * _1068;
    float _1070 = _1066 * _1068;
    float _1071 = _1067 * _1068;
    float _1076 = (_1065 + (-0.039999999105930328369140625)) * _926;
    float _1077 = (_1066 + (-0.039999999105930328369140625)) * _926;
    float _1078 = (_1067 + (-0.039999999105930328369140625)) * _926;
    float _1079 = _1076 + 0.039999999105930328369140625;
    float _1081 = _1077 + 0.039999999105930328369140625;
    float _1082 = _1078 + 0.039999999105930328369140625;
    vec4 _1091 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1017, cbSceneParam._m0[86u].y * _1018));
    float _1095 = ((isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * TEXCOORD_5.w) * _1091.x;
    float _1096 = dot(vec3(_918, _919, _920), vec3(_997, _998, _999));
    float _1099 = _1096 * 2.0;
    float _1103 = (_1099 * _918) - _997;
    float _1104 = (_1099 * _919) - _998;
    float _1105 = (_1099 * _920) - _999;
    float _1109 = abs(dot(vec3(_997, _998, _999), vec3(_918, _919, _920)));
    float _4380 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
    float _1111 = sqrt(_921);
    float _1124 = exp2((_1111 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1111 * 3.0));
    float _1130 = (1.0 - _1124) * ((_1111 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1131 = _1124 * _1111;
    float _1159 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1163 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1167 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1496;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1221 = fma(_1167, cbModelParam._m0[26u].z, fma(_1163, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1159));
        float _1225 = fma(_1167, cbModelParam._m0[27u].z, fma(_1163, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1159));
        float _1229 = fma(_1167, cbModelParam._m0[28u].z, fma(_1163, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1159));
        float _1254 = _1159 + _918;
        float _1255 = _1163 + _919;
        float _1256 = _1167 + _920;
        float _1266 = fma(_1256, cbModelParam._m0[26u].z, fma(_1255, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1254)) - _1221;
        float _1267 = fma(_1256, cbModelParam._m0[27u].z, fma(_1255, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1254)) - _1225;
        float _1268 = fma(_1256, cbModelParam._m0[28u].z, fma(_1255, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1254)) - _1229;
        float _1272 = inversesqrt(dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268)));
        float _1285 = ((_1272 * _1266) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1221 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1286 = ((_1272 * _1267) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1225 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1287 = ((_1272 * _1268) / cbModelParam._m0[34u].z) + ((((((_1229 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1297 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1304 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1311 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        float _1324 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1290.x + (-0.5));
        float _1326 = _1324 * (_1290.y + (-0.5));
        float _1327 = _1324 * (_1290.z + (-0.5));
        float _1334 = exp2((_1297.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1297.x + (-0.5));
        float _1336 = _1334 * (_1297.y + (-0.5));
        float _1337 = _1334 * (_1297.z + (-0.5));
        float _1344 = exp2((_1304.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1304.x + (-0.5));
        float _1346 = _1344 * (_1304.y + (-0.5));
        float _1347 = _1344 * (_1304.z + (-0.5));
        float _1354 = exp2((_1311.w + (-0.5)) * 20.0) * 2.0;
        float _1355 = _1354 * (_1311.x + (-0.5));
        float _1356 = _1354 * (_1311.y + (-0.5));
        float _1357 = _1354 * (_1311.z + (-0.5));
        float _1358 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1359 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1360 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1361 = _1325 * 0.5;
        float _1362 = _1335 * 0.5;
        float _1363 = _1345 * 0.5;
        float _1364 = dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363));
        float _1369 = (_1364 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1364);
        float _1378 = (dot(vec3(_918, _919, _920), vec3(_1369 * _1361, _1369 * _1362, _1369 * _1363)) + 1.0) * 0.5;
        float _4406 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1388 = sqrt(((_1362 * _1362) + (_1361 * _1361)) + (_1363 * _1363)) / (_1358 + 9.9999997473787516355514526367188e-06);
        float _4417 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _1390 = _1389 * 2.0;
        float _1394 = (1.0 - _1389) / (_1389 + 1.0);
        float _4428 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _1404 = ((((1.0 - _1395) * (_1390 + 2.0)) * exp2(log2(isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_1390 + 1.0))) + _1395) * _1358;
        float _1405 = _1326 * 0.5;
        float _1406 = _1336 * 0.5;
        float _1407 = _1346 * 0.5;
        float _1408 = dot(vec3(_1405, _1406, _1407), vec3(_1405, _1406, _1407));
        float _1413 = (_1408 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1408);
        float _1421 = (dot(vec3(_918, _919, _920), vec3(_1413 * _1405, _1413 * _1406, _1413 * _1407)) + 1.0) * 0.5;
        float _4439 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1430 = sqrt(((_1406 * _1406) + (_1405 * _1405)) + (_1407 * _1407)) / (_1359 + 9.9999997473787516355514526367188e-06);
        float _4450 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
        float _1432 = _1431 * 2.0;
        float _1436 = (1.0 - _1431) / (_1431 + 1.0);
        float _4461 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _1446 = ((((1.0 - _1437) * (_1432 + 2.0)) * exp2(log2(isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_1432 + 1.0))) + _1437) * _1359;
        float _1447 = _1327 * 0.5;
        float _1448 = _1337 * 0.5;
        float _1449 = _1347 * 0.5;
        float _1450 = dot(vec3(_1447, _1448, _1449), vec3(_1447, _1448, _1449));
        float _1455 = (_1450 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1450);
        float _1463 = (dot(vec3(_918, _919, _920), vec3(_1455 * _1447, _1455 * _1448, _1455 * _1449)) + 1.0) * 0.5;
        float _4472 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1472 = sqrt(((_1448 * _1448) + (_1447 * _1447)) + (_1449 * _1449)) / (_1360 + 9.9999997473787516355514526367188e-06);
        float _4483 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _1474 = _1473 * 2.0;
        float _1478 = (1.0 - _1473) / (_1473 + 1.0);
        float _4494 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
        float _1488 = ((((1.0 - _1479) * (_1474 + 2.0)) * exp2(log2(isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_1474 + 1.0))) + _1479) * _1360;
        _1496 = _1327;
        _1498 = _1326;
        _1499 = _1325;
        _1500 = _1337;
        _1501 = _1336;
        _1502 = _1335;
        _1503 = _1347;
        _1504 = _1346;
        _1505 = _1345;
        _1506 = _1360;
        _1507 = _1359;
        _1508 = _1358;
        _1509 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)));
        _1510 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)));
        _1511 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)));
    }
    else
    {
        _1496 = _1497;
        _1498 = _1497;
        _1499 = _1497;
        _1500 = _1497;
        _1501 = _1497;
        _1502 = _1497;
        _1503 = _1497;
        _1504 = _1497;
        _1505 = _1497;
        _1506 = _1497;
        _1507 = _1497;
        _1508 = _1497;
        _1509 = 0.0;
        _1510 = 0.0;
        _1511 = 0.0;
    }
    float _1807;
    float _1808;
    float _1809;
    float _1810;
    float _1811;
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1538 = fma(_1167, cbModelParam._m0[30u].z, fma(_1163, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1159));
        float _1542 = fma(_1167, cbModelParam._m0[31u].z, fma(_1163, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1159));
        float _1546 = fma(_1167, cbModelParam._m0[32u].z, fma(_1163, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1159));
        float _1569 = _1159 + _918;
        float _1570 = _1163 + _919;
        float _1571 = _1167 + _920;
        float _1581 = fma(_1571, cbModelParam._m0[30u].z, fma(_1570, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1569)) - _1538;
        float _1582 = fma(_1571, cbModelParam._m0[31u].z, fma(_1570, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1569)) - _1542;
        float _1583 = fma(_1571, cbModelParam._m0[32u].z, fma(_1570, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1569)) - _1546;
        float _1587 = inversesqrt(dot(vec3(_1581, _1582, _1583), vec3(_1581, _1582, _1583)));
        float _1600 = ((_1587 * _1581) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1538 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1601 = ((_1587 * _1582) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1542 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1602 = ((_1587 * _1583) / cbModelParam._m0[35u].z) + ((((((_1546 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1604 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1600, _1601, _1602), 0.0);
        vec4 _1611 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1600, _1601, _1602), 0.0);
        vec4 _1618 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1600, _1601, _1602), 0.0);
        vec4 _1625 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1600, _1601, _1602), 0.0);
        float _1637 = exp2((_1604.w + (-0.5)) * 20.0) * 2.0;
        float _1638 = _1637 * (_1604.x + (-0.5));
        float _1639 = _1637 * (_1604.y + (-0.5));
        float _1640 = _1637 * (_1604.z + (-0.5));
        float _1647 = exp2((_1611.w + (-0.5)) * 20.0) * 2.0;
        float _1648 = _1647 * (_1611.x + (-0.5));
        float _1649 = _1647 * (_1611.y + (-0.5));
        float _1650 = _1647 * (_1611.z + (-0.5));
        float _1657 = exp2((_1618.w + (-0.5)) * 20.0) * 2.0;
        float _1658 = _1657 * (_1618.x + (-0.5));
        float _1659 = _1657 * (_1618.y + (-0.5));
        float _1660 = _1657 * (_1618.z + (-0.5));
        float _1667 = exp2((_1625.w + (-0.5)) * 20.0) * 2.0;
        float _1668 = _1667 * (_1625.x + (-0.5));
        float _1669 = _1667 * (_1625.y + (-0.5));
        float _1670 = _1667 * (_1625.z + (-0.5));
        float _1671 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1672 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1673 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1674 = _1638 * 0.5;
        float _1675 = _1648 * 0.5;
        float _1676 = _1658 * 0.5;
        float _1677 = dot(vec3(_1674, _1675, _1676), vec3(_1674, _1675, _1676));
        float _1682 = (_1677 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1677);
        float _1690 = (dot(vec3(_918, _919, _920), vec3(_1682 * _1674, _1682 * _1675, _1682 * _1676)) + 1.0) * 0.5;
        float _4535 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1699 = sqrt(((_1675 * _1675) + (_1674 * _1674)) + (_1676 * _1676)) / (_1671 + 9.9999997473787516355514526367188e-06);
        float _4546 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1700 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
        float _1701 = _1700 * 2.0;
        float _1705 = (1.0 - _1700) / (_1700 + 1.0);
        float _4557 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1706 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
        float _1715 = ((((1.0 - _1706) * (_1701 + 2.0)) * exp2(log2(isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (_1701 + 1.0))) + _1706) * _1671;
        float _1716 = _1639 * 0.5;
        float _1717 = _1649 * 0.5;
        float _1718 = _1659 * 0.5;
        float _1719 = dot(vec3(_1716, _1717, _1718), vec3(_1716, _1717, _1718));
        float _1724 = (_1719 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1719);
        float _1732 = (dot(vec3(_918, _919, _920), vec3(_1724 * _1716, _1724 * _1717, _1724 * _1718)) + 1.0) * 0.5;
        float _4568 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1741 = sqrt(((_1717 * _1717) + (_1716 * _1716)) + (_1718 * _1718)) / (_1672 + 9.9999997473787516355514526367188e-06);
        float _4579 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1742 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
        float _1743 = _1742 * 2.0;
        float _1747 = (1.0 - _1742) / (_1742 + 1.0);
        float _4590 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1748 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
        float _1757 = ((((1.0 - _1748) * (_1743 + 2.0)) * exp2(log2(isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * (_1743 + 1.0))) + _1748) * _1672;
        float _1758 = _1640 * 0.5;
        float _1759 = _1650 * 0.5;
        float _1760 = _1660 * 0.5;
        float _1761 = dot(vec3(_1758, _1759, _1760), vec3(_1758, _1759, _1760));
        float _1766 = (_1761 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1761);
        float _1774 = (dot(vec3(_918, _919, _920), vec3(_1766 * _1758, _1766 * _1759, _1766 * _1760)) + 1.0) * 0.5;
        float _4601 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1783 = sqrt(((_1759 * _1759) + (_1758 * _1758)) + (_1760 * _1760)) / (_1673 + 9.9999997473787516355514526367188e-06);
        float _4612 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _1784 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
        float _1785 = _1784 * 2.0;
        float _1789 = (1.0 - _1784) / (_1784 + 1.0);
        float _4623 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1790 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
        float _1799 = ((((1.0 - _1790) * (_1785 + 2.0)) * exp2(log2(isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (_1785 + 1.0))) + _1790) * _1673;
        _1807 = _1640;
        _1808 = _1639;
        _1809 = _1638;
        _1810 = _1650;
        _1811 = _1649;
        _1812 = _1648;
        _1813 = _1660;
        _1814 = _1659;
        _1815 = _1658;
        _1816 = _1673;
        _1817 = _1672;
        _1818 = _1671;
        _1819 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)));
        _1820 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)));
        _1821 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0)));
    }
    else
    {
        _1807 = _1497;
        _1808 = _1497;
        _1809 = _1497;
        _1810 = _1497;
        _1811 = _1497;
        _1812 = _1497;
        _1813 = _1497;
        _1814 = _1497;
        _1815 = _1497;
        _1816 = _1497;
        _1817 = _1497;
        _1818 = _1497;
        _1819 = 0.0;
        _1820 = 0.0;
        _1821 = 0.0;
    }
    float _1831 = (cbModelParam._m0[1u].x * (_1819 - _1509)) + _1509;
    float _1832 = (cbModelParam._m0[1u].x * (_1820 - _1510)) + _1510;
    float _1833 = (cbModelParam._m0[1u].x * (_1821 - _1511)) + _1511;
    float _1854 = fma(_1833, cbSceneParam._m0[89u].z, fma(_1832, cbSceneParam._m0[89u].y, _1831 * cbSceneParam._m0[89u].x));
    float _1857 = fma(_1833, cbSceneParam._m0[90u].z, fma(_1832, cbSceneParam._m0[90u].y, _1831 * cbSceneParam._m0[90u].x));
    float _1860 = fma(_1833, cbSceneParam._m0[91u].z, fma(_1832, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1831));
    float _1875 = _1103 * 0.5;
    float _1876 = _1104 * 0.5;
    float _1877 = _1105 * 0.5;
    float _1878 = dot(vec4(_1875, _1876, _1877, 1.0), vec4(_1809, _1812, _1815, _1818));
    float _1881 = dot(vec4(_1875, _1876, _1877, 1.0), vec4(_1808, _1811, _1814, _1817));
    float _1884 = dot(vec4(_1875, _1876, _1877, 1.0), vec4(_1807, _1810, _1813, _1816));
    float _1918;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1891 = dot(vec4(_1875, _1876, _1877, 1.0), vec4(_1496, _1500, _1503, _1506));
        float _1895 = dot(vec4(_1875, _1876, _1877, 1.0), vec4(_1498, _1501, _1504, _1507));
        float _1899 = dot(vec4(_1875, _1876, _1877, 1.0), vec4(_1499, _1502, _1505, _1508));
        float _1906 = dot(vec4(cbModelParam._m0[39u]), vec4(_1875, _1876, _1877, 1.0));
        _1918 = dot(vec3(isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0)), isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0)), isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1906) ? 0.0 : (isnan(0.0) ? _1906 : max(0.0, _1906))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1918 = 1.0;
    }
    float _1929;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1920 = dot(vec4(cbModelParam._m0[40u]), vec4(_1875, _1876, _1877, 1.0));
        _1929 = dot(vec3(isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0)), isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0)), isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1920) ? 0.0 : (isnan(0.0) ? _1920 : max(0.0, _1920))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1929 = 1.0;
    }
    float _1933 = (_1929 * cbModelParam._m0[1u].x) + (_1918 * (1.0 - cbModelParam._m0[1u].x));
    float _1943 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _921);
    float _1944 = isnan(_1943) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1943 : min(cbModelParam._m0[25u].z, _1943));
    float _2025;
    float _2027;
    float _2029;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1992 = fma(_1167, cbModelParam._m0[13u].z, fma(_1163, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1159)) + cbModelParam._m0[13u].w;
        float _1996 = fma(_1167, cbModelParam._m0[14u].z, fma(_1163, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1159)) + cbModelParam._m0[14u].w;
        float _2000 = fma(_1167, cbModelParam._m0[15u].z, fma(_1163, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1159)) + cbModelParam._m0[15u].w;
        float _2003 = fma(_1105, cbModelParam._m0[13u].z, fma(_1104, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1103));
        float _2006 = fma(_1105, cbModelParam._m0[14u].z, fma(_1104, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1103));
        float _2009 = fma(_1105, cbModelParam._m0[15u].z, fma(_1104, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1103));
        float _2037;
        if (_2003 > 0.0)
        {
            _2037 = abs((1.0 - _1992) / _2003);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2003 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1992 + 1.0) / _2003);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2037 = frontier_phi_17_15_ladder;
        }
        float _2209;
        if (_2006 > 0.0)
        {
            _2209 = abs((1.0 - _1996) / _2006);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2006 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1996 + 1.0) / _2006);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2209 = frontier_phi_26_22_ladder;
        }
        float _2504;
        if (_2009 > 0.0)
        {
            _2504 = abs((1.0 - _2000) / _2009);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2009 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2000 + 1.0) / _2009);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2504 = frontier_phi_38_33_ladder;
        }
        float _2506 = isnan(_2209) ? _2037 : (isnan(_2037) ? _2209 : min(_2037, _2209));
        float _2507 = isnan(_2504) ? _2506 : (isnan(_2506) ? _2504 : min(_2506, _2504));
        float _2511 = (_2507 * _2003) + _1992;
        float _2512 = (_2507 * _2006) + _1996;
        float _2513 = (_2507 * _2009) + _2000;
        float _2514 = _2507 * 9.9999997473787516355514526367188e-05;
        float _2516 = (-1.0) - _2514;
        float _2518 = _2514 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2513 > _2518) || ((_2513 < _2516) || ((_2512 > _2518) || ((_2512 < _2516) || ((_2511 < _2516) || (_2511 > _2518))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2658 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2513, cbModelParam._m0[9u].z, fma(_2512, cbModelParam._m0[9u].y, _2511 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2513, cbModelParam._m0[10u].z, fma(_2512, cbModelParam._m0[10u].y, _2511 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2513, cbModelParam._m0[11u].z, fma(_2512, cbModelParam._m0[11u].y, _2511 * cbModelParam._m0[11u].x))), _1944);
            frontier_phi_16_38_ladder = _2658.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2658.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2658.x * cbModelParam._m0[1u].y;
        }
        _2025 = frontier_phi_16_38_ladder_2;
        _2027 = frontier_phi_16_38_ladder_1;
        _2029 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2013 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1103, _1104, _1105), _1944);
        _2025 = _2013.x * cbModelParam._m0[1u].y;
        _2027 = _2013.y * cbModelParam._m0[1u].y;
        _2029 = _2013.z * cbModelParam._m0[1u].y;
    }
    float _2033 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _921);
    float _2034 = isnan(_2033) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2033 : min(cbModelParam._m0[25u].w, _2033));
    float _2124;
    float _2126;
    float _2128;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2088 = fma(_1167, cbModelParam._m0[21u].z, fma(_1163, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1159)) + cbModelParam._m0[21u].w;
        float _2092 = fma(_1167, cbModelParam._m0[22u].z, fma(_1163, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1159)) + cbModelParam._m0[22u].w;
        float _2096 = fma(_1167, cbModelParam._m0[23u].z, fma(_1163, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1159)) + cbModelParam._m0[23u].w;
        float _2099 = fma(_1105, cbModelParam._m0[21u].z, fma(_1104, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1103));
        float _2102 = fma(_1105, cbModelParam._m0[22u].z, fma(_1104, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1103));
        float _2105 = fma(_1105, cbModelParam._m0[23u].z, fma(_1104, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1103));
        float _2214;
        if (_2099 > 0.0)
        {
            _2214 = abs((1.0 - _2088) / _2099);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2099 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2088 + 1.0) / _2099);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2214 = frontier_phi_28_24_ladder;
        }
        float _2531;
        if (_2102 > 0.0)
        {
            _2531 = abs((1.0 - _2092) / _2102);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2102 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2092 + 1.0) / _2102);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2531 = frontier_phi_40_35_ladder;
        }
        float _2869;
        if (_2105 > 0.0)
        {
            _2869 = abs((1.0 - _2096) / _2105);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2105 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2096 + 1.0) / _2105);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2869 = frontier_phi_50_47_ladder;
        }
        float _2871 = isnan(_2531) ? _2214 : (isnan(_2214) ? _2531 : min(_2214, _2531));
        float _2872 = isnan(_2869) ? _2871 : (isnan(_2871) ? _2869 : min(_2871, _2869));
        float _2876 = (_2872 * _2099) + _2088;
        float _2877 = (_2872 * _2102) + _2092;
        float _2878 = (_2872 * _2105) + _2096;
        float _2879 = _2872 * 9.9999997473787516355514526367188e-05;
        float _2880 = (-1.0) - _2879;
        float _2882 = _2879 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2878 > _2882) || ((_2878 < _2880) || ((_2877 > _2882) || ((_2877 < _2880) || ((_2876 < _2880) || (_2876 > _2882))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3000 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2878, cbModelParam._m0[17u].z, fma(_2877, cbModelParam._m0[17u].y, _2876 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2878, cbModelParam._m0[18u].z, fma(_2877, cbModelParam._m0[18u].y, _2876 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2878, cbModelParam._m0[19u].z, fma(_2877, cbModelParam._m0[19u].y, _2876 * cbModelParam._m0[19u].x))), _2034);
            frontier_phi_25_50_ladder = _3000.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3000.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3000.x * cbModelParam._m0[1u].z;
        }
        _2124 = frontier_phi_25_50_ladder_2;
        _2126 = frontier_phi_25_50_ladder_1;
        _2128 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2108 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1103, _1104, _1105), _2034);
        _2124 = _2108.x * cbModelParam._m0[1u].z;
        _2126 = _2108.y * cbModelParam._m0[1u].z;
        _2128 = _2108.z * cbModelParam._m0[1u].z;
    }
    float _2141 = (((_1130 * _1079) + _1131) * _1095) * ((cbModelParam._m0[1u].w * (_2124 - _2025)) + _2025);
    float _2143 = (((_1130 * _1081) + _1131) * _1095) * ((cbModelParam._m0[1u].w * (_2126 - _2027)) + _2027);
    float _2145 = (((_1130 * _1082) + _1131) * _1095) * ((cbModelParam._m0[1u].w * (_2128 - _2029)) + _2029);
    float _2148 = fma(_2145, cbSceneParam._m0[89u].z, fma(_2143, cbSceneParam._m0[89u].y, _2141 * cbSceneParam._m0[89u].x));
    float _2151 = fma(_2145, cbSceneParam._m0[90u].z, fma(_2143, cbSceneParam._m0[90u].y, _2141 * cbSceneParam._m0[90u].x));
    float _2154 = fma(_2145, cbSceneParam._m0[91u].z, fma(_2143, cbSceneParam._m0[91u].y, _2141 * cbSceneParam._m0[91u].x));
    float _2188 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2192 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2196 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2200 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2201 = _2188 / _2200;
    float _2202 = _2192 / _2200;
    float _2203 = _2196 / _2200;
    float _2350;
    float _2351;
    float _2352;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2230 = ((uint(_2203 > cbSceneParam._m0[59u].y) + uint(_2203 > cbSceneParam._m0[59u].x)) + uint(_2203 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2231 = _2230 + 43u;
        uint _2239 = _2230 + 44u;
        uint _2247 = _2230 + 45u;
        uint _2255 = _2230 + 46u;
        float _2266 = fma(_2200, cbSceneParam._m0[_2231].w, fma(_2196, cbSceneParam._m0[_2231].z, fma(_2192, cbSceneParam._m0[_2231].y, _2188 * cbSceneParam._m0[_2231].x)));
        float _2270 = fma(_2200, cbSceneParam._m0[_2239].w, fma(_2196, cbSceneParam._m0[_2239].z, fma(_2192, cbSceneParam._m0[_2239].y, _2188 * cbSceneParam._m0[_2239].x)));
        float _2278 = fma(_2200, cbSceneParam._m0[_2255].w, fma(_2196, cbSceneParam._m0[_2255].z, fma(_2192, cbSceneParam._m0[_2255].y, _2188 * cbSceneParam._m0[_2255].x)));
        float _2283 = cbSceneParam._m0[33u].z * _2278;
        float _2285 = cbSceneParam._m0[33u].w * _2278;
        float _2288 = fma(_2200, cbSceneParam._m0[_2247].w, fma(_2196, cbSceneParam._m0[_2247].z, fma(_2192, cbSceneParam._m0[_2247].y, _2188 * cbSceneParam._m0[_2247].x))) / _2278;
        float _2336 = (cbSceneParam._m0[33u].x - sqrt(((_2202 * _2202) + (_2201 * _2201)) + (_2203 * _2203))) * cbSceneParam._m0[33u].y;
        float _4749 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
        float _2343 = (isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2283 + _2266) / _2278, (_2285 + _2270) / _2278), _2288), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2285 + _2266) / _2278, (_2270 - _2283) / _2278), _2288), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2266 - _2283) / _2278, (_2270 - _2285) / _2278), _2288), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2266 - _2285) / _2278, (_2283 + _2270) / _2278), _2288), 0.0)).x), vec4(0.25)));
        _2350 = 1.0 - (_2343 * cbSceneParam._m0[34u].x);
        _2351 = 1.0 - (_2343 * cbSceneParam._m0[34u].y);
        _2352 = 1.0 - (_2343 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2350 = 1.0;
        _2351 = 1.0;
        _2352 = 1.0;
    }
    float _2416;
    float _2418;
    float _2420;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2404 = fma(_2200, cbSceneParam._m0[63u].w, fma(_2196, cbSceneParam._m0[63u].z, fma(_2192, cbSceneParam._m0[63u].y, _2188 * cbSceneParam._m0[63u].x)));
        float _2405 = fma(_2200, cbSceneParam._m0[60u].w, fma(_2196, cbSceneParam._m0[60u].z, fma(_2192, cbSceneParam._m0[60u].y, _2188 * cbSceneParam._m0[60u].x))) / _2404;
        float _2406 = fma(_2200, cbSceneParam._m0[61u].w, fma(_2196, cbSceneParam._m0[61u].z, fma(_2192, cbSceneParam._m0[61u].y, _2188 * cbSceneParam._m0[61u].x))) / _2404;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2405 >= cbSceneParam._m0[64u].x) && (_2406 >= cbSceneParam._m0[64u].y)) && (_2405 <= cbSceneParam._m0[64u].z)) && (_2406 <= cbSceneParam._m0[64u].w))
        {
            float _2544 = fma(_2200, cbSceneParam._m0[62u].w, fma(_2196, cbSceneParam._m0[62u].z, fma(_2192, cbSceneParam._m0[62u].y, _2188 * cbSceneParam._m0[62u].x))) / _2404;
            float _2548 = isnan(cbSceneParam._m0[41u].w) ? _2544 : (isnan(_2544) ? cbSceneParam._m0[41u].w : max(_2544, cbSceneParam._m0[41u].w));
            float _2591 = (cbSceneParam._m0[33u].x - sqrt(((_2202 * _2202) + (_2201 * _2201)) + (_2203 * _2203))) * cbSceneParam._m0[33u].y;
            float _4765 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
            float _2598 = (isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2405, cbSceneParam._m0[33u].w + _2406), _2548), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2405, _2406 - cbSceneParam._m0[33u].z), _2548), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2405 - cbSceneParam._m0[33u].z, _2406 - cbSceneParam._m0[33u].w), _2548), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2405 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2406), _2548), 0.0)).x), vec4(0.25)));
            float _2602 = 1.0 - (_2598 * cbSceneParam._m0[34u].x);
            float _2603 = 1.0 - (_2598 * cbSceneParam._m0[34u].y);
            float _2604 = 1.0 - (_2598 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2604) ? _2352 : (isnan(_2352) ? _2604 : min(_2352, _2604));
            frontier_phi_37_36_ladder_1 = isnan(_2603) ? _2351 : (isnan(_2351) ? _2603 : min(_2351, _2603));
            frontier_phi_37_36_ladder_2 = isnan(_2602) ? _2350 : (isnan(_2350) ? _2602 : min(_2350, _2602));
        }
        else
        {
            frontier_phi_37_36_ladder = _2352;
            frontier_phi_37_36_ladder_1 = _2351;
            frontier_phi_37_36_ladder_2 = _2350;
        }
        _2416 = frontier_phi_37_36_ladder_2;
        _2418 = frontier_phi_37_36_ladder_1;
        _2420 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2416 = _2350;
        _2418 = _2351;
        _2420 = _2352;
    }
    uvec4 _2425 = floatBitsToUint(cbInstanceData._m0[_271 + 5u]);
    uint _2427 = _2425.x * 14u;
    uint _2428 = _2427 + 13u;
    float _2435 = _1095 + (-1.0);
    float _2440 = (cbLight._m0[_2428].x * _2435) + 1.0;
    float _2441 = (cbLight._m0[_2428].y * _2435) + 1.0;
    float _2442 = (cbLight._m0[_2428].z * _2435) + 1.0;
    float _2443 = (cbLight._m0[_2428].w * _2435) + 1.0;
    uint _2444 = _2427 + 5u;
    float _2450 = isnan(1.0) ? _2441 : (isnan(_2441) ? 1.0 : min(_2441, 1.0));
    uint _2454 = _2427 + 4u;
    float _2463 = isnan(1.0) ? _2440 : (isnan(_2440) ? 1.0 : min(_2440, 1.0));
    uint _2467 = _2427 | 1u;
    float _2478 = dot(vec3(cbLight._m0[_2427].xyz), vec3(_918, _919, _920));
    float _2481 = dot(vec3(cbLight._m0[_2467].xyz), vec3(_918, _919, _920));
    float _4801 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
    float _4812 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
    float _2486 = (isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0))) * 0.3183098733425140380859375;
    float _2488 = (isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0))) * 0.3183098733425140380859375;
    float _2495 = ((cbLight._m0[_2444].x * _2450) * _2488) + (((cbLight._m0[_2454].x * _2416) * _2463) * _2486);
    float _2496 = ((_2450 * cbLight._m0[_2444].y) * _2488) + (((cbLight._m0[_2454].y * _2418) * _2463) * _2486);
    float _2497 = ((_2450 * cbLight._m0[_2444].z) * _2488) + (((cbLight._m0[_2454].z * _2420) * _2463) * _2486);
    uvec4 _2501 = floatBitsToUint(cbLight._m0[_2427 + 12u]);
    bool _2503 = _2501.x == 0u;
    float _2605;
    float _2607;
    float _2609;
    if (_2503)
    {
        _2605 = _2495;
        _2607 = _2496;
        _2609 = _2497;
    }
    else
    {
        uint _2613 = _2427 + 6u;
        float _2629 = (dot(vec3(cbLight._m0[_2427 + 2u].xyz), vec3(_918, _919, _920)) * 0.5) + 0.5;
        float _2630 = _2629 * _2629;
        float _4823 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
        float _2631 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
        float _2632 = isnan(1.0) ? _2442 : (isnan(_2442) ? 1.0 : min(_2442, 1.0));
        _2605 = (((cbLight._m0[_2613].x * 0.3183098733425140380859375) * _2631) * _2632) + _2495;
        _2607 = (((cbLight._m0[_2613].y * 0.3183098733425140380859375) * _2631) * _2632) + _2496;
        _2609 = (((cbLight._m0[_2613].z * 0.3183098733425140380859375) * _2631) * _2632) + _2497;
    }
    bool _2612 = _2501.y == 0u;
    float _2667;
    float _2669;
    float _2671;
    if (_2612)
    {
        _2667 = _2605;
        _2669 = _2607;
        _2671 = _2609;
    }
    else
    {
        uint _2840 = _2427 + 7u;
        float _2856 = (dot(vec3(cbLight._m0[_2427 + 3u].xyz), vec3(_918, _919, _920)) * 0.5) + 0.5;
        float _2857 = _2856 * _2856;
        float _4839 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
        float _2858 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
        float _2859 = isnan(1.0) ? _2443 : (isnan(_2443) ? 1.0 : min(_2443, 1.0));
        _2667 = (((cbLight._m0[_2840].x * 0.3183098733425140380859375) * _2858) * _2859) + _2605;
        _2669 = (((cbLight._m0[_2840].y * 0.3183098733425140380859375) * _2858) * _2859) + _2607;
        _2671 = (((cbLight._m0[_2840].z * 0.3183098733425140380859375) * _2858) * _2859) + _2609;
    }
    uint _2674 = _2427 + 8u;
    float _2687 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2427].w)) * _921) * 0.949999988079071044921875);
    float _2688 = _2687 * _2687;
    float _2689 = cbLight._m0[_2427].x + _997;
    float _2690 = cbLight._m0[_2427].y + _998;
    float _2691 = cbLight._m0[_2427].z + _999;
    float _2695 = inversesqrt(dot(vec3(_2689, _2690, _2691), vec3(_2689, _2690, _2691)));
    float _2696 = _2695 * _2689;
    float _2697 = _2695 * _2690;
    float _2698 = _2695 * _2691;
    float _2699 = dot(vec3(_918, _919, _920), vec3(cbLight._m0[_2427].xyz));
    float _4855 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
    float _2702 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
    float _4866 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
    float _2703 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
    float _2704 = dot(vec3(_918, _919, _920), vec3(_2696, _2697, _2698));
    float _4877 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
    float _2707 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
    float _2708 = dot(vec3(cbLight._m0[_2427].xyz), vec3(_2696, _2697, _2698));
    float _4888 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
    float _2712 = _2688 * _2688;
    float _2716 = ((_2707 * _2707) * (_2712 + (-1.0))) + 1.0;
    float _2724 = exp2(log2(1.0 - (isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0)))) * 5.0);
    float _2725 = 0.959999978542327880859375 - _1076;
    float _2727 = 0.959999978542327880859375 - _1077;
    float _2728 = 0.959999978542327880859375 - _1078;
    float _2735 = 1.0 - _2688;
    float _2746 = (0.5 / (((_2703 * ((_2702 * _2735) + _2688)) + 9.9999999392252902907785028219223e-09) + (((_2703 * _2735) + _2688) * _2702))) * _2702;
    float _4899 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
    float _2748 = (isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0))) * (_2712 / ((_2716 * _2716) * 3.141590118408203125));
    uint _2762 = _2427 + 9u;
    float _2773 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2467].w)) * _921) * 0.949999988079071044921875);
    float _2774 = _2773 * _2773;
    float _2775 = cbLight._m0[_2467].x + _997;
    float _2776 = cbLight._m0[_2467].y + _998;
    float _2777 = cbLight._m0[_2467].z + _999;
    float _2781 = inversesqrt(dot(vec3(_2775, _2776, _2777), vec3(_2775, _2776, _2777)));
    float _2782 = _2781 * _2775;
    float _2783 = _2781 * _2776;
    float _2784 = _2781 * _2777;
    float _2785 = dot(vec3(_918, _919, _920), vec3(cbLight._m0[_2467].xyz));
    float _4910 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
    float _2788 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
    float _2789 = dot(vec3(_918, _919, _920), vec3(_2782, _2783, _2784));
    float _4921 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
    float _2792 = isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0));
    float _2793 = dot(vec3(cbLight._m0[_2467].xyz), vec3(_2782, _2783, _2784));
    float _4932 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
    float _2797 = _2774 * _2774;
    float _2801 = ((_2792 * _2792) * (_2797 + (-1.0))) + 1.0;
    float _2808 = exp2(log2(1.0 - (isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0)))) * 5.0);
    float _2815 = 1.0 - _2774;
    float _2825 = (0.5 / (((_2703 * ((_2788 * _2815) + _2774)) + 9.9999999392252902907785028219223e-09) + (((_2703 * _2815) + _2774) * _2788))) * _2788;
    float _4943 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
    float _2827 = (isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0))) * (_2797 / ((_2801 * _2801) * 3.141590118408203125));
    float _2837 = (((((_2808 * _2725) + _1079) * cbLight._m0[_2762].x) * _2827) * _2450) + ((((cbLight._m0[_2674].x * _2416) * ((_2724 * _2725) + _1079)) * _2748) * _2463);
    float _2838 = (((((_2808 * _2727) + _1081) * cbLight._m0[_2762].y) * _2827) * _2450) + ((((cbLight._m0[_2674].y * _2418) * ((_2724 * _2727) + _1081)) * _2748) * _2463);
    float _2839 = (((((_2808 * _2728) + _1082) * cbLight._m0[_2762].z) * _2827) * _2450) + ((((cbLight._m0[_2674].z * _2420) * ((_2724 * _2728) + _1082)) * _2748) * _2463);
    float _2895;
    float _2897;
    float _2899;
    if (_2503)
    {
        _2895 = _2837;
        _2897 = _2838;
        _2899 = _2839;
    }
    else
    {
        uint _2901 = _2427 + 2u;
        uint _2905 = _2427 + 10u;
        float _2919 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2901].w)) * _921) * 0.949999988079071044921875);
        float _2920 = _2919 * _2919;
        float _2921 = cbLight._m0[_2901].x + _997;
        float _2922 = cbLight._m0[_2901].y + _998;
        float _2923 = cbLight._m0[_2901].z + _999;
        float _2927 = inversesqrt(dot(vec3(_2921, _2922, _2923), vec3(_2921, _2922, _2923)));
        float _2928 = _2927 * _2921;
        float _2929 = _2927 * _2922;
        float _2930 = _2927 * _2923;
        float _2931 = dot(vec3(_918, _919, _920), vec3(cbLight._m0[_2901].xyz));
        float _4954 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
        float _2934 = isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0));
        float _2935 = dot(vec3(_918, _919, _920), vec3(_2928, _2929, _2930));
        float _4965 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
        float _2938 = isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0));
        float _2939 = dot(vec3(cbLight._m0[_2901].xyz), vec3(_2928, _2929, _2930));
        float _4976 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
        float _2943 = _2920 * _2920;
        float _2947 = ((_2938 * _2938) * (_2943 + (-1.0))) + 1.0;
        float _2954 = exp2(log2(1.0 - (isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0)))) * 5.0);
        float _2961 = 1.0 - _2920;
        float _2971 = (0.5 / (((_2703 * ((_2934 * _2961) + _2920)) + 9.9999999392252902907785028219223e-09) + (((_2703 * _2961) + _2920) * _2934))) * _2934;
        float _4987 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
        float _2973 = (isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0))) * (_2943 / ((_2947 * _2947) * 3.141590118408203125));
        float _2974 = isnan(1.0) ? _2442 : (isnan(_2442) ? 1.0 : min(_2442, 1.0));
        _2895 = (((((_2954 * _2725) + _1079) * cbLight._m0[_2905].x) * _2973) * _2974) + _2837;
        _2897 = (((((_2954 * _2727) + _1081) * cbLight._m0[_2905].y) * _2973) * _2974) + _2838;
        _2899 = (((((_2954 * _2728) + _1082) * cbLight._m0[_2905].z) * _2973) * _2974) + _2839;
    }
    float _3005;
    float _3007;
    float _3009;
    if (_2612)
    {
        _3005 = _2895;
        _3007 = _2897;
        _3009 = _2899;
    }
    else
    {
        uint _3016 = _2427 + 3u;
        uint _3020 = _2427 + 11u;
        float _3034 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3016].w)) * _921) * 0.949999988079071044921875);
        float _3035 = _3034 * _3034;
        float _3036 = cbLight._m0[_3016].x + _997;
        float _3037 = cbLight._m0[_3016].y + _998;
        float _3038 = cbLight._m0[_3016].z + _999;
        float _3042 = inversesqrt(dot(vec3(_3036, _3037, _3038), vec3(_3036, _3037, _3038)));
        float _3043 = _3042 * _3036;
        float _3044 = _3042 * _3037;
        float _3045 = _3042 * _3038;
        float _3046 = dot(vec3(_918, _919, _920), vec3(cbLight._m0[_3016].xyz));
        float _5003 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
        float _3049 = isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0));
        float _3050 = dot(vec3(_918, _919, _920), vec3(_3043, _3044, _3045));
        float _5014 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
        float _3053 = isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0));
        float _3054 = dot(vec3(cbLight._m0[_3016].xyz), vec3(_3043, _3044, _3045));
        float _5025 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
        float _3058 = _3035 * _3035;
        float _3062 = ((_3053 * _3053) * (_3058 + (-1.0))) + 1.0;
        float _3069 = exp2(log2(1.0 - (isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0)))) * 5.0);
        float _3076 = 1.0 - _3035;
        float _3086 = (0.5 / (((_2703 * ((_3049 * _3076) + _3035)) + 9.9999999392252902907785028219223e-09) + (((_2703 * _3076) + _3035) * _3049))) * _3049;
        float _5036 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
        float _3088 = (isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0))) * (_3058 / ((_3062 * _3062) * 3.141590118408203125));
        float _3089 = isnan(1.0) ? _2443 : (isnan(_2443) ? 1.0 : min(_2443, 1.0));
        _3005 = (((((_3069 * _2725) + _1079) * cbLight._m0[_3020].x) * _3088) * _3089) + _2895;
        _3007 = (((((_3069 * _2727) + _1081) * cbLight._m0[_3020].y) * _3088) * _3089) + _2897;
        _3009 = (((((_3069 * _2728) + _1082) * cbLight._m0[_3020].z) * _3088) * _3089) + _2899;
    }
    float _3155;
    float _3157;
    float _3159;
    float _3161;
    float _3163;
    float _3165;
    if (_2425.y == 0u)
    {
        uvec4 _3110 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3111 = _3110.x;
        uint _3122 = uint((float(_3110.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1018) / _3111))) + floor(float(uint(cbSceneParam._m0[85u].x * _1017) / _3111)));
        float _3132 = (log2(_2203 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3133 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
        uint _3136 = uint(isnan(14.0) ? _3133 : (isnan(_3133) ? 14.0 : min(_3133, 14.0)));
        uvec4 _3141 = texelFetch(g_lightClusterGridBuffer, int(((_3136 << 2u) + (_3122 << 6u)) >> 2u));
        uint _3142 = _3141.x;
        uint _3143 = _3110.z;
        float _3222;
        float _3224;
        float _3226;
        float _3228;
        float _3230;
        float _3232;
        if (((((1u << ((_3143 >> 4u) & 15u)) + 4294967295u) & _3142) == 0u) || ((_3143 & 240u) == 0u))
        {
            _3222 = 0.0;
            _3224 = 0.0;
            _3226 = 0.0;
            _3228 = 0.0;
            _3230 = 0.0;
            _3232 = 0.0;
        }
        else
        {
            float _3223;
            float _3225;
            float _3227;
            float _3229;
            float _3231;
            float _3233;
            float _3375 = 0.0;
            float _3376 = 0.0;
            float _3377 = 0.0;
            float _3378 = 0.0;
            float _3379 = 0.0;
            float _3380 = 0.0;
            uint _3381 = 0u;
            uint _3390;
            bool _3391;
            for (;;)
            {
                _3390 = texelFetch(g_lightClassification, int((((_3136 << 5u) + (_3122 << 9u)) + (_3381 << 2u)) >> 2u)).x;
                _3391 = _3390 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3391)
                {
                    frontier_phi_71_pred = _3380;
                    frontier_phi_71_pred_1 = _3379;
                    frontier_phi_71_pred_2 = _3378;
                    frontier_phi_71_pred_3 = _3377;
                    frontier_phi_71_pred_4 = _3376;
                    frontier_phi_71_pred_5 = _3375;
                }
                else
                {
                    float _3520;
                    float _3521;
                    float _3522;
                    float _3523;
                    float _3524;
                    float _3525;
                    uint _3526;
                    _3520 = _3375;
                    _3521 = _3376;
                    _3522 = _3377;
                    _3523 = _3378;
                    _3524 = _3379;
                    _3525 = _3380;
                    _3526 = _3390;
                    float _3447;
                    float _3448;
                    float _3449;
                    float _3450;
                    float _3451;
                    float _3452;
                    for (;;)
                    {
                        uint _3530 = uint(findLSB(_3526)) + (_3381 << 5u);
                        uint _3527 = (_3526 + 4294967295u) & _3526;
                        uint _3532 = _3530 * 48u;
                        vec4 _3546 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3532)).x, texelFetch(g_PointLightRenderingBuffer, int(_3532 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3532 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3532 + 3u)).x));
                        uint _3552 = (_3530 * 48u) + 4u;
                        vec4 _3565 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3552)).x, texelFetch(g_PointLightRenderingBuffer, int(_3552 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3552 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3552 + 3u)).x));
                        uint _3571 = (_3530 * 48u) + 8u;
                        vec3 _3582 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3571)).x, texelFetch(g_PointLightRenderingBuffer, int(_3571 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3571 + 2u)).x));
                        float _3586 = _3546.x - _2201;
                        float _3587 = _3546.y - _2202;
                        float _3588 = _3546.z - _2203;
                        float _3589 = dot(vec3(_3586, _3587, _3588), vec3(_3586, _3587, _3588));
                        float _3592 = inversesqrt(_3589);
                        float _3593 = _3592 * _3586;
                        float _3594 = _3592 * _3587;
                        float _3595 = _3592 * _3588;
                        float _3596 = dot(vec3(_1036, _1039, _1042), vec3(_3593, _3594, _3595));
                        float _3601 = 1.0 - (_3589 * _3546.w);
                        float _5062 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                        float _3602 = isnan(1.0) ? _5062 : (isnan(_5062) ? 1.0 : min(_5062, 1.0));
                        float _3603 = sqrt(_3589) * _3565.w;
                        float _3606 = 1.39999997615814208984375 / (_3603 + 1.39999997615814208984375);
                        float _3607 = _3606 * _3606;
                        float _3610 = ((1.0 - _3607) * _3596) + _3607;
                        float _3613 = _3603 * _3603;
                        float _3617 = ((isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0))) * _3602) / ((_3613 * 0.699999988079071044921875) + 1.0);
                        float _3621 = (-0.0) - _2201;
                        float _3622 = (-0.0) - _2202;
                        float _3623 = (-0.0) - _2203;
                        float _3627 = inversesqrt(dot(vec3(_3621, _3622, _3623), vec3(_3621, _3622, _3623)));
                        float _3628 = _3627 * _3621;
                        float _3629 = _3627 * _3622;
                        float _3630 = _3627 * _3623;
                        float _3637 = exp2(log2(1.0 / ((_3613 * 3.5) + 5.0)) * 0.25);
                        float _3638 = 1.0 - _1111;
                        float _3645 = sqrt(1.0 - ((1.0 - (_3638 * _3638)) * (1.0 - (_3637 * _3637))));
                        float _3646 = _3645 * _3645;
                        float _3647 = _3646 * _3646;
                        float _3648 = _3628 + _3593;
                        float _3649 = _3629 + _3594;
                        float _3650 = _3630 + _3595;
                        float _3654 = inversesqrt(dot(vec3(_3648, _3649, _3650), vec3(_3648, _3649, _3650)));
                        float _3658 = dot(vec3(_1036, _1039, _1042), vec3(_3628, _3629, _3630));
                        float _5078 = isnan(0.0) ? _3658 : (isnan(_3658) ? 0.0 : max(_3658, 0.0));
                        float _3661 = isnan(1.0) ? _5078 : (isnan(_5078) ? 1.0 : min(_5078, 1.0));
                        float _3662 = dot(vec3(_1036, _1039, _1042), vec3(_3654 * _3648, _3654 * _3649, _3654 * _3650));
                        float _5089 = isnan(0.0) ? _3662 : (isnan(_3662) ? 0.0 : max(_3662, 0.0));
                        float _3665 = isnan(1.0) ? _5089 : (isnan(_5089) ? 1.0 : min(_5089, 1.0));
                        float _3669 = ((_3665 * _3665) * (_3647 + (-1.0))) + 1.0;
                        float _3670 = _3606 * _3646;
                        float _3671 = _3670 * _3670;
                        float _3674 = ((1.0 - _3671) * _3596) + _3671;
                        float _5100 = isnan(0.0) ? _3674 : (isnan(_3674) ? 0.0 : max(_3674, 0.0));
                        float _3675 = isnan(1.0) ? _5100 : (isnan(_5100) ? 1.0 : min(_5100, 1.0));
                        float _3676 = 1.0 - _3646;
                        float _3686 = (0.5 / (((_3675 * ((_3661 * _3676) + _3646)) + 9.9999999392252902907785028219223e-09) + (((_3675 * _3676) + _3646) * _3661))) * _3675;
                        float _5111 = isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : max(_3686, 0.0));
                        float _3697 = (((_3647 * 3.1415927410125732421875) * (isnan(1.0) ? _5111 : (isnan(_5111) ? 1.0 : min(_5111, 1.0)))) / ((_3669 * _3669) * ((_3613 * 2.1991131305694580078125) + 3.141590118408203125))) * _3602;
                        _3450 = (_3617 * _3565.x) + _3523;
                        _3451 = (_3617 * _3565.y) + _3524;
                        _3452 = (_3617 * _3565.z) + _3525;
                        _3447 = (_3697 * _3582.x) + _3520;
                        _3448 = (_3697 * _3582.y) + _3521;
                        _3449 = (_3697 * _3582.z) + _3522;
                        if (_3527 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3520 = _3447;
                            _3521 = _3448;
                            _3522 = _3449;
                            _3523 = _3450;
                            _3524 = _3451;
                            _3525 = _3452;
                            _3526 = _3527;
                        }
                    }
                    frontier_phi_71_pred = _3452;
                    frontier_phi_71_pred_1 = _3451;
                    frontier_phi_71_pred_2 = _3450;
                    frontier_phi_71_pred_3 = _3449;
                    frontier_phi_71_pred_4 = _3448;
                    frontier_phi_71_pred_5 = _3447;
                }
                _3233 = frontier_phi_71_pred;
                _3231 = frontier_phi_71_pred_1;
                _3229 = frontier_phi_71_pred_2;
                _3227 = frontier_phi_71_pred_3;
                _3225 = frontier_phi_71_pred_4;
                _3223 = frontier_phi_71_pred_5;
                uint _3382 = _3381 + 1u;
                if (_3382 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3375 = _3223;
                    _3376 = _3225;
                    _3377 = _3227;
                    _3378 = _3229;
                    _3379 = _3231;
                    _3380 = _3233;
                    _3381 = _3382;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3222 = _3223;
            _3224 = _3225;
            _3226 = _3227;
            _3228 = _3229;
            _3230 = _3231;
            _3232 = _3233;
        }
        uvec4 _3236 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3237 = _3236.z;
        uint _3239 = (_3237 >> 8u) & 15u;
        float _3343;
        float _3345;
        float _3347;
        float _3349;
        float _3351;
        float _3353;
        if (((4294967295u << _3239) & _3142) == 0u)
        {
            _3343 = _3222;
            _3345 = _3224;
            _3347 = _3226;
            _3349 = _3228;
            _3351 = _3230;
            _3353 = _3232;
        }
        else
        {
            float _3368 = inversesqrt(dot(vec3(_2201, _2202, _2203), vec3(_2201, _2202, _2203)));
            float _3369 = _3368 * _2201;
            float _3370 = _3368 * _2202;
            float _3371 = _3368 * _2203;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3239 < ((_3237 >> 12u) & 15u))
            {
                float _3344;
                float _3346;
                float _3348;
                float _3350;
                float _3352;
                float _3354;
                float _3503 = _3222;
                float _3504 = _3224;
                float _3505 = _3226;
                float _3506 = _3228;
                float _3507 = _3230;
                float _3508 = _3232;
                uint _3509 = _3239;
                uint _3518;
                bool _3519;
                for (;;)
                {
                    _3518 = texelFetch(g_lightClassification, int((((_3136 << 5u) + (_3122 << 9u)) + (_3509 << 2u)) >> 2u)).x;
                    _3519 = _3518 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3519)
                    {
                        frontier_phi_82_pred = _3508;
                        frontier_phi_82_pred_1 = _3507;
                        frontier_phi_82_pred_2 = _3506;
                        frontier_phi_82_pred_3 = _3505;
                        frontier_phi_82_pred_4 = _3504;
                        frontier_phi_82_pred_5 = _3503;
                    }
                    else
                    {
                        float _3711;
                        float _3712;
                        float _3713;
                        float _3714;
                        float _3715;
                        float _3716;
                        float _4004;
                        float _4005;
                        float _4006;
                        float _4007;
                        float _4008;
                        float _4009;
                        float _3724 = _3503;
                        float _3725 = _3504;
                        float _3726 = _3505;
                        float _3727 = _3506;
                        float _3728 = _3507;
                        float _3729 = _3508;
                        uint _3730 = _3518;
                        uint _3731;
                        vec4 _3756;
                        float _3757;
                        vec4 _3772;
                        vec3 _3784;
                        vec4 _3799;
                        vec4 _3814;
                        float _3860;
                        bool _3861;
                        for (;;)
                        {
                            uint _3741 = ((_3509 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3730));
                            _3731 = (_3730 + 4294967295u) & _3730;
                            uint _3743 = _3741 * 40u;
                            _3756 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3743)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 3u)).x));
                            _3757 = _3756.w;
                            uint _3759 = (_3741 * 40u) + 4u;
                            _3772 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3759)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3759 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3759 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3759 + 3u)).x));
                            uint _3774 = (_3741 * 40u) + 8u;
                            _3784 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3774)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3774 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3774 + 2u)).x));
                            uint _3786 = (_3741 * 40u) + 16u;
                            _3799 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3786)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3786 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3786 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3786 + 3u)).x));
                            uint _3801 = (_3741 * 40u) + 20u;
                            _3814 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3801)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3801 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3801 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3801 + 3u)).x));
                            uint _3816 = (_3741 * 40u) + 24u;
                            vec4 _3829 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3816)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3816 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3816 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3816 + 3u)).x));
                            uint _3835 = (_3741 * 40u) + 28u;
                            vec4 _3848 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3835)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3835 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3835 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3835 + 3u)).x));
                            _3860 = fma(_2203, _3848.z, fma(_2202, _3848.y, _3848.x * _2201)) + _3848.w;
                            _3861 = !((fma(_2203, _3829.z, fma(_2202, _3829.y, _3829.x * _2201)) + _3829.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3861)
                            {
                                float _3888 = _3756.x - _2201;
                                float _3889 = _3756.y - _2202;
                                float _3890 = _3756.z - _2203;
                                float _3891 = dot(vec3(_3888, _3889, _3890), vec3(_3888, _3889, _3890));
                                float _3894 = inversesqrt(_3891);
                                float _3895 = _3894 * _3888;
                                float _3896 = _3894 * _3889;
                                float _3897 = _3894 * _3890;
                                float _3901 = 1.0 - (_3891 / (_3757 * _3757));
                                float _5122 = isnan(0.0) ? _3901 : (isnan(_3901) ? 0.0 : max(_3901, 0.0));
                                float _3902 = isnan(1.0) ? _5122 : (isnan(_5122) ? 1.0 : min(_5122, 1.0));
                                float _3906 = sqrt(_3891) * _3772.w;
                                float _3908 = 1.39999997615814208984375 / (_3906 + 1.39999997615814208984375);
                                float _3909 = _3908 * _3908;
                                float _3912 = ((1.0 - _3909) * dot(vec3(_3895, _3896, _3897), vec3(_1036, _1039, _1042))) + _3909;
                                float _3915 = _3906 * _3906;
                                float _3919 = (fma(_2203, _3799.z, fma(_2202, _3799.y, _3799.x * _2201)) + _3799.w) / _3860;
                                float _3920 = (fma(_2203, _3814.z, fma(_2202, _3814.y, _3814.x * _2201)) + _3814.w) / _3860;
                                float _3924 = 1.0 - dot(vec2(_3919, _3920), vec2(_3919, _3920));
                                float _5138 = isnan(0.0) ? _3924 : (isnan(_3924) ? 0.0 : max(_3924, 0.0));
                                float _3925 = isnan(1.0) ? _5138 : (isnan(_5138) ? 1.0 : min(_5138, 1.0));
                                float _3926 = _3925 * (((isnan(0.0) ? _3912 : (isnan(_3912) ? 0.0 : max(_3912, 0.0))) * _3902) / ((_3915 * 0.699999988079071044921875) + 1.0));
                                float _3938 = exp2(log2(1.0 / ((_3915 * 3.5) + 5.0)) * 0.25);
                                float _3939 = 1.0 - _1111;
                                float _3946 = sqrt(1.0 - ((1.0 - (_3939 * _3939)) * (1.0 - (_3938 * _3938))));
                                float _3947 = _3946 * _3946;
                                float _3948 = _3947 * _3947;
                                float _3949 = _3895 - _3369;
                                float _3950 = _3896 - _3370;
                                float _3951 = _3897 - _3371;
                                float _3955 = inversesqrt(dot(vec3(_3949, _3950, _3951), vec3(_3949, _3950, _3951)));
                                float _3959 = dot(vec3(_1036, _1039, _1042), vec3((-0.0) - _3369, (-0.0) - _3370, (-0.0) - _3371));
                                float _5149 = isnan(0.0) ? _3959 : (isnan(_3959) ? 0.0 : max(_3959, 0.0));
                                float _3962 = isnan(1.0) ? _5149 : (isnan(_5149) ? 1.0 : min(_5149, 1.0));
                                float _3963 = dot(vec3(_1036, _1039, _1042), vec3(_3955 * _3949, _3955 * _3950, _3955 * _3951));
                                float _5160 = isnan(0.0) ? _3963 : (isnan(_3963) ? 0.0 : max(_3963, 0.0));
                                float _3966 = isnan(1.0) ? _5160 : (isnan(_5160) ? 1.0 : min(_5160, 1.0));
                                float _3970 = ((_3966 * _3966) * (_3948 + (-1.0))) + 1.0;
                                float _3971 = _3908 * _3947;
                                float _3972 = _3971 * _3971;
                                float _3978 = ((1.0 - _3972) * dot(vec3(_1036, _1039, _1042), vec3(_3895, _3896, _3897))) + _3972;
                                float _5171 = isnan(0.0) ? _3978 : (isnan(_3978) ? 0.0 : max(_3978, 0.0));
                                float _3979 = isnan(1.0) ? _5171 : (isnan(_5171) ? 1.0 : min(_5171, 1.0));
                                float _3980 = 1.0 - _3947;
                                float _3990 = (0.5 / (((_3979 * ((_3962 * _3980) + _3947)) + 9.9999999392252902907785028219223e-09) + (((_3979 * _3980) + _3947) * _3962))) * _3979;
                                float _5182 = isnan(0.0) ? _3990 : (isnan(_3990) ? 0.0 : max(_3990, 0.0));
                                float _4000 = (_3925 * _3902) * (((_3948 * 3.1415927410125732421875) * (isnan(1.0) ? _5182 : (isnan(_5182) ? 1.0 : min(_5182, 1.0)))) / ((_3970 * _3970) * ((_3915 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3926 * _3772.z;
                                frontier_phi_88_pred_1 = _3926 * _3772.y;
                                frontier_phi_88_pred_2 = _3926 * _3772.x;
                                frontier_phi_88_pred_3 = _4000 * _3784.z;
                                frontier_phi_88_pred_4 = _4000 * _3784.y;
                                frontier_phi_88_pred_5 = _4000 * _3784.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4009 = frontier_phi_88_pred;
                            _4008 = frontier_phi_88_pred_1;
                            _4007 = frontier_phi_88_pred_2;
                            _4006 = frontier_phi_88_pred_3;
                            _4005 = frontier_phi_88_pred_4;
                            _4004 = frontier_phi_88_pred_5;
                            _3714 = _4007 + _3727;
                            _3715 = _4008 + _3728;
                            _3716 = _4009 + _3729;
                            _3711 = _4004 + _3724;
                            _3712 = _4005 + _3725;
                            _3713 = _4006 + _3726;
                            if (_3731 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3724 = _3711;
                                _3725 = _3712;
                                _3726 = _3713;
                                _3727 = _3714;
                                _3728 = _3715;
                                _3729 = _3716;
                                _3730 = _3731;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3716;
                        frontier_phi_82_pred_1 = _3715;
                        frontier_phi_82_pred_2 = _3714;
                        frontier_phi_82_pred_3 = _3713;
                        frontier_phi_82_pred_4 = _3712;
                        frontier_phi_82_pred_5 = _3711;
                    }
                    _3354 = frontier_phi_82_pred;
                    _3352 = frontier_phi_82_pred_1;
                    _3350 = frontier_phi_82_pred_2;
                    _3348 = frontier_phi_82_pred_3;
                    _3346 = frontier_phi_82_pred_4;
                    _3344 = frontier_phi_82_pred_5;
                    uint _3510 = _3509 + 1u;
                    if (_3510 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3503 = _3344;
                        _3504 = _3346;
                        _3505 = _3348;
                        _3506 = _3350;
                        _3507 = _3352;
                        _3508 = _3354;
                        _3509 = _3510;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3350;
                frontier_phi_63_64_ladder_1 = _3354;
                frontier_phi_63_64_ladder_2 = _3352;
                frontier_phi_63_64_ladder_3 = _3348;
                frontier_phi_63_64_ladder_4 = _3346;
                frontier_phi_63_64_ladder_5 = _3344;
            }
            else
            {
                frontier_phi_63_64_ladder = _3228;
                frontier_phi_63_64_ladder_1 = _3232;
                frontier_phi_63_64_ladder_2 = _3230;
                frontier_phi_63_64_ladder_3 = _3226;
                frontier_phi_63_64_ladder_4 = _3224;
                frontier_phi_63_64_ladder_5 = _3222;
            }
            _3343 = frontier_phi_63_64_ladder_5;
            _3345 = frontier_phi_63_64_ladder_4;
            _3347 = frontier_phi_63_64_ladder_3;
            _3349 = frontier_phi_63_64_ladder;
            _3351 = frontier_phi_63_64_ladder_2;
            _3353 = frontier_phi_63_64_ladder_1;
        }
        float _3358 = isnan(1.0) ? _1095 : (isnan(_1095) ? 1.0 : min(_1095, 1.0));
        _3155 = (_3358 * _3349) + _2667;
        _3157 = (_3358 * _3351) + _2669;
        _3159 = (_3358 * _3353) + _2671;
        _3161 = ((_3343 * _1079) * _3358) + _3005;
        _3163 = ((_3345 * _1081) * _3358) + _3007;
        _3165 = ((_3347 * _1082) * _3358) + _3009;
    }
    else
    {
        _3155 = _2667;
        _3157 = _2669;
        _3159 = _2671;
        _3161 = _3005;
        _3163 = _3007;
        _3165 = _3009;
    }
    float _5198 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
    float _5209 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _5220 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
    float _3182 = ((isnan(1.0) ? _5198 : (isnan(_5198) ? 1.0 : min(_5198, 1.0))) * (_3155 + ((isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0))) * _1095))) + ((_3161 + ((isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0))) * _1933)) * cbPerFrame._m0[3u].x);
    float _3183 = ((isnan(1.0) ? _5209 : (isnan(_5209) ? 1.0 : min(_5209, 1.0))) * (_3157 + ((isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0))) * _1095))) + ((_3163 + ((isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0))) * _1933)) * cbPerFrame._m0[3u].x);
    float _3184 = ((isnan(1.0) ? _5220 : (isnan(_5220) ? 1.0 : min(_5220, 1.0))) * (_3159 + ((isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0))) * _1095))) + ((_3165 + ((isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0))) * _1933)) * cbPerFrame._m0[3u].x);
    uint _3185 = _271 + 6u;
    float _3193 = _1017 / cbSceneParam._m0[86u].x;
    float _3194 = _1018 / cbSceneParam._m0[86u].y;
    vec4 _3208 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3193, _3194, (log2((isnan(cbSceneParam._m0[77u].w) ? _940 : (isnan(_940) ? cbSceneParam._m0[77u].w : min(_940, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3210 = _3208.x;
    float _3211 = _3208.y;
    float _3212 = _3208.z;
    float _3213 = _3208.w;
    float _3285;
    float _3287;
    float _3289;
    float _3291;
    if (_940 > cbSceneParam._m0[78u].w)
    {
        float _3247 = isnan(_940) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _940 : min(cbSceneParam._m0[80u].w, _940));
        float _3248 = _3247 / _940;
        float _3259 = _3248 * _990;
        float _3260 = _991 * _3248;
        float _3261 = (-0.0) - _3260;
        float _3263 = _3248 * _992;
        float _3265 = (cbSceneParam._m0[77u].w * _3261) / _3247;
        float _3266 = _3265 + cbSceneParam._m0[79u].w;
        float _3267 = cbSceneParam._m0[79u].w - _3260;
        float _3273 = sqrt(((_3259 * _3259) + (_3260 * _3260)) + (_3263 * _3263));
        float _3276 = (1.0 - (cbSceneParam._m0[77u].w / _3247)) * _3273;
        float _3281 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3283 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3460;
        if (abs((_3261 - _3265) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3460 = ((((_3266 > 0.0) ? exp2(_3281 * _3266) : (2.0 - exp2(_3283 * _3266))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3276;
        }
        else
        {
            float _3404 = 1.0 / cbSceneParam._m0[80u].x;
            float _3405 = isnan(_3267) ? _3266 : (isnan(_3266) ? _3267 : max(_3266, _3267));
            float _3406 = isnan(_3267) ? _3266 : (isnan(_3266) ? _3267 : min(_3266, _3267));
            float _3415 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : min(_3405, 0.0));
            float _3416 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : min(_3406, 0.0));
            _3460 = ((abs(_3273 / _3261) * cbSceneParam._m0[80u].y) * ((((_3415 - _3416) * 2.0) - ((exp2(_3281 * (isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0)))) - exp2(_3281 * (isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0))))) * _3404)) - ((exp2(_3283 * _3415) - exp2(_3283 * _3416)) * _3404))) + (_3276 * cbSceneParam._m0[80u].z);
        }
        vec4 _3462 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3193, _3194, 1.0), 0.0);
        float _3471 = exp2((_3460 * (-1.44269502162933349609375)) * (1.0 - _3462.w));
        float _3472 = log2(_3471);
        float _3488 = log2(_3213);
        _3285 = (exp2(_3488 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3472 * cbSceneParam._m0[78u].x)) * _3462.x) / cbSceneParam._m0[78u].x)) + _3210;
        _3287 = (exp2(_3488 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3472 * cbSceneParam._m0[78u].y)) * _3462.y) / cbSceneParam._m0[78u].y)) + _3211;
        _3289 = (exp2(_3488 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3472 * cbSceneParam._m0[78u].z)) * _3462.z) / cbSceneParam._m0[78u].z)) + _3212;
        _3291 = _3471 * _3213;
    }
    else
    {
        _3285 = _3210;
        _3287 = _3211;
        _3289 = _3212;
        _3291 = _3213;
    }
    bool _3498;
    vec4 _3301;
    vec4 _3323;
    float _3325;
    float _3329;
    float _3330;
    float _3331;
    float _3332;
    bool _3342;
    for (;;)
    {
        _3301 = cbMatDynParam._m0[0u];
        float _3303 = roundEven(_3301.y);
        bool _3304 = _3303 == 3.0;
        float _3305 = log2(_3291);
        float _3312 = exp2(_3305 * cbSceneParam._m0[78u].x) * _3182;
        float _3313 = exp2(_3305 * cbSceneParam._m0[78u].y) * _3183;
        float _3314 = exp2(_3305 * cbSceneParam._m0[78u].z) * _3184;
        float _3321 = _1006 + (-0.5);
        _3323 = cbMtdParam._m0[1u];
        _3325 = _3323.y * _3321;
        float _3328 = (_3303 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3329 = _3328 * (_3304 ? _3312 : (_3312 + (cbSceneParam._m0[72u].w * _3285)));
        _3330 = _3328 * (_3304 ? _3313 : (_3313 + (cbSceneParam._m0[72u].w * _3287)));
        _3331 = _3328 * (_3304 ? _3314 : (_3314 + (cbSceneParam._m0[72u].w * _3289)));
        _3332 = _3321 * 0.999000012874603271484375;
        _3342 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3342)
        {
            if ((cbInstanceData._m0[_271 + 7u].x + _3332) < 0.5)
            {
                _3498 = true;
                break;
            }
        }
        uint _3439 = _1055 + uint(_3301.w);
        if ((cbInstanceData._m0[_3439].w < 1.0) && ((cbInstanceData._m0[_3439].w + _3332) < 0.5))
        {
            _3498 = true;
            break;
        }
        if ((_3325 + 1.0) < _3323.x)
        {
            _3498 = true;
            break;
        }
        _3498 = false;
        break;
    }
    float _3702;
    if (_3498)
    {
        discard_state = true;
        _3702 = 0.0;
    }
    else
    {
        _3702 = cbInstanceData._m0[_3185].w;
    }
    SV_Target.x = _3329;
    SV_Target.y = _3330;
    SV_Target.z = _3331;
    SV_Target.w = _3702;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3185].w;
    discard_exit();
}


