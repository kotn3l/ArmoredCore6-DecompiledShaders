#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1391;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4000 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _4011 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _4022 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    uint _278 = uint(roundEven(NORMAL.w)) * 13u;
    uint _283 = _278 + 1u;
    uint _287 = _278 + 2u;
    float _296 = sqrt(((cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x)) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x));
    float _297 = _296 * TEXCOORD.z;
    float _298 = _296 * TEXCOORD.w;
    vec4 _311 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _297) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _298) + cbTextureTilingScale._m0[13u].w));
    vec4 _335 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _340 = _335.x * cbMtdParam._m0[11u].x;
    float _341 = _335.y * cbMtdParam._m0[11u].y;
    float _342 = _335.z * cbMtdParam._m0[11u].z;
    vec4 _361 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _297) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _298) + cbTextureTilingScale._m0[5u].w));
    vec4 _398 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _400 = _398.x;
    float _412 = dot(vec4(_400, _398.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _429 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_400 - _412) * cbMtdParam._m0[24u].y) + _412) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4033 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _430 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    float _437 = (_430 * ((_361.x * cbMtdParam._m0[12u].x) - _340)) + _340;
    float _438 = (_430 * ((_361.y * cbMtdParam._m0[12u].y) - _341)) + _341;
    float _439 = (_430 * ((_361.z * cbMtdParam._m0[12u].z) - _342)) + _342;
    vec4 _456 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _297) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _298) + cbTextureTilingScale._m0[3u].w));
    vec4 _476 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _478 = _476.x;
    float _488 = dot(vec4(_478, _476.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _502 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_478 - _488) * cbMtdParam._m0[24u].y) + _488) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4044 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _503 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _510 = (_503 * ((_456.x * cbMtdParam._m0[13u].x) - _437)) + _437;
    float _511 = (_503 * ((_456.y * cbMtdParam._m0[13u].y) - _438)) + _438;
    float _512 = (_503 * ((_456.z * cbMtdParam._m0[13u].z) - _439)) + _439;
    float _516 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _311.x) * _510;
    float _519 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _311.y) * _511;
    float _522 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _311.z) * _512;
    float _529 = ((_510 - _516) * (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0)))) + _516;
    float _530 = ((_511 - _519) * (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0)))) + _519;
    float _531 = ((_512 - _522) * (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) + _522;
    vec4 _548 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _297) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _298) + cbTextureTilingScale._m0[20u].w));
    vec4 _571 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _297) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _298) + cbTextureTilingScale._m0[4u].w));
    vec4 _588 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _590 = _588.x;
    float _591 = _588.y;
    float _592 = _588.z;
    float _599 = ((_571.x - _590) * _430) + _590;
    float _600 = ((_571.y - _591) * _430) + _591;
    float _601 = ((_571.z - _592) * _430) + _592;
    vec4 _613 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _297) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _298) + cbTextureTilingScale._m0[2u].w));
    float _626 = ((_613.z - _601) * _503) + _601;
    float _629 = ((((_613.x - _599) * _503) + _599) * 2.0) + (-1.0);
    float _630 = ((((_613.y - _600) * _503) + _600) * 2.0) + (-1.0);
    float _631 = dot(vec2(_629, _630), vec2(_629, _630));
    float _4055 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _636 = sqrt(1.0 - (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))));
    vec4 _650 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _675 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _297) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _298) + cbTextureTilingScale._m0[11u].w));
    float _677 = _675.x;
    float _678 = 1.0 - _677;
    float _691 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_677 - _678) * cbMtdParam._m0[24u].z) + _678) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4066 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _692 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    float _699 = (_692 * (cbMtdParam._m0[17u].x - _529)) + _529;
    float _700 = (_692 * (cbMtdParam._m0[17u].y - _530)) + _530;
    float _701 = (_692 * (cbMtdParam._m0[17u].z - _531)) + _531;
    vec4 _713 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _727 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _729 = _727.x;
    float _747 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _297) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _298) + cbTextureTilingScale._m0[9u].w)).x - _729) * _430) + _729;
    float _764 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _297) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _298) + cbTextureTilingScale._m0[21u].w)).x - _747) * _503) + _747;
    float _768 = ((_713.x - _764) * cbMtdParam._m0[19u].z) + _764;
    float _770 = _768 - (_768 * _692);
    float _775 = (((_548.z - _626) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _626;
    float _779 = ((_650.z - _775) * cbMtdParam._m0[19u].w) + _775;
    vec4 _792 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _297) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _298) + cbTextureTilingScale._m0[15u].w));
    float _799 = (_792.x * 2.0) + (-1.0);
    float _800 = (_792.y * 2.0) + (-1.0);
    float _801 = dot(vec2(_799, _800), vec2(_799, _800));
    float _4077 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _809 = (_692 * (_792.z - _779)) + _779;
    float _818 = (_629 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_548.x * 2.0) + (-1.0)))) + (((_650.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _819 = (_630 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_548.y * 2.0) + (-1.0)))) + (((_650.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _831 = (((_799 - _818) + (cbMtdParam._m0[21u].x * _818)) * _692) + _818;
    float _832 = (((_800 - _819) + (cbMtdParam._m0[21u].x * _819)) * _692) + _819;
    float _833 = (_692 * (sqrt(1.0 - (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0)))) - _636)) + _636;
    float _837 = cbMtdParam._m0[22u].x + _650.w;
    float _840 = fma(_833, _244 * NORMAL.x, fma(_832, _251 * TANGENT.x, (_237 * _229) * _831));
    float _843 = fma(_833, _244 * NORMAL.y, fma(_832, _251 * TANGENT.y, (_237 * _230) * _831));
    float _846 = fma(_833, _244 * NORMAL.z, fma(_832, _251 * TANGENT.z, (_237 * _231) * _831));
    float _850 = inversesqrt(dot(vec3(_840, _843, _846), vec3(_840, _843, _846)));
    float _851 = _850 * _840;
    float _852 = _850 * _843;
    float _853 = _850 * _846;
    float _4088 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _854 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _4099 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _4110 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _4121 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _4132 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _4143 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _859 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _873 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _914 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _924 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _914);
    float _925 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _914);
    float _926 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _914);
    float _930 = inversesqrt(dot(vec3(_924, _925, _926), vec3(_924, _925, _926)));
    float _931 = _924 * _930;
    float _932 = _925 * _930;
    float _933 = _926 * _930;
    float _939 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _940 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _958 = fma(_853, cbSceneParam._m0[5u].z, fma(_852, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _851));
    float _961 = fma(_853, cbSceneParam._m0[6u].z, fma(_852, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _851));
    float _964 = fma(_853, cbSceneParam._m0[7u].z, fma(_852, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _851));
    uint _978 = (_278 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _984 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0)))) * cbInstanceData._m0[_978].x;
    float _985 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0)))) * cbInstanceData._m0[_978].y;
    float _986 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) * cbInstanceData._m0[_978].z;
    float _4154 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _987 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
    float _4165 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _988 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
    float _4176 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _989 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _990 = 1.0 - _859;
    float _991 = _987 * _990;
    float _992 = _988 * _990;
    float _993 = _989 * _990;
    float _998 = (_987 + (-0.039999999105930328369140625)) * _859;
    float _999 = (_988 + (-0.039999999105930328369140625)) * _859;
    float _1000 = (_989 + (-0.039999999105930328369140625)) * _859;
    float _1001 = _998 + 0.039999999105930328369140625;
    float _1003 = _999 + 0.039999999105930328369140625;
    float _1004 = _1000 + 0.039999999105930328369140625;
    vec4 _1013 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _939, cbSceneParam._m0[86u].y * _940));
    float _1017 = ((isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * TEXCOORD_5.w) * _1013.x;
    float _1018 = dot(vec3(_851, _852, _853), vec3(_931, _932, _933));
    float _1021 = _1018 * 2.0;
    float _1025 = (_1021 * _851) - _931;
    float _1026 = (_1021 * _852) - _932;
    float _1027 = (_1021 * _853) - _933;
    float _1031 = abs(dot(vec3(_931, _932, _933), vec3(_851, _852, _853)));
    float _4187 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _1033 = sqrt(_854);
    float _1046 = exp2((_1033 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1033 * 3.0));
    float _1052 = (1.0 - _1046) * ((_1033 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1053 = _1046 * _1033;
    float _1081 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1085 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1089 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1390;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1115 = fma(_1089, cbModelParam._m0[26u].z, fma(_1085, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1081));
        float _1119 = fma(_1089, cbModelParam._m0[27u].z, fma(_1085, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1081));
        float _1123 = fma(_1089, cbModelParam._m0[28u].z, fma(_1085, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1081));
        float _1148 = _1081 + _851;
        float _1149 = _1085 + _852;
        float _1150 = _1089 + _853;
        float _1160 = fma(_1150, cbModelParam._m0[26u].z, fma(_1149, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1148)) - _1115;
        float _1161 = fma(_1150, cbModelParam._m0[27u].z, fma(_1149, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1148)) - _1119;
        float _1162 = fma(_1150, cbModelParam._m0[28u].z, fma(_1149, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1148)) - _1123;
        float _1166 = inversesqrt(dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162)));
        float _1179 = ((_1166 * _1160) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1115 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1180 = ((_1166 * _1161) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1119 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1181 = ((_1166 * _1162) / cbModelParam._m0[34u].z) + ((((((_1123 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        float _1218 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1184.x + (-0.5));
        float _1220 = _1218 * (_1184.y + (-0.5));
        float _1221 = _1218 * (_1184.z + (-0.5));
        float _1228 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1191.x + (-0.5));
        float _1230 = _1228 * (_1191.y + (-0.5));
        float _1231 = _1228 * (_1191.z + (-0.5));
        float _1238 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1198.x + (-0.5));
        float _1240 = _1238 * (_1198.y + (-0.5));
        float _1241 = _1238 * (_1198.z + (-0.5));
        float _1248 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1205.x + (-0.5));
        float _1250 = _1248 * (_1205.y + (-0.5));
        float _1251 = _1248 * (_1205.z + (-0.5));
        float _1252 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1253 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1254 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1255 = _1219 * 0.5;
        float _1256 = _1229 * 0.5;
        float _1257 = _1239 * 0.5;
        float _1258 = dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257));
        float _1263 = (_1258 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1258);
        float _1272 = (dot(vec3(_851, _852, _853), vec3(_1263 * _1255, _1263 * _1256, _1263 * _1257)) + 1.0) * 0.5;
        float _4213 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1282 = sqrt(((_1256 * _1256) + (_1255 * _1255)) + (_1257 * _1257)) / (_1252 + 9.9999997473787516355514526367188e-06);
        float _4224 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1284 = _1283 * 2.0;
        float _1288 = (1.0 - _1283) / (_1283 + 1.0);
        float _4235 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1298 = ((((1.0 - _1289) * (_1284 + 2.0)) * exp2(log2(isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_1284 + 1.0))) + _1289) * _1252;
        float _1299 = _1220 * 0.5;
        float _1300 = _1230 * 0.5;
        float _1301 = _1240 * 0.5;
        float _1302 = dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301));
        float _1307 = (_1302 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1302);
        float _1315 = (dot(vec3(_851, _852, _853), vec3(_1307 * _1299, _1307 * _1300, _1307 * _1301)) + 1.0) * 0.5;
        float _4246 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1324 = sqrt(((_1300 * _1300) + (_1299 * _1299)) + (_1301 * _1301)) / (_1253 + 9.9999997473787516355514526367188e-06);
        float _4257 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1326 = _1325 * 2.0;
        float _1330 = (1.0 - _1325) / (_1325 + 1.0);
        float _4268 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _1340 = ((((1.0 - _1331) * (_1326 + 2.0)) * exp2(log2(isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_1326 + 1.0))) + _1331) * _1253;
        float _1341 = _1221 * 0.5;
        float _1342 = _1231 * 0.5;
        float _1343 = _1241 * 0.5;
        float _1344 = dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343));
        float _1349 = (_1344 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1344);
        float _1357 = (dot(vec3(_851, _852, _853), vec3(_1349 * _1341, _1349 * _1342, _1349 * _1343)) + 1.0) * 0.5;
        float _4279 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1366 = sqrt(((_1342 * _1342) + (_1341 * _1341)) + (_1343 * _1343)) / (_1254 + 9.9999997473787516355514526367188e-06);
        float _4290 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1368 = _1367 * 2.0;
        float _1372 = (1.0 - _1367) / (_1367 + 1.0);
        float _4301 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _1382 = ((((1.0 - _1373) * (_1368 + 2.0)) * exp2(log2(isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_1368 + 1.0))) + _1373) * _1254;
        _1390 = _1221;
        _1392 = _1220;
        _1393 = _1219;
        _1394 = _1231;
        _1395 = _1230;
        _1396 = _1229;
        _1397 = _1241;
        _1398 = _1240;
        _1399 = _1239;
        _1400 = _1254;
        _1401 = _1253;
        _1402 = _1252;
        _1403 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)));
        _1404 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)));
        _1405 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)));
    }
    else
    {
        _1390 = _1391;
        _1392 = _1391;
        _1393 = _1391;
        _1394 = _1391;
        _1395 = _1391;
        _1396 = _1391;
        _1397 = _1391;
        _1398 = _1391;
        _1399 = _1391;
        _1400 = _1391;
        _1401 = _1391;
        _1402 = _1391;
        _1403 = 0.0;
        _1404 = 0.0;
        _1405 = 0.0;
    }
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1429 = fma(_1089, cbModelParam._m0[30u].z, fma(_1085, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1081));
        float _1433 = fma(_1089, cbModelParam._m0[31u].z, fma(_1085, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1081));
        float _1437 = fma(_1089, cbModelParam._m0[32u].z, fma(_1085, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1081));
        float _1460 = _1081 + _851;
        float _1461 = _1085 + _852;
        float _1462 = _1089 + _853;
        float _1472 = fma(_1462, cbModelParam._m0[30u].z, fma(_1461, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1460)) - _1429;
        float _1473 = fma(_1462, cbModelParam._m0[31u].z, fma(_1461, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1460)) - _1433;
        float _1474 = fma(_1462, cbModelParam._m0[32u].z, fma(_1461, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1460)) - _1437;
        float _1478 = inversesqrt(dot(vec3(_1472, _1473, _1474), vec3(_1472, _1473, _1474)));
        float _1491 = ((_1478 * _1472) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1429 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1492 = ((_1478 * _1473) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1433 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1493 = ((_1478 * _1474) / cbModelParam._m0[35u].z) + ((((((_1437 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1495 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1491, _1492, _1493), 0.0);
        vec4 _1502 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1491, _1492, _1493), 0.0);
        vec4 _1509 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1491, _1492, _1493), 0.0);
        vec4 _1516 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1491, _1492, _1493), 0.0);
        float _1528 = exp2((_1495.w + (-0.5)) * 20.0) * 2.0;
        float _1529 = _1528 * (_1495.x + (-0.5));
        float _1530 = _1528 * (_1495.y + (-0.5));
        float _1531 = _1528 * (_1495.z + (-0.5));
        float _1538 = exp2((_1502.w + (-0.5)) * 20.0) * 2.0;
        float _1539 = _1538 * (_1502.x + (-0.5));
        float _1540 = _1538 * (_1502.y + (-0.5));
        float _1541 = _1538 * (_1502.z + (-0.5));
        float _1548 = exp2((_1509.w + (-0.5)) * 20.0) * 2.0;
        float _1549 = _1548 * (_1509.x + (-0.5));
        float _1550 = _1548 * (_1509.y + (-0.5));
        float _1551 = _1548 * (_1509.z + (-0.5));
        float _1558 = exp2((_1516.w + (-0.5)) * 20.0) * 2.0;
        float _1559 = _1558 * (_1516.x + (-0.5));
        float _1560 = _1558 * (_1516.y + (-0.5));
        float _1561 = _1558 * (_1516.z + (-0.5));
        float _1562 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1563 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1564 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1565 = _1529 * 0.5;
        float _1566 = _1539 * 0.5;
        float _1567 = _1549 * 0.5;
        float _1568 = dot(vec3(_1565, _1566, _1567), vec3(_1565, _1566, _1567));
        float _1573 = (_1568 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1568);
        float _1581 = (dot(vec3(_851, _852, _853), vec3(_1573 * _1565, _1573 * _1566, _1573 * _1567)) + 1.0) * 0.5;
        float _4342 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1590 = sqrt(((_1566 * _1566) + (_1565 * _1565)) + (_1567 * _1567)) / (_1562 + 9.9999997473787516355514526367188e-06);
        float _4353 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _1592 = _1591 * 2.0;
        float _1596 = (1.0 - _1591) / (_1591 + 1.0);
        float _4364 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _1606 = ((((1.0 - _1597) * (_1592 + 2.0)) * exp2(log2(isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_1592 + 1.0))) + _1597) * _1562;
        float _1607 = _1530 * 0.5;
        float _1608 = _1540 * 0.5;
        float _1609 = _1550 * 0.5;
        float _1610 = dot(vec3(_1607, _1608, _1609), vec3(_1607, _1608, _1609));
        float _1615 = (_1610 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1610);
        float _1623 = (dot(vec3(_851, _852, _853), vec3(_1615 * _1607, _1615 * _1608, _1615 * _1609)) + 1.0) * 0.5;
        float _4375 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1632 = sqrt(((_1608 * _1608) + (_1607 * _1607)) + (_1609 * _1609)) / (_1563 + 9.9999997473787516355514526367188e-06);
        float _4386 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _1634 = _1633 * 2.0;
        float _1638 = (1.0 - _1633) / (_1633 + 1.0);
        float _4397 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _1648 = ((((1.0 - _1639) * (_1634 + 2.0)) * exp2(log2(isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * (_1634 + 1.0))) + _1639) * _1563;
        float _1649 = _1531 * 0.5;
        float _1650 = _1541 * 0.5;
        float _1651 = _1551 * 0.5;
        float _1652 = dot(vec3(_1649, _1650, _1651), vec3(_1649, _1650, _1651));
        float _1657 = (_1652 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1652);
        float _1665 = (dot(vec3(_851, _852, _853), vec3(_1657 * _1649, _1657 * _1650, _1657 * _1651)) + 1.0) * 0.5;
        float _4408 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1674 = sqrt(((_1650 * _1650) + (_1649 * _1649)) + (_1651 * _1651)) / (_1564 + 9.9999997473787516355514526367188e-06);
        float _4419 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _1676 = _1675 * 2.0;
        float _1680 = (1.0 - _1675) / (_1675 + 1.0);
        float _4430 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1681 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
        float _1690 = ((((1.0 - _1681) * (_1676 + 2.0)) * exp2(log2(isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * (_1676 + 1.0))) + _1681) * _1564;
        _1698 = _1531;
        _1699 = _1530;
        _1700 = _1529;
        _1701 = _1541;
        _1702 = _1540;
        _1703 = _1539;
        _1704 = _1551;
        _1705 = _1550;
        _1706 = _1549;
        _1707 = _1564;
        _1708 = _1563;
        _1709 = _1562;
        _1710 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)));
        _1711 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0)));
        _1712 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)));
    }
    else
    {
        _1698 = _1391;
        _1699 = _1391;
        _1700 = _1391;
        _1701 = _1391;
        _1702 = _1391;
        _1703 = _1391;
        _1704 = _1391;
        _1705 = _1391;
        _1706 = _1391;
        _1707 = _1391;
        _1708 = _1391;
        _1709 = _1391;
        _1710 = 0.0;
        _1711 = 0.0;
        _1712 = 0.0;
    }
    float _1722 = (cbModelParam._m0[1u].x * (_1710 - _1403)) + _1403;
    float _1723 = (cbModelParam._m0[1u].x * (_1711 - _1404)) + _1404;
    float _1724 = (cbModelParam._m0[1u].x * (_1712 - _1405)) + _1405;
    float _1745 = fma(_1724, cbSceneParam._m0[89u].z, fma(_1723, cbSceneParam._m0[89u].y, _1722 * cbSceneParam._m0[89u].x));
    float _1748 = fma(_1724, cbSceneParam._m0[90u].z, fma(_1723, cbSceneParam._m0[90u].y, _1722 * cbSceneParam._m0[90u].x));
    float _1751 = fma(_1724, cbSceneParam._m0[91u].z, fma(_1723, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1722));
    float _1766 = _1025 * 0.5;
    float _1767 = _1026 * 0.5;
    float _1768 = _1027 * 0.5;
    float _1769 = dot(vec4(_1766, _1767, _1768, 1.0), vec4(_1700, _1703, _1706, _1709));
    float _1772 = dot(vec4(_1766, _1767, _1768, 1.0), vec4(_1699, _1702, _1705, _1708));
    float _1775 = dot(vec4(_1766, _1767, _1768, 1.0), vec4(_1698, _1701, _1704, _1707));
    float _1809;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1782 = dot(vec4(_1766, _1767, _1768, 1.0), vec4(_1390, _1394, _1397, _1400));
        float _1786 = dot(vec4(_1766, _1767, _1768, 1.0), vec4(_1392, _1395, _1398, _1401));
        float _1790 = dot(vec4(_1766, _1767, _1768, 1.0), vec4(_1393, _1396, _1399, _1402));
        float _1797 = dot(vec4(cbModelParam._m0[39u]), vec4(_1766, _1767, _1768, 1.0));
        _1809 = dot(vec3(isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0)), isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0)), isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1797) ? 0.0 : (isnan(0.0) ? _1797 : max(0.0, _1797))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1809 = 1.0;
    }
    float _1820;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1811 = dot(vec4(cbModelParam._m0[40u]), vec4(_1766, _1767, _1768, 1.0));
        _1820 = dot(vec3(isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0)), isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0)), isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1811) ? 0.0 : (isnan(0.0) ? _1811 : max(0.0, _1811))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1820 = 1.0;
    }
    float _1824 = (_1820 * cbModelParam._m0[1u].x) + (_1809 * (1.0 - cbModelParam._m0[1u].x));
    float _1834 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _854);
    float _1835 = isnan(_1834) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1834 : min(cbModelParam._m0[25u].z, _1834));
    float _1916;
    float _1918;
    float _1920;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1883 = fma(_1089, cbModelParam._m0[13u].z, fma(_1085, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1081)) + cbModelParam._m0[13u].w;
        float _1887 = fma(_1089, cbModelParam._m0[14u].z, fma(_1085, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1081)) + cbModelParam._m0[14u].w;
        float _1891 = fma(_1089, cbModelParam._m0[15u].z, fma(_1085, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1081)) + cbModelParam._m0[15u].w;
        float _1894 = fma(_1027, cbModelParam._m0[13u].z, fma(_1026, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1025));
        float _1897 = fma(_1027, cbModelParam._m0[14u].z, fma(_1026, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1025));
        float _1900 = fma(_1027, cbModelParam._m0[15u].z, fma(_1026, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1025));
        float _1928;
        if (_1894 > 0.0)
        {
            _1928 = abs((1.0 - _1883) / _1894);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1883 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1928 = frontier_phi_14_12_ladder;
        }
        float _2100;
        if (_1897 > 0.0)
        {
            _2100 = abs((1.0 - _1887) / _1897);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1897 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1887 + 1.0) / _1897);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2100 = frontier_phi_23_19_ladder;
        }
        float _2395;
        if (_1900 > 0.0)
        {
            _2395 = abs((1.0 - _1891) / _1900);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1900 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1891 + 1.0) / _1900);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2395 = frontier_phi_35_30_ladder;
        }
        float _2397 = isnan(_2100) ? _1928 : (isnan(_1928) ? _2100 : min(_1928, _2100));
        float _2398 = isnan(_2395) ? _2397 : (isnan(_2397) ? _2395 : min(_2397, _2395));
        float _2402 = (_2398 * _1894) + _1883;
        float _2403 = (_2398 * _1897) + _1887;
        float _2404 = (_2398 * _1900) + _1891;
        float _2405 = _2398 * 9.9999997473787516355514526367188e-05;
        float _2407 = (-1.0) - _2405;
        float _2409 = _2405 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2404 > _2409) || ((_2404 < _2407) || ((_2403 > _2409) || ((_2403 < _2407) || ((_2402 < _2407) || (_2402 > _2409))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2549 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2404, cbModelParam._m0[9u].z, fma(_2403, cbModelParam._m0[9u].y, _2402 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2404, cbModelParam._m0[10u].z, fma(_2403, cbModelParam._m0[10u].y, _2402 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2404, cbModelParam._m0[11u].z, fma(_2403, cbModelParam._m0[11u].y, _2402 * cbModelParam._m0[11u].x))), _1835);
            frontier_phi_13_35_ladder = _2549.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2549.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2549.x * cbModelParam._m0[1u].y;
        }
        _1916 = frontier_phi_13_35_ladder_2;
        _1918 = frontier_phi_13_35_ladder_1;
        _1920 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1904 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1025, _1026, _1027), _1835);
        _1916 = _1904.x * cbModelParam._m0[1u].y;
        _1918 = _1904.y * cbModelParam._m0[1u].y;
        _1920 = _1904.z * cbModelParam._m0[1u].y;
    }
    float _1924 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _854);
    float _1925 = isnan(_1924) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1924 : min(cbModelParam._m0[25u].w, _1924));
    float _2015;
    float _2017;
    float _2019;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1979 = fma(_1089, cbModelParam._m0[21u].z, fma(_1085, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1081)) + cbModelParam._m0[21u].w;
        float _1983 = fma(_1089, cbModelParam._m0[22u].z, fma(_1085, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1081)) + cbModelParam._m0[22u].w;
        float _1987 = fma(_1089, cbModelParam._m0[23u].z, fma(_1085, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1081)) + cbModelParam._m0[23u].w;
        float _1990 = fma(_1027, cbModelParam._m0[21u].z, fma(_1026, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1025));
        float _1993 = fma(_1027, cbModelParam._m0[22u].z, fma(_1026, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1025));
        float _1996 = fma(_1027, cbModelParam._m0[23u].z, fma(_1026, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1025));
        float _2105;
        if (_1990 > 0.0)
        {
            _2105 = abs((1.0 - _1979) / _1990);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1990 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1979 + 1.0) / _1990);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2105 = frontier_phi_25_21_ladder;
        }
        float _2422;
        if (_1993 > 0.0)
        {
            _2422 = abs((1.0 - _1983) / _1993);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1993 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1983 + 1.0) / _1993);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2422 = frontier_phi_37_32_ladder;
        }
        float _2760;
        if (_1996 > 0.0)
        {
            _2760 = abs((1.0 - _1987) / _1996);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1996 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1987 + 1.0) / _1996);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2760 = frontier_phi_47_44_ladder;
        }
        float _2762 = isnan(_2422) ? _2105 : (isnan(_2105) ? _2422 : min(_2105, _2422));
        float _2763 = isnan(_2760) ? _2762 : (isnan(_2762) ? _2760 : min(_2762, _2760));
        float _2767 = (_2763 * _1990) + _1979;
        float _2768 = (_2763 * _1993) + _1983;
        float _2769 = (_2763 * _1996) + _1987;
        float _2770 = _2763 * 9.9999997473787516355514526367188e-05;
        float _2771 = (-1.0) - _2770;
        float _2773 = _2770 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2769 > _2773) || ((_2769 < _2771) || ((_2768 > _2773) || ((_2768 < _2771) || ((_2767 < _2771) || (_2767 > _2773))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2891 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2769, cbModelParam._m0[17u].z, fma(_2768, cbModelParam._m0[17u].y, _2767 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2769, cbModelParam._m0[18u].z, fma(_2768, cbModelParam._m0[18u].y, _2767 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2769, cbModelParam._m0[19u].z, fma(_2768, cbModelParam._m0[19u].y, _2767 * cbModelParam._m0[19u].x))), _1925);
            frontier_phi_22_47_ladder = _2891.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2891.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2891.x * cbModelParam._m0[1u].z;
        }
        _2015 = frontier_phi_22_47_ladder_2;
        _2017 = frontier_phi_22_47_ladder_1;
        _2019 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1999 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1025, _1026, _1027), _1925);
        _2015 = _1999.x * cbModelParam._m0[1u].z;
        _2017 = _1999.y * cbModelParam._m0[1u].z;
        _2019 = _1999.z * cbModelParam._m0[1u].z;
    }
    float _2032 = (((_1052 * _1001) + _1053) * _1017) * ((cbModelParam._m0[1u].w * (_2015 - _1916)) + _1916);
    float _2034 = (((_1052 * _1003) + _1053) * _1017) * ((cbModelParam._m0[1u].w * (_2017 - _1918)) + _1918);
    float _2036 = (((_1052 * _1004) + _1053) * _1017) * ((cbModelParam._m0[1u].w * (_2019 - _1920)) + _1920);
    float _2039 = fma(_2036, cbSceneParam._m0[89u].z, fma(_2034, cbSceneParam._m0[89u].y, _2032 * cbSceneParam._m0[89u].x));
    float _2042 = fma(_2036, cbSceneParam._m0[90u].z, fma(_2034, cbSceneParam._m0[90u].y, _2032 * cbSceneParam._m0[90u].x));
    float _2045 = fma(_2036, cbSceneParam._m0[91u].z, fma(_2034, cbSceneParam._m0[91u].y, _2032 * cbSceneParam._m0[91u].x));
    float _2079 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2083 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2087 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2091 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2092 = _2079 / _2091;
    float _2093 = _2083 / _2091;
    float _2094 = _2087 / _2091;
    float _2241;
    float _2242;
    float _2243;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2121 = ((uint(_2094 > cbSceneParam._m0[59u].y) + uint(_2094 > cbSceneParam._m0[59u].x)) + uint(_2094 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2122 = _2121 + 43u;
        uint _2130 = _2121 + 44u;
        uint _2138 = _2121 + 45u;
        uint _2146 = _2121 + 46u;
        float _2157 = fma(_2091, cbSceneParam._m0[_2122].w, fma(_2087, cbSceneParam._m0[_2122].z, fma(_2083, cbSceneParam._m0[_2122].y, _2079 * cbSceneParam._m0[_2122].x)));
        float _2161 = fma(_2091, cbSceneParam._m0[_2130].w, fma(_2087, cbSceneParam._m0[_2130].z, fma(_2083, cbSceneParam._m0[_2130].y, _2079 * cbSceneParam._m0[_2130].x)));
        float _2169 = fma(_2091, cbSceneParam._m0[_2146].w, fma(_2087, cbSceneParam._m0[_2146].z, fma(_2083, cbSceneParam._m0[_2146].y, _2079 * cbSceneParam._m0[_2146].x)));
        float _2174 = cbSceneParam._m0[33u].z * _2169;
        float _2176 = cbSceneParam._m0[33u].w * _2169;
        float _2179 = fma(_2091, cbSceneParam._m0[_2138].w, fma(_2087, cbSceneParam._m0[_2138].z, fma(_2083, cbSceneParam._m0[_2138].y, _2079 * cbSceneParam._m0[_2138].x))) / _2169;
        float _2227 = (cbSceneParam._m0[33u].x - sqrt(((_2093 * _2093) + (_2092 * _2092)) + (_2094 * _2094))) * cbSceneParam._m0[33u].y;
        float _4556 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
        float _2234 = (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2174 + _2157) / _2169, (_2176 + _2161) / _2169), _2179), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2176 + _2157) / _2169, (_2161 - _2174) / _2169), _2179), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2157 - _2174) / _2169, (_2161 - _2176) / _2169), _2179), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2157 - _2176) / _2169, (_2174 + _2161) / _2169), _2179), 0.0)).x), vec4(0.25)));
        _2241 = 1.0 - (_2234 * cbSceneParam._m0[34u].x);
        _2242 = 1.0 - (_2234 * cbSceneParam._m0[34u].y);
        _2243 = 1.0 - (_2234 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2241 = 1.0;
        _2242 = 1.0;
        _2243 = 1.0;
    }
    float _2307;
    float _2309;
    float _2311;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2295 = fma(_2091, cbSceneParam._m0[63u].w, fma(_2087, cbSceneParam._m0[63u].z, fma(_2083, cbSceneParam._m0[63u].y, _2079 * cbSceneParam._m0[63u].x)));
        float _2296 = fma(_2091, cbSceneParam._m0[60u].w, fma(_2087, cbSceneParam._m0[60u].z, fma(_2083, cbSceneParam._m0[60u].y, _2079 * cbSceneParam._m0[60u].x))) / _2295;
        float _2297 = fma(_2091, cbSceneParam._m0[61u].w, fma(_2087, cbSceneParam._m0[61u].z, fma(_2083, cbSceneParam._m0[61u].y, _2079 * cbSceneParam._m0[61u].x))) / _2295;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2296 >= cbSceneParam._m0[64u].x) && (_2297 >= cbSceneParam._m0[64u].y)) && (_2296 <= cbSceneParam._m0[64u].z)) && (_2297 <= cbSceneParam._m0[64u].w))
        {
            float _2435 = fma(_2091, cbSceneParam._m0[62u].w, fma(_2087, cbSceneParam._m0[62u].z, fma(_2083, cbSceneParam._m0[62u].y, _2079 * cbSceneParam._m0[62u].x))) / _2295;
            float _2439 = isnan(cbSceneParam._m0[41u].w) ? _2435 : (isnan(_2435) ? cbSceneParam._m0[41u].w : max(_2435, cbSceneParam._m0[41u].w));
            float _2482 = (cbSceneParam._m0[33u].x - sqrt(((_2093 * _2093) + (_2092 * _2092)) + (_2094 * _2094))) * cbSceneParam._m0[33u].y;
            float _4572 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
            float _2489 = (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2296, cbSceneParam._m0[33u].w + _2297), _2439), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2296, _2297 - cbSceneParam._m0[33u].z), _2439), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2296 - cbSceneParam._m0[33u].z, _2297 - cbSceneParam._m0[33u].w), _2439), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2296 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2297), _2439), 0.0)).x), vec4(0.25)));
            float _2493 = 1.0 - (_2489 * cbSceneParam._m0[34u].x);
            float _2494 = 1.0 - (_2489 * cbSceneParam._m0[34u].y);
            float _2495 = 1.0 - (_2489 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2495) ? _2243 : (isnan(_2243) ? _2495 : min(_2243, _2495));
            frontier_phi_34_33_ladder_1 = isnan(_2494) ? _2242 : (isnan(_2242) ? _2494 : min(_2242, _2494));
            frontier_phi_34_33_ladder_2 = isnan(_2493) ? _2241 : (isnan(_2241) ? _2493 : min(_2241, _2493));
        }
        else
        {
            frontier_phi_34_33_ladder = _2243;
            frontier_phi_34_33_ladder_1 = _2242;
            frontier_phi_34_33_ladder_2 = _2241;
        }
        _2307 = frontier_phi_34_33_ladder_2;
        _2309 = frontier_phi_34_33_ladder_1;
        _2311 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2307 = _2241;
        _2309 = _2242;
        _2311 = _2243;
    }
    uvec4 _2316 = floatBitsToUint(cbInstanceData._m0[_278 + 5u]);
    uint _2318 = _2316.x * 14u;
    uint _2319 = _2318 + 13u;
    float _2326 = _1017 + (-1.0);
    float _2331 = (cbLight._m0[_2319].x * _2326) + 1.0;
    float _2332 = (cbLight._m0[_2319].y * _2326) + 1.0;
    float _2333 = (cbLight._m0[_2319].z * _2326) + 1.0;
    float _2334 = (cbLight._m0[_2319].w * _2326) + 1.0;
    uint _2335 = _2318 + 5u;
    float _2341 = isnan(1.0) ? _2332 : (isnan(_2332) ? 1.0 : min(_2332, 1.0));
    uint _2345 = _2318 + 4u;
    float _2354 = isnan(1.0) ? _2331 : (isnan(_2331) ? 1.0 : min(_2331, 1.0));
    uint _2358 = _2318 | 1u;
    float _2369 = dot(vec3(cbLight._m0[_2318].xyz), vec3(_851, _852, _853));
    float _2372 = dot(vec3(cbLight._m0[_2358].xyz), vec3(_851, _852, _853));
    float _4608 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _4619 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
    float _2377 = (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0))) * 0.3183098733425140380859375;
    float _2379 = (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * 0.3183098733425140380859375;
    float _2386 = ((cbLight._m0[_2335].x * _2341) * _2379) + (((cbLight._m0[_2345].x * _2307) * _2354) * _2377);
    float _2387 = ((_2341 * cbLight._m0[_2335].y) * _2379) + (((cbLight._m0[_2345].y * _2309) * _2354) * _2377);
    float _2388 = ((_2341 * cbLight._m0[_2335].z) * _2379) + (((cbLight._m0[_2345].z * _2311) * _2354) * _2377);
    uvec4 _2392 = floatBitsToUint(cbLight._m0[_2318 + 12u]);
    bool _2394 = _2392.x == 0u;
    float _2496;
    float _2498;
    float _2500;
    if (_2394)
    {
        _2496 = _2386;
        _2498 = _2387;
        _2500 = _2388;
    }
    else
    {
        uint _2504 = _2318 + 6u;
        float _2520 = (dot(vec3(cbLight._m0[_2318 + 2u].xyz), vec3(_851, _852, _853)) * 0.5) + 0.5;
        float _2521 = _2520 * _2520;
        float _4630 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        float _2522 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
        float _2523 = isnan(1.0) ? _2333 : (isnan(_2333) ? 1.0 : min(_2333, 1.0));
        _2496 = (((cbLight._m0[_2504].x * 0.3183098733425140380859375) * _2522) * _2523) + _2386;
        _2498 = (((cbLight._m0[_2504].y * 0.3183098733425140380859375) * _2522) * _2523) + _2387;
        _2500 = (((cbLight._m0[_2504].z * 0.3183098733425140380859375) * _2522) * _2523) + _2388;
    }
    bool _2503 = _2392.y == 0u;
    float _2558;
    float _2560;
    float _2562;
    if (_2503)
    {
        _2558 = _2496;
        _2560 = _2498;
        _2562 = _2500;
    }
    else
    {
        uint _2731 = _2318 + 7u;
        float _2747 = (dot(vec3(cbLight._m0[_2318 + 3u].xyz), vec3(_851, _852, _853)) * 0.5) + 0.5;
        float _2748 = _2747 * _2747;
        float _4646 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
        float _2749 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
        float _2750 = isnan(1.0) ? _2334 : (isnan(_2334) ? 1.0 : min(_2334, 1.0));
        _2558 = (((cbLight._m0[_2731].x * 0.3183098733425140380859375) * _2749) * _2750) + _2496;
        _2560 = (((cbLight._m0[_2731].y * 0.3183098733425140380859375) * _2749) * _2750) + _2498;
        _2562 = (((cbLight._m0[_2731].z * 0.3183098733425140380859375) * _2749) * _2750) + _2500;
    }
    uint _2565 = _2318 + 8u;
    float _2578 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2318].w)) * _854) * 0.949999988079071044921875);
    float _2579 = _2578 * _2578;
    float _2580 = cbLight._m0[_2318].x + _931;
    float _2581 = cbLight._m0[_2318].y + _932;
    float _2582 = cbLight._m0[_2318].z + _933;
    float _2586 = inversesqrt(dot(vec3(_2580, _2581, _2582), vec3(_2580, _2581, _2582)));
    float _2587 = _2586 * _2580;
    float _2588 = _2586 * _2581;
    float _2589 = _2586 * _2582;
    float _2590 = dot(vec3(_851, _852, _853), vec3(cbLight._m0[_2318].xyz));
    float _4662 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
    float _2593 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
    float _4673 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
    float _2594 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
    float _2595 = dot(vec3(_851, _852, _853), vec3(_2587, _2588, _2589));
    float _4684 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
    float _2598 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
    float _2599 = dot(vec3(cbLight._m0[_2318].xyz), vec3(_2587, _2588, _2589));
    float _4695 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
    float _2603 = _2579 * _2579;
    float _2607 = ((_2598 * _2598) * (_2603 + (-1.0))) + 1.0;
    float _2615 = exp2(log2(1.0 - (isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0)))) * 5.0);
    float _2616 = 0.959999978542327880859375 - _998;
    float _2618 = 0.959999978542327880859375 - _999;
    float _2619 = 0.959999978542327880859375 - _1000;
    float _2626 = 1.0 - _2579;
    float _2637 = (0.5 / (((_2594 * ((_2593 * _2626) + _2579)) + 9.9999999392252902907785028219223e-09) + (((_2594 * _2626) + _2579) * _2593))) * _2593;
    float _4706 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
    float _2639 = (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0))) * (_2603 / ((_2607 * _2607) * 3.141590118408203125));
    uint _2653 = _2318 + 9u;
    float _2664 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2358].w)) * _854) * 0.949999988079071044921875);
    float _2665 = _2664 * _2664;
    float _2666 = cbLight._m0[_2358].x + _931;
    float _2667 = cbLight._m0[_2358].y + _932;
    float _2668 = cbLight._m0[_2358].z + _933;
    float _2672 = inversesqrt(dot(vec3(_2666, _2667, _2668), vec3(_2666, _2667, _2668)));
    float _2673 = _2672 * _2666;
    float _2674 = _2672 * _2667;
    float _2675 = _2672 * _2668;
    float _2676 = dot(vec3(_851, _852, _853), vec3(cbLight._m0[_2358].xyz));
    float _4717 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
    float _2679 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
    float _2680 = dot(vec3(_851, _852, _853), vec3(_2673, _2674, _2675));
    float _4728 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
    float _2683 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
    float _2684 = dot(vec3(cbLight._m0[_2358].xyz), vec3(_2673, _2674, _2675));
    float _4739 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
    float _2688 = _2665 * _2665;
    float _2692 = ((_2683 * _2683) * (_2688 + (-1.0))) + 1.0;
    float _2699 = exp2(log2(1.0 - (isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0)))) * 5.0);
    float _2706 = 1.0 - _2665;
    float _2716 = (0.5 / (((_2594 * ((_2679 * _2706) + _2665)) + 9.9999999392252902907785028219223e-09) + (((_2594 * _2706) + _2665) * _2679))) * _2679;
    float _4750 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
    float _2718 = (isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0))) * (_2688 / ((_2692 * _2692) * 3.141590118408203125));
    float _2728 = (((((_2699 * _2616) + _1001) * cbLight._m0[_2653].x) * _2718) * _2341) + ((((cbLight._m0[_2565].x * _2307) * ((_2615 * _2616) + _1001)) * _2639) * _2354);
    float _2729 = (((((_2699 * _2618) + _1003) * cbLight._m0[_2653].y) * _2718) * _2341) + ((((cbLight._m0[_2565].y * _2309) * ((_2615 * _2618) + _1003)) * _2639) * _2354);
    float _2730 = (((((_2699 * _2619) + _1004) * cbLight._m0[_2653].z) * _2718) * _2341) + ((((cbLight._m0[_2565].z * _2311) * ((_2615 * _2619) + _1004)) * _2639) * _2354);
    float _2786;
    float _2788;
    float _2790;
    if (_2394)
    {
        _2786 = _2728;
        _2788 = _2729;
        _2790 = _2730;
    }
    else
    {
        uint _2792 = _2318 + 2u;
        uint _2796 = _2318 + 10u;
        float _2810 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2792].w)) * _854) * 0.949999988079071044921875);
        float _2811 = _2810 * _2810;
        float _2812 = cbLight._m0[_2792].x + _931;
        float _2813 = cbLight._m0[_2792].y + _932;
        float _2814 = cbLight._m0[_2792].z + _933;
        float _2818 = inversesqrt(dot(vec3(_2812, _2813, _2814), vec3(_2812, _2813, _2814)));
        float _2819 = _2818 * _2812;
        float _2820 = _2818 * _2813;
        float _2821 = _2818 * _2814;
        float _2822 = dot(vec3(_851, _852, _853), vec3(cbLight._m0[_2792].xyz));
        float _4761 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
        float _2825 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
        float _2826 = dot(vec3(_851, _852, _853), vec3(_2819, _2820, _2821));
        float _4772 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
        float _2829 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
        float _2830 = dot(vec3(cbLight._m0[_2792].xyz), vec3(_2819, _2820, _2821));
        float _4783 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
        float _2834 = _2811 * _2811;
        float _2838 = ((_2829 * _2829) * (_2834 + (-1.0))) + 1.0;
        float _2845 = exp2(log2(1.0 - (isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0)))) * 5.0);
        float _2852 = 1.0 - _2811;
        float _2862 = (0.5 / (((_2594 * ((_2825 * _2852) + _2811)) + 9.9999999392252902907785028219223e-09) + (((_2594 * _2852) + _2811) * _2825))) * _2825;
        float _4794 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
        float _2864 = (isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0))) * (_2834 / ((_2838 * _2838) * 3.141590118408203125));
        float _2865 = isnan(1.0) ? _2333 : (isnan(_2333) ? 1.0 : min(_2333, 1.0));
        _2786 = (((((_2845 * _2616) + _1001) * cbLight._m0[_2796].x) * _2864) * _2865) + _2728;
        _2788 = (((((_2845 * _2618) + _1003) * cbLight._m0[_2796].y) * _2864) * _2865) + _2729;
        _2790 = (((((_2845 * _2619) + _1004) * cbLight._m0[_2796].z) * _2864) * _2865) + _2730;
    }
    float _2896;
    float _2898;
    float _2900;
    if (_2503)
    {
        _2896 = _2786;
        _2898 = _2788;
        _2900 = _2790;
    }
    else
    {
        uint _2907 = _2318 + 3u;
        uint _2911 = _2318 + 11u;
        float _2925 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2907].w)) * _854) * 0.949999988079071044921875);
        float _2926 = _2925 * _2925;
        float _2927 = cbLight._m0[_2907].x + _931;
        float _2928 = cbLight._m0[_2907].y + _932;
        float _2929 = cbLight._m0[_2907].z + _933;
        float _2933 = inversesqrt(dot(vec3(_2927, _2928, _2929), vec3(_2927, _2928, _2929)));
        float _2934 = _2933 * _2927;
        float _2935 = _2933 * _2928;
        float _2936 = _2933 * _2929;
        float _2937 = dot(vec3(_851, _852, _853), vec3(cbLight._m0[_2907].xyz));
        float _4810 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
        float _2940 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
        float _2941 = dot(vec3(_851, _852, _853), vec3(_2934, _2935, _2936));
        float _4821 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
        float _2944 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
        float _2945 = dot(vec3(cbLight._m0[_2907].xyz), vec3(_2934, _2935, _2936));
        float _4832 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
        float _2949 = _2926 * _2926;
        float _2953 = ((_2944 * _2944) * (_2949 + (-1.0))) + 1.0;
        float _2960 = exp2(log2(1.0 - (isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0)))) * 5.0);
        float _2967 = 1.0 - _2926;
        float _2977 = (0.5 / (((_2594 * ((_2940 * _2967) + _2926)) + 9.9999999392252902907785028219223e-09) + (((_2594 * _2967) + _2926) * _2940))) * _2940;
        float _4843 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
        float _2979 = (isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0))) * (_2949 / ((_2953 * _2953) * 3.141590118408203125));
        float _2980 = isnan(1.0) ? _2334 : (isnan(_2334) ? 1.0 : min(_2334, 1.0));
        _2896 = (((((_2960 * _2616) + _1001) * cbLight._m0[_2911].x) * _2979) * _2980) + _2786;
        _2898 = (((((_2960 * _2618) + _1003) * cbLight._m0[_2911].y) * _2979) * _2980) + _2788;
        _2900 = (((((_2960 * _2619) + _1004) * cbLight._m0[_2911].z) * _2979) * _2980) + _2790;
    }
    float _3046;
    float _3048;
    float _3050;
    float _3052;
    float _3054;
    float _3056;
    if (_2316.y == 0u)
    {
        uvec4 _3001 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3002 = _3001.x;
        uint _3013 = uint((float(_3001.y) * floor(float(uint(cbSceneParam._m0[85u].y * _940) / _3002))) + floor(float(uint(cbSceneParam._m0[85u].x * _939) / _3002)));
        float _3023 = (log2(_2094 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3024 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
        uint _3027 = uint(isnan(14.0) ? _3024 : (isnan(_3024) ? 14.0 : min(_3024, 14.0)));
        uvec4 _3032 = texelFetch(g_lightClusterGridBuffer, int(((_3027 << 2u) + (_3013 << 6u)) >> 2u));
        uint _3033 = _3032.x;
        uint _3034 = _3001.z;
        float _3113;
        float _3115;
        float _3117;
        float _3119;
        float _3121;
        float _3123;
        if (((((1u << ((_3034 >> 4u) & 15u)) + 4294967295u) & _3033) == 0u) || ((_3034 & 240u) == 0u))
        {
            _3113 = 0.0;
            _3115 = 0.0;
            _3117 = 0.0;
            _3119 = 0.0;
            _3121 = 0.0;
            _3123 = 0.0;
        }
        else
        {
            float _3114;
            float _3116;
            float _3118;
            float _3120;
            float _3122;
            float _3124;
            float _3258 = 0.0;
            float _3259 = 0.0;
            float _3260 = 0.0;
            float _3261 = 0.0;
            float _3262 = 0.0;
            float _3263 = 0.0;
            uint _3264 = 0u;
            uint _3273;
            bool _3274;
            for (;;)
            {
                _3273 = texelFetch(g_lightClassification, int((((_3027 << 5u) + (_3013 << 9u)) + (_3264 << 2u)) >> 2u)).x;
                _3274 = _3273 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3274)
                {
                    frontier_phi_66_pred = _3263;
                    frontier_phi_66_pred_1 = _3262;
                    frontier_phi_66_pred_2 = _3261;
                    frontier_phi_66_pred_3 = _3260;
                    frontier_phi_66_pred_4 = _3259;
                    frontier_phi_66_pred_5 = _3258;
                }
                else
                {
                    float _3382;
                    float _3383;
                    float _3384;
                    float _3385;
                    float _3386;
                    float _3387;
                    uint _3388;
                    _3382 = _3258;
                    _3383 = _3259;
                    _3384 = _3260;
                    _3385 = _3261;
                    _3386 = _3262;
                    _3387 = _3263;
                    _3388 = _3273;
                    float _3314;
                    float _3315;
                    float _3316;
                    float _3317;
                    float _3318;
                    float _3319;
                    for (;;)
                    {
                        uint _3392 = uint(findLSB(_3388)) + (_3264 << 5u);
                        uint _3389 = (_3388 + 4294967295u) & _3388;
                        uint _3394 = _3392 * 48u;
                        vec4 _3408 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3394)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 3u)).x));
                        uint _3414 = (_3392 * 48u) + 4u;
                        vec4 _3427 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3414)).x, texelFetch(g_PointLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3414 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3414 + 3u)).x));
                        uint _3433 = (_3392 * 48u) + 8u;
                        vec3 _3444 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3433)).x, texelFetch(g_PointLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3433 + 2u)).x));
                        float _3448 = _3408.x - _2092;
                        float _3449 = _3408.y - _2093;
                        float _3450 = _3408.z - _2094;
                        float _3451 = dot(vec3(_3448, _3449, _3450), vec3(_3448, _3449, _3450));
                        float _3454 = inversesqrt(_3451);
                        float _3455 = _3454 * _3448;
                        float _3456 = _3454 * _3449;
                        float _3457 = _3454 * _3450;
                        float _3458 = dot(vec3(_958, _961, _964), vec3(_3455, _3456, _3457));
                        float _3463 = 1.0 - (_3451 * _3408.w);
                        float _4869 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                        float _3464 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
                        float _3465 = sqrt(_3451) * _3427.w;
                        float _3468 = 1.39999997615814208984375 / (_3465 + 1.39999997615814208984375);
                        float _3469 = _3468 * _3468;
                        float _3472 = ((1.0 - _3469) * _3458) + _3469;
                        float _3475 = _3465 * _3465;
                        float _3479 = ((isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0))) * _3464) / ((_3475 * 0.699999988079071044921875) + 1.0);
                        float _3483 = (-0.0) - _2092;
                        float _3484 = (-0.0) - _2093;
                        float _3485 = (-0.0) - _2094;
                        float _3489 = inversesqrt(dot(vec3(_3483, _3484, _3485), vec3(_3483, _3484, _3485)));
                        float _3490 = _3489 * _3483;
                        float _3491 = _3489 * _3484;
                        float _3492 = _3489 * _3485;
                        float _3499 = exp2(log2(1.0 / ((_3475 * 3.5) + 5.0)) * 0.25);
                        float _3500 = 1.0 - _1033;
                        float _3507 = sqrt(1.0 - ((1.0 - (_3500 * _3500)) * (1.0 - (_3499 * _3499))));
                        float _3508 = _3507 * _3507;
                        float _3509 = _3508 * _3508;
                        float _3510 = _3490 + _3455;
                        float _3511 = _3491 + _3456;
                        float _3512 = _3492 + _3457;
                        float _3516 = inversesqrt(dot(vec3(_3510, _3511, _3512), vec3(_3510, _3511, _3512)));
                        float _3520 = dot(vec3(_958, _961, _964), vec3(_3490, _3491, _3492));
                        float _4885 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                        float _3523 = isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0));
                        float _3524 = dot(vec3(_958, _961, _964), vec3(_3516 * _3510, _3516 * _3511, _3516 * _3512));
                        float _4896 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                        float _3527 = isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0));
                        float _3531 = ((_3527 * _3527) * (_3509 + (-1.0))) + 1.0;
                        float _3532 = _3468 * _3508;
                        float _3533 = _3532 * _3532;
                        float _3536 = ((1.0 - _3533) * _3458) + _3533;
                        float _4907 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                        float _3537 = isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0));
                        float _3538 = 1.0 - _3508;
                        float _3548 = (0.5 / (((_3537 * ((_3523 * _3538) + _3508)) + 9.9999999392252902907785028219223e-09) + (((_3537 * _3538) + _3508) * _3523))) * _3537;
                        float _4918 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                        float _3559 = (((_3509 * 3.1415927410125732421875) * (isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0)))) / ((_3531 * _3531) * ((_3475 * 2.1991131305694580078125) + 3.141590118408203125))) * _3464;
                        _3317 = (_3479 * _3427.x) + _3385;
                        _3318 = (_3479 * _3427.y) + _3386;
                        _3319 = (_3479 * _3427.z) + _3387;
                        _3314 = (_3559 * _3444.x) + _3382;
                        _3315 = (_3559 * _3444.y) + _3383;
                        _3316 = (_3559 * _3444.z) + _3384;
                        if (_3389 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3382 = _3314;
                            _3383 = _3315;
                            _3384 = _3316;
                            _3385 = _3317;
                            _3386 = _3318;
                            _3387 = _3319;
                            _3388 = _3389;
                        }
                    }
                    frontier_phi_66_pred = _3319;
                    frontier_phi_66_pred_1 = _3318;
                    frontier_phi_66_pred_2 = _3317;
                    frontier_phi_66_pred_3 = _3316;
                    frontier_phi_66_pred_4 = _3315;
                    frontier_phi_66_pred_5 = _3314;
                }
                _3124 = frontier_phi_66_pred;
                _3122 = frontier_phi_66_pred_1;
                _3120 = frontier_phi_66_pred_2;
                _3118 = frontier_phi_66_pred_3;
                _3116 = frontier_phi_66_pred_4;
                _3114 = frontier_phi_66_pred_5;
                uint _3265 = _3264 + 1u;
                if (_3265 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3258 = _3114;
                    _3259 = _3116;
                    _3260 = _3118;
                    _3261 = _3120;
                    _3262 = _3122;
                    _3263 = _3124;
                    _3264 = _3265;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3113 = _3114;
            _3115 = _3116;
            _3117 = _3118;
            _3119 = _3120;
            _3121 = _3122;
            _3123 = _3124;
        }
        uvec4 _3127 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3128 = _3127.z;
        uint _3130 = (_3128 >> 8u) & 15u;
        float _3226;
        float _3228;
        float _3230;
        float _3232;
        float _3234;
        float _3236;
        if (((4294967295u << _3130) & _3033) == 0u)
        {
            _3226 = _3113;
            _3228 = _3115;
            _3230 = _3117;
            _3232 = _3119;
            _3234 = _3121;
            _3236 = _3123;
        }
        else
        {
            float _3251 = inversesqrt(dot(vec3(_2092, _2093, _2094), vec3(_2092, _2093, _2094)));
            float _3252 = _3251 * _2092;
            float _3253 = _3251 * _2093;
            float _3254 = _3251 * _2094;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3130 < ((_3128 >> 12u) & 15u))
            {
                float _3227;
                float _3229;
                float _3231;
                float _3233;
                float _3235;
                float _3237;
                float _3365 = _3113;
                float _3366 = _3115;
                float _3367 = _3117;
                float _3368 = _3119;
                float _3369 = _3121;
                float _3370 = _3123;
                uint _3371 = _3130;
                uint _3380;
                bool _3381;
                for (;;)
                {
                    _3380 = texelFetch(g_lightClassification, int((((_3027 << 5u) + (_3013 << 9u)) + (_3371 << 2u)) >> 2u)).x;
                    _3381 = _3380 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3381)
                    {
                        frontier_phi_72_pred = _3370;
                        frontier_phi_72_pred_1 = _3369;
                        frontier_phi_72_pred_2 = _3368;
                        frontier_phi_72_pred_3 = _3367;
                        frontier_phi_72_pred_4 = _3366;
                        frontier_phi_72_pred_5 = _3365;
                    }
                    else
                    {
                        float _3564;
                        float _3565;
                        float _3566;
                        float _3567;
                        float _3568;
                        float _3569;
                        float _3857;
                        float _3858;
                        float _3859;
                        float _3860;
                        float _3861;
                        float _3862;
                        float _3577 = _3365;
                        float _3578 = _3366;
                        float _3579 = _3367;
                        float _3580 = _3368;
                        float _3581 = _3369;
                        float _3582 = _3370;
                        uint _3583 = _3380;
                        uint _3584;
                        vec4 _3609;
                        float _3610;
                        vec4 _3625;
                        vec3 _3637;
                        vec4 _3652;
                        vec4 _3667;
                        float _3713;
                        bool _3714;
                        for (;;)
                        {
                            uint _3594 = ((_3371 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3583));
                            _3584 = (_3583 + 4294967295u) & _3583;
                            uint _3596 = _3594 * 40u;
                            _3609 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3596)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 3u)).x));
                            _3610 = _3609.w;
                            uint _3612 = (_3594 * 40u) + 4u;
                            _3625 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3612)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 3u)).x));
                            uint _3627 = (_3594 * 40u) + 8u;
                            _3637 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3627)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 2u)).x));
                            uint _3639 = (_3594 * 40u) + 16u;
                            _3652 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3639)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 3u)).x));
                            uint _3654 = (_3594 * 40u) + 20u;
                            _3667 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3654)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 3u)).x));
                            uint _3669 = (_3594 * 40u) + 24u;
                            vec4 _3682 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3669)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 3u)).x));
                            uint _3688 = (_3594 * 40u) + 28u;
                            vec4 _3701 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3688)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 3u)).x));
                            _3713 = fma(_2094, _3701.z, fma(_2093, _3701.y, _3701.x * _2092)) + _3701.w;
                            _3714 = !((fma(_2094, _3682.z, fma(_2093, _3682.y, _3682.x * _2092)) + _3682.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3714)
                            {
                                float _3741 = _3609.x - _2092;
                                float _3742 = _3609.y - _2093;
                                float _3743 = _3609.z - _2094;
                                float _3744 = dot(vec3(_3741, _3742, _3743), vec3(_3741, _3742, _3743));
                                float _3747 = inversesqrt(_3744);
                                float _3748 = _3747 * _3741;
                                float _3749 = _3747 * _3742;
                                float _3750 = _3747 * _3743;
                                float _3754 = 1.0 - (_3744 / (_3610 * _3610));
                                float _4929 = isnan(0.0) ? _3754 : (isnan(_3754) ? 0.0 : max(_3754, 0.0));
                                float _3755 = isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0));
                                float _3759 = sqrt(_3744) * _3625.w;
                                float _3761 = 1.39999997615814208984375 / (_3759 + 1.39999997615814208984375);
                                float _3762 = _3761 * _3761;
                                float _3765 = ((1.0 - _3762) * dot(vec3(_3748, _3749, _3750), vec3(_958, _961, _964))) + _3762;
                                float _3768 = _3759 * _3759;
                                float _3772 = (fma(_2094, _3652.z, fma(_2093, _3652.y, _3652.x * _2092)) + _3652.w) / _3713;
                                float _3773 = (fma(_2094, _3667.z, fma(_2093, _3667.y, _3667.x * _2092)) + _3667.w) / _3713;
                                float _3777 = 1.0 - dot(vec2(_3772, _3773), vec2(_3772, _3773));
                                float _4945 = isnan(0.0) ? _3777 : (isnan(_3777) ? 0.0 : max(_3777, 0.0));
                                float _3778 = isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0));
                                float _3779 = _3778 * (((isnan(0.0) ? _3765 : (isnan(_3765) ? 0.0 : max(_3765, 0.0))) * _3755) / ((_3768 * 0.699999988079071044921875) + 1.0));
                                float _3791 = exp2(log2(1.0 / ((_3768 * 3.5) + 5.0)) * 0.25);
                                float _3792 = 1.0 - _1033;
                                float _3799 = sqrt(1.0 - ((1.0 - (_3792 * _3792)) * (1.0 - (_3791 * _3791))));
                                float _3800 = _3799 * _3799;
                                float _3801 = _3800 * _3800;
                                float _3802 = _3748 - _3252;
                                float _3803 = _3749 - _3253;
                                float _3804 = _3750 - _3254;
                                float _3808 = inversesqrt(dot(vec3(_3802, _3803, _3804), vec3(_3802, _3803, _3804)));
                                float _3812 = dot(vec3(_958, _961, _964), vec3((-0.0) - _3252, (-0.0) - _3253, (-0.0) - _3254));
                                float _4956 = isnan(0.0) ? _3812 : (isnan(_3812) ? 0.0 : max(_3812, 0.0));
                                float _3815 = isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0));
                                float _3816 = dot(vec3(_958, _961, _964), vec3(_3808 * _3802, _3808 * _3803, _3808 * _3804));
                                float _4967 = isnan(0.0) ? _3816 : (isnan(_3816) ? 0.0 : max(_3816, 0.0));
                                float _3819 = isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0));
                                float _3823 = ((_3819 * _3819) * (_3801 + (-1.0))) + 1.0;
                                float _3824 = _3761 * _3800;
                                float _3825 = _3824 * _3824;
                                float _3831 = ((1.0 - _3825) * dot(vec3(_958, _961, _964), vec3(_3748, _3749, _3750))) + _3825;
                                float _4978 = isnan(0.0) ? _3831 : (isnan(_3831) ? 0.0 : max(_3831, 0.0));
                                float _3832 = isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0));
                                float _3833 = 1.0 - _3800;
                                float _3843 = (0.5 / (((_3832 * ((_3815 * _3833) + _3800)) + 9.9999999392252902907785028219223e-09) + (((_3832 * _3833) + _3800) * _3815))) * _3832;
                                float _4989 = isnan(0.0) ? _3843 : (isnan(_3843) ? 0.0 : max(_3843, 0.0));
                                float _3853 = (_3778 * _3755) * (((_3801 * 3.1415927410125732421875) * (isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0)))) / ((_3823 * _3823) * ((_3768 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3779 * _3625.y;
                                frontier_phi_78_pred_1 = _3779 * _3625.x;
                                frontier_phi_78_pred_2 = _3853 * _3637.z;
                                frontier_phi_78_pred_3 = _3853 * _3637.y;
                                frontier_phi_78_pred_4 = _3853 * _3637.x;
                                frontier_phi_78_pred_5 = _3779 * _3625.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3861 = frontier_phi_78_pred;
                            _3860 = frontier_phi_78_pred_1;
                            _3859 = frontier_phi_78_pred_2;
                            _3858 = frontier_phi_78_pred_3;
                            _3857 = frontier_phi_78_pred_4;
                            _3862 = frontier_phi_78_pred_5;
                            _3567 = _3860 + _3580;
                            _3568 = _3861 + _3581;
                            _3569 = _3862 + _3582;
                            _3564 = _3857 + _3577;
                            _3565 = _3858 + _3578;
                            _3566 = _3859 + _3579;
                            if (_3584 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3577 = _3564;
                                _3578 = _3565;
                                _3579 = _3566;
                                _3580 = _3567;
                                _3581 = _3568;
                                _3582 = _3569;
                                _3583 = _3584;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3569;
                        frontier_phi_72_pred_1 = _3568;
                        frontier_phi_72_pred_2 = _3567;
                        frontier_phi_72_pred_3 = _3566;
                        frontier_phi_72_pred_4 = _3565;
                        frontier_phi_72_pred_5 = _3564;
                    }
                    _3237 = frontier_phi_72_pred;
                    _3235 = frontier_phi_72_pred_1;
                    _3233 = frontier_phi_72_pred_2;
                    _3231 = frontier_phi_72_pred_3;
                    _3229 = frontier_phi_72_pred_4;
                    _3227 = frontier_phi_72_pred_5;
                    uint _3372 = _3371 + 1u;
                    if (_3372 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3365 = _3227;
                        _3366 = _3229;
                        _3367 = _3231;
                        _3368 = _3233;
                        _3369 = _3235;
                        _3370 = _3237;
                        _3371 = _3372;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3237;
                frontier_phi_60_61_ladder_1 = _3235;
                frontier_phi_60_61_ladder_2 = _3231;
                frontier_phi_60_61_ladder_3 = _3229;
                frontier_phi_60_61_ladder_4 = _3227;
                frontier_phi_60_61_ladder_5 = _3233;
            }
            else
            {
                frontier_phi_60_61_ladder = _3123;
                frontier_phi_60_61_ladder_1 = _3121;
                frontier_phi_60_61_ladder_2 = _3117;
                frontier_phi_60_61_ladder_3 = _3115;
                frontier_phi_60_61_ladder_4 = _3113;
                frontier_phi_60_61_ladder_5 = _3119;
            }
            _3226 = frontier_phi_60_61_ladder_4;
            _3228 = frontier_phi_60_61_ladder_3;
            _3230 = frontier_phi_60_61_ladder_2;
            _3232 = frontier_phi_60_61_ladder_5;
            _3234 = frontier_phi_60_61_ladder_1;
            _3236 = frontier_phi_60_61_ladder;
        }
        float _3241 = isnan(1.0) ? _1017 : (isnan(_1017) ? 1.0 : min(_1017, 1.0));
        _3046 = (_3241 * _3232) + _2558;
        _3048 = (_3241 * _3234) + _2560;
        _3050 = (_3241 * _3236) + _2562;
        _3052 = ((_3226 * _1001) * _3241) + _2896;
        _3054 = ((_3228 * _1003) * _3241) + _2898;
        _3056 = ((_3230 * _1004) * _3241) + _2900;
    }
    else
    {
        _3046 = _2558;
        _3048 = _2560;
        _3050 = _2562;
        _3052 = _2896;
        _3054 = _2898;
        _3056 = _2900;
    }
    float _5005 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _5016 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _5027 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    uint _3076 = _278 + 6u;
    float _3084 = _939 / cbSceneParam._m0[86u].x;
    float _3085 = _940 / cbSceneParam._m0[86u].y;
    vec4 _3099 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3084, _3085, (log2((isnan(cbSceneParam._m0[77u].w) ? _873 : (isnan(_873) ? cbSceneParam._m0[77u].w : min(_873, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3101 = _3099.x;
    float _3102 = _3099.y;
    float _3103 = _3099.z;
    float _3104 = _3099.w;
    float _3176;
    float _3178;
    float _3180;
    float _3182;
    if (_873 > cbSceneParam._m0[78u].w)
    {
        float _3138 = isnan(_873) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _873 : min(cbSceneParam._m0[80u].w, _873));
        float _3139 = _3138 / _873;
        float _3150 = _3139 * _924;
        float _3151 = _925 * _3139;
        float _3152 = (-0.0) - _3151;
        float _3154 = _3139 * _926;
        float _3156 = (cbSceneParam._m0[77u].w * _3152) / _3138;
        float _3157 = _3156 + cbSceneParam._m0[79u].w;
        float _3158 = cbSceneParam._m0[79u].w - _3151;
        float _3164 = sqrt(((_3150 * _3150) + (_3151 * _3151)) + (_3154 * _3154));
        float _3167 = (1.0 - (cbSceneParam._m0[77u].w / _3138)) * _3164;
        float _3172 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3174 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3327;
        if (abs((_3152 - _3156) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3327 = ((((_3157 > 0.0) ? exp2(_3172 * _3157) : (2.0 - exp2(_3174 * _3157))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3167;
        }
        else
        {
            float _3287 = 1.0 / cbSceneParam._m0[80u].x;
            float _3288 = isnan(_3158) ? _3157 : (isnan(_3157) ? _3158 : max(_3157, _3158));
            float _3289 = isnan(_3158) ? _3157 : (isnan(_3157) ? _3158 : min(_3157, _3158));
            float _3298 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : min(_3288, 0.0));
            float _3299 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : min(_3289, 0.0));
            _3327 = ((abs(_3164 / _3152) * cbSceneParam._m0[80u].y) * ((((_3298 - _3299) * 2.0) - ((exp2(_3172 * (isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0)))) - exp2(_3172 * (isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0))))) * _3287)) - ((exp2(_3174 * _3298) - exp2(_3174 * _3299)) * _3287))) + (_3167 * cbSceneParam._m0[80u].z);
        }
        vec4 _3329 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3084, _3085, 1.0), 0.0);
        float _3338 = exp2((_3327 * (-1.44269502162933349609375)) * (1.0 - _3329.w));
        float _3339 = log2(_3338);
        float _3355 = log2(_3104);
        _3176 = (exp2(_3355 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3339 * cbSceneParam._m0[78u].x)) * _3329.x) / cbSceneParam._m0[78u].x)) + _3101;
        _3178 = (exp2(_3355 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3339 * cbSceneParam._m0[78u].y)) * _3329.y) / cbSceneParam._m0[78u].y)) + _3102;
        _3180 = (exp2(_3355 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3339 * cbSceneParam._m0[78u].z)) * _3329.z) / cbSceneParam._m0[78u].z)) + _3103;
        _3182 = _3338 * _3104;
    }
    else
    {
        _3176 = _3101;
        _3178 = _3102;
        _3180 = _3103;
        _3182 = _3104;
    }
    float _3194 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3195 = _3194 == 3.0;
    float _3196 = log2(_3182);
    float _3203 = exp2(_3196 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5005 : (isnan(_5005) ? 1.0 : min(_5005, 1.0))) * (_3046 + ((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _1017))) + ((_3052 + ((isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0))) * _1824)) * cbPerFrame._m0[3u].x));
    float _3204 = exp2(_3196 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5016 : (isnan(_5016) ? 1.0 : min(_5016, 1.0))) * (_3048 + ((isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))) * _1017))) + ((_3054 + ((isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0))) * _1824)) * cbPerFrame._m0[3u].x));
    float _3205 = exp2(_3196 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5027 : (isnan(_5027) ? 1.0 : min(_5027, 1.0))) * (_3050 + ((isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0))) * _1017))) + ((_3056 + ((isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0))) * _1824)) * cbPerFrame._m0[3u].x));
    float _3214 = (_3194 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3214 * (_3195 ? _3203 : (_3203 + (cbSceneParam._m0[72u].w * _3176)));
    SV_Target.y = _3214 * (_3195 ? _3204 : (_3204 + (cbSceneParam._m0[72u].w * _3178)));
    SV_Target.z = _3214 * (_3195 ? _3205 : (_3205 + (cbSceneParam._m0[72u].w * _3180)));
    SV_Target.w = cbInstanceData._m0[_3076].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3076].w;
}


