#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1021;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _203 = _202 * _194;
    float _204 = _202 * _195;
    float _205 = _202 * _196;
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = _209 * NORMAL.x;
    float _211 = _209 * NORMAL.y;
    float _212 = _209 * NORMAL.z;
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _217 = _216 * TANGENT.x;
    float _218 = _216 * TANGENT.y;
    float _219 = _216 * TANGENT.z;
    uint _222 = uint(roundEven(NORMAL.w)) * 13u;
    uint _228 = _222 + 1u;
    uint _232 = _222 + 2u;
    float _241 = sqrt(((cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x) + (cbInstanceData._m0[_222].x * cbInstanceData._m0[_222].x)) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x));
    float _242 = _241 * TEXCOORD.z;
    float _243 = _241 * TEXCOORD.w;
    vec4 _262 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _268 = _262.x * cbMtdParam._m0[9u].x;
    float _269 = _262.y * cbMtdParam._m0[9u].y;
    float _270 = _262.z * cbMtdParam._m0[9u].z;
    vec4 _289 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _242) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _243) + cbTextureTilingScale._m0[14u].w));
    vec4 _309 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _313 = _309.z;
    float _318 = (_309.x * 2.0) + (-1.0);
    float _320 = (_309.y * 2.0) + (-1.0);
    float _321 = dot(vec2(_318, _320), vec2(_318, _320));
    float _3373 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _327 = sqrt(1.0 - (isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0))));
    float _330 = fma(_327, _210, fma(_320, _217, _318 * _203));
    float _333 = fma(_327, _211, fma(_320, _218, _318 * _204));
    float _336 = fma(_327, _212, fma(_320, _219, _318 * _205));
    float _340 = inversesqrt(dot(vec3(_330, _333, _336), vec3(_330, _333, _336)));
    vec4 _376 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _242) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _243) + cbTextureTilingScale._m0[11u].w));
    float _378 = _376.x;
    float _379 = 1.0 - _378;
    float _388 = (cbMtdParam._m0[19u].x + dot(vec4(_340 * _330, _340 * _333, _340 * _336, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_378 - _379) * cbMtdParam._m0[24u].z) + _379) * cbMtdParam._m0[21u].z);
    float _3384 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _389 = isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0));
    float _396 = (_389 * ((_289.x * cbMtdParam._m0[18u].x) - _268)) + _268;
    float _397 = (_389 * ((_289.y * cbMtdParam._m0[18u].y) - _269)) + _269;
    float _398 = (_389 * ((_289.z * cbMtdParam._m0[18u].z) - _270)) + _270;
    vec4 _411 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _413 = _411.x;
    float _415 = _413 - (_413 * _389);
    vec4 _428 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _242) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _243) + cbTextureTilingScale._m0[15u].w));
    float _435 = (_428.x * 2.0) + (-1.0);
    float _436 = (_428.y * 2.0) + (-1.0);
    float _437 = dot(vec2(_435, _436), vec2(_435, _436));
    float _3395 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _445 = ((_428.z - _313) * _389) + _313;
    float _455 = ((sqrt(1.0 - (isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0)))) - _327) * _389) + _327;
    float _458 = (((_435 - _318) * _389) + _318) + (cbMtdParam._m0[21u].x * _318);
    float _459 = (((_436 - _320) * _389) + _320) + (cbMtdParam._m0[21u].x * _320);
    float _464 = cbMtdParam._m0[22u].x + _309.w;
    float _467 = fma(_455, _210, fma(_459, _217, _458 * _203));
    float _470 = fma(_455, _211, fma(_459, _218, _458 * _204));
    float _473 = fma(_455, _212, fma(_459, _219, _458 * _205));
    float _477 = inversesqrt(dot(vec3(_467, _470, _473), vec3(_467, _470, _473)));
    float _478 = _477 * _467;
    float _479 = _477 * _470;
    float _480 = _477 * _473;
    float _3406 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _481 = isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0));
    float _3417 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _3428 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _3439 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _3450 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _3461 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _486 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
    float _500 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _541 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _551 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _541);
    float _552 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _541);
    float _553 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _541);
    float _557 = inversesqrt(dot(vec3(_551, _552, _553), vec3(_551, _552, _553)));
    float _558 = _551 * _557;
    float _559 = _552 * _557;
    float _560 = _553 * _557;
    float _566 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _567 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _588 = fma(_480, cbSceneParam._m0[5u].z, fma(_479, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _478));
    float _591 = fma(_480, cbSceneParam._m0[6u].z, fma(_479, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _478));
    float _594 = fma(_480, cbSceneParam._m0[7u].z, fma(_479, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _478));
    uint _608 = (_222 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _614 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0)))) * cbInstanceData._m0[_608].x;
    float _615 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0)))) * cbInstanceData._m0[_608].y;
    float _616 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0)))) * cbInstanceData._m0[_608].z;
    float _3472 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _617 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
    float _3483 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _618 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
    float _3494 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _619 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
    float _620 = 1.0 - _486;
    float _621 = _617 * _620;
    float _622 = _618 * _620;
    float _623 = _619 * _620;
    float _628 = (_617 + (-0.039999999105930328369140625)) * _486;
    float _629 = (_618 + (-0.039999999105930328369140625)) * _486;
    float _630 = (_619 + (-0.039999999105930328369140625)) * _486;
    float _631 = _628 + 0.039999999105930328369140625;
    float _633 = _629 + 0.039999999105930328369140625;
    float _634 = _630 + 0.039999999105930328369140625;
    vec4 _643 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _566, cbSceneParam._m0[86u].y * _567));
    float _647 = ((isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0))) * TEXCOORD_5.w) * _643.x;
    float _648 = dot(vec3(_478, _479, _480), vec3(_558, _559, _560));
    float _651 = _648 * 2.0;
    float _655 = (_651 * _478) - _558;
    float _656 = (_651 * _479) - _559;
    float _657 = (_651 * _480) - _560;
    float _661 = abs(dot(vec3(_558, _559, _560), vec3(_478, _479, _480)));
    float _3505 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _663 = sqrt(_481);
    float _676 = exp2((_663 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_663 * 3.0));
    float _682 = (1.0 - _676) * ((_663 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _683 = _676 * _663;
    float _711 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _715 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _719 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1020;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _745 = fma(_719, cbModelParam._m0[26u].z, fma(_715, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _711));
        float _749 = fma(_719, cbModelParam._m0[27u].z, fma(_715, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _711));
        float _753 = fma(_719, cbModelParam._m0[28u].z, fma(_715, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _711));
        float _778 = _711 + _478;
        float _779 = _715 + _479;
        float _780 = _719 + _480;
        float _790 = fma(_780, cbModelParam._m0[26u].z, fma(_779, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _778)) - _745;
        float _791 = fma(_780, cbModelParam._m0[27u].z, fma(_779, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _778)) - _749;
        float _792 = fma(_780, cbModelParam._m0[28u].z, fma(_779, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _778)) - _753;
        float _796 = inversesqrt(dot(vec3(_790, _791, _792), vec3(_790, _791, _792)));
        float _809 = ((_796 * _790) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_745 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _810 = ((_796 * _791) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_749 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _811 = ((_796 * _792) / cbModelParam._m0[34u].z) + ((((((_753 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _814 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_809, _810, _811), 0.0);
        vec4 _821 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_809, _810, _811), 0.0);
        vec4 _828 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_809, _810, _811), 0.0);
        vec4 _835 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_809, _810, _811), 0.0);
        float _848 = exp2((_814.w + (-0.5)) * 20.0) * 2.0;
        float _849 = _848 * (_814.x + (-0.5));
        float _850 = _848 * (_814.y + (-0.5));
        float _851 = _848 * (_814.z + (-0.5));
        float _858 = exp2((_821.w + (-0.5)) * 20.0) * 2.0;
        float _859 = _858 * (_821.x + (-0.5));
        float _860 = _858 * (_821.y + (-0.5));
        float _861 = _858 * (_821.z + (-0.5));
        float _868 = exp2((_828.w + (-0.5)) * 20.0) * 2.0;
        float _869 = _868 * (_828.x + (-0.5));
        float _870 = _868 * (_828.y + (-0.5));
        float _871 = _868 * (_828.z + (-0.5));
        float _878 = exp2((_835.w + (-0.5)) * 20.0) * 2.0;
        float _879 = _878 * (_835.x + (-0.5));
        float _880 = _878 * (_835.y + (-0.5));
        float _881 = _878 * (_835.z + (-0.5));
        float _882 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _883 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _884 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _885 = _849 * 0.5;
        float _886 = _859 * 0.5;
        float _887 = _869 * 0.5;
        float _888 = dot(vec3(_885, _886, _887), vec3(_885, _886, _887));
        float _893 = (_888 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_888);
        float _902 = (dot(vec3(_478, _479, _480), vec3(_893 * _885, _893 * _886, _893 * _887)) + 1.0) * 0.5;
        float _3531 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _912 = sqrt(((_886 * _886) + (_885 * _885)) + (_887 * _887)) / (_882 + 9.9999997473787516355514526367188e-06);
        float _3542 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _913 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
        float _914 = _913 * 2.0;
        float _918 = (1.0 - _913) / (_913 + 1.0);
        float _3553 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _919 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
        float _928 = ((((1.0 - _919) * (_914 + 2.0)) * exp2(log2(isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0))) * (_914 + 1.0))) + _919) * _882;
        float _929 = _850 * 0.5;
        float _930 = _860 * 0.5;
        float _931 = _870 * 0.5;
        float _932 = dot(vec3(_929, _930, _931), vec3(_929, _930, _931));
        float _937 = (_932 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_932);
        float _945 = (dot(vec3(_478, _479, _480), vec3(_937 * _929, _937 * _930, _937 * _931)) + 1.0) * 0.5;
        float _3564 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _954 = sqrt(((_930 * _930) + (_929 * _929)) + (_931 * _931)) / (_883 + 9.9999997473787516355514526367188e-06);
        float _3575 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _955 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
        float _956 = _955 * 2.0;
        float _960 = (1.0 - _955) / (_955 + 1.0);
        float _3586 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _961 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
        float _970 = ((((1.0 - _961) * (_956 + 2.0)) * exp2(log2(isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0))) * (_956 + 1.0))) + _961) * _883;
        float _971 = _851 * 0.5;
        float _972 = _861 * 0.5;
        float _973 = _871 * 0.5;
        float _974 = dot(vec3(_971, _972, _973), vec3(_971, _972, _973));
        float _979 = (_974 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_974);
        float _987 = (dot(vec3(_478, _479, _480), vec3(_979 * _971, _979 * _972, _979 * _973)) + 1.0) * 0.5;
        float _3597 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _996 = sqrt(((_972 * _972) + (_971 * _971)) + (_973 * _973)) / (_884 + 9.9999997473787516355514526367188e-06);
        float _3608 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _997 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
        float _998 = _997 * 2.0;
        float _1002 = (1.0 - _997) / (_997 + 1.0);
        float _3619 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _1012 = ((((1.0 - _1003) * (_998 + 2.0)) * exp2(log2(isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0))) * (_998 + 1.0))) + _1003) * _884;
        _1020 = _851;
        _1022 = _850;
        _1023 = _849;
        _1024 = _861;
        _1025 = _860;
        _1026 = _859;
        _1027 = _871;
        _1028 = _870;
        _1029 = _869;
        _1030 = _884;
        _1031 = _883;
        _1032 = _882;
        _1033 = cbModelParam._m0[36u].z * (isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0)));
        _1034 = cbModelParam._m0[36u].z * (isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0)));
        _1035 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0)));
    }
    else
    {
        _1020 = _1021;
        _1022 = _1021;
        _1023 = _1021;
        _1024 = _1021;
        _1025 = _1021;
        _1026 = _1021;
        _1027 = _1021;
        _1028 = _1021;
        _1029 = _1021;
        _1030 = _1021;
        _1031 = _1021;
        _1032 = _1021;
        _1033 = 0.0;
        _1034 = 0.0;
        _1035 = 0.0;
    }
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1060 = fma(_719, cbModelParam._m0[30u].z, fma(_715, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _711));
        float _1064 = fma(_719, cbModelParam._m0[31u].z, fma(_715, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _711));
        float _1068 = fma(_719, cbModelParam._m0[32u].z, fma(_715, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _711));
        float _1091 = _711 + _478;
        float _1092 = _715 + _479;
        float _1093 = _719 + _480;
        float _1103 = fma(_1093, cbModelParam._m0[30u].z, fma(_1092, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1091)) - _1060;
        float _1104 = fma(_1093, cbModelParam._m0[31u].z, fma(_1092, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1091)) - _1064;
        float _1105 = fma(_1093, cbModelParam._m0[32u].z, fma(_1092, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1091)) - _1068;
        float _1109 = inversesqrt(dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105)));
        float _1122 = ((_1109 * _1103) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1060 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1123 = ((_1109 * _1104) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1064 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1124 = ((_1109 * _1105) / cbModelParam._m0[35u].z) + ((((((_1068 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        float _1159 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1126.x + (-0.5));
        float _1161 = _1159 * (_1126.y + (-0.5));
        float _1162 = _1159 * (_1126.z + (-0.5));
        float _1169 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1133.x + (-0.5));
        float _1171 = _1169 * (_1133.y + (-0.5));
        float _1172 = _1169 * (_1133.z + (-0.5));
        float _1179 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1140.x + (-0.5));
        float _1181 = _1179 * (_1140.y + (-0.5));
        float _1182 = _1179 * (_1140.z + (-0.5));
        float _1189 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1147.x + (-0.5));
        float _1191 = _1189 * (_1147.y + (-0.5));
        float _1192 = _1189 * (_1147.z + (-0.5));
        float _1193 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = _1160 * 0.5;
        float _1197 = _1170 * 0.5;
        float _1198 = _1180 * 0.5;
        float _1199 = dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198));
        float _1204 = (_1199 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1199);
        float _1212 = (dot(vec3(_478, _479, _480), vec3(_1204 * _1196, _1204 * _1197, _1204 * _1198)) + 1.0) * 0.5;
        float _3660 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1221 = sqrt(((_1197 * _1197) + (_1196 * _1196)) + (_1198 * _1198)) / (_1193 + 9.9999997473787516355514526367188e-06);
        float _3671 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
        float _1223 = _1222 * 2.0;
        float _1227 = (1.0 - _1222) / (_1222 + 1.0);
        float _3682 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
        float _1237 = ((((1.0 - _1228) * (_1223 + 2.0)) * exp2(log2(isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) * (_1223 + 1.0))) + _1228) * _1193;
        float _1238 = _1161 * 0.5;
        float _1239 = _1171 * 0.5;
        float _1240 = _1181 * 0.5;
        float _1241 = dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240));
        float _1246 = (_1241 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1241);
        float _1254 = (dot(vec3(_478, _479, _480), vec3(_1246 * _1238, _1246 * _1239, _1246 * _1240)) + 1.0) * 0.5;
        float _3693 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1263 = sqrt(((_1239 * _1239) + (_1238 * _1238)) + (_1240 * _1240)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _3704 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
        float _1265 = _1264 * 2.0;
        float _1269 = (1.0 - _1264) / (_1264 + 1.0);
        float _3715 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _1279 = ((((1.0 - _1270) * (_1265 + 2.0)) * exp2(log2(isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0))) * (_1265 + 1.0))) + _1270) * _1194;
        float _1280 = _1162 * 0.5;
        float _1281 = _1172 * 0.5;
        float _1282 = _1182 * 0.5;
        float _1283 = dot(vec3(_1280, _1281, _1282), vec3(_1280, _1281, _1282));
        float _1288 = (_1283 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1283);
        float _1296 = (dot(vec3(_478, _479, _480), vec3(_1288 * _1280, _1288 * _1281, _1288 * _1282)) + 1.0) * 0.5;
        float _3726 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1305 = sqrt(((_1281 * _1281) + (_1280 * _1280)) + (_1282 * _1282)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _3737 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _1307 = _1306 * 2.0;
        float _1311 = (1.0 - _1306) / (_1306 + 1.0);
        float _3748 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1321 = ((((1.0 - _1312) * (_1307 + 2.0)) * exp2(log2(isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))) * (_1307 + 1.0))) + _1312) * _1195;
        _1329 = _1162;
        _1330 = _1161;
        _1331 = _1160;
        _1332 = _1172;
        _1333 = _1171;
        _1334 = _1170;
        _1335 = _1182;
        _1336 = _1181;
        _1337 = _1180;
        _1338 = _1195;
        _1339 = _1194;
        _1340 = _1193;
        _1341 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)));
        _1342 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)));
        _1343 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)));
    }
    else
    {
        _1329 = _1021;
        _1330 = _1021;
        _1331 = _1021;
        _1332 = _1021;
        _1333 = _1021;
        _1334 = _1021;
        _1335 = _1021;
        _1336 = _1021;
        _1337 = _1021;
        _1338 = _1021;
        _1339 = _1021;
        _1340 = _1021;
        _1341 = 0.0;
        _1342 = 0.0;
        _1343 = 0.0;
    }
    float _1353 = (cbModelParam._m0[1u].x * (_1341 - _1033)) + _1033;
    float _1354 = (cbModelParam._m0[1u].x * (_1342 - _1034)) + _1034;
    float _1355 = (cbModelParam._m0[1u].x * (_1343 - _1035)) + _1035;
    float _1376 = fma(_1355, cbSceneParam._m0[89u].z, fma(_1354, cbSceneParam._m0[89u].y, _1353 * cbSceneParam._m0[89u].x));
    float _1379 = fma(_1355, cbSceneParam._m0[90u].z, fma(_1354, cbSceneParam._m0[90u].y, _1353 * cbSceneParam._m0[90u].x));
    float _1382 = fma(_1355, cbSceneParam._m0[91u].z, fma(_1354, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1353));
    float _1397 = _655 * 0.5;
    float _1398 = _656 * 0.5;
    float _1399 = _657 * 0.5;
    float _1400 = dot(vec4(_1397, _1398, _1399, 1.0), vec4(_1331, _1334, _1337, _1340));
    float _1403 = dot(vec4(_1397, _1398, _1399, 1.0), vec4(_1330, _1333, _1336, _1339));
    float _1406 = dot(vec4(_1397, _1398, _1399, 1.0), vec4(_1329, _1332, _1335, _1338));
    float _1440;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1413 = dot(vec4(_1397, _1398, _1399, 1.0), vec4(_1020, _1024, _1027, _1030));
        float _1417 = dot(vec4(_1397, _1398, _1399, 1.0), vec4(_1022, _1025, _1028, _1031));
        float _1421 = dot(vec4(_1397, _1398, _1399, 1.0), vec4(_1023, _1026, _1029, _1032));
        float _1428 = dot(vec4(cbModelParam._m0[39u]), vec4(_1397, _1398, _1399, 1.0));
        _1440 = dot(vec3(isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)), isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)), isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1428) ? 0.0 : (isnan(0.0) ? _1428 : max(0.0, _1428))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1440 = 1.0;
    }
    float _1451;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1442 = dot(vec4(cbModelParam._m0[40u]), vec4(_1397, _1398, _1399, 1.0));
        _1451 = dot(vec3(isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)), isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)), isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1442) ? 0.0 : (isnan(0.0) ? _1442 : max(0.0, _1442))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1451 = 1.0;
    }
    float _1455 = (_1451 * cbModelParam._m0[1u].x) + (_1440 * (1.0 - cbModelParam._m0[1u].x));
    float _1465 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _481);
    float _1466 = isnan(_1465) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1465 : min(cbModelParam._m0[25u].z, _1465));
    float _1546;
    float _1548;
    float _1550;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1513 = fma(_719, cbModelParam._m0[13u].z, fma(_715, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _711)) + cbModelParam._m0[13u].w;
        float _1517 = fma(_719, cbModelParam._m0[14u].z, fma(_715, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _711)) + cbModelParam._m0[14u].w;
        float _1521 = fma(_719, cbModelParam._m0[15u].z, fma(_715, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _711)) + cbModelParam._m0[15u].w;
        float _1524 = fma(_657, cbModelParam._m0[13u].z, fma(_656, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _655));
        float _1527 = fma(_657, cbModelParam._m0[14u].z, fma(_656, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _655));
        float _1530 = fma(_657, cbModelParam._m0[15u].z, fma(_656, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _655));
        float _1558;
        if (_1524 > 0.0)
        {
            _1558 = abs((1.0 - _1513) / _1524);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1524 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1513 + 1.0) / _1524);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1558 = frontier_phi_14_12_ladder;
        }
        float _1782;
        if (_1527 > 0.0)
        {
            _1782 = abs((1.0 - _1517) / _1527);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1527 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1517 + 1.0) / _1527);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1782 = frontier_phi_23_19_ladder;
        }
        float _2039;
        if (_1530 > 0.0)
        {
            _2039 = abs((1.0 - _1521) / _1530);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1530 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1521 + 1.0) / _1530);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2039 = frontier_phi_35_30_ladder;
        }
        float _2041 = isnan(_1782) ? _1558 : (isnan(_1558) ? _1782 : min(_1558, _1782));
        float _2042 = isnan(_2039) ? _2041 : (isnan(_2041) ? _2039 : min(_2041, _2039));
        float _2046 = (_2042 * _1524) + _1513;
        float _2047 = (_2042 * _1527) + _1517;
        float _2048 = (_2042 * _1530) + _1521;
        float _2049 = _2042 * 9.9999997473787516355514526367188e-05;
        float _2051 = (-1.0) - _2049;
        float _2053 = _2049 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2048 > _2053) || ((_2048 < _2051) || ((_2047 > _2053) || ((_2047 < _2051) || ((_2046 < _2051) || (_2046 > _2053))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2176 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2048, cbModelParam._m0[9u].z, fma(_2047, cbModelParam._m0[9u].y, _2046 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2048, cbModelParam._m0[10u].z, fma(_2047, cbModelParam._m0[10u].y, _2046 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2048, cbModelParam._m0[11u].z, fma(_2047, cbModelParam._m0[11u].y, _2046 * cbModelParam._m0[11u].x))), _1466);
            frontier_phi_13_35_ladder = _2176.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2176.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2176.x * cbModelParam._m0[1u].y;
        }
        _1546 = frontier_phi_13_35_ladder_2;
        _1548 = frontier_phi_13_35_ladder_1;
        _1550 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1534 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_655, _656, _657), _1466);
        _1546 = _1534.x * cbModelParam._m0[1u].y;
        _1548 = _1534.y * cbModelParam._m0[1u].y;
        _1550 = _1534.z * cbModelParam._m0[1u].y;
    }
    float _1554 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _481);
    float _1555 = isnan(_1554) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1554 : min(cbModelParam._m0[25u].w, _1554));
    float _1644;
    float _1646;
    float _1648;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1608 = fma(_719, cbModelParam._m0[21u].z, fma(_715, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _711)) + cbModelParam._m0[21u].w;
        float _1612 = fma(_719, cbModelParam._m0[22u].z, fma(_715, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _711)) + cbModelParam._m0[22u].w;
        float _1616 = fma(_719, cbModelParam._m0[23u].z, fma(_715, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _711)) + cbModelParam._m0[23u].w;
        float _1619 = fma(_657, cbModelParam._m0[21u].z, fma(_656, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _655));
        float _1622 = fma(_657, cbModelParam._m0[22u].z, fma(_656, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _655));
        float _1625 = fma(_657, cbModelParam._m0[23u].z, fma(_656, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _655));
        float _1787;
        if (_1619 > 0.0)
        {
            _1787 = abs((1.0 - _1608) / _1619);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1619 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1608 + 1.0) / _1619);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1787 = frontier_phi_25_21_ladder;
        }
        float _2066;
        if (_1622 > 0.0)
        {
            _2066 = abs((1.0 - _1612) / _1622);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1622 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1612 + 1.0) / _1622);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2066 = frontier_phi_37_32_ladder;
        }
        float _2279;
        if (_1625 > 0.0)
        {
            _2279 = abs((1.0 - _1616) / _1625);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1625 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1616 + 1.0) / _1625);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2279 = frontier_phi_46_43_ladder;
        }
        float _2281 = isnan(_2066) ? _1787 : (isnan(_1787) ? _2066 : min(_1787, _2066));
        float _2282 = isnan(_2279) ? _2281 : (isnan(_2281) ? _2279 : min(_2281, _2279));
        float _2286 = (_2282 * _1619) + _1608;
        float _2287 = (_2282 * _1622) + _1612;
        float _2288 = (_2282 * _1625) + _1616;
        float _2289 = _2282 * 9.9999997473787516355514526367188e-05;
        float _2290 = (-1.0) - _2289;
        float _2292 = _2289 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2288 > _2292) || ((_2288 < _2290) || ((_2287 > _2292) || ((_2287 < _2290) || ((_2286 < _2290) || (_2286 > _2292))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2487 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2288, cbModelParam._m0[17u].z, fma(_2287, cbModelParam._m0[17u].y, _2286 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2288, cbModelParam._m0[18u].z, fma(_2287, cbModelParam._m0[18u].y, _2286 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2288, cbModelParam._m0[19u].z, fma(_2287, cbModelParam._m0[19u].y, _2286 * cbModelParam._m0[19u].x))), _1555);
            frontier_phi_22_46_ladder = _2487.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2487.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2487.x * cbModelParam._m0[1u].z;
        }
        _1644 = frontier_phi_22_46_ladder_2;
        _1646 = frontier_phi_22_46_ladder_1;
        _1648 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1628 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_655, _656, _657), _1555);
        _1644 = _1628.x * cbModelParam._m0[1u].z;
        _1646 = _1628.y * cbModelParam._m0[1u].z;
        _1648 = _1628.z * cbModelParam._m0[1u].z;
    }
    float _1661 = (((_682 * _631) + _683) * _647) * ((cbModelParam._m0[1u].w * (_1644 - _1546)) + _1546);
    float _1663 = (((_682 * _633) + _683) * _647) * ((cbModelParam._m0[1u].w * (_1646 - _1548)) + _1548);
    float _1665 = (((_682 * _634) + _683) * _647) * ((cbModelParam._m0[1u].w * (_1648 - _1550)) + _1550);
    float _1668 = fma(_1665, cbSceneParam._m0[89u].z, fma(_1663, cbSceneParam._m0[89u].y, _1661 * cbSceneParam._m0[89u].x));
    float _1671 = fma(_1665, cbSceneParam._m0[90u].z, fma(_1663, cbSceneParam._m0[90u].y, _1661 * cbSceneParam._m0[90u].x));
    float _1674 = fma(_1665, cbSceneParam._m0[91u].z, fma(_1663, cbSceneParam._m0[91u].y, _1661 * cbSceneParam._m0[91u].x));
    vec4 _1682 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_566, _567));
    float _1684 = _1682.w;
    float _1696 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1684);
    float _1697 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1684);
    float _1698 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1684);
    uvec4 _1702 = floatBitsToUint(cbInstanceData._m0[_222 + 5u]);
    uint _1704 = _1702.x * 14u;
    uint _1705 = _1704 + 13u;
    float _1712 = _647 + (-1.0);
    float _1717 = (cbLight._m0[_1705].x * _1712) + 1.0;
    float _1718 = (cbLight._m0[_1705].y * _1712) + 1.0;
    float _1719 = (cbLight._m0[_1705].z * _1712) + 1.0;
    float _1720 = (cbLight._m0[_1705].w * _1712) + 1.0;
    uint _1721 = _1704 + 5u;
    float _1727 = isnan(1.0) ? _1718 : (isnan(_1718) ? 1.0 : min(_1718, 1.0));
    uint _1731 = _1704 + 4u;
    float _1741 = isnan(1.0) ? _1717 : (isnan(_1717) ? 1.0 : min(_1717, 1.0));
    uint _1745 = _1704 | 1u;
    float _1756 = dot(vec3(cbLight._m0[_1704].xyz), vec3(_478, _479, _480));
    float _1759 = dot(vec3(cbLight._m0[_1745].xyz), vec3(_478, _479, _480));
    float _3884 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
    float _3895 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
    float _1764 = (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * 0.3183098733425140380859375;
    float _1766 = (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * 0.3183098733425140380859375;
    float _1773 = ((cbLight._m0[_1721].x * _1727) * _1766) + (((cbLight._m0[_1731].x * _1696) * _1741) * _1764);
    float _1774 = ((_1727 * cbLight._m0[_1721].y) * _1766) + (((cbLight._m0[_1731].y * _1697) * _1741) * _1764);
    float _1775 = ((_1727 * cbLight._m0[_1721].z) * _1766) + (((cbLight._m0[_1731].z * _1698) * _1741) * _1764);
    uvec4 _1779 = floatBitsToUint(cbLight._m0[_1704 + 12u]);
    bool _1781 = _1779.x == 0u;
    float _1792;
    float _1794;
    float _1796;
    if (_1781)
    {
        _1792 = _1773;
        _1794 = _1774;
        _1796 = _1775;
    }
    else
    {
        uint _1800 = _1704 + 6u;
        float _1816 = (dot(vec3(cbLight._m0[_1704 + 2u].xyz), vec3(_478, _479, _480)) * 0.5) + 0.5;
        float _1817 = _1816 * _1816;
        float _3906 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
        float _1818 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1819 = isnan(1.0) ? _1719 : (isnan(_1719) ? 1.0 : min(_1719, 1.0));
        _1792 = (((cbLight._m0[_1800].x * 0.3183098733425140380859375) * _1818) * _1819) + _1773;
        _1794 = (((cbLight._m0[_1800].y * 0.3183098733425140380859375) * _1818) * _1819) + _1774;
        _1796 = (((cbLight._m0[_1800].z * 0.3183098733425140380859375) * _1818) * _1819) + _1775;
    }
    bool _1799 = _1779.y == 0u;
    float _1837;
    float _1839;
    float _1841;
    if (_1799)
    {
        _1837 = _1792;
        _1839 = _1794;
        _1841 = _1796;
    }
    else
    {
        uint _2010 = _1704 + 7u;
        float _2026 = (dot(vec3(cbLight._m0[_1704 + 3u].xyz), vec3(_478, _479, _480)) * 0.5) + 0.5;
        float _2027 = _2026 * _2026;
        float _3922 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
        float _2028 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _2029 = isnan(1.0) ? _1720 : (isnan(_1720) ? 1.0 : min(_1720, 1.0));
        _1837 = (((cbLight._m0[_2010].x * 0.3183098733425140380859375) * _2028) * _2029) + _1792;
        _1839 = (((cbLight._m0[_2010].y * 0.3183098733425140380859375) * _2028) * _2029) + _1794;
        _1841 = (((cbLight._m0[_2010].z * 0.3183098733425140380859375) * _2028) * _2029) + _1796;
    }
    uint _1844 = _1704 + 8u;
    float _1857 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1704].w)) * _481) * 0.949999988079071044921875);
    float _1858 = _1857 * _1857;
    float _1859 = cbLight._m0[_1704].x + _558;
    float _1860 = cbLight._m0[_1704].y + _559;
    float _1861 = cbLight._m0[_1704].z + _560;
    float _1865 = inversesqrt(dot(vec3(_1859, _1860, _1861), vec3(_1859, _1860, _1861)));
    float _1866 = _1865 * _1859;
    float _1867 = _1865 * _1860;
    float _1868 = _1865 * _1861;
    float _1869 = dot(vec3(_478, _479, _480), vec3(cbLight._m0[_1704].xyz));
    float _3938 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
    float _1872 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _3949 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _1873 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _1874 = dot(vec3(_478, _479, _480), vec3(_1866, _1867, _1868));
    float _3960 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
    float _1877 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _1878 = dot(vec3(cbLight._m0[_1704].xyz), vec3(_1866, _1867, _1868));
    float _3971 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
    float _1882 = _1858 * _1858;
    float _1886 = ((_1877 * _1877) * (_1882 + (-1.0))) + 1.0;
    float _1894 = exp2(log2(1.0 - (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0)))) * 5.0);
    float _1895 = 0.959999978542327880859375 - _628;
    float _1897 = 0.959999978542327880859375 - _629;
    float _1898 = 0.959999978542327880859375 - _630;
    float _1905 = 1.0 - _1858;
    float _1916 = (0.5 / (((_1873 * ((_1872 * _1905) + _1858)) + 9.9999999392252902907785028219223e-09) + (((_1873 * _1905) + _1858) * _1872))) * _1872;
    float _3982 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
    float _1918 = (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * (_1882 / ((_1886 * _1886) * 3.141590118408203125));
    uint _1932 = _1704 + 9u;
    float _1943 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1745].w)) * _481) * 0.949999988079071044921875);
    float _1944 = _1943 * _1943;
    float _1945 = cbLight._m0[_1745].x + _558;
    float _1946 = cbLight._m0[_1745].y + _559;
    float _1947 = cbLight._m0[_1745].z + _560;
    float _1951 = inversesqrt(dot(vec3(_1945, _1946, _1947), vec3(_1945, _1946, _1947)));
    float _1952 = _1951 * _1945;
    float _1953 = _1951 * _1946;
    float _1954 = _1951 * _1947;
    float _1955 = dot(vec3(_478, _479, _480), vec3(cbLight._m0[_1745].xyz));
    float _3993 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
    float _1958 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    float _1959 = dot(vec3(_478, _479, _480), vec3(_1952, _1953, _1954));
    float _4004 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1962 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _1963 = dot(vec3(cbLight._m0[_1745].xyz), vec3(_1952, _1953, _1954));
    float _4015 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1967 = _1944 * _1944;
    float _1971 = ((_1962 * _1962) * (_1967 + (-1.0))) + 1.0;
    float _1978 = exp2(log2(1.0 - (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0)))) * 5.0);
    float _1985 = 1.0 - _1944;
    float _1995 = (0.5 / (((_1873 * ((_1958 * _1985) + _1944)) + 9.9999999392252902907785028219223e-09) + (((_1873 * _1985) + _1944) * _1958))) * _1958;
    float _4026 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _1997 = (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_1967 / ((_1971 * _1971) * 3.141590118408203125));
    float _2007 = (((((_1978 * _1895) + _631) * cbLight._m0[_1932].x) * _1997) * _1727) + ((((cbLight._m0[_1844].x * _1696) * ((_1894 * _1895) + _631)) * _1918) * _1741);
    float _2008 = (((((_1978 * _1897) + _633) * cbLight._m0[_1932].y) * _1997) * _1727) + ((((cbLight._m0[_1844].y * _1697) * ((_1894 * _1897) + _633)) * _1918) * _1741);
    float _2009 = (((((_1978 * _1898) + _634) * cbLight._m0[_1932].z) * _1997) * _1727) + ((((cbLight._m0[_1844].z * _1698) * ((_1894 * _1898) + _634)) * _1918) * _1741);
    float _2071;
    float _2073;
    float _2075;
    if (_1781)
    {
        _2071 = _2007;
        _2073 = _2008;
        _2075 = _2009;
    }
    else
    {
        uint _2077 = _1704 + 2u;
        uint _2081 = _1704 + 10u;
        float _2095 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2077].w)) * _481) * 0.949999988079071044921875);
        float _2096 = _2095 * _2095;
        float _2097 = cbLight._m0[_2077].x + _558;
        float _2098 = cbLight._m0[_2077].y + _559;
        float _2099 = cbLight._m0[_2077].z + _560;
        float _2103 = inversesqrt(dot(vec3(_2097, _2098, _2099), vec3(_2097, _2098, _2099)));
        float _2104 = _2103 * _2097;
        float _2105 = _2103 * _2098;
        float _2106 = _2103 * _2099;
        float _2107 = dot(vec3(_478, _479, _480), vec3(cbLight._m0[_2077].xyz));
        float _4037 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
        float _2110 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _2111 = dot(vec3(_478, _479, _480), vec3(_2104, _2105, _2106));
        float _4048 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
        float _2114 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _2115 = dot(vec3(cbLight._m0[_2077].xyz), vec3(_2104, _2105, _2106));
        float _4059 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2119 = _2096 * _2096;
        float _2123 = ((_2114 * _2114) * (_2119 + (-1.0))) + 1.0;
        float _2130 = exp2(log2(1.0 - (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0)))) * 5.0);
        float _2137 = 1.0 - _2096;
        float _2147 = (0.5 / (((_1873 * ((_2110 * _2137) + _2096)) + 9.9999999392252902907785028219223e-09) + (((_1873 * _2137) + _2096) * _2110))) * _2110;
        float _4070 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
        float _2149 = (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * (_2119 / ((_2123 * _2123) * 3.141590118408203125));
        float _2150 = isnan(1.0) ? _1719 : (isnan(_1719) ? 1.0 : min(_1719, 1.0));
        _2071 = (((((_2130 * _1895) + _631) * cbLight._m0[_2081].x) * _2149) * _2150) + _2007;
        _2073 = (((((_2130 * _1897) + _633) * cbLight._m0[_2081].y) * _2149) * _2150) + _2008;
        _2075 = (((((_2130 * _1898) + _634) * cbLight._m0[_2081].z) * _2149) * _2150) + _2009;
    }
    float _2185;
    float _2187;
    float _2189;
    if (_1799)
    {
        _2185 = _2071;
        _2187 = _2073;
        _2189 = _2075;
    }
    else
    {
        uint _2196 = _1704 + 3u;
        uint _2200 = _1704 + 11u;
        float _2214 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2196].w)) * _481) * 0.949999988079071044921875);
        float _2215 = _2214 * _2214;
        float _2216 = cbLight._m0[_2196].x + _558;
        float _2217 = cbLight._m0[_2196].y + _559;
        float _2218 = cbLight._m0[_2196].z + _560;
        float _2222 = inversesqrt(dot(vec3(_2216, _2217, _2218), vec3(_2216, _2217, _2218)));
        float _2223 = _2222 * _2216;
        float _2224 = _2222 * _2217;
        float _2225 = _2222 * _2218;
        float _2226 = dot(vec3(_478, _479, _480), vec3(cbLight._m0[_2196].xyz));
        float _4086 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
        float _2229 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _2230 = dot(vec3(_478, _479, _480), vec3(_2223, _2224, _2225));
        float _4097 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        float _2233 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _2234 = dot(vec3(cbLight._m0[_2196].xyz), vec3(_2223, _2224, _2225));
        float _4108 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2238 = _2215 * _2215;
        float _2242 = ((_2233 * _2233) * (_2238 + (-1.0))) + 1.0;
        float _2249 = exp2(log2(1.0 - (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0)))) * 5.0);
        float _2256 = 1.0 - _2215;
        float _2266 = (0.5 / (((_1873 * ((_2229 * _2256) + _2215)) + 9.9999999392252902907785028219223e-09) + (((_1873 * _2256) + _2215) * _2229))) * _2229;
        float _4119 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        float _2268 = (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_2238 / ((_2242 * _2242) * 3.141590118408203125));
        float _2269 = isnan(1.0) ? _1720 : (isnan(_1720) ? 1.0 : min(_1720, 1.0));
        _2185 = (((((_2249 * _1895) + _631) * cbLight._m0[_2200].x) * _2268) * _2269) + _2071;
        _2187 = (((((_2249 * _1897) + _633) * cbLight._m0[_2200].y) * _2268) * _2269) + _2073;
        _2189 = (((((_2249 * _1898) + _634) * cbLight._m0[_2200].z) * _2268) * _2269) + _2075;
    }
    float _2404;
    float _2406;
    float _2408;
    float _2410;
    float _2412;
    float _2414;
    if (_1702.y == 0u)
    {
        float _2344 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2345 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2344;
        float _2346 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2344;
        float _2347 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2344;
        uvec4 _2359 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2360 = _2359.x;
        uint _2371 = uint((float(_2359.y) * floor(float(uint(cbSceneParam._m0[85u].y * _567) / _2360))) + floor(float(uint(cbSceneParam._m0[85u].x * _566) / _2360)));
        float _2381 = (log2(_2347 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2382 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
        uint _2385 = uint(isnan(14.0) ? _2382 : (isnan(_2382) ? 14.0 : min(_2382, 14.0)));
        uvec4 _2390 = texelFetch(g_lightClusterGridBuffer, int(((_2385 << 2u) + (_2371 << 6u)) >> 2u));
        uint _2391 = _2390.x;
        uint _2392 = _2359.z;
        float _2492;
        float _2494;
        float _2496;
        float _2498;
        float _2500;
        float _2502;
        if (((((1u << ((_2392 >> 4u) & 15u)) + 4294967295u) & _2391) == 0u) || ((_2392 & 240u) == 0u))
        {
            _2492 = 0.0;
            _2494 = 0.0;
            _2496 = 0.0;
            _2498 = 0.0;
            _2500 = 0.0;
            _2502 = 0.0;
        }
        else
        {
            float _2493;
            float _2495;
            float _2497;
            float _2499;
            float _2501;
            float _2503;
            float _2637 = 0.0;
            float _2638 = 0.0;
            float _2639 = 0.0;
            float _2640 = 0.0;
            float _2641 = 0.0;
            float _2642 = 0.0;
            uint _2643 = 0u;
            uint _2652;
            bool _2653;
            for (;;)
            {
                _2652 = texelFetch(g_lightClassification, int((((_2385 << 5u) + (_2371 << 9u)) + (_2643 << 2u)) >> 2u)).x;
                _2653 = _2652 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2653)
                {
                    frontier_phi_61_pred = _2637;
                    frontier_phi_61_pred_1 = _2642;
                    frontier_phi_61_pred_2 = _2641;
                    frontier_phi_61_pred_3 = _2640;
                    frontier_phi_61_pred_4 = _2639;
                    frontier_phi_61_pred_5 = _2638;
                }
                else
                {
                    float _2761;
                    float _2762;
                    float _2763;
                    float _2764;
                    float _2765;
                    float _2766;
                    uint _2767;
                    _2761 = _2637;
                    _2762 = _2638;
                    _2763 = _2639;
                    _2764 = _2640;
                    _2765 = _2641;
                    _2766 = _2642;
                    _2767 = _2652;
                    float _2693;
                    float _2694;
                    float _2695;
                    float _2696;
                    float _2697;
                    float _2698;
                    for (;;)
                    {
                        uint _2771 = uint(findLSB(_2767)) + (_2643 << 5u);
                        uint _2768 = (_2767 + 4294967295u) & _2767;
                        uint _2773 = _2771 * 48u;
                        vec4 _2787 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2773)).x, texelFetch(g_PointLightRenderingBuffer, int(_2773 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2773 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2773 + 3u)).x));
                        uint _2793 = (_2771 * 48u) + 4u;
                        vec4 _2806 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2793)).x, texelFetch(g_PointLightRenderingBuffer, int(_2793 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2793 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2793 + 3u)).x));
                        uint _2812 = (_2771 * 48u) + 8u;
                        vec3 _2823 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2812)).x, texelFetch(g_PointLightRenderingBuffer, int(_2812 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2812 + 2u)).x));
                        float _2827 = _2787.x - _2345;
                        float _2828 = _2787.y - _2346;
                        float _2829 = _2787.z - _2347;
                        float _2830 = dot(vec3(_2827, _2828, _2829), vec3(_2827, _2828, _2829));
                        float _2833 = inversesqrt(_2830);
                        float _2834 = _2833 * _2827;
                        float _2835 = _2833 * _2828;
                        float _2836 = _2833 * _2829;
                        float _2837 = dot(vec3(_588, _591, _594), vec3(_2834, _2835, _2836));
                        float _2842 = 1.0 - (_2830 * _2787.w);
                        float _4145 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
                        float _2843 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
                        float _2844 = sqrt(_2830) * _2806.w;
                        float _2847 = 1.39999997615814208984375 / (_2844 + 1.39999997615814208984375);
                        float _2848 = _2847 * _2847;
                        float _2851 = ((1.0 - _2848) * _2837) + _2848;
                        float _2854 = _2844 * _2844;
                        float _2858 = ((isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0))) * _2843) / ((_2854 * 0.699999988079071044921875) + 1.0);
                        float _2862 = (-0.0) - _2345;
                        float _2863 = (-0.0) - _2346;
                        float _2864 = (-0.0) - _2347;
                        float _2868 = inversesqrt(dot(vec3(_2862, _2863, _2864), vec3(_2862, _2863, _2864)));
                        float _2869 = _2868 * _2862;
                        float _2870 = _2868 * _2863;
                        float _2871 = _2868 * _2864;
                        float _2879 = exp2(log2(1.0 / ((_2854 * 3.5) + 5.0)) * 0.25);
                        float _2880 = 1.0 - _663;
                        float _2887 = sqrt(1.0 - ((1.0 - (_2880 * _2880)) * (1.0 - (_2879 * _2879))));
                        float _2888 = _2887 * _2887;
                        float _2889 = _2888 * _2888;
                        float _2890 = _2869 + _2834;
                        float _2891 = _2870 + _2835;
                        float _2892 = _2871 + _2836;
                        float _2896 = inversesqrt(dot(vec3(_2890, _2891, _2892), vec3(_2890, _2891, _2892)));
                        float _2900 = dot(vec3(_588, _591, _594), vec3(_2869, _2870, _2871));
                        float _4161 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
                        float _2903 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
                        float _2904 = dot(vec3(_588, _591, _594), vec3(_2896 * _2890, _2896 * _2891, _2896 * _2892));
                        float _4172 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
                        float _2907 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
                        float _2911 = ((_2907 * _2907) * (_2889 + (-1.0))) + 1.0;
                        float _2912 = _2847 * _2888;
                        float _2913 = _2912 * _2912;
                        float _2916 = ((1.0 - _2913) * _2837) + _2913;
                        float _4183 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
                        float _2917 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
                        float _2918 = 1.0 - _2888;
                        float _2928 = (0.5 / (((_2917 * ((_2903 * _2918) + _2888)) + 9.9999999392252902907785028219223e-09) + (((_2917 * _2918) + _2888) * _2903))) * _2917;
                        float _4194 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
                        float _2939 = (((_2889 * 3.1415927410125732421875) * (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0)))) / ((_2911 * _2911) * ((_2854 * 2.1991131305694580078125) + 3.141590118408203125))) * _2843;
                        _2696 = (_2858 * _2806.x) + _2764;
                        _2697 = (_2858 * _2806.y) + _2765;
                        _2698 = (_2858 * _2806.z) + _2766;
                        _2693 = (_2939 * _2823.x) + _2761;
                        _2694 = (_2939 * _2823.y) + _2762;
                        _2695 = (_2939 * _2823.z) + _2763;
                        if (_2768 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2761 = _2693;
                            _2762 = _2694;
                            _2763 = _2695;
                            _2764 = _2696;
                            _2765 = _2697;
                            _2766 = _2698;
                            _2767 = _2768;
                        }
                    }
                    frontier_phi_61_pred = _2693;
                    frontier_phi_61_pred_1 = _2698;
                    frontier_phi_61_pred_2 = _2697;
                    frontier_phi_61_pred_3 = _2696;
                    frontier_phi_61_pred_4 = _2695;
                    frontier_phi_61_pred_5 = _2694;
                }
                _2493 = frontier_phi_61_pred;
                _2503 = frontier_phi_61_pred_1;
                _2501 = frontier_phi_61_pred_2;
                _2499 = frontier_phi_61_pred_3;
                _2497 = frontier_phi_61_pred_4;
                _2495 = frontier_phi_61_pred_5;
                uint _2644 = _2643 + 1u;
                if (_2644 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2637 = _2493;
                    _2638 = _2495;
                    _2639 = _2497;
                    _2640 = _2499;
                    _2641 = _2501;
                    _2642 = _2503;
                    _2643 = _2644;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2492 = _2493;
            _2494 = _2495;
            _2496 = _2497;
            _2498 = _2499;
            _2500 = _2501;
            _2502 = _2503;
        }
        uvec4 _2506 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2507 = _2506.z;
        uint _2509 = (_2507 >> 8u) & 15u;
        float _2605;
        float _2607;
        float _2609;
        float _2611;
        float _2613;
        float _2615;
        if (((4294967295u << _2509) & _2391) == 0u)
        {
            _2605 = _2492;
            _2607 = _2494;
            _2609 = _2496;
            _2611 = _2498;
            _2613 = _2500;
            _2615 = _2502;
        }
        else
        {
            float _2630 = inversesqrt(dot(vec3(_2345, _2346, _2347), vec3(_2345, _2346, _2347)));
            float _2631 = _2630 * _2345;
            float _2632 = _2630 * _2346;
            float _2633 = _2630 * _2347;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2509 < ((_2507 >> 12u) & 15u))
            {
                float _2606;
                float _2608;
                float _2610;
                float _2612;
                float _2614;
                float _2616;
                float _2744 = _2492;
                float _2745 = _2494;
                float _2746 = _2496;
                float _2747 = _2498;
                float _2748 = _2500;
                float _2749 = _2502;
                uint _2750 = _2509;
                uint _2759;
                bool _2760;
                for (;;)
                {
                    _2759 = texelFetch(g_lightClassification, int((((_2385 << 5u) + (_2371 << 9u)) + (_2750 << 2u)) >> 2u)).x;
                    _2760 = _2759 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2760)
                    {
                        frontier_phi_67_pred = _2747;
                        frontier_phi_67_pred_1 = _2748;
                        frontier_phi_67_pred_2 = _2749;
                        frontier_phi_67_pred_3 = _2746;
                        frontier_phi_67_pred_4 = _2745;
                        frontier_phi_67_pred_5 = _2744;
                    }
                    else
                    {
                        float _2944;
                        float _2945;
                        float _2946;
                        float _2947;
                        float _2948;
                        float _2949;
                        float _3239;
                        float _3240;
                        float _3241;
                        float _3242;
                        float _3243;
                        float _3244;
                        float _2957 = _2744;
                        float _2958 = _2745;
                        float _2959 = _2746;
                        float _2960 = _2747;
                        float _2961 = _2748;
                        float _2962 = _2749;
                        uint _2963 = _2759;
                        uint _2964;
                        vec4 _2989;
                        float _2990;
                        vec4 _3005;
                        vec3 _3017;
                        vec4 _3033;
                        vec4 _3049;
                        float _3095;
                        bool _3096;
                        for (;;)
                        {
                            uint _2974 = ((_2750 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2963));
                            _2964 = (_2963 + 4294967295u) & _2963;
                            uint _2976 = _2974 * 40u;
                            _2989 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2976)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 3u)).x));
                            _2990 = _2989.w;
                            uint _2992 = (_2974 * 40u) + 4u;
                            _3005 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2992)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 3u)).x));
                            uint _3007 = (_2974 * 40u) + 8u;
                            _3017 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3007)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 2u)).x));
                            uint _3020 = (_2974 * 40u) + 16u;
                            _3033 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3020)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 3u)).x));
                            uint _3036 = (_2974 * 40u) + 20u;
                            _3049 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3036)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 3u)).x));
                            uint _3051 = (_2974 * 40u) + 24u;
                            vec4 _3064 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3051)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 3u)).x));
                            uint _3070 = (_2974 * 40u) + 28u;
                            vec4 _3083 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3070)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 3u)).x));
                            _3095 = fma(_2347, _3083.z, fma(_2346, _3083.y, _3083.x * _2345)) + _3083.w;
                            _3096 = !((fma(_2347, _3064.z, fma(_2346, _3064.y, _3064.x * _2345)) + _3064.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3096)
                            {
                                float _3123 = _2989.x - _2345;
                                float _3124 = _2989.y - _2346;
                                float _3125 = _2989.z - _2347;
                                float _3126 = dot(vec3(_3123, _3124, _3125), vec3(_3123, _3124, _3125));
                                float _3129 = inversesqrt(_3126);
                                float _3130 = _3129 * _3123;
                                float _3131 = _3129 * _3124;
                                float _3132 = _3129 * _3125;
                                float _3136 = 1.0 - (_3126 / (_2990 * _2990));
                                float _4205 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                                float _3137 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
                                float _3141 = sqrt(_3126) * _3005.w;
                                float _3143 = 1.39999997615814208984375 / (_3141 + 1.39999997615814208984375);
                                float _3144 = _3143 * _3143;
                                float _3147 = ((1.0 - _3144) * dot(vec3(_3130, _3131, _3132), vec3(_588, _591, _594))) + _3144;
                                float _3150 = _3141 * _3141;
                                float _3154 = (fma(_2347, _3033.z, fma(_2346, _3033.y, _3033.x * _2345)) + _3033.w) / _3095;
                                float _3155 = (fma(_2347, _3049.z, fma(_2346, _3049.y, _3049.x * _2345)) + _3049.w) / _3095;
                                float _3159 = 1.0 - dot(vec2(_3154, _3155), vec2(_3154, _3155));
                                float _4221 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
                                float _3160 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
                                float _3161 = _3160 * (((isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0))) * _3137) / ((_3150 * 0.699999988079071044921875) + 1.0));
                                float _3173 = exp2(log2(1.0 / ((_3150 * 3.5) + 5.0)) * 0.25);
                                float _3174 = 1.0 - _663;
                                float _3181 = sqrt(1.0 - ((1.0 - (_3174 * _3174)) * (1.0 - (_3173 * _3173))));
                                float _3182 = _3181 * _3181;
                                float _3183 = _3182 * _3182;
                                float _3184 = _3130 - _2631;
                                float _3185 = _3131 - _2632;
                                float _3186 = _3132 - _2633;
                                float _3190 = inversesqrt(dot(vec3(_3184, _3185, _3186), vec3(_3184, _3185, _3186)));
                                float _3194 = dot(vec3(_588, _591, _594), vec3((-0.0) - _2631, (-0.0) - _2632, (-0.0) - _2633));
                                float _4232 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                                float _3197 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
                                float _3198 = dot(vec3(_588, _591, _594), vec3(_3190 * _3184, _3190 * _3185, _3190 * _3186));
                                float _4243 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                                float _3201 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
                                float _3205 = ((_3201 * _3201) * (_3183 + (-1.0))) + 1.0;
                                float _3206 = _3143 * _3182;
                                float _3207 = _3206 * _3206;
                                float _3213 = ((1.0 - _3207) * dot(vec3(_588, _591, _594), vec3(_3130, _3131, _3132))) + _3207;
                                float _4254 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                                float _3214 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
                                float _3215 = 1.0 - _3182;
                                float _3225 = (0.5 / (((_3214 * ((_3197 * _3215) + _3182)) + 9.9999999392252902907785028219223e-09) + (((_3214 * _3215) + _3182) * _3197))) * _3214;
                                float _4265 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                                float _3235 = (_3160 * _3137) * (((_3183 * 3.1415927410125732421875) * (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0)))) / ((_3205 * _3205) * ((_3150 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3235 * _3017.x;
                                frontier_phi_73_pred_1 = _3235 * _3017.y;
                                frontier_phi_73_pred_2 = _3161 * _3005.z;
                                frontier_phi_73_pred_3 = _3161 * _3005.y;
                                frontier_phi_73_pred_4 = _3161 * _3005.x;
                                frontier_phi_73_pred_5 = _3235 * _3017.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3239 = frontier_phi_73_pred;
                            _3240 = frontier_phi_73_pred_1;
                            _3244 = frontier_phi_73_pred_2;
                            _3243 = frontier_phi_73_pred_3;
                            _3242 = frontier_phi_73_pred_4;
                            _3241 = frontier_phi_73_pred_5;
                            _2947 = _3242 + _2960;
                            _2948 = _3243 + _2961;
                            _2949 = _3244 + _2962;
                            _2944 = _3239 + _2957;
                            _2945 = _3240 + _2958;
                            _2946 = _3241 + _2959;
                            if (_2964 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2957 = _2944;
                                _2958 = _2945;
                                _2959 = _2946;
                                _2960 = _2947;
                                _2961 = _2948;
                                _2962 = _2949;
                                _2963 = _2964;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2947;
                        frontier_phi_67_pred_1 = _2948;
                        frontier_phi_67_pred_2 = _2949;
                        frontier_phi_67_pred_3 = _2946;
                        frontier_phi_67_pred_4 = _2945;
                        frontier_phi_67_pred_5 = _2944;
                    }
                    _2612 = frontier_phi_67_pred;
                    _2614 = frontier_phi_67_pred_1;
                    _2616 = frontier_phi_67_pred_2;
                    _2610 = frontier_phi_67_pred_3;
                    _2608 = frontier_phi_67_pred_4;
                    _2606 = frontier_phi_67_pred_5;
                    uint _2751 = _2750 + 1u;
                    if (_2751 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2744 = _2606;
                        _2745 = _2608;
                        _2746 = _2610;
                        _2747 = _2612;
                        _2748 = _2614;
                        _2749 = _2616;
                        _2750 = _2751;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2614;
                frontier_phi_55_56_ladder_1 = _2616;
                frontier_phi_55_56_ladder_2 = _2612;
                frontier_phi_55_56_ladder_3 = _2610;
                frontier_phi_55_56_ladder_4 = _2608;
                frontier_phi_55_56_ladder_5 = _2606;
            }
            else
            {
                frontier_phi_55_56_ladder = _2500;
                frontier_phi_55_56_ladder_1 = _2502;
                frontier_phi_55_56_ladder_2 = _2498;
                frontier_phi_55_56_ladder_3 = _2496;
                frontier_phi_55_56_ladder_4 = _2494;
                frontier_phi_55_56_ladder_5 = _2492;
            }
            _2605 = frontier_phi_55_56_ladder_5;
            _2607 = frontier_phi_55_56_ladder_4;
            _2609 = frontier_phi_55_56_ladder_3;
            _2611 = frontier_phi_55_56_ladder_2;
            _2613 = frontier_phi_55_56_ladder;
            _2615 = frontier_phi_55_56_ladder_1;
        }
        float _2620 = isnan(1.0) ? _647 : (isnan(_647) ? 1.0 : min(_647, 1.0));
        _2404 = (_2620 * _2611) + _1837;
        _2406 = (_2620 * _2613) + _1839;
        _2408 = (_2620 * _2615) + _1841;
        _2410 = ((_2605 * _631) * _2620) + _2185;
        _2412 = ((_2607 * _633) * _2620) + _2187;
        _2414 = ((_2609 * _634) * _2620) + _2189;
    }
    else
    {
        _2404 = _1837;
        _2406 = _1839;
        _2408 = _1841;
        _2410 = _2185;
        _2412 = _2187;
        _2414 = _2189;
    }
    float _4281 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _4292 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _4303 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    uint _2434 = _222 + 6u;
    float _2442 = _566 / cbSceneParam._m0[86u].x;
    float _2443 = _567 / cbSceneParam._m0[86u].y;
    vec4 _2457 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2442, _2443, (log2((isnan(cbSceneParam._m0[77u].w) ? _500 : (isnan(_500) ? cbSceneParam._m0[77u].w : min(_500, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2459 = _2457.x;
    float _2460 = _2457.y;
    float _2461 = _2457.z;
    float _2462 = _2457.w;
    float _2555;
    float _2557;
    float _2559;
    float _2561;
    if (_500 > cbSceneParam._m0[78u].w)
    {
        float _2517 = isnan(_500) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _500 : min(cbSceneParam._m0[80u].w, _500));
        float _2518 = _2517 / _500;
        float _2529 = _2518 * _551;
        float _2530 = _552 * _2518;
        float _2531 = (-0.0) - _2530;
        float _2533 = _2518 * _553;
        float _2535 = (cbSceneParam._m0[77u].w * _2531) / _2517;
        float _2536 = _2535 + cbSceneParam._m0[79u].w;
        float _2537 = cbSceneParam._m0[79u].w - _2530;
        float _2543 = sqrt(((_2529 * _2529) + (_2530 * _2530)) + (_2533 * _2533));
        float _2546 = (1.0 - (cbSceneParam._m0[77u].w / _2517)) * _2543;
        float _2551 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2553 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2706;
        if (abs((_2531 - _2535) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2706 = ((((_2536 > 0.0) ? exp2(_2551 * _2536) : (2.0 - exp2(_2553 * _2536))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2546;
        }
        else
        {
            float _2666 = 1.0 / cbSceneParam._m0[80u].x;
            float _2667 = isnan(_2537) ? _2536 : (isnan(_2536) ? _2537 : max(_2536, _2537));
            float _2668 = isnan(_2537) ? _2536 : (isnan(_2536) ? _2537 : min(_2536, _2537));
            float _2677 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : min(_2667, 0.0));
            float _2678 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : min(_2668, 0.0));
            _2706 = ((abs(_2543 / _2531) * cbSceneParam._m0[80u].y) * ((((_2677 - _2678) * 2.0) - ((exp2(_2551 * (isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0)))) - exp2(_2551 * (isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0))))) * _2666)) - ((exp2(_2553 * _2677) - exp2(_2553 * _2678)) * _2666))) + (_2546 * cbSceneParam._m0[80u].z);
        }
        vec4 _2708 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2442, _2443, 1.0), 0.0);
        float _2717 = exp2((_2706 * (-1.44269502162933349609375)) * (1.0 - _2708.w));
        float _2718 = log2(_2717);
        float _2734 = log2(_2462);
        _2555 = (exp2(_2734 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2718 * cbSceneParam._m0[78u].x)) * _2708.x) / cbSceneParam._m0[78u].x)) + _2459;
        _2557 = (exp2(_2734 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2718 * cbSceneParam._m0[78u].y)) * _2708.y) / cbSceneParam._m0[78u].y)) + _2460;
        _2559 = (exp2(_2734 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2718 * cbSceneParam._m0[78u].z)) * _2708.z) / cbSceneParam._m0[78u].z)) + _2461;
        _2561 = _2717 * _2462;
    }
    else
    {
        _2555 = _2459;
        _2557 = _2460;
        _2559 = _2461;
        _2561 = _2462;
    }
    float _2573 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2574 = _2573 == 3.0;
    float _2575 = log2(_2561);
    float _2582 = exp2(_2575 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_2404 + ((isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0))) * _647))) + ((_2410 + ((isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))) * _1455)) * cbPerFrame._m0[3u].x));
    float _2583 = exp2(_2575 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_2406 + ((isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0))) * _647))) + ((_2412 + ((isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))) * _1455)) * cbPerFrame._m0[3u].x));
    float _2584 = exp2(_2575 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_2408 + ((isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0))) * _647))) + ((_2414 + ((isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))) * _1455)) * cbPerFrame._m0[3u].x));
    float _2593 = (_2573 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2593 * (_2574 ? _2582 : (_2582 + (cbSceneParam._m0[72u].w * _2555)));
    SV_Target.y = _2593 * (_2574 ? _2583 : (_2583 + (cbSceneParam._m0[72u].w * _2557)));
    SV_Target.z = _2593 * (_2574 ? _2584 : (_2584 + (cbSceneParam._m0[72u].w * _2559)));
    SV_Target.w = cbInstanceData._m0[_2434].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2434].w;
}


