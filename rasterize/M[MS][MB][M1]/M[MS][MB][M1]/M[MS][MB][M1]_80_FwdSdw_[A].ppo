#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1400;
float _4064;
float _4065;
float _4066;
float _4067;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = _251 * NORMAL.x;
    float _253 = _251 * NORMAL.y;
    float _254 = _251 * NORMAL.z;
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4076 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _4087 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _4098 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _345 = _340.x * cbMtdParam._m0[11u].x;
    float _346 = _340.y * cbMtdParam._m0[11u].y;
    float _347 = _340.z * cbMtdParam._m0[11u].z;
    vec4 _366 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _402 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _404 = _402.x;
    float _416 = dot(vec4(_404, _402.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _433 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_404 - _416) * cbMtdParam._m0[24u].y) + _416) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4109 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _434 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _441 = (_434 * ((_366.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _442 = (_434 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _443 = (_434 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    float _447 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _441;
    float _450 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _442;
    float _453 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _443;
    float _460 = ((_441 - _447) * (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0)))) + _447;
    float _461 = ((_442 - _450) * (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0)))) + _450;
    float _462 = ((_443 - _453) * (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) + _453;
    vec4 _475 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _500 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _517 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _519 = _517.x;
    float _520 = _517.y;
    float _521 = _517.z;
    float _530 = ((_500.z - _521) * _434) + _521;
    float _533 = ((((_500.x - _519) * _434) + _519) * 2.0) + (-1.0);
    float _534 = ((((_500.y - _520) * _434) + _520) * 2.0) + (-1.0);
    float _535 = dot(vec2(_533, _534), vec2(_533, _534));
    float _4120 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _540 = sqrt(1.0 - (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))));
    vec4 _562 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _574 = (_533 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_475.x * 2.0) + (-1.0)))) + (((_562.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _575 = (_534 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_475.y * 2.0) + (-1.0)))) + (((_562.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _587 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _589 = _587.x;
    float _590 = 1.0 - _589;
    float _616 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_589 - _590) * cbMtdParam._m0[24u].w) + _590) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4131 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _617 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _625 = ((((cbMtdParam._m0[10u].x - _460) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _617) + _460;
    float _626 = ((((cbMtdParam._m0[10u].y - _461) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _617) + _461;
    float _627 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _462)) * _617) + _462;
    vec4 _639 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _653 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _655 = _653.x;
    float _673 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _302) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _303) + cbTextureTilingScale._m0[9u].w)).x - _655) * _434) + _655;
    float _677 = ((_639.x - _673) * cbMtdParam._m0[19u].z) + _673;
    float _679 = _677 - (_677 * _617);
    float _684 = (((_475.z - _530) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _530;
    float _688 = ((_562.z - _684) * cbMtdParam._m0[19u].w) + _684;
    float _692 = ((cbMtdParam._m0[23u].y - _688) * _617) + _688;
    vec4 _711 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _713 = _711.x;
    float _714 = _711.y;
    float _718 = dot(vec4(cbMtdParam._m0[29u].yzw, 0.0), vec4(_252, _253, _254, 0.0));
    vec4 _733 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _302) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _303) + cbTextureTilingScale._m0[18u].w));
    float _735 = _733.x;
    float _740 = fract(_733.w + cbPerFrame._m0[22u].x);
    float _742 = (1.0 - _740) * _735;
    float _747 = ((_740 + (-1.0)) + _735) * 9.0;
    float _749 = ((_735 + (-1.0)) + _740) * 9.0;
    float _750 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _751 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _765 = (_742 * ((_733.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _750 : (isnan(_750) ? 3.0 : min(_750, 3.0))) * 3.1415927410125732421875);
    float _767 = (_742 * ((_733.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _751 : (isnan(_751) ? 3.0 : min(_751, 3.0))) * 3.1415927410125732421875);
    float _771 = inversesqrt(dot(vec3(_765, _767, 1.0), vec3(_765, _767, 1.0)));
    float _787 = (((((0.5 - _713) + ((_765 * 0.5) * _771)) * _718) + _713) * 2.0) + (-1.0);
    float _788 = (((((0.5 - _714) + ((_771 * 0.5) * _767)) * _718) + _714) * 2.0) + (-1.0);
    float _789 = dot(vec2(_787, _788), vec2(_787, _788));
    float _4162 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _805 = ((((cbMtdParam._m0[22u].z * _574) - _574) + _787) * _617) + _574;
    float _806 = ((((cbMtdParam._m0[22u].z * _575) - _575) + _788) * _617) + _575;
    float _807 = (_617 * (sqrt(1.0 - (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0)))) - _540)) + _540;
    float _809 = cbMtdParam._m0[22u].x + _562.w;
    float _812 = fma(_807, _252, fma(_806, _258 * TANGENT.x, (_244 * _236) * _805));
    float _815 = fma(_807, _253, fma(_806, _258 * TANGENT.y, (_244 * _237) * _805));
    float _818 = fma(_807, _254, fma(_806, _258 * TANGENT.z, (_244 * _238) * _805));
    float _822 = inversesqrt(dot(vec3(_812, _815, _818), vec3(_812, _815, _818)));
    float _823 = _822 * _812;
    float _824 = _822 * _815;
    float _825 = _822 * _818;
    float _4173 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _826 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _4184 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _4195 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _4206 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _4217 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _4228 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _831 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
    float _845 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _885 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _895 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _885);
    float _896 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _885);
    float _897 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _885);
    float _901 = inversesqrt(dot(vec3(_895, _896, _897), vec3(_895, _896, _897)));
    float _902 = _895 * _901;
    float _903 = _896 * _901;
    float _904 = _897 * _901;
    vec4 _909 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _911 = _909.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1082 = sqrt(((_895 * _895) + (_896 * _896)) + (_897 * _897));
        float _1088 = (cbMatDynParam._m0[5u].x * _1082) + cbMatDynParam._m0[5u].y;
        float _4239 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1093 = (cbMatDynParam._m0[5u].z * _1082) + cbMatDynParam._m0[5u].w;
        float _4250 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) - _1089)) + _1089) < ((_911 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _922 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _923 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _941 = fma(_825, cbSceneParam._m0[5u].z, fma(_824, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _823));
    float _944 = fma(_825, cbSceneParam._m0[6u].z, fma(_824, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _823));
    float _947 = fma(_825, cbSceneParam._m0[7u].z, fma(_824, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _823));
    uint _960 = _283 + 9u;
    uint _961 = _960 + uint(cbMatDynParam._m0[0u].w);
    float _967 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0)))) * cbInstanceData._m0[_961].x;
    float _968 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0)))) * cbInstanceData._m0[_961].y;
    float _969 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0)))) * cbInstanceData._m0[_961].z;
    float _4261 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _970 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
    float _4272 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _971 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
    float _4283 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _972 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
    float _973 = 1.0 - _831;
    float _974 = _970 * _973;
    float _975 = _971 * _973;
    float _976 = _972 * _973;
    float _981 = (_970 + (-0.039999999105930328369140625)) * _831;
    float _982 = (_971 + (-0.039999999105930328369140625)) * _831;
    float _983 = (_972 + (-0.039999999105930328369140625)) * _831;
    float _984 = _981 + 0.039999999105930328369140625;
    float _986 = _982 + 0.039999999105930328369140625;
    float _987 = _983 + 0.039999999105930328369140625;
    vec4 _996 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _922, cbSceneParam._m0[86u].y * _923));
    float _1000 = ((isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * TEXCOORD_5.w) * _996.x;
    float _1001 = dot(vec3(_823, _824, _825), vec3(_902, _903, _904));
    float _1004 = _1001 * 2.0;
    float _1008 = (_1004 * _823) - _902;
    float _1009 = (_1004 * _824) - _903;
    float _1010 = (_1004 * _825) - _904;
    float _1014 = abs(dot(vec3(_902, _903, _904), vec3(_823, _824, _825)));
    float _4294 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _1016 = sqrt(_826);
    float _1028 = exp2((_1016 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1016 * 3.0));
    float _1034 = (1.0 - _1028) * ((_1016 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1035 = _1028 * _1016;
    float _1063 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1067 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1071 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1399;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1125 = fma(_1071, cbModelParam._m0[26u].z, fma(_1067, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1063));
        float _1129 = fma(_1071, cbModelParam._m0[27u].z, fma(_1067, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1063));
        float _1133 = fma(_1071, cbModelParam._m0[28u].z, fma(_1067, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1063));
        float _1157 = _1063 + _823;
        float _1158 = _1067 + _824;
        float _1159 = _1071 + _825;
        float _1169 = fma(_1159, cbModelParam._m0[26u].z, fma(_1158, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1157)) - _1125;
        float _1170 = fma(_1159, cbModelParam._m0[27u].z, fma(_1158, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1157)) - _1129;
        float _1171 = fma(_1159, cbModelParam._m0[28u].z, fma(_1158, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1157)) - _1133;
        float _1175 = inversesqrt(dot(vec3(_1169, _1170, _1171), vec3(_1169, _1170, _1171)));
        float _1188 = ((_1175 * _1169) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1125 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1189 = ((_1175 * _1170) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1129 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1190 = ((_1175 * _1171) / cbModelParam._m0[34u].z) + ((((((_1133 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1188, _1189, _1190), 0.0);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1188, _1189, _1190), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1188, _1189, _1190), 0.0);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1188, _1189, _1190), 0.0);
        float _1227 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1193.x + (-0.5));
        float _1229 = _1227 * (_1193.y + (-0.5));
        float _1230 = _1227 * (_1193.z + (-0.5));
        float _1237 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1200.x + (-0.5));
        float _1239 = _1237 * (_1200.y + (-0.5));
        float _1240 = _1237 * (_1200.z + (-0.5));
        float _1247 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1207.x + (-0.5));
        float _1249 = _1247 * (_1207.y + (-0.5));
        float _1250 = _1247 * (_1207.z + (-0.5));
        float _1257 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1214.x + (-0.5));
        float _1259 = _1257 * (_1214.y + (-0.5));
        float _1260 = _1257 * (_1214.z + (-0.5));
        float _1261 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1262 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1263 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1264 = _1228 * 0.5;
        float _1265 = _1238 * 0.5;
        float _1266 = _1248 * 0.5;
        float _1267 = dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266));
        float _1272 = (_1267 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1267);
        float _1281 = (dot(vec3(_823, _824, _825), vec3(_1272 * _1264, _1272 * _1265, _1272 * _1266)) + 1.0) * 0.5;
        float _4320 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1291 = sqrt(((_1265 * _1265) + (_1264 * _1264)) + (_1266 * _1266)) / (_1261 + 9.9999997473787516355514526367188e-06);
        float _4331 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1293 = _1292 * 2.0;
        float _1297 = (1.0 - _1292) / (_1292 + 1.0);
        float _4342 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _1307 = ((((1.0 - _1298) * (_1293 + 2.0)) * exp2(log2(isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_1293 + 1.0))) + _1298) * _1261;
        float _1308 = _1229 * 0.5;
        float _1309 = _1239 * 0.5;
        float _1310 = _1249 * 0.5;
        float _1311 = dot(vec3(_1308, _1309, _1310), vec3(_1308, _1309, _1310));
        float _1316 = (_1311 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1311);
        float _1324 = (dot(vec3(_823, _824, _825), vec3(_1316 * _1308, _1316 * _1309, _1316 * _1310)) + 1.0) * 0.5;
        float _4353 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1333 = sqrt(((_1309 * _1309) + (_1308 * _1308)) + (_1310 * _1310)) / (_1262 + 9.9999997473787516355514526367188e-06);
        float _4364 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _1335 = _1334 * 2.0;
        float _1339 = (1.0 - _1334) / (_1334 + 1.0);
        float _4375 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _1349 = ((((1.0 - _1340) * (_1335 + 2.0)) * exp2(log2(isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_1335 + 1.0))) + _1340) * _1262;
        float _1350 = _1230 * 0.5;
        float _1351 = _1240 * 0.5;
        float _1352 = _1250 * 0.5;
        float _1353 = dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352));
        float _1358 = (_1353 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1353);
        float _1366 = (dot(vec3(_823, _824, _825), vec3(_1358 * _1350, _1358 * _1351, _1358 * _1352)) + 1.0) * 0.5;
        float _4386 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1375 = sqrt(((_1351 * _1351) + (_1350 * _1350)) + (_1352 * _1352)) / (_1263 + 9.9999997473787516355514526367188e-06);
        float _4397 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _1377 = _1376 * 2.0;
        float _1381 = (1.0 - _1376) / (_1376 + 1.0);
        float _4408 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _1391 = ((((1.0 - _1382) * (_1377 + 2.0)) * exp2(log2(isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * (_1377 + 1.0))) + _1382) * _1263;
        _1399 = _1230;
        _1401 = _1229;
        _1402 = _1228;
        _1403 = _1240;
        _1404 = _1239;
        _1405 = _1238;
        _1406 = _1250;
        _1407 = _1249;
        _1408 = _1248;
        _1409 = _1263;
        _1410 = _1262;
        _1411 = _1261;
        _1412 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)));
        _1413 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)));
        _1414 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)));
    }
    else
    {
        _1399 = _1400;
        _1401 = _1400;
        _1402 = _1400;
        _1403 = _1400;
        _1404 = _1400;
        _1405 = _1400;
        _1406 = _1400;
        _1407 = _1400;
        _1408 = _1400;
        _1409 = _1400;
        _1410 = _1400;
        _1411 = _1400;
        _1412 = 0.0;
        _1413 = 0.0;
        _1414 = 0.0;
    }
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1442 = fma(_1071, cbModelParam._m0[30u].z, fma(_1067, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1063));
        float _1446 = fma(_1071, cbModelParam._m0[31u].z, fma(_1067, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1063));
        float _1450 = fma(_1071, cbModelParam._m0[32u].z, fma(_1067, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1063));
        float _1473 = _1063 + _823;
        float _1474 = _1067 + _824;
        float _1475 = _1071 + _825;
        float _1485 = fma(_1475, cbModelParam._m0[30u].z, fma(_1474, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1473)) - _1442;
        float _1486 = fma(_1475, cbModelParam._m0[31u].z, fma(_1474, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1473)) - _1446;
        float _1487 = fma(_1475, cbModelParam._m0[32u].z, fma(_1474, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1473)) - _1450;
        float _1491 = inversesqrt(dot(vec3(_1485, _1486, _1487), vec3(_1485, _1486, _1487)));
        float _1504 = ((_1491 * _1485) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1442 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1505 = ((_1491 * _1486) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1446 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1506 = ((_1491 * _1487) / cbModelParam._m0[35u].z) + ((((((_1450 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1508 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1504, _1505, _1506), 0.0);
        vec4 _1515 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1504, _1505, _1506), 0.0);
        vec4 _1522 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1504, _1505, _1506), 0.0);
        vec4 _1529 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1504, _1505, _1506), 0.0);
        float _1541 = exp2((_1508.w + (-0.5)) * 20.0) * 2.0;
        float _1542 = _1541 * (_1508.x + (-0.5));
        float _1543 = _1541 * (_1508.y + (-0.5));
        float _1544 = _1541 * (_1508.z + (-0.5));
        float _1551 = exp2((_1515.w + (-0.5)) * 20.0) * 2.0;
        float _1552 = _1551 * (_1515.x + (-0.5));
        float _1553 = _1551 * (_1515.y + (-0.5));
        float _1554 = _1551 * (_1515.z + (-0.5));
        float _1561 = exp2((_1522.w + (-0.5)) * 20.0) * 2.0;
        float _1562 = _1561 * (_1522.x + (-0.5));
        float _1563 = _1561 * (_1522.y + (-0.5));
        float _1564 = _1561 * (_1522.z + (-0.5));
        float _1571 = exp2((_1529.w + (-0.5)) * 20.0) * 2.0;
        float _1572 = _1571 * (_1529.x + (-0.5));
        float _1573 = _1571 * (_1529.y + (-0.5));
        float _1574 = _1571 * (_1529.z + (-0.5));
        float _1575 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1576 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1577 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1578 = _1542 * 0.5;
        float _1579 = _1552 * 0.5;
        float _1580 = _1562 * 0.5;
        float _1581 = dot(vec3(_1578, _1579, _1580), vec3(_1578, _1579, _1580));
        float _1586 = (_1581 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1581);
        float _1594 = (dot(vec3(_823, _824, _825), vec3(_1586 * _1578, _1586 * _1579, _1586 * _1580)) + 1.0) * 0.5;
        float _4449 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1603 = sqrt(((_1579 * _1579) + (_1578 * _1578)) + (_1580 * _1580)) / (_1575 + 9.9999997473787516355514526367188e-06);
        float _4460 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _1605 = _1604 * 2.0;
        float _1609 = (1.0 - _1604) / (_1604 + 1.0);
        float _4471 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _1619 = ((((1.0 - _1610) * (_1605 + 2.0)) * exp2(log2(isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_1605 + 1.0))) + _1610) * _1575;
        float _1620 = _1543 * 0.5;
        float _1621 = _1553 * 0.5;
        float _1622 = _1563 * 0.5;
        float _1623 = dot(vec3(_1620, _1621, _1622), vec3(_1620, _1621, _1622));
        float _1628 = (_1623 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1623);
        float _1636 = (dot(vec3(_823, _824, _825), vec3(_1628 * _1620, _1628 * _1621, _1628 * _1622)) + 1.0) * 0.5;
        float _4482 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1645 = sqrt(((_1621 * _1621) + (_1620 * _1620)) + (_1622 * _1622)) / (_1576 + 9.9999997473787516355514526367188e-06);
        float _4493 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1646 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _1647 = _1646 * 2.0;
        float _1651 = (1.0 - _1646) / (_1646 + 1.0);
        float _4504 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _1661 = ((((1.0 - _1652) * (_1647 + 2.0)) * exp2(log2(isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (_1647 + 1.0))) + _1652) * _1576;
        float _1662 = _1544 * 0.5;
        float _1663 = _1554 * 0.5;
        float _1664 = _1564 * 0.5;
        float _1665 = dot(vec3(_1662, _1663, _1664), vec3(_1662, _1663, _1664));
        float _1670 = (_1665 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1665);
        float _1678 = (dot(vec3(_823, _824, _825), vec3(_1670 * _1662, _1670 * _1663, _1670 * _1664)) + 1.0) * 0.5;
        float _4515 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1687 = sqrt(((_1663 * _1663) + (_1662 * _1662)) + (_1664 * _1664)) / (_1577 + 9.9999997473787516355514526367188e-06);
        float _4526 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _1689 = _1688 * 2.0;
        float _1693 = (1.0 - _1688) / (_1688 + 1.0);
        float _4537 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1694 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
        float _1703 = ((((1.0 - _1694) * (_1689 + 2.0)) * exp2(log2(isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * (_1689 + 1.0))) + _1694) * _1577;
        _1711 = _1544;
        _1712 = _1543;
        _1713 = _1542;
        _1714 = _1554;
        _1715 = _1553;
        _1716 = _1552;
        _1717 = _1564;
        _1718 = _1563;
        _1719 = _1562;
        _1720 = _1577;
        _1721 = _1576;
        _1722 = _1575;
        _1723 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)));
        _1724 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)));
        _1725 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)));
    }
    else
    {
        _1711 = _1400;
        _1712 = _1400;
        _1713 = _1400;
        _1714 = _1400;
        _1715 = _1400;
        _1716 = _1400;
        _1717 = _1400;
        _1718 = _1400;
        _1719 = _1400;
        _1720 = _1400;
        _1721 = _1400;
        _1722 = _1400;
        _1723 = 0.0;
        _1724 = 0.0;
        _1725 = 0.0;
    }
    float _1735 = (cbModelParam._m0[1u].x * (_1723 - _1412)) + _1412;
    float _1736 = (cbModelParam._m0[1u].x * (_1724 - _1413)) + _1413;
    float _1737 = (cbModelParam._m0[1u].x * (_1725 - _1414)) + _1414;
    float _1758 = fma(_1737, cbSceneParam._m0[89u].z, fma(_1736, cbSceneParam._m0[89u].y, _1735 * cbSceneParam._m0[89u].x));
    float _1761 = fma(_1737, cbSceneParam._m0[90u].z, fma(_1736, cbSceneParam._m0[90u].y, _1735 * cbSceneParam._m0[90u].x));
    float _1764 = fma(_1737, cbSceneParam._m0[91u].z, fma(_1736, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1735));
    float _1779 = _1008 * 0.5;
    float _1780 = _1009 * 0.5;
    float _1781 = _1010 * 0.5;
    float _1782 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1713, _1716, _1719, _1722));
    float _1785 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1712, _1715, _1718, _1721));
    float _1788 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1711, _1714, _1717, _1720));
    float _1822;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1795 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1399, _1403, _1406, _1409));
        float _1799 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1401, _1404, _1407, _1410));
        float _1803 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1402, _1405, _1408, _1411));
        float _1810 = dot(vec4(cbModelParam._m0[39u]), vec4(_1779, _1780, _1781, 1.0));
        _1822 = dot(vec3(isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0)), isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0)), isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1810) ? 0.0 : (isnan(0.0) ? _1810 : max(0.0, _1810))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1822 = 1.0;
    }
    float _1833;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1824 = dot(vec4(cbModelParam._m0[40u]), vec4(_1779, _1780, _1781, 1.0));
        _1833 = dot(vec3(isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0)), isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0)), isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1824) ? 0.0 : (isnan(0.0) ? _1824 : max(0.0, _1824))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1833 = 1.0;
    }
    float _1837 = (_1833 * cbModelParam._m0[1u].x) + (_1822 * (1.0 - cbModelParam._m0[1u].x));
    float _1847 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _826);
    float _1848 = isnan(_1847) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1847 : min(cbModelParam._m0[25u].z, _1847));
    float _1930;
    float _1932;
    float _1934;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1897 = fma(_1071, cbModelParam._m0[13u].z, fma(_1067, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1063)) + cbModelParam._m0[13u].w;
        float _1901 = fma(_1071, cbModelParam._m0[14u].z, fma(_1067, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1063)) + cbModelParam._m0[14u].w;
        float _1905 = fma(_1071, cbModelParam._m0[15u].z, fma(_1067, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1063)) + cbModelParam._m0[15u].w;
        float _1908 = fma(_1010, cbModelParam._m0[13u].z, fma(_1009, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1008));
        float _1911 = fma(_1010, cbModelParam._m0[14u].z, fma(_1009, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1008));
        float _1914 = fma(_1010, cbModelParam._m0[15u].z, fma(_1009, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1008));
        float _1942;
        if (_1908 > 0.0)
        {
            _1942 = abs((1.0 - _1897) / _1908);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1908 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1897 + 1.0) / _1908);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1942 = frontier_phi_17_15_ladder;
        }
        float _2114;
        if (_1911 > 0.0)
        {
            _2114 = abs((1.0 - _1901) / _1911);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1911 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1901 + 1.0) / _1911);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2114 = frontier_phi_26_22_ladder;
        }
        float _2409;
        if (_1914 > 0.0)
        {
            _2409 = abs((1.0 - _1905) / _1914);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1914 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1905 + 1.0) / _1914);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2409 = frontier_phi_38_33_ladder;
        }
        float _2411 = isnan(_2114) ? _1942 : (isnan(_1942) ? _2114 : min(_1942, _2114));
        float _2412 = isnan(_2409) ? _2411 : (isnan(_2411) ? _2409 : min(_2411, _2409));
        float _2416 = (_2412 * _1908) + _1897;
        float _2417 = (_2412 * _1911) + _1901;
        float _2418 = (_2412 * _1914) + _1905;
        float _2419 = _2412 * 9.9999997473787516355514526367188e-05;
        float _2421 = (-1.0) - _2419;
        float _2423 = _2419 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2418 > _2423) || ((_2418 < _2421) || ((_2417 > _2423) || ((_2417 < _2421) || ((_2416 < _2421) || (_2416 > _2423))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2563 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2418, cbModelParam._m0[9u].z, fma(_2417, cbModelParam._m0[9u].y, _2416 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2418, cbModelParam._m0[10u].z, fma(_2417, cbModelParam._m0[10u].y, _2416 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2418, cbModelParam._m0[11u].z, fma(_2417, cbModelParam._m0[11u].y, _2416 * cbModelParam._m0[11u].x))), _1848);
            frontier_phi_16_38_ladder = _2563.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2563.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2563.x * cbModelParam._m0[1u].y;
        }
        _1930 = frontier_phi_16_38_ladder_2;
        _1932 = frontier_phi_16_38_ladder_1;
        _1934 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1918 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1008, _1009, _1010), _1848);
        _1930 = _1918.x * cbModelParam._m0[1u].y;
        _1932 = _1918.y * cbModelParam._m0[1u].y;
        _1934 = _1918.z * cbModelParam._m0[1u].y;
    }
    float _1938 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _826);
    float _1939 = isnan(_1938) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1938 : min(cbModelParam._m0[25u].w, _1938));
    float _2029;
    float _2031;
    float _2033;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1993 = fma(_1071, cbModelParam._m0[21u].z, fma(_1067, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1063)) + cbModelParam._m0[21u].w;
        float _1997 = fma(_1071, cbModelParam._m0[22u].z, fma(_1067, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1063)) + cbModelParam._m0[22u].w;
        float _2001 = fma(_1071, cbModelParam._m0[23u].z, fma(_1067, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1063)) + cbModelParam._m0[23u].w;
        float _2004 = fma(_1010, cbModelParam._m0[21u].z, fma(_1009, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1008));
        float _2007 = fma(_1010, cbModelParam._m0[22u].z, fma(_1009, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1008));
        float _2010 = fma(_1010, cbModelParam._m0[23u].z, fma(_1009, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1008));
        float _2119;
        if (_2004 > 0.0)
        {
            _2119 = abs((1.0 - _1993) / _2004);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2004 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1993 + 1.0) / _2004);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2119 = frontier_phi_28_24_ladder;
        }
        float _2436;
        if (_2007 > 0.0)
        {
            _2436 = abs((1.0 - _1997) / _2007);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2007 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1997 + 1.0) / _2007);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2436 = frontier_phi_40_35_ladder;
        }
        float _2774;
        if (_2010 > 0.0)
        {
            _2774 = abs((1.0 - _2001) / _2010);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2010 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2001 + 1.0) / _2010);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2774 = frontier_phi_50_47_ladder;
        }
        float _2776 = isnan(_2436) ? _2119 : (isnan(_2119) ? _2436 : min(_2119, _2436));
        float _2777 = isnan(_2774) ? _2776 : (isnan(_2776) ? _2774 : min(_2776, _2774));
        float _2781 = (_2777 * _2004) + _1993;
        float _2782 = (_2777 * _2007) + _1997;
        float _2783 = (_2777 * _2010) + _2001;
        float _2784 = _2777 * 9.9999997473787516355514526367188e-05;
        float _2785 = (-1.0) - _2784;
        float _2787 = _2784 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2783 > _2787) || ((_2783 < _2785) || ((_2782 > _2787) || ((_2782 < _2785) || ((_2781 < _2785) || (_2781 > _2787))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2905 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2783, cbModelParam._m0[17u].z, fma(_2782, cbModelParam._m0[17u].y, _2781 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2783, cbModelParam._m0[18u].z, fma(_2782, cbModelParam._m0[18u].y, _2781 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2783, cbModelParam._m0[19u].z, fma(_2782, cbModelParam._m0[19u].y, _2781 * cbModelParam._m0[19u].x))), _1939);
            frontier_phi_25_50_ladder = _2905.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2905.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2905.x * cbModelParam._m0[1u].z;
        }
        _2029 = frontier_phi_25_50_ladder_2;
        _2031 = frontier_phi_25_50_ladder_1;
        _2033 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2013 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1008, _1009, _1010), _1939);
        _2029 = _2013.x * cbModelParam._m0[1u].z;
        _2031 = _2013.y * cbModelParam._m0[1u].z;
        _2033 = _2013.z * cbModelParam._m0[1u].z;
    }
    float _2046 = (((_1034 * _984) + _1035) * _1000) * ((cbModelParam._m0[1u].w * (_2029 - _1930)) + _1930);
    float _2048 = (((_1034 * _986) + _1035) * _1000) * ((cbModelParam._m0[1u].w * (_2031 - _1932)) + _1932);
    float _2050 = (((_1034 * _987) + _1035) * _1000) * ((cbModelParam._m0[1u].w * (_2033 - _1934)) + _1934);
    float _2053 = fma(_2050, cbSceneParam._m0[89u].z, fma(_2048, cbSceneParam._m0[89u].y, _2046 * cbSceneParam._m0[89u].x));
    float _2056 = fma(_2050, cbSceneParam._m0[90u].z, fma(_2048, cbSceneParam._m0[90u].y, _2046 * cbSceneParam._m0[90u].x));
    float _2059 = fma(_2050, cbSceneParam._m0[91u].z, fma(_2048, cbSceneParam._m0[91u].y, _2046 * cbSceneParam._m0[91u].x));
    float _2093 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2097 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2101 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2105 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2106 = _2093 / _2105;
    float _2107 = _2097 / _2105;
    float _2108 = _2101 / _2105;
    float _2255;
    float _2256;
    float _2257;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2135 = ((uint(_2108 > cbSceneParam._m0[59u].y) + uint(_2108 > cbSceneParam._m0[59u].x)) + uint(_2108 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2136 = _2135 + 43u;
        uint _2144 = _2135 + 44u;
        uint _2152 = _2135 + 45u;
        uint _2160 = _2135 + 46u;
        float _2171 = fma(_2105, cbSceneParam._m0[_2136].w, fma(_2101, cbSceneParam._m0[_2136].z, fma(_2097, cbSceneParam._m0[_2136].y, _2093 * cbSceneParam._m0[_2136].x)));
        float _2175 = fma(_2105, cbSceneParam._m0[_2144].w, fma(_2101, cbSceneParam._m0[_2144].z, fma(_2097, cbSceneParam._m0[_2144].y, _2093 * cbSceneParam._m0[_2144].x)));
        float _2183 = fma(_2105, cbSceneParam._m0[_2160].w, fma(_2101, cbSceneParam._m0[_2160].z, fma(_2097, cbSceneParam._m0[_2160].y, _2093 * cbSceneParam._m0[_2160].x)));
        float _2188 = cbSceneParam._m0[33u].z * _2183;
        float _2190 = cbSceneParam._m0[33u].w * _2183;
        float _2193 = fma(_2105, cbSceneParam._m0[_2152].w, fma(_2101, cbSceneParam._m0[_2152].z, fma(_2097, cbSceneParam._m0[_2152].y, _2093 * cbSceneParam._m0[_2152].x))) / _2183;
        float _2241 = (cbSceneParam._m0[33u].x - sqrt(((_2107 * _2107) + (_2106 * _2106)) + (_2108 * _2108))) * cbSceneParam._m0[33u].y;
        float _4663 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
        float _2248 = (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2188 + _2171) / _2183, (_2190 + _2175) / _2183), _2193), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2190 + _2171) / _2183, (_2175 - _2188) / _2183), _2193), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2171 - _2188) / _2183, (_2175 - _2190) / _2183), _2193), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2171 - _2190) / _2183, (_2188 + _2175) / _2183), _2193), 0.0)).x), vec4(0.25)));
        _2255 = 1.0 - (_2248 * cbSceneParam._m0[34u].x);
        _2256 = 1.0 - (_2248 * cbSceneParam._m0[34u].y);
        _2257 = 1.0 - (_2248 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2255 = 1.0;
        _2256 = 1.0;
        _2257 = 1.0;
    }
    float _2321;
    float _2323;
    float _2325;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2309 = fma(_2105, cbSceneParam._m0[63u].w, fma(_2101, cbSceneParam._m0[63u].z, fma(_2097, cbSceneParam._m0[63u].y, _2093 * cbSceneParam._m0[63u].x)));
        float _2310 = fma(_2105, cbSceneParam._m0[60u].w, fma(_2101, cbSceneParam._m0[60u].z, fma(_2097, cbSceneParam._m0[60u].y, _2093 * cbSceneParam._m0[60u].x))) / _2309;
        float _2311 = fma(_2105, cbSceneParam._m0[61u].w, fma(_2101, cbSceneParam._m0[61u].z, fma(_2097, cbSceneParam._m0[61u].y, _2093 * cbSceneParam._m0[61u].x))) / _2309;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2310 >= cbSceneParam._m0[64u].x) && (_2311 >= cbSceneParam._m0[64u].y)) && (_2310 <= cbSceneParam._m0[64u].z)) && (_2311 <= cbSceneParam._m0[64u].w))
        {
            float _2449 = fma(_2105, cbSceneParam._m0[62u].w, fma(_2101, cbSceneParam._m0[62u].z, fma(_2097, cbSceneParam._m0[62u].y, _2093 * cbSceneParam._m0[62u].x))) / _2309;
            float _2453 = isnan(cbSceneParam._m0[41u].w) ? _2449 : (isnan(_2449) ? cbSceneParam._m0[41u].w : max(_2449, cbSceneParam._m0[41u].w));
            float _2496 = (cbSceneParam._m0[33u].x - sqrt(((_2107 * _2107) + (_2106 * _2106)) + (_2108 * _2108))) * cbSceneParam._m0[33u].y;
            float _4679 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
            float _2503 = (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2310, cbSceneParam._m0[33u].w + _2311), _2453), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2310, _2311 - cbSceneParam._m0[33u].z), _2453), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2310 - cbSceneParam._m0[33u].z, _2311 - cbSceneParam._m0[33u].w), _2453), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2310 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2311), _2453), 0.0)).x), vec4(0.25)));
            float _2507 = 1.0 - (_2503 * cbSceneParam._m0[34u].x);
            float _2508 = 1.0 - (_2503 * cbSceneParam._m0[34u].y);
            float _2509 = 1.0 - (_2503 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2509) ? _2257 : (isnan(_2257) ? _2509 : min(_2257, _2509));
            frontier_phi_37_36_ladder_1 = isnan(_2508) ? _2256 : (isnan(_2256) ? _2508 : min(_2256, _2508));
            frontier_phi_37_36_ladder_2 = isnan(_2507) ? _2255 : (isnan(_2255) ? _2507 : min(_2255, _2507));
        }
        else
        {
            frontier_phi_37_36_ladder = _2257;
            frontier_phi_37_36_ladder_1 = _2256;
            frontier_phi_37_36_ladder_2 = _2255;
        }
        _2321 = frontier_phi_37_36_ladder_2;
        _2323 = frontier_phi_37_36_ladder_1;
        _2325 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2321 = _2255;
        _2323 = _2256;
        _2325 = _2257;
    }
    uvec4 _2330 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2332 = _2330.x * 14u;
    uint _2333 = _2332 + 13u;
    float _2340 = _1000 + (-1.0);
    float _2345 = (cbLight._m0[_2333].x * _2340) + 1.0;
    float _2346 = (cbLight._m0[_2333].y * _2340) + 1.0;
    float _2347 = (cbLight._m0[_2333].z * _2340) + 1.0;
    float _2348 = (cbLight._m0[_2333].w * _2340) + 1.0;
    uint _2349 = _2332 + 5u;
    float _2355 = isnan(1.0) ? _2346 : (isnan(_2346) ? 1.0 : min(_2346, 1.0));
    uint _2359 = _2332 + 4u;
    float _2368 = isnan(1.0) ? _2345 : (isnan(_2345) ? 1.0 : min(_2345, 1.0));
    uint _2372 = _2332 | 1u;
    float _2383 = dot(vec3(cbLight._m0[_2332].xyz), vec3(_823, _824, _825));
    float _2386 = dot(vec3(cbLight._m0[_2372].xyz), vec3(_823, _824, _825));
    float _4715 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _4726 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2391 = (isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0))) * 0.3183098733425140380859375;
    float _2393 = (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0))) * 0.3183098733425140380859375;
    float _2400 = ((cbLight._m0[_2349].x * _2355) * _2393) + (((cbLight._m0[_2359].x * _2321) * _2368) * _2391);
    float _2401 = ((_2355 * cbLight._m0[_2349].y) * _2393) + (((cbLight._m0[_2359].y * _2323) * _2368) * _2391);
    float _2402 = ((_2355 * cbLight._m0[_2349].z) * _2393) + (((cbLight._m0[_2359].z * _2325) * _2368) * _2391);
    uvec4 _2406 = floatBitsToUint(cbLight._m0[_2332 + 12u]);
    bool _2408 = _2406.x == 0u;
    float _2510;
    float _2512;
    float _2514;
    if (_2408)
    {
        _2510 = _2400;
        _2512 = _2401;
        _2514 = _2402;
    }
    else
    {
        uint _2518 = _2332 + 6u;
        float _2534 = (dot(vec3(cbLight._m0[_2332 + 2u].xyz), vec3(_823, _824, _825)) * 0.5) + 0.5;
        float _2535 = _2534 * _2534;
        float _4737 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2536 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
        float _2537 = isnan(1.0) ? _2347 : (isnan(_2347) ? 1.0 : min(_2347, 1.0));
        _2510 = (((cbLight._m0[_2518].x * 0.3183098733425140380859375) * _2536) * _2537) + _2400;
        _2512 = (((cbLight._m0[_2518].y * 0.3183098733425140380859375) * _2536) * _2537) + _2401;
        _2514 = (((cbLight._m0[_2518].z * 0.3183098733425140380859375) * _2536) * _2537) + _2402;
    }
    bool _2517 = _2406.y == 0u;
    float _2572;
    float _2574;
    float _2576;
    if (_2517)
    {
        _2572 = _2510;
        _2574 = _2512;
        _2576 = _2514;
    }
    else
    {
        uint _2745 = _2332 + 7u;
        float _2761 = (dot(vec3(cbLight._m0[_2332 + 3u].xyz), vec3(_823, _824, _825)) * 0.5) + 0.5;
        float _2762 = _2761 * _2761;
        float _4753 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
        float _2763 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
        float _2764 = isnan(1.0) ? _2348 : (isnan(_2348) ? 1.0 : min(_2348, 1.0));
        _2572 = (((cbLight._m0[_2745].x * 0.3183098733425140380859375) * _2763) * _2764) + _2510;
        _2574 = (((cbLight._m0[_2745].y * 0.3183098733425140380859375) * _2763) * _2764) + _2512;
        _2576 = (((cbLight._m0[_2745].z * 0.3183098733425140380859375) * _2763) * _2764) + _2514;
    }
    uint _2579 = _2332 + 8u;
    float _2592 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2332].w)) * _826) * 0.949999988079071044921875);
    float _2593 = _2592 * _2592;
    float _2594 = cbLight._m0[_2332].x + _902;
    float _2595 = cbLight._m0[_2332].y + _903;
    float _2596 = cbLight._m0[_2332].z + _904;
    float _2600 = inversesqrt(dot(vec3(_2594, _2595, _2596), vec3(_2594, _2595, _2596)));
    float _2601 = _2600 * _2594;
    float _2602 = _2600 * _2595;
    float _2603 = _2600 * _2596;
    float _2604 = dot(vec3(_823, _824, _825), vec3(cbLight._m0[_2332].xyz));
    float _4769 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
    float _2607 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
    float _4780 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _2608 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
    float _2609 = dot(vec3(_823, _824, _825), vec3(_2601, _2602, _2603));
    float _4791 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
    float _2612 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
    float _2613 = dot(vec3(cbLight._m0[_2332].xyz), vec3(_2601, _2602, _2603));
    float _4802 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
    float _2617 = _2593 * _2593;
    float _2621 = ((_2612 * _2612) * (_2617 + (-1.0))) + 1.0;
    float _2629 = exp2(log2(1.0 - (isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0)))) * 5.0);
    float _2630 = 0.959999978542327880859375 - _981;
    float _2632 = 0.959999978542327880859375 - _982;
    float _2633 = 0.959999978542327880859375 - _983;
    float _2640 = 1.0 - _2593;
    float _2651 = (0.5 / (((_2608 * ((_2607 * _2640) + _2593)) + 9.9999999392252902907785028219223e-09) + (((_2608 * _2640) + _2593) * _2607))) * _2607;
    float _4813 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
    float _2653 = (isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0))) * (_2617 / ((_2621 * _2621) * 3.141590118408203125));
    uint _2667 = _2332 + 9u;
    float _2678 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2372].w)) * _826) * 0.949999988079071044921875);
    float _2679 = _2678 * _2678;
    float _2680 = cbLight._m0[_2372].x + _902;
    float _2681 = cbLight._m0[_2372].y + _903;
    float _2682 = cbLight._m0[_2372].z + _904;
    float _2686 = inversesqrt(dot(vec3(_2680, _2681, _2682), vec3(_2680, _2681, _2682)));
    float _2687 = _2686 * _2680;
    float _2688 = _2686 * _2681;
    float _2689 = _2686 * _2682;
    float _2690 = dot(vec3(_823, _824, _825), vec3(cbLight._m0[_2372].xyz));
    float _4824 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
    float _2693 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
    float _2694 = dot(vec3(_823, _824, _825), vec3(_2687, _2688, _2689));
    float _4835 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
    float _2697 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
    float _2698 = dot(vec3(cbLight._m0[_2372].xyz), vec3(_2687, _2688, _2689));
    float _4846 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
    float _2702 = _2679 * _2679;
    float _2706 = ((_2697 * _2697) * (_2702 + (-1.0))) + 1.0;
    float _2713 = exp2(log2(1.0 - (isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0)))) * 5.0);
    float _2720 = 1.0 - _2679;
    float _2730 = (0.5 / (((_2608 * ((_2693 * _2720) + _2679)) + 9.9999999392252902907785028219223e-09) + (((_2608 * _2720) + _2679) * _2693))) * _2693;
    float _4857 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
    float _2732 = (isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0))) * (_2702 / ((_2706 * _2706) * 3.141590118408203125));
    float _2742 = (((((_2713 * _2630) + _984) * cbLight._m0[_2667].x) * _2732) * _2355) + ((((cbLight._m0[_2579].x * _2321) * ((_2629 * _2630) + _984)) * _2653) * _2368);
    float _2743 = (((((_2713 * _2632) + _986) * cbLight._m0[_2667].y) * _2732) * _2355) + ((((cbLight._m0[_2579].y * _2323) * ((_2629 * _2632) + _986)) * _2653) * _2368);
    float _2744 = (((((_2713 * _2633) + _987) * cbLight._m0[_2667].z) * _2732) * _2355) + ((((cbLight._m0[_2579].z * _2325) * ((_2629 * _2633) + _987)) * _2653) * _2368);
    float _2800;
    float _2802;
    float _2804;
    if (_2408)
    {
        _2800 = _2742;
        _2802 = _2743;
        _2804 = _2744;
    }
    else
    {
        uint _2806 = _2332 + 2u;
        uint _2810 = _2332 + 10u;
        float _2824 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2806].w)) * _826) * 0.949999988079071044921875);
        float _2825 = _2824 * _2824;
        float _2826 = cbLight._m0[_2806].x + _902;
        float _2827 = cbLight._m0[_2806].y + _903;
        float _2828 = cbLight._m0[_2806].z + _904;
        float _2832 = inversesqrt(dot(vec3(_2826, _2827, _2828), vec3(_2826, _2827, _2828)));
        float _2833 = _2832 * _2826;
        float _2834 = _2832 * _2827;
        float _2835 = _2832 * _2828;
        float _2836 = dot(vec3(_823, _824, _825), vec3(cbLight._m0[_2806].xyz));
        float _4868 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
        float _2839 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
        float _2840 = dot(vec3(_823, _824, _825), vec3(_2833, _2834, _2835));
        float _4879 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
        float _2843 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
        float _2844 = dot(vec3(cbLight._m0[_2806].xyz), vec3(_2833, _2834, _2835));
        float _4890 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
        float _2848 = _2825 * _2825;
        float _2852 = ((_2843 * _2843) * (_2848 + (-1.0))) + 1.0;
        float _2859 = exp2(log2(1.0 - (isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0)))) * 5.0);
        float _2866 = 1.0 - _2825;
        float _2876 = (0.5 / (((_2608 * ((_2839 * _2866) + _2825)) + 9.9999999392252902907785028219223e-09) + (((_2608 * _2866) + _2825) * _2839))) * _2839;
        float _4901 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
        float _2878 = (isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0))) * (_2848 / ((_2852 * _2852) * 3.141590118408203125));
        float _2879 = isnan(1.0) ? _2347 : (isnan(_2347) ? 1.0 : min(_2347, 1.0));
        _2800 = (((((_2859 * _2630) + _984) * cbLight._m0[_2810].x) * _2878) * _2879) + _2742;
        _2802 = (((((_2859 * _2632) + _986) * cbLight._m0[_2810].y) * _2878) * _2879) + _2743;
        _2804 = (((((_2859 * _2633) + _987) * cbLight._m0[_2810].z) * _2878) * _2879) + _2744;
    }
    float _2910;
    float _2912;
    float _2914;
    if (_2517)
    {
        _2910 = _2800;
        _2912 = _2802;
        _2914 = _2804;
    }
    else
    {
        uint _2921 = _2332 + 3u;
        uint _2925 = _2332 + 11u;
        float _2939 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2921].w)) * _826) * 0.949999988079071044921875);
        float _2940 = _2939 * _2939;
        float _2941 = cbLight._m0[_2921].x + _902;
        float _2942 = cbLight._m0[_2921].y + _903;
        float _2943 = cbLight._m0[_2921].z + _904;
        float _2947 = inversesqrt(dot(vec3(_2941, _2942, _2943), vec3(_2941, _2942, _2943)));
        float _2948 = _2947 * _2941;
        float _2949 = _2947 * _2942;
        float _2950 = _2947 * _2943;
        float _2951 = dot(vec3(_823, _824, _825), vec3(cbLight._m0[_2921].xyz));
        float _4917 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
        float _2954 = isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0));
        float _2955 = dot(vec3(_823, _824, _825), vec3(_2948, _2949, _2950));
        float _4928 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
        float _2958 = isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0));
        float _2959 = dot(vec3(cbLight._m0[_2921].xyz), vec3(_2948, _2949, _2950));
        float _4939 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
        float _2963 = _2940 * _2940;
        float _2967 = ((_2958 * _2958) * (_2963 + (-1.0))) + 1.0;
        float _2974 = exp2(log2(1.0 - (isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0)))) * 5.0);
        float _2981 = 1.0 - _2940;
        float _2991 = (0.5 / (((_2608 * ((_2954 * _2981) + _2940)) + 9.9999999392252902907785028219223e-09) + (((_2608 * _2981) + _2940) * _2954))) * _2954;
        float _4950 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
        float _2993 = (isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0))) * (_2963 / ((_2967 * _2967) * 3.141590118408203125));
        float _2994 = isnan(1.0) ? _2348 : (isnan(_2348) ? 1.0 : min(_2348, 1.0));
        _2910 = (((((_2974 * _2630) + _984) * cbLight._m0[_2925].x) * _2993) * _2994) + _2800;
        _2912 = (((((_2974 * _2632) + _986) * cbLight._m0[_2925].y) * _2993) * _2994) + _2802;
        _2914 = (((((_2974 * _2633) + _987) * cbLight._m0[_2925].z) * _2993) * _2994) + _2804;
    }
    float _3060;
    float _3062;
    float _3064;
    float _3066;
    float _3068;
    float _3070;
    if (_2330.y == 0u)
    {
        uvec4 _3015 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3016 = _3015.x;
        uint _3027 = uint((float(_3015.y) * floor(float(uint(cbSceneParam._m0[85u].y * _923) / _3016))) + floor(float(uint(cbSceneParam._m0[85u].x * _922) / _3016)));
        float _3037 = (log2(_2108 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3038 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
        uint _3041 = uint(isnan(14.0) ? _3038 : (isnan(_3038) ? 14.0 : min(_3038, 14.0)));
        uvec4 _3046 = texelFetch(g_lightClusterGridBuffer, int(((_3041 << 2u) + (_3027 << 6u)) >> 2u));
        uint _3047 = _3046.x;
        uint _3048 = _3015.z;
        float _3127;
        float _3129;
        float _3131;
        float _3133;
        float _3135;
        float _3137;
        if (((((1u << ((_3048 >> 4u) & 15u)) + 4294967295u) & _3047) == 0u) || ((_3048 & 240u) == 0u))
        {
            _3127 = 0.0;
            _3129 = 0.0;
            _3131 = 0.0;
            _3133 = 0.0;
            _3135 = 0.0;
            _3137 = 0.0;
        }
        else
        {
            float _3128;
            float _3130;
            float _3132;
            float _3134;
            float _3136;
            float _3138;
            float _3280 = 0.0;
            float _3281 = 0.0;
            float _3282 = 0.0;
            float _3283 = 0.0;
            float _3284 = 0.0;
            float _3285 = 0.0;
            uint _3286 = 0u;
            uint _3295;
            bool _3296;
            for (;;)
            {
                _3295 = texelFetch(g_lightClassification, int((((_3041 << 5u) + (_3027 << 9u)) + (_3286 << 2u)) >> 2u)).x;
                _3296 = _3295 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3296)
                {
                    frontier_phi_71_pred = _3285;
                    frontier_phi_71_pred_1 = _3284;
                    frontier_phi_71_pred_2 = _3283;
                    frontier_phi_71_pred_3 = _3282;
                    frontier_phi_71_pred_4 = _3281;
                    frontier_phi_71_pred_5 = _3280;
                }
                else
                {
                    float _3425;
                    float _3426;
                    float _3427;
                    float _3428;
                    float _3429;
                    float _3430;
                    uint _3431;
                    _3425 = _3280;
                    _3426 = _3281;
                    _3427 = _3282;
                    _3428 = _3283;
                    _3429 = _3284;
                    _3430 = _3285;
                    _3431 = _3295;
                    float _3352;
                    float _3353;
                    float _3354;
                    float _3355;
                    float _3356;
                    float _3357;
                    for (;;)
                    {
                        uint _3435 = uint(findLSB(_3431)) + (_3286 << 5u);
                        uint _3432 = (_3431 + 4294967295u) & _3431;
                        uint _3437 = _3435 * 48u;
                        vec4 _3451 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3437)).x, texelFetch(g_PointLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3437 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3437 + 3u)).x));
                        uint _3457 = (_3435 * 48u) + 4u;
                        vec4 _3470 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3457)).x, texelFetch(g_PointLightRenderingBuffer, int(_3457 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3457 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3457 + 3u)).x));
                        uint _3476 = (_3435 * 48u) + 8u;
                        vec3 _3487 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3476)).x, texelFetch(g_PointLightRenderingBuffer, int(_3476 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3476 + 2u)).x));
                        float _3491 = _3451.x - _2106;
                        float _3492 = _3451.y - _2107;
                        float _3493 = _3451.z - _2108;
                        float _3494 = dot(vec3(_3491, _3492, _3493), vec3(_3491, _3492, _3493));
                        float _3497 = inversesqrt(_3494);
                        float _3498 = _3497 * _3491;
                        float _3499 = _3497 * _3492;
                        float _3500 = _3497 * _3493;
                        float _3501 = dot(vec3(_941, _944, _947), vec3(_3498, _3499, _3500));
                        float _3506 = 1.0 - (_3494 * _3451.w);
                        float _4976 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                        float _3507 = isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0));
                        float _3508 = sqrt(_3494) * _3470.w;
                        float _3511 = 1.39999997615814208984375 / (_3508 + 1.39999997615814208984375);
                        float _3512 = _3511 * _3511;
                        float _3515 = ((1.0 - _3512) * _3501) + _3512;
                        float _3518 = _3508 * _3508;
                        float _3522 = ((isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0))) * _3507) / ((_3518 * 0.699999988079071044921875) + 1.0);
                        float _3526 = (-0.0) - _2106;
                        float _3527 = (-0.0) - _2107;
                        float _3528 = (-0.0) - _2108;
                        float _3532 = inversesqrt(dot(vec3(_3526, _3527, _3528), vec3(_3526, _3527, _3528)));
                        float _3533 = _3532 * _3526;
                        float _3534 = _3532 * _3527;
                        float _3535 = _3532 * _3528;
                        float _3542 = exp2(log2(1.0 / ((_3518 * 3.5) + 5.0)) * 0.25);
                        float _3543 = 1.0 - _1016;
                        float _3550 = sqrt(1.0 - ((1.0 - (_3543 * _3543)) * (1.0 - (_3542 * _3542))));
                        float _3551 = _3550 * _3550;
                        float _3552 = _3551 * _3551;
                        float _3553 = _3533 + _3498;
                        float _3554 = _3534 + _3499;
                        float _3555 = _3535 + _3500;
                        float _3559 = inversesqrt(dot(vec3(_3553, _3554, _3555), vec3(_3553, _3554, _3555)));
                        float _3563 = dot(vec3(_941, _944, _947), vec3(_3533, _3534, _3535));
                        float _4992 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                        float _3566 = isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0));
                        float _3567 = dot(vec3(_941, _944, _947), vec3(_3559 * _3553, _3559 * _3554, _3559 * _3555));
                        float _5003 = isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0));
                        float _3570 = isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0));
                        float _3574 = ((_3570 * _3570) * (_3552 + (-1.0))) + 1.0;
                        float _3575 = _3511 * _3551;
                        float _3576 = _3575 * _3575;
                        float _3579 = ((1.0 - _3576) * _3501) + _3576;
                        float _5014 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                        float _3580 = isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0));
                        float _3581 = 1.0 - _3551;
                        float _3591 = (0.5 / (((_3580 * ((_3566 * _3581) + _3551)) + 9.9999999392252902907785028219223e-09) + (((_3580 * _3581) + _3551) * _3566))) * _3580;
                        float _5025 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                        float _3601 = (((_3552 * 3.1415927410125732421875) * (isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0)))) / ((_3574 * _3574) * ((_3518 * 2.1991131305694580078125) + 3.141590118408203125))) * _3507;
                        _3355 = (_3522 * _3470.x) + _3428;
                        _3356 = (_3522 * _3470.y) + _3429;
                        _3357 = (_3522 * _3470.z) + _3430;
                        _3352 = (_3601 * _3487.x) + _3425;
                        _3353 = (_3601 * _3487.y) + _3426;
                        _3354 = (_3601 * _3487.z) + _3427;
                        if (_3432 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3425 = _3352;
                            _3426 = _3353;
                            _3427 = _3354;
                            _3428 = _3355;
                            _3429 = _3356;
                            _3430 = _3357;
                            _3431 = _3432;
                        }
                    }
                    frontier_phi_71_pred = _3357;
                    frontier_phi_71_pred_1 = _3356;
                    frontier_phi_71_pred_2 = _3355;
                    frontier_phi_71_pred_3 = _3354;
                    frontier_phi_71_pred_4 = _3353;
                    frontier_phi_71_pred_5 = _3352;
                }
                _3138 = frontier_phi_71_pred;
                _3136 = frontier_phi_71_pred_1;
                _3134 = frontier_phi_71_pred_2;
                _3132 = frontier_phi_71_pred_3;
                _3130 = frontier_phi_71_pred_4;
                _3128 = frontier_phi_71_pred_5;
                uint _3287 = _3286 + 1u;
                if (_3287 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3280 = _3128;
                    _3281 = _3130;
                    _3282 = _3132;
                    _3283 = _3134;
                    _3284 = _3136;
                    _3285 = _3138;
                    _3286 = _3287;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3127 = _3128;
            _3129 = _3130;
            _3131 = _3132;
            _3133 = _3134;
            _3135 = _3136;
            _3137 = _3138;
        }
        uvec4 _3141 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3142 = _3141.z;
        uint _3144 = (_3142 >> 8u) & 15u;
        float _3248;
        float _3250;
        float _3252;
        float _3254;
        float _3256;
        float _3258;
        if (((4294967295u << _3144) & _3047) == 0u)
        {
            _3248 = _3127;
            _3250 = _3129;
            _3252 = _3131;
            _3254 = _3133;
            _3256 = _3135;
            _3258 = _3137;
        }
        else
        {
            float _3273 = inversesqrt(dot(vec3(_2106, _2107, _2108), vec3(_2106, _2107, _2108)));
            float _3274 = _3273 * _2106;
            float _3275 = _3273 * _2107;
            float _3276 = _3273 * _2108;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3144 < ((_3142 >> 12u) & 15u))
            {
                float _3249;
                float _3251;
                float _3253;
                float _3255;
                float _3257;
                float _3259;
                float _3408 = _3127;
                float _3409 = _3129;
                float _3410 = _3131;
                float _3411 = _3133;
                float _3412 = _3135;
                float _3413 = _3137;
                uint _3414 = _3144;
                uint _3423;
                bool _3424;
                for (;;)
                {
                    _3423 = texelFetch(g_lightClassification, int((((_3041 << 5u) + (_3027 << 9u)) + (_3414 << 2u)) >> 2u)).x;
                    _3424 = _3423 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3424)
                    {
                        frontier_phi_82_pred = _3413;
                        frontier_phi_82_pred_1 = _3412;
                        frontier_phi_82_pred_2 = _3411;
                        frontier_phi_82_pred_3 = _3410;
                        frontier_phi_82_pred_4 = _3409;
                        frontier_phi_82_pred_5 = _3408;
                    }
                    else
                    {
                        float _3615;
                        float _3616;
                        float _3617;
                        float _3618;
                        float _3619;
                        float _3620;
                        float _3908;
                        float _3909;
                        float _3910;
                        float _3911;
                        float _3912;
                        float _3913;
                        float _3628 = _3408;
                        float _3629 = _3409;
                        float _3630 = _3410;
                        float _3631 = _3411;
                        float _3632 = _3412;
                        float _3633 = _3413;
                        uint _3634 = _3423;
                        uint _3635;
                        vec4 _3660;
                        float _3661;
                        vec4 _3676;
                        vec3 _3688;
                        vec4 _3703;
                        vec4 _3718;
                        float _3764;
                        bool _3765;
                        for (;;)
                        {
                            uint _3645 = ((_3414 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3634));
                            _3635 = (_3634 + 4294967295u) & _3634;
                            uint _3647 = _3645 * 40u;
                            _3660 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3647)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 3u)).x));
                            _3661 = _3660.w;
                            uint _3663 = (_3645 * 40u) + 4u;
                            _3676 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3663)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 3u)).x));
                            uint _3678 = (_3645 * 40u) + 8u;
                            _3688 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3678)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 2u)).x));
                            uint _3690 = (_3645 * 40u) + 16u;
                            _3703 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3690)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 3u)).x));
                            uint _3705 = (_3645 * 40u) + 20u;
                            _3718 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3705)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3705 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3705 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3705 + 3u)).x));
                            uint _3720 = (_3645 * 40u) + 24u;
                            vec4 _3733 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3720)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3720 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3720 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3720 + 3u)).x));
                            uint _3739 = (_3645 * 40u) + 28u;
                            vec4 _3752 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3739)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3739 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3739 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3739 + 3u)).x));
                            _3764 = fma(_2108, _3752.z, fma(_2107, _3752.y, _3752.x * _2106)) + _3752.w;
                            _3765 = !((fma(_2108, _3733.z, fma(_2107, _3733.y, _3733.x * _2106)) + _3733.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3765)
                            {
                                float _3792 = _3660.x - _2106;
                                float _3793 = _3660.y - _2107;
                                float _3794 = _3660.z - _2108;
                                float _3795 = dot(vec3(_3792, _3793, _3794), vec3(_3792, _3793, _3794));
                                float _3798 = inversesqrt(_3795);
                                float _3799 = _3798 * _3792;
                                float _3800 = _3798 * _3793;
                                float _3801 = _3798 * _3794;
                                float _3805 = 1.0 - (_3795 / (_3661 * _3661));
                                float _5036 = isnan(0.0) ? _3805 : (isnan(_3805) ? 0.0 : max(_3805, 0.0));
                                float _3806 = isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0));
                                float _3810 = sqrt(_3795) * _3676.w;
                                float _3812 = 1.39999997615814208984375 / (_3810 + 1.39999997615814208984375);
                                float _3813 = _3812 * _3812;
                                float _3816 = ((1.0 - _3813) * dot(vec3(_3799, _3800, _3801), vec3(_941, _944, _947))) + _3813;
                                float _3819 = _3810 * _3810;
                                float _3823 = (fma(_2108, _3703.z, fma(_2107, _3703.y, _3703.x * _2106)) + _3703.w) / _3764;
                                float _3824 = (fma(_2108, _3718.z, fma(_2107, _3718.y, _3718.x * _2106)) + _3718.w) / _3764;
                                float _3828 = 1.0 - dot(vec2(_3823, _3824), vec2(_3823, _3824));
                                float _5052 = isnan(0.0) ? _3828 : (isnan(_3828) ? 0.0 : max(_3828, 0.0));
                                float _3829 = isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0));
                                float _3830 = _3829 * (((isnan(0.0) ? _3816 : (isnan(_3816) ? 0.0 : max(_3816, 0.0))) * _3806) / ((_3819 * 0.699999988079071044921875) + 1.0));
                                float _3842 = exp2(log2(1.0 / ((_3819 * 3.5) + 5.0)) * 0.25);
                                float _3843 = 1.0 - _1016;
                                float _3850 = sqrt(1.0 - ((1.0 - (_3843 * _3843)) * (1.0 - (_3842 * _3842))));
                                float _3851 = _3850 * _3850;
                                float _3852 = _3851 * _3851;
                                float _3853 = _3799 - _3274;
                                float _3854 = _3800 - _3275;
                                float _3855 = _3801 - _3276;
                                float _3859 = inversesqrt(dot(vec3(_3853, _3854, _3855), vec3(_3853, _3854, _3855)));
                                float _3863 = dot(vec3(_941, _944, _947), vec3((-0.0) - _3274, (-0.0) - _3275, (-0.0) - _3276));
                                float _5063 = isnan(0.0) ? _3863 : (isnan(_3863) ? 0.0 : max(_3863, 0.0));
                                float _3866 = isnan(1.0) ? _5063 : (isnan(_5063) ? 1.0 : min(_5063, 1.0));
                                float _3867 = dot(vec3(_941, _944, _947), vec3(_3859 * _3853, _3859 * _3854, _3859 * _3855));
                                float _5074 = isnan(0.0) ? _3867 : (isnan(_3867) ? 0.0 : max(_3867, 0.0));
                                float _3870 = isnan(1.0) ? _5074 : (isnan(_5074) ? 1.0 : min(_5074, 1.0));
                                float _3874 = ((_3870 * _3870) * (_3852 + (-1.0))) + 1.0;
                                float _3875 = _3812 * _3851;
                                float _3876 = _3875 * _3875;
                                float _3882 = ((1.0 - _3876) * dot(vec3(_941, _944, _947), vec3(_3799, _3800, _3801))) + _3876;
                                float _5085 = isnan(0.0) ? _3882 : (isnan(_3882) ? 0.0 : max(_3882, 0.0));
                                float _3883 = isnan(1.0) ? _5085 : (isnan(_5085) ? 1.0 : min(_5085, 1.0));
                                float _3884 = 1.0 - _3851;
                                float _3894 = (0.5 / (((_3883 * ((_3866 * _3884) + _3851)) + 9.9999999392252902907785028219223e-09) + (((_3883 * _3884) + _3851) * _3866))) * _3883;
                                float _5096 = isnan(0.0) ? _3894 : (isnan(_3894) ? 0.0 : max(_3894, 0.0));
                                float _3904 = (_3829 * _3806) * (((_3852 * 3.1415927410125732421875) * (isnan(1.0) ? _5096 : (isnan(_5096) ? 1.0 : min(_5096, 1.0)))) / ((_3874 * _3874) * ((_3819 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3830 * _3676.z;
                                frontier_phi_88_pred_1 = _3830 * _3676.y;
                                frontier_phi_88_pred_2 = _3830 * _3676.x;
                                frontier_phi_88_pred_3 = _3904 * _3688.z;
                                frontier_phi_88_pred_4 = _3904 * _3688.y;
                                frontier_phi_88_pred_5 = _3904 * _3688.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3913 = frontier_phi_88_pred;
                            _3912 = frontier_phi_88_pred_1;
                            _3911 = frontier_phi_88_pred_2;
                            _3910 = frontier_phi_88_pred_3;
                            _3909 = frontier_phi_88_pred_4;
                            _3908 = frontier_phi_88_pred_5;
                            _3618 = _3911 + _3631;
                            _3619 = _3912 + _3632;
                            _3620 = _3913 + _3633;
                            _3615 = _3908 + _3628;
                            _3616 = _3909 + _3629;
                            _3617 = _3910 + _3630;
                            if (_3635 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3628 = _3615;
                                _3629 = _3616;
                                _3630 = _3617;
                                _3631 = _3618;
                                _3632 = _3619;
                                _3633 = _3620;
                                _3634 = _3635;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3620;
                        frontier_phi_82_pred_1 = _3619;
                        frontier_phi_82_pred_2 = _3618;
                        frontier_phi_82_pred_3 = _3617;
                        frontier_phi_82_pred_4 = _3616;
                        frontier_phi_82_pred_5 = _3615;
                    }
                    _3259 = frontier_phi_82_pred;
                    _3257 = frontier_phi_82_pred_1;
                    _3255 = frontier_phi_82_pred_2;
                    _3253 = frontier_phi_82_pred_3;
                    _3251 = frontier_phi_82_pred_4;
                    _3249 = frontier_phi_82_pred_5;
                    uint _3415 = _3414 + 1u;
                    if (_3415 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3408 = _3249;
                        _3409 = _3251;
                        _3410 = _3253;
                        _3411 = _3255;
                        _3412 = _3257;
                        _3413 = _3259;
                        _3414 = _3415;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3255;
                frontier_phi_63_64_ladder_1 = _3259;
                frontier_phi_63_64_ladder_2 = _3257;
                frontier_phi_63_64_ladder_3 = _3253;
                frontier_phi_63_64_ladder_4 = _3251;
                frontier_phi_63_64_ladder_5 = _3249;
            }
            else
            {
                frontier_phi_63_64_ladder = _3133;
                frontier_phi_63_64_ladder_1 = _3137;
                frontier_phi_63_64_ladder_2 = _3135;
                frontier_phi_63_64_ladder_3 = _3131;
                frontier_phi_63_64_ladder_4 = _3129;
                frontier_phi_63_64_ladder_5 = _3127;
            }
            _3248 = frontier_phi_63_64_ladder_5;
            _3250 = frontier_phi_63_64_ladder_4;
            _3252 = frontier_phi_63_64_ladder_3;
            _3254 = frontier_phi_63_64_ladder;
            _3256 = frontier_phi_63_64_ladder_2;
            _3258 = frontier_phi_63_64_ladder_1;
        }
        float _3263 = isnan(1.0) ? _1000 : (isnan(_1000) ? 1.0 : min(_1000, 1.0));
        _3060 = (_3263 * _3254) + _2572;
        _3062 = (_3263 * _3256) + _2574;
        _3064 = (_3263 * _3258) + _2576;
        _3066 = ((_3248 * _984) * _3263) + _2910;
        _3068 = ((_3250 * _986) * _3263) + _2912;
        _3070 = ((_3252 * _987) * _3263) + _2914;
    }
    else
    {
        _3060 = _2572;
        _3062 = _2574;
        _3064 = _2576;
        _3066 = _2910;
        _3068 = _2912;
        _3070 = _2914;
    }
    float _5112 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _5123 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _5134 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _3087 = ((isnan(1.0) ? _5112 : (isnan(_5112) ? 1.0 : min(_5112, 1.0))) * (_3060 + ((isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))) * _1000))) + ((_3066 + ((isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0))) * _1837)) * cbPerFrame._m0[3u].x);
    float _3088 = ((isnan(1.0) ? _5123 : (isnan(_5123) ? 1.0 : min(_5123, 1.0))) * (_3062 + ((isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))) * _1000))) + ((_3068 + ((isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0))) * _1837)) * cbPerFrame._m0[3u].x);
    float _3089 = ((isnan(1.0) ? _5134 : (isnan(_5134) ? 1.0 : min(_5134, 1.0))) * (_3064 + ((isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))) * _1000))) + ((_3070 + ((isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0))) * _1837)) * cbPerFrame._m0[3u].x);
    uint _3090 = _283 + 6u;
    float _3098 = _922 / cbSceneParam._m0[86u].x;
    float _3099 = _923 / cbSceneParam._m0[86u].y;
    vec4 _3113 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3098, _3099, (log2((isnan(cbSceneParam._m0[77u].w) ? _845 : (isnan(_845) ? cbSceneParam._m0[77u].w : min(_845, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3115 = _3113.x;
    float _3116 = _3113.y;
    float _3117 = _3113.z;
    float _3118 = _3113.w;
    float _3190;
    float _3192;
    float _3194;
    float _3196;
    if (_845 > cbSceneParam._m0[78u].w)
    {
        float _3152 = isnan(_845) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _845 : min(cbSceneParam._m0[80u].w, _845));
        float _3153 = _3152 / _845;
        float _3164 = _3153 * _895;
        float _3165 = _896 * _3153;
        float _3166 = (-0.0) - _3165;
        float _3168 = _3153 * _897;
        float _3170 = (cbSceneParam._m0[77u].w * _3166) / _3152;
        float _3171 = _3170 + cbSceneParam._m0[79u].w;
        float _3172 = cbSceneParam._m0[79u].w - _3165;
        float _3178 = sqrt(((_3164 * _3164) + (_3165 * _3165)) + (_3168 * _3168));
        float _3181 = (1.0 - (cbSceneParam._m0[77u].w / _3152)) * _3178;
        float _3186 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3188 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3365;
        if (abs((_3166 - _3170) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3365 = ((((_3171 > 0.0) ? exp2(_3186 * _3171) : (2.0 - exp2(_3188 * _3171))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3181;
        }
        else
        {
            float _3309 = 1.0 / cbSceneParam._m0[80u].x;
            float _3310 = isnan(_3172) ? _3171 : (isnan(_3171) ? _3172 : max(_3171, _3172));
            float _3311 = isnan(_3172) ? _3171 : (isnan(_3171) ? _3172 : min(_3171, _3172));
            float _3320 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : min(_3310, 0.0));
            float _3321 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : min(_3311, 0.0));
            _3365 = ((abs(_3178 / _3166) * cbSceneParam._m0[80u].y) * ((((_3320 - _3321) * 2.0) - ((exp2(_3186 * (isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0)))) - exp2(_3186 * (isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0))))) * _3309)) - ((exp2(_3188 * _3320) - exp2(_3188 * _3321)) * _3309))) + (_3181 * cbSceneParam._m0[80u].z);
        }
        vec4 _3367 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3098, _3099, 1.0), 0.0);
        float _3376 = exp2((_3365 * (-1.44269502162933349609375)) * (1.0 - _3367.w));
        float _3377 = log2(_3376);
        float _3393 = log2(_3118);
        _3190 = (exp2(_3393 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3377 * cbSceneParam._m0[78u].x)) * _3367.x) / cbSceneParam._m0[78u].x)) + _3115;
        _3192 = (exp2(_3393 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3377 * cbSceneParam._m0[78u].y)) * _3367.y) / cbSceneParam._m0[78u].y)) + _3116;
        _3194 = (exp2(_3393 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3377 * cbSceneParam._m0[78u].z)) * _3367.z) / cbSceneParam._m0[78u].z)) + _3117;
        _3196 = _3376 * _3118;
    }
    else
    {
        _3190 = _3115;
        _3192 = _3116;
        _3194 = _3117;
        _3196 = _3118;
    }
    bool _3403;
    vec4 _3206;
    vec4 _3228;
    float _3230;
    float _3234;
    float _3235;
    float _3236;
    float _3237;
    bool _3247;
    for (;;)
    {
        _3206 = cbMatDynParam._m0[0u];
        float _3208 = roundEven(_3206.y);
        bool _3209 = _3208 == 3.0;
        float _3210 = log2(_3196);
        float _3217 = exp2(_3210 * cbSceneParam._m0[78u].x) * _3087;
        float _3218 = exp2(_3210 * cbSceneParam._m0[78u].y) * _3088;
        float _3219 = exp2(_3210 * cbSceneParam._m0[78u].z) * _3089;
        float _3226 = _911 + (-0.5);
        _3228 = cbMtdParam._m0[1u];
        _3230 = _3228.y * _3226;
        float _3233 = (_3208 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3234 = _3233 * (_3209 ? _3217 : (_3217 + (cbSceneParam._m0[72u].w * _3190)));
        _3235 = _3233 * (_3209 ? _3218 : (_3218 + (cbSceneParam._m0[72u].w * _3192)));
        _3236 = _3233 * (_3209 ? _3219 : (_3219 + (cbSceneParam._m0[72u].w * _3194)));
        _3237 = _3226 * 0.999000012874603271484375;
        _3247 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3247)
        {
            if ((cbInstanceData._m0[_283 + 7u].x + _3237) < 0.5)
            {
                _3403 = true;
                break;
            }
        }
        uint _3344 = _960 + uint(_3206.w);
        if ((cbInstanceData._m0[_3344].w < 1.0) && ((cbInstanceData._m0[_3344].w + _3237) < 0.5))
        {
            _3403 = true;
            break;
        }
        if ((_3230 + 1.0) < _3228.x)
        {
            _3403 = true;
            break;
        }
        _3403 = false;
        break;
    }
    float _3606;
    if (_3403)
    {
        discard_state = true;
        _3606 = 0.0;
    }
    else
    {
        _3606 = cbInstanceData._m0[_3090].w;
    }
    SV_Target.x = _3234;
    SV_Target.y = _3235;
    SV_Target.z = _3236;
    SV_Target.w = _3606;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3090].w;
    discard_exit();
}


