#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1285;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _228 = _227 * _219;
    float _229 = _227 * _220;
    float _230 = _227 * _221;
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = _234 * NORMAL.x;
    float _236 = _234 * NORMAL.y;
    float _237 = _234 * NORMAL.z;
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _242 = _241 * TANGENT.x;
    float _243 = _241 * TANGENT.y;
    float _244 = _241 * TANGENT.z;
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3636 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3647 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3658 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    uint _268 = uint(roundEven(NORMAL.w)) * 13u;
    uint _273 = _268 + 1u;
    uint _277 = _268 + 2u;
    float _286 = sqrt(((cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x)) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x));
    float _287 = _286 * TEXCOORD.z;
    float _288 = _286 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _287) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _288) + cbTextureTilingScale._m0[13u].w));
    vec4 _325 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _330 = _325.x * cbMtdParam._m0[11u].x;
    float _331 = _325.y * cbMtdParam._m0[11u].y;
    float _332 = _325.z * cbMtdParam._m0[11u].z;
    vec4 _351 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _287) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _288) + cbTextureTilingScale._m0[5u].w));
    vec4 _387 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _389 = _387.x;
    float _401 = dot(vec4(_389, _387.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _418 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_389 - _401) * cbMtdParam._m0[24u].y) + _401) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3669 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _419 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
    float _426 = (_419 * ((_351.x * cbMtdParam._m0[12u].x) - _330)) + _330;
    float _427 = (_419 * ((_351.y * cbMtdParam._m0[12u].y) - _331)) + _331;
    float _428 = (_419 * ((_351.z * cbMtdParam._m0[12u].z) - _332)) + _332;
    float _432 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _301.x) * _426;
    float _435 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _301.y) * _427;
    float _438 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _301.z) * _428;
    float _445 = ((_426 - _432) * (isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0)))) + _432;
    float _446 = ((_427 - _435) * (isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0)))) + _435;
    float _447 = ((_428 - _438) * (isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0)))) + _438;
    vec4 _465 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _287) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _288) + cbTextureTilingScale._m0[20u].w));
    vec4 _492 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _287) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _288) + cbTextureTilingScale._m0[4u].w));
    vec4 _509 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _511 = _509.x;
    float _512 = _509.y;
    float _513 = _509.z;
    float _522 = ((_492.z - _513) * _419) + _513;
    float _525 = ((((_492.x - _511) * _419) + _511) * 2.0) + (-1.0);
    float _526 = ((((_492.y - _512) * _419) + _512) * 2.0) + (-1.0);
    float _527 = dot(vec2(_525, _526), vec2(_525, _526));
    float _3680 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _532 = sqrt(1.0 - (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))));
    float _535 = _525 + ((((_465.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _536 = _526 + ((((_465.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _539 = fma(_532, _235, fma(_536, _242, _535 * _228));
    float _542 = fma(_532, _236, fma(_536, _243, _535 * _229));
    float _545 = fma(_532, _237, fma(_536, _244, _535 * _230));
    float _549 = inversesqrt(dot(vec3(_539, _542, _545), vec3(_539, _542, _545)));
    vec4 _565 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _591 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _287) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _288) + cbTextureTilingScale._m0[11u].w));
    float _593 = _591.x;
    float _594 = 1.0 - _593;
    float _598 = ((_593 - _594) * cbMtdParam._m0[24u].z) + _594;
    float _600 = (cbMtdParam._m0[19u].x + dot(vec4(_549 * _539, _549 * _542, _549 * _545, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_598 * cbMtdParam._m0[21u].z);
    float _3691 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _601 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    float _616 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_598 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3702 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _617 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _621 = ((_601 * (cbMtdParam._m0[17u].x - _445)) * _617) + _445;
    float _622 = ((_601 * (cbMtdParam._m0[17u].y - _446)) * _617) + _446;
    float _623 = ((_601 * (cbMtdParam._m0[17u].z - _447)) * _617) + _447;
    vec4 _635 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _649 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _651 = _649.x;
    float _669 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _287) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _288) + cbTextureTilingScale._m0[9u].w)).x - _651) * _419) + _651;
    float _673 = ((_635.x - _669) * cbMtdParam._m0[19u].z) + _669;
    float _676 = _673 - ((_617 * _601) * _673);
    float _681 = (((_465.z - _522) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _522;
    vec4 _694 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _287) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _288) + cbTextureTilingScale._m0[15u].w));
    float _701 = (_694.x * 2.0) + (-1.0);
    float _702 = (_694.y * 2.0) + (-1.0);
    float _703 = dot(vec2(_701, _702), vec2(_701, _702));
    float _3713 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _712 = (((_694.z - _681) * _601) * _617) + _681;
    float _727 = (((cbMtdParam._m0[21u].x * _535) + ((_701 - _535) * _601)) * _617) + _535;
    float _728 = (((cbMtdParam._m0[21u].x * _536) + ((_702 - _536) * _601)) * _617) + _536;
    float _729 = (((sqrt(1.0 - (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0)))) - _532) * _601) * _617) + _532;
    float _731 = cbMtdParam._m0[22u].x + _565.w;
    float _734 = fma(_729, _235, fma(_728, _242, _727 * _228));
    float _737 = fma(_729, _236, fma(_728, _243, _727 * _229));
    float _740 = fma(_729, _237, fma(_728, _244, _727 * _230));
    float _744 = inversesqrt(dot(vec3(_734, _737, _740), vec3(_734, _737, _740)));
    float _745 = _744 * _734;
    float _746 = _744 * _737;
    float _747 = _744 * _740;
    float _3724 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _748 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _3735 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _3746 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _3757 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _3768 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _3779 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _753 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    float _767 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _808 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _818 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _808);
    float _819 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _808);
    float _820 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _808);
    float _824 = inversesqrt(dot(vec3(_818, _819, _820), vec3(_818, _819, _820)));
    float _825 = _818 * _824;
    float _826 = _819 * _824;
    float _827 = _820 * _824;
    float _833 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _834 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _852 = fma(_747, cbSceneParam._m0[5u].z, fma(_746, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _745));
    float _855 = fma(_747, cbSceneParam._m0[6u].z, fma(_746, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _745));
    float _858 = fma(_747, cbSceneParam._m0[7u].z, fma(_746, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _745));
    uint _872 = (_268 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _878 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0)))) * cbInstanceData._m0[_872].x;
    float _879 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0)))) * cbInstanceData._m0[_872].y;
    float _880 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0)))) * cbInstanceData._m0[_872].z;
    float _3790 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _881 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
    float _3801 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _882 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _3812 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _883 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _884 = 1.0 - _753;
    float _885 = _881 * _884;
    float _886 = _882 * _884;
    float _887 = _883 * _884;
    float _892 = (_881 + (-0.039999999105930328369140625)) * _753;
    float _893 = (_882 + (-0.039999999105930328369140625)) * _753;
    float _894 = (_883 + (-0.039999999105930328369140625)) * _753;
    float _895 = _892 + 0.039999999105930328369140625;
    float _897 = _893 + 0.039999999105930328369140625;
    float _898 = _894 + 0.039999999105930328369140625;
    vec4 _907 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _833, cbSceneParam._m0[86u].y * _834));
    float _911 = ((isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * TEXCOORD_5.w) * _907.x;
    float _912 = dot(vec3(_745, _746, _747), vec3(_825, _826, _827));
    float _915 = _912 * 2.0;
    float _919 = (_915 * _745) - _825;
    float _920 = (_915 * _746) - _826;
    float _921 = (_915 * _747) - _827;
    float _925 = abs(dot(vec3(_825, _826, _827), vec3(_745, _746, _747)));
    float _3823 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _927 = sqrt(_748);
    float _940 = exp2((_927 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_927 * 3.0));
    float _946 = (1.0 - _940) * ((_927 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _947 = _940 * _927;
    float _975 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _979 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _983 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1284;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1009 = fma(_983, cbModelParam._m0[26u].z, fma(_979, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _975));
        float _1013 = fma(_983, cbModelParam._m0[27u].z, fma(_979, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _975));
        float _1017 = fma(_983, cbModelParam._m0[28u].z, fma(_979, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _975));
        float _1042 = _975 + _745;
        float _1043 = _979 + _746;
        float _1044 = _983 + _747;
        float _1054 = fma(_1044, cbModelParam._m0[26u].z, fma(_1043, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1042)) - _1009;
        float _1055 = fma(_1044, cbModelParam._m0[27u].z, fma(_1043, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1042)) - _1013;
        float _1056 = fma(_1044, cbModelParam._m0[28u].z, fma(_1043, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1042)) - _1017;
        float _1060 = inversesqrt(dot(vec3(_1054, _1055, _1056), vec3(_1054, _1055, _1056)));
        float _1073 = ((_1060 * _1054) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1009 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1074 = ((_1060 * _1055) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1013 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1075 = ((_1060 * _1056) / cbModelParam._m0[34u].z) + ((((((_1017 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1078 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        vec4 _1085 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        vec4 _1092 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        float _1112 = exp2((_1078.w + (-0.5)) * 20.0) * 2.0;
        float _1113 = _1112 * (_1078.x + (-0.5));
        float _1114 = _1112 * (_1078.y + (-0.5));
        float _1115 = _1112 * (_1078.z + (-0.5));
        float _1122 = exp2((_1085.w + (-0.5)) * 20.0) * 2.0;
        float _1123 = _1122 * (_1085.x + (-0.5));
        float _1124 = _1122 * (_1085.y + (-0.5));
        float _1125 = _1122 * (_1085.z + (-0.5));
        float _1132 = exp2((_1092.w + (-0.5)) * 20.0) * 2.0;
        float _1133 = _1132 * (_1092.x + (-0.5));
        float _1134 = _1132 * (_1092.y + (-0.5));
        float _1135 = _1132 * (_1092.z + (-0.5));
        float _1142 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1143 = _1142 * (_1099.x + (-0.5));
        float _1144 = _1142 * (_1099.y + (-0.5));
        float _1145 = _1142 * (_1099.z + (-0.5));
        float _1146 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1147 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1148 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1149 = _1113 * 0.5;
        float _1150 = _1123 * 0.5;
        float _1151 = _1133 * 0.5;
        float _1152 = dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151));
        float _1157 = (_1152 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1152);
        float _1166 = (dot(vec3(_745, _746, _747), vec3(_1157 * _1149, _1157 * _1150, _1157 * _1151)) + 1.0) * 0.5;
        float _3849 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1176 = sqrt(((_1150 * _1150) + (_1149 * _1149)) + (_1151 * _1151)) / (_1146 + 9.9999997473787516355514526367188e-06);
        float _3860 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1178 = _1177 * 2.0;
        float _1182 = (1.0 - _1177) / (_1177 + 1.0);
        float _3871 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1192 = ((((1.0 - _1183) * (_1178 + 2.0)) * exp2(log2(isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_1178 + 1.0))) + _1183) * _1146;
        float _1193 = _1114 * 0.5;
        float _1194 = _1124 * 0.5;
        float _1195 = _1134 * 0.5;
        float _1196 = dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195));
        float _1201 = (_1196 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1196);
        float _1209 = (dot(vec3(_745, _746, _747), vec3(_1201 * _1193, _1201 * _1194, _1201 * _1195)) + 1.0) * 0.5;
        float _3882 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1218 = sqrt(((_1194 * _1194) + (_1193 * _1193)) + (_1195 * _1195)) / (_1147 + 9.9999997473787516355514526367188e-06);
        float _3893 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1220 = _1219 * 2.0;
        float _1224 = (1.0 - _1219) / (_1219 + 1.0);
        float _3904 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1234 = ((((1.0 - _1225) * (_1220 + 2.0)) * exp2(log2(isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_1220 + 1.0))) + _1225) * _1147;
        float _1235 = _1115 * 0.5;
        float _1236 = _1125 * 0.5;
        float _1237 = _1135 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1251 = (dot(vec3(_745, _746, _747), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _3915 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1260 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1148 + 9.9999997473787516355514526367188e-06);
        float _3926 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1262 = _1261 * 2.0;
        float _1266 = (1.0 - _1261) / (_1261 + 1.0);
        float _3937 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1276 = ((((1.0 - _1267) * (_1262 + 2.0)) * exp2(log2(isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (_1262 + 1.0))) + _1267) * _1148;
        _1284 = _1115;
        _1286 = _1114;
        _1287 = _1113;
        _1288 = _1125;
        _1289 = _1124;
        _1290 = _1123;
        _1291 = _1135;
        _1292 = _1134;
        _1293 = _1133;
        _1294 = _1148;
        _1295 = _1147;
        _1296 = _1146;
        _1297 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0)));
        _1298 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)));
        _1299 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)));
    }
    else
    {
        _1284 = _1285;
        _1286 = _1285;
        _1287 = _1285;
        _1288 = _1285;
        _1289 = _1285;
        _1290 = _1285;
        _1291 = _1285;
        _1292 = _1285;
        _1293 = _1285;
        _1294 = _1285;
        _1295 = _1285;
        _1296 = _1285;
        _1297 = 0.0;
        _1298 = 0.0;
        _1299 = 0.0;
    }
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1324 = fma(_983, cbModelParam._m0[30u].z, fma(_979, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _975));
        float _1328 = fma(_983, cbModelParam._m0[31u].z, fma(_979, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _975));
        float _1332 = fma(_983, cbModelParam._m0[32u].z, fma(_979, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _975));
        float _1355 = _975 + _745;
        float _1356 = _979 + _746;
        float _1357 = _983 + _747;
        float _1367 = fma(_1357, cbModelParam._m0[30u].z, fma(_1356, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1355)) - _1324;
        float _1368 = fma(_1357, cbModelParam._m0[31u].z, fma(_1356, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1355)) - _1328;
        float _1369 = fma(_1357, cbModelParam._m0[32u].z, fma(_1356, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1355)) - _1332;
        float _1373 = inversesqrt(dot(vec3(_1367, _1368, _1369), vec3(_1367, _1368, _1369)));
        float _1386 = ((_1373 * _1367) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1324 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1387 = ((_1373 * _1368) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1328 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1388 = ((_1373 * _1369) / cbModelParam._m0[35u].z) + ((((((_1332 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1390 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1386, _1387, _1388), 0.0);
        vec4 _1397 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1386, _1387, _1388), 0.0);
        vec4 _1404 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1386, _1387, _1388), 0.0);
        vec4 _1411 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1386, _1387, _1388), 0.0);
        float _1423 = exp2((_1390.w + (-0.5)) * 20.0) * 2.0;
        float _1424 = _1423 * (_1390.x + (-0.5));
        float _1425 = _1423 * (_1390.y + (-0.5));
        float _1426 = _1423 * (_1390.z + (-0.5));
        float _1433 = exp2((_1397.w + (-0.5)) * 20.0) * 2.0;
        float _1434 = _1433 * (_1397.x + (-0.5));
        float _1435 = _1433 * (_1397.y + (-0.5));
        float _1436 = _1433 * (_1397.z + (-0.5));
        float _1443 = exp2((_1404.w + (-0.5)) * 20.0) * 2.0;
        float _1444 = _1443 * (_1404.x + (-0.5));
        float _1445 = _1443 * (_1404.y + (-0.5));
        float _1446 = _1443 * (_1404.z + (-0.5));
        float _1453 = exp2((_1411.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1411.x + (-0.5));
        float _1455 = _1453 * (_1411.y + (-0.5));
        float _1456 = _1453 * (_1411.z + (-0.5));
        float _1457 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1458 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1459 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1460 = _1424 * 0.5;
        float _1461 = _1434 * 0.5;
        float _1462 = _1444 * 0.5;
        float _1463 = dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462));
        float _1468 = (_1463 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1463);
        float _1476 = (dot(vec3(_745, _746, _747), vec3(_1468 * _1460, _1468 * _1461, _1468 * _1462)) + 1.0) * 0.5;
        float _3978 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1485 = sqrt(((_1461 * _1461) + (_1460 * _1460)) + (_1462 * _1462)) / (_1457 + 9.9999997473787516355514526367188e-06);
        float _3989 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1487 = _1486 * 2.0;
        float _1491 = (1.0 - _1486) / (_1486 + 1.0);
        float _4000 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1501 = ((((1.0 - _1492) * (_1487 + 2.0)) * exp2(log2(isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_1487 + 1.0))) + _1492) * _1457;
        float _1502 = _1425 * 0.5;
        float _1503 = _1435 * 0.5;
        float _1504 = _1445 * 0.5;
        float _1505 = dot(vec3(_1502, _1503, _1504), vec3(_1502, _1503, _1504));
        float _1510 = (_1505 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1505);
        float _1518 = (dot(vec3(_745, _746, _747), vec3(_1510 * _1502, _1510 * _1503, _1510 * _1504)) + 1.0) * 0.5;
        float _4011 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1527 = sqrt(((_1503 * _1503) + (_1502 * _1502)) + (_1504 * _1504)) / (_1458 + 9.9999997473787516355514526367188e-06);
        float _4022 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1529 = _1528 * 2.0;
        float _1533 = (1.0 - _1528) / (_1528 + 1.0);
        float _4033 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1543 = ((((1.0 - _1534) * (_1529 + 2.0)) * exp2(log2(isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_1529 + 1.0))) + _1534) * _1458;
        float _1544 = _1426 * 0.5;
        float _1545 = _1436 * 0.5;
        float _1546 = _1446 * 0.5;
        float _1547 = dot(vec3(_1544, _1545, _1546), vec3(_1544, _1545, _1546));
        float _1552 = (_1547 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1547);
        float _1560 = (dot(vec3(_745, _746, _747), vec3(_1552 * _1544, _1552 * _1545, _1552 * _1546)) + 1.0) * 0.5;
        float _4044 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1569 = sqrt(((_1545 * _1545) + (_1544 * _1544)) + (_1546 * _1546)) / (_1459 + 9.9999997473787516355514526367188e-06);
        float _4055 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1571 = _1570 * 2.0;
        float _1575 = (1.0 - _1570) / (_1570 + 1.0);
        float _4066 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1585 = ((((1.0 - _1576) * (_1571 + 2.0)) * exp2(log2(isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_1571 + 1.0))) + _1576) * _1459;
        _1593 = _1426;
        _1594 = _1425;
        _1595 = _1424;
        _1596 = _1436;
        _1597 = _1435;
        _1598 = _1434;
        _1599 = _1446;
        _1600 = _1445;
        _1601 = _1444;
        _1602 = _1459;
        _1603 = _1458;
        _1604 = _1457;
        _1605 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)));
        _1606 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)));
        _1607 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0)));
    }
    else
    {
        _1593 = _1285;
        _1594 = _1285;
        _1595 = _1285;
        _1596 = _1285;
        _1597 = _1285;
        _1598 = _1285;
        _1599 = _1285;
        _1600 = _1285;
        _1601 = _1285;
        _1602 = _1285;
        _1603 = _1285;
        _1604 = _1285;
        _1605 = 0.0;
        _1606 = 0.0;
        _1607 = 0.0;
    }
    float _1617 = (cbModelParam._m0[1u].x * (_1605 - _1297)) + _1297;
    float _1618 = (cbModelParam._m0[1u].x * (_1606 - _1298)) + _1298;
    float _1619 = (cbModelParam._m0[1u].x * (_1607 - _1299)) + _1299;
    float _1640 = fma(_1619, cbSceneParam._m0[89u].z, fma(_1618, cbSceneParam._m0[89u].y, _1617 * cbSceneParam._m0[89u].x));
    float _1643 = fma(_1619, cbSceneParam._m0[90u].z, fma(_1618, cbSceneParam._m0[90u].y, _1617 * cbSceneParam._m0[90u].x));
    float _1646 = fma(_1619, cbSceneParam._m0[91u].z, fma(_1618, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1617));
    float _1661 = _919 * 0.5;
    float _1662 = _920 * 0.5;
    float _1663 = _921 * 0.5;
    float _1664 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1595, _1598, _1601, _1604));
    float _1667 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1594, _1597, _1600, _1603));
    float _1670 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1593, _1596, _1599, _1602));
    float _1704;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1677 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1284, _1288, _1291, _1294));
        float _1681 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1286, _1289, _1292, _1295));
        float _1685 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1287, _1290, _1293, _1296));
        float _1692 = dot(vec4(cbModelParam._m0[39u]), vec4(_1661, _1662, _1663, 1.0));
        _1704 = dot(vec3(isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)), isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)), isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1692) ? 0.0 : (isnan(0.0) ? _1692 : max(0.0, _1692))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1704 = 1.0;
    }
    float _1715;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1706 = dot(vec4(cbModelParam._m0[40u]), vec4(_1661, _1662, _1663, 1.0));
        _1715 = dot(vec3(isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0)), isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)), isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1706) ? 0.0 : (isnan(0.0) ? _1706 : max(0.0, _1706))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1715 = 1.0;
    }
    float _1719 = (_1715 * cbModelParam._m0[1u].x) + (_1704 * (1.0 - cbModelParam._m0[1u].x));
    float _1729 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _748);
    float _1730 = isnan(_1729) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1729 : min(cbModelParam._m0[25u].z, _1729));
    float _1811;
    float _1813;
    float _1815;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1778 = fma(_983, cbModelParam._m0[13u].z, fma(_979, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _975)) + cbModelParam._m0[13u].w;
        float _1782 = fma(_983, cbModelParam._m0[14u].z, fma(_979, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _975)) + cbModelParam._m0[14u].w;
        float _1786 = fma(_983, cbModelParam._m0[15u].z, fma(_979, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _975)) + cbModelParam._m0[15u].w;
        float _1789 = fma(_921, cbModelParam._m0[13u].z, fma(_920, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _919));
        float _1792 = fma(_921, cbModelParam._m0[14u].z, fma(_920, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _919));
        float _1795 = fma(_921, cbModelParam._m0[15u].z, fma(_920, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _919));
        float _1823;
        if (_1789 > 0.0)
        {
            _1823 = abs((1.0 - _1778) / _1789);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1778 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1823 = frontier_phi_14_12_ladder;
        }
        float _2047;
        if (_1792 > 0.0)
        {
            _2047 = abs((1.0 - _1782) / _1792);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1792 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1782 + 1.0) / _1792);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2047 = frontier_phi_23_19_ladder;
        }
        float _2304;
        if (_1795 > 0.0)
        {
            _2304 = abs((1.0 - _1786) / _1795);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1795 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1786 + 1.0) / _1795);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2304 = frontier_phi_35_30_ladder;
        }
        float _2306 = isnan(_2047) ? _1823 : (isnan(_1823) ? _2047 : min(_1823, _2047));
        float _2307 = isnan(_2304) ? _2306 : (isnan(_2306) ? _2304 : min(_2306, _2304));
        float _2311 = (_2307 * _1789) + _1778;
        float _2312 = (_2307 * _1792) + _1782;
        float _2313 = (_2307 * _1795) + _1786;
        float _2314 = _2307 * 9.9999997473787516355514526367188e-05;
        float _2316 = (-1.0) - _2314;
        float _2318 = _2314 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2313 > _2318) || ((_2313 < _2316) || ((_2312 > _2318) || ((_2312 < _2316) || ((_2311 < _2316) || (_2311 > _2318))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2441 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2313, cbModelParam._m0[9u].z, fma(_2312, cbModelParam._m0[9u].y, _2311 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2313, cbModelParam._m0[10u].z, fma(_2312, cbModelParam._m0[10u].y, _2311 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2313, cbModelParam._m0[11u].z, fma(_2312, cbModelParam._m0[11u].y, _2311 * cbModelParam._m0[11u].x))), _1730);
            frontier_phi_13_35_ladder = _2441.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2441.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2441.x * cbModelParam._m0[1u].y;
        }
        _1811 = frontier_phi_13_35_ladder_2;
        _1813 = frontier_phi_13_35_ladder_1;
        _1815 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1799 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_919, _920, _921), _1730);
        _1811 = _1799.x * cbModelParam._m0[1u].y;
        _1813 = _1799.y * cbModelParam._m0[1u].y;
        _1815 = _1799.z * cbModelParam._m0[1u].y;
    }
    float _1819 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _748);
    float _1820 = isnan(_1819) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1819 : min(cbModelParam._m0[25u].w, _1819));
    float _1910;
    float _1912;
    float _1914;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1874 = fma(_983, cbModelParam._m0[21u].z, fma(_979, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _975)) + cbModelParam._m0[21u].w;
        float _1878 = fma(_983, cbModelParam._m0[22u].z, fma(_979, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _975)) + cbModelParam._m0[22u].w;
        float _1882 = fma(_983, cbModelParam._m0[23u].z, fma(_979, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _975)) + cbModelParam._m0[23u].w;
        float _1885 = fma(_921, cbModelParam._m0[21u].z, fma(_920, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _919));
        float _1888 = fma(_921, cbModelParam._m0[22u].z, fma(_920, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _919));
        float _1891 = fma(_921, cbModelParam._m0[23u].z, fma(_920, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _919));
        float _2052;
        if (_1885 > 0.0)
        {
            _2052 = abs((1.0 - _1874) / _1885);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1885 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1874 + 1.0) / _1885);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2052 = frontier_phi_25_21_ladder;
        }
        float _2331;
        if (_1888 > 0.0)
        {
            _2331 = abs((1.0 - _1878) / _1888);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1878 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2331 = frontier_phi_37_32_ladder;
        }
        float _2544;
        if (_1891 > 0.0)
        {
            _2544 = abs((1.0 - _1882) / _1891);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1882 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2544 = frontier_phi_46_43_ladder;
        }
        float _2546 = isnan(_2331) ? _2052 : (isnan(_2052) ? _2331 : min(_2052, _2331));
        float _2547 = isnan(_2544) ? _2546 : (isnan(_2546) ? _2544 : min(_2546, _2544));
        float _2551 = (_2547 * _1885) + _1874;
        float _2552 = (_2547 * _1888) + _1878;
        float _2553 = (_2547 * _1891) + _1882;
        float _2554 = _2547 * 9.9999997473787516355514526367188e-05;
        float _2555 = (-1.0) - _2554;
        float _2557 = _2554 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2553 > _2557) || ((_2553 < _2555) || ((_2552 > _2557) || ((_2552 < _2555) || ((_2551 < _2555) || (_2551 > _2557))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2752 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2553, cbModelParam._m0[17u].z, fma(_2552, cbModelParam._m0[17u].y, _2551 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2553, cbModelParam._m0[18u].z, fma(_2552, cbModelParam._m0[18u].y, _2551 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2553, cbModelParam._m0[19u].z, fma(_2552, cbModelParam._m0[19u].y, _2551 * cbModelParam._m0[19u].x))), _1820);
            frontier_phi_22_46_ladder = _2752.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2752.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2752.x * cbModelParam._m0[1u].z;
        }
        _1910 = frontier_phi_22_46_ladder_2;
        _1912 = frontier_phi_22_46_ladder_1;
        _1914 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1894 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_919, _920, _921), _1820);
        _1910 = _1894.x * cbModelParam._m0[1u].z;
        _1912 = _1894.y * cbModelParam._m0[1u].z;
        _1914 = _1894.z * cbModelParam._m0[1u].z;
    }
    float _1927 = (((_946 * _895) + _947) * _911) * ((cbModelParam._m0[1u].w * (_1910 - _1811)) + _1811);
    float _1929 = (((_946 * _897) + _947) * _911) * ((cbModelParam._m0[1u].w * (_1912 - _1813)) + _1813);
    float _1931 = (((_946 * _898) + _947) * _911) * ((cbModelParam._m0[1u].w * (_1914 - _1815)) + _1815);
    float _1934 = fma(_1931, cbSceneParam._m0[89u].z, fma(_1929, cbSceneParam._m0[89u].y, _1927 * cbSceneParam._m0[89u].x));
    float _1937 = fma(_1931, cbSceneParam._m0[90u].z, fma(_1929, cbSceneParam._m0[90u].y, _1927 * cbSceneParam._m0[90u].x));
    float _1940 = fma(_1931, cbSceneParam._m0[91u].z, fma(_1929, cbSceneParam._m0[91u].y, _1927 * cbSceneParam._m0[91u].x));
    vec4 _1948 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_833, _834));
    float _1950 = _1948.w;
    float _1962 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1950);
    float _1963 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1950);
    float _1964 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1950);
    uvec4 _1968 = floatBitsToUint(cbInstanceData._m0[_268 + 5u]);
    uint _1970 = _1968.x * 14u;
    uint _1971 = _1970 + 13u;
    float _1978 = _911 + (-1.0);
    float _1983 = (cbLight._m0[_1971].x * _1978) + 1.0;
    float _1984 = (cbLight._m0[_1971].y * _1978) + 1.0;
    float _1985 = (cbLight._m0[_1971].z * _1978) + 1.0;
    float _1986 = (cbLight._m0[_1971].w * _1978) + 1.0;
    uint _1987 = _1970 + 5u;
    float _1993 = isnan(1.0) ? _1984 : (isnan(_1984) ? 1.0 : min(_1984, 1.0));
    uint _1997 = _1970 + 4u;
    float _2006 = isnan(1.0) ? _1983 : (isnan(_1983) ? 1.0 : min(_1983, 1.0));
    uint _2010 = _1970 | 1u;
    float _2021 = dot(vec3(cbLight._m0[_1970].xyz), vec3(_745, _746, _747));
    float _2024 = dot(vec3(cbLight._m0[_2010].xyz), vec3(_745, _746, _747));
    float _4202 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _4213 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2029 = (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * 0.3183098733425140380859375;
    float _2031 = (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * 0.3183098733425140380859375;
    float _2038 = ((cbLight._m0[_1987].x * _1993) * _2031) + (((cbLight._m0[_1997].x * _1962) * _2006) * _2029);
    float _2039 = ((_1993 * cbLight._m0[_1987].y) * _2031) + (((cbLight._m0[_1997].y * _1963) * _2006) * _2029);
    float _2040 = ((_1993 * cbLight._m0[_1987].z) * _2031) + (((cbLight._m0[_1997].z * _1964) * _2006) * _2029);
    uvec4 _2044 = floatBitsToUint(cbLight._m0[_1970 + 12u]);
    bool _2046 = _2044.x == 0u;
    float _2057;
    float _2059;
    float _2061;
    if (_2046)
    {
        _2057 = _2038;
        _2059 = _2039;
        _2061 = _2040;
    }
    else
    {
        uint _2065 = _1970 + 6u;
        float _2081 = (dot(vec3(cbLight._m0[_1970 + 2u].xyz), vec3(_745, _746, _747)) * 0.5) + 0.5;
        float _2082 = _2081 * _2081;
        float _4224 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
        float _2083 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _2084 = isnan(1.0) ? _1985 : (isnan(_1985) ? 1.0 : min(_1985, 1.0));
        _2057 = (((cbLight._m0[_2065].x * 0.3183098733425140380859375) * _2083) * _2084) + _2038;
        _2059 = (((cbLight._m0[_2065].y * 0.3183098733425140380859375) * _2083) * _2084) + _2039;
        _2061 = (((cbLight._m0[_2065].z * 0.3183098733425140380859375) * _2083) * _2084) + _2040;
    }
    bool _2064 = _2044.y == 0u;
    float _2102;
    float _2104;
    float _2106;
    if (_2064)
    {
        _2102 = _2057;
        _2104 = _2059;
        _2106 = _2061;
    }
    else
    {
        uint _2275 = _1970 + 7u;
        float _2291 = (dot(vec3(cbLight._m0[_1970 + 3u].xyz), vec3(_745, _746, _747)) * 0.5) + 0.5;
        float _2292 = _2291 * _2291;
        float _4240 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
        float _2293 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _2294 = isnan(1.0) ? _1986 : (isnan(_1986) ? 1.0 : min(_1986, 1.0));
        _2102 = (((cbLight._m0[_2275].x * 0.3183098733425140380859375) * _2293) * _2294) + _2057;
        _2104 = (((cbLight._m0[_2275].y * 0.3183098733425140380859375) * _2293) * _2294) + _2059;
        _2106 = (((cbLight._m0[_2275].z * 0.3183098733425140380859375) * _2293) * _2294) + _2061;
    }
    uint _2109 = _1970 + 8u;
    float _2122 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1970].w)) * _748) * 0.949999988079071044921875);
    float _2123 = _2122 * _2122;
    float _2124 = cbLight._m0[_1970].x + _825;
    float _2125 = cbLight._m0[_1970].y + _826;
    float _2126 = cbLight._m0[_1970].z + _827;
    float _2130 = inversesqrt(dot(vec3(_2124, _2125, _2126), vec3(_2124, _2125, _2126)));
    float _2131 = _2130 * _2124;
    float _2132 = _2130 * _2125;
    float _2133 = _2130 * _2126;
    float _2134 = dot(vec3(_745, _746, _747), vec3(cbLight._m0[_1970].xyz));
    float _4256 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2137 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
    float _4267 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _2138 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
    float _2139 = dot(vec3(_745, _746, _747), vec3(_2131, _2132, _2133));
    float _4278 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _2142 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
    float _2143 = dot(vec3(cbLight._m0[_1970].xyz), vec3(_2131, _2132, _2133));
    float _4289 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2147 = _2123 * _2123;
    float _2151 = ((_2142 * _2142) * (_2147 + (-1.0))) + 1.0;
    float _2159 = exp2(log2(1.0 - (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0)))) * 5.0);
    float _2160 = 0.959999978542327880859375 - _892;
    float _2162 = 0.959999978542327880859375 - _893;
    float _2163 = 0.959999978542327880859375 - _894;
    float _2170 = 1.0 - _2123;
    float _2181 = (0.5 / (((_2138 * ((_2137 * _2170) + _2123)) + 9.9999999392252902907785028219223e-09) + (((_2138 * _2170) + _2123) * _2137))) * _2137;
    float _4300 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2183 = (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_2147 / ((_2151 * _2151) * 3.141590118408203125));
    uint _2197 = _1970 + 9u;
    float _2208 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2010].w)) * _748) * 0.949999988079071044921875);
    float _2209 = _2208 * _2208;
    float _2210 = cbLight._m0[_2010].x + _825;
    float _2211 = cbLight._m0[_2010].y + _826;
    float _2212 = cbLight._m0[_2010].z + _827;
    float _2216 = inversesqrt(dot(vec3(_2210, _2211, _2212), vec3(_2210, _2211, _2212)));
    float _2217 = _2216 * _2210;
    float _2218 = _2216 * _2211;
    float _2219 = _2216 * _2212;
    float _2220 = dot(vec3(_745, _746, _747), vec3(cbLight._m0[_2010].xyz));
    float _4311 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2223 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
    float _2224 = dot(vec3(_745, _746, _747), vec3(_2217, _2218, _2219));
    float _4322 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2227 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
    float _2228 = dot(vec3(cbLight._m0[_2010].xyz), vec3(_2217, _2218, _2219));
    float _4333 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2232 = _2209 * _2209;
    float _2236 = ((_2227 * _2227) * (_2232 + (-1.0))) + 1.0;
    float _2243 = exp2(log2(1.0 - (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0)))) * 5.0);
    float _2250 = 1.0 - _2209;
    float _2260 = (0.5 / (((_2138 * ((_2223 * _2250) + _2209)) + 9.9999999392252902907785028219223e-09) + (((_2138 * _2250) + _2209) * _2223))) * _2223;
    float _4344 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2262 = (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (_2232 / ((_2236 * _2236) * 3.141590118408203125));
    float _2272 = (((((_2243 * _2160) + _895) * cbLight._m0[_2197].x) * _2262) * _1993) + ((((cbLight._m0[_2109].x * _1962) * ((_2159 * _2160) + _895)) * _2183) * _2006);
    float _2273 = (((((_2243 * _2162) + _897) * cbLight._m0[_2197].y) * _2262) * _1993) + ((((cbLight._m0[_2109].y * _1963) * ((_2159 * _2162) + _897)) * _2183) * _2006);
    float _2274 = (((((_2243 * _2163) + _898) * cbLight._m0[_2197].z) * _2262) * _1993) + ((((cbLight._m0[_2109].z * _1964) * ((_2159 * _2163) + _898)) * _2183) * _2006);
    float _2336;
    float _2338;
    float _2340;
    if (_2046)
    {
        _2336 = _2272;
        _2338 = _2273;
        _2340 = _2274;
    }
    else
    {
        uint _2342 = _1970 + 2u;
        uint _2346 = _1970 + 10u;
        float _2360 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2342].w)) * _748) * 0.949999988079071044921875);
        float _2361 = _2360 * _2360;
        float _2362 = cbLight._m0[_2342].x + _825;
        float _2363 = cbLight._m0[_2342].y + _826;
        float _2364 = cbLight._m0[_2342].z + _827;
        float _2368 = inversesqrt(dot(vec3(_2362, _2363, _2364), vec3(_2362, _2363, _2364)));
        float _2369 = _2368 * _2362;
        float _2370 = _2368 * _2363;
        float _2371 = _2368 * _2364;
        float _2372 = dot(vec3(_745, _746, _747), vec3(cbLight._m0[_2342].xyz));
        float _4355 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        float _2375 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _2376 = dot(vec3(_745, _746, _747), vec3(_2369, _2370, _2371));
        float _4366 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        float _2379 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _2380 = dot(vec3(cbLight._m0[_2342].xyz), vec3(_2369, _2370, _2371));
        float _4377 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2384 = _2361 * _2361;
        float _2388 = ((_2379 * _2379) * (_2384 + (-1.0))) + 1.0;
        float _2395 = exp2(log2(1.0 - (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0)))) * 5.0);
        float _2402 = 1.0 - _2361;
        float _2412 = (0.5 / (((_2138 * ((_2375 * _2402) + _2361)) + 9.9999999392252902907785028219223e-09) + (((_2138 * _2402) + _2361) * _2375))) * _2375;
        float _4388 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2414 = (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_2384 / ((_2388 * _2388) * 3.141590118408203125));
        float _2415 = isnan(1.0) ? _1985 : (isnan(_1985) ? 1.0 : min(_1985, 1.0));
        _2336 = (((((_2395 * _2160) + _895) * cbLight._m0[_2346].x) * _2414) * _2415) + _2272;
        _2338 = (((((_2395 * _2162) + _897) * cbLight._m0[_2346].y) * _2414) * _2415) + _2273;
        _2340 = (((((_2395 * _2163) + _898) * cbLight._m0[_2346].z) * _2414) * _2415) + _2274;
    }
    float _2450;
    float _2452;
    float _2454;
    if (_2064)
    {
        _2450 = _2336;
        _2452 = _2338;
        _2454 = _2340;
    }
    else
    {
        uint _2461 = _1970 + 3u;
        uint _2465 = _1970 + 11u;
        float _2479 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2461].w)) * _748) * 0.949999988079071044921875);
        float _2480 = _2479 * _2479;
        float _2481 = cbLight._m0[_2461].x + _825;
        float _2482 = cbLight._m0[_2461].y + _826;
        float _2483 = cbLight._m0[_2461].z + _827;
        float _2487 = inversesqrt(dot(vec3(_2481, _2482, _2483), vec3(_2481, _2482, _2483)));
        float _2488 = _2487 * _2481;
        float _2489 = _2487 * _2482;
        float _2490 = _2487 * _2483;
        float _2491 = dot(vec3(_745, _746, _747), vec3(cbLight._m0[_2461].xyz));
        float _4404 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2494 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _2495 = dot(vec3(_745, _746, _747), vec3(_2488, _2489, _2490));
        float _4415 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2498 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _2499 = dot(vec3(cbLight._m0[_2461].xyz), vec3(_2488, _2489, _2490));
        float _4426 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2503 = _2480 * _2480;
        float _2507 = ((_2498 * _2498) * (_2503 + (-1.0))) + 1.0;
        float _2514 = exp2(log2(1.0 - (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0)))) * 5.0);
        float _2521 = 1.0 - _2480;
        float _2531 = (0.5 / (((_2138 * ((_2494 * _2521) + _2480)) + 9.9999999392252902907785028219223e-09) + (((_2138 * _2521) + _2480) * _2494))) * _2494;
        float _4437 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        float _2533 = (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_2503 / ((_2507 * _2507) * 3.141590118408203125));
        float _2534 = isnan(1.0) ? _1986 : (isnan(_1986) ? 1.0 : min(_1986, 1.0));
        _2450 = (((((_2514 * _2160) + _895) * cbLight._m0[_2465].x) * _2533) * _2534) + _2336;
        _2452 = (((((_2514 * _2162) + _897) * cbLight._m0[_2465].y) * _2533) * _2534) + _2338;
        _2454 = (((((_2514 * _2163) + _898) * cbLight._m0[_2465].z) * _2533) * _2534) + _2340;
    }
    float _2669;
    float _2671;
    float _2673;
    float _2675;
    float _2677;
    float _2679;
    if (_1968.y == 0u)
    {
        float _2609 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2610 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2609;
        float _2611 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2609;
        float _2612 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2609;
        uvec4 _2624 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2625 = _2624.x;
        uint _2636 = uint((float(_2624.y) * floor(float(uint(cbSceneParam._m0[85u].y * _834) / _2625))) + floor(float(uint(cbSceneParam._m0[85u].x * _833) / _2625)));
        float _2646 = (log2(_2612 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2647 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        uint _2650 = uint(isnan(14.0) ? _2647 : (isnan(_2647) ? 14.0 : min(_2647, 14.0)));
        uvec4 _2655 = texelFetch(g_lightClusterGridBuffer, int(((_2650 << 2u) + (_2636 << 6u)) >> 2u));
        uint _2656 = _2655.x;
        uint _2657 = _2624.z;
        float _2757;
        float _2759;
        float _2761;
        float _2763;
        float _2765;
        float _2767;
        if (((((1u << ((_2657 >> 4u) & 15u)) + 4294967295u) & _2656) == 0u) || ((_2657 & 240u) == 0u))
        {
            _2757 = 0.0;
            _2759 = 0.0;
            _2761 = 0.0;
            _2763 = 0.0;
            _2765 = 0.0;
            _2767 = 0.0;
        }
        else
        {
            float _2758;
            float _2760;
            float _2762;
            float _2764;
            float _2766;
            float _2768;
            float _2902 = 0.0;
            float _2903 = 0.0;
            float _2904 = 0.0;
            float _2905 = 0.0;
            float _2906 = 0.0;
            float _2907 = 0.0;
            uint _2908 = 0u;
            uint _2917;
            bool _2918;
            for (;;)
            {
                _2917 = texelFetch(g_lightClassification, int((((_2650 << 5u) + (_2636 << 9u)) + (_2908 << 2u)) >> 2u)).x;
                _2918 = _2917 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2918)
                {
                    frontier_phi_61_pred = _2902;
                    frontier_phi_61_pred_1 = _2907;
                    frontier_phi_61_pred_2 = _2906;
                    frontier_phi_61_pred_3 = _2905;
                    frontier_phi_61_pred_4 = _2904;
                    frontier_phi_61_pred_5 = _2903;
                }
                else
                {
                    float _3026;
                    float _3027;
                    float _3028;
                    float _3029;
                    float _3030;
                    float _3031;
                    uint _3032;
                    _3026 = _2902;
                    _3027 = _2903;
                    _3028 = _2904;
                    _3029 = _2905;
                    _3030 = _2906;
                    _3031 = _2907;
                    _3032 = _2917;
                    float _2958;
                    float _2959;
                    float _2960;
                    float _2961;
                    float _2962;
                    float _2963;
                    for (;;)
                    {
                        uint _3036 = uint(findLSB(_3032)) + (_2908 << 5u);
                        uint _3033 = (_3032 + 4294967295u) & _3032;
                        uint _3038 = _3036 * 48u;
                        vec4 _3052 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3038)).x, texelFetch(g_PointLightRenderingBuffer, int(_3038 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3038 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3038 + 3u)).x));
                        uint _3058 = (_3036 * 48u) + 4u;
                        vec4 _3071 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3058)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 3u)).x));
                        uint _3077 = (_3036 * 48u) + 8u;
                        vec3 _3088 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3077)).x, texelFetch(g_PointLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3077 + 2u)).x));
                        float _3092 = _3052.x - _2610;
                        float _3093 = _3052.y - _2611;
                        float _3094 = _3052.z - _2612;
                        float _3095 = dot(vec3(_3092, _3093, _3094), vec3(_3092, _3093, _3094));
                        float _3098 = inversesqrt(_3095);
                        float _3099 = _3098 * _3092;
                        float _3100 = _3098 * _3093;
                        float _3101 = _3098 * _3094;
                        float _3102 = dot(vec3(_852, _855, _858), vec3(_3099, _3100, _3101));
                        float _3107 = 1.0 - (_3095 * _3052.w);
                        float _4463 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
                        float _3108 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
                        float _3109 = sqrt(_3095) * _3071.w;
                        float _3112 = 1.39999997615814208984375 / (_3109 + 1.39999997615814208984375);
                        float _3113 = _3112 * _3112;
                        float _3116 = ((1.0 - _3113) * _3102) + _3113;
                        float _3119 = _3109 * _3109;
                        float _3123 = ((isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0))) * _3108) / ((_3119 * 0.699999988079071044921875) + 1.0);
                        float _3127 = (-0.0) - _2610;
                        float _3128 = (-0.0) - _2611;
                        float _3129 = (-0.0) - _2612;
                        float _3133 = inversesqrt(dot(vec3(_3127, _3128, _3129), vec3(_3127, _3128, _3129)));
                        float _3134 = _3133 * _3127;
                        float _3135 = _3133 * _3128;
                        float _3136 = _3133 * _3129;
                        float _3144 = exp2(log2(1.0 / ((_3119 * 3.5) + 5.0)) * 0.25);
                        float _3145 = 1.0 - _927;
                        float _3152 = sqrt(1.0 - ((1.0 - (_3145 * _3145)) * (1.0 - (_3144 * _3144))));
                        float _3153 = _3152 * _3152;
                        float _3154 = _3153 * _3153;
                        float _3155 = _3134 + _3099;
                        float _3156 = _3135 + _3100;
                        float _3157 = _3136 + _3101;
                        float _3161 = inversesqrt(dot(vec3(_3155, _3156, _3157), vec3(_3155, _3156, _3157)));
                        float _3165 = dot(vec3(_852, _855, _858), vec3(_3134, _3135, _3136));
                        float _4479 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                        float _3168 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
                        float _3169 = dot(vec3(_852, _855, _858), vec3(_3161 * _3155, _3161 * _3156, _3161 * _3157));
                        float _4490 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                        float _3172 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
                        float _3176 = ((_3172 * _3172) * (_3154 + (-1.0))) + 1.0;
                        float _3177 = _3112 * _3153;
                        float _3178 = _3177 * _3177;
                        float _3181 = ((1.0 - _3178) * _3102) + _3178;
                        float _4501 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                        float _3182 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
                        float _3183 = 1.0 - _3153;
                        float _3193 = (0.5 / (((_3182 * ((_3168 * _3183) + _3153)) + 9.9999999392252902907785028219223e-09) + (((_3182 * _3183) + _3153) * _3168))) * _3182;
                        float _4512 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                        float _3204 = (((_3154 * 3.1415927410125732421875) * (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0)))) / ((_3176 * _3176) * ((_3119 * 2.1991131305694580078125) + 3.141590118408203125))) * _3108;
                        _2961 = (_3123 * _3071.x) + _3029;
                        _2962 = (_3123 * _3071.y) + _3030;
                        _2963 = (_3123 * _3071.z) + _3031;
                        _2958 = (_3204 * _3088.x) + _3026;
                        _2959 = (_3204 * _3088.y) + _3027;
                        _2960 = (_3204 * _3088.z) + _3028;
                        if (_3033 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3026 = _2958;
                            _3027 = _2959;
                            _3028 = _2960;
                            _3029 = _2961;
                            _3030 = _2962;
                            _3031 = _2963;
                            _3032 = _3033;
                        }
                    }
                    frontier_phi_61_pred = _2958;
                    frontier_phi_61_pred_1 = _2963;
                    frontier_phi_61_pred_2 = _2962;
                    frontier_phi_61_pred_3 = _2961;
                    frontier_phi_61_pred_4 = _2960;
                    frontier_phi_61_pred_5 = _2959;
                }
                _2758 = frontier_phi_61_pred;
                _2768 = frontier_phi_61_pred_1;
                _2766 = frontier_phi_61_pred_2;
                _2764 = frontier_phi_61_pred_3;
                _2762 = frontier_phi_61_pred_4;
                _2760 = frontier_phi_61_pred_5;
                uint _2909 = _2908 + 1u;
                if (_2909 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2902 = _2758;
                    _2903 = _2760;
                    _2904 = _2762;
                    _2905 = _2764;
                    _2906 = _2766;
                    _2907 = _2768;
                    _2908 = _2909;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2757 = _2758;
            _2759 = _2760;
            _2761 = _2762;
            _2763 = _2764;
            _2765 = _2766;
            _2767 = _2768;
        }
        uvec4 _2771 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2772 = _2771.z;
        uint _2774 = (_2772 >> 8u) & 15u;
        float _2870;
        float _2872;
        float _2874;
        float _2876;
        float _2878;
        float _2880;
        if (((4294967295u << _2774) & _2656) == 0u)
        {
            _2870 = _2757;
            _2872 = _2759;
            _2874 = _2761;
            _2876 = _2763;
            _2878 = _2765;
            _2880 = _2767;
        }
        else
        {
            float _2895 = inversesqrt(dot(vec3(_2610, _2611, _2612), vec3(_2610, _2611, _2612)));
            float _2896 = _2895 * _2610;
            float _2897 = _2895 * _2611;
            float _2898 = _2895 * _2612;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2774 < ((_2772 >> 12u) & 15u))
            {
                float _2871;
                float _2873;
                float _2875;
                float _2877;
                float _2879;
                float _2881;
                float _3009 = _2757;
                float _3010 = _2759;
                float _3011 = _2761;
                float _3012 = _2763;
                float _3013 = _2765;
                float _3014 = _2767;
                uint _3015 = _2774;
                uint _3024;
                bool _3025;
                for (;;)
                {
                    _3024 = texelFetch(g_lightClassification, int((((_2650 << 5u) + (_2636 << 9u)) + (_3015 << 2u)) >> 2u)).x;
                    _3025 = _3024 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3025)
                    {
                        frontier_phi_67_pred = _3012;
                        frontier_phi_67_pred_1 = _3013;
                        frontier_phi_67_pred_2 = _3014;
                        frontier_phi_67_pred_3 = _3011;
                        frontier_phi_67_pred_4 = _3010;
                        frontier_phi_67_pred_5 = _3009;
                    }
                    else
                    {
                        float _3209;
                        float _3210;
                        float _3211;
                        float _3212;
                        float _3213;
                        float _3214;
                        float _3502;
                        float _3503;
                        float _3504;
                        float _3505;
                        float _3506;
                        float _3507;
                        float _3222 = _3009;
                        float _3223 = _3010;
                        float _3224 = _3011;
                        float _3225 = _3012;
                        float _3226 = _3013;
                        float _3227 = _3014;
                        uint _3228 = _3024;
                        uint _3229;
                        vec4 _3254;
                        float _3255;
                        vec4 _3270;
                        vec3 _3282;
                        vec4 _3297;
                        vec4 _3312;
                        float _3358;
                        bool _3359;
                        for (;;)
                        {
                            uint _3239 = ((_3015 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3228));
                            _3229 = (_3228 + 4294967295u) & _3228;
                            uint _3241 = _3239 * 40u;
                            _3254 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3241)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 3u)).x));
                            _3255 = _3254.w;
                            uint _3257 = (_3239 * 40u) + 4u;
                            _3270 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3257)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 3u)).x));
                            uint _3272 = (_3239 * 40u) + 8u;
                            _3282 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3272)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 2u)).x));
                            uint _3284 = (_3239 * 40u) + 16u;
                            _3297 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3284)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 3u)).x));
                            uint _3299 = (_3239 * 40u) + 20u;
                            _3312 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 3u)).x));
                            uint _3314 = (_3239 * 40u) + 24u;
                            vec4 _3327 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3314)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 3u)).x));
                            uint _3333 = (_3239 * 40u) + 28u;
                            vec4 _3346 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3333)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 3u)).x));
                            _3358 = fma(_2612, _3346.z, fma(_2611, _3346.y, _3346.x * _2610)) + _3346.w;
                            _3359 = !((fma(_2612, _3327.z, fma(_2611, _3327.y, _3327.x * _2610)) + _3327.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3359)
                            {
                                float _3386 = _3254.x - _2610;
                                float _3387 = _3254.y - _2611;
                                float _3388 = _3254.z - _2612;
                                float _3389 = dot(vec3(_3386, _3387, _3388), vec3(_3386, _3387, _3388));
                                float _3392 = inversesqrt(_3389);
                                float _3393 = _3392 * _3386;
                                float _3394 = _3392 * _3387;
                                float _3395 = _3392 * _3388;
                                float _3399 = 1.0 - (_3389 / (_3255 * _3255));
                                float _4523 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                                float _3400 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                                float _3404 = sqrt(_3389) * _3270.w;
                                float _3406 = 1.39999997615814208984375 / (_3404 + 1.39999997615814208984375);
                                float _3407 = _3406 * _3406;
                                float _3410 = ((1.0 - _3407) * dot(vec3(_3393, _3394, _3395), vec3(_852, _855, _858))) + _3407;
                                float _3413 = _3404 * _3404;
                                float _3417 = (fma(_2612, _3297.z, fma(_2611, _3297.y, _3297.x * _2610)) + _3297.w) / _3358;
                                float _3418 = (fma(_2612, _3312.z, fma(_2611, _3312.y, _3312.x * _2610)) + _3312.w) / _3358;
                                float _3422 = 1.0 - dot(vec2(_3417, _3418), vec2(_3417, _3418));
                                float _4539 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                                float _3423 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                                float _3424 = _3423 * (((isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0))) * _3400) / ((_3413 * 0.699999988079071044921875) + 1.0));
                                float _3436 = exp2(log2(1.0 / ((_3413 * 3.5) + 5.0)) * 0.25);
                                float _3437 = 1.0 - _927;
                                float _3444 = sqrt(1.0 - ((1.0 - (_3437 * _3437)) * (1.0 - (_3436 * _3436))));
                                float _3445 = _3444 * _3444;
                                float _3446 = _3445 * _3445;
                                float _3447 = _3393 - _2896;
                                float _3448 = _3394 - _2897;
                                float _3449 = _3395 - _2898;
                                float _3453 = inversesqrt(dot(vec3(_3447, _3448, _3449), vec3(_3447, _3448, _3449)));
                                float _3457 = dot(vec3(_852, _855, _858), vec3((-0.0) - _2896, (-0.0) - _2897, (-0.0) - _2898));
                                float _4550 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                                float _3460 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
                                float _3461 = dot(vec3(_852, _855, _858), vec3(_3453 * _3447, _3453 * _3448, _3453 * _3449));
                                float _4561 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                                float _3464 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
                                float _3468 = ((_3464 * _3464) * (_3446 + (-1.0))) + 1.0;
                                float _3469 = _3406 * _3445;
                                float _3470 = _3469 * _3469;
                                float _3476 = ((1.0 - _3470) * dot(vec3(_852, _855, _858), vec3(_3393, _3394, _3395))) + _3470;
                                float _4572 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                                float _3477 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
                                float _3478 = 1.0 - _3445;
                                float _3488 = (0.5 / (((_3477 * ((_3460 * _3478) + _3445)) + 9.9999999392252902907785028219223e-09) + (((_3477 * _3478) + _3445) * _3460))) * _3477;
                                float _4583 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                                float _3498 = (_3423 * _3400) * (((_3446 * 3.1415927410125732421875) * (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0)))) / ((_3468 * _3468) * ((_3413 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3498 * _3282.x;
                                frontier_phi_73_pred_1 = _3498 * _3282.y;
                                frontier_phi_73_pred_2 = _3424 * _3270.z;
                                frontier_phi_73_pred_3 = _3424 * _3270.y;
                                frontier_phi_73_pred_4 = _3424 * _3270.x;
                                frontier_phi_73_pred_5 = _3498 * _3282.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3502 = frontier_phi_73_pred;
                            _3503 = frontier_phi_73_pred_1;
                            _3507 = frontier_phi_73_pred_2;
                            _3506 = frontier_phi_73_pred_3;
                            _3505 = frontier_phi_73_pred_4;
                            _3504 = frontier_phi_73_pred_5;
                            _3212 = _3505 + _3225;
                            _3213 = _3506 + _3226;
                            _3214 = _3507 + _3227;
                            _3209 = _3502 + _3222;
                            _3210 = _3503 + _3223;
                            _3211 = _3504 + _3224;
                            if (_3229 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3222 = _3209;
                                _3223 = _3210;
                                _3224 = _3211;
                                _3225 = _3212;
                                _3226 = _3213;
                                _3227 = _3214;
                                _3228 = _3229;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3212;
                        frontier_phi_67_pred_1 = _3213;
                        frontier_phi_67_pred_2 = _3214;
                        frontier_phi_67_pred_3 = _3211;
                        frontier_phi_67_pred_4 = _3210;
                        frontier_phi_67_pred_5 = _3209;
                    }
                    _2877 = frontier_phi_67_pred;
                    _2879 = frontier_phi_67_pred_1;
                    _2881 = frontier_phi_67_pred_2;
                    _2875 = frontier_phi_67_pred_3;
                    _2873 = frontier_phi_67_pred_4;
                    _2871 = frontier_phi_67_pred_5;
                    uint _3016 = _3015 + 1u;
                    if (_3016 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3009 = _2871;
                        _3010 = _2873;
                        _3011 = _2875;
                        _3012 = _2877;
                        _3013 = _2879;
                        _3014 = _2881;
                        _3015 = _3016;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2879;
                frontier_phi_55_56_ladder_1 = _2881;
                frontier_phi_55_56_ladder_2 = _2877;
                frontier_phi_55_56_ladder_3 = _2875;
                frontier_phi_55_56_ladder_4 = _2873;
                frontier_phi_55_56_ladder_5 = _2871;
            }
            else
            {
                frontier_phi_55_56_ladder = _2765;
                frontier_phi_55_56_ladder_1 = _2767;
                frontier_phi_55_56_ladder_2 = _2763;
                frontier_phi_55_56_ladder_3 = _2761;
                frontier_phi_55_56_ladder_4 = _2759;
                frontier_phi_55_56_ladder_5 = _2757;
            }
            _2870 = frontier_phi_55_56_ladder_5;
            _2872 = frontier_phi_55_56_ladder_4;
            _2874 = frontier_phi_55_56_ladder_3;
            _2876 = frontier_phi_55_56_ladder_2;
            _2878 = frontier_phi_55_56_ladder;
            _2880 = frontier_phi_55_56_ladder_1;
        }
        float _2885 = isnan(1.0) ? _911 : (isnan(_911) ? 1.0 : min(_911, 1.0));
        _2669 = (_2885 * _2876) + _2102;
        _2671 = (_2885 * _2878) + _2104;
        _2673 = (_2885 * _2880) + _2106;
        _2675 = ((_2870 * _895) * _2885) + _2450;
        _2677 = ((_2872 * _897) * _2885) + _2452;
        _2679 = ((_2874 * _898) * _2885) + _2454;
    }
    else
    {
        _2669 = _2102;
        _2671 = _2104;
        _2673 = _2106;
        _2675 = _2450;
        _2677 = _2452;
        _2679 = _2454;
    }
    float _4599 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _4610 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _4621 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    uint _2699 = _268 + 6u;
    float _2707 = _833 / cbSceneParam._m0[86u].x;
    float _2708 = _834 / cbSceneParam._m0[86u].y;
    vec4 _2722 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2707, _2708, (log2((isnan(cbSceneParam._m0[77u].w) ? _767 : (isnan(_767) ? cbSceneParam._m0[77u].w : min(_767, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2724 = _2722.x;
    float _2725 = _2722.y;
    float _2726 = _2722.z;
    float _2727 = _2722.w;
    float _2820;
    float _2822;
    float _2824;
    float _2826;
    if (_767 > cbSceneParam._m0[78u].w)
    {
        float _2782 = isnan(_767) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _767 : min(cbSceneParam._m0[80u].w, _767));
        float _2783 = _2782 / _767;
        float _2794 = _2783 * _818;
        float _2795 = _819 * _2783;
        float _2796 = (-0.0) - _2795;
        float _2798 = _2783 * _820;
        float _2800 = (cbSceneParam._m0[77u].w * _2796) / _2782;
        float _2801 = _2800 + cbSceneParam._m0[79u].w;
        float _2802 = cbSceneParam._m0[79u].w - _2795;
        float _2808 = sqrt(((_2794 * _2794) + (_2795 * _2795)) + (_2798 * _2798));
        float _2811 = (1.0 - (cbSceneParam._m0[77u].w / _2782)) * _2808;
        float _2816 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2818 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2971;
        if (abs((_2796 - _2800) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2971 = ((((_2801 > 0.0) ? exp2(_2816 * _2801) : (2.0 - exp2(_2818 * _2801))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2811;
        }
        else
        {
            float _2931 = 1.0 / cbSceneParam._m0[80u].x;
            float _2932 = isnan(_2802) ? _2801 : (isnan(_2801) ? _2802 : max(_2801, _2802));
            float _2933 = isnan(_2802) ? _2801 : (isnan(_2801) ? _2802 : min(_2801, _2802));
            float _2942 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : min(_2932, 0.0));
            float _2943 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : min(_2933, 0.0));
            _2971 = ((abs(_2808 / _2796) * cbSceneParam._m0[80u].y) * ((((_2942 - _2943) * 2.0) - ((exp2(_2816 * (isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0)))) - exp2(_2816 * (isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0))))) * _2931)) - ((exp2(_2818 * _2942) - exp2(_2818 * _2943)) * _2931))) + (_2811 * cbSceneParam._m0[80u].z);
        }
        vec4 _2973 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2707, _2708, 1.0), 0.0);
        float _2982 = exp2((_2971 * (-1.44269502162933349609375)) * (1.0 - _2973.w));
        float _2983 = log2(_2982);
        float _2999 = log2(_2727);
        _2820 = (exp2(_2999 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2983 * cbSceneParam._m0[78u].x)) * _2973.x) / cbSceneParam._m0[78u].x)) + _2724;
        _2822 = (exp2(_2999 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2983 * cbSceneParam._m0[78u].y)) * _2973.y) / cbSceneParam._m0[78u].y)) + _2725;
        _2824 = (exp2(_2999 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2983 * cbSceneParam._m0[78u].z)) * _2973.z) / cbSceneParam._m0[78u].z)) + _2726;
        _2826 = _2982 * _2727;
    }
    else
    {
        _2820 = _2724;
        _2822 = _2725;
        _2824 = _2726;
        _2826 = _2727;
    }
    float _2838 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2839 = _2838 == 3.0;
    float _2840 = log2(_2826);
    float _2847 = exp2(_2840 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0))) * (_2669 + ((isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))) * _911))) + ((_2675 + ((isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0))) * _1719)) * cbPerFrame._m0[3u].x));
    float _2848 = exp2(_2840 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0))) * (_2671 + ((isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0))) * _911))) + ((_2677 + ((isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0))) * _1719)) * cbPerFrame._m0[3u].x));
    float _2849 = exp2(_2840 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_2673 + ((isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))) * _911))) + ((_2679 + ((isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0))) * _1719)) * cbPerFrame._m0[3u].x));
    float _2858 = (_2838 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2858 * (_2839 ? _2847 : (_2847 + (cbSceneParam._m0[72u].w * _2820)));
    SV_Target.y = _2858 * (_2839 ? _2848 : (_2848 + (cbSceneParam._m0[72u].w * _2822)));
    SV_Target.z = _2858 * (_2839 ? _2849 : (_2849 + (cbSceneParam._m0[72u].w * _2824)));
    SV_Target.w = cbInstanceData._m0[_2699].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2699].w;
}


