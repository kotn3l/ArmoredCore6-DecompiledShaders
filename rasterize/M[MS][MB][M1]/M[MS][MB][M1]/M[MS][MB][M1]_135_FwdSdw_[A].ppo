#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1401;
float _4063;
float _4064;
float _4065;
float _4066;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _237 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _238 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _239 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _245 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _265 = uint(roundEven(NORMAL.w)) * 13u;
    uint _270 = _265 + 1u;
    uint _274 = _265 + 2u;
    float _283 = sqrt(((cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x)) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x));
    float _284 = _283 * TEXCOORD.z;
    float _285 = _283 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _311 = _305.x * cbMtdParam._m0[11u].x;
    float _312 = _305.y * cbMtdParam._m0[11u].y;
    float _313 = _305.z * cbMtdParam._m0[11u].z;
    vec4 _332 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _284) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _285) + cbTextureTilingScale._m0[5u].w));
    vec4 _370 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _372 = _370.x;
    float _384 = dot(vec4(_372, _370.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _401 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_372 - _384) * cbMtdParam._m0[24u].y) + _384) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4075 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _402 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _409 = (_402 * ((_332.x * cbMtdParam._m0[12u].x) - _311)) + _311;
    float _410 = (_402 * ((_332.y * cbMtdParam._m0[12u].y) - _312)) + _312;
    float _411 = (_402 * ((_332.z * cbMtdParam._m0[12u].z) - _313)) + _313;
    vec4 _430 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _284) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _285) + cbTextureTilingScale._m0[14u].w));
    vec4 _450 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _284) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _285) + cbTextureTilingScale._m0[20u].w));
    vec4 _475 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _284) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _285) + cbTextureTilingScale._m0[4u].w));
    vec4 _492 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _494 = _492.x;
    float _495 = _492.y;
    float _496 = _492.z;
    float _505 = ((_475.z - _496) * _402) + _496;
    float _508 = ((((_475.x - _494) * _402) + _494) * 2.0) + (-1.0);
    float _509 = ((((_475.y - _495) * _402) + _495) * 2.0) + (-1.0);
    float _510 = dot(vec2(_508, _509), vec2(_508, _509));
    float _4086 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _515 = sqrt(1.0 - (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))));
    vec4 _531 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _556 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _284) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _285) + cbTextureTilingScale._m0[11u].w));
    float _558 = _556.x;
    float _559 = 1.0 - _558;
    float _565 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _568 = ((isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : min(_565, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _577 = (_568 - ((((((_558 - _559) * cbMtdParam._m0[24u].z) + _559) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _568))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4107 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _578 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _585 = (_578 * ((_430.x * cbMtdParam._m0[18u].x) - _409)) + _409;
    float _586 = (_578 * ((_430.y * cbMtdParam._m0[18u].y) - _410)) + _410;
    float _587 = (_578 * ((_430.z * cbMtdParam._m0[18u].z) - _411)) + _411;
    vec4 _599 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _284) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _285) + cbTextureTilingScale._m0[19u].w));
    float _601 = _599.x;
    float _602 = 1.0 - _601;
    float _629 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_601 - _602) * cbMtdParam._m0[24u].w) + _602) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4118 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _630 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _638 = ((((cbMtdParam._m0[10u].x - _585) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _630) + _585;
    float _639 = ((((cbMtdParam._m0[10u].y - _586) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _630) + _586;
    float _640 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _587)) * _630) + _587;
    vec4 _652 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _666 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _668 = _666.x;
    float _686 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _284) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _285) + cbTextureTilingScale._m0[9u].w)).x - _668) * _402) + _668;
    float _690 = ((_652.x - _686) * cbMtdParam._m0[19u].z) + _686;
    float _692 = _690 - (_690 * _578);
    float _694 = _692 - (_692 * _630);
    float _699 = (((_450.z - _505) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _505;
    float _703 = ((_531.z - _699) * cbMtdParam._m0[19u].w) + _699;
    vec4 _717 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _284) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _285) + cbTextureTilingScale._m0[15u].w));
    float _724 = (_717.x * 2.0) + (-1.0);
    float _725 = (_717.y * 2.0) + (-1.0);
    float _726 = dot(vec2(_724, _725), vec2(_724, _725));
    float _4129 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _734 = (_578 * (_717.z - _703)) + _703;
    float _737 = ((cbMtdParam._m0[23u].y - _734) * _630) + _734;
    vec4 _756 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _284) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _285) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _762 = (_756.x * 2.0) + (-1.0);
    float _763 = (_756.y * 2.0) + (-1.0);
    float _764 = dot(vec2(_762, _763), vec2(_762, _763));
    float _4140 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _778 = (_508 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_450.x * 2.0) + (-1.0)))) + (((_531.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _779 = (_509 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_450.y * 2.0) + (-1.0)))) + (((_531.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _791 = (((_724 - _778) + (cbMtdParam._m0[21u].x * _778)) * _578) + _778;
    float _792 = (((_725 - _779) + (cbMtdParam._m0[21u].x * _779)) * _578) + _779;
    float _793 = (_578 * (sqrt(1.0 - (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) - _515)) + _515;
    float _804 = (((_762 - _791) + (_791 * cbMtdParam._m0[22u].z)) * _630) + _791;
    float _805 = (((_763 - _792) + (_792 * cbMtdParam._m0[22u].z)) * _630) + _792;
    float _806 = ((sqrt(1.0 - (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0)))) - _793) * _630) + _793;
    float _808 = cbMtdParam._m0[22u].x + _531.w;
    float _811 = fma(_806, _252 * NORMAL.x, fma(_805, _259 * TANGENT.x, (_245 * _237) * _804));
    float _814 = fma(_806, _252 * NORMAL.y, fma(_805, _259 * TANGENT.y, (_245 * _238) * _804));
    float _817 = fma(_806, _252 * NORMAL.z, fma(_805, _259 * TANGENT.z, (_245 * _239) * _804));
    float _821 = inversesqrt(dot(vec3(_811, _814, _817), vec3(_811, _814, _817)));
    float _822 = _821 * _811;
    float _823 = _821 * _814;
    float _824 = _821 * _817;
    float _4151 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _825 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
    float _4162 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _4173 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _4184 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _4195 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _4206 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _830 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
    float _844 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _884 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _894 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _884);
    float _895 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _884);
    float _896 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _884);
    float _900 = inversesqrt(dot(vec3(_894, _895, _896), vec3(_894, _895, _896)));
    float _901 = _894 * _900;
    float _902 = _895 * _900;
    float _903 = _896 * _900;
    vec4 _908 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _910 = _908.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1082 = sqrt(((_894 * _894) + (_895 * _895)) + (_896 * _896));
        float _1088 = (cbMatDynParam._m0[5u].x * _1082) + cbMatDynParam._m0[5u].y;
        float _4217 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1093 = (cbMatDynParam._m0[5u].z * _1082) + cbMatDynParam._m0[5u].w;
        float _4228 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) - _1089)) + _1089) < ((_910 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _921 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _922 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _940 = fma(_824, cbSceneParam._m0[5u].z, fma(_823, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _822));
    float _943 = fma(_824, cbSceneParam._m0[6u].z, fma(_823, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _822));
    float _946 = fma(_824, cbSceneParam._m0[7u].z, fma(_823, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _822));
    uint _959 = _265 + 9u;
    uint _960 = _959 + uint(cbMatDynParam._m0[0u].w);
    float _966 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) * cbInstanceData._m0[_960].x;
    float _967 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0)))) * cbInstanceData._m0[_960].y;
    float _968 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0)))) * cbInstanceData._m0[_960].z;
    float _4239 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _969 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
    float _4250 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _970 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    float _4261 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _971 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
    float _972 = 1.0 - _830;
    float _973 = _969 * _972;
    float _974 = _970 * _972;
    float _975 = _971 * _972;
    float _980 = (_969 + (-0.039999999105930328369140625)) * _830;
    float _981 = (_970 + (-0.039999999105930328369140625)) * _830;
    float _982 = (_971 + (-0.039999999105930328369140625)) * _830;
    float _983 = _980 + 0.039999999105930328369140625;
    float _985 = _981 + 0.039999999105930328369140625;
    float _986 = _982 + 0.039999999105930328369140625;
    vec4 _995 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _921, cbSceneParam._m0[86u].y * _922));
    float _999 = ((isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * TEXCOORD_5.w) * _995.x;
    float _1000 = dot(vec3(_822, _823, _824), vec3(_901, _902, _903));
    float _1003 = _1000 * 2.0;
    float _1007 = (_1003 * _822) - _901;
    float _1008 = (_1003 * _823) - _902;
    float _1009 = (_1003 * _824) - _903;
    float _1013 = abs(dot(vec3(_901, _902, _903), vec3(_822, _823, _824)));
    float _4272 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _1015 = sqrt(_825);
    float _1028 = exp2((_1015 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1015 * 3.0));
    float _1034 = (1.0 - _1028) * ((_1015 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1035 = _1028 * _1015;
    float _1063 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1067 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1071 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1400;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1125 = fma(_1071, cbModelParam._m0[26u].z, fma(_1067, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1063));
        float _1129 = fma(_1071, cbModelParam._m0[27u].z, fma(_1067, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1063));
        float _1133 = fma(_1071, cbModelParam._m0[28u].z, fma(_1067, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1063));
        float _1158 = _1063 + _822;
        float _1159 = _1067 + _823;
        float _1160 = _1071 + _824;
        float _1170 = fma(_1160, cbModelParam._m0[26u].z, fma(_1159, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1158)) - _1125;
        float _1171 = fma(_1160, cbModelParam._m0[27u].z, fma(_1159, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1158)) - _1129;
        float _1172 = fma(_1160, cbModelParam._m0[28u].z, fma(_1159, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1158)) - _1133;
        float _1176 = inversesqrt(dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172)));
        float _1189 = ((_1176 * _1170) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1125 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1190 = ((_1176 * _1171) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1129 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1191 = ((_1176 * _1172) / cbModelParam._m0[34u].z) + ((((((_1133 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        float _1228 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1194.x + (-0.5));
        float _1230 = _1228 * (_1194.y + (-0.5));
        float _1231 = _1228 * (_1194.z + (-0.5));
        float _1238 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1201.x + (-0.5));
        float _1240 = _1238 * (_1201.y + (-0.5));
        float _1241 = _1238 * (_1201.z + (-0.5));
        float _1248 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1208.x + (-0.5));
        float _1250 = _1248 * (_1208.y + (-0.5));
        float _1251 = _1248 * (_1208.z + (-0.5));
        float _1258 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1215.x + (-0.5));
        float _1260 = _1258 * (_1215.y + (-0.5));
        float _1261 = _1258 * (_1215.z + (-0.5));
        float _1262 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1263 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1264 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1265 = _1229 * 0.5;
        float _1266 = _1239 * 0.5;
        float _1267 = _1249 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1282 = (dot(vec3(_822, _823, _824), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _4298 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1292 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1262 + 9.9999997473787516355514526367188e-06);
        float _4309 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _4320 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_1294 + 1.0))) + _1299) * _1262;
        float _1309 = _1230 * 0.5;
        float _1310 = _1240 * 0.5;
        float _1311 = _1250 * 0.5;
        float _1312 = dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311));
        float _1317 = (_1312 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1312);
        float _1325 = (dot(vec3(_822, _823, _824), vec3(_1317 * _1309, _1317 * _1310, _1317 * _1311)) + 1.0) * 0.5;
        float _4331 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1334 = sqrt(((_1310 * _1310) + (_1309 * _1309)) + (_1311 * _1311)) / (_1263 + 9.9999997473787516355514526367188e-06);
        float _4342 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _1336 = _1335 * 2.0;
        float _1340 = (1.0 - _1335) / (_1335 + 1.0);
        float _4353 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _1350 = ((((1.0 - _1341) * (_1336 + 2.0)) * exp2(log2(isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (_1336 + 1.0))) + _1341) * _1263;
        float _1351 = _1231 * 0.5;
        float _1352 = _1241 * 0.5;
        float _1353 = _1251 * 0.5;
        float _1354 = dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353));
        float _1359 = (_1354 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1354);
        float _1367 = (dot(vec3(_822, _823, _824), vec3(_1359 * _1351, _1359 * _1352, _1359 * _1353)) + 1.0) * 0.5;
        float _4364 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1376 = sqrt(((_1352 * _1352) + (_1351 * _1351)) + (_1353 * _1353)) / (_1264 + 9.9999997473787516355514526367188e-06);
        float _4375 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _1378 = _1377 * 2.0;
        float _1382 = (1.0 - _1377) / (_1377 + 1.0);
        float _4386 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _1392 = ((((1.0 - _1383) * (_1378 + 2.0)) * exp2(log2(isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * (_1378 + 1.0))) + _1383) * _1264;
        _1400 = _1231;
        _1402 = _1230;
        _1403 = _1229;
        _1404 = _1241;
        _1405 = _1240;
        _1406 = _1239;
        _1407 = _1251;
        _1408 = _1250;
        _1409 = _1249;
        _1410 = _1264;
        _1411 = _1263;
        _1412 = _1262;
        _1413 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
        _1414 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)));
        _1415 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)));
    }
    else
    {
        _1400 = _1401;
        _1402 = _1401;
        _1403 = _1401;
        _1404 = _1401;
        _1405 = _1401;
        _1406 = _1401;
        _1407 = _1401;
        _1408 = _1401;
        _1409 = _1401;
        _1410 = _1401;
        _1411 = _1401;
        _1412 = _1401;
        _1413 = 0.0;
        _1414 = 0.0;
        _1415 = 0.0;
    }
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1443 = fma(_1071, cbModelParam._m0[30u].z, fma(_1067, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1063));
        float _1447 = fma(_1071, cbModelParam._m0[31u].z, fma(_1067, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1063));
        float _1451 = fma(_1071, cbModelParam._m0[32u].z, fma(_1067, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1063));
        float _1474 = _1063 + _822;
        float _1475 = _1067 + _823;
        float _1476 = _1071 + _824;
        float _1486 = fma(_1476, cbModelParam._m0[30u].z, fma(_1475, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1474)) - _1443;
        float _1487 = fma(_1476, cbModelParam._m0[31u].z, fma(_1475, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1474)) - _1447;
        float _1488 = fma(_1476, cbModelParam._m0[32u].z, fma(_1475, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1474)) - _1451;
        float _1492 = inversesqrt(dot(vec3(_1486, _1487, _1488), vec3(_1486, _1487, _1488)));
        float _1505 = ((_1492 * _1486) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1443 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1506 = ((_1492 * _1487) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1447 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1507 = ((_1492 * _1488) / cbModelParam._m0[35u].z) + ((((((_1451 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1509 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1505, _1506, _1507), 0.0);
        vec4 _1516 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1505, _1506, _1507), 0.0);
        vec4 _1523 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1505, _1506, _1507), 0.0);
        vec4 _1530 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1505, _1506, _1507), 0.0);
        float _1542 = exp2((_1509.w + (-0.5)) * 20.0) * 2.0;
        float _1543 = _1542 * (_1509.x + (-0.5));
        float _1544 = _1542 * (_1509.y + (-0.5));
        float _1545 = _1542 * (_1509.z + (-0.5));
        float _1552 = exp2((_1516.w + (-0.5)) * 20.0) * 2.0;
        float _1553 = _1552 * (_1516.x + (-0.5));
        float _1554 = _1552 * (_1516.y + (-0.5));
        float _1555 = _1552 * (_1516.z + (-0.5));
        float _1562 = exp2((_1523.w + (-0.5)) * 20.0) * 2.0;
        float _1563 = _1562 * (_1523.x + (-0.5));
        float _1564 = _1562 * (_1523.y + (-0.5));
        float _1565 = _1562 * (_1523.z + (-0.5));
        float _1572 = exp2((_1530.w + (-0.5)) * 20.0) * 2.0;
        float _1573 = _1572 * (_1530.x + (-0.5));
        float _1574 = _1572 * (_1530.y + (-0.5));
        float _1575 = _1572 * (_1530.z + (-0.5));
        float _1576 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1577 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1578 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1579 = _1543 * 0.5;
        float _1580 = _1553 * 0.5;
        float _1581 = _1563 * 0.5;
        float _1582 = dot(vec3(_1579, _1580, _1581), vec3(_1579, _1580, _1581));
        float _1587 = (_1582 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1582);
        float _1595 = (dot(vec3(_822, _823, _824), vec3(_1587 * _1579, _1587 * _1580, _1587 * _1581)) + 1.0) * 0.5;
        float _4427 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1604 = sqrt(((_1580 * _1580) + (_1579 * _1579)) + (_1581 * _1581)) / (_1576 + 9.9999997473787516355514526367188e-06);
        float _4438 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1605 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _1606 = _1605 * 2.0;
        float _1610 = (1.0 - _1605) / (_1605 + 1.0);
        float _4449 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _1620 = ((((1.0 - _1611) * (_1606 + 2.0)) * exp2(log2(isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_1606 + 1.0))) + _1611) * _1576;
        float _1621 = _1544 * 0.5;
        float _1622 = _1554 * 0.5;
        float _1623 = _1564 * 0.5;
        float _1624 = dot(vec3(_1621, _1622, _1623), vec3(_1621, _1622, _1623));
        float _1629 = (_1624 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1624);
        float _1637 = (dot(vec3(_822, _823, _824), vec3(_1629 * _1621, _1629 * _1622, _1629 * _1623)) + 1.0) * 0.5;
        float _4460 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1646 = sqrt(((_1622 * _1622) + (_1621 * _1621)) + (_1623 * _1623)) / (_1577 + 9.9999997473787516355514526367188e-06);
        float _4471 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1647 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _1648 = _1647 * 2.0;
        float _1652 = (1.0 - _1647) / (_1647 + 1.0);
        float _4482 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _1662 = ((((1.0 - _1653) * (_1648 + 2.0)) * exp2(log2(isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * (_1648 + 1.0))) + _1653) * _1577;
        float _1663 = _1545 * 0.5;
        float _1664 = _1555 * 0.5;
        float _1665 = _1565 * 0.5;
        float _1666 = dot(vec3(_1663, _1664, _1665), vec3(_1663, _1664, _1665));
        float _1671 = (_1666 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1666);
        float _1679 = (dot(vec3(_822, _823, _824), vec3(_1671 * _1663, _1671 * _1664, _1671 * _1665)) + 1.0) * 0.5;
        float _4493 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1688 = sqrt(((_1664 * _1664) + (_1663 * _1663)) + (_1665 * _1665)) / (_1578 + 9.9999997473787516355514526367188e-06);
        float _4504 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1689 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _1690 = _1689 * 2.0;
        float _1694 = (1.0 - _1689) / (_1689 + 1.0);
        float _4515 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1695 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _1704 = ((((1.0 - _1695) * (_1690 + 2.0)) * exp2(log2(isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * (_1690 + 1.0))) + _1695) * _1578;
        _1712 = _1545;
        _1713 = _1544;
        _1714 = _1543;
        _1715 = _1555;
        _1716 = _1554;
        _1717 = _1553;
        _1718 = _1565;
        _1719 = _1564;
        _1720 = _1563;
        _1721 = _1578;
        _1722 = _1577;
        _1723 = _1576;
        _1724 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)));
        _1725 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)));
        _1726 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)));
    }
    else
    {
        _1712 = _1401;
        _1713 = _1401;
        _1714 = _1401;
        _1715 = _1401;
        _1716 = _1401;
        _1717 = _1401;
        _1718 = _1401;
        _1719 = _1401;
        _1720 = _1401;
        _1721 = _1401;
        _1722 = _1401;
        _1723 = _1401;
        _1724 = 0.0;
        _1725 = 0.0;
        _1726 = 0.0;
    }
    float _1736 = (cbModelParam._m0[1u].x * (_1724 - _1413)) + _1413;
    float _1737 = (cbModelParam._m0[1u].x * (_1725 - _1414)) + _1414;
    float _1738 = (cbModelParam._m0[1u].x * (_1726 - _1415)) + _1415;
    float _1759 = fma(_1738, cbSceneParam._m0[89u].z, fma(_1737, cbSceneParam._m0[89u].y, _1736 * cbSceneParam._m0[89u].x));
    float _1762 = fma(_1738, cbSceneParam._m0[90u].z, fma(_1737, cbSceneParam._m0[90u].y, _1736 * cbSceneParam._m0[90u].x));
    float _1765 = fma(_1738, cbSceneParam._m0[91u].z, fma(_1737, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1736));
    float _1780 = _1007 * 0.5;
    float _1781 = _1008 * 0.5;
    float _1782 = _1009 * 0.5;
    float _1783 = dot(vec4(_1780, _1781, _1782, 1.0), vec4(_1714, _1717, _1720, _1723));
    float _1786 = dot(vec4(_1780, _1781, _1782, 1.0), vec4(_1713, _1716, _1719, _1722));
    float _1789 = dot(vec4(_1780, _1781, _1782, 1.0), vec4(_1712, _1715, _1718, _1721));
    float _1823;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1796 = dot(vec4(_1780, _1781, _1782, 1.0), vec4(_1400, _1404, _1407, _1410));
        float _1800 = dot(vec4(_1780, _1781, _1782, 1.0), vec4(_1402, _1405, _1408, _1411));
        float _1804 = dot(vec4(_1780, _1781, _1782, 1.0), vec4(_1403, _1406, _1409, _1412));
        float _1811 = dot(vec4(cbModelParam._m0[39u]), vec4(_1780, _1781, _1782, 1.0));
        _1823 = dot(vec3(isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0)), isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0)), isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1811) ? 0.0 : (isnan(0.0) ? _1811 : max(0.0, _1811))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1823 = 1.0;
    }
    float _1834;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1825 = dot(vec4(cbModelParam._m0[40u]), vec4(_1780, _1781, _1782, 1.0));
        _1834 = dot(vec3(isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)), isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0)), isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1825) ? 0.0 : (isnan(0.0) ? _1825 : max(0.0, _1825))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1834 = 1.0;
    }
    float _1838 = (_1834 * cbModelParam._m0[1u].x) + (_1823 * (1.0 - cbModelParam._m0[1u].x));
    float _1848 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _825);
    float _1849 = isnan(_1848) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1848 : min(cbModelParam._m0[25u].z, _1848));
    float _1929;
    float _1931;
    float _1933;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1896 = fma(_1071, cbModelParam._m0[13u].z, fma(_1067, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1063)) + cbModelParam._m0[13u].w;
        float _1900 = fma(_1071, cbModelParam._m0[14u].z, fma(_1067, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1063)) + cbModelParam._m0[14u].w;
        float _1904 = fma(_1071, cbModelParam._m0[15u].z, fma(_1067, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1063)) + cbModelParam._m0[15u].w;
        float _1907 = fma(_1009, cbModelParam._m0[13u].z, fma(_1008, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1007));
        float _1910 = fma(_1009, cbModelParam._m0[14u].z, fma(_1008, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1007));
        float _1913 = fma(_1009, cbModelParam._m0[15u].z, fma(_1008, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1007));
        float _1941;
        if (_1907 > 0.0)
        {
            _1941 = abs((1.0 - _1896) / _1907);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1907 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1896 + 1.0) / _1907);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1941 = frontier_phi_17_15_ladder;
        }
        float _2112;
        if (_1910 > 0.0)
        {
            _2112 = abs((1.0 - _1900) / _1910);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1910 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1900 + 1.0) / _1910);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2112 = frontier_phi_26_22_ladder;
        }
        float _2407;
        if (_1913 > 0.0)
        {
            _2407 = abs((1.0 - _1904) / _1913);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1913 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1904 + 1.0) / _1913);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2407 = frontier_phi_38_33_ladder;
        }
        float _2409 = isnan(_2112) ? _1941 : (isnan(_1941) ? _2112 : min(_1941, _2112));
        float _2410 = isnan(_2407) ? _2409 : (isnan(_2409) ? _2407 : min(_2409, _2407));
        float _2414 = (_2410 * _1907) + _1896;
        float _2415 = (_2410 * _1910) + _1900;
        float _2416 = (_2410 * _1913) + _1904;
        float _2417 = _2410 * 9.9999997473787516355514526367188e-05;
        float _2419 = (-1.0) - _2417;
        float _2421 = _2417 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2416 > _2421) || ((_2416 < _2419) || ((_2415 > _2421) || ((_2415 < _2419) || ((_2414 < _2419) || (_2414 > _2421))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2561 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2416, cbModelParam._m0[9u].z, fma(_2415, cbModelParam._m0[9u].y, _2414 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2416, cbModelParam._m0[10u].z, fma(_2415, cbModelParam._m0[10u].y, _2414 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2416, cbModelParam._m0[11u].z, fma(_2415, cbModelParam._m0[11u].y, _2414 * cbModelParam._m0[11u].x))), _1849);
            frontier_phi_16_38_ladder = _2561.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2561.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2561.x * cbModelParam._m0[1u].y;
        }
        _1929 = frontier_phi_16_38_ladder_2;
        _1931 = frontier_phi_16_38_ladder_1;
        _1933 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1917 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1007, _1008, _1009), _1849);
        _1929 = _1917.x * cbModelParam._m0[1u].y;
        _1931 = _1917.y * cbModelParam._m0[1u].y;
        _1933 = _1917.z * cbModelParam._m0[1u].y;
    }
    float _1937 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _825);
    float _1938 = isnan(_1937) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1937 : min(cbModelParam._m0[25u].w, _1937));
    float _2027;
    float _2029;
    float _2031;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1991 = fma(_1071, cbModelParam._m0[21u].z, fma(_1067, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1063)) + cbModelParam._m0[21u].w;
        float _1995 = fma(_1071, cbModelParam._m0[22u].z, fma(_1067, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1063)) + cbModelParam._m0[22u].w;
        float _1999 = fma(_1071, cbModelParam._m0[23u].z, fma(_1067, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1063)) + cbModelParam._m0[23u].w;
        float _2002 = fma(_1009, cbModelParam._m0[21u].z, fma(_1008, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1007));
        float _2005 = fma(_1009, cbModelParam._m0[22u].z, fma(_1008, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1007));
        float _2008 = fma(_1009, cbModelParam._m0[23u].z, fma(_1008, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1007));
        float _2117;
        if (_2002 > 0.0)
        {
            _2117 = abs((1.0 - _1991) / _2002);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2002 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1991 + 1.0) / _2002);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2117 = frontier_phi_28_24_ladder;
        }
        float _2434;
        if (_2005 > 0.0)
        {
            _2434 = abs((1.0 - _1995) / _2005);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2005 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1995 + 1.0) / _2005);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2434 = frontier_phi_40_35_ladder;
        }
        float _2772;
        if (_2008 > 0.0)
        {
            _2772 = abs((1.0 - _1999) / _2008);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2008 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1999 + 1.0) / _2008);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2772 = frontier_phi_50_47_ladder;
        }
        float _2774 = isnan(_2434) ? _2117 : (isnan(_2117) ? _2434 : min(_2117, _2434));
        float _2775 = isnan(_2772) ? _2774 : (isnan(_2774) ? _2772 : min(_2774, _2772));
        float _2779 = (_2775 * _2002) + _1991;
        float _2780 = (_2775 * _2005) + _1995;
        float _2781 = (_2775 * _2008) + _1999;
        float _2782 = _2775 * 9.9999997473787516355514526367188e-05;
        float _2783 = (-1.0) - _2782;
        float _2785 = _2782 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2781 > _2785) || ((_2781 < _2783) || ((_2780 > _2785) || ((_2780 < _2783) || ((_2779 < _2783) || (_2779 > _2785))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2903 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2781, cbModelParam._m0[17u].z, fma(_2780, cbModelParam._m0[17u].y, _2779 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2781, cbModelParam._m0[18u].z, fma(_2780, cbModelParam._m0[18u].y, _2779 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2781, cbModelParam._m0[19u].z, fma(_2780, cbModelParam._m0[19u].y, _2779 * cbModelParam._m0[19u].x))), _1938);
            frontier_phi_25_50_ladder = _2903.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2903.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2903.x * cbModelParam._m0[1u].z;
        }
        _2027 = frontier_phi_25_50_ladder_2;
        _2029 = frontier_phi_25_50_ladder_1;
        _2031 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2011 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1007, _1008, _1009), _1938);
        _2027 = _2011.x * cbModelParam._m0[1u].z;
        _2029 = _2011.y * cbModelParam._m0[1u].z;
        _2031 = _2011.z * cbModelParam._m0[1u].z;
    }
    float _2044 = (((_1034 * _983) + _1035) * _999) * ((cbModelParam._m0[1u].w * (_2027 - _1929)) + _1929);
    float _2046 = (((_1034 * _985) + _1035) * _999) * ((cbModelParam._m0[1u].w * (_2029 - _1931)) + _1931);
    float _2048 = (((_1034 * _986) + _1035) * _999) * ((cbModelParam._m0[1u].w * (_2031 - _1933)) + _1933);
    float _2051 = fma(_2048, cbSceneParam._m0[89u].z, fma(_2046, cbSceneParam._m0[89u].y, _2044 * cbSceneParam._m0[89u].x));
    float _2054 = fma(_2048, cbSceneParam._m0[90u].z, fma(_2046, cbSceneParam._m0[90u].y, _2044 * cbSceneParam._m0[90u].x));
    float _2057 = fma(_2048, cbSceneParam._m0[91u].z, fma(_2046, cbSceneParam._m0[91u].y, _2044 * cbSceneParam._m0[91u].x));
    float _2091 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2095 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2099 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2103 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2104 = _2091 / _2103;
    float _2105 = _2095 / _2103;
    float _2106 = _2099 / _2103;
    float _2253;
    float _2254;
    float _2255;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2133 = ((uint(_2106 > cbSceneParam._m0[59u].y) + uint(_2106 > cbSceneParam._m0[59u].x)) + uint(_2106 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2134 = _2133 + 43u;
        uint _2142 = _2133 + 44u;
        uint _2150 = _2133 + 45u;
        uint _2158 = _2133 + 46u;
        float _2169 = fma(_2103, cbSceneParam._m0[_2134].w, fma(_2099, cbSceneParam._m0[_2134].z, fma(_2095, cbSceneParam._m0[_2134].y, _2091 * cbSceneParam._m0[_2134].x)));
        float _2173 = fma(_2103, cbSceneParam._m0[_2142].w, fma(_2099, cbSceneParam._m0[_2142].z, fma(_2095, cbSceneParam._m0[_2142].y, _2091 * cbSceneParam._m0[_2142].x)));
        float _2181 = fma(_2103, cbSceneParam._m0[_2158].w, fma(_2099, cbSceneParam._m0[_2158].z, fma(_2095, cbSceneParam._m0[_2158].y, _2091 * cbSceneParam._m0[_2158].x)));
        float _2186 = cbSceneParam._m0[33u].z * _2181;
        float _2188 = cbSceneParam._m0[33u].w * _2181;
        float _2191 = fma(_2103, cbSceneParam._m0[_2150].w, fma(_2099, cbSceneParam._m0[_2150].z, fma(_2095, cbSceneParam._m0[_2150].y, _2091 * cbSceneParam._m0[_2150].x))) / _2181;
        float _2239 = (cbSceneParam._m0[33u].x - sqrt(((_2105 * _2105) + (_2104 * _2104)) + (_2106 * _2106))) * cbSceneParam._m0[33u].y;
        float _4641 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2246 = (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2186 + _2169) / _2181, (_2188 + _2173) / _2181), _2191), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2188 + _2169) / _2181, (_2173 - _2186) / _2181), _2191), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2169 - _2186) / _2181, (_2173 - _2188) / _2181), _2191), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2169 - _2188) / _2181, (_2186 + _2173) / _2181), _2191), 0.0)).x), vec4(0.25)));
        _2253 = 1.0 - (_2246 * cbSceneParam._m0[34u].x);
        _2254 = 1.0 - (_2246 * cbSceneParam._m0[34u].y);
        _2255 = 1.0 - (_2246 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2253 = 1.0;
        _2254 = 1.0;
        _2255 = 1.0;
    }
    float _2319;
    float _2321;
    float _2323;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2307 = fma(_2103, cbSceneParam._m0[63u].w, fma(_2099, cbSceneParam._m0[63u].z, fma(_2095, cbSceneParam._m0[63u].y, _2091 * cbSceneParam._m0[63u].x)));
        float _2308 = fma(_2103, cbSceneParam._m0[60u].w, fma(_2099, cbSceneParam._m0[60u].z, fma(_2095, cbSceneParam._m0[60u].y, _2091 * cbSceneParam._m0[60u].x))) / _2307;
        float _2309 = fma(_2103, cbSceneParam._m0[61u].w, fma(_2099, cbSceneParam._m0[61u].z, fma(_2095, cbSceneParam._m0[61u].y, _2091 * cbSceneParam._m0[61u].x))) / _2307;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2308 >= cbSceneParam._m0[64u].x) && (_2309 >= cbSceneParam._m0[64u].y)) && (_2308 <= cbSceneParam._m0[64u].z)) && (_2309 <= cbSceneParam._m0[64u].w))
        {
            float _2447 = fma(_2103, cbSceneParam._m0[62u].w, fma(_2099, cbSceneParam._m0[62u].z, fma(_2095, cbSceneParam._m0[62u].y, _2091 * cbSceneParam._m0[62u].x))) / _2307;
            float _2451 = isnan(cbSceneParam._m0[41u].w) ? _2447 : (isnan(_2447) ? cbSceneParam._m0[41u].w : max(_2447, cbSceneParam._m0[41u].w));
            float _2494 = (cbSceneParam._m0[33u].x - sqrt(((_2105 * _2105) + (_2104 * _2104)) + (_2106 * _2106))) * cbSceneParam._m0[33u].y;
            float _4657 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
            float _2501 = (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2308, cbSceneParam._m0[33u].w + _2309), _2451), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2308, _2309 - cbSceneParam._m0[33u].z), _2451), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2308 - cbSceneParam._m0[33u].z, _2309 - cbSceneParam._m0[33u].w), _2451), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2308 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2309), _2451), 0.0)).x), vec4(0.25)));
            float _2505 = 1.0 - (_2501 * cbSceneParam._m0[34u].x);
            float _2506 = 1.0 - (_2501 * cbSceneParam._m0[34u].y);
            float _2507 = 1.0 - (_2501 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2507) ? _2255 : (isnan(_2255) ? _2507 : min(_2255, _2507));
            frontier_phi_37_36_ladder_1 = isnan(_2506) ? _2254 : (isnan(_2254) ? _2506 : min(_2254, _2506));
            frontier_phi_37_36_ladder_2 = isnan(_2505) ? _2253 : (isnan(_2253) ? _2505 : min(_2253, _2505));
        }
        else
        {
            frontier_phi_37_36_ladder = _2255;
            frontier_phi_37_36_ladder_1 = _2254;
            frontier_phi_37_36_ladder_2 = _2253;
        }
        _2319 = frontier_phi_37_36_ladder_2;
        _2321 = frontier_phi_37_36_ladder_1;
        _2323 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2319 = _2253;
        _2321 = _2254;
        _2323 = _2255;
    }
    uvec4 _2328 = floatBitsToUint(cbInstanceData._m0[_265 + 5u]);
    uint _2330 = _2328.x * 14u;
    uint _2331 = _2330 + 13u;
    float _2338 = _999 + (-1.0);
    float _2343 = (cbLight._m0[_2331].x * _2338) + 1.0;
    float _2344 = (cbLight._m0[_2331].y * _2338) + 1.0;
    float _2345 = (cbLight._m0[_2331].z * _2338) + 1.0;
    float _2346 = (cbLight._m0[_2331].w * _2338) + 1.0;
    uint _2347 = _2330 + 5u;
    float _2353 = isnan(1.0) ? _2344 : (isnan(_2344) ? 1.0 : min(_2344, 1.0));
    uint _2357 = _2330 + 4u;
    float _2366 = isnan(1.0) ? _2343 : (isnan(_2343) ? 1.0 : min(_2343, 1.0));
    uint _2370 = _2330 | 1u;
    float _2381 = dot(vec3(cbLight._m0[_2330].xyz), vec3(_822, _823, _824));
    float _2384 = dot(vec3(cbLight._m0[_2370].xyz), vec3(_822, _823, _824));
    float _4693 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _4704 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
    float _2389 = (isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0))) * 0.3183098733425140380859375;
    float _2391 = (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0))) * 0.3183098733425140380859375;
    float _2398 = ((cbLight._m0[_2347].x * _2353) * _2391) + (((cbLight._m0[_2357].x * _2319) * _2366) * _2389);
    float _2399 = ((_2353 * cbLight._m0[_2347].y) * _2391) + (((cbLight._m0[_2357].y * _2321) * _2366) * _2389);
    float _2400 = ((_2353 * cbLight._m0[_2347].z) * _2391) + (((cbLight._m0[_2357].z * _2323) * _2366) * _2389);
    uvec4 _2404 = floatBitsToUint(cbLight._m0[_2330 + 12u]);
    bool _2406 = _2404.x == 0u;
    float _2508;
    float _2510;
    float _2512;
    if (_2406)
    {
        _2508 = _2398;
        _2510 = _2399;
        _2512 = _2400;
    }
    else
    {
        uint _2516 = _2330 + 6u;
        float _2532 = (dot(vec3(cbLight._m0[_2330 + 2u].xyz), vec3(_822, _823, _824)) * 0.5) + 0.5;
        float _2533 = _2532 * _2532;
        float _4715 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2534 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
        float _2535 = isnan(1.0) ? _2345 : (isnan(_2345) ? 1.0 : min(_2345, 1.0));
        _2508 = (((cbLight._m0[_2516].x * 0.3183098733425140380859375) * _2534) * _2535) + _2398;
        _2510 = (((cbLight._m0[_2516].y * 0.3183098733425140380859375) * _2534) * _2535) + _2399;
        _2512 = (((cbLight._m0[_2516].z * 0.3183098733425140380859375) * _2534) * _2535) + _2400;
    }
    bool _2515 = _2404.y == 0u;
    float _2570;
    float _2572;
    float _2574;
    if (_2515)
    {
        _2570 = _2508;
        _2572 = _2510;
        _2574 = _2512;
    }
    else
    {
        uint _2743 = _2330 + 7u;
        float _2759 = (dot(vec3(cbLight._m0[_2330 + 3u].xyz), vec3(_822, _823, _824)) * 0.5) + 0.5;
        float _2760 = _2759 * _2759;
        float _4731 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
        float _2761 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
        float _2762 = isnan(1.0) ? _2346 : (isnan(_2346) ? 1.0 : min(_2346, 1.0));
        _2570 = (((cbLight._m0[_2743].x * 0.3183098733425140380859375) * _2761) * _2762) + _2508;
        _2572 = (((cbLight._m0[_2743].y * 0.3183098733425140380859375) * _2761) * _2762) + _2510;
        _2574 = (((cbLight._m0[_2743].z * 0.3183098733425140380859375) * _2761) * _2762) + _2512;
    }
    uint _2577 = _2330 + 8u;
    float _2590 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2330].w)) * _825) * 0.949999988079071044921875);
    float _2591 = _2590 * _2590;
    float _2592 = cbLight._m0[_2330].x + _901;
    float _2593 = cbLight._m0[_2330].y + _902;
    float _2594 = cbLight._m0[_2330].z + _903;
    float _2598 = inversesqrt(dot(vec3(_2592, _2593, _2594), vec3(_2592, _2593, _2594)));
    float _2599 = _2598 * _2592;
    float _2600 = _2598 * _2593;
    float _2601 = _2598 * _2594;
    float _2602 = dot(vec3(_822, _823, _824), vec3(cbLight._m0[_2330].xyz));
    float _4747 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
    float _2605 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
    float _4758 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _2606 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
    float _2607 = dot(vec3(_822, _823, _824), vec3(_2599, _2600, _2601));
    float _4769 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
    float _2610 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
    float _2611 = dot(vec3(cbLight._m0[_2330].xyz), vec3(_2599, _2600, _2601));
    float _4780 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
    float _2615 = _2591 * _2591;
    float _2619 = ((_2610 * _2610) * (_2615 + (-1.0))) + 1.0;
    float _2627 = exp2(log2(1.0 - (isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0)))) * 5.0);
    float _2628 = 0.959999978542327880859375 - _980;
    float _2630 = 0.959999978542327880859375 - _981;
    float _2631 = 0.959999978542327880859375 - _982;
    float _2638 = 1.0 - _2591;
    float _2649 = (0.5 / (((_2606 * ((_2605 * _2638) + _2591)) + 9.9999999392252902907785028219223e-09) + (((_2606 * _2638) + _2591) * _2605))) * _2605;
    float _4791 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
    float _2651 = (isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0))) * (_2615 / ((_2619 * _2619) * 3.141590118408203125));
    uint _2665 = _2330 + 9u;
    float _2676 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2370].w)) * _825) * 0.949999988079071044921875);
    float _2677 = _2676 * _2676;
    float _2678 = cbLight._m0[_2370].x + _901;
    float _2679 = cbLight._m0[_2370].y + _902;
    float _2680 = cbLight._m0[_2370].z + _903;
    float _2684 = inversesqrt(dot(vec3(_2678, _2679, _2680), vec3(_2678, _2679, _2680)));
    float _2685 = _2684 * _2678;
    float _2686 = _2684 * _2679;
    float _2687 = _2684 * _2680;
    float _2688 = dot(vec3(_822, _823, _824), vec3(cbLight._m0[_2370].xyz));
    float _4802 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
    float _2691 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
    float _2692 = dot(vec3(_822, _823, _824), vec3(_2685, _2686, _2687));
    float _4813 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
    float _2695 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
    float _2696 = dot(vec3(cbLight._m0[_2370].xyz), vec3(_2685, _2686, _2687));
    float _4824 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
    float _2700 = _2677 * _2677;
    float _2704 = ((_2695 * _2695) * (_2700 + (-1.0))) + 1.0;
    float _2711 = exp2(log2(1.0 - (isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0)))) * 5.0);
    float _2718 = 1.0 - _2677;
    float _2728 = (0.5 / (((_2606 * ((_2691 * _2718) + _2677)) + 9.9999999392252902907785028219223e-09) + (((_2606 * _2718) + _2677) * _2691))) * _2691;
    float _4835 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
    float _2730 = (isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0))) * (_2700 / ((_2704 * _2704) * 3.141590118408203125));
    float _2740 = (((((_2711 * _2628) + _983) * cbLight._m0[_2665].x) * _2730) * _2353) + ((((cbLight._m0[_2577].x * _2319) * ((_2627 * _2628) + _983)) * _2651) * _2366);
    float _2741 = (((((_2711 * _2630) + _985) * cbLight._m0[_2665].y) * _2730) * _2353) + ((((cbLight._m0[_2577].y * _2321) * ((_2627 * _2630) + _985)) * _2651) * _2366);
    float _2742 = (((((_2711 * _2631) + _986) * cbLight._m0[_2665].z) * _2730) * _2353) + ((((cbLight._m0[_2577].z * _2323) * ((_2627 * _2631) + _986)) * _2651) * _2366);
    float _2798;
    float _2800;
    float _2802;
    if (_2406)
    {
        _2798 = _2740;
        _2800 = _2741;
        _2802 = _2742;
    }
    else
    {
        uint _2804 = _2330 + 2u;
        uint _2808 = _2330 + 10u;
        float _2822 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2804].w)) * _825) * 0.949999988079071044921875);
        float _2823 = _2822 * _2822;
        float _2824 = cbLight._m0[_2804].x + _901;
        float _2825 = cbLight._m0[_2804].y + _902;
        float _2826 = cbLight._m0[_2804].z + _903;
        float _2830 = inversesqrt(dot(vec3(_2824, _2825, _2826), vec3(_2824, _2825, _2826)));
        float _2831 = _2830 * _2824;
        float _2832 = _2830 * _2825;
        float _2833 = _2830 * _2826;
        float _2834 = dot(vec3(_822, _823, _824), vec3(cbLight._m0[_2804].xyz));
        float _4846 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
        float _2837 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
        float _2838 = dot(vec3(_822, _823, _824), vec3(_2831, _2832, _2833));
        float _4857 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
        float _2841 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
        float _2842 = dot(vec3(cbLight._m0[_2804].xyz), vec3(_2831, _2832, _2833));
        float _4868 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
        float _2846 = _2823 * _2823;
        float _2850 = ((_2841 * _2841) * (_2846 + (-1.0))) + 1.0;
        float _2857 = exp2(log2(1.0 - (isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0)))) * 5.0);
        float _2864 = 1.0 - _2823;
        float _2874 = (0.5 / (((_2606 * ((_2837 * _2864) + _2823)) + 9.9999999392252902907785028219223e-09) + (((_2606 * _2864) + _2823) * _2837))) * _2837;
        float _4879 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
        float _2876 = (isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0))) * (_2846 / ((_2850 * _2850) * 3.141590118408203125));
        float _2877 = isnan(1.0) ? _2345 : (isnan(_2345) ? 1.0 : min(_2345, 1.0));
        _2798 = (((((_2857 * _2628) + _983) * cbLight._m0[_2808].x) * _2876) * _2877) + _2740;
        _2800 = (((((_2857 * _2630) + _985) * cbLight._m0[_2808].y) * _2876) * _2877) + _2741;
        _2802 = (((((_2857 * _2631) + _986) * cbLight._m0[_2808].z) * _2876) * _2877) + _2742;
    }
    float _2908;
    float _2910;
    float _2912;
    if (_2515)
    {
        _2908 = _2798;
        _2910 = _2800;
        _2912 = _2802;
    }
    else
    {
        uint _2919 = _2330 + 3u;
        uint _2923 = _2330 + 11u;
        float _2937 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2919].w)) * _825) * 0.949999988079071044921875);
        float _2938 = _2937 * _2937;
        float _2939 = cbLight._m0[_2919].x + _901;
        float _2940 = cbLight._m0[_2919].y + _902;
        float _2941 = cbLight._m0[_2919].z + _903;
        float _2945 = inversesqrt(dot(vec3(_2939, _2940, _2941), vec3(_2939, _2940, _2941)));
        float _2946 = _2945 * _2939;
        float _2947 = _2945 * _2940;
        float _2948 = _2945 * _2941;
        float _2949 = dot(vec3(_822, _823, _824), vec3(cbLight._m0[_2919].xyz));
        float _4895 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
        float _2952 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
        float _2953 = dot(vec3(_822, _823, _824), vec3(_2946, _2947, _2948));
        float _4906 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
        float _2956 = isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0));
        float _2957 = dot(vec3(cbLight._m0[_2919].xyz), vec3(_2946, _2947, _2948));
        float _4917 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
        float _2961 = _2938 * _2938;
        float _2965 = ((_2956 * _2956) * (_2961 + (-1.0))) + 1.0;
        float _2972 = exp2(log2(1.0 - (isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0)))) * 5.0);
        float _2979 = 1.0 - _2938;
        float _2989 = (0.5 / (((_2606 * ((_2952 * _2979) + _2938)) + 9.9999999392252902907785028219223e-09) + (((_2606 * _2979) + _2938) * _2952))) * _2952;
        float _4928 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
        float _2991 = (isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0))) * (_2961 / ((_2965 * _2965) * 3.141590118408203125));
        float _2992 = isnan(1.0) ? _2346 : (isnan(_2346) ? 1.0 : min(_2346, 1.0));
        _2908 = (((((_2972 * _2628) + _983) * cbLight._m0[_2923].x) * _2991) * _2992) + _2798;
        _2910 = (((((_2972 * _2630) + _985) * cbLight._m0[_2923].y) * _2991) * _2992) + _2800;
        _2912 = (((((_2972 * _2631) + _986) * cbLight._m0[_2923].z) * _2991) * _2992) + _2802;
    }
    float _3058;
    float _3060;
    float _3062;
    float _3064;
    float _3066;
    float _3068;
    if (_2328.y == 0u)
    {
        uvec4 _3013 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3014 = _3013.x;
        uint _3025 = uint((float(_3013.y) * floor(float(uint(cbSceneParam._m0[85u].y * _922) / _3014))) + floor(float(uint(cbSceneParam._m0[85u].x * _921) / _3014)));
        float _3035 = (log2(_2106 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3036 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
        uint _3039 = uint(isnan(14.0) ? _3036 : (isnan(_3036) ? 14.0 : min(_3036, 14.0)));
        uvec4 _3044 = texelFetch(g_lightClusterGridBuffer, int(((_3039 << 2u) + (_3025 << 6u)) >> 2u));
        uint _3045 = _3044.x;
        uint _3046 = _3013.z;
        float _3125;
        float _3127;
        float _3129;
        float _3131;
        float _3133;
        float _3135;
        if (((((1u << ((_3046 >> 4u) & 15u)) + 4294967295u) & _3045) == 0u) || ((_3046 & 240u) == 0u))
        {
            _3125 = 0.0;
            _3127 = 0.0;
            _3129 = 0.0;
            _3131 = 0.0;
            _3133 = 0.0;
            _3135 = 0.0;
        }
        else
        {
            float _3126;
            float _3128;
            float _3130;
            float _3132;
            float _3134;
            float _3136;
            float _3278 = 0.0;
            float _3279 = 0.0;
            float _3280 = 0.0;
            float _3281 = 0.0;
            float _3282 = 0.0;
            float _3283 = 0.0;
            uint _3284 = 0u;
            uint _3293;
            bool _3294;
            for (;;)
            {
                _3293 = texelFetch(g_lightClassification, int((((_3039 << 5u) + (_3025 << 9u)) + (_3284 << 2u)) >> 2u)).x;
                _3294 = _3293 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3294)
                {
                    frontier_phi_71_pred = _3283;
                    frontier_phi_71_pred_1 = _3282;
                    frontier_phi_71_pred_2 = _3281;
                    frontier_phi_71_pred_3 = _3280;
                    frontier_phi_71_pred_4 = _3279;
                    frontier_phi_71_pred_5 = _3278;
                }
                else
                {
                    float _3423;
                    float _3424;
                    float _3425;
                    float _3426;
                    float _3427;
                    float _3428;
                    uint _3429;
                    _3423 = _3278;
                    _3424 = _3279;
                    _3425 = _3280;
                    _3426 = _3281;
                    _3427 = _3282;
                    _3428 = _3283;
                    _3429 = _3293;
                    float _3350;
                    float _3351;
                    float _3352;
                    float _3353;
                    float _3354;
                    float _3355;
                    for (;;)
                    {
                        uint _3433 = uint(findLSB(_3429)) + (_3284 << 5u);
                        uint _3430 = (_3429 + 4294967295u) & _3429;
                        uint _3435 = _3433 * 48u;
                        vec4 _3449 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3435)).x, texelFetch(g_PointLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3435 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3435 + 3u)).x));
                        uint _3455 = (_3433 * 48u) + 4u;
                        vec4 _3468 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3455)).x, texelFetch(g_PointLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3455 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3455 + 3u)).x));
                        uint _3474 = (_3433 * 48u) + 8u;
                        vec3 _3485 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3474)).x, texelFetch(g_PointLightRenderingBuffer, int(_3474 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3474 + 2u)).x));
                        float _3489 = _3449.x - _2104;
                        float _3490 = _3449.y - _2105;
                        float _3491 = _3449.z - _2106;
                        float _3492 = dot(vec3(_3489, _3490, _3491), vec3(_3489, _3490, _3491));
                        float _3495 = inversesqrt(_3492);
                        float _3496 = _3495 * _3489;
                        float _3497 = _3495 * _3490;
                        float _3498 = _3495 * _3491;
                        float _3499 = dot(vec3(_940, _943, _946), vec3(_3496, _3497, _3498));
                        float _3504 = 1.0 - (_3492 * _3449.w);
                        float _4954 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                        float _3505 = isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0));
                        float _3506 = sqrt(_3492) * _3468.w;
                        float _3509 = 1.39999997615814208984375 / (_3506 + 1.39999997615814208984375);
                        float _3510 = _3509 * _3509;
                        float _3513 = ((1.0 - _3510) * _3499) + _3510;
                        float _3516 = _3506 * _3506;
                        float _3520 = ((isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0))) * _3505) / ((_3516 * 0.699999988079071044921875) + 1.0);
                        float _3524 = (-0.0) - _2104;
                        float _3525 = (-0.0) - _2105;
                        float _3526 = (-0.0) - _2106;
                        float _3530 = inversesqrt(dot(vec3(_3524, _3525, _3526), vec3(_3524, _3525, _3526)));
                        float _3531 = _3530 * _3524;
                        float _3532 = _3530 * _3525;
                        float _3533 = _3530 * _3526;
                        float _3540 = exp2(log2(1.0 / ((_3516 * 3.5) + 5.0)) * 0.25);
                        float _3541 = 1.0 - _1015;
                        float _3548 = sqrt(1.0 - ((1.0 - (_3541 * _3541)) * (1.0 - (_3540 * _3540))));
                        float _3549 = _3548 * _3548;
                        float _3550 = _3549 * _3549;
                        float _3551 = _3531 + _3496;
                        float _3552 = _3532 + _3497;
                        float _3553 = _3533 + _3498;
                        float _3557 = inversesqrt(dot(vec3(_3551, _3552, _3553), vec3(_3551, _3552, _3553)));
                        float _3561 = dot(vec3(_940, _943, _946), vec3(_3531, _3532, _3533));
                        float _4970 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                        float _3564 = isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0));
                        float _3565 = dot(vec3(_940, _943, _946), vec3(_3557 * _3551, _3557 * _3552, _3557 * _3553));
                        float _4981 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                        float _3568 = isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0));
                        float _3572 = ((_3568 * _3568) * (_3550 + (-1.0))) + 1.0;
                        float _3573 = _3509 * _3549;
                        float _3574 = _3573 * _3573;
                        float _3577 = ((1.0 - _3574) * _3499) + _3574;
                        float _4992 = isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0));
                        float _3578 = isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0));
                        float _3579 = 1.0 - _3549;
                        float _3589 = (0.5 / (((_3578 * ((_3564 * _3579) + _3549)) + 9.9999999392252902907785028219223e-09) + (((_3578 * _3579) + _3549) * _3564))) * _3578;
                        float _5003 = isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0));
                        float _3600 = (((_3550 * 3.1415927410125732421875) * (isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0)))) / ((_3572 * _3572) * ((_3516 * 2.1991131305694580078125) + 3.141590118408203125))) * _3505;
                        _3353 = (_3520 * _3468.x) + _3426;
                        _3354 = (_3520 * _3468.y) + _3427;
                        _3355 = (_3520 * _3468.z) + _3428;
                        _3350 = (_3600 * _3485.x) + _3423;
                        _3351 = (_3600 * _3485.y) + _3424;
                        _3352 = (_3600 * _3485.z) + _3425;
                        if (_3430 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3423 = _3350;
                            _3424 = _3351;
                            _3425 = _3352;
                            _3426 = _3353;
                            _3427 = _3354;
                            _3428 = _3355;
                            _3429 = _3430;
                        }
                    }
                    frontier_phi_71_pred = _3355;
                    frontier_phi_71_pred_1 = _3354;
                    frontier_phi_71_pred_2 = _3353;
                    frontier_phi_71_pred_3 = _3352;
                    frontier_phi_71_pred_4 = _3351;
                    frontier_phi_71_pred_5 = _3350;
                }
                _3136 = frontier_phi_71_pred;
                _3134 = frontier_phi_71_pred_1;
                _3132 = frontier_phi_71_pred_2;
                _3130 = frontier_phi_71_pred_3;
                _3128 = frontier_phi_71_pred_4;
                _3126 = frontier_phi_71_pred_5;
                uint _3285 = _3284 + 1u;
                if (_3285 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3278 = _3126;
                    _3279 = _3128;
                    _3280 = _3130;
                    _3281 = _3132;
                    _3282 = _3134;
                    _3283 = _3136;
                    _3284 = _3285;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3125 = _3126;
            _3127 = _3128;
            _3129 = _3130;
            _3131 = _3132;
            _3133 = _3134;
            _3135 = _3136;
        }
        uvec4 _3139 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3140 = _3139.z;
        uint _3142 = (_3140 >> 8u) & 15u;
        float _3246;
        float _3248;
        float _3250;
        float _3252;
        float _3254;
        float _3256;
        if (((4294967295u << _3142) & _3045) == 0u)
        {
            _3246 = _3125;
            _3248 = _3127;
            _3250 = _3129;
            _3252 = _3131;
            _3254 = _3133;
            _3256 = _3135;
        }
        else
        {
            float _3271 = inversesqrt(dot(vec3(_2104, _2105, _2106), vec3(_2104, _2105, _2106)));
            float _3272 = _3271 * _2104;
            float _3273 = _3271 * _2105;
            float _3274 = _3271 * _2106;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3142 < ((_3140 >> 12u) & 15u))
            {
                float _3247;
                float _3249;
                float _3251;
                float _3253;
                float _3255;
                float _3257;
                float _3406 = _3125;
                float _3407 = _3127;
                float _3408 = _3129;
                float _3409 = _3131;
                float _3410 = _3133;
                float _3411 = _3135;
                uint _3412 = _3142;
                uint _3421;
                bool _3422;
                for (;;)
                {
                    _3421 = texelFetch(g_lightClassification, int((((_3039 << 5u) + (_3025 << 9u)) + (_3412 << 2u)) >> 2u)).x;
                    _3422 = _3421 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3422)
                    {
                        frontier_phi_82_pred = _3411;
                        frontier_phi_82_pred_1 = _3410;
                        frontier_phi_82_pred_2 = _3409;
                        frontier_phi_82_pred_3 = _3408;
                        frontier_phi_82_pred_4 = _3407;
                        frontier_phi_82_pred_5 = _3406;
                    }
                    else
                    {
                        float _3614;
                        float _3615;
                        float _3616;
                        float _3617;
                        float _3618;
                        float _3619;
                        float _3907;
                        float _3908;
                        float _3909;
                        float _3910;
                        float _3911;
                        float _3912;
                        float _3627 = _3406;
                        float _3628 = _3407;
                        float _3629 = _3408;
                        float _3630 = _3409;
                        float _3631 = _3410;
                        float _3632 = _3411;
                        uint _3633 = _3421;
                        uint _3634;
                        vec4 _3659;
                        float _3660;
                        vec4 _3675;
                        vec3 _3687;
                        vec4 _3702;
                        vec4 _3717;
                        float _3763;
                        bool _3764;
                        for (;;)
                        {
                            uint _3644 = ((_3412 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3633));
                            _3634 = (_3633 + 4294967295u) & _3633;
                            uint _3646 = _3644 * 40u;
                            _3659 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3646)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 3u)).x));
                            _3660 = _3659.w;
                            uint _3662 = (_3644 * 40u) + 4u;
                            _3675 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3662)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 3u)).x));
                            uint _3677 = (_3644 * 40u) + 8u;
                            _3687 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3677)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 2u)).x));
                            uint _3689 = (_3644 * 40u) + 16u;
                            _3702 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3689)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 3u)).x));
                            uint _3704 = (_3644 * 40u) + 20u;
                            _3717 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3704)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 3u)).x));
                            uint _3719 = (_3644 * 40u) + 24u;
                            vec4 _3732 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3719)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 3u)).x));
                            uint _3738 = (_3644 * 40u) + 28u;
                            vec4 _3751 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3738)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 3u)).x));
                            _3763 = fma(_2106, _3751.z, fma(_2105, _3751.y, _3751.x * _2104)) + _3751.w;
                            _3764 = !((fma(_2106, _3732.z, fma(_2105, _3732.y, _3732.x * _2104)) + _3732.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3764)
                            {
                                float _3791 = _3659.x - _2104;
                                float _3792 = _3659.y - _2105;
                                float _3793 = _3659.z - _2106;
                                float _3794 = dot(vec3(_3791, _3792, _3793), vec3(_3791, _3792, _3793));
                                float _3797 = inversesqrt(_3794);
                                float _3798 = _3797 * _3791;
                                float _3799 = _3797 * _3792;
                                float _3800 = _3797 * _3793;
                                float _3804 = 1.0 - (_3794 / (_3660 * _3660));
                                float _5014 = isnan(0.0) ? _3804 : (isnan(_3804) ? 0.0 : max(_3804, 0.0));
                                float _3805 = isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0));
                                float _3809 = sqrt(_3794) * _3675.w;
                                float _3811 = 1.39999997615814208984375 / (_3809 + 1.39999997615814208984375);
                                float _3812 = _3811 * _3811;
                                float _3815 = ((1.0 - _3812) * dot(vec3(_3798, _3799, _3800), vec3(_940, _943, _946))) + _3812;
                                float _3818 = _3809 * _3809;
                                float _3822 = (fma(_2106, _3702.z, fma(_2105, _3702.y, _3702.x * _2104)) + _3702.w) / _3763;
                                float _3823 = (fma(_2106, _3717.z, fma(_2105, _3717.y, _3717.x * _2104)) + _3717.w) / _3763;
                                float _3827 = 1.0 - dot(vec2(_3822, _3823), vec2(_3822, _3823));
                                float _5030 = isnan(0.0) ? _3827 : (isnan(_3827) ? 0.0 : max(_3827, 0.0));
                                float _3828 = isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0));
                                float _3829 = _3828 * (((isnan(0.0) ? _3815 : (isnan(_3815) ? 0.0 : max(_3815, 0.0))) * _3805) / ((_3818 * 0.699999988079071044921875) + 1.0));
                                float _3841 = exp2(log2(1.0 / ((_3818 * 3.5) + 5.0)) * 0.25);
                                float _3842 = 1.0 - _1015;
                                float _3849 = sqrt(1.0 - ((1.0 - (_3842 * _3842)) * (1.0 - (_3841 * _3841))));
                                float _3850 = _3849 * _3849;
                                float _3851 = _3850 * _3850;
                                float _3852 = _3798 - _3272;
                                float _3853 = _3799 - _3273;
                                float _3854 = _3800 - _3274;
                                float _3858 = inversesqrt(dot(vec3(_3852, _3853, _3854), vec3(_3852, _3853, _3854)));
                                float _3862 = dot(vec3(_940, _943, _946), vec3((-0.0) - _3272, (-0.0) - _3273, (-0.0) - _3274));
                                float _5041 = isnan(0.0) ? _3862 : (isnan(_3862) ? 0.0 : max(_3862, 0.0));
                                float _3865 = isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0));
                                float _3866 = dot(vec3(_940, _943, _946), vec3(_3858 * _3852, _3858 * _3853, _3858 * _3854));
                                float _5052 = isnan(0.0) ? _3866 : (isnan(_3866) ? 0.0 : max(_3866, 0.0));
                                float _3869 = isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0));
                                float _3873 = ((_3869 * _3869) * (_3851 + (-1.0))) + 1.0;
                                float _3874 = _3811 * _3850;
                                float _3875 = _3874 * _3874;
                                float _3881 = ((1.0 - _3875) * dot(vec3(_940, _943, _946), vec3(_3798, _3799, _3800))) + _3875;
                                float _5063 = isnan(0.0) ? _3881 : (isnan(_3881) ? 0.0 : max(_3881, 0.0));
                                float _3882 = isnan(1.0) ? _5063 : (isnan(_5063) ? 1.0 : min(_5063, 1.0));
                                float _3883 = 1.0 - _3850;
                                float _3893 = (0.5 / (((_3882 * ((_3865 * _3883) + _3850)) + 9.9999999392252902907785028219223e-09) + (((_3882 * _3883) + _3850) * _3865))) * _3882;
                                float _5074 = isnan(0.0) ? _3893 : (isnan(_3893) ? 0.0 : max(_3893, 0.0));
                                float _3903 = (_3828 * _3805) * (((_3851 * 3.1415927410125732421875) * (isnan(1.0) ? _5074 : (isnan(_5074) ? 1.0 : min(_5074, 1.0)))) / ((_3873 * _3873) * ((_3818 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3829 * _3675.z;
                                frontier_phi_88_pred_1 = _3829 * _3675.y;
                                frontier_phi_88_pred_2 = _3829 * _3675.x;
                                frontier_phi_88_pred_3 = _3903 * _3687.z;
                                frontier_phi_88_pred_4 = _3903 * _3687.y;
                                frontier_phi_88_pred_5 = _3903 * _3687.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3912 = frontier_phi_88_pred;
                            _3911 = frontier_phi_88_pred_1;
                            _3910 = frontier_phi_88_pred_2;
                            _3909 = frontier_phi_88_pred_3;
                            _3908 = frontier_phi_88_pred_4;
                            _3907 = frontier_phi_88_pred_5;
                            _3617 = _3910 + _3630;
                            _3618 = _3911 + _3631;
                            _3619 = _3912 + _3632;
                            _3614 = _3907 + _3627;
                            _3615 = _3908 + _3628;
                            _3616 = _3909 + _3629;
                            if (_3634 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3627 = _3614;
                                _3628 = _3615;
                                _3629 = _3616;
                                _3630 = _3617;
                                _3631 = _3618;
                                _3632 = _3619;
                                _3633 = _3634;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3619;
                        frontier_phi_82_pred_1 = _3618;
                        frontier_phi_82_pred_2 = _3617;
                        frontier_phi_82_pred_3 = _3616;
                        frontier_phi_82_pred_4 = _3615;
                        frontier_phi_82_pred_5 = _3614;
                    }
                    _3257 = frontier_phi_82_pred;
                    _3255 = frontier_phi_82_pred_1;
                    _3253 = frontier_phi_82_pred_2;
                    _3251 = frontier_phi_82_pred_3;
                    _3249 = frontier_phi_82_pred_4;
                    _3247 = frontier_phi_82_pred_5;
                    uint _3413 = _3412 + 1u;
                    if (_3413 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3406 = _3247;
                        _3407 = _3249;
                        _3408 = _3251;
                        _3409 = _3253;
                        _3410 = _3255;
                        _3411 = _3257;
                        _3412 = _3413;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3253;
                frontier_phi_63_64_ladder_1 = _3257;
                frontier_phi_63_64_ladder_2 = _3255;
                frontier_phi_63_64_ladder_3 = _3251;
                frontier_phi_63_64_ladder_4 = _3249;
                frontier_phi_63_64_ladder_5 = _3247;
            }
            else
            {
                frontier_phi_63_64_ladder = _3131;
                frontier_phi_63_64_ladder_1 = _3135;
                frontier_phi_63_64_ladder_2 = _3133;
                frontier_phi_63_64_ladder_3 = _3129;
                frontier_phi_63_64_ladder_4 = _3127;
                frontier_phi_63_64_ladder_5 = _3125;
            }
            _3246 = frontier_phi_63_64_ladder_5;
            _3248 = frontier_phi_63_64_ladder_4;
            _3250 = frontier_phi_63_64_ladder_3;
            _3252 = frontier_phi_63_64_ladder;
            _3254 = frontier_phi_63_64_ladder_2;
            _3256 = frontier_phi_63_64_ladder_1;
        }
        float _3261 = isnan(1.0) ? _999 : (isnan(_999) ? 1.0 : min(_999, 1.0));
        _3058 = (_3261 * _3252) + _2570;
        _3060 = (_3261 * _3254) + _2572;
        _3062 = (_3261 * _3256) + _2574;
        _3064 = ((_3246 * _983) * _3261) + _2908;
        _3066 = ((_3248 * _985) * _3261) + _2910;
        _3068 = ((_3250 * _986) * _3261) + _2912;
    }
    else
    {
        _3058 = _2570;
        _3060 = _2572;
        _3062 = _2574;
        _3064 = _2908;
        _3066 = _2910;
        _3068 = _2912;
    }
    float _5090 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _5101 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _5112 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _3085 = ((isnan(1.0) ? _5090 : (isnan(_5090) ? 1.0 : min(_5090, 1.0))) * (_3058 + ((isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))) * _999))) + ((_3064 + ((isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0))) * _1838)) * cbPerFrame._m0[3u].x);
    float _3086 = ((isnan(1.0) ? _5101 : (isnan(_5101) ? 1.0 : min(_5101, 1.0))) * (_3060 + ((isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))) * _999))) + ((_3066 + ((isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0))) * _1838)) * cbPerFrame._m0[3u].x);
    float _3087 = ((isnan(1.0) ? _5112 : (isnan(_5112) ? 1.0 : min(_5112, 1.0))) * (_3062 + ((isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))) * _999))) + ((_3068 + ((isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0))) * _1838)) * cbPerFrame._m0[3u].x);
    uint _3088 = _265 + 6u;
    float _3096 = _921 / cbSceneParam._m0[86u].x;
    float _3097 = _922 / cbSceneParam._m0[86u].y;
    vec4 _3111 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3096, _3097, (log2((isnan(cbSceneParam._m0[77u].w) ? _844 : (isnan(_844) ? cbSceneParam._m0[77u].w : min(_844, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3113 = _3111.x;
    float _3114 = _3111.y;
    float _3115 = _3111.z;
    float _3116 = _3111.w;
    float _3188;
    float _3190;
    float _3192;
    float _3194;
    if (_844 > cbSceneParam._m0[78u].w)
    {
        float _3150 = isnan(_844) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _844 : min(cbSceneParam._m0[80u].w, _844));
        float _3151 = _3150 / _844;
        float _3162 = _3151 * _894;
        float _3163 = _895 * _3151;
        float _3164 = (-0.0) - _3163;
        float _3166 = _3151 * _896;
        float _3168 = (cbSceneParam._m0[77u].w * _3164) / _3150;
        float _3169 = _3168 + cbSceneParam._m0[79u].w;
        float _3170 = cbSceneParam._m0[79u].w - _3163;
        float _3176 = sqrt(((_3162 * _3162) + (_3163 * _3163)) + (_3166 * _3166));
        float _3179 = (1.0 - (cbSceneParam._m0[77u].w / _3150)) * _3176;
        float _3184 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3186 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3363;
        if (abs((_3164 - _3168) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3363 = ((((_3169 > 0.0) ? exp2(_3184 * _3169) : (2.0 - exp2(_3186 * _3169))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3179;
        }
        else
        {
            float _3307 = 1.0 / cbSceneParam._m0[80u].x;
            float _3308 = isnan(_3170) ? _3169 : (isnan(_3169) ? _3170 : max(_3169, _3170));
            float _3309 = isnan(_3170) ? _3169 : (isnan(_3169) ? _3170 : min(_3169, _3170));
            float _3318 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : min(_3308, 0.0));
            float _3319 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : min(_3309, 0.0));
            _3363 = ((abs(_3176 / _3164) * cbSceneParam._m0[80u].y) * ((((_3318 - _3319) * 2.0) - ((exp2(_3184 * (isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0)))) - exp2(_3184 * (isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0))))) * _3307)) - ((exp2(_3186 * _3318) - exp2(_3186 * _3319)) * _3307))) + (_3179 * cbSceneParam._m0[80u].z);
        }
        vec4 _3365 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3096, _3097, 1.0), 0.0);
        float _3374 = exp2((_3363 * (-1.44269502162933349609375)) * (1.0 - _3365.w));
        float _3375 = log2(_3374);
        float _3391 = log2(_3116);
        _3188 = (exp2(_3391 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3375 * cbSceneParam._m0[78u].x)) * _3365.x) / cbSceneParam._m0[78u].x)) + _3113;
        _3190 = (exp2(_3391 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3375 * cbSceneParam._m0[78u].y)) * _3365.y) / cbSceneParam._m0[78u].y)) + _3114;
        _3192 = (exp2(_3391 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3375 * cbSceneParam._m0[78u].z)) * _3365.z) / cbSceneParam._m0[78u].z)) + _3115;
        _3194 = _3374 * _3116;
    }
    else
    {
        _3188 = _3113;
        _3190 = _3114;
        _3192 = _3115;
        _3194 = _3116;
    }
    bool _3401;
    vec4 _3204;
    vec4 _3226;
    float _3228;
    float _3232;
    float _3233;
    float _3234;
    float _3235;
    bool _3245;
    for (;;)
    {
        _3204 = cbMatDynParam._m0[0u];
        float _3206 = roundEven(_3204.y);
        bool _3207 = _3206 == 3.0;
        float _3208 = log2(_3194);
        float _3215 = exp2(_3208 * cbSceneParam._m0[78u].x) * _3085;
        float _3216 = exp2(_3208 * cbSceneParam._m0[78u].y) * _3086;
        float _3217 = exp2(_3208 * cbSceneParam._m0[78u].z) * _3087;
        float _3224 = _910 + (-0.5);
        _3226 = cbMtdParam._m0[1u];
        _3228 = _3226.y * _3224;
        float _3231 = (_3206 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3232 = _3231 * (_3207 ? _3215 : (_3215 + (cbSceneParam._m0[72u].w * _3188)));
        _3233 = _3231 * (_3207 ? _3216 : (_3216 + (cbSceneParam._m0[72u].w * _3190)));
        _3234 = _3231 * (_3207 ? _3217 : (_3217 + (cbSceneParam._m0[72u].w * _3192)));
        _3235 = _3224 * 0.999000012874603271484375;
        _3245 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3245)
        {
            if ((cbInstanceData._m0[_265 + 7u].x + _3235) < 0.5)
            {
                _3401 = true;
                break;
            }
        }
        uint _3342 = _959 + uint(_3204.w);
        if ((cbInstanceData._m0[_3342].w < 1.0) && ((cbInstanceData._m0[_3342].w + _3235) < 0.5))
        {
            _3401 = true;
            break;
        }
        if ((_3228 + 1.0) < _3226.x)
        {
            _3401 = true;
            break;
        }
        _3401 = false;
        break;
    }
    float _3605;
    if (_3401)
    {
        discard_state = true;
        _3605 = 0.0;
    }
    else
    {
        _3605 = cbInstanceData._m0[_3088].w;
    }
    SV_Target.x = _3232;
    SV_Target.y = _3233;
    SV_Target.z = _3234;
    SV_Target.w = _3605;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3088].w;
    discard_exit();
}


