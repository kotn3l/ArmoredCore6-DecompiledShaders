#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1301;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _246 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _246 + 1u;
    uint _256 = _246 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _293 = _287.x * cbMtdParam._m0[11u].x;
    float _294 = _287.y * cbMtdParam._m0[11u].y;
    float _295 = _287.z * cbMtdParam._m0[11u].z;
    vec4 _314 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _353 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _355 = _353.x;
    float _367 = dot(vec4(_355, _353.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _384 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_355 - _367) * cbMtdParam._m0[24u].y) + _367) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3649 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _385 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
    float _392 = (_385 * ((_314.x * cbMtdParam._m0[12u].x) - _293)) + _293;
    float _393 = (_385 * ((_314.y * cbMtdParam._m0[12u].y) - _294)) + _294;
    float _394 = (_385 * ((_314.z * cbMtdParam._m0[12u].z) - _295)) + _295;
    vec4 _411 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _266) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _267) + cbTextureTilingScale._m0[3u].w));
    vec4 _431 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _433 = _431.x;
    float _443 = dot(vec4(_433, _431.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _457 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_433 - _443) * cbMtdParam._m0[24u].y) + _443) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3660 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _458 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
    float _465 = (_458 * ((_411.x * cbMtdParam._m0[13u].x) - _392)) + _392;
    float _466 = (_458 * ((_411.y * cbMtdParam._m0[13u].y) - _393)) + _393;
    float _467 = (_458 * ((_411.z * cbMtdParam._m0[13u].z) - _394)) + _394;
    vec4 _486 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _266) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _267) + cbTextureTilingScale._m0[14u].w));
    vec4 _506 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _523 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _525 = _523.x;
    float _526 = _523.y;
    float _527 = _523.z;
    float _534 = ((_506.x - _525) * _385) + _525;
    float _535 = ((_506.y - _526) * _385) + _526;
    float _536 = ((_506.z - _527) * _385) + _527;
    vec4 _548 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _266) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _267) + cbTextureTilingScale._m0[2u].w));
    float _561 = ((_548.z - _536) * _458) + _536;
    float _564 = ((((_548.x - _534) * _458) + _534) * 2.0) + (-1.0);
    float _566 = ((((_548.y - _535) * _458) + _535) * 2.0) + (-1.0);
    float _567 = dot(vec2(_564, _566), vec2(_564, _566));
    float _3671 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _572 = sqrt(1.0 - (isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))));
    vec4 _585 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _603 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _605 = _603.x;
    float _606 = 1.0 - _605;
    float _619 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_605 - _606) * cbMtdParam._m0[24u].z) + _606) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3682 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _620 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
    float _627 = (_620 * ((_486.x * cbMtdParam._m0[18u].x) - _465)) + _465;
    float _628 = (_620 * ((_486.y * cbMtdParam._m0[18u].y) - _466)) + _466;
    float _629 = (_620 * ((_486.z * cbMtdParam._m0[18u].z) - _467)) + _467;
    vec4 _641 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _655 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _657 = _655.x;
    float _675 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _266) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _267) + cbTextureTilingScale._m0[9u].w)).x - _657) * _385) + _657;
    float _692 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _266) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _267) + cbTextureTilingScale._m0[21u].w)).x - _675) * _458) + _675;
    float _696 = ((_641.x - _692) * cbMtdParam._m0[19u].z) + _692;
    float _698 = _696 - (_696 * _620);
    vec4 _711 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _718 = (_711.x * 2.0) + (-1.0);
    float _719 = (_711.y * 2.0) + (-1.0);
    float _720 = dot(vec2(_718, _719), vec2(_718, _719));
    float _3693 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _728 = (_620 * (_711.z - _561)) + _561;
    float _740 = (((_718 - _564) + (cbMtdParam._m0[21u].x * _564)) * _620) + _564;
    float _741 = (((_719 - _566) + (cbMtdParam._m0[21u].x * _566)) * _620) + _566;
    float _742 = (_620 * (sqrt(1.0 - (isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0)))) - _572)) + _572;
    float _747 = cbMtdParam._m0[22u].x + _585.w;
    float _750 = fma(_742, _233 * NORMAL.x, fma(_741, _240 * TANGENT.x, (_226 * _218) * _740));
    float _753 = fma(_742, _233 * NORMAL.y, fma(_741, _240 * TANGENT.y, (_226 * _219) * _740));
    float _756 = fma(_742, _233 * NORMAL.z, fma(_741, _240 * TANGENT.z, (_226 * _220) * _740));
    float _760 = inversesqrt(dot(vec3(_750, _753, _756), vec3(_750, _753, _756)));
    float _761 = _760 * _750;
    float _762 = _760 * _753;
    float _763 = _760 * _756;
    float _3704 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _764 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
    float _3715 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _3726 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _3737 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _3748 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _3759 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _769 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    float _783 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _824 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _834 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _824);
    float _835 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _824);
    float _836 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _824);
    float _840 = inversesqrt(dot(vec3(_834, _835, _836), vec3(_834, _835, _836)));
    float _841 = _834 * _840;
    float _842 = _835 * _840;
    float _843 = _836 * _840;
    float _849 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _850 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _868 = fma(_763, cbSceneParam._m0[5u].z, fma(_762, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _761));
    float _871 = fma(_763, cbSceneParam._m0[6u].z, fma(_762, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _761));
    float _874 = fma(_763, cbSceneParam._m0[7u].z, fma(_762, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _761));
    uint _888 = (_246 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _894 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0)))) * cbInstanceData._m0[_888].x;
    float _895 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0)))) * cbInstanceData._m0[_888].y;
    float _896 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0)))) * cbInstanceData._m0[_888].z;
    float _3770 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _897 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _3781 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _898 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    float _3792 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _899 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
    float _900 = 1.0 - _769;
    float _901 = _897 * _900;
    float _902 = _898 * _900;
    float _903 = _899 * _900;
    float _908 = (_897 + (-0.039999999105930328369140625)) * _769;
    float _909 = (_898 + (-0.039999999105930328369140625)) * _769;
    float _910 = (_899 + (-0.039999999105930328369140625)) * _769;
    float _911 = _908 + 0.039999999105930328369140625;
    float _913 = _909 + 0.039999999105930328369140625;
    float _914 = _910 + 0.039999999105930328369140625;
    vec4 _923 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _849, cbSceneParam._m0[86u].y * _850));
    float _927 = ((isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0))) * TEXCOORD_5.w) * _923.x;
    float _928 = dot(vec3(_761, _762, _763), vec3(_841, _842, _843));
    float _931 = _928 * 2.0;
    float _935 = (_931 * _761) - _841;
    float _936 = (_931 * _762) - _842;
    float _937 = (_931 * _763) - _843;
    float _941 = abs(dot(vec3(_841, _842, _843), vec3(_761, _762, _763)));
    float _3803 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _943 = sqrt(_764);
    float _956 = exp2((_943 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_943 * 3.0));
    float _962 = (1.0 - _956) * ((_943 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _963 = _956 * _943;
    float _991 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _995 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _999 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1300;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1025 = fma(_999, cbModelParam._m0[26u].z, fma(_995, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _991));
        float _1029 = fma(_999, cbModelParam._m0[27u].z, fma(_995, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _991));
        float _1033 = fma(_999, cbModelParam._m0[28u].z, fma(_995, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _991));
        float _1058 = _991 + _761;
        float _1059 = _995 + _762;
        float _1060 = _999 + _763;
        float _1070 = fma(_1060, cbModelParam._m0[26u].z, fma(_1059, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1058)) - _1025;
        float _1071 = fma(_1060, cbModelParam._m0[27u].z, fma(_1059, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1058)) - _1029;
        float _1072 = fma(_1060, cbModelParam._m0[28u].z, fma(_1059, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1058)) - _1033;
        float _1076 = inversesqrt(dot(vec3(_1070, _1071, _1072), vec3(_1070, _1071, _1072)));
        float _1089 = ((_1076 * _1070) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1025 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1090 = ((_1076 * _1071) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1029 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1091 = ((_1076 * _1072) / cbModelParam._m0[34u].z) + ((((((_1033 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1089, _1090, _1091), 0.0);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1089, _1090, _1091), 0.0);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1089, _1090, _1091), 0.0);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1089, _1090, _1091), 0.0);
        float _1128 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1094.x + (-0.5));
        float _1130 = _1128 * (_1094.y + (-0.5));
        float _1131 = _1128 * (_1094.z + (-0.5));
        float _1138 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1101.x + (-0.5));
        float _1140 = _1138 * (_1101.y + (-0.5));
        float _1141 = _1138 * (_1101.z + (-0.5));
        float _1148 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1108.x + (-0.5));
        float _1150 = _1148 * (_1108.y + (-0.5));
        float _1151 = _1148 * (_1108.z + (-0.5));
        float _1158 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1115.x + (-0.5));
        float _1160 = _1158 * (_1115.y + (-0.5));
        float _1161 = _1158 * (_1115.z + (-0.5));
        float _1162 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1163 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1164 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1165 = _1129 * 0.5;
        float _1166 = _1139 * 0.5;
        float _1167 = _1149 * 0.5;
        float _1168 = dot(vec3(_1165, _1166, _1167), vec3(_1165, _1166, _1167));
        float _1173 = (_1168 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1168);
        float _1182 = (dot(vec3(_761, _762, _763), vec3(_1173 * _1165, _1173 * _1166, _1173 * _1167)) + 1.0) * 0.5;
        float _3829 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1192 = sqrt(((_1166 * _1166) + (_1165 * _1165)) + (_1167 * _1167)) / (_1162 + 9.9999997473787516355514526367188e-06);
        float _3840 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1194 = _1193 * 2.0;
        float _1198 = (1.0 - _1193) / (_1193 + 1.0);
        float _3851 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1208 = ((((1.0 - _1199) * (_1194 + 2.0)) * exp2(log2(isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * (_1194 + 1.0))) + _1199) * _1162;
        float _1209 = _1130 * 0.5;
        float _1210 = _1140 * 0.5;
        float _1211 = _1150 * 0.5;
        float _1212 = dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211));
        float _1217 = (_1212 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1212);
        float _1225 = (dot(vec3(_761, _762, _763), vec3(_1217 * _1209, _1217 * _1210, _1217 * _1211)) + 1.0) * 0.5;
        float _3862 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1234 = sqrt(((_1210 * _1210) + (_1209 * _1209)) + (_1211 * _1211)) / (_1163 + 9.9999997473787516355514526367188e-06);
        float _3873 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1236 = _1235 * 2.0;
        float _1240 = (1.0 - _1235) / (_1235 + 1.0);
        float _3884 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1250 = ((((1.0 - _1241) * (_1236 + 2.0)) * exp2(log2(isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_1236 + 1.0))) + _1241) * _1163;
        float _1251 = _1131 * 0.5;
        float _1252 = _1141 * 0.5;
        float _1253 = _1151 * 0.5;
        float _1254 = dot(vec3(_1251, _1252, _1253), vec3(_1251, _1252, _1253));
        float _1259 = (_1254 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1254);
        float _1267 = (dot(vec3(_761, _762, _763), vec3(_1259 * _1251, _1259 * _1252, _1259 * _1253)) + 1.0) * 0.5;
        float _3895 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1276 = sqrt(((_1252 * _1252) + (_1251 * _1251)) + (_1253 * _1253)) / (_1164 + 9.9999997473787516355514526367188e-06);
        float _3906 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1278 = _1277 * 2.0;
        float _1282 = (1.0 - _1277) / (_1277 + 1.0);
        float _3917 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1292 = ((((1.0 - _1283) * (_1278 + 2.0)) * exp2(log2(isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * (_1278 + 1.0))) + _1283) * _1164;
        _1300 = _1131;
        _1302 = _1130;
        _1303 = _1129;
        _1304 = _1141;
        _1305 = _1140;
        _1306 = _1139;
        _1307 = _1151;
        _1308 = _1150;
        _1309 = _1149;
        _1310 = _1164;
        _1311 = _1163;
        _1312 = _1162;
        _1313 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)));
        _1314 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)));
        _1315 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)));
    }
    else
    {
        _1300 = _1301;
        _1302 = _1301;
        _1303 = _1301;
        _1304 = _1301;
        _1305 = _1301;
        _1306 = _1301;
        _1307 = _1301;
        _1308 = _1301;
        _1309 = _1301;
        _1310 = _1301;
        _1311 = _1301;
        _1312 = _1301;
        _1313 = 0.0;
        _1314 = 0.0;
        _1315 = 0.0;
    }
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1339 = fma(_999, cbModelParam._m0[30u].z, fma(_995, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _991));
        float _1343 = fma(_999, cbModelParam._m0[31u].z, fma(_995, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _991));
        float _1347 = fma(_999, cbModelParam._m0[32u].z, fma(_995, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _991));
        float _1370 = _991 + _761;
        float _1371 = _995 + _762;
        float _1372 = _999 + _763;
        float _1382 = fma(_1372, cbModelParam._m0[30u].z, fma(_1371, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1370)) - _1339;
        float _1383 = fma(_1372, cbModelParam._m0[31u].z, fma(_1371, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1370)) - _1343;
        float _1384 = fma(_1372, cbModelParam._m0[32u].z, fma(_1371, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1370)) - _1347;
        float _1388 = inversesqrt(dot(vec3(_1382, _1383, _1384), vec3(_1382, _1383, _1384)));
        float _1401 = ((_1388 * _1382) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1339 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1402 = ((_1388 * _1383) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1343 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1403 = ((_1388 * _1384) / cbModelParam._m0[35u].z) + ((((((_1347 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1405 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1401, _1402, _1403), 0.0);
        vec4 _1412 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1401, _1402, _1403), 0.0);
        vec4 _1419 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1401, _1402, _1403), 0.0);
        vec4 _1426 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1401, _1402, _1403), 0.0);
        float _1438 = exp2((_1405.w + (-0.5)) * 20.0) * 2.0;
        float _1439 = _1438 * (_1405.x + (-0.5));
        float _1440 = _1438 * (_1405.y + (-0.5));
        float _1441 = _1438 * (_1405.z + (-0.5));
        float _1448 = exp2((_1412.w + (-0.5)) * 20.0) * 2.0;
        float _1449 = _1448 * (_1412.x + (-0.5));
        float _1450 = _1448 * (_1412.y + (-0.5));
        float _1451 = _1448 * (_1412.z + (-0.5));
        float _1458 = exp2((_1419.w + (-0.5)) * 20.0) * 2.0;
        float _1459 = _1458 * (_1419.x + (-0.5));
        float _1460 = _1458 * (_1419.y + (-0.5));
        float _1461 = _1458 * (_1419.z + (-0.5));
        float _1468 = exp2((_1426.w + (-0.5)) * 20.0) * 2.0;
        float _1469 = _1468 * (_1426.x + (-0.5));
        float _1470 = _1468 * (_1426.y + (-0.5));
        float _1471 = _1468 * (_1426.z + (-0.5));
        float _1472 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1473 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1474 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1475 = _1439 * 0.5;
        float _1476 = _1449 * 0.5;
        float _1477 = _1459 * 0.5;
        float _1478 = dot(vec3(_1475, _1476, _1477), vec3(_1475, _1476, _1477));
        float _1483 = (_1478 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1478);
        float _1491 = (dot(vec3(_761, _762, _763), vec3(_1483 * _1475, _1483 * _1476, _1483 * _1477)) + 1.0) * 0.5;
        float _3958 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1500 = sqrt(((_1476 * _1476) + (_1475 * _1475)) + (_1477 * _1477)) / (_1472 + 9.9999997473787516355514526367188e-06);
        float _3969 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1502 = _1501 * 2.0;
        float _1506 = (1.0 - _1501) / (_1501 + 1.0);
        float _3980 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1516 = ((((1.0 - _1507) * (_1502 + 2.0)) * exp2(log2(isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * (_1502 + 1.0))) + _1507) * _1472;
        float _1517 = _1440 * 0.5;
        float _1518 = _1450 * 0.5;
        float _1519 = _1460 * 0.5;
        float _1520 = dot(vec3(_1517, _1518, _1519), vec3(_1517, _1518, _1519));
        float _1525 = (_1520 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1520);
        float _1533 = (dot(vec3(_761, _762, _763), vec3(_1525 * _1517, _1525 * _1518, _1525 * _1519)) + 1.0) * 0.5;
        float _3991 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1542 = sqrt(((_1518 * _1518) + (_1517 * _1517)) + (_1519 * _1519)) / (_1473 + 9.9999997473787516355514526367188e-06);
        float _4002 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1544 = _1543 * 2.0;
        float _1548 = (1.0 - _1543) / (_1543 + 1.0);
        float _4013 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1558 = ((((1.0 - _1549) * (_1544 + 2.0)) * exp2(log2(isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_1544 + 1.0))) + _1549) * _1473;
        float _1559 = _1441 * 0.5;
        float _1560 = _1451 * 0.5;
        float _1561 = _1461 * 0.5;
        float _1562 = dot(vec3(_1559, _1560, _1561), vec3(_1559, _1560, _1561));
        float _1567 = (_1562 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1562);
        float _1575 = (dot(vec3(_761, _762, _763), vec3(_1567 * _1559, _1567 * _1560, _1567 * _1561)) + 1.0) * 0.5;
        float _4024 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1584 = sqrt(((_1560 * _1560) + (_1559 * _1559)) + (_1561 * _1561)) / (_1474 + 9.9999997473787516355514526367188e-06);
        float _4035 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1586 = _1585 * 2.0;
        float _1590 = (1.0 - _1585) / (_1585 + 1.0);
        float _4046 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1600 = ((((1.0 - _1591) * (_1586 + 2.0)) * exp2(log2(isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_1586 + 1.0))) + _1591) * _1474;
        _1608 = _1441;
        _1609 = _1440;
        _1610 = _1439;
        _1611 = _1451;
        _1612 = _1450;
        _1613 = _1449;
        _1614 = _1461;
        _1615 = _1460;
        _1616 = _1459;
        _1617 = _1474;
        _1618 = _1473;
        _1619 = _1472;
        _1620 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)));
        _1621 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)));
        _1622 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)));
    }
    else
    {
        _1608 = _1301;
        _1609 = _1301;
        _1610 = _1301;
        _1611 = _1301;
        _1612 = _1301;
        _1613 = _1301;
        _1614 = _1301;
        _1615 = _1301;
        _1616 = _1301;
        _1617 = _1301;
        _1618 = _1301;
        _1619 = _1301;
        _1620 = 0.0;
        _1621 = 0.0;
        _1622 = 0.0;
    }
    float _1632 = (cbModelParam._m0[1u].x * (_1620 - _1313)) + _1313;
    float _1633 = (cbModelParam._m0[1u].x * (_1621 - _1314)) + _1314;
    float _1634 = (cbModelParam._m0[1u].x * (_1622 - _1315)) + _1315;
    float _1655 = fma(_1634, cbSceneParam._m0[89u].z, fma(_1633, cbSceneParam._m0[89u].y, _1632 * cbSceneParam._m0[89u].x));
    float _1658 = fma(_1634, cbSceneParam._m0[90u].z, fma(_1633, cbSceneParam._m0[90u].y, _1632 * cbSceneParam._m0[90u].x));
    float _1661 = fma(_1634, cbSceneParam._m0[91u].z, fma(_1633, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1632));
    float _1676 = _935 * 0.5;
    float _1677 = _936 * 0.5;
    float _1678 = _937 * 0.5;
    float _1679 = dot(vec4(_1676, _1677, _1678, 1.0), vec4(_1610, _1613, _1616, _1619));
    float _1682 = dot(vec4(_1676, _1677, _1678, 1.0), vec4(_1609, _1612, _1615, _1618));
    float _1685 = dot(vec4(_1676, _1677, _1678, 1.0), vec4(_1608, _1611, _1614, _1617));
    float _1719;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1692 = dot(vec4(_1676, _1677, _1678, 1.0), vec4(_1300, _1304, _1307, _1310));
        float _1696 = dot(vec4(_1676, _1677, _1678, 1.0), vec4(_1302, _1305, _1308, _1311));
        float _1700 = dot(vec4(_1676, _1677, _1678, 1.0), vec4(_1303, _1306, _1309, _1312));
        float _1707 = dot(vec4(cbModelParam._m0[39u]), vec4(_1676, _1677, _1678, 1.0));
        _1719 = dot(vec3(isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0)), isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0)), isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1707) ? 0.0 : (isnan(0.0) ? _1707 : max(0.0, _1707))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1719 = 1.0;
    }
    float _1730;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1721 = dot(vec4(cbModelParam._m0[40u]), vec4(_1676, _1677, _1678, 1.0));
        _1730 = dot(vec3(isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)), isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)), isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1721) ? 0.0 : (isnan(0.0) ? _1721 : max(0.0, _1721))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1730 = 1.0;
    }
    float _1734 = (_1730 * cbModelParam._m0[1u].x) + (_1719 * (1.0 - cbModelParam._m0[1u].x));
    float _1744 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _764);
    float _1745 = isnan(_1744) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1744 : min(cbModelParam._m0[25u].z, _1744));
    float _1825;
    float _1827;
    float _1829;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1792 = fma(_999, cbModelParam._m0[13u].z, fma(_995, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _991)) + cbModelParam._m0[13u].w;
        float _1796 = fma(_999, cbModelParam._m0[14u].z, fma(_995, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _991)) + cbModelParam._m0[14u].w;
        float _1800 = fma(_999, cbModelParam._m0[15u].z, fma(_995, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _991)) + cbModelParam._m0[15u].w;
        float _1803 = fma(_937, cbModelParam._m0[13u].z, fma(_936, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _935));
        float _1806 = fma(_937, cbModelParam._m0[14u].z, fma(_936, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _935));
        float _1809 = fma(_937, cbModelParam._m0[15u].z, fma(_936, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _935));
        float _1837;
        if (_1803 > 0.0)
        {
            _1837 = abs((1.0 - _1792) / _1803);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1803 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1792 + 1.0) / _1803);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1837 = frontier_phi_14_12_ladder;
        }
        float _2060;
        if (_1806 > 0.0)
        {
            _2060 = abs((1.0 - _1796) / _1806);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1806 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1796 + 1.0) / _1806);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2060 = frontier_phi_23_19_ladder;
        }
        float _2317;
        if (_1809 > 0.0)
        {
            _2317 = abs((1.0 - _1800) / _1809);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1809 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1800 + 1.0) / _1809);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2317 = frontier_phi_35_30_ladder;
        }
        float _2319 = isnan(_2060) ? _1837 : (isnan(_1837) ? _2060 : min(_1837, _2060));
        float _2320 = isnan(_2317) ? _2319 : (isnan(_2319) ? _2317 : min(_2319, _2317));
        float _2324 = (_2320 * _1803) + _1792;
        float _2325 = (_2320 * _1806) + _1796;
        float _2326 = (_2320 * _1809) + _1800;
        float _2327 = _2320 * 9.9999997473787516355514526367188e-05;
        float _2329 = (-1.0) - _2327;
        float _2331 = _2327 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2326 > _2331) || ((_2326 < _2329) || ((_2325 > _2331) || ((_2325 < _2329) || ((_2324 < _2329) || (_2324 > _2331))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2454 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2326, cbModelParam._m0[9u].z, fma(_2325, cbModelParam._m0[9u].y, _2324 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2326, cbModelParam._m0[10u].z, fma(_2325, cbModelParam._m0[10u].y, _2324 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2326, cbModelParam._m0[11u].z, fma(_2325, cbModelParam._m0[11u].y, _2324 * cbModelParam._m0[11u].x))), _1745);
            frontier_phi_13_35_ladder = _2454.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2454.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2454.x * cbModelParam._m0[1u].y;
        }
        _1825 = frontier_phi_13_35_ladder_2;
        _1827 = frontier_phi_13_35_ladder_1;
        _1829 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1813 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_935, _936, _937), _1745);
        _1825 = _1813.x * cbModelParam._m0[1u].y;
        _1827 = _1813.y * cbModelParam._m0[1u].y;
        _1829 = _1813.z * cbModelParam._m0[1u].y;
    }
    float _1833 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _764);
    float _1834 = isnan(_1833) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1833 : min(cbModelParam._m0[25u].w, _1833));
    float _1923;
    float _1925;
    float _1927;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1887 = fma(_999, cbModelParam._m0[21u].z, fma(_995, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _991)) + cbModelParam._m0[21u].w;
        float _1891 = fma(_999, cbModelParam._m0[22u].z, fma(_995, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _991)) + cbModelParam._m0[22u].w;
        float _1895 = fma(_999, cbModelParam._m0[23u].z, fma(_995, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _991)) + cbModelParam._m0[23u].w;
        float _1898 = fma(_937, cbModelParam._m0[21u].z, fma(_936, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _935));
        float _1901 = fma(_937, cbModelParam._m0[22u].z, fma(_936, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _935));
        float _1904 = fma(_937, cbModelParam._m0[23u].z, fma(_936, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _935));
        float _2065;
        if (_1898 > 0.0)
        {
            _2065 = abs((1.0 - _1887) / _1898);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1898 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1887 + 1.0) / _1898);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2065 = frontier_phi_25_21_ladder;
        }
        float _2344;
        if (_1901 > 0.0)
        {
            _2344 = abs((1.0 - _1891) / _1901);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1901 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1891 + 1.0) / _1901);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2344 = frontier_phi_37_32_ladder;
        }
        float _2557;
        if (_1904 > 0.0)
        {
            _2557 = abs((1.0 - _1895) / _1904);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1904 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1895 + 1.0) / _1904);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2557 = frontier_phi_46_43_ladder;
        }
        float _2559 = isnan(_2344) ? _2065 : (isnan(_2065) ? _2344 : min(_2065, _2344));
        float _2560 = isnan(_2557) ? _2559 : (isnan(_2559) ? _2557 : min(_2559, _2557));
        float _2564 = (_2560 * _1898) + _1887;
        float _2565 = (_2560 * _1901) + _1891;
        float _2566 = (_2560 * _1904) + _1895;
        float _2567 = _2560 * 9.9999997473787516355514526367188e-05;
        float _2568 = (-1.0) - _2567;
        float _2570 = _2567 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2566 > _2570) || ((_2566 < _2568) || ((_2565 > _2570) || ((_2565 < _2568) || ((_2564 < _2568) || (_2564 > _2570))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2765 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2566, cbModelParam._m0[17u].z, fma(_2565, cbModelParam._m0[17u].y, _2564 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2566, cbModelParam._m0[18u].z, fma(_2565, cbModelParam._m0[18u].y, _2564 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2566, cbModelParam._m0[19u].z, fma(_2565, cbModelParam._m0[19u].y, _2564 * cbModelParam._m0[19u].x))), _1834);
            frontier_phi_22_46_ladder = _2765.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2765.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2765.x * cbModelParam._m0[1u].z;
        }
        _1923 = frontier_phi_22_46_ladder_2;
        _1925 = frontier_phi_22_46_ladder_1;
        _1927 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1907 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_935, _936, _937), _1834);
        _1923 = _1907.x * cbModelParam._m0[1u].z;
        _1925 = _1907.y * cbModelParam._m0[1u].z;
        _1927 = _1907.z * cbModelParam._m0[1u].z;
    }
    float _1940 = (((_962 * _911) + _963) * _927) * ((cbModelParam._m0[1u].w * (_1923 - _1825)) + _1825);
    float _1942 = (((_962 * _913) + _963) * _927) * ((cbModelParam._m0[1u].w * (_1925 - _1827)) + _1827);
    float _1944 = (((_962 * _914) + _963) * _927) * ((cbModelParam._m0[1u].w * (_1927 - _1829)) + _1829);
    float _1947 = fma(_1944, cbSceneParam._m0[89u].z, fma(_1942, cbSceneParam._m0[89u].y, _1940 * cbSceneParam._m0[89u].x));
    float _1950 = fma(_1944, cbSceneParam._m0[90u].z, fma(_1942, cbSceneParam._m0[90u].y, _1940 * cbSceneParam._m0[90u].x));
    float _1953 = fma(_1944, cbSceneParam._m0[91u].z, fma(_1942, cbSceneParam._m0[91u].y, _1940 * cbSceneParam._m0[91u].x));
    vec4 _1961 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_849, _850));
    float _1963 = _1961.w;
    float _1975 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1963);
    float _1976 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1963);
    float _1977 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1963);
    uvec4 _1981 = floatBitsToUint(cbInstanceData._m0[_246 + 5u]);
    uint _1983 = _1981.x * 14u;
    uint _1984 = _1983 + 13u;
    float _1991 = _927 + (-1.0);
    float _1996 = (cbLight._m0[_1984].x * _1991) + 1.0;
    float _1997 = (cbLight._m0[_1984].y * _1991) + 1.0;
    float _1998 = (cbLight._m0[_1984].z * _1991) + 1.0;
    float _1999 = (cbLight._m0[_1984].w * _1991) + 1.0;
    uint _2000 = _1983 + 5u;
    float _2006 = isnan(1.0) ? _1997 : (isnan(_1997) ? 1.0 : min(_1997, 1.0));
    uint _2010 = _1983 + 4u;
    float _2019 = isnan(1.0) ? _1996 : (isnan(_1996) ? 1.0 : min(_1996, 1.0));
    uint _2023 = _1983 | 1u;
    float _2034 = dot(vec3(cbLight._m0[_1983].xyz), vec3(_761, _762, _763));
    float _2037 = dot(vec3(cbLight._m0[_2023].xyz), vec3(_761, _762, _763));
    float _4182 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _4193 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2042 = (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * 0.3183098733425140380859375;
    float _2044 = (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * 0.3183098733425140380859375;
    float _2051 = ((cbLight._m0[_2000].x * _2006) * _2044) + (((cbLight._m0[_2010].x * _1975) * _2019) * _2042);
    float _2052 = ((_2006 * cbLight._m0[_2000].y) * _2044) + (((cbLight._m0[_2010].y * _1976) * _2019) * _2042);
    float _2053 = ((_2006 * cbLight._m0[_2000].z) * _2044) + (((cbLight._m0[_2010].z * _1977) * _2019) * _2042);
    uvec4 _2057 = floatBitsToUint(cbLight._m0[_1983 + 12u]);
    bool _2059 = _2057.x == 0u;
    float _2070;
    float _2072;
    float _2074;
    if (_2059)
    {
        _2070 = _2051;
        _2072 = _2052;
        _2074 = _2053;
    }
    else
    {
        uint _2078 = _1983 + 6u;
        float _2094 = (dot(vec3(cbLight._m0[_1983 + 2u].xyz), vec3(_761, _762, _763)) * 0.5) + 0.5;
        float _2095 = _2094 * _2094;
        float _4204 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
        float _2096 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _2097 = isnan(1.0) ? _1998 : (isnan(_1998) ? 1.0 : min(_1998, 1.0));
        _2070 = (((cbLight._m0[_2078].x * 0.3183098733425140380859375) * _2096) * _2097) + _2051;
        _2072 = (((cbLight._m0[_2078].y * 0.3183098733425140380859375) * _2096) * _2097) + _2052;
        _2074 = (((cbLight._m0[_2078].z * 0.3183098733425140380859375) * _2096) * _2097) + _2053;
    }
    bool _2077 = _2057.y == 0u;
    float _2115;
    float _2117;
    float _2119;
    if (_2077)
    {
        _2115 = _2070;
        _2117 = _2072;
        _2119 = _2074;
    }
    else
    {
        uint _2288 = _1983 + 7u;
        float _2304 = (dot(vec3(cbLight._m0[_1983 + 3u].xyz), vec3(_761, _762, _763)) * 0.5) + 0.5;
        float _2305 = _2304 * _2304;
        float _4220 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2306 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _2307 = isnan(1.0) ? _1999 : (isnan(_1999) ? 1.0 : min(_1999, 1.0));
        _2115 = (((cbLight._m0[_2288].x * 0.3183098733425140380859375) * _2306) * _2307) + _2070;
        _2117 = (((cbLight._m0[_2288].y * 0.3183098733425140380859375) * _2306) * _2307) + _2072;
        _2119 = (((cbLight._m0[_2288].z * 0.3183098733425140380859375) * _2306) * _2307) + _2074;
    }
    uint _2122 = _1983 + 8u;
    float _2135 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1983].w)) * _764) * 0.949999988079071044921875);
    float _2136 = _2135 * _2135;
    float _2137 = cbLight._m0[_1983].x + _841;
    float _2138 = cbLight._m0[_1983].y + _842;
    float _2139 = cbLight._m0[_1983].z + _843;
    float _2143 = inversesqrt(dot(vec3(_2137, _2138, _2139), vec3(_2137, _2138, _2139)));
    float _2144 = _2143 * _2137;
    float _2145 = _2143 * _2138;
    float _2146 = _2143 * _2139;
    float _2147 = dot(vec3(_761, _762, _763), vec3(cbLight._m0[_1983].xyz));
    float _4236 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2150 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _4247 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _2151 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
    float _2152 = dot(vec3(_761, _762, _763), vec3(_2144, _2145, _2146));
    float _4258 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    float _2155 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
    float _2156 = dot(vec3(cbLight._m0[_1983].xyz), vec3(_2144, _2145, _2146));
    float _4269 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2160 = _2136 * _2136;
    float _2164 = ((_2155 * _2155) * (_2160 + (-1.0))) + 1.0;
    float _2172 = exp2(log2(1.0 - (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0)))) * 5.0);
    float _2173 = 0.959999978542327880859375 - _908;
    float _2175 = 0.959999978542327880859375 - _909;
    float _2176 = 0.959999978542327880859375 - _910;
    float _2183 = 1.0 - _2136;
    float _2194 = (0.5 / (((_2151 * ((_2150 * _2183) + _2136)) + 9.9999999392252902907785028219223e-09) + (((_2151 * _2183) + _2136) * _2150))) * _2150;
    float _4280 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2196 = (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_2160 / ((_2164 * _2164) * 3.141590118408203125));
    uint _2210 = _1983 + 9u;
    float _2221 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2023].w)) * _764) * 0.949999988079071044921875);
    float _2222 = _2221 * _2221;
    float _2223 = cbLight._m0[_2023].x + _841;
    float _2224 = cbLight._m0[_2023].y + _842;
    float _2225 = cbLight._m0[_2023].z + _843;
    float _2229 = inversesqrt(dot(vec3(_2223, _2224, _2225), vec3(_2223, _2224, _2225)));
    float _2230 = _2229 * _2223;
    float _2231 = _2229 * _2224;
    float _2232 = _2229 * _2225;
    float _2233 = dot(vec3(_761, _762, _763), vec3(cbLight._m0[_2023].xyz));
    float _4291 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2236 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _2237 = dot(vec3(_761, _762, _763), vec3(_2230, _2231, _2232));
    float _4302 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
    float _2240 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
    float _2241 = dot(vec3(cbLight._m0[_2023].xyz), vec3(_2230, _2231, _2232));
    float _4313 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _2245 = _2222 * _2222;
    float _2249 = ((_2240 * _2240) * (_2245 + (-1.0))) + 1.0;
    float _2256 = exp2(log2(1.0 - (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0)))) * 5.0);
    float _2263 = 1.0 - _2222;
    float _2273 = (0.5 / (((_2151 * ((_2236 * _2263) + _2222)) + 9.9999999392252902907785028219223e-09) + (((_2151 * _2263) + _2222) * _2236))) * _2236;
    float _4324 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2275 = (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_2245 / ((_2249 * _2249) * 3.141590118408203125));
    float _2285 = (((((_2256 * _2173) + _911) * cbLight._m0[_2210].x) * _2275) * _2006) + ((((cbLight._m0[_2122].x * _1975) * ((_2172 * _2173) + _911)) * _2196) * _2019);
    float _2286 = (((((_2256 * _2175) + _913) * cbLight._m0[_2210].y) * _2275) * _2006) + ((((cbLight._m0[_2122].y * _1976) * ((_2172 * _2175) + _913)) * _2196) * _2019);
    float _2287 = (((((_2256 * _2176) + _914) * cbLight._m0[_2210].z) * _2275) * _2006) + ((((cbLight._m0[_2122].z * _1977) * ((_2172 * _2176) + _914)) * _2196) * _2019);
    float _2349;
    float _2351;
    float _2353;
    if (_2059)
    {
        _2349 = _2285;
        _2351 = _2286;
        _2353 = _2287;
    }
    else
    {
        uint _2355 = _1983 + 2u;
        uint _2359 = _1983 + 10u;
        float _2373 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2355].w)) * _764) * 0.949999988079071044921875);
        float _2374 = _2373 * _2373;
        float _2375 = cbLight._m0[_2355].x + _841;
        float _2376 = cbLight._m0[_2355].y + _842;
        float _2377 = cbLight._m0[_2355].z + _843;
        float _2381 = inversesqrt(dot(vec3(_2375, _2376, _2377), vec3(_2375, _2376, _2377)));
        float _2382 = _2381 * _2375;
        float _2383 = _2381 * _2376;
        float _2384 = _2381 * _2377;
        float _2385 = dot(vec3(_761, _762, _763), vec3(cbLight._m0[_2355].xyz));
        float _4335 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
        float _2388 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _2389 = dot(vec3(_761, _762, _763), vec3(_2382, _2383, _2384));
        float _4346 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2392 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _2393 = dot(vec3(cbLight._m0[_2355].xyz), vec3(_2382, _2383, _2384));
        float _4357 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
        float _2397 = _2374 * _2374;
        float _2401 = ((_2392 * _2392) * (_2397 + (-1.0))) + 1.0;
        float _2408 = exp2(log2(1.0 - (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0)))) * 5.0);
        float _2415 = 1.0 - _2374;
        float _2425 = (0.5 / (((_2151 * ((_2388 * _2415) + _2374)) + 9.9999999392252902907785028219223e-09) + (((_2151 * _2415) + _2374) * _2388))) * _2388;
        float _4368 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2427 = (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_2397 / ((_2401 * _2401) * 3.141590118408203125));
        float _2428 = isnan(1.0) ? _1998 : (isnan(_1998) ? 1.0 : min(_1998, 1.0));
        _2349 = (((((_2408 * _2173) + _911) * cbLight._m0[_2359].x) * _2427) * _2428) + _2285;
        _2351 = (((((_2408 * _2175) + _913) * cbLight._m0[_2359].y) * _2427) * _2428) + _2286;
        _2353 = (((((_2408 * _2176) + _914) * cbLight._m0[_2359].z) * _2427) * _2428) + _2287;
    }
    float _2463;
    float _2465;
    float _2467;
    if (_2077)
    {
        _2463 = _2349;
        _2465 = _2351;
        _2467 = _2353;
    }
    else
    {
        uint _2474 = _1983 + 3u;
        uint _2478 = _1983 + 11u;
        float _2492 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2474].w)) * _764) * 0.949999988079071044921875);
        float _2493 = _2492 * _2492;
        float _2494 = cbLight._m0[_2474].x + _841;
        float _2495 = cbLight._m0[_2474].y + _842;
        float _2496 = cbLight._m0[_2474].z + _843;
        float _2500 = inversesqrt(dot(vec3(_2494, _2495, _2496), vec3(_2494, _2495, _2496)));
        float _2501 = _2500 * _2494;
        float _2502 = _2500 * _2495;
        float _2503 = _2500 * _2496;
        float _2504 = dot(vec3(_761, _762, _763), vec3(cbLight._m0[_2474].xyz));
        float _4384 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2507 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _2508 = dot(vec3(_761, _762, _763), vec3(_2501, _2502, _2503));
        float _4395 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2511 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _2512 = dot(vec3(cbLight._m0[_2474].xyz), vec3(_2501, _2502, _2503));
        float _4406 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2516 = _2493 * _2493;
        float _2520 = ((_2511 * _2511) * (_2516 + (-1.0))) + 1.0;
        float _2527 = exp2(log2(1.0 - (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0)))) * 5.0);
        float _2534 = 1.0 - _2493;
        float _2544 = (0.5 / (((_2151 * ((_2507 * _2534) + _2493)) + 9.9999999392252902907785028219223e-09) + (((_2151 * _2534) + _2493) * _2507))) * _2507;
        float _4417 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2546 = (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_2516 / ((_2520 * _2520) * 3.141590118408203125));
        float _2547 = isnan(1.0) ? _1999 : (isnan(_1999) ? 1.0 : min(_1999, 1.0));
        _2463 = (((((_2527 * _2173) + _911) * cbLight._m0[_2478].x) * _2546) * _2547) + _2349;
        _2465 = (((((_2527 * _2175) + _913) * cbLight._m0[_2478].y) * _2546) * _2547) + _2351;
        _2467 = (((((_2527 * _2176) + _914) * cbLight._m0[_2478].z) * _2546) * _2547) + _2353;
    }
    float _2682;
    float _2684;
    float _2686;
    float _2688;
    float _2690;
    float _2692;
    if (_1981.y == 0u)
    {
        float _2622 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2623 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2622;
        float _2624 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2622;
        float _2625 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2622;
        uvec4 _2637 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2638 = _2637.x;
        uint _2649 = uint((float(_2637.y) * floor(float(uint(cbSceneParam._m0[85u].y * _850) / _2638))) + floor(float(uint(cbSceneParam._m0[85u].x * _849) / _2638)));
        float _2659 = (log2(_2625 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2660 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        uint _2663 = uint(isnan(14.0) ? _2660 : (isnan(_2660) ? 14.0 : min(_2660, 14.0)));
        uvec4 _2668 = texelFetch(g_lightClusterGridBuffer, int(((_2663 << 2u) + (_2649 << 6u)) >> 2u));
        uint _2669 = _2668.x;
        uint _2670 = _2637.z;
        float _2770;
        float _2772;
        float _2774;
        float _2776;
        float _2778;
        float _2780;
        if (((((1u << ((_2670 >> 4u) & 15u)) + 4294967295u) & _2669) == 0u) || ((_2670 & 240u) == 0u))
        {
            _2770 = 0.0;
            _2772 = 0.0;
            _2774 = 0.0;
            _2776 = 0.0;
            _2778 = 0.0;
            _2780 = 0.0;
        }
        else
        {
            float _2771;
            float _2773;
            float _2775;
            float _2777;
            float _2779;
            float _2781;
            float _2915 = 0.0;
            float _2916 = 0.0;
            float _2917 = 0.0;
            float _2918 = 0.0;
            float _2919 = 0.0;
            float _2920 = 0.0;
            uint _2921 = 0u;
            uint _2930;
            bool _2931;
            for (;;)
            {
                _2930 = texelFetch(g_lightClassification, int((((_2663 << 5u) + (_2649 << 9u)) + (_2921 << 2u)) >> 2u)).x;
                _2931 = _2930 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2931)
                {
                    frontier_phi_61_pred = _2915;
                    frontier_phi_61_pred_1 = _2920;
                    frontier_phi_61_pred_2 = _2919;
                    frontier_phi_61_pred_3 = _2918;
                    frontier_phi_61_pred_4 = _2917;
                    frontier_phi_61_pred_5 = _2916;
                }
                else
                {
                    float _3039;
                    float _3040;
                    float _3041;
                    float _3042;
                    float _3043;
                    float _3044;
                    uint _3045;
                    _3039 = _2915;
                    _3040 = _2916;
                    _3041 = _2917;
                    _3042 = _2918;
                    _3043 = _2919;
                    _3044 = _2920;
                    _3045 = _2930;
                    float _2971;
                    float _2972;
                    float _2973;
                    float _2974;
                    float _2975;
                    float _2976;
                    for (;;)
                    {
                        uint _3049 = uint(findLSB(_3045)) + (_2921 << 5u);
                        uint _3046 = (_3045 + 4294967295u) & _3045;
                        uint _3051 = _3049 * 48u;
                        vec4 _3065 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3051)).x, texelFetch(g_PointLightRenderingBuffer, int(_3051 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3051 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3051 + 3u)).x));
                        uint _3071 = (_3049 * 48u) + 4u;
                        vec4 _3084 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3071)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 3u)).x));
                        uint _3090 = (_3049 * 48u) + 8u;
                        vec3 _3101 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3090)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 2u)).x));
                        float _3105 = _3065.x - _2623;
                        float _3106 = _3065.y - _2624;
                        float _3107 = _3065.z - _2625;
                        float _3108 = dot(vec3(_3105, _3106, _3107), vec3(_3105, _3106, _3107));
                        float _3111 = inversesqrt(_3108);
                        float _3112 = _3111 * _3105;
                        float _3113 = _3111 * _3106;
                        float _3114 = _3111 * _3107;
                        float _3115 = dot(vec3(_868, _871, _874), vec3(_3112, _3113, _3114));
                        float _3120 = 1.0 - (_3108 * _3065.w);
                        float _4443 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                        float _3121 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
                        float _3122 = sqrt(_3108) * _3084.w;
                        float _3125 = 1.39999997615814208984375 / (_3122 + 1.39999997615814208984375);
                        float _3126 = _3125 * _3125;
                        float _3129 = ((1.0 - _3126) * _3115) + _3126;
                        float _3132 = _3122 * _3122;
                        float _3136 = ((isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0))) * _3121) / ((_3132 * 0.699999988079071044921875) + 1.0);
                        float _3140 = (-0.0) - _2623;
                        float _3141 = (-0.0) - _2624;
                        float _3142 = (-0.0) - _2625;
                        float _3146 = inversesqrt(dot(vec3(_3140, _3141, _3142), vec3(_3140, _3141, _3142)));
                        float _3147 = _3146 * _3140;
                        float _3148 = _3146 * _3141;
                        float _3149 = _3146 * _3142;
                        float _3157 = exp2(log2(1.0 / ((_3132 * 3.5) + 5.0)) * 0.25);
                        float _3158 = 1.0 - _943;
                        float _3165 = sqrt(1.0 - ((1.0 - (_3158 * _3158)) * (1.0 - (_3157 * _3157))));
                        float _3166 = _3165 * _3165;
                        float _3167 = _3166 * _3166;
                        float _3168 = _3147 + _3112;
                        float _3169 = _3148 + _3113;
                        float _3170 = _3149 + _3114;
                        float _3174 = inversesqrt(dot(vec3(_3168, _3169, _3170), vec3(_3168, _3169, _3170)));
                        float _3178 = dot(vec3(_868, _871, _874), vec3(_3147, _3148, _3149));
                        float _4459 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                        float _3181 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
                        float _3182 = dot(vec3(_868, _871, _874), vec3(_3174 * _3168, _3174 * _3169, _3174 * _3170));
                        float _4470 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                        float _3185 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                        float _3189 = ((_3185 * _3185) * (_3167 + (-1.0))) + 1.0;
                        float _3190 = _3125 * _3166;
                        float _3191 = _3190 * _3190;
                        float _3194 = ((1.0 - _3191) * _3115) + _3191;
                        float _4481 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                        float _3195 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
                        float _3196 = 1.0 - _3166;
                        float _3206 = (0.5 / (((_3195 * ((_3181 * _3196) + _3166)) + 9.9999999392252902907785028219223e-09) + (((_3195 * _3196) + _3166) * _3181))) * _3195;
                        float _4492 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                        float _3217 = (((_3167 * 3.1415927410125732421875) * (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0)))) / ((_3189 * _3189) * ((_3132 * 2.1991131305694580078125) + 3.141590118408203125))) * _3121;
                        _2974 = (_3136 * _3084.x) + _3042;
                        _2975 = (_3136 * _3084.y) + _3043;
                        _2976 = (_3136 * _3084.z) + _3044;
                        _2971 = (_3217 * _3101.x) + _3039;
                        _2972 = (_3217 * _3101.y) + _3040;
                        _2973 = (_3217 * _3101.z) + _3041;
                        if (_3046 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3039 = _2971;
                            _3040 = _2972;
                            _3041 = _2973;
                            _3042 = _2974;
                            _3043 = _2975;
                            _3044 = _2976;
                            _3045 = _3046;
                        }
                    }
                    frontier_phi_61_pred = _2971;
                    frontier_phi_61_pred_1 = _2976;
                    frontier_phi_61_pred_2 = _2975;
                    frontier_phi_61_pred_3 = _2974;
                    frontier_phi_61_pred_4 = _2973;
                    frontier_phi_61_pred_5 = _2972;
                }
                _2771 = frontier_phi_61_pred;
                _2781 = frontier_phi_61_pred_1;
                _2779 = frontier_phi_61_pred_2;
                _2777 = frontier_phi_61_pred_3;
                _2775 = frontier_phi_61_pred_4;
                _2773 = frontier_phi_61_pred_5;
                uint _2922 = _2921 + 1u;
                if (_2922 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2915 = _2771;
                    _2916 = _2773;
                    _2917 = _2775;
                    _2918 = _2777;
                    _2919 = _2779;
                    _2920 = _2781;
                    _2921 = _2922;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2770 = _2771;
            _2772 = _2773;
            _2774 = _2775;
            _2776 = _2777;
            _2778 = _2779;
            _2780 = _2781;
        }
        uvec4 _2784 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2785 = _2784.z;
        uint _2787 = (_2785 >> 8u) & 15u;
        float _2883;
        float _2885;
        float _2887;
        float _2889;
        float _2891;
        float _2893;
        if (((4294967295u << _2787) & _2669) == 0u)
        {
            _2883 = _2770;
            _2885 = _2772;
            _2887 = _2774;
            _2889 = _2776;
            _2891 = _2778;
            _2893 = _2780;
        }
        else
        {
            float _2908 = inversesqrt(dot(vec3(_2623, _2624, _2625), vec3(_2623, _2624, _2625)));
            float _2909 = _2908 * _2623;
            float _2910 = _2908 * _2624;
            float _2911 = _2908 * _2625;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2787 < ((_2785 >> 12u) & 15u))
            {
                float _2884;
                float _2886;
                float _2888;
                float _2890;
                float _2892;
                float _2894;
                float _3022 = _2770;
                float _3023 = _2772;
                float _3024 = _2774;
                float _3025 = _2776;
                float _3026 = _2778;
                float _3027 = _2780;
                uint _3028 = _2787;
                uint _3037;
                bool _3038;
                for (;;)
                {
                    _3037 = texelFetch(g_lightClassification, int((((_2663 << 5u) + (_2649 << 9u)) + (_3028 << 2u)) >> 2u)).x;
                    _3038 = _3037 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3038)
                    {
                        frontier_phi_67_pred = _3025;
                        frontier_phi_67_pred_1 = _3026;
                        frontier_phi_67_pred_2 = _3027;
                        frontier_phi_67_pred_3 = _3024;
                        frontier_phi_67_pred_4 = _3023;
                        frontier_phi_67_pred_5 = _3022;
                    }
                    else
                    {
                        float _3222;
                        float _3223;
                        float _3224;
                        float _3225;
                        float _3226;
                        float _3227;
                        float _3515;
                        float _3516;
                        float _3517;
                        float _3518;
                        float _3519;
                        float _3520;
                        float _3235 = _3022;
                        float _3236 = _3023;
                        float _3237 = _3024;
                        float _3238 = _3025;
                        float _3239 = _3026;
                        float _3240 = _3027;
                        uint _3241 = _3037;
                        uint _3242;
                        vec4 _3267;
                        float _3268;
                        vec4 _3283;
                        vec3 _3295;
                        vec4 _3310;
                        vec4 _3325;
                        float _3371;
                        bool _3372;
                        for (;;)
                        {
                            uint _3252 = ((_3028 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3241));
                            _3242 = (_3241 + 4294967295u) & _3241;
                            uint _3254 = _3252 * 40u;
                            _3267 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3254)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 3u)).x));
                            _3268 = _3267.w;
                            uint _3270 = (_3252 * 40u) + 4u;
                            _3283 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3270)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 3u)).x));
                            uint _3285 = (_3252 * 40u) + 8u;
                            _3295 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3285)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 2u)).x));
                            uint _3297 = (_3252 * 40u) + 16u;
                            _3310 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 3u)).x));
                            uint _3312 = (_3252 * 40u) + 20u;
                            _3325 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3312)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 3u)).x));
                            uint _3327 = (_3252 * 40u) + 24u;
                            vec4 _3340 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3327)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 3u)).x));
                            uint _3346 = (_3252 * 40u) + 28u;
                            vec4 _3359 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3346)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 3u)).x));
                            _3371 = fma(_2625, _3359.z, fma(_2624, _3359.y, _3359.x * _2623)) + _3359.w;
                            _3372 = !((fma(_2625, _3340.z, fma(_2624, _3340.y, _3340.x * _2623)) + _3340.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3372)
                            {
                                float _3399 = _3267.x - _2623;
                                float _3400 = _3267.y - _2624;
                                float _3401 = _3267.z - _2625;
                                float _3402 = dot(vec3(_3399, _3400, _3401), vec3(_3399, _3400, _3401));
                                float _3405 = inversesqrt(_3402);
                                float _3406 = _3405 * _3399;
                                float _3407 = _3405 * _3400;
                                float _3408 = _3405 * _3401;
                                float _3412 = 1.0 - (_3402 / (_3268 * _3268));
                                float _4503 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                                float _3413 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
                                float _3417 = sqrt(_3402) * _3283.w;
                                float _3419 = 1.39999997615814208984375 / (_3417 + 1.39999997615814208984375);
                                float _3420 = _3419 * _3419;
                                float _3423 = ((1.0 - _3420) * dot(vec3(_3406, _3407, _3408), vec3(_868, _871, _874))) + _3420;
                                float _3426 = _3417 * _3417;
                                float _3430 = (fma(_2625, _3310.z, fma(_2624, _3310.y, _3310.x * _2623)) + _3310.w) / _3371;
                                float _3431 = (fma(_2625, _3325.z, fma(_2624, _3325.y, _3325.x * _2623)) + _3325.w) / _3371;
                                float _3435 = 1.0 - dot(vec2(_3430, _3431), vec2(_3430, _3431));
                                float _4519 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                                float _3436 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
                                float _3437 = _3436 * (((isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0))) * _3413) / ((_3426 * 0.699999988079071044921875) + 1.0));
                                float _3449 = exp2(log2(1.0 / ((_3426 * 3.5) + 5.0)) * 0.25);
                                float _3450 = 1.0 - _943;
                                float _3457 = sqrt(1.0 - ((1.0 - (_3450 * _3450)) * (1.0 - (_3449 * _3449))));
                                float _3458 = _3457 * _3457;
                                float _3459 = _3458 * _3458;
                                float _3460 = _3406 - _2909;
                                float _3461 = _3407 - _2910;
                                float _3462 = _3408 - _2911;
                                float _3466 = inversesqrt(dot(vec3(_3460, _3461, _3462), vec3(_3460, _3461, _3462)));
                                float _3470 = dot(vec3(_868, _871, _874), vec3((-0.0) - _2909, (-0.0) - _2910, (-0.0) - _2911));
                                float _4530 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
                                float _3473 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
                                float _3474 = dot(vec3(_868, _871, _874), vec3(_3466 * _3460, _3466 * _3461, _3466 * _3462));
                                float _4541 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                                float _3477 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
                                float _3481 = ((_3477 * _3477) * (_3459 + (-1.0))) + 1.0;
                                float _3482 = _3419 * _3458;
                                float _3483 = _3482 * _3482;
                                float _3489 = ((1.0 - _3483) * dot(vec3(_868, _871, _874), vec3(_3406, _3407, _3408))) + _3483;
                                float _4552 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                                float _3490 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
                                float _3491 = 1.0 - _3458;
                                float _3501 = (0.5 / (((_3490 * ((_3473 * _3491) + _3458)) + 9.9999999392252902907785028219223e-09) + (((_3490 * _3491) + _3458) * _3473))) * _3490;
                                float _4563 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                                float _3511 = (_3436 * _3413) * (((_3459 * 3.1415927410125732421875) * (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0)))) / ((_3481 * _3481) * ((_3426 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3511 * _3295.x;
                                frontier_phi_73_pred_1 = _3511 * _3295.y;
                                frontier_phi_73_pred_2 = _3437 * _3283.z;
                                frontier_phi_73_pred_3 = _3437 * _3283.y;
                                frontier_phi_73_pred_4 = _3437 * _3283.x;
                                frontier_phi_73_pred_5 = _3511 * _3295.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3515 = frontier_phi_73_pred;
                            _3516 = frontier_phi_73_pred_1;
                            _3520 = frontier_phi_73_pred_2;
                            _3519 = frontier_phi_73_pred_3;
                            _3518 = frontier_phi_73_pred_4;
                            _3517 = frontier_phi_73_pred_5;
                            _3225 = _3518 + _3238;
                            _3226 = _3519 + _3239;
                            _3227 = _3520 + _3240;
                            _3222 = _3515 + _3235;
                            _3223 = _3516 + _3236;
                            _3224 = _3517 + _3237;
                            if (_3242 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3235 = _3222;
                                _3236 = _3223;
                                _3237 = _3224;
                                _3238 = _3225;
                                _3239 = _3226;
                                _3240 = _3227;
                                _3241 = _3242;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3225;
                        frontier_phi_67_pred_1 = _3226;
                        frontier_phi_67_pred_2 = _3227;
                        frontier_phi_67_pred_3 = _3224;
                        frontier_phi_67_pred_4 = _3223;
                        frontier_phi_67_pred_5 = _3222;
                    }
                    _2890 = frontier_phi_67_pred;
                    _2892 = frontier_phi_67_pred_1;
                    _2894 = frontier_phi_67_pred_2;
                    _2888 = frontier_phi_67_pred_3;
                    _2886 = frontier_phi_67_pred_4;
                    _2884 = frontier_phi_67_pred_5;
                    uint _3029 = _3028 + 1u;
                    if (_3029 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3022 = _2884;
                        _3023 = _2886;
                        _3024 = _2888;
                        _3025 = _2890;
                        _3026 = _2892;
                        _3027 = _2894;
                        _3028 = _3029;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2892;
                frontier_phi_55_56_ladder_1 = _2894;
                frontier_phi_55_56_ladder_2 = _2890;
                frontier_phi_55_56_ladder_3 = _2888;
                frontier_phi_55_56_ladder_4 = _2886;
                frontier_phi_55_56_ladder_5 = _2884;
            }
            else
            {
                frontier_phi_55_56_ladder = _2778;
                frontier_phi_55_56_ladder_1 = _2780;
                frontier_phi_55_56_ladder_2 = _2776;
                frontier_phi_55_56_ladder_3 = _2774;
                frontier_phi_55_56_ladder_4 = _2772;
                frontier_phi_55_56_ladder_5 = _2770;
            }
            _2883 = frontier_phi_55_56_ladder_5;
            _2885 = frontier_phi_55_56_ladder_4;
            _2887 = frontier_phi_55_56_ladder_3;
            _2889 = frontier_phi_55_56_ladder_2;
            _2891 = frontier_phi_55_56_ladder;
            _2893 = frontier_phi_55_56_ladder_1;
        }
        float _2898 = isnan(1.0) ? _927 : (isnan(_927) ? 1.0 : min(_927, 1.0));
        _2682 = (_2898 * _2889) + _2115;
        _2684 = (_2898 * _2891) + _2117;
        _2686 = (_2898 * _2893) + _2119;
        _2688 = ((_2883 * _911) * _2898) + _2463;
        _2690 = ((_2885 * _913) * _2898) + _2465;
        _2692 = ((_2887 * _914) * _2898) + _2467;
    }
    else
    {
        _2682 = _2115;
        _2684 = _2117;
        _2686 = _2119;
        _2688 = _2463;
        _2690 = _2465;
        _2692 = _2467;
    }
    float _4579 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _4590 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _4601 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    uint _2712 = _246 + 6u;
    float _2720 = _849 / cbSceneParam._m0[86u].x;
    float _2721 = _850 / cbSceneParam._m0[86u].y;
    vec4 _2735 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2720, _2721, (log2((isnan(cbSceneParam._m0[77u].w) ? _783 : (isnan(_783) ? cbSceneParam._m0[77u].w : min(_783, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2737 = _2735.x;
    float _2738 = _2735.y;
    float _2739 = _2735.z;
    float _2740 = _2735.w;
    float _2833;
    float _2835;
    float _2837;
    float _2839;
    if (_783 > cbSceneParam._m0[78u].w)
    {
        float _2795 = isnan(_783) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _783 : min(cbSceneParam._m0[80u].w, _783));
        float _2796 = _2795 / _783;
        float _2807 = _2796 * _834;
        float _2808 = _835 * _2796;
        float _2809 = (-0.0) - _2808;
        float _2811 = _2796 * _836;
        float _2813 = (cbSceneParam._m0[77u].w * _2809) / _2795;
        float _2814 = _2813 + cbSceneParam._m0[79u].w;
        float _2815 = cbSceneParam._m0[79u].w - _2808;
        float _2821 = sqrt(((_2807 * _2807) + (_2808 * _2808)) + (_2811 * _2811));
        float _2824 = (1.0 - (cbSceneParam._m0[77u].w / _2795)) * _2821;
        float _2829 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2831 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2984;
        if (abs((_2809 - _2813) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2984 = ((((_2814 > 0.0) ? exp2(_2829 * _2814) : (2.0 - exp2(_2831 * _2814))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2824;
        }
        else
        {
            float _2944 = 1.0 / cbSceneParam._m0[80u].x;
            float _2945 = isnan(_2815) ? _2814 : (isnan(_2814) ? _2815 : max(_2814, _2815));
            float _2946 = isnan(_2815) ? _2814 : (isnan(_2814) ? _2815 : min(_2814, _2815));
            float _2955 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : min(_2945, 0.0));
            float _2956 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : min(_2946, 0.0));
            _2984 = ((abs(_2821 / _2809) * cbSceneParam._m0[80u].y) * ((((_2955 - _2956) * 2.0) - ((exp2(_2829 * (isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0)))) - exp2(_2829 * (isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0))))) * _2944)) - ((exp2(_2831 * _2955) - exp2(_2831 * _2956)) * _2944))) + (_2824 * cbSceneParam._m0[80u].z);
        }
        vec4 _2986 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2720, _2721, 1.0), 0.0);
        float _2995 = exp2((_2984 * (-1.44269502162933349609375)) * (1.0 - _2986.w));
        float _2996 = log2(_2995);
        float _3012 = log2(_2740);
        _2833 = (exp2(_3012 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2996 * cbSceneParam._m0[78u].x)) * _2986.x) / cbSceneParam._m0[78u].x)) + _2737;
        _2835 = (exp2(_3012 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2996 * cbSceneParam._m0[78u].y)) * _2986.y) / cbSceneParam._m0[78u].y)) + _2738;
        _2837 = (exp2(_3012 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2996 * cbSceneParam._m0[78u].z)) * _2986.z) / cbSceneParam._m0[78u].z)) + _2739;
        _2839 = _2995 * _2740;
    }
    else
    {
        _2833 = _2737;
        _2835 = _2738;
        _2837 = _2739;
        _2839 = _2740;
    }
    float _2851 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2852 = _2851 == 3.0;
    float _2853 = log2(_2839);
    float _2860 = exp2(_2853 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * (_2682 + ((isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) * _927))) + ((_2688 + ((isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0))) * _1734)) * cbPerFrame._m0[3u].x));
    float _2861 = exp2(_2853 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (_2684 + ((isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))) * _927))) + ((_2690 + ((isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0))) * _1734)) * cbPerFrame._m0[3u].x));
    float _2862 = exp2(_2853 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (_2686 + ((isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))) * _927))) + ((_2692 + ((isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0))) * _1734)) * cbPerFrame._m0[3u].x));
    float _2871 = (_2851 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2871 * (_2852 ? _2860 : (_2860 + (cbSceneParam._m0[72u].w * _2833)));
    SV_Target.y = _2871 * (_2852 ? _2861 : (_2861 + (cbSceneParam._m0[72u].w * _2835)));
    SV_Target.z = _2871 * (_2852 ? _2862 : (_2862 + (cbSceneParam._m0[72u].w * _2837)));
    SV_Target.w = cbInstanceData._m0[_2712].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2712].w;
}


