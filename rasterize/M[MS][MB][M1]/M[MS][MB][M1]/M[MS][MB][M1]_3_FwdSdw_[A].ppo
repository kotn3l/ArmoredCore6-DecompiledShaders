#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1018;
float _3687;
float _3688;
float _3689;
float _3690;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _243 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _244 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3699 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3710 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3721 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    uint _254 = uint(roundEven(NORMAL.w)) * 13u;
    uint _259 = _254 + 1u;
    uint _263 = _254 + 2u;
    float _272 = sqrt(((cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x)) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x));
    float _273 = _272 * TEXCOORD.z;
    float _274 = _272 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _273) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _274) + cbTextureTilingScale._m0[13u].w));
    vec4 _310 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _315 = _310.x * cbMtdParam._m0[9u].x;
    float _316 = _310.y * cbMtdParam._m0[9u].y;
    float _317 = _310.z * cbMtdParam._m0[9u].z;
    float _321 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _287.x) * _315;
    float _324 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _287.y) * _316;
    float _327 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _287.z) * _317;
    float _334 = ((_315 - _321) * (isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0)))) + _321;
    float _335 = ((_316 - _324) * (isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0)))) + _324;
    float _336 = ((_317 - _327) * (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0)))) + _327;
    vec4 _349 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _273) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _274) + cbTextureTilingScale._m0[20u].w));
    vec4 _375 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _379 = _375.z;
    float _383 = (_375.x * 2.0) + (-1.0);
    float _384 = (_375.y * 2.0) + (-1.0);
    float _385 = dot(vec2(_383, _384), vec2(_383, _384));
    float _3732 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _390 = sqrt(1.0 - (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))));
    float _395 = _383 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_349.x * 2.0) + (-1.0)));
    float _396 = _384 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_349.y * 2.0) + (-1.0)));
    vec4 _409 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _411 = _409.x;
    float _416 = (((_349.z - _379) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _379;
    float _418 = cbMtdParam._m0[22u].x + _375.w;
    float _421 = fma(_390, _220 * NORMAL.x, fma(_396, _227 * TANGENT.x, (_213 * _205) * _395));
    float _424 = fma(_390, _220 * NORMAL.y, fma(_396, _227 * TANGENT.y, (_213 * _206) * _395));
    float _427 = fma(_390, _220 * NORMAL.z, fma(_396, _227 * TANGENT.z, (_213 * _207) * _395));
    float _431 = inversesqrt(dot(vec3(_421, _424, _427), vec3(_421, _424, _427)));
    float _432 = _431 * _421;
    float _433 = _431 * _424;
    float _434 = _431 * _427;
    float _3743 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _435 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
    float _3754 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _3765 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _3776 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _3787 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _3798 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _440 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _454 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _496 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _506 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _496);
    float _507 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _496);
    float _508 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _496);
    float _512 = inversesqrt(dot(vec3(_506, _507, _508), vec3(_506, _507, _508)));
    float _513 = _506 * _512;
    float _514 = _507 * _512;
    float _515 = _508 * _512;
    vec4 _520 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _522 = _520.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _697 = sqrt(((_506 * _506) + (_507 * _507)) + (_508 * _508));
        float _703 = (cbMatDynParam._m0[5u].x * _697) + cbMatDynParam._m0[5u].y;
        float _3809 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        float _704 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _708 = (cbMatDynParam._m0[5u].z * _697) + cbMatDynParam._m0[5u].w;
        float _3820 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) - _704)) + _704) < ((_522 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _534 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _535 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _555 = fma(_434, cbSceneParam._m0[5u].z, fma(_433, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _432));
    float _558 = fma(_434, cbSceneParam._m0[6u].z, fma(_433, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _432));
    float _561 = fma(_434, cbSceneParam._m0[7u].z, fma(_433, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _432));
    uint _574 = _254 + 9u;
    uint _575 = _574 + uint(cbMatDynParam._m0[0u].w);
    float _581 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0)))) * cbInstanceData._m0[_575].x;
    float _582 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0)))) * cbInstanceData._m0[_575].y;
    float _583 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0)))) * cbInstanceData._m0[_575].z;
    float _3831 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _584 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _3842 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _585 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _3853 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _586 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _587 = 1.0 - _440;
    float _588 = _584 * _587;
    float _589 = _585 * _587;
    float _590 = _586 * _587;
    float _595 = (_584 + (-0.039999999105930328369140625)) * _440;
    float _596 = (_585 + (-0.039999999105930328369140625)) * _440;
    float _597 = (_586 + (-0.039999999105930328369140625)) * _440;
    float _598 = _595 + 0.039999999105930328369140625;
    float _600 = _596 + 0.039999999105930328369140625;
    float _601 = _597 + 0.039999999105930328369140625;
    vec4 _610 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _534, cbSceneParam._m0[86u].y * _535));
    float _614 = ((isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * TEXCOORD_5.w) * _610.x;
    float _615 = dot(vec3(_432, _433, _434), vec3(_513, _514, _515));
    float _618 = _615 * 2.0;
    float _622 = (_618 * _432) - _513;
    float _623 = (_618 * _433) - _514;
    float _624 = (_618 * _434) - _515;
    float _628 = abs(dot(vec3(_513, _514, _515), vec3(_432, _433, _434)));
    float _3864 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _630 = sqrt(_435);
    float _643 = exp2((_630 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_630 * 3.0));
    float _649 = (1.0 - _643) * ((_630 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _650 = _643 * _630;
    float _678 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _682 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _686 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1017;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _742 = fma(_686, cbModelParam._m0[26u].z, fma(_682, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _678));
        float _746 = fma(_686, cbModelParam._m0[27u].z, fma(_682, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _678));
        float _750 = fma(_686, cbModelParam._m0[28u].z, fma(_682, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _678));
        float _775 = _678 + _432;
        float _776 = _682 + _433;
        float _777 = _686 + _434;
        float _787 = fma(_777, cbModelParam._m0[26u].z, fma(_776, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _775)) - _742;
        float _788 = fma(_777, cbModelParam._m0[27u].z, fma(_776, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _775)) - _746;
        float _789 = fma(_777, cbModelParam._m0[28u].z, fma(_776, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _775)) - _750;
        float _793 = inversesqrt(dot(vec3(_787, _788, _789), vec3(_787, _788, _789)));
        float _806 = ((_793 * _787) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_742 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _807 = ((_793 * _788) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_746 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _808 = ((_793 * _789) / cbModelParam._m0[34u].z) + ((((((_750 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _811 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        vec4 _818 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        vec4 _825 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        vec4 _832 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        float _845 = exp2((_811.w + (-0.5)) * 20.0) * 2.0;
        float _846 = _845 * (_811.x + (-0.5));
        float _847 = _845 * (_811.y + (-0.5));
        float _848 = _845 * (_811.z + (-0.5));
        float _855 = exp2((_818.w + (-0.5)) * 20.0) * 2.0;
        float _856 = _855 * (_818.x + (-0.5));
        float _857 = _855 * (_818.y + (-0.5));
        float _858 = _855 * (_818.z + (-0.5));
        float _865 = exp2((_825.w + (-0.5)) * 20.0) * 2.0;
        float _866 = _865 * (_825.x + (-0.5));
        float _867 = _865 * (_825.y + (-0.5));
        float _868 = _865 * (_825.z + (-0.5));
        float _875 = exp2((_832.w + (-0.5)) * 20.0) * 2.0;
        float _876 = _875 * (_832.x + (-0.5));
        float _877 = _875 * (_832.y + (-0.5));
        float _878 = _875 * (_832.z + (-0.5));
        float _879 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _880 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _881 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _882 = _846 * 0.5;
        float _883 = _856 * 0.5;
        float _884 = _866 * 0.5;
        float _885 = dot(vec3(_882, _883, _884), vec3(_882, _883, _884));
        float _890 = (_885 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_885);
        float _899 = (dot(vec3(_432, _433, _434), vec3(_890 * _882, _890 * _883, _890 * _884)) + 1.0) * 0.5;
        float _3890 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _909 = sqrt(((_883 * _883) + (_882 * _882)) + (_884 * _884)) / (_879 + 9.9999997473787516355514526367188e-06);
        float _3901 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _910 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _911 = _910 * 2.0;
        float _915 = (1.0 - _910) / (_910 + 1.0);
        float _3912 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _925 = ((((1.0 - _916) * (_911 + 2.0)) * exp2(log2(isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * (_911 + 1.0))) + _916) * _879;
        float _926 = _847 * 0.5;
        float _927 = _857 * 0.5;
        float _928 = _867 * 0.5;
        float _929 = dot(vec3(_926, _927, _928), vec3(_926, _927, _928));
        float _934 = (_929 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_929);
        float _942 = (dot(vec3(_432, _433, _434), vec3(_934 * _926, _934 * _927, _934 * _928)) + 1.0) * 0.5;
        float _3923 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _951 = sqrt(((_927 * _927) + (_926 * _926)) + (_928 * _928)) / (_880 + 9.9999997473787516355514526367188e-06);
        float _3934 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _953 = _952 * 2.0;
        float _957 = (1.0 - _952) / (_952 + 1.0);
        float _3945 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _967 = ((((1.0 - _958) * (_953 + 2.0)) * exp2(log2(isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * (_953 + 1.0))) + _958) * _880;
        float _968 = _848 * 0.5;
        float _969 = _858 * 0.5;
        float _970 = _868 * 0.5;
        float _971 = dot(vec3(_968, _969, _970), vec3(_968, _969, _970));
        float _976 = (_971 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_971);
        float _984 = (dot(vec3(_432, _433, _434), vec3(_976 * _968, _976 * _969, _976 * _970)) + 1.0) * 0.5;
        float _3956 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _993 = sqrt(((_969 * _969) + (_968 * _968)) + (_970 * _970)) / (_881 + 9.9999997473787516355514526367188e-06);
        float _3967 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _995 = _994 * 2.0;
        float _999 = (1.0 - _994) / (_994 + 1.0);
        float _3978 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1009 = ((((1.0 - _1000) * (_995 + 2.0)) * exp2(log2(isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * (_995 + 1.0))) + _1000) * _881;
        _1017 = _848;
        _1019 = _847;
        _1020 = _846;
        _1021 = _858;
        _1022 = _857;
        _1023 = _856;
        _1024 = _868;
        _1025 = _867;
        _1026 = _866;
        _1027 = _881;
        _1028 = _880;
        _1029 = _879;
        _1030 = cbModelParam._m0[36u].z * (isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0)));
        _1031 = cbModelParam._m0[36u].z * (isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0)));
        _1032 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0)));
    }
    else
    {
        _1017 = _1018;
        _1019 = _1018;
        _1020 = _1018;
        _1021 = _1018;
        _1022 = _1018;
        _1023 = _1018;
        _1024 = _1018;
        _1025 = _1018;
        _1026 = _1018;
        _1027 = _1018;
        _1028 = _1018;
        _1029 = _1018;
        _1030 = 0.0;
        _1031 = 0.0;
        _1032 = 0.0;
    }
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1060 = fma(_686, cbModelParam._m0[30u].z, fma(_682, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _678));
        float _1064 = fma(_686, cbModelParam._m0[31u].z, fma(_682, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _678));
        float _1068 = fma(_686, cbModelParam._m0[32u].z, fma(_682, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _678));
        float _1091 = _678 + _432;
        float _1092 = _682 + _433;
        float _1093 = _686 + _434;
        float _1103 = fma(_1093, cbModelParam._m0[30u].z, fma(_1092, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1091)) - _1060;
        float _1104 = fma(_1093, cbModelParam._m0[31u].z, fma(_1092, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1091)) - _1064;
        float _1105 = fma(_1093, cbModelParam._m0[32u].z, fma(_1092, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1091)) - _1068;
        float _1109 = inversesqrt(dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105)));
        float _1122 = ((_1109 * _1103) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1060 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1123 = ((_1109 * _1104) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1064 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1124 = ((_1109 * _1105) / cbModelParam._m0[35u].z) + ((((((_1068 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        float _1159 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1126.x + (-0.5));
        float _1161 = _1159 * (_1126.y + (-0.5));
        float _1162 = _1159 * (_1126.z + (-0.5));
        float _1169 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1133.x + (-0.5));
        float _1171 = _1169 * (_1133.y + (-0.5));
        float _1172 = _1169 * (_1133.z + (-0.5));
        float _1179 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1140.x + (-0.5));
        float _1181 = _1179 * (_1140.y + (-0.5));
        float _1182 = _1179 * (_1140.z + (-0.5));
        float _1189 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1147.x + (-0.5));
        float _1191 = _1189 * (_1147.y + (-0.5));
        float _1192 = _1189 * (_1147.z + (-0.5));
        float _1193 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = _1160 * 0.5;
        float _1197 = _1170 * 0.5;
        float _1198 = _1180 * 0.5;
        float _1199 = dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198));
        float _1204 = (_1199 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1199);
        float _1212 = (dot(vec3(_432, _433, _434), vec3(_1204 * _1196, _1204 * _1197, _1204 * _1198)) + 1.0) * 0.5;
        float _4019 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1221 = sqrt(((_1197 * _1197) + (_1196 * _1196)) + (_1198 * _1198)) / (_1193 + 9.9999997473787516355514526367188e-06);
        float _4030 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1223 = _1222 * 2.0;
        float _1227 = (1.0 - _1222) / (_1222 + 1.0);
        float _4041 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1237 = ((((1.0 - _1228) * (_1223 + 2.0)) * exp2(log2(isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_1223 + 1.0))) + _1228) * _1193;
        float _1238 = _1161 * 0.5;
        float _1239 = _1171 * 0.5;
        float _1240 = _1181 * 0.5;
        float _1241 = dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240));
        float _1246 = (_1241 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1241);
        float _1254 = (dot(vec3(_432, _433, _434), vec3(_1246 * _1238, _1246 * _1239, _1246 * _1240)) + 1.0) * 0.5;
        float _4052 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1263 = sqrt(((_1239 * _1239) + (_1238 * _1238)) + (_1240 * _1240)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _4063 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1265 = _1264 * 2.0;
        float _1269 = (1.0 - _1264) / (_1264 + 1.0);
        float _4074 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1279 = ((((1.0 - _1270) * (_1265 + 2.0)) * exp2(log2(isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_1265 + 1.0))) + _1270) * _1194;
        float _1280 = _1162 * 0.5;
        float _1281 = _1172 * 0.5;
        float _1282 = _1182 * 0.5;
        float _1283 = dot(vec3(_1280, _1281, _1282), vec3(_1280, _1281, _1282));
        float _1288 = (_1283 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1283);
        float _1296 = (dot(vec3(_432, _433, _434), vec3(_1288 * _1280, _1288 * _1281, _1288 * _1282)) + 1.0) * 0.5;
        float _4085 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1305 = sqrt(((_1281 * _1281) + (_1280 * _1280)) + (_1282 * _1282)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _4096 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1307 = _1306 * 2.0;
        float _1311 = (1.0 - _1306) / (_1306 + 1.0);
        float _4107 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1321 = ((((1.0 - _1312) * (_1307 + 2.0)) * exp2(log2(isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (_1307 + 1.0))) + _1312) * _1195;
        _1329 = _1162;
        _1330 = _1161;
        _1331 = _1160;
        _1332 = _1172;
        _1333 = _1171;
        _1334 = _1170;
        _1335 = _1182;
        _1336 = _1181;
        _1337 = _1180;
        _1338 = _1195;
        _1339 = _1194;
        _1340 = _1193;
        _1341 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)));
        _1342 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)));
        _1343 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)));
    }
    else
    {
        _1329 = _1018;
        _1330 = _1018;
        _1331 = _1018;
        _1332 = _1018;
        _1333 = _1018;
        _1334 = _1018;
        _1335 = _1018;
        _1336 = _1018;
        _1337 = _1018;
        _1338 = _1018;
        _1339 = _1018;
        _1340 = _1018;
        _1341 = 0.0;
        _1342 = 0.0;
        _1343 = 0.0;
    }
    float _1353 = (cbModelParam._m0[1u].x * (_1341 - _1030)) + _1030;
    float _1354 = (cbModelParam._m0[1u].x * (_1342 - _1031)) + _1031;
    float _1355 = (cbModelParam._m0[1u].x * (_1343 - _1032)) + _1032;
    float _1376 = fma(_1355, cbSceneParam._m0[89u].z, fma(_1354, cbSceneParam._m0[89u].y, _1353 * cbSceneParam._m0[89u].x));
    float _1379 = fma(_1355, cbSceneParam._m0[90u].z, fma(_1354, cbSceneParam._m0[90u].y, _1353 * cbSceneParam._m0[90u].x));
    float _1382 = fma(_1355, cbSceneParam._m0[91u].z, fma(_1354, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1353));
    float _1397 = _622 * 0.5;
    float _1398 = _623 * 0.5;
    float _1399 = _624 * 0.5;
    float _1400 = dot(vec4(_1397, _1398, _1399, 1.0), vec4(_1331, _1334, _1337, _1340));
    float _1403 = dot(vec4(_1397, _1398, _1399, 1.0), vec4(_1330, _1333, _1336, _1339));
    float _1406 = dot(vec4(_1397, _1398, _1399, 1.0), vec4(_1329, _1332, _1335, _1338));
    float _1440;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1413 = dot(vec4(_1397, _1398, _1399, 1.0), vec4(_1017, _1021, _1024, _1027));
        float _1417 = dot(vec4(_1397, _1398, _1399, 1.0), vec4(_1019, _1022, _1025, _1028));
        float _1421 = dot(vec4(_1397, _1398, _1399, 1.0), vec4(_1020, _1023, _1026, _1029));
        float _1428 = dot(vec4(cbModelParam._m0[39u]), vec4(_1397, _1398, _1399, 1.0));
        _1440 = dot(vec3(isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)), isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)), isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1428) ? 0.0 : (isnan(0.0) ? _1428 : max(0.0, _1428))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1440 = 1.0;
    }
    float _1451;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1442 = dot(vec4(cbModelParam._m0[40u]), vec4(_1397, _1398, _1399, 1.0));
        _1451 = dot(vec3(isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)), isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)), isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1442) ? 0.0 : (isnan(0.0) ? _1442 : max(0.0, _1442))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1451 = 1.0;
    }
    float _1455 = (_1451 * cbModelParam._m0[1u].x) + (_1440 * (1.0 - cbModelParam._m0[1u].x));
    float _1465 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _435);
    float _1466 = isnan(_1465) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1465 : min(cbModelParam._m0[25u].z, _1465));
    float _1548;
    float _1550;
    float _1552;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1515 = fma(_686, cbModelParam._m0[13u].z, fma(_682, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _678)) + cbModelParam._m0[13u].w;
        float _1519 = fma(_686, cbModelParam._m0[14u].z, fma(_682, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _678)) + cbModelParam._m0[14u].w;
        float _1523 = fma(_686, cbModelParam._m0[15u].z, fma(_682, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _678)) + cbModelParam._m0[15u].w;
        float _1526 = fma(_624, cbModelParam._m0[13u].z, fma(_623, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _622));
        float _1529 = fma(_624, cbModelParam._m0[14u].z, fma(_623, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _622));
        float _1532 = fma(_624, cbModelParam._m0[15u].z, fma(_623, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _622));
        float _1560;
        if (_1526 > 0.0)
        {
            _1560 = abs((1.0 - _1515) / _1526);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1526 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1515 + 1.0) / _1526);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1560 = frontier_phi_17_15_ladder;
        }
        float _1734;
        if (_1529 > 0.0)
        {
            _1734 = abs((1.0 - _1519) / _1529);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1529 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1519 + 1.0) / _1529);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1734 = frontier_phi_26_22_ladder;
        }
        float _2030;
        if (_1532 > 0.0)
        {
            _2030 = abs((1.0 - _1523) / _1532);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1532 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1523 + 1.0) / _1532);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2030 = frontier_phi_38_33_ladder;
        }
        float _2032 = isnan(_1734) ? _1560 : (isnan(_1560) ? _1734 : min(_1560, _1734));
        float _2033 = isnan(_2030) ? _2032 : (isnan(_2032) ? _2030 : min(_2032, _2030));
        float _2037 = (_2033 * _1526) + _1515;
        float _2038 = (_2033 * _1529) + _1519;
        float _2039 = (_2033 * _1532) + _1523;
        float _2040 = _2033 * 9.9999997473787516355514526367188e-05;
        float _2042 = (-1.0) - _2040;
        float _2044 = _2040 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2039 > _2044) || ((_2039 < _2042) || ((_2038 > _2044) || ((_2038 < _2042) || ((_2037 < _2042) || (_2037 > _2044))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2184 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2039, cbModelParam._m0[9u].z, fma(_2038, cbModelParam._m0[9u].y, _2037 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2039, cbModelParam._m0[10u].z, fma(_2038, cbModelParam._m0[10u].y, _2037 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2039, cbModelParam._m0[11u].z, fma(_2038, cbModelParam._m0[11u].y, _2037 * cbModelParam._m0[11u].x))), _1466);
            frontier_phi_16_38_ladder = _2184.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2184.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2184.x * cbModelParam._m0[1u].y;
        }
        _1548 = frontier_phi_16_38_ladder_2;
        _1550 = frontier_phi_16_38_ladder_1;
        _1552 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1536 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_622, _623, _624), _1466);
        _1548 = _1536.x * cbModelParam._m0[1u].y;
        _1550 = _1536.y * cbModelParam._m0[1u].y;
        _1552 = _1536.z * cbModelParam._m0[1u].y;
    }
    float _1556 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _435);
    float _1557 = isnan(_1556) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1556 : min(cbModelParam._m0[25u].w, _1556));
    float _1649;
    float _1651;
    float _1653;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1613 = fma(_686, cbModelParam._m0[21u].z, fma(_682, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _678)) + cbModelParam._m0[21u].w;
        float _1617 = fma(_686, cbModelParam._m0[22u].z, fma(_682, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _678)) + cbModelParam._m0[22u].w;
        float _1621 = fma(_686, cbModelParam._m0[23u].z, fma(_682, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _678)) + cbModelParam._m0[23u].w;
        float _1624 = fma(_624, cbModelParam._m0[21u].z, fma(_623, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _622));
        float _1627 = fma(_624, cbModelParam._m0[22u].z, fma(_623, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _622));
        float _1630 = fma(_624, cbModelParam._m0[23u].z, fma(_623, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _622));
        float _1739;
        if (_1624 > 0.0)
        {
            _1739 = abs((1.0 - _1613) / _1624);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1624 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1613 + 1.0) / _1624);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1739 = frontier_phi_28_24_ladder;
        }
        float _2057;
        if (_1627 > 0.0)
        {
            _2057 = abs((1.0 - _1617) / _1627);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1627 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1617 + 1.0) / _1627);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2057 = frontier_phi_40_35_ladder;
        }
        float _2395;
        if (_1630 > 0.0)
        {
            _2395 = abs((1.0 - _1621) / _1630);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1630 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1621 + 1.0) / _1630);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2395 = frontier_phi_50_47_ladder;
        }
        float _2397 = isnan(_2057) ? _1739 : (isnan(_1739) ? _2057 : min(_1739, _2057));
        float _2398 = isnan(_2395) ? _2397 : (isnan(_2397) ? _2395 : min(_2397, _2395));
        float _2402 = (_2398 * _1624) + _1613;
        float _2403 = (_2398 * _1627) + _1617;
        float _2404 = (_2398 * _1630) + _1621;
        float _2405 = _2398 * 9.9999997473787516355514526367188e-05;
        float _2406 = (-1.0) - _2405;
        float _2408 = _2405 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2404 > _2408) || ((_2404 < _2406) || ((_2403 > _2408) || ((_2403 < _2406) || ((_2402 < _2406) || (_2402 > _2408))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2526 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2404, cbModelParam._m0[17u].z, fma(_2403, cbModelParam._m0[17u].y, _2402 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2404, cbModelParam._m0[18u].z, fma(_2403, cbModelParam._m0[18u].y, _2402 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2404, cbModelParam._m0[19u].z, fma(_2403, cbModelParam._m0[19u].y, _2402 * cbModelParam._m0[19u].x))), _1557);
            frontier_phi_25_50_ladder = _2526.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2526.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2526.x * cbModelParam._m0[1u].z;
        }
        _1649 = frontier_phi_25_50_ladder_2;
        _1651 = frontier_phi_25_50_ladder_1;
        _1653 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1633 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_622, _623, _624), _1557);
        _1649 = _1633.x * cbModelParam._m0[1u].z;
        _1651 = _1633.y * cbModelParam._m0[1u].z;
        _1653 = _1633.z * cbModelParam._m0[1u].z;
    }
    float _1666 = (((_649 * _598) + _650) * _614) * ((cbModelParam._m0[1u].w * (_1649 - _1548)) + _1548);
    float _1668 = (((_649 * _600) + _650) * _614) * ((cbModelParam._m0[1u].w * (_1651 - _1550)) + _1550);
    float _1670 = (((_649 * _601) + _650) * _614) * ((cbModelParam._m0[1u].w * (_1653 - _1552)) + _1552);
    float _1673 = fma(_1670, cbSceneParam._m0[89u].z, fma(_1668, cbSceneParam._m0[89u].y, _1666 * cbSceneParam._m0[89u].x));
    float _1676 = fma(_1670, cbSceneParam._m0[90u].z, fma(_1668, cbSceneParam._m0[90u].y, _1666 * cbSceneParam._m0[90u].x));
    float _1679 = fma(_1670, cbSceneParam._m0[91u].z, fma(_1668, cbSceneParam._m0[91u].y, _1666 * cbSceneParam._m0[91u].x));
    float _1713 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1717 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1721 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1725 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1726 = _1713 / _1725;
    float _1727 = _1717 / _1725;
    float _1728 = _1721 / _1725;
    float _1875;
    float _1876;
    float _1877;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1755 = ((uint(_1728 > cbSceneParam._m0[59u].y) + uint(_1728 > cbSceneParam._m0[59u].x)) + uint(_1728 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1756 = _1755 + 43u;
        uint _1764 = _1755 + 44u;
        uint _1772 = _1755 + 45u;
        uint _1780 = _1755 + 46u;
        float _1791 = fma(_1725, cbSceneParam._m0[_1756].w, fma(_1721, cbSceneParam._m0[_1756].z, fma(_1717, cbSceneParam._m0[_1756].y, _1713 * cbSceneParam._m0[_1756].x)));
        float _1795 = fma(_1725, cbSceneParam._m0[_1764].w, fma(_1721, cbSceneParam._m0[_1764].z, fma(_1717, cbSceneParam._m0[_1764].y, _1713 * cbSceneParam._m0[_1764].x)));
        float _1803 = fma(_1725, cbSceneParam._m0[_1780].w, fma(_1721, cbSceneParam._m0[_1780].z, fma(_1717, cbSceneParam._m0[_1780].y, _1713 * cbSceneParam._m0[_1780].x)));
        float _1808 = cbSceneParam._m0[33u].z * _1803;
        float _1810 = cbSceneParam._m0[33u].w * _1803;
        float _1813 = fma(_1725, cbSceneParam._m0[_1772].w, fma(_1721, cbSceneParam._m0[_1772].z, fma(_1717, cbSceneParam._m0[_1772].y, _1713 * cbSceneParam._m0[_1772].x))) / _1803;
        float _1861 = (cbSceneParam._m0[33u].x - sqrt(((_1727 * _1727) + (_1726 * _1726)) + (_1728 * _1728))) * cbSceneParam._m0[33u].y;
        float _4233 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
        float _1868 = (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1808 + _1791) / _1803, (_1810 + _1795) / _1803), _1813), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1810 + _1791) / _1803, (_1795 - _1808) / _1803), _1813), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1791 - _1808) / _1803, (_1795 - _1810) / _1803), _1813), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1791 - _1810) / _1803, (_1808 + _1795) / _1803), _1813), 0.0)).x), vec4(0.25)));
        _1875 = 1.0 - (_1868 * cbSceneParam._m0[34u].x);
        _1876 = 1.0 - (_1868 * cbSceneParam._m0[34u].y);
        _1877 = 1.0 - (_1868 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1875 = 1.0;
        _1876 = 1.0;
        _1877 = 1.0;
    }
    float _1941;
    float _1943;
    float _1945;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1929 = fma(_1725, cbSceneParam._m0[63u].w, fma(_1721, cbSceneParam._m0[63u].z, fma(_1717, cbSceneParam._m0[63u].y, _1713 * cbSceneParam._m0[63u].x)));
        float _1930 = fma(_1725, cbSceneParam._m0[60u].w, fma(_1721, cbSceneParam._m0[60u].z, fma(_1717, cbSceneParam._m0[60u].y, _1713 * cbSceneParam._m0[60u].x))) / _1929;
        float _1931 = fma(_1725, cbSceneParam._m0[61u].w, fma(_1721, cbSceneParam._m0[61u].z, fma(_1717, cbSceneParam._m0[61u].y, _1713 * cbSceneParam._m0[61u].x))) / _1929;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1930 >= cbSceneParam._m0[64u].x) && (_1931 >= cbSceneParam._m0[64u].y)) && (_1930 <= cbSceneParam._m0[64u].z)) && (_1931 <= cbSceneParam._m0[64u].w))
        {
            float _2070 = fma(_1725, cbSceneParam._m0[62u].w, fma(_1721, cbSceneParam._m0[62u].z, fma(_1717, cbSceneParam._m0[62u].y, _1713 * cbSceneParam._m0[62u].x))) / _1929;
            float _2074 = isnan(cbSceneParam._m0[41u].w) ? _2070 : (isnan(_2070) ? cbSceneParam._m0[41u].w : max(_2070, cbSceneParam._m0[41u].w));
            float _2117 = (cbSceneParam._m0[33u].x - sqrt(((_1727 * _1727) + (_1726 * _1726)) + (_1728 * _1728))) * cbSceneParam._m0[33u].y;
            float _4249 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
            float _2124 = (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1930, cbSceneParam._m0[33u].w + _1931), _2074), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1930, _1931 - cbSceneParam._m0[33u].z), _2074), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1930 - cbSceneParam._m0[33u].z, _1931 - cbSceneParam._m0[33u].w), _2074), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1930 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1931), _2074), 0.0)).x), vec4(0.25)));
            float _2128 = 1.0 - (_2124 * cbSceneParam._m0[34u].x);
            float _2129 = 1.0 - (_2124 * cbSceneParam._m0[34u].y);
            float _2130 = 1.0 - (_2124 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2130) ? _1877 : (isnan(_1877) ? _2130 : min(_1877, _2130));
            frontier_phi_37_36_ladder_1 = isnan(_2129) ? _1876 : (isnan(_1876) ? _2129 : min(_1876, _2129));
            frontier_phi_37_36_ladder_2 = isnan(_2128) ? _1875 : (isnan(_1875) ? _2128 : min(_1875, _2128));
        }
        else
        {
            frontier_phi_37_36_ladder = _1877;
            frontier_phi_37_36_ladder_1 = _1876;
            frontier_phi_37_36_ladder_2 = _1875;
        }
        _1941 = frontier_phi_37_36_ladder_2;
        _1943 = frontier_phi_37_36_ladder_1;
        _1945 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1941 = _1875;
        _1943 = _1876;
        _1945 = _1877;
    }
    uvec4 _1950 = floatBitsToUint(cbInstanceData._m0[_254 + 5u]);
    uint _1952 = _1950.x * 14u;
    uint _1953 = _1952 + 13u;
    float _1960 = _614 + (-1.0);
    float _1965 = (cbLight._m0[_1953].x * _1960) + 1.0;
    float _1966 = (cbLight._m0[_1953].y * _1960) + 1.0;
    float _1967 = (cbLight._m0[_1953].z * _1960) + 1.0;
    float _1968 = (cbLight._m0[_1953].w * _1960) + 1.0;
    uint _1969 = _1952 + 5u;
    float _1975 = isnan(1.0) ? _1966 : (isnan(_1966) ? 1.0 : min(_1966, 1.0));
    uint _1979 = _1952 + 4u;
    float _1989 = isnan(1.0) ? _1965 : (isnan(_1965) ? 1.0 : min(_1965, 1.0));
    uint _1993 = _1952 | 1u;
    float _2004 = dot(vec3(cbLight._m0[_1952].xyz), vec3(_432, _433, _434));
    float _2007 = dot(vec3(cbLight._m0[_1993].xyz), vec3(_432, _433, _434));
    float _4285 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _4296 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2012 = (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * 0.3183098733425140380859375;
    float _2014 = (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * 0.3183098733425140380859375;
    float _2021 = ((cbLight._m0[_1969].x * _1975) * _2014) + (((cbLight._m0[_1979].x * _1941) * _1989) * _2012);
    float _2022 = ((_1975 * cbLight._m0[_1969].y) * _2014) + (((cbLight._m0[_1979].y * _1943) * _1989) * _2012);
    float _2023 = ((_1975 * cbLight._m0[_1969].z) * _2014) + (((cbLight._m0[_1979].z * _1945) * _1989) * _2012);
    uvec4 _2027 = floatBitsToUint(cbLight._m0[_1952 + 12u]);
    bool _2029 = _2027.x == 0u;
    float _2131;
    float _2133;
    float _2135;
    if (_2029)
    {
        _2131 = _2021;
        _2133 = _2022;
        _2135 = _2023;
    }
    else
    {
        uint _2139 = _1952 + 6u;
        float _2155 = (dot(vec3(cbLight._m0[_1952 + 2u].xyz), vec3(_432, _433, _434)) * 0.5) + 0.5;
        float _2156 = _2155 * _2155;
        float _4307 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
        float _2157 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _2158 = isnan(1.0) ? _1967 : (isnan(_1967) ? 1.0 : min(_1967, 1.0));
        _2131 = (((cbLight._m0[_2139].x * 0.3183098733425140380859375) * _2157) * _2158) + _2021;
        _2133 = (((cbLight._m0[_2139].y * 0.3183098733425140380859375) * _2157) * _2158) + _2022;
        _2135 = (((cbLight._m0[_2139].z * 0.3183098733425140380859375) * _2157) * _2158) + _2023;
    }
    bool _2138 = _2027.y == 0u;
    float _2193;
    float _2195;
    float _2197;
    if (_2138)
    {
        _2193 = _2131;
        _2195 = _2133;
        _2197 = _2135;
    }
    else
    {
        uint _2366 = _1952 + 7u;
        float _2382 = (dot(vec3(cbLight._m0[_1952 + 3u].xyz), vec3(_432, _433, _434)) * 0.5) + 0.5;
        float _2383 = _2382 * _2382;
        float _4323 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        float _2384 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _2385 = isnan(1.0) ? _1968 : (isnan(_1968) ? 1.0 : min(_1968, 1.0));
        _2193 = (((cbLight._m0[_2366].x * 0.3183098733425140380859375) * _2384) * _2385) + _2131;
        _2195 = (((cbLight._m0[_2366].y * 0.3183098733425140380859375) * _2384) * _2385) + _2133;
        _2197 = (((cbLight._m0[_2366].z * 0.3183098733425140380859375) * _2384) * _2385) + _2135;
    }
    uint _2200 = _1952 + 8u;
    float _2213 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1952].w)) * _435) * 0.949999988079071044921875);
    float _2214 = _2213 * _2213;
    float _2215 = cbLight._m0[_1952].x + _513;
    float _2216 = cbLight._m0[_1952].y + _514;
    float _2217 = cbLight._m0[_1952].z + _515;
    float _2221 = inversesqrt(dot(vec3(_2215, _2216, _2217), vec3(_2215, _2216, _2217)));
    float _2222 = _2221 * _2215;
    float _2223 = _2221 * _2216;
    float _2224 = _2221 * _2217;
    float _2225 = dot(vec3(_432, _433, _434), vec3(cbLight._m0[_1952].xyz));
    float _4339 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _2228 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
    float _4350 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _2229 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
    float _2230 = dot(vec3(_432, _433, _434), vec3(_2222, _2223, _2224));
    float _4361 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2233 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
    float _2234 = dot(vec3(cbLight._m0[_1952].xyz), vec3(_2222, _2223, _2224));
    float _4372 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2238 = _2214 * _2214;
    float _2242 = ((_2233 * _2233) * (_2238 + (-1.0))) + 1.0;
    float _2250 = exp2(log2(1.0 - (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0)))) * 5.0);
    float _2251 = 0.959999978542327880859375 - _595;
    float _2253 = 0.959999978542327880859375 - _596;
    float _2254 = 0.959999978542327880859375 - _597;
    float _2261 = 1.0 - _2214;
    float _2272 = (0.5 / (((_2229 * ((_2228 * _2261) + _2214)) + 9.9999999392252902907785028219223e-09) + (((_2229 * _2261) + _2214) * _2228))) * _2228;
    float _4383 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2274 = (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_2238 / ((_2242 * _2242) * 3.141590118408203125));
    uint _2288 = _1952 + 9u;
    float _2299 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1993].w)) * _435) * 0.949999988079071044921875);
    float _2300 = _2299 * _2299;
    float _2301 = cbLight._m0[_1993].x + _513;
    float _2302 = cbLight._m0[_1993].y + _514;
    float _2303 = cbLight._m0[_1993].z + _515;
    float _2307 = inversesqrt(dot(vec3(_2301, _2302, _2303), vec3(_2301, _2302, _2303)));
    float _2308 = _2307 * _2301;
    float _2309 = _2307 * _2302;
    float _2310 = _2307 * _2303;
    float _2311 = dot(vec3(_432, _433, _434), vec3(cbLight._m0[_1993].xyz));
    float _4394 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2314 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
    float _2315 = dot(vec3(_432, _433, _434), vec3(_2308, _2309, _2310));
    float _4405 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2318 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
    float _2319 = dot(vec3(cbLight._m0[_1993].xyz), vec3(_2308, _2309, _2310));
    float _4416 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    float _2323 = _2300 * _2300;
    float _2327 = ((_2318 * _2318) * (_2323 + (-1.0))) + 1.0;
    float _2334 = exp2(log2(1.0 - (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0)))) * 5.0);
    float _2341 = 1.0 - _2300;
    float _2351 = (0.5 / (((_2229 * ((_2314 * _2341) + _2300)) + 9.9999999392252902907785028219223e-09) + (((_2229 * _2341) + _2300) * _2314))) * _2314;
    float _4427 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2353 = (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_2323 / ((_2327 * _2327) * 3.141590118408203125));
    float _2363 = (((((_2334 * _2251) + _598) * cbLight._m0[_2288].x) * _2353) * _1975) + ((((cbLight._m0[_2200].x * _1941) * ((_2250 * _2251) + _598)) * _2274) * _1989);
    float _2364 = (((((_2334 * _2253) + _600) * cbLight._m0[_2288].y) * _2353) * _1975) + ((((cbLight._m0[_2200].y * _1943) * ((_2250 * _2253) + _600)) * _2274) * _1989);
    float _2365 = (((((_2334 * _2254) + _601) * cbLight._m0[_2288].z) * _2353) * _1975) + ((((cbLight._m0[_2200].z * _1945) * ((_2250 * _2254) + _601)) * _2274) * _1989);
    float _2421;
    float _2423;
    float _2425;
    if (_2029)
    {
        _2421 = _2363;
        _2423 = _2364;
        _2425 = _2365;
    }
    else
    {
        uint _2427 = _1952 + 2u;
        uint _2431 = _1952 + 10u;
        float _2445 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2427].w)) * _435) * 0.949999988079071044921875);
        float _2446 = _2445 * _2445;
        float _2447 = cbLight._m0[_2427].x + _513;
        float _2448 = cbLight._m0[_2427].y + _514;
        float _2449 = cbLight._m0[_2427].z + _515;
        float _2453 = inversesqrt(dot(vec3(_2447, _2448, _2449), vec3(_2447, _2448, _2449)));
        float _2454 = _2453 * _2447;
        float _2455 = _2453 * _2448;
        float _2456 = _2453 * _2449;
        float _2457 = dot(vec3(_432, _433, _434), vec3(cbLight._m0[_2427].xyz));
        float _4438 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2460 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _2461 = dot(vec3(_432, _433, _434), vec3(_2454, _2455, _2456));
        float _4449 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2464 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _2465 = dot(vec3(cbLight._m0[_2427].xyz), vec3(_2454, _2455, _2456));
        float _4460 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2469 = _2446 * _2446;
        float _2473 = ((_2464 * _2464) * (_2469 + (-1.0))) + 1.0;
        float _2480 = exp2(log2(1.0 - (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0)))) * 5.0);
        float _2487 = 1.0 - _2446;
        float _2497 = (0.5 / (((_2229 * ((_2460 * _2487) + _2446)) + 9.9999999392252902907785028219223e-09) + (((_2229 * _2487) + _2446) * _2460))) * _2460;
        float _4471 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2499 = (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_2469 / ((_2473 * _2473) * 3.141590118408203125));
        float _2500 = isnan(1.0) ? _1967 : (isnan(_1967) ? 1.0 : min(_1967, 1.0));
        _2421 = (((((_2480 * _2251) + _598) * cbLight._m0[_2431].x) * _2499) * _2500) + _2363;
        _2423 = (((((_2480 * _2253) + _600) * cbLight._m0[_2431].y) * _2499) * _2500) + _2364;
        _2425 = (((((_2480 * _2254) + _601) * cbLight._m0[_2431].z) * _2499) * _2500) + _2365;
    }
    float _2531;
    float _2533;
    float _2535;
    if (_2138)
    {
        _2531 = _2421;
        _2533 = _2423;
        _2535 = _2425;
    }
    else
    {
        uint _2542 = _1952 + 3u;
        uint _2546 = _1952 + 11u;
        float _2560 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2542].w)) * _435) * 0.949999988079071044921875);
        float _2561 = _2560 * _2560;
        float _2562 = cbLight._m0[_2542].x + _513;
        float _2563 = cbLight._m0[_2542].y + _514;
        float _2564 = cbLight._m0[_2542].z + _515;
        float _2568 = inversesqrt(dot(vec3(_2562, _2563, _2564), vec3(_2562, _2563, _2564)));
        float _2569 = _2568 * _2562;
        float _2570 = _2568 * _2563;
        float _2571 = _2568 * _2564;
        float _2572 = dot(vec3(_432, _433, _434), vec3(cbLight._m0[_2542].xyz));
        float _4487 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
        float _2575 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _2576 = dot(vec3(_432, _433, _434), vec3(_2569, _2570, _2571));
        float _4498 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2579 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _2580 = dot(vec3(cbLight._m0[_2542].xyz), vec3(_2569, _2570, _2571));
        float _4509 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2584 = _2561 * _2561;
        float _2588 = ((_2579 * _2579) * (_2584 + (-1.0))) + 1.0;
        float _2595 = exp2(log2(1.0 - (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0)))) * 5.0);
        float _2602 = 1.0 - _2561;
        float _2612 = (0.5 / (((_2229 * ((_2575 * _2602) + _2561)) + 9.9999999392252902907785028219223e-09) + (((_2229 * _2602) + _2561) * _2575))) * _2575;
        float _4520 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2614 = (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * (_2584 / ((_2588 * _2588) * 3.141590118408203125));
        float _2615 = isnan(1.0) ? _1968 : (isnan(_1968) ? 1.0 : min(_1968, 1.0));
        _2531 = (((((_2595 * _2251) + _598) * cbLight._m0[_2546].x) * _2614) * _2615) + _2421;
        _2533 = (((((_2595 * _2253) + _600) * cbLight._m0[_2546].y) * _2614) * _2615) + _2423;
        _2535 = (((((_2595 * _2254) + _601) * cbLight._m0[_2546].z) * _2614) * _2615) + _2425;
    }
    float _2681;
    float _2683;
    float _2685;
    float _2687;
    float _2689;
    float _2691;
    if (_1950.y == 0u)
    {
        uvec4 _2636 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2637 = _2636.x;
        uint _2648 = uint((float(_2636.y) * floor(float(uint(cbSceneParam._m0[85u].y * _535) / _2637))) + floor(float(uint(cbSceneParam._m0[85u].x * _534) / _2637)));
        float _2658 = (log2(_1728 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2659 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        uint _2662 = uint(isnan(14.0) ? _2659 : (isnan(_2659) ? 14.0 : min(_2659, 14.0)));
        uvec4 _2667 = texelFetch(g_lightClusterGridBuffer, int(((_2662 << 2u) + (_2648 << 6u)) >> 2u));
        uint _2668 = _2667.x;
        uint _2669 = _2636.z;
        float _2748;
        float _2750;
        float _2752;
        float _2754;
        float _2756;
        float _2758;
        if (((((1u << ((_2669 >> 4u) & 15u)) + 4294967295u) & _2668) == 0u) || ((_2669 & 240u) == 0u))
        {
            _2748 = 0.0;
            _2750 = 0.0;
            _2752 = 0.0;
            _2754 = 0.0;
            _2756 = 0.0;
            _2758 = 0.0;
        }
        else
        {
            float _2749;
            float _2751;
            float _2753;
            float _2755;
            float _2757;
            float _2759;
            float _2901 = 0.0;
            float _2902 = 0.0;
            float _2903 = 0.0;
            float _2904 = 0.0;
            float _2905 = 0.0;
            float _2906 = 0.0;
            uint _2907 = 0u;
            uint _2916;
            bool _2917;
            for (;;)
            {
                _2916 = texelFetch(g_lightClassification, int((((_2662 << 5u) + (_2648 << 9u)) + (_2907 << 2u)) >> 2u)).x;
                _2917 = _2916 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2917)
                {
                    frontier_phi_71_pred = _2906;
                    frontier_phi_71_pred_1 = _2905;
                    frontier_phi_71_pred_2 = _2904;
                    frontier_phi_71_pred_3 = _2903;
                    frontier_phi_71_pred_4 = _2902;
                    frontier_phi_71_pred_5 = _2901;
                }
                else
                {
                    float _3046;
                    float _3047;
                    float _3048;
                    float _3049;
                    float _3050;
                    float _3051;
                    uint _3052;
                    _3046 = _2901;
                    _3047 = _2902;
                    _3048 = _2903;
                    _3049 = _2904;
                    _3050 = _2905;
                    _3051 = _2906;
                    _3052 = _2916;
                    float _2973;
                    float _2974;
                    float _2975;
                    float _2976;
                    float _2977;
                    float _2978;
                    for (;;)
                    {
                        uint _3056 = uint(findLSB(_3052)) + (_2907 << 5u);
                        uint _3053 = (_3052 + 4294967295u) & _3052;
                        uint _3058 = _3056 * 48u;
                        vec4 _3072 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3058)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 3u)).x));
                        uint _3078 = (_3056 * 48u) + 4u;
                        vec4 _3091 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3078)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 3u)).x));
                        uint _3097 = (_3056 * 48u) + 8u;
                        vec3 _3108 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3097)).x, texelFetch(g_PointLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3097 + 2u)).x));
                        float _3112 = _3072.x - _1726;
                        float _3113 = _3072.y - _1727;
                        float _3114 = _3072.z - _1728;
                        float _3115 = dot(vec3(_3112, _3113, _3114), vec3(_3112, _3113, _3114));
                        float _3118 = inversesqrt(_3115);
                        float _3119 = _3118 * _3112;
                        float _3120 = _3118 * _3113;
                        float _3121 = _3118 * _3114;
                        float _3122 = dot(vec3(_555, _558, _561), vec3(_3119, _3120, _3121));
                        float _3127 = 1.0 - (_3115 * _3072.w);
                        float _4546 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                        float _3128 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                        float _3129 = sqrt(_3115) * _3091.w;
                        float _3132 = 1.39999997615814208984375 / (_3129 + 1.39999997615814208984375);
                        float _3133 = _3132 * _3132;
                        float _3136 = ((1.0 - _3133) * _3122) + _3133;
                        float _3139 = _3129 * _3129;
                        float _3143 = ((isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0))) * _3128) / ((_3139 * 0.699999988079071044921875) + 1.0);
                        float _3147 = (-0.0) - _1726;
                        float _3148 = (-0.0) - _1727;
                        float _3149 = (-0.0) - _1728;
                        float _3153 = inversesqrt(dot(vec3(_3147, _3148, _3149), vec3(_3147, _3148, _3149)));
                        float _3154 = _3153 * _3147;
                        float _3155 = _3153 * _3148;
                        float _3156 = _3153 * _3149;
                        float _3163 = exp2(log2(1.0 / ((_3139 * 3.5) + 5.0)) * 0.25);
                        float _3164 = 1.0 - _630;
                        float _3171 = sqrt(1.0 - ((1.0 - (_3164 * _3164)) * (1.0 - (_3163 * _3163))));
                        float _3172 = _3171 * _3171;
                        float _3173 = _3172 * _3172;
                        float _3174 = _3154 + _3119;
                        float _3175 = _3155 + _3120;
                        float _3176 = _3156 + _3121;
                        float _3180 = inversesqrt(dot(vec3(_3174, _3175, _3176), vec3(_3174, _3175, _3176)));
                        float _3184 = dot(vec3(_555, _558, _561), vec3(_3154, _3155, _3156));
                        float _4562 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                        float _3187 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
                        float _3188 = dot(vec3(_555, _558, _561), vec3(_3180 * _3174, _3180 * _3175, _3180 * _3176));
                        float _4573 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                        float _3191 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
                        float _3195 = ((_3191 * _3191) * (_3173 + (-1.0))) + 1.0;
                        float _3196 = _3132 * _3172;
                        float _3197 = _3196 * _3196;
                        float _3200 = ((1.0 - _3197) * _3122) + _3197;
                        float _4584 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                        float _3201 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
                        float _3202 = 1.0 - _3172;
                        float _3212 = (0.5 / (((_3201 * ((_3187 * _3202) + _3172)) + 9.9999999392252902907785028219223e-09) + (((_3201 * _3202) + _3172) * _3187))) * _3201;
                        float _4595 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                        float _3223 = (((_3173 * 3.1415927410125732421875) * (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0)))) / ((_3195 * _3195) * ((_3139 * 2.1991131305694580078125) + 3.141590118408203125))) * _3128;
                        _2976 = (_3143 * _3091.x) + _3049;
                        _2977 = (_3143 * _3091.y) + _3050;
                        _2978 = (_3143 * _3091.z) + _3051;
                        _2973 = (_3223 * _3108.x) + _3046;
                        _2974 = (_3223 * _3108.y) + _3047;
                        _2975 = (_3223 * _3108.z) + _3048;
                        if (_3053 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3046 = _2973;
                            _3047 = _2974;
                            _3048 = _2975;
                            _3049 = _2976;
                            _3050 = _2977;
                            _3051 = _2978;
                            _3052 = _3053;
                        }
                    }
                    frontier_phi_71_pred = _2978;
                    frontier_phi_71_pred_1 = _2977;
                    frontier_phi_71_pred_2 = _2976;
                    frontier_phi_71_pred_3 = _2975;
                    frontier_phi_71_pred_4 = _2974;
                    frontier_phi_71_pred_5 = _2973;
                }
                _2759 = frontier_phi_71_pred;
                _2757 = frontier_phi_71_pred_1;
                _2755 = frontier_phi_71_pred_2;
                _2753 = frontier_phi_71_pred_3;
                _2751 = frontier_phi_71_pred_4;
                _2749 = frontier_phi_71_pred_5;
                uint _2908 = _2907 + 1u;
                if (_2908 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2901 = _2749;
                    _2902 = _2751;
                    _2903 = _2753;
                    _2904 = _2755;
                    _2905 = _2757;
                    _2906 = _2759;
                    _2907 = _2908;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2748 = _2749;
            _2750 = _2751;
            _2752 = _2753;
            _2754 = _2755;
            _2756 = _2757;
            _2758 = _2759;
        }
        uvec4 _2762 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2763 = _2762.z;
        uint _2765 = (_2763 >> 8u) & 15u;
        float _2869;
        float _2871;
        float _2873;
        float _2875;
        float _2877;
        float _2879;
        if (((4294967295u << _2765) & _2668) == 0u)
        {
            _2869 = _2748;
            _2871 = _2750;
            _2873 = _2752;
            _2875 = _2754;
            _2877 = _2756;
            _2879 = _2758;
        }
        else
        {
            float _2894 = inversesqrt(dot(vec3(_1726, _1727, _1728), vec3(_1726, _1727, _1728)));
            float _2895 = _2894 * _1726;
            float _2896 = _2894 * _1727;
            float _2897 = _2894 * _1728;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2765 < ((_2763 >> 12u) & 15u))
            {
                float _2870;
                float _2872;
                float _2874;
                float _2876;
                float _2878;
                float _2880;
                float _3029 = _2748;
                float _3030 = _2750;
                float _3031 = _2752;
                float _3032 = _2754;
                float _3033 = _2756;
                float _3034 = _2758;
                uint _3035 = _2765;
                uint _3044;
                bool _3045;
                for (;;)
                {
                    _3044 = texelFetch(g_lightClassification, int((((_2662 << 5u) + (_2648 << 9u)) + (_3035 << 2u)) >> 2u)).x;
                    _3045 = _3044 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3045)
                    {
                        frontier_phi_82_pred = _3034;
                        frontier_phi_82_pred_1 = _3033;
                        frontier_phi_82_pred_2 = _3032;
                        frontier_phi_82_pred_3 = _3031;
                        frontier_phi_82_pred_4 = _3030;
                        frontier_phi_82_pred_5 = _3029;
                    }
                    else
                    {
                        float _3237;
                        float _3238;
                        float _3239;
                        float _3240;
                        float _3241;
                        float _3242;
                        float _3531;
                        float _3532;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3536;
                        float _3250 = _3029;
                        float _3251 = _3030;
                        float _3252 = _3031;
                        float _3253 = _3032;
                        float _3254 = _3033;
                        float _3255 = _3034;
                        uint _3256 = _3044;
                        uint _3257;
                        vec4 _3282;
                        float _3283;
                        vec4 _3298;
                        vec3 _3310;
                        vec4 _3325;
                        vec4 _3340;
                        float _3387;
                        bool _3388;
                        for (;;)
                        {
                            uint _3267 = ((_3035 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3256));
                            _3257 = (_3256 + 4294967295u) & _3256;
                            uint _3269 = _3267 * 40u;
                            _3282 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3269)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 3u)).x));
                            _3283 = _3282.w;
                            uint _3285 = (_3267 * 40u) + 4u;
                            _3298 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3285)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 3u)).x));
                            uint _3300 = (_3267 * 40u) + 8u;
                            _3310 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3300)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 2u)).x));
                            uint _3312 = (_3267 * 40u) + 16u;
                            _3325 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3312)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 3u)).x));
                            uint _3327 = (_3267 * 40u) + 20u;
                            _3340 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3327)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 3u)).x));
                            uint _3343 = (_3267 * 40u) + 24u;
                            vec4 _3356 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 3u)).x));
                            uint _3362 = (_3267 * 40u) + 28u;
                            vec4 _3375 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3362)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 3u)).x));
                            _3387 = fma(_1728, _3375.z, fma(_1727, _3375.y, _3375.x * _1726)) + _3375.w;
                            _3388 = !((fma(_1728, _3356.z, fma(_1727, _3356.y, _3356.x * _1726)) + _3356.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3388)
                            {
                                float _3415 = _3282.x - _1726;
                                float _3416 = _3282.y - _1727;
                                float _3417 = _3282.z - _1728;
                                float _3418 = dot(vec3(_3415, _3416, _3417), vec3(_3415, _3416, _3417));
                                float _3421 = inversesqrt(_3418);
                                float _3422 = _3421 * _3415;
                                float _3423 = _3421 * _3416;
                                float _3424 = _3421 * _3417;
                                float _3428 = 1.0 - (_3418 / (_3283 * _3283));
                                float _4606 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                                float _3429 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                                float _3433 = sqrt(_3418) * _3298.w;
                                float _3435 = 1.39999997615814208984375 / (_3433 + 1.39999997615814208984375);
                                float _3436 = _3435 * _3435;
                                float _3439 = ((1.0 - _3436) * dot(vec3(_3422, _3423, _3424), vec3(_555, _558, _561))) + _3436;
                                float _3442 = _3433 * _3433;
                                float _3446 = (fma(_1728, _3325.z, fma(_1727, _3325.y, _3325.x * _1726)) + _3325.w) / _3387;
                                float _3447 = (fma(_1728, _3340.z, fma(_1727, _3340.y, _3340.x * _1726)) + _3340.w) / _3387;
                                float _3451 = 1.0 - dot(vec2(_3446, _3447), vec2(_3446, _3447));
                                float _4622 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                                float _3452 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
                                float _3453 = _3452 * (((isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0))) * _3429) / ((_3442 * 0.699999988079071044921875) + 1.0));
                                float _3465 = exp2(log2(1.0 / ((_3442 * 3.5) + 5.0)) * 0.25);
                                float _3466 = 1.0 - _630;
                                float _3473 = sqrt(1.0 - ((1.0 - (_3466 * _3466)) * (1.0 - (_3465 * _3465))));
                                float _3474 = _3473 * _3473;
                                float _3475 = _3474 * _3474;
                                float _3476 = _3422 - _2895;
                                float _3477 = _3423 - _2896;
                                float _3478 = _3424 - _2897;
                                float _3482 = inversesqrt(dot(vec3(_3476, _3477, _3478), vec3(_3476, _3477, _3478)));
                                float _3486 = dot(vec3(_555, _558, _561), vec3((-0.0) - _2895, (-0.0) - _2896, (-0.0) - _2897));
                                float _4633 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                                float _3489 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
                                float _3490 = dot(vec3(_555, _558, _561), vec3(_3482 * _3476, _3482 * _3477, _3482 * _3478));
                                float _4644 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                                float _3493 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                                float _3497 = ((_3493 * _3493) * (_3475 + (-1.0))) + 1.0;
                                float _3498 = _3435 * _3474;
                                float _3499 = _3498 * _3498;
                                float _3505 = ((1.0 - _3499) * dot(vec3(_555, _558, _561), vec3(_3422, _3423, _3424))) + _3499;
                                float _4655 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                                float _3506 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                                float _3507 = 1.0 - _3474;
                                float _3517 = (0.5 / (((_3506 * ((_3489 * _3507) + _3474)) + 9.9999999392252902907785028219223e-09) + (((_3506 * _3507) + _3474) * _3489))) * _3506;
                                float _4666 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                                float _3527 = (_3452 * _3429) * (((_3475 * 3.1415927410125732421875) * (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0)))) / ((_3497 * _3497) * ((_3442 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3453 * _3298.z;
                                frontier_phi_88_pred_1 = _3453 * _3298.y;
                                frontier_phi_88_pred_2 = _3453 * _3298.x;
                                frontier_phi_88_pred_3 = _3527 * _3310.z;
                                frontier_phi_88_pred_4 = _3527 * _3310.y;
                                frontier_phi_88_pred_5 = _3527 * _3310.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3536 = frontier_phi_88_pred;
                            _3535 = frontier_phi_88_pred_1;
                            _3534 = frontier_phi_88_pred_2;
                            _3533 = frontier_phi_88_pred_3;
                            _3532 = frontier_phi_88_pred_4;
                            _3531 = frontier_phi_88_pred_5;
                            _3240 = _3534 + _3253;
                            _3241 = _3535 + _3254;
                            _3242 = _3536 + _3255;
                            _3237 = _3531 + _3250;
                            _3238 = _3532 + _3251;
                            _3239 = _3533 + _3252;
                            if (_3257 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3250 = _3237;
                                _3251 = _3238;
                                _3252 = _3239;
                                _3253 = _3240;
                                _3254 = _3241;
                                _3255 = _3242;
                                _3256 = _3257;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3242;
                        frontier_phi_82_pred_1 = _3241;
                        frontier_phi_82_pred_2 = _3240;
                        frontier_phi_82_pred_3 = _3239;
                        frontier_phi_82_pred_4 = _3238;
                        frontier_phi_82_pred_5 = _3237;
                    }
                    _2880 = frontier_phi_82_pred;
                    _2878 = frontier_phi_82_pred_1;
                    _2876 = frontier_phi_82_pred_2;
                    _2874 = frontier_phi_82_pred_3;
                    _2872 = frontier_phi_82_pred_4;
                    _2870 = frontier_phi_82_pred_5;
                    uint _3036 = _3035 + 1u;
                    if (_3036 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3029 = _2870;
                        _3030 = _2872;
                        _3031 = _2874;
                        _3032 = _2876;
                        _3033 = _2878;
                        _3034 = _2880;
                        _3035 = _3036;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2876;
                frontier_phi_63_64_ladder_1 = _2880;
                frontier_phi_63_64_ladder_2 = _2878;
                frontier_phi_63_64_ladder_3 = _2874;
                frontier_phi_63_64_ladder_4 = _2872;
                frontier_phi_63_64_ladder_5 = _2870;
            }
            else
            {
                frontier_phi_63_64_ladder = _2754;
                frontier_phi_63_64_ladder_1 = _2758;
                frontier_phi_63_64_ladder_2 = _2756;
                frontier_phi_63_64_ladder_3 = _2752;
                frontier_phi_63_64_ladder_4 = _2750;
                frontier_phi_63_64_ladder_5 = _2748;
            }
            _2869 = frontier_phi_63_64_ladder_5;
            _2871 = frontier_phi_63_64_ladder_4;
            _2873 = frontier_phi_63_64_ladder_3;
            _2875 = frontier_phi_63_64_ladder;
            _2877 = frontier_phi_63_64_ladder_2;
            _2879 = frontier_phi_63_64_ladder_1;
        }
        float _2884 = isnan(1.0) ? _614 : (isnan(_614) ? 1.0 : min(_614, 1.0));
        _2681 = (_2884 * _2875) + _2193;
        _2683 = (_2884 * _2877) + _2195;
        _2685 = (_2884 * _2879) + _2197;
        _2687 = ((_2869 * _598) * _2884) + _2531;
        _2689 = ((_2871 * _600) * _2884) + _2533;
        _2691 = ((_2873 * _601) * _2884) + _2535;
    }
    else
    {
        _2681 = _2193;
        _2683 = _2195;
        _2685 = _2197;
        _2687 = _2531;
        _2689 = _2533;
        _2691 = _2535;
    }
    float _4682 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _4693 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _4704 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _2708 = ((isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0))) * (_2681 + ((isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0))) * _614))) + ((_2687 + ((isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))) * _1455)) * cbPerFrame._m0[3u].x);
    float _2709 = ((isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0))) * (_2683 + ((isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0))) * _614))) + ((_2689 + ((isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))) * _1455)) * cbPerFrame._m0[3u].x);
    float _2710 = ((isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0))) * (_2685 + ((isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0))) * _614))) + ((_2691 + ((isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))) * _1455)) * cbPerFrame._m0[3u].x);
    uint _2711 = _254 + 6u;
    float _2719 = _534 / cbSceneParam._m0[86u].x;
    float _2720 = _535 / cbSceneParam._m0[86u].y;
    vec4 _2734 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2719, _2720, (log2((isnan(cbSceneParam._m0[77u].w) ? _454 : (isnan(_454) ? cbSceneParam._m0[77u].w : min(_454, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2736 = _2734.x;
    float _2737 = _2734.y;
    float _2738 = _2734.z;
    float _2739 = _2734.w;
    float _2811;
    float _2813;
    float _2815;
    float _2817;
    if (_454 > cbSceneParam._m0[78u].w)
    {
        float _2773 = isnan(_454) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _454 : min(cbSceneParam._m0[80u].w, _454));
        float _2774 = _2773 / _454;
        float _2785 = _2774 * _506;
        float _2786 = _507 * _2774;
        float _2787 = (-0.0) - _2786;
        float _2789 = _2774 * _508;
        float _2791 = (cbSceneParam._m0[77u].w * _2787) / _2773;
        float _2792 = _2791 + cbSceneParam._m0[79u].w;
        float _2793 = cbSceneParam._m0[79u].w - _2786;
        float _2799 = sqrt(((_2785 * _2785) + (_2786 * _2786)) + (_2789 * _2789));
        float _2802 = (1.0 - (cbSceneParam._m0[77u].w / _2773)) * _2799;
        float _2807 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2809 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2986;
        if (abs((_2787 - _2791) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2986 = ((((_2792 > 0.0) ? exp2(_2807 * _2792) : (2.0 - exp2(_2809 * _2792))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2802;
        }
        else
        {
            float _2930 = 1.0 / cbSceneParam._m0[80u].x;
            float _2931 = isnan(_2793) ? _2792 : (isnan(_2792) ? _2793 : max(_2792, _2793));
            float _2932 = isnan(_2793) ? _2792 : (isnan(_2792) ? _2793 : min(_2792, _2793));
            float _2941 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : min(_2931, 0.0));
            float _2942 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : min(_2932, 0.0));
            _2986 = ((abs(_2799 / _2787) * cbSceneParam._m0[80u].y) * ((((_2941 - _2942) * 2.0) - ((exp2(_2807 * (isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0)))) - exp2(_2807 * (isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0))))) * _2930)) - ((exp2(_2809 * _2941) - exp2(_2809 * _2942)) * _2930))) + (_2802 * cbSceneParam._m0[80u].z);
        }
        vec4 _2988 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2719, _2720, 1.0), 0.0);
        float _2997 = exp2((_2986 * (-1.44269502162933349609375)) * (1.0 - _2988.w));
        float _2998 = log2(_2997);
        float _3014 = log2(_2739);
        _2811 = (exp2(_3014 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2998 * cbSceneParam._m0[78u].x)) * _2988.x) / cbSceneParam._m0[78u].x)) + _2736;
        _2813 = (exp2(_3014 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2998 * cbSceneParam._m0[78u].y)) * _2988.y) / cbSceneParam._m0[78u].y)) + _2737;
        _2815 = (exp2(_3014 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2998 * cbSceneParam._m0[78u].z)) * _2988.z) / cbSceneParam._m0[78u].z)) + _2738;
        _2817 = _2997 * _2739;
    }
    else
    {
        _2811 = _2736;
        _2813 = _2737;
        _2815 = _2738;
        _2817 = _2739;
    }
    bool _3024;
    vec4 _2827;
    vec4 _2849;
    float _2851;
    float _2855;
    float _2856;
    float _2857;
    float _2858;
    bool _2868;
    for (;;)
    {
        _2827 = cbMatDynParam._m0[0u];
        float _2829 = roundEven(_2827.y);
        bool _2830 = _2829 == 3.0;
        float _2831 = log2(_2817);
        float _2838 = exp2(_2831 * cbSceneParam._m0[78u].x) * _2708;
        float _2839 = exp2(_2831 * cbSceneParam._m0[78u].y) * _2709;
        float _2840 = exp2(_2831 * cbSceneParam._m0[78u].z) * _2710;
        float _2847 = _522 + (-0.5);
        _2849 = cbMtdParam._m0[1u];
        _2851 = _2849.y * _2847;
        float _2854 = (_2829 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2855 = _2854 * (_2830 ? _2838 : (_2838 + (cbSceneParam._m0[72u].w * _2811)));
        _2856 = _2854 * (_2830 ? _2839 : (_2839 + (cbSceneParam._m0[72u].w * _2813)));
        _2857 = _2854 * (_2830 ? _2840 : (_2840 + (cbSceneParam._m0[72u].w * _2815)));
        _2858 = _2847 * 0.999000012874603271484375;
        _2868 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2868)
        {
            if ((cbInstanceData._m0[_254 + 7u].x + _2858) < 0.5)
            {
                _3024 = true;
                break;
            }
        }
        uint _2965 = _574 + uint(_2827.w);
        if ((cbInstanceData._m0[_2965].w < 1.0) && ((cbInstanceData._m0[_2965].w + _2858) < 0.5))
        {
            _3024 = true;
            break;
        }
        if ((_2851 + 1.0) < _2849.x)
        {
            _3024 = true;
            break;
        }
        _3024 = false;
        break;
    }
    float _3228;
    if (_3024)
    {
        discard_state = true;
        _3228 = 0.0;
    }
    else
    {
        _3228 = cbInstanceData._m0[_2711].w;
    }
    SV_Target.x = _2855;
    SV_Target.y = _2856;
    SV_Target.z = _2857;
    SV_Target.w = _3228;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2711].w;
    discard_exit();
}


