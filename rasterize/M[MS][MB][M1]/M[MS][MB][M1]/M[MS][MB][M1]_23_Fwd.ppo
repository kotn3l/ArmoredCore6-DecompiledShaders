#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1093;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _210 = _209 * _201;
    float _211 = _209 * _202;
    float _212 = _209 * _203;
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = _216 * NORMAL.x;
    float _218 = _216 * NORMAL.y;
    float _219 = _216 * NORMAL.z;
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _224 = _223 * TANGENT.x;
    float _225 = _223 * TANGENT.y;
    float _226 = _223 * TANGENT.z;
    float _237 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _239 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _240 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3421 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3432 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3443 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    uint _250 = uint(roundEven(NORMAL.w)) * 13u;
    uint _255 = _250 + 1u;
    uint _259 = _250 + 2u;
    float _268 = sqrt(((cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x)) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x));
    float _269 = _268 * TEXCOORD.z;
    float _270 = _268 * TEXCOORD.w;
    vec4 _283 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _269) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _270) + cbTextureTilingScale._m0[13u].w));
    vec4 _306 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _311 = _306.x * cbMtdParam._m0[9u].x;
    float _312 = _306.y * cbMtdParam._m0[9u].y;
    float _313 = _306.z * cbMtdParam._m0[9u].z;
    float _317 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _283.x) * _311;
    float _320 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _283.y) * _312;
    float _323 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _283.z) * _313;
    float _330 = ((_311 - _317) * (isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0)))) + _317;
    float _331 = ((_312 - _320) * (isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0)))) + _320;
    float _332 = ((_313 - _323) * (isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0)))) + _323;
    vec4 _350 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _269) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _270) + cbTextureTilingScale._m0[20u].w));
    vec4 _376 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _380 = _376.z;
    float _384 = (_376.x * 2.0) + (-1.0);
    float _385 = (_376.y * 2.0) + (-1.0);
    float _386 = dot(vec2(_384, _385), vec2(_384, _385));
    float _3454 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _391 = sqrt(1.0 - (isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0))));
    float _396 = _384 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_350.x * 2.0) + (-1.0)));
    float _397 = _385 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_350.y * 2.0) + (-1.0)));
    float _400 = fma(_391, _217, fma(_397, _224, _396 * _210));
    float _403 = fma(_391, _218, fma(_397, _225, _396 * _211));
    float _406 = fma(_391, _219, fma(_397, _226, _396 * _212));
    float _410 = inversesqrt(dot(vec3(_400, _403, _406), vec3(_400, _403, _406)));
    vec4 _446 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _269) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _270) + cbTextureTilingScale._m0[11u].w));
    float _448 = _446.x;
    float _449 = 1.0 - _448;
    float _458 = (cbMtdParam._m0[19u].x + dot(vec4(_410 * _400, _410 * _403, _410 * _406, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_448 - _449) * cbMtdParam._m0[24u].z) + _449) * cbMtdParam._m0[21u].z);
    float _3465 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _459 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
    float _466 = (_459 * (cbMtdParam._m0[17u].x - _330)) + _330;
    float _467 = (_459 * (cbMtdParam._m0[17u].y - _331)) + _331;
    float _468 = (_459 * (cbMtdParam._m0[17u].z - _332)) + _332;
    vec4 _481 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _483 = _481.x;
    float _485 = _483 - (_483 * _459);
    float _490 = (((_350.z - _380) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _380;
    vec4 _503 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _269) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _270) + cbTextureTilingScale._m0[15u].w));
    float _510 = (_503.x * 2.0) + (-1.0);
    float _511 = (_503.y * 2.0) + (-1.0);
    float _512 = dot(vec2(_510, _511), vec2(_510, _511));
    float _3476 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _520 = ((_503.z - _490) * _459) + _490;
    float _530 = ((sqrt(1.0 - (isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0)))) - _391) * _459) + _391;
    float _533 = (((_510 - _396) * _459) + _396) + (cbMtdParam._m0[21u].x * _396);
    float _534 = (((_511 - _397) * _459) + _397) + (cbMtdParam._m0[21u].x * _397);
    float _536 = cbMtdParam._m0[22u].x + _376.w;
    float _539 = fma(_530, _217, fma(_534, _224, _533 * _210));
    float _542 = fma(_530, _218, fma(_534, _225, _533 * _211));
    float _545 = fma(_530, _219, fma(_534, _226, _533 * _212));
    float _549 = inversesqrt(dot(vec3(_539, _542, _545), vec3(_539, _542, _545)));
    float _550 = _549 * _539;
    float _551 = _549 * _542;
    float _552 = _549 * _545;
    float _3487 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _553 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
    float _3498 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _3509 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _3520 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _3531 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _3542 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _558 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
    float _572 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _613 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _623 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _613);
    float _624 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _613);
    float _625 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _613);
    float _629 = inversesqrt(dot(vec3(_623, _624, _625), vec3(_623, _624, _625)));
    float _630 = _623 * _629;
    float _631 = _624 * _629;
    float _632 = _625 * _629;
    float _638 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _639 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _660 = fma(_552, cbSceneParam._m0[5u].z, fma(_551, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _550));
    float _663 = fma(_552, cbSceneParam._m0[6u].z, fma(_551, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _550));
    float _666 = fma(_552, cbSceneParam._m0[7u].z, fma(_551, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _550));
    uint _680 = (_250 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _686 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0)))) * cbInstanceData._m0[_680].x;
    float _687 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0)))) * cbInstanceData._m0[_680].y;
    float _688 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0)))) * cbInstanceData._m0[_680].z;
    float _3553 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _689 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
    float _3564 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _690 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
    float _3575 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _691 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
    float _692 = 1.0 - _558;
    float _693 = _689 * _692;
    float _694 = _690 * _692;
    float _695 = _691 * _692;
    float _700 = (_689 + (-0.039999999105930328369140625)) * _558;
    float _701 = (_690 + (-0.039999999105930328369140625)) * _558;
    float _702 = (_691 + (-0.039999999105930328369140625)) * _558;
    float _703 = _700 + 0.039999999105930328369140625;
    float _705 = _701 + 0.039999999105930328369140625;
    float _706 = _702 + 0.039999999105930328369140625;
    vec4 _715 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _638, cbSceneParam._m0[86u].y * _639));
    float _719 = ((isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0))) * TEXCOORD_5.w) * _715.x;
    float _720 = dot(vec3(_550, _551, _552), vec3(_630, _631, _632));
    float _723 = _720 * 2.0;
    float _727 = (_723 * _550) - _630;
    float _728 = (_723 * _551) - _631;
    float _729 = (_723 * _552) - _632;
    float _733 = abs(dot(vec3(_630, _631, _632), vec3(_550, _551, _552)));
    float _3586 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _735 = sqrt(_553);
    float _748 = exp2((_735 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_735 * 3.0));
    float _754 = (1.0 - _748) * ((_735 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _755 = _748 * _735;
    float _783 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _787 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _791 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1092;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _817 = fma(_791, cbModelParam._m0[26u].z, fma(_787, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _783));
        float _821 = fma(_791, cbModelParam._m0[27u].z, fma(_787, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _783));
        float _825 = fma(_791, cbModelParam._m0[28u].z, fma(_787, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _783));
        float _850 = _783 + _550;
        float _851 = _787 + _551;
        float _852 = _791 + _552;
        float _862 = fma(_852, cbModelParam._m0[26u].z, fma(_851, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _850)) - _817;
        float _863 = fma(_852, cbModelParam._m0[27u].z, fma(_851, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _850)) - _821;
        float _864 = fma(_852, cbModelParam._m0[28u].z, fma(_851, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _850)) - _825;
        float _868 = inversesqrt(dot(vec3(_862, _863, _864), vec3(_862, _863, _864)));
        float _881 = ((_868 * _862) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_817 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _882 = ((_868 * _863) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_821 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _883 = ((_868 * _864) / cbModelParam._m0[34u].z) + ((((((_825 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _886 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_881, _882, _883), 0.0);
        vec4 _893 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_881, _882, _883), 0.0);
        vec4 _900 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_881, _882, _883), 0.0);
        vec4 _907 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_881, _882, _883), 0.0);
        float _920 = exp2((_886.w + (-0.5)) * 20.0) * 2.0;
        float _921 = _920 * (_886.x + (-0.5));
        float _922 = _920 * (_886.y + (-0.5));
        float _923 = _920 * (_886.z + (-0.5));
        float _930 = exp2((_893.w + (-0.5)) * 20.0) * 2.0;
        float _931 = _930 * (_893.x + (-0.5));
        float _932 = _930 * (_893.y + (-0.5));
        float _933 = _930 * (_893.z + (-0.5));
        float _940 = exp2((_900.w + (-0.5)) * 20.0) * 2.0;
        float _941 = _940 * (_900.x + (-0.5));
        float _942 = _940 * (_900.y + (-0.5));
        float _943 = _940 * (_900.z + (-0.5));
        float _950 = exp2((_907.w + (-0.5)) * 20.0) * 2.0;
        float _951 = _950 * (_907.x + (-0.5));
        float _952 = _950 * (_907.y + (-0.5));
        float _953 = _950 * (_907.z + (-0.5));
        float _954 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _955 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _956 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _957 = _921 * 0.5;
        float _958 = _931 * 0.5;
        float _959 = _941 * 0.5;
        float _960 = dot(vec3(_957, _958, _959), vec3(_957, _958, _959));
        float _965 = (_960 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_960);
        float _974 = (dot(vec3(_550, _551, _552), vec3(_965 * _957, _965 * _958, _965 * _959)) + 1.0) * 0.5;
        float _3612 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _984 = sqrt(((_958 * _958) + (_957 * _957)) + (_959 * _959)) / (_954 + 9.9999997473787516355514526367188e-06);
        float _3623 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _986 = _985 * 2.0;
        float _990 = (1.0 - _985) / (_985 + 1.0);
        float _3634 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _991 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
        float _1000 = ((((1.0 - _991) * (_986 + 2.0)) * exp2(log2(isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0))) * (_986 + 1.0))) + _991) * _954;
        float _1001 = _922 * 0.5;
        float _1002 = _932 * 0.5;
        float _1003 = _942 * 0.5;
        float _1004 = dot(vec3(_1001, _1002, _1003), vec3(_1001, _1002, _1003));
        float _1009 = (_1004 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1004);
        float _1017 = (dot(vec3(_550, _551, _552), vec3(_1009 * _1001, _1009 * _1002, _1009 * _1003)) + 1.0) * 0.5;
        float _3645 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1026 = sqrt(((_1002 * _1002) + (_1001 * _1001)) + (_1003 * _1003)) / (_955 + 9.9999997473787516355514526367188e-06);
        float _3656 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _1028 = _1027 * 2.0;
        float _1032 = (1.0 - _1027) / (_1027 + 1.0);
        float _3667 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1033 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
        float _1042 = ((((1.0 - _1033) * (_1028 + 2.0)) * exp2(log2(isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0))) * (_1028 + 1.0))) + _1033) * _955;
        float _1043 = _923 * 0.5;
        float _1044 = _933 * 0.5;
        float _1045 = _943 * 0.5;
        float _1046 = dot(vec3(_1043, _1044, _1045), vec3(_1043, _1044, _1045));
        float _1051 = (_1046 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1046);
        float _1059 = (dot(vec3(_550, _551, _552), vec3(_1051 * _1043, _1051 * _1044, _1051 * _1045)) + 1.0) * 0.5;
        float _3678 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1068 = sqrt(((_1044 * _1044) + (_1043 * _1043)) + (_1045 * _1045)) / (_956 + 9.9999997473787516355514526367188e-06);
        float _3689 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
        float _1070 = _1069 * 2.0;
        float _1074 = (1.0 - _1069) / (_1069 + 1.0);
        float _3700 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
        float _1084 = ((((1.0 - _1075) * (_1070 + 2.0)) * exp2(log2(isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0))) * (_1070 + 1.0))) + _1075) * _956;
        _1092 = _923;
        _1094 = _922;
        _1095 = _921;
        _1096 = _933;
        _1097 = _932;
        _1098 = _931;
        _1099 = _943;
        _1100 = _942;
        _1101 = _941;
        _1102 = _956;
        _1103 = _955;
        _1104 = _954;
        _1105 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0)));
        _1106 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0)));
        _1107 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0)));
    }
    else
    {
        _1092 = _1093;
        _1094 = _1093;
        _1095 = _1093;
        _1096 = _1093;
        _1097 = _1093;
        _1098 = _1093;
        _1099 = _1093;
        _1100 = _1093;
        _1101 = _1093;
        _1102 = _1093;
        _1103 = _1093;
        _1104 = _1093;
        _1105 = 0.0;
        _1106 = 0.0;
        _1107 = 0.0;
    }
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1132 = fma(_791, cbModelParam._m0[30u].z, fma(_787, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _783));
        float _1136 = fma(_791, cbModelParam._m0[31u].z, fma(_787, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _783));
        float _1140 = fma(_791, cbModelParam._m0[32u].z, fma(_787, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _783));
        float _1163 = _783 + _550;
        float _1164 = _787 + _551;
        float _1165 = _791 + _552;
        float _1175 = fma(_1165, cbModelParam._m0[30u].z, fma(_1164, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1163)) - _1132;
        float _1176 = fma(_1165, cbModelParam._m0[31u].z, fma(_1164, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1163)) - _1136;
        float _1177 = fma(_1165, cbModelParam._m0[32u].z, fma(_1164, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1163)) - _1140;
        float _1181 = inversesqrt(dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177)));
        float _1194 = ((_1181 * _1175) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1132 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1195 = ((_1181 * _1176) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1136 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1196 = ((_1181 * _1177) / cbModelParam._m0[35u].z) + ((((((_1140 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        vec4 _1219 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        float _1231 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1198.x + (-0.5));
        float _1233 = _1231 * (_1198.y + (-0.5));
        float _1234 = _1231 * (_1198.z + (-0.5));
        float _1241 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1205.x + (-0.5));
        float _1243 = _1241 * (_1205.y + (-0.5));
        float _1244 = _1241 * (_1205.z + (-0.5));
        float _1251 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1212.x + (-0.5));
        float _1253 = _1251 * (_1212.y + (-0.5));
        float _1254 = _1251 * (_1212.z + (-0.5));
        float _1261 = exp2((_1219.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1219.x + (-0.5));
        float _1263 = _1261 * (_1219.y + (-0.5));
        float _1264 = _1261 * (_1219.z + (-0.5));
        float _1265 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1266 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1267 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1268 = _1232 * 0.5;
        float _1269 = _1242 * 0.5;
        float _1270 = _1252 * 0.5;
        float _1271 = dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270));
        float _1276 = (_1271 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1271);
        float _1284 = (dot(vec3(_550, _551, _552), vec3(_1276 * _1268, _1276 * _1269, _1276 * _1270)) + 1.0) * 0.5;
        float _3741 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1293 = sqrt(((_1269 * _1269) + (_1268 * _1268)) + (_1270 * _1270)) / (_1265 + 9.9999997473787516355514526367188e-06);
        float _3752 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1295 = _1294 * 2.0;
        float _1299 = (1.0 - _1294) / (_1294 + 1.0);
        float _3763 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _1309 = ((((1.0 - _1300) * (_1295 + 2.0)) * exp2(log2(isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) * (_1295 + 1.0))) + _1300) * _1265;
        float _1310 = _1233 * 0.5;
        float _1311 = _1243 * 0.5;
        float _1312 = _1253 * 0.5;
        float _1313 = dot(vec3(_1310, _1311, _1312), vec3(_1310, _1311, _1312));
        float _1318 = (_1313 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1313);
        float _1326 = (dot(vec3(_550, _551, _552), vec3(_1318 * _1310, _1318 * _1311, _1318 * _1312)) + 1.0) * 0.5;
        float _3774 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1335 = sqrt(((_1311 * _1311) + (_1310 * _1310)) + (_1312 * _1312)) / (_1266 + 9.9999997473787516355514526367188e-06);
        float _3785 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1337 = _1336 * 2.0;
        float _1341 = (1.0 - _1336) / (_1336 + 1.0);
        float _3796 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
        float _1351 = ((((1.0 - _1342) * (_1337 + 2.0)) * exp2(log2(isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * (_1337 + 1.0))) + _1342) * _1266;
        float _1352 = _1234 * 0.5;
        float _1353 = _1244 * 0.5;
        float _1354 = _1254 * 0.5;
        float _1355 = dot(vec3(_1352, _1353, _1354), vec3(_1352, _1353, _1354));
        float _1360 = (_1355 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1355);
        float _1368 = (dot(vec3(_550, _551, _552), vec3(_1360 * _1352, _1360 * _1353, _1360 * _1354)) + 1.0) * 0.5;
        float _3807 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1377 = sqrt(((_1353 * _1353) + (_1352 * _1352)) + (_1354 * _1354)) / (_1267 + 9.9999997473787516355514526367188e-06);
        float _3818 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1379 = _1378 * 2.0;
        float _1383 = (1.0 - _1378) / (_1378 + 1.0);
        float _3829 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _1393 = ((((1.0 - _1384) * (_1379 + 2.0)) * exp2(log2(isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))) * (_1379 + 1.0))) + _1384) * _1267;
        _1401 = _1234;
        _1402 = _1233;
        _1403 = _1232;
        _1404 = _1244;
        _1405 = _1243;
        _1406 = _1242;
        _1407 = _1254;
        _1408 = _1253;
        _1409 = _1252;
        _1410 = _1267;
        _1411 = _1266;
        _1412 = _1265;
        _1413 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)));
        _1414 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)));
        _1415 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)));
    }
    else
    {
        _1401 = _1093;
        _1402 = _1093;
        _1403 = _1093;
        _1404 = _1093;
        _1405 = _1093;
        _1406 = _1093;
        _1407 = _1093;
        _1408 = _1093;
        _1409 = _1093;
        _1410 = _1093;
        _1411 = _1093;
        _1412 = _1093;
        _1413 = 0.0;
        _1414 = 0.0;
        _1415 = 0.0;
    }
    float _1425 = (cbModelParam._m0[1u].x * (_1413 - _1105)) + _1105;
    float _1426 = (cbModelParam._m0[1u].x * (_1414 - _1106)) + _1106;
    float _1427 = (cbModelParam._m0[1u].x * (_1415 - _1107)) + _1107;
    float _1448 = fma(_1427, cbSceneParam._m0[89u].z, fma(_1426, cbSceneParam._m0[89u].y, _1425 * cbSceneParam._m0[89u].x));
    float _1451 = fma(_1427, cbSceneParam._m0[90u].z, fma(_1426, cbSceneParam._m0[90u].y, _1425 * cbSceneParam._m0[90u].x));
    float _1454 = fma(_1427, cbSceneParam._m0[91u].z, fma(_1426, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1425));
    float _1469 = _727 * 0.5;
    float _1470 = _728 * 0.5;
    float _1471 = _729 * 0.5;
    float _1472 = dot(vec4(_1469, _1470, _1471, 1.0), vec4(_1403, _1406, _1409, _1412));
    float _1475 = dot(vec4(_1469, _1470, _1471, 1.0), vec4(_1402, _1405, _1408, _1411));
    float _1478 = dot(vec4(_1469, _1470, _1471, 1.0), vec4(_1401, _1404, _1407, _1410));
    float _1512;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1485 = dot(vec4(_1469, _1470, _1471, 1.0), vec4(_1092, _1096, _1099, _1102));
        float _1489 = dot(vec4(_1469, _1470, _1471, 1.0), vec4(_1094, _1097, _1100, _1103));
        float _1493 = dot(vec4(_1469, _1470, _1471, 1.0), vec4(_1095, _1098, _1101, _1104));
        float _1500 = dot(vec4(cbModelParam._m0[39u]), vec4(_1469, _1470, _1471, 1.0));
        _1512 = dot(vec3(isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)), isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)), isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1500) ? 0.0 : (isnan(0.0) ? _1500 : max(0.0, _1500))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1512 = 1.0;
    }
    float _1523;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1514 = dot(vec4(cbModelParam._m0[40u]), vec4(_1469, _1470, _1471, 1.0));
        _1523 = dot(vec3(isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)), isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)), isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1514) ? 0.0 : (isnan(0.0) ? _1514 : max(0.0, _1514))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1523 = 1.0;
    }
    float _1527 = (_1523 * cbModelParam._m0[1u].x) + (_1512 * (1.0 - cbModelParam._m0[1u].x));
    float _1537 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _553);
    float _1538 = isnan(_1537) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1537 : min(cbModelParam._m0[25u].z, _1537));
    float _1619;
    float _1621;
    float _1623;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1586 = fma(_791, cbModelParam._m0[13u].z, fma(_787, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _783)) + cbModelParam._m0[13u].w;
        float _1590 = fma(_791, cbModelParam._m0[14u].z, fma(_787, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _783)) + cbModelParam._m0[14u].w;
        float _1594 = fma(_791, cbModelParam._m0[15u].z, fma(_787, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _783)) + cbModelParam._m0[15u].w;
        float _1597 = fma(_729, cbModelParam._m0[13u].z, fma(_728, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _727));
        float _1600 = fma(_729, cbModelParam._m0[14u].z, fma(_728, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _727));
        float _1603 = fma(_729, cbModelParam._m0[15u].z, fma(_728, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _727));
        float _1631;
        if (_1597 > 0.0)
        {
            _1631 = abs((1.0 - _1586) / _1597);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1597 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1586 + 1.0) / _1597);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1631 = frontier_phi_14_12_ladder;
        }
        float _1835;
        if (_1600 > 0.0)
        {
            _1835 = abs((1.0 - _1590) / _1600);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1600 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1590 + 1.0) / _1600);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1835 = frontier_phi_23_19_ladder;
        }
        float _2089;
        if (_1603 > 0.0)
        {
            _2089 = abs((1.0 - _1594) / _1603);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1603 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1594 + 1.0) / _1603);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2089 = frontier_phi_35_30_ladder;
        }
        float _2091 = isnan(_1835) ? _1631 : (isnan(_1631) ? _1835 : min(_1631, _1835));
        float _2092 = isnan(_2089) ? _2091 : (isnan(_2091) ? _2089 : min(_2091, _2089));
        float _2096 = (_2092 * _1597) + _1586;
        float _2097 = (_2092 * _1600) + _1590;
        float _2098 = (_2092 * _1603) + _1594;
        float _2099 = _2092 * 9.9999997473787516355514526367188e-05;
        float _2101 = (-1.0) - _2099;
        float _2103 = _2099 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2098 > _2103) || ((_2098 < _2101) || ((_2097 > _2103) || ((_2097 < _2101) || ((_2096 < _2101) || (_2096 > _2103))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2226 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2098, cbModelParam._m0[9u].z, fma(_2097, cbModelParam._m0[9u].y, _2096 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2098, cbModelParam._m0[10u].z, fma(_2097, cbModelParam._m0[10u].y, _2096 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2098, cbModelParam._m0[11u].z, fma(_2097, cbModelParam._m0[11u].y, _2096 * cbModelParam._m0[11u].x))), _1538);
            frontier_phi_13_35_ladder = _2226.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2226.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2226.x * cbModelParam._m0[1u].y;
        }
        _1619 = frontier_phi_13_35_ladder_2;
        _1621 = frontier_phi_13_35_ladder_1;
        _1623 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1607 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_727, _728, _729), _1538);
        _1619 = _1607.x * cbModelParam._m0[1u].y;
        _1621 = _1607.y * cbModelParam._m0[1u].y;
        _1623 = _1607.z * cbModelParam._m0[1u].y;
    }
    float _1627 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _553);
    float _1628 = isnan(_1627) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1627 : min(cbModelParam._m0[25u].w, _1627));
    float _1718;
    float _1720;
    float _1722;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1682 = fma(_791, cbModelParam._m0[21u].z, fma(_787, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _783)) + cbModelParam._m0[21u].w;
        float _1686 = fma(_791, cbModelParam._m0[22u].z, fma(_787, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _783)) + cbModelParam._m0[22u].w;
        float _1690 = fma(_791, cbModelParam._m0[23u].z, fma(_787, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _783)) + cbModelParam._m0[23u].w;
        float _1693 = fma(_729, cbModelParam._m0[21u].z, fma(_728, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _727));
        float _1696 = fma(_729, cbModelParam._m0[22u].z, fma(_728, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _727));
        float _1699 = fma(_729, cbModelParam._m0[23u].z, fma(_728, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _727));
        float _1840;
        if (_1693 > 0.0)
        {
            _1840 = abs((1.0 - _1682) / _1693);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1693 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1682 + 1.0) / _1693);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1840 = frontier_phi_25_21_ladder;
        }
        float _2116;
        if (_1696 > 0.0)
        {
            _2116 = abs((1.0 - _1686) / _1696);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1696 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1686 + 1.0) / _1696);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2116 = frontier_phi_37_32_ladder;
        }
        float _2329;
        if (_1699 > 0.0)
        {
            _2329 = abs((1.0 - _1690) / _1699);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1699 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1690 + 1.0) / _1699);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2329 = frontier_phi_46_43_ladder;
        }
        float _2331 = isnan(_2116) ? _1840 : (isnan(_1840) ? _2116 : min(_1840, _2116));
        float _2332 = isnan(_2329) ? _2331 : (isnan(_2331) ? _2329 : min(_2331, _2329));
        float _2336 = (_2332 * _1693) + _1682;
        float _2337 = (_2332 * _1696) + _1686;
        float _2338 = (_2332 * _1699) + _1690;
        float _2339 = _2332 * 9.9999997473787516355514526367188e-05;
        float _2340 = (-1.0) - _2339;
        float _2342 = _2339 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2338 > _2342) || ((_2338 < _2340) || ((_2337 > _2342) || ((_2337 < _2340) || ((_2336 < _2340) || (_2336 > _2342))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2537 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2338, cbModelParam._m0[17u].z, fma(_2337, cbModelParam._m0[17u].y, _2336 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2338, cbModelParam._m0[18u].z, fma(_2337, cbModelParam._m0[18u].y, _2336 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2338, cbModelParam._m0[19u].z, fma(_2337, cbModelParam._m0[19u].y, _2336 * cbModelParam._m0[19u].x))), _1628);
            frontier_phi_22_46_ladder = _2537.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2537.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2537.x * cbModelParam._m0[1u].z;
        }
        _1718 = frontier_phi_22_46_ladder_2;
        _1720 = frontier_phi_22_46_ladder_1;
        _1722 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1702 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_727, _728, _729), _1628);
        _1718 = _1702.x * cbModelParam._m0[1u].z;
        _1720 = _1702.y * cbModelParam._m0[1u].z;
        _1722 = _1702.z * cbModelParam._m0[1u].z;
    }
    float _1735 = (((_754 * _703) + _755) * _719) * ((cbModelParam._m0[1u].w * (_1718 - _1619)) + _1619);
    float _1737 = (((_754 * _705) + _755) * _719) * ((cbModelParam._m0[1u].w * (_1720 - _1621)) + _1621);
    float _1739 = (((_754 * _706) + _755) * _719) * ((cbModelParam._m0[1u].w * (_1722 - _1623)) + _1623);
    float _1742 = fma(_1739, cbSceneParam._m0[89u].z, fma(_1737, cbSceneParam._m0[89u].y, _1735 * cbSceneParam._m0[89u].x));
    float _1745 = fma(_1739, cbSceneParam._m0[90u].z, fma(_1737, cbSceneParam._m0[90u].y, _1735 * cbSceneParam._m0[90u].x));
    float _1748 = fma(_1739, cbSceneParam._m0[91u].z, fma(_1737, cbSceneParam._m0[91u].y, _1735 * cbSceneParam._m0[91u].x));
    uvec4 _1758 = floatBitsToUint(cbInstanceData._m0[_250 + 5u]);
    uint _1760 = _1758.x * 14u;
    uint _1761 = _1760 + 13u;
    float _1768 = _719 + (-1.0);
    float _1773 = (cbLight._m0[_1761].x * _1768) + 1.0;
    float _1774 = (cbLight._m0[_1761].y * _1768) + 1.0;
    float _1775 = (cbLight._m0[_1761].z * _1768) + 1.0;
    float _1776 = (cbLight._m0[_1761].w * _1768) + 1.0;
    uint _1777 = _1760 + 5u;
    float _1783 = isnan(1.0) ? _1774 : (isnan(_1774) ? 1.0 : min(_1774, 1.0));
    uint _1787 = _1760 + 4u;
    float _1794 = isnan(1.0) ? _1773 : (isnan(_1773) ? 1.0 : min(_1773, 1.0));
    uint _1798 = _1760 | 1u;
    float _1809 = dot(vec3(cbLight._m0[_1760].xyz), vec3(_550, _551, _552));
    float _1812 = dot(vec3(cbLight._m0[_1798].xyz), vec3(_550, _551, _552));
    float _3965 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _3976 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _1817 = (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * 0.3183098733425140380859375;
    float _1819 = (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * 0.3183098733425140380859375;
    float _1826 = ((cbLight._m0[_1777].x * _1783) * _1819) + ((cbLight._m0[_1787].x * _1794) * _1817);
    float _1827 = ((_1783 * cbLight._m0[_1777].y) * _1819) + ((_1794 * cbLight._m0[_1787].y) * _1817);
    float _1828 = ((_1783 * cbLight._m0[_1777].z) * _1819) + ((_1794 * cbLight._m0[_1787].z) * _1817);
    uvec4 _1832 = floatBitsToUint(cbLight._m0[_1760 + 12u]);
    bool _1834 = _1832.x == 0u;
    float _1845;
    float _1847;
    float _1849;
    if (_1834)
    {
        _1845 = _1826;
        _1847 = _1827;
        _1849 = _1828;
    }
    else
    {
        uint _1853 = _1760 + 6u;
        float _1869 = (dot(vec3(cbLight._m0[_1760 + 2u].xyz), vec3(_550, _551, _552)) * 0.5) + 0.5;
        float _1870 = _1869 * _1869;
        float _3987 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
        float _1871 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1872 = isnan(1.0) ? _1775 : (isnan(_1775) ? 1.0 : min(_1775, 1.0));
        _1845 = (((cbLight._m0[_1853].x * 0.3183098733425140380859375) * _1871) * _1872) + _1826;
        _1847 = (((cbLight._m0[_1853].y * 0.3183098733425140380859375) * _1871) * _1872) + _1827;
        _1849 = (((cbLight._m0[_1853].z * 0.3183098733425140380859375) * _1871) * _1872) + _1828;
    }
    bool _1852 = _1832.y == 0u;
    float _1890;
    float _1892;
    float _1894;
    if (_1852)
    {
        _1890 = _1845;
        _1892 = _1847;
        _1894 = _1849;
    }
    else
    {
        uint _2060 = _1760 + 7u;
        float _2076 = (dot(vec3(cbLight._m0[_1760 + 3u].xyz), vec3(_550, _551, _552)) * 0.5) + 0.5;
        float _2077 = _2076 * _2076;
        float _4003 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2078 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _2079 = isnan(1.0) ? _1776 : (isnan(_1776) ? 1.0 : min(_1776, 1.0));
        _1890 = (((cbLight._m0[_2060].x * 0.3183098733425140380859375) * _2078) * _2079) + _1845;
        _1892 = (((cbLight._m0[_2060].y * 0.3183098733425140380859375) * _2078) * _2079) + _1847;
        _1894 = (((cbLight._m0[_2060].z * 0.3183098733425140380859375) * _2078) * _2079) + _1849;
    }
    uint _1897 = _1760 + 8u;
    float _1910 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1760].w)) * _553) * 0.949999988079071044921875);
    float _1911 = _1910 * _1910;
    float _1912 = cbLight._m0[_1760].x + _630;
    float _1913 = cbLight._m0[_1760].y + _631;
    float _1914 = cbLight._m0[_1760].z + _632;
    float _1918 = inversesqrt(dot(vec3(_1912, _1913, _1914), vec3(_1912, _1913, _1914)));
    float _1919 = _1918 * _1912;
    float _1920 = _1918 * _1913;
    float _1921 = _1918 * _1914;
    float _1922 = dot(vec3(_550, _551, _552), vec3(cbLight._m0[_1760].xyz));
    float _4019 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
    float _1925 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _4030 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _1926 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _1927 = dot(vec3(_550, _551, _552), vec3(_1919, _1920, _1921));
    float _4041 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _1930 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _1931 = dot(vec3(cbLight._m0[_1760].xyz), vec3(_1919, _1920, _1921));
    float _4052 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _1935 = _1911 * _1911;
    float _1939 = ((_1930 * _1930) * (_1935 + (-1.0))) + 1.0;
    float _1947 = exp2(log2(1.0 - (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) * 5.0);
    float _1948 = 0.959999978542327880859375 - _700;
    float _1950 = 0.959999978542327880859375 - _701;
    float _1951 = 0.959999978542327880859375 - _702;
    float _1958 = 1.0 - _1911;
    float _1969 = (0.5 / (((_1926 * ((_1925 * _1958) + _1911)) + 9.9999999392252902907785028219223e-09) + (((_1926 * _1958) + _1911) * _1925))) * _1925;
    float _4063 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
    float _1971 = (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * (_1935 / ((_1939 * _1939) * 3.141590118408203125));
    uint _1982 = _1760 + 9u;
    float _1993 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1798].w)) * _553) * 0.949999988079071044921875);
    float _1994 = _1993 * _1993;
    float _1995 = cbLight._m0[_1798].x + _630;
    float _1996 = cbLight._m0[_1798].y + _631;
    float _1997 = cbLight._m0[_1798].z + _632;
    float _2001 = inversesqrt(dot(vec3(_1995, _1996, _1997), vec3(_1995, _1996, _1997)));
    float _2002 = _2001 * _1995;
    float _2003 = _2001 * _1996;
    float _2004 = _2001 * _1997;
    float _2005 = dot(vec3(_550, _551, _552), vec3(cbLight._m0[_1798].xyz));
    float _4074 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _2008 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _2009 = dot(vec3(_550, _551, _552), vec3(_2002, _2003, _2004));
    float _4085 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
    float _2012 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _2013 = dot(vec3(cbLight._m0[_1798].xyz), vec3(_2002, _2003, _2004));
    float _4096 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2017 = _1994 * _1994;
    float _2021 = ((_2012 * _2012) * (_2017 + (-1.0))) + 1.0;
    float _2028 = exp2(log2(1.0 - (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0)))) * 5.0);
    float _2035 = 1.0 - _1994;
    float _2045 = (0.5 / (((_1926 * ((_2008 * _2035) + _1994)) + 9.9999999392252902907785028219223e-09) + (((_1926 * _2035) + _1994) * _2008))) * _2008;
    float _4107 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2047 = (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_2017 / ((_2021 * _2021) * 3.141590118408203125));
    float _2057 = (((((_2028 * _1948) + _703) * cbLight._m0[_1982].x) * _2047) * _1783) + (((((_1947 * _1948) + _703) * cbLight._m0[_1897].x) * _1971) * _1794);
    float _2058 = (((((_2028 * _1950) + _705) * cbLight._m0[_1982].y) * _2047) * _1783) + (((((_1947 * _1950) + _705) * cbLight._m0[_1897].y) * _1971) * _1794);
    float _2059 = (((((_2028 * _1951) + _706) * cbLight._m0[_1982].z) * _2047) * _1783) + (((((_1947 * _1951) + _706) * cbLight._m0[_1897].z) * _1971) * _1794);
    float _2121;
    float _2123;
    float _2125;
    if (_1834)
    {
        _2121 = _2057;
        _2123 = _2058;
        _2125 = _2059;
    }
    else
    {
        uint _2127 = _1760 + 2u;
        uint _2131 = _1760 + 10u;
        float _2145 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2127].w)) * _553) * 0.949999988079071044921875);
        float _2146 = _2145 * _2145;
        float _2147 = cbLight._m0[_2127].x + _630;
        float _2148 = cbLight._m0[_2127].y + _631;
        float _2149 = cbLight._m0[_2127].z + _632;
        float _2153 = inversesqrt(dot(vec3(_2147, _2148, _2149), vec3(_2147, _2148, _2149)));
        float _2154 = _2153 * _2147;
        float _2155 = _2153 * _2148;
        float _2156 = _2153 * _2149;
        float _2157 = dot(vec3(_550, _551, _552), vec3(cbLight._m0[_2127].xyz));
        float _4118 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
        float _2160 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _2161 = dot(vec3(_550, _551, _552), vec3(_2154, _2155, _2156));
        float _4129 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2164 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _2165 = dot(vec3(cbLight._m0[_2127].xyz), vec3(_2154, _2155, _2156));
        float _4140 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2169 = _2146 * _2146;
        float _2173 = ((_2164 * _2164) * (_2169 + (-1.0))) + 1.0;
        float _2180 = exp2(log2(1.0 - (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0)))) * 5.0);
        float _2187 = 1.0 - _2146;
        float _2197 = (0.5 / (((_1926 * ((_2160 * _2187) + _2146)) + 9.9999999392252902907785028219223e-09) + (((_1926 * _2187) + _2146) * _2160))) * _2160;
        float _4151 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
        float _2199 = (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_2169 / ((_2173 * _2173) * 3.141590118408203125));
        float _2200 = isnan(1.0) ? _1775 : (isnan(_1775) ? 1.0 : min(_1775, 1.0));
        _2121 = (((((_2180 * _1948) + _703) * cbLight._m0[_2131].x) * _2199) * _2200) + _2057;
        _2123 = (((((_2180 * _1950) + _705) * cbLight._m0[_2131].y) * _2199) * _2200) + _2058;
        _2125 = (((((_2180 * _1951) + _706) * cbLight._m0[_2131].z) * _2199) * _2200) + _2059;
    }
    float _2235;
    float _2237;
    float _2239;
    if (_1852)
    {
        _2235 = _2121;
        _2237 = _2123;
        _2239 = _2125;
    }
    else
    {
        uint _2246 = _1760 + 3u;
        uint _2250 = _1760 + 11u;
        float _2264 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2246].w)) * _553) * 0.949999988079071044921875);
        float _2265 = _2264 * _2264;
        float _2266 = cbLight._m0[_2246].x + _630;
        float _2267 = cbLight._m0[_2246].y + _631;
        float _2268 = cbLight._m0[_2246].z + _632;
        float _2272 = inversesqrt(dot(vec3(_2266, _2267, _2268), vec3(_2266, _2267, _2268)));
        float _2273 = _2272 * _2266;
        float _2274 = _2272 * _2267;
        float _2275 = _2272 * _2268;
        float _2276 = dot(vec3(_550, _551, _552), vec3(cbLight._m0[_2246].xyz));
        float _4167 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2279 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _2280 = dot(vec3(_550, _551, _552), vec3(_2273, _2274, _2275));
        float _4178 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        float _2283 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _2284 = dot(vec3(cbLight._m0[_2246].xyz), vec3(_2273, _2274, _2275));
        float _4189 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
        float _2288 = _2265 * _2265;
        float _2292 = ((_2283 * _2283) * (_2288 + (-1.0))) + 1.0;
        float _2299 = exp2(log2(1.0 - (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0)))) * 5.0);
        float _2306 = 1.0 - _2265;
        float _2316 = (0.5 / (((_1926 * ((_2279 * _2306) + _2265)) + 9.9999999392252902907785028219223e-09) + (((_1926 * _2306) + _2265) * _2279))) * _2279;
        float _4200 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        float _2318 = (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * (_2288 / ((_2292 * _2292) * 3.141590118408203125));
        float _2319 = isnan(1.0) ? _1776 : (isnan(_1776) ? 1.0 : min(_1776, 1.0));
        _2235 = (((((_2299 * _1948) + _703) * cbLight._m0[_2250].x) * _2318) * _2319) + _2121;
        _2237 = (((((_2299 * _1950) + _705) * cbLight._m0[_2250].y) * _2318) * _2319) + _2123;
        _2239 = (((((_2299 * _1951) + _706) * cbLight._m0[_2250].z) * _2318) * _2319) + _2125;
    }
    float _2454;
    float _2456;
    float _2458;
    float _2460;
    float _2462;
    float _2464;
    if (_1758.y == 0u)
    {
        float _2394 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2395 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2394;
        float _2396 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2394;
        float _2397 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2394;
        uvec4 _2409 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2410 = _2409.x;
        uint _2421 = uint((float(_2409.y) * floor(float(uint(cbSceneParam._m0[85u].y * _639) / _2410))) + floor(float(uint(cbSceneParam._m0[85u].x * _638) / _2410)));
        float _2431 = (log2(_2397 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2432 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        uint _2435 = uint(isnan(14.0) ? _2432 : (isnan(_2432) ? 14.0 : min(_2432, 14.0)));
        uvec4 _2440 = texelFetch(g_lightClusterGridBuffer, int(((_2435 << 2u) + (_2421 << 6u)) >> 2u));
        uint _2441 = _2440.x;
        uint _2442 = _2409.z;
        float _2542;
        float _2544;
        float _2546;
        float _2548;
        float _2550;
        float _2552;
        if (((((1u << ((_2442 >> 4u) & 15u)) + 4294967295u) & _2441) == 0u) || ((_2442 & 240u) == 0u))
        {
            _2542 = 0.0;
            _2544 = 0.0;
            _2546 = 0.0;
            _2548 = 0.0;
            _2550 = 0.0;
            _2552 = 0.0;
        }
        else
        {
            float _2543;
            float _2545;
            float _2547;
            float _2549;
            float _2551;
            float _2553;
            float _2687 = 0.0;
            float _2688 = 0.0;
            float _2689 = 0.0;
            float _2690 = 0.0;
            float _2691 = 0.0;
            float _2692 = 0.0;
            uint _2693 = 0u;
            uint _2702;
            bool _2703;
            for (;;)
            {
                _2702 = texelFetch(g_lightClassification, int((((_2435 << 5u) + (_2421 << 9u)) + (_2693 << 2u)) >> 2u)).x;
                _2703 = _2702 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2703)
                {
                    frontier_phi_61_pred = _2687;
                    frontier_phi_61_pred_1 = _2692;
                    frontier_phi_61_pred_2 = _2691;
                    frontier_phi_61_pred_3 = _2690;
                    frontier_phi_61_pred_4 = _2689;
                    frontier_phi_61_pred_5 = _2688;
                }
                else
                {
                    float _2811;
                    float _2812;
                    float _2813;
                    float _2814;
                    float _2815;
                    float _2816;
                    uint _2817;
                    _2811 = _2687;
                    _2812 = _2688;
                    _2813 = _2689;
                    _2814 = _2690;
                    _2815 = _2691;
                    _2816 = _2692;
                    _2817 = _2702;
                    float _2743;
                    float _2744;
                    float _2745;
                    float _2746;
                    float _2747;
                    float _2748;
                    for (;;)
                    {
                        uint _2821 = uint(findLSB(_2817)) + (_2693 << 5u);
                        uint _2818 = (_2817 + 4294967295u) & _2817;
                        uint _2823 = _2821 * 48u;
                        vec4 _2837 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2823)).x, texelFetch(g_PointLightRenderingBuffer, int(_2823 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2823 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2823 + 3u)).x));
                        uint _2843 = (_2821 * 48u) + 4u;
                        vec4 _2856 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2843)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 3u)).x));
                        uint _2862 = (_2821 * 48u) + 8u;
                        vec3 _2873 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2862)).x, texelFetch(g_PointLightRenderingBuffer, int(_2862 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2862 + 2u)).x));
                        float _2877 = _2837.x - _2395;
                        float _2878 = _2837.y - _2396;
                        float _2879 = _2837.z - _2397;
                        float _2880 = dot(vec3(_2877, _2878, _2879), vec3(_2877, _2878, _2879));
                        float _2883 = inversesqrt(_2880);
                        float _2884 = _2883 * _2877;
                        float _2885 = _2883 * _2878;
                        float _2886 = _2883 * _2879;
                        float _2887 = dot(vec3(_660, _663, _666), vec3(_2884, _2885, _2886));
                        float _2892 = 1.0 - (_2880 * _2837.w);
                        float _4226 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
                        float _2893 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
                        float _2894 = sqrt(_2880) * _2856.w;
                        float _2897 = 1.39999997615814208984375 / (_2894 + 1.39999997615814208984375);
                        float _2898 = _2897 * _2897;
                        float _2901 = ((1.0 - _2898) * _2887) + _2898;
                        float _2904 = _2894 * _2894;
                        float _2908 = ((isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0))) * _2893) / ((_2904 * 0.699999988079071044921875) + 1.0);
                        float _2912 = (-0.0) - _2395;
                        float _2913 = (-0.0) - _2396;
                        float _2914 = (-0.0) - _2397;
                        float _2918 = inversesqrt(dot(vec3(_2912, _2913, _2914), vec3(_2912, _2913, _2914)));
                        float _2919 = _2918 * _2912;
                        float _2920 = _2918 * _2913;
                        float _2921 = _2918 * _2914;
                        float _2929 = exp2(log2(1.0 / ((_2904 * 3.5) + 5.0)) * 0.25);
                        float _2930 = 1.0 - _735;
                        float _2937 = sqrt(1.0 - ((1.0 - (_2930 * _2930)) * (1.0 - (_2929 * _2929))));
                        float _2938 = _2937 * _2937;
                        float _2939 = _2938 * _2938;
                        float _2940 = _2919 + _2884;
                        float _2941 = _2920 + _2885;
                        float _2942 = _2921 + _2886;
                        float _2946 = inversesqrt(dot(vec3(_2940, _2941, _2942), vec3(_2940, _2941, _2942)));
                        float _2950 = dot(vec3(_660, _663, _666), vec3(_2919, _2920, _2921));
                        float _4242 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
                        float _2953 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
                        float _2954 = dot(vec3(_660, _663, _666), vec3(_2946 * _2940, _2946 * _2941, _2946 * _2942));
                        float _4253 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
                        float _2957 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
                        float _2961 = ((_2957 * _2957) * (_2939 + (-1.0))) + 1.0;
                        float _2962 = _2897 * _2938;
                        float _2963 = _2962 * _2962;
                        float _2966 = ((1.0 - _2963) * _2887) + _2963;
                        float _4264 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
                        float _2967 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
                        float _2968 = 1.0 - _2938;
                        float _2978 = (0.5 / (((_2967 * ((_2953 * _2968) + _2938)) + 9.9999999392252902907785028219223e-09) + (((_2967 * _2968) + _2938) * _2953))) * _2967;
                        float _4275 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
                        float _2989 = (((_2939 * 3.1415927410125732421875) * (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0)))) / ((_2961 * _2961) * ((_2904 * 2.1991131305694580078125) + 3.141590118408203125))) * _2893;
                        _2746 = (_2908 * _2856.x) + _2814;
                        _2747 = (_2908 * _2856.y) + _2815;
                        _2748 = (_2908 * _2856.z) + _2816;
                        _2743 = (_2989 * _2873.x) + _2811;
                        _2744 = (_2989 * _2873.y) + _2812;
                        _2745 = (_2989 * _2873.z) + _2813;
                        if (_2818 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2811 = _2743;
                            _2812 = _2744;
                            _2813 = _2745;
                            _2814 = _2746;
                            _2815 = _2747;
                            _2816 = _2748;
                            _2817 = _2818;
                        }
                    }
                    frontier_phi_61_pred = _2743;
                    frontier_phi_61_pred_1 = _2748;
                    frontier_phi_61_pred_2 = _2747;
                    frontier_phi_61_pred_3 = _2746;
                    frontier_phi_61_pred_4 = _2745;
                    frontier_phi_61_pred_5 = _2744;
                }
                _2543 = frontier_phi_61_pred;
                _2553 = frontier_phi_61_pred_1;
                _2551 = frontier_phi_61_pred_2;
                _2549 = frontier_phi_61_pred_3;
                _2547 = frontier_phi_61_pred_4;
                _2545 = frontier_phi_61_pred_5;
                uint _2694 = _2693 + 1u;
                if (_2694 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2687 = _2543;
                    _2688 = _2545;
                    _2689 = _2547;
                    _2690 = _2549;
                    _2691 = _2551;
                    _2692 = _2553;
                    _2693 = _2694;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2542 = _2543;
            _2544 = _2545;
            _2546 = _2547;
            _2548 = _2549;
            _2550 = _2551;
            _2552 = _2553;
        }
        uvec4 _2556 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2557 = _2556.z;
        uint _2559 = (_2557 >> 8u) & 15u;
        float _2655;
        float _2657;
        float _2659;
        float _2661;
        float _2663;
        float _2665;
        if (((4294967295u << _2559) & _2441) == 0u)
        {
            _2655 = _2542;
            _2657 = _2544;
            _2659 = _2546;
            _2661 = _2548;
            _2663 = _2550;
            _2665 = _2552;
        }
        else
        {
            float _2680 = inversesqrt(dot(vec3(_2395, _2396, _2397), vec3(_2395, _2396, _2397)));
            float _2681 = _2680 * _2395;
            float _2682 = _2680 * _2396;
            float _2683 = _2680 * _2397;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2559 < ((_2557 >> 12u) & 15u))
            {
                float _2656;
                float _2658;
                float _2660;
                float _2662;
                float _2664;
                float _2666;
                float _2794 = _2542;
                float _2795 = _2544;
                float _2796 = _2546;
                float _2797 = _2548;
                float _2798 = _2550;
                float _2799 = _2552;
                uint _2800 = _2559;
                uint _2809;
                bool _2810;
                for (;;)
                {
                    _2809 = texelFetch(g_lightClassification, int((((_2435 << 5u) + (_2421 << 9u)) + (_2800 << 2u)) >> 2u)).x;
                    _2810 = _2809 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2810)
                    {
                        frontier_phi_67_pred = _2797;
                        frontier_phi_67_pred_1 = _2798;
                        frontier_phi_67_pred_2 = _2799;
                        frontier_phi_67_pred_3 = _2796;
                        frontier_phi_67_pred_4 = _2795;
                        frontier_phi_67_pred_5 = _2794;
                    }
                    else
                    {
                        float _2994;
                        float _2995;
                        float _2996;
                        float _2997;
                        float _2998;
                        float _2999;
                        float _3287;
                        float _3288;
                        float _3289;
                        float _3290;
                        float _3291;
                        float _3292;
                        float _3007 = _2794;
                        float _3008 = _2795;
                        float _3009 = _2796;
                        float _3010 = _2797;
                        float _3011 = _2798;
                        float _3012 = _2799;
                        uint _3013 = _2809;
                        uint _3014;
                        vec4 _3039;
                        float _3040;
                        vec4 _3055;
                        vec3 _3067;
                        vec4 _3082;
                        vec4 _3097;
                        float _3143;
                        bool _3144;
                        for (;;)
                        {
                            uint _3024 = ((_2800 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3013));
                            _3014 = (_3013 + 4294967295u) & _3013;
                            uint _3026 = _3024 * 40u;
                            _3039 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3026)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 3u)).x));
                            _3040 = _3039.w;
                            uint _3042 = (_3024 * 40u) + 4u;
                            _3055 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3042)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 3u)).x));
                            uint _3057 = (_3024 * 40u) + 8u;
                            _3067 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3057)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 2u)).x));
                            uint _3069 = (_3024 * 40u) + 16u;
                            _3082 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3069)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 3u)).x));
                            uint _3084 = (_3024 * 40u) + 20u;
                            _3097 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3084)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 3u)).x));
                            uint _3099 = (_3024 * 40u) + 24u;
                            vec4 _3112 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3099)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 3u)).x));
                            uint _3118 = (_3024 * 40u) + 28u;
                            vec4 _3131 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3118)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 3u)).x));
                            _3143 = fma(_2397, _3131.z, fma(_2396, _3131.y, _3131.x * _2395)) + _3131.w;
                            _3144 = !((fma(_2397, _3112.z, fma(_2396, _3112.y, _3112.x * _2395)) + _3112.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3144)
                            {
                                float _3171 = _3039.x - _2395;
                                float _3172 = _3039.y - _2396;
                                float _3173 = _3039.z - _2397;
                                float _3174 = dot(vec3(_3171, _3172, _3173), vec3(_3171, _3172, _3173));
                                float _3177 = inversesqrt(_3174);
                                float _3178 = _3177 * _3171;
                                float _3179 = _3177 * _3172;
                                float _3180 = _3177 * _3173;
                                float _3184 = 1.0 - (_3174 / (_3040 * _3040));
                                float _4286 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                                float _3185 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
                                float _3189 = sqrt(_3174) * _3055.w;
                                float _3191 = 1.39999997615814208984375 / (_3189 + 1.39999997615814208984375);
                                float _3192 = _3191 * _3191;
                                float _3195 = ((1.0 - _3192) * dot(vec3(_3178, _3179, _3180), vec3(_660, _663, _666))) + _3192;
                                float _3198 = _3189 * _3189;
                                float _3202 = (fma(_2397, _3082.z, fma(_2396, _3082.y, _3082.x * _2395)) + _3082.w) / _3143;
                                float _3203 = (fma(_2397, _3097.z, fma(_2396, _3097.y, _3097.x * _2395)) + _3097.w) / _3143;
                                float _3207 = 1.0 - dot(vec2(_3202, _3203), vec2(_3202, _3203));
                                float _4302 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                                float _3208 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
                                float _3209 = _3208 * (((isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0))) * _3185) / ((_3198 * 0.699999988079071044921875) + 1.0));
                                float _3221 = exp2(log2(1.0 / ((_3198 * 3.5) + 5.0)) * 0.25);
                                float _3222 = 1.0 - _735;
                                float _3229 = sqrt(1.0 - ((1.0 - (_3222 * _3222)) * (1.0 - (_3221 * _3221))));
                                float _3230 = _3229 * _3229;
                                float _3231 = _3230 * _3230;
                                float _3232 = _3178 - _2681;
                                float _3233 = _3179 - _2682;
                                float _3234 = _3180 - _2683;
                                float _3238 = inversesqrt(dot(vec3(_3232, _3233, _3234), vec3(_3232, _3233, _3234)));
                                float _3242 = dot(vec3(_660, _663, _666), vec3((-0.0) - _2681, (-0.0) - _2682, (-0.0) - _2683));
                                float _4313 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                                float _3245 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
                                float _3246 = dot(vec3(_660, _663, _666), vec3(_3238 * _3232, _3238 * _3233, _3238 * _3234));
                                float _4324 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                                float _3249 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
                                float _3253 = ((_3249 * _3249) * (_3231 + (-1.0))) + 1.0;
                                float _3254 = _3191 * _3230;
                                float _3255 = _3254 * _3254;
                                float _3261 = ((1.0 - _3255) * dot(vec3(_660, _663, _666), vec3(_3178, _3179, _3180))) + _3255;
                                float _4335 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                                float _3262 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
                                float _3263 = 1.0 - _3230;
                                float _3273 = (0.5 / (((_3262 * ((_3245 * _3263) + _3230)) + 9.9999999392252902907785028219223e-09) + (((_3262 * _3263) + _3230) * _3245))) * _3262;
                                float _4346 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                                float _3283 = (_3208 * _3185) * (((_3231 * 3.1415927410125732421875) * (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0)))) / ((_3253 * _3253) * ((_3198 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3283 * _3067.x;
                                frontier_phi_73_pred_1 = _3283 * _3067.y;
                                frontier_phi_73_pred_2 = _3209 * _3055.z;
                                frontier_phi_73_pred_3 = _3209 * _3055.y;
                                frontier_phi_73_pred_4 = _3209 * _3055.x;
                                frontier_phi_73_pred_5 = _3283 * _3067.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3287 = frontier_phi_73_pred;
                            _3288 = frontier_phi_73_pred_1;
                            _3292 = frontier_phi_73_pred_2;
                            _3291 = frontier_phi_73_pred_3;
                            _3290 = frontier_phi_73_pred_4;
                            _3289 = frontier_phi_73_pred_5;
                            _2997 = _3290 + _3010;
                            _2998 = _3291 + _3011;
                            _2999 = _3292 + _3012;
                            _2994 = _3287 + _3007;
                            _2995 = _3288 + _3008;
                            _2996 = _3289 + _3009;
                            if (_3014 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3007 = _2994;
                                _3008 = _2995;
                                _3009 = _2996;
                                _3010 = _2997;
                                _3011 = _2998;
                                _3012 = _2999;
                                _3013 = _3014;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2997;
                        frontier_phi_67_pred_1 = _2998;
                        frontier_phi_67_pred_2 = _2999;
                        frontier_phi_67_pred_3 = _2996;
                        frontier_phi_67_pred_4 = _2995;
                        frontier_phi_67_pred_5 = _2994;
                    }
                    _2662 = frontier_phi_67_pred;
                    _2664 = frontier_phi_67_pred_1;
                    _2666 = frontier_phi_67_pred_2;
                    _2660 = frontier_phi_67_pred_3;
                    _2658 = frontier_phi_67_pred_4;
                    _2656 = frontier_phi_67_pred_5;
                    uint _2801 = _2800 + 1u;
                    if (_2801 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2794 = _2656;
                        _2795 = _2658;
                        _2796 = _2660;
                        _2797 = _2662;
                        _2798 = _2664;
                        _2799 = _2666;
                        _2800 = _2801;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2664;
                frontier_phi_55_56_ladder_1 = _2666;
                frontier_phi_55_56_ladder_2 = _2662;
                frontier_phi_55_56_ladder_3 = _2660;
                frontier_phi_55_56_ladder_4 = _2658;
                frontier_phi_55_56_ladder_5 = _2656;
            }
            else
            {
                frontier_phi_55_56_ladder = _2550;
                frontier_phi_55_56_ladder_1 = _2552;
                frontier_phi_55_56_ladder_2 = _2548;
                frontier_phi_55_56_ladder_3 = _2546;
                frontier_phi_55_56_ladder_4 = _2544;
                frontier_phi_55_56_ladder_5 = _2542;
            }
            _2655 = frontier_phi_55_56_ladder_5;
            _2657 = frontier_phi_55_56_ladder_4;
            _2659 = frontier_phi_55_56_ladder_3;
            _2661 = frontier_phi_55_56_ladder_2;
            _2663 = frontier_phi_55_56_ladder;
            _2665 = frontier_phi_55_56_ladder_1;
        }
        float _2670 = isnan(1.0) ? _719 : (isnan(_719) ? 1.0 : min(_719, 1.0));
        _2454 = (_2670 * _2661) + _1890;
        _2456 = (_2670 * _2663) + _1892;
        _2458 = (_2670 * _2665) + _1894;
        _2460 = ((_2655 * _703) * _2670) + _2235;
        _2462 = ((_2657 * _705) * _2670) + _2237;
        _2464 = ((_2659 * _706) * _2670) + _2239;
    }
    else
    {
        _2454 = _1890;
        _2456 = _1892;
        _2458 = _1894;
        _2460 = _2235;
        _2462 = _2237;
        _2464 = _2239;
    }
    float _4362 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _4373 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _4384 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    uint _2484 = _250 + 6u;
    float _2492 = _638 / cbSceneParam._m0[86u].x;
    float _2493 = _639 / cbSceneParam._m0[86u].y;
    vec4 _2507 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2492, _2493, (log2((isnan(cbSceneParam._m0[77u].w) ? _572 : (isnan(_572) ? cbSceneParam._m0[77u].w : min(_572, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2509 = _2507.x;
    float _2510 = _2507.y;
    float _2511 = _2507.z;
    float _2512 = _2507.w;
    float _2605;
    float _2607;
    float _2609;
    float _2611;
    if (_572 > cbSceneParam._m0[78u].w)
    {
        float _2567 = isnan(_572) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _572 : min(cbSceneParam._m0[80u].w, _572));
        float _2568 = _2567 / _572;
        float _2579 = _2568 * _623;
        float _2580 = _624 * _2568;
        float _2581 = (-0.0) - _2580;
        float _2583 = _2568 * _625;
        float _2585 = (cbSceneParam._m0[77u].w * _2581) / _2567;
        float _2586 = _2585 + cbSceneParam._m0[79u].w;
        float _2587 = cbSceneParam._m0[79u].w - _2580;
        float _2593 = sqrt(((_2579 * _2579) + (_2580 * _2580)) + (_2583 * _2583));
        float _2596 = (1.0 - (cbSceneParam._m0[77u].w / _2567)) * _2593;
        float _2601 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2603 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2756;
        if (abs((_2581 - _2585) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2756 = ((((_2586 > 0.0) ? exp2(_2601 * _2586) : (2.0 - exp2(_2603 * _2586))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2596;
        }
        else
        {
            float _2716 = 1.0 / cbSceneParam._m0[80u].x;
            float _2717 = isnan(_2587) ? _2586 : (isnan(_2586) ? _2587 : max(_2586, _2587));
            float _2718 = isnan(_2587) ? _2586 : (isnan(_2586) ? _2587 : min(_2586, _2587));
            float _2727 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : min(_2717, 0.0));
            float _2728 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : min(_2718, 0.0));
            _2756 = ((abs(_2593 / _2581) * cbSceneParam._m0[80u].y) * ((((_2727 - _2728) * 2.0) - ((exp2(_2601 * (isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0)))) - exp2(_2601 * (isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0))))) * _2716)) - ((exp2(_2603 * _2727) - exp2(_2603 * _2728)) * _2716))) + (_2596 * cbSceneParam._m0[80u].z);
        }
        vec4 _2758 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2492, _2493, 1.0), 0.0);
        float _2767 = exp2((_2756 * (-1.44269502162933349609375)) * (1.0 - _2758.w));
        float _2768 = log2(_2767);
        float _2784 = log2(_2512);
        _2605 = (exp2(_2784 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2768 * cbSceneParam._m0[78u].x)) * _2758.x) / cbSceneParam._m0[78u].x)) + _2509;
        _2607 = (exp2(_2784 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2768 * cbSceneParam._m0[78u].y)) * _2758.y) / cbSceneParam._m0[78u].y)) + _2510;
        _2609 = (exp2(_2784 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2768 * cbSceneParam._m0[78u].z)) * _2758.z) / cbSceneParam._m0[78u].z)) + _2511;
        _2611 = _2767 * _2512;
    }
    else
    {
        _2605 = _2509;
        _2607 = _2510;
        _2609 = _2511;
        _2611 = _2512;
    }
    float _2623 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2624 = _2623 == 3.0;
    float _2625 = log2(_2611);
    float _2632 = exp2(_2625 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (_2454 + ((isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0))) * _719))) + ((_2460 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _1527)) * cbPerFrame._m0[3u].x));
    float _2633 = exp2(_2625 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * (_2456 + ((isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0))) * _719))) + ((_2462 + ((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _1527)) * cbPerFrame._m0[3u].x));
    float _2634 = exp2(_2625 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * (_2458 + ((isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))) * _719))) + ((_2464 + ((isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))) * _1527)) * cbPerFrame._m0[3u].x));
    float _2643 = (_2623 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2643 * (_2624 ? _2632 : (_2632 + (cbSceneParam._m0[72u].w * _2605)));
    SV_Target.y = _2643 * (_2624 ? _2633 : (_2633 + (cbSceneParam._m0[72u].w * _2607)));
    SV_Target.z = _2643 * (_2624 ? _2634 : (_2634 + (cbSceneParam._m0[72u].w * _2609)));
    SV_Target.w = cbInstanceData._m0[_2484].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2484].w;
}


