#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1388;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3715 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3726 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3737 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    uint _281 = uint(roundEven(NORMAL.w)) * 13u;
    uint _286 = _281 + 1u;
    uint _290 = _281 + 2u;
    float _299 = sqrt(((cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x)) + (cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x));
    float _300 = _299 * TEXCOORD.z;
    float _301 = _299 * TEXCOORD.w;
    vec4 _314 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _300) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _301) + cbTextureTilingScale._m0[13u].w));
    vec4 _338 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _343 = _338.x * cbMtdParam._m0[11u].x;
    float _344 = _338.y * cbMtdParam._m0[11u].y;
    float _345 = _338.z * cbMtdParam._m0[11u].z;
    vec4 _364 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _300) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _301) + cbTextureTilingScale._m0[5u].w));
    vec4 _401 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _403 = _401.x;
    float _415 = dot(vec4(_403, _401.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _432 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_403 - _415) * cbMtdParam._m0[24u].y) + _415) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3748 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _433 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
    float _440 = (_433 * ((_364.x * cbMtdParam._m0[12u].x) - _343)) + _343;
    float _441 = (_433 * ((_364.y * cbMtdParam._m0[12u].y) - _344)) + _344;
    float _442 = (_433 * ((_364.z * cbMtdParam._m0[12u].z) - _345)) + _345;
    vec4 _459 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _300) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _301) + cbTextureTilingScale._m0[3u].w));
    vec4 _479 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _481 = _479.x;
    float _491 = dot(vec4(_481, _479.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _505 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_481 - _491) * cbMtdParam._m0[24u].y) + _491) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3759 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _506 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    float _513 = (_506 * ((_459.x * cbMtdParam._m0[13u].x) - _440)) + _440;
    float _514 = (_506 * ((_459.y * cbMtdParam._m0[13u].y) - _441)) + _441;
    float _515 = (_506 * ((_459.z * cbMtdParam._m0[13u].z) - _442)) + _442;
    float _519 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _314.x) * _513;
    float _522 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _314.y) * _514;
    float _525 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _314.z) * _515;
    float _532 = ((_513 - _519) * (isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0)))) + _519;
    float _533 = ((_514 - _522) * (isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0)))) + _522;
    float _534 = ((_515 - _525) * (isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0)))) + _525;
    vec4 _546 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _300) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _301) + cbTextureTilingScale._m0[20u].w));
    vec4 _569 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _300) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _301) + cbTextureTilingScale._m0[4u].w));
    vec4 _586 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _588 = _586.x;
    float _589 = _586.y;
    float _590 = _586.z;
    float _597 = ((_569.x - _588) * _433) + _588;
    float _598 = ((_569.y - _589) * _433) + _589;
    float _599 = ((_569.z - _590) * _433) + _590;
    vec4 _611 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _300) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _301) + cbTextureTilingScale._m0[2u].w));
    float _624 = ((_611.z - _599) * _506) + _599;
    float _627 = ((((_611.x - _597) * _506) + _597) * 2.0) + (-1.0);
    float _628 = ((((_611.y - _598) * _506) + _598) * 2.0) + (-1.0);
    float _629 = dot(vec2(_627, _628), vec2(_627, _628));
    float _3770 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _634 = sqrt(1.0 - (isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))));
    float _639 = _627 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_546.x * 2.0) + (-1.0)));
    float _640 = _628 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_546.y * 2.0) + (-1.0)));
    vec4 _653 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _667 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _300) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _301) + cbTextureTilingScale._m0[19u].w));
    float _669 = _667.x;
    float _670 = 1.0 - _669;
    float _696 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_669 - _670) * cbMtdParam._m0[24u].w) + _670) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3781 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _697 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    float _705 = ((((cbMtdParam._m0[10u].x - _532) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _697) + _532;
    float _706 = ((((cbMtdParam._m0[10u].y - _533) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _697) + _533;
    float _707 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _534)) * _697) + _534;
    vec4 _719 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _733 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _735 = _733.x;
    float _753 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _300) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _301) + cbTextureTilingScale._m0[9u].w)).x - _735) * _433) + _735;
    float _771 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _300) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _301) + cbTextureTilingScale._m0[21u].w)).x - _753) * _506) + _753;
    float _775 = ((_719.x - _771) * cbMtdParam._m0[19u].z) + _771;
    float _777 = _775 - (_775 * _697);
    float _782 = (((_546.z - _624) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _624;
    float _786 = ((cbMtdParam._m0[23u].y - _782) * _697) + _782;
    vec4 _805 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _300) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _301) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _811 = (_805.x * 2.0) + (-1.0);
    float _812 = (_805.y * 2.0) + (-1.0);
    float _813 = dot(vec2(_811, _812), vec2(_811, _812));
    float _3792 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _829 = (_697 * (((cbMtdParam._m0[22u].z * _639) - _639) + _811)) + _639;
    float _830 = (_697 * (((cbMtdParam._m0[22u].z * _640) - _640) + _812)) + _640;
    float _831 = (_697 * (sqrt(1.0 - (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0)))) - _634)) + _634;
    float _835 = cbMtdParam._m0[22u].x + _653.w;
    float _838 = fma(_831, _249 * NORMAL.x, fma(_830, _256 * TANGENT.x, (_242 * _234) * _829));
    float _841 = fma(_831, _249 * NORMAL.y, fma(_830, _256 * TANGENT.y, (_242 * _235) * _829));
    float _844 = fma(_831, _249 * NORMAL.z, fma(_830, _256 * TANGENT.z, (_242 * _236) * _829));
    float _848 = inversesqrt(dot(vec3(_838, _841, _844), vec3(_838, _841, _844)));
    float _849 = _848 * _838;
    float _850 = _848 * _841;
    float _851 = _848 * _844;
    float _3803 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _852 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _3814 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _3825 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _3836 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _3847 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _3858 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _857 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _871 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _911 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _921 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _911);
    float _922 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _911);
    float _923 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _911);
    float _927 = inversesqrt(dot(vec3(_921, _922, _923), vec3(_921, _922, _923)));
    float _928 = _921 * _927;
    float _929 = _922 * _927;
    float _930 = _923 * _927;
    float _936 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _937 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _955 = fma(_851, cbSceneParam._m0[5u].z, fma(_850, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _849));
    float _958 = fma(_851, cbSceneParam._m0[6u].z, fma(_850, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _849));
    float _961 = fma(_851, cbSceneParam._m0[7u].z, fma(_850, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _849));
    uint _975 = (_281 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _981 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0)))) * cbInstanceData._m0[_975].x;
    float _982 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0)))) * cbInstanceData._m0[_975].y;
    float _983 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0)))) * cbInstanceData._m0[_975].z;
    float _3869 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _984 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _3880 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _985 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
    float _3891 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _986 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    float _987 = 1.0 - _857;
    float _988 = _984 * _987;
    float _989 = _985 * _987;
    float _990 = _986 * _987;
    float _995 = (_984 + (-0.039999999105930328369140625)) * _857;
    float _996 = (_985 + (-0.039999999105930328369140625)) * _857;
    float _997 = (_986 + (-0.039999999105930328369140625)) * _857;
    float _998 = _995 + 0.039999999105930328369140625;
    float _1000 = _996 + 0.039999999105930328369140625;
    float _1001 = _997 + 0.039999999105930328369140625;
    vec4 _1010 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _936, cbSceneParam._m0[86u].y * _937));
    float _1014 = ((isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))) * TEXCOORD_5.w) * _1010.x;
    float _1015 = dot(vec3(_849, _850, _851), vec3(_928, _929, _930));
    float _1018 = _1015 * 2.0;
    float _1022 = (_1018 * _849) - _928;
    float _1023 = (_1018 * _850) - _929;
    float _1024 = (_1018 * _851) - _930;
    float _1028 = abs(dot(vec3(_928, _929, _930), vec3(_849, _850, _851)));
    float _3902 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
    float _1030 = sqrt(_852);
    float _1043 = exp2((_1030 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1030 * 3.0));
    float _1049 = (1.0 - _1043) * ((_1030 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1050 = _1043 * _1030;
    float _1078 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1082 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1086 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1387;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1112 = fma(_1086, cbModelParam._m0[26u].z, fma(_1082, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1078));
        float _1116 = fma(_1086, cbModelParam._m0[27u].z, fma(_1082, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1078));
        float _1120 = fma(_1086, cbModelParam._m0[28u].z, fma(_1082, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1078));
        float _1145 = _1078 + _849;
        float _1146 = _1082 + _850;
        float _1147 = _1086 + _851;
        float _1157 = fma(_1147, cbModelParam._m0[26u].z, fma(_1146, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1145)) - _1112;
        float _1158 = fma(_1147, cbModelParam._m0[27u].z, fma(_1146, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1145)) - _1116;
        float _1159 = fma(_1147, cbModelParam._m0[28u].z, fma(_1146, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1145)) - _1120;
        float _1163 = inversesqrt(dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159)));
        float _1176 = ((_1163 * _1157) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1112 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1177 = ((_1163 * _1158) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1116 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1178 = ((_1163 * _1159) / cbModelParam._m0[34u].z) + ((((((_1120 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        vec4 _1202 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        float _1215 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1181.x + (-0.5));
        float _1217 = _1215 * (_1181.y + (-0.5));
        float _1218 = _1215 * (_1181.z + (-0.5));
        float _1225 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1188.x + (-0.5));
        float _1227 = _1225 * (_1188.y + (-0.5));
        float _1228 = _1225 * (_1188.z + (-0.5));
        float _1235 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1195.x + (-0.5));
        float _1237 = _1235 * (_1195.y + (-0.5));
        float _1238 = _1235 * (_1195.z + (-0.5));
        float _1245 = exp2((_1202.w + (-0.5)) * 20.0) * 2.0;
        float _1246 = _1245 * (_1202.x + (-0.5));
        float _1247 = _1245 * (_1202.y + (-0.5));
        float _1248 = _1245 * (_1202.z + (-0.5));
        float _1249 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1250 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1251 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1252 = _1216 * 0.5;
        float _1253 = _1226 * 0.5;
        float _1254 = _1236 * 0.5;
        float _1255 = dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254));
        float _1260 = (_1255 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1255);
        float _1269 = (dot(vec3(_849, _850, _851), vec3(_1260 * _1252, _1260 * _1253, _1260 * _1254)) + 1.0) * 0.5;
        float _3928 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1279 = sqrt(((_1253 * _1253) + (_1252 * _1252)) + (_1254 * _1254)) / (_1249 + 9.9999997473787516355514526367188e-06);
        float _3939 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1281 = _1280 * 2.0;
        float _1285 = (1.0 - _1280) / (_1280 + 1.0);
        float _3950 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _1295 = ((((1.0 - _1286) * (_1281 + 2.0)) * exp2(log2(isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * (_1281 + 1.0))) + _1286) * _1249;
        float _1296 = _1217 * 0.5;
        float _1297 = _1227 * 0.5;
        float _1298 = _1237 * 0.5;
        float _1299 = dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298));
        float _1304 = (_1299 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1299);
        float _1312 = (dot(vec3(_849, _850, _851), vec3(_1304 * _1296, _1304 * _1297, _1304 * _1298)) + 1.0) * 0.5;
        float _3961 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1321 = sqrt(((_1297 * _1297) + (_1296 * _1296)) + (_1298 * _1298)) / (_1250 + 9.9999997473787516355514526367188e-06);
        float _3972 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1323 = _1322 * 2.0;
        float _1327 = (1.0 - _1322) / (_1322 + 1.0);
        float _3983 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _1337 = ((((1.0 - _1328) * (_1323 + 2.0)) * exp2(log2(isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * (_1323 + 1.0))) + _1328) * _1250;
        float _1338 = _1218 * 0.5;
        float _1339 = _1228 * 0.5;
        float _1340 = _1238 * 0.5;
        float _1341 = dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340));
        float _1346 = (_1341 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1341);
        float _1354 = (dot(vec3(_849, _850, _851), vec3(_1346 * _1338, _1346 * _1339, _1346 * _1340)) + 1.0) * 0.5;
        float _3994 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1363 = sqrt(((_1339 * _1339) + (_1338 * _1338)) + (_1340 * _1340)) / (_1251 + 9.9999997473787516355514526367188e-06);
        float _4005 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1365 = _1364 * 2.0;
        float _1369 = (1.0 - _1364) / (_1364 + 1.0);
        float _4016 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1379 = ((((1.0 - _1370) * (_1365 + 2.0)) * exp2(log2(isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (_1365 + 1.0))) + _1370) * _1251;
        _1387 = _1218;
        _1389 = _1217;
        _1390 = _1216;
        _1391 = _1228;
        _1392 = _1227;
        _1393 = _1226;
        _1394 = _1238;
        _1395 = _1237;
        _1396 = _1236;
        _1397 = _1251;
        _1398 = _1250;
        _1399 = _1249;
        _1400 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)));
        _1401 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)));
        _1402 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)));
    }
    else
    {
        _1387 = _1388;
        _1389 = _1388;
        _1390 = _1388;
        _1391 = _1388;
        _1392 = _1388;
        _1393 = _1388;
        _1394 = _1388;
        _1395 = _1388;
        _1396 = _1388;
        _1397 = _1388;
        _1398 = _1388;
        _1399 = _1388;
        _1400 = 0.0;
        _1401 = 0.0;
        _1402 = 0.0;
    }
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1426 = fma(_1086, cbModelParam._m0[30u].z, fma(_1082, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1078));
        float _1430 = fma(_1086, cbModelParam._m0[31u].z, fma(_1082, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1078));
        float _1434 = fma(_1086, cbModelParam._m0[32u].z, fma(_1082, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1078));
        float _1457 = _1078 + _849;
        float _1458 = _1082 + _850;
        float _1459 = _1086 + _851;
        float _1469 = fma(_1459, cbModelParam._m0[30u].z, fma(_1458, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1457)) - _1426;
        float _1470 = fma(_1459, cbModelParam._m0[31u].z, fma(_1458, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1457)) - _1430;
        float _1471 = fma(_1459, cbModelParam._m0[32u].z, fma(_1458, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1457)) - _1434;
        float _1475 = inversesqrt(dot(vec3(_1469, _1470, _1471), vec3(_1469, _1470, _1471)));
        float _1488 = ((_1475 * _1469) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1426 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1489 = ((_1475 * _1470) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1430 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1490 = ((_1475 * _1471) / cbModelParam._m0[35u].z) + ((((((_1434 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1492 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1488, _1489, _1490), 0.0);
        vec4 _1499 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1488, _1489, _1490), 0.0);
        vec4 _1506 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1488, _1489, _1490), 0.0);
        vec4 _1513 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1488, _1489, _1490), 0.0);
        float _1525 = exp2((_1492.w + (-0.5)) * 20.0) * 2.0;
        float _1526 = _1525 * (_1492.x + (-0.5));
        float _1527 = _1525 * (_1492.y + (-0.5));
        float _1528 = _1525 * (_1492.z + (-0.5));
        float _1535 = exp2((_1499.w + (-0.5)) * 20.0) * 2.0;
        float _1536 = _1535 * (_1499.x + (-0.5));
        float _1537 = _1535 * (_1499.y + (-0.5));
        float _1538 = _1535 * (_1499.z + (-0.5));
        float _1545 = exp2((_1506.w + (-0.5)) * 20.0) * 2.0;
        float _1546 = _1545 * (_1506.x + (-0.5));
        float _1547 = _1545 * (_1506.y + (-0.5));
        float _1548 = _1545 * (_1506.z + (-0.5));
        float _1555 = exp2((_1513.w + (-0.5)) * 20.0) * 2.0;
        float _1556 = _1555 * (_1513.x + (-0.5));
        float _1557 = _1555 * (_1513.y + (-0.5));
        float _1558 = _1555 * (_1513.z + (-0.5));
        float _1559 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1560 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1561 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1562 = _1526 * 0.5;
        float _1563 = _1536 * 0.5;
        float _1564 = _1546 * 0.5;
        float _1565 = dot(vec3(_1562, _1563, _1564), vec3(_1562, _1563, _1564));
        float _1570 = (_1565 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1565);
        float _1578 = (dot(vec3(_849, _850, _851), vec3(_1570 * _1562, _1570 * _1563, _1570 * _1564)) + 1.0) * 0.5;
        float _4057 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1587 = sqrt(((_1563 * _1563) + (_1562 * _1562)) + (_1564 * _1564)) / (_1559 + 9.9999997473787516355514526367188e-06);
        float _4068 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1589 = _1588 * 2.0;
        float _1593 = (1.0 - _1588) / (_1588 + 1.0);
        float _4079 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _1603 = ((((1.0 - _1594) * (_1589 + 2.0)) * exp2(log2(isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * (_1589 + 1.0))) + _1594) * _1559;
        float _1604 = _1527 * 0.5;
        float _1605 = _1537 * 0.5;
        float _1606 = _1547 * 0.5;
        float _1607 = dot(vec3(_1604, _1605, _1606), vec3(_1604, _1605, _1606));
        float _1612 = (_1607 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1607);
        float _1620 = (dot(vec3(_849, _850, _851), vec3(_1612 * _1604, _1612 * _1605, _1612 * _1606)) + 1.0) * 0.5;
        float _4090 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1629 = sqrt(((_1605 * _1605) + (_1604 * _1604)) + (_1606 * _1606)) / (_1560 + 9.9999997473787516355514526367188e-06);
        float _4101 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1631 = _1630 * 2.0;
        float _1635 = (1.0 - _1630) / (_1630 + 1.0);
        float _4112 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1636 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _1645 = ((((1.0 - _1636) * (_1631 + 2.0)) * exp2(log2(isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * (_1631 + 1.0))) + _1636) * _1560;
        float _1646 = _1528 * 0.5;
        float _1647 = _1538 * 0.5;
        float _1648 = _1548 * 0.5;
        float _1649 = dot(vec3(_1646, _1647, _1648), vec3(_1646, _1647, _1648));
        float _1654 = (_1649 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1649);
        float _1662 = (dot(vec3(_849, _850, _851), vec3(_1654 * _1646, _1654 * _1647, _1654 * _1648)) + 1.0) * 0.5;
        float _4123 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1671 = sqrt(((_1647 * _1647) + (_1646 * _1646)) + (_1648 * _1648)) / (_1561 + 9.9999997473787516355514526367188e-06);
        float _4134 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1672 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1673 = _1672 * 2.0;
        float _1677 = (1.0 - _1672) / (_1672 + 1.0);
        float _4145 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1678 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1687 = ((((1.0 - _1678) * (_1673 + 2.0)) * exp2(log2(isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * (_1673 + 1.0))) + _1678) * _1561;
        _1695 = _1528;
        _1696 = _1527;
        _1697 = _1526;
        _1698 = _1538;
        _1699 = _1537;
        _1700 = _1536;
        _1701 = _1548;
        _1702 = _1547;
        _1703 = _1546;
        _1704 = _1561;
        _1705 = _1560;
        _1706 = _1559;
        _1707 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)));
        _1708 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)));
        _1709 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)));
    }
    else
    {
        _1695 = _1388;
        _1696 = _1388;
        _1697 = _1388;
        _1698 = _1388;
        _1699 = _1388;
        _1700 = _1388;
        _1701 = _1388;
        _1702 = _1388;
        _1703 = _1388;
        _1704 = _1388;
        _1705 = _1388;
        _1706 = _1388;
        _1707 = 0.0;
        _1708 = 0.0;
        _1709 = 0.0;
    }
    float _1719 = (cbModelParam._m0[1u].x * (_1707 - _1400)) + _1400;
    float _1720 = (cbModelParam._m0[1u].x * (_1708 - _1401)) + _1401;
    float _1721 = (cbModelParam._m0[1u].x * (_1709 - _1402)) + _1402;
    float _1742 = fma(_1721, cbSceneParam._m0[89u].z, fma(_1720, cbSceneParam._m0[89u].y, _1719 * cbSceneParam._m0[89u].x));
    float _1745 = fma(_1721, cbSceneParam._m0[90u].z, fma(_1720, cbSceneParam._m0[90u].y, _1719 * cbSceneParam._m0[90u].x));
    float _1748 = fma(_1721, cbSceneParam._m0[91u].z, fma(_1720, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1719));
    float _1763 = _1022 * 0.5;
    float _1764 = _1023 * 0.5;
    float _1765 = _1024 * 0.5;
    float _1766 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1697, _1700, _1703, _1706));
    float _1769 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1696, _1699, _1702, _1705));
    float _1772 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1695, _1698, _1701, _1704));
    float _1806;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1779 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1387, _1391, _1394, _1397));
        float _1783 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1389, _1392, _1395, _1398));
        float _1787 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1390, _1393, _1396, _1399));
        float _1794 = dot(vec4(cbModelParam._m0[39u]), vec4(_1763, _1764, _1765, 1.0));
        _1806 = dot(vec3(isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0)), isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)), isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1794) ? 0.0 : (isnan(0.0) ? _1794 : max(0.0, _1794))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1806 = 1.0;
    }
    float _1817;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1808 = dot(vec4(cbModelParam._m0[40u]), vec4(_1763, _1764, _1765, 1.0));
        _1817 = dot(vec3(isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0)), isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0)), isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1808) ? 0.0 : (isnan(0.0) ? _1808 : max(0.0, _1808))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1817 = 1.0;
    }
    float _1821 = (_1817 * cbModelParam._m0[1u].x) + (_1806 * (1.0 - cbModelParam._m0[1u].x));
    float _1831 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _852);
    float _1832 = isnan(_1831) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1831 : min(cbModelParam._m0[25u].z, _1831));
    float _1914;
    float _1916;
    float _1918;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1881 = fma(_1086, cbModelParam._m0[13u].z, fma(_1082, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1078)) + cbModelParam._m0[13u].w;
        float _1885 = fma(_1086, cbModelParam._m0[14u].z, fma(_1082, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1078)) + cbModelParam._m0[14u].w;
        float _1889 = fma(_1086, cbModelParam._m0[15u].z, fma(_1082, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1078)) + cbModelParam._m0[15u].w;
        float _1892 = fma(_1024, cbModelParam._m0[13u].z, fma(_1023, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1022));
        float _1895 = fma(_1024, cbModelParam._m0[14u].z, fma(_1023, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1022));
        float _1898 = fma(_1024, cbModelParam._m0[15u].z, fma(_1023, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1022));
        float _1926;
        if (_1892 > 0.0)
        {
            _1926 = abs((1.0 - _1881) / _1892);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1892 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1881 + 1.0) / _1892);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1926 = frontier_phi_14_12_ladder;
        }
        float _2129;
        if (_1895 > 0.0)
        {
            _2129 = abs((1.0 - _1885) / _1895);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1895 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1885 + 1.0) / _1895);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2129 = frontier_phi_23_19_ladder;
        }
        float _2383;
        if (_1898 > 0.0)
        {
            _2383 = abs((1.0 - _1889) / _1898);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1898 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1889 + 1.0) / _1898);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2383 = frontier_phi_35_30_ladder;
        }
        float _2385 = isnan(_2129) ? _1926 : (isnan(_1926) ? _2129 : min(_1926, _2129));
        float _2386 = isnan(_2383) ? _2385 : (isnan(_2385) ? _2383 : min(_2385, _2383));
        float _2390 = (_2386 * _1892) + _1881;
        float _2391 = (_2386 * _1895) + _1885;
        float _2392 = (_2386 * _1898) + _1889;
        float _2393 = _2386 * 9.9999997473787516355514526367188e-05;
        float _2395 = (-1.0) - _2393;
        float _2397 = _2393 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2392 > _2397) || ((_2392 < _2395) || ((_2391 > _2397) || ((_2391 < _2395) || ((_2390 < _2395) || (_2390 > _2397))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2520 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2392, cbModelParam._m0[9u].z, fma(_2391, cbModelParam._m0[9u].y, _2390 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2392, cbModelParam._m0[10u].z, fma(_2391, cbModelParam._m0[10u].y, _2390 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2392, cbModelParam._m0[11u].z, fma(_2391, cbModelParam._m0[11u].y, _2390 * cbModelParam._m0[11u].x))), _1832);
            frontier_phi_13_35_ladder = _2520.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2520.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2520.x * cbModelParam._m0[1u].y;
        }
        _1914 = frontier_phi_13_35_ladder_2;
        _1916 = frontier_phi_13_35_ladder_1;
        _1918 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1902 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1022, _1023, _1024), _1832);
        _1914 = _1902.x * cbModelParam._m0[1u].y;
        _1916 = _1902.y * cbModelParam._m0[1u].y;
        _1918 = _1902.z * cbModelParam._m0[1u].y;
    }
    float _1922 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _852);
    float _1923 = isnan(_1922) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1922 : min(cbModelParam._m0[25u].w, _1922));
    float _2013;
    float _2015;
    float _2017;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1977 = fma(_1086, cbModelParam._m0[21u].z, fma(_1082, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1078)) + cbModelParam._m0[21u].w;
        float _1981 = fma(_1086, cbModelParam._m0[22u].z, fma(_1082, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1078)) + cbModelParam._m0[22u].w;
        float _1985 = fma(_1086, cbModelParam._m0[23u].z, fma(_1082, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1078)) + cbModelParam._m0[23u].w;
        float _1988 = fma(_1024, cbModelParam._m0[21u].z, fma(_1023, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1022));
        float _1991 = fma(_1024, cbModelParam._m0[22u].z, fma(_1023, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1022));
        float _1994 = fma(_1024, cbModelParam._m0[23u].z, fma(_1023, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1022));
        float _2134;
        if (_1988 > 0.0)
        {
            _2134 = abs((1.0 - _1977) / _1988);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1988 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1977 + 1.0) / _1988);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2134 = frontier_phi_25_21_ladder;
        }
        float _2410;
        if (_1991 > 0.0)
        {
            _2410 = abs((1.0 - _1981) / _1991);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1991 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1981 + 1.0) / _1991);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2410 = frontier_phi_37_32_ladder;
        }
        float _2623;
        if (_1994 > 0.0)
        {
            _2623 = abs((1.0 - _1985) / _1994);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1994 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1985 + 1.0) / _1994);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2623 = frontier_phi_46_43_ladder;
        }
        float _2625 = isnan(_2410) ? _2134 : (isnan(_2134) ? _2410 : min(_2134, _2410));
        float _2626 = isnan(_2623) ? _2625 : (isnan(_2625) ? _2623 : min(_2625, _2623));
        float _2630 = (_2626 * _1988) + _1977;
        float _2631 = (_2626 * _1991) + _1981;
        float _2632 = (_2626 * _1994) + _1985;
        float _2633 = _2626 * 9.9999997473787516355514526367188e-05;
        float _2634 = (-1.0) - _2633;
        float _2636 = _2633 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2632 > _2636) || ((_2632 < _2634) || ((_2631 > _2636) || ((_2631 < _2634) || ((_2630 < _2634) || (_2630 > _2636))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2831 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2632, cbModelParam._m0[17u].z, fma(_2631, cbModelParam._m0[17u].y, _2630 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2632, cbModelParam._m0[18u].z, fma(_2631, cbModelParam._m0[18u].y, _2630 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2632, cbModelParam._m0[19u].z, fma(_2631, cbModelParam._m0[19u].y, _2630 * cbModelParam._m0[19u].x))), _1923);
            frontier_phi_22_46_ladder = _2831.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2831.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2831.x * cbModelParam._m0[1u].z;
        }
        _2013 = frontier_phi_22_46_ladder_2;
        _2015 = frontier_phi_22_46_ladder_1;
        _2017 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1997 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1022, _1023, _1024), _1923);
        _2013 = _1997.x * cbModelParam._m0[1u].z;
        _2015 = _1997.y * cbModelParam._m0[1u].z;
        _2017 = _1997.z * cbModelParam._m0[1u].z;
    }
    float _2030 = (((_1049 * _998) + _1050) * _1014) * ((cbModelParam._m0[1u].w * (_2013 - _1914)) + _1914);
    float _2032 = (((_1049 * _1000) + _1050) * _1014) * ((cbModelParam._m0[1u].w * (_2015 - _1916)) + _1916);
    float _2034 = (((_1049 * _1001) + _1050) * _1014) * ((cbModelParam._m0[1u].w * (_2017 - _1918)) + _1918);
    float _2037 = fma(_2034, cbSceneParam._m0[89u].z, fma(_2032, cbSceneParam._m0[89u].y, _2030 * cbSceneParam._m0[89u].x));
    float _2040 = fma(_2034, cbSceneParam._m0[90u].z, fma(_2032, cbSceneParam._m0[90u].y, _2030 * cbSceneParam._m0[90u].x));
    float _2043 = fma(_2034, cbSceneParam._m0[91u].z, fma(_2032, cbSceneParam._m0[91u].y, _2030 * cbSceneParam._m0[91u].x));
    uvec4 _2053 = floatBitsToUint(cbInstanceData._m0[_281 + 5u]);
    uint _2055 = _2053.x * 14u;
    uint _2056 = _2055 + 13u;
    float _2063 = _1014 + (-1.0);
    float _2068 = (cbLight._m0[_2056].x * _2063) + 1.0;
    float _2069 = (cbLight._m0[_2056].y * _2063) + 1.0;
    float _2070 = (cbLight._m0[_2056].z * _2063) + 1.0;
    float _2071 = (cbLight._m0[_2056].w * _2063) + 1.0;
    uint _2072 = _2055 + 5u;
    float _2078 = isnan(1.0) ? _2069 : (isnan(_2069) ? 1.0 : min(_2069, 1.0));
    uint _2082 = _2055 + 4u;
    float _2088 = isnan(1.0) ? _2068 : (isnan(_2068) ? 1.0 : min(_2068, 1.0));
    uint _2092 = _2055 | 1u;
    float _2103 = dot(vec3(cbLight._m0[_2055].xyz), vec3(_849, _850, _851));
    float _2106 = dot(vec3(cbLight._m0[_2092].xyz), vec3(_849, _850, _851));
    float _4281 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _4292 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2111 = (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * 0.3183098733425140380859375;
    float _2113 = (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * 0.3183098733425140380859375;
    float _2120 = ((cbLight._m0[_2072].x * _2078) * _2113) + ((cbLight._m0[_2082].x * _2088) * _2111);
    float _2121 = ((_2078 * cbLight._m0[_2072].y) * _2113) + ((_2088 * cbLight._m0[_2082].y) * _2111);
    float _2122 = ((_2078 * cbLight._m0[_2072].z) * _2113) + ((_2088 * cbLight._m0[_2082].z) * _2111);
    uvec4 _2126 = floatBitsToUint(cbLight._m0[_2055 + 12u]);
    bool _2128 = _2126.x == 0u;
    float _2139;
    float _2141;
    float _2143;
    if (_2128)
    {
        _2139 = _2120;
        _2141 = _2121;
        _2143 = _2122;
    }
    else
    {
        uint _2147 = _2055 + 6u;
        float _2163 = (dot(vec3(cbLight._m0[_2055 + 2u].xyz), vec3(_849, _850, _851)) * 0.5) + 0.5;
        float _2164 = _2163 * _2163;
        float _4303 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
        float _2165 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _2166 = isnan(1.0) ? _2070 : (isnan(_2070) ? 1.0 : min(_2070, 1.0));
        _2139 = (((cbLight._m0[_2147].x * 0.3183098733425140380859375) * _2165) * _2166) + _2120;
        _2141 = (((cbLight._m0[_2147].y * 0.3183098733425140380859375) * _2165) * _2166) + _2121;
        _2143 = (((cbLight._m0[_2147].z * 0.3183098733425140380859375) * _2165) * _2166) + _2122;
    }
    bool _2146 = _2126.y == 0u;
    float _2184;
    float _2186;
    float _2188;
    if (_2146)
    {
        _2184 = _2139;
        _2186 = _2141;
        _2188 = _2143;
    }
    else
    {
        uint _2354 = _2055 + 7u;
        float _2370 = (dot(vec3(cbLight._m0[_2055 + 3u].xyz), vec3(_849, _850, _851)) * 0.5) + 0.5;
        float _2371 = _2370 * _2370;
        float _4319 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        float _2372 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _2373 = isnan(1.0) ? _2071 : (isnan(_2071) ? 1.0 : min(_2071, 1.0));
        _2184 = (((cbLight._m0[_2354].x * 0.3183098733425140380859375) * _2372) * _2373) + _2139;
        _2186 = (((cbLight._m0[_2354].y * 0.3183098733425140380859375) * _2372) * _2373) + _2141;
        _2188 = (((cbLight._m0[_2354].z * 0.3183098733425140380859375) * _2372) * _2373) + _2143;
    }
    uint _2191 = _2055 + 8u;
    float _2204 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2055].w)) * _852) * 0.949999988079071044921875);
    float _2205 = _2204 * _2204;
    float _2206 = cbLight._m0[_2055].x + _928;
    float _2207 = cbLight._m0[_2055].y + _929;
    float _2208 = cbLight._m0[_2055].z + _930;
    float _2212 = inversesqrt(dot(vec3(_2206, _2207, _2208), vec3(_2206, _2207, _2208)));
    float _2213 = _2212 * _2206;
    float _2214 = _2212 * _2207;
    float _2215 = _2212 * _2208;
    float _2216 = dot(vec3(_849, _850, _851), vec3(cbLight._m0[_2055].xyz));
    float _4335 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
    float _2219 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
    float _4346 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _2220 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
    float _2221 = dot(vec3(_849, _850, _851), vec3(_2213, _2214, _2215));
    float _4357 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2224 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
    float _2225 = dot(vec3(cbLight._m0[_2055].xyz), vec3(_2213, _2214, _2215));
    float _4368 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _2229 = _2205 * _2205;
    float _2233 = ((_2224 * _2224) * (_2229 + (-1.0))) + 1.0;
    float _2241 = exp2(log2(1.0 - (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0)))) * 5.0);
    float _2242 = 0.959999978542327880859375 - _995;
    float _2244 = 0.959999978542327880859375 - _996;
    float _2245 = 0.959999978542327880859375 - _997;
    float _2252 = 1.0 - _2205;
    float _2263 = (0.5 / (((_2220 * ((_2219 * _2252) + _2205)) + 9.9999999392252902907785028219223e-09) + (((_2220 * _2252) + _2205) * _2219))) * _2219;
    float _4379 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2265 = (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * (_2229 / ((_2233 * _2233) * 3.141590118408203125));
    uint _2276 = _2055 + 9u;
    float _2287 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2092].w)) * _852) * 0.949999988079071044921875);
    float _2288 = _2287 * _2287;
    float _2289 = cbLight._m0[_2092].x + _928;
    float _2290 = cbLight._m0[_2092].y + _929;
    float _2291 = cbLight._m0[_2092].z + _930;
    float _2295 = inversesqrt(dot(vec3(_2289, _2290, _2291), vec3(_2289, _2290, _2291)));
    float _2296 = _2295 * _2289;
    float _2297 = _2295 * _2290;
    float _2298 = _2295 * _2291;
    float _2299 = dot(vec3(_849, _850, _851), vec3(cbLight._m0[_2092].xyz));
    float _4390 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2302 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
    float _2303 = dot(vec3(_849, _850, _851), vec3(_2296, _2297, _2298));
    float _4401 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2306 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
    float _2307 = dot(vec3(cbLight._m0[_2092].xyz), vec3(_2296, _2297, _2298));
    float _4412 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2311 = _2288 * _2288;
    float _2315 = ((_2306 * _2306) * (_2311 + (-1.0))) + 1.0;
    float _2322 = exp2(log2(1.0 - (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0)))) * 5.0);
    float _2329 = 1.0 - _2288;
    float _2339 = (0.5 / (((_2220 * ((_2302 * _2329) + _2288)) + 9.9999999392252902907785028219223e-09) + (((_2220 * _2329) + _2288) * _2302))) * _2302;
    float _4423 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2341 = (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_2311 / ((_2315 * _2315) * 3.141590118408203125));
    float _2351 = (((((_2322 * _2242) + _998) * cbLight._m0[_2276].x) * _2341) * _2078) + (((((_2241 * _2242) + _998) * cbLight._m0[_2191].x) * _2265) * _2088);
    float _2352 = (((((_2322 * _2244) + _1000) * cbLight._m0[_2276].y) * _2341) * _2078) + (((((_2241 * _2244) + _1000) * cbLight._m0[_2191].y) * _2265) * _2088);
    float _2353 = (((((_2322 * _2245) + _1001) * cbLight._m0[_2276].z) * _2341) * _2078) + (((((_2241 * _2245) + _1001) * cbLight._m0[_2191].z) * _2265) * _2088);
    float _2415;
    float _2417;
    float _2419;
    if (_2128)
    {
        _2415 = _2351;
        _2417 = _2352;
        _2419 = _2353;
    }
    else
    {
        uint _2421 = _2055 + 2u;
        uint _2425 = _2055 + 10u;
        float _2439 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2421].w)) * _852) * 0.949999988079071044921875);
        float _2440 = _2439 * _2439;
        float _2441 = cbLight._m0[_2421].x + _928;
        float _2442 = cbLight._m0[_2421].y + _929;
        float _2443 = cbLight._m0[_2421].z + _930;
        float _2447 = inversesqrt(dot(vec3(_2441, _2442, _2443), vec3(_2441, _2442, _2443)));
        float _2448 = _2447 * _2441;
        float _2449 = _2447 * _2442;
        float _2450 = _2447 * _2443;
        float _2451 = dot(vec3(_849, _850, _851), vec3(cbLight._m0[_2421].xyz));
        float _4434 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2454 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _2455 = dot(vec3(_849, _850, _851), vec3(_2448, _2449, _2450));
        float _4445 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
        float _2458 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _2459 = dot(vec3(cbLight._m0[_2421].xyz), vec3(_2448, _2449, _2450));
        float _4456 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        float _2463 = _2440 * _2440;
        float _2467 = ((_2458 * _2458) * (_2463 + (-1.0))) + 1.0;
        float _2474 = exp2(log2(1.0 - (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0)))) * 5.0);
        float _2481 = 1.0 - _2440;
        float _2491 = (0.5 / (((_2220 * ((_2454 * _2481) + _2440)) + 9.9999999392252902907785028219223e-09) + (((_2220 * _2481) + _2440) * _2454))) * _2454;
        float _4467 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2493 = (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_2463 / ((_2467 * _2467) * 3.141590118408203125));
        float _2494 = isnan(1.0) ? _2070 : (isnan(_2070) ? 1.0 : min(_2070, 1.0));
        _2415 = (((((_2474 * _2242) + _998) * cbLight._m0[_2425].x) * _2493) * _2494) + _2351;
        _2417 = (((((_2474 * _2244) + _1000) * cbLight._m0[_2425].y) * _2493) * _2494) + _2352;
        _2419 = (((((_2474 * _2245) + _1001) * cbLight._m0[_2425].z) * _2493) * _2494) + _2353;
    }
    float _2529;
    float _2531;
    float _2533;
    if (_2146)
    {
        _2529 = _2415;
        _2531 = _2417;
        _2533 = _2419;
    }
    else
    {
        uint _2540 = _2055 + 3u;
        uint _2544 = _2055 + 11u;
        float _2558 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2540].w)) * _852) * 0.949999988079071044921875);
        float _2559 = _2558 * _2558;
        float _2560 = cbLight._m0[_2540].x + _928;
        float _2561 = cbLight._m0[_2540].y + _929;
        float _2562 = cbLight._m0[_2540].z + _930;
        float _2566 = inversesqrt(dot(vec3(_2560, _2561, _2562), vec3(_2560, _2561, _2562)));
        float _2567 = _2566 * _2560;
        float _2568 = _2566 * _2561;
        float _2569 = _2566 * _2562;
        float _2570 = dot(vec3(_849, _850, _851), vec3(cbLight._m0[_2540].xyz));
        float _4483 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2573 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _2574 = dot(vec3(_849, _850, _851), vec3(_2567, _2568, _2569));
        float _4494 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
        float _2577 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
        float _2578 = dot(vec3(cbLight._m0[_2540].xyz), vec3(_2567, _2568, _2569));
        float _4505 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
        float _2582 = _2559 * _2559;
        float _2586 = ((_2577 * _2577) * (_2582 + (-1.0))) + 1.0;
        float _2593 = exp2(log2(1.0 - (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0)))) * 5.0);
        float _2600 = 1.0 - _2559;
        float _2610 = (0.5 / (((_2220 * ((_2573 * _2600) + _2559)) + 9.9999999392252902907785028219223e-09) + (((_2220 * _2600) + _2559) * _2573))) * _2573;
        float _4516 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
        float _2612 = (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * (_2582 / ((_2586 * _2586) * 3.141590118408203125));
        float _2613 = isnan(1.0) ? _2071 : (isnan(_2071) ? 1.0 : min(_2071, 1.0));
        _2529 = (((((_2593 * _2242) + _998) * cbLight._m0[_2544].x) * _2612) * _2613) + _2415;
        _2531 = (((((_2593 * _2244) + _1000) * cbLight._m0[_2544].y) * _2612) * _2613) + _2417;
        _2533 = (((((_2593 * _2245) + _1001) * cbLight._m0[_2544].z) * _2612) * _2613) + _2419;
    }
    float _2748;
    float _2750;
    float _2752;
    float _2754;
    float _2756;
    float _2758;
    if (_2053.y == 0u)
    {
        float _2688 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2689 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2688;
        float _2690 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2688;
        float _2691 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2688;
        uvec4 _2703 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2704 = _2703.x;
        uint _2715 = uint((float(_2703.y) * floor(float(uint(cbSceneParam._m0[85u].y * _937) / _2704))) + floor(float(uint(cbSceneParam._m0[85u].x * _936) / _2704)));
        float _2725 = (log2(_2691 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2726 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
        uint _2729 = uint(isnan(14.0) ? _2726 : (isnan(_2726) ? 14.0 : min(_2726, 14.0)));
        uvec4 _2734 = texelFetch(g_lightClusterGridBuffer, int(((_2729 << 2u) + (_2715 << 6u)) >> 2u));
        uint _2735 = _2734.x;
        uint _2736 = _2703.z;
        float _2836;
        float _2838;
        float _2840;
        float _2842;
        float _2844;
        float _2846;
        if (((((1u << ((_2736 >> 4u) & 15u)) + 4294967295u) & _2735) == 0u) || ((_2736 & 240u) == 0u))
        {
            _2836 = 0.0;
            _2838 = 0.0;
            _2840 = 0.0;
            _2842 = 0.0;
            _2844 = 0.0;
            _2846 = 0.0;
        }
        else
        {
            float _2837;
            float _2839;
            float _2841;
            float _2843;
            float _2845;
            float _2847;
            float _2981 = 0.0;
            float _2982 = 0.0;
            float _2983 = 0.0;
            float _2984 = 0.0;
            float _2985 = 0.0;
            float _2986 = 0.0;
            uint _2987 = 0u;
            uint _2996;
            bool _2997;
            for (;;)
            {
                _2996 = texelFetch(g_lightClassification, int((((_2729 << 5u) + (_2715 << 9u)) + (_2987 << 2u)) >> 2u)).x;
                _2997 = _2996 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2997)
                {
                    frontier_phi_61_pred = _2981;
                    frontier_phi_61_pred_1 = _2986;
                    frontier_phi_61_pred_2 = _2985;
                    frontier_phi_61_pred_3 = _2984;
                    frontier_phi_61_pred_4 = _2983;
                    frontier_phi_61_pred_5 = _2982;
                }
                else
                {
                    float _3105;
                    float _3106;
                    float _3107;
                    float _3108;
                    float _3109;
                    float _3110;
                    uint _3111;
                    _3105 = _2981;
                    _3106 = _2982;
                    _3107 = _2983;
                    _3108 = _2984;
                    _3109 = _2985;
                    _3110 = _2986;
                    _3111 = _2996;
                    float _3037;
                    float _3038;
                    float _3039;
                    float _3040;
                    float _3041;
                    float _3042;
                    for (;;)
                    {
                        uint _3115 = uint(findLSB(_3111)) + (_2987 << 5u);
                        uint _3112 = (_3111 + 4294967295u) & _3111;
                        uint _3117 = _3115 * 48u;
                        vec4 _3131 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3117)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 3u)).x));
                        uint _3137 = (_3115 * 48u) + 4u;
                        vec4 _3150 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3137)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 3u)).x));
                        uint _3156 = (_3115 * 48u) + 8u;
                        vec3 _3167 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3156)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 2u)).x));
                        float _3171 = _3131.x - _2689;
                        float _3172 = _3131.y - _2690;
                        float _3173 = _3131.z - _2691;
                        float _3174 = dot(vec3(_3171, _3172, _3173), vec3(_3171, _3172, _3173));
                        float _3177 = inversesqrt(_3174);
                        float _3178 = _3177 * _3171;
                        float _3179 = _3177 * _3172;
                        float _3180 = _3177 * _3173;
                        float _3181 = dot(vec3(_955, _958, _961), vec3(_3178, _3179, _3180));
                        float _3186 = 1.0 - (_3174 * _3131.w);
                        float _4542 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
                        float _3187 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
                        float _3188 = sqrt(_3174) * _3150.w;
                        float _3191 = 1.39999997615814208984375 / (_3188 + 1.39999997615814208984375);
                        float _3192 = _3191 * _3191;
                        float _3195 = ((1.0 - _3192) * _3181) + _3192;
                        float _3198 = _3188 * _3188;
                        float _3202 = ((isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0))) * _3187) / ((_3198 * 0.699999988079071044921875) + 1.0);
                        float _3206 = (-0.0) - _2689;
                        float _3207 = (-0.0) - _2690;
                        float _3208 = (-0.0) - _2691;
                        float _3212 = inversesqrt(dot(vec3(_3206, _3207, _3208), vec3(_3206, _3207, _3208)));
                        float _3213 = _3212 * _3206;
                        float _3214 = _3212 * _3207;
                        float _3215 = _3212 * _3208;
                        float _3223 = exp2(log2(1.0 / ((_3198 * 3.5) + 5.0)) * 0.25);
                        float _3224 = 1.0 - _1030;
                        float _3231 = sqrt(1.0 - ((1.0 - (_3224 * _3224)) * (1.0 - (_3223 * _3223))));
                        float _3232 = _3231 * _3231;
                        float _3233 = _3232 * _3232;
                        float _3234 = _3213 + _3178;
                        float _3235 = _3214 + _3179;
                        float _3236 = _3215 + _3180;
                        float _3240 = inversesqrt(dot(vec3(_3234, _3235, _3236), vec3(_3234, _3235, _3236)));
                        float _3244 = dot(vec3(_955, _958, _961), vec3(_3213, _3214, _3215));
                        float _4558 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                        float _3247 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                        float _3248 = dot(vec3(_955, _958, _961), vec3(_3240 * _3234, _3240 * _3235, _3240 * _3236));
                        float _4569 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                        float _3251 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
                        float _3255 = ((_3251 * _3251) * (_3233 + (-1.0))) + 1.0;
                        float _3256 = _3191 * _3232;
                        float _3257 = _3256 * _3256;
                        float _3260 = ((1.0 - _3257) * _3181) + _3257;
                        float _4580 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                        float _3261 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                        float _3262 = 1.0 - _3232;
                        float _3272 = (0.5 / (((_3261 * ((_3247 * _3262) + _3232)) + 9.9999999392252902907785028219223e-09) + (((_3261 * _3262) + _3232) * _3247))) * _3261;
                        float _4591 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                        float _3283 = (((_3233 * 3.1415927410125732421875) * (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0)))) / ((_3255 * _3255) * ((_3198 * 2.1991131305694580078125) + 3.141590118408203125))) * _3187;
                        _3040 = (_3202 * _3150.x) + _3108;
                        _3041 = (_3202 * _3150.y) + _3109;
                        _3042 = (_3202 * _3150.z) + _3110;
                        _3037 = (_3283 * _3167.x) + _3105;
                        _3038 = (_3283 * _3167.y) + _3106;
                        _3039 = (_3283 * _3167.z) + _3107;
                        if (_3112 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3105 = _3037;
                            _3106 = _3038;
                            _3107 = _3039;
                            _3108 = _3040;
                            _3109 = _3041;
                            _3110 = _3042;
                            _3111 = _3112;
                        }
                    }
                    frontier_phi_61_pred = _3037;
                    frontier_phi_61_pred_1 = _3042;
                    frontier_phi_61_pred_2 = _3041;
                    frontier_phi_61_pred_3 = _3040;
                    frontier_phi_61_pred_4 = _3039;
                    frontier_phi_61_pred_5 = _3038;
                }
                _2837 = frontier_phi_61_pred;
                _2847 = frontier_phi_61_pred_1;
                _2845 = frontier_phi_61_pred_2;
                _2843 = frontier_phi_61_pred_3;
                _2841 = frontier_phi_61_pred_4;
                _2839 = frontier_phi_61_pred_5;
                uint _2988 = _2987 + 1u;
                if (_2988 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2981 = _2837;
                    _2982 = _2839;
                    _2983 = _2841;
                    _2984 = _2843;
                    _2985 = _2845;
                    _2986 = _2847;
                    _2987 = _2988;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2836 = _2837;
            _2838 = _2839;
            _2840 = _2841;
            _2842 = _2843;
            _2844 = _2845;
            _2846 = _2847;
        }
        uvec4 _2850 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2851 = _2850.z;
        uint _2853 = (_2851 >> 8u) & 15u;
        float _2949;
        float _2951;
        float _2953;
        float _2955;
        float _2957;
        float _2959;
        if (((4294967295u << _2853) & _2735) == 0u)
        {
            _2949 = _2836;
            _2951 = _2838;
            _2953 = _2840;
            _2955 = _2842;
            _2957 = _2844;
            _2959 = _2846;
        }
        else
        {
            float _2974 = inversesqrt(dot(vec3(_2689, _2690, _2691), vec3(_2689, _2690, _2691)));
            float _2975 = _2974 * _2689;
            float _2976 = _2974 * _2690;
            float _2977 = _2974 * _2691;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2853 < ((_2851 >> 12u) & 15u))
            {
                float _2950;
                float _2952;
                float _2954;
                float _2956;
                float _2958;
                float _2960;
                float _3088 = _2836;
                float _3089 = _2838;
                float _3090 = _2840;
                float _3091 = _2842;
                float _3092 = _2844;
                float _3093 = _2846;
                uint _3094 = _2853;
                uint _3103;
                bool _3104;
                for (;;)
                {
                    _3103 = texelFetch(g_lightClassification, int((((_2729 << 5u) + (_2715 << 9u)) + (_3094 << 2u)) >> 2u)).x;
                    _3104 = _3103 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3104)
                    {
                        frontier_phi_67_pred = _3091;
                        frontier_phi_67_pred_1 = _3092;
                        frontier_phi_67_pred_2 = _3093;
                        frontier_phi_67_pred_3 = _3090;
                        frontier_phi_67_pred_4 = _3089;
                        frontier_phi_67_pred_5 = _3088;
                    }
                    else
                    {
                        float _3288;
                        float _3289;
                        float _3290;
                        float _3291;
                        float _3292;
                        float _3293;
                        float _3581;
                        float _3582;
                        float _3583;
                        float _3584;
                        float _3585;
                        float _3586;
                        float _3301 = _3088;
                        float _3302 = _3089;
                        float _3303 = _3090;
                        float _3304 = _3091;
                        float _3305 = _3092;
                        float _3306 = _3093;
                        uint _3307 = _3103;
                        uint _3308;
                        vec4 _3333;
                        float _3334;
                        vec4 _3349;
                        vec3 _3361;
                        vec4 _3376;
                        vec4 _3391;
                        float _3437;
                        bool _3438;
                        for (;;)
                        {
                            uint _3318 = ((_3094 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3307));
                            _3308 = (_3307 + 4294967295u) & _3307;
                            uint _3320 = _3318 * 40u;
                            _3333 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3320)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 3u)).x));
                            _3334 = _3333.w;
                            uint _3336 = (_3318 * 40u) + 4u;
                            _3349 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3336)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 3u)).x));
                            uint _3351 = (_3318 * 40u) + 8u;
                            _3361 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3351)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 2u)).x));
                            uint _3363 = (_3318 * 40u) + 16u;
                            _3376 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3363)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 3u)).x));
                            uint _3378 = (_3318 * 40u) + 20u;
                            _3391 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3378)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 3u)).x));
                            uint _3393 = (_3318 * 40u) + 24u;
                            vec4 _3406 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3393)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 3u)).x));
                            uint _3412 = (_3318 * 40u) + 28u;
                            vec4 _3425 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 3u)).x));
                            _3437 = fma(_2691, _3425.z, fma(_2690, _3425.y, _3425.x * _2689)) + _3425.w;
                            _3438 = !((fma(_2691, _3406.z, fma(_2690, _3406.y, _3406.x * _2689)) + _3406.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3438)
                            {
                                float _3465 = _3333.x - _2689;
                                float _3466 = _3333.y - _2690;
                                float _3467 = _3333.z - _2691;
                                float _3468 = dot(vec3(_3465, _3466, _3467), vec3(_3465, _3466, _3467));
                                float _3471 = inversesqrt(_3468);
                                float _3472 = _3471 * _3465;
                                float _3473 = _3471 * _3466;
                                float _3474 = _3471 * _3467;
                                float _3478 = 1.0 - (_3468 / (_3334 * _3334));
                                float _4602 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                                float _3479 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
                                float _3483 = sqrt(_3468) * _3349.w;
                                float _3485 = 1.39999997615814208984375 / (_3483 + 1.39999997615814208984375);
                                float _3486 = _3485 * _3485;
                                float _3489 = ((1.0 - _3486) * dot(vec3(_3472, _3473, _3474), vec3(_955, _958, _961))) + _3486;
                                float _3492 = _3483 * _3483;
                                float _3496 = (fma(_2691, _3376.z, fma(_2690, _3376.y, _3376.x * _2689)) + _3376.w) / _3437;
                                float _3497 = (fma(_2691, _3391.z, fma(_2690, _3391.y, _3391.x * _2689)) + _3391.w) / _3437;
                                float _3501 = 1.0 - dot(vec2(_3496, _3497), vec2(_3496, _3497));
                                float _4618 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                                float _3502 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
                                float _3503 = _3502 * (((isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0))) * _3479) / ((_3492 * 0.699999988079071044921875) + 1.0));
                                float _3515 = exp2(log2(1.0 / ((_3492 * 3.5) + 5.0)) * 0.25);
                                float _3516 = 1.0 - _1030;
                                float _3523 = sqrt(1.0 - ((1.0 - (_3516 * _3516)) * (1.0 - (_3515 * _3515))));
                                float _3524 = _3523 * _3523;
                                float _3525 = _3524 * _3524;
                                float _3526 = _3472 - _2975;
                                float _3527 = _3473 - _2976;
                                float _3528 = _3474 - _2977;
                                float _3532 = inversesqrt(dot(vec3(_3526, _3527, _3528), vec3(_3526, _3527, _3528)));
                                float _3536 = dot(vec3(_955, _958, _961), vec3((-0.0) - _2975, (-0.0) - _2976, (-0.0) - _2977));
                                float _4629 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                                float _3539 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
                                float _3540 = dot(vec3(_955, _958, _961), vec3(_3532 * _3526, _3532 * _3527, _3532 * _3528));
                                float _4640 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                                float _3543 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
                                float _3547 = ((_3543 * _3543) * (_3525 + (-1.0))) + 1.0;
                                float _3548 = _3485 * _3524;
                                float _3549 = _3548 * _3548;
                                float _3555 = ((1.0 - _3549) * dot(vec3(_955, _958, _961), vec3(_3472, _3473, _3474))) + _3549;
                                float _4651 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                                float _3556 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
                                float _3557 = 1.0 - _3524;
                                float _3567 = (0.5 / (((_3556 * ((_3539 * _3557) + _3524)) + 9.9999999392252902907785028219223e-09) + (((_3556 * _3557) + _3524) * _3539))) * _3556;
                                float _4662 = isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0));
                                float _3577 = (_3502 * _3479) * (((_3525 * 3.1415927410125732421875) * (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0)))) / ((_3547 * _3547) * ((_3492 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3577 * _3361.x;
                                frontier_phi_73_pred_1 = _3577 * _3361.y;
                                frontier_phi_73_pred_2 = _3503 * _3349.z;
                                frontier_phi_73_pred_3 = _3503 * _3349.y;
                                frontier_phi_73_pred_4 = _3503 * _3349.x;
                                frontier_phi_73_pred_5 = _3577 * _3361.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3581 = frontier_phi_73_pred;
                            _3582 = frontier_phi_73_pred_1;
                            _3586 = frontier_phi_73_pred_2;
                            _3585 = frontier_phi_73_pred_3;
                            _3584 = frontier_phi_73_pred_4;
                            _3583 = frontier_phi_73_pred_5;
                            _3291 = _3584 + _3304;
                            _3292 = _3585 + _3305;
                            _3293 = _3586 + _3306;
                            _3288 = _3581 + _3301;
                            _3289 = _3582 + _3302;
                            _3290 = _3583 + _3303;
                            if (_3308 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3301 = _3288;
                                _3302 = _3289;
                                _3303 = _3290;
                                _3304 = _3291;
                                _3305 = _3292;
                                _3306 = _3293;
                                _3307 = _3308;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3291;
                        frontier_phi_67_pred_1 = _3292;
                        frontier_phi_67_pred_2 = _3293;
                        frontier_phi_67_pred_3 = _3290;
                        frontier_phi_67_pred_4 = _3289;
                        frontier_phi_67_pred_5 = _3288;
                    }
                    _2956 = frontier_phi_67_pred;
                    _2958 = frontier_phi_67_pred_1;
                    _2960 = frontier_phi_67_pred_2;
                    _2954 = frontier_phi_67_pred_3;
                    _2952 = frontier_phi_67_pred_4;
                    _2950 = frontier_phi_67_pred_5;
                    uint _3095 = _3094 + 1u;
                    if (_3095 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3088 = _2950;
                        _3089 = _2952;
                        _3090 = _2954;
                        _3091 = _2956;
                        _3092 = _2958;
                        _3093 = _2960;
                        _3094 = _3095;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2958;
                frontier_phi_55_56_ladder_1 = _2960;
                frontier_phi_55_56_ladder_2 = _2956;
                frontier_phi_55_56_ladder_3 = _2954;
                frontier_phi_55_56_ladder_4 = _2952;
                frontier_phi_55_56_ladder_5 = _2950;
            }
            else
            {
                frontier_phi_55_56_ladder = _2844;
                frontier_phi_55_56_ladder_1 = _2846;
                frontier_phi_55_56_ladder_2 = _2842;
                frontier_phi_55_56_ladder_3 = _2840;
                frontier_phi_55_56_ladder_4 = _2838;
                frontier_phi_55_56_ladder_5 = _2836;
            }
            _2949 = frontier_phi_55_56_ladder_5;
            _2951 = frontier_phi_55_56_ladder_4;
            _2953 = frontier_phi_55_56_ladder_3;
            _2955 = frontier_phi_55_56_ladder_2;
            _2957 = frontier_phi_55_56_ladder;
            _2959 = frontier_phi_55_56_ladder_1;
        }
        float _2964 = isnan(1.0) ? _1014 : (isnan(_1014) ? 1.0 : min(_1014, 1.0));
        _2748 = (_2964 * _2955) + _2184;
        _2750 = (_2964 * _2957) + _2186;
        _2752 = (_2964 * _2959) + _2188;
        _2754 = ((_2949 * _998) * _2964) + _2529;
        _2756 = ((_2951 * _1000) * _2964) + _2531;
        _2758 = ((_2953 * _1001) * _2964) + _2533;
    }
    else
    {
        _2748 = _2184;
        _2750 = _2186;
        _2752 = _2188;
        _2754 = _2529;
        _2756 = _2531;
        _2758 = _2533;
    }
    float _4678 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _4689 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _4700 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    uint _2778 = _281 + 6u;
    float _2786 = _936 / cbSceneParam._m0[86u].x;
    float _2787 = _937 / cbSceneParam._m0[86u].y;
    vec4 _2801 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2786, _2787, (log2((isnan(cbSceneParam._m0[77u].w) ? _871 : (isnan(_871) ? cbSceneParam._m0[77u].w : min(_871, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2803 = _2801.x;
    float _2804 = _2801.y;
    float _2805 = _2801.z;
    float _2806 = _2801.w;
    float _2899;
    float _2901;
    float _2903;
    float _2905;
    if (_871 > cbSceneParam._m0[78u].w)
    {
        float _2861 = isnan(_871) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _871 : min(cbSceneParam._m0[80u].w, _871));
        float _2862 = _2861 / _871;
        float _2873 = _2862 * _921;
        float _2874 = _922 * _2862;
        float _2875 = (-0.0) - _2874;
        float _2877 = _2862 * _923;
        float _2879 = (cbSceneParam._m0[77u].w * _2875) / _2861;
        float _2880 = _2879 + cbSceneParam._m0[79u].w;
        float _2881 = cbSceneParam._m0[79u].w - _2874;
        float _2887 = sqrt(((_2873 * _2873) + (_2874 * _2874)) + (_2877 * _2877));
        float _2890 = (1.0 - (cbSceneParam._m0[77u].w / _2861)) * _2887;
        float _2895 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2897 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3050;
        if (abs((_2875 - _2879) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3050 = ((((_2880 > 0.0) ? exp2(_2895 * _2880) : (2.0 - exp2(_2897 * _2880))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2890;
        }
        else
        {
            float _3010 = 1.0 / cbSceneParam._m0[80u].x;
            float _3011 = isnan(_2881) ? _2880 : (isnan(_2880) ? _2881 : max(_2880, _2881));
            float _3012 = isnan(_2881) ? _2880 : (isnan(_2880) ? _2881 : min(_2880, _2881));
            float _3021 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : min(_3011, 0.0));
            float _3022 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : min(_3012, 0.0));
            _3050 = ((abs(_2887 / _2875) * cbSceneParam._m0[80u].y) * ((((_3021 - _3022) * 2.0) - ((exp2(_2895 * (isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0)))) - exp2(_2895 * (isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0))))) * _3010)) - ((exp2(_2897 * _3021) - exp2(_2897 * _3022)) * _3010))) + (_2890 * cbSceneParam._m0[80u].z);
        }
        vec4 _3052 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2786, _2787, 1.0), 0.0);
        float _3061 = exp2((_3050 * (-1.44269502162933349609375)) * (1.0 - _3052.w));
        float _3062 = log2(_3061);
        float _3078 = log2(_2806);
        _2899 = (exp2(_3078 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3062 * cbSceneParam._m0[78u].x)) * _3052.x) / cbSceneParam._m0[78u].x)) + _2803;
        _2901 = (exp2(_3078 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3062 * cbSceneParam._m0[78u].y)) * _3052.y) / cbSceneParam._m0[78u].y)) + _2804;
        _2903 = (exp2(_3078 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3062 * cbSceneParam._m0[78u].z)) * _3052.z) / cbSceneParam._m0[78u].z)) + _2805;
        _2905 = _3061 * _2806;
    }
    else
    {
        _2899 = _2803;
        _2901 = _2804;
        _2903 = _2805;
        _2905 = _2806;
    }
    float _2917 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2918 = _2917 == 3.0;
    float _2919 = log2(_2905);
    float _2926 = exp2(_2919 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0))) * (_2748 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _1014))) + ((_2754 + ((isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0))) * _1821)) * cbPerFrame._m0[3u].x));
    float _2927 = exp2(_2919 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0))) * (_2750 + ((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _1014))) + ((_2756 + ((isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0))) * _1821)) * cbPerFrame._m0[3u].x));
    float _2928 = exp2(_2919 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0))) * (_2752 + ((isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))) * _1014))) + ((_2758 + ((isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0))) * _1821)) * cbPerFrame._m0[3u].x));
    float _2937 = (_2917 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2937 * (_2918 ? _2926 : (_2926 + (cbSceneParam._m0[72u].w * _2899)));
    SV_Target.y = _2937 * (_2918 ? _2927 : (_2927 + (cbSceneParam._m0[72u].w * _2901)));
    SV_Target.z = _2937 * (_2918 ? _2928 : (_2928 + (cbSceneParam._m0[72u].w * _2903)));
    SV_Target.w = cbInstanceData._m0[_2778].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2778].w;
}


