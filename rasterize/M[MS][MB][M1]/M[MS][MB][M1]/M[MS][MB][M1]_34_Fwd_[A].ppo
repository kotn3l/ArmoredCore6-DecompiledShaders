#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1235;
float _3617;
float _3618;
float _3619;
float _3620;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _226 = _225 * _217;
    float _227 = _225 * _218;
    float _228 = _225 * _219;
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = _232 * NORMAL.x;
    float _234 = _232 * NORMAL.y;
    float _235 = _232 * NORMAL.z;
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _240 = _239 * TANGENT.x;
    float _241 = _239 * TANGENT.y;
    float _242 = _239 * TANGENT.z;
    uint _245 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _245 + 1u;
    uint _254 = _245 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_245].x * cbInstanceData._m0[_245].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _284 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _290 = _284.x * cbMtdParam._m0[9u].x;
    float _291 = _284.y * cbMtdParam._m0[9u].y;
    float _292 = _284.z * cbMtdParam._m0[9u].z;
    vec4 _310 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _264) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _265) + cbTextureTilingScale._m0[20u].w));
    vec4 _336 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _340 = _336.z;
    float _344 = (_336.x * 2.0) + (-1.0);
    float _345 = (_336.y * 2.0) + (-1.0);
    float _346 = dot(vec2(_344, _345), vec2(_344, _345));
    float _3629 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _352 = sqrt(1.0 - (isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))));
    float _357 = _344 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_310.x * 2.0) + (-1.0)));
    float _358 = _345 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_310.y * 2.0) + (-1.0)));
    float _361 = fma(_352, _233, fma(_358, _240, _357 * _226));
    float _364 = fma(_352, _234, fma(_358, _241, _357 * _227));
    float _367 = fma(_352, _235, fma(_358, _242, _357 * _228));
    float _371 = inversesqrt(dot(vec3(_361, _364, _367), vec3(_361, _364, _367)));
    vec4 _407 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _409 = _407.x;
    float _410 = 1.0 - _409;
    float _417 = ((_409 - _410) * cbMtdParam._m0[24u].z) + _410;
    float _419 = (cbMtdParam._m0[19u].x + dot(vec4(_371 * _361, _371 * _364, _371 * _367, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_417 * cbMtdParam._m0[21u].z);
    float _3640 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _420 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
    float _422 = (-0.0) - cbMtdParam._m0[24u].x;
    float _424 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _425 = isnan(1.0) ? _424 : (isnan(_424) ? 1.0 : min(_424, 1.0));
    float _432 = _420 - ((_420 * TEXCOORD_8.x) * _425);
    float _433 = _420 - ((_420 * TEXCOORD_8.y) * _425);
    float _434 = _420 - ((_420 * TEXCOORD_8.z) * _425);
    float _441 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _445 = ((isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : min(_441, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _453 = (_445 - (((_417 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _445))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3671 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _454 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
    float _458 = ((_432 * (cbMtdParam._m0[17u].x - _290)) * _454) + _290;
    float _459 = ((_433 * (cbMtdParam._m0[17u].y - _291)) * _454) + _291;
    float _460 = ((_434 * (cbMtdParam._m0[17u].z - _292)) * _454) + _292;
    vec4 _472 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _264) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _265) + cbTextureTilingScale._m0[19u].w));
    float _474 = _472.x;
    float _475 = 1.0 - _474;
    float _504 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_474 - _475) * cbMtdParam._m0[24u].w) + _475) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3682 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _505 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
    float _513 = ((((cbMtdParam._m0[10u].x - _458) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _505) + _458;
    float _514 = ((((cbMtdParam._m0[10u].y - _459) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _505) + _459;
    float _515 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _460)) * _505) + _460;
    vec4 _528 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _530 = _528.x;
    float _533 = _530 - ((_530 * _432) * _454);
    float _535 = _533 - (_533 * _505);
    float _540 = (((_310.z - _340) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _340;
    vec4 _554 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _561 = (_554.x * 2.0) + (-1.0);
    float _562 = (_554.y * 2.0) + (-1.0);
    float _563 = dot(vec2(_561, _562), vec2(_561, _562));
    float _3693 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _572 = (((_554.z - _540) * _432) * _454) + _540;
    float _575 = ((cbMtdParam._m0[23u].y - _572) * _505) + _572;
    vec4 _594 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _264) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _265) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _600 = (_594.x * 2.0) + (-1.0);
    float _601 = (_594.y * 2.0) + (-1.0);
    float _602 = dot(vec2(_600, _601), vec2(_600, _601));
    float _3704 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _622 = (((cbMtdParam._m0[21u].x * _357) + ((_561 - _357) * _432)) * _454) + _357;
    float _623 = (((cbMtdParam._m0[21u].x * _358) + ((_562 - _358) * _433)) * _454) + _358;
    float _624 = (((sqrt(1.0 - (isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0)))) - _352) * _434) * _454) + _352;
    float _635 = (((_600 - _622) + (_622 * cbMtdParam._m0[22u].z)) * _505) + _622;
    float _636 = (((_601 - _623) + (_623 * cbMtdParam._m0[22u].z)) * _505) + _623;
    float _637 = ((sqrt(1.0 - (isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0)))) - _624) * _505) + _624;
    float _639 = cbMtdParam._m0[22u].x + _336.w;
    float _642 = fma(_637, _233, fma(_636, _240, _635 * _226));
    float _645 = fma(_637, _234, fma(_636, _241, _635 * _227));
    float _648 = fma(_637, _235, fma(_636, _242, _635 * _228));
    float _652 = inversesqrt(dot(vec3(_642, _645, _648), vec3(_642, _645, _648)));
    float _653 = _652 * _642;
    float _654 = _652 * _645;
    float _655 = _652 * _648;
    float _3715 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _656 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
    float _3726 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _3737 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _3748 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _3759 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _3770 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _661 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _675 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _715 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _725 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _715);
    float _726 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _715);
    float _727 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _715);
    float _731 = inversesqrt(dot(vec3(_725, _726, _727), vec3(_725, _726, _727)));
    float _732 = _725 * _731;
    float _733 = _726 * _731;
    float _734 = _727 * _731;
    vec4 _739 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _741 = _739.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _916 = sqrt(((_725 * _725) + (_726 * _726)) + (_727 * _727));
        float _922 = (cbMatDynParam._m0[5u].x * _916) + cbMatDynParam._m0[5u].y;
        float _3781 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _923 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _927 = (cbMatDynParam._m0[5u].z * _916) + cbMatDynParam._m0[5u].w;
        float _3792 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) - _923)) + _923) < ((_741 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _753 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _754 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _774 = fma(_655, cbSceneParam._m0[5u].z, fma(_654, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _653));
    float _777 = fma(_655, cbSceneParam._m0[6u].z, fma(_654, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _653));
    float _780 = fma(_655, cbSceneParam._m0[7u].z, fma(_654, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _653));
    uint _793 = _245 + 9u;
    uint _794 = _793 + uint(cbMatDynParam._m0[0u].w);
    float _800 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0)))) * cbInstanceData._m0[_794].x;
    float _801 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0)))) * cbInstanceData._m0[_794].y;
    float _802 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0)))) * cbInstanceData._m0[_794].z;
    float _3803 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _803 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _3814 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _804 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _3825 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _805 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    float _806 = 1.0 - _661;
    float _807 = _803 * _806;
    float _808 = _804 * _806;
    float _809 = _805 * _806;
    float _814 = (_803 + (-0.039999999105930328369140625)) * _661;
    float _815 = (_804 + (-0.039999999105930328369140625)) * _661;
    float _816 = (_805 + (-0.039999999105930328369140625)) * _661;
    float _817 = _814 + 0.039999999105930328369140625;
    float _819 = _815 + 0.039999999105930328369140625;
    float _820 = _816 + 0.039999999105930328369140625;
    vec4 _829 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _753, cbSceneParam._m0[86u].y * _754));
    float _833 = ((isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))) * TEXCOORD_5.w) * _829.x;
    float _834 = dot(vec3(_653, _654, _655), vec3(_732, _733, _734));
    float _837 = _834 * 2.0;
    float _841 = (_837 * _653) - _732;
    float _842 = (_837 * _654) - _733;
    float _843 = (_837 * _655) - _734;
    float _847 = abs(dot(vec3(_732, _733, _734), vec3(_653, _654, _655)));
    float _3836 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _849 = sqrt(_656);
    float _862 = exp2((_849 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_849 * 3.0));
    float _868 = (1.0 - _862) * ((_849 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _869 = _862 * _849;
    float _897 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _901 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _905 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1234;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _959 = fma(_905, cbModelParam._m0[26u].z, fma(_901, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _897));
        float _963 = fma(_905, cbModelParam._m0[27u].z, fma(_901, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _897));
        float _967 = fma(_905, cbModelParam._m0[28u].z, fma(_901, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _897));
        float _992 = _897 + _653;
        float _993 = _901 + _654;
        float _994 = _905 + _655;
        float _1004 = fma(_994, cbModelParam._m0[26u].z, fma(_993, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _992)) - _959;
        float _1005 = fma(_994, cbModelParam._m0[27u].z, fma(_993, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _992)) - _963;
        float _1006 = fma(_994, cbModelParam._m0[28u].z, fma(_993, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _992)) - _967;
        float _1010 = inversesqrt(dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006)));
        float _1023 = ((_1010 * _1004) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_959 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1024 = ((_1010 * _1005) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_963 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1025 = ((_1010 * _1006) / cbModelParam._m0[34u].z) + ((((((_967 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        float _1062 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1028.x + (-0.5));
        float _1064 = _1062 * (_1028.y + (-0.5));
        float _1065 = _1062 * (_1028.z + (-0.5));
        float _1072 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1035.x + (-0.5));
        float _1074 = _1072 * (_1035.y + (-0.5));
        float _1075 = _1072 * (_1035.z + (-0.5));
        float _1082 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1042.x + (-0.5));
        float _1084 = _1082 * (_1042.y + (-0.5));
        float _1085 = _1082 * (_1042.z + (-0.5));
        float _1092 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1093 = _1092 * (_1049.x + (-0.5));
        float _1094 = _1092 * (_1049.y + (-0.5));
        float _1095 = _1092 * (_1049.z + (-0.5));
        float _1096 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1097 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1098 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1099 = _1063 * 0.5;
        float _1100 = _1073 * 0.5;
        float _1101 = _1083 * 0.5;
        float _1102 = dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101));
        float _1107 = (_1102 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1102);
        float _1116 = (dot(vec3(_653, _654, _655), vec3(_1107 * _1099, _1107 * _1100, _1107 * _1101)) + 1.0) * 0.5;
        float _3862 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1126 = sqrt(((_1100 * _1100) + (_1099 * _1099)) + (_1101 * _1101)) / (_1096 + 9.9999997473787516355514526367188e-06);
        float _3873 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1128 = _1127 * 2.0;
        float _1132 = (1.0 - _1127) / (_1127 + 1.0);
        float _3884 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1142 = ((((1.0 - _1133) * (_1128 + 2.0)) * exp2(log2(isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_1128 + 1.0))) + _1133) * _1096;
        float _1143 = _1064 * 0.5;
        float _1144 = _1074 * 0.5;
        float _1145 = _1084 * 0.5;
        float _1146 = dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145));
        float _1151 = (_1146 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1146);
        float _1159 = (dot(vec3(_653, _654, _655), vec3(_1151 * _1143, _1151 * _1144, _1151 * _1145)) + 1.0) * 0.5;
        float _3895 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1168 = sqrt(((_1144 * _1144) + (_1143 * _1143)) + (_1145 * _1145)) / (_1097 + 9.9999997473787516355514526367188e-06);
        float _3906 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1170 = _1169 * 2.0;
        float _1174 = (1.0 - _1169) / (_1169 + 1.0);
        float _3917 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1184 = ((((1.0 - _1175) * (_1170 + 2.0)) * exp2(log2(isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * (_1170 + 1.0))) + _1175) * _1097;
        float _1185 = _1065 * 0.5;
        float _1186 = _1075 * 0.5;
        float _1187 = _1085 * 0.5;
        float _1188 = dot(vec3(_1185, _1186, _1187), vec3(_1185, _1186, _1187));
        float _1193 = (_1188 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1188);
        float _1201 = (dot(vec3(_653, _654, _655), vec3(_1193 * _1185, _1193 * _1186, _1193 * _1187)) + 1.0) * 0.5;
        float _3928 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1210 = sqrt(((_1186 * _1186) + (_1185 * _1185)) + (_1187 * _1187)) / (_1098 + 9.9999997473787516355514526367188e-06);
        float _3939 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1212 = _1211 * 2.0;
        float _1216 = (1.0 - _1211) / (_1211 + 1.0);
        float _3950 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _1226 = ((((1.0 - _1217) * (_1212 + 2.0)) * exp2(log2(isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * (_1212 + 1.0))) + _1217) * _1098;
        _1234 = _1065;
        _1236 = _1064;
        _1237 = _1063;
        _1238 = _1075;
        _1239 = _1074;
        _1240 = _1073;
        _1241 = _1085;
        _1242 = _1084;
        _1243 = _1083;
        _1244 = _1098;
        _1245 = _1097;
        _1246 = _1096;
        _1247 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0)));
        _1248 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)));
        _1249 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)));
    }
    else
    {
        _1234 = _1235;
        _1236 = _1235;
        _1237 = _1235;
        _1238 = _1235;
        _1239 = _1235;
        _1240 = _1235;
        _1241 = _1235;
        _1242 = _1235;
        _1243 = _1235;
        _1244 = _1235;
        _1245 = _1235;
        _1246 = _1235;
        _1247 = 0.0;
        _1248 = 0.0;
        _1249 = 0.0;
    }
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1277 = fma(_905, cbModelParam._m0[30u].z, fma(_901, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _897));
        float _1281 = fma(_905, cbModelParam._m0[31u].z, fma(_901, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _897));
        float _1285 = fma(_905, cbModelParam._m0[32u].z, fma(_901, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _897));
        float _1308 = _897 + _653;
        float _1309 = _901 + _654;
        float _1310 = _905 + _655;
        float _1320 = fma(_1310, cbModelParam._m0[30u].z, fma(_1309, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1308)) - _1277;
        float _1321 = fma(_1310, cbModelParam._m0[31u].z, fma(_1309, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1308)) - _1281;
        float _1322 = fma(_1310, cbModelParam._m0[32u].z, fma(_1309, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1308)) - _1285;
        float _1326 = inversesqrt(dot(vec3(_1320, _1321, _1322), vec3(_1320, _1321, _1322)));
        float _1339 = ((_1326 * _1320) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1277 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1340 = ((_1326 * _1321) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1281 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1341 = ((_1326 * _1322) / cbModelParam._m0[35u].z) + ((((((_1285 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1339, _1340, _1341), 0.0);
        vec4 _1350 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1339, _1340, _1341), 0.0);
        vec4 _1357 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1339, _1340, _1341), 0.0);
        vec4 _1364 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1339, _1340, _1341), 0.0);
        float _1376 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1377 = _1376 * (_1343.x + (-0.5));
        float _1378 = _1376 * (_1343.y + (-0.5));
        float _1379 = _1376 * (_1343.z + (-0.5));
        float _1386 = exp2((_1350.w + (-0.5)) * 20.0) * 2.0;
        float _1387 = _1386 * (_1350.x + (-0.5));
        float _1388 = _1386 * (_1350.y + (-0.5));
        float _1389 = _1386 * (_1350.z + (-0.5));
        float _1396 = exp2((_1357.w + (-0.5)) * 20.0) * 2.0;
        float _1397 = _1396 * (_1357.x + (-0.5));
        float _1398 = _1396 * (_1357.y + (-0.5));
        float _1399 = _1396 * (_1357.z + (-0.5));
        float _1406 = exp2((_1364.w + (-0.5)) * 20.0) * 2.0;
        float _1407 = _1406 * (_1364.x + (-0.5));
        float _1408 = _1406 * (_1364.y + (-0.5));
        float _1409 = _1406 * (_1364.z + (-0.5));
        float _1410 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1411 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1412 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1413 = _1377 * 0.5;
        float _1414 = _1387 * 0.5;
        float _1415 = _1397 * 0.5;
        float _1416 = dot(vec3(_1413, _1414, _1415), vec3(_1413, _1414, _1415));
        float _1421 = (_1416 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1416);
        float _1429 = (dot(vec3(_653, _654, _655), vec3(_1421 * _1413, _1421 * _1414, _1421 * _1415)) + 1.0) * 0.5;
        float _3991 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1438 = sqrt(((_1414 * _1414) + (_1413 * _1413)) + (_1415 * _1415)) / (_1410 + 9.9999997473787516355514526367188e-06);
        float _4002 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1440 = _1439 * 2.0;
        float _1444 = (1.0 - _1439) / (_1439 + 1.0);
        float _4013 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1454 = ((((1.0 - _1445) * (_1440 + 2.0)) * exp2(log2(isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_1440 + 1.0))) + _1445) * _1410;
        float _1455 = _1378 * 0.5;
        float _1456 = _1388 * 0.5;
        float _1457 = _1398 * 0.5;
        float _1458 = dot(vec3(_1455, _1456, _1457), vec3(_1455, _1456, _1457));
        float _1463 = (_1458 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1458);
        float _1471 = (dot(vec3(_653, _654, _655), vec3(_1463 * _1455, _1463 * _1456, _1463 * _1457)) + 1.0) * 0.5;
        float _4024 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1480 = sqrt(((_1456 * _1456) + (_1455 * _1455)) + (_1457 * _1457)) / (_1411 + 9.9999997473787516355514526367188e-06);
        float _4035 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1482 = _1481 * 2.0;
        float _1486 = (1.0 - _1481) / (_1481 + 1.0);
        float _4046 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1496 = ((((1.0 - _1487) * (_1482 + 2.0)) * exp2(log2(isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_1482 + 1.0))) + _1487) * _1411;
        float _1497 = _1379 * 0.5;
        float _1498 = _1389 * 0.5;
        float _1499 = _1399 * 0.5;
        float _1500 = dot(vec3(_1497, _1498, _1499), vec3(_1497, _1498, _1499));
        float _1505 = (_1500 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1500);
        float _1513 = (dot(vec3(_653, _654, _655), vec3(_1505 * _1497, _1505 * _1498, _1505 * _1499)) + 1.0) * 0.5;
        float _4057 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1522 = sqrt(((_1498 * _1498) + (_1497 * _1497)) + (_1499 * _1499)) / (_1412 + 9.9999997473787516355514526367188e-06);
        float _4068 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1524 = _1523 * 2.0;
        float _1528 = (1.0 - _1523) / (_1523 + 1.0);
        float _4079 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _1538 = ((((1.0 - _1529) * (_1524 + 2.0)) * exp2(log2(isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * (_1524 + 1.0))) + _1529) * _1412;
        _1546 = _1379;
        _1547 = _1378;
        _1548 = _1377;
        _1549 = _1389;
        _1550 = _1388;
        _1551 = _1387;
        _1552 = _1399;
        _1553 = _1398;
        _1554 = _1397;
        _1555 = _1412;
        _1556 = _1411;
        _1557 = _1410;
        _1558 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)));
        _1559 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)));
        _1560 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)));
    }
    else
    {
        _1546 = _1235;
        _1547 = _1235;
        _1548 = _1235;
        _1549 = _1235;
        _1550 = _1235;
        _1551 = _1235;
        _1552 = _1235;
        _1553 = _1235;
        _1554 = _1235;
        _1555 = _1235;
        _1556 = _1235;
        _1557 = _1235;
        _1558 = 0.0;
        _1559 = 0.0;
        _1560 = 0.0;
    }
    float _1570 = (cbModelParam._m0[1u].x * (_1558 - _1247)) + _1247;
    float _1571 = (cbModelParam._m0[1u].x * (_1559 - _1248)) + _1248;
    float _1572 = (cbModelParam._m0[1u].x * (_1560 - _1249)) + _1249;
    float _1593 = fma(_1572, cbSceneParam._m0[89u].z, fma(_1571, cbSceneParam._m0[89u].y, _1570 * cbSceneParam._m0[89u].x));
    float _1596 = fma(_1572, cbSceneParam._m0[90u].z, fma(_1571, cbSceneParam._m0[90u].y, _1570 * cbSceneParam._m0[90u].x));
    float _1599 = fma(_1572, cbSceneParam._m0[91u].z, fma(_1571, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1570));
    float _1614 = _841 * 0.5;
    float _1615 = _842 * 0.5;
    float _1616 = _843 * 0.5;
    float _1617 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1548, _1551, _1554, _1557));
    float _1620 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1547, _1550, _1553, _1556));
    float _1623 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1546, _1549, _1552, _1555));
    float _1657;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1630 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1234, _1238, _1241, _1244));
        float _1634 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1236, _1239, _1242, _1245));
        float _1638 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1237, _1240, _1243, _1246));
        float _1645 = dot(vec4(cbModelParam._m0[39u]), vec4(_1614, _1615, _1616, 1.0));
        _1657 = dot(vec3(isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)), isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0)), isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1645) ? 0.0 : (isnan(0.0) ? _1645 : max(0.0, _1645))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1657 = 1.0;
    }
    float _1668;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1659 = dot(vec4(cbModelParam._m0[40u]), vec4(_1614, _1615, _1616, 1.0));
        _1668 = dot(vec3(isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)), isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)), isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1659) ? 0.0 : (isnan(0.0) ? _1659 : max(0.0, _1659))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1668 = 1.0;
    }
    float _1672 = (_1668 * cbModelParam._m0[1u].x) + (_1657 * (1.0 - cbModelParam._m0[1u].x));
    float _1682 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _656);
    float _1683 = isnan(_1682) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1682 : min(cbModelParam._m0[25u].z, _1682));
    float _1764;
    float _1766;
    float _1768;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1731 = fma(_905, cbModelParam._m0[13u].z, fma(_901, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _897)) + cbModelParam._m0[13u].w;
        float _1735 = fma(_905, cbModelParam._m0[14u].z, fma(_901, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _897)) + cbModelParam._m0[14u].w;
        float _1739 = fma(_905, cbModelParam._m0[15u].z, fma(_901, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _897)) + cbModelParam._m0[15u].w;
        float _1742 = fma(_843, cbModelParam._m0[13u].z, fma(_842, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _841));
        float _1745 = fma(_843, cbModelParam._m0[14u].z, fma(_842, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _841));
        float _1748 = fma(_843, cbModelParam._m0[15u].z, fma(_842, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _841));
        float _1776;
        if (_1742 > 0.0)
        {
            _1776 = abs((1.0 - _1731) / _1742);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1742 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1731 + 1.0) / _1742);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1776 = frontier_phi_17_15_ladder;
        }
        float _1980;
        if (_1745 > 0.0)
        {
            _1980 = abs((1.0 - _1735) / _1745);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1745 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1735 + 1.0) / _1745);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1980 = frontier_phi_26_22_ladder;
        }
        float _2234;
        if (_1748 > 0.0)
        {
            _2234 = abs((1.0 - _1739) / _1748);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1748 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1739 + 1.0) / _1748);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2234 = frontier_phi_38_33_ladder;
        }
        float _2236 = isnan(_1980) ? _1776 : (isnan(_1776) ? _1980 : min(_1776, _1980));
        float _2237 = isnan(_2234) ? _2236 : (isnan(_2236) ? _2234 : min(_2236, _2234));
        float _2241 = (_2237 * _1742) + _1731;
        float _2242 = (_2237 * _1745) + _1735;
        float _2243 = (_2237 * _1748) + _1739;
        float _2244 = _2237 * 9.9999997473787516355514526367188e-05;
        float _2246 = (-1.0) - _2244;
        float _2248 = _2244 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2243 > _2248) || ((_2243 < _2246) || ((_2242 > _2248) || ((_2242 < _2246) || ((_2241 < _2246) || (_2241 > _2248))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2371 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2243, cbModelParam._m0[9u].z, fma(_2242, cbModelParam._m0[9u].y, _2241 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2243, cbModelParam._m0[10u].z, fma(_2242, cbModelParam._m0[10u].y, _2241 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2243, cbModelParam._m0[11u].z, fma(_2242, cbModelParam._m0[11u].y, _2241 * cbModelParam._m0[11u].x))), _1683);
            frontier_phi_16_38_ladder = _2371.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2371.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2371.x * cbModelParam._m0[1u].y;
        }
        _1764 = frontier_phi_16_38_ladder_2;
        _1766 = frontier_phi_16_38_ladder_1;
        _1768 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1752 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_841, _842, _843), _1683);
        _1764 = _1752.x * cbModelParam._m0[1u].y;
        _1766 = _1752.y * cbModelParam._m0[1u].y;
        _1768 = _1752.z * cbModelParam._m0[1u].y;
    }
    float _1772 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _656);
    float _1773 = isnan(_1772) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1772 : min(cbModelParam._m0[25u].w, _1772));
    float _1863;
    float _1865;
    float _1867;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1827 = fma(_905, cbModelParam._m0[21u].z, fma(_901, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _897)) + cbModelParam._m0[21u].w;
        float _1831 = fma(_905, cbModelParam._m0[22u].z, fma(_901, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _897)) + cbModelParam._m0[22u].w;
        float _1835 = fma(_905, cbModelParam._m0[23u].z, fma(_901, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _897)) + cbModelParam._m0[23u].w;
        float _1838 = fma(_843, cbModelParam._m0[21u].z, fma(_842, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _841));
        float _1841 = fma(_843, cbModelParam._m0[22u].z, fma(_842, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _841));
        float _1844 = fma(_843, cbModelParam._m0[23u].z, fma(_842, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _841));
        float _1985;
        if (_1838 > 0.0)
        {
            _1985 = abs((1.0 - _1827) / _1838);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1838 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1827 + 1.0) / _1838);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1985 = frontier_phi_28_24_ladder;
        }
        float _2261;
        if (_1841 > 0.0)
        {
            _2261 = abs((1.0 - _1831) / _1841);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1841 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1831 + 1.0) / _1841);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2261 = frontier_phi_40_35_ladder;
        }
        float _2474;
        if (_1844 > 0.0)
        {
            _2474 = abs((1.0 - _1835) / _1844);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1844 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1835 + 1.0) / _1844);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2474 = frontier_phi_49_46_ladder;
        }
        float _2476 = isnan(_2261) ? _1985 : (isnan(_1985) ? _2261 : min(_1985, _2261));
        float _2477 = isnan(_2474) ? _2476 : (isnan(_2476) ? _2474 : min(_2476, _2474));
        float _2481 = (_2477 * _1838) + _1827;
        float _2482 = (_2477 * _1841) + _1831;
        float _2483 = (_2477 * _1844) + _1835;
        float _2484 = _2477 * 9.9999997473787516355514526367188e-05;
        float _2485 = (-1.0) - _2484;
        float _2487 = _2484 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2483 > _2487) || ((_2483 < _2485) || ((_2482 > _2487) || ((_2482 < _2485) || ((_2481 < _2485) || (_2481 > _2487))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2682 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2483, cbModelParam._m0[17u].z, fma(_2482, cbModelParam._m0[17u].y, _2481 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2483, cbModelParam._m0[18u].z, fma(_2482, cbModelParam._m0[18u].y, _2481 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2483, cbModelParam._m0[19u].z, fma(_2482, cbModelParam._m0[19u].y, _2481 * cbModelParam._m0[19u].x))), _1773);
            frontier_phi_25_49_ladder = _2682.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2682.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2682.x * cbModelParam._m0[1u].z;
        }
        _1863 = frontier_phi_25_49_ladder_2;
        _1865 = frontier_phi_25_49_ladder_1;
        _1867 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1847 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_841, _842, _843), _1773);
        _1863 = _1847.x * cbModelParam._m0[1u].z;
        _1865 = _1847.y * cbModelParam._m0[1u].z;
        _1867 = _1847.z * cbModelParam._m0[1u].z;
    }
    float _1880 = (((_868 * _817) + _869) * _833) * ((cbModelParam._m0[1u].w * (_1863 - _1764)) + _1764);
    float _1882 = (((_868 * _819) + _869) * _833) * ((cbModelParam._m0[1u].w * (_1865 - _1766)) + _1766);
    float _1884 = (((_868 * _820) + _869) * _833) * ((cbModelParam._m0[1u].w * (_1867 - _1768)) + _1768);
    float _1887 = fma(_1884, cbSceneParam._m0[89u].z, fma(_1882, cbSceneParam._m0[89u].y, _1880 * cbSceneParam._m0[89u].x));
    float _1890 = fma(_1884, cbSceneParam._m0[90u].z, fma(_1882, cbSceneParam._m0[90u].y, _1880 * cbSceneParam._m0[90u].x));
    float _1893 = fma(_1884, cbSceneParam._m0[91u].z, fma(_1882, cbSceneParam._m0[91u].y, _1880 * cbSceneParam._m0[91u].x));
    uvec4 _1903 = floatBitsToUint(cbInstanceData._m0[_245 + 5u]);
    uint _1905 = _1903.x * 14u;
    uint _1906 = _1905 + 13u;
    float _1913 = _833 + (-1.0);
    float _1918 = (cbLight._m0[_1906].x * _1913) + 1.0;
    float _1919 = (cbLight._m0[_1906].y * _1913) + 1.0;
    float _1920 = (cbLight._m0[_1906].z * _1913) + 1.0;
    float _1921 = (cbLight._m0[_1906].w * _1913) + 1.0;
    uint _1922 = _1905 + 5u;
    float _1928 = isnan(1.0) ? _1919 : (isnan(_1919) ? 1.0 : min(_1919, 1.0));
    uint _1932 = _1905 + 4u;
    float _1939 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
    uint _1943 = _1905 | 1u;
    float _1954 = dot(vec3(cbLight._m0[_1905].xyz), vec3(_653, _654, _655));
    float _1957 = dot(vec3(cbLight._m0[_1943].xyz), vec3(_653, _654, _655));
    float _4215 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _4226 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1962 = (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * 0.3183098733425140380859375;
    float _1964 = (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * 0.3183098733425140380859375;
    float _1971 = ((cbLight._m0[_1922].x * _1928) * _1964) + ((cbLight._m0[_1932].x * _1939) * _1962);
    float _1972 = ((_1928 * cbLight._m0[_1922].y) * _1964) + ((_1939 * cbLight._m0[_1932].y) * _1962);
    float _1973 = ((_1928 * cbLight._m0[_1922].z) * _1964) + ((_1939 * cbLight._m0[_1932].z) * _1962);
    uvec4 _1977 = floatBitsToUint(cbLight._m0[_1905 + 12u]);
    bool _1979 = _1977.x == 0u;
    float _1990;
    float _1992;
    float _1994;
    if (_1979)
    {
        _1990 = _1971;
        _1992 = _1972;
        _1994 = _1973;
    }
    else
    {
        uint _1998 = _1905 + 6u;
        float _2014 = (dot(vec3(cbLight._m0[_1905 + 2u].xyz), vec3(_653, _654, _655)) * 0.5) + 0.5;
        float _2015 = _2014 * _2014;
        float _4237 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
        float _2016 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _2017 = isnan(1.0) ? _1920 : (isnan(_1920) ? 1.0 : min(_1920, 1.0));
        _1990 = (((cbLight._m0[_1998].x * 0.3183098733425140380859375) * _2016) * _2017) + _1971;
        _1992 = (((cbLight._m0[_1998].y * 0.3183098733425140380859375) * _2016) * _2017) + _1972;
        _1994 = (((cbLight._m0[_1998].z * 0.3183098733425140380859375) * _2016) * _2017) + _1973;
    }
    bool _1997 = _1977.y == 0u;
    float _2035;
    float _2037;
    float _2039;
    if (_1997)
    {
        _2035 = _1990;
        _2037 = _1992;
        _2039 = _1994;
    }
    else
    {
        uint _2205 = _1905 + 7u;
        float _2221 = (dot(vec3(cbLight._m0[_1905 + 3u].xyz), vec3(_653, _654, _655)) * 0.5) + 0.5;
        float _2222 = _2221 * _2221;
        float _4253 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        float _2223 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _2224 = isnan(1.0) ? _1921 : (isnan(_1921) ? 1.0 : min(_1921, 1.0));
        _2035 = (((cbLight._m0[_2205].x * 0.3183098733425140380859375) * _2223) * _2224) + _1990;
        _2037 = (((cbLight._m0[_2205].y * 0.3183098733425140380859375) * _2223) * _2224) + _1992;
        _2039 = (((cbLight._m0[_2205].z * 0.3183098733425140380859375) * _2223) * _2224) + _1994;
    }
    uint _2042 = _1905 + 8u;
    float _2055 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1905].w)) * _656) * 0.949999988079071044921875);
    float _2056 = _2055 * _2055;
    float _2057 = cbLight._m0[_1905].x + _732;
    float _2058 = cbLight._m0[_1905].y + _733;
    float _2059 = cbLight._m0[_1905].z + _734;
    float _2063 = inversesqrt(dot(vec3(_2057, _2058, _2059), vec3(_2057, _2058, _2059)));
    float _2064 = _2063 * _2057;
    float _2065 = _2063 * _2058;
    float _2066 = _2063 * _2059;
    float _2067 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_1905].xyz));
    float _4269 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2070 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
    float _4280 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _2071 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
    float _2072 = dot(vec3(_653, _654, _655), vec3(_2064, _2065, _2066));
    float _4291 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2075 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _2076 = dot(vec3(cbLight._m0[_1905].xyz), vec3(_2064, _2065, _2066));
    float _4302 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2080 = _2056 * _2056;
    float _2084 = ((_2075 * _2075) * (_2080 + (-1.0))) + 1.0;
    float _2092 = exp2(log2(1.0 - (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) * 5.0);
    float _2093 = 0.959999978542327880859375 - _814;
    float _2095 = 0.959999978542327880859375 - _815;
    float _2096 = 0.959999978542327880859375 - _816;
    float _2103 = 1.0 - _2056;
    float _2114 = (0.5 / (((_2071 * ((_2070 * _2103) + _2056)) + 9.9999999392252902907785028219223e-09) + (((_2071 * _2103) + _2056) * _2070))) * _2070;
    float _4313 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2116 = (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_2080 / ((_2084 * _2084) * 3.141590118408203125));
    uint _2127 = _1905 + 9u;
    float _2138 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1943].w)) * _656) * 0.949999988079071044921875);
    float _2139 = _2138 * _2138;
    float _2140 = cbLight._m0[_1943].x + _732;
    float _2141 = cbLight._m0[_1943].y + _733;
    float _2142 = cbLight._m0[_1943].z + _734;
    float _2146 = inversesqrt(dot(vec3(_2140, _2141, _2142), vec3(_2140, _2141, _2142)));
    float _2147 = _2146 * _2140;
    float _2148 = _2146 * _2141;
    float _2149 = _2146 * _2142;
    float _2150 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_1943].xyz));
    float _4324 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2153 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
    float _2154 = dot(vec3(_653, _654, _655), vec3(_2147, _2148, _2149));
    float _4335 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
    float _2157 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
    float _2158 = dot(vec3(cbLight._m0[_1943].xyz), vec3(_2147, _2148, _2149));
    float _4346 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2162 = _2139 * _2139;
    float _2166 = ((_2157 * _2157) * (_2162 + (-1.0))) + 1.0;
    float _2173 = exp2(log2(1.0 - (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0)))) * 5.0);
    float _2180 = 1.0 - _2139;
    float _2190 = (0.5 / (((_2071 * ((_2153 * _2180) + _2139)) + 9.9999999392252902907785028219223e-09) + (((_2071 * _2180) + _2139) * _2153))) * _2153;
    float _4357 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2192 = (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_2162 / ((_2166 * _2166) * 3.141590118408203125));
    float _2202 = (((((_2173 * _2093) + _817) * cbLight._m0[_2127].x) * _2192) * _1928) + (((((_2092 * _2093) + _817) * cbLight._m0[_2042].x) * _2116) * _1939);
    float _2203 = (((((_2173 * _2095) + _819) * cbLight._m0[_2127].y) * _2192) * _1928) + (((((_2092 * _2095) + _819) * cbLight._m0[_2042].y) * _2116) * _1939);
    float _2204 = (((((_2173 * _2096) + _820) * cbLight._m0[_2127].z) * _2192) * _1928) + (((((_2092 * _2096) + _820) * cbLight._m0[_2042].z) * _2116) * _1939);
    float _2266;
    float _2268;
    float _2270;
    if (_1979)
    {
        _2266 = _2202;
        _2268 = _2203;
        _2270 = _2204;
    }
    else
    {
        uint _2272 = _1905 + 2u;
        uint _2276 = _1905 + 10u;
        float _2290 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2272].w)) * _656) * 0.949999988079071044921875);
        float _2291 = _2290 * _2290;
        float _2292 = cbLight._m0[_2272].x + _732;
        float _2293 = cbLight._m0[_2272].y + _733;
        float _2294 = cbLight._m0[_2272].z + _734;
        float _2298 = inversesqrt(dot(vec3(_2292, _2293, _2294), vec3(_2292, _2293, _2294)));
        float _2299 = _2298 * _2292;
        float _2300 = _2298 * _2293;
        float _2301 = _2298 * _2294;
        float _2302 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_2272].xyz));
        float _4368 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2305 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _2306 = dot(vec3(_653, _654, _655), vec3(_2299, _2300, _2301));
        float _4379 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
        float _2309 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _2310 = dot(vec3(cbLight._m0[_2272].xyz), vec3(_2299, _2300, _2301));
        float _4390 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
        float _2314 = _2291 * _2291;
        float _2318 = ((_2309 * _2309) * (_2314 + (-1.0))) + 1.0;
        float _2325 = exp2(log2(1.0 - (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0)))) * 5.0);
        float _2332 = 1.0 - _2291;
        float _2342 = (0.5 / (((_2071 * ((_2305 * _2332) + _2291)) + 9.9999999392252902907785028219223e-09) + (((_2071 * _2332) + _2291) * _2305))) * _2305;
        float _4401 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2344 = (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * (_2314 / ((_2318 * _2318) * 3.141590118408203125));
        float _2345 = isnan(1.0) ? _1920 : (isnan(_1920) ? 1.0 : min(_1920, 1.0));
        _2266 = (((((_2325 * _2093) + _817) * cbLight._m0[_2276].x) * _2344) * _2345) + _2202;
        _2268 = (((((_2325 * _2095) + _819) * cbLight._m0[_2276].y) * _2344) * _2345) + _2203;
        _2270 = (((((_2325 * _2096) + _820) * cbLight._m0[_2276].z) * _2344) * _2345) + _2204;
    }
    float _2380;
    float _2382;
    float _2384;
    if (_1997)
    {
        _2380 = _2266;
        _2382 = _2268;
        _2384 = _2270;
    }
    else
    {
        uint _2391 = _1905 + 3u;
        uint _2395 = _1905 + 11u;
        float _2409 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2391].w)) * _656) * 0.949999988079071044921875);
        float _2410 = _2409 * _2409;
        float _2411 = cbLight._m0[_2391].x + _732;
        float _2412 = cbLight._m0[_2391].y + _733;
        float _2413 = cbLight._m0[_2391].z + _734;
        float _2417 = inversesqrt(dot(vec3(_2411, _2412, _2413), vec3(_2411, _2412, _2413)));
        float _2418 = _2417 * _2411;
        float _2419 = _2417 * _2412;
        float _2420 = _2417 * _2413;
        float _2421 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_2391].xyz));
        float _4417 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        float _2424 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _2425 = dot(vec3(_653, _654, _655), vec3(_2418, _2419, _2420));
        float _4428 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2428 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _2429 = dot(vec3(cbLight._m0[_2391].xyz), vec3(_2418, _2419, _2420));
        float _4439 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2433 = _2410 * _2410;
        float _2437 = ((_2428 * _2428) * (_2433 + (-1.0))) + 1.0;
        float _2444 = exp2(log2(1.0 - (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0)))) * 5.0);
        float _2451 = 1.0 - _2410;
        float _2461 = (0.5 / (((_2071 * ((_2424 * _2451) + _2410)) + 9.9999999392252902907785028219223e-09) + (((_2071 * _2451) + _2410) * _2424))) * _2424;
        float _4450 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2463 = (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_2433 / ((_2437 * _2437) * 3.141590118408203125));
        float _2464 = isnan(1.0) ? _1921 : (isnan(_1921) ? 1.0 : min(_1921, 1.0));
        _2380 = (((((_2444 * _2093) + _817) * cbLight._m0[_2395].x) * _2463) * _2464) + _2266;
        _2382 = (((((_2444 * _2095) + _819) * cbLight._m0[_2395].y) * _2463) * _2464) + _2268;
        _2384 = (((((_2444 * _2096) + _820) * cbLight._m0[_2395].z) * _2463) * _2464) + _2270;
    }
    float _2599;
    float _2601;
    float _2603;
    float _2605;
    float _2607;
    float _2609;
    if (_1903.y == 0u)
    {
        float _2539 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2540 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2539;
        float _2541 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2539;
        float _2542 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2539;
        uvec4 _2554 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2555 = _2554.x;
        uint _2566 = uint((float(_2554.y) * floor(float(uint(cbSceneParam._m0[85u].y * _754) / _2555))) + floor(float(uint(cbSceneParam._m0[85u].x * _753) / _2555)));
        float _2576 = (log2(_2542 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2577 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        uint _2580 = uint(isnan(14.0) ? _2577 : (isnan(_2577) ? 14.0 : min(_2577, 14.0)));
        uvec4 _2585 = texelFetch(g_lightClusterGridBuffer, int(((_2580 << 2u) + (_2566 << 6u)) >> 2u));
        uint _2586 = _2585.x;
        uint _2587 = _2554.z;
        float _2687;
        float _2689;
        float _2691;
        float _2693;
        float _2695;
        float _2697;
        if (((((1u << ((_2587 >> 4u) & 15u)) + 4294967295u) & _2586) == 0u) || ((_2587 & 240u) == 0u))
        {
            _2687 = 0.0;
            _2689 = 0.0;
            _2691 = 0.0;
            _2693 = 0.0;
            _2695 = 0.0;
            _2697 = 0.0;
        }
        else
        {
            float _2688;
            float _2690;
            float _2692;
            float _2694;
            float _2696;
            float _2698;
            float _2839 = 0.0;
            float _2840 = 0.0;
            float _2841 = 0.0;
            float _2842 = 0.0;
            float _2843 = 0.0;
            float _2844 = 0.0;
            uint _2845 = 0u;
            uint _2854;
            bool _2855;
            for (;;)
            {
                _2854 = texelFetch(g_lightClassification, int((((_2580 << 5u) + (_2566 << 9u)) + (_2845 << 2u)) >> 2u)).x;
                _2855 = _2854 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2855)
                {
                    frontier_phi_66_pred = _2839;
                    frontier_phi_66_pred_1 = _2844;
                    frontier_phi_66_pred_2 = _2843;
                    frontier_phi_66_pred_3 = _2842;
                    frontier_phi_66_pred_4 = _2841;
                    frontier_phi_66_pred_5 = _2840;
                }
                else
                {
                    float _2984;
                    float _2985;
                    float _2986;
                    float _2987;
                    float _2988;
                    float _2989;
                    uint _2990;
                    _2984 = _2839;
                    _2985 = _2840;
                    _2986 = _2841;
                    _2987 = _2842;
                    _2988 = _2843;
                    _2989 = _2844;
                    _2990 = _2854;
                    float _2911;
                    float _2912;
                    float _2913;
                    float _2914;
                    float _2915;
                    float _2916;
                    for (;;)
                    {
                        uint _2994 = uint(findLSB(_2990)) + (_2845 << 5u);
                        uint _2991 = (_2990 + 4294967295u) & _2990;
                        uint _2996 = _2994 * 48u;
                        vec4 _3010 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2996)).x, texelFetch(g_PointLightRenderingBuffer, int(_2996 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2996 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2996 + 3u)).x));
                        uint _3016 = (_2994 * 48u) + 4u;
                        vec4 _3029 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3016)).x, texelFetch(g_PointLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3016 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3016 + 3u)).x));
                        uint _3035 = (_2994 * 48u) + 8u;
                        vec3 _3046 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3035)).x, texelFetch(g_PointLightRenderingBuffer, int(_3035 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3035 + 2u)).x));
                        float _3050 = _3010.x - _2540;
                        float _3051 = _3010.y - _2541;
                        float _3052 = _3010.z - _2542;
                        float _3053 = dot(vec3(_3050, _3051, _3052), vec3(_3050, _3051, _3052));
                        float _3056 = inversesqrt(_3053);
                        float _3057 = _3056 * _3050;
                        float _3058 = _3056 * _3051;
                        float _3059 = _3056 * _3052;
                        float _3060 = dot(vec3(_774, _777, _780), vec3(_3057, _3058, _3059));
                        float _3065 = 1.0 - (_3053 * _3010.w);
                        float _4476 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
                        float _3066 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
                        float _3067 = sqrt(_3053) * _3029.w;
                        float _3070 = 1.39999997615814208984375 / (_3067 + 1.39999997615814208984375);
                        float _3071 = _3070 * _3070;
                        float _3074 = ((1.0 - _3071) * _3060) + _3071;
                        float _3077 = _3067 * _3067;
                        float _3081 = ((isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0))) * _3066) / ((_3077 * 0.699999988079071044921875) + 1.0);
                        float _3085 = (-0.0) - _2540;
                        float _3086 = (-0.0) - _2541;
                        float _3087 = (-0.0) - _2542;
                        float _3091 = inversesqrt(dot(vec3(_3085, _3086, _3087), vec3(_3085, _3086, _3087)));
                        float _3092 = _3091 * _3085;
                        float _3093 = _3091 * _3086;
                        float _3094 = _3091 * _3087;
                        float _3102 = exp2(log2(1.0 / ((_3077 * 3.5) + 5.0)) * 0.25);
                        float _3103 = 1.0 - _849;
                        float _3110 = sqrt(1.0 - ((1.0 - (_3103 * _3103)) * (1.0 - (_3102 * _3102))));
                        float _3111 = _3110 * _3110;
                        float _3112 = _3111 * _3111;
                        float _3113 = _3092 + _3057;
                        float _3114 = _3093 + _3058;
                        float _3115 = _3094 + _3059;
                        float _3119 = inversesqrt(dot(vec3(_3113, _3114, _3115), vec3(_3113, _3114, _3115)));
                        float _3123 = dot(vec3(_774, _777, _780), vec3(_3092, _3093, _3094));
                        float _4492 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
                        float _3126 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
                        float _3127 = dot(vec3(_774, _777, _780), vec3(_3119 * _3113, _3119 * _3114, _3119 * _3115));
                        float _4503 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                        float _3130 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
                        float _3134 = ((_3130 * _3130) * (_3112 + (-1.0))) + 1.0;
                        float _3135 = _3070 * _3111;
                        float _3136 = _3135 * _3135;
                        float _3139 = ((1.0 - _3136) * _3060) + _3136;
                        float _4514 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                        float _3140 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
                        float _3141 = 1.0 - _3111;
                        float _3151 = (0.5 / (((_3140 * ((_3126 * _3141) + _3111)) + 9.9999999392252902907785028219223e-09) + (((_3140 * _3141) + _3111) * _3126))) * _3140;
                        float _4525 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                        float _3162 = (((_3112 * 3.1415927410125732421875) * (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0)))) / ((_3134 * _3134) * ((_3077 * 2.1991131305694580078125) + 3.141590118408203125))) * _3066;
                        _2914 = (_3081 * _3029.x) + _2987;
                        _2915 = (_3081 * _3029.y) + _2988;
                        _2916 = (_3081 * _3029.z) + _2989;
                        _2911 = (_3162 * _3046.x) + _2984;
                        _2912 = (_3162 * _3046.y) + _2985;
                        _2913 = (_3162 * _3046.z) + _2986;
                        if (_2991 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2984 = _2911;
                            _2985 = _2912;
                            _2986 = _2913;
                            _2987 = _2914;
                            _2988 = _2915;
                            _2989 = _2916;
                            _2990 = _2991;
                        }
                    }
                    frontier_phi_66_pred = _2911;
                    frontier_phi_66_pred_1 = _2916;
                    frontier_phi_66_pred_2 = _2915;
                    frontier_phi_66_pred_3 = _2914;
                    frontier_phi_66_pred_4 = _2913;
                    frontier_phi_66_pred_5 = _2912;
                }
                _2688 = frontier_phi_66_pred;
                _2698 = frontier_phi_66_pred_1;
                _2696 = frontier_phi_66_pred_2;
                _2694 = frontier_phi_66_pred_3;
                _2692 = frontier_phi_66_pred_4;
                _2690 = frontier_phi_66_pred_5;
                uint _2846 = _2845 + 1u;
                if (_2846 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2839 = _2688;
                    _2840 = _2690;
                    _2841 = _2692;
                    _2842 = _2694;
                    _2843 = _2696;
                    _2844 = _2698;
                    _2845 = _2846;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2687 = _2688;
            _2689 = _2690;
            _2691 = _2692;
            _2693 = _2694;
            _2695 = _2696;
            _2697 = _2698;
        }
        uvec4 _2701 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2702 = _2701.z;
        uint _2704 = (_2702 >> 8u) & 15u;
        float _2807;
        float _2809;
        float _2811;
        float _2813;
        float _2815;
        float _2817;
        if (((4294967295u << _2704) & _2586) == 0u)
        {
            _2807 = _2687;
            _2809 = _2689;
            _2811 = _2691;
            _2813 = _2693;
            _2815 = _2695;
            _2817 = _2697;
        }
        else
        {
            float _2832 = inversesqrt(dot(vec3(_2540, _2541, _2542), vec3(_2540, _2541, _2542)));
            float _2833 = _2832 * _2540;
            float _2834 = _2832 * _2541;
            float _2835 = _2832 * _2542;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2704 < ((_2702 >> 12u) & 15u))
            {
                float _2808;
                float _2810;
                float _2812;
                float _2814;
                float _2816;
                float _2818;
                float _2967 = _2687;
                float _2968 = _2689;
                float _2969 = _2691;
                float _2970 = _2693;
                float _2971 = _2695;
                float _2972 = _2697;
                uint _2973 = _2704;
                uint _2982;
                bool _2983;
                for (;;)
                {
                    _2982 = texelFetch(g_lightClassification, int((((_2580 << 5u) + (_2566 << 9u)) + (_2973 << 2u)) >> 2u)).x;
                    _2983 = _2982 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2983)
                    {
                        frontier_phi_77_pred = _2972;
                        frontier_phi_77_pred_1 = _2971;
                        frontier_phi_77_pred_2 = _2970;
                        frontier_phi_77_pred_3 = _2969;
                        frontier_phi_77_pred_4 = _2968;
                        frontier_phi_77_pred_5 = _2967;
                    }
                    else
                    {
                        float _3176;
                        float _3177;
                        float _3178;
                        float _3179;
                        float _3180;
                        float _3181;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3189 = _2967;
                        float _3190 = _2968;
                        float _3191 = _2969;
                        float _3192 = _2970;
                        float _3193 = _2971;
                        float _3194 = _2972;
                        uint _3195 = _2982;
                        uint _3196;
                        vec4 _3221;
                        float _3222;
                        vec4 _3237;
                        vec3 _3249;
                        vec4 _3265;
                        vec4 _3280;
                        float _3326;
                        bool _3327;
                        for (;;)
                        {
                            uint _3206 = ((_2973 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3195));
                            _3196 = (_3195 + 4294967295u) & _3195;
                            uint _3208 = _3206 * 40u;
                            _3221 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3208)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 3u)).x));
                            _3222 = _3221.w;
                            uint _3224 = (_3206 * 40u) + 4u;
                            _3237 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3224)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 3u)).x));
                            uint _3239 = (_3206 * 40u) + 8u;
                            _3249 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3239)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 2u)).x));
                            uint _3252 = (_3206 * 40u) + 16u;
                            _3265 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3252)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 3u)).x));
                            uint _3267 = (_3206 * 40u) + 20u;
                            _3280 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3267)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 3u)).x));
                            uint _3282 = (_3206 * 40u) + 24u;
                            vec4 _3295 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3282)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 3u)).x));
                            uint _3301 = (_3206 * 40u) + 28u;
                            vec4 _3314 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3301)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 3u)).x));
                            _3326 = fma(_2542, _3314.z, fma(_2541, _3314.y, _3314.x * _2540)) + _3314.w;
                            _3327 = !((fma(_2542, _3295.z, fma(_2541, _3295.y, _3295.x * _2540)) + _3295.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3327)
                            {
                                float _3354 = _3221.x - _2540;
                                float _3355 = _3221.y - _2541;
                                float _3356 = _3221.z - _2542;
                                float _3357 = dot(vec3(_3354, _3355, _3356), vec3(_3354, _3355, _3356));
                                float _3360 = inversesqrt(_3357);
                                float _3361 = _3360 * _3354;
                                float _3362 = _3360 * _3355;
                                float _3363 = _3360 * _3356;
                                float _3367 = 1.0 - (_3357 / (_3222 * _3222));
                                float _4536 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                                float _3368 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
                                float _3372 = sqrt(_3357) * _3237.w;
                                float _3374 = 1.39999997615814208984375 / (_3372 + 1.39999997615814208984375);
                                float _3375 = _3374 * _3374;
                                float _3378 = ((1.0 - _3375) * dot(vec3(_3361, _3362, _3363), vec3(_774, _777, _780))) + _3375;
                                float _3381 = _3372 * _3372;
                                float _3385 = (fma(_2542, _3265.z, fma(_2541, _3265.y, _3265.x * _2540)) + _3265.w) / _3326;
                                float _3386 = (fma(_2542, _3280.z, fma(_2541, _3280.y, _3280.x * _2540)) + _3280.w) / _3326;
                                float _3390 = 1.0 - dot(vec2(_3385, _3386), vec2(_3385, _3386));
                                float _4552 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                                float _3391 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
                                float _3392 = _3391 * (((isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0))) * _3368) / ((_3381 * 0.699999988079071044921875) + 1.0));
                                float _3404 = exp2(log2(1.0 / ((_3381 * 3.5) + 5.0)) * 0.25);
                                float _3405 = 1.0 - _849;
                                float _3412 = sqrt(1.0 - ((1.0 - (_3405 * _3405)) * (1.0 - (_3404 * _3404))));
                                float _3413 = _3412 * _3412;
                                float _3414 = _3413 * _3413;
                                float _3415 = _3361 - _2833;
                                float _3416 = _3362 - _2834;
                                float _3417 = _3363 - _2835;
                                float _3421 = inversesqrt(dot(vec3(_3415, _3416, _3417), vec3(_3415, _3416, _3417)));
                                float _3425 = dot(vec3(_774, _777, _780), vec3((-0.0) - _2833, (-0.0) - _2834, (-0.0) - _2835));
                                float _4563 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                                float _3428 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
                                float _3429 = dot(vec3(_774, _777, _780), vec3(_3421 * _3415, _3421 * _3416, _3421 * _3417));
                                float _4574 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                                float _3432 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
                                float _3436 = ((_3432 * _3432) * (_3414 + (-1.0))) + 1.0;
                                float _3437 = _3374 * _3413;
                                float _3438 = _3437 * _3437;
                                float _3444 = ((1.0 - _3438) * dot(vec3(_774, _777, _780), vec3(_3361, _3362, _3363))) + _3438;
                                float _4585 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                                float _3445 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
                                float _3446 = 1.0 - _3413;
                                float _3456 = (0.5 / (((_3445 * ((_3428 * _3446) + _3413)) + 9.9999999392252902907785028219223e-09) + (((_3445 * _3446) + _3413) * _3428))) * _3445;
                                float _4596 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                                float _3466 = (_3391 * _3368) * (((_3414 * 3.1415927410125732421875) * (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0)))) / ((_3436 * _3436) * ((_3381 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3392 * _3237.y;
                                frontier_phi_83_pred_1 = _3392 * _3237.x;
                                frontier_phi_83_pred_2 = _3466 * _3249.z;
                                frontier_phi_83_pred_3 = _3466 * _3249.y;
                                frontier_phi_83_pred_4 = _3466 * _3249.x;
                                frontier_phi_83_pred_5 = _3392 * _3237.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3474 = frontier_phi_83_pred;
                            _3473 = frontier_phi_83_pred_1;
                            _3472 = frontier_phi_83_pred_2;
                            _3471 = frontier_phi_83_pred_3;
                            _3470 = frontier_phi_83_pred_4;
                            _3475 = frontier_phi_83_pred_5;
                            _3179 = _3473 + _3192;
                            _3180 = _3474 + _3193;
                            _3181 = _3475 + _3194;
                            _3176 = _3470 + _3189;
                            _3177 = _3471 + _3190;
                            _3178 = _3472 + _3191;
                            if (_3196 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3189 = _3176;
                                _3190 = _3177;
                                _3191 = _3178;
                                _3192 = _3179;
                                _3193 = _3180;
                                _3194 = _3181;
                                _3195 = _3196;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3181;
                        frontier_phi_77_pred_1 = _3180;
                        frontier_phi_77_pred_2 = _3179;
                        frontier_phi_77_pred_3 = _3178;
                        frontier_phi_77_pred_4 = _3177;
                        frontier_phi_77_pred_5 = _3176;
                    }
                    _2818 = frontier_phi_77_pred;
                    _2816 = frontier_phi_77_pred_1;
                    _2814 = frontier_phi_77_pred_2;
                    _2812 = frontier_phi_77_pred_3;
                    _2810 = frontier_phi_77_pred_4;
                    _2808 = frontier_phi_77_pred_5;
                    uint _2974 = _2973 + 1u;
                    if (_2974 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2967 = _2808;
                        _2968 = _2810;
                        _2969 = _2812;
                        _2970 = _2814;
                        _2971 = _2816;
                        _2972 = _2818;
                        _2973 = _2974;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2812;
                frontier_phi_58_59_ladder_1 = _2818;
                frontier_phi_58_59_ladder_2 = _2816;
                frontier_phi_58_59_ladder_3 = _2814;
                frontier_phi_58_59_ladder_4 = _2810;
                frontier_phi_58_59_ladder_5 = _2808;
            }
            else
            {
                frontier_phi_58_59_ladder = _2691;
                frontier_phi_58_59_ladder_1 = _2697;
                frontier_phi_58_59_ladder_2 = _2695;
                frontier_phi_58_59_ladder_3 = _2693;
                frontier_phi_58_59_ladder_4 = _2689;
                frontier_phi_58_59_ladder_5 = _2687;
            }
            _2807 = frontier_phi_58_59_ladder_5;
            _2809 = frontier_phi_58_59_ladder_4;
            _2811 = frontier_phi_58_59_ladder;
            _2813 = frontier_phi_58_59_ladder_3;
            _2815 = frontier_phi_58_59_ladder_2;
            _2817 = frontier_phi_58_59_ladder_1;
        }
        float _2822 = isnan(1.0) ? _833 : (isnan(_833) ? 1.0 : min(_833, 1.0));
        _2599 = (_2822 * _2813) + _2035;
        _2601 = (_2822 * _2815) + _2037;
        _2603 = (_2822 * _2817) + _2039;
        _2605 = ((_2807 * _817) * _2822) + _2380;
        _2607 = ((_2809 * _819) * _2822) + _2382;
        _2609 = ((_2811 * _820) * _2822) + _2384;
    }
    else
    {
        _2599 = _2035;
        _2601 = _2037;
        _2603 = _2039;
        _2605 = _2380;
        _2607 = _2382;
        _2609 = _2384;
    }
    float _4612 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _4623 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _4634 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _2626 = ((isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0))) * (_2599 + ((isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))) * _833))) + ((_2605 + ((isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0))) * _1672)) * cbPerFrame._m0[3u].x);
    float _2627 = ((isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (_2601 + ((isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))) * _833))) + ((_2607 + ((isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))) * _1672)) * cbPerFrame._m0[3u].x);
    float _2628 = ((isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * (_2603 + ((isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))) * _833))) + ((_2609 + ((isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))) * _1672)) * cbPerFrame._m0[3u].x);
    uint _2629 = _245 + 6u;
    float _2637 = _753 / cbSceneParam._m0[86u].x;
    float _2638 = _754 / cbSceneParam._m0[86u].y;
    vec4 _2652 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2637, _2638, (log2((isnan(cbSceneParam._m0[77u].w) ? _675 : (isnan(_675) ? cbSceneParam._m0[77u].w : min(_675, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2654 = _2652.x;
    float _2655 = _2652.y;
    float _2656 = _2652.z;
    float _2657 = _2652.w;
    float _2749;
    float _2751;
    float _2753;
    float _2755;
    if (_675 > cbSceneParam._m0[78u].w)
    {
        float _2712 = isnan(_675) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _675 : min(cbSceneParam._m0[80u].w, _675));
        float _2713 = _2712 / _675;
        float _2724 = _2713 * _725;
        float _2725 = _726 * _2713;
        float _2726 = (-0.0) - _2725;
        float _2727 = _2713 * _727;
        float _2729 = (cbSceneParam._m0[77u].w * _2726) / _2712;
        float _2730 = _2729 + cbSceneParam._m0[79u].w;
        float _2731 = cbSceneParam._m0[79u].w - _2725;
        float _2737 = sqrt(((_2724 * _2724) + (_2725 * _2725)) + (_2727 * _2727));
        float _2740 = (1.0 - (cbSceneParam._m0[77u].w / _2712)) * _2737;
        float _2745 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2747 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2924;
        if (abs((_2726 - _2729) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2924 = ((((_2730 > 0.0) ? exp2(_2745 * _2730) : (2.0 - exp2(_2747 * _2730))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2740;
        }
        else
        {
            float _2868 = 1.0 / cbSceneParam._m0[80u].x;
            float _2869 = isnan(_2731) ? _2730 : (isnan(_2730) ? _2731 : max(_2730, _2731));
            float _2870 = isnan(_2731) ? _2730 : (isnan(_2730) ? _2731 : min(_2730, _2731));
            float _2879 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : min(_2869, 0.0));
            float _2880 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : min(_2870, 0.0));
            _2924 = ((abs(_2737 / _2726) * cbSceneParam._m0[80u].y) * ((((_2879 - _2880) * 2.0) - ((exp2(_2745 * (isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0)))) - exp2(_2745 * (isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0))))) * _2868)) - ((exp2(_2747 * _2879) - exp2(_2747 * _2880)) * _2868))) + (_2740 * cbSceneParam._m0[80u].z);
        }
        vec4 _2926 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2637, _2638, 1.0), 0.0);
        float _2935 = exp2((_2924 * (-1.44269502162933349609375)) * (1.0 - _2926.w));
        float _2936 = log2(_2935);
        float _2952 = log2(_2657);
        _2749 = (exp2(_2952 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2936 * cbSceneParam._m0[78u].x)) * _2926.x) / cbSceneParam._m0[78u].x)) + _2654;
        _2751 = (exp2(_2952 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2936 * cbSceneParam._m0[78u].y)) * _2926.y) / cbSceneParam._m0[78u].y)) + _2655;
        _2753 = (exp2(_2952 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2936 * cbSceneParam._m0[78u].z)) * _2926.z) / cbSceneParam._m0[78u].z)) + _2656;
        _2755 = _2935 * _2657;
    }
    else
    {
        _2749 = _2654;
        _2751 = _2655;
        _2753 = _2656;
        _2755 = _2657;
    }
    bool _2962;
    vec4 _2765;
    vec4 _2787;
    float _2789;
    float _2793;
    float _2794;
    float _2795;
    float _2796;
    bool _2806;
    for (;;)
    {
        _2765 = cbMatDynParam._m0[0u];
        float _2767 = roundEven(_2765.y);
        bool _2768 = _2767 == 3.0;
        float _2769 = log2(_2755);
        float _2776 = exp2(_2769 * cbSceneParam._m0[78u].x) * _2626;
        float _2777 = exp2(_2769 * cbSceneParam._m0[78u].y) * _2627;
        float _2778 = exp2(_2769 * cbSceneParam._m0[78u].z) * _2628;
        float _2785 = _741 + (-0.5);
        _2787 = cbMtdParam._m0[1u];
        _2789 = _2787.y * _2785;
        float _2792 = (_2767 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2793 = _2792 * (_2768 ? _2776 : (_2776 + (cbSceneParam._m0[72u].w * _2749)));
        _2794 = _2792 * (_2768 ? _2777 : (_2777 + (cbSceneParam._m0[72u].w * _2751)));
        _2795 = _2792 * (_2768 ? _2778 : (_2778 + (cbSceneParam._m0[72u].w * _2753)));
        _2796 = _2785 * 0.999000012874603271484375;
        _2806 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2806)
        {
            if ((cbInstanceData._m0[_245 + 7u].x + _2796) < 0.5)
            {
                _2962 = true;
                break;
            }
        }
        uint _2903 = _793 + uint(_2765.w);
        if ((cbInstanceData._m0[_2903].w < 1.0) && ((cbInstanceData._m0[_2903].w + _2796) < 0.5))
        {
            _2962 = true;
            break;
        }
        if ((_2789 + 1.0) < _2787.x)
        {
            _2962 = true;
            break;
        }
        _2962 = false;
        break;
    }
    float _3167;
    if (_2962)
    {
        discard_state = true;
        _3167 = 0.0;
    }
    else
    {
        _3167 = cbInstanceData._m0[_2629].w;
    }
    SV_Target.x = _2793;
    SV_Target.y = _2794;
    SV_Target.z = _2795;
    SV_Target.w = _3167;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2629].w;
    discard_exit();
}


