#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1417;
float _4080;
float _4081;
float _4082;
float _4083;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4092 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _4103 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _4114 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    uint _282 = uint(roundEven(NORMAL.w)) * 13u;
    uint _287 = _282 + 1u;
    uint _291 = _282 + 2u;
    float _300 = sqrt(((cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x)) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x));
    float _301 = _300 * TEXCOORD.z;
    float _302 = _300 * TEXCOORD.w;
    vec4 _315 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _301) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _302) + cbTextureTilingScale._m0[13u].w));
    vec4 _339 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _344 = _339.x * cbMtdParam._m0[11u].x;
    float _345 = _339.y * cbMtdParam._m0[11u].y;
    float _346 = _339.z * cbMtdParam._m0[11u].z;
    vec4 _365 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _301) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _302) + cbTextureTilingScale._m0[5u].w));
    vec4 _402 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _404 = _402.x;
    float _416 = dot(vec4(_404, _402.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _433 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_404 - _416) * cbMtdParam._m0[24u].y) + _416) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4125 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _434 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _441 = (_434 * ((_365.x * cbMtdParam._m0[12u].x) - _344)) + _344;
    float _442 = (_434 * ((_365.y * cbMtdParam._m0[12u].y) - _345)) + _345;
    float _443 = (_434 * ((_365.z * cbMtdParam._m0[12u].z) - _346)) + _346;
    vec4 _460 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _301) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _302) + cbTextureTilingScale._m0[3u].w));
    vec4 _480 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _482 = _480.x;
    float _492 = dot(vec4(_482, _480.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _506 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_482 - _492) * cbMtdParam._m0[24u].y) + _492) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4136 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _507 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _514 = (_507 * ((_460.x * cbMtdParam._m0[13u].x) - _441)) + _441;
    float _515 = (_507 * ((_460.y * cbMtdParam._m0[13u].y) - _442)) + _442;
    float _516 = (_507 * ((_460.z * cbMtdParam._m0[13u].z) - _443)) + _443;
    float _520 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _315.x) * _514;
    float _523 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _315.y) * _515;
    float _526 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _315.z) * _516;
    float _533 = ((_514 - _520) * (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0)))) + _520;
    float _534 = ((_515 - _523) * (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0)))) + _523;
    float _535 = ((_516 - _526) * (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0)))) + _526;
    vec4 _552 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _301) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _302) + cbTextureTilingScale._m0[20u].w));
    vec4 _575 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _301) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _302) + cbTextureTilingScale._m0[4u].w));
    vec4 _592 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _594 = _592.x;
    float _595 = _592.y;
    float _596 = _592.z;
    float _603 = ((_575.x - _594) * _434) + _594;
    float _604 = ((_575.y - _595) * _434) + _595;
    float _605 = ((_575.z - _596) * _434) + _596;
    vec4 _617 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _301) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _302) + cbTextureTilingScale._m0[2u].w));
    float _630 = ((_617.z - _605) * _507) + _605;
    float _633 = ((((_617.x - _603) * _507) + _603) * 2.0) + (-1.0);
    float _634 = ((((_617.y - _604) * _507) + _604) * 2.0) + (-1.0);
    float _635 = dot(vec2(_633, _634), vec2(_633, _634));
    float _4147 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _640 = sqrt(1.0 - (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))));
    vec4 _653 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _671 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _301) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _302) + cbTextureTilingScale._m0[11u].w));
    float _673 = _671.x;
    float _674 = 1.0 - _673;
    float _687 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_673 - _674) * cbMtdParam._m0[24u].z) + _674) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4158 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _688 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
    float _695 = (_688 * (cbMtdParam._m0[17u].x - _533)) + _533;
    float _696 = (_688 * (cbMtdParam._m0[17u].y - _534)) + _534;
    float _697 = (_688 * (cbMtdParam._m0[17u].z - _535)) + _535;
    vec4 _709 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _723 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _725 = _723.x;
    float _743 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _301) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _302) + cbTextureTilingScale._m0[9u].w)).x - _725) * _434) + _725;
    float _760 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _301) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _302) + cbTextureTilingScale._m0[21u].w)).x - _743) * _507) + _743;
    float _764 = ((_709.x - _760) * cbMtdParam._m0[19u].z) + _760;
    float _766 = _764 - (_764 * _688);
    float _771 = (((_552.z - _630) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _630;
    vec4 _784 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _301) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _302) + cbTextureTilingScale._m0[15u].w));
    float _791 = (_784.x * 2.0) + (-1.0);
    float _792 = (_784.y * 2.0) + (-1.0);
    float _793 = dot(vec2(_791, _792), vec2(_791, _792));
    float _4169 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _801 = (_688 * (_784.z - _771)) + _771;
    float _806 = _633 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_552.x * 2.0) + (-1.0)));
    float _807 = _634 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_552.y * 2.0) + (-1.0)));
    float _819 = (((_791 - _806) + (cbMtdParam._m0[21u].x * _806)) * _688) + _806;
    float _820 = (((_792 - _807) + (cbMtdParam._m0[21u].x * _807)) * _688) + _807;
    float _821 = (_688 * (sqrt(1.0 - (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0)))) - _640)) + _640;
    float _823 = cbMtdParam._m0[22u].x + _653.w;
    float _826 = fma(_821, _248 * NORMAL.x, fma(_820, _255 * TANGENT.x, (_241 * _233) * _819));
    float _829 = fma(_821, _248 * NORMAL.y, fma(_820, _255 * TANGENT.y, (_241 * _234) * _819));
    float _832 = fma(_821, _248 * NORMAL.z, fma(_820, _255 * TANGENT.z, (_241 * _235) * _819));
    float _836 = inversesqrt(dot(vec3(_826, _829, _832), vec3(_826, _829, _832)));
    float _837 = _836 * _826;
    float _838 = _836 * _829;
    float _839 = _836 * _832;
    float _4180 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _840 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    float _4191 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _4202 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _4213 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _4224 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _4235 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _845 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
    float _859 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _900 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _910 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _900);
    float _911 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _900);
    float _912 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _900);
    float _916 = inversesqrt(dot(vec3(_910, _911, _912), vec3(_910, _911, _912)));
    float _917 = _910 * _916;
    float _918 = _911 * _916;
    float _919 = _912 * _916;
    vec4 _924 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _926 = _924.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1098 = sqrt(((_910 * _910) + (_911 * _911)) + (_912 * _912));
        float _1104 = (cbMatDynParam._m0[5u].x * _1098) + cbMatDynParam._m0[5u].y;
        float _4246 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1109 = (cbMatDynParam._m0[5u].z * _1098) + cbMatDynParam._m0[5u].w;
        float _4257 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) - _1105)) + _1105) < ((_926 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _937 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _938 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _956 = fma(_839, cbSceneParam._m0[5u].z, fma(_838, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _837));
    float _959 = fma(_839, cbSceneParam._m0[6u].z, fma(_838, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _837));
    float _962 = fma(_839, cbSceneParam._m0[7u].z, fma(_838, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _837));
    uint _975 = _282 + 9u;
    uint _976 = _975 + uint(cbMatDynParam._m0[0u].w);
    float _982 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0)))) * cbInstanceData._m0[_976].x;
    float _983 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0)))) * cbInstanceData._m0[_976].y;
    float _984 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0)))) * cbInstanceData._m0[_976].z;
    float _4268 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _985 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
    float _4279 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _986 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
    float _4290 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _987 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
    float _988 = 1.0 - _845;
    float _989 = _985 * _988;
    float _990 = _986 * _988;
    float _991 = _987 * _988;
    float _996 = (_985 + (-0.039999999105930328369140625)) * _845;
    float _997 = (_986 + (-0.039999999105930328369140625)) * _845;
    float _998 = (_987 + (-0.039999999105930328369140625)) * _845;
    float _999 = _996 + 0.039999999105930328369140625;
    float _1001 = _997 + 0.039999999105930328369140625;
    float _1002 = _998 + 0.039999999105930328369140625;
    vec4 _1011 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _937, cbSceneParam._m0[86u].y * _938));
    float _1015 = ((isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * TEXCOORD_5.w) * _1011.x;
    float _1016 = dot(vec3(_837, _838, _839), vec3(_917, _918, _919));
    float _1019 = _1016 * 2.0;
    float _1023 = (_1019 * _837) - _917;
    float _1024 = (_1019 * _838) - _918;
    float _1025 = (_1019 * _839) - _919;
    float _1029 = abs(dot(vec3(_917, _918, _919), vec3(_837, _838, _839)));
    float _4301 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _1031 = sqrt(_840);
    float _1044 = exp2((_1031 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1031 * 3.0));
    float _1050 = (1.0 - _1044) * ((_1031 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1051 = _1044 * _1031;
    float _1079 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1083 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1087 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1416;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1141 = fma(_1087, cbModelParam._m0[26u].z, fma(_1083, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1079));
        float _1145 = fma(_1087, cbModelParam._m0[27u].z, fma(_1083, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1079));
        float _1149 = fma(_1087, cbModelParam._m0[28u].z, fma(_1083, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1079));
        float _1174 = _1079 + _837;
        float _1175 = _1083 + _838;
        float _1176 = _1087 + _839;
        float _1186 = fma(_1176, cbModelParam._m0[26u].z, fma(_1175, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1174)) - _1141;
        float _1187 = fma(_1176, cbModelParam._m0[27u].z, fma(_1175, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1174)) - _1145;
        float _1188 = fma(_1176, cbModelParam._m0[28u].z, fma(_1175, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1174)) - _1149;
        float _1192 = inversesqrt(dot(vec3(_1186, _1187, _1188), vec3(_1186, _1187, _1188)));
        float _1205 = ((_1192 * _1186) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1141 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1206 = ((_1192 * _1187) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1145 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1207 = ((_1192 * _1188) / cbModelParam._m0[34u].z) + ((((((_1149 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1205, _1206, _1207), 0.0);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1205, _1206, _1207), 0.0);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1205, _1206, _1207), 0.0);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1205, _1206, _1207), 0.0);
        float _1244 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1210.x + (-0.5));
        float _1246 = _1244 * (_1210.y + (-0.5));
        float _1247 = _1244 * (_1210.z + (-0.5));
        float _1254 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1217.x + (-0.5));
        float _1256 = _1254 * (_1217.y + (-0.5));
        float _1257 = _1254 * (_1217.z + (-0.5));
        float _1264 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1224.x + (-0.5));
        float _1266 = _1264 * (_1224.y + (-0.5));
        float _1267 = _1264 * (_1224.z + (-0.5));
        float _1274 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1275 = _1274 * (_1231.x + (-0.5));
        float _1276 = _1274 * (_1231.y + (-0.5));
        float _1277 = _1274 * (_1231.z + (-0.5));
        float _1278 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1279 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1280 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1281 = _1245 * 0.5;
        float _1282 = _1255 * 0.5;
        float _1283 = _1265 * 0.5;
        float _1284 = dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283));
        float _1289 = (_1284 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1284);
        float _1298 = (dot(vec3(_837, _838, _839), vec3(_1289 * _1281, _1289 * _1282, _1289 * _1283)) + 1.0) * 0.5;
        float _4327 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1308 = sqrt(((_1282 * _1282) + (_1281 * _1281)) + (_1283 * _1283)) / (_1278 + 9.9999997473787516355514526367188e-06);
        float _4338 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _1310 = _1309 * 2.0;
        float _1314 = (1.0 - _1309) / (_1309 + 1.0);
        float _4349 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1324 = ((((1.0 - _1315) * (_1310 + 2.0)) * exp2(log2(isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_1310 + 1.0))) + _1315) * _1278;
        float _1325 = _1246 * 0.5;
        float _1326 = _1256 * 0.5;
        float _1327 = _1266 * 0.5;
        float _1328 = dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327));
        float _1333 = (_1328 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1328);
        float _1341 = (dot(vec3(_837, _838, _839), vec3(_1333 * _1325, _1333 * _1326, _1333 * _1327)) + 1.0) * 0.5;
        float _4360 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1350 = sqrt(((_1326 * _1326) + (_1325 * _1325)) + (_1327 * _1327)) / (_1279 + 9.9999997473787516355514526367188e-06);
        float _4371 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _1352 = _1351 * 2.0;
        float _1356 = (1.0 - _1351) / (_1351 + 1.0);
        float _4382 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _1366 = ((((1.0 - _1357) * (_1352 + 2.0)) * exp2(log2(isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_1352 + 1.0))) + _1357) * _1279;
        float _1367 = _1247 * 0.5;
        float _1368 = _1257 * 0.5;
        float _1369 = _1267 * 0.5;
        float _1370 = dot(vec3(_1367, _1368, _1369), vec3(_1367, _1368, _1369));
        float _1375 = (_1370 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1370);
        float _1383 = (dot(vec3(_837, _838, _839), vec3(_1375 * _1367, _1375 * _1368, _1375 * _1369)) + 1.0) * 0.5;
        float _4393 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1392 = sqrt(((_1368 * _1368) + (_1367 * _1367)) + (_1369 * _1369)) / (_1280 + 9.9999997473787516355514526367188e-06);
        float _4404 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _1394 = _1393 * 2.0;
        float _1398 = (1.0 - _1393) / (_1393 + 1.0);
        float _4415 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _1408 = ((((1.0 - _1399) * (_1394 + 2.0)) * exp2(log2(isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * (_1394 + 1.0))) + _1399) * _1280;
        _1416 = _1247;
        _1418 = _1246;
        _1419 = _1245;
        _1420 = _1257;
        _1421 = _1256;
        _1422 = _1255;
        _1423 = _1267;
        _1424 = _1266;
        _1425 = _1265;
        _1426 = _1280;
        _1427 = _1279;
        _1428 = _1278;
        _1429 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)));
        _1430 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)));
        _1431 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)));
    }
    else
    {
        _1416 = _1417;
        _1418 = _1417;
        _1419 = _1417;
        _1420 = _1417;
        _1421 = _1417;
        _1422 = _1417;
        _1423 = _1417;
        _1424 = _1417;
        _1425 = _1417;
        _1426 = _1417;
        _1427 = _1417;
        _1428 = _1417;
        _1429 = 0.0;
        _1430 = 0.0;
        _1431 = 0.0;
    }
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1458 = fma(_1087, cbModelParam._m0[30u].z, fma(_1083, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1079));
        float _1462 = fma(_1087, cbModelParam._m0[31u].z, fma(_1083, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1079));
        float _1466 = fma(_1087, cbModelParam._m0[32u].z, fma(_1083, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1079));
        float _1489 = _1079 + _837;
        float _1490 = _1083 + _838;
        float _1491 = _1087 + _839;
        float _1501 = fma(_1491, cbModelParam._m0[30u].z, fma(_1490, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1489)) - _1458;
        float _1502 = fma(_1491, cbModelParam._m0[31u].z, fma(_1490, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1489)) - _1462;
        float _1503 = fma(_1491, cbModelParam._m0[32u].z, fma(_1490, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1489)) - _1466;
        float _1507 = inversesqrt(dot(vec3(_1501, _1502, _1503), vec3(_1501, _1502, _1503)));
        float _1520 = ((_1507 * _1501) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1458 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1521 = ((_1507 * _1502) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1462 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1522 = ((_1507 * _1503) / cbModelParam._m0[35u].z) + ((((((_1466 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1524 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1520, _1521, _1522), 0.0);
        vec4 _1531 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1520, _1521, _1522), 0.0);
        vec4 _1538 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1520, _1521, _1522), 0.0);
        vec4 _1545 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1520, _1521, _1522), 0.0);
        float _1557 = exp2((_1524.w + (-0.5)) * 20.0) * 2.0;
        float _1558 = _1557 * (_1524.x + (-0.5));
        float _1559 = _1557 * (_1524.y + (-0.5));
        float _1560 = _1557 * (_1524.z + (-0.5));
        float _1567 = exp2((_1531.w + (-0.5)) * 20.0) * 2.0;
        float _1568 = _1567 * (_1531.x + (-0.5));
        float _1569 = _1567 * (_1531.y + (-0.5));
        float _1570 = _1567 * (_1531.z + (-0.5));
        float _1577 = exp2((_1538.w + (-0.5)) * 20.0) * 2.0;
        float _1578 = _1577 * (_1538.x + (-0.5));
        float _1579 = _1577 * (_1538.y + (-0.5));
        float _1580 = _1577 * (_1538.z + (-0.5));
        float _1587 = exp2((_1545.w + (-0.5)) * 20.0) * 2.0;
        float _1588 = _1587 * (_1545.x + (-0.5));
        float _1589 = _1587 * (_1545.y + (-0.5));
        float _1590 = _1587 * (_1545.z + (-0.5));
        float _1591 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1592 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1593 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1594 = _1558 * 0.5;
        float _1595 = _1568 * 0.5;
        float _1596 = _1578 * 0.5;
        float _1597 = dot(vec3(_1594, _1595, _1596), vec3(_1594, _1595, _1596));
        float _1602 = (_1597 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1597);
        float _1610 = (dot(vec3(_837, _838, _839), vec3(_1602 * _1594, _1602 * _1595, _1602 * _1596)) + 1.0) * 0.5;
        float _4456 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1619 = sqrt(((_1595 * _1595) + (_1594 * _1594)) + (_1596 * _1596)) / (_1591 + 9.9999997473787516355514526367188e-06);
        float _4467 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _1621 = _1620 * 2.0;
        float _1625 = (1.0 - _1620) / (_1620 + 1.0);
        float _4478 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _1635 = ((((1.0 - _1626) * (_1621 + 2.0)) * exp2(log2(isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_1621 + 1.0))) + _1626) * _1591;
        float _1636 = _1559 * 0.5;
        float _1637 = _1569 * 0.5;
        float _1638 = _1579 * 0.5;
        float _1639 = dot(vec3(_1636, _1637, _1638), vec3(_1636, _1637, _1638));
        float _1644 = (_1639 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1639);
        float _1652 = (dot(vec3(_837, _838, _839), vec3(_1644 * _1636, _1644 * _1637, _1644 * _1638)) + 1.0) * 0.5;
        float _4489 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1661 = sqrt(((_1637 * _1637) + (_1636 * _1636)) + (_1638 * _1638)) / (_1592 + 9.9999997473787516355514526367188e-06);
        float _4500 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _1663 = _1662 * 2.0;
        float _1667 = (1.0 - _1662) / (_1662 + 1.0);
        float _4511 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1668 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _1677 = ((((1.0 - _1668) * (_1663 + 2.0)) * exp2(log2(isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (_1663 + 1.0))) + _1668) * _1592;
        float _1678 = _1560 * 0.5;
        float _1679 = _1570 * 0.5;
        float _1680 = _1580 * 0.5;
        float _1681 = dot(vec3(_1678, _1679, _1680), vec3(_1678, _1679, _1680));
        float _1686 = (_1681 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1681);
        float _1694 = (dot(vec3(_837, _838, _839), vec3(_1686 * _1678, _1686 * _1679, _1686 * _1680)) + 1.0) * 0.5;
        float _4522 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1703 = sqrt(((_1679 * _1679) + (_1678 * _1678)) + (_1680 * _1680)) / (_1593 + 9.9999997473787516355514526367188e-06);
        float _4533 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1704 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _1705 = _1704 * 2.0;
        float _1709 = (1.0 - _1704) / (_1704 + 1.0);
        float _4544 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1710 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
        float _1719 = ((((1.0 - _1710) * (_1705 + 2.0)) * exp2(log2(isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0))) * (_1705 + 1.0))) + _1710) * _1593;
        _1727 = _1560;
        _1728 = _1559;
        _1729 = _1558;
        _1730 = _1570;
        _1731 = _1569;
        _1732 = _1568;
        _1733 = _1580;
        _1734 = _1579;
        _1735 = _1578;
        _1736 = _1593;
        _1737 = _1592;
        _1738 = _1591;
        _1739 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)));
        _1740 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)));
        _1741 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)));
    }
    else
    {
        _1727 = _1417;
        _1728 = _1417;
        _1729 = _1417;
        _1730 = _1417;
        _1731 = _1417;
        _1732 = _1417;
        _1733 = _1417;
        _1734 = _1417;
        _1735 = _1417;
        _1736 = _1417;
        _1737 = _1417;
        _1738 = _1417;
        _1739 = 0.0;
        _1740 = 0.0;
        _1741 = 0.0;
    }
    float _1751 = (cbModelParam._m0[1u].x * (_1739 - _1429)) + _1429;
    float _1752 = (cbModelParam._m0[1u].x * (_1740 - _1430)) + _1430;
    float _1753 = (cbModelParam._m0[1u].x * (_1741 - _1431)) + _1431;
    float _1774 = fma(_1753, cbSceneParam._m0[89u].z, fma(_1752, cbSceneParam._m0[89u].y, _1751 * cbSceneParam._m0[89u].x));
    float _1777 = fma(_1753, cbSceneParam._m0[90u].z, fma(_1752, cbSceneParam._m0[90u].y, _1751 * cbSceneParam._m0[90u].x));
    float _1780 = fma(_1753, cbSceneParam._m0[91u].z, fma(_1752, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1751));
    float _1795 = _1023 * 0.5;
    float _1796 = _1024 * 0.5;
    float _1797 = _1025 * 0.5;
    float _1798 = dot(vec4(_1795, _1796, _1797, 1.0), vec4(_1729, _1732, _1735, _1738));
    float _1801 = dot(vec4(_1795, _1796, _1797, 1.0), vec4(_1728, _1731, _1734, _1737));
    float _1804 = dot(vec4(_1795, _1796, _1797, 1.0), vec4(_1727, _1730, _1733, _1736));
    float _1838;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1811 = dot(vec4(_1795, _1796, _1797, 1.0), vec4(_1416, _1420, _1423, _1426));
        float _1815 = dot(vec4(_1795, _1796, _1797, 1.0), vec4(_1418, _1421, _1424, _1427));
        float _1819 = dot(vec4(_1795, _1796, _1797, 1.0), vec4(_1419, _1422, _1425, _1428));
        float _1826 = dot(vec4(cbModelParam._m0[39u]), vec4(_1795, _1796, _1797, 1.0));
        _1838 = dot(vec3(isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0)), isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0)), isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1826) ? 0.0 : (isnan(0.0) ? _1826 : max(0.0, _1826))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1838 = 1.0;
    }
    float _1849;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1840 = dot(vec4(cbModelParam._m0[40u]), vec4(_1795, _1796, _1797, 1.0));
        _1849 = dot(vec3(isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0)), isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0)), isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1840) ? 0.0 : (isnan(0.0) ? _1840 : max(0.0, _1840))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1849 = 1.0;
    }
    float _1853 = (_1849 * cbModelParam._m0[1u].x) + (_1838 * (1.0 - cbModelParam._m0[1u].x));
    float _1863 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _840);
    float _1864 = isnan(_1863) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1863 : min(cbModelParam._m0[25u].z, _1863));
    float _1945;
    float _1947;
    float _1949;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1912 = fma(_1087, cbModelParam._m0[13u].z, fma(_1083, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1079)) + cbModelParam._m0[13u].w;
        float _1916 = fma(_1087, cbModelParam._m0[14u].z, fma(_1083, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1079)) + cbModelParam._m0[14u].w;
        float _1920 = fma(_1087, cbModelParam._m0[15u].z, fma(_1083, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1079)) + cbModelParam._m0[15u].w;
        float _1923 = fma(_1025, cbModelParam._m0[13u].z, fma(_1024, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1023));
        float _1926 = fma(_1025, cbModelParam._m0[14u].z, fma(_1024, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1023));
        float _1929 = fma(_1025, cbModelParam._m0[15u].z, fma(_1024, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1023));
        float _1957;
        if (_1923 > 0.0)
        {
            _1957 = abs((1.0 - _1912) / _1923);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1923 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1912 + 1.0) / _1923);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1957 = frontier_phi_17_15_ladder;
        }
        float _2129;
        if (_1926 > 0.0)
        {
            _2129 = abs((1.0 - _1916) / _1926);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1926 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1916 + 1.0) / _1926);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2129 = frontier_phi_26_22_ladder;
        }
        float _2424;
        if (_1929 > 0.0)
        {
            _2424 = abs((1.0 - _1920) / _1929);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1929 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1920 + 1.0) / _1929);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2424 = frontier_phi_38_33_ladder;
        }
        float _2426 = isnan(_2129) ? _1957 : (isnan(_1957) ? _2129 : min(_1957, _2129));
        float _2427 = isnan(_2424) ? _2426 : (isnan(_2426) ? _2424 : min(_2426, _2424));
        float _2431 = (_2427 * _1923) + _1912;
        float _2432 = (_2427 * _1926) + _1916;
        float _2433 = (_2427 * _1929) + _1920;
        float _2434 = _2427 * 9.9999997473787516355514526367188e-05;
        float _2436 = (-1.0) - _2434;
        float _2438 = _2434 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2433 > _2438) || ((_2433 < _2436) || ((_2432 > _2438) || ((_2432 < _2436) || ((_2431 < _2436) || (_2431 > _2438))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2578 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2433, cbModelParam._m0[9u].z, fma(_2432, cbModelParam._m0[9u].y, _2431 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2433, cbModelParam._m0[10u].z, fma(_2432, cbModelParam._m0[10u].y, _2431 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2433, cbModelParam._m0[11u].z, fma(_2432, cbModelParam._m0[11u].y, _2431 * cbModelParam._m0[11u].x))), _1864);
            frontier_phi_16_38_ladder = _2578.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2578.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2578.x * cbModelParam._m0[1u].y;
        }
        _1945 = frontier_phi_16_38_ladder_2;
        _1947 = frontier_phi_16_38_ladder_1;
        _1949 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1933 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1023, _1024, _1025), _1864);
        _1945 = _1933.x * cbModelParam._m0[1u].y;
        _1947 = _1933.y * cbModelParam._m0[1u].y;
        _1949 = _1933.z * cbModelParam._m0[1u].y;
    }
    float _1953 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _840);
    float _1954 = isnan(_1953) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1953 : min(cbModelParam._m0[25u].w, _1953));
    float _2044;
    float _2046;
    float _2048;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2008 = fma(_1087, cbModelParam._m0[21u].z, fma(_1083, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1079)) + cbModelParam._m0[21u].w;
        float _2012 = fma(_1087, cbModelParam._m0[22u].z, fma(_1083, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1079)) + cbModelParam._m0[22u].w;
        float _2016 = fma(_1087, cbModelParam._m0[23u].z, fma(_1083, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1079)) + cbModelParam._m0[23u].w;
        float _2019 = fma(_1025, cbModelParam._m0[21u].z, fma(_1024, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1023));
        float _2022 = fma(_1025, cbModelParam._m0[22u].z, fma(_1024, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1023));
        float _2025 = fma(_1025, cbModelParam._m0[23u].z, fma(_1024, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1023));
        float _2134;
        if (_2019 > 0.0)
        {
            _2134 = abs((1.0 - _2008) / _2019);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2019 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2008 + 1.0) / _2019);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2134 = frontier_phi_28_24_ladder;
        }
        float _2451;
        if (_2022 > 0.0)
        {
            _2451 = abs((1.0 - _2012) / _2022);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2022 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2012 + 1.0) / _2022);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2451 = frontier_phi_40_35_ladder;
        }
        float _2789;
        if (_2025 > 0.0)
        {
            _2789 = abs((1.0 - _2016) / _2025);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2025 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2016 + 1.0) / _2025);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2789 = frontier_phi_50_47_ladder;
        }
        float _2791 = isnan(_2451) ? _2134 : (isnan(_2134) ? _2451 : min(_2134, _2451));
        float _2792 = isnan(_2789) ? _2791 : (isnan(_2791) ? _2789 : min(_2791, _2789));
        float _2796 = (_2792 * _2019) + _2008;
        float _2797 = (_2792 * _2022) + _2012;
        float _2798 = (_2792 * _2025) + _2016;
        float _2799 = _2792 * 9.9999997473787516355514526367188e-05;
        float _2800 = (-1.0) - _2799;
        float _2802 = _2799 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2798 > _2802) || ((_2798 < _2800) || ((_2797 > _2802) || ((_2797 < _2800) || ((_2796 < _2800) || (_2796 > _2802))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2920 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2798, cbModelParam._m0[17u].z, fma(_2797, cbModelParam._m0[17u].y, _2796 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2798, cbModelParam._m0[18u].z, fma(_2797, cbModelParam._m0[18u].y, _2796 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2798, cbModelParam._m0[19u].z, fma(_2797, cbModelParam._m0[19u].y, _2796 * cbModelParam._m0[19u].x))), _1954);
            frontier_phi_25_50_ladder = _2920.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2920.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2920.x * cbModelParam._m0[1u].z;
        }
        _2044 = frontier_phi_25_50_ladder_2;
        _2046 = frontier_phi_25_50_ladder_1;
        _2048 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2028 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1023, _1024, _1025), _1954);
        _2044 = _2028.x * cbModelParam._m0[1u].z;
        _2046 = _2028.y * cbModelParam._m0[1u].z;
        _2048 = _2028.z * cbModelParam._m0[1u].z;
    }
    float _2061 = (((_1050 * _999) + _1051) * _1015) * ((cbModelParam._m0[1u].w * (_2044 - _1945)) + _1945);
    float _2063 = (((_1050 * _1001) + _1051) * _1015) * ((cbModelParam._m0[1u].w * (_2046 - _1947)) + _1947);
    float _2065 = (((_1050 * _1002) + _1051) * _1015) * ((cbModelParam._m0[1u].w * (_2048 - _1949)) + _1949);
    float _2068 = fma(_2065, cbSceneParam._m0[89u].z, fma(_2063, cbSceneParam._m0[89u].y, _2061 * cbSceneParam._m0[89u].x));
    float _2071 = fma(_2065, cbSceneParam._m0[90u].z, fma(_2063, cbSceneParam._m0[90u].y, _2061 * cbSceneParam._m0[90u].x));
    float _2074 = fma(_2065, cbSceneParam._m0[91u].z, fma(_2063, cbSceneParam._m0[91u].y, _2061 * cbSceneParam._m0[91u].x));
    float _2108 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2112 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2116 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2120 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2121 = _2108 / _2120;
    float _2122 = _2112 / _2120;
    float _2123 = _2116 / _2120;
    float _2270;
    float _2271;
    float _2272;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2150 = ((uint(_2123 > cbSceneParam._m0[59u].y) + uint(_2123 > cbSceneParam._m0[59u].x)) + uint(_2123 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2151 = _2150 + 43u;
        uint _2159 = _2150 + 44u;
        uint _2167 = _2150 + 45u;
        uint _2175 = _2150 + 46u;
        float _2186 = fma(_2120, cbSceneParam._m0[_2151].w, fma(_2116, cbSceneParam._m0[_2151].z, fma(_2112, cbSceneParam._m0[_2151].y, _2108 * cbSceneParam._m0[_2151].x)));
        float _2190 = fma(_2120, cbSceneParam._m0[_2159].w, fma(_2116, cbSceneParam._m0[_2159].z, fma(_2112, cbSceneParam._m0[_2159].y, _2108 * cbSceneParam._m0[_2159].x)));
        float _2198 = fma(_2120, cbSceneParam._m0[_2175].w, fma(_2116, cbSceneParam._m0[_2175].z, fma(_2112, cbSceneParam._m0[_2175].y, _2108 * cbSceneParam._m0[_2175].x)));
        float _2203 = cbSceneParam._m0[33u].z * _2198;
        float _2205 = cbSceneParam._m0[33u].w * _2198;
        float _2208 = fma(_2120, cbSceneParam._m0[_2167].w, fma(_2116, cbSceneParam._m0[_2167].z, fma(_2112, cbSceneParam._m0[_2167].y, _2108 * cbSceneParam._m0[_2167].x))) / _2198;
        float _2256 = (cbSceneParam._m0[33u].x - sqrt(((_2122 * _2122) + (_2121 * _2121)) + (_2123 * _2123))) * cbSceneParam._m0[33u].y;
        float _4670 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2263 = (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2203 + _2186) / _2198, (_2205 + _2190) / _2198), _2208), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2205 + _2186) / _2198, (_2190 - _2203) / _2198), _2208), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2186 - _2203) / _2198, (_2190 - _2205) / _2198), _2208), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2186 - _2205) / _2198, (_2203 + _2190) / _2198), _2208), 0.0)).x), vec4(0.25)));
        _2270 = 1.0 - (_2263 * cbSceneParam._m0[34u].x);
        _2271 = 1.0 - (_2263 * cbSceneParam._m0[34u].y);
        _2272 = 1.0 - (_2263 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2270 = 1.0;
        _2271 = 1.0;
        _2272 = 1.0;
    }
    float _2336;
    float _2338;
    float _2340;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2324 = fma(_2120, cbSceneParam._m0[63u].w, fma(_2116, cbSceneParam._m0[63u].z, fma(_2112, cbSceneParam._m0[63u].y, _2108 * cbSceneParam._m0[63u].x)));
        float _2325 = fma(_2120, cbSceneParam._m0[60u].w, fma(_2116, cbSceneParam._m0[60u].z, fma(_2112, cbSceneParam._m0[60u].y, _2108 * cbSceneParam._m0[60u].x))) / _2324;
        float _2326 = fma(_2120, cbSceneParam._m0[61u].w, fma(_2116, cbSceneParam._m0[61u].z, fma(_2112, cbSceneParam._m0[61u].y, _2108 * cbSceneParam._m0[61u].x))) / _2324;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2325 >= cbSceneParam._m0[64u].x) && (_2326 >= cbSceneParam._m0[64u].y)) && (_2325 <= cbSceneParam._m0[64u].z)) && (_2326 <= cbSceneParam._m0[64u].w))
        {
            float _2464 = fma(_2120, cbSceneParam._m0[62u].w, fma(_2116, cbSceneParam._m0[62u].z, fma(_2112, cbSceneParam._m0[62u].y, _2108 * cbSceneParam._m0[62u].x))) / _2324;
            float _2468 = isnan(cbSceneParam._m0[41u].w) ? _2464 : (isnan(_2464) ? cbSceneParam._m0[41u].w : max(_2464, cbSceneParam._m0[41u].w));
            float _2511 = (cbSceneParam._m0[33u].x - sqrt(((_2122 * _2122) + (_2121 * _2121)) + (_2123 * _2123))) * cbSceneParam._m0[33u].y;
            float _4686 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
            float _2518 = (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2325, cbSceneParam._m0[33u].w + _2326), _2468), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2325, _2326 - cbSceneParam._m0[33u].z), _2468), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2325 - cbSceneParam._m0[33u].z, _2326 - cbSceneParam._m0[33u].w), _2468), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2325 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2326), _2468), 0.0)).x), vec4(0.25)));
            float _2522 = 1.0 - (_2518 * cbSceneParam._m0[34u].x);
            float _2523 = 1.0 - (_2518 * cbSceneParam._m0[34u].y);
            float _2524 = 1.0 - (_2518 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2524) ? _2272 : (isnan(_2272) ? _2524 : min(_2272, _2524));
            frontier_phi_37_36_ladder_1 = isnan(_2523) ? _2271 : (isnan(_2271) ? _2523 : min(_2271, _2523));
            frontier_phi_37_36_ladder_2 = isnan(_2522) ? _2270 : (isnan(_2270) ? _2522 : min(_2270, _2522));
        }
        else
        {
            frontier_phi_37_36_ladder = _2272;
            frontier_phi_37_36_ladder_1 = _2271;
            frontier_phi_37_36_ladder_2 = _2270;
        }
        _2336 = frontier_phi_37_36_ladder_2;
        _2338 = frontier_phi_37_36_ladder_1;
        _2340 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2336 = _2270;
        _2338 = _2271;
        _2340 = _2272;
    }
    uvec4 _2345 = floatBitsToUint(cbInstanceData._m0[_282 + 5u]);
    uint _2347 = _2345.x * 14u;
    uint _2348 = _2347 + 13u;
    float _2355 = _1015 + (-1.0);
    float _2360 = (cbLight._m0[_2348].x * _2355) + 1.0;
    float _2361 = (cbLight._m0[_2348].y * _2355) + 1.0;
    float _2362 = (cbLight._m0[_2348].z * _2355) + 1.0;
    float _2363 = (cbLight._m0[_2348].w * _2355) + 1.0;
    uint _2364 = _2347 + 5u;
    float _2370 = isnan(1.0) ? _2361 : (isnan(_2361) ? 1.0 : min(_2361, 1.0));
    uint _2374 = _2347 + 4u;
    float _2383 = isnan(1.0) ? _2360 : (isnan(_2360) ? 1.0 : min(_2360, 1.0));
    uint _2387 = _2347 | 1u;
    float _2398 = dot(vec3(cbLight._m0[_2347].xyz), vec3(_837, _838, _839));
    float _2401 = dot(vec3(cbLight._m0[_2387].xyz), vec3(_837, _838, _839));
    float _4722 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
    float _4733 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _2406 = (isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0))) * 0.3183098733425140380859375;
    float _2408 = (isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0))) * 0.3183098733425140380859375;
    float _2415 = ((cbLight._m0[_2364].x * _2370) * _2408) + (((cbLight._m0[_2374].x * _2336) * _2383) * _2406);
    float _2416 = ((_2370 * cbLight._m0[_2364].y) * _2408) + (((cbLight._m0[_2374].y * _2338) * _2383) * _2406);
    float _2417 = ((_2370 * cbLight._m0[_2364].z) * _2408) + (((cbLight._m0[_2374].z * _2340) * _2383) * _2406);
    uvec4 _2421 = floatBitsToUint(cbLight._m0[_2347 + 12u]);
    bool _2423 = _2421.x == 0u;
    float _2525;
    float _2527;
    float _2529;
    if (_2423)
    {
        _2525 = _2415;
        _2527 = _2416;
        _2529 = _2417;
    }
    else
    {
        uint _2533 = _2347 + 6u;
        float _2549 = (dot(vec3(cbLight._m0[_2347 + 2u].xyz), vec3(_837, _838, _839)) * 0.5) + 0.5;
        float _2550 = _2549 * _2549;
        float _4744 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        float _2551 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
        float _2552 = isnan(1.0) ? _2362 : (isnan(_2362) ? 1.0 : min(_2362, 1.0));
        _2525 = (((cbLight._m0[_2533].x * 0.3183098733425140380859375) * _2551) * _2552) + _2415;
        _2527 = (((cbLight._m0[_2533].y * 0.3183098733425140380859375) * _2551) * _2552) + _2416;
        _2529 = (((cbLight._m0[_2533].z * 0.3183098733425140380859375) * _2551) * _2552) + _2417;
    }
    bool _2532 = _2421.y == 0u;
    float _2587;
    float _2589;
    float _2591;
    if (_2532)
    {
        _2587 = _2525;
        _2589 = _2527;
        _2591 = _2529;
    }
    else
    {
        uint _2760 = _2347 + 7u;
        float _2776 = (dot(vec3(cbLight._m0[_2347 + 3u].xyz), vec3(_837, _838, _839)) * 0.5) + 0.5;
        float _2777 = _2776 * _2776;
        float _4760 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
        float _2778 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
        float _2779 = isnan(1.0) ? _2363 : (isnan(_2363) ? 1.0 : min(_2363, 1.0));
        _2587 = (((cbLight._m0[_2760].x * 0.3183098733425140380859375) * _2778) * _2779) + _2525;
        _2589 = (((cbLight._m0[_2760].y * 0.3183098733425140380859375) * _2778) * _2779) + _2527;
        _2591 = (((cbLight._m0[_2760].z * 0.3183098733425140380859375) * _2778) * _2779) + _2529;
    }
    uint _2594 = _2347 + 8u;
    float _2607 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2347].w)) * _840) * 0.949999988079071044921875);
    float _2608 = _2607 * _2607;
    float _2609 = cbLight._m0[_2347].x + _917;
    float _2610 = cbLight._m0[_2347].y + _918;
    float _2611 = cbLight._m0[_2347].z + _919;
    float _2615 = inversesqrt(dot(vec3(_2609, _2610, _2611), vec3(_2609, _2610, _2611)));
    float _2616 = _2615 * _2609;
    float _2617 = _2615 * _2610;
    float _2618 = _2615 * _2611;
    float _2619 = dot(vec3(_837, _838, _839), vec3(cbLight._m0[_2347].xyz));
    float _4776 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
    float _2622 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
    float _4787 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
    float _2623 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
    float _2624 = dot(vec3(_837, _838, _839), vec3(_2616, _2617, _2618));
    float _4798 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
    float _2627 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
    float _2628 = dot(vec3(cbLight._m0[_2347].xyz), vec3(_2616, _2617, _2618));
    float _4809 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
    float _2632 = _2608 * _2608;
    float _2636 = ((_2627 * _2627) * (_2632 + (-1.0))) + 1.0;
    float _2644 = exp2(log2(1.0 - (isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0)))) * 5.0);
    float _2645 = 0.959999978542327880859375 - _996;
    float _2647 = 0.959999978542327880859375 - _997;
    float _2648 = 0.959999978542327880859375 - _998;
    float _2655 = 1.0 - _2608;
    float _2666 = (0.5 / (((_2623 * ((_2622 * _2655) + _2608)) + 9.9999999392252902907785028219223e-09) + (((_2623 * _2655) + _2608) * _2622))) * _2622;
    float _4820 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
    float _2668 = (isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0))) * (_2632 / ((_2636 * _2636) * 3.141590118408203125));
    uint _2682 = _2347 + 9u;
    float _2693 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2387].w)) * _840) * 0.949999988079071044921875);
    float _2694 = _2693 * _2693;
    float _2695 = cbLight._m0[_2387].x + _917;
    float _2696 = cbLight._m0[_2387].y + _918;
    float _2697 = cbLight._m0[_2387].z + _919;
    float _2701 = inversesqrt(dot(vec3(_2695, _2696, _2697), vec3(_2695, _2696, _2697)));
    float _2702 = _2701 * _2695;
    float _2703 = _2701 * _2696;
    float _2704 = _2701 * _2697;
    float _2705 = dot(vec3(_837, _838, _839), vec3(cbLight._m0[_2387].xyz));
    float _4831 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
    float _2708 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
    float _2709 = dot(vec3(_837, _838, _839), vec3(_2702, _2703, _2704));
    float _4842 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
    float _2712 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
    float _2713 = dot(vec3(cbLight._m0[_2387].xyz), vec3(_2702, _2703, _2704));
    float _4853 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
    float _2717 = _2694 * _2694;
    float _2721 = ((_2712 * _2712) * (_2717 + (-1.0))) + 1.0;
    float _2728 = exp2(log2(1.0 - (isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0)))) * 5.0);
    float _2735 = 1.0 - _2694;
    float _2745 = (0.5 / (((_2623 * ((_2708 * _2735) + _2694)) + 9.9999999392252902907785028219223e-09) + (((_2623 * _2735) + _2694) * _2708))) * _2708;
    float _4864 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
    float _2747 = (isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0))) * (_2717 / ((_2721 * _2721) * 3.141590118408203125));
    float _2757 = (((((_2728 * _2645) + _999) * cbLight._m0[_2682].x) * _2747) * _2370) + ((((cbLight._m0[_2594].x * _2336) * ((_2644 * _2645) + _999)) * _2668) * _2383);
    float _2758 = (((((_2728 * _2647) + _1001) * cbLight._m0[_2682].y) * _2747) * _2370) + ((((cbLight._m0[_2594].y * _2338) * ((_2644 * _2647) + _1001)) * _2668) * _2383);
    float _2759 = (((((_2728 * _2648) + _1002) * cbLight._m0[_2682].z) * _2747) * _2370) + ((((cbLight._m0[_2594].z * _2340) * ((_2644 * _2648) + _1002)) * _2668) * _2383);
    float _2815;
    float _2817;
    float _2819;
    if (_2423)
    {
        _2815 = _2757;
        _2817 = _2758;
        _2819 = _2759;
    }
    else
    {
        uint _2821 = _2347 + 2u;
        uint _2825 = _2347 + 10u;
        float _2839 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2821].w)) * _840) * 0.949999988079071044921875);
        float _2840 = _2839 * _2839;
        float _2841 = cbLight._m0[_2821].x + _917;
        float _2842 = cbLight._m0[_2821].y + _918;
        float _2843 = cbLight._m0[_2821].z + _919;
        float _2847 = inversesqrt(dot(vec3(_2841, _2842, _2843), vec3(_2841, _2842, _2843)));
        float _2848 = _2847 * _2841;
        float _2849 = _2847 * _2842;
        float _2850 = _2847 * _2843;
        float _2851 = dot(vec3(_837, _838, _839), vec3(cbLight._m0[_2821].xyz));
        float _4875 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
        float _2854 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
        float _2855 = dot(vec3(_837, _838, _839), vec3(_2848, _2849, _2850));
        float _4886 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
        float _2858 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
        float _2859 = dot(vec3(cbLight._m0[_2821].xyz), vec3(_2848, _2849, _2850));
        float _4897 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
        float _2863 = _2840 * _2840;
        float _2867 = ((_2858 * _2858) * (_2863 + (-1.0))) + 1.0;
        float _2874 = exp2(log2(1.0 - (isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0)))) * 5.0);
        float _2881 = 1.0 - _2840;
        float _2891 = (0.5 / (((_2623 * ((_2854 * _2881) + _2840)) + 9.9999999392252902907785028219223e-09) + (((_2623 * _2881) + _2840) * _2854))) * _2854;
        float _4908 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
        float _2893 = (isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0))) * (_2863 / ((_2867 * _2867) * 3.141590118408203125));
        float _2894 = isnan(1.0) ? _2362 : (isnan(_2362) ? 1.0 : min(_2362, 1.0));
        _2815 = (((((_2874 * _2645) + _999) * cbLight._m0[_2825].x) * _2893) * _2894) + _2757;
        _2817 = (((((_2874 * _2647) + _1001) * cbLight._m0[_2825].y) * _2893) * _2894) + _2758;
        _2819 = (((((_2874 * _2648) + _1002) * cbLight._m0[_2825].z) * _2893) * _2894) + _2759;
    }
    float _2925;
    float _2927;
    float _2929;
    if (_2532)
    {
        _2925 = _2815;
        _2927 = _2817;
        _2929 = _2819;
    }
    else
    {
        uint _2936 = _2347 + 3u;
        uint _2940 = _2347 + 11u;
        float _2954 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2936].w)) * _840) * 0.949999988079071044921875);
        float _2955 = _2954 * _2954;
        float _2956 = cbLight._m0[_2936].x + _917;
        float _2957 = cbLight._m0[_2936].y + _918;
        float _2958 = cbLight._m0[_2936].z + _919;
        float _2962 = inversesqrt(dot(vec3(_2956, _2957, _2958), vec3(_2956, _2957, _2958)));
        float _2963 = _2962 * _2956;
        float _2964 = _2962 * _2957;
        float _2965 = _2962 * _2958;
        float _2966 = dot(vec3(_837, _838, _839), vec3(cbLight._m0[_2936].xyz));
        float _4924 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
        float _2969 = isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0));
        float _2970 = dot(vec3(_837, _838, _839), vec3(_2963, _2964, _2965));
        float _4935 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
        float _2973 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
        float _2974 = dot(vec3(cbLight._m0[_2936].xyz), vec3(_2963, _2964, _2965));
        float _4946 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
        float _2978 = _2955 * _2955;
        float _2982 = ((_2973 * _2973) * (_2978 + (-1.0))) + 1.0;
        float _2989 = exp2(log2(1.0 - (isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0)))) * 5.0);
        float _2996 = 1.0 - _2955;
        float _3006 = (0.5 / (((_2623 * ((_2969 * _2996) + _2955)) + 9.9999999392252902907785028219223e-09) + (((_2623 * _2996) + _2955) * _2969))) * _2969;
        float _4957 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
        float _3008 = (isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0))) * (_2978 / ((_2982 * _2982) * 3.141590118408203125));
        float _3009 = isnan(1.0) ? _2363 : (isnan(_2363) ? 1.0 : min(_2363, 1.0));
        _2925 = (((((_2989 * _2645) + _999) * cbLight._m0[_2940].x) * _3008) * _3009) + _2815;
        _2927 = (((((_2989 * _2647) + _1001) * cbLight._m0[_2940].y) * _3008) * _3009) + _2817;
        _2929 = (((((_2989 * _2648) + _1002) * cbLight._m0[_2940].z) * _3008) * _3009) + _2819;
    }
    float _3075;
    float _3077;
    float _3079;
    float _3081;
    float _3083;
    float _3085;
    if (_2345.y == 0u)
    {
        uvec4 _3030 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3031 = _3030.x;
        uint _3042 = uint((float(_3030.y) * floor(float(uint(cbSceneParam._m0[85u].y * _938) / _3031))) + floor(float(uint(cbSceneParam._m0[85u].x * _937) / _3031)));
        float _3052 = (log2(_2123 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3053 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
        uint _3056 = uint(isnan(14.0) ? _3053 : (isnan(_3053) ? 14.0 : min(_3053, 14.0)));
        uvec4 _3061 = texelFetch(g_lightClusterGridBuffer, int(((_3056 << 2u) + (_3042 << 6u)) >> 2u));
        uint _3062 = _3061.x;
        uint _3063 = _3030.z;
        float _3142;
        float _3144;
        float _3146;
        float _3148;
        float _3150;
        float _3152;
        if (((((1u << ((_3063 >> 4u) & 15u)) + 4294967295u) & _3062) == 0u) || ((_3063 & 240u) == 0u))
        {
            _3142 = 0.0;
            _3144 = 0.0;
            _3146 = 0.0;
            _3148 = 0.0;
            _3150 = 0.0;
            _3152 = 0.0;
        }
        else
        {
            float _3143;
            float _3145;
            float _3147;
            float _3149;
            float _3151;
            float _3153;
            float _3295 = 0.0;
            float _3296 = 0.0;
            float _3297 = 0.0;
            float _3298 = 0.0;
            float _3299 = 0.0;
            float _3300 = 0.0;
            uint _3301 = 0u;
            uint _3310;
            bool _3311;
            for (;;)
            {
                _3310 = texelFetch(g_lightClassification, int((((_3056 << 5u) + (_3042 << 9u)) + (_3301 << 2u)) >> 2u)).x;
                _3311 = _3310 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3311)
                {
                    frontier_phi_71_pred = _3300;
                    frontier_phi_71_pred_1 = _3299;
                    frontier_phi_71_pred_2 = _3298;
                    frontier_phi_71_pred_3 = _3297;
                    frontier_phi_71_pred_4 = _3296;
                    frontier_phi_71_pred_5 = _3295;
                }
                else
                {
                    float _3440;
                    float _3441;
                    float _3442;
                    float _3443;
                    float _3444;
                    float _3445;
                    uint _3446;
                    _3440 = _3295;
                    _3441 = _3296;
                    _3442 = _3297;
                    _3443 = _3298;
                    _3444 = _3299;
                    _3445 = _3300;
                    _3446 = _3310;
                    float _3367;
                    float _3368;
                    float _3369;
                    float _3370;
                    float _3371;
                    float _3372;
                    for (;;)
                    {
                        uint _3450 = uint(findLSB(_3446)) + (_3301 << 5u);
                        uint _3447 = (_3446 + 4294967295u) & _3446;
                        uint _3452 = _3450 * 48u;
                        vec4 _3466 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3452)).x, texelFetch(g_PointLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3452 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3452 + 3u)).x));
                        uint _3472 = (_3450 * 48u) + 4u;
                        vec4 _3485 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3472)).x, texelFetch(g_PointLightRenderingBuffer, int(_3472 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3472 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3472 + 3u)).x));
                        uint _3491 = (_3450 * 48u) + 8u;
                        vec3 _3502 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3491)).x, texelFetch(g_PointLightRenderingBuffer, int(_3491 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3491 + 2u)).x));
                        float _3506 = _3466.x - _2121;
                        float _3507 = _3466.y - _2122;
                        float _3508 = _3466.z - _2123;
                        float _3509 = dot(vec3(_3506, _3507, _3508), vec3(_3506, _3507, _3508));
                        float _3512 = inversesqrt(_3509);
                        float _3513 = _3512 * _3506;
                        float _3514 = _3512 * _3507;
                        float _3515 = _3512 * _3508;
                        float _3516 = dot(vec3(_956, _959, _962), vec3(_3513, _3514, _3515));
                        float _3521 = 1.0 - (_3509 * _3466.w);
                        float _4983 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                        float _3522 = isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0));
                        float _3523 = sqrt(_3509) * _3485.w;
                        float _3526 = 1.39999997615814208984375 / (_3523 + 1.39999997615814208984375);
                        float _3527 = _3526 * _3526;
                        float _3530 = ((1.0 - _3527) * _3516) + _3527;
                        float _3533 = _3523 * _3523;
                        float _3537 = ((isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0))) * _3522) / ((_3533 * 0.699999988079071044921875) + 1.0);
                        float _3541 = (-0.0) - _2121;
                        float _3542 = (-0.0) - _2122;
                        float _3543 = (-0.0) - _2123;
                        float _3547 = inversesqrt(dot(vec3(_3541, _3542, _3543), vec3(_3541, _3542, _3543)));
                        float _3548 = _3547 * _3541;
                        float _3549 = _3547 * _3542;
                        float _3550 = _3547 * _3543;
                        float _3557 = exp2(log2(1.0 / ((_3533 * 3.5) + 5.0)) * 0.25);
                        float _3558 = 1.0 - _1031;
                        float _3565 = sqrt(1.0 - ((1.0 - (_3558 * _3558)) * (1.0 - (_3557 * _3557))));
                        float _3566 = _3565 * _3565;
                        float _3567 = _3566 * _3566;
                        float _3568 = _3548 + _3513;
                        float _3569 = _3549 + _3514;
                        float _3570 = _3550 + _3515;
                        float _3574 = inversesqrt(dot(vec3(_3568, _3569, _3570), vec3(_3568, _3569, _3570)));
                        float _3578 = dot(vec3(_956, _959, _962), vec3(_3548, _3549, _3550));
                        float _4999 = isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0));
                        float _3581 = isnan(1.0) ? _4999 : (isnan(_4999) ? 1.0 : min(_4999, 1.0));
                        float _3582 = dot(vec3(_956, _959, _962), vec3(_3574 * _3568, _3574 * _3569, _3574 * _3570));
                        float _5010 = isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0));
                        float _3585 = isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0));
                        float _3589 = ((_3585 * _3585) * (_3567 + (-1.0))) + 1.0;
                        float _3590 = _3526 * _3566;
                        float _3591 = _3590 * _3590;
                        float _3594 = ((1.0 - _3591) * _3516) + _3591;
                        float _5021 = isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0));
                        float _3595 = isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0));
                        float _3596 = 1.0 - _3566;
                        float _3606 = (0.5 / (((_3595 * ((_3581 * _3596) + _3566)) + 9.9999999392252902907785028219223e-09) + (((_3595 * _3596) + _3566) * _3581))) * _3595;
                        float _5032 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                        float _3617 = (((_3567 * 3.1415927410125732421875) * (isnan(1.0) ? _5032 : (isnan(_5032) ? 1.0 : min(_5032, 1.0)))) / ((_3589 * _3589) * ((_3533 * 2.1991131305694580078125) + 3.141590118408203125))) * _3522;
                        _3370 = (_3537 * _3485.x) + _3443;
                        _3371 = (_3537 * _3485.y) + _3444;
                        _3372 = (_3537 * _3485.z) + _3445;
                        _3367 = (_3617 * _3502.x) + _3440;
                        _3368 = (_3617 * _3502.y) + _3441;
                        _3369 = (_3617 * _3502.z) + _3442;
                        if (_3447 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3440 = _3367;
                            _3441 = _3368;
                            _3442 = _3369;
                            _3443 = _3370;
                            _3444 = _3371;
                            _3445 = _3372;
                            _3446 = _3447;
                        }
                    }
                    frontier_phi_71_pred = _3372;
                    frontier_phi_71_pred_1 = _3371;
                    frontier_phi_71_pred_2 = _3370;
                    frontier_phi_71_pred_3 = _3369;
                    frontier_phi_71_pred_4 = _3368;
                    frontier_phi_71_pred_5 = _3367;
                }
                _3153 = frontier_phi_71_pred;
                _3151 = frontier_phi_71_pred_1;
                _3149 = frontier_phi_71_pred_2;
                _3147 = frontier_phi_71_pred_3;
                _3145 = frontier_phi_71_pred_4;
                _3143 = frontier_phi_71_pred_5;
                uint _3302 = _3301 + 1u;
                if (_3302 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3295 = _3143;
                    _3296 = _3145;
                    _3297 = _3147;
                    _3298 = _3149;
                    _3299 = _3151;
                    _3300 = _3153;
                    _3301 = _3302;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3142 = _3143;
            _3144 = _3145;
            _3146 = _3147;
            _3148 = _3149;
            _3150 = _3151;
            _3152 = _3153;
        }
        uvec4 _3156 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3157 = _3156.z;
        uint _3159 = (_3157 >> 8u) & 15u;
        float _3263;
        float _3265;
        float _3267;
        float _3269;
        float _3271;
        float _3273;
        if (((4294967295u << _3159) & _3062) == 0u)
        {
            _3263 = _3142;
            _3265 = _3144;
            _3267 = _3146;
            _3269 = _3148;
            _3271 = _3150;
            _3273 = _3152;
        }
        else
        {
            float _3288 = inversesqrt(dot(vec3(_2121, _2122, _2123), vec3(_2121, _2122, _2123)));
            float _3289 = _3288 * _2121;
            float _3290 = _3288 * _2122;
            float _3291 = _3288 * _2123;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3159 < ((_3157 >> 12u) & 15u))
            {
                float _3264;
                float _3266;
                float _3268;
                float _3270;
                float _3272;
                float _3274;
                float _3423 = _3142;
                float _3424 = _3144;
                float _3425 = _3146;
                float _3426 = _3148;
                float _3427 = _3150;
                float _3428 = _3152;
                uint _3429 = _3159;
                uint _3438;
                bool _3439;
                for (;;)
                {
                    _3438 = texelFetch(g_lightClassification, int((((_3056 << 5u) + (_3042 << 9u)) + (_3429 << 2u)) >> 2u)).x;
                    _3439 = _3438 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3439)
                    {
                        frontier_phi_82_pred = _3428;
                        frontier_phi_82_pred_1 = _3427;
                        frontier_phi_82_pred_2 = _3426;
                        frontier_phi_82_pred_3 = _3425;
                        frontier_phi_82_pred_4 = _3424;
                        frontier_phi_82_pred_5 = _3423;
                    }
                    else
                    {
                        float _3631;
                        float _3632;
                        float _3633;
                        float _3634;
                        float _3635;
                        float _3636;
                        float _3924;
                        float _3925;
                        float _3926;
                        float _3927;
                        float _3928;
                        float _3929;
                        float _3644 = _3423;
                        float _3645 = _3424;
                        float _3646 = _3425;
                        float _3647 = _3426;
                        float _3648 = _3427;
                        float _3649 = _3428;
                        uint _3650 = _3438;
                        uint _3651;
                        vec4 _3676;
                        float _3677;
                        vec4 _3692;
                        vec3 _3704;
                        vec4 _3719;
                        vec4 _3734;
                        float _3780;
                        bool _3781;
                        for (;;)
                        {
                            uint _3661 = ((_3429 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3650));
                            _3651 = (_3650 + 4294967295u) & _3650;
                            uint _3663 = _3661 * 40u;
                            _3676 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3663)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 3u)).x));
                            _3677 = _3676.w;
                            uint _3679 = (_3661 * 40u) + 4u;
                            _3692 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3679)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 3u)).x));
                            uint _3694 = (_3661 * 40u) + 8u;
                            _3704 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3694)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 2u)).x));
                            uint _3706 = (_3661 * 40u) + 16u;
                            _3719 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3706)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 3u)).x));
                            uint _3721 = (_3661 * 40u) + 20u;
                            _3734 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3721)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3721 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3721 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3721 + 3u)).x));
                            uint _3736 = (_3661 * 40u) + 24u;
                            vec4 _3749 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3736)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 3u)).x));
                            uint _3755 = (_3661 * 40u) + 28u;
                            vec4 _3768 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3755)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3755 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3755 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3755 + 3u)).x));
                            _3780 = fma(_2123, _3768.z, fma(_2122, _3768.y, _3768.x * _2121)) + _3768.w;
                            _3781 = !((fma(_2123, _3749.z, fma(_2122, _3749.y, _3749.x * _2121)) + _3749.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3781)
                            {
                                float _3808 = _3676.x - _2121;
                                float _3809 = _3676.y - _2122;
                                float _3810 = _3676.z - _2123;
                                float _3811 = dot(vec3(_3808, _3809, _3810), vec3(_3808, _3809, _3810));
                                float _3814 = inversesqrt(_3811);
                                float _3815 = _3814 * _3808;
                                float _3816 = _3814 * _3809;
                                float _3817 = _3814 * _3810;
                                float _3821 = 1.0 - (_3811 / (_3677 * _3677));
                                float _5043 = isnan(0.0) ? _3821 : (isnan(_3821) ? 0.0 : max(_3821, 0.0));
                                float _3822 = isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0));
                                float _3826 = sqrt(_3811) * _3692.w;
                                float _3828 = 1.39999997615814208984375 / (_3826 + 1.39999997615814208984375);
                                float _3829 = _3828 * _3828;
                                float _3832 = ((1.0 - _3829) * dot(vec3(_3815, _3816, _3817), vec3(_956, _959, _962))) + _3829;
                                float _3835 = _3826 * _3826;
                                float _3839 = (fma(_2123, _3719.z, fma(_2122, _3719.y, _3719.x * _2121)) + _3719.w) / _3780;
                                float _3840 = (fma(_2123, _3734.z, fma(_2122, _3734.y, _3734.x * _2121)) + _3734.w) / _3780;
                                float _3844 = 1.0 - dot(vec2(_3839, _3840), vec2(_3839, _3840));
                                float _5059 = isnan(0.0) ? _3844 : (isnan(_3844) ? 0.0 : max(_3844, 0.0));
                                float _3845 = isnan(1.0) ? _5059 : (isnan(_5059) ? 1.0 : min(_5059, 1.0));
                                float _3846 = _3845 * (((isnan(0.0) ? _3832 : (isnan(_3832) ? 0.0 : max(_3832, 0.0))) * _3822) / ((_3835 * 0.699999988079071044921875) + 1.0));
                                float _3858 = exp2(log2(1.0 / ((_3835 * 3.5) + 5.0)) * 0.25);
                                float _3859 = 1.0 - _1031;
                                float _3866 = sqrt(1.0 - ((1.0 - (_3859 * _3859)) * (1.0 - (_3858 * _3858))));
                                float _3867 = _3866 * _3866;
                                float _3868 = _3867 * _3867;
                                float _3869 = _3815 - _3289;
                                float _3870 = _3816 - _3290;
                                float _3871 = _3817 - _3291;
                                float _3875 = inversesqrt(dot(vec3(_3869, _3870, _3871), vec3(_3869, _3870, _3871)));
                                float _3879 = dot(vec3(_956, _959, _962), vec3((-0.0) - _3289, (-0.0) - _3290, (-0.0) - _3291));
                                float _5070 = isnan(0.0) ? _3879 : (isnan(_3879) ? 0.0 : max(_3879, 0.0));
                                float _3882 = isnan(1.0) ? _5070 : (isnan(_5070) ? 1.0 : min(_5070, 1.0));
                                float _3883 = dot(vec3(_956, _959, _962), vec3(_3875 * _3869, _3875 * _3870, _3875 * _3871));
                                float _5081 = isnan(0.0) ? _3883 : (isnan(_3883) ? 0.0 : max(_3883, 0.0));
                                float _3886 = isnan(1.0) ? _5081 : (isnan(_5081) ? 1.0 : min(_5081, 1.0));
                                float _3890 = ((_3886 * _3886) * (_3868 + (-1.0))) + 1.0;
                                float _3891 = _3828 * _3867;
                                float _3892 = _3891 * _3891;
                                float _3898 = ((1.0 - _3892) * dot(vec3(_956, _959, _962), vec3(_3815, _3816, _3817))) + _3892;
                                float _5092 = isnan(0.0) ? _3898 : (isnan(_3898) ? 0.0 : max(_3898, 0.0));
                                float _3899 = isnan(1.0) ? _5092 : (isnan(_5092) ? 1.0 : min(_5092, 1.0));
                                float _3900 = 1.0 - _3867;
                                float _3910 = (0.5 / (((_3899 * ((_3882 * _3900) + _3867)) + 9.9999999392252902907785028219223e-09) + (((_3899 * _3900) + _3867) * _3882))) * _3899;
                                float _5103 = isnan(0.0) ? _3910 : (isnan(_3910) ? 0.0 : max(_3910, 0.0));
                                float _3920 = (_3845 * _3822) * (((_3868 * 3.1415927410125732421875) * (isnan(1.0) ? _5103 : (isnan(_5103) ? 1.0 : min(_5103, 1.0)))) / ((_3890 * _3890) * ((_3835 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3846 * _3692.z;
                                frontier_phi_88_pred_1 = _3846 * _3692.y;
                                frontier_phi_88_pred_2 = _3846 * _3692.x;
                                frontier_phi_88_pred_3 = _3920 * _3704.z;
                                frontier_phi_88_pred_4 = _3920 * _3704.y;
                                frontier_phi_88_pred_5 = _3920 * _3704.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3929 = frontier_phi_88_pred;
                            _3928 = frontier_phi_88_pred_1;
                            _3927 = frontier_phi_88_pred_2;
                            _3926 = frontier_phi_88_pred_3;
                            _3925 = frontier_phi_88_pred_4;
                            _3924 = frontier_phi_88_pred_5;
                            _3634 = _3927 + _3647;
                            _3635 = _3928 + _3648;
                            _3636 = _3929 + _3649;
                            _3631 = _3924 + _3644;
                            _3632 = _3925 + _3645;
                            _3633 = _3926 + _3646;
                            if (_3651 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3644 = _3631;
                                _3645 = _3632;
                                _3646 = _3633;
                                _3647 = _3634;
                                _3648 = _3635;
                                _3649 = _3636;
                                _3650 = _3651;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3636;
                        frontier_phi_82_pred_1 = _3635;
                        frontier_phi_82_pred_2 = _3634;
                        frontier_phi_82_pred_3 = _3633;
                        frontier_phi_82_pred_4 = _3632;
                        frontier_phi_82_pred_5 = _3631;
                    }
                    _3274 = frontier_phi_82_pred;
                    _3272 = frontier_phi_82_pred_1;
                    _3270 = frontier_phi_82_pred_2;
                    _3268 = frontier_phi_82_pred_3;
                    _3266 = frontier_phi_82_pred_4;
                    _3264 = frontier_phi_82_pred_5;
                    uint _3430 = _3429 + 1u;
                    if (_3430 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3423 = _3264;
                        _3424 = _3266;
                        _3425 = _3268;
                        _3426 = _3270;
                        _3427 = _3272;
                        _3428 = _3274;
                        _3429 = _3430;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3270;
                frontier_phi_63_64_ladder_1 = _3274;
                frontier_phi_63_64_ladder_2 = _3272;
                frontier_phi_63_64_ladder_3 = _3268;
                frontier_phi_63_64_ladder_4 = _3266;
                frontier_phi_63_64_ladder_5 = _3264;
            }
            else
            {
                frontier_phi_63_64_ladder = _3148;
                frontier_phi_63_64_ladder_1 = _3152;
                frontier_phi_63_64_ladder_2 = _3150;
                frontier_phi_63_64_ladder_3 = _3146;
                frontier_phi_63_64_ladder_4 = _3144;
                frontier_phi_63_64_ladder_5 = _3142;
            }
            _3263 = frontier_phi_63_64_ladder_5;
            _3265 = frontier_phi_63_64_ladder_4;
            _3267 = frontier_phi_63_64_ladder_3;
            _3269 = frontier_phi_63_64_ladder;
            _3271 = frontier_phi_63_64_ladder_2;
            _3273 = frontier_phi_63_64_ladder_1;
        }
        float _3278 = isnan(1.0) ? _1015 : (isnan(_1015) ? 1.0 : min(_1015, 1.0));
        _3075 = (_3278 * _3269) + _2587;
        _3077 = (_3278 * _3271) + _2589;
        _3079 = (_3278 * _3273) + _2591;
        _3081 = ((_3263 * _999) * _3278) + _2925;
        _3083 = ((_3265 * _1001) * _3278) + _2927;
        _3085 = ((_3267 * _1002) * _3278) + _2929;
    }
    else
    {
        _3075 = _2587;
        _3077 = _2589;
        _3079 = _2591;
        _3081 = _2925;
        _3083 = _2927;
        _3085 = _2929;
    }
    float _5119 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _5130 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _5141 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _3102 = ((isnan(1.0) ? _5119 : (isnan(_5119) ? 1.0 : min(_5119, 1.0))) * (_3075 + ((isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))) * _1015))) + ((_3081 + ((isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0))) * _1853)) * cbPerFrame._m0[3u].x);
    float _3103 = ((isnan(1.0) ? _5130 : (isnan(_5130) ? 1.0 : min(_5130, 1.0))) * (_3077 + ((isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))) * _1015))) + ((_3083 + ((isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0))) * _1853)) * cbPerFrame._m0[3u].x);
    float _3104 = ((isnan(1.0) ? _5141 : (isnan(_5141) ? 1.0 : min(_5141, 1.0))) * (_3079 + ((isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))) * _1015))) + ((_3085 + ((isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0))) * _1853)) * cbPerFrame._m0[3u].x);
    uint _3105 = _282 + 6u;
    float _3113 = _937 / cbSceneParam._m0[86u].x;
    float _3114 = _938 / cbSceneParam._m0[86u].y;
    vec4 _3128 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3113, _3114, (log2((isnan(cbSceneParam._m0[77u].w) ? _859 : (isnan(_859) ? cbSceneParam._m0[77u].w : min(_859, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3130 = _3128.x;
    float _3131 = _3128.y;
    float _3132 = _3128.z;
    float _3133 = _3128.w;
    float _3205;
    float _3207;
    float _3209;
    float _3211;
    if (_859 > cbSceneParam._m0[78u].w)
    {
        float _3167 = isnan(_859) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _859 : min(cbSceneParam._m0[80u].w, _859));
        float _3168 = _3167 / _859;
        float _3179 = _3168 * _910;
        float _3180 = _911 * _3168;
        float _3181 = (-0.0) - _3180;
        float _3183 = _3168 * _912;
        float _3185 = (cbSceneParam._m0[77u].w * _3181) / _3167;
        float _3186 = _3185 + cbSceneParam._m0[79u].w;
        float _3187 = cbSceneParam._m0[79u].w - _3180;
        float _3193 = sqrt(((_3179 * _3179) + (_3180 * _3180)) + (_3183 * _3183));
        float _3196 = (1.0 - (cbSceneParam._m0[77u].w / _3167)) * _3193;
        float _3201 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3203 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3380;
        if (abs((_3181 - _3185) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3380 = ((((_3186 > 0.0) ? exp2(_3201 * _3186) : (2.0 - exp2(_3203 * _3186))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3196;
        }
        else
        {
            float _3324 = 1.0 / cbSceneParam._m0[80u].x;
            float _3325 = isnan(_3187) ? _3186 : (isnan(_3186) ? _3187 : max(_3186, _3187));
            float _3326 = isnan(_3187) ? _3186 : (isnan(_3186) ? _3187 : min(_3186, _3187));
            float _3335 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : min(_3325, 0.0));
            float _3336 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : min(_3326, 0.0));
            _3380 = ((abs(_3193 / _3181) * cbSceneParam._m0[80u].y) * ((((_3335 - _3336) * 2.0) - ((exp2(_3201 * (isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0)))) - exp2(_3201 * (isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0))))) * _3324)) - ((exp2(_3203 * _3335) - exp2(_3203 * _3336)) * _3324))) + (_3196 * cbSceneParam._m0[80u].z);
        }
        vec4 _3382 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3113, _3114, 1.0), 0.0);
        float _3391 = exp2((_3380 * (-1.44269502162933349609375)) * (1.0 - _3382.w));
        float _3392 = log2(_3391);
        float _3408 = log2(_3133);
        _3205 = (exp2(_3408 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3392 * cbSceneParam._m0[78u].x)) * _3382.x) / cbSceneParam._m0[78u].x)) + _3130;
        _3207 = (exp2(_3408 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3392 * cbSceneParam._m0[78u].y)) * _3382.y) / cbSceneParam._m0[78u].y)) + _3131;
        _3209 = (exp2(_3408 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3392 * cbSceneParam._m0[78u].z)) * _3382.z) / cbSceneParam._m0[78u].z)) + _3132;
        _3211 = _3391 * _3133;
    }
    else
    {
        _3205 = _3130;
        _3207 = _3131;
        _3209 = _3132;
        _3211 = _3133;
    }
    bool _3418;
    vec4 _3221;
    vec4 _3243;
    float _3245;
    float _3249;
    float _3250;
    float _3251;
    float _3252;
    bool _3262;
    for (;;)
    {
        _3221 = cbMatDynParam._m0[0u];
        float _3223 = roundEven(_3221.y);
        bool _3224 = _3223 == 3.0;
        float _3225 = log2(_3211);
        float _3232 = exp2(_3225 * cbSceneParam._m0[78u].x) * _3102;
        float _3233 = exp2(_3225 * cbSceneParam._m0[78u].y) * _3103;
        float _3234 = exp2(_3225 * cbSceneParam._m0[78u].z) * _3104;
        float _3241 = _926 + (-0.5);
        _3243 = cbMtdParam._m0[1u];
        _3245 = _3243.y * _3241;
        float _3248 = (_3223 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3249 = _3248 * (_3224 ? _3232 : (_3232 + (cbSceneParam._m0[72u].w * _3205)));
        _3250 = _3248 * (_3224 ? _3233 : (_3233 + (cbSceneParam._m0[72u].w * _3207)));
        _3251 = _3248 * (_3224 ? _3234 : (_3234 + (cbSceneParam._m0[72u].w * _3209)));
        _3252 = _3241 * 0.999000012874603271484375;
        _3262 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3262)
        {
            if ((cbInstanceData._m0[_282 + 7u].x + _3252) < 0.5)
            {
                _3418 = true;
                break;
            }
        }
        uint _3359 = _975 + uint(_3221.w);
        if ((cbInstanceData._m0[_3359].w < 1.0) && ((cbInstanceData._m0[_3359].w + _3252) < 0.5))
        {
            _3418 = true;
            break;
        }
        if ((_3245 + 1.0) < _3243.x)
        {
            _3418 = true;
            break;
        }
        _3418 = false;
        break;
    }
    float _3622;
    if (_3418)
    {
        discard_state = true;
        _3622 = 0.0;
    }
    else
    {
        _3622 = cbInstanceData._m0[_3105].w;
    }
    SV_Target.x = _3249;
    SV_Target.y = _3250;
    SV_Target.z = _3251;
    SV_Target.w = _3622;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3105].w;
    discard_exit();
}


