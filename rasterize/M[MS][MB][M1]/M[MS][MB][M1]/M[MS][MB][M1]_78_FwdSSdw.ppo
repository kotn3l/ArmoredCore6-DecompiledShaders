#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1336;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = _245 * NORMAL.x;
    float _247 = _245 * NORMAL.y;
    float _248 = _245 * NORMAL.z;
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3687 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3698 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3709 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    uint _277 = uint(roundEven(NORMAL.w)) * 13u;
    uint _282 = _277 + 1u;
    uint _286 = _277 + 2u;
    float _295 = sqrt(((cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x)) + (cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x));
    float _296 = _295 * TEXCOORD.z;
    float _297 = _295 * TEXCOORD.w;
    vec4 _310 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _296) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _297) + cbTextureTilingScale._m0[13u].w));
    vec4 _334 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _339 = _334.x * cbMtdParam._m0[11u].x;
    float _340 = _334.y * cbMtdParam._m0[11u].y;
    float _341 = _334.z * cbMtdParam._m0[11u].z;
    vec4 _360 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _296) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _297) + cbTextureTilingScale._m0[5u].w));
    vec4 _396 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _398 = _396.x;
    float _410 = dot(vec4(_398, _396.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _427 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_398 - _410) * cbMtdParam._m0[24u].y) + _410) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3720 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _428 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    float _435 = (_428 * ((_360.x * cbMtdParam._m0[12u].x) - _339)) + _339;
    float _436 = (_428 * ((_360.y * cbMtdParam._m0[12u].y) - _340)) + _340;
    float _437 = (_428 * ((_360.z * cbMtdParam._m0[12u].z) - _341)) + _341;
    float _441 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _310.x) * _435;
    float _444 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _310.y) * _436;
    float _447 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _310.z) * _437;
    float _454 = ((_435 - _441) * (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0)))) + _441;
    float _455 = ((_436 - _444) * (isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0)))) + _444;
    float _456 = ((_437 - _447) * (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0)))) + _447;
    vec4 _469 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _296) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _297) + cbTextureTilingScale._m0[20u].w));
    vec4 _494 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _296) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _297) + cbTextureTilingScale._m0[4u].w));
    vec4 _511 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _513 = _511.x;
    float _514 = _511.y;
    float _515 = _511.z;
    float _524 = ((_494.z - _515) * _428) + _515;
    float _527 = ((((_494.x - _513) * _428) + _513) * 2.0) + (-1.0);
    float _528 = ((((_494.y - _514) * _428) + _514) * 2.0) + (-1.0);
    float _529 = dot(vec2(_527, _528), vec2(_527, _528));
    float _3731 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _534 = sqrt(1.0 - (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))));
    float _539 = _527 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_469.x * 2.0) + (-1.0)));
    float _540 = _528 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_469.y * 2.0) + (-1.0)));
    vec4 _553 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _567 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _296) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _297) + cbTextureTilingScale._m0[19u].w));
    float _569 = _567.x;
    float _570 = 1.0 - _569;
    float _596 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_569 - _570) * cbMtdParam._m0[24u].w) + _570) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3742 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _597 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
    float _605 = ((((cbMtdParam._m0[10u].x - _454) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _597) + _454;
    float _606 = ((((cbMtdParam._m0[10u].y - _455) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _597) + _455;
    float _607 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _456)) * _597) + _456;
    vec4 _619 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _633 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _635 = _633.x;
    float _653 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _296) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _297) + cbTextureTilingScale._m0[9u].w)).x - _635) * _428) + _635;
    float _657 = ((_619.x - _653) * cbMtdParam._m0[19u].z) + _653;
    float _659 = _657 - (_657 * _597);
    float _664 = (((_469.z - _524) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _524;
    float _668 = ((cbMtdParam._m0[23u].y - _664) * _597) + _664;
    vec4 _687 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _296) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _297) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _689 = _687.x;
    float _690 = _687.y;
    float _694 = dot(vec4(cbMtdParam._m0[29u].yzw, 0.0), vec4(_246, _247, _248, 0.0));
    vec4 _709 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _296) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _297) + cbTextureTilingScale._m0[18u].w));
    float _711 = _709.x;
    float _716 = fract(_709.w + cbPerFrame._m0[22u].x);
    float _718 = (1.0 - _716) * _711;
    float _723 = ((_716 + (-1.0)) + _711) * 9.0;
    float _725 = ((_711 + (-1.0)) + _716) * 9.0;
    float _726 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _727 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _741 = (_718 * ((_709.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _726 : (isnan(_726) ? 3.0 : min(_726, 3.0))) * 3.1415927410125732421875);
    float _743 = (_718 * ((_709.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _727 : (isnan(_727) ? 3.0 : min(_727, 3.0))) * 3.1415927410125732421875);
    float _747 = inversesqrt(dot(vec3(_741, _743, 1.0), vec3(_741, _743, 1.0)));
    float _763 = (((((0.5 - _689) + ((_741 * 0.5) * _747)) * _694) + _689) * 2.0) + (-1.0);
    float _764 = (((((0.5 - _690) + ((_747 * 0.5) * _743)) * _694) + _690) * 2.0) + (-1.0);
    float _765 = dot(vec2(_763, _764), vec2(_763, _764));
    float _3773 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _781 = ((((cbMtdParam._m0[22u].z * _539) - _539) + _763) * _597) + _539;
    float _782 = ((((cbMtdParam._m0[22u].z * _540) - _540) + _764) * _597) + _540;
    float _783 = (_597 * (sqrt(1.0 - (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0)))) - _534)) + _534;
    float _785 = cbMtdParam._m0[22u].x + _553.w;
    float _788 = fma(_783, _246, fma(_782, _252 * TANGENT.x, (_238 * _230) * _781));
    float _791 = fma(_783, _247, fma(_782, _252 * TANGENT.y, (_238 * _231) * _781));
    float _794 = fma(_783, _248, fma(_782, _252 * TANGENT.z, (_238 * _232) * _781));
    float _798 = inversesqrt(dot(vec3(_788, _791, _794), vec3(_788, _791, _794)));
    float _799 = _798 * _788;
    float _800 = _798 * _791;
    float _801 = _798 * _794;
    float _3784 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _802 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
    float _3795 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _3806 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _3817 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _3828 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _3839 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _807 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _821 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _861 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _871 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _861);
    float _872 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _861);
    float _873 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _861);
    float _877 = inversesqrt(dot(vec3(_871, _872, _873), vec3(_871, _872, _873)));
    float _878 = _871 * _877;
    float _879 = _872 * _877;
    float _880 = _873 * _877;
    float _886 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _887 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _905 = fma(_801, cbSceneParam._m0[5u].z, fma(_800, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _799));
    float _908 = fma(_801, cbSceneParam._m0[6u].z, fma(_800, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _799));
    float _911 = fma(_801, cbSceneParam._m0[7u].z, fma(_800, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _799));
    uint _925 = (_277 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _931 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0)))) * cbInstanceData._m0[_925].x;
    float _932 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0)))) * cbInstanceData._m0[_925].y;
    float _933 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0)))) * cbInstanceData._m0[_925].z;
    float _3850 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _934 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _3861 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _935 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
    float _3872 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _936 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _937 = 1.0 - _807;
    float _938 = _934 * _937;
    float _939 = _935 * _937;
    float _940 = _936 * _937;
    float _945 = (_934 + (-0.039999999105930328369140625)) * _807;
    float _946 = (_935 + (-0.039999999105930328369140625)) * _807;
    float _947 = (_936 + (-0.039999999105930328369140625)) * _807;
    float _948 = _945 + 0.039999999105930328369140625;
    float _950 = _946 + 0.039999999105930328369140625;
    float _951 = _947 + 0.039999999105930328369140625;
    vec4 _960 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _886, cbSceneParam._m0[86u].y * _887));
    float _964 = ((isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * TEXCOORD_5.w) * _960.x;
    float _965 = dot(vec3(_799, _800, _801), vec3(_878, _879, _880));
    float _968 = _965 * 2.0;
    float _972 = (_968 * _799) - _878;
    float _973 = (_968 * _800) - _879;
    float _974 = (_968 * _801) - _880;
    float _978 = abs(dot(vec3(_878, _879, _880), vec3(_799, _800, _801)));
    float _3883 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _980 = sqrt(_802);
    float _992 = exp2((_980 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_980 * 3.0));
    float _998 = (1.0 - _992) * ((_980 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _999 = _992 * _980;
    float _1027 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1031 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1035 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1335;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1061 = fma(_1035, cbModelParam._m0[26u].z, fma(_1031, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1027));
        float _1065 = fma(_1035, cbModelParam._m0[27u].z, fma(_1031, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1027));
        float _1069 = fma(_1035, cbModelParam._m0[28u].z, fma(_1031, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1027));
        float _1093 = _1027 + _799;
        float _1094 = _1031 + _800;
        float _1095 = _1035 + _801;
        float _1105 = fma(_1095, cbModelParam._m0[26u].z, fma(_1094, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1093)) - _1061;
        float _1106 = fma(_1095, cbModelParam._m0[27u].z, fma(_1094, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1093)) - _1065;
        float _1107 = fma(_1095, cbModelParam._m0[28u].z, fma(_1094, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1093)) - _1069;
        float _1111 = inversesqrt(dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107)));
        float _1124 = ((_1111 * _1105) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1061 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1125 = ((_1111 * _1106) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1065 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1126 = ((_1111 * _1107) / cbModelParam._m0[34u].z) + ((((((_1069 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        vec4 _1136 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        vec4 _1143 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        float _1163 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1129.x + (-0.5));
        float _1165 = _1163 * (_1129.y + (-0.5));
        float _1166 = _1163 * (_1129.z + (-0.5));
        float _1173 = exp2((_1136.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1136.x + (-0.5));
        float _1175 = _1173 * (_1136.y + (-0.5));
        float _1176 = _1173 * (_1136.z + (-0.5));
        float _1183 = exp2((_1143.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1143.x + (-0.5));
        float _1185 = _1183 * (_1143.y + (-0.5));
        float _1186 = _1183 * (_1143.z + (-0.5));
        float _1193 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1150.x + (-0.5));
        float _1195 = _1193 * (_1150.y + (-0.5));
        float _1196 = _1193 * (_1150.z + (-0.5));
        float _1197 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1198 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1199 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1200 = _1164 * 0.5;
        float _1201 = _1174 * 0.5;
        float _1202 = _1184 * 0.5;
        float _1203 = dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202));
        float _1208 = (_1203 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1203);
        float _1217 = (dot(vec3(_799, _800, _801), vec3(_1208 * _1200, _1208 * _1201, _1208 * _1202)) + 1.0) * 0.5;
        float _3909 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1227 = sqrt(((_1201 * _1201) + (_1200 * _1200)) + (_1202 * _1202)) / (_1197 + 9.9999997473787516355514526367188e-06);
        float _3920 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1229 = _1228 * 2.0;
        float _1233 = (1.0 - _1228) / (_1228 + 1.0);
        float _3931 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1243 = ((((1.0 - _1234) * (_1229 + 2.0)) * exp2(log2(isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * (_1229 + 1.0))) + _1234) * _1197;
        float _1244 = _1165 * 0.5;
        float _1245 = _1175 * 0.5;
        float _1246 = _1185 * 0.5;
        float _1247 = dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246));
        float _1252 = (_1247 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1247);
        float _1260 = (dot(vec3(_799, _800, _801), vec3(_1252 * _1244, _1252 * _1245, _1252 * _1246)) + 1.0) * 0.5;
        float _3942 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1269 = sqrt(((_1245 * _1245) + (_1244 * _1244)) + (_1246 * _1246)) / (_1198 + 9.9999997473787516355514526367188e-06);
        float _3953 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1271 = _1270 * 2.0;
        float _1275 = (1.0 - _1270) / (_1270 + 1.0);
        float _3964 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1285 = ((((1.0 - _1276) * (_1271 + 2.0)) * exp2(log2(isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * (_1271 + 1.0))) + _1276) * _1198;
        float _1286 = _1166 * 0.5;
        float _1287 = _1176 * 0.5;
        float _1288 = _1186 * 0.5;
        float _1289 = dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288));
        float _1294 = (_1289 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1289);
        float _1302 = (dot(vec3(_799, _800, _801), vec3(_1294 * _1286, _1294 * _1287, _1294 * _1288)) + 1.0) * 0.5;
        float _3975 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1311 = sqrt(((_1287 * _1287) + (_1286 * _1286)) + (_1288 * _1288)) / (_1199 + 9.9999997473787516355514526367188e-06);
        float _3986 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1313 = _1312 * 2.0;
        float _1317 = (1.0 - _1312) / (_1312 + 1.0);
        float _3997 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1327 = ((((1.0 - _1318) * (_1313 + 2.0)) * exp2(log2(isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) * (_1313 + 1.0))) + _1318) * _1199;
        _1335 = _1166;
        _1337 = _1165;
        _1338 = _1164;
        _1339 = _1176;
        _1340 = _1175;
        _1341 = _1174;
        _1342 = _1186;
        _1343 = _1185;
        _1344 = _1184;
        _1345 = _1199;
        _1346 = _1198;
        _1347 = _1197;
        _1348 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)));
        _1349 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)));
        _1350 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)));
    }
    else
    {
        _1335 = _1336;
        _1337 = _1336;
        _1338 = _1336;
        _1339 = _1336;
        _1340 = _1336;
        _1341 = _1336;
        _1342 = _1336;
        _1343 = _1336;
        _1344 = _1336;
        _1345 = _1336;
        _1346 = _1336;
        _1347 = _1336;
        _1348 = 0.0;
        _1349 = 0.0;
        _1350 = 0.0;
    }
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1375 = fma(_1035, cbModelParam._m0[30u].z, fma(_1031, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1027));
        float _1379 = fma(_1035, cbModelParam._m0[31u].z, fma(_1031, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1027));
        float _1383 = fma(_1035, cbModelParam._m0[32u].z, fma(_1031, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1027));
        float _1406 = _1027 + _799;
        float _1407 = _1031 + _800;
        float _1408 = _1035 + _801;
        float _1418 = fma(_1408, cbModelParam._m0[30u].z, fma(_1407, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1406)) - _1375;
        float _1419 = fma(_1408, cbModelParam._m0[31u].z, fma(_1407, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1406)) - _1379;
        float _1420 = fma(_1408, cbModelParam._m0[32u].z, fma(_1407, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1406)) - _1383;
        float _1424 = inversesqrt(dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420)));
        float _1437 = ((_1424 * _1418) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1375 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1438 = ((_1424 * _1419) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1379 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1439 = ((_1424 * _1420) / cbModelParam._m0[35u].z) + ((((((_1383 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1441 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1437, _1438, _1439), 0.0);
        vec4 _1448 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1437, _1438, _1439), 0.0);
        vec4 _1455 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1437, _1438, _1439), 0.0);
        vec4 _1462 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1437, _1438, _1439), 0.0);
        float _1474 = exp2((_1441.w + (-0.5)) * 20.0) * 2.0;
        float _1475 = _1474 * (_1441.x + (-0.5));
        float _1476 = _1474 * (_1441.y + (-0.5));
        float _1477 = _1474 * (_1441.z + (-0.5));
        float _1484 = exp2((_1448.w + (-0.5)) * 20.0) * 2.0;
        float _1485 = _1484 * (_1448.x + (-0.5));
        float _1486 = _1484 * (_1448.y + (-0.5));
        float _1487 = _1484 * (_1448.z + (-0.5));
        float _1494 = exp2((_1455.w + (-0.5)) * 20.0) * 2.0;
        float _1495 = _1494 * (_1455.x + (-0.5));
        float _1496 = _1494 * (_1455.y + (-0.5));
        float _1497 = _1494 * (_1455.z + (-0.5));
        float _1504 = exp2((_1462.w + (-0.5)) * 20.0) * 2.0;
        float _1505 = _1504 * (_1462.x + (-0.5));
        float _1506 = _1504 * (_1462.y + (-0.5));
        float _1507 = _1504 * (_1462.z + (-0.5));
        float _1508 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1509 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1510 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1511 = _1475 * 0.5;
        float _1512 = _1485 * 0.5;
        float _1513 = _1495 * 0.5;
        float _1514 = dot(vec3(_1511, _1512, _1513), vec3(_1511, _1512, _1513));
        float _1519 = (_1514 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1514);
        float _1527 = (dot(vec3(_799, _800, _801), vec3(_1519 * _1511, _1519 * _1512, _1519 * _1513)) + 1.0) * 0.5;
        float _4038 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1536 = sqrt(((_1512 * _1512) + (_1511 * _1511)) + (_1513 * _1513)) / (_1508 + 9.9999997473787516355514526367188e-06);
        float _4049 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1538 = _1537 * 2.0;
        float _1542 = (1.0 - _1537) / (_1537 + 1.0);
        float _4060 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1552 = ((((1.0 - _1543) * (_1538 + 2.0)) * exp2(log2(isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * (_1538 + 1.0))) + _1543) * _1508;
        float _1553 = _1476 * 0.5;
        float _1554 = _1486 * 0.5;
        float _1555 = _1496 * 0.5;
        float _1556 = dot(vec3(_1553, _1554, _1555), vec3(_1553, _1554, _1555));
        float _1561 = (_1556 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1556);
        float _1569 = (dot(vec3(_799, _800, _801), vec3(_1561 * _1553, _1561 * _1554, _1561 * _1555)) + 1.0) * 0.5;
        float _4071 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1578 = sqrt(((_1554 * _1554) + (_1553 * _1553)) + (_1555 * _1555)) / (_1509 + 9.9999997473787516355514526367188e-06);
        float _4082 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1580 = _1579 * 2.0;
        float _1584 = (1.0 - _1579) / (_1579 + 1.0);
        float _4093 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1594 = ((((1.0 - _1585) * (_1580 + 2.0)) * exp2(log2(isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * (_1580 + 1.0))) + _1585) * _1509;
        float _1595 = _1477 * 0.5;
        float _1596 = _1487 * 0.5;
        float _1597 = _1497 * 0.5;
        float _1598 = dot(vec3(_1595, _1596, _1597), vec3(_1595, _1596, _1597));
        float _1603 = (_1598 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1598);
        float _1611 = (dot(vec3(_799, _800, _801), vec3(_1603 * _1595, _1603 * _1596, _1603 * _1597)) + 1.0) * 0.5;
        float _4104 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1620 = sqrt(((_1596 * _1596) + (_1595 * _1595)) + (_1597 * _1597)) / (_1510 + 9.9999997473787516355514526367188e-06);
        float _4115 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1621 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1622 = _1621 * 2.0;
        float _1626 = (1.0 - _1621) / (_1621 + 1.0);
        float _4126 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1636 = ((((1.0 - _1627) * (_1622 + 2.0)) * exp2(log2(isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (_1622 + 1.0))) + _1627) * _1510;
        _1644 = _1477;
        _1645 = _1476;
        _1646 = _1475;
        _1647 = _1487;
        _1648 = _1486;
        _1649 = _1485;
        _1650 = _1497;
        _1651 = _1496;
        _1652 = _1495;
        _1653 = _1510;
        _1654 = _1509;
        _1655 = _1508;
        _1656 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)));
        _1657 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)));
        _1658 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)));
    }
    else
    {
        _1644 = _1336;
        _1645 = _1336;
        _1646 = _1336;
        _1647 = _1336;
        _1648 = _1336;
        _1649 = _1336;
        _1650 = _1336;
        _1651 = _1336;
        _1652 = _1336;
        _1653 = _1336;
        _1654 = _1336;
        _1655 = _1336;
        _1656 = 0.0;
        _1657 = 0.0;
        _1658 = 0.0;
    }
    float _1668 = (cbModelParam._m0[1u].x * (_1656 - _1348)) + _1348;
    float _1669 = (cbModelParam._m0[1u].x * (_1657 - _1349)) + _1349;
    float _1670 = (cbModelParam._m0[1u].x * (_1658 - _1350)) + _1350;
    float _1691 = fma(_1670, cbSceneParam._m0[89u].z, fma(_1669, cbSceneParam._m0[89u].y, _1668 * cbSceneParam._m0[89u].x));
    float _1694 = fma(_1670, cbSceneParam._m0[90u].z, fma(_1669, cbSceneParam._m0[90u].y, _1668 * cbSceneParam._m0[90u].x));
    float _1697 = fma(_1670, cbSceneParam._m0[91u].z, fma(_1669, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1668));
    float _1712 = _972 * 0.5;
    float _1713 = _973 * 0.5;
    float _1714 = _974 * 0.5;
    float _1715 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1646, _1649, _1652, _1655));
    float _1718 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1645, _1648, _1651, _1654));
    float _1721 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1644, _1647, _1650, _1653));
    float _1755;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1728 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1335, _1339, _1342, _1345));
        float _1732 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1337, _1340, _1343, _1346));
        float _1736 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1338, _1341, _1344, _1347));
        float _1743 = dot(vec4(cbModelParam._m0[39u]), vec4(_1712, _1713, _1714, 1.0));
        _1755 = dot(vec3(isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)), isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)), isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1743) ? 0.0 : (isnan(0.0) ? _1743 : max(0.0, _1743))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1755 = 1.0;
    }
    float _1766;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1757 = dot(vec4(cbModelParam._m0[40u]), vec4(_1712, _1713, _1714, 1.0));
        _1766 = dot(vec3(isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)), isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)), isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1757) ? 0.0 : (isnan(0.0) ? _1757 : max(0.0, _1757))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1766 = 1.0;
    }
    float _1770 = (_1766 * cbModelParam._m0[1u].x) + (_1755 * (1.0 - cbModelParam._m0[1u].x));
    float _1780 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _802);
    float _1781 = isnan(_1780) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1780 : min(cbModelParam._m0[25u].z, _1780));
    float _1863;
    float _1865;
    float _1867;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1830 = fma(_1035, cbModelParam._m0[13u].z, fma(_1031, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1027)) + cbModelParam._m0[13u].w;
        float _1834 = fma(_1035, cbModelParam._m0[14u].z, fma(_1031, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1027)) + cbModelParam._m0[14u].w;
        float _1838 = fma(_1035, cbModelParam._m0[15u].z, fma(_1031, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1027)) + cbModelParam._m0[15u].w;
        float _1841 = fma(_974, cbModelParam._m0[13u].z, fma(_973, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _972));
        float _1844 = fma(_974, cbModelParam._m0[14u].z, fma(_973, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _972));
        float _1847 = fma(_974, cbModelParam._m0[15u].z, fma(_973, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _972));
        float _1875;
        if (_1841 > 0.0)
        {
            _1875 = abs((1.0 - _1830) / _1841);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1841 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1830 + 1.0) / _1841);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1875 = frontier_phi_14_12_ladder;
        }
        float _2099;
        if (_1844 > 0.0)
        {
            _2099 = abs((1.0 - _1834) / _1844);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1844 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1834 + 1.0) / _1844);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2099 = frontier_phi_23_19_ladder;
        }
        float _2356;
        if (_1847 > 0.0)
        {
            _2356 = abs((1.0 - _1838) / _1847);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1847 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1838 + 1.0) / _1847);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2356 = frontier_phi_35_30_ladder;
        }
        float _2358 = isnan(_2099) ? _1875 : (isnan(_1875) ? _2099 : min(_1875, _2099));
        float _2359 = isnan(_2356) ? _2358 : (isnan(_2358) ? _2356 : min(_2358, _2356));
        float _2363 = (_2359 * _1841) + _1830;
        float _2364 = (_2359 * _1844) + _1834;
        float _2365 = (_2359 * _1847) + _1838;
        float _2366 = _2359 * 9.9999997473787516355514526367188e-05;
        float _2368 = (-1.0) - _2366;
        float _2370 = _2366 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2365 > _2370) || ((_2365 < _2368) || ((_2364 > _2370) || ((_2364 < _2368) || ((_2363 < _2368) || (_2363 > _2370))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2493 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2365, cbModelParam._m0[9u].z, fma(_2364, cbModelParam._m0[9u].y, _2363 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2365, cbModelParam._m0[10u].z, fma(_2364, cbModelParam._m0[10u].y, _2363 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2365, cbModelParam._m0[11u].z, fma(_2364, cbModelParam._m0[11u].y, _2363 * cbModelParam._m0[11u].x))), _1781);
            frontier_phi_13_35_ladder = _2493.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2493.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2493.x * cbModelParam._m0[1u].y;
        }
        _1863 = frontier_phi_13_35_ladder_2;
        _1865 = frontier_phi_13_35_ladder_1;
        _1867 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1851 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_972, _973, _974), _1781);
        _1863 = _1851.x * cbModelParam._m0[1u].y;
        _1865 = _1851.y * cbModelParam._m0[1u].y;
        _1867 = _1851.z * cbModelParam._m0[1u].y;
    }
    float _1871 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _802);
    float _1872 = isnan(_1871) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1871 : min(cbModelParam._m0[25u].w, _1871));
    float _1962;
    float _1964;
    float _1966;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1926 = fma(_1035, cbModelParam._m0[21u].z, fma(_1031, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1027)) + cbModelParam._m0[21u].w;
        float _1930 = fma(_1035, cbModelParam._m0[22u].z, fma(_1031, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1027)) + cbModelParam._m0[22u].w;
        float _1934 = fma(_1035, cbModelParam._m0[23u].z, fma(_1031, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1027)) + cbModelParam._m0[23u].w;
        float _1937 = fma(_974, cbModelParam._m0[21u].z, fma(_973, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _972));
        float _1940 = fma(_974, cbModelParam._m0[22u].z, fma(_973, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _972));
        float _1943 = fma(_974, cbModelParam._m0[23u].z, fma(_973, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _972));
        float _2104;
        if (_1937 > 0.0)
        {
            _2104 = abs((1.0 - _1926) / _1937);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1926 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2104 = frontier_phi_25_21_ladder;
        }
        float _2383;
        if (_1940 > 0.0)
        {
            _2383 = abs((1.0 - _1930) / _1940);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1940 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1930 + 1.0) / _1940);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2383 = frontier_phi_37_32_ladder;
        }
        float _2596;
        if (_1943 > 0.0)
        {
            _2596 = abs((1.0 - _1934) / _1943);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1943 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1934 + 1.0) / _1943);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2596 = frontier_phi_46_43_ladder;
        }
        float _2598 = isnan(_2383) ? _2104 : (isnan(_2104) ? _2383 : min(_2104, _2383));
        float _2599 = isnan(_2596) ? _2598 : (isnan(_2598) ? _2596 : min(_2598, _2596));
        float _2603 = (_2599 * _1937) + _1926;
        float _2604 = (_2599 * _1940) + _1930;
        float _2605 = (_2599 * _1943) + _1934;
        float _2606 = _2599 * 9.9999997473787516355514526367188e-05;
        float _2607 = (-1.0) - _2606;
        float _2609 = _2606 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2605 > _2609) || ((_2605 < _2607) || ((_2604 > _2609) || ((_2604 < _2607) || ((_2603 < _2607) || (_2603 > _2609))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2804 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2605, cbModelParam._m0[17u].z, fma(_2604, cbModelParam._m0[17u].y, _2603 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2605, cbModelParam._m0[18u].z, fma(_2604, cbModelParam._m0[18u].y, _2603 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2605, cbModelParam._m0[19u].z, fma(_2604, cbModelParam._m0[19u].y, _2603 * cbModelParam._m0[19u].x))), _1872);
            frontier_phi_22_46_ladder = _2804.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2804.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2804.x * cbModelParam._m0[1u].z;
        }
        _1962 = frontier_phi_22_46_ladder_2;
        _1964 = frontier_phi_22_46_ladder_1;
        _1966 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1946 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_972, _973, _974), _1872);
        _1962 = _1946.x * cbModelParam._m0[1u].z;
        _1964 = _1946.y * cbModelParam._m0[1u].z;
        _1966 = _1946.z * cbModelParam._m0[1u].z;
    }
    float _1979 = (((_998 * _948) + _999) * _964) * ((cbModelParam._m0[1u].w * (_1962 - _1863)) + _1863);
    float _1981 = (((_998 * _950) + _999) * _964) * ((cbModelParam._m0[1u].w * (_1964 - _1865)) + _1865);
    float _1983 = (((_998 * _951) + _999) * _964) * ((cbModelParam._m0[1u].w * (_1966 - _1867)) + _1867);
    float _1986 = fma(_1983, cbSceneParam._m0[89u].z, fma(_1981, cbSceneParam._m0[89u].y, _1979 * cbSceneParam._m0[89u].x));
    float _1989 = fma(_1983, cbSceneParam._m0[90u].z, fma(_1981, cbSceneParam._m0[90u].y, _1979 * cbSceneParam._m0[90u].x));
    float _1992 = fma(_1983, cbSceneParam._m0[91u].z, fma(_1981, cbSceneParam._m0[91u].y, _1979 * cbSceneParam._m0[91u].x));
    vec4 _2000 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_886, _887));
    float _2002 = _2000.w;
    float _2014 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2002);
    float _2015 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2002);
    float _2016 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2002);
    uvec4 _2020 = floatBitsToUint(cbInstanceData._m0[_277 + 5u]);
    uint _2022 = _2020.x * 14u;
    uint _2023 = _2022 + 13u;
    float _2030 = _964 + (-1.0);
    float _2035 = (cbLight._m0[_2023].x * _2030) + 1.0;
    float _2036 = (cbLight._m0[_2023].y * _2030) + 1.0;
    float _2037 = (cbLight._m0[_2023].z * _2030) + 1.0;
    float _2038 = (cbLight._m0[_2023].w * _2030) + 1.0;
    uint _2039 = _2022 + 5u;
    float _2045 = isnan(1.0) ? _2036 : (isnan(_2036) ? 1.0 : min(_2036, 1.0));
    uint _2049 = _2022 + 4u;
    float _2058 = isnan(1.0) ? _2035 : (isnan(_2035) ? 1.0 : min(_2035, 1.0));
    uint _2062 = _2022 | 1u;
    float _2073 = dot(vec3(cbLight._m0[_2022].xyz), vec3(_799, _800, _801));
    float _2076 = dot(vec3(cbLight._m0[_2062].xyz), vec3(_799, _800, _801));
    float _4262 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _4273 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2081 = (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * 0.3183098733425140380859375;
    float _2083 = (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * 0.3183098733425140380859375;
    float _2090 = ((cbLight._m0[_2039].x * _2045) * _2083) + (((cbLight._m0[_2049].x * _2014) * _2058) * _2081);
    float _2091 = ((_2045 * cbLight._m0[_2039].y) * _2083) + (((cbLight._m0[_2049].y * _2015) * _2058) * _2081);
    float _2092 = ((_2045 * cbLight._m0[_2039].z) * _2083) + (((cbLight._m0[_2049].z * _2016) * _2058) * _2081);
    uvec4 _2096 = floatBitsToUint(cbLight._m0[_2022 + 12u]);
    bool _2098 = _2096.x == 0u;
    float _2109;
    float _2111;
    float _2113;
    if (_2098)
    {
        _2109 = _2090;
        _2111 = _2091;
        _2113 = _2092;
    }
    else
    {
        uint _2117 = _2022 + 6u;
        float _2133 = (dot(vec3(cbLight._m0[_2022 + 2u].xyz), vec3(_799, _800, _801)) * 0.5) + 0.5;
        float _2134 = _2133 * _2133;
        float _4284 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
        float _2135 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _2136 = isnan(1.0) ? _2037 : (isnan(_2037) ? 1.0 : min(_2037, 1.0));
        _2109 = (((cbLight._m0[_2117].x * 0.3183098733425140380859375) * _2135) * _2136) + _2090;
        _2111 = (((cbLight._m0[_2117].y * 0.3183098733425140380859375) * _2135) * _2136) + _2091;
        _2113 = (((cbLight._m0[_2117].z * 0.3183098733425140380859375) * _2135) * _2136) + _2092;
    }
    bool _2116 = _2096.y == 0u;
    float _2154;
    float _2156;
    float _2158;
    if (_2116)
    {
        _2154 = _2109;
        _2156 = _2111;
        _2158 = _2113;
    }
    else
    {
        uint _2327 = _2022 + 7u;
        float _2343 = (dot(vec3(cbLight._m0[_2022 + 3u].xyz), vec3(_799, _800, _801)) * 0.5) + 0.5;
        float _2344 = _2343 * _2343;
        float _4300 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
        float _2345 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _2346 = isnan(1.0) ? _2038 : (isnan(_2038) ? 1.0 : min(_2038, 1.0));
        _2154 = (((cbLight._m0[_2327].x * 0.3183098733425140380859375) * _2345) * _2346) + _2109;
        _2156 = (((cbLight._m0[_2327].y * 0.3183098733425140380859375) * _2345) * _2346) + _2111;
        _2158 = (((cbLight._m0[_2327].z * 0.3183098733425140380859375) * _2345) * _2346) + _2113;
    }
    uint _2161 = _2022 + 8u;
    float _2174 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2022].w)) * _802) * 0.949999988079071044921875);
    float _2175 = _2174 * _2174;
    float _2176 = cbLight._m0[_2022].x + _878;
    float _2177 = cbLight._m0[_2022].y + _879;
    float _2178 = cbLight._m0[_2022].z + _880;
    float _2182 = inversesqrt(dot(vec3(_2176, _2177, _2178), vec3(_2176, _2177, _2178)));
    float _2183 = _2182 * _2176;
    float _2184 = _2182 * _2177;
    float _2185 = _2182 * _2178;
    float _2186 = dot(vec3(_799, _800, _801), vec3(cbLight._m0[_2022].xyz));
    float _4316 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2189 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
    float _4327 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _2190 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
    float _2191 = dot(vec3(_799, _800, _801), vec3(_2183, _2184, _2185));
    float _4338 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2194 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
    float _2195 = dot(vec3(cbLight._m0[_2022].xyz), vec3(_2183, _2184, _2185));
    float _4349 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2199 = _2175 * _2175;
    float _2203 = ((_2194 * _2194) * (_2199 + (-1.0))) + 1.0;
    float _2211 = exp2(log2(1.0 - (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0)))) * 5.0);
    float _2212 = 0.959999978542327880859375 - _945;
    float _2214 = 0.959999978542327880859375 - _946;
    float _2215 = 0.959999978542327880859375 - _947;
    float _2222 = 1.0 - _2175;
    float _2233 = (0.5 / (((_2190 * ((_2189 * _2222) + _2175)) + 9.9999999392252902907785028219223e-09) + (((_2190 * _2222) + _2175) * _2189))) * _2189;
    float _4360 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2235 = (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_2199 / ((_2203 * _2203) * 3.141590118408203125));
    uint _2249 = _2022 + 9u;
    float _2260 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2062].w)) * _802) * 0.949999988079071044921875);
    float _2261 = _2260 * _2260;
    float _2262 = cbLight._m0[_2062].x + _878;
    float _2263 = cbLight._m0[_2062].y + _879;
    float _2264 = cbLight._m0[_2062].z + _880;
    float _2268 = inversesqrt(dot(vec3(_2262, _2263, _2264), vec3(_2262, _2263, _2264)));
    float _2269 = _2268 * _2262;
    float _2270 = _2268 * _2263;
    float _2271 = _2268 * _2264;
    float _2272 = dot(vec3(_799, _800, _801), vec3(cbLight._m0[_2062].xyz));
    float _4371 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2275 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
    float _2276 = dot(vec3(_799, _800, _801), vec3(_2269, _2270, _2271));
    float _4382 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
    float _2279 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
    float _2280 = dot(vec3(cbLight._m0[_2062].xyz), vec3(_2269, _2270, _2271));
    float _4393 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2284 = _2261 * _2261;
    float _2288 = ((_2279 * _2279) * (_2284 + (-1.0))) + 1.0;
    float _2295 = exp2(log2(1.0 - (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0)))) * 5.0);
    float _2302 = 1.0 - _2261;
    float _2312 = (0.5 / (((_2190 * ((_2275 * _2302) + _2261)) + 9.9999999392252902907785028219223e-09) + (((_2190 * _2302) + _2261) * _2275))) * _2275;
    float _4404 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2314 = (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_2284 / ((_2288 * _2288) * 3.141590118408203125));
    float _2324 = (((((_2295 * _2212) + _948) * cbLight._m0[_2249].x) * _2314) * _2045) + ((((cbLight._m0[_2161].x * _2014) * ((_2211 * _2212) + _948)) * _2235) * _2058);
    float _2325 = (((((_2295 * _2214) + _950) * cbLight._m0[_2249].y) * _2314) * _2045) + ((((cbLight._m0[_2161].y * _2015) * ((_2211 * _2214) + _950)) * _2235) * _2058);
    float _2326 = (((((_2295 * _2215) + _951) * cbLight._m0[_2249].z) * _2314) * _2045) + ((((cbLight._m0[_2161].z * _2016) * ((_2211 * _2215) + _951)) * _2235) * _2058);
    float _2388;
    float _2390;
    float _2392;
    if (_2098)
    {
        _2388 = _2324;
        _2390 = _2325;
        _2392 = _2326;
    }
    else
    {
        uint _2394 = _2022 + 2u;
        uint _2398 = _2022 + 10u;
        float _2412 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2394].w)) * _802) * 0.949999988079071044921875);
        float _2413 = _2412 * _2412;
        float _2414 = cbLight._m0[_2394].x + _878;
        float _2415 = cbLight._m0[_2394].y + _879;
        float _2416 = cbLight._m0[_2394].z + _880;
        float _2420 = inversesqrt(dot(vec3(_2414, _2415, _2416), vec3(_2414, _2415, _2416)));
        float _2421 = _2420 * _2414;
        float _2422 = _2420 * _2415;
        float _2423 = _2420 * _2416;
        float _2424 = dot(vec3(_799, _800, _801), vec3(cbLight._m0[_2394].xyz));
        float _4415 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2427 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _2428 = dot(vec3(_799, _800, _801), vec3(_2421, _2422, _2423));
        float _4426 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2431 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _2432 = dot(vec3(cbLight._m0[_2394].xyz), vec3(_2421, _2422, _2423));
        float _4437 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2436 = _2413 * _2413;
        float _2440 = ((_2431 * _2431) * (_2436 + (-1.0))) + 1.0;
        float _2447 = exp2(log2(1.0 - (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0)))) * 5.0);
        float _2454 = 1.0 - _2413;
        float _2464 = (0.5 / (((_2190 * ((_2427 * _2454) + _2413)) + 9.9999999392252902907785028219223e-09) + (((_2190 * _2454) + _2413) * _2427))) * _2427;
        float _4448 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2466 = (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_2436 / ((_2440 * _2440) * 3.141590118408203125));
        float _2467 = isnan(1.0) ? _2037 : (isnan(_2037) ? 1.0 : min(_2037, 1.0));
        _2388 = (((((_2447 * _2212) + _948) * cbLight._m0[_2398].x) * _2466) * _2467) + _2324;
        _2390 = (((((_2447 * _2214) + _950) * cbLight._m0[_2398].y) * _2466) * _2467) + _2325;
        _2392 = (((((_2447 * _2215) + _951) * cbLight._m0[_2398].z) * _2466) * _2467) + _2326;
    }
    float _2502;
    float _2504;
    float _2506;
    if (_2116)
    {
        _2502 = _2388;
        _2504 = _2390;
        _2506 = _2392;
    }
    else
    {
        uint _2513 = _2022 + 3u;
        uint _2517 = _2022 + 11u;
        float _2531 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2513].w)) * _802) * 0.949999988079071044921875);
        float _2532 = _2531 * _2531;
        float _2533 = cbLight._m0[_2513].x + _878;
        float _2534 = cbLight._m0[_2513].y + _879;
        float _2535 = cbLight._m0[_2513].z + _880;
        float _2539 = inversesqrt(dot(vec3(_2533, _2534, _2535), vec3(_2533, _2534, _2535)));
        float _2540 = _2539 * _2533;
        float _2541 = _2539 * _2534;
        float _2542 = _2539 * _2535;
        float _2543 = dot(vec3(_799, _800, _801), vec3(cbLight._m0[_2513].xyz));
        float _4464 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2546 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _2547 = dot(vec3(_799, _800, _801), vec3(_2540, _2541, _2542));
        float _4475 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2550 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _2551 = dot(vec3(cbLight._m0[_2513].xyz), vec3(_2540, _2541, _2542));
        float _4486 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
        float _2555 = _2532 * _2532;
        float _2559 = ((_2550 * _2550) * (_2555 + (-1.0))) + 1.0;
        float _2566 = exp2(log2(1.0 - (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0)))) * 5.0);
        float _2573 = 1.0 - _2532;
        float _2583 = (0.5 / (((_2190 * ((_2546 * _2573) + _2532)) + 9.9999999392252902907785028219223e-09) + (((_2190 * _2573) + _2532) * _2546))) * _2546;
        float _4497 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
        float _2585 = (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * (_2555 / ((_2559 * _2559) * 3.141590118408203125));
        float _2586 = isnan(1.0) ? _2038 : (isnan(_2038) ? 1.0 : min(_2038, 1.0));
        _2502 = (((((_2566 * _2212) + _948) * cbLight._m0[_2517].x) * _2585) * _2586) + _2388;
        _2504 = (((((_2566 * _2214) + _950) * cbLight._m0[_2517].y) * _2585) * _2586) + _2390;
        _2506 = (((((_2566 * _2215) + _951) * cbLight._m0[_2517].z) * _2585) * _2586) + _2392;
    }
    float _2721;
    float _2723;
    float _2725;
    float _2727;
    float _2729;
    float _2731;
    if (_2020.y == 0u)
    {
        float _2661 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2662 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2661;
        float _2663 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2661;
        float _2664 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2661;
        uvec4 _2676 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2677 = _2676.x;
        uint _2688 = uint((float(_2676.y) * floor(float(uint(cbSceneParam._m0[85u].y * _887) / _2677))) + floor(float(uint(cbSceneParam._m0[85u].x * _886) / _2677)));
        float _2698 = (log2(_2664 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2699 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
        uint _2702 = uint(isnan(14.0) ? _2699 : (isnan(_2699) ? 14.0 : min(_2699, 14.0)));
        uvec4 _2707 = texelFetch(g_lightClusterGridBuffer, int(((_2702 << 2u) + (_2688 << 6u)) >> 2u));
        uint _2708 = _2707.x;
        uint _2709 = _2676.z;
        float _2809;
        float _2811;
        float _2813;
        float _2815;
        float _2817;
        float _2819;
        if (((((1u << ((_2709 >> 4u) & 15u)) + 4294967295u) & _2708) == 0u) || ((_2709 & 240u) == 0u))
        {
            _2809 = 0.0;
            _2811 = 0.0;
            _2813 = 0.0;
            _2815 = 0.0;
            _2817 = 0.0;
            _2819 = 0.0;
        }
        else
        {
            float _2810;
            float _2812;
            float _2814;
            float _2816;
            float _2818;
            float _2820;
            float _2954 = 0.0;
            float _2955 = 0.0;
            float _2956 = 0.0;
            float _2957 = 0.0;
            float _2958 = 0.0;
            float _2959 = 0.0;
            uint _2960 = 0u;
            uint _2969;
            bool _2970;
            for (;;)
            {
                _2969 = texelFetch(g_lightClassification, int((((_2702 << 5u) + (_2688 << 9u)) + (_2960 << 2u)) >> 2u)).x;
                _2970 = _2969 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2970)
                {
                    frontier_phi_61_pred = _2954;
                    frontier_phi_61_pred_1 = _2959;
                    frontier_phi_61_pred_2 = _2958;
                    frontier_phi_61_pred_3 = _2957;
                    frontier_phi_61_pred_4 = _2956;
                    frontier_phi_61_pred_5 = _2955;
                }
                else
                {
                    float _3078;
                    float _3079;
                    float _3080;
                    float _3081;
                    float _3082;
                    float _3083;
                    uint _3084;
                    _3078 = _2954;
                    _3079 = _2955;
                    _3080 = _2956;
                    _3081 = _2957;
                    _3082 = _2958;
                    _3083 = _2959;
                    _3084 = _2969;
                    float _3010;
                    float _3011;
                    float _3012;
                    float _3013;
                    float _3014;
                    float _3015;
                    for (;;)
                    {
                        uint _3088 = uint(findLSB(_3084)) + (_2960 << 5u);
                        uint _3085 = (_3084 + 4294967295u) & _3084;
                        uint _3090 = _3088 * 48u;
                        vec4 _3104 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3090)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 3u)).x));
                        uint _3110 = (_3088 * 48u) + 4u;
                        vec4 _3123 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3110)).x, texelFetch(g_PointLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3110 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3110 + 3u)).x));
                        uint _3129 = (_3088 * 48u) + 8u;
                        vec3 _3140 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3129)).x, texelFetch(g_PointLightRenderingBuffer, int(_3129 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3129 + 2u)).x));
                        float _3144 = _3104.x - _2662;
                        float _3145 = _3104.y - _2663;
                        float _3146 = _3104.z - _2664;
                        float _3147 = dot(vec3(_3144, _3145, _3146), vec3(_3144, _3145, _3146));
                        float _3150 = inversesqrt(_3147);
                        float _3151 = _3150 * _3144;
                        float _3152 = _3150 * _3145;
                        float _3153 = _3150 * _3146;
                        float _3154 = dot(vec3(_905, _908, _911), vec3(_3151, _3152, _3153));
                        float _3159 = 1.0 - (_3147 * _3104.w);
                        float _4523 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
                        float _3160 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                        float _3161 = sqrt(_3147) * _3123.w;
                        float _3164 = 1.39999997615814208984375 / (_3161 + 1.39999997615814208984375);
                        float _3165 = _3164 * _3164;
                        float _3168 = ((1.0 - _3165) * _3154) + _3165;
                        float _3171 = _3161 * _3161;
                        float _3175 = ((isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0))) * _3160) / ((_3171 * 0.699999988079071044921875) + 1.0);
                        float _3179 = (-0.0) - _2662;
                        float _3180 = (-0.0) - _2663;
                        float _3181 = (-0.0) - _2664;
                        float _3185 = inversesqrt(dot(vec3(_3179, _3180, _3181), vec3(_3179, _3180, _3181)));
                        float _3186 = _3185 * _3179;
                        float _3187 = _3185 * _3180;
                        float _3188 = _3185 * _3181;
                        float _3196 = exp2(log2(1.0 / ((_3171 * 3.5) + 5.0)) * 0.25);
                        float _3197 = 1.0 - _980;
                        float _3204 = sqrt(1.0 - ((1.0 - (_3197 * _3197)) * (1.0 - (_3196 * _3196))));
                        float _3205 = _3204 * _3204;
                        float _3206 = _3205 * _3205;
                        float _3207 = _3186 + _3151;
                        float _3208 = _3187 + _3152;
                        float _3209 = _3188 + _3153;
                        float _3213 = inversesqrt(dot(vec3(_3207, _3208, _3209), vec3(_3207, _3208, _3209)));
                        float _3217 = dot(vec3(_905, _908, _911), vec3(_3186, _3187, _3188));
                        float _4539 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                        float _3220 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                        float _3221 = dot(vec3(_905, _908, _911), vec3(_3213 * _3207, _3213 * _3208, _3213 * _3209));
                        float _4550 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                        float _3224 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
                        float _3228 = ((_3224 * _3224) * (_3206 + (-1.0))) + 1.0;
                        float _3229 = _3164 * _3205;
                        float _3230 = _3229 * _3229;
                        float _3233 = ((1.0 - _3230) * _3154) + _3230;
                        float _4561 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                        float _3234 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
                        float _3235 = 1.0 - _3205;
                        float _3245 = (0.5 / (((_3234 * ((_3220 * _3235) + _3205)) + 9.9999999392252902907785028219223e-09) + (((_3234 * _3235) + _3205) * _3220))) * _3234;
                        float _4572 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                        float _3255 = (((_3206 * 3.1415927410125732421875) * (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0)))) / ((_3228 * _3228) * ((_3171 * 2.1991131305694580078125) + 3.141590118408203125))) * _3160;
                        _3013 = (_3175 * _3123.x) + _3081;
                        _3014 = (_3175 * _3123.y) + _3082;
                        _3015 = (_3175 * _3123.z) + _3083;
                        _3010 = (_3255 * _3140.x) + _3078;
                        _3011 = (_3255 * _3140.y) + _3079;
                        _3012 = (_3255 * _3140.z) + _3080;
                        if (_3085 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3078 = _3010;
                            _3079 = _3011;
                            _3080 = _3012;
                            _3081 = _3013;
                            _3082 = _3014;
                            _3083 = _3015;
                            _3084 = _3085;
                        }
                    }
                    frontier_phi_61_pred = _3010;
                    frontier_phi_61_pred_1 = _3015;
                    frontier_phi_61_pred_2 = _3014;
                    frontier_phi_61_pred_3 = _3013;
                    frontier_phi_61_pred_4 = _3012;
                    frontier_phi_61_pred_5 = _3011;
                }
                _2810 = frontier_phi_61_pred;
                _2820 = frontier_phi_61_pred_1;
                _2818 = frontier_phi_61_pred_2;
                _2816 = frontier_phi_61_pred_3;
                _2814 = frontier_phi_61_pred_4;
                _2812 = frontier_phi_61_pred_5;
                uint _2961 = _2960 + 1u;
                if (_2961 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2954 = _2810;
                    _2955 = _2812;
                    _2956 = _2814;
                    _2957 = _2816;
                    _2958 = _2818;
                    _2959 = _2820;
                    _2960 = _2961;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2809 = _2810;
            _2811 = _2812;
            _2813 = _2814;
            _2815 = _2816;
            _2817 = _2818;
            _2819 = _2820;
        }
        uvec4 _2823 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2824 = _2823.z;
        uint _2826 = (_2824 >> 8u) & 15u;
        float _2922;
        float _2924;
        float _2926;
        float _2928;
        float _2930;
        float _2932;
        if (((4294967295u << _2826) & _2708) == 0u)
        {
            _2922 = _2809;
            _2924 = _2811;
            _2926 = _2813;
            _2928 = _2815;
            _2930 = _2817;
            _2932 = _2819;
        }
        else
        {
            float _2947 = inversesqrt(dot(vec3(_2662, _2663, _2664), vec3(_2662, _2663, _2664)));
            float _2948 = _2947 * _2662;
            float _2949 = _2947 * _2663;
            float _2950 = _2947 * _2664;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2826 < ((_2824 >> 12u) & 15u))
            {
                float _2923;
                float _2925;
                float _2927;
                float _2929;
                float _2931;
                float _2933;
                float _3061 = _2809;
                float _3062 = _2811;
                float _3063 = _2813;
                float _3064 = _2815;
                float _3065 = _2817;
                float _3066 = _2819;
                uint _3067 = _2826;
                uint _3076;
                bool _3077;
                for (;;)
                {
                    _3076 = texelFetch(g_lightClassification, int((((_2702 << 5u) + (_2688 << 9u)) + (_3067 << 2u)) >> 2u)).x;
                    _3077 = _3076 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3077)
                    {
                        frontier_phi_67_pred = _3064;
                        frontier_phi_67_pred_1 = _3065;
                        frontier_phi_67_pred_2 = _3066;
                        frontier_phi_67_pred_3 = _3063;
                        frontier_phi_67_pred_4 = _3062;
                        frontier_phi_67_pred_5 = _3061;
                    }
                    else
                    {
                        float _3260;
                        float _3261;
                        float _3262;
                        float _3263;
                        float _3264;
                        float _3265;
                        float _3553;
                        float _3554;
                        float _3555;
                        float _3556;
                        float _3557;
                        float _3558;
                        float _3273 = _3061;
                        float _3274 = _3062;
                        float _3275 = _3063;
                        float _3276 = _3064;
                        float _3277 = _3065;
                        float _3278 = _3066;
                        uint _3279 = _3076;
                        uint _3280;
                        vec4 _3305;
                        float _3306;
                        vec4 _3321;
                        vec3 _3333;
                        vec4 _3348;
                        vec4 _3363;
                        float _3409;
                        bool _3410;
                        for (;;)
                        {
                            uint _3290 = ((_3067 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3279));
                            _3280 = (_3279 + 4294967295u) & _3279;
                            uint _3292 = _3290 * 40u;
                            _3305 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3292)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 3u)).x));
                            _3306 = _3305.w;
                            uint _3308 = (_3290 * 40u) + 4u;
                            _3321 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3308)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 3u)).x));
                            uint _3323 = (_3290 * 40u) + 8u;
                            _3333 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x));
                            uint _3335 = (_3290 * 40u) + 16u;
                            _3348 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3335)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 3u)).x));
                            uint _3350 = (_3290 * 40u) + 20u;
                            _3363 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3350)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 3u)).x));
                            uint _3365 = (_3290 * 40u) + 24u;
                            vec4 _3378 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3365)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 3u)).x));
                            uint _3384 = (_3290 * 40u) + 28u;
                            vec4 _3397 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3384)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 3u)).x));
                            _3409 = fma(_2664, _3397.z, fma(_2663, _3397.y, _3397.x * _2662)) + _3397.w;
                            _3410 = !((fma(_2664, _3378.z, fma(_2663, _3378.y, _3378.x * _2662)) + _3378.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3410)
                            {
                                float _3437 = _3305.x - _2662;
                                float _3438 = _3305.y - _2663;
                                float _3439 = _3305.z - _2664;
                                float _3440 = dot(vec3(_3437, _3438, _3439), vec3(_3437, _3438, _3439));
                                float _3443 = inversesqrt(_3440);
                                float _3444 = _3443 * _3437;
                                float _3445 = _3443 * _3438;
                                float _3446 = _3443 * _3439;
                                float _3450 = 1.0 - (_3440 / (_3306 * _3306));
                                float _4583 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                                float _3451 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
                                float _3455 = sqrt(_3440) * _3321.w;
                                float _3457 = 1.39999997615814208984375 / (_3455 + 1.39999997615814208984375);
                                float _3458 = _3457 * _3457;
                                float _3461 = ((1.0 - _3458) * dot(vec3(_3444, _3445, _3446), vec3(_905, _908, _911))) + _3458;
                                float _3464 = _3455 * _3455;
                                float _3468 = (fma(_2664, _3348.z, fma(_2663, _3348.y, _3348.x * _2662)) + _3348.w) / _3409;
                                float _3469 = (fma(_2664, _3363.z, fma(_2663, _3363.y, _3363.x * _2662)) + _3363.w) / _3409;
                                float _3473 = 1.0 - dot(vec2(_3468, _3469), vec2(_3468, _3469));
                                float _4599 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                                float _3474 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                                float _3475 = _3474 * (((isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0))) * _3451) / ((_3464 * 0.699999988079071044921875) + 1.0));
                                float _3487 = exp2(log2(1.0 / ((_3464 * 3.5) + 5.0)) * 0.25);
                                float _3488 = 1.0 - _980;
                                float _3495 = sqrt(1.0 - ((1.0 - (_3488 * _3488)) * (1.0 - (_3487 * _3487))));
                                float _3496 = _3495 * _3495;
                                float _3497 = _3496 * _3496;
                                float _3498 = _3444 - _2948;
                                float _3499 = _3445 - _2949;
                                float _3500 = _3446 - _2950;
                                float _3504 = inversesqrt(dot(vec3(_3498, _3499, _3500), vec3(_3498, _3499, _3500)));
                                float _3508 = dot(vec3(_905, _908, _911), vec3((-0.0) - _2948, (-0.0) - _2949, (-0.0) - _2950));
                                float _4610 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0));
                                float _3511 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
                                float _3512 = dot(vec3(_905, _908, _911), vec3(_3504 * _3498, _3504 * _3499, _3504 * _3500));
                                float _4621 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                                float _3515 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
                                float _3519 = ((_3515 * _3515) * (_3497 + (-1.0))) + 1.0;
                                float _3520 = _3457 * _3496;
                                float _3521 = _3520 * _3520;
                                float _3527 = ((1.0 - _3521) * dot(vec3(_905, _908, _911), vec3(_3444, _3445, _3446))) + _3521;
                                float _4632 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                                float _3528 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
                                float _3529 = 1.0 - _3496;
                                float _3539 = (0.5 / (((_3528 * ((_3511 * _3529) + _3496)) + 9.9999999392252902907785028219223e-09) + (((_3528 * _3529) + _3496) * _3511))) * _3528;
                                float _4643 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                                float _3549 = (_3474 * _3451) * (((_3497 * 3.1415927410125732421875) * (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0)))) / ((_3519 * _3519) * ((_3464 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3549 * _3333.x;
                                frontier_phi_73_pred_1 = _3549 * _3333.y;
                                frontier_phi_73_pred_2 = _3475 * _3321.z;
                                frontier_phi_73_pred_3 = _3475 * _3321.y;
                                frontier_phi_73_pred_4 = _3475 * _3321.x;
                                frontier_phi_73_pred_5 = _3549 * _3333.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3553 = frontier_phi_73_pred;
                            _3554 = frontier_phi_73_pred_1;
                            _3558 = frontier_phi_73_pred_2;
                            _3557 = frontier_phi_73_pred_3;
                            _3556 = frontier_phi_73_pred_4;
                            _3555 = frontier_phi_73_pred_5;
                            _3263 = _3556 + _3276;
                            _3264 = _3557 + _3277;
                            _3265 = _3558 + _3278;
                            _3260 = _3553 + _3273;
                            _3261 = _3554 + _3274;
                            _3262 = _3555 + _3275;
                            if (_3280 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3273 = _3260;
                                _3274 = _3261;
                                _3275 = _3262;
                                _3276 = _3263;
                                _3277 = _3264;
                                _3278 = _3265;
                                _3279 = _3280;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3263;
                        frontier_phi_67_pred_1 = _3264;
                        frontier_phi_67_pred_2 = _3265;
                        frontier_phi_67_pred_3 = _3262;
                        frontier_phi_67_pred_4 = _3261;
                        frontier_phi_67_pred_5 = _3260;
                    }
                    _2929 = frontier_phi_67_pred;
                    _2931 = frontier_phi_67_pred_1;
                    _2933 = frontier_phi_67_pred_2;
                    _2927 = frontier_phi_67_pred_3;
                    _2925 = frontier_phi_67_pred_4;
                    _2923 = frontier_phi_67_pred_5;
                    uint _3068 = _3067 + 1u;
                    if (_3068 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3061 = _2923;
                        _3062 = _2925;
                        _3063 = _2927;
                        _3064 = _2929;
                        _3065 = _2931;
                        _3066 = _2933;
                        _3067 = _3068;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2931;
                frontier_phi_55_56_ladder_1 = _2933;
                frontier_phi_55_56_ladder_2 = _2929;
                frontier_phi_55_56_ladder_3 = _2927;
                frontier_phi_55_56_ladder_4 = _2925;
                frontier_phi_55_56_ladder_5 = _2923;
            }
            else
            {
                frontier_phi_55_56_ladder = _2817;
                frontier_phi_55_56_ladder_1 = _2819;
                frontier_phi_55_56_ladder_2 = _2815;
                frontier_phi_55_56_ladder_3 = _2813;
                frontier_phi_55_56_ladder_4 = _2811;
                frontier_phi_55_56_ladder_5 = _2809;
            }
            _2922 = frontier_phi_55_56_ladder_5;
            _2924 = frontier_phi_55_56_ladder_4;
            _2926 = frontier_phi_55_56_ladder_3;
            _2928 = frontier_phi_55_56_ladder_2;
            _2930 = frontier_phi_55_56_ladder;
            _2932 = frontier_phi_55_56_ladder_1;
        }
        float _2937 = isnan(1.0) ? _964 : (isnan(_964) ? 1.0 : min(_964, 1.0));
        _2721 = (_2937 * _2928) + _2154;
        _2723 = (_2937 * _2930) + _2156;
        _2725 = (_2937 * _2932) + _2158;
        _2727 = ((_2922 * _948) * _2937) + _2502;
        _2729 = ((_2924 * _950) * _2937) + _2504;
        _2731 = ((_2926 * _951) * _2937) + _2506;
    }
    else
    {
        _2721 = _2154;
        _2723 = _2156;
        _2725 = _2158;
        _2727 = _2502;
        _2729 = _2504;
        _2731 = _2506;
    }
    float _4659 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _4670 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _4681 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    uint _2751 = _277 + 6u;
    float _2759 = _886 / cbSceneParam._m0[86u].x;
    float _2760 = _887 / cbSceneParam._m0[86u].y;
    vec4 _2774 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2759, _2760, (log2((isnan(cbSceneParam._m0[77u].w) ? _821 : (isnan(_821) ? cbSceneParam._m0[77u].w : min(_821, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2776 = _2774.x;
    float _2777 = _2774.y;
    float _2778 = _2774.z;
    float _2779 = _2774.w;
    float _2872;
    float _2874;
    float _2876;
    float _2878;
    if (_821 > cbSceneParam._m0[78u].w)
    {
        float _2834 = isnan(_821) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _821 : min(cbSceneParam._m0[80u].w, _821));
        float _2835 = _2834 / _821;
        float _2846 = _2835 * _871;
        float _2847 = _872 * _2835;
        float _2848 = (-0.0) - _2847;
        float _2850 = _2835 * _873;
        float _2852 = (cbSceneParam._m0[77u].w * _2848) / _2834;
        float _2853 = _2852 + cbSceneParam._m0[79u].w;
        float _2854 = cbSceneParam._m0[79u].w - _2847;
        float _2860 = sqrt(((_2846 * _2846) + (_2847 * _2847)) + (_2850 * _2850));
        float _2863 = (1.0 - (cbSceneParam._m0[77u].w / _2834)) * _2860;
        float _2868 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2870 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3023;
        if (abs((_2848 - _2852) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3023 = ((((_2853 > 0.0) ? exp2(_2868 * _2853) : (2.0 - exp2(_2870 * _2853))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2863;
        }
        else
        {
            float _2983 = 1.0 / cbSceneParam._m0[80u].x;
            float _2984 = isnan(_2854) ? _2853 : (isnan(_2853) ? _2854 : max(_2853, _2854));
            float _2985 = isnan(_2854) ? _2853 : (isnan(_2853) ? _2854 : min(_2853, _2854));
            float _2994 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : min(_2984, 0.0));
            float _2995 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : min(_2985, 0.0));
            _3023 = ((abs(_2860 / _2848) * cbSceneParam._m0[80u].y) * ((((_2994 - _2995) * 2.0) - ((exp2(_2868 * (isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0)))) - exp2(_2868 * (isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0))))) * _2983)) - ((exp2(_2870 * _2994) - exp2(_2870 * _2995)) * _2983))) + (_2863 * cbSceneParam._m0[80u].z);
        }
        vec4 _3025 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2759, _2760, 1.0), 0.0);
        float _3034 = exp2((_3023 * (-1.44269502162933349609375)) * (1.0 - _3025.w));
        float _3035 = log2(_3034);
        float _3051 = log2(_2779);
        _2872 = (exp2(_3051 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3035 * cbSceneParam._m0[78u].x)) * _3025.x) / cbSceneParam._m0[78u].x)) + _2776;
        _2874 = (exp2(_3051 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3035 * cbSceneParam._m0[78u].y)) * _3025.y) / cbSceneParam._m0[78u].y)) + _2777;
        _2876 = (exp2(_3051 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3035 * cbSceneParam._m0[78u].z)) * _3025.z) / cbSceneParam._m0[78u].z)) + _2778;
        _2878 = _3034 * _2779;
    }
    else
    {
        _2872 = _2776;
        _2874 = _2777;
        _2876 = _2778;
        _2878 = _2779;
    }
    float _2890 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2891 = _2890 == 3.0;
    float _2892 = log2(_2878);
    float _2899 = exp2(_2892 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0))) * (_2721 + ((isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))) * _964))) + ((_2727 + ((isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0))) * _1770)) * cbPerFrame._m0[3u].x));
    float _2900 = exp2(_2892 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0))) * (_2723 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _964))) + ((_2729 + ((isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0))) * _1770)) * cbPerFrame._m0[3u].x));
    float _2901 = exp2(_2892 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0))) * (_2725 + ((isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))) * _964))) + ((_2731 + ((isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0))) * _1770)) * cbPerFrame._m0[3u].x));
    float _2910 = (_2890 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2910 * (_2891 ? _2899 : (_2899 + (cbSceneParam._m0[72u].w * _2872)));
    SV_Target.y = _2910 * (_2891 ? _2900 : (_2900 + (cbSceneParam._m0[72u].w * _2874)));
    SV_Target.z = _2910 * (_2891 ? _2901 : (_2901 + (cbSceneParam._m0[72u].w * _2876)));
    SV_Target.w = cbInstanceData._m0[_2751].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2751].w;
}


