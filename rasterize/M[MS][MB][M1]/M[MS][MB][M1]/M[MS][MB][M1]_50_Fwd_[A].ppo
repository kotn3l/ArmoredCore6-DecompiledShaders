#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1235;
float _3615;
float _3616;
float _3617;
float _3618;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _226 = _225 * _217;
    float _227 = _225 * _218;
    float _228 = _225 * _219;
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = _232 * NORMAL.x;
    float _234 = _232 * NORMAL.y;
    float _235 = _232 * NORMAL.z;
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _240 = _239 * TANGENT.x;
    float _241 = _239 * TANGENT.y;
    float _242 = _239 * TANGENT.z;
    uint _245 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _245 + 1u;
    uint _254 = _245 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_245].x * cbInstanceData._m0[_245].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _284 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _290 = _284.x * cbMtdParam._m0[9u].x;
    float _291 = _284.y * cbMtdParam._m0[9u].y;
    float _292 = _284.z * cbMtdParam._m0[9u].z;
    vec4 _311 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _264) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _265) + cbTextureTilingScale._m0[14u].w));
    vec4 _331 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _264) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _265) + cbTextureTilingScale._m0[20u].w));
    vec4 _357 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _361 = _357.z;
    float _365 = (_357.x * 2.0) + (-1.0);
    float _366 = (_357.y * 2.0) + (-1.0);
    float _367 = dot(vec2(_365, _366), vec2(_365, _366));
    float _3627 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _373 = sqrt(1.0 - (isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0))));
    float _378 = _365 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_331.x * 2.0) + (-1.0)));
    float _379 = _366 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_331.y * 2.0) + (-1.0)));
    float _382 = fma(_373, _233, fma(_379, _240, _378 * _226));
    float _385 = fma(_373, _234, fma(_379, _241, _378 * _227));
    float _388 = fma(_373, _235, fma(_379, _242, _378 * _228));
    float _392 = inversesqrt(dot(vec3(_382, _385, _388), vec3(_382, _385, _388)));
    vec4 _428 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _430 = _428.x;
    float _431 = 1.0 - _430;
    float _440 = (cbMtdParam._m0[19u].x + dot(vec4(_392 * _382, _392 * _385, _392 * _388, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_430 - _431) * cbMtdParam._m0[24u].z) + _431) * cbMtdParam._m0[21u].z);
    float _3638 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _441 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
    float _443 = (-0.0) - cbMtdParam._m0[24u].x;
    float _445 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _446 = isnan(1.0) ? _445 : (isnan(_445) ? 1.0 : min(_445, 1.0));
    float _453 = _441 - ((_441 * TEXCOORD_8.x) * _446);
    float _454 = _441 - ((_441 * TEXCOORD_8.y) * _446);
    float _455 = _441 - ((_441 * TEXCOORD_8.z) * _446);
    float _462 = (_453 * ((_311.x * cbMtdParam._m0[18u].x) - _290)) + _290;
    float _463 = (_454 * ((_311.y * cbMtdParam._m0[18u].y) - _291)) + _291;
    float _464 = (_455 * ((_311.z * cbMtdParam._m0[18u].z) - _292)) + _292;
    vec4 _476 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _264) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _265) + cbTextureTilingScale._m0[19u].w));
    float _478 = _476.x;
    float _479 = 1.0 - _478;
    float _509 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_478 - _479) * cbMtdParam._m0[24u].w) + _479) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3659 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _510 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
    float _518 = ((((cbMtdParam._m0[10u].x - _462) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _510) + _462;
    float _519 = ((((cbMtdParam._m0[10u].y - _463) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _510) + _463;
    float _520 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _464)) * _510) + _464;
    vec4 _533 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _535 = _533.x;
    float _537 = _535 - (_535 * _453);
    float _539 = _537 - (_537 * _510);
    float _544 = (((_331.z - _361) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _361;
    vec4 _558 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _565 = (_558.x * 2.0) + (-1.0);
    float _566 = (_558.y * 2.0) + (-1.0);
    float _567 = dot(vec2(_565, _566), vec2(_565, _566));
    float _3670 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _575 = ((_558.z - _544) * _453) + _544;
    float _578 = ((cbMtdParam._m0[23u].y - _575) * _510) + _575;
    vec4 _597 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _264) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _265) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _603 = (_597.x * 2.0) + (-1.0);
    float _604 = (_597.y * 2.0) + (-1.0);
    float _605 = dot(vec2(_603, _604), vec2(_603, _604));
    float _3681 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _620 = ((sqrt(1.0 - (isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0)))) - _373) * _455) + _373;
    float _623 = (((_565 - _378) * _453) + _378) + (cbMtdParam._m0[21u].x * _378);
    float _624 = (((_566 - _379) * _454) + _379) + (cbMtdParam._m0[21u].x * _379);
    float _635 = (((_603 - _623) + (_623 * cbMtdParam._m0[22u].z)) * _510) + _623;
    float _636 = (((_604 - _624) + (_624 * cbMtdParam._m0[22u].z)) * _510) + _624;
    float _637 = (_510 * (sqrt(1.0 - (isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0)))) - _620)) + _620;
    float _639 = cbMtdParam._m0[22u].x + _357.w;
    float _642 = fma(_637, _233, fma(_636, _240, _635 * _226));
    float _645 = fma(_637, _234, fma(_636, _241, _635 * _227));
    float _648 = fma(_637, _235, fma(_636, _242, _635 * _228));
    float _652 = inversesqrt(dot(vec3(_642, _645, _648), vec3(_642, _645, _648)));
    float _653 = _652 * _642;
    float _654 = _652 * _645;
    float _655 = _652 * _648;
    float _3692 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _656 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    float _3703 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _3714 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _3725 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _3736 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _3747 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _661 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    float _675 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _715 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _725 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _715);
    float _726 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _715);
    float _727 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _715);
    float _731 = inversesqrt(dot(vec3(_725, _726, _727), vec3(_725, _726, _727)));
    float _732 = _725 * _731;
    float _733 = _726 * _731;
    float _734 = _727 * _731;
    vec4 _739 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _741 = _739.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _916 = sqrt(((_725 * _725) + (_726 * _726)) + (_727 * _727));
        float _922 = (cbMatDynParam._m0[5u].x * _916) + cbMatDynParam._m0[5u].y;
        float _3758 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _923 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _927 = (cbMatDynParam._m0[5u].z * _916) + cbMatDynParam._m0[5u].w;
        float _3769 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) - _923)) + _923) < ((_741 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _753 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _754 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _774 = fma(_655, cbSceneParam._m0[5u].z, fma(_654, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _653));
    float _777 = fma(_655, cbSceneParam._m0[6u].z, fma(_654, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _653));
    float _780 = fma(_655, cbSceneParam._m0[7u].z, fma(_654, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _653));
    uint _793 = _245 + 9u;
    uint _794 = _793 + uint(cbMatDynParam._m0[0u].w);
    float _800 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0)))) * cbInstanceData._m0[_794].x;
    float _801 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0)))) * cbInstanceData._m0[_794].y;
    float _802 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0)))) * cbInstanceData._m0[_794].z;
    float _3780 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _803 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _3791 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _804 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _3802 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _805 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _806 = 1.0 - _661;
    float _807 = _803 * _806;
    float _808 = _804 * _806;
    float _809 = _805 * _806;
    float _814 = (_803 + (-0.039999999105930328369140625)) * _661;
    float _815 = (_804 + (-0.039999999105930328369140625)) * _661;
    float _816 = (_805 + (-0.039999999105930328369140625)) * _661;
    float _817 = _814 + 0.039999999105930328369140625;
    float _819 = _815 + 0.039999999105930328369140625;
    float _820 = _816 + 0.039999999105930328369140625;
    vec4 _829 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _753, cbSceneParam._m0[86u].y * _754));
    float _833 = ((isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * TEXCOORD_5.w) * _829.x;
    float _834 = dot(vec3(_653, _654, _655), vec3(_732, _733, _734));
    float _837 = _834 * 2.0;
    float _841 = (_837 * _653) - _732;
    float _842 = (_837 * _654) - _733;
    float _843 = (_837 * _655) - _734;
    float _847 = abs(dot(vec3(_732, _733, _734), vec3(_653, _654, _655)));
    float _3813 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _849 = sqrt(_656);
    float _862 = exp2((_849 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_849 * 3.0));
    float _868 = (1.0 - _862) * ((_849 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _869 = _862 * _849;
    float _897 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _901 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _905 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1234;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _959 = fma(_905, cbModelParam._m0[26u].z, fma(_901, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _897));
        float _963 = fma(_905, cbModelParam._m0[27u].z, fma(_901, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _897));
        float _967 = fma(_905, cbModelParam._m0[28u].z, fma(_901, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _897));
        float _992 = _897 + _653;
        float _993 = _901 + _654;
        float _994 = _905 + _655;
        float _1004 = fma(_994, cbModelParam._m0[26u].z, fma(_993, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _992)) - _959;
        float _1005 = fma(_994, cbModelParam._m0[27u].z, fma(_993, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _992)) - _963;
        float _1006 = fma(_994, cbModelParam._m0[28u].z, fma(_993, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _992)) - _967;
        float _1010 = inversesqrt(dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006)));
        float _1023 = ((_1010 * _1004) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_959 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1024 = ((_1010 * _1005) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_963 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1025 = ((_1010 * _1006) / cbModelParam._m0[34u].z) + ((((((_967 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        float _1062 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1028.x + (-0.5));
        float _1064 = _1062 * (_1028.y + (-0.5));
        float _1065 = _1062 * (_1028.z + (-0.5));
        float _1072 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1035.x + (-0.5));
        float _1074 = _1072 * (_1035.y + (-0.5));
        float _1075 = _1072 * (_1035.z + (-0.5));
        float _1082 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1042.x + (-0.5));
        float _1084 = _1082 * (_1042.y + (-0.5));
        float _1085 = _1082 * (_1042.z + (-0.5));
        float _1092 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1093 = _1092 * (_1049.x + (-0.5));
        float _1094 = _1092 * (_1049.y + (-0.5));
        float _1095 = _1092 * (_1049.z + (-0.5));
        float _1096 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1097 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1098 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1099 = _1063 * 0.5;
        float _1100 = _1073 * 0.5;
        float _1101 = _1083 * 0.5;
        float _1102 = dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101));
        float _1107 = (_1102 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1102);
        float _1116 = (dot(vec3(_653, _654, _655), vec3(_1107 * _1099, _1107 * _1100, _1107 * _1101)) + 1.0) * 0.5;
        float _3839 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1126 = sqrt(((_1100 * _1100) + (_1099 * _1099)) + (_1101 * _1101)) / (_1096 + 9.9999997473787516355514526367188e-06);
        float _3850 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1128 = _1127 * 2.0;
        float _1132 = (1.0 - _1127) / (_1127 + 1.0);
        float _3861 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1142 = ((((1.0 - _1133) * (_1128 + 2.0)) * exp2(log2(isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * (_1128 + 1.0))) + _1133) * _1096;
        float _1143 = _1064 * 0.5;
        float _1144 = _1074 * 0.5;
        float _1145 = _1084 * 0.5;
        float _1146 = dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145));
        float _1151 = (_1146 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1146);
        float _1159 = (dot(vec3(_653, _654, _655), vec3(_1151 * _1143, _1151 * _1144, _1151 * _1145)) + 1.0) * 0.5;
        float _3872 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1168 = sqrt(((_1144 * _1144) + (_1143 * _1143)) + (_1145 * _1145)) / (_1097 + 9.9999997473787516355514526367188e-06);
        float _3883 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1170 = _1169 * 2.0;
        float _1174 = (1.0 - _1169) / (_1169 + 1.0);
        float _3894 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1184 = ((((1.0 - _1175) * (_1170 + 2.0)) * exp2(log2(isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * (_1170 + 1.0))) + _1175) * _1097;
        float _1185 = _1065 * 0.5;
        float _1186 = _1075 * 0.5;
        float _1187 = _1085 * 0.5;
        float _1188 = dot(vec3(_1185, _1186, _1187), vec3(_1185, _1186, _1187));
        float _1193 = (_1188 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1188);
        float _1201 = (dot(vec3(_653, _654, _655), vec3(_1193 * _1185, _1193 * _1186, _1193 * _1187)) + 1.0) * 0.5;
        float _3905 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1210 = sqrt(((_1186 * _1186) + (_1185 * _1185)) + (_1187 * _1187)) / (_1098 + 9.9999997473787516355514526367188e-06);
        float _3916 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1212 = _1211 * 2.0;
        float _1216 = (1.0 - _1211) / (_1211 + 1.0);
        float _3927 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1226 = ((((1.0 - _1217) * (_1212 + 2.0)) * exp2(log2(isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * (_1212 + 1.0))) + _1217) * _1098;
        _1234 = _1065;
        _1236 = _1064;
        _1237 = _1063;
        _1238 = _1075;
        _1239 = _1074;
        _1240 = _1073;
        _1241 = _1085;
        _1242 = _1084;
        _1243 = _1083;
        _1244 = _1098;
        _1245 = _1097;
        _1246 = _1096;
        _1247 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0)));
        _1248 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)));
        _1249 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)));
    }
    else
    {
        _1234 = _1235;
        _1236 = _1235;
        _1237 = _1235;
        _1238 = _1235;
        _1239 = _1235;
        _1240 = _1235;
        _1241 = _1235;
        _1242 = _1235;
        _1243 = _1235;
        _1244 = _1235;
        _1245 = _1235;
        _1246 = _1235;
        _1247 = 0.0;
        _1248 = 0.0;
        _1249 = 0.0;
    }
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1277 = fma(_905, cbModelParam._m0[30u].z, fma(_901, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _897));
        float _1281 = fma(_905, cbModelParam._m0[31u].z, fma(_901, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _897));
        float _1285 = fma(_905, cbModelParam._m0[32u].z, fma(_901, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _897));
        float _1308 = _897 + _653;
        float _1309 = _901 + _654;
        float _1310 = _905 + _655;
        float _1320 = fma(_1310, cbModelParam._m0[30u].z, fma(_1309, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1308)) - _1277;
        float _1321 = fma(_1310, cbModelParam._m0[31u].z, fma(_1309, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1308)) - _1281;
        float _1322 = fma(_1310, cbModelParam._m0[32u].z, fma(_1309, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1308)) - _1285;
        float _1326 = inversesqrt(dot(vec3(_1320, _1321, _1322), vec3(_1320, _1321, _1322)));
        float _1339 = ((_1326 * _1320) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1277 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1340 = ((_1326 * _1321) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1281 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1341 = ((_1326 * _1322) / cbModelParam._m0[35u].z) + ((((((_1285 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1339, _1340, _1341), 0.0);
        vec4 _1350 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1339, _1340, _1341), 0.0);
        vec4 _1357 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1339, _1340, _1341), 0.0);
        vec4 _1364 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1339, _1340, _1341), 0.0);
        float _1376 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1377 = _1376 * (_1343.x + (-0.5));
        float _1378 = _1376 * (_1343.y + (-0.5));
        float _1379 = _1376 * (_1343.z + (-0.5));
        float _1386 = exp2((_1350.w + (-0.5)) * 20.0) * 2.0;
        float _1387 = _1386 * (_1350.x + (-0.5));
        float _1388 = _1386 * (_1350.y + (-0.5));
        float _1389 = _1386 * (_1350.z + (-0.5));
        float _1396 = exp2((_1357.w + (-0.5)) * 20.0) * 2.0;
        float _1397 = _1396 * (_1357.x + (-0.5));
        float _1398 = _1396 * (_1357.y + (-0.5));
        float _1399 = _1396 * (_1357.z + (-0.5));
        float _1406 = exp2((_1364.w + (-0.5)) * 20.0) * 2.0;
        float _1407 = _1406 * (_1364.x + (-0.5));
        float _1408 = _1406 * (_1364.y + (-0.5));
        float _1409 = _1406 * (_1364.z + (-0.5));
        float _1410 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1411 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1412 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1413 = _1377 * 0.5;
        float _1414 = _1387 * 0.5;
        float _1415 = _1397 * 0.5;
        float _1416 = dot(vec3(_1413, _1414, _1415), vec3(_1413, _1414, _1415));
        float _1421 = (_1416 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1416);
        float _1429 = (dot(vec3(_653, _654, _655), vec3(_1421 * _1413, _1421 * _1414, _1421 * _1415)) + 1.0) * 0.5;
        float _3968 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1438 = sqrt(((_1414 * _1414) + (_1413 * _1413)) + (_1415 * _1415)) / (_1410 + 9.9999997473787516355514526367188e-06);
        float _3979 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1440 = _1439 * 2.0;
        float _1444 = (1.0 - _1439) / (_1439 + 1.0);
        float _3990 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1454 = ((((1.0 - _1445) * (_1440 + 2.0)) * exp2(log2(isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * (_1440 + 1.0))) + _1445) * _1410;
        float _1455 = _1378 * 0.5;
        float _1456 = _1388 * 0.5;
        float _1457 = _1398 * 0.5;
        float _1458 = dot(vec3(_1455, _1456, _1457), vec3(_1455, _1456, _1457));
        float _1463 = (_1458 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1458);
        float _1471 = (dot(vec3(_653, _654, _655), vec3(_1463 * _1455, _1463 * _1456, _1463 * _1457)) + 1.0) * 0.5;
        float _4001 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1480 = sqrt(((_1456 * _1456) + (_1455 * _1455)) + (_1457 * _1457)) / (_1411 + 9.9999997473787516355514526367188e-06);
        float _4012 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1482 = _1481 * 2.0;
        float _1486 = (1.0 - _1481) / (_1481 + 1.0);
        float _4023 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1496 = ((((1.0 - _1487) * (_1482 + 2.0)) * exp2(log2(isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * (_1482 + 1.0))) + _1487) * _1411;
        float _1497 = _1379 * 0.5;
        float _1498 = _1389 * 0.5;
        float _1499 = _1399 * 0.5;
        float _1500 = dot(vec3(_1497, _1498, _1499), vec3(_1497, _1498, _1499));
        float _1505 = (_1500 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1500);
        float _1513 = (dot(vec3(_653, _654, _655), vec3(_1505 * _1497, _1505 * _1498, _1505 * _1499)) + 1.0) * 0.5;
        float _4034 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1522 = sqrt(((_1498 * _1498) + (_1497 * _1497)) + (_1499 * _1499)) / (_1412 + 9.9999997473787516355514526367188e-06);
        float _4045 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1524 = _1523 * 2.0;
        float _1528 = (1.0 - _1523) / (_1523 + 1.0);
        float _4056 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1538 = ((((1.0 - _1529) * (_1524 + 2.0)) * exp2(log2(isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (_1524 + 1.0))) + _1529) * _1412;
        _1546 = _1379;
        _1547 = _1378;
        _1548 = _1377;
        _1549 = _1389;
        _1550 = _1388;
        _1551 = _1387;
        _1552 = _1399;
        _1553 = _1398;
        _1554 = _1397;
        _1555 = _1412;
        _1556 = _1411;
        _1557 = _1410;
        _1558 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)));
        _1559 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)));
        _1560 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)));
    }
    else
    {
        _1546 = _1235;
        _1547 = _1235;
        _1548 = _1235;
        _1549 = _1235;
        _1550 = _1235;
        _1551 = _1235;
        _1552 = _1235;
        _1553 = _1235;
        _1554 = _1235;
        _1555 = _1235;
        _1556 = _1235;
        _1557 = _1235;
        _1558 = 0.0;
        _1559 = 0.0;
        _1560 = 0.0;
    }
    float _1570 = (cbModelParam._m0[1u].x * (_1558 - _1247)) + _1247;
    float _1571 = (cbModelParam._m0[1u].x * (_1559 - _1248)) + _1248;
    float _1572 = (cbModelParam._m0[1u].x * (_1560 - _1249)) + _1249;
    float _1593 = fma(_1572, cbSceneParam._m0[89u].z, fma(_1571, cbSceneParam._m0[89u].y, _1570 * cbSceneParam._m0[89u].x));
    float _1596 = fma(_1572, cbSceneParam._m0[90u].z, fma(_1571, cbSceneParam._m0[90u].y, _1570 * cbSceneParam._m0[90u].x));
    float _1599 = fma(_1572, cbSceneParam._m0[91u].z, fma(_1571, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1570));
    float _1614 = _841 * 0.5;
    float _1615 = _842 * 0.5;
    float _1616 = _843 * 0.5;
    float _1617 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1548, _1551, _1554, _1557));
    float _1620 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1547, _1550, _1553, _1556));
    float _1623 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1546, _1549, _1552, _1555));
    float _1657;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1630 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1234, _1238, _1241, _1244));
        float _1634 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1236, _1239, _1242, _1245));
        float _1638 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1237, _1240, _1243, _1246));
        float _1645 = dot(vec4(cbModelParam._m0[39u]), vec4(_1614, _1615, _1616, 1.0));
        _1657 = dot(vec3(isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)), isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0)), isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1645) ? 0.0 : (isnan(0.0) ? _1645 : max(0.0, _1645))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1657 = 1.0;
    }
    float _1668;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1659 = dot(vec4(cbModelParam._m0[40u]), vec4(_1614, _1615, _1616, 1.0));
        _1668 = dot(vec3(isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)), isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)), isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1659) ? 0.0 : (isnan(0.0) ? _1659 : max(0.0, _1659))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1668 = 1.0;
    }
    float _1672 = (_1668 * cbModelParam._m0[1u].x) + (_1657 * (1.0 - cbModelParam._m0[1u].x));
    float _1682 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _656);
    float _1683 = isnan(_1682) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1682 : min(cbModelParam._m0[25u].z, _1682));
    float _1763;
    float _1765;
    float _1767;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1730 = fma(_905, cbModelParam._m0[13u].z, fma(_901, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _897)) + cbModelParam._m0[13u].w;
        float _1734 = fma(_905, cbModelParam._m0[14u].z, fma(_901, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _897)) + cbModelParam._m0[14u].w;
        float _1738 = fma(_905, cbModelParam._m0[15u].z, fma(_901, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _897)) + cbModelParam._m0[15u].w;
        float _1741 = fma(_843, cbModelParam._m0[13u].z, fma(_842, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _841));
        float _1744 = fma(_843, cbModelParam._m0[14u].z, fma(_842, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _841));
        float _1747 = fma(_843, cbModelParam._m0[15u].z, fma(_842, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _841));
        float _1775;
        if (_1741 > 0.0)
        {
            _1775 = abs((1.0 - _1730) / _1741);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1741 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1730 + 1.0) / _1741);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1775 = frontier_phi_17_15_ladder;
        }
        float _1978;
        if (_1744 > 0.0)
        {
            _1978 = abs((1.0 - _1734) / _1744);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1744 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1734 + 1.0) / _1744);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1978 = frontier_phi_26_22_ladder;
        }
        float _2232;
        if (_1747 > 0.0)
        {
            _2232 = abs((1.0 - _1738) / _1747);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1747 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1738 + 1.0) / _1747);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2232 = frontier_phi_38_33_ladder;
        }
        float _2234 = isnan(_1978) ? _1775 : (isnan(_1775) ? _1978 : min(_1775, _1978));
        float _2235 = isnan(_2232) ? _2234 : (isnan(_2234) ? _2232 : min(_2234, _2232));
        float _2239 = (_2235 * _1741) + _1730;
        float _2240 = (_2235 * _1744) + _1734;
        float _2241 = (_2235 * _1747) + _1738;
        float _2242 = _2235 * 9.9999997473787516355514526367188e-05;
        float _2244 = (-1.0) - _2242;
        float _2246 = _2242 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2241 > _2246) || ((_2241 < _2244) || ((_2240 > _2246) || ((_2240 < _2244) || ((_2239 < _2244) || (_2239 > _2246))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2369 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2241, cbModelParam._m0[9u].z, fma(_2240, cbModelParam._m0[9u].y, _2239 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2241, cbModelParam._m0[10u].z, fma(_2240, cbModelParam._m0[10u].y, _2239 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2241, cbModelParam._m0[11u].z, fma(_2240, cbModelParam._m0[11u].y, _2239 * cbModelParam._m0[11u].x))), _1683);
            frontier_phi_16_38_ladder = _2369.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2369.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2369.x * cbModelParam._m0[1u].y;
        }
        _1763 = frontier_phi_16_38_ladder_2;
        _1765 = frontier_phi_16_38_ladder_1;
        _1767 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1751 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_841, _842, _843), _1683);
        _1763 = _1751.x * cbModelParam._m0[1u].y;
        _1765 = _1751.y * cbModelParam._m0[1u].y;
        _1767 = _1751.z * cbModelParam._m0[1u].y;
    }
    float _1771 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _656);
    float _1772 = isnan(_1771) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1771 : min(cbModelParam._m0[25u].w, _1771));
    float _1861;
    float _1863;
    float _1865;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1825 = fma(_905, cbModelParam._m0[21u].z, fma(_901, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _897)) + cbModelParam._m0[21u].w;
        float _1829 = fma(_905, cbModelParam._m0[22u].z, fma(_901, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _897)) + cbModelParam._m0[22u].w;
        float _1833 = fma(_905, cbModelParam._m0[23u].z, fma(_901, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _897)) + cbModelParam._m0[23u].w;
        float _1836 = fma(_843, cbModelParam._m0[21u].z, fma(_842, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _841));
        float _1839 = fma(_843, cbModelParam._m0[22u].z, fma(_842, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _841));
        float _1842 = fma(_843, cbModelParam._m0[23u].z, fma(_842, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _841));
        float _1983;
        if (_1836 > 0.0)
        {
            _1983 = abs((1.0 - _1825) / _1836);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1836 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1825 + 1.0) / _1836);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1983 = frontier_phi_28_24_ladder;
        }
        float _2259;
        if (_1839 > 0.0)
        {
            _2259 = abs((1.0 - _1829) / _1839);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1839 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1829 + 1.0) / _1839);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2259 = frontier_phi_40_35_ladder;
        }
        float _2472;
        if (_1842 > 0.0)
        {
            _2472 = abs((1.0 - _1833) / _1842);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1833 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2472 = frontier_phi_49_46_ladder;
        }
        float _2474 = isnan(_2259) ? _1983 : (isnan(_1983) ? _2259 : min(_1983, _2259));
        float _2475 = isnan(_2472) ? _2474 : (isnan(_2474) ? _2472 : min(_2474, _2472));
        float _2479 = (_2475 * _1836) + _1825;
        float _2480 = (_2475 * _1839) + _1829;
        float _2481 = (_2475 * _1842) + _1833;
        float _2482 = _2475 * 9.9999997473787516355514526367188e-05;
        float _2483 = (-1.0) - _2482;
        float _2485 = _2482 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2481 > _2485) || ((_2481 < _2483) || ((_2480 > _2485) || ((_2480 < _2483) || ((_2479 < _2483) || (_2479 > _2485))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2680 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2481, cbModelParam._m0[17u].z, fma(_2480, cbModelParam._m0[17u].y, _2479 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2481, cbModelParam._m0[18u].z, fma(_2480, cbModelParam._m0[18u].y, _2479 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2481, cbModelParam._m0[19u].z, fma(_2480, cbModelParam._m0[19u].y, _2479 * cbModelParam._m0[19u].x))), _1772);
            frontier_phi_25_49_ladder = _2680.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2680.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2680.x * cbModelParam._m0[1u].z;
        }
        _1861 = frontier_phi_25_49_ladder_2;
        _1863 = frontier_phi_25_49_ladder_1;
        _1865 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1845 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_841, _842, _843), _1772);
        _1861 = _1845.x * cbModelParam._m0[1u].z;
        _1863 = _1845.y * cbModelParam._m0[1u].z;
        _1865 = _1845.z * cbModelParam._m0[1u].z;
    }
    float _1878 = (((_868 * _817) + _869) * _833) * ((cbModelParam._m0[1u].w * (_1861 - _1763)) + _1763);
    float _1880 = (((_868 * _819) + _869) * _833) * ((cbModelParam._m0[1u].w * (_1863 - _1765)) + _1765);
    float _1882 = (((_868 * _820) + _869) * _833) * ((cbModelParam._m0[1u].w * (_1865 - _1767)) + _1767);
    float _1885 = fma(_1882, cbSceneParam._m0[89u].z, fma(_1880, cbSceneParam._m0[89u].y, _1878 * cbSceneParam._m0[89u].x));
    float _1888 = fma(_1882, cbSceneParam._m0[90u].z, fma(_1880, cbSceneParam._m0[90u].y, _1878 * cbSceneParam._m0[90u].x));
    float _1891 = fma(_1882, cbSceneParam._m0[91u].z, fma(_1880, cbSceneParam._m0[91u].y, _1878 * cbSceneParam._m0[91u].x));
    uvec4 _1901 = floatBitsToUint(cbInstanceData._m0[_245 + 5u]);
    uint _1903 = _1901.x * 14u;
    uint _1904 = _1903 + 13u;
    float _1911 = _833 + (-1.0);
    float _1916 = (cbLight._m0[_1904].x * _1911) + 1.0;
    float _1917 = (cbLight._m0[_1904].y * _1911) + 1.0;
    float _1918 = (cbLight._m0[_1904].z * _1911) + 1.0;
    float _1919 = (cbLight._m0[_1904].w * _1911) + 1.0;
    uint _1920 = _1903 + 5u;
    float _1926 = isnan(1.0) ? _1917 : (isnan(_1917) ? 1.0 : min(_1917, 1.0));
    uint _1930 = _1903 + 4u;
    float _1937 = isnan(1.0) ? _1916 : (isnan(_1916) ? 1.0 : min(_1916, 1.0));
    uint _1941 = _1903 | 1u;
    float _1952 = dot(vec3(cbLight._m0[_1903].xyz), vec3(_653, _654, _655));
    float _1955 = dot(vec3(cbLight._m0[_1941].xyz), vec3(_653, _654, _655));
    float _4192 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _4203 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
    float _1960 = (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * 0.3183098733425140380859375;
    float _1962 = (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * 0.3183098733425140380859375;
    float _1969 = ((cbLight._m0[_1920].x * _1926) * _1962) + ((cbLight._m0[_1930].x * _1937) * _1960);
    float _1970 = ((_1926 * cbLight._m0[_1920].y) * _1962) + ((_1937 * cbLight._m0[_1930].y) * _1960);
    float _1971 = ((_1926 * cbLight._m0[_1920].z) * _1962) + ((_1937 * cbLight._m0[_1930].z) * _1960);
    uvec4 _1975 = floatBitsToUint(cbLight._m0[_1903 + 12u]);
    bool _1977 = _1975.x == 0u;
    float _1988;
    float _1990;
    float _1992;
    if (_1977)
    {
        _1988 = _1969;
        _1990 = _1970;
        _1992 = _1971;
    }
    else
    {
        uint _1996 = _1903 + 6u;
        float _2012 = (dot(vec3(cbLight._m0[_1903 + 2u].xyz), vec3(_653, _654, _655)) * 0.5) + 0.5;
        float _2013 = _2012 * _2012;
        float _4214 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
        float _2014 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _2015 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
        _1988 = (((cbLight._m0[_1996].x * 0.3183098733425140380859375) * _2014) * _2015) + _1969;
        _1990 = (((cbLight._m0[_1996].y * 0.3183098733425140380859375) * _2014) * _2015) + _1970;
        _1992 = (((cbLight._m0[_1996].z * 0.3183098733425140380859375) * _2014) * _2015) + _1971;
    }
    bool _1995 = _1975.y == 0u;
    float _2033;
    float _2035;
    float _2037;
    if (_1995)
    {
        _2033 = _1988;
        _2035 = _1990;
        _2037 = _1992;
    }
    else
    {
        uint _2203 = _1903 + 7u;
        float _2219 = (dot(vec3(cbLight._m0[_1903 + 3u].xyz), vec3(_653, _654, _655)) * 0.5) + 0.5;
        float _2220 = _2219 * _2219;
        float _4230 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
        float _2221 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _2222 = isnan(1.0) ? _1919 : (isnan(_1919) ? 1.0 : min(_1919, 1.0));
        _2033 = (((cbLight._m0[_2203].x * 0.3183098733425140380859375) * _2221) * _2222) + _1988;
        _2035 = (((cbLight._m0[_2203].y * 0.3183098733425140380859375) * _2221) * _2222) + _1990;
        _2037 = (((cbLight._m0[_2203].z * 0.3183098733425140380859375) * _2221) * _2222) + _1992;
    }
    uint _2040 = _1903 + 8u;
    float _2053 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1903].w)) * _656) * 0.949999988079071044921875);
    float _2054 = _2053 * _2053;
    float _2055 = cbLight._m0[_1903].x + _732;
    float _2056 = cbLight._m0[_1903].y + _733;
    float _2057 = cbLight._m0[_1903].z + _734;
    float _2061 = inversesqrt(dot(vec3(_2055, _2056, _2057), vec3(_2055, _2056, _2057)));
    float _2062 = _2061 * _2055;
    float _2063 = _2061 * _2056;
    float _2064 = _2061 * _2057;
    float _2065 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_1903].xyz));
    float _4246 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2068 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
    float _4257 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _2069 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
    float _2070 = dot(vec3(_653, _654, _655), vec3(_2062, _2063, _2064));
    float _4268 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    float _2073 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
    float _2074 = dot(vec3(cbLight._m0[_1903].xyz), vec3(_2062, _2063, _2064));
    float _4279 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2078 = _2054 * _2054;
    float _2082 = ((_2073 * _2073) * (_2078 + (-1.0))) + 1.0;
    float _2090 = exp2(log2(1.0 - (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0)))) * 5.0);
    float _2091 = 0.959999978542327880859375 - _814;
    float _2093 = 0.959999978542327880859375 - _815;
    float _2094 = 0.959999978542327880859375 - _816;
    float _2101 = 1.0 - _2054;
    float _2112 = (0.5 / (((_2069 * ((_2068 * _2101) + _2054)) + 9.9999999392252902907785028219223e-09) + (((_2069 * _2101) + _2054) * _2068))) * _2068;
    float _4290 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2114 = (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_2078 / ((_2082 * _2082) * 3.141590118408203125));
    uint _2125 = _1903 + 9u;
    float _2136 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1941].w)) * _656) * 0.949999988079071044921875);
    float _2137 = _2136 * _2136;
    float _2138 = cbLight._m0[_1941].x + _732;
    float _2139 = cbLight._m0[_1941].y + _733;
    float _2140 = cbLight._m0[_1941].z + _734;
    float _2144 = inversesqrt(dot(vec3(_2138, _2139, _2140), vec3(_2138, _2139, _2140)));
    float _2145 = _2144 * _2138;
    float _2146 = _2144 * _2139;
    float _2147 = _2144 * _2140;
    float _2148 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_1941].xyz));
    float _4301 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2151 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
    float _2152 = dot(vec3(_653, _654, _655), vec3(_2145, _2146, _2147));
    float _4312 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    float _2155 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
    float _2156 = dot(vec3(cbLight._m0[_1941].xyz), vec3(_2145, _2146, _2147));
    float _4323 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2160 = _2137 * _2137;
    float _2164 = ((_2155 * _2155) * (_2160 + (-1.0))) + 1.0;
    float _2171 = exp2(log2(1.0 - (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0)))) * 5.0);
    float _2178 = 1.0 - _2137;
    float _2188 = (0.5 / (((_2069 * ((_2151 * _2178) + _2137)) + 9.9999999392252902907785028219223e-09) + (((_2069 * _2178) + _2137) * _2151))) * _2151;
    float _4334 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2190 = (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_2160 / ((_2164 * _2164) * 3.141590118408203125));
    float _2200 = (((((_2171 * _2091) + _817) * cbLight._m0[_2125].x) * _2190) * _1926) + (((((_2090 * _2091) + _817) * cbLight._m0[_2040].x) * _2114) * _1937);
    float _2201 = (((((_2171 * _2093) + _819) * cbLight._m0[_2125].y) * _2190) * _1926) + (((((_2090 * _2093) + _819) * cbLight._m0[_2040].y) * _2114) * _1937);
    float _2202 = (((((_2171 * _2094) + _820) * cbLight._m0[_2125].z) * _2190) * _1926) + (((((_2090 * _2094) + _820) * cbLight._m0[_2040].z) * _2114) * _1937);
    float _2264;
    float _2266;
    float _2268;
    if (_1977)
    {
        _2264 = _2200;
        _2266 = _2201;
        _2268 = _2202;
    }
    else
    {
        uint _2270 = _1903 + 2u;
        uint _2274 = _1903 + 10u;
        float _2288 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2270].w)) * _656) * 0.949999988079071044921875);
        float _2289 = _2288 * _2288;
        float _2290 = cbLight._m0[_2270].x + _732;
        float _2291 = cbLight._m0[_2270].y + _733;
        float _2292 = cbLight._m0[_2270].z + _734;
        float _2296 = inversesqrt(dot(vec3(_2290, _2291, _2292), vec3(_2290, _2291, _2292)));
        float _2297 = _2296 * _2290;
        float _2298 = _2296 * _2291;
        float _2299 = _2296 * _2292;
        float _2300 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_2270].xyz));
        float _4345 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
        float _2303 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _2304 = dot(vec3(_653, _654, _655), vec3(_2297, _2298, _2299));
        float _4356 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2307 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _2308 = dot(vec3(cbLight._m0[_2270].xyz), vec3(_2297, _2298, _2299));
        float _4367 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2312 = _2289 * _2289;
        float _2316 = ((_2307 * _2307) * (_2312 + (-1.0))) + 1.0;
        float _2323 = exp2(log2(1.0 - (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0)))) * 5.0);
        float _2330 = 1.0 - _2289;
        float _2340 = (0.5 / (((_2069 * ((_2303 * _2330) + _2289)) + 9.9999999392252902907785028219223e-09) + (((_2069 * _2330) + _2289) * _2303))) * _2303;
        float _4378 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        float _2342 = (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (_2312 / ((_2316 * _2316) * 3.141590118408203125));
        float _2343 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
        _2264 = (((((_2323 * _2091) + _817) * cbLight._m0[_2274].x) * _2342) * _2343) + _2200;
        _2266 = (((((_2323 * _2093) + _819) * cbLight._m0[_2274].y) * _2342) * _2343) + _2201;
        _2268 = (((((_2323 * _2094) + _820) * cbLight._m0[_2274].z) * _2342) * _2343) + _2202;
    }
    float _2378;
    float _2380;
    float _2382;
    if (_1995)
    {
        _2378 = _2264;
        _2380 = _2266;
        _2382 = _2268;
    }
    else
    {
        uint _2389 = _1903 + 3u;
        uint _2393 = _1903 + 11u;
        float _2407 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2389].w)) * _656) * 0.949999988079071044921875);
        float _2408 = _2407 * _2407;
        float _2409 = cbLight._m0[_2389].x + _732;
        float _2410 = cbLight._m0[_2389].y + _733;
        float _2411 = cbLight._m0[_2389].z + _734;
        float _2415 = inversesqrt(dot(vec3(_2409, _2410, _2411), vec3(_2409, _2410, _2411)));
        float _2416 = _2415 * _2409;
        float _2417 = _2415 * _2410;
        float _2418 = _2415 * _2411;
        float _2419 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_2389].xyz));
        float _4394 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2422 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _2423 = dot(vec3(_653, _654, _655), vec3(_2416, _2417, _2418));
        float _4405 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2426 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _2427 = dot(vec3(cbLight._m0[_2389].xyz), vec3(_2416, _2417, _2418));
        float _4416 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2431 = _2408 * _2408;
        float _2435 = ((_2426 * _2426) * (_2431 + (-1.0))) + 1.0;
        float _2442 = exp2(log2(1.0 - (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0)))) * 5.0);
        float _2449 = 1.0 - _2408;
        float _2459 = (0.5 / (((_2069 * ((_2422 * _2449) + _2408)) + 9.9999999392252902907785028219223e-09) + (((_2069 * _2449) + _2408) * _2422))) * _2422;
        float _4427 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        float _2461 = (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_2431 / ((_2435 * _2435) * 3.141590118408203125));
        float _2462 = isnan(1.0) ? _1919 : (isnan(_1919) ? 1.0 : min(_1919, 1.0));
        _2378 = (((((_2442 * _2091) + _817) * cbLight._m0[_2393].x) * _2461) * _2462) + _2264;
        _2380 = (((((_2442 * _2093) + _819) * cbLight._m0[_2393].y) * _2461) * _2462) + _2266;
        _2382 = (((((_2442 * _2094) + _820) * cbLight._m0[_2393].z) * _2461) * _2462) + _2268;
    }
    float _2597;
    float _2599;
    float _2601;
    float _2603;
    float _2605;
    float _2607;
    if (_1901.y == 0u)
    {
        float _2537 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2538 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2537;
        float _2539 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2537;
        float _2540 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2537;
        uvec4 _2552 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2553 = _2552.x;
        uint _2564 = uint((float(_2552.y) * floor(float(uint(cbSceneParam._m0[85u].y * _754) / _2553))) + floor(float(uint(cbSceneParam._m0[85u].x * _753) / _2553)));
        float _2574 = (log2(_2540 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2575 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
        uint _2578 = uint(isnan(14.0) ? _2575 : (isnan(_2575) ? 14.0 : min(_2575, 14.0)));
        uvec4 _2583 = texelFetch(g_lightClusterGridBuffer, int(((_2578 << 2u) + (_2564 << 6u)) >> 2u));
        uint _2584 = _2583.x;
        uint _2585 = _2552.z;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        float _2693;
        float _2695;
        if (((((1u << ((_2585 >> 4u) & 15u)) + 4294967295u) & _2584) == 0u) || ((_2585 & 240u) == 0u))
        {
            _2685 = 0.0;
            _2687 = 0.0;
            _2689 = 0.0;
            _2691 = 0.0;
            _2693 = 0.0;
            _2695 = 0.0;
        }
        else
        {
            float _2686;
            float _2688;
            float _2690;
            float _2692;
            float _2694;
            float _2696;
            float _2837 = 0.0;
            float _2838 = 0.0;
            float _2839 = 0.0;
            float _2840 = 0.0;
            float _2841 = 0.0;
            float _2842 = 0.0;
            uint _2843 = 0u;
            uint _2852;
            bool _2853;
            for (;;)
            {
                _2852 = texelFetch(g_lightClassification, int((((_2578 << 5u) + (_2564 << 9u)) + (_2843 << 2u)) >> 2u)).x;
                _2853 = _2852 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2853)
                {
                    frontier_phi_66_pred = _2837;
                    frontier_phi_66_pred_1 = _2842;
                    frontier_phi_66_pred_2 = _2841;
                    frontier_phi_66_pred_3 = _2840;
                    frontier_phi_66_pred_4 = _2839;
                    frontier_phi_66_pred_5 = _2838;
                }
                else
                {
                    float _2982;
                    float _2983;
                    float _2984;
                    float _2985;
                    float _2986;
                    float _2987;
                    uint _2988;
                    _2982 = _2837;
                    _2983 = _2838;
                    _2984 = _2839;
                    _2985 = _2840;
                    _2986 = _2841;
                    _2987 = _2842;
                    _2988 = _2852;
                    float _2909;
                    float _2910;
                    float _2911;
                    float _2912;
                    float _2913;
                    float _2914;
                    for (;;)
                    {
                        uint _2992 = uint(findLSB(_2988)) + (_2843 << 5u);
                        uint _2989 = (_2988 + 4294967295u) & _2988;
                        uint _2994 = _2992 * 48u;
                        vec4 _3008 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2994)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 3u)).x));
                        uint _3014 = (_2992 * 48u) + 4u;
                        vec4 _3027 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3014)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 3u)).x));
                        uint _3033 = (_2992 * 48u) + 8u;
                        vec3 _3044 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3033)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 2u)).x));
                        float _3048 = _3008.x - _2538;
                        float _3049 = _3008.y - _2539;
                        float _3050 = _3008.z - _2540;
                        float _3051 = dot(vec3(_3048, _3049, _3050), vec3(_3048, _3049, _3050));
                        float _3054 = inversesqrt(_3051);
                        float _3055 = _3054 * _3048;
                        float _3056 = _3054 * _3049;
                        float _3057 = _3054 * _3050;
                        float _3058 = dot(vec3(_774, _777, _780), vec3(_3055, _3056, _3057));
                        float _3063 = 1.0 - (_3051 * _3008.w);
                        float _4453 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                        float _3064 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
                        float _3065 = sqrt(_3051) * _3027.w;
                        float _3068 = 1.39999997615814208984375 / (_3065 + 1.39999997615814208984375);
                        float _3069 = _3068 * _3068;
                        float _3072 = ((1.0 - _3069) * _3058) + _3069;
                        float _3075 = _3065 * _3065;
                        float _3079 = ((isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0))) * _3064) / ((_3075 * 0.699999988079071044921875) + 1.0);
                        float _3083 = (-0.0) - _2538;
                        float _3084 = (-0.0) - _2539;
                        float _3085 = (-0.0) - _2540;
                        float _3089 = inversesqrt(dot(vec3(_3083, _3084, _3085), vec3(_3083, _3084, _3085)));
                        float _3090 = _3089 * _3083;
                        float _3091 = _3089 * _3084;
                        float _3092 = _3089 * _3085;
                        float _3100 = exp2(log2(1.0 / ((_3075 * 3.5) + 5.0)) * 0.25);
                        float _3101 = 1.0 - _849;
                        float _3108 = sqrt(1.0 - ((1.0 - (_3101 * _3101)) * (1.0 - (_3100 * _3100))));
                        float _3109 = _3108 * _3108;
                        float _3110 = _3109 * _3109;
                        float _3111 = _3090 + _3055;
                        float _3112 = _3091 + _3056;
                        float _3113 = _3092 + _3057;
                        float _3117 = inversesqrt(dot(vec3(_3111, _3112, _3113), vec3(_3111, _3112, _3113)));
                        float _3121 = dot(vec3(_774, _777, _780), vec3(_3090, _3091, _3092));
                        float _4469 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                        float _3124 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
                        float _3125 = dot(vec3(_774, _777, _780), vec3(_3117 * _3111, _3117 * _3112, _3117 * _3113));
                        float _4480 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                        float _3128 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
                        float _3132 = ((_3128 * _3128) * (_3110 + (-1.0))) + 1.0;
                        float _3133 = _3068 * _3109;
                        float _3134 = _3133 * _3133;
                        float _3137 = ((1.0 - _3134) * _3058) + _3134;
                        float _4491 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                        float _3138 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
                        float _3139 = 1.0 - _3109;
                        float _3149 = (0.5 / (((_3138 * ((_3124 * _3139) + _3109)) + 9.9999999392252902907785028219223e-09) + (((_3138 * _3139) + _3109) * _3124))) * _3138;
                        float _4502 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                        float _3160 = (((_3110 * 3.1415927410125732421875) * (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0)))) / ((_3132 * _3132) * ((_3075 * 2.1991131305694580078125) + 3.141590118408203125))) * _3064;
                        _2912 = (_3079 * _3027.x) + _2985;
                        _2913 = (_3079 * _3027.y) + _2986;
                        _2914 = (_3079 * _3027.z) + _2987;
                        _2909 = (_3160 * _3044.x) + _2982;
                        _2910 = (_3160 * _3044.y) + _2983;
                        _2911 = (_3160 * _3044.z) + _2984;
                        if (_2989 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2982 = _2909;
                            _2983 = _2910;
                            _2984 = _2911;
                            _2985 = _2912;
                            _2986 = _2913;
                            _2987 = _2914;
                            _2988 = _2989;
                        }
                    }
                    frontier_phi_66_pred = _2909;
                    frontier_phi_66_pred_1 = _2914;
                    frontier_phi_66_pred_2 = _2913;
                    frontier_phi_66_pred_3 = _2912;
                    frontier_phi_66_pred_4 = _2911;
                    frontier_phi_66_pred_5 = _2910;
                }
                _2686 = frontier_phi_66_pred;
                _2696 = frontier_phi_66_pred_1;
                _2694 = frontier_phi_66_pred_2;
                _2692 = frontier_phi_66_pred_3;
                _2690 = frontier_phi_66_pred_4;
                _2688 = frontier_phi_66_pred_5;
                uint _2844 = _2843 + 1u;
                if (_2844 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2837 = _2686;
                    _2838 = _2688;
                    _2839 = _2690;
                    _2840 = _2692;
                    _2841 = _2694;
                    _2842 = _2696;
                    _2843 = _2844;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2685 = _2686;
            _2687 = _2688;
            _2689 = _2690;
            _2691 = _2692;
            _2693 = _2694;
            _2695 = _2696;
        }
        uvec4 _2699 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2700 = _2699.z;
        uint _2702 = (_2700 >> 8u) & 15u;
        float _2805;
        float _2807;
        float _2809;
        float _2811;
        float _2813;
        float _2815;
        if (((4294967295u << _2702) & _2584) == 0u)
        {
            _2805 = _2685;
            _2807 = _2687;
            _2809 = _2689;
            _2811 = _2691;
            _2813 = _2693;
            _2815 = _2695;
        }
        else
        {
            float _2830 = inversesqrt(dot(vec3(_2538, _2539, _2540), vec3(_2538, _2539, _2540)));
            float _2831 = _2830 * _2538;
            float _2832 = _2830 * _2539;
            float _2833 = _2830 * _2540;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2702 < ((_2700 >> 12u) & 15u))
            {
                float _2806;
                float _2808;
                float _2810;
                float _2812;
                float _2814;
                float _2816;
                float _2965 = _2685;
                float _2966 = _2687;
                float _2967 = _2689;
                float _2968 = _2691;
                float _2969 = _2693;
                float _2970 = _2695;
                uint _2971 = _2702;
                uint _2980;
                bool _2981;
                for (;;)
                {
                    _2980 = texelFetch(g_lightClassification, int((((_2578 << 5u) + (_2564 << 9u)) + (_2971 << 2u)) >> 2u)).x;
                    _2981 = _2980 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2981)
                    {
                        frontier_phi_77_pred = _2970;
                        frontier_phi_77_pred_1 = _2969;
                        frontier_phi_77_pred_2 = _2968;
                        frontier_phi_77_pred_3 = _2967;
                        frontier_phi_77_pred_4 = _2966;
                        frontier_phi_77_pred_5 = _2965;
                    }
                    else
                    {
                        float _3174;
                        float _3175;
                        float _3176;
                        float _3177;
                        float _3178;
                        float _3179;
                        float _3468;
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3187 = _2965;
                        float _3188 = _2966;
                        float _3189 = _2967;
                        float _3190 = _2968;
                        float _3191 = _2969;
                        float _3192 = _2970;
                        uint _3193 = _2980;
                        uint _3194;
                        vec4 _3219;
                        float _3220;
                        vec4 _3235;
                        vec3 _3247;
                        vec4 _3263;
                        vec4 _3278;
                        float _3324;
                        bool _3325;
                        for (;;)
                        {
                            uint _3204 = ((_2971 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3193));
                            _3194 = (_3193 + 4294967295u) & _3193;
                            uint _3206 = _3204 * 40u;
                            _3219 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3206)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 3u)).x));
                            _3220 = _3219.w;
                            uint _3222 = (_3204 * 40u) + 4u;
                            _3235 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3222)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 3u)).x));
                            uint _3237 = (_3204 * 40u) + 8u;
                            _3247 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3237)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 2u)).x));
                            uint _3250 = (_3204 * 40u) + 16u;
                            _3263 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3250)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 3u)).x));
                            uint _3265 = (_3204 * 40u) + 20u;
                            _3278 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 3u)).x));
                            uint _3280 = (_3204 * 40u) + 24u;
                            vec4 _3293 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3280)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 3u)).x));
                            uint _3299 = (_3204 * 40u) + 28u;
                            vec4 _3312 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 3u)).x));
                            _3324 = fma(_2540, _3312.z, fma(_2539, _3312.y, _3312.x * _2538)) + _3312.w;
                            _3325 = !((fma(_2540, _3293.z, fma(_2539, _3293.y, _3293.x * _2538)) + _3293.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3325)
                            {
                                float _3352 = _3219.x - _2538;
                                float _3353 = _3219.y - _2539;
                                float _3354 = _3219.z - _2540;
                                float _3355 = dot(vec3(_3352, _3353, _3354), vec3(_3352, _3353, _3354));
                                float _3358 = inversesqrt(_3355);
                                float _3359 = _3358 * _3352;
                                float _3360 = _3358 * _3353;
                                float _3361 = _3358 * _3354;
                                float _3365 = 1.0 - (_3355 / (_3220 * _3220));
                                float _4513 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                                float _3366 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
                                float _3370 = sqrt(_3355) * _3235.w;
                                float _3372 = 1.39999997615814208984375 / (_3370 + 1.39999997615814208984375);
                                float _3373 = _3372 * _3372;
                                float _3376 = ((1.0 - _3373) * dot(vec3(_3359, _3360, _3361), vec3(_774, _777, _780))) + _3373;
                                float _3379 = _3370 * _3370;
                                float _3383 = (fma(_2540, _3263.z, fma(_2539, _3263.y, _3263.x * _2538)) + _3263.w) / _3324;
                                float _3384 = (fma(_2540, _3278.z, fma(_2539, _3278.y, _3278.x * _2538)) + _3278.w) / _3324;
                                float _3388 = 1.0 - dot(vec2(_3383, _3384), vec2(_3383, _3384));
                                float _4529 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                                float _3389 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
                                float _3390 = _3389 * (((isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0))) * _3366) / ((_3379 * 0.699999988079071044921875) + 1.0));
                                float _3402 = exp2(log2(1.0 / ((_3379 * 3.5) + 5.0)) * 0.25);
                                float _3403 = 1.0 - _849;
                                float _3410 = sqrt(1.0 - ((1.0 - (_3403 * _3403)) * (1.0 - (_3402 * _3402))));
                                float _3411 = _3410 * _3410;
                                float _3412 = _3411 * _3411;
                                float _3413 = _3359 - _2831;
                                float _3414 = _3360 - _2832;
                                float _3415 = _3361 - _2833;
                                float _3419 = inversesqrt(dot(vec3(_3413, _3414, _3415), vec3(_3413, _3414, _3415)));
                                float _3423 = dot(vec3(_774, _777, _780), vec3((-0.0) - _2831, (-0.0) - _2832, (-0.0) - _2833));
                                float _4540 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                                float _3426 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
                                float _3427 = dot(vec3(_774, _777, _780), vec3(_3419 * _3413, _3419 * _3414, _3419 * _3415));
                                float _4551 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                                float _3430 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
                                float _3434 = ((_3430 * _3430) * (_3412 + (-1.0))) + 1.0;
                                float _3435 = _3372 * _3411;
                                float _3436 = _3435 * _3435;
                                float _3442 = ((1.0 - _3436) * dot(vec3(_774, _777, _780), vec3(_3359, _3360, _3361))) + _3436;
                                float _4562 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                                float _3443 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
                                float _3444 = 1.0 - _3411;
                                float _3454 = (0.5 / (((_3443 * ((_3426 * _3444) + _3411)) + 9.9999999392252902907785028219223e-09) + (((_3443 * _3444) + _3411) * _3426))) * _3443;
                                float _4573 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                                float _3464 = (_3389 * _3366) * (((_3412 * 3.1415927410125732421875) * (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0)))) / ((_3434 * _3434) * ((_3379 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3390 * _3235.y;
                                frontier_phi_83_pred_1 = _3390 * _3235.x;
                                frontier_phi_83_pred_2 = _3464 * _3247.z;
                                frontier_phi_83_pred_3 = _3464 * _3247.y;
                                frontier_phi_83_pred_4 = _3464 * _3247.x;
                                frontier_phi_83_pred_5 = _3390 * _3235.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3472 = frontier_phi_83_pred;
                            _3471 = frontier_phi_83_pred_1;
                            _3470 = frontier_phi_83_pred_2;
                            _3469 = frontier_phi_83_pred_3;
                            _3468 = frontier_phi_83_pred_4;
                            _3473 = frontier_phi_83_pred_5;
                            _3177 = _3471 + _3190;
                            _3178 = _3472 + _3191;
                            _3179 = _3473 + _3192;
                            _3174 = _3468 + _3187;
                            _3175 = _3469 + _3188;
                            _3176 = _3470 + _3189;
                            if (_3194 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3187 = _3174;
                                _3188 = _3175;
                                _3189 = _3176;
                                _3190 = _3177;
                                _3191 = _3178;
                                _3192 = _3179;
                                _3193 = _3194;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3179;
                        frontier_phi_77_pred_1 = _3178;
                        frontier_phi_77_pred_2 = _3177;
                        frontier_phi_77_pred_3 = _3176;
                        frontier_phi_77_pred_4 = _3175;
                        frontier_phi_77_pred_5 = _3174;
                    }
                    _2816 = frontier_phi_77_pred;
                    _2814 = frontier_phi_77_pred_1;
                    _2812 = frontier_phi_77_pred_2;
                    _2810 = frontier_phi_77_pred_3;
                    _2808 = frontier_phi_77_pred_4;
                    _2806 = frontier_phi_77_pred_5;
                    uint _2972 = _2971 + 1u;
                    if (_2972 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2965 = _2806;
                        _2966 = _2808;
                        _2967 = _2810;
                        _2968 = _2812;
                        _2969 = _2814;
                        _2970 = _2816;
                        _2971 = _2972;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2810;
                frontier_phi_58_59_ladder_1 = _2816;
                frontier_phi_58_59_ladder_2 = _2814;
                frontier_phi_58_59_ladder_3 = _2812;
                frontier_phi_58_59_ladder_4 = _2808;
                frontier_phi_58_59_ladder_5 = _2806;
            }
            else
            {
                frontier_phi_58_59_ladder = _2689;
                frontier_phi_58_59_ladder_1 = _2695;
                frontier_phi_58_59_ladder_2 = _2693;
                frontier_phi_58_59_ladder_3 = _2691;
                frontier_phi_58_59_ladder_4 = _2687;
                frontier_phi_58_59_ladder_5 = _2685;
            }
            _2805 = frontier_phi_58_59_ladder_5;
            _2807 = frontier_phi_58_59_ladder_4;
            _2809 = frontier_phi_58_59_ladder;
            _2811 = frontier_phi_58_59_ladder_3;
            _2813 = frontier_phi_58_59_ladder_2;
            _2815 = frontier_phi_58_59_ladder_1;
        }
        float _2820 = isnan(1.0) ? _833 : (isnan(_833) ? 1.0 : min(_833, 1.0));
        _2597 = (_2820 * _2811) + _2033;
        _2599 = (_2820 * _2813) + _2035;
        _2601 = (_2820 * _2815) + _2037;
        _2603 = ((_2805 * _817) * _2820) + _2378;
        _2605 = ((_2807 * _819) * _2820) + _2380;
        _2607 = ((_2809 * _820) * _2820) + _2382;
    }
    else
    {
        _2597 = _2033;
        _2599 = _2035;
        _2601 = _2037;
        _2603 = _2378;
        _2605 = _2380;
        _2607 = _2382;
    }
    float _4589 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _4600 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _4611 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _2624 = ((isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0))) * (_2597 + ((isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))) * _833))) + ((_2603 + ((isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0))) * _1672)) * cbPerFrame._m0[3u].x);
    float _2625 = ((isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (_2599 + ((isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))) * _833))) + ((_2605 + ((isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))) * _1672)) * cbPerFrame._m0[3u].x);
    float _2626 = ((isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0))) * (_2601 + ((isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))) * _833))) + ((_2607 + ((isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))) * _1672)) * cbPerFrame._m0[3u].x);
    uint _2627 = _245 + 6u;
    float _2635 = _753 / cbSceneParam._m0[86u].x;
    float _2636 = _754 / cbSceneParam._m0[86u].y;
    vec4 _2650 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2635, _2636, (log2((isnan(cbSceneParam._m0[77u].w) ? _675 : (isnan(_675) ? cbSceneParam._m0[77u].w : min(_675, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2652 = _2650.x;
    float _2653 = _2650.y;
    float _2654 = _2650.z;
    float _2655 = _2650.w;
    float _2747;
    float _2749;
    float _2751;
    float _2753;
    if (_675 > cbSceneParam._m0[78u].w)
    {
        float _2710 = isnan(_675) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _675 : min(cbSceneParam._m0[80u].w, _675));
        float _2711 = _2710 / _675;
        float _2722 = _2711 * _725;
        float _2723 = _726 * _2711;
        float _2724 = (-0.0) - _2723;
        float _2725 = _2711 * _727;
        float _2727 = (cbSceneParam._m0[77u].w * _2724) / _2710;
        float _2728 = _2727 + cbSceneParam._m0[79u].w;
        float _2729 = cbSceneParam._m0[79u].w - _2723;
        float _2735 = sqrt(((_2722 * _2722) + (_2723 * _2723)) + (_2725 * _2725));
        float _2738 = (1.0 - (cbSceneParam._m0[77u].w / _2710)) * _2735;
        float _2743 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2745 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2922;
        if (abs((_2724 - _2727) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2922 = ((((_2728 > 0.0) ? exp2(_2743 * _2728) : (2.0 - exp2(_2745 * _2728))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2738;
        }
        else
        {
            float _2866 = 1.0 / cbSceneParam._m0[80u].x;
            float _2867 = isnan(_2729) ? _2728 : (isnan(_2728) ? _2729 : max(_2728, _2729));
            float _2868 = isnan(_2729) ? _2728 : (isnan(_2728) ? _2729 : min(_2728, _2729));
            float _2877 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : min(_2867, 0.0));
            float _2878 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : min(_2868, 0.0));
            _2922 = ((abs(_2735 / _2724) * cbSceneParam._m0[80u].y) * ((((_2877 - _2878) * 2.0) - ((exp2(_2743 * (isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0)))) - exp2(_2743 * (isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0))))) * _2866)) - ((exp2(_2745 * _2877) - exp2(_2745 * _2878)) * _2866))) + (_2738 * cbSceneParam._m0[80u].z);
        }
        vec4 _2924 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2635, _2636, 1.0), 0.0);
        float _2933 = exp2((_2922 * (-1.44269502162933349609375)) * (1.0 - _2924.w));
        float _2934 = log2(_2933);
        float _2950 = log2(_2655);
        _2747 = (exp2(_2950 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2934 * cbSceneParam._m0[78u].x)) * _2924.x) / cbSceneParam._m0[78u].x)) + _2652;
        _2749 = (exp2(_2950 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2934 * cbSceneParam._m0[78u].y)) * _2924.y) / cbSceneParam._m0[78u].y)) + _2653;
        _2751 = (exp2(_2950 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2934 * cbSceneParam._m0[78u].z)) * _2924.z) / cbSceneParam._m0[78u].z)) + _2654;
        _2753 = _2933 * _2655;
    }
    else
    {
        _2747 = _2652;
        _2749 = _2653;
        _2751 = _2654;
        _2753 = _2655;
    }
    bool _2960;
    vec4 _2763;
    vec4 _2785;
    float _2787;
    float _2791;
    float _2792;
    float _2793;
    float _2794;
    bool _2804;
    for (;;)
    {
        _2763 = cbMatDynParam._m0[0u];
        float _2765 = roundEven(_2763.y);
        bool _2766 = _2765 == 3.0;
        float _2767 = log2(_2753);
        float _2774 = exp2(_2767 * cbSceneParam._m0[78u].x) * _2624;
        float _2775 = exp2(_2767 * cbSceneParam._m0[78u].y) * _2625;
        float _2776 = exp2(_2767 * cbSceneParam._m0[78u].z) * _2626;
        float _2783 = _741 + (-0.5);
        _2785 = cbMtdParam._m0[1u];
        _2787 = _2785.y * _2783;
        float _2790 = (_2765 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2791 = _2790 * (_2766 ? _2774 : (_2774 + (cbSceneParam._m0[72u].w * _2747)));
        _2792 = _2790 * (_2766 ? _2775 : (_2775 + (cbSceneParam._m0[72u].w * _2749)));
        _2793 = _2790 * (_2766 ? _2776 : (_2776 + (cbSceneParam._m0[72u].w * _2751)));
        _2794 = _2783 * 0.999000012874603271484375;
        _2804 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2804)
        {
            if ((cbInstanceData._m0[_245 + 7u].x + _2794) < 0.5)
            {
                _2960 = true;
                break;
            }
        }
        uint _2901 = _793 + uint(_2763.w);
        if ((cbInstanceData._m0[_2901].w < 1.0) && ((cbInstanceData._m0[_2901].w + _2794) < 0.5))
        {
            _2960 = true;
            break;
        }
        if ((_2787 + 1.0) < _2785.x)
        {
            _2960 = true;
            break;
        }
        _2960 = false;
        break;
    }
    float _3165;
    if (_2960)
    {
        discard_state = true;
        _3165 = 0.0;
    }
    else
    {
        _3165 = cbInstanceData._m0[_2627].w;
    }
    SV_Target.x = _2791;
    SV_Target.y = _2792;
    SV_Target.z = _2793;
    SV_Target.w = _3165;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2627].w;
    discard_exit();
}


