#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1415;
float _4079;
float _4080;
float _4081;
float _4082;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _240 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _241 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _242 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _248 = inversesqrt(dot(vec3(_240, _241, _242), vec3(_240, _241, _242)));
    float _255 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _262 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4091 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _4102 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _4113 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    uint _287 = uint(roundEven(NORMAL.w)) * 13u;
    uint _292 = _287 + 1u;
    uint _296 = _287 + 2u;
    float _305 = sqrt(((cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x)) + (cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x));
    float _306 = _305 * TEXCOORD.z;
    float _307 = _305 * TEXCOORD.w;
    vec4 _320 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _306) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _307) + cbTextureTilingScale._m0[13u].w));
    vec4 _344 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _349 = _344.x * cbMtdParam._m0[11u].x;
    float _350 = _344.y * cbMtdParam._m0[11u].y;
    float _351 = _344.z * cbMtdParam._m0[11u].z;
    vec4 _370 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _306) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _307) + cbTextureTilingScale._m0[5u].w));
    vec4 _406 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _408 = _406.x;
    float _420 = dot(vec4(_408, _406.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _437 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_408 - _420) * cbMtdParam._m0[24u].y) + _420) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4124 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _438 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
    float _445 = (_438 * ((_370.x * cbMtdParam._m0[12u].x) - _349)) + _349;
    float _446 = (_438 * ((_370.y * cbMtdParam._m0[12u].y) - _350)) + _350;
    float _447 = (_438 * ((_370.z * cbMtdParam._m0[12u].z) - _351)) + _351;
    float _451 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _320.x) * _445;
    float _454 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _320.y) * _446;
    float _457 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _320.z) * _447;
    float _464 = ((_445 - _451) * (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0)))) + _451;
    float _465 = ((_446 - _454) * (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0)))) + _454;
    float _466 = ((_447 - _457) * (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0)))) + _457;
    vec4 _484 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _306) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _307) + cbTextureTilingScale._m0[20u].w));
    vec4 _509 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _306) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _307) + cbTextureTilingScale._m0[4u].w));
    vec4 _526 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _528 = _526.x;
    float _529 = _526.y;
    float _530 = _526.z;
    float _539 = ((_509.z - _530) * _438) + _530;
    float _542 = ((((_509.x - _528) * _438) + _528) * 2.0) + (-1.0);
    float _543 = ((((_509.y - _529) * _438) + _529) * 2.0) + (-1.0);
    float _544 = dot(vec2(_542, _543), vec2(_542, _543));
    float _4135 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _549 = sqrt(1.0 - (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))));
    vec4 _562 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _580 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _306) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _307) + cbTextureTilingScale._m0[11u].w));
    float _582 = _580.x;
    float _583 = 1.0 - _582;
    float _589 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _592 = ((isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : min(_589, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _601 = (_592 - ((((((_582 - _583) * cbMtdParam._m0[24u].z) + _583) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _592))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4156 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _602 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
    float _609 = (_602 * (cbMtdParam._m0[17u].x - _464)) + _464;
    float _610 = (_602 * (cbMtdParam._m0[17u].y - _465)) + _465;
    float _611 = (_602 * (cbMtdParam._m0[17u].z - _466)) + _466;
    vec4 _623 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _306) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _307) + cbTextureTilingScale._m0[19u].w));
    float _625 = _623.x;
    float _626 = 1.0 - _625;
    float _651 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_625 - _626) * cbMtdParam._m0[24u].w) + _626) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4167 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _652 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
    float _660 = ((((cbMtdParam._m0[10u].x - _609) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _652) + _609;
    float _661 = ((((cbMtdParam._m0[10u].y - _610) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _652) + _610;
    float _662 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _611)) * _652) + _611;
    vec4 _674 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _688 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _690 = _688.x;
    float _708 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _306) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _307) + cbTextureTilingScale._m0[9u].w)).x - _690) * _438) + _690;
    float _712 = ((_674.x - _708) * cbMtdParam._m0[19u].z) + _708;
    float _714 = _712 - (_712 * _602);
    float _716 = _714 - (_714 * _652);
    float _721 = (((_484.z - _539) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _539;
    vec4 _735 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _306) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _307) + cbTextureTilingScale._m0[15u].w));
    float _742 = (_735.x * 2.0) + (-1.0);
    float _743 = (_735.y * 2.0) + (-1.0);
    float _744 = dot(vec2(_742, _743), vec2(_742, _743));
    float _4178 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _752 = (_602 * (_735.z - _721)) + _721;
    float _755 = ((cbMtdParam._m0[23u].y - _752) * _652) + _752;
    vec4 _774 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _306) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _307) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _780 = (_774.x * 2.0) + (-1.0);
    float _781 = (_774.y * 2.0) + (-1.0);
    float _782 = dot(vec2(_780, _781), vec2(_780, _781));
    float _4189 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _792 = _542 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_484.x * 2.0) + (-1.0)));
    float _793 = _543 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_484.y * 2.0) + (-1.0)));
    float _805 = (((_742 - _792) + (cbMtdParam._m0[21u].x * _792)) * _602) + _792;
    float _806 = (((_743 - _793) + (cbMtdParam._m0[21u].x * _793)) * _602) + _793;
    float _807 = (_602 * (sqrt(1.0 - (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0)))) - _549)) + _549;
    float _818 = (((_780 - _805) + (_805 * cbMtdParam._m0[22u].z)) * _652) + _805;
    float _819 = (((_781 - _806) + (_806 * cbMtdParam._m0[22u].z)) * _652) + _806;
    float _820 = ((sqrt(1.0 - (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0)))) - _807) * _652) + _807;
    float _822 = cbMtdParam._m0[22u].x + _562.w;
    float _825 = fma(_820, _255 * NORMAL.x, fma(_819, _262 * TANGENT.x, (_248 * _240) * _818));
    float _828 = fma(_820, _255 * NORMAL.y, fma(_819, _262 * TANGENT.y, (_248 * _241) * _818));
    float _831 = fma(_820, _255 * NORMAL.z, fma(_819, _262 * TANGENT.z, (_248 * _242) * _818));
    float _835 = inversesqrt(dot(vec3(_825, _828, _831), vec3(_825, _828, _831)));
    float _836 = _835 * _825;
    float _837 = _835 * _828;
    float _838 = _835 * _831;
    float _4200 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _839 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
    float _4211 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _4222 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _4233 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _4244 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _4255 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _844 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
    float _858 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _898 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _908 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _898);
    float _909 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _898);
    float _910 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _898);
    float _914 = inversesqrt(dot(vec3(_908, _909, _910), vec3(_908, _909, _910)));
    float _915 = _908 * _914;
    float _916 = _909 * _914;
    float _917 = _910 * _914;
    vec4 _922 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _924 = _922.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1096 = sqrt(((_908 * _908) + (_909 * _909)) + (_910 * _910));
        float _1102 = (cbMatDynParam._m0[5u].x * _1096) + cbMatDynParam._m0[5u].y;
        float _4266 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1107 = (cbMatDynParam._m0[5u].z * _1096) + cbMatDynParam._m0[5u].w;
        float _4277 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) - _1103)) + _1103) < ((_924 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _935 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _936 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _954 = fma(_838, cbSceneParam._m0[5u].z, fma(_837, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _836));
    float _957 = fma(_838, cbSceneParam._m0[6u].z, fma(_837, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _836));
    float _960 = fma(_838, cbSceneParam._m0[7u].z, fma(_837, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _836));
    uint _973 = _287 + 9u;
    uint _974 = _973 + uint(cbMatDynParam._m0[0u].w);
    float _980 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0)))) * cbInstanceData._m0[_974].x;
    float _981 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0)))) * cbInstanceData._m0[_974].y;
    float _982 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0)))) * cbInstanceData._m0[_974].z;
    float _4288 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _983 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
    float _4299 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _984 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
    float _4310 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _985 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
    float _986 = 1.0 - _844;
    float _987 = _983 * _986;
    float _988 = _984 * _986;
    float _989 = _985 * _986;
    float _994 = (_983 + (-0.039999999105930328369140625)) * _844;
    float _995 = (_984 + (-0.039999999105930328369140625)) * _844;
    float _996 = (_985 + (-0.039999999105930328369140625)) * _844;
    float _997 = _994 + 0.039999999105930328369140625;
    float _999 = _995 + 0.039999999105930328369140625;
    float _1000 = _996 + 0.039999999105930328369140625;
    vec4 _1009 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _935, cbSceneParam._m0[86u].y * _936));
    float _1013 = ((isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * TEXCOORD_5.w) * _1009.x;
    float _1014 = dot(vec3(_836, _837, _838), vec3(_915, _916, _917));
    float _1017 = _1014 * 2.0;
    float _1021 = (_1017 * _836) - _915;
    float _1022 = (_1017 * _837) - _916;
    float _1023 = (_1017 * _838) - _917;
    float _1027 = abs(dot(vec3(_915, _916, _917), vec3(_836, _837, _838)));
    float _4321 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    float _1029 = sqrt(_839);
    float _1042 = exp2((_1029 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1029 * 3.0));
    float _1048 = (1.0 - _1042) * ((_1029 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1049 = _1042 * _1029;
    float _1077 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1081 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1085 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1414;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1139 = fma(_1085, cbModelParam._m0[26u].z, fma(_1081, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1077));
        float _1143 = fma(_1085, cbModelParam._m0[27u].z, fma(_1081, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1077));
        float _1147 = fma(_1085, cbModelParam._m0[28u].z, fma(_1081, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1077));
        float _1172 = _1077 + _836;
        float _1173 = _1081 + _837;
        float _1174 = _1085 + _838;
        float _1184 = fma(_1174, cbModelParam._m0[26u].z, fma(_1173, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1172)) - _1139;
        float _1185 = fma(_1174, cbModelParam._m0[27u].z, fma(_1173, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1172)) - _1143;
        float _1186 = fma(_1174, cbModelParam._m0[28u].z, fma(_1173, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1172)) - _1147;
        float _1190 = inversesqrt(dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186)));
        float _1203 = ((_1190 * _1184) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1139 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1204 = ((_1190 * _1185) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1143 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1205 = ((_1190 * _1186) / cbModelParam._m0[34u].z) + ((((((_1147 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1203, _1204, _1205), 0.0);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1203, _1204, _1205), 0.0);
        vec4 _1222 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1203, _1204, _1205), 0.0);
        vec4 _1229 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1203, _1204, _1205), 0.0);
        float _1242 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1208.x + (-0.5));
        float _1244 = _1242 * (_1208.y + (-0.5));
        float _1245 = _1242 * (_1208.z + (-0.5));
        float _1252 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1215.x + (-0.5));
        float _1254 = _1252 * (_1215.y + (-0.5));
        float _1255 = _1252 * (_1215.z + (-0.5));
        float _1262 = exp2((_1222.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1222.x + (-0.5));
        float _1264 = _1262 * (_1222.y + (-0.5));
        float _1265 = _1262 * (_1222.z + (-0.5));
        float _1272 = exp2((_1229.w + (-0.5)) * 20.0) * 2.0;
        float _1273 = _1272 * (_1229.x + (-0.5));
        float _1274 = _1272 * (_1229.y + (-0.5));
        float _1275 = _1272 * (_1229.z + (-0.5));
        float _1276 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1277 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1278 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1279 = _1243 * 0.5;
        float _1280 = _1253 * 0.5;
        float _1281 = _1263 * 0.5;
        float _1282 = dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281));
        float _1287 = (_1282 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1282);
        float _1296 = (dot(vec3(_836, _837, _838), vec3(_1287 * _1279, _1287 * _1280, _1287 * _1281)) + 1.0) * 0.5;
        float _4347 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1306 = sqrt(((_1280 * _1280) + (_1279 * _1279)) + (_1281 * _1281)) / (_1276 + 9.9999997473787516355514526367188e-06);
        float _4358 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _1308 = _1307 * 2.0;
        float _1312 = (1.0 - _1307) / (_1307 + 1.0);
        float _4369 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _1322 = ((((1.0 - _1313) * (_1308 + 2.0)) * exp2(log2(isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * (_1308 + 1.0))) + _1313) * _1276;
        float _1323 = _1244 * 0.5;
        float _1324 = _1254 * 0.5;
        float _1325 = _1264 * 0.5;
        float _1326 = dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325));
        float _1331 = (_1326 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1326);
        float _1339 = (dot(vec3(_836, _837, _838), vec3(_1331 * _1323, _1331 * _1324, _1331 * _1325)) + 1.0) * 0.5;
        float _4380 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1348 = sqrt(((_1324 * _1324) + (_1323 * _1323)) + (_1325 * _1325)) / (_1277 + 9.9999997473787516355514526367188e-06);
        float _4391 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _1350 = _1349 * 2.0;
        float _1354 = (1.0 - _1349) / (_1349 + 1.0);
        float _4402 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
        float _1364 = ((((1.0 - _1355) * (_1350 + 2.0)) * exp2(log2(isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * (_1350 + 1.0))) + _1355) * _1277;
        float _1365 = _1245 * 0.5;
        float _1366 = _1255 * 0.5;
        float _1367 = _1265 * 0.5;
        float _1368 = dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367));
        float _1373 = (_1368 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1368);
        float _1381 = (dot(vec3(_836, _837, _838), vec3(_1373 * _1365, _1373 * _1366, _1373 * _1367)) + 1.0) * 0.5;
        float _4413 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1390 = sqrt(((_1366 * _1366) + (_1365 * _1365)) + (_1367 * _1367)) / (_1278 + 9.9999997473787516355514526367188e-06);
        float _4424 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _1392 = _1391 * 2.0;
        float _1396 = (1.0 - _1391) / (_1391 + 1.0);
        float _4435 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _1406 = ((((1.0 - _1397) * (_1392 + 2.0)) * exp2(log2(isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * (_1392 + 1.0))) + _1397) * _1278;
        _1414 = _1245;
        _1416 = _1244;
        _1417 = _1243;
        _1418 = _1255;
        _1419 = _1254;
        _1420 = _1253;
        _1421 = _1265;
        _1422 = _1264;
        _1423 = _1263;
        _1424 = _1278;
        _1425 = _1277;
        _1426 = _1276;
        _1427 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)));
        _1428 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)));
        _1429 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)));
    }
    else
    {
        _1414 = _1415;
        _1416 = _1415;
        _1417 = _1415;
        _1418 = _1415;
        _1419 = _1415;
        _1420 = _1415;
        _1421 = _1415;
        _1422 = _1415;
        _1423 = _1415;
        _1424 = _1415;
        _1425 = _1415;
        _1426 = _1415;
        _1427 = 0.0;
        _1428 = 0.0;
        _1429 = 0.0;
    }
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1457 = fma(_1085, cbModelParam._m0[30u].z, fma(_1081, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1077));
        float _1461 = fma(_1085, cbModelParam._m0[31u].z, fma(_1081, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1077));
        float _1465 = fma(_1085, cbModelParam._m0[32u].z, fma(_1081, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1077));
        float _1488 = _1077 + _836;
        float _1489 = _1081 + _837;
        float _1490 = _1085 + _838;
        float _1500 = fma(_1490, cbModelParam._m0[30u].z, fma(_1489, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1488)) - _1457;
        float _1501 = fma(_1490, cbModelParam._m0[31u].z, fma(_1489, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1488)) - _1461;
        float _1502 = fma(_1490, cbModelParam._m0[32u].z, fma(_1489, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1488)) - _1465;
        float _1506 = inversesqrt(dot(vec3(_1500, _1501, _1502), vec3(_1500, _1501, _1502)));
        float _1519 = ((_1506 * _1500) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1457 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1520 = ((_1506 * _1501) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1461 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1521 = ((_1506 * _1502) / cbModelParam._m0[35u].z) + ((((((_1465 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1523 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1519, _1520, _1521), 0.0);
        vec4 _1530 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1519, _1520, _1521), 0.0);
        vec4 _1537 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1519, _1520, _1521), 0.0);
        vec4 _1544 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1519, _1520, _1521), 0.0);
        float _1556 = exp2((_1523.w + (-0.5)) * 20.0) * 2.0;
        float _1557 = _1556 * (_1523.x + (-0.5));
        float _1558 = _1556 * (_1523.y + (-0.5));
        float _1559 = _1556 * (_1523.z + (-0.5));
        float _1566 = exp2((_1530.w + (-0.5)) * 20.0) * 2.0;
        float _1567 = _1566 * (_1530.x + (-0.5));
        float _1568 = _1566 * (_1530.y + (-0.5));
        float _1569 = _1566 * (_1530.z + (-0.5));
        float _1576 = exp2((_1537.w + (-0.5)) * 20.0) * 2.0;
        float _1577 = _1576 * (_1537.x + (-0.5));
        float _1578 = _1576 * (_1537.y + (-0.5));
        float _1579 = _1576 * (_1537.z + (-0.5));
        float _1586 = exp2((_1544.w + (-0.5)) * 20.0) * 2.0;
        float _1587 = _1586 * (_1544.x + (-0.5));
        float _1588 = _1586 * (_1544.y + (-0.5));
        float _1589 = _1586 * (_1544.z + (-0.5));
        float _1590 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1591 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1592 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1593 = _1557 * 0.5;
        float _1594 = _1567 * 0.5;
        float _1595 = _1577 * 0.5;
        float _1596 = dot(vec3(_1593, _1594, _1595), vec3(_1593, _1594, _1595));
        float _1601 = (_1596 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1596);
        float _1609 = (dot(vec3(_836, _837, _838), vec3(_1601 * _1593, _1601 * _1594, _1601 * _1595)) + 1.0) * 0.5;
        float _4476 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1618 = sqrt(((_1594 * _1594) + (_1593 * _1593)) + (_1595 * _1595)) / (_1590 + 9.9999997473787516355514526367188e-06);
        float _4487 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _1620 = _1619 * 2.0;
        float _1624 = (1.0 - _1619) / (_1619 + 1.0);
        float _4498 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _1634 = ((((1.0 - _1625) * (_1620 + 2.0)) * exp2(log2(isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_1620 + 1.0))) + _1625) * _1590;
        float _1635 = _1558 * 0.5;
        float _1636 = _1568 * 0.5;
        float _1637 = _1578 * 0.5;
        float _1638 = dot(vec3(_1635, _1636, _1637), vec3(_1635, _1636, _1637));
        float _1643 = (_1638 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1638);
        float _1651 = (dot(vec3(_836, _837, _838), vec3(_1643 * _1635, _1643 * _1636, _1643 * _1637)) + 1.0) * 0.5;
        float _4509 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1660 = sqrt(((_1636 * _1636) + (_1635 * _1635)) + (_1637 * _1637)) / (_1591 + 9.9999997473787516355514526367188e-06);
        float _4520 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _1662 = _1661 * 2.0;
        float _1666 = (1.0 - _1661) / (_1661 + 1.0);
        float _4531 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1667 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _1676 = ((((1.0 - _1667) * (_1662 + 2.0)) * exp2(log2(isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * (_1662 + 1.0))) + _1667) * _1591;
        float _1677 = _1559 * 0.5;
        float _1678 = _1569 * 0.5;
        float _1679 = _1579 * 0.5;
        float _1680 = dot(vec3(_1677, _1678, _1679), vec3(_1677, _1678, _1679));
        float _1685 = (_1680 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1680);
        float _1693 = (dot(vec3(_836, _837, _838), vec3(_1685 * _1677, _1685 * _1678, _1685 * _1679)) + 1.0) * 0.5;
        float _4542 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1702 = sqrt(((_1678 * _1678) + (_1677 * _1677)) + (_1679 * _1679)) / (_1592 + 9.9999997473787516355514526367188e-06);
        float _4553 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1703 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
        float _1704 = _1703 * 2.0;
        float _1708 = (1.0 - _1703) / (_1703 + 1.0);
        float _4564 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1709 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
        float _1718 = ((((1.0 - _1709) * (_1704 + 2.0)) * exp2(log2(isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))) * (_1704 + 1.0))) + _1709) * _1592;
        _1726 = _1559;
        _1727 = _1558;
        _1728 = _1557;
        _1729 = _1569;
        _1730 = _1568;
        _1731 = _1567;
        _1732 = _1579;
        _1733 = _1578;
        _1734 = _1577;
        _1735 = _1592;
        _1736 = _1591;
        _1737 = _1590;
        _1738 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0)));
        _1739 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)));
        _1740 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)));
    }
    else
    {
        _1726 = _1415;
        _1727 = _1415;
        _1728 = _1415;
        _1729 = _1415;
        _1730 = _1415;
        _1731 = _1415;
        _1732 = _1415;
        _1733 = _1415;
        _1734 = _1415;
        _1735 = _1415;
        _1736 = _1415;
        _1737 = _1415;
        _1738 = 0.0;
        _1739 = 0.0;
        _1740 = 0.0;
    }
    float _1750 = (cbModelParam._m0[1u].x * (_1738 - _1427)) + _1427;
    float _1751 = (cbModelParam._m0[1u].x * (_1739 - _1428)) + _1428;
    float _1752 = (cbModelParam._m0[1u].x * (_1740 - _1429)) + _1429;
    float _1773 = fma(_1752, cbSceneParam._m0[89u].z, fma(_1751, cbSceneParam._m0[89u].y, _1750 * cbSceneParam._m0[89u].x));
    float _1776 = fma(_1752, cbSceneParam._m0[90u].z, fma(_1751, cbSceneParam._m0[90u].y, _1750 * cbSceneParam._m0[90u].x));
    float _1779 = fma(_1752, cbSceneParam._m0[91u].z, fma(_1751, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1750));
    float _1794 = _1021 * 0.5;
    float _1795 = _1022 * 0.5;
    float _1796 = _1023 * 0.5;
    float _1797 = dot(vec4(_1794, _1795, _1796, 1.0), vec4(_1728, _1731, _1734, _1737));
    float _1800 = dot(vec4(_1794, _1795, _1796, 1.0), vec4(_1727, _1730, _1733, _1736));
    float _1803 = dot(vec4(_1794, _1795, _1796, 1.0), vec4(_1726, _1729, _1732, _1735));
    float _1837;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1810 = dot(vec4(_1794, _1795, _1796, 1.0), vec4(_1414, _1418, _1421, _1424));
        float _1814 = dot(vec4(_1794, _1795, _1796, 1.0), vec4(_1416, _1419, _1422, _1425));
        float _1818 = dot(vec4(_1794, _1795, _1796, 1.0), vec4(_1417, _1420, _1423, _1426));
        float _1825 = dot(vec4(cbModelParam._m0[39u]), vec4(_1794, _1795, _1796, 1.0));
        _1837 = dot(vec3(isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0)), isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0)), isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1825) ? 0.0 : (isnan(0.0) ? _1825 : max(0.0, _1825))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1837 = 1.0;
    }
    float _1848;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1839 = dot(vec4(cbModelParam._m0[40u]), vec4(_1794, _1795, _1796, 1.0));
        _1848 = dot(vec3(isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0)), isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0)), isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1839) ? 0.0 : (isnan(0.0) ? _1839 : max(0.0, _1839))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1848 = 1.0;
    }
    float _1852 = (_1848 * cbModelParam._m0[1u].x) + (_1837 * (1.0 - cbModelParam._m0[1u].x));
    float _1862 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _839);
    float _1863 = isnan(_1862) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1862 : min(cbModelParam._m0[25u].z, _1862));
    float _1944;
    float _1946;
    float _1948;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1911 = fma(_1085, cbModelParam._m0[13u].z, fma(_1081, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1077)) + cbModelParam._m0[13u].w;
        float _1915 = fma(_1085, cbModelParam._m0[14u].z, fma(_1081, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1077)) + cbModelParam._m0[14u].w;
        float _1919 = fma(_1085, cbModelParam._m0[15u].z, fma(_1081, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1077)) + cbModelParam._m0[15u].w;
        float _1922 = fma(_1023, cbModelParam._m0[13u].z, fma(_1022, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1021));
        float _1925 = fma(_1023, cbModelParam._m0[14u].z, fma(_1022, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1021));
        float _1928 = fma(_1023, cbModelParam._m0[15u].z, fma(_1022, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1021));
        float _1956;
        if (_1922 > 0.0)
        {
            _1956 = abs((1.0 - _1911) / _1922);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1922 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1911 + 1.0) / _1922);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1956 = frontier_phi_17_15_ladder;
        }
        float _2128;
        if (_1925 > 0.0)
        {
            _2128 = abs((1.0 - _1915) / _1925);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1925 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1915 + 1.0) / _1925);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2128 = frontier_phi_26_22_ladder;
        }
        float _2423;
        if (_1928 > 0.0)
        {
            _2423 = abs((1.0 - _1919) / _1928);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1928 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1919 + 1.0) / _1928);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2423 = frontier_phi_38_33_ladder;
        }
        float _2425 = isnan(_2128) ? _1956 : (isnan(_1956) ? _2128 : min(_1956, _2128));
        float _2426 = isnan(_2423) ? _2425 : (isnan(_2425) ? _2423 : min(_2425, _2423));
        float _2430 = (_2426 * _1922) + _1911;
        float _2431 = (_2426 * _1925) + _1915;
        float _2432 = (_2426 * _1928) + _1919;
        float _2433 = _2426 * 9.9999997473787516355514526367188e-05;
        float _2435 = (-1.0) - _2433;
        float _2437 = _2433 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2432 > _2437) || ((_2432 < _2435) || ((_2431 > _2437) || ((_2431 < _2435) || ((_2430 < _2435) || (_2430 > _2437))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2577 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2432, cbModelParam._m0[9u].z, fma(_2431, cbModelParam._m0[9u].y, _2430 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2432, cbModelParam._m0[10u].z, fma(_2431, cbModelParam._m0[10u].y, _2430 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2432, cbModelParam._m0[11u].z, fma(_2431, cbModelParam._m0[11u].y, _2430 * cbModelParam._m0[11u].x))), _1863);
            frontier_phi_16_38_ladder = _2577.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2577.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2577.x * cbModelParam._m0[1u].y;
        }
        _1944 = frontier_phi_16_38_ladder_2;
        _1946 = frontier_phi_16_38_ladder_1;
        _1948 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1932 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1021, _1022, _1023), _1863);
        _1944 = _1932.x * cbModelParam._m0[1u].y;
        _1946 = _1932.y * cbModelParam._m0[1u].y;
        _1948 = _1932.z * cbModelParam._m0[1u].y;
    }
    float _1952 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _839);
    float _1953 = isnan(_1952) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1952 : min(cbModelParam._m0[25u].w, _1952));
    float _2043;
    float _2045;
    float _2047;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2007 = fma(_1085, cbModelParam._m0[21u].z, fma(_1081, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1077)) + cbModelParam._m0[21u].w;
        float _2011 = fma(_1085, cbModelParam._m0[22u].z, fma(_1081, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1077)) + cbModelParam._m0[22u].w;
        float _2015 = fma(_1085, cbModelParam._m0[23u].z, fma(_1081, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1077)) + cbModelParam._m0[23u].w;
        float _2018 = fma(_1023, cbModelParam._m0[21u].z, fma(_1022, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1021));
        float _2021 = fma(_1023, cbModelParam._m0[22u].z, fma(_1022, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1021));
        float _2024 = fma(_1023, cbModelParam._m0[23u].z, fma(_1022, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1021));
        float _2133;
        if (_2018 > 0.0)
        {
            _2133 = abs((1.0 - _2007) / _2018);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2018 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2007 + 1.0) / _2018);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2133 = frontier_phi_28_24_ladder;
        }
        float _2450;
        if (_2021 > 0.0)
        {
            _2450 = abs((1.0 - _2011) / _2021);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2021 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2011 + 1.0) / _2021);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2450 = frontier_phi_40_35_ladder;
        }
        float _2788;
        if (_2024 > 0.0)
        {
            _2788 = abs((1.0 - _2015) / _2024);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2024 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2015 + 1.0) / _2024);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2788 = frontier_phi_50_47_ladder;
        }
        float _2790 = isnan(_2450) ? _2133 : (isnan(_2133) ? _2450 : min(_2133, _2450));
        float _2791 = isnan(_2788) ? _2790 : (isnan(_2790) ? _2788 : min(_2790, _2788));
        float _2795 = (_2791 * _2018) + _2007;
        float _2796 = (_2791 * _2021) + _2011;
        float _2797 = (_2791 * _2024) + _2015;
        float _2798 = _2791 * 9.9999997473787516355514526367188e-05;
        float _2799 = (-1.0) - _2798;
        float _2801 = _2798 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2797 > _2801) || ((_2797 < _2799) || ((_2796 > _2801) || ((_2796 < _2799) || ((_2795 < _2799) || (_2795 > _2801))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2919 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2797, cbModelParam._m0[17u].z, fma(_2796, cbModelParam._m0[17u].y, _2795 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2797, cbModelParam._m0[18u].z, fma(_2796, cbModelParam._m0[18u].y, _2795 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2797, cbModelParam._m0[19u].z, fma(_2796, cbModelParam._m0[19u].y, _2795 * cbModelParam._m0[19u].x))), _1953);
            frontier_phi_25_50_ladder = _2919.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2919.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2919.x * cbModelParam._m0[1u].z;
        }
        _2043 = frontier_phi_25_50_ladder_2;
        _2045 = frontier_phi_25_50_ladder_1;
        _2047 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2027 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1021, _1022, _1023), _1953);
        _2043 = _2027.x * cbModelParam._m0[1u].z;
        _2045 = _2027.y * cbModelParam._m0[1u].z;
        _2047 = _2027.z * cbModelParam._m0[1u].z;
    }
    float _2060 = (((_1048 * _997) + _1049) * _1013) * ((cbModelParam._m0[1u].w * (_2043 - _1944)) + _1944);
    float _2062 = (((_1048 * _999) + _1049) * _1013) * ((cbModelParam._m0[1u].w * (_2045 - _1946)) + _1946);
    float _2064 = (((_1048 * _1000) + _1049) * _1013) * ((cbModelParam._m0[1u].w * (_2047 - _1948)) + _1948);
    float _2067 = fma(_2064, cbSceneParam._m0[89u].z, fma(_2062, cbSceneParam._m0[89u].y, _2060 * cbSceneParam._m0[89u].x));
    float _2070 = fma(_2064, cbSceneParam._m0[90u].z, fma(_2062, cbSceneParam._m0[90u].y, _2060 * cbSceneParam._m0[90u].x));
    float _2073 = fma(_2064, cbSceneParam._m0[91u].z, fma(_2062, cbSceneParam._m0[91u].y, _2060 * cbSceneParam._m0[91u].x));
    float _2107 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2111 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2115 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2119 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2120 = _2107 / _2119;
    float _2121 = _2111 / _2119;
    float _2122 = _2115 / _2119;
    float _2269;
    float _2270;
    float _2271;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2149 = ((uint(_2122 > cbSceneParam._m0[59u].y) + uint(_2122 > cbSceneParam._m0[59u].x)) + uint(_2122 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2150 = _2149 + 43u;
        uint _2158 = _2149 + 44u;
        uint _2166 = _2149 + 45u;
        uint _2174 = _2149 + 46u;
        float _2185 = fma(_2119, cbSceneParam._m0[_2150].w, fma(_2115, cbSceneParam._m0[_2150].z, fma(_2111, cbSceneParam._m0[_2150].y, _2107 * cbSceneParam._m0[_2150].x)));
        float _2189 = fma(_2119, cbSceneParam._m0[_2158].w, fma(_2115, cbSceneParam._m0[_2158].z, fma(_2111, cbSceneParam._m0[_2158].y, _2107 * cbSceneParam._m0[_2158].x)));
        float _2197 = fma(_2119, cbSceneParam._m0[_2174].w, fma(_2115, cbSceneParam._m0[_2174].z, fma(_2111, cbSceneParam._m0[_2174].y, _2107 * cbSceneParam._m0[_2174].x)));
        float _2202 = cbSceneParam._m0[33u].z * _2197;
        float _2204 = cbSceneParam._m0[33u].w * _2197;
        float _2207 = fma(_2119, cbSceneParam._m0[_2166].w, fma(_2115, cbSceneParam._m0[_2166].z, fma(_2111, cbSceneParam._m0[_2166].y, _2107 * cbSceneParam._m0[_2166].x))) / _2197;
        float _2255 = (cbSceneParam._m0[33u].x - sqrt(((_2121 * _2121) + (_2120 * _2120)) + (_2122 * _2122))) * cbSceneParam._m0[33u].y;
        float _4690 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
        float _2262 = (isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2202 + _2185) / _2197, (_2204 + _2189) / _2197), _2207), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2204 + _2185) / _2197, (_2189 - _2202) / _2197), _2207), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2185 - _2202) / _2197, (_2189 - _2204) / _2197), _2207), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2185 - _2204) / _2197, (_2202 + _2189) / _2197), _2207), 0.0)).x), vec4(0.25)));
        _2269 = 1.0 - (_2262 * cbSceneParam._m0[34u].x);
        _2270 = 1.0 - (_2262 * cbSceneParam._m0[34u].y);
        _2271 = 1.0 - (_2262 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2269 = 1.0;
        _2270 = 1.0;
        _2271 = 1.0;
    }
    float _2335;
    float _2337;
    float _2339;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2323 = fma(_2119, cbSceneParam._m0[63u].w, fma(_2115, cbSceneParam._m0[63u].z, fma(_2111, cbSceneParam._m0[63u].y, _2107 * cbSceneParam._m0[63u].x)));
        float _2324 = fma(_2119, cbSceneParam._m0[60u].w, fma(_2115, cbSceneParam._m0[60u].z, fma(_2111, cbSceneParam._m0[60u].y, _2107 * cbSceneParam._m0[60u].x))) / _2323;
        float _2325 = fma(_2119, cbSceneParam._m0[61u].w, fma(_2115, cbSceneParam._m0[61u].z, fma(_2111, cbSceneParam._m0[61u].y, _2107 * cbSceneParam._m0[61u].x))) / _2323;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2324 >= cbSceneParam._m0[64u].x) && (_2325 >= cbSceneParam._m0[64u].y)) && (_2324 <= cbSceneParam._m0[64u].z)) && (_2325 <= cbSceneParam._m0[64u].w))
        {
            float _2463 = fma(_2119, cbSceneParam._m0[62u].w, fma(_2115, cbSceneParam._m0[62u].z, fma(_2111, cbSceneParam._m0[62u].y, _2107 * cbSceneParam._m0[62u].x))) / _2323;
            float _2467 = isnan(cbSceneParam._m0[41u].w) ? _2463 : (isnan(_2463) ? cbSceneParam._m0[41u].w : max(_2463, cbSceneParam._m0[41u].w));
            float _2510 = (cbSceneParam._m0[33u].x - sqrt(((_2121 * _2121) + (_2120 * _2120)) + (_2122 * _2122))) * cbSceneParam._m0[33u].y;
            float _4706 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
            float _2517 = (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2324, cbSceneParam._m0[33u].w + _2325), _2467), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2324, _2325 - cbSceneParam._m0[33u].z), _2467), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2324 - cbSceneParam._m0[33u].z, _2325 - cbSceneParam._m0[33u].w), _2467), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2324 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2325), _2467), 0.0)).x), vec4(0.25)));
            float _2521 = 1.0 - (_2517 * cbSceneParam._m0[34u].x);
            float _2522 = 1.0 - (_2517 * cbSceneParam._m0[34u].y);
            float _2523 = 1.0 - (_2517 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2523) ? _2271 : (isnan(_2271) ? _2523 : min(_2271, _2523));
            frontier_phi_37_36_ladder_1 = isnan(_2522) ? _2270 : (isnan(_2270) ? _2522 : min(_2270, _2522));
            frontier_phi_37_36_ladder_2 = isnan(_2521) ? _2269 : (isnan(_2269) ? _2521 : min(_2269, _2521));
        }
        else
        {
            frontier_phi_37_36_ladder = _2271;
            frontier_phi_37_36_ladder_1 = _2270;
            frontier_phi_37_36_ladder_2 = _2269;
        }
        _2335 = frontier_phi_37_36_ladder_2;
        _2337 = frontier_phi_37_36_ladder_1;
        _2339 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2335 = _2269;
        _2337 = _2270;
        _2339 = _2271;
    }
    uvec4 _2344 = floatBitsToUint(cbInstanceData._m0[_287 + 5u]);
    uint _2346 = _2344.x * 14u;
    uint _2347 = _2346 + 13u;
    float _2354 = _1013 + (-1.0);
    float _2359 = (cbLight._m0[_2347].x * _2354) + 1.0;
    float _2360 = (cbLight._m0[_2347].y * _2354) + 1.0;
    float _2361 = (cbLight._m0[_2347].z * _2354) + 1.0;
    float _2362 = (cbLight._m0[_2347].w * _2354) + 1.0;
    uint _2363 = _2346 + 5u;
    float _2369 = isnan(1.0) ? _2360 : (isnan(_2360) ? 1.0 : min(_2360, 1.0));
    uint _2373 = _2346 + 4u;
    float _2382 = isnan(1.0) ? _2359 : (isnan(_2359) ? 1.0 : min(_2359, 1.0));
    uint _2386 = _2346 | 1u;
    float _2397 = dot(vec3(cbLight._m0[_2346].xyz), vec3(_836, _837, _838));
    float _2400 = dot(vec3(cbLight._m0[_2386].xyz), vec3(_836, _837, _838));
    float _4742 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _4753 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _2405 = (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * 0.3183098733425140380859375;
    float _2407 = (isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * 0.3183098733425140380859375;
    float _2414 = ((cbLight._m0[_2363].x * _2369) * _2407) + (((cbLight._m0[_2373].x * _2335) * _2382) * _2405);
    float _2415 = ((_2369 * cbLight._m0[_2363].y) * _2407) + (((cbLight._m0[_2373].y * _2337) * _2382) * _2405);
    float _2416 = ((_2369 * cbLight._m0[_2363].z) * _2407) + (((cbLight._m0[_2373].z * _2339) * _2382) * _2405);
    uvec4 _2420 = floatBitsToUint(cbLight._m0[_2346 + 12u]);
    bool _2422 = _2420.x == 0u;
    float _2524;
    float _2526;
    float _2528;
    if (_2422)
    {
        _2524 = _2414;
        _2526 = _2415;
        _2528 = _2416;
    }
    else
    {
        uint _2532 = _2346 + 6u;
        float _2548 = (dot(vec3(cbLight._m0[_2346 + 2u].xyz), vec3(_836, _837, _838)) * 0.5) + 0.5;
        float _2549 = _2548 * _2548;
        float _4764 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2550 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
        float _2551 = isnan(1.0) ? _2361 : (isnan(_2361) ? 1.0 : min(_2361, 1.0));
        _2524 = (((cbLight._m0[_2532].x * 0.3183098733425140380859375) * _2550) * _2551) + _2414;
        _2526 = (((cbLight._m0[_2532].y * 0.3183098733425140380859375) * _2550) * _2551) + _2415;
        _2528 = (((cbLight._m0[_2532].z * 0.3183098733425140380859375) * _2550) * _2551) + _2416;
    }
    bool _2531 = _2420.y == 0u;
    float _2586;
    float _2588;
    float _2590;
    if (_2531)
    {
        _2586 = _2524;
        _2588 = _2526;
        _2590 = _2528;
    }
    else
    {
        uint _2759 = _2346 + 7u;
        float _2775 = (dot(vec3(cbLight._m0[_2346 + 3u].xyz), vec3(_836, _837, _838)) * 0.5) + 0.5;
        float _2776 = _2775 * _2775;
        float _4780 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
        float _2777 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
        float _2778 = isnan(1.0) ? _2362 : (isnan(_2362) ? 1.0 : min(_2362, 1.0));
        _2586 = (((cbLight._m0[_2759].x * 0.3183098733425140380859375) * _2777) * _2778) + _2524;
        _2588 = (((cbLight._m0[_2759].y * 0.3183098733425140380859375) * _2777) * _2778) + _2526;
        _2590 = (((cbLight._m0[_2759].z * 0.3183098733425140380859375) * _2777) * _2778) + _2528;
    }
    uint _2593 = _2346 + 8u;
    float _2606 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2346].w)) * _839) * 0.949999988079071044921875);
    float _2607 = _2606 * _2606;
    float _2608 = cbLight._m0[_2346].x + _915;
    float _2609 = cbLight._m0[_2346].y + _916;
    float _2610 = cbLight._m0[_2346].z + _917;
    float _2614 = inversesqrt(dot(vec3(_2608, _2609, _2610), vec3(_2608, _2609, _2610)));
    float _2615 = _2614 * _2608;
    float _2616 = _2614 * _2609;
    float _2617 = _2614 * _2610;
    float _2618 = dot(vec3(_836, _837, _838), vec3(cbLight._m0[_2346].xyz));
    float _4796 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
    float _2621 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
    float _4807 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _2622 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
    float _2623 = dot(vec3(_836, _837, _838), vec3(_2615, _2616, _2617));
    float _4818 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
    float _2626 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
    float _2627 = dot(vec3(cbLight._m0[_2346].xyz), vec3(_2615, _2616, _2617));
    float _4829 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
    float _2631 = _2607 * _2607;
    float _2635 = ((_2626 * _2626) * (_2631 + (-1.0))) + 1.0;
    float _2643 = exp2(log2(1.0 - (isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0)))) * 5.0);
    float _2644 = 0.959999978542327880859375 - _994;
    float _2646 = 0.959999978542327880859375 - _995;
    float _2647 = 0.959999978542327880859375 - _996;
    float _2654 = 1.0 - _2607;
    float _2665 = (0.5 / (((_2622 * ((_2621 * _2654) + _2607)) + 9.9999999392252902907785028219223e-09) + (((_2622 * _2654) + _2607) * _2621))) * _2621;
    float _4840 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
    float _2667 = (isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0))) * (_2631 / ((_2635 * _2635) * 3.141590118408203125));
    uint _2681 = _2346 + 9u;
    float _2692 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2386].w)) * _839) * 0.949999988079071044921875);
    float _2693 = _2692 * _2692;
    float _2694 = cbLight._m0[_2386].x + _915;
    float _2695 = cbLight._m0[_2386].y + _916;
    float _2696 = cbLight._m0[_2386].z + _917;
    float _2700 = inversesqrt(dot(vec3(_2694, _2695, _2696), vec3(_2694, _2695, _2696)));
    float _2701 = _2700 * _2694;
    float _2702 = _2700 * _2695;
    float _2703 = _2700 * _2696;
    float _2704 = dot(vec3(_836, _837, _838), vec3(cbLight._m0[_2386].xyz));
    float _4851 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
    float _2707 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
    float _2708 = dot(vec3(_836, _837, _838), vec3(_2701, _2702, _2703));
    float _4862 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
    float _2711 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
    float _2712 = dot(vec3(cbLight._m0[_2386].xyz), vec3(_2701, _2702, _2703));
    float _4873 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
    float _2716 = _2693 * _2693;
    float _2720 = ((_2711 * _2711) * (_2716 + (-1.0))) + 1.0;
    float _2727 = exp2(log2(1.0 - (isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0)))) * 5.0);
    float _2734 = 1.0 - _2693;
    float _2744 = (0.5 / (((_2622 * ((_2707 * _2734) + _2693)) + 9.9999999392252902907785028219223e-09) + (((_2622 * _2734) + _2693) * _2707))) * _2707;
    float _4884 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
    float _2746 = (isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0))) * (_2716 / ((_2720 * _2720) * 3.141590118408203125));
    float _2756 = (((((_2727 * _2644) + _997) * cbLight._m0[_2681].x) * _2746) * _2369) + ((((cbLight._m0[_2593].x * _2335) * ((_2643 * _2644) + _997)) * _2667) * _2382);
    float _2757 = (((((_2727 * _2646) + _999) * cbLight._m0[_2681].y) * _2746) * _2369) + ((((cbLight._m0[_2593].y * _2337) * ((_2643 * _2646) + _999)) * _2667) * _2382);
    float _2758 = (((((_2727 * _2647) + _1000) * cbLight._m0[_2681].z) * _2746) * _2369) + ((((cbLight._m0[_2593].z * _2339) * ((_2643 * _2647) + _1000)) * _2667) * _2382);
    float _2814;
    float _2816;
    float _2818;
    if (_2422)
    {
        _2814 = _2756;
        _2816 = _2757;
        _2818 = _2758;
    }
    else
    {
        uint _2820 = _2346 + 2u;
        uint _2824 = _2346 + 10u;
        float _2838 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2820].w)) * _839) * 0.949999988079071044921875);
        float _2839 = _2838 * _2838;
        float _2840 = cbLight._m0[_2820].x + _915;
        float _2841 = cbLight._m0[_2820].y + _916;
        float _2842 = cbLight._m0[_2820].z + _917;
        float _2846 = inversesqrt(dot(vec3(_2840, _2841, _2842), vec3(_2840, _2841, _2842)));
        float _2847 = _2846 * _2840;
        float _2848 = _2846 * _2841;
        float _2849 = _2846 * _2842;
        float _2850 = dot(vec3(_836, _837, _838), vec3(cbLight._m0[_2820].xyz));
        float _4895 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
        float _2853 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
        float _2854 = dot(vec3(_836, _837, _838), vec3(_2847, _2848, _2849));
        float _4906 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
        float _2857 = isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0));
        float _2858 = dot(vec3(cbLight._m0[_2820].xyz), vec3(_2847, _2848, _2849));
        float _4917 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
        float _2862 = _2839 * _2839;
        float _2866 = ((_2857 * _2857) * (_2862 + (-1.0))) + 1.0;
        float _2873 = exp2(log2(1.0 - (isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0)))) * 5.0);
        float _2880 = 1.0 - _2839;
        float _2890 = (0.5 / (((_2622 * ((_2853 * _2880) + _2839)) + 9.9999999392252902907785028219223e-09) + (((_2622 * _2880) + _2839) * _2853))) * _2853;
        float _4928 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
        float _2892 = (isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0))) * (_2862 / ((_2866 * _2866) * 3.141590118408203125));
        float _2893 = isnan(1.0) ? _2361 : (isnan(_2361) ? 1.0 : min(_2361, 1.0));
        _2814 = (((((_2873 * _2644) + _997) * cbLight._m0[_2824].x) * _2892) * _2893) + _2756;
        _2816 = (((((_2873 * _2646) + _999) * cbLight._m0[_2824].y) * _2892) * _2893) + _2757;
        _2818 = (((((_2873 * _2647) + _1000) * cbLight._m0[_2824].z) * _2892) * _2893) + _2758;
    }
    float _2924;
    float _2926;
    float _2928;
    if (_2531)
    {
        _2924 = _2814;
        _2926 = _2816;
        _2928 = _2818;
    }
    else
    {
        uint _2935 = _2346 + 3u;
        uint _2939 = _2346 + 11u;
        float _2953 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2935].w)) * _839) * 0.949999988079071044921875);
        float _2954 = _2953 * _2953;
        float _2955 = cbLight._m0[_2935].x + _915;
        float _2956 = cbLight._m0[_2935].y + _916;
        float _2957 = cbLight._m0[_2935].z + _917;
        float _2961 = inversesqrt(dot(vec3(_2955, _2956, _2957), vec3(_2955, _2956, _2957)));
        float _2962 = _2961 * _2955;
        float _2963 = _2961 * _2956;
        float _2964 = _2961 * _2957;
        float _2965 = dot(vec3(_836, _837, _838), vec3(cbLight._m0[_2935].xyz));
        float _4944 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
        float _2968 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
        float _2969 = dot(vec3(_836, _837, _838), vec3(_2962, _2963, _2964));
        float _4955 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
        float _2972 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
        float _2973 = dot(vec3(cbLight._m0[_2935].xyz), vec3(_2962, _2963, _2964));
        float _4966 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
        float _2977 = _2954 * _2954;
        float _2981 = ((_2972 * _2972) * (_2977 + (-1.0))) + 1.0;
        float _2988 = exp2(log2(1.0 - (isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0)))) * 5.0);
        float _2995 = 1.0 - _2954;
        float _3005 = (0.5 / (((_2622 * ((_2968 * _2995) + _2954)) + 9.9999999392252902907785028219223e-09) + (((_2622 * _2995) + _2954) * _2968))) * _2968;
        float _4977 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
        float _3007 = (isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0))) * (_2977 / ((_2981 * _2981) * 3.141590118408203125));
        float _3008 = isnan(1.0) ? _2362 : (isnan(_2362) ? 1.0 : min(_2362, 1.0));
        _2924 = (((((_2988 * _2644) + _997) * cbLight._m0[_2939].x) * _3007) * _3008) + _2814;
        _2926 = (((((_2988 * _2646) + _999) * cbLight._m0[_2939].y) * _3007) * _3008) + _2816;
        _2928 = (((((_2988 * _2647) + _1000) * cbLight._m0[_2939].z) * _3007) * _3008) + _2818;
    }
    float _3074;
    float _3076;
    float _3078;
    float _3080;
    float _3082;
    float _3084;
    if (_2344.y == 0u)
    {
        uvec4 _3029 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3030 = _3029.x;
        uint _3041 = uint((float(_3029.y) * floor(float(uint(cbSceneParam._m0[85u].y * _936) / _3030))) + floor(float(uint(cbSceneParam._m0[85u].x * _935) / _3030)));
        float _3051 = (log2(_2122 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3052 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
        uint _3055 = uint(isnan(14.0) ? _3052 : (isnan(_3052) ? 14.0 : min(_3052, 14.0)));
        uvec4 _3060 = texelFetch(g_lightClusterGridBuffer, int(((_3055 << 2u) + (_3041 << 6u)) >> 2u));
        uint _3061 = _3060.x;
        uint _3062 = _3029.z;
        float _3141;
        float _3143;
        float _3145;
        float _3147;
        float _3149;
        float _3151;
        if (((((1u << ((_3062 >> 4u) & 15u)) + 4294967295u) & _3061) == 0u) || ((_3062 & 240u) == 0u))
        {
            _3141 = 0.0;
            _3143 = 0.0;
            _3145 = 0.0;
            _3147 = 0.0;
            _3149 = 0.0;
            _3151 = 0.0;
        }
        else
        {
            float _3142;
            float _3144;
            float _3146;
            float _3148;
            float _3150;
            float _3152;
            float _3294 = 0.0;
            float _3295 = 0.0;
            float _3296 = 0.0;
            float _3297 = 0.0;
            float _3298 = 0.0;
            float _3299 = 0.0;
            uint _3300 = 0u;
            uint _3309;
            bool _3310;
            for (;;)
            {
                _3309 = texelFetch(g_lightClassification, int((((_3055 << 5u) + (_3041 << 9u)) + (_3300 << 2u)) >> 2u)).x;
                _3310 = _3309 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3310)
                {
                    frontier_phi_71_pred = _3299;
                    frontier_phi_71_pred_1 = _3298;
                    frontier_phi_71_pred_2 = _3297;
                    frontier_phi_71_pred_3 = _3296;
                    frontier_phi_71_pred_4 = _3295;
                    frontier_phi_71_pred_5 = _3294;
                }
                else
                {
                    float _3439;
                    float _3440;
                    float _3441;
                    float _3442;
                    float _3443;
                    float _3444;
                    uint _3445;
                    _3439 = _3294;
                    _3440 = _3295;
                    _3441 = _3296;
                    _3442 = _3297;
                    _3443 = _3298;
                    _3444 = _3299;
                    _3445 = _3309;
                    float _3366;
                    float _3367;
                    float _3368;
                    float _3369;
                    float _3370;
                    float _3371;
                    for (;;)
                    {
                        uint _3449 = uint(findLSB(_3445)) + (_3300 << 5u);
                        uint _3446 = (_3445 + 4294967295u) & _3445;
                        uint _3451 = _3449 * 48u;
                        vec4 _3465 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3451)).x, texelFetch(g_PointLightRenderingBuffer, int(_3451 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3451 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3451 + 3u)).x));
                        uint _3471 = (_3449 * 48u) + 4u;
                        vec4 _3484 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3471)).x, texelFetch(g_PointLightRenderingBuffer, int(_3471 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3471 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3471 + 3u)).x));
                        uint _3490 = (_3449 * 48u) + 8u;
                        vec3 _3501 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3490)).x, texelFetch(g_PointLightRenderingBuffer, int(_3490 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3490 + 2u)).x));
                        float _3505 = _3465.x - _2120;
                        float _3506 = _3465.y - _2121;
                        float _3507 = _3465.z - _2122;
                        float _3508 = dot(vec3(_3505, _3506, _3507), vec3(_3505, _3506, _3507));
                        float _3511 = inversesqrt(_3508);
                        float _3512 = _3511 * _3505;
                        float _3513 = _3511 * _3506;
                        float _3514 = _3511 * _3507;
                        float _3515 = dot(vec3(_954, _957, _960), vec3(_3512, _3513, _3514));
                        float _3520 = 1.0 - (_3508 * _3465.w);
                        float _5003 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                        float _3521 = isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0));
                        float _3522 = sqrt(_3508) * _3484.w;
                        float _3525 = 1.39999997615814208984375 / (_3522 + 1.39999997615814208984375);
                        float _3526 = _3525 * _3525;
                        float _3529 = ((1.0 - _3526) * _3515) + _3526;
                        float _3532 = _3522 * _3522;
                        float _3536 = ((isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0))) * _3521) / ((_3532 * 0.699999988079071044921875) + 1.0);
                        float _3540 = (-0.0) - _2120;
                        float _3541 = (-0.0) - _2121;
                        float _3542 = (-0.0) - _2122;
                        float _3546 = inversesqrt(dot(vec3(_3540, _3541, _3542), vec3(_3540, _3541, _3542)));
                        float _3547 = _3546 * _3540;
                        float _3548 = _3546 * _3541;
                        float _3549 = _3546 * _3542;
                        float _3556 = exp2(log2(1.0 / ((_3532 * 3.5) + 5.0)) * 0.25);
                        float _3557 = 1.0 - _1029;
                        float _3564 = sqrt(1.0 - ((1.0 - (_3557 * _3557)) * (1.0 - (_3556 * _3556))));
                        float _3565 = _3564 * _3564;
                        float _3566 = _3565 * _3565;
                        float _3567 = _3547 + _3512;
                        float _3568 = _3548 + _3513;
                        float _3569 = _3549 + _3514;
                        float _3573 = inversesqrt(dot(vec3(_3567, _3568, _3569), vec3(_3567, _3568, _3569)));
                        float _3577 = dot(vec3(_954, _957, _960), vec3(_3547, _3548, _3549));
                        float _5019 = isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0));
                        float _3580 = isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0));
                        float _3581 = dot(vec3(_954, _957, _960), vec3(_3573 * _3567, _3573 * _3568, _3573 * _3569));
                        float _5030 = isnan(0.0) ? _3581 : (isnan(_3581) ? 0.0 : max(_3581, 0.0));
                        float _3584 = isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0));
                        float _3588 = ((_3584 * _3584) * (_3566 + (-1.0))) + 1.0;
                        float _3589 = _3525 * _3565;
                        float _3590 = _3589 * _3589;
                        float _3593 = ((1.0 - _3590) * _3515) + _3590;
                        float _5041 = isnan(0.0) ? _3593 : (isnan(_3593) ? 0.0 : max(_3593, 0.0));
                        float _3594 = isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0));
                        float _3595 = 1.0 - _3565;
                        float _3605 = (0.5 / (((_3594 * ((_3580 * _3595) + _3565)) + 9.9999999392252902907785028219223e-09) + (((_3594 * _3595) + _3565) * _3580))) * _3594;
                        float _5052 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                        float _3616 = (((_3566 * 3.1415927410125732421875) * (isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0)))) / ((_3588 * _3588) * ((_3532 * 2.1991131305694580078125) + 3.141590118408203125))) * _3521;
                        _3369 = (_3536 * _3484.x) + _3442;
                        _3370 = (_3536 * _3484.y) + _3443;
                        _3371 = (_3536 * _3484.z) + _3444;
                        _3366 = (_3616 * _3501.x) + _3439;
                        _3367 = (_3616 * _3501.y) + _3440;
                        _3368 = (_3616 * _3501.z) + _3441;
                        if (_3446 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3439 = _3366;
                            _3440 = _3367;
                            _3441 = _3368;
                            _3442 = _3369;
                            _3443 = _3370;
                            _3444 = _3371;
                            _3445 = _3446;
                        }
                    }
                    frontier_phi_71_pred = _3371;
                    frontier_phi_71_pred_1 = _3370;
                    frontier_phi_71_pred_2 = _3369;
                    frontier_phi_71_pred_3 = _3368;
                    frontier_phi_71_pred_4 = _3367;
                    frontier_phi_71_pred_5 = _3366;
                }
                _3152 = frontier_phi_71_pred;
                _3150 = frontier_phi_71_pred_1;
                _3148 = frontier_phi_71_pred_2;
                _3146 = frontier_phi_71_pred_3;
                _3144 = frontier_phi_71_pred_4;
                _3142 = frontier_phi_71_pred_5;
                uint _3301 = _3300 + 1u;
                if (_3301 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3294 = _3142;
                    _3295 = _3144;
                    _3296 = _3146;
                    _3297 = _3148;
                    _3298 = _3150;
                    _3299 = _3152;
                    _3300 = _3301;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3141 = _3142;
            _3143 = _3144;
            _3145 = _3146;
            _3147 = _3148;
            _3149 = _3150;
            _3151 = _3152;
        }
        uvec4 _3155 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3156 = _3155.z;
        uint _3158 = (_3156 >> 8u) & 15u;
        float _3262;
        float _3264;
        float _3266;
        float _3268;
        float _3270;
        float _3272;
        if (((4294967295u << _3158) & _3061) == 0u)
        {
            _3262 = _3141;
            _3264 = _3143;
            _3266 = _3145;
            _3268 = _3147;
            _3270 = _3149;
            _3272 = _3151;
        }
        else
        {
            float _3287 = inversesqrt(dot(vec3(_2120, _2121, _2122), vec3(_2120, _2121, _2122)));
            float _3288 = _3287 * _2120;
            float _3289 = _3287 * _2121;
            float _3290 = _3287 * _2122;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3158 < ((_3156 >> 12u) & 15u))
            {
                float _3263;
                float _3265;
                float _3267;
                float _3269;
                float _3271;
                float _3273;
                float _3422 = _3141;
                float _3423 = _3143;
                float _3424 = _3145;
                float _3425 = _3147;
                float _3426 = _3149;
                float _3427 = _3151;
                uint _3428 = _3158;
                uint _3437;
                bool _3438;
                for (;;)
                {
                    _3437 = texelFetch(g_lightClassification, int((((_3055 << 5u) + (_3041 << 9u)) + (_3428 << 2u)) >> 2u)).x;
                    _3438 = _3437 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3438)
                    {
                        frontier_phi_82_pred = _3427;
                        frontier_phi_82_pred_1 = _3426;
                        frontier_phi_82_pred_2 = _3425;
                        frontier_phi_82_pred_3 = _3424;
                        frontier_phi_82_pred_4 = _3423;
                        frontier_phi_82_pred_5 = _3422;
                    }
                    else
                    {
                        float _3630;
                        float _3631;
                        float _3632;
                        float _3633;
                        float _3634;
                        float _3635;
                        float _3923;
                        float _3924;
                        float _3925;
                        float _3926;
                        float _3927;
                        float _3928;
                        float _3643 = _3422;
                        float _3644 = _3423;
                        float _3645 = _3424;
                        float _3646 = _3425;
                        float _3647 = _3426;
                        float _3648 = _3427;
                        uint _3649 = _3437;
                        uint _3650;
                        vec4 _3675;
                        float _3676;
                        vec4 _3691;
                        vec3 _3703;
                        vec4 _3718;
                        vec4 _3733;
                        float _3779;
                        bool _3780;
                        for (;;)
                        {
                            uint _3660 = ((_3428 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3649));
                            _3650 = (_3649 + 4294967295u) & _3649;
                            uint _3662 = _3660 * 40u;
                            _3675 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3662)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 3u)).x));
                            _3676 = _3675.w;
                            uint _3678 = (_3660 * 40u) + 4u;
                            _3691 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3678)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 3u)).x));
                            uint _3693 = (_3660 * 40u) + 8u;
                            _3703 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3693)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 2u)).x));
                            uint _3705 = (_3660 * 40u) + 16u;
                            _3718 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3705)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3705 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3705 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3705 + 3u)).x));
                            uint _3720 = (_3660 * 40u) + 20u;
                            _3733 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3720)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3720 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3720 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3720 + 3u)).x));
                            uint _3735 = (_3660 * 40u) + 24u;
                            vec4 _3748 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3735)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3735 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3735 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3735 + 3u)).x));
                            uint _3754 = (_3660 * 40u) + 28u;
                            vec4 _3767 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3754)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3754 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3754 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3754 + 3u)).x));
                            _3779 = fma(_2122, _3767.z, fma(_2121, _3767.y, _3767.x * _2120)) + _3767.w;
                            _3780 = !((fma(_2122, _3748.z, fma(_2121, _3748.y, _3748.x * _2120)) + _3748.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3780)
                            {
                                float _3807 = _3675.x - _2120;
                                float _3808 = _3675.y - _2121;
                                float _3809 = _3675.z - _2122;
                                float _3810 = dot(vec3(_3807, _3808, _3809), vec3(_3807, _3808, _3809));
                                float _3813 = inversesqrt(_3810);
                                float _3814 = _3813 * _3807;
                                float _3815 = _3813 * _3808;
                                float _3816 = _3813 * _3809;
                                float _3820 = 1.0 - (_3810 / (_3676 * _3676));
                                float _5063 = isnan(0.0) ? _3820 : (isnan(_3820) ? 0.0 : max(_3820, 0.0));
                                float _3821 = isnan(1.0) ? _5063 : (isnan(_5063) ? 1.0 : min(_5063, 1.0));
                                float _3825 = sqrt(_3810) * _3691.w;
                                float _3827 = 1.39999997615814208984375 / (_3825 + 1.39999997615814208984375);
                                float _3828 = _3827 * _3827;
                                float _3831 = ((1.0 - _3828) * dot(vec3(_3814, _3815, _3816), vec3(_954, _957, _960))) + _3828;
                                float _3834 = _3825 * _3825;
                                float _3838 = (fma(_2122, _3718.z, fma(_2121, _3718.y, _3718.x * _2120)) + _3718.w) / _3779;
                                float _3839 = (fma(_2122, _3733.z, fma(_2121, _3733.y, _3733.x * _2120)) + _3733.w) / _3779;
                                float _3843 = 1.0 - dot(vec2(_3838, _3839), vec2(_3838, _3839));
                                float _5079 = isnan(0.0) ? _3843 : (isnan(_3843) ? 0.0 : max(_3843, 0.0));
                                float _3844 = isnan(1.0) ? _5079 : (isnan(_5079) ? 1.0 : min(_5079, 1.0));
                                float _3845 = _3844 * (((isnan(0.0) ? _3831 : (isnan(_3831) ? 0.0 : max(_3831, 0.0))) * _3821) / ((_3834 * 0.699999988079071044921875) + 1.0));
                                float _3857 = exp2(log2(1.0 / ((_3834 * 3.5) + 5.0)) * 0.25);
                                float _3858 = 1.0 - _1029;
                                float _3865 = sqrt(1.0 - ((1.0 - (_3858 * _3858)) * (1.0 - (_3857 * _3857))));
                                float _3866 = _3865 * _3865;
                                float _3867 = _3866 * _3866;
                                float _3868 = _3814 - _3288;
                                float _3869 = _3815 - _3289;
                                float _3870 = _3816 - _3290;
                                float _3874 = inversesqrt(dot(vec3(_3868, _3869, _3870), vec3(_3868, _3869, _3870)));
                                float _3878 = dot(vec3(_954, _957, _960), vec3((-0.0) - _3288, (-0.0) - _3289, (-0.0) - _3290));
                                float _5090 = isnan(0.0) ? _3878 : (isnan(_3878) ? 0.0 : max(_3878, 0.0));
                                float _3881 = isnan(1.0) ? _5090 : (isnan(_5090) ? 1.0 : min(_5090, 1.0));
                                float _3882 = dot(vec3(_954, _957, _960), vec3(_3874 * _3868, _3874 * _3869, _3874 * _3870));
                                float _5101 = isnan(0.0) ? _3882 : (isnan(_3882) ? 0.0 : max(_3882, 0.0));
                                float _3885 = isnan(1.0) ? _5101 : (isnan(_5101) ? 1.0 : min(_5101, 1.0));
                                float _3889 = ((_3885 * _3885) * (_3867 + (-1.0))) + 1.0;
                                float _3890 = _3827 * _3866;
                                float _3891 = _3890 * _3890;
                                float _3897 = ((1.0 - _3891) * dot(vec3(_954, _957, _960), vec3(_3814, _3815, _3816))) + _3891;
                                float _5112 = isnan(0.0) ? _3897 : (isnan(_3897) ? 0.0 : max(_3897, 0.0));
                                float _3898 = isnan(1.0) ? _5112 : (isnan(_5112) ? 1.0 : min(_5112, 1.0));
                                float _3899 = 1.0 - _3866;
                                float _3909 = (0.5 / (((_3898 * ((_3881 * _3899) + _3866)) + 9.9999999392252902907785028219223e-09) + (((_3898 * _3899) + _3866) * _3881))) * _3898;
                                float _5123 = isnan(0.0) ? _3909 : (isnan(_3909) ? 0.0 : max(_3909, 0.0));
                                float _3919 = (_3844 * _3821) * (((_3867 * 3.1415927410125732421875) * (isnan(1.0) ? _5123 : (isnan(_5123) ? 1.0 : min(_5123, 1.0)))) / ((_3889 * _3889) * ((_3834 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3845 * _3691.z;
                                frontier_phi_88_pred_1 = _3845 * _3691.y;
                                frontier_phi_88_pred_2 = _3845 * _3691.x;
                                frontier_phi_88_pred_3 = _3919 * _3703.z;
                                frontier_phi_88_pred_4 = _3919 * _3703.y;
                                frontier_phi_88_pred_5 = _3919 * _3703.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3928 = frontier_phi_88_pred;
                            _3927 = frontier_phi_88_pred_1;
                            _3926 = frontier_phi_88_pred_2;
                            _3925 = frontier_phi_88_pred_3;
                            _3924 = frontier_phi_88_pred_4;
                            _3923 = frontier_phi_88_pred_5;
                            _3633 = _3926 + _3646;
                            _3634 = _3927 + _3647;
                            _3635 = _3928 + _3648;
                            _3630 = _3923 + _3643;
                            _3631 = _3924 + _3644;
                            _3632 = _3925 + _3645;
                            if (_3650 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3643 = _3630;
                                _3644 = _3631;
                                _3645 = _3632;
                                _3646 = _3633;
                                _3647 = _3634;
                                _3648 = _3635;
                                _3649 = _3650;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3635;
                        frontier_phi_82_pred_1 = _3634;
                        frontier_phi_82_pred_2 = _3633;
                        frontier_phi_82_pred_3 = _3632;
                        frontier_phi_82_pred_4 = _3631;
                        frontier_phi_82_pred_5 = _3630;
                    }
                    _3273 = frontier_phi_82_pred;
                    _3271 = frontier_phi_82_pred_1;
                    _3269 = frontier_phi_82_pred_2;
                    _3267 = frontier_phi_82_pred_3;
                    _3265 = frontier_phi_82_pred_4;
                    _3263 = frontier_phi_82_pred_5;
                    uint _3429 = _3428 + 1u;
                    if (_3429 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3422 = _3263;
                        _3423 = _3265;
                        _3424 = _3267;
                        _3425 = _3269;
                        _3426 = _3271;
                        _3427 = _3273;
                        _3428 = _3429;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3269;
                frontier_phi_63_64_ladder_1 = _3273;
                frontier_phi_63_64_ladder_2 = _3271;
                frontier_phi_63_64_ladder_3 = _3267;
                frontier_phi_63_64_ladder_4 = _3265;
                frontier_phi_63_64_ladder_5 = _3263;
            }
            else
            {
                frontier_phi_63_64_ladder = _3147;
                frontier_phi_63_64_ladder_1 = _3151;
                frontier_phi_63_64_ladder_2 = _3149;
                frontier_phi_63_64_ladder_3 = _3145;
                frontier_phi_63_64_ladder_4 = _3143;
                frontier_phi_63_64_ladder_5 = _3141;
            }
            _3262 = frontier_phi_63_64_ladder_5;
            _3264 = frontier_phi_63_64_ladder_4;
            _3266 = frontier_phi_63_64_ladder_3;
            _3268 = frontier_phi_63_64_ladder;
            _3270 = frontier_phi_63_64_ladder_2;
            _3272 = frontier_phi_63_64_ladder_1;
        }
        float _3277 = isnan(1.0) ? _1013 : (isnan(_1013) ? 1.0 : min(_1013, 1.0));
        _3074 = (_3277 * _3268) + _2586;
        _3076 = (_3277 * _3270) + _2588;
        _3078 = (_3277 * _3272) + _2590;
        _3080 = ((_3262 * _997) * _3277) + _2924;
        _3082 = ((_3264 * _999) * _3277) + _2926;
        _3084 = ((_3266 * _1000) * _3277) + _2928;
    }
    else
    {
        _3074 = _2586;
        _3076 = _2588;
        _3078 = _2590;
        _3080 = _2924;
        _3082 = _2926;
        _3084 = _2928;
    }
    float _5139 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _5150 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _5161 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _3101 = ((isnan(1.0) ? _5139 : (isnan(_5139) ? 1.0 : min(_5139, 1.0))) * (_3074 + ((isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))) * _1013))) + ((_3080 + ((isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0))) * _1852)) * cbPerFrame._m0[3u].x);
    float _3102 = ((isnan(1.0) ? _5150 : (isnan(_5150) ? 1.0 : min(_5150, 1.0))) * (_3076 + ((isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))) * _1013))) + ((_3082 + ((isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0))) * _1852)) * cbPerFrame._m0[3u].x);
    float _3103 = ((isnan(1.0) ? _5161 : (isnan(_5161) ? 1.0 : min(_5161, 1.0))) * (_3078 + ((isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))) * _1013))) + ((_3084 + ((isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0))) * _1852)) * cbPerFrame._m0[3u].x);
    uint _3104 = _287 + 6u;
    float _3112 = _935 / cbSceneParam._m0[86u].x;
    float _3113 = _936 / cbSceneParam._m0[86u].y;
    vec4 _3127 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3112, _3113, (log2((isnan(cbSceneParam._m0[77u].w) ? _858 : (isnan(_858) ? cbSceneParam._m0[77u].w : min(_858, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3129 = _3127.x;
    float _3130 = _3127.y;
    float _3131 = _3127.z;
    float _3132 = _3127.w;
    float _3204;
    float _3206;
    float _3208;
    float _3210;
    if (_858 > cbSceneParam._m0[78u].w)
    {
        float _3166 = isnan(_858) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _858 : min(cbSceneParam._m0[80u].w, _858));
        float _3167 = _3166 / _858;
        float _3178 = _3167 * _908;
        float _3179 = _909 * _3167;
        float _3180 = (-0.0) - _3179;
        float _3182 = _3167 * _910;
        float _3184 = (cbSceneParam._m0[77u].w * _3180) / _3166;
        float _3185 = _3184 + cbSceneParam._m0[79u].w;
        float _3186 = cbSceneParam._m0[79u].w - _3179;
        float _3192 = sqrt(((_3178 * _3178) + (_3179 * _3179)) + (_3182 * _3182));
        float _3195 = (1.0 - (cbSceneParam._m0[77u].w / _3166)) * _3192;
        float _3200 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3202 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3379;
        if (abs((_3180 - _3184) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3379 = ((((_3185 > 0.0) ? exp2(_3200 * _3185) : (2.0 - exp2(_3202 * _3185))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3195;
        }
        else
        {
            float _3323 = 1.0 / cbSceneParam._m0[80u].x;
            float _3324 = isnan(_3186) ? _3185 : (isnan(_3185) ? _3186 : max(_3185, _3186));
            float _3325 = isnan(_3186) ? _3185 : (isnan(_3185) ? _3186 : min(_3185, _3186));
            float _3334 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : min(_3324, 0.0));
            float _3335 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : min(_3325, 0.0));
            _3379 = ((abs(_3192 / _3180) * cbSceneParam._m0[80u].y) * ((((_3334 - _3335) * 2.0) - ((exp2(_3200 * (isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0)))) - exp2(_3200 * (isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0))))) * _3323)) - ((exp2(_3202 * _3334) - exp2(_3202 * _3335)) * _3323))) + (_3195 * cbSceneParam._m0[80u].z);
        }
        vec4 _3381 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3112, _3113, 1.0), 0.0);
        float _3390 = exp2((_3379 * (-1.44269502162933349609375)) * (1.0 - _3381.w));
        float _3391 = log2(_3390);
        float _3407 = log2(_3132);
        _3204 = (exp2(_3407 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3391 * cbSceneParam._m0[78u].x)) * _3381.x) / cbSceneParam._m0[78u].x)) + _3129;
        _3206 = (exp2(_3407 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3391 * cbSceneParam._m0[78u].y)) * _3381.y) / cbSceneParam._m0[78u].y)) + _3130;
        _3208 = (exp2(_3407 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3391 * cbSceneParam._m0[78u].z)) * _3381.z) / cbSceneParam._m0[78u].z)) + _3131;
        _3210 = _3390 * _3132;
    }
    else
    {
        _3204 = _3129;
        _3206 = _3130;
        _3208 = _3131;
        _3210 = _3132;
    }
    bool _3417;
    vec4 _3220;
    vec4 _3242;
    float _3244;
    float _3248;
    float _3249;
    float _3250;
    float _3251;
    bool _3261;
    for (;;)
    {
        _3220 = cbMatDynParam._m0[0u];
        float _3222 = roundEven(_3220.y);
        bool _3223 = _3222 == 3.0;
        float _3224 = log2(_3210);
        float _3231 = exp2(_3224 * cbSceneParam._m0[78u].x) * _3101;
        float _3232 = exp2(_3224 * cbSceneParam._m0[78u].y) * _3102;
        float _3233 = exp2(_3224 * cbSceneParam._m0[78u].z) * _3103;
        float _3240 = _924 + (-0.5);
        _3242 = cbMtdParam._m0[1u];
        _3244 = _3242.y * _3240;
        float _3247 = (_3222 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3248 = _3247 * (_3223 ? _3231 : (_3231 + (cbSceneParam._m0[72u].w * _3204)));
        _3249 = _3247 * (_3223 ? _3232 : (_3232 + (cbSceneParam._m0[72u].w * _3206)));
        _3250 = _3247 * (_3223 ? _3233 : (_3233 + (cbSceneParam._m0[72u].w * _3208)));
        _3251 = _3240 * 0.999000012874603271484375;
        _3261 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3261)
        {
            if ((cbInstanceData._m0[_287 + 7u].x + _3251) < 0.5)
            {
                _3417 = true;
                break;
            }
        }
        uint _3358 = _973 + uint(_3220.w);
        if ((cbInstanceData._m0[_3358].w < 1.0) && ((cbInstanceData._m0[_3358].w + _3251) < 0.5))
        {
            _3417 = true;
            break;
        }
        if ((_3244 + 1.0) < _3242.x)
        {
            _3417 = true;
            break;
        }
        _3417 = false;
        break;
    }
    float _3621;
    if (_3417)
    {
        discard_state = true;
        _3621 = 0.0;
    }
    else
    {
        _3621 = cbInstanceData._m0[_3104].w;
    }
    SV_Target.x = _3248;
    SV_Target.y = _3249;
    SV_Target.z = _3250;
    SV_Target.w = _3621;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3104].w;
    discard_exit();
}


