#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1367;
float _4031;
float _4032;
float _4033;
float _4034;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _238 = _237 * _229;
    float _239 = _237 * _230;
    float _240 = _237 * _231;
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = _244 * NORMAL.x;
    float _246 = _244 * NORMAL.y;
    float _247 = _244 * NORMAL.z;
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252 = _251 * TANGENT.x;
    float _253 = _251 * TANGENT.y;
    float _254 = _251 * TANGENT.z;
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _362 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _364 = _362.x;
    float _376 = dot(vec4(_364, _362.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _393 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_364 - _376) * cbMtdParam._m0[24u].y) + _376) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4043 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _394 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _401 = (_394 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _402 = (_394 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _403 = (_394 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _421 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _438 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _440 = _438.x;
    float _441 = _438.y;
    float _442 = _438.z;
    float _451 = ((_421.z - _442) * _394) + _442;
    float _454 = ((((_421.x - _440) * _394) + _440) * 2.0) + (-1.0);
    float _456 = ((((_421.y - _441) * _394) + _441) * 2.0) + (-1.0);
    float _457 = dot(vec2(_454, _456), vec2(_454, _456));
    float _4054 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _462 = sqrt(1.0 - (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))));
    float _465 = fma(_462, _245, fma(_456, _252, _454 * _238));
    float _468 = fma(_462, _246, fma(_456, _253, _454 * _239));
    float _471 = fma(_462, _247, fma(_456, _254, _454 * _240));
    float _475 = inversesqrt(dot(vec3(_465, _468, _471), vec3(_465, _468, _471)));
    vec4 _491 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _517 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _519 = _517.x;
    float _520 = 1.0 - _519;
    float _524 = ((_519 - _520) * cbMtdParam._m0[24u].z) + _520;
    float _526 = (cbMtdParam._m0[19u].x + dot(vec4(_475 * _465, _475 * _468, _475 * _471, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_524 * cbMtdParam._m0[21u].z);
    float _4065 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _527 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _529 = (-0.0) - cbMtdParam._m0[24u].x;
    float _531 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _532 = isnan(1.0) ? _531 : (isnan(_531) ? 1.0 : min(_531, 1.0));
    float _539 = _527 - ((_527 * TEXCOORD_8.x) * _532);
    float _540 = _527 - ((_527 * TEXCOORD_8.y) * _532);
    float _541 = _527 - ((_527 * TEXCOORD_8.z) * _532);
    float _548 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _552 = ((isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : min(_548, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _560 = (_552 - (((_524 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _552))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4096 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _561 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _565 = ((_539 * (cbMtdParam._m0[17u].x - _401)) * _561) + _401;
    float _566 = ((_540 * (cbMtdParam._m0[17u].y - _402)) * _561) + _402;
    float _567 = ((_541 * (cbMtdParam._m0[17u].z - _403)) * _561) + _403;
    vec4 _579 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _581 = _579.x;
    float _582 = 1.0 - _581;
    float _609 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_581 - _582) * cbMtdParam._m0[24u].w) + _582) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4107 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _610 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _618 = ((((cbMtdParam._m0[10u].x - _565) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _610) + _565;
    float _619 = ((((cbMtdParam._m0[10u].y - _566) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _610) + _566;
    float _620 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _567)) * _610) + _567;
    vec4 _646 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _648 = _646.x;
    float _666 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _276) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _277) + cbTextureTilingScale._m0[9u].w)).x - _648) * _394) + _648;
    float _670 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _666) * cbMtdParam._m0[19u].z) + _666;
    float _673 = _670 - ((_561 * _539) * _670);
    float _675 = _673 - (_673 * _610);
    vec4 _689 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _696 = (_689.x * 2.0) + (-1.0);
    float _697 = (_689.y * 2.0) + (-1.0);
    float _698 = dot(vec2(_696, _697), vec2(_696, _697));
    float _4118 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _707 = (((_689.z - _451) * _539) * _561) + _451;
    float _710 = ((cbMtdParam._m0[23u].y - _707) * _610) + _707;
    vec4 _729 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _735 = (_729.x * 2.0) + (-1.0);
    float _736 = (_729.y * 2.0) + (-1.0);
    float _737 = dot(vec2(_735, _736), vec2(_735, _736));
    float _4129 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _757 = (((cbMtdParam._m0[21u].x * _454) + ((_696 - _454) * _539)) * _561) + _454;
    float _758 = (((cbMtdParam._m0[21u].x * _456) + ((_697 - _456) * _540)) * _561) + _456;
    float _759 = (((sqrt(1.0 - (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0)))) - _462) * _541) * _561) + _462;
    float _770 = (((_735 - _757) + (_757 * cbMtdParam._m0[22u].z)) * _610) + _757;
    float _771 = (((_736 - _758) + (_758 * cbMtdParam._m0[22u].z)) * _610) + _758;
    float _772 = ((sqrt(1.0 - (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) - _759) * _610) + _759;
    float _774 = cbMtdParam._m0[22u].x + _491.w;
    float _777 = fma(_772, _245, fma(_771, _252, _770 * _238));
    float _780 = fma(_772, _246, fma(_771, _253, _770 * _239));
    float _783 = fma(_772, _247, fma(_771, _254, _770 * _240));
    float _787 = inversesqrt(dot(vec3(_777, _780, _783), vec3(_777, _780, _783)));
    float _788 = _787 * _777;
    float _789 = _787 * _780;
    float _790 = _787 * _783;
    float _4140 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _791 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _4151 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _4162 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _4173 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _4184 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _4195 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _796 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _810 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _850 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _860 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _850);
    float _861 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _850);
    float _862 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _850);
    float _866 = inversesqrt(dot(vec3(_860, _861, _862), vec3(_860, _861, _862)));
    float _867 = _860 * _866;
    float _868 = _861 * _866;
    float _869 = _862 * _866;
    vec4 _874 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _876 = _874.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1048 = sqrt(((_860 * _860) + (_861 * _861)) + (_862 * _862));
        float _1054 = (cbMatDynParam._m0[5u].x * _1048) + cbMatDynParam._m0[5u].y;
        float _4206 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1059 = (cbMatDynParam._m0[5u].z * _1048) + cbMatDynParam._m0[5u].w;
        float _4217 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) - _1055)) + _1055) < ((_876 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _887 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _888 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _906 = fma(_790, cbSceneParam._m0[5u].z, fma(_789, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _788));
    float _909 = fma(_790, cbSceneParam._m0[6u].z, fma(_789, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _788));
    float _912 = fma(_790, cbSceneParam._m0[7u].z, fma(_789, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _788));
    uint _925 = _257 + 9u;
    uint _926 = _925 + uint(cbMatDynParam._m0[0u].w);
    float _932 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0)))) * cbInstanceData._m0[_926].x;
    float _933 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) * cbInstanceData._m0[_926].y;
    float _934 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0)))) * cbInstanceData._m0[_926].z;
    float _4228 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _935 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
    float _4239 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _936 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
    float _4250 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _937 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    float _938 = 1.0 - _796;
    float _939 = _935 * _938;
    float _940 = _936 * _938;
    float _941 = _937 * _938;
    float _946 = (_935 + (-0.039999999105930328369140625)) * _796;
    float _947 = (_936 + (-0.039999999105930328369140625)) * _796;
    float _948 = (_937 + (-0.039999999105930328369140625)) * _796;
    float _949 = _946 + 0.039999999105930328369140625;
    float _951 = _947 + 0.039999999105930328369140625;
    float _952 = _948 + 0.039999999105930328369140625;
    vec4 _961 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _887, cbSceneParam._m0[86u].y * _888));
    float _965 = ((isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * TEXCOORD_5.w) * _961.x;
    float _966 = dot(vec3(_788, _789, _790), vec3(_867, _868, _869));
    float _969 = _966 * 2.0;
    float _973 = (_969 * _788) - _867;
    float _974 = (_969 * _789) - _868;
    float _975 = (_969 * _790) - _869;
    float _979 = abs(dot(vec3(_867, _868, _869), vec3(_788, _789, _790)));
    float _4261 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _981 = sqrt(_791);
    float _994 = exp2((_981 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_981 * 3.0));
    float _1000 = (1.0 - _994) * ((_981 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1001 = _994 * _981;
    float _1029 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1033 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1037 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1366;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1091 = fma(_1037, cbModelParam._m0[26u].z, fma(_1033, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1029));
        float _1095 = fma(_1037, cbModelParam._m0[27u].z, fma(_1033, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1029));
        float _1099 = fma(_1037, cbModelParam._m0[28u].z, fma(_1033, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1029));
        float _1124 = _1029 + _788;
        float _1125 = _1033 + _789;
        float _1126 = _1037 + _790;
        float _1136 = fma(_1126, cbModelParam._m0[26u].z, fma(_1125, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1124)) - _1091;
        float _1137 = fma(_1126, cbModelParam._m0[27u].z, fma(_1125, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1124)) - _1095;
        float _1138 = fma(_1126, cbModelParam._m0[28u].z, fma(_1125, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1124)) - _1099;
        float _1142 = inversesqrt(dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138)));
        float _1155 = ((_1142 * _1136) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1091 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1156 = ((_1142 * _1137) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1095 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1157 = ((_1142 * _1138) / cbModelParam._m0[34u].z) + ((((((_1099 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        float _1194 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1160.x + (-0.5));
        float _1196 = _1194 * (_1160.y + (-0.5));
        float _1197 = _1194 * (_1160.z + (-0.5));
        float _1204 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1167.x + (-0.5));
        float _1206 = _1204 * (_1167.y + (-0.5));
        float _1207 = _1204 * (_1167.z + (-0.5));
        float _1214 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1174.x + (-0.5));
        float _1216 = _1214 * (_1174.y + (-0.5));
        float _1217 = _1214 * (_1174.z + (-0.5));
        float _1224 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1181.x + (-0.5));
        float _1226 = _1224 * (_1181.y + (-0.5));
        float _1227 = _1224 * (_1181.z + (-0.5));
        float _1228 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1231 = _1195 * 0.5;
        float _1232 = _1205 * 0.5;
        float _1233 = _1215 * 0.5;
        float _1234 = dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233));
        float _1239 = (_1234 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1234);
        float _1248 = (dot(vec3(_788, _789, _790), vec3(_1239 * _1231, _1239 * _1232, _1239 * _1233)) + 1.0) * 0.5;
        float _4287 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1258 = sqrt(((_1232 * _1232) + (_1231 * _1231)) + (_1233 * _1233)) / (_1228 + 9.9999997473787516355514526367188e-06);
        float _4298 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1260 = _1259 * 2.0;
        float _1264 = (1.0 - _1259) / (_1259 + 1.0);
        float _4309 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1274 = ((((1.0 - _1265) * (_1260 + 2.0)) * exp2(log2(isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_1260 + 1.0))) + _1265) * _1228;
        float _1275 = _1196 * 0.5;
        float _1276 = _1206 * 0.5;
        float _1277 = _1216 * 0.5;
        float _1278 = dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277));
        float _1283 = (_1278 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1278);
        float _1291 = (dot(vec3(_788, _789, _790), vec3(_1283 * _1275, _1283 * _1276, _1283 * _1277)) + 1.0) * 0.5;
        float _4320 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1300 = sqrt(((_1276 * _1276) + (_1275 * _1275)) + (_1277 * _1277)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _4331 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1302 = _1301 * 2.0;
        float _1306 = (1.0 - _1301) / (_1301 + 1.0);
        float _4342 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _1316 = ((((1.0 - _1307) * (_1302 + 2.0)) * exp2(log2(isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_1302 + 1.0))) + _1307) * _1229;
        float _1317 = _1197 * 0.5;
        float _1318 = _1207 * 0.5;
        float _1319 = _1217 * 0.5;
        float _1320 = dot(vec3(_1317, _1318, _1319), vec3(_1317, _1318, _1319));
        float _1325 = (_1320 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1320);
        float _1333 = (dot(vec3(_788, _789, _790), vec3(_1325 * _1317, _1325 * _1318, _1325 * _1319)) + 1.0) * 0.5;
        float _4353 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1342 = sqrt(((_1318 * _1318) + (_1317 * _1317)) + (_1319 * _1319)) / (_1230 + 9.9999997473787516355514526367188e-06);
        float _4364 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _1344 = _1343 * 2.0;
        float _1348 = (1.0 - _1343) / (_1343 + 1.0);
        float _4375 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _1358 = ((((1.0 - _1349) * (_1344 + 2.0)) * exp2(log2(isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_1344 + 1.0))) + _1349) * _1230;
        _1366 = _1197;
        _1368 = _1196;
        _1369 = _1195;
        _1370 = _1207;
        _1371 = _1206;
        _1372 = _1205;
        _1373 = _1217;
        _1374 = _1216;
        _1375 = _1215;
        _1376 = _1230;
        _1377 = _1229;
        _1378 = _1228;
        _1379 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)));
        _1380 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)));
        _1381 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)));
    }
    else
    {
        _1366 = _1367;
        _1368 = _1367;
        _1369 = _1367;
        _1370 = _1367;
        _1371 = _1367;
        _1372 = _1367;
        _1373 = _1367;
        _1374 = _1367;
        _1375 = _1367;
        _1376 = _1367;
        _1377 = _1367;
        _1378 = _1367;
        _1379 = 0.0;
        _1380 = 0.0;
        _1381 = 0.0;
    }
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1409 = fma(_1037, cbModelParam._m0[30u].z, fma(_1033, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1029));
        float _1413 = fma(_1037, cbModelParam._m0[31u].z, fma(_1033, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1029));
        float _1417 = fma(_1037, cbModelParam._m0[32u].z, fma(_1033, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1029));
        float _1440 = _1029 + _788;
        float _1441 = _1033 + _789;
        float _1442 = _1037 + _790;
        float _1452 = fma(_1442, cbModelParam._m0[30u].z, fma(_1441, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1440)) - _1409;
        float _1453 = fma(_1442, cbModelParam._m0[31u].z, fma(_1441, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1440)) - _1413;
        float _1454 = fma(_1442, cbModelParam._m0[32u].z, fma(_1441, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1440)) - _1417;
        float _1458 = inversesqrt(dot(vec3(_1452, _1453, _1454), vec3(_1452, _1453, _1454)));
        float _1471 = ((_1458 * _1452) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1409 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1472 = ((_1458 * _1453) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1413 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1473 = ((_1458 * _1454) / cbModelParam._m0[35u].z) + ((((((_1417 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1475 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1471, _1472, _1473), 0.0);
        vec4 _1482 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1471, _1472, _1473), 0.0);
        vec4 _1489 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1471, _1472, _1473), 0.0);
        vec4 _1496 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1471, _1472, _1473), 0.0);
        float _1508 = exp2((_1475.w + (-0.5)) * 20.0) * 2.0;
        float _1509 = _1508 * (_1475.x + (-0.5));
        float _1510 = _1508 * (_1475.y + (-0.5));
        float _1511 = _1508 * (_1475.z + (-0.5));
        float _1518 = exp2((_1482.w + (-0.5)) * 20.0) * 2.0;
        float _1519 = _1518 * (_1482.x + (-0.5));
        float _1520 = _1518 * (_1482.y + (-0.5));
        float _1521 = _1518 * (_1482.z + (-0.5));
        float _1528 = exp2((_1489.w + (-0.5)) * 20.0) * 2.0;
        float _1529 = _1528 * (_1489.x + (-0.5));
        float _1530 = _1528 * (_1489.y + (-0.5));
        float _1531 = _1528 * (_1489.z + (-0.5));
        float _1538 = exp2((_1496.w + (-0.5)) * 20.0) * 2.0;
        float _1539 = _1538 * (_1496.x + (-0.5));
        float _1540 = _1538 * (_1496.y + (-0.5));
        float _1541 = _1538 * (_1496.z + (-0.5));
        float _1542 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1543 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1544 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1545 = _1509 * 0.5;
        float _1546 = _1519 * 0.5;
        float _1547 = _1529 * 0.5;
        float _1548 = dot(vec3(_1545, _1546, _1547), vec3(_1545, _1546, _1547));
        float _1553 = (_1548 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1548);
        float _1561 = (dot(vec3(_788, _789, _790), vec3(_1553 * _1545, _1553 * _1546, _1553 * _1547)) + 1.0) * 0.5;
        float _4416 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1570 = sqrt(((_1546 * _1546) + (_1545 * _1545)) + (_1547 * _1547)) / (_1542 + 9.9999997473787516355514526367188e-06);
        float _4427 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _1572 = _1571 * 2.0;
        float _1576 = (1.0 - _1571) / (_1571 + 1.0);
        float _4438 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _1586 = ((((1.0 - _1577) * (_1572 + 2.0)) * exp2(log2(isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_1572 + 1.0))) + _1577) * _1542;
        float _1587 = _1510 * 0.5;
        float _1588 = _1520 * 0.5;
        float _1589 = _1530 * 0.5;
        float _1590 = dot(vec3(_1587, _1588, _1589), vec3(_1587, _1588, _1589));
        float _1595 = (_1590 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1590);
        float _1603 = (dot(vec3(_788, _789, _790), vec3(_1595 * _1587, _1595 * _1588, _1595 * _1589)) + 1.0) * 0.5;
        float _4449 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1612 = sqrt(((_1588 * _1588) + (_1587 * _1587)) + (_1589 * _1589)) / (_1543 + 9.9999997473787516355514526367188e-06);
        float _4460 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _1614 = _1613 * 2.0;
        float _1618 = (1.0 - _1613) / (_1613 + 1.0);
        float _4471 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _1628 = ((((1.0 - _1619) * (_1614 + 2.0)) * exp2(log2(isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_1614 + 1.0))) + _1619) * _1543;
        float _1629 = _1511 * 0.5;
        float _1630 = _1521 * 0.5;
        float _1631 = _1531 * 0.5;
        float _1632 = dot(vec3(_1629, _1630, _1631), vec3(_1629, _1630, _1631));
        float _1637 = (_1632 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1632);
        float _1645 = (dot(vec3(_788, _789, _790), vec3(_1637 * _1629, _1637 * _1630, _1637 * _1631)) + 1.0) * 0.5;
        float _4482 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1654 = sqrt(((_1630 * _1630) + (_1629 * _1629)) + (_1631 * _1631)) / (_1544 + 9.9999997473787516355514526367188e-06);
        float _4493 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _1656 = _1655 * 2.0;
        float _1660 = (1.0 - _1655) / (_1655 + 1.0);
        float _4504 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _1670 = ((((1.0 - _1661) * (_1656 + 2.0)) * exp2(log2(isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (_1656 + 1.0))) + _1661) * _1544;
        _1678 = _1511;
        _1679 = _1510;
        _1680 = _1509;
        _1681 = _1521;
        _1682 = _1520;
        _1683 = _1519;
        _1684 = _1531;
        _1685 = _1530;
        _1686 = _1529;
        _1687 = _1544;
        _1688 = _1543;
        _1689 = _1542;
        _1690 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)));
        _1691 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)));
        _1692 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)));
    }
    else
    {
        _1678 = _1367;
        _1679 = _1367;
        _1680 = _1367;
        _1681 = _1367;
        _1682 = _1367;
        _1683 = _1367;
        _1684 = _1367;
        _1685 = _1367;
        _1686 = _1367;
        _1687 = _1367;
        _1688 = _1367;
        _1689 = _1367;
        _1690 = 0.0;
        _1691 = 0.0;
        _1692 = 0.0;
    }
    float _1702 = (cbModelParam._m0[1u].x * (_1690 - _1379)) + _1379;
    float _1703 = (cbModelParam._m0[1u].x * (_1691 - _1380)) + _1380;
    float _1704 = (cbModelParam._m0[1u].x * (_1692 - _1381)) + _1381;
    float _1725 = fma(_1704, cbSceneParam._m0[89u].z, fma(_1703, cbSceneParam._m0[89u].y, _1702 * cbSceneParam._m0[89u].x));
    float _1728 = fma(_1704, cbSceneParam._m0[90u].z, fma(_1703, cbSceneParam._m0[90u].y, _1702 * cbSceneParam._m0[90u].x));
    float _1731 = fma(_1704, cbSceneParam._m0[91u].z, fma(_1703, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1702));
    float _1746 = _973 * 0.5;
    float _1747 = _974 * 0.5;
    float _1748 = _975 * 0.5;
    float _1749 = dot(vec4(_1746, _1747, _1748, 1.0), vec4(_1680, _1683, _1686, _1689));
    float _1752 = dot(vec4(_1746, _1747, _1748, 1.0), vec4(_1679, _1682, _1685, _1688));
    float _1755 = dot(vec4(_1746, _1747, _1748, 1.0), vec4(_1678, _1681, _1684, _1687));
    float _1789;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1762 = dot(vec4(_1746, _1747, _1748, 1.0), vec4(_1366, _1370, _1373, _1376));
        float _1766 = dot(vec4(_1746, _1747, _1748, 1.0), vec4(_1368, _1371, _1374, _1377));
        float _1770 = dot(vec4(_1746, _1747, _1748, 1.0), vec4(_1369, _1372, _1375, _1378));
        float _1777 = dot(vec4(cbModelParam._m0[39u]), vec4(_1746, _1747, _1748, 1.0));
        _1789 = dot(vec3(isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0)), isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0)), isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1777) ? 0.0 : (isnan(0.0) ? _1777 : max(0.0, _1777))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1789 = 1.0;
    }
    float _1800;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1791 = dot(vec4(cbModelParam._m0[40u]), vec4(_1746, _1747, _1748, 1.0));
        _1800 = dot(vec3(isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)), isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0)), isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1791) ? 0.0 : (isnan(0.0) ? _1791 : max(0.0, _1791))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1800 = 1.0;
    }
    float _1804 = (_1800 * cbModelParam._m0[1u].x) + (_1789 * (1.0 - cbModelParam._m0[1u].x));
    float _1814 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _791);
    float _1815 = isnan(_1814) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1814 : min(cbModelParam._m0[25u].z, _1814));
    float _1896;
    float _1898;
    float _1900;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1863 = fma(_1037, cbModelParam._m0[13u].z, fma(_1033, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1029)) + cbModelParam._m0[13u].w;
        float _1867 = fma(_1037, cbModelParam._m0[14u].z, fma(_1033, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1029)) + cbModelParam._m0[14u].w;
        float _1871 = fma(_1037, cbModelParam._m0[15u].z, fma(_1033, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1029)) + cbModelParam._m0[15u].w;
        float _1874 = fma(_975, cbModelParam._m0[13u].z, fma(_974, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _973));
        float _1877 = fma(_975, cbModelParam._m0[14u].z, fma(_974, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _973));
        float _1880 = fma(_975, cbModelParam._m0[15u].z, fma(_974, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _973));
        float _1908;
        if (_1874 > 0.0)
        {
            _1908 = abs((1.0 - _1863) / _1874);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1874 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1863 + 1.0) / _1874);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1908 = frontier_phi_17_15_ladder;
        }
        float _2080;
        if (_1877 > 0.0)
        {
            _2080 = abs((1.0 - _1867) / _1877);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1877 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1867 + 1.0) / _1877);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2080 = frontier_phi_26_22_ladder;
        }
        float _2375;
        if (_1880 > 0.0)
        {
            _2375 = abs((1.0 - _1871) / _1880);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1880 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1871 + 1.0) / _1880);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2375 = frontier_phi_38_33_ladder;
        }
        float _2377 = isnan(_2080) ? _1908 : (isnan(_1908) ? _2080 : min(_1908, _2080));
        float _2378 = isnan(_2375) ? _2377 : (isnan(_2377) ? _2375 : min(_2377, _2375));
        float _2382 = (_2378 * _1874) + _1863;
        float _2383 = (_2378 * _1877) + _1867;
        float _2384 = (_2378 * _1880) + _1871;
        float _2385 = _2378 * 9.9999997473787516355514526367188e-05;
        float _2387 = (-1.0) - _2385;
        float _2389 = _2385 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2384 > _2389) || ((_2384 < _2387) || ((_2383 > _2389) || ((_2383 < _2387) || ((_2382 < _2387) || (_2382 > _2389))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2529 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2384, cbModelParam._m0[9u].z, fma(_2383, cbModelParam._m0[9u].y, _2382 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2384, cbModelParam._m0[10u].z, fma(_2383, cbModelParam._m0[10u].y, _2382 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2384, cbModelParam._m0[11u].z, fma(_2383, cbModelParam._m0[11u].y, _2382 * cbModelParam._m0[11u].x))), _1815);
            frontier_phi_16_38_ladder = _2529.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2529.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2529.x * cbModelParam._m0[1u].y;
        }
        _1896 = frontier_phi_16_38_ladder_2;
        _1898 = frontier_phi_16_38_ladder_1;
        _1900 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1884 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_973, _974, _975), _1815);
        _1896 = _1884.x * cbModelParam._m0[1u].y;
        _1898 = _1884.y * cbModelParam._m0[1u].y;
        _1900 = _1884.z * cbModelParam._m0[1u].y;
    }
    float _1904 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _791);
    float _1905 = isnan(_1904) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1904 : min(cbModelParam._m0[25u].w, _1904));
    float _1995;
    float _1997;
    float _1999;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1959 = fma(_1037, cbModelParam._m0[21u].z, fma(_1033, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1029)) + cbModelParam._m0[21u].w;
        float _1963 = fma(_1037, cbModelParam._m0[22u].z, fma(_1033, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1029)) + cbModelParam._m0[22u].w;
        float _1967 = fma(_1037, cbModelParam._m0[23u].z, fma(_1033, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1029)) + cbModelParam._m0[23u].w;
        float _1970 = fma(_975, cbModelParam._m0[21u].z, fma(_974, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _973));
        float _1973 = fma(_975, cbModelParam._m0[22u].z, fma(_974, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _973));
        float _1976 = fma(_975, cbModelParam._m0[23u].z, fma(_974, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _973));
        float _2085;
        if (_1970 > 0.0)
        {
            _2085 = abs((1.0 - _1959) / _1970);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1970 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1959 + 1.0) / _1970);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2085 = frontier_phi_28_24_ladder;
        }
        float _2402;
        if (_1973 > 0.0)
        {
            _2402 = abs((1.0 - _1963) / _1973);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1973 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1963 + 1.0) / _1973);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2402 = frontier_phi_40_35_ladder;
        }
        float _2740;
        if (_1976 > 0.0)
        {
            _2740 = abs((1.0 - _1967) / _1976);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1976 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1967 + 1.0) / _1976);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2740 = frontier_phi_50_47_ladder;
        }
        float _2742 = isnan(_2402) ? _2085 : (isnan(_2085) ? _2402 : min(_2085, _2402));
        float _2743 = isnan(_2740) ? _2742 : (isnan(_2742) ? _2740 : min(_2742, _2740));
        float _2747 = (_2743 * _1970) + _1959;
        float _2748 = (_2743 * _1973) + _1963;
        float _2749 = (_2743 * _1976) + _1967;
        float _2750 = _2743 * 9.9999997473787516355514526367188e-05;
        float _2751 = (-1.0) - _2750;
        float _2753 = _2750 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2749 > _2753) || ((_2749 < _2751) || ((_2748 > _2753) || ((_2748 < _2751) || ((_2747 < _2751) || (_2747 > _2753))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2871 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2749, cbModelParam._m0[17u].z, fma(_2748, cbModelParam._m0[17u].y, _2747 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2749, cbModelParam._m0[18u].z, fma(_2748, cbModelParam._m0[18u].y, _2747 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2749, cbModelParam._m0[19u].z, fma(_2748, cbModelParam._m0[19u].y, _2747 * cbModelParam._m0[19u].x))), _1905);
            frontier_phi_25_50_ladder = _2871.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2871.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2871.x * cbModelParam._m0[1u].z;
        }
        _1995 = frontier_phi_25_50_ladder_2;
        _1997 = frontier_phi_25_50_ladder_1;
        _1999 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1979 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_973, _974, _975), _1905);
        _1995 = _1979.x * cbModelParam._m0[1u].z;
        _1997 = _1979.y * cbModelParam._m0[1u].z;
        _1999 = _1979.z * cbModelParam._m0[1u].z;
    }
    float _2012 = (((_1000 * _949) + _1001) * _965) * ((cbModelParam._m0[1u].w * (_1995 - _1896)) + _1896);
    float _2014 = (((_1000 * _951) + _1001) * _965) * ((cbModelParam._m0[1u].w * (_1997 - _1898)) + _1898);
    float _2016 = (((_1000 * _952) + _1001) * _965) * ((cbModelParam._m0[1u].w * (_1999 - _1900)) + _1900);
    float _2019 = fma(_2016, cbSceneParam._m0[89u].z, fma(_2014, cbSceneParam._m0[89u].y, _2012 * cbSceneParam._m0[89u].x));
    float _2022 = fma(_2016, cbSceneParam._m0[90u].z, fma(_2014, cbSceneParam._m0[90u].y, _2012 * cbSceneParam._m0[90u].x));
    float _2025 = fma(_2016, cbSceneParam._m0[91u].z, fma(_2014, cbSceneParam._m0[91u].y, _2012 * cbSceneParam._m0[91u].x));
    float _2059 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2063 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2067 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2071 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2072 = _2059 / _2071;
    float _2073 = _2063 / _2071;
    float _2074 = _2067 / _2071;
    float _2221;
    float _2222;
    float _2223;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2101 = ((uint(_2074 > cbSceneParam._m0[59u].y) + uint(_2074 > cbSceneParam._m0[59u].x)) + uint(_2074 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2102 = _2101 + 43u;
        uint _2110 = _2101 + 44u;
        uint _2118 = _2101 + 45u;
        uint _2126 = _2101 + 46u;
        float _2137 = fma(_2071, cbSceneParam._m0[_2102].w, fma(_2067, cbSceneParam._m0[_2102].z, fma(_2063, cbSceneParam._m0[_2102].y, _2059 * cbSceneParam._m0[_2102].x)));
        float _2141 = fma(_2071, cbSceneParam._m0[_2110].w, fma(_2067, cbSceneParam._m0[_2110].z, fma(_2063, cbSceneParam._m0[_2110].y, _2059 * cbSceneParam._m0[_2110].x)));
        float _2149 = fma(_2071, cbSceneParam._m0[_2126].w, fma(_2067, cbSceneParam._m0[_2126].z, fma(_2063, cbSceneParam._m0[_2126].y, _2059 * cbSceneParam._m0[_2126].x)));
        float _2154 = cbSceneParam._m0[33u].z * _2149;
        float _2156 = cbSceneParam._m0[33u].w * _2149;
        float _2159 = fma(_2071, cbSceneParam._m0[_2118].w, fma(_2067, cbSceneParam._m0[_2118].z, fma(_2063, cbSceneParam._m0[_2118].y, _2059 * cbSceneParam._m0[_2118].x))) / _2149;
        float _2207 = (cbSceneParam._m0[33u].x - sqrt(((_2073 * _2073) + (_2072 * _2072)) + (_2074 * _2074))) * cbSceneParam._m0[33u].y;
        float _4630 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        float _2214 = (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2154 + _2137) / _2149, (_2156 + _2141) / _2149), _2159), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2156 + _2137) / _2149, (_2141 - _2154) / _2149), _2159), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2137 - _2154) / _2149, (_2141 - _2156) / _2149), _2159), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2137 - _2156) / _2149, (_2154 + _2141) / _2149), _2159), 0.0)).x), vec4(0.25)));
        _2221 = 1.0 - (_2214 * cbSceneParam._m0[34u].x);
        _2222 = 1.0 - (_2214 * cbSceneParam._m0[34u].y);
        _2223 = 1.0 - (_2214 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2221 = 1.0;
        _2222 = 1.0;
        _2223 = 1.0;
    }
    float _2287;
    float _2289;
    float _2291;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2275 = fma(_2071, cbSceneParam._m0[63u].w, fma(_2067, cbSceneParam._m0[63u].z, fma(_2063, cbSceneParam._m0[63u].y, _2059 * cbSceneParam._m0[63u].x)));
        float _2276 = fma(_2071, cbSceneParam._m0[60u].w, fma(_2067, cbSceneParam._m0[60u].z, fma(_2063, cbSceneParam._m0[60u].y, _2059 * cbSceneParam._m0[60u].x))) / _2275;
        float _2277 = fma(_2071, cbSceneParam._m0[61u].w, fma(_2067, cbSceneParam._m0[61u].z, fma(_2063, cbSceneParam._m0[61u].y, _2059 * cbSceneParam._m0[61u].x))) / _2275;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2276 >= cbSceneParam._m0[64u].x) && (_2277 >= cbSceneParam._m0[64u].y)) && (_2276 <= cbSceneParam._m0[64u].z)) && (_2277 <= cbSceneParam._m0[64u].w))
        {
            float _2415 = fma(_2071, cbSceneParam._m0[62u].w, fma(_2067, cbSceneParam._m0[62u].z, fma(_2063, cbSceneParam._m0[62u].y, _2059 * cbSceneParam._m0[62u].x))) / _2275;
            float _2419 = isnan(cbSceneParam._m0[41u].w) ? _2415 : (isnan(_2415) ? cbSceneParam._m0[41u].w : max(_2415, cbSceneParam._m0[41u].w));
            float _2462 = (cbSceneParam._m0[33u].x - sqrt(((_2073 * _2073) + (_2072 * _2072)) + (_2074 * _2074))) * cbSceneParam._m0[33u].y;
            float _4646 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
            float _2469 = (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2276, cbSceneParam._m0[33u].w + _2277), _2419), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2276, _2277 - cbSceneParam._m0[33u].z), _2419), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2276 - cbSceneParam._m0[33u].z, _2277 - cbSceneParam._m0[33u].w), _2419), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2276 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2277), _2419), 0.0)).x), vec4(0.25)));
            float _2473 = 1.0 - (_2469 * cbSceneParam._m0[34u].x);
            float _2474 = 1.0 - (_2469 * cbSceneParam._m0[34u].y);
            float _2475 = 1.0 - (_2469 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2475) ? _2223 : (isnan(_2223) ? _2475 : min(_2223, _2475));
            frontier_phi_37_36_ladder_1 = isnan(_2474) ? _2222 : (isnan(_2222) ? _2474 : min(_2222, _2474));
            frontier_phi_37_36_ladder_2 = isnan(_2473) ? _2221 : (isnan(_2221) ? _2473 : min(_2221, _2473));
        }
        else
        {
            frontier_phi_37_36_ladder = _2223;
            frontier_phi_37_36_ladder_1 = _2222;
            frontier_phi_37_36_ladder_2 = _2221;
        }
        _2287 = frontier_phi_37_36_ladder_2;
        _2289 = frontier_phi_37_36_ladder_1;
        _2291 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2287 = _2221;
        _2289 = _2222;
        _2291 = _2223;
    }
    uvec4 _2296 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2298 = _2296.x * 14u;
    uint _2299 = _2298 + 13u;
    float _2306 = _965 + (-1.0);
    float _2311 = (cbLight._m0[_2299].x * _2306) + 1.0;
    float _2312 = (cbLight._m0[_2299].y * _2306) + 1.0;
    float _2313 = (cbLight._m0[_2299].z * _2306) + 1.0;
    float _2314 = (cbLight._m0[_2299].w * _2306) + 1.0;
    uint _2315 = _2298 + 5u;
    float _2321 = isnan(1.0) ? _2312 : (isnan(_2312) ? 1.0 : min(_2312, 1.0));
    uint _2325 = _2298 + 4u;
    float _2334 = isnan(1.0) ? _2311 : (isnan(_2311) ? 1.0 : min(_2311, 1.0));
    uint _2338 = _2298 | 1u;
    float _2349 = dot(vec3(cbLight._m0[_2298].xyz), vec3(_788, _789, _790));
    float _2352 = dot(vec3(cbLight._m0[_2338].xyz), vec3(_788, _789, _790));
    float _4682 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
    float _4693 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2357 = (isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0))) * 0.3183098733425140380859375;
    float _2359 = (isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0))) * 0.3183098733425140380859375;
    float _2366 = ((cbLight._m0[_2315].x * _2321) * _2359) + (((cbLight._m0[_2325].x * _2287) * _2334) * _2357);
    float _2367 = ((_2321 * cbLight._m0[_2315].y) * _2359) + (((cbLight._m0[_2325].y * _2289) * _2334) * _2357);
    float _2368 = ((_2321 * cbLight._m0[_2315].z) * _2359) + (((cbLight._m0[_2325].z * _2291) * _2334) * _2357);
    uvec4 _2372 = floatBitsToUint(cbLight._m0[_2298 + 12u]);
    bool _2374 = _2372.x == 0u;
    float _2476;
    float _2478;
    float _2480;
    if (_2374)
    {
        _2476 = _2366;
        _2478 = _2367;
        _2480 = _2368;
    }
    else
    {
        uint _2484 = _2298 + 6u;
        float _2500 = (dot(vec3(cbLight._m0[_2298 + 2u].xyz), vec3(_788, _789, _790)) * 0.5) + 0.5;
        float _2501 = _2500 * _2500;
        float _4704 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2502 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
        float _2503 = isnan(1.0) ? _2313 : (isnan(_2313) ? 1.0 : min(_2313, 1.0));
        _2476 = (((cbLight._m0[_2484].x * 0.3183098733425140380859375) * _2502) * _2503) + _2366;
        _2478 = (((cbLight._m0[_2484].y * 0.3183098733425140380859375) * _2502) * _2503) + _2367;
        _2480 = (((cbLight._m0[_2484].z * 0.3183098733425140380859375) * _2502) * _2503) + _2368;
    }
    bool _2483 = _2372.y == 0u;
    float _2538;
    float _2540;
    float _2542;
    if (_2483)
    {
        _2538 = _2476;
        _2540 = _2478;
        _2542 = _2480;
    }
    else
    {
        uint _2711 = _2298 + 7u;
        float _2727 = (dot(vec3(cbLight._m0[_2298 + 3u].xyz), vec3(_788, _789, _790)) * 0.5) + 0.5;
        float _2728 = _2727 * _2727;
        float _4720 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
        float _2729 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
        float _2730 = isnan(1.0) ? _2314 : (isnan(_2314) ? 1.0 : min(_2314, 1.0));
        _2538 = (((cbLight._m0[_2711].x * 0.3183098733425140380859375) * _2729) * _2730) + _2476;
        _2540 = (((cbLight._m0[_2711].y * 0.3183098733425140380859375) * _2729) * _2730) + _2478;
        _2542 = (((cbLight._m0[_2711].z * 0.3183098733425140380859375) * _2729) * _2730) + _2480;
    }
    uint _2545 = _2298 + 8u;
    float _2558 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2298].w)) * _791) * 0.949999988079071044921875);
    float _2559 = _2558 * _2558;
    float _2560 = cbLight._m0[_2298].x + _867;
    float _2561 = cbLight._m0[_2298].y + _868;
    float _2562 = cbLight._m0[_2298].z + _869;
    float _2566 = inversesqrt(dot(vec3(_2560, _2561, _2562), vec3(_2560, _2561, _2562)));
    float _2567 = _2566 * _2560;
    float _2568 = _2566 * _2561;
    float _2569 = _2566 * _2562;
    float _2570 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2298].xyz));
    float _4736 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
    float _2573 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
    float _4747 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _2574 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
    float _2575 = dot(vec3(_788, _789, _790), vec3(_2567, _2568, _2569));
    float _4758 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
    float _2578 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
    float _2579 = dot(vec3(cbLight._m0[_2298].xyz), vec3(_2567, _2568, _2569));
    float _4769 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
    float _2583 = _2559 * _2559;
    float _2587 = ((_2578 * _2578) * (_2583 + (-1.0))) + 1.0;
    float _2595 = exp2(log2(1.0 - (isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0)))) * 5.0);
    float _2596 = 0.959999978542327880859375 - _946;
    float _2598 = 0.959999978542327880859375 - _947;
    float _2599 = 0.959999978542327880859375 - _948;
    float _2606 = 1.0 - _2559;
    float _2617 = (0.5 / (((_2574 * ((_2573 * _2606) + _2559)) + 9.9999999392252902907785028219223e-09) + (((_2574 * _2606) + _2559) * _2573))) * _2573;
    float _4780 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
    float _2619 = (isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0))) * (_2583 / ((_2587 * _2587) * 3.141590118408203125));
    uint _2633 = _2298 + 9u;
    float _2644 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2338].w)) * _791) * 0.949999988079071044921875);
    float _2645 = _2644 * _2644;
    float _2646 = cbLight._m0[_2338].x + _867;
    float _2647 = cbLight._m0[_2338].y + _868;
    float _2648 = cbLight._m0[_2338].z + _869;
    float _2652 = inversesqrt(dot(vec3(_2646, _2647, _2648), vec3(_2646, _2647, _2648)));
    float _2653 = _2652 * _2646;
    float _2654 = _2652 * _2647;
    float _2655 = _2652 * _2648;
    float _2656 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2338].xyz));
    float _4791 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
    float _2659 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
    float _2660 = dot(vec3(_788, _789, _790), vec3(_2653, _2654, _2655));
    float _4802 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
    float _2663 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
    float _2664 = dot(vec3(cbLight._m0[_2338].xyz), vec3(_2653, _2654, _2655));
    float _4813 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
    float _2668 = _2645 * _2645;
    float _2672 = ((_2663 * _2663) * (_2668 + (-1.0))) + 1.0;
    float _2679 = exp2(log2(1.0 - (isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0)))) * 5.0);
    float _2686 = 1.0 - _2645;
    float _2696 = (0.5 / (((_2574 * ((_2659 * _2686) + _2645)) + 9.9999999392252902907785028219223e-09) + (((_2574 * _2686) + _2645) * _2659))) * _2659;
    float _4824 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
    float _2698 = (isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0))) * (_2668 / ((_2672 * _2672) * 3.141590118408203125));
    float _2708 = (((((_2679 * _2596) + _949) * cbLight._m0[_2633].x) * _2698) * _2321) + ((((cbLight._m0[_2545].x * _2287) * ((_2595 * _2596) + _949)) * _2619) * _2334);
    float _2709 = (((((_2679 * _2598) + _951) * cbLight._m0[_2633].y) * _2698) * _2321) + ((((cbLight._m0[_2545].y * _2289) * ((_2595 * _2598) + _951)) * _2619) * _2334);
    float _2710 = (((((_2679 * _2599) + _952) * cbLight._m0[_2633].z) * _2698) * _2321) + ((((cbLight._m0[_2545].z * _2291) * ((_2595 * _2599) + _952)) * _2619) * _2334);
    float _2766;
    float _2768;
    float _2770;
    if (_2374)
    {
        _2766 = _2708;
        _2768 = _2709;
        _2770 = _2710;
    }
    else
    {
        uint _2772 = _2298 + 2u;
        uint _2776 = _2298 + 10u;
        float _2790 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2772].w)) * _791) * 0.949999988079071044921875);
        float _2791 = _2790 * _2790;
        float _2792 = cbLight._m0[_2772].x + _867;
        float _2793 = cbLight._m0[_2772].y + _868;
        float _2794 = cbLight._m0[_2772].z + _869;
        float _2798 = inversesqrt(dot(vec3(_2792, _2793, _2794), vec3(_2792, _2793, _2794)));
        float _2799 = _2798 * _2792;
        float _2800 = _2798 * _2793;
        float _2801 = _2798 * _2794;
        float _2802 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2772].xyz));
        float _4835 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
        float _2805 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
        float _2806 = dot(vec3(_788, _789, _790), vec3(_2799, _2800, _2801));
        float _4846 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
        float _2809 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
        float _2810 = dot(vec3(cbLight._m0[_2772].xyz), vec3(_2799, _2800, _2801));
        float _4857 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
        float _2814 = _2791 * _2791;
        float _2818 = ((_2809 * _2809) * (_2814 + (-1.0))) + 1.0;
        float _2825 = exp2(log2(1.0 - (isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0)))) * 5.0);
        float _2832 = 1.0 - _2791;
        float _2842 = (0.5 / (((_2574 * ((_2805 * _2832) + _2791)) + 9.9999999392252902907785028219223e-09) + (((_2574 * _2832) + _2791) * _2805))) * _2805;
        float _4868 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
        float _2844 = (isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0))) * (_2814 / ((_2818 * _2818) * 3.141590118408203125));
        float _2845 = isnan(1.0) ? _2313 : (isnan(_2313) ? 1.0 : min(_2313, 1.0));
        _2766 = (((((_2825 * _2596) + _949) * cbLight._m0[_2776].x) * _2844) * _2845) + _2708;
        _2768 = (((((_2825 * _2598) + _951) * cbLight._m0[_2776].y) * _2844) * _2845) + _2709;
        _2770 = (((((_2825 * _2599) + _952) * cbLight._m0[_2776].z) * _2844) * _2845) + _2710;
    }
    float _2876;
    float _2878;
    float _2880;
    if (_2483)
    {
        _2876 = _2766;
        _2878 = _2768;
        _2880 = _2770;
    }
    else
    {
        uint _2887 = _2298 + 3u;
        uint _2891 = _2298 + 11u;
        float _2905 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2887].w)) * _791) * 0.949999988079071044921875);
        float _2906 = _2905 * _2905;
        float _2907 = cbLight._m0[_2887].x + _867;
        float _2908 = cbLight._m0[_2887].y + _868;
        float _2909 = cbLight._m0[_2887].z + _869;
        float _2913 = inversesqrt(dot(vec3(_2907, _2908, _2909), vec3(_2907, _2908, _2909)));
        float _2914 = _2913 * _2907;
        float _2915 = _2913 * _2908;
        float _2916 = _2913 * _2909;
        float _2917 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2887].xyz));
        float _4884 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
        float _2920 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
        float _2921 = dot(vec3(_788, _789, _790), vec3(_2914, _2915, _2916));
        float _4895 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
        float _2924 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
        float _2925 = dot(vec3(cbLight._m0[_2887].xyz), vec3(_2914, _2915, _2916));
        float _4906 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
        float _2929 = _2906 * _2906;
        float _2933 = ((_2924 * _2924) * (_2929 + (-1.0))) + 1.0;
        float _2940 = exp2(log2(1.0 - (isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0)))) * 5.0);
        float _2947 = 1.0 - _2906;
        float _2957 = (0.5 / (((_2574 * ((_2920 * _2947) + _2906)) + 9.9999999392252902907785028219223e-09) + (((_2574 * _2947) + _2906) * _2920))) * _2920;
        float _4917 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
        float _2959 = (isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0))) * (_2929 / ((_2933 * _2933) * 3.141590118408203125));
        float _2960 = isnan(1.0) ? _2314 : (isnan(_2314) ? 1.0 : min(_2314, 1.0));
        _2876 = (((((_2940 * _2596) + _949) * cbLight._m0[_2891].x) * _2959) * _2960) + _2766;
        _2878 = (((((_2940 * _2598) + _951) * cbLight._m0[_2891].y) * _2959) * _2960) + _2768;
        _2880 = (((((_2940 * _2599) + _952) * cbLight._m0[_2891].z) * _2959) * _2960) + _2770;
    }
    float _3026;
    float _3028;
    float _3030;
    float _3032;
    float _3034;
    float _3036;
    if (_2296.y == 0u)
    {
        uvec4 _2981 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2982 = _2981.x;
        uint _2993 = uint((float(_2981.y) * floor(float(uint(cbSceneParam._m0[85u].y * _888) / _2982))) + floor(float(uint(cbSceneParam._m0[85u].x * _887) / _2982)));
        float _3003 = (log2(_2074 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3004 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
        uint _3007 = uint(isnan(14.0) ? _3004 : (isnan(_3004) ? 14.0 : min(_3004, 14.0)));
        uvec4 _3012 = texelFetch(g_lightClusterGridBuffer, int(((_3007 << 2u) + (_2993 << 6u)) >> 2u));
        uint _3013 = _3012.x;
        uint _3014 = _2981.z;
        float _3093;
        float _3095;
        float _3097;
        float _3099;
        float _3101;
        float _3103;
        if (((((1u << ((_3014 >> 4u) & 15u)) + 4294967295u) & _3013) == 0u) || ((_3014 & 240u) == 0u))
        {
            _3093 = 0.0;
            _3095 = 0.0;
            _3097 = 0.0;
            _3099 = 0.0;
            _3101 = 0.0;
            _3103 = 0.0;
        }
        else
        {
            float _3094;
            float _3096;
            float _3098;
            float _3100;
            float _3102;
            float _3104;
            float _3245 = 0.0;
            float _3246 = 0.0;
            float _3247 = 0.0;
            float _3248 = 0.0;
            float _3249 = 0.0;
            float _3250 = 0.0;
            uint _3251 = 0u;
            uint _3260;
            bool _3261;
            for (;;)
            {
                _3260 = texelFetch(g_lightClassification, int((((_3007 << 5u) + (_2993 << 9u)) + (_3251 << 2u)) >> 2u)).x;
                _3261 = _3260 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3261)
                {
                    frontier_phi_71_pred = _3250;
                    frontier_phi_71_pred_1 = _3249;
                    frontier_phi_71_pred_2 = _3248;
                    frontier_phi_71_pred_3 = _3247;
                    frontier_phi_71_pred_4 = _3246;
                    frontier_phi_71_pred_5 = _3245;
                }
                else
                {
                    float _3390;
                    float _3391;
                    float _3392;
                    float _3393;
                    float _3394;
                    float _3395;
                    uint _3396;
                    _3390 = _3245;
                    _3391 = _3246;
                    _3392 = _3247;
                    _3393 = _3248;
                    _3394 = _3249;
                    _3395 = _3250;
                    _3396 = _3260;
                    float _3317;
                    float _3318;
                    float _3319;
                    float _3320;
                    float _3321;
                    float _3322;
                    for (;;)
                    {
                        uint _3400 = uint(findLSB(_3396)) + (_3251 << 5u);
                        uint _3397 = (_3396 + 4294967295u) & _3396;
                        uint _3402 = _3400 * 48u;
                        vec4 _3416 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3402)).x, texelFetch(g_PointLightRenderingBuffer, int(_3402 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3402 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3402 + 3u)).x));
                        uint _3422 = (_3400 * 48u) + 4u;
                        vec4 _3435 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3422)).x, texelFetch(g_PointLightRenderingBuffer, int(_3422 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3422 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3422 + 3u)).x));
                        uint _3441 = (_3400 * 48u) + 8u;
                        vec3 _3452 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3441)).x, texelFetch(g_PointLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3441 + 2u)).x));
                        float _3456 = _3416.x - _2072;
                        float _3457 = _3416.y - _2073;
                        float _3458 = _3416.z - _2074;
                        float _3459 = dot(vec3(_3456, _3457, _3458), vec3(_3456, _3457, _3458));
                        float _3462 = inversesqrt(_3459);
                        float _3463 = _3462 * _3456;
                        float _3464 = _3462 * _3457;
                        float _3465 = _3462 * _3458;
                        float _3466 = dot(vec3(_906, _909, _912), vec3(_3463, _3464, _3465));
                        float _3471 = 1.0 - (_3459 * _3416.w);
                        float _4943 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                        float _3472 = isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0));
                        float _3473 = sqrt(_3459) * _3435.w;
                        float _3476 = 1.39999997615814208984375 / (_3473 + 1.39999997615814208984375);
                        float _3477 = _3476 * _3476;
                        float _3480 = ((1.0 - _3477) * _3466) + _3477;
                        float _3483 = _3473 * _3473;
                        float _3487 = ((isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0))) * _3472) / ((_3483 * 0.699999988079071044921875) + 1.0);
                        float _3491 = (-0.0) - _2072;
                        float _3492 = (-0.0) - _2073;
                        float _3493 = (-0.0) - _2074;
                        float _3497 = inversesqrt(dot(vec3(_3491, _3492, _3493), vec3(_3491, _3492, _3493)));
                        float _3498 = _3497 * _3491;
                        float _3499 = _3497 * _3492;
                        float _3500 = _3497 * _3493;
                        float _3507 = exp2(log2(1.0 / ((_3483 * 3.5) + 5.0)) * 0.25);
                        float _3508 = 1.0 - _981;
                        float _3515 = sqrt(1.0 - ((1.0 - (_3508 * _3508)) * (1.0 - (_3507 * _3507))));
                        float _3516 = _3515 * _3515;
                        float _3517 = _3516 * _3516;
                        float _3518 = _3498 + _3463;
                        float _3519 = _3499 + _3464;
                        float _3520 = _3500 + _3465;
                        float _3524 = inversesqrt(dot(vec3(_3518, _3519, _3520), vec3(_3518, _3519, _3520)));
                        float _3528 = dot(vec3(_906, _909, _912), vec3(_3498, _3499, _3500));
                        float _4959 = isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0));
                        float _3531 = isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0));
                        float _3532 = dot(vec3(_906, _909, _912), vec3(_3524 * _3518, _3524 * _3519, _3524 * _3520));
                        float _4970 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                        float _3535 = isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0));
                        float _3539 = ((_3535 * _3535) * (_3517 + (-1.0))) + 1.0;
                        float _3540 = _3476 * _3516;
                        float _3541 = _3540 * _3540;
                        float _3544 = ((1.0 - _3541) * _3466) + _3541;
                        float _4981 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                        float _3545 = isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0));
                        float _3546 = 1.0 - _3516;
                        float _3556 = (0.5 / (((_3545 * ((_3531 * _3546) + _3516)) + 9.9999999392252902907785028219223e-09) + (((_3545 * _3546) + _3516) * _3531))) * _3545;
                        float _4992 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                        float _3567 = (((_3517 * 3.1415927410125732421875) * (isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0)))) / ((_3539 * _3539) * ((_3483 * 2.1991131305694580078125) + 3.141590118408203125))) * _3472;
                        _3320 = (_3487 * _3435.x) + _3393;
                        _3321 = (_3487 * _3435.y) + _3394;
                        _3322 = (_3487 * _3435.z) + _3395;
                        _3317 = (_3567 * _3452.x) + _3390;
                        _3318 = (_3567 * _3452.y) + _3391;
                        _3319 = (_3567 * _3452.z) + _3392;
                        if (_3397 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3390 = _3317;
                            _3391 = _3318;
                            _3392 = _3319;
                            _3393 = _3320;
                            _3394 = _3321;
                            _3395 = _3322;
                            _3396 = _3397;
                        }
                    }
                    frontier_phi_71_pred = _3322;
                    frontier_phi_71_pred_1 = _3321;
                    frontier_phi_71_pred_2 = _3320;
                    frontier_phi_71_pred_3 = _3319;
                    frontier_phi_71_pred_4 = _3318;
                    frontier_phi_71_pred_5 = _3317;
                }
                _3104 = frontier_phi_71_pred;
                _3102 = frontier_phi_71_pred_1;
                _3100 = frontier_phi_71_pred_2;
                _3098 = frontier_phi_71_pred_3;
                _3096 = frontier_phi_71_pred_4;
                _3094 = frontier_phi_71_pred_5;
                uint _3252 = _3251 + 1u;
                if (_3252 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3245 = _3094;
                    _3246 = _3096;
                    _3247 = _3098;
                    _3248 = _3100;
                    _3249 = _3102;
                    _3250 = _3104;
                    _3251 = _3252;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3093 = _3094;
            _3095 = _3096;
            _3097 = _3098;
            _3099 = _3100;
            _3101 = _3102;
            _3103 = _3104;
        }
        uvec4 _3107 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3108 = _3107.z;
        uint _3110 = (_3108 >> 8u) & 15u;
        float _3213;
        float _3215;
        float _3217;
        float _3219;
        float _3221;
        float _3223;
        if (((4294967295u << _3110) & _3013) == 0u)
        {
            _3213 = _3093;
            _3215 = _3095;
            _3217 = _3097;
            _3219 = _3099;
            _3221 = _3101;
            _3223 = _3103;
        }
        else
        {
            float _3238 = inversesqrt(dot(vec3(_2072, _2073, _2074), vec3(_2072, _2073, _2074)));
            float _3239 = _3238 * _2072;
            float _3240 = _3238 * _2073;
            float _3241 = _3238 * _2074;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3110 < ((_3108 >> 12u) & 15u))
            {
                float _3214;
                float _3216;
                float _3218;
                float _3220;
                float _3222;
                float _3224;
                float _3373 = _3093;
                float _3374 = _3095;
                float _3375 = _3097;
                float _3376 = _3099;
                float _3377 = _3101;
                float _3378 = _3103;
                uint _3379 = _3110;
                uint _3388;
                bool _3389;
                for (;;)
                {
                    _3388 = texelFetch(g_lightClassification, int((((_3007 << 5u) + (_2993 << 9u)) + (_3379 << 2u)) >> 2u)).x;
                    _3389 = _3388 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3389)
                    {
                        frontier_phi_82_pred = _3378;
                        frontier_phi_82_pred_1 = _3377;
                        frontier_phi_82_pred_2 = _3376;
                        frontier_phi_82_pred_3 = _3375;
                        frontier_phi_82_pred_4 = _3374;
                        frontier_phi_82_pred_5 = _3373;
                    }
                    else
                    {
                        float _3581;
                        float _3582;
                        float _3583;
                        float _3584;
                        float _3585;
                        float _3586;
                        float _3875;
                        float _3876;
                        float _3877;
                        float _3878;
                        float _3879;
                        float _3880;
                        float _3594 = _3373;
                        float _3595 = _3374;
                        float _3596 = _3375;
                        float _3597 = _3376;
                        float _3598 = _3377;
                        float _3599 = _3378;
                        uint _3600 = _3388;
                        uint _3601;
                        vec4 _3626;
                        float _3627;
                        vec4 _3642;
                        vec3 _3654;
                        vec4 _3669;
                        vec4 _3685;
                        float _3731;
                        bool _3732;
                        for (;;)
                        {
                            uint _3611 = ((_3379 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3600));
                            _3601 = (_3600 + 4294967295u) & _3600;
                            uint _3613 = _3611 * 40u;
                            _3626 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3613)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 3u)).x));
                            _3627 = _3626.w;
                            uint _3629 = (_3611 * 40u) + 4u;
                            _3642 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3629)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 3u)).x));
                            uint _3644 = (_3611 * 40u) + 8u;
                            _3654 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3644)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 2u)).x));
                            uint _3656 = (_3611 * 40u) + 16u;
                            _3669 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3656)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 3u)).x));
                            uint _3672 = (_3611 * 40u) + 20u;
                            _3685 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3672)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 3u)).x));
                            uint _3687 = (_3611 * 40u) + 24u;
                            vec4 _3700 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3687)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 3u)).x));
                            uint _3706 = (_3611 * 40u) + 28u;
                            vec4 _3719 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3706)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 3u)).x));
                            _3731 = fma(_2074, _3719.z, fma(_2073, _3719.y, _3719.x * _2072)) + _3719.w;
                            _3732 = !((fma(_2074, _3700.z, fma(_2073, _3700.y, _3700.x * _2072)) + _3700.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3732)
                            {
                                float _3759 = _3626.x - _2072;
                                float _3760 = _3626.y - _2073;
                                float _3761 = _3626.z - _2074;
                                float _3762 = dot(vec3(_3759, _3760, _3761), vec3(_3759, _3760, _3761));
                                float _3765 = inversesqrt(_3762);
                                float _3766 = _3765 * _3759;
                                float _3767 = _3765 * _3760;
                                float _3768 = _3765 * _3761;
                                float _3772 = 1.0 - (_3762 / (_3627 * _3627));
                                float _5003 = isnan(0.0) ? _3772 : (isnan(_3772) ? 0.0 : max(_3772, 0.0));
                                float _3773 = isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0));
                                float _3777 = sqrt(_3762) * _3642.w;
                                float _3779 = 1.39999997615814208984375 / (_3777 + 1.39999997615814208984375);
                                float _3780 = _3779 * _3779;
                                float _3783 = ((1.0 - _3780) * dot(vec3(_3766, _3767, _3768), vec3(_906, _909, _912))) + _3780;
                                float _3786 = _3777 * _3777;
                                float _3790 = (fma(_2074, _3669.z, fma(_2073, _3669.y, _3669.x * _2072)) + _3669.w) / _3731;
                                float _3791 = (fma(_2074, _3685.z, fma(_2073, _3685.y, _3685.x * _2072)) + _3685.w) / _3731;
                                float _3795 = 1.0 - dot(vec2(_3790, _3791), vec2(_3790, _3791));
                                float _5019 = isnan(0.0) ? _3795 : (isnan(_3795) ? 0.0 : max(_3795, 0.0));
                                float _3796 = isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0));
                                float _3797 = _3796 * (((isnan(0.0) ? _3783 : (isnan(_3783) ? 0.0 : max(_3783, 0.0))) * _3773) / ((_3786 * 0.699999988079071044921875) + 1.0));
                                float _3809 = exp2(log2(1.0 / ((_3786 * 3.5) + 5.0)) * 0.25);
                                float _3810 = 1.0 - _981;
                                float _3817 = sqrt(1.0 - ((1.0 - (_3810 * _3810)) * (1.0 - (_3809 * _3809))));
                                float _3818 = _3817 * _3817;
                                float _3819 = _3818 * _3818;
                                float _3820 = _3766 - _3239;
                                float _3821 = _3767 - _3240;
                                float _3822 = _3768 - _3241;
                                float _3826 = inversesqrt(dot(vec3(_3820, _3821, _3822), vec3(_3820, _3821, _3822)));
                                float _3830 = dot(vec3(_906, _909, _912), vec3((-0.0) - _3239, (-0.0) - _3240, (-0.0) - _3241));
                                float _5030 = isnan(0.0) ? _3830 : (isnan(_3830) ? 0.0 : max(_3830, 0.0));
                                float _3833 = isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0));
                                float _3834 = dot(vec3(_906, _909, _912), vec3(_3826 * _3820, _3826 * _3821, _3826 * _3822));
                                float _5041 = isnan(0.0) ? _3834 : (isnan(_3834) ? 0.0 : max(_3834, 0.0));
                                float _3837 = isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0));
                                float _3841 = ((_3837 * _3837) * (_3819 + (-1.0))) + 1.0;
                                float _3842 = _3779 * _3818;
                                float _3843 = _3842 * _3842;
                                float _3849 = ((1.0 - _3843) * dot(vec3(_906, _909, _912), vec3(_3766, _3767, _3768))) + _3843;
                                float _5052 = isnan(0.0) ? _3849 : (isnan(_3849) ? 0.0 : max(_3849, 0.0));
                                float _3850 = isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0));
                                float _3851 = 1.0 - _3818;
                                float _3861 = (0.5 / (((_3850 * ((_3833 * _3851) + _3818)) + 9.9999999392252902907785028219223e-09) + (((_3850 * _3851) + _3818) * _3833))) * _3850;
                                float _5063 = isnan(0.0) ? _3861 : (isnan(_3861) ? 0.0 : max(_3861, 0.0));
                                float _3871 = (_3796 * _3773) * (((_3819 * 3.1415927410125732421875) * (isnan(1.0) ? _5063 : (isnan(_5063) ? 1.0 : min(_5063, 1.0)))) / ((_3841 * _3841) * ((_3786 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3797 * _3642.z;
                                frontier_phi_88_pred_1 = _3797 * _3642.y;
                                frontier_phi_88_pred_2 = _3797 * _3642.x;
                                frontier_phi_88_pred_3 = _3871 * _3654.z;
                                frontier_phi_88_pred_4 = _3871 * _3654.y;
                                frontier_phi_88_pred_5 = _3871 * _3654.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3880 = frontier_phi_88_pred;
                            _3879 = frontier_phi_88_pred_1;
                            _3878 = frontier_phi_88_pred_2;
                            _3877 = frontier_phi_88_pred_3;
                            _3876 = frontier_phi_88_pred_4;
                            _3875 = frontier_phi_88_pred_5;
                            _3584 = _3878 + _3597;
                            _3585 = _3879 + _3598;
                            _3586 = _3880 + _3599;
                            _3581 = _3875 + _3594;
                            _3582 = _3876 + _3595;
                            _3583 = _3877 + _3596;
                            if (_3601 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3594 = _3581;
                                _3595 = _3582;
                                _3596 = _3583;
                                _3597 = _3584;
                                _3598 = _3585;
                                _3599 = _3586;
                                _3600 = _3601;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3586;
                        frontier_phi_82_pred_1 = _3585;
                        frontier_phi_82_pred_2 = _3584;
                        frontier_phi_82_pred_3 = _3583;
                        frontier_phi_82_pred_4 = _3582;
                        frontier_phi_82_pred_5 = _3581;
                    }
                    _3224 = frontier_phi_82_pred;
                    _3222 = frontier_phi_82_pred_1;
                    _3220 = frontier_phi_82_pred_2;
                    _3218 = frontier_phi_82_pred_3;
                    _3216 = frontier_phi_82_pred_4;
                    _3214 = frontier_phi_82_pred_5;
                    uint _3380 = _3379 + 1u;
                    if (_3380 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3373 = _3214;
                        _3374 = _3216;
                        _3375 = _3218;
                        _3376 = _3220;
                        _3377 = _3222;
                        _3378 = _3224;
                        _3379 = _3380;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3220;
                frontier_phi_63_64_ladder_1 = _3224;
                frontier_phi_63_64_ladder_2 = _3222;
                frontier_phi_63_64_ladder_3 = _3218;
                frontier_phi_63_64_ladder_4 = _3216;
                frontier_phi_63_64_ladder_5 = _3214;
            }
            else
            {
                frontier_phi_63_64_ladder = _3099;
                frontier_phi_63_64_ladder_1 = _3103;
                frontier_phi_63_64_ladder_2 = _3101;
                frontier_phi_63_64_ladder_3 = _3097;
                frontier_phi_63_64_ladder_4 = _3095;
                frontier_phi_63_64_ladder_5 = _3093;
            }
            _3213 = frontier_phi_63_64_ladder_5;
            _3215 = frontier_phi_63_64_ladder_4;
            _3217 = frontier_phi_63_64_ladder_3;
            _3219 = frontier_phi_63_64_ladder;
            _3221 = frontier_phi_63_64_ladder_2;
            _3223 = frontier_phi_63_64_ladder_1;
        }
        float _3228 = isnan(1.0) ? _965 : (isnan(_965) ? 1.0 : min(_965, 1.0));
        _3026 = (_3228 * _3219) + _2538;
        _3028 = (_3228 * _3221) + _2540;
        _3030 = (_3228 * _3223) + _2542;
        _3032 = ((_3213 * _949) * _3228) + _2876;
        _3034 = ((_3215 * _951) * _3228) + _2878;
        _3036 = ((_3217 * _952) * _3228) + _2880;
    }
    else
    {
        _3026 = _2538;
        _3028 = _2540;
        _3030 = _2542;
        _3032 = _2876;
        _3034 = _2878;
        _3036 = _2880;
    }
    float _5079 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _5090 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _5101 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _3053 = ((isnan(1.0) ? _5079 : (isnan(_5079) ? 1.0 : min(_5079, 1.0))) * (_3026 + ((isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))) * _965))) + ((_3032 + ((isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0))) * _1804)) * cbPerFrame._m0[3u].x);
    float _3054 = ((isnan(1.0) ? _5090 : (isnan(_5090) ? 1.0 : min(_5090, 1.0))) * (_3028 + ((isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))) * _965))) + ((_3034 + ((isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0))) * _1804)) * cbPerFrame._m0[3u].x);
    float _3055 = ((isnan(1.0) ? _5101 : (isnan(_5101) ? 1.0 : min(_5101, 1.0))) * (_3030 + ((isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))) * _965))) + ((_3036 + ((isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0))) * _1804)) * cbPerFrame._m0[3u].x);
    uint _3056 = _257 + 6u;
    float _3064 = _887 / cbSceneParam._m0[86u].x;
    float _3065 = _888 / cbSceneParam._m0[86u].y;
    vec4 _3079 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3064, _3065, (log2((isnan(cbSceneParam._m0[77u].w) ? _810 : (isnan(_810) ? cbSceneParam._m0[77u].w : min(_810, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3081 = _3079.x;
    float _3082 = _3079.y;
    float _3083 = _3079.z;
    float _3084 = _3079.w;
    float _3155;
    float _3157;
    float _3159;
    float _3161;
    if (_810 > cbSceneParam._m0[78u].w)
    {
        float _3118 = isnan(_810) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _810 : min(cbSceneParam._m0[80u].w, _810));
        float _3119 = _3118 / _810;
        float _3130 = _3119 * _860;
        float _3131 = _861 * _3119;
        float _3132 = (-0.0) - _3131;
        float _3133 = _3119 * _862;
        float _3135 = (cbSceneParam._m0[77u].w * _3132) / _3118;
        float _3136 = _3135 + cbSceneParam._m0[79u].w;
        float _3137 = cbSceneParam._m0[79u].w - _3131;
        float _3143 = sqrt(((_3130 * _3130) + (_3131 * _3131)) + (_3133 * _3133));
        float _3146 = (1.0 - (cbSceneParam._m0[77u].w / _3118)) * _3143;
        float _3151 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3153 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3330;
        if (abs((_3132 - _3135) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3330 = ((((_3136 > 0.0) ? exp2(_3151 * _3136) : (2.0 - exp2(_3153 * _3136))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3146;
        }
        else
        {
            float _3274 = 1.0 / cbSceneParam._m0[80u].x;
            float _3275 = isnan(_3137) ? _3136 : (isnan(_3136) ? _3137 : max(_3136, _3137));
            float _3276 = isnan(_3137) ? _3136 : (isnan(_3136) ? _3137 : min(_3136, _3137));
            float _3285 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : min(_3275, 0.0));
            float _3286 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : min(_3276, 0.0));
            _3330 = ((abs(_3143 / _3132) * cbSceneParam._m0[80u].y) * ((((_3285 - _3286) * 2.0) - ((exp2(_3151 * (isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0)))) - exp2(_3151 * (isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0))))) * _3274)) - ((exp2(_3153 * _3285) - exp2(_3153 * _3286)) * _3274))) + (_3146 * cbSceneParam._m0[80u].z);
        }
        vec4 _3332 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3064, _3065, 1.0), 0.0);
        float _3341 = exp2((_3330 * (-1.44269502162933349609375)) * (1.0 - _3332.w));
        float _3342 = log2(_3341);
        float _3358 = log2(_3084);
        _3155 = (exp2(_3358 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3342 * cbSceneParam._m0[78u].x)) * _3332.x) / cbSceneParam._m0[78u].x)) + _3081;
        _3157 = (exp2(_3358 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3342 * cbSceneParam._m0[78u].y)) * _3332.y) / cbSceneParam._m0[78u].y)) + _3082;
        _3159 = (exp2(_3358 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3342 * cbSceneParam._m0[78u].z)) * _3332.z) / cbSceneParam._m0[78u].z)) + _3083;
        _3161 = _3341 * _3084;
    }
    else
    {
        _3155 = _3081;
        _3157 = _3082;
        _3159 = _3083;
        _3161 = _3084;
    }
    bool _3368;
    vec4 _3171;
    vec4 _3193;
    float _3195;
    float _3199;
    float _3200;
    float _3201;
    float _3202;
    bool _3212;
    for (;;)
    {
        _3171 = cbMatDynParam._m0[0u];
        float _3173 = roundEven(_3171.y);
        bool _3174 = _3173 == 3.0;
        float _3175 = log2(_3161);
        float _3182 = exp2(_3175 * cbSceneParam._m0[78u].x) * _3053;
        float _3183 = exp2(_3175 * cbSceneParam._m0[78u].y) * _3054;
        float _3184 = exp2(_3175 * cbSceneParam._m0[78u].z) * _3055;
        float _3191 = _876 + (-0.5);
        _3193 = cbMtdParam._m0[1u];
        _3195 = _3193.y * _3191;
        float _3198 = (_3173 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3199 = _3198 * (_3174 ? _3182 : (_3182 + (cbSceneParam._m0[72u].w * _3155)));
        _3200 = _3198 * (_3174 ? _3183 : (_3183 + (cbSceneParam._m0[72u].w * _3157)));
        _3201 = _3198 * (_3174 ? _3184 : (_3184 + (cbSceneParam._m0[72u].w * _3159)));
        _3202 = _3191 * 0.999000012874603271484375;
        _3212 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3212)
        {
            if ((cbInstanceData._m0[_257 + 7u].x + _3202) < 0.5)
            {
                _3368 = true;
                break;
            }
        }
        uint _3309 = _925 + uint(_3171.w);
        if ((cbInstanceData._m0[_3309].w < 1.0) && ((cbInstanceData._m0[_3309].w + _3202) < 0.5))
        {
            _3368 = true;
            break;
        }
        if ((_3195 + 1.0) < _3193.x)
        {
            _3368 = true;
            break;
        }
        _3368 = false;
        break;
    }
    float _3572;
    if (_3368)
    {
        discard_state = true;
        _3572 = 0.0;
    }
    else
    {
        _3572 = cbInstanceData._m0[_3056].w;
    }
    SV_Target.x = _3199;
    SV_Target.y = _3200;
    SV_Target.z = _3201;
    SV_Target.w = _3572;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3056].w;
    discard_exit();
}


