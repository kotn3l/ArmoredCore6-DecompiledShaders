#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1297;
float _3700;
float _3701;
float _3702;
float _3703;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _229 = _228 * _220;
    float _230 = _228 * _221;
    float _231 = _228 * _222;
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = _235 * NORMAL.x;
    float _237 = _235 * NORMAL.y;
    float _238 = _235 * NORMAL.z;
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243 = _242 * TANGENT.x;
    float _244 = _242 * TANGENT.y;
    float _245 = _242 * TANGENT.z;
    uint _248 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _248 + 1u;
    uint _258 = _248 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _295 = _289.x * cbMtdParam._m0[11u].x;
    float _296 = _289.y * cbMtdParam._m0[11u].y;
    float _297 = _289.z * cbMtdParam._m0[11u].z;
    vec4 _316 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _354 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _356 = _354.x;
    float _368 = dot(vec4(_356, _354.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _385 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_356 - _368) * cbMtdParam._m0[24u].y) + _368) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3712 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _386 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
    float _393 = (_386 * ((_316.x * cbMtdParam._m0[12u].x) - _295)) + _295;
    float _394 = (_386 * ((_316.y * cbMtdParam._m0[12u].y) - _296)) + _296;
    float _395 = (_386 * ((_316.z * cbMtdParam._m0[12u].z) - _297)) + _297;
    vec4 _414 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _268) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _269) + cbTextureTilingScale._m0[14u].w));
    vec4 _434 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _268) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _269) + cbTextureTilingScale._m0[20u].w));
    vec4 _461 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _478 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _480 = _478.x;
    float _481 = _478.y;
    float _482 = _478.z;
    float _491 = ((_461.z - _482) * _386) + _482;
    float _494 = ((((_461.x - _480) * _386) + _480) * 2.0) + (-1.0);
    float _495 = ((((_461.y - _481) * _386) + _481) * 2.0) + (-1.0);
    float _496 = dot(vec2(_494, _495), vec2(_494, _495));
    float _3723 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _501 = sqrt(1.0 - (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))));
    float _504 = _494 + ((((_434.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _505 = _495 + ((((_434.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _508 = fma(_501, _236, fma(_505, _243, _504 * _229));
    float _511 = fma(_501, _237, fma(_505, _244, _504 * _230));
    float _514 = fma(_501, _238, fma(_505, _245, _504 * _231));
    float _518 = inversesqrt(dot(vec3(_508, _511, _514), vec3(_508, _511, _514)));
    vec4 _534 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _560 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _268) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _562 = _560.x;
    float _563 = 1.0 - _562;
    float _567 = ((_562 - _563) * cbMtdParam._m0[24u].z) + _563;
    float _569 = (cbMtdParam._m0[19u].x + dot(vec4(_518 * _508, _518 * _511, _518 * _514, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_567 * cbMtdParam._m0[21u].z);
    float _3734 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _570 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _585 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_567 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3745 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _586 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    float _590 = ((_570 * ((_414.x * cbMtdParam._m0[18u].x) - _393)) * _586) + _393;
    float _591 = ((_570 * ((_414.y * cbMtdParam._m0[18u].y) - _394)) * _586) + _394;
    float _592 = ((_570 * ((_414.z * cbMtdParam._m0[18u].z) - _395)) * _586) + _395;
    vec4 _604 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _618 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _620 = _618.x;
    float _638 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _268) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _269) + cbTextureTilingScale._m0[9u].w)).x - _620) * _386) + _620;
    float _642 = ((_604.x - _638) * cbMtdParam._m0[19u].z) + _638;
    float _645 = _642 - ((_586 * _570) * _642);
    float _650 = (((_434.z - _491) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _491;
    vec4 _663 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _268) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _269) + cbTextureTilingScale._m0[15u].w));
    float _670 = (_663.x * 2.0) + (-1.0);
    float _671 = (_663.y * 2.0) + (-1.0);
    float _672 = dot(vec2(_670, _671), vec2(_670, _671));
    float _3756 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _681 = (((_663.z - _650) * _570) * _586) + _650;
    float _696 = (((cbMtdParam._m0[21u].x * _504) + ((_670 - _504) * _570)) * _586) + _504;
    float _697 = (((cbMtdParam._m0[21u].x * _505) + ((_671 - _505) * _570)) * _586) + _505;
    float _698 = (((sqrt(1.0 - (isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0)))) - _501) * _570) * _586) + _501;
    float _703 = cbMtdParam._m0[22u].x + _534.w;
    float _706 = fma(_698, _236, fma(_697, _243, _696 * _229));
    float _709 = fma(_698, _237, fma(_697, _244, _696 * _230));
    float _712 = fma(_698, _238, fma(_697, _245, _696 * _231));
    float _716 = inversesqrt(dot(vec3(_706, _709, _712), vec3(_706, _709, _712)));
    float _717 = _716 * _706;
    float _718 = _716 * _709;
    float _719 = _716 * _712;
    float _3767 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _720 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
    float _3778 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _3789 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _3800 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _3811 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _3822 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _725 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _739 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _780 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _790 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _780);
    float _791 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _780);
    float _792 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _780);
    float _796 = inversesqrt(dot(vec3(_790, _791, _792), vec3(_790, _791, _792)));
    float _797 = _790 * _796;
    float _798 = _791 * _796;
    float _799 = _792 * _796;
    vec4 _804 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _806 = _804.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _978 = sqrt(((_790 * _790) + (_791 * _791)) + (_792 * _792));
        float _984 = (cbMatDynParam._m0[5u].x * _978) + cbMatDynParam._m0[5u].y;
        float _3833 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _989 = (cbMatDynParam._m0[5u].z * _978) + cbMatDynParam._m0[5u].w;
        float _3844 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) - _985)) + _985) < ((_806 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _817 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _818 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _836 = fma(_719, cbSceneParam._m0[5u].z, fma(_718, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _717));
    float _839 = fma(_719, cbSceneParam._m0[6u].z, fma(_718, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _717));
    float _842 = fma(_719, cbSceneParam._m0[7u].z, fma(_718, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _717));
    uint _855 = _248 + 9u;
    uint _856 = _855 + uint(cbMatDynParam._m0[0u].w);
    float _862 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0)))) * cbInstanceData._m0[_856].x;
    float _863 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0)))) * cbInstanceData._m0[_856].y;
    float _864 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0)))) * cbInstanceData._m0[_856].z;
    float _3855 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _865 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
    float _3866 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _866 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _3877 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _867 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    float _868 = 1.0 - _725;
    float _869 = _865 * _868;
    float _870 = _866 * _868;
    float _871 = _867 * _868;
    float _876 = (_865 + (-0.039999999105930328369140625)) * _725;
    float _877 = (_866 + (-0.039999999105930328369140625)) * _725;
    float _878 = (_867 + (-0.039999999105930328369140625)) * _725;
    float _879 = _876 + 0.039999999105930328369140625;
    float _881 = _877 + 0.039999999105930328369140625;
    float _882 = _878 + 0.039999999105930328369140625;
    vec4 _891 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _817, cbSceneParam._m0[86u].y * _818));
    float _895 = ((isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * TEXCOORD_5.w) * _891.x;
    float _896 = dot(vec3(_717, _718, _719), vec3(_797, _798, _799));
    float _899 = _896 * 2.0;
    float _903 = (_899 * _717) - _797;
    float _904 = (_899 * _718) - _798;
    float _905 = (_899 * _719) - _799;
    float _909 = abs(dot(vec3(_797, _798, _799), vec3(_717, _718, _719)));
    float _3888 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _911 = sqrt(_720);
    float _924 = exp2((_911 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_911 * 3.0));
    float _930 = (1.0 - _924) * ((_911 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _931 = _924 * _911;
    float _959 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _963 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _967 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1296;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1021 = fma(_967, cbModelParam._m0[26u].z, fma(_963, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _959));
        float _1025 = fma(_967, cbModelParam._m0[27u].z, fma(_963, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _959));
        float _1029 = fma(_967, cbModelParam._m0[28u].z, fma(_963, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _959));
        float _1054 = _959 + _717;
        float _1055 = _963 + _718;
        float _1056 = _967 + _719;
        float _1066 = fma(_1056, cbModelParam._m0[26u].z, fma(_1055, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1054)) - _1021;
        float _1067 = fma(_1056, cbModelParam._m0[27u].z, fma(_1055, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1054)) - _1025;
        float _1068 = fma(_1056, cbModelParam._m0[28u].z, fma(_1055, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1054)) - _1029;
        float _1072 = inversesqrt(dot(vec3(_1066, _1067, _1068), vec3(_1066, _1067, _1068)));
        float _1085 = ((_1072 * _1066) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1021 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1086 = ((_1072 * _1067) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1025 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1087 = ((_1072 * _1068) / cbModelParam._m0[34u].z) + ((((((_1029 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        float _1124 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1125 = _1124 * (_1090.x + (-0.5));
        float _1126 = _1124 * (_1090.y + (-0.5));
        float _1127 = _1124 * (_1090.z + (-0.5));
        float _1134 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1135 = _1134 * (_1097.x + (-0.5));
        float _1136 = _1134 * (_1097.y + (-0.5));
        float _1137 = _1134 * (_1097.z + (-0.5));
        float _1144 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1104.x + (-0.5));
        float _1146 = _1144 * (_1104.y + (-0.5));
        float _1147 = _1144 * (_1104.z + (-0.5));
        float _1154 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1111.x + (-0.5));
        float _1156 = _1154 * (_1111.y + (-0.5));
        float _1157 = _1154 * (_1111.z + (-0.5));
        float _1158 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1159 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1160 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1161 = _1125 * 0.5;
        float _1162 = _1135 * 0.5;
        float _1163 = _1145 * 0.5;
        float _1164 = dot(vec3(_1161, _1162, _1163), vec3(_1161, _1162, _1163));
        float _1169 = (_1164 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1164);
        float _1178 = (dot(vec3(_717, _718, _719), vec3(_1169 * _1161, _1169 * _1162, _1169 * _1163)) + 1.0) * 0.5;
        float _3914 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1188 = sqrt(((_1162 * _1162) + (_1161 * _1161)) + (_1163 * _1163)) / (_1158 + 9.9999997473787516355514526367188e-06);
        float _3925 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1190 = _1189 * 2.0;
        float _1194 = (1.0 - _1189) / (_1189 + 1.0);
        float _3936 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _1204 = ((((1.0 - _1195) * (_1190 + 2.0)) * exp2(log2(isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) * (_1190 + 1.0))) + _1195) * _1158;
        float _1205 = _1126 * 0.5;
        float _1206 = _1136 * 0.5;
        float _1207 = _1146 * 0.5;
        float _1208 = dot(vec3(_1205, _1206, _1207), vec3(_1205, _1206, _1207));
        float _1213 = (_1208 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1208);
        float _1221 = (dot(vec3(_717, _718, _719), vec3(_1213 * _1205, _1213 * _1206, _1213 * _1207)) + 1.0) * 0.5;
        float _3947 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1230 = sqrt(((_1206 * _1206) + (_1205 * _1205)) + (_1207 * _1207)) / (_1159 + 9.9999997473787516355514526367188e-06);
        float _3958 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1232 = _1231 * 2.0;
        float _1236 = (1.0 - _1231) / (_1231 + 1.0);
        float _3969 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1246 = ((((1.0 - _1237) * (_1232 + 2.0)) * exp2(log2(isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * (_1232 + 1.0))) + _1237) * _1159;
        float _1247 = _1127 * 0.5;
        float _1248 = _1137 * 0.5;
        float _1249 = _1147 * 0.5;
        float _1250 = dot(vec3(_1247, _1248, _1249), vec3(_1247, _1248, _1249));
        float _1255 = (_1250 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1250);
        float _1263 = (dot(vec3(_717, _718, _719), vec3(_1255 * _1247, _1255 * _1248, _1255 * _1249)) + 1.0) * 0.5;
        float _3980 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1272 = sqrt(((_1248 * _1248) + (_1247 * _1247)) + (_1249 * _1249)) / (_1160 + 9.9999997473787516355514526367188e-06);
        float _3991 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1274 = _1273 * 2.0;
        float _1278 = (1.0 - _1273) / (_1273 + 1.0);
        float _4002 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1288 = ((((1.0 - _1279) * (_1274 + 2.0)) * exp2(log2(isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (_1274 + 1.0))) + _1279) * _1160;
        _1296 = _1127;
        _1298 = _1126;
        _1299 = _1125;
        _1300 = _1137;
        _1301 = _1136;
        _1302 = _1135;
        _1303 = _1147;
        _1304 = _1146;
        _1305 = _1145;
        _1306 = _1160;
        _1307 = _1159;
        _1308 = _1158;
        _1309 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0)));
        _1310 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)));
        _1311 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)));
    }
    else
    {
        _1296 = _1297;
        _1298 = _1297;
        _1299 = _1297;
        _1300 = _1297;
        _1301 = _1297;
        _1302 = _1297;
        _1303 = _1297;
        _1304 = _1297;
        _1305 = _1297;
        _1306 = _1297;
        _1307 = _1297;
        _1308 = _1297;
        _1309 = 0.0;
        _1310 = 0.0;
        _1311 = 0.0;
    }
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1339 = fma(_967, cbModelParam._m0[30u].z, fma(_963, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _959));
        float _1343 = fma(_967, cbModelParam._m0[31u].z, fma(_963, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _959));
        float _1347 = fma(_967, cbModelParam._m0[32u].z, fma(_963, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _959));
        float _1370 = _959 + _717;
        float _1371 = _963 + _718;
        float _1372 = _967 + _719;
        float _1382 = fma(_1372, cbModelParam._m0[30u].z, fma(_1371, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1370)) - _1339;
        float _1383 = fma(_1372, cbModelParam._m0[31u].z, fma(_1371, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1370)) - _1343;
        float _1384 = fma(_1372, cbModelParam._m0[32u].z, fma(_1371, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1370)) - _1347;
        float _1388 = inversesqrt(dot(vec3(_1382, _1383, _1384), vec3(_1382, _1383, _1384)));
        float _1401 = ((_1388 * _1382) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1339 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1402 = ((_1388 * _1383) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1343 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1403 = ((_1388 * _1384) / cbModelParam._m0[35u].z) + ((((((_1347 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1405 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1401, _1402, _1403), 0.0);
        vec4 _1412 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1401, _1402, _1403), 0.0);
        vec4 _1419 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1401, _1402, _1403), 0.0);
        vec4 _1426 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1401, _1402, _1403), 0.0);
        float _1438 = exp2((_1405.w + (-0.5)) * 20.0) * 2.0;
        float _1439 = _1438 * (_1405.x + (-0.5));
        float _1440 = _1438 * (_1405.y + (-0.5));
        float _1441 = _1438 * (_1405.z + (-0.5));
        float _1448 = exp2((_1412.w + (-0.5)) * 20.0) * 2.0;
        float _1449 = _1448 * (_1412.x + (-0.5));
        float _1450 = _1448 * (_1412.y + (-0.5));
        float _1451 = _1448 * (_1412.z + (-0.5));
        float _1458 = exp2((_1419.w + (-0.5)) * 20.0) * 2.0;
        float _1459 = _1458 * (_1419.x + (-0.5));
        float _1460 = _1458 * (_1419.y + (-0.5));
        float _1461 = _1458 * (_1419.z + (-0.5));
        float _1468 = exp2((_1426.w + (-0.5)) * 20.0) * 2.0;
        float _1469 = _1468 * (_1426.x + (-0.5));
        float _1470 = _1468 * (_1426.y + (-0.5));
        float _1471 = _1468 * (_1426.z + (-0.5));
        float _1472 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1473 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1474 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1475 = _1439 * 0.5;
        float _1476 = _1449 * 0.5;
        float _1477 = _1459 * 0.5;
        float _1478 = dot(vec3(_1475, _1476, _1477), vec3(_1475, _1476, _1477));
        float _1483 = (_1478 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1478);
        float _1491 = (dot(vec3(_717, _718, _719), vec3(_1483 * _1475, _1483 * _1476, _1483 * _1477)) + 1.0) * 0.5;
        float _4043 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1500 = sqrt(((_1476 * _1476) + (_1475 * _1475)) + (_1477 * _1477)) / (_1472 + 9.9999997473787516355514526367188e-06);
        float _4054 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1502 = _1501 * 2.0;
        float _1506 = (1.0 - _1501) / (_1501 + 1.0);
        float _4065 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1516 = ((((1.0 - _1507) * (_1502 + 2.0)) * exp2(log2(isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * (_1502 + 1.0))) + _1507) * _1472;
        float _1517 = _1440 * 0.5;
        float _1518 = _1450 * 0.5;
        float _1519 = _1460 * 0.5;
        float _1520 = dot(vec3(_1517, _1518, _1519), vec3(_1517, _1518, _1519));
        float _1525 = (_1520 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1520);
        float _1533 = (dot(vec3(_717, _718, _719), vec3(_1525 * _1517, _1525 * _1518, _1525 * _1519)) + 1.0) * 0.5;
        float _4076 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1542 = sqrt(((_1518 * _1518) + (_1517 * _1517)) + (_1519 * _1519)) / (_1473 + 9.9999997473787516355514526367188e-06);
        float _4087 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1544 = _1543 * 2.0;
        float _1548 = (1.0 - _1543) / (_1543 + 1.0);
        float _4098 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1558 = ((((1.0 - _1549) * (_1544 + 2.0)) * exp2(log2(isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * (_1544 + 1.0))) + _1549) * _1473;
        float _1559 = _1441 * 0.5;
        float _1560 = _1451 * 0.5;
        float _1561 = _1461 * 0.5;
        float _1562 = dot(vec3(_1559, _1560, _1561), vec3(_1559, _1560, _1561));
        float _1567 = (_1562 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1562);
        float _1575 = (dot(vec3(_717, _718, _719), vec3(_1567 * _1559, _1567 * _1560, _1567 * _1561)) + 1.0) * 0.5;
        float _4109 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1584 = sqrt(((_1560 * _1560) + (_1559 * _1559)) + (_1561 * _1561)) / (_1474 + 9.9999997473787516355514526367188e-06);
        float _4120 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1586 = _1585 * 2.0;
        float _1590 = (1.0 - _1585) / (_1585 + 1.0);
        float _4131 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1600 = ((((1.0 - _1591) * (_1586 + 2.0)) * exp2(log2(isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * (_1586 + 1.0))) + _1591) * _1474;
        _1608 = _1441;
        _1609 = _1440;
        _1610 = _1439;
        _1611 = _1451;
        _1612 = _1450;
        _1613 = _1449;
        _1614 = _1461;
        _1615 = _1460;
        _1616 = _1459;
        _1617 = _1474;
        _1618 = _1473;
        _1619 = _1472;
        _1620 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)));
        _1621 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)));
        _1622 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)));
    }
    else
    {
        _1608 = _1297;
        _1609 = _1297;
        _1610 = _1297;
        _1611 = _1297;
        _1612 = _1297;
        _1613 = _1297;
        _1614 = _1297;
        _1615 = _1297;
        _1616 = _1297;
        _1617 = _1297;
        _1618 = _1297;
        _1619 = _1297;
        _1620 = 0.0;
        _1621 = 0.0;
        _1622 = 0.0;
    }
    float _1632 = (cbModelParam._m0[1u].x * (_1620 - _1309)) + _1309;
    float _1633 = (cbModelParam._m0[1u].x * (_1621 - _1310)) + _1310;
    float _1634 = (cbModelParam._m0[1u].x * (_1622 - _1311)) + _1311;
    float _1655 = fma(_1634, cbSceneParam._m0[89u].z, fma(_1633, cbSceneParam._m0[89u].y, _1632 * cbSceneParam._m0[89u].x));
    float _1658 = fma(_1634, cbSceneParam._m0[90u].z, fma(_1633, cbSceneParam._m0[90u].y, _1632 * cbSceneParam._m0[90u].x));
    float _1661 = fma(_1634, cbSceneParam._m0[91u].z, fma(_1633, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1632));
    float _1676 = _903 * 0.5;
    float _1677 = _904 * 0.5;
    float _1678 = _905 * 0.5;
    float _1679 = dot(vec4(_1676, _1677, _1678, 1.0), vec4(_1610, _1613, _1616, _1619));
    float _1682 = dot(vec4(_1676, _1677, _1678, 1.0), vec4(_1609, _1612, _1615, _1618));
    float _1685 = dot(vec4(_1676, _1677, _1678, 1.0), vec4(_1608, _1611, _1614, _1617));
    float _1719;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1692 = dot(vec4(_1676, _1677, _1678, 1.0), vec4(_1296, _1300, _1303, _1306));
        float _1696 = dot(vec4(_1676, _1677, _1678, 1.0), vec4(_1298, _1301, _1304, _1307));
        float _1700 = dot(vec4(_1676, _1677, _1678, 1.0), vec4(_1299, _1302, _1305, _1308));
        float _1707 = dot(vec4(cbModelParam._m0[39u]), vec4(_1676, _1677, _1678, 1.0));
        _1719 = dot(vec3(isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0)), isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0)), isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1707) ? 0.0 : (isnan(0.0) ? _1707 : max(0.0, _1707))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1719 = 1.0;
    }
    float _1730;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1721 = dot(vec4(cbModelParam._m0[40u]), vec4(_1676, _1677, _1678, 1.0));
        _1730 = dot(vec3(isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)), isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)), isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1721) ? 0.0 : (isnan(0.0) ? _1721 : max(0.0, _1721))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1730 = 1.0;
    }
    float _1734 = (_1730 * cbModelParam._m0[1u].x) + (_1719 * (1.0 - cbModelParam._m0[1u].x));
    float _1744 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _720);
    float _1745 = isnan(_1744) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1744 : min(cbModelParam._m0[25u].z, _1744));
    float _1825;
    float _1827;
    float _1829;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1792 = fma(_967, cbModelParam._m0[13u].z, fma(_963, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _959)) + cbModelParam._m0[13u].w;
        float _1796 = fma(_967, cbModelParam._m0[14u].z, fma(_963, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _959)) + cbModelParam._m0[14u].w;
        float _1800 = fma(_967, cbModelParam._m0[15u].z, fma(_963, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _959)) + cbModelParam._m0[15u].w;
        float _1803 = fma(_905, cbModelParam._m0[13u].z, fma(_904, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _903));
        float _1806 = fma(_905, cbModelParam._m0[14u].z, fma(_904, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _903));
        float _1809 = fma(_905, cbModelParam._m0[15u].z, fma(_904, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _903));
        float _1837;
        if (_1803 > 0.0)
        {
            _1837 = abs((1.0 - _1792) / _1803);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1803 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1792 + 1.0) / _1803);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1837 = frontier_phi_17_15_ladder;
        }
        float _2060;
        if (_1806 > 0.0)
        {
            _2060 = abs((1.0 - _1796) / _1806);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1806 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1796 + 1.0) / _1806);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2060 = frontier_phi_26_22_ladder;
        }
        float _2317;
        if (_1809 > 0.0)
        {
            _2317 = abs((1.0 - _1800) / _1809);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1809 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1800 + 1.0) / _1809);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2317 = frontier_phi_38_33_ladder;
        }
        float _2319 = isnan(_2060) ? _1837 : (isnan(_1837) ? _2060 : min(_1837, _2060));
        float _2320 = isnan(_2317) ? _2319 : (isnan(_2319) ? _2317 : min(_2319, _2317));
        float _2324 = (_2320 * _1803) + _1792;
        float _2325 = (_2320 * _1806) + _1796;
        float _2326 = (_2320 * _1809) + _1800;
        float _2327 = _2320 * 9.9999997473787516355514526367188e-05;
        float _2329 = (-1.0) - _2327;
        float _2331 = _2327 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2326 > _2331) || ((_2326 < _2329) || ((_2325 > _2331) || ((_2325 < _2329) || ((_2324 < _2329) || (_2324 > _2331))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2454 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2326, cbModelParam._m0[9u].z, fma(_2325, cbModelParam._m0[9u].y, _2324 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2326, cbModelParam._m0[10u].z, fma(_2325, cbModelParam._m0[10u].y, _2324 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2326, cbModelParam._m0[11u].z, fma(_2325, cbModelParam._m0[11u].y, _2324 * cbModelParam._m0[11u].x))), _1745);
            frontier_phi_16_38_ladder = _2454.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2454.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2454.x * cbModelParam._m0[1u].y;
        }
        _1825 = frontier_phi_16_38_ladder_2;
        _1827 = frontier_phi_16_38_ladder_1;
        _1829 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1813 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_903, _904, _905), _1745);
        _1825 = _1813.x * cbModelParam._m0[1u].y;
        _1827 = _1813.y * cbModelParam._m0[1u].y;
        _1829 = _1813.z * cbModelParam._m0[1u].y;
    }
    float _1833 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _720);
    float _1834 = isnan(_1833) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1833 : min(cbModelParam._m0[25u].w, _1833));
    float _1923;
    float _1925;
    float _1927;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1887 = fma(_967, cbModelParam._m0[21u].z, fma(_963, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _959)) + cbModelParam._m0[21u].w;
        float _1891 = fma(_967, cbModelParam._m0[22u].z, fma(_963, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _959)) + cbModelParam._m0[22u].w;
        float _1895 = fma(_967, cbModelParam._m0[23u].z, fma(_963, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _959)) + cbModelParam._m0[23u].w;
        float _1898 = fma(_905, cbModelParam._m0[21u].z, fma(_904, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _903));
        float _1901 = fma(_905, cbModelParam._m0[22u].z, fma(_904, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _903));
        float _1904 = fma(_905, cbModelParam._m0[23u].z, fma(_904, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _903));
        float _2065;
        if (_1898 > 0.0)
        {
            _2065 = abs((1.0 - _1887) / _1898);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1898 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1887 + 1.0) / _1898);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2065 = frontier_phi_28_24_ladder;
        }
        float _2344;
        if (_1901 > 0.0)
        {
            _2344 = abs((1.0 - _1891) / _1901);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1901 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1891 + 1.0) / _1901);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2344 = frontier_phi_40_35_ladder;
        }
        float _2557;
        if (_1904 > 0.0)
        {
            _2557 = abs((1.0 - _1895) / _1904);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1904 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1895 + 1.0) / _1904);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2557 = frontier_phi_49_46_ladder;
        }
        float _2559 = isnan(_2344) ? _2065 : (isnan(_2065) ? _2344 : min(_2065, _2344));
        float _2560 = isnan(_2557) ? _2559 : (isnan(_2559) ? _2557 : min(_2559, _2557));
        float _2564 = (_2560 * _1898) + _1887;
        float _2565 = (_2560 * _1901) + _1891;
        float _2566 = (_2560 * _1904) + _1895;
        float _2567 = _2560 * 9.9999997473787516355514526367188e-05;
        float _2568 = (-1.0) - _2567;
        float _2570 = _2567 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2566 > _2570) || ((_2566 < _2568) || ((_2565 > _2570) || ((_2565 < _2568) || ((_2564 < _2568) || (_2564 > _2570))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2765 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2566, cbModelParam._m0[17u].z, fma(_2565, cbModelParam._m0[17u].y, _2564 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2566, cbModelParam._m0[18u].z, fma(_2565, cbModelParam._m0[18u].y, _2564 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2566, cbModelParam._m0[19u].z, fma(_2565, cbModelParam._m0[19u].y, _2564 * cbModelParam._m0[19u].x))), _1834);
            frontier_phi_25_49_ladder = _2765.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2765.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2765.x * cbModelParam._m0[1u].z;
        }
        _1923 = frontier_phi_25_49_ladder_2;
        _1925 = frontier_phi_25_49_ladder_1;
        _1927 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1907 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_903, _904, _905), _1834);
        _1923 = _1907.x * cbModelParam._m0[1u].z;
        _1925 = _1907.y * cbModelParam._m0[1u].z;
        _1927 = _1907.z * cbModelParam._m0[1u].z;
    }
    float _1940 = (((_930 * _879) + _931) * _895) * ((cbModelParam._m0[1u].w * (_1923 - _1825)) + _1825);
    float _1942 = (((_930 * _881) + _931) * _895) * ((cbModelParam._m0[1u].w * (_1925 - _1827)) + _1827);
    float _1944 = (((_930 * _882) + _931) * _895) * ((cbModelParam._m0[1u].w * (_1927 - _1829)) + _1829);
    float _1947 = fma(_1944, cbSceneParam._m0[89u].z, fma(_1942, cbSceneParam._m0[89u].y, _1940 * cbSceneParam._m0[89u].x));
    float _1950 = fma(_1944, cbSceneParam._m0[90u].z, fma(_1942, cbSceneParam._m0[90u].y, _1940 * cbSceneParam._m0[90u].x));
    float _1953 = fma(_1944, cbSceneParam._m0[91u].z, fma(_1942, cbSceneParam._m0[91u].y, _1940 * cbSceneParam._m0[91u].x));
    vec4 _1961 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_817, _818));
    float _1963 = _1961.w;
    float _1975 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1963);
    float _1976 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1963);
    float _1977 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1963);
    uvec4 _1981 = floatBitsToUint(cbInstanceData._m0[_248 + 5u]);
    uint _1983 = _1981.x * 14u;
    uint _1984 = _1983 + 13u;
    float _1991 = _895 + (-1.0);
    float _1996 = (cbLight._m0[_1984].x * _1991) + 1.0;
    float _1997 = (cbLight._m0[_1984].y * _1991) + 1.0;
    float _1998 = (cbLight._m0[_1984].z * _1991) + 1.0;
    float _1999 = (cbLight._m0[_1984].w * _1991) + 1.0;
    uint _2000 = _1983 + 5u;
    float _2006 = isnan(1.0) ? _1997 : (isnan(_1997) ? 1.0 : min(_1997, 1.0));
    uint _2010 = _1983 + 4u;
    float _2019 = isnan(1.0) ? _1996 : (isnan(_1996) ? 1.0 : min(_1996, 1.0));
    uint _2023 = _1983 | 1u;
    float _2034 = dot(vec3(cbLight._m0[_1983].xyz), vec3(_717, _718, _719));
    float _2037 = dot(vec3(cbLight._m0[_2023].xyz), vec3(_717, _718, _719));
    float _4267 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _4278 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2042 = (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * 0.3183098733425140380859375;
    float _2044 = (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * 0.3183098733425140380859375;
    float _2051 = ((cbLight._m0[_2000].x * _2006) * _2044) + (((cbLight._m0[_2010].x * _1975) * _2019) * _2042);
    float _2052 = ((_2006 * cbLight._m0[_2000].y) * _2044) + (((cbLight._m0[_2010].y * _1976) * _2019) * _2042);
    float _2053 = ((_2006 * cbLight._m0[_2000].z) * _2044) + (((cbLight._m0[_2010].z * _1977) * _2019) * _2042);
    uvec4 _2057 = floatBitsToUint(cbLight._m0[_1983 + 12u]);
    bool _2059 = _2057.x == 0u;
    float _2070;
    float _2072;
    float _2074;
    if (_2059)
    {
        _2070 = _2051;
        _2072 = _2052;
        _2074 = _2053;
    }
    else
    {
        uint _2078 = _1983 + 6u;
        float _2094 = (dot(vec3(cbLight._m0[_1983 + 2u].xyz), vec3(_717, _718, _719)) * 0.5) + 0.5;
        float _2095 = _2094 * _2094;
        float _4289 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
        float _2096 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _2097 = isnan(1.0) ? _1998 : (isnan(_1998) ? 1.0 : min(_1998, 1.0));
        _2070 = (((cbLight._m0[_2078].x * 0.3183098733425140380859375) * _2096) * _2097) + _2051;
        _2072 = (((cbLight._m0[_2078].y * 0.3183098733425140380859375) * _2096) * _2097) + _2052;
        _2074 = (((cbLight._m0[_2078].z * 0.3183098733425140380859375) * _2096) * _2097) + _2053;
    }
    bool _2077 = _2057.y == 0u;
    float _2115;
    float _2117;
    float _2119;
    if (_2077)
    {
        _2115 = _2070;
        _2117 = _2072;
        _2119 = _2074;
    }
    else
    {
        uint _2288 = _1983 + 7u;
        float _2304 = (dot(vec3(cbLight._m0[_1983 + 3u].xyz), vec3(_717, _718, _719)) * 0.5) + 0.5;
        float _2305 = _2304 * _2304;
        float _4305 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2306 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _2307 = isnan(1.0) ? _1999 : (isnan(_1999) ? 1.0 : min(_1999, 1.0));
        _2115 = (((cbLight._m0[_2288].x * 0.3183098733425140380859375) * _2306) * _2307) + _2070;
        _2117 = (((cbLight._m0[_2288].y * 0.3183098733425140380859375) * _2306) * _2307) + _2072;
        _2119 = (((cbLight._m0[_2288].z * 0.3183098733425140380859375) * _2306) * _2307) + _2074;
    }
    uint _2122 = _1983 + 8u;
    float _2135 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1983].w)) * _720) * 0.949999988079071044921875);
    float _2136 = _2135 * _2135;
    float _2137 = cbLight._m0[_1983].x + _797;
    float _2138 = cbLight._m0[_1983].y + _798;
    float _2139 = cbLight._m0[_1983].z + _799;
    float _2143 = inversesqrt(dot(vec3(_2137, _2138, _2139), vec3(_2137, _2138, _2139)));
    float _2144 = _2143 * _2137;
    float _2145 = _2143 * _2138;
    float _2146 = _2143 * _2139;
    float _2147 = dot(vec3(_717, _718, _719), vec3(cbLight._m0[_1983].xyz));
    float _4321 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2150 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
    float _4332 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _2151 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
    float _2152 = dot(vec3(_717, _718, _719), vec3(_2144, _2145, _2146));
    float _4343 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    float _2155 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
    float _2156 = dot(vec3(cbLight._m0[_1983].xyz), vec3(_2144, _2145, _2146));
    float _4354 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2160 = _2136 * _2136;
    float _2164 = ((_2155 * _2155) * (_2160 + (-1.0))) + 1.0;
    float _2172 = exp2(log2(1.0 - (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0)))) * 5.0);
    float _2173 = 0.959999978542327880859375 - _876;
    float _2175 = 0.959999978542327880859375 - _877;
    float _2176 = 0.959999978542327880859375 - _878;
    float _2183 = 1.0 - _2136;
    float _2194 = (0.5 / (((_2151 * ((_2150 * _2183) + _2136)) + 9.9999999392252902907785028219223e-09) + (((_2151 * _2183) + _2136) * _2150))) * _2150;
    float _4365 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2196 = (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_2160 / ((_2164 * _2164) * 3.141590118408203125));
    uint _2210 = _1983 + 9u;
    float _2221 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2023].w)) * _720) * 0.949999988079071044921875);
    float _2222 = _2221 * _2221;
    float _2223 = cbLight._m0[_2023].x + _797;
    float _2224 = cbLight._m0[_2023].y + _798;
    float _2225 = cbLight._m0[_2023].z + _799;
    float _2229 = inversesqrt(dot(vec3(_2223, _2224, _2225), vec3(_2223, _2224, _2225)));
    float _2230 = _2229 * _2223;
    float _2231 = _2229 * _2224;
    float _2232 = _2229 * _2225;
    float _2233 = dot(vec3(_717, _718, _719), vec3(cbLight._m0[_2023].xyz));
    float _4376 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2236 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
    float _2237 = dot(vec3(_717, _718, _719), vec3(_2230, _2231, _2232));
    float _4387 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
    float _2240 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
    float _2241 = dot(vec3(cbLight._m0[_2023].xyz), vec3(_2230, _2231, _2232));
    float _4398 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _2245 = _2222 * _2222;
    float _2249 = ((_2240 * _2240) * (_2245 + (-1.0))) + 1.0;
    float _2256 = exp2(log2(1.0 - (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0)))) * 5.0);
    float _2263 = 1.0 - _2222;
    float _2273 = (0.5 / (((_2151 * ((_2236 * _2263) + _2222)) + 9.9999999392252902907785028219223e-09) + (((_2151 * _2263) + _2222) * _2236))) * _2236;
    float _4409 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2275 = (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_2245 / ((_2249 * _2249) * 3.141590118408203125));
    float _2285 = (((((_2256 * _2173) + _879) * cbLight._m0[_2210].x) * _2275) * _2006) + ((((cbLight._m0[_2122].x * _1975) * ((_2172 * _2173) + _879)) * _2196) * _2019);
    float _2286 = (((((_2256 * _2175) + _881) * cbLight._m0[_2210].y) * _2275) * _2006) + ((((cbLight._m0[_2122].y * _1976) * ((_2172 * _2175) + _881)) * _2196) * _2019);
    float _2287 = (((((_2256 * _2176) + _882) * cbLight._m0[_2210].z) * _2275) * _2006) + ((((cbLight._m0[_2122].z * _1977) * ((_2172 * _2176) + _882)) * _2196) * _2019);
    float _2349;
    float _2351;
    float _2353;
    if (_2059)
    {
        _2349 = _2285;
        _2351 = _2286;
        _2353 = _2287;
    }
    else
    {
        uint _2355 = _1983 + 2u;
        uint _2359 = _1983 + 10u;
        float _2373 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2355].w)) * _720) * 0.949999988079071044921875);
        float _2374 = _2373 * _2373;
        float _2375 = cbLight._m0[_2355].x + _797;
        float _2376 = cbLight._m0[_2355].y + _798;
        float _2377 = cbLight._m0[_2355].z + _799;
        float _2381 = inversesqrt(dot(vec3(_2375, _2376, _2377), vec3(_2375, _2376, _2377)));
        float _2382 = _2381 * _2375;
        float _2383 = _2381 * _2376;
        float _2384 = _2381 * _2377;
        float _2385 = dot(vec3(_717, _718, _719), vec3(cbLight._m0[_2355].xyz));
        float _4420 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
        float _2388 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _2389 = dot(vec3(_717, _718, _719), vec3(_2382, _2383, _2384));
        float _4431 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2392 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _2393 = dot(vec3(cbLight._m0[_2355].xyz), vec3(_2382, _2383, _2384));
        float _4442 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
        float _2397 = _2374 * _2374;
        float _2401 = ((_2392 * _2392) * (_2397 + (-1.0))) + 1.0;
        float _2408 = exp2(log2(1.0 - (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0)))) * 5.0);
        float _2415 = 1.0 - _2374;
        float _2425 = (0.5 / (((_2151 * ((_2388 * _2415) + _2374)) + 9.9999999392252902907785028219223e-09) + (((_2151 * _2415) + _2374) * _2388))) * _2388;
        float _4453 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2427 = (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_2397 / ((_2401 * _2401) * 3.141590118408203125));
        float _2428 = isnan(1.0) ? _1998 : (isnan(_1998) ? 1.0 : min(_1998, 1.0));
        _2349 = (((((_2408 * _2173) + _879) * cbLight._m0[_2359].x) * _2427) * _2428) + _2285;
        _2351 = (((((_2408 * _2175) + _881) * cbLight._m0[_2359].y) * _2427) * _2428) + _2286;
        _2353 = (((((_2408 * _2176) + _882) * cbLight._m0[_2359].z) * _2427) * _2428) + _2287;
    }
    float _2463;
    float _2465;
    float _2467;
    if (_2077)
    {
        _2463 = _2349;
        _2465 = _2351;
        _2467 = _2353;
    }
    else
    {
        uint _2474 = _1983 + 3u;
        uint _2478 = _1983 + 11u;
        float _2492 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2474].w)) * _720) * 0.949999988079071044921875);
        float _2493 = _2492 * _2492;
        float _2494 = cbLight._m0[_2474].x + _797;
        float _2495 = cbLight._m0[_2474].y + _798;
        float _2496 = cbLight._m0[_2474].z + _799;
        float _2500 = inversesqrt(dot(vec3(_2494, _2495, _2496), vec3(_2494, _2495, _2496)));
        float _2501 = _2500 * _2494;
        float _2502 = _2500 * _2495;
        float _2503 = _2500 * _2496;
        float _2504 = dot(vec3(_717, _718, _719), vec3(cbLight._m0[_2474].xyz));
        float _4469 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2507 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
        float _2508 = dot(vec3(_717, _718, _719), vec3(_2501, _2502, _2503));
        float _4480 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2511 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _2512 = dot(vec3(cbLight._m0[_2474].xyz), vec3(_2501, _2502, _2503));
        float _4491 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2516 = _2493 * _2493;
        float _2520 = ((_2511 * _2511) * (_2516 + (-1.0))) + 1.0;
        float _2527 = exp2(log2(1.0 - (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0)))) * 5.0);
        float _2534 = 1.0 - _2493;
        float _2544 = (0.5 / (((_2151 * ((_2507 * _2534) + _2493)) + 9.9999999392252902907785028219223e-09) + (((_2151 * _2534) + _2493) * _2507))) * _2507;
        float _4502 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2546 = (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * (_2516 / ((_2520 * _2520) * 3.141590118408203125));
        float _2547 = isnan(1.0) ? _1999 : (isnan(_1999) ? 1.0 : min(_1999, 1.0));
        _2463 = (((((_2527 * _2173) + _879) * cbLight._m0[_2478].x) * _2546) * _2547) + _2349;
        _2465 = (((((_2527 * _2175) + _881) * cbLight._m0[_2478].y) * _2546) * _2547) + _2351;
        _2467 = (((((_2527 * _2176) + _882) * cbLight._m0[_2478].z) * _2546) * _2547) + _2353;
    }
    float _2682;
    float _2684;
    float _2686;
    float _2688;
    float _2690;
    float _2692;
    if (_1981.y == 0u)
    {
        float _2622 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2623 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2622;
        float _2624 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2622;
        float _2625 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2622;
        uvec4 _2637 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2638 = _2637.x;
        uint _2649 = uint((float(_2637.y) * floor(float(uint(cbSceneParam._m0[85u].y * _818) / _2638))) + floor(float(uint(cbSceneParam._m0[85u].x * _817) / _2638)));
        float _2659 = (log2(_2625 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2660 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        uint _2663 = uint(isnan(14.0) ? _2660 : (isnan(_2660) ? 14.0 : min(_2660, 14.0)));
        uvec4 _2668 = texelFetch(g_lightClusterGridBuffer, int(((_2663 << 2u) + (_2649 << 6u)) >> 2u));
        uint _2669 = _2668.x;
        uint _2670 = _2637.z;
        float _2770;
        float _2772;
        float _2774;
        float _2776;
        float _2778;
        float _2780;
        if (((((1u << ((_2670 >> 4u) & 15u)) + 4294967295u) & _2669) == 0u) || ((_2670 & 240u) == 0u))
        {
            _2770 = 0.0;
            _2772 = 0.0;
            _2774 = 0.0;
            _2776 = 0.0;
            _2778 = 0.0;
            _2780 = 0.0;
        }
        else
        {
            float _2771;
            float _2773;
            float _2775;
            float _2777;
            float _2779;
            float _2781;
            float _2923 = 0.0;
            float _2924 = 0.0;
            float _2925 = 0.0;
            float _2926 = 0.0;
            float _2927 = 0.0;
            float _2928 = 0.0;
            uint _2929 = 0u;
            uint _2938;
            bool _2939;
            for (;;)
            {
                _2938 = texelFetch(g_lightClassification, int((((_2663 << 5u) + (_2649 << 9u)) + (_2929 << 2u)) >> 2u)).x;
                _2939 = _2938 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2939)
                {
                    frontier_phi_66_pred = _2923;
                    frontier_phi_66_pred_1 = _2928;
                    frontier_phi_66_pred_2 = _2927;
                    frontier_phi_66_pred_3 = _2926;
                    frontier_phi_66_pred_4 = _2925;
                    frontier_phi_66_pred_5 = _2924;
                }
                else
                {
                    float _3068;
                    float _3069;
                    float _3070;
                    float _3071;
                    float _3072;
                    float _3073;
                    uint _3074;
                    _3068 = _2923;
                    _3069 = _2924;
                    _3070 = _2925;
                    _3071 = _2926;
                    _3072 = _2927;
                    _3073 = _2928;
                    _3074 = _2938;
                    float _2995;
                    float _2996;
                    float _2997;
                    float _2998;
                    float _2999;
                    float _3000;
                    for (;;)
                    {
                        uint _3078 = uint(findLSB(_3074)) + (_2929 << 5u);
                        uint _3075 = (_3074 + 4294967295u) & _3074;
                        uint _3080 = _3078 * 48u;
                        vec4 _3094 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3080)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 3u)).x));
                        uint _3100 = (_3078 * 48u) + 4u;
                        vec4 _3113 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3100)).x, texelFetch(g_PointLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3100 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3100 + 3u)).x));
                        uint _3119 = (_3078 * 48u) + 8u;
                        vec3 _3130 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3119)).x, texelFetch(g_PointLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3119 + 2u)).x));
                        float _3134 = _3094.x - _2623;
                        float _3135 = _3094.y - _2624;
                        float _3136 = _3094.z - _2625;
                        float _3137 = dot(vec3(_3134, _3135, _3136), vec3(_3134, _3135, _3136));
                        float _3140 = inversesqrt(_3137);
                        float _3141 = _3140 * _3134;
                        float _3142 = _3140 * _3135;
                        float _3143 = _3140 * _3136;
                        float _3144 = dot(vec3(_836, _839, _842), vec3(_3141, _3142, _3143));
                        float _3149 = 1.0 - (_3137 * _3094.w);
                        float _4528 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                        float _3150 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
                        float _3151 = sqrt(_3137) * _3113.w;
                        float _3154 = 1.39999997615814208984375 / (_3151 + 1.39999997615814208984375);
                        float _3155 = _3154 * _3154;
                        float _3158 = ((1.0 - _3155) * _3144) + _3155;
                        float _3161 = _3151 * _3151;
                        float _3165 = ((isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0))) * _3150) / ((_3161 * 0.699999988079071044921875) + 1.0);
                        float _3169 = (-0.0) - _2623;
                        float _3170 = (-0.0) - _2624;
                        float _3171 = (-0.0) - _2625;
                        float _3175 = inversesqrt(dot(vec3(_3169, _3170, _3171), vec3(_3169, _3170, _3171)));
                        float _3176 = _3175 * _3169;
                        float _3177 = _3175 * _3170;
                        float _3178 = _3175 * _3171;
                        float _3186 = exp2(log2(1.0 / ((_3161 * 3.5) + 5.0)) * 0.25);
                        float _3187 = 1.0 - _911;
                        float _3194 = sqrt(1.0 - ((1.0 - (_3187 * _3187)) * (1.0 - (_3186 * _3186))));
                        float _3195 = _3194 * _3194;
                        float _3196 = _3195 * _3195;
                        float _3197 = _3176 + _3141;
                        float _3198 = _3177 + _3142;
                        float _3199 = _3178 + _3143;
                        float _3203 = inversesqrt(dot(vec3(_3197, _3198, _3199), vec3(_3197, _3198, _3199)));
                        float _3207 = dot(vec3(_836, _839, _842), vec3(_3176, _3177, _3178));
                        float _4544 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                        float _3210 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
                        float _3211 = dot(vec3(_836, _839, _842), vec3(_3203 * _3197, _3203 * _3198, _3203 * _3199));
                        float _4555 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                        float _3214 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                        float _3218 = ((_3214 * _3214) * (_3196 + (-1.0))) + 1.0;
                        float _3219 = _3154 * _3195;
                        float _3220 = _3219 * _3219;
                        float _3223 = ((1.0 - _3220) * _3144) + _3220;
                        float _4566 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                        float _3224 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                        float _3225 = 1.0 - _3195;
                        float _3235 = (0.5 / (((_3224 * ((_3210 * _3225) + _3195)) + 9.9999999392252902907785028219223e-09) + (((_3224 * _3225) + _3195) * _3210))) * _3224;
                        float _4577 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                        float _3246 = (((_3196 * 3.1415927410125732421875) * (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0)))) / ((_3218 * _3218) * ((_3161 * 2.1991131305694580078125) + 3.141590118408203125))) * _3150;
                        _2998 = (_3165 * _3113.x) + _3071;
                        _2999 = (_3165 * _3113.y) + _3072;
                        _3000 = (_3165 * _3113.z) + _3073;
                        _2995 = (_3246 * _3130.x) + _3068;
                        _2996 = (_3246 * _3130.y) + _3069;
                        _2997 = (_3246 * _3130.z) + _3070;
                        if (_3075 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3068 = _2995;
                            _3069 = _2996;
                            _3070 = _2997;
                            _3071 = _2998;
                            _3072 = _2999;
                            _3073 = _3000;
                            _3074 = _3075;
                        }
                    }
                    frontier_phi_66_pred = _2995;
                    frontier_phi_66_pred_1 = _3000;
                    frontier_phi_66_pred_2 = _2999;
                    frontier_phi_66_pred_3 = _2998;
                    frontier_phi_66_pred_4 = _2997;
                    frontier_phi_66_pred_5 = _2996;
                }
                _2771 = frontier_phi_66_pred;
                _2781 = frontier_phi_66_pred_1;
                _2779 = frontier_phi_66_pred_2;
                _2777 = frontier_phi_66_pred_3;
                _2775 = frontier_phi_66_pred_4;
                _2773 = frontier_phi_66_pred_5;
                uint _2930 = _2929 + 1u;
                if (_2930 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2923 = _2771;
                    _2924 = _2773;
                    _2925 = _2775;
                    _2926 = _2777;
                    _2927 = _2779;
                    _2928 = _2781;
                    _2929 = _2930;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2770 = _2771;
            _2772 = _2773;
            _2774 = _2775;
            _2776 = _2777;
            _2778 = _2779;
            _2780 = _2781;
        }
        uvec4 _2784 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2785 = _2784.z;
        uint _2787 = (_2785 >> 8u) & 15u;
        float _2891;
        float _2893;
        float _2895;
        float _2897;
        float _2899;
        float _2901;
        if (((4294967295u << _2787) & _2669) == 0u)
        {
            _2891 = _2770;
            _2893 = _2772;
            _2895 = _2774;
            _2897 = _2776;
            _2899 = _2778;
            _2901 = _2780;
        }
        else
        {
            float _2916 = inversesqrt(dot(vec3(_2623, _2624, _2625), vec3(_2623, _2624, _2625)));
            float _2917 = _2916 * _2623;
            float _2918 = _2916 * _2624;
            float _2919 = _2916 * _2625;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2787 < ((_2785 >> 12u) & 15u))
            {
                float _2892;
                float _2894;
                float _2896;
                float _2898;
                float _2900;
                float _2902;
                float _3051 = _2770;
                float _3052 = _2772;
                float _3053 = _2774;
                float _3054 = _2776;
                float _3055 = _2778;
                float _3056 = _2780;
                uint _3057 = _2787;
                uint _3066;
                bool _3067;
                for (;;)
                {
                    _3066 = texelFetch(g_lightClassification, int((((_2663 << 5u) + (_2649 << 9u)) + (_3057 << 2u)) >> 2u)).x;
                    _3067 = _3066 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3067)
                    {
                        frontier_phi_77_pred = _3056;
                        frontier_phi_77_pred_1 = _3055;
                        frontier_phi_77_pred_2 = _3054;
                        frontier_phi_77_pred_3 = _3053;
                        frontier_phi_77_pred_4 = _3052;
                        frontier_phi_77_pred_5 = _3051;
                    }
                    else
                    {
                        float _3260;
                        float _3261;
                        float _3262;
                        float _3263;
                        float _3264;
                        float _3265;
                        float _3553;
                        float _3554;
                        float _3555;
                        float _3556;
                        float _3557;
                        float _3558;
                        float _3273 = _3051;
                        float _3274 = _3052;
                        float _3275 = _3053;
                        float _3276 = _3054;
                        float _3277 = _3055;
                        float _3278 = _3056;
                        uint _3279 = _3066;
                        uint _3280;
                        vec4 _3305;
                        float _3306;
                        vec4 _3321;
                        vec3 _3333;
                        vec4 _3348;
                        vec4 _3363;
                        float _3409;
                        bool _3410;
                        for (;;)
                        {
                            uint _3290 = ((_3057 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3279));
                            _3280 = (_3279 + 4294967295u) & _3279;
                            uint _3292 = _3290 * 40u;
                            _3305 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3292)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 3u)).x));
                            _3306 = _3305.w;
                            uint _3308 = (_3290 * 40u) + 4u;
                            _3321 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3308)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 3u)).x));
                            uint _3323 = (_3290 * 40u) + 8u;
                            _3333 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x));
                            uint _3335 = (_3290 * 40u) + 16u;
                            _3348 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3335)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 3u)).x));
                            uint _3350 = (_3290 * 40u) + 20u;
                            _3363 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3350)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 3u)).x));
                            uint _3365 = (_3290 * 40u) + 24u;
                            vec4 _3378 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3365)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 3u)).x));
                            uint _3384 = (_3290 * 40u) + 28u;
                            vec4 _3397 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3384)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 3u)).x));
                            _3409 = fma(_2625, _3397.z, fma(_2624, _3397.y, _3397.x * _2623)) + _3397.w;
                            _3410 = !((fma(_2625, _3378.z, fma(_2624, _3378.y, _3378.x * _2623)) + _3378.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3410)
                            {
                                float _3437 = _3305.x - _2623;
                                float _3438 = _3305.y - _2624;
                                float _3439 = _3305.z - _2625;
                                float _3440 = dot(vec3(_3437, _3438, _3439), vec3(_3437, _3438, _3439));
                                float _3443 = inversesqrt(_3440);
                                float _3444 = _3443 * _3437;
                                float _3445 = _3443 * _3438;
                                float _3446 = _3443 * _3439;
                                float _3450 = 1.0 - (_3440 / (_3306 * _3306));
                                float _4588 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                                float _3451 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                                float _3455 = sqrt(_3440) * _3321.w;
                                float _3457 = 1.39999997615814208984375 / (_3455 + 1.39999997615814208984375);
                                float _3458 = _3457 * _3457;
                                float _3461 = ((1.0 - _3458) * dot(vec3(_3444, _3445, _3446), vec3(_836, _839, _842))) + _3458;
                                float _3464 = _3455 * _3455;
                                float _3468 = (fma(_2625, _3348.z, fma(_2624, _3348.y, _3348.x * _2623)) + _3348.w) / _3409;
                                float _3469 = (fma(_2625, _3363.z, fma(_2624, _3363.y, _3363.x * _2623)) + _3363.w) / _3409;
                                float _3473 = 1.0 - dot(vec2(_3468, _3469), vec2(_3468, _3469));
                                float _4604 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                                float _3474 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
                                float _3475 = _3474 * (((isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0))) * _3451) / ((_3464 * 0.699999988079071044921875) + 1.0));
                                float _3487 = exp2(log2(1.0 / ((_3464 * 3.5) + 5.0)) * 0.25);
                                float _3488 = 1.0 - _911;
                                float _3495 = sqrt(1.0 - ((1.0 - (_3488 * _3488)) * (1.0 - (_3487 * _3487))));
                                float _3496 = _3495 * _3495;
                                float _3497 = _3496 * _3496;
                                float _3498 = _3444 - _2917;
                                float _3499 = _3445 - _2918;
                                float _3500 = _3446 - _2919;
                                float _3504 = inversesqrt(dot(vec3(_3498, _3499, _3500), vec3(_3498, _3499, _3500)));
                                float _3508 = dot(vec3(_836, _839, _842), vec3((-0.0) - _2917, (-0.0) - _2918, (-0.0) - _2919));
                                float _4615 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0));
                                float _3511 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
                                float _3512 = dot(vec3(_836, _839, _842), vec3(_3504 * _3498, _3504 * _3499, _3504 * _3500));
                                float _4626 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                                float _3515 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                                float _3519 = ((_3515 * _3515) * (_3497 + (-1.0))) + 1.0;
                                float _3520 = _3457 * _3496;
                                float _3521 = _3520 * _3520;
                                float _3527 = ((1.0 - _3521) * dot(vec3(_836, _839, _842), vec3(_3444, _3445, _3446))) + _3521;
                                float _4637 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                                float _3528 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                                float _3529 = 1.0 - _3496;
                                float _3539 = (0.5 / (((_3528 * ((_3511 * _3529) + _3496)) + 9.9999999392252902907785028219223e-09) + (((_3528 * _3529) + _3496) * _3511))) * _3528;
                                float _4648 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                                float _3549 = (_3474 * _3451) * (((_3497 * 3.1415927410125732421875) * (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0)))) / ((_3519 * _3519) * ((_3464 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3475 * _3321.y;
                                frontier_phi_83_pred_1 = _3475 * _3321.x;
                                frontier_phi_83_pred_2 = _3549 * _3333.z;
                                frontier_phi_83_pred_3 = _3549 * _3333.y;
                                frontier_phi_83_pred_4 = _3549 * _3333.x;
                                frontier_phi_83_pred_5 = _3475 * _3321.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3557 = frontier_phi_83_pred;
                            _3556 = frontier_phi_83_pred_1;
                            _3555 = frontier_phi_83_pred_2;
                            _3554 = frontier_phi_83_pred_3;
                            _3553 = frontier_phi_83_pred_4;
                            _3558 = frontier_phi_83_pred_5;
                            _3263 = _3556 + _3276;
                            _3264 = _3557 + _3277;
                            _3265 = _3558 + _3278;
                            _3260 = _3553 + _3273;
                            _3261 = _3554 + _3274;
                            _3262 = _3555 + _3275;
                            if (_3280 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3273 = _3260;
                                _3274 = _3261;
                                _3275 = _3262;
                                _3276 = _3263;
                                _3277 = _3264;
                                _3278 = _3265;
                                _3279 = _3280;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3265;
                        frontier_phi_77_pred_1 = _3264;
                        frontier_phi_77_pred_2 = _3263;
                        frontier_phi_77_pred_3 = _3262;
                        frontier_phi_77_pred_4 = _3261;
                        frontier_phi_77_pred_5 = _3260;
                    }
                    _2902 = frontier_phi_77_pred;
                    _2900 = frontier_phi_77_pred_1;
                    _2898 = frontier_phi_77_pred_2;
                    _2896 = frontier_phi_77_pred_3;
                    _2894 = frontier_phi_77_pred_4;
                    _2892 = frontier_phi_77_pred_5;
                    uint _3058 = _3057 + 1u;
                    if (_3058 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3051 = _2892;
                        _3052 = _2894;
                        _3053 = _2896;
                        _3054 = _2898;
                        _3055 = _2900;
                        _3056 = _2902;
                        _3057 = _3058;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2896;
                frontier_phi_58_59_ladder_1 = _2902;
                frontier_phi_58_59_ladder_2 = _2900;
                frontier_phi_58_59_ladder_3 = _2898;
                frontier_phi_58_59_ladder_4 = _2894;
                frontier_phi_58_59_ladder_5 = _2892;
            }
            else
            {
                frontier_phi_58_59_ladder = _2774;
                frontier_phi_58_59_ladder_1 = _2780;
                frontier_phi_58_59_ladder_2 = _2778;
                frontier_phi_58_59_ladder_3 = _2776;
                frontier_phi_58_59_ladder_4 = _2772;
                frontier_phi_58_59_ladder_5 = _2770;
            }
            _2891 = frontier_phi_58_59_ladder_5;
            _2893 = frontier_phi_58_59_ladder_4;
            _2895 = frontier_phi_58_59_ladder;
            _2897 = frontier_phi_58_59_ladder_3;
            _2899 = frontier_phi_58_59_ladder_2;
            _2901 = frontier_phi_58_59_ladder_1;
        }
        float _2906 = isnan(1.0) ? _895 : (isnan(_895) ? 1.0 : min(_895, 1.0));
        _2682 = (_2906 * _2897) + _2115;
        _2684 = (_2906 * _2899) + _2117;
        _2686 = (_2906 * _2901) + _2119;
        _2688 = ((_2891 * _879) * _2906) + _2463;
        _2690 = ((_2893 * _881) * _2906) + _2465;
        _2692 = ((_2895 * _882) * _2906) + _2467;
    }
    else
    {
        _2682 = _2115;
        _2684 = _2117;
        _2686 = _2119;
        _2688 = _2463;
        _2690 = _2465;
        _2692 = _2467;
    }
    float _4664 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _4675 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _4686 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _2709 = ((isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))) * (_2682 + ((isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) * _895))) + ((_2688 + ((isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0))) * _1734)) * cbPerFrame._m0[3u].x);
    float _2710 = ((isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * (_2684 + ((isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))) * _895))) + ((_2690 + ((isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0))) * _1734)) * cbPerFrame._m0[3u].x);
    float _2711 = ((isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * (_2686 + ((isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))) * _895))) + ((_2692 + ((isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0))) * _1734)) * cbPerFrame._m0[3u].x);
    uint _2712 = _248 + 6u;
    float _2720 = _817 / cbSceneParam._m0[86u].x;
    float _2721 = _818 / cbSceneParam._m0[86u].y;
    vec4 _2735 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2720, _2721, (log2((isnan(cbSceneParam._m0[77u].w) ? _739 : (isnan(_739) ? cbSceneParam._m0[77u].w : min(_739, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2737 = _2735.x;
    float _2738 = _2735.y;
    float _2739 = _2735.z;
    float _2740 = _2735.w;
    float _2833;
    float _2835;
    float _2837;
    float _2839;
    if (_739 > cbSceneParam._m0[78u].w)
    {
        float _2795 = isnan(_739) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _739 : min(cbSceneParam._m0[80u].w, _739));
        float _2796 = _2795 / _739;
        float _2807 = _2796 * _790;
        float _2808 = _791 * _2796;
        float _2809 = (-0.0) - _2808;
        float _2811 = _2796 * _792;
        float _2813 = (cbSceneParam._m0[77u].w * _2809) / _2795;
        float _2814 = _2813 + cbSceneParam._m0[79u].w;
        float _2815 = cbSceneParam._m0[79u].w - _2808;
        float _2821 = sqrt(((_2807 * _2807) + (_2808 * _2808)) + (_2811 * _2811));
        float _2824 = (1.0 - (cbSceneParam._m0[77u].w / _2795)) * _2821;
        float _2829 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2831 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3008;
        if (abs((_2809 - _2813) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3008 = ((((_2814 > 0.0) ? exp2(_2829 * _2814) : (2.0 - exp2(_2831 * _2814))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2824;
        }
        else
        {
            float _2952 = 1.0 / cbSceneParam._m0[80u].x;
            float _2953 = isnan(_2815) ? _2814 : (isnan(_2814) ? _2815 : max(_2814, _2815));
            float _2954 = isnan(_2815) ? _2814 : (isnan(_2814) ? _2815 : min(_2814, _2815));
            float _2963 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : min(_2953, 0.0));
            float _2964 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : min(_2954, 0.0));
            _3008 = ((abs(_2821 / _2809) * cbSceneParam._m0[80u].y) * ((((_2963 - _2964) * 2.0) - ((exp2(_2829 * (isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0)))) - exp2(_2829 * (isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0))))) * _2952)) - ((exp2(_2831 * _2963) - exp2(_2831 * _2964)) * _2952))) + (_2824 * cbSceneParam._m0[80u].z);
        }
        vec4 _3010 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2720, _2721, 1.0), 0.0);
        float _3019 = exp2((_3008 * (-1.44269502162933349609375)) * (1.0 - _3010.w));
        float _3020 = log2(_3019);
        float _3036 = log2(_2740);
        _2833 = (exp2(_3036 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3020 * cbSceneParam._m0[78u].x)) * _3010.x) / cbSceneParam._m0[78u].x)) + _2737;
        _2835 = (exp2(_3036 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3020 * cbSceneParam._m0[78u].y)) * _3010.y) / cbSceneParam._m0[78u].y)) + _2738;
        _2837 = (exp2(_3036 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3020 * cbSceneParam._m0[78u].z)) * _3010.z) / cbSceneParam._m0[78u].z)) + _2739;
        _2839 = _3019 * _2740;
    }
    else
    {
        _2833 = _2737;
        _2835 = _2738;
        _2837 = _2739;
        _2839 = _2740;
    }
    bool _3046;
    vec4 _2849;
    vec4 _2871;
    float _2873;
    float _2877;
    float _2878;
    float _2879;
    float _2880;
    bool _2890;
    for (;;)
    {
        _2849 = cbMatDynParam._m0[0u];
        float _2851 = roundEven(_2849.y);
        bool _2852 = _2851 == 3.0;
        float _2853 = log2(_2839);
        float _2860 = exp2(_2853 * cbSceneParam._m0[78u].x) * _2709;
        float _2861 = exp2(_2853 * cbSceneParam._m0[78u].y) * _2710;
        float _2862 = exp2(_2853 * cbSceneParam._m0[78u].z) * _2711;
        float _2869 = _806 + (-0.5);
        _2871 = cbMtdParam._m0[1u];
        _2873 = _2871.y * _2869;
        float _2876 = (_2851 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2877 = _2876 * (_2852 ? _2860 : (_2860 + (cbSceneParam._m0[72u].w * _2833)));
        _2878 = _2876 * (_2852 ? _2861 : (_2861 + (cbSceneParam._m0[72u].w * _2835)));
        _2879 = _2876 * (_2852 ? _2862 : (_2862 + (cbSceneParam._m0[72u].w * _2837)));
        _2880 = _2869 * 0.999000012874603271484375;
        _2890 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2890)
        {
            if ((cbInstanceData._m0[_248 + 7u].x + _2880) < 0.5)
            {
                _3046 = true;
                break;
            }
        }
        uint _2987 = _855 + uint(_2849.w);
        if ((cbInstanceData._m0[_2987].w < 1.0) && ((cbInstanceData._m0[_2987].w + _2880) < 0.5))
        {
            _3046 = true;
            break;
        }
        if ((_2873 + 1.0) < _2871.x)
        {
            _3046 = true;
            break;
        }
        _3046 = false;
        break;
    }
    float _3251;
    if (_3046)
    {
        discard_state = true;
        _3251 = 0.0;
    }
    else
    {
        _3251 = cbInstanceData._m0[_2712].w;
    }
    SV_Target.x = _2877;
    SV_Target.y = _2878;
    SV_Target.z = _2879;
    SV_Target.w = _3251;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2712].w;
    discard_exit();
}


