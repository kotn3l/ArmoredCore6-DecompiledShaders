#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1337;
float _3999;
float _4000;
float _4001;
float _4002;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4011 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _4022 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _4033 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    uint _276 = uint(roundEven(NORMAL.w)) * 13u;
    uint _281 = _276 + 1u;
    uint _285 = _276 + 2u;
    float _294 = sqrt(((cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x)) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x));
    float _295 = _294 * TEXCOORD.z;
    float _296 = _294 * TEXCOORD.w;
    vec4 _309 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _295) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _296) + cbTextureTilingScale._m0[13u].w));
    vec4 _333 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _338 = _333.x * cbMtdParam._m0[11u].x;
    float _339 = _333.y * cbMtdParam._m0[11u].y;
    float _340 = _333.z * cbMtdParam._m0[11u].z;
    vec4 _359 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _295) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _296) + cbTextureTilingScale._m0[5u].w));
    vec4 _395 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _397 = _395.x;
    float _409 = dot(vec4(_397, _395.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _426 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_397 - _409) * cbMtdParam._m0[24u].y) + _409) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4044 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _427 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _434 = (_427 * ((_359.x * cbMtdParam._m0[12u].x) - _338)) + _338;
    float _435 = (_427 * ((_359.y * cbMtdParam._m0[12u].y) - _339)) + _339;
    float _436 = (_427 * ((_359.z * cbMtdParam._m0[12u].z) - _340)) + _340;
    float _440 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _309.x) * _434;
    float _443 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _309.y) * _435;
    float _446 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _309.z) * _436;
    float _453 = ((_434 - _440) * (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0)))) + _440;
    float _454 = ((_435 - _443) * (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) + _443;
    float _455 = ((_436 - _446) * (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0)))) + _446;
    vec4 _474 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _295) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _296) + cbTextureTilingScale._m0[14u].w));
    vec4 _494 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _295) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _296) + cbTextureTilingScale._m0[20u].w));
    vec4 _519 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _295) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _296) + cbTextureTilingScale._m0[4u].w));
    vec4 _536 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _538 = _536.x;
    float _539 = _536.y;
    float _540 = _536.z;
    float _549 = ((_519.z - _540) * _427) + _540;
    float _552 = ((((_519.x - _538) * _427) + _538) * 2.0) + (-1.0);
    float _553 = ((((_519.y - _539) * _427) + _539) * 2.0) + (-1.0);
    float _554 = dot(vec2(_552, _553), vec2(_552, _553));
    float _4055 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _559 = sqrt(1.0 - (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))));
    vec4 _575 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _600 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _295) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _296) + cbTextureTilingScale._m0[11u].w));
    float _602 = _600.x;
    float _603 = 1.0 - _602;
    float _616 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_602 - _603) * cbMtdParam._m0[24u].z) + _603) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4066 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _617 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    float _624 = (_617 * ((_474.x * cbMtdParam._m0[18u].x) - _453)) + _453;
    float _625 = (_617 * ((_474.y * cbMtdParam._m0[18u].y) - _454)) + _454;
    float _626 = (_617 * ((_474.z * cbMtdParam._m0[18u].z) - _455)) + _455;
    vec4 _638 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _652 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _654 = _652.x;
    float _672 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _295) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _296) + cbTextureTilingScale._m0[9u].w)).x - _654) * _427) + _654;
    float _676 = ((_638.x - _672) * cbMtdParam._m0[19u].z) + _672;
    float _678 = _676 - (_676 * _617);
    float _683 = (((_494.z - _549) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _549;
    float _687 = ((_575.z - _683) * cbMtdParam._m0[19u].w) + _683;
    vec4 _700 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _295) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _296) + cbTextureTilingScale._m0[15u].w));
    float _707 = (_700.x * 2.0) + (-1.0);
    float _708 = (_700.y * 2.0) + (-1.0);
    float _709 = dot(vec2(_707, _708), vec2(_707, _708));
    float _4077 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _717 = (_617 * (_700.z - _687)) + _687;
    float _726 = (_552 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_494.x * 2.0) + (-1.0)))) + (((_575.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _727 = (_553 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_494.y * 2.0) + (-1.0)))) + (((_575.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _739 = (((_707 - _726) + (cbMtdParam._m0[21u].x * _726)) * _617) + _726;
    float _740 = (((_708 - _727) + (cbMtdParam._m0[21u].x * _727)) * _617) + _727;
    float _741 = (_617 * (sqrt(1.0 - (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0)))) - _559)) + _559;
    float _743 = cbMtdParam._m0[22u].x + _575.w;
    float _746 = fma(_741, _242 * NORMAL.x, fma(_740, _249 * TANGENT.x, (_235 * _227) * _739));
    float _749 = fma(_741, _242 * NORMAL.y, fma(_740, _249 * TANGENT.y, (_235 * _228) * _739));
    float _752 = fma(_741, _242 * NORMAL.z, fma(_740, _249 * TANGENT.z, (_235 * _229) * _739));
    float _756 = inversesqrt(dot(vec3(_746, _749, _752), vec3(_746, _749, _752)));
    float _757 = _756 * _746;
    float _758 = _756 * _749;
    float _759 = _756 * _752;
    float _4088 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _760 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _4099 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _4110 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _4121 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _4132 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _4143 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _765 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _779 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _820 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _830 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _820);
    float _831 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _820);
    float _832 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _820);
    float _836 = inversesqrt(dot(vec3(_830, _831, _832), vec3(_830, _831, _832)));
    float _837 = _830 * _836;
    float _838 = _831 * _836;
    float _839 = _832 * _836;
    vec4 _844 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _846 = _844.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1018 = sqrt(((_830 * _830) + (_831 * _831)) + (_832 * _832));
        float _1024 = (cbMatDynParam._m0[5u].x * _1018) + cbMatDynParam._m0[5u].y;
        float _4154 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1029 = (cbMatDynParam._m0[5u].z * _1018) + cbMatDynParam._m0[5u].w;
        float _4165 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) - _1025)) + _1025) < ((_846 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _857 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _858 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _876 = fma(_759, cbSceneParam._m0[5u].z, fma(_758, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _757));
    float _879 = fma(_759, cbSceneParam._m0[6u].z, fma(_758, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _757));
    float _882 = fma(_759, cbSceneParam._m0[7u].z, fma(_758, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _757));
    uint _895 = _276 + 9u;
    uint _896 = _895 + uint(cbMatDynParam._m0[0u].w);
    float _902 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0)))) * cbInstanceData._m0[_896].x;
    float _903 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0)))) * cbInstanceData._m0[_896].y;
    float _904 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) * cbInstanceData._m0[_896].z;
    float _4176 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _905 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _4187 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _906 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _4198 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _907 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
    float _908 = 1.0 - _765;
    float _909 = _905 * _908;
    float _910 = _906 * _908;
    float _911 = _907 * _908;
    float _916 = (_905 + (-0.039999999105930328369140625)) * _765;
    float _917 = (_906 + (-0.039999999105930328369140625)) * _765;
    float _918 = (_907 + (-0.039999999105930328369140625)) * _765;
    float _919 = _916 + 0.039999999105930328369140625;
    float _921 = _917 + 0.039999999105930328369140625;
    float _922 = _918 + 0.039999999105930328369140625;
    vec4 _931 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _857, cbSceneParam._m0[86u].y * _858));
    float _935 = ((isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * TEXCOORD_5.w) * _931.x;
    float _936 = dot(vec3(_757, _758, _759), vec3(_837, _838, _839));
    float _939 = _936 * 2.0;
    float _943 = (_939 * _757) - _837;
    float _944 = (_939 * _758) - _838;
    float _945 = (_939 * _759) - _839;
    float _949 = abs(dot(vec3(_837, _838, _839), vec3(_757, _758, _759)));
    float _4209 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _951 = sqrt(_760);
    float _964 = exp2((_951 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_951 * 3.0));
    float _970 = (1.0 - _964) * ((_951 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _971 = _964 * _951;
    float _999 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1003 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1007 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1336;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1061 = fma(_1007, cbModelParam._m0[26u].z, fma(_1003, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _999));
        float _1065 = fma(_1007, cbModelParam._m0[27u].z, fma(_1003, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _999));
        float _1069 = fma(_1007, cbModelParam._m0[28u].z, fma(_1003, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _999));
        float _1094 = _999 + _757;
        float _1095 = _1003 + _758;
        float _1096 = _1007 + _759;
        float _1106 = fma(_1096, cbModelParam._m0[26u].z, fma(_1095, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1094)) - _1061;
        float _1107 = fma(_1096, cbModelParam._m0[27u].z, fma(_1095, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1094)) - _1065;
        float _1108 = fma(_1096, cbModelParam._m0[28u].z, fma(_1095, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1094)) - _1069;
        float _1112 = inversesqrt(dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108)));
        float _1125 = ((_1112 * _1106) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1061 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1126 = ((_1112 * _1107) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1065 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1127 = ((_1112 * _1108) / cbModelParam._m0[34u].z) + ((((((_1069 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        float _1164 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1130.x + (-0.5));
        float _1166 = _1164 * (_1130.y + (-0.5));
        float _1167 = _1164 * (_1130.z + (-0.5));
        float _1174 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1137.x + (-0.5));
        float _1176 = _1174 * (_1137.y + (-0.5));
        float _1177 = _1174 * (_1137.z + (-0.5));
        float _1184 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1144.x + (-0.5));
        float _1186 = _1184 * (_1144.y + (-0.5));
        float _1187 = _1184 * (_1144.z + (-0.5));
        float _1194 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1151.x + (-0.5));
        float _1196 = _1194 * (_1151.y + (-0.5));
        float _1197 = _1194 * (_1151.z + (-0.5));
        float _1198 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1199 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1200 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1201 = _1165 * 0.5;
        float _1202 = _1175 * 0.5;
        float _1203 = _1185 * 0.5;
        float _1204 = dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203));
        float _1209 = (_1204 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1204);
        float _1218 = (dot(vec3(_757, _758, _759), vec3(_1209 * _1201, _1209 * _1202, _1209 * _1203)) + 1.0) * 0.5;
        float _4235 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1228 = sqrt(((_1202 * _1202) + (_1201 * _1201)) + (_1203 * _1203)) / (_1198 + 9.9999997473787516355514526367188e-06);
        float _4246 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1230 = _1229 * 2.0;
        float _1234 = (1.0 - _1229) / (_1229 + 1.0);
        float _4257 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1244 = ((((1.0 - _1235) * (_1230 + 2.0)) * exp2(log2(isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_1230 + 1.0))) + _1235) * _1198;
        float _1245 = _1166 * 0.5;
        float _1246 = _1176 * 0.5;
        float _1247 = _1186 * 0.5;
        float _1248 = dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247));
        float _1253 = (_1248 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1248);
        float _1261 = (dot(vec3(_757, _758, _759), vec3(_1253 * _1245, _1253 * _1246, _1253 * _1247)) + 1.0) * 0.5;
        float _4268 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1270 = sqrt(((_1246 * _1246) + (_1245 * _1245)) + (_1247 * _1247)) / (_1199 + 9.9999997473787516355514526367188e-06);
        float _4279 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1272 = _1271 * 2.0;
        float _1276 = (1.0 - _1271) / (_1271 + 1.0);
        float _4290 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1286 = ((((1.0 - _1277) * (_1272 + 2.0)) * exp2(log2(isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_1272 + 1.0))) + _1277) * _1199;
        float _1287 = _1167 * 0.5;
        float _1288 = _1177 * 0.5;
        float _1289 = _1187 * 0.5;
        float _1290 = dot(vec3(_1287, _1288, _1289), vec3(_1287, _1288, _1289));
        float _1295 = (_1290 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1290);
        float _1303 = (dot(vec3(_757, _758, _759), vec3(_1295 * _1287, _1295 * _1288, _1295 * _1289)) + 1.0) * 0.5;
        float _4301 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1312 = sqrt(((_1288 * _1288) + (_1287 * _1287)) + (_1289 * _1289)) / (_1200 + 9.9999997473787516355514526367188e-06);
        float _4312 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1314 = _1313 * 2.0;
        float _1318 = (1.0 - _1313) / (_1313 + 1.0);
        float _4323 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1328 = ((((1.0 - _1319) * (_1314 + 2.0)) * exp2(log2(isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_1314 + 1.0))) + _1319) * _1200;
        _1336 = _1167;
        _1338 = _1166;
        _1339 = _1165;
        _1340 = _1177;
        _1341 = _1176;
        _1342 = _1175;
        _1343 = _1187;
        _1344 = _1186;
        _1345 = _1185;
        _1346 = _1200;
        _1347 = _1199;
        _1348 = _1198;
        _1349 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)));
        _1350 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)));
        _1351 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)));
    }
    else
    {
        _1336 = _1337;
        _1338 = _1337;
        _1339 = _1337;
        _1340 = _1337;
        _1341 = _1337;
        _1342 = _1337;
        _1343 = _1337;
        _1344 = _1337;
        _1345 = _1337;
        _1346 = _1337;
        _1347 = _1337;
        _1348 = _1337;
        _1349 = 0.0;
        _1350 = 0.0;
        _1351 = 0.0;
    }
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1379 = fma(_1007, cbModelParam._m0[30u].z, fma(_1003, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _999));
        float _1383 = fma(_1007, cbModelParam._m0[31u].z, fma(_1003, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _999));
        float _1387 = fma(_1007, cbModelParam._m0[32u].z, fma(_1003, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _999));
        float _1410 = _999 + _757;
        float _1411 = _1003 + _758;
        float _1412 = _1007 + _759;
        float _1422 = fma(_1412, cbModelParam._m0[30u].z, fma(_1411, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1410)) - _1379;
        float _1423 = fma(_1412, cbModelParam._m0[31u].z, fma(_1411, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1410)) - _1383;
        float _1424 = fma(_1412, cbModelParam._m0[32u].z, fma(_1411, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1410)) - _1387;
        float _1428 = inversesqrt(dot(vec3(_1422, _1423, _1424), vec3(_1422, _1423, _1424)));
        float _1441 = ((_1428 * _1422) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1379 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1442 = ((_1428 * _1423) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1383 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1443 = ((_1428 * _1424) / cbModelParam._m0[35u].z) + ((((((_1387 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1445 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        vec4 _1452 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        vec4 _1459 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        vec4 _1466 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        float _1478 = exp2((_1445.w + (-0.5)) * 20.0) * 2.0;
        float _1479 = _1478 * (_1445.x + (-0.5));
        float _1480 = _1478 * (_1445.y + (-0.5));
        float _1481 = _1478 * (_1445.z + (-0.5));
        float _1488 = exp2((_1452.w + (-0.5)) * 20.0) * 2.0;
        float _1489 = _1488 * (_1452.x + (-0.5));
        float _1490 = _1488 * (_1452.y + (-0.5));
        float _1491 = _1488 * (_1452.z + (-0.5));
        float _1498 = exp2((_1459.w + (-0.5)) * 20.0) * 2.0;
        float _1499 = _1498 * (_1459.x + (-0.5));
        float _1500 = _1498 * (_1459.y + (-0.5));
        float _1501 = _1498 * (_1459.z + (-0.5));
        float _1508 = exp2((_1466.w + (-0.5)) * 20.0) * 2.0;
        float _1509 = _1508 * (_1466.x + (-0.5));
        float _1510 = _1508 * (_1466.y + (-0.5));
        float _1511 = _1508 * (_1466.z + (-0.5));
        float _1512 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1513 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1514 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1515 = _1479 * 0.5;
        float _1516 = _1489 * 0.5;
        float _1517 = _1499 * 0.5;
        float _1518 = dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517));
        float _1523 = (_1518 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1518);
        float _1531 = (dot(vec3(_757, _758, _759), vec3(_1523 * _1515, _1523 * _1516, _1523 * _1517)) + 1.0) * 0.5;
        float _4364 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1540 = sqrt(((_1516 * _1516) + (_1515 * _1515)) + (_1517 * _1517)) / (_1512 + 9.9999997473787516355514526367188e-06);
        float _4375 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _1542 = _1541 * 2.0;
        float _1546 = (1.0 - _1541) / (_1541 + 1.0);
        float _4386 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _1556 = ((((1.0 - _1547) * (_1542 + 2.0)) * exp2(log2(isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * (_1542 + 1.0))) + _1547) * _1512;
        float _1557 = _1480 * 0.5;
        float _1558 = _1490 * 0.5;
        float _1559 = _1500 * 0.5;
        float _1560 = dot(vec3(_1557, _1558, _1559), vec3(_1557, _1558, _1559));
        float _1565 = (_1560 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1560);
        float _1573 = (dot(vec3(_757, _758, _759), vec3(_1565 * _1557, _1565 * _1558, _1565 * _1559)) + 1.0) * 0.5;
        float _4397 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1582 = sqrt(((_1558 * _1558) + (_1557 * _1557)) + (_1559 * _1559)) / (_1513 + 9.9999997473787516355514526367188e-06);
        float _4408 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _1584 = _1583 * 2.0;
        float _1588 = (1.0 - _1583) / (_1583 + 1.0);
        float _4419 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _1598 = ((((1.0 - _1589) * (_1584 + 2.0)) * exp2(log2(isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_1584 + 1.0))) + _1589) * _1513;
        float _1599 = _1481 * 0.5;
        float _1600 = _1491 * 0.5;
        float _1601 = _1501 * 0.5;
        float _1602 = dot(vec3(_1599, _1600, _1601), vec3(_1599, _1600, _1601));
        float _1607 = (_1602 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1602);
        float _1615 = (dot(vec3(_757, _758, _759), vec3(_1607 * _1599, _1607 * _1600, _1607 * _1601)) + 1.0) * 0.5;
        float _4430 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1624 = sqrt(((_1600 * _1600) + (_1599 * _1599)) + (_1601 * _1601)) / (_1514 + 9.9999997473787516355514526367188e-06);
        float _4441 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
        float _1626 = _1625 * 2.0;
        float _1630 = (1.0 - _1625) / (_1625 + 1.0);
        float _4452 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _1640 = ((((1.0 - _1631) * (_1626 + 2.0)) * exp2(log2(isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_1626 + 1.0))) + _1631) * _1514;
        _1648 = _1481;
        _1649 = _1480;
        _1650 = _1479;
        _1651 = _1491;
        _1652 = _1490;
        _1653 = _1489;
        _1654 = _1501;
        _1655 = _1500;
        _1656 = _1499;
        _1657 = _1514;
        _1658 = _1513;
        _1659 = _1512;
        _1660 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)));
        _1661 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)));
        _1662 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)));
    }
    else
    {
        _1648 = _1337;
        _1649 = _1337;
        _1650 = _1337;
        _1651 = _1337;
        _1652 = _1337;
        _1653 = _1337;
        _1654 = _1337;
        _1655 = _1337;
        _1656 = _1337;
        _1657 = _1337;
        _1658 = _1337;
        _1659 = _1337;
        _1660 = 0.0;
        _1661 = 0.0;
        _1662 = 0.0;
    }
    float _1672 = (cbModelParam._m0[1u].x * (_1660 - _1349)) + _1349;
    float _1673 = (cbModelParam._m0[1u].x * (_1661 - _1350)) + _1350;
    float _1674 = (cbModelParam._m0[1u].x * (_1662 - _1351)) + _1351;
    float _1695 = fma(_1674, cbSceneParam._m0[89u].z, fma(_1673, cbSceneParam._m0[89u].y, _1672 * cbSceneParam._m0[89u].x));
    float _1698 = fma(_1674, cbSceneParam._m0[90u].z, fma(_1673, cbSceneParam._m0[90u].y, _1672 * cbSceneParam._m0[90u].x));
    float _1701 = fma(_1674, cbSceneParam._m0[91u].z, fma(_1673, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1672));
    float _1716 = _943 * 0.5;
    float _1717 = _944 * 0.5;
    float _1718 = _945 * 0.5;
    float _1719 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1650, _1653, _1656, _1659));
    float _1722 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1649, _1652, _1655, _1658));
    float _1725 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1648, _1651, _1654, _1657));
    float _1759;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1732 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1336, _1340, _1343, _1346));
        float _1736 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1338, _1341, _1344, _1347));
        float _1740 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1339, _1342, _1345, _1348));
        float _1747 = dot(vec4(cbModelParam._m0[39u]), vec4(_1716, _1717, _1718, 1.0));
        _1759 = dot(vec3(isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0)), isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)), isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1747) ? 0.0 : (isnan(0.0) ? _1747 : max(0.0, _1747))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1759 = 1.0;
    }
    float _1770;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1761 = dot(vec4(cbModelParam._m0[40u]), vec4(_1716, _1717, _1718, 1.0));
        _1770 = dot(vec3(isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)), isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)), isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1761) ? 0.0 : (isnan(0.0) ? _1761 : max(0.0, _1761))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1770 = 1.0;
    }
    float _1774 = (_1770 * cbModelParam._m0[1u].x) + (_1759 * (1.0 - cbModelParam._m0[1u].x));
    float _1784 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _760);
    float _1785 = isnan(_1784) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1784 : min(cbModelParam._m0[25u].z, _1784));
    float _1865;
    float _1867;
    float _1869;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1832 = fma(_1007, cbModelParam._m0[13u].z, fma(_1003, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _999)) + cbModelParam._m0[13u].w;
        float _1836 = fma(_1007, cbModelParam._m0[14u].z, fma(_1003, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _999)) + cbModelParam._m0[14u].w;
        float _1840 = fma(_1007, cbModelParam._m0[15u].z, fma(_1003, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _999)) + cbModelParam._m0[15u].w;
        float _1843 = fma(_945, cbModelParam._m0[13u].z, fma(_944, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _943));
        float _1846 = fma(_945, cbModelParam._m0[14u].z, fma(_944, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _943));
        float _1849 = fma(_945, cbModelParam._m0[15u].z, fma(_944, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _943));
        float _1877;
        if (_1843 > 0.0)
        {
            _1877 = abs((1.0 - _1832) / _1843);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1843 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1832 + 1.0) / _1843);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1877 = frontier_phi_17_15_ladder;
        }
        float _2048;
        if (_1846 > 0.0)
        {
            _2048 = abs((1.0 - _1836) / _1846);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1846 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1836 + 1.0) / _1846);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2048 = frontier_phi_26_22_ladder;
        }
        float _2343;
        if (_1849 > 0.0)
        {
            _2343 = abs((1.0 - _1840) / _1849);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1849 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1840 + 1.0) / _1849);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2343 = frontier_phi_38_33_ladder;
        }
        float _2345 = isnan(_2048) ? _1877 : (isnan(_1877) ? _2048 : min(_1877, _2048));
        float _2346 = isnan(_2343) ? _2345 : (isnan(_2345) ? _2343 : min(_2345, _2343));
        float _2350 = (_2346 * _1843) + _1832;
        float _2351 = (_2346 * _1846) + _1836;
        float _2352 = (_2346 * _1849) + _1840;
        float _2353 = _2346 * 9.9999997473787516355514526367188e-05;
        float _2355 = (-1.0) - _2353;
        float _2357 = _2353 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2352 > _2357) || ((_2352 < _2355) || ((_2351 > _2357) || ((_2351 < _2355) || ((_2350 < _2355) || (_2350 > _2357))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2497 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2352, cbModelParam._m0[9u].z, fma(_2351, cbModelParam._m0[9u].y, _2350 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2352, cbModelParam._m0[10u].z, fma(_2351, cbModelParam._m0[10u].y, _2350 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2352, cbModelParam._m0[11u].z, fma(_2351, cbModelParam._m0[11u].y, _2350 * cbModelParam._m0[11u].x))), _1785);
            frontier_phi_16_38_ladder = _2497.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2497.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2497.x * cbModelParam._m0[1u].y;
        }
        _1865 = frontier_phi_16_38_ladder_2;
        _1867 = frontier_phi_16_38_ladder_1;
        _1869 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1853 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_943, _944, _945), _1785);
        _1865 = _1853.x * cbModelParam._m0[1u].y;
        _1867 = _1853.y * cbModelParam._m0[1u].y;
        _1869 = _1853.z * cbModelParam._m0[1u].y;
    }
    float _1873 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _760);
    float _1874 = isnan(_1873) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1873 : min(cbModelParam._m0[25u].w, _1873));
    float _1963;
    float _1965;
    float _1967;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1927 = fma(_1007, cbModelParam._m0[21u].z, fma(_1003, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _999)) + cbModelParam._m0[21u].w;
        float _1931 = fma(_1007, cbModelParam._m0[22u].z, fma(_1003, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _999)) + cbModelParam._m0[22u].w;
        float _1935 = fma(_1007, cbModelParam._m0[23u].z, fma(_1003, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _999)) + cbModelParam._m0[23u].w;
        float _1938 = fma(_945, cbModelParam._m0[21u].z, fma(_944, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _943));
        float _1941 = fma(_945, cbModelParam._m0[22u].z, fma(_944, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _943));
        float _1944 = fma(_945, cbModelParam._m0[23u].z, fma(_944, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _943));
        float _2053;
        if (_1938 > 0.0)
        {
            _2053 = abs((1.0 - _1927) / _1938);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1938 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1927 + 1.0) / _1938);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2053 = frontier_phi_28_24_ladder;
        }
        float _2370;
        if (_1941 > 0.0)
        {
            _2370 = abs((1.0 - _1931) / _1941);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1941 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1931 + 1.0) / _1941);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2370 = frontier_phi_40_35_ladder;
        }
        float _2708;
        if (_1944 > 0.0)
        {
            _2708 = abs((1.0 - _1935) / _1944);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1944 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1935 + 1.0) / _1944);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2708 = frontier_phi_50_47_ladder;
        }
        float _2710 = isnan(_2370) ? _2053 : (isnan(_2053) ? _2370 : min(_2053, _2370));
        float _2711 = isnan(_2708) ? _2710 : (isnan(_2710) ? _2708 : min(_2710, _2708));
        float _2715 = (_2711 * _1938) + _1927;
        float _2716 = (_2711 * _1941) + _1931;
        float _2717 = (_2711 * _1944) + _1935;
        float _2718 = _2711 * 9.9999997473787516355514526367188e-05;
        float _2719 = (-1.0) - _2718;
        float _2721 = _2718 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2717 > _2721) || ((_2717 < _2719) || ((_2716 > _2721) || ((_2716 < _2719) || ((_2715 < _2719) || (_2715 > _2721))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2839 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2717, cbModelParam._m0[17u].z, fma(_2716, cbModelParam._m0[17u].y, _2715 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2717, cbModelParam._m0[18u].z, fma(_2716, cbModelParam._m0[18u].y, _2715 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2717, cbModelParam._m0[19u].z, fma(_2716, cbModelParam._m0[19u].y, _2715 * cbModelParam._m0[19u].x))), _1874);
            frontier_phi_25_50_ladder = _2839.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2839.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2839.x * cbModelParam._m0[1u].z;
        }
        _1963 = frontier_phi_25_50_ladder_2;
        _1965 = frontier_phi_25_50_ladder_1;
        _1967 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1947 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_943, _944, _945), _1874);
        _1963 = _1947.x * cbModelParam._m0[1u].z;
        _1965 = _1947.y * cbModelParam._m0[1u].z;
        _1967 = _1947.z * cbModelParam._m0[1u].z;
    }
    float _1980 = (((_970 * _919) + _971) * _935) * ((cbModelParam._m0[1u].w * (_1963 - _1865)) + _1865);
    float _1982 = (((_970 * _921) + _971) * _935) * ((cbModelParam._m0[1u].w * (_1965 - _1867)) + _1867);
    float _1984 = (((_970 * _922) + _971) * _935) * ((cbModelParam._m0[1u].w * (_1967 - _1869)) + _1869);
    float _1987 = fma(_1984, cbSceneParam._m0[89u].z, fma(_1982, cbSceneParam._m0[89u].y, _1980 * cbSceneParam._m0[89u].x));
    float _1990 = fma(_1984, cbSceneParam._m0[90u].z, fma(_1982, cbSceneParam._m0[90u].y, _1980 * cbSceneParam._m0[90u].x));
    float _1993 = fma(_1984, cbSceneParam._m0[91u].z, fma(_1982, cbSceneParam._m0[91u].y, _1980 * cbSceneParam._m0[91u].x));
    float _2027 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2031 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2035 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2039 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2040 = _2027 / _2039;
    float _2041 = _2031 / _2039;
    float _2042 = _2035 / _2039;
    float _2189;
    float _2190;
    float _2191;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2069 = ((uint(_2042 > cbSceneParam._m0[59u].y) + uint(_2042 > cbSceneParam._m0[59u].x)) + uint(_2042 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2070 = _2069 + 43u;
        uint _2078 = _2069 + 44u;
        uint _2086 = _2069 + 45u;
        uint _2094 = _2069 + 46u;
        float _2105 = fma(_2039, cbSceneParam._m0[_2070].w, fma(_2035, cbSceneParam._m0[_2070].z, fma(_2031, cbSceneParam._m0[_2070].y, _2027 * cbSceneParam._m0[_2070].x)));
        float _2109 = fma(_2039, cbSceneParam._m0[_2078].w, fma(_2035, cbSceneParam._m0[_2078].z, fma(_2031, cbSceneParam._m0[_2078].y, _2027 * cbSceneParam._m0[_2078].x)));
        float _2117 = fma(_2039, cbSceneParam._m0[_2094].w, fma(_2035, cbSceneParam._m0[_2094].z, fma(_2031, cbSceneParam._m0[_2094].y, _2027 * cbSceneParam._m0[_2094].x)));
        float _2122 = cbSceneParam._m0[33u].z * _2117;
        float _2124 = cbSceneParam._m0[33u].w * _2117;
        float _2127 = fma(_2039, cbSceneParam._m0[_2086].w, fma(_2035, cbSceneParam._m0[_2086].z, fma(_2031, cbSceneParam._m0[_2086].y, _2027 * cbSceneParam._m0[_2086].x))) / _2117;
        float _2175 = (cbSceneParam._m0[33u].x - sqrt(((_2041 * _2041) + (_2040 * _2040)) + (_2042 * _2042))) * cbSceneParam._m0[33u].y;
        float _4578 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
        float _2182 = (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2122 + _2105) / _2117, (_2124 + _2109) / _2117), _2127), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2124 + _2105) / _2117, (_2109 - _2122) / _2117), _2127), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2105 - _2122) / _2117, (_2109 - _2124) / _2117), _2127), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2105 - _2124) / _2117, (_2122 + _2109) / _2117), _2127), 0.0)).x), vec4(0.25)));
        _2189 = 1.0 - (_2182 * cbSceneParam._m0[34u].x);
        _2190 = 1.0 - (_2182 * cbSceneParam._m0[34u].y);
        _2191 = 1.0 - (_2182 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2189 = 1.0;
        _2190 = 1.0;
        _2191 = 1.0;
    }
    float _2255;
    float _2257;
    float _2259;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2243 = fma(_2039, cbSceneParam._m0[63u].w, fma(_2035, cbSceneParam._m0[63u].z, fma(_2031, cbSceneParam._m0[63u].y, _2027 * cbSceneParam._m0[63u].x)));
        float _2244 = fma(_2039, cbSceneParam._m0[60u].w, fma(_2035, cbSceneParam._m0[60u].z, fma(_2031, cbSceneParam._m0[60u].y, _2027 * cbSceneParam._m0[60u].x))) / _2243;
        float _2245 = fma(_2039, cbSceneParam._m0[61u].w, fma(_2035, cbSceneParam._m0[61u].z, fma(_2031, cbSceneParam._m0[61u].y, _2027 * cbSceneParam._m0[61u].x))) / _2243;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2244 >= cbSceneParam._m0[64u].x) && (_2245 >= cbSceneParam._m0[64u].y)) && (_2244 <= cbSceneParam._m0[64u].z)) && (_2245 <= cbSceneParam._m0[64u].w))
        {
            float _2383 = fma(_2039, cbSceneParam._m0[62u].w, fma(_2035, cbSceneParam._m0[62u].z, fma(_2031, cbSceneParam._m0[62u].y, _2027 * cbSceneParam._m0[62u].x))) / _2243;
            float _2387 = isnan(cbSceneParam._m0[41u].w) ? _2383 : (isnan(_2383) ? cbSceneParam._m0[41u].w : max(_2383, cbSceneParam._m0[41u].w));
            float _2430 = (cbSceneParam._m0[33u].x - sqrt(((_2041 * _2041) + (_2040 * _2040)) + (_2042 * _2042))) * cbSceneParam._m0[33u].y;
            float _4594 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
            float _2437 = (isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2244, cbSceneParam._m0[33u].w + _2245), _2387), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2244, _2245 - cbSceneParam._m0[33u].z), _2387), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2244 - cbSceneParam._m0[33u].z, _2245 - cbSceneParam._m0[33u].w), _2387), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2244 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2245), _2387), 0.0)).x), vec4(0.25)));
            float _2441 = 1.0 - (_2437 * cbSceneParam._m0[34u].x);
            float _2442 = 1.0 - (_2437 * cbSceneParam._m0[34u].y);
            float _2443 = 1.0 - (_2437 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2443) ? _2191 : (isnan(_2191) ? _2443 : min(_2191, _2443));
            frontier_phi_37_36_ladder_1 = isnan(_2442) ? _2190 : (isnan(_2190) ? _2442 : min(_2190, _2442));
            frontier_phi_37_36_ladder_2 = isnan(_2441) ? _2189 : (isnan(_2189) ? _2441 : min(_2189, _2441));
        }
        else
        {
            frontier_phi_37_36_ladder = _2191;
            frontier_phi_37_36_ladder_1 = _2190;
            frontier_phi_37_36_ladder_2 = _2189;
        }
        _2255 = frontier_phi_37_36_ladder_2;
        _2257 = frontier_phi_37_36_ladder_1;
        _2259 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2255 = _2189;
        _2257 = _2190;
        _2259 = _2191;
    }
    uvec4 _2264 = floatBitsToUint(cbInstanceData._m0[_276 + 5u]);
    uint _2266 = _2264.x * 14u;
    uint _2267 = _2266 + 13u;
    float _2274 = _935 + (-1.0);
    float _2279 = (cbLight._m0[_2267].x * _2274) + 1.0;
    float _2280 = (cbLight._m0[_2267].y * _2274) + 1.0;
    float _2281 = (cbLight._m0[_2267].z * _2274) + 1.0;
    float _2282 = (cbLight._m0[_2267].w * _2274) + 1.0;
    uint _2283 = _2266 + 5u;
    float _2289 = isnan(1.0) ? _2280 : (isnan(_2280) ? 1.0 : min(_2280, 1.0));
    uint _2293 = _2266 + 4u;
    float _2302 = isnan(1.0) ? _2279 : (isnan(_2279) ? 1.0 : min(_2279, 1.0));
    uint _2306 = _2266 | 1u;
    float _2317 = dot(vec3(cbLight._m0[_2266].xyz), vec3(_757, _758, _759));
    float _2320 = dot(vec3(cbLight._m0[_2306].xyz), vec3(_757, _758, _759));
    float _4630 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _4641 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2325 = (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0))) * 0.3183098733425140380859375;
    float _2327 = (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * 0.3183098733425140380859375;
    float _2334 = ((cbLight._m0[_2283].x * _2289) * _2327) + (((cbLight._m0[_2293].x * _2255) * _2302) * _2325);
    float _2335 = ((_2289 * cbLight._m0[_2283].y) * _2327) + (((cbLight._m0[_2293].y * _2257) * _2302) * _2325);
    float _2336 = ((_2289 * cbLight._m0[_2283].z) * _2327) + (((cbLight._m0[_2293].z * _2259) * _2302) * _2325);
    uvec4 _2340 = floatBitsToUint(cbLight._m0[_2266 + 12u]);
    bool _2342 = _2340.x == 0u;
    float _2444;
    float _2446;
    float _2448;
    if (_2342)
    {
        _2444 = _2334;
        _2446 = _2335;
        _2448 = _2336;
    }
    else
    {
        uint _2452 = _2266 + 6u;
        float _2468 = (dot(vec3(cbLight._m0[_2266 + 2u].xyz), vec3(_757, _758, _759)) * 0.5) + 0.5;
        float _2469 = _2468 * _2468;
        float _4652 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
        float _2470 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
        float _2471 = isnan(1.0) ? _2281 : (isnan(_2281) ? 1.0 : min(_2281, 1.0));
        _2444 = (((cbLight._m0[_2452].x * 0.3183098733425140380859375) * _2470) * _2471) + _2334;
        _2446 = (((cbLight._m0[_2452].y * 0.3183098733425140380859375) * _2470) * _2471) + _2335;
        _2448 = (((cbLight._m0[_2452].z * 0.3183098733425140380859375) * _2470) * _2471) + _2336;
    }
    bool _2451 = _2340.y == 0u;
    float _2506;
    float _2508;
    float _2510;
    if (_2451)
    {
        _2506 = _2444;
        _2508 = _2446;
        _2510 = _2448;
    }
    else
    {
        uint _2679 = _2266 + 7u;
        float _2695 = (dot(vec3(cbLight._m0[_2266 + 3u].xyz), vec3(_757, _758, _759)) * 0.5) + 0.5;
        float _2696 = _2695 * _2695;
        float _4668 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        float _2697 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
        float _2698 = isnan(1.0) ? _2282 : (isnan(_2282) ? 1.0 : min(_2282, 1.0));
        _2506 = (((cbLight._m0[_2679].x * 0.3183098733425140380859375) * _2697) * _2698) + _2444;
        _2508 = (((cbLight._m0[_2679].y * 0.3183098733425140380859375) * _2697) * _2698) + _2446;
        _2510 = (((cbLight._m0[_2679].z * 0.3183098733425140380859375) * _2697) * _2698) + _2448;
    }
    uint _2513 = _2266 + 8u;
    float _2526 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2266].w)) * _760) * 0.949999988079071044921875);
    float _2527 = _2526 * _2526;
    float _2528 = cbLight._m0[_2266].x + _837;
    float _2529 = cbLight._m0[_2266].y + _838;
    float _2530 = cbLight._m0[_2266].z + _839;
    float _2534 = inversesqrt(dot(vec3(_2528, _2529, _2530), vec3(_2528, _2529, _2530)));
    float _2535 = _2534 * _2528;
    float _2536 = _2534 * _2529;
    float _2537 = _2534 * _2530;
    float _2538 = dot(vec3(_757, _758, _759), vec3(cbLight._m0[_2266].xyz));
    float _4684 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
    float _2541 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
    float _4695 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _2542 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
    float _2543 = dot(vec3(_757, _758, _759), vec3(_2535, _2536, _2537));
    float _4706 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
    float _2546 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
    float _2547 = dot(vec3(cbLight._m0[_2266].xyz), vec3(_2535, _2536, _2537));
    float _4717 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
    float _2551 = _2527 * _2527;
    float _2555 = ((_2546 * _2546) * (_2551 + (-1.0))) + 1.0;
    float _2563 = exp2(log2(1.0 - (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0)))) * 5.0);
    float _2564 = 0.959999978542327880859375 - _916;
    float _2566 = 0.959999978542327880859375 - _917;
    float _2567 = 0.959999978542327880859375 - _918;
    float _2574 = 1.0 - _2527;
    float _2585 = (0.5 / (((_2542 * ((_2541 * _2574) + _2527)) + 9.9999999392252902907785028219223e-09) + (((_2542 * _2574) + _2527) * _2541))) * _2541;
    float _4728 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
    float _2587 = (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0))) * (_2551 / ((_2555 * _2555) * 3.141590118408203125));
    uint _2601 = _2266 + 9u;
    float _2612 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2306].w)) * _760) * 0.949999988079071044921875);
    float _2613 = _2612 * _2612;
    float _2614 = cbLight._m0[_2306].x + _837;
    float _2615 = cbLight._m0[_2306].y + _838;
    float _2616 = cbLight._m0[_2306].z + _839;
    float _2620 = inversesqrt(dot(vec3(_2614, _2615, _2616), vec3(_2614, _2615, _2616)));
    float _2621 = _2620 * _2614;
    float _2622 = _2620 * _2615;
    float _2623 = _2620 * _2616;
    float _2624 = dot(vec3(_757, _758, _759), vec3(cbLight._m0[_2306].xyz));
    float _4739 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
    float _2627 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
    float _2628 = dot(vec3(_757, _758, _759), vec3(_2621, _2622, _2623));
    float _4750 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
    float _2631 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
    float _2632 = dot(vec3(cbLight._m0[_2306].xyz), vec3(_2621, _2622, _2623));
    float _4761 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
    float _2636 = _2613 * _2613;
    float _2640 = ((_2631 * _2631) * (_2636 + (-1.0))) + 1.0;
    float _2647 = exp2(log2(1.0 - (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0)))) * 5.0);
    float _2654 = 1.0 - _2613;
    float _2664 = (0.5 / (((_2542 * ((_2627 * _2654) + _2613)) + 9.9999999392252902907785028219223e-09) + (((_2542 * _2654) + _2613) * _2627))) * _2627;
    float _4772 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
    float _2666 = (isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0))) * (_2636 / ((_2640 * _2640) * 3.141590118408203125));
    float _2676 = (((((_2647 * _2564) + _919) * cbLight._m0[_2601].x) * _2666) * _2289) + ((((cbLight._m0[_2513].x * _2255) * ((_2563 * _2564) + _919)) * _2587) * _2302);
    float _2677 = (((((_2647 * _2566) + _921) * cbLight._m0[_2601].y) * _2666) * _2289) + ((((cbLight._m0[_2513].y * _2257) * ((_2563 * _2566) + _921)) * _2587) * _2302);
    float _2678 = (((((_2647 * _2567) + _922) * cbLight._m0[_2601].z) * _2666) * _2289) + ((((cbLight._m0[_2513].z * _2259) * ((_2563 * _2567) + _922)) * _2587) * _2302);
    float _2734;
    float _2736;
    float _2738;
    if (_2342)
    {
        _2734 = _2676;
        _2736 = _2677;
        _2738 = _2678;
    }
    else
    {
        uint _2740 = _2266 + 2u;
        uint _2744 = _2266 + 10u;
        float _2758 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2740].w)) * _760) * 0.949999988079071044921875);
        float _2759 = _2758 * _2758;
        float _2760 = cbLight._m0[_2740].x + _837;
        float _2761 = cbLight._m0[_2740].y + _838;
        float _2762 = cbLight._m0[_2740].z + _839;
        float _2766 = inversesqrt(dot(vec3(_2760, _2761, _2762), vec3(_2760, _2761, _2762)));
        float _2767 = _2766 * _2760;
        float _2768 = _2766 * _2761;
        float _2769 = _2766 * _2762;
        float _2770 = dot(vec3(_757, _758, _759), vec3(cbLight._m0[_2740].xyz));
        float _4783 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
        float _2773 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
        float _2774 = dot(vec3(_757, _758, _759), vec3(_2767, _2768, _2769));
        float _4794 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
        float _2777 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
        float _2778 = dot(vec3(cbLight._m0[_2740].xyz), vec3(_2767, _2768, _2769));
        float _4805 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
        float _2782 = _2759 * _2759;
        float _2786 = ((_2777 * _2777) * (_2782 + (-1.0))) + 1.0;
        float _2793 = exp2(log2(1.0 - (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0)))) * 5.0);
        float _2800 = 1.0 - _2759;
        float _2810 = (0.5 / (((_2542 * ((_2773 * _2800) + _2759)) + 9.9999999392252902907785028219223e-09) + (((_2542 * _2800) + _2759) * _2773))) * _2773;
        float _4816 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
        float _2812 = (isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0))) * (_2782 / ((_2786 * _2786) * 3.141590118408203125));
        float _2813 = isnan(1.0) ? _2281 : (isnan(_2281) ? 1.0 : min(_2281, 1.0));
        _2734 = (((((_2793 * _2564) + _919) * cbLight._m0[_2744].x) * _2812) * _2813) + _2676;
        _2736 = (((((_2793 * _2566) + _921) * cbLight._m0[_2744].y) * _2812) * _2813) + _2677;
        _2738 = (((((_2793 * _2567) + _922) * cbLight._m0[_2744].z) * _2812) * _2813) + _2678;
    }
    float _2844;
    float _2846;
    float _2848;
    if (_2451)
    {
        _2844 = _2734;
        _2846 = _2736;
        _2848 = _2738;
    }
    else
    {
        uint _2855 = _2266 + 3u;
        uint _2859 = _2266 + 11u;
        float _2873 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2855].w)) * _760) * 0.949999988079071044921875);
        float _2874 = _2873 * _2873;
        float _2875 = cbLight._m0[_2855].x + _837;
        float _2876 = cbLight._m0[_2855].y + _838;
        float _2877 = cbLight._m0[_2855].z + _839;
        float _2881 = inversesqrt(dot(vec3(_2875, _2876, _2877), vec3(_2875, _2876, _2877)));
        float _2882 = _2881 * _2875;
        float _2883 = _2881 * _2876;
        float _2884 = _2881 * _2877;
        float _2885 = dot(vec3(_757, _758, _759), vec3(cbLight._m0[_2855].xyz));
        float _4832 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
        float _2888 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
        float _2889 = dot(vec3(_757, _758, _759), vec3(_2882, _2883, _2884));
        float _4843 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
        float _2892 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
        float _2893 = dot(vec3(cbLight._m0[_2855].xyz), vec3(_2882, _2883, _2884));
        float _4854 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
        float _2897 = _2874 * _2874;
        float _2901 = ((_2892 * _2892) * (_2897 + (-1.0))) + 1.0;
        float _2908 = exp2(log2(1.0 - (isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0)))) * 5.0);
        float _2915 = 1.0 - _2874;
        float _2925 = (0.5 / (((_2542 * ((_2888 * _2915) + _2874)) + 9.9999999392252902907785028219223e-09) + (((_2542 * _2915) + _2874) * _2888))) * _2888;
        float _4865 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
        float _2927 = (isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0))) * (_2897 / ((_2901 * _2901) * 3.141590118408203125));
        float _2928 = isnan(1.0) ? _2282 : (isnan(_2282) ? 1.0 : min(_2282, 1.0));
        _2844 = (((((_2908 * _2564) + _919) * cbLight._m0[_2859].x) * _2927) * _2928) + _2734;
        _2846 = (((((_2908 * _2566) + _921) * cbLight._m0[_2859].y) * _2927) * _2928) + _2736;
        _2848 = (((((_2908 * _2567) + _922) * cbLight._m0[_2859].z) * _2927) * _2928) + _2738;
    }
    float _2994;
    float _2996;
    float _2998;
    float _3000;
    float _3002;
    float _3004;
    if (_2264.y == 0u)
    {
        uvec4 _2949 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2950 = _2949.x;
        uint _2961 = uint((float(_2949.y) * floor(float(uint(cbSceneParam._m0[85u].y * _858) / _2950))) + floor(float(uint(cbSceneParam._m0[85u].x * _857) / _2950)));
        float _2971 = (log2(_2042 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2972 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
        uint _2975 = uint(isnan(14.0) ? _2972 : (isnan(_2972) ? 14.0 : min(_2972, 14.0)));
        uvec4 _2980 = texelFetch(g_lightClusterGridBuffer, int(((_2975 << 2u) + (_2961 << 6u)) >> 2u));
        uint _2981 = _2980.x;
        uint _2982 = _2949.z;
        float _3061;
        float _3063;
        float _3065;
        float _3067;
        float _3069;
        float _3071;
        if (((((1u << ((_2982 >> 4u) & 15u)) + 4294967295u) & _2981) == 0u) || ((_2982 & 240u) == 0u))
        {
            _3061 = 0.0;
            _3063 = 0.0;
            _3065 = 0.0;
            _3067 = 0.0;
            _3069 = 0.0;
            _3071 = 0.0;
        }
        else
        {
            float _3062;
            float _3064;
            float _3066;
            float _3068;
            float _3070;
            float _3072;
            float _3214 = 0.0;
            float _3215 = 0.0;
            float _3216 = 0.0;
            float _3217 = 0.0;
            float _3218 = 0.0;
            float _3219 = 0.0;
            uint _3220 = 0u;
            uint _3229;
            bool _3230;
            for (;;)
            {
                _3229 = texelFetch(g_lightClassification, int((((_2975 << 5u) + (_2961 << 9u)) + (_3220 << 2u)) >> 2u)).x;
                _3230 = _3229 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3230)
                {
                    frontier_phi_71_pred = _3219;
                    frontier_phi_71_pred_1 = _3218;
                    frontier_phi_71_pred_2 = _3217;
                    frontier_phi_71_pred_3 = _3216;
                    frontier_phi_71_pred_4 = _3215;
                    frontier_phi_71_pred_5 = _3214;
                }
                else
                {
                    float _3359;
                    float _3360;
                    float _3361;
                    float _3362;
                    float _3363;
                    float _3364;
                    uint _3365;
                    _3359 = _3214;
                    _3360 = _3215;
                    _3361 = _3216;
                    _3362 = _3217;
                    _3363 = _3218;
                    _3364 = _3219;
                    _3365 = _3229;
                    float _3286;
                    float _3287;
                    float _3288;
                    float _3289;
                    float _3290;
                    float _3291;
                    for (;;)
                    {
                        uint _3369 = uint(findLSB(_3365)) + (_3220 << 5u);
                        uint _3366 = (_3365 + 4294967295u) & _3365;
                        uint _3371 = _3369 * 48u;
                        vec4 _3385 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3371)).x, texelFetch(g_PointLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3371 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3371 + 3u)).x));
                        uint _3391 = (_3369 * 48u) + 4u;
                        vec4 _3404 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3391)).x, texelFetch(g_PointLightRenderingBuffer, int(_3391 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3391 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3391 + 3u)).x));
                        uint _3410 = (_3369 * 48u) + 8u;
                        vec3 _3421 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3410)).x, texelFetch(g_PointLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3410 + 2u)).x));
                        float _3425 = _3385.x - _2040;
                        float _3426 = _3385.y - _2041;
                        float _3427 = _3385.z - _2042;
                        float _3428 = dot(vec3(_3425, _3426, _3427), vec3(_3425, _3426, _3427));
                        float _3431 = inversesqrt(_3428);
                        float _3432 = _3431 * _3425;
                        float _3433 = _3431 * _3426;
                        float _3434 = _3431 * _3427;
                        float _3435 = dot(vec3(_876, _879, _882), vec3(_3432, _3433, _3434));
                        float _3440 = 1.0 - (_3428 * _3385.w);
                        float _4891 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                        float _3441 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
                        float _3442 = sqrt(_3428) * _3404.w;
                        float _3445 = 1.39999997615814208984375 / (_3442 + 1.39999997615814208984375);
                        float _3446 = _3445 * _3445;
                        float _3449 = ((1.0 - _3446) * _3435) + _3446;
                        float _3452 = _3442 * _3442;
                        float _3456 = ((isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0))) * _3441) / ((_3452 * 0.699999988079071044921875) + 1.0);
                        float _3460 = (-0.0) - _2040;
                        float _3461 = (-0.0) - _2041;
                        float _3462 = (-0.0) - _2042;
                        float _3466 = inversesqrt(dot(vec3(_3460, _3461, _3462), vec3(_3460, _3461, _3462)));
                        float _3467 = _3466 * _3460;
                        float _3468 = _3466 * _3461;
                        float _3469 = _3466 * _3462;
                        float _3476 = exp2(log2(1.0 / ((_3452 * 3.5) + 5.0)) * 0.25);
                        float _3477 = 1.0 - _951;
                        float _3484 = sqrt(1.0 - ((1.0 - (_3477 * _3477)) * (1.0 - (_3476 * _3476))));
                        float _3485 = _3484 * _3484;
                        float _3486 = _3485 * _3485;
                        float _3487 = _3467 + _3432;
                        float _3488 = _3468 + _3433;
                        float _3489 = _3469 + _3434;
                        float _3493 = inversesqrt(dot(vec3(_3487, _3488, _3489), vec3(_3487, _3488, _3489)));
                        float _3497 = dot(vec3(_876, _879, _882), vec3(_3467, _3468, _3469));
                        float _4907 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                        float _3500 = isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0));
                        float _3501 = dot(vec3(_876, _879, _882), vec3(_3493 * _3487, _3493 * _3488, _3493 * _3489));
                        float _4918 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                        float _3504 = isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0));
                        float _3508 = ((_3504 * _3504) * (_3486 + (-1.0))) + 1.0;
                        float _3509 = _3445 * _3485;
                        float _3510 = _3509 * _3509;
                        float _3513 = ((1.0 - _3510) * _3435) + _3510;
                        float _4929 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                        float _3514 = isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0));
                        float _3515 = 1.0 - _3485;
                        float _3525 = (0.5 / (((_3514 * ((_3500 * _3515) + _3485)) + 9.9999999392252902907785028219223e-09) + (((_3514 * _3515) + _3485) * _3500))) * _3514;
                        float _4940 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                        float _3536 = (((_3486 * 3.1415927410125732421875) * (isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0)))) / ((_3508 * _3508) * ((_3452 * 2.1991131305694580078125) + 3.141590118408203125))) * _3441;
                        _3289 = (_3456 * _3404.x) + _3362;
                        _3290 = (_3456 * _3404.y) + _3363;
                        _3291 = (_3456 * _3404.z) + _3364;
                        _3286 = (_3536 * _3421.x) + _3359;
                        _3287 = (_3536 * _3421.y) + _3360;
                        _3288 = (_3536 * _3421.z) + _3361;
                        if (_3366 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3359 = _3286;
                            _3360 = _3287;
                            _3361 = _3288;
                            _3362 = _3289;
                            _3363 = _3290;
                            _3364 = _3291;
                            _3365 = _3366;
                        }
                    }
                    frontier_phi_71_pred = _3291;
                    frontier_phi_71_pred_1 = _3290;
                    frontier_phi_71_pred_2 = _3289;
                    frontier_phi_71_pred_3 = _3288;
                    frontier_phi_71_pred_4 = _3287;
                    frontier_phi_71_pred_5 = _3286;
                }
                _3072 = frontier_phi_71_pred;
                _3070 = frontier_phi_71_pred_1;
                _3068 = frontier_phi_71_pred_2;
                _3066 = frontier_phi_71_pred_3;
                _3064 = frontier_phi_71_pred_4;
                _3062 = frontier_phi_71_pred_5;
                uint _3221 = _3220 + 1u;
                if (_3221 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3214 = _3062;
                    _3215 = _3064;
                    _3216 = _3066;
                    _3217 = _3068;
                    _3218 = _3070;
                    _3219 = _3072;
                    _3220 = _3221;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3061 = _3062;
            _3063 = _3064;
            _3065 = _3066;
            _3067 = _3068;
            _3069 = _3070;
            _3071 = _3072;
        }
        uvec4 _3075 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3076 = _3075.z;
        uint _3078 = (_3076 >> 8u) & 15u;
        float _3182;
        float _3184;
        float _3186;
        float _3188;
        float _3190;
        float _3192;
        if (((4294967295u << _3078) & _2981) == 0u)
        {
            _3182 = _3061;
            _3184 = _3063;
            _3186 = _3065;
            _3188 = _3067;
            _3190 = _3069;
            _3192 = _3071;
        }
        else
        {
            float _3207 = inversesqrt(dot(vec3(_2040, _2041, _2042), vec3(_2040, _2041, _2042)));
            float _3208 = _3207 * _2040;
            float _3209 = _3207 * _2041;
            float _3210 = _3207 * _2042;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3078 < ((_3076 >> 12u) & 15u))
            {
                float _3183;
                float _3185;
                float _3187;
                float _3189;
                float _3191;
                float _3193;
                float _3342 = _3061;
                float _3343 = _3063;
                float _3344 = _3065;
                float _3345 = _3067;
                float _3346 = _3069;
                float _3347 = _3071;
                uint _3348 = _3078;
                uint _3357;
                bool _3358;
                for (;;)
                {
                    _3357 = texelFetch(g_lightClassification, int((((_2975 << 5u) + (_2961 << 9u)) + (_3348 << 2u)) >> 2u)).x;
                    _3358 = _3357 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3358)
                    {
                        frontier_phi_82_pred = _3347;
                        frontier_phi_82_pred_1 = _3346;
                        frontier_phi_82_pred_2 = _3345;
                        frontier_phi_82_pred_3 = _3344;
                        frontier_phi_82_pred_4 = _3343;
                        frontier_phi_82_pred_5 = _3342;
                    }
                    else
                    {
                        float _3550;
                        float _3551;
                        float _3552;
                        float _3553;
                        float _3554;
                        float _3555;
                        float _3843;
                        float _3844;
                        float _3845;
                        float _3846;
                        float _3847;
                        float _3848;
                        float _3563 = _3342;
                        float _3564 = _3343;
                        float _3565 = _3344;
                        float _3566 = _3345;
                        float _3567 = _3346;
                        float _3568 = _3347;
                        uint _3569 = _3357;
                        uint _3570;
                        vec4 _3595;
                        float _3596;
                        vec4 _3611;
                        vec3 _3623;
                        vec4 _3638;
                        vec4 _3653;
                        float _3699;
                        bool _3700;
                        for (;;)
                        {
                            uint _3580 = ((_3348 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3569));
                            _3570 = (_3569 + 4294967295u) & _3569;
                            uint _3582 = _3580 * 40u;
                            _3595 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3582)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 3u)).x));
                            _3596 = _3595.w;
                            uint _3598 = (_3580 * 40u) + 4u;
                            _3611 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3598)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 3u)).x));
                            uint _3613 = (_3580 * 40u) + 8u;
                            _3623 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3613)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 2u)).x));
                            uint _3625 = (_3580 * 40u) + 16u;
                            _3638 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3625)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 3u)).x));
                            uint _3640 = (_3580 * 40u) + 20u;
                            _3653 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3640)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 3u)).x));
                            uint _3655 = (_3580 * 40u) + 24u;
                            vec4 _3668 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3655)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 3u)).x));
                            uint _3674 = (_3580 * 40u) + 28u;
                            vec4 _3687 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3674)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 3u)).x));
                            _3699 = fma(_2042, _3687.z, fma(_2041, _3687.y, _3687.x * _2040)) + _3687.w;
                            _3700 = !((fma(_2042, _3668.z, fma(_2041, _3668.y, _3668.x * _2040)) + _3668.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3700)
                            {
                                float _3727 = _3595.x - _2040;
                                float _3728 = _3595.y - _2041;
                                float _3729 = _3595.z - _2042;
                                float _3730 = dot(vec3(_3727, _3728, _3729), vec3(_3727, _3728, _3729));
                                float _3733 = inversesqrt(_3730);
                                float _3734 = _3733 * _3727;
                                float _3735 = _3733 * _3728;
                                float _3736 = _3733 * _3729;
                                float _3740 = 1.0 - (_3730 / (_3596 * _3596));
                                float _4951 = isnan(0.0) ? _3740 : (isnan(_3740) ? 0.0 : max(_3740, 0.0));
                                float _3741 = isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0));
                                float _3745 = sqrt(_3730) * _3611.w;
                                float _3747 = 1.39999997615814208984375 / (_3745 + 1.39999997615814208984375);
                                float _3748 = _3747 * _3747;
                                float _3751 = ((1.0 - _3748) * dot(vec3(_3734, _3735, _3736), vec3(_876, _879, _882))) + _3748;
                                float _3754 = _3745 * _3745;
                                float _3758 = (fma(_2042, _3638.z, fma(_2041, _3638.y, _3638.x * _2040)) + _3638.w) / _3699;
                                float _3759 = (fma(_2042, _3653.z, fma(_2041, _3653.y, _3653.x * _2040)) + _3653.w) / _3699;
                                float _3763 = 1.0 - dot(vec2(_3758, _3759), vec2(_3758, _3759));
                                float _4967 = isnan(0.0) ? _3763 : (isnan(_3763) ? 0.0 : max(_3763, 0.0));
                                float _3764 = isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0));
                                float _3765 = _3764 * (((isnan(0.0) ? _3751 : (isnan(_3751) ? 0.0 : max(_3751, 0.0))) * _3741) / ((_3754 * 0.699999988079071044921875) + 1.0));
                                float _3777 = exp2(log2(1.0 / ((_3754 * 3.5) + 5.0)) * 0.25);
                                float _3778 = 1.0 - _951;
                                float _3785 = sqrt(1.0 - ((1.0 - (_3778 * _3778)) * (1.0 - (_3777 * _3777))));
                                float _3786 = _3785 * _3785;
                                float _3787 = _3786 * _3786;
                                float _3788 = _3734 - _3208;
                                float _3789 = _3735 - _3209;
                                float _3790 = _3736 - _3210;
                                float _3794 = inversesqrt(dot(vec3(_3788, _3789, _3790), vec3(_3788, _3789, _3790)));
                                float _3798 = dot(vec3(_876, _879, _882), vec3((-0.0) - _3208, (-0.0) - _3209, (-0.0) - _3210));
                                float _4978 = isnan(0.0) ? _3798 : (isnan(_3798) ? 0.0 : max(_3798, 0.0));
                                float _3801 = isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0));
                                float _3802 = dot(vec3(_876, _879, _882), vec3(_3794 * _3788, _3794 * _3789, _3794 * _3790));
                                float _4989 = isnan(0.0) ? _3802 : (isnan(_3802) ? 0.0 : max(_3802, 0.0));
                                float _3805 = isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0));
                                float _3809 = ((_3805 * _3805) * (_3787 + (-1.0))) + 1.0;
                                float _3810 = _3747 * _3786;
                                float _3811 = _3810 * _3810;
                                float _3817 = ((1.0 - _3811) * dot(vec3(_876, _879, _882), vec3(_3734, _3735, _3736))) + _3811;
                                float _5000 = isnan(0.0) ? _3817 : (isnan(_3817) ? 0.0 : max(_3817, 0.0));
                                float _3818 = isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0));
                                float _3819 = 1.0 - _3786;
                                float _3829 = (0.5 / (((_3818 * ((_3801 * _3819) + _3786)) + 9.9999999392252902907785028219223e-09) + (((_3818 * _3819) + _3786) * _3801))) * _3818;
                                float _5011 = isnan(0.0) ? _3829 : (isnan(_3829) ? 0.0 : max(_3829, 0.0));
                                float _3839 = (_3764 * _3741) * (((_3787 * 3.1415927410125732421875) * (isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0)))) / ((_3809 * _3809) * ((_3754 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3765 * _3611.z;
                                frontier_phi_88_pred_1 = _3765 * _3611.y;
                                frontier_phi_88_pred_2 = _3765 * _3611.x;
                                frontier_phi_88_pred_3 = _3839 * _3623.z;
                                frontier_phi_88_pred_4 = _3839 * _3623.y;
                                frontier_phi_88_pred_5 = _3839 * _3623.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3848 = frontier_phi_88_pred;
                            _3847 = frontier_phi_88_pred_1;
                            _3846 = frontier_phi_88_pred_2;
                            _3845 = frontier_phi_88_pred_3;
                            _3844 = frontier_phi_88_pred_4;
                            _3843 = frontier_phi_88_pred_5;
                            _3553 = _3846 + _3566;
                            _3554 = _3847 + _3567;
                            _3555 = _3848 + _3568;
                            _3550 = _3843 + _3563;
                            _3551 = _3844 + _3564;
                            _3552 = _3845 + _3565;
                            if (_3570 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3563 = _3550;
                                _3564 = _3551;
                                _3565 = _3552;
                                _3566 = _3553;
                                _3567 = _3554;
                                _3568 = _3555;
                                _3569 = _3570;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3555;
                        frontier_phi_82_pred_1 = _3554;
                        frontier_phi_82_pred_2 = _3553;
                        frontier_phi_82_pred_3 = _3552;
                        frontier_phi_82_pred_4 = _3551;
                        frontier_phi_82_pred_5 = _3550;
                    }
                    _3193 = frontier_phi_82_pred;
                    _3191 = frontier_phi_82_pred_1;
                    _3189 = frontier_phi_82_pred_2;
                    _3187 = frontier_phi_82_pred_3;
                    _3185 = frontier_phi_82_pred_4;
                    _3183 = frontier_phi_82_pred_5;
                    uint _3349 = _3348 + 1u;
                    if (_3349 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3342 = _3183;
                        _3343 = _3185;
                        _3344 = _3187;
                        _3345 = _3189;
                        _3346 = _3191;
                        _3347 = _3193;
                        _3348 = _3349;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3189;
                frontier_phi_63_64_ladder_1 = _3193;
                frontier_phi_63_64_ladder_2 = _3191;
                frontier_phi_63_64_ladder_3 = _3187;
                frontier_phi_63_64_ladder_4 = _3185;
                frontier_phi_63_64_ladder_5 = _3183;
            }
            else
            {
                frontier_phi_63_64_ladder = _3067;
                frontier_phi_63_64_ladder_1 = _3071;
                frontier_phi_63_64_ladder_2 = _3069;
                frontier_phi_63_64_ladder_3 = _3065;
                frontier_phi_63_64_ladder_4 = _3063;
                frontier_phi_63_64_ladder_5 = _3061;
            }
            _3182 = frontier_phi_63_64_ladder_5;
            _3184 = frontier_phi_63_64_ladder_4;
            _3186 = frontier_phi_63_64_ladder_3;
            _3188 = frontier_phi_63_64_ladder;
            _3190 = frontier_phi_63_64_ladder_2;
            _3192 = frontier_phi_63_64_ladder_1;
        }
        float _3197 = isnan(1.0) ? _935 : (isnan(_935) ? 1.0 : min(_935, 1.0));
        _2994 = (_3197 * _3188) + _2506;
        _2996 = (_3197 * _3190) + _2508;
        _2998 = (_3197 * _3192) + _2510;
        _3000 = ((_3182 * _919) * _3197) + _2844;
        _3002 = ((_3184 * _921) * _3197) + _2846;
        _3004 = ((_3186 * _922) * _3197) + _2848;
    }
    else
    {
        _2994 = _2506;
        _2996 = _2508;
        _2998 = _2510;
        _3000 = _2844;
        _3002 = _2846;
        _3004 = _2848;
    }
    float _5027 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _5038 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _5049 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _3021 = ((isnan(1.0) ? _5027 : (isnan(_5027) ? 1.0 : min(_5027, 1.0))) * (_2994 + ((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _935))) + ((_3000 + ((isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0))) * _1774)) * cbPerFrame._m0[3u].x);
    float _3022 = ((isnan(1.0) ? _5038 : (isnan(_5038) ? 1.0 : min(_5038, 1.0))) * (_2996 + ((isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))) * _935))) + ((_3002 + ((isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0))) * _1774)) * cbPerFrame._m0[3u].x);
    float _3023 = ((isnan(1.0) ? _5049 : (isnan(_5049) ? 1.0 : min(_5049, 1.0))) * (_2998 + ((isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))) * _935))) + ((_3004 + ((isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0))) * _1774)) * cbPerFrame._m0[3u].x);
    uint _3024 = _276 + 6u;
    float _3032 = _857 / cbSceneParam._m0[86u].x;
    float _3033 = _858 / cbSceneParam._m0[86u].y;
    vec4 _3047 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3032, _3033, (log2((isnan(cbSceneParam._m0[77u].w) ? _779 : (isnan(_779) ? cbSceneParam._m0[77u].w : min(_779, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3049 = _3047.x;
    float _3050 = _3047.y;
    float _3051 = _3047.z;
    float _3052 = _3047.w;
    float _3124;
    float _3126;
    float _3128;
    float _3130;
    if (_779 > cbSceneParam._m0[78u].w)
    {
        float _3086 = isnan(_779) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _779 : min(cbSceneParam._m0[80u].w, _779));
        float _3087 = _3086 / _779;
        float _3098 = _3087 * _830;
        float _3099 = _831 * _3087;
        float _3100 = (-0.0) - _3099;
        float _3102 = _3087 * _832;
        float _3104 = (cbSceneParam._m0[77u].w * _3100) / _3086;
        float _3105 = _3104 + cbSceneParam._m0[79u].w;
        float _3106 = cbSceneParam._m0[79u].w - _3099;
        float _3112 = sqrt(((_3098 * _3098) + (_3099 * _3099)) + (_3102 * _3102));
        float _3115 = (1.0 - (cbSceneParam._m0[77u].w / _3086)) * _3112;
        float _3120 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3122 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3299;
        if (abs((_3100 - _3104) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3299 = ((((_3105 > 0.0) ? exp2(_3120 * _3105) : (2.0 - exp2(_3122 * _3105))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3115;
        }
        else
        {
            float _3243 = 1.0 / cbSceneParam._m0[80u].x;
            float _3244 = isnan(_3106) ? _3105 : (isnan(_3105) ? _3106 : max(_3105, _3106));
            float _3245 = isnan(_3106) ? _3105 : (isnan(_3105) ? _3106 : min(_3105, _3106));
            float _3254 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : min(_3244, 0.0));
            float _3255 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : min(_3245, 0.0));
            _3299 = ((abs(_3112 / _3100) * cbSceneParam._m0[80u].y) * ((((_3254 - _3255) * 2.0) - ((exp2(_3120 * (isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0)))) - exp2(_3120 * (isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0))))) * _3243)) - ((exp2(_3122 * _3254) - exp2(_3122 * _3255)) * _3243))) + (_3115 * cbSceneParam._m0[80u].z);
        }
        vec4 _3301 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3032, _3033, 1.0), 0.0);
        float _3310 = exp2((_3299 * (-1.44269502162933349609375)) * (1.0 - _3301.w));
        float _3311 = log2(_3310);
        float _3327 = log2(_3052);
        _3124 = (exp2(_3327 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3311 * cbSceneParam._m0[78u].x)) * _3301.x) / cbSceneParam._m0[78u].x)) + _3049;
        _3126 = (exp2(_3327 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3311 * cbSceneParam._m0[78u].y)) * _3301.y) / cbSceneParam._m0[78u].y)) + _3050;
        _3128 = (exp2(_3327 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3311 * cbSceneParam._m0[78u].z)) * _3301.z) / cbSceneParam._m0[78u].z)) + _3051;
        _3130 = _3310 * _3052;
    }
    else
    {
        _3124 = _3049;
        _3126 = _3050;
        _3128 = _3051;
        _3130 = _3052;
    }
    bool _3337;
    vec4 _3140;
    vec4 _3162;
    float _3164;
    float _3168;
    float _3169;
    float _3170;
    float _3171;
    bool _3181;
    for (;;)
    {
        _3140 = cbMatDynParam._m0[0u];
        float _3142 = roundEven(_3140.y);
        bool _3143 = _3142 == 3.0;
        float _3144 = log2(_3130);
        float _3151 = exp2(_3144 * cbSceneParam._m0[78u].x) * _3021;
        float _3152 = exp2(_3144 * cbSceneParam._m0[78u].y) * _3022;
        float _3153 = exp2(_3144 * cbSceneParam._m0[78u].z) * _3023;
        float _3160 = _846 + (-0.5);
        _3162 = cbMtdParam._m0[1u];
        _3164 = _3162.y * _3160;
        float _3167 = (_3142 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3168 = _3167 * (_3143 ? _3151 : (_3151 + (cbSceneParam._m0[72u].w * _3124)));
        _3169 = _3167 * (_3143 ? _3152 : (_3152 + (cbSceneParam._m0[72u].w * _3126)));
        _3170 = _3167 * (_3143 ? _3153 : (_3153 + (cbSceneParam._m0[72u].w * _3128)));
        _3171 = _3160 * 0.999000012874603271484375;
        _3181 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3181)
        {
            if ((cbInstanceData._m0[_276 + 7u].x + _3171) < 0.5)
            {
                _3337 = true;
                break;
            }
        }
        uint _3278 = _895 + uint(_3140.w);
        if ((cbInstanceData._m0[_3278].w < 1.0) && ((cbInstanceData._m0[_3278].w + _3171) < 0.5))
        {
            _3337 = true;
            break;
        }
        if ((_3164 + 1.0) < _3162.x)
        {
            _3337 = true;
            break;
        }
        _3337 = false;
        break;
    }
    float _3541;
    if (_3337)
    {
        discard_state = true;
        _3541 = 0.0;
    }
    else
    {
        _3541 = cbInstanceData._m0[_3024].w;
    }
    SV_Target.x = _3168;
    SV_Target.y = _3169;
    SV_Target.z = _3170;
    SV_Target.w = _3541;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3024].w;
    discard_exit();
}


