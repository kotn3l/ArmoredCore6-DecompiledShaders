#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1270;
float _3675;
float _3676;
float _3677;
float _3678;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _231 = _230 * _222;
    float _232 = _230 * _223;
    float _233 = _230 * _224;
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = _237 * NORMAL.x;
    float _239 = _237 * NORMAL.y;
    float _240 = _237 * NORMAL.z;
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245 = _244 * TANGENT.x;
    float _246 = _244 * TANGENT.y;
    float _247 = _244 * TANGENT.z;
    float _256 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3687 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _3698 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _3709 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    uint _269 = uint(roundEven(NORMAL.w)) * 13u;
    uint _274 = _269 + 1u;
    uint _278 = _269 + 2u;
    float _287 = sqrt(((cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x)) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x));
    float _288 = _287 * TEXCOORD.z;
    float _289 = _287 * TEXCOORD.w;
    vec4 _302 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _288) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _289) + cbTextureTilingScale._m0[13u].w));
    vec4 _325 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _330 = _325.x * cbMtdParam._m0[9u].x;
    float _331 = _325.y * cbMtdParam._m0[9u].y;
    float _332 = _325.z * cbMtdParam._m0[9u].z;
    float _336 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _302.x) * _330;
    float _339 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _302.y) * _331;
    float _342 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _302.z) * _332;
    float _349 = ((_330 - _336) * (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0)))) + _336;
    float _350 = ((_331 - _339) * (isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0)))) + _339;
    float _351 = ((_332 - _342) * (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0)))) + _342;
    vec4 _369 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _288) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _289) + cbTextureTilingScale._m0[20u].w));
    vec4 _395 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _399 = _395.z;
    float _403 = (_395.x * 2.0) + (-1.0);
    float _404 = (_395.y * 2.0) + (-1.0);
    float _405 = dot(vec2(_403, _404), vec2(_403, _404));
    float _3720 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _410 = sqrt(1.0 - (isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))));
    float _415 = _403 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_369.x * 2.0) + (-1.0)));
    float _416 = _404 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_369.y * 2.0) + (-1.0)));
    float _419 = fma(_410, _238, fma(_416, _245, _415 * _231));
    float _422 = fma(_410, _239, fma(_416, _246, _415 * _232));
    float _425 = fma(_410, _240, fma(_416, _247, _415 * _233));
    float _429 = inversesqrt(dot(vec3(_419, _422, _425), vec3(_419, _422, _425)));
    vec4 _465 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _288) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _289) + cbTextureTilingScale._m0[11u].w));
    float _467 = _465.x;
    float _468 = 1.0 - _467;
    float _477 = (cbMtdParam._m0[19u].x + dot(vec4(_429 * _419, _429 * _422, _429 * _425, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_467 - _468) * cbMtdParam._m0[24u].z) + _468) * cbMtdParam._m0[21u].z);
    float _3731 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _478 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
    float _480 = (-0.0) - cbMtdParam._m0[24u].x;
    float _482 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _483 = isnan(1.0) ? _482 : (isnan(_482) ? 1.0 : min(_482, 1.0));
    float _490 = _478 - ((_478 * TEXCOORD_8.x) * _483);
    float _491 = _478 - ((_478 * TEXCOORD_8.y) * _483);
    float _492 = _478 - ((_478 * TEXCOORD_8.z) * _483);
    float _499 = (_490 * (cbMtdParam._m0[17u].x - _349)) + _349;
    float _500 = (_491 * (cbMtdParam._m0[17u].y - _350)) + _350;
    float _501 = (_492 * (cbMtdParam._m0[17u].z - _351)) + _351;
    vec4 _513 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _288) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _289) + cbTextureTilingScale._m0[19u].w));
    float _515 = _513.x;
    float _516 = 1.0 - _515;
    float _544 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_515 - _516) * cbMtdParam._m0[24u].w) + _516) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3752 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _545 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
    float _553 = ((((cbMtdParam._m0[10u].x - _499) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _545) + _499;
    float _554 = ((((cbMtdParam._m0[10u].y - _500) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _545) + _500;
    float _555 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _501)) * _545) + _501;
    vec4 _568 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _570 = _568.x;
    float _572 = _570 - (_570 * _490);
    float _574 = _572 - (_572 * _545);
    float _579 = (((_369.z - _399) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _399;
    vec4 _593 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _288) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _289) + cbTextureTilingScale._m0[15u].w));
    float _600 = (_593.x * 2.0) + (-1.0);
    float _601 = (_593.y * 2.0) + (-1.0);
    float _602 = dot(vec2(_600, _601), vec2(_600, _601));
    float _3763 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _610 = ((_593.z - _579) * _490) + _579;
    float _613 = ((cbMtdParam._m0[23u].y - _610) * _545) + _610;
    vec4 _632 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _288) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _289) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _638 = (_632.x * 2.0) + (-1.0);
    float _639 = (_632.y * 2.0) + (-1.0);
    float _640 = dot(vec2(_638, _639), vec2(_638, _639));
    float _3774 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _655 = ((sqrt(1.0 - (isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0)))) - _410) * _492) + _410;
    float _658 = (((_600 - _415) * _490) + _415) + (cbMtdParam._m0[21u].x * _415);
    float _659 = (((_601 - _416) * _491) + _416) + (cbMtdParam._m0[21u].x * _416);
    float _670 = (((_638 - _658) + (_658 * cbMtdParam._m0[22u].z)) * _545) + _658;
    float _671 = (((_639 - _659) + (_659 * cbMtdParam._m0[22u].z)) * _545) + _659;
    float _672 = (_545 * (sqrt(1.0 - (isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0)))) - _655)) + _655;
    float _674 = cbMtdParam._m0[22u].x + _395.w;
    float _677 = fma(_672, _238, fma(_671, _245, _670 * _231));
    float _680 = fma(_672, _239, fma(_671, _246, _670 * _232));
    float _683 = fma(_672, _240, fma(_671, _247, _670 * _233));
    float _687 = inversesqrt(dot(vec3(_677, _680, _683), vec3(_677, _680, _683)));
    float _688 = _687 * _677;
    float _689 = _687 * _680;
    float _690 = _687 * _683;
    float _3785 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _691 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _3796 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _3807 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _3818 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _3829 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _3840 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _696 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _710 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _750 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _760 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _750);
    float _761 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _750);
    float _762 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _750);
    float _766 = inversesqrt(dot(vec3(_760, _761, _762), vec3(_760, _761, _762)));
    float _767 = _760 * _766;
    float _768 = _761 * _766;
    float _769 = _762 * _766;
    vec4 _774 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _776 = _774.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _951 = sqrt(((_760 * _760) + (_761 * _761)) + (_762 * _762));
        float _957 = (cbMatDynParam._m0[5u].x * _951) + cbMatDynParam._m0[5u].y;
        float _3851 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _962 = (cbMatDynParam._m0[5u].z * _951) + cbMatDynParam._m0[5u].w;
        float _3862 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) - _958)) + _958) < ((_776 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _788 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _789 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _809 = fma(_690, cbSceneParam._m0[5u].z, fma(_689, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _688));
    float _812 = fma(_690, cbSceneParam._m0[6u].z, fma(_689, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _688));
    float _815 = fma(_690, cbSceneParam._m0[7u].z, fma(_689, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _688));
    uint _828 = _269 + 9u;
    uint _829 = _828 + uint(cbMatDynParam._m0[0u].w);
    float _835 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0)))) * cbInstanceData._m0[_829].x;
    float _836 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0)))) * cbInstanceData._m0[_829].y;
    float _837 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0)))) * cbInstanceData._m0[_829].z;
    float _3873 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _838 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _3884 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _839 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _3895 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _840 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _841 = 1.0 - _696;
    float _842 = _838 * _841;
    float _843 = _839 * _841;
    float _844 = _840 * _841;
    float _849 = (_838 + (-0.039999999105930328369140625)) * _696;
    float _850 = (_839 + (-0.039999999105930328369140625)) * _696;
    float _851 = (_840 + (-0.039999999105930328369140625)) * _696;
    float _852 = _849 + 0.039999999105930328369140625;
    float _854 = _850 + 0.039999999105930328369140625;
    float _855 = _851 + 0.039999999105930328369140625;
    vec4 _864 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _788, cbSceneParam._m0[86u].y * _789));
    float _868 = ((isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * TEXCOORD_5.w) * _864.x;
    float _869 = dot(vec3(_688, _689, _690), vec3(_767, _768, _769));
    float _872 = _869 * 2.0;
    float _876 = (_872 * _688) - _767;
    float _877 = (_872 * _689) - _768;
    float _878 = (_872 * _690) - _769;
    float _882 = abs(dot(vec3(_767, _768, _769), vec3(_688, _689, _690)));
    float _3906 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _884 = sqrt(_691);
    float _897 = exp2((_884 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_884 * 3.0));
    float _903 = (1.0 - _897) * ((_884 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _904 = _897 * _884;
    float _932 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _936 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _940 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1269;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _994 = fma(_940, cbModelParam._m0[26u].z, fma(_936, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _932));
        float _998 = fma(_940, cbModelParam._m0[27u].z, fma(_936, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _932));
        float _1002 = fma(_940, cbModelParam._m0[28u].z, fma(_936, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _932));
        float _1027 = _932 + _688;
        float _1028 = _936 + _689;
        float _1029 = _940 + _690;
        float _1039 = fma(_1029, cbModelParam._m0[26u].z, fma(_1028, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1027)) - _994;
        float _1040 = fma(_1029, cbModelParam._m0[27u].z, fma(_1028, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1027)) - _998;
        float _1041 = fma(_1029, cbModelParam._m0[28u].z, fma(_1028, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1027)) - _1002;
        float _1045 = inversesqrt(dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041)));
        float _1058 = ((_1045 * _1039) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_994 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1059 = ((_1045 * _1040) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_998 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1060 = ((_1045 * _1041) / cbModelParam._m0[34u].z) + ((((((_1002 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1058, _1059, _1060), 0.0);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1058, _1059, _1060), 0.0);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1058, _1059, _1060), 0.0);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1058, _1059, _1060), 0.0);
        float _1097 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1063.x + (-0.5));
        float _1099 = _1097 * (_1063.y + (-0.5));
        float _1100 = _1097 * (_1063.z + (-0.5));
        float _1107 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1070.x + (-0.5));
        float _1109 = _1107 * (_1070.y + (-0.5));
        float _1110 = _1107 * (_1070.z + (-0.5));
        float _1117 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1077.x + (-0.5));
        float _1119 = _1117 * (_1077.y + (-0.5));
        float _1120 = _1117 * (_1077.z + (-0.5));
        float _1127 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1084.x + (-0.5));
        float _1129 = _1127 * (_1084.y + (-0.5));
        float _1130 = _1127 * (_1084.z + (-0.5));
        float _1131 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1132 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1133 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1134 = _1098 * 0.5;
        float _1135 = _1108 * 0.5;
        float _1136 = _1118 * 0.5;
        float _1137 = dot(vec3(_1134, _1135, _1136), vec3(_1134, _1135, _1136));
        float _1142 = (_1137 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1137);
        float _1151 = (dot(vec3(_688, _689, _690), vec3(_1142 * _1134, _1142 * _1135, _1142 * _1136)) + 1.0) * 0.5;
        float _3932 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1161 = sqrt(((_1135 * _1135) + (_1134 * _1134)) + (_1136 * _1136)) / (_1131 + 9.9999997473787516355514526367188e-06);
        float _3943 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1163 = _1162 * 2.0;
        float _1167 = (1.0 - _1162) / (_1162 + 1.0);
        float _3954 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1177 = ((((1.0 - _1168) * (_1163 + 2.0)) * exp2(log2(isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * (_1163 + 1.0))) + _1168) * _1131;
        float _1178 = _1099 * 0.5;
        float _1179 = _1109 * 0.5;
        float _1180 = _1119 * 0.5;
        float _1181 = dot(vec3(_1178, _1179, _1180), vec3(_1178, _1179, _1180));
        float _1186 = (_1181 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1181);
        float _1194 = (dot(vec3(_688, _689, _690), vec3(_1186 * _1178, _1186 * _1179, _1186 * _1180)) + 1.0) * 0.5;
        float _3965 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1203 = sqrt(((_1179 * _1179) + (_1178 * _1178)) + (_1180 * _1180)) / (_1132 + 9.9999997473787516355514526367188e-06);
        float _3976 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1205 = _1204 * 2.0;
        float _1209 = (1.0 - _1204) / (_1204 + 1.0);
        float _3987 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1219 = ((((1.0 - _1210) * (_1205 + 2.0)) * exp2(log2(isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * (_1205 + 1.0))) + _1210) * _1132;
        float _1220 = _1100 * 0.5;
        float _1221 = _1110 * 0.5;
        float _1222 = _1120 * 0.5;
        float _1223 = dot(vec3(_1220, _1221, _1222), vec3(_1220, _1221, _1222));
        float _1228 = (_1223 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1223);
        float _1236 = (dot(vec3(_688, _689, _690), vec3(_1228 * _1220, _1228 * _1221, _1228 * _1222)) + 1.0) * 0.5;
        float _3998 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1245 = sqrt(((_1221 * _1221) + (_1220 * _1220)) + (_1222 * _1222)) / (_1133 + 9.9999997473787516355514526367188e-06);
        float _4009 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1247 = _1246 * 2.0;
        float _1251 = (1.0 - _1246) / (_1246 + 1.0);
        float _4020 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1261 = ((((1.0 - _1252) * (_1247 + 2.0)) * exp2(log2(isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * (_1247 + 1.0))) + _1252) * _1133;
        _1269 = _1100;
        _1271 = _1099;
        _1272 = _1098;
        _1273 = _1110;
        _1274 = _1109;
        _1275 = _1108;
        _1276 = _1120;
        _1277 = _1119;
        _1278 = _1118;
        _1279 = _1133;
        _1280 = _1132;
        _1281 = _1131;
        _1282 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)));
        _1283 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0)));
        _1284 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)));
    }
    else
    {
        _1269 = _1270;
        _1271 = _1270;
        _1272 = _1270;
        _1273 = _1270;
        _1274 = _1270;
        _1275 = _1270;
        _1276 = _1270;
        _1277 = _1270;
        _1278 = _1270;
        _1279 = _1270;
        _1280 = _1270;
        _1281 = _1270;
        _1282 = 0.0;
        _1283 = 0.0;
        _1284 = 0.0;
    }
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1312 = fma(_940, cbModelParam._m0[30u].z, fma(_936, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _932));
        float _1316 = fma(_940, cbModelParam._m0[31u].z, fma(_936, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _932));
        float _1320 = fma(_940, cbModelParam._m0[32u].z, fma(_936, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _932));
        float _1343 = _932 + _688;
        float _1344 = _936 + _689;
        float _1345 = _940 + _690;
        float _1355 = fma(_1345, cbModelParam._m0[30u].z, fma(_1344, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1343)) - _1312;
        float _1356 = fma(_1345, cbModelParam._m0[31u].z, fma(_1344, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1343)) - _1316;
        float _1357 = fma(_1345, cbModelParam._m0[32u].z, fma(_1344, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1343)) - _1320;
        float _1361 = inversesqrt(dot(vec3(_1355, _1356, _1357), vec3(_1355, _1356, _1357)));
        float _1374 = ((_1361 * _1355) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1312 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1375 = ((_1361 * _1356) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1316 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1376 = ((_1361 * _1357) / cbModelParam._m0[35u].z) + ((((((_1320 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1378 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1374, _1375, _1376), 0.0);
        vec4 _1385 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1374, _1375, _1376), 0.0);
        vec4 _1392 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1374, _1375, _1376), 0.0);
        vec4 _1399 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1374, _1375, _1376), 0.0);
        float _1411 = exp2((_1378.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1378.x + (-0.5));
        float _1413 = _1411 * (_1378.y + (-0.5));
        float _1414 = _1411 * (_1378.z + (-0.5));
        float _1421 = exp2((_1385.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1385.x + (-0.5));
        float _1423 = _1421 * (_1385.y + (-0.5));
        float _1424 = _1421 * (_1385.z + (-0.5));
        float _1431 = exp2((_1392.w + (-0.5)) * 20.0) * 2.0;
        float _1432 = _1431 * (_1392.x + (-0.5));
        float _1433 = _1431 * (_1392.y + (-0.5));
        float _1434 = _1431 * (_1392.z + (-0.5));
        float _1441 = exp2((_1399.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1399.x + (-0.5));
        float _1443 = _1441 * (_1399.y + (-0.5));
        float _1444 = _1441 * (_1399.z + (-0.5));
        float _1445 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1446 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1447 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1448 = _1412 * 0.5;
        float _1449 = _1422 * 0.5;
        float _1450 = _1432 * 0.5;
        float _1451 = dot(vec3(_1448, _1449, _1450), vec3(_1448, _1449, _1450));
        float _1456 = (_1451 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1451);
        float _1464 = (dot(vec3(_688, _689, _690), vec3(_1456 * _1448, _1456 * _1449, _1456 * _1450)) + 1.0) * 0.5;
        float _4061 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1473 = sqrt(((_1449 * _1449) + (_1448 * _1448)) + (_1450 * _1450)) / (_1445 + 9.9999997473787516355514526367188e-06);
        float _4072 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1475 = _1474 * 2.0;
        float _1479 = (1.0 - _1474) / (_1474 + 1.0);
        float _4083 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1489 = ((((1.0 - _1480) * (_1475 + 2.0)) * exp2(log2(isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * (_1475 + 1.0))) + _1480) * _1445;
        float _1490 = _1413 * 0.5;
        float _1491 = _1423 * 0.5;
        float _1492 = _1433 * 0.5;
        float _1493 = dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492));
        float _1498 = (_1493 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1493);
        float _1506 = (dot(vec3(_688, _689, _690), vec3(_1498 * _1490, _1498 * _1491, _1498 * _1492)) + 1.0) * 0.5;
        float _4094 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1515 = sqrt(((_1491 * _1491) + (_1490 * _1490)) + (_1492 * _1492)) / (_1446 + 9.9999997473787516355514526367188e-06);
        float _4105 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1517 = _1516 * 2.0;
        float _1521 = (1.0 - _1516) / (_1516 + 1.0);
        float _4116 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1531 = ((((1.0 - _1522) * (_1517 + 2.0)) * exp2(log2(isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_1517 + 1.0))) + _1522) * _1446;
        float _1532 = _1414 * 0.5;
        float _1533 = _1424 * 0.5;
        float _1534 = _1434 * 0.5;
        float _1535 = dot(vec3(_1532, _1533, _1534), vec3(_1532, _1533, _1534));
        float _1540 = (_1535 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1535);
        float _1548 = (dot(vec3(_688, _689, _690), vec3(_1540 * _1532, _1540 * _1533, _1540 * _1534)) + 1.0) * 0.5;
        float _4127 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1557 = sqrt(((_1533 * _1533) + (_1532 * _1532)) + (_1534 * _1534)) / (_1447 + 9.9999997473787516355514526367188e-06);
        float _4138 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1559 = _1558 * 2.0;
        float _1563 = (1.0 - _1558) / (_1558 + 1.0);
        float _4149 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1573 = ((((1.0 - _1564) * (_1559 + 2.0)) * exp2(log2(isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_1559 + 1.0))) + _1564) * _1447;
        _1581 = _1414;
        _1582 = _1413;
        _1583 = _1412;
        _1584 = _1424;
        _1585 = _1423;
        _1586 = _1422;
        _1587 = _1434;
        _1588 = _1433;
        _1589 = _1432;
        _1590 = _1447;
        _1591 = _1446;
        _1592 = _1445;
        _1593 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)));
        _1594 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)));
        _1595 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)));
    }
    else
    {
        _1581 = _1270;
        _1582 = _1270;
        _1583 = _1270;
        _1584 = _1270;
        _1585 = _1270;
        _1586 = _1270;
        _1587 = _1270;
        _1588 = _1270;
        _1589 = _1270;
        _1590 = _1270;
        _1591 = _1270;
        _1592 = _1270;
        _1593 = 0.0;
        _1594 = 0.0;
        _1595 = 0.0;
    }
    float _1605 = (cbModelParam._m0[1u].x * (_1593 - _1282)) + _1282;
    float _1606 = (cbModelParam._m0[1u].x * (_1594 - _1283)) + _1283;
    float _1607 = (cbModelParam._m0[1u].x * (_1595 - _1284)) + _1284;
    float _1628 = fma(_1607, cbSceneParam._m0[89u].z, fma(_1606, cbSceneParam._m0[89u].y, _1605 * cbSceneParam._m0[89u].x));
    float _1631 = fma(_1607, cbSceneParam._m0[90u].z, fma(_1606, cbSceneParam._m0[90u].y, _1605 * cbSceneParam._m0[90u].x));
    float _1634 = fma(_1607, cbSceneParam._m0[91u].z, fma(_1606, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1605));
    float _1649 = _876 * 0.5;
    float _1650 = _877 * 0.5;
    float _1651 = _878 * 0.5;
    float _1652 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1583, _1586, _1589, _1592));
    float _1655 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1582, _1585, _1588, _1591));
    float _1658 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1581, _1584, _1587, _1590));
    float _1692;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1665 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1269, _1273, _1276, _1279));
        float _1669 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1271, _1274, _1277, _1280));
        float _1673 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1272, _1275, _1278, _1281));
        float _1680 = dot(vec4(cbModelParam._m0[39u]), vec4(_1649, _1650, _1651, 1.0));
        _1692 = dot(vec3(isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)), isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)), isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1680) ? 0.0 : (isnan(0.0) ? _1680 : max(0.0, _1680))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1692 = 1.0;
    }
    float _1703;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1694 = dot(vec4(cbModelParam._m0[40u]), vec4(_1649, _1650, _1651, 1.0));
        _1703 = dot(vec3(isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)), isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)), isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1694) ? 0.0 : (isnan(0.0) ? _1694 : max(0.0, _1694))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1703 = 1.0;
    }
    float _1707 = (_1703 * cbModelParam._m0[1u].x) + (_1692 * (1.0 - cbModelParam._m0[1u].x));
    float _1717 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _691);
    float _1718 = isnan(_1717) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1717 : min(cbModelParam._m0[25u].z, _1717));
    float _1799;
    float _1801;
    float _1803;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1766 = fma(_940, cbModelParam._m0[13u].z, fma(_936, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _932)) + cbModelParam._m0[13u].w;
        float _1770 = fma(_940, cbModelParam._m0[14u].z, fma(_936, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _932)) + cbModelParam._m0[14u].w;
        float _1774 = fma(_940, cbModelParam._m0[15u].z, fma(_936, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _932)) + cbModelParam._m0[15u].w;
        float _1777 = fma(_878, cbModelParam._m0[13u].z, fma(_877, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _876));
        float _1780 = fma(_878, cbModelParam._m0[14u].z, fma(_877, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _876));
        float _1783 = fma(_878, cbModelParam._m0[15u].z, fma(_877, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _876));
        float _1811;
        if (_1777 > 0.0)
        {
            _1811 = abs((1.0 - _1766) / _1777);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1777 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1766 + 1.0) / _1777);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1811 = frontier_phi_17_15_ladder;
        }
        float _2036;
        if (_1780 > 0.0)
        {
            _2036 = abs((1.0 - _1770) / _1780);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1780 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1770 + 1.0) / _1780);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2036 = frontier_phi_26_22_ladder;
        }
        float _2293;
        if (_1783 > 0.0)
        {
            _2293 = abs((1.0 - _1774) / _1783);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1774 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2293 = frontier_phi_38_33_ladder;
        }
        float _2295 = isnan(_2036) ? _1811 : (isnan(_1811) ? _2036 : min(_1811, _2036));
        float _2296 = isnan(_2293) ? _2295 : (isnan(_2295) ? _2293 : min(_2295, _2293));
        float _2300 = (_2296 * _1777) + _1766;
        float _2301 = (_2296 * _1780) + _1770;
        float _2302 = (_2296 * _1783) + _1774;
        float _2303 = _2296 * 9.9999997473787516355514526367188e-05;
        float _2305 = (-1.0) - _2303;
        float _2307 = _2303 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2302 > _2307) || ((_2302 < _2305) || ((_2301 > _2307) || ((_2301 < _2305) || ((_2300 < _2305) || (_2300 > _2307))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2430 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2302, cbModelParam._m0[9u].z, fma(_2301, cbModelParam._m0[9u].y, _2300 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2302, cbModelParam._m0[10u].z, fma(_2301, cbModelParam._m0[10u].y, _2300 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2302, cbModelParam._m0[11u].z, fma(_2301, cbModelParam._m0[11u].y, _2300 * cbModelParam._m0[11u].x))), _1718);
            frontier_phi_16_38_ladder = _2430.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2430.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2430.x * cbModelParam._m0[1u].y;
        }
        _1799 = frontier_phi_16_38_ladder_2;
        _1801 = frontier_phi_16_38_ladder_1;
        _1803 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1787 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_876, _877, _878), _1718);
        _1799 = _1787.x * cbModelParam._m0[1u].y;
        _1801 = _1787.y * cbModelParam._m0[1u].y;
        _1803 = _1787.z * cbModelParam._m0[1u].y;
    }
    float _1807 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _691);
    float _1808 = isnan(_1807) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1807 : min(cbModelParam._m0[25u].w, _1807));
    float _1898;
    float _1900;
    float _1902;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1862 = fma(_940, cbModelParam._m0[21u].z, fma(_936, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _932)) + cbModelParam._m0[21u].w;
        float _1866 = fma(_940, cbModelParam._m0[22u].z, fma(_936, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _932)) + cbModelParam._m0[22u].w;
        float _1870 = fma(_940, cbModelParam._m0[23u].z, fma(_936, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _932)) + cbModelParam._m0[23u].w;
        float _1873 = fma(_878, cbModelParam._m0[21u].z, fma(_877, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _876));
        float _1876 = fma(_878, cbModelParam._m0[22u].z, fma(_877, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _876));
        float _1879 = fma(_878, cbModelParam._m0[23u].z, fma(_877, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _876));
        float _2041;
        if (_1873 > 0.0)
        {
            _2041 = abs((1.0 - _1862) / _1873);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1862 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2041 = frontier_phi_28_24_ladder;
        }
        float _2320;
        if (_1876 > 0.0)
        {
            _2320 = abs((1.0 - _1866) / _1876);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1876 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1866 + 1.0) / _1876);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2320 = frontier_phi_40_35_ladder;
        }
        float _2533;
        if (_1879 > 0.0)
        {
            _2533 = abs((1.0 - _1870) / _1879);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1879 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1870 + 1.0) / _1879);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2533 = frontier_phi_49_46_ladder;
        }
        float _2535 = isnan(_2320) ? _2041 : (isnan(_2041) ? _2320 : min(_2041, _2320));
        float _2536 = isnan(_2533) ? _2535 : (isnan(_2535) ? _2533 : min(_2535, _2533));
        float _2540 = (_2536 * _1873) + _1862;
        float _2541 = (_2536 * _1876) + _1866;
        float _2542 = (_2536 * _1879) + _1870;
        float _2543 = _2536 * 9.9999997473787516355514526367188e-05;
        float _2544 = (-1.0) - _2543;
        float _2546 = _2543 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2542 > _2546) || ((_2542 < _2544) || ((_2541 > _2546) || ((_2541 < _2544) || ((_2540 < _2544) || (_2540 > _2546))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2741 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2542, cbModelParam._m0[17u].z, fma(_2541, cbModelParam._m0[17u].y, _2540 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2542, cbModelParam._m0[18u].z, fma(_2541, cbModelParam._m0[18u].y, _2540 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2542, cbModelParam._m0[19u].z, fma(_2541, cbModelParam._m0[19u].y, _2540 * cbModelParam._m0[19u].x))), _1808);
            frontier_phi_25_49_ladder = _2741.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2741.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2741.x * cbModelParam._m0[1u].z;
        }
        _1898 = frontier_phi_25_49_ladder_2;
        _1900 = frontier_phi_25_49_ladder_1;
        _1902 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1882 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_876, _877, _878), _1808);
        _1898 = _1882.x * cbModelParam._m0[1u].z;
        _1900 = _1882.y * cbModelParam._m0[1u].z;
        _1902 = _1882.z * cbModelParam._m0[1u].z;
    }
    float _1915 = (((_903 * _852) + _904) * _868) * ((cbModelParam._m0[1u].w * (_1898 - _1799)) + _1799);
    float _1917 = (((_903 * _854) + _904) * _868) * ((cbModelParam._m0[1u].w * (_1900 - _1801)) + _1801);
    float _1919 = (((_903 * _855) + _904) * _868) * ((cbModelParam._m0[1u].w * (_1902 - _1803)) + _1803);
    float _1922 = fma(_1919, cbSceneParam._m0[89u].z, fma(_1917, cbSceneParam._m0[89u].y, _1915 * cbSceneParam._m0[89u].x));
    float _1925 = fma(_1919, cbSceneParam._m0[90u].z, fma(_1917, cbSceneParam._m0[90u].y, _1915 * cbSceneParam._m0[90u].x));
    float _1928 = fma(_1919, cbSceneParam._m0[91u].z, fma(_1917, cbSceneParam._m0[91u].y, _1915 * cbSceneParam._m0[91u].x));
    vec4 _1936 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_788, _789));
    float _1938 = _1936.w;
    float _1950 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1938);
    float _1951 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1938);
    float _1952 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1938);
    uvec4 _1956 = floatBitsToUint(cbInstanceData._m0[_269 + 5u]);
    uint _1958 = _1956.x * 14u;
    uint _1959 = _1958 + 13u;
    float _1966 = _868 + (-1.0);
    float _1971 = (cbLight._m0[_1959].x * _1966) + 1.0;
    float _1972 = (cbLight._m0[_1959].y * _1966) + 1.0;
    float _1973 = (cbLight._m0[_1959].z * _1966) + 1.0;
    float _1974 = (cbLight._m0[_1959].w * _1966) + 1.0;
    uint _1975 = _1958 + 5u;
    float _1981 = isnan(1.0) ? _1972 : (isnan(_1972) ? 1.0 : min(_1972, 1.0));
    uint _1985 = _1958 + 4u;
    float _1995 = isnan(1.0) ? _1971 : (isnan(_1971) ? 1.0 : min(_1971, 1.0));
    uint _1999 = _1958 | 1u;
    float _2010 = dot(vec3(cbLight._m0[_1958].xyz), vec3(_688, _689, _690));
    float _2013 = dot(vec3(cbLight._m0[_1999].xyz), vec3(_688, _689, _690));
    float _4285 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _4296 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2018 = (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * 0.3183098733425140380859375;
    float _2020 = (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * 0.3183098733425140380859375;
    float _2027 = ((cbLight._m0[_1975].x * _1981) * _2020) + (((cbLight._m0[_1985].x * _1950) * _1995) * _2018);
    float _2028 = ((_1981 * cbLight._m0[_1975].y) * _2020) + (((cbLight._m0[_1985].y * _1951) * _1995) * _2018);
    float _2029 = ((_1981 * cbLight._m0[_1975].z) * _2020) + (((cbLight._m0[_1985].z * _1952) * _1995) * _2018);
    uvec4 _2033 = floatBitsToUint(cbLight._m0[_1958 + 12u]);
    bool _2035 = _2033.x == 0u;
    float _2046;
    float _2048;
    float _2050;
    if (_2035)
    {
        _2046 = _2027;
        _2048 = _2028;
        _2050 = _2029;
    }
    else
    {
        uint _2054 = _1958 + 6u;
        float _2070 = (dot(vec3(cbLight._m0[_1958 + 2u].xyz), vec3(_688, _689, _690)) * 0.5) + 0.5;
        float _2071 = _2070 * _2070;
        float _4307 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
        float _2072 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _2073 = isnan(1.0) ? _1973 : (isnan(_1973) ? 1.0 : min(_1973, 1.0));
        _2046 = (((cbLight._m0[_2054].x * 0.3183098733425140380859375) * _2072) * _2073) + _2027;
        _2048 = (((cbLight._m0[_2054].y * 0.3183098733425140380859375) * _2072) * _2073) + _2028;
        _2050 = (((cbLight._m0[_2054].z * 0.3183098733425140380859375) * _2072) * _2073) + _2029;
    }
    bool _2053 = _2033.y == 0u;
    float _2091;
    float _2093;
    float _2095;
    if (_2053)
    {
        _2091 = _2046;
        _2093 = _2048;
        _2095 = _2050;
    }
    else
    {
        uint _2264 = _1958 + 7u;
        float _2280 = (dot(vec3(cbLight._m0[_1958 + 3u].xyz), vec3(_688, _689, _690)) * 0.5) + 0.5;
        float _2281 = _2280 * _2280;
        float _4323 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        float _2282 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _2283 = isnan(1.0) ? _1974 : (isnan(_1974) ? 1.0 : min(_1974, 1.0));
        _2091 = (((cbLight._m0[_2264].x * 0.3183098733425140380859375) * _2282) * _2283) + _2046;
        _2093 = (((cbLight._m0[_2264].y * 0.3183098733425140380859375) * _2282) * _2283) + _2048;
        _2095 = (((cbLight._m0[_2264].z * 0.3183098733425140380859375) * _2282) * _2283) + _2050;
    }
    uint _2098 = _1958 + 8u;
    float _2111 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1958].w)) * _691) * 0.949999988079071044921875);
    float _2112 = _2111 * _2111;
    float _2113 = cbLight._m0[_1958].x + _767;
    float _2114 = cbLight._m0[_1958].y + _768;
    float _2115 = cbLight._m0[_1958].z + _769;
    float _2119 = inversesqrt(dot(vec3(_2113, _2114, _2115), vec3(_2113, _2114, _2115)));
    float _2120 = _2119 * _2113;
    float _2121 = _2119 * _2114;
    float _2122 = _2119 * _2115;
    float _2123 = dot(vec3(_688, _689, _690), vec3(cbLight._m0[_1958].xyz));
    float _4339 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2126 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
    float _4350 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _2127 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
    float _2128 = dot(vec3(_688, _689, _690), vec3(_2120, _2121, _2122));
    float _4361 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2131 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
    float _2132 = dot(vec3(cbLight._m0[_1958].xyz), vec3(_2120, _2121, _2122));
    float _4372 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2136 = _2112 * _2112;
    float _2140 = ((_2131 * _2131) * (_2136 + (-1.0))) + 1.0;
    float _2148 = exp2(log2(1.0 - (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0)))) * 5.0);
    float _2149 = 0.959999978542327880859375 - _849;
    float _2151 = 0.959999978542327880859375 - _850;
    float _2152 = 0.959999978542327880859375 - _851;
    float _2159 = 1.0 - _2112;
    float _2170 = (0.5 / (((_2127 * ((_2126 * _2159) + _2112)) + 9.9999999392252902907785028219223e-09) + (((_2127 * _2159) + _2112) * _2126))) * _2126;
    float _4383 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _2172 = (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_2136 / ((_2140 * _2140) * 3.141590118408203125));
    uint _2186 = _1958 + 9u;
    float _2197 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1999].w)) * _691) * 0.949999988079071044921875);
    float _2198 = _2197 * _2197;
    float _2199 = cbLight._m0[_1999].x + _767;
    float _2200 = cbLight._m0[_1999].y + _768;
    float _2201 = cbLight._m0[_1999].z + _769;
    float _2205 = inversesqrt(dot(vec3(_2199, _2200, _2201), vec3(_2199, _2200, _2201)));
    float _2206 = _2205 * _2199;
    float _2207 = _2205 * _2200;
    float _2208 = _2205 * _2201;
    float _2209 = dot(vec3(_688, _689, _690), vec3(cbLight._m0[_1999].xyz));
    float _4394 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2212 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
    float _2213 = dot(vec3(_688, _689, _690), vec3(_2206, _2207, _2208));
    float _4405 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2216 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
    float _2217 = dot(vec3(cbLight._m0[_1999].xyz), vec3(_2206, _2207, _2208));
    float _4416 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2221 = _2198 * _2198;
    float _2225 = ((_2216 * _2216) * (_2221 + (-1.0))) + 1.0;
    float _2232 = exp2(log2(1.0 - (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0)))) * 5.0);
    float _2239 = 1.0 - _2198;
    float _2249 = (0.5 / (((_2127 * ((_2212 * _2239) + _2198)) + 9.9999999392252902907785028219223e-09) + (((_2127 * _2239) + _2198) * _2212))) * _2212;
    float _4427 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _2251 = (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_2221 / ((_2225 * _2225) * 3.141590118408203125));
    float _2261 = (((((_2232 * _2149) + _852) * cbLight._m0[_2186].x) * _2251) * _1981) + ((((cbLight._m0[_2098].x * _1950) * ((_2148 * _2149) + _852)) * _2172) * _1995);
    float _2262 = (((((_2232 * _2151) + _854) * cbLight._m0[_2186].y) * _2251) * _1981) + ((((cbLight._m0[_2098].y * _1951) * ((_2148 * _2151) + _854)) * _2172) * _1995);
    float _2263 = (((((_2232 * _2152) + _855) * cbLight._m0[_2186].z) * _2251) * _1981) + ((((cbLight._m0[_2098].z * _1952) * ((_2148 * _2152) + _855)) * _2172) * _1995);
    float _2325;
    float _2327;
    float _2329;
    if (_2035)
    {
        _2325 = _2261;
        _2327 = _2262;
        _2329 = _2263;
    }
    else
    {
        uint _2331 = _1958 + 2u;
        uint _2335 = _1958 + 10u;
        float _2349 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2331].w)) * _691) * 0.949999988079071044921875);
        float _2350 = _2349 * _2349;
        float _2351 = cbLight._m0[_2331].x + _767;
        float _2352 = cbLight._m0[_2331].y + _768;
        float _2353 = cbLight._m0[_2331].z + _769;
        float _2357 = inversesqrt(dot(vec3(_2351, _2352, _2353), vec3(_2351, _2352, _2353)));
        float _2358 = _2357 * _2351;
        float _2359 = _2357 * _2352;
        float _2360 = _2357 * _2353;
        float _2361 = dot(vec3(_688, _689, _690), vec3(cbLight._m0[_2331].xyz));
        float _4438 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2364 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _2365 = dot(vec3(_688, _689, _690), vec3(_2358, _2359, _2360));
        float _4449 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        float _2368 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _2369 = dot(vec3(cbLight._m0[_2331].xyz), vec3(_2358, _2359, _2360));
        float _4460 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2373 = _2350 * _2350;
        float _2377 = ((_2368 * _2368) * (_2373 + (-1.0))) + 1.0;
        float _2384 = exp2(log2(1.0 - (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0)))) * 5.0);
        float _2391 = 1.0 - _2350;
        float _2401 = (0.5 / (((_2127 * ((_2364 * _2391) + _2350)) + 9.9999999392252902907785028219223e-09) + (((_2127 * _2391) + _2350) * _2364))) * _2364;
        float _4471 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        float _2403 = (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_2373 / ((_2377 * _2377) * 3.141590118408203125));
        float _2404 = isnan(1.0) ? _1973 : (isnan(_1973) ? 1.0 : min(_1973, 1.0));
        _2325 = (((((_2384 * _2149) + _852) * cbLight._m0[_2335].x) * _2403) * _2404) + _2261;
        _2327 = (((((_2384 * _2151) + _854) * cbLight._m0[_2335].y) * _2403) * _2404) + _2262;
        _2329 = (((((_2384 * _2152) + _855) * cbLight._m0[_2335].z) * _2403) * _2404) + _2263;
    }
    float _2439;
    float _2441;
    float _2443;
    if (_2053)
    {
        _2439 = _2325;
        _2441 = _2327;
        _2443 = _2329;
    }
    else
    {
        uint _2450 = _1958 + 3u;
        uint _2454 = _1958 + 11u;
        float _2468 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2450].w)) * _691) * 0.949999988079071044921875);
        float _2469 = _2468 * _2468;
        float _2470 = cbLight._m0[_2450].x + _767;
        float _2471 = cbLight._m0[_2450].y + _768;
        float _2472 = cbLight._m0[_2450].z + _769;
        float _2476 = inversesqrt(dot(vec3(_2470, _2471, _2472), vec3(_2470, _2471, _2472)));
        float _2477 = _2476 * _2470;
        float _2478 = _2476 * _2471;
        float _2479 = _2476 * _2472;
        float _2480 = dot(vec3(_688, _689, _690), vec3(cbLight._m0[_2450].xyz));
        float _4487 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2483 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _2484 = dot(vec3(_688, _689, _690), vec3(_2477, _2478, _2479));
        float _4498 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
        float _2487 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _2488 = dot(vec3(cbLight._m0[_2450].xyz), vec3(_2477, _2478, _2479));
        float _4509 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2492 = _2469 * _2469;
        float _2496 = ((_2487 * _2487) * (_2492 + (-1.0))) + 1.0;
        float _2503 = exp2(log2(1.0 - (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0)))) * 5.0);
        float _2510 = 1.0 - _2469;
        float _2520 = (0.5 / (((_2127 * ((_2483 * _2510) + _2469)) + 9.9999999392252902907785028219223e-09) + (((_2127 * _2510) + _2469) * _2483))) * _2483;
        float _4520 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        float _2522 = (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * (_2492 / ((_2496 * _2496) * 3.141590118408203125));
        float _2523 = isnan(1.0) ? _1974 : (isnan(_1974) ? 1.0 : min(_1974, 1.0));
        _2439 = (((((_2503 * _2149) + _852) * cbLight._m0[_2454].x) * _2522) * _2523) + _2325;
        _2441 = (((((_2503 * _2151) + _854) * cbLight._m0[_2454].y) * _2522) * _2523) + _2327;
        _2443 = (((((_2503 * _2152) + _855) * cbLight._m0[_2454].z) * _2522) * _2523) + _2329;
    }
    float _2658;
    float _2660;
    float _2662;
    float _2664;
    float _2666;
    float _2668;
    if (_1956.y == 0u)
    {
        float _2598 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2599 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2598;
        float _2600 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2598;
        float _2601 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2598;
        uvec4 _2613 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2614 = _2613.x;
        uint _2625 = uint((float(_2613.y) * floor(float(uint(cbSceneParam._m0[85u].y * _789) / _2614))) + floor(float(uint(cbSceneParam._m0[85u].x * _788) / _2614)));
        float _2635 = (log2(_2601 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2636 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        uint _2639 = uint(isnan(14.0) ? _2636 : (isnan(_2636) ? 14.0 : min(_2636, 14.0)));
        uvec4 _2644 = texelFetch(g_lightClusterGridBuffer, int(((_2639 << 2u) + (_2625 << 6u)) >> 2u));
        uint _2645 = _2644.x;
        uint _2646 = _2613.z;
        float _2746;
        float _2748;
        float _2750;
        float _2752;
        float _2754;
        float _2756;
        if (((((1u << ((_2646 >> 4u) & 15u)) + 4294967295u) & _2645) == 0u) || ((_2646 & 240u) == 0u))
        {
            _2746 = 0.0;
            _2748 = 0.0;
            _2750 = 0.0;
            _2752 = 0.0;
            _2754 = 0.0;
            _2756 = 0.0;
        }
        else
        {
            float _2747;
            float _2749;
            float _2751;
            float _2753;
            float _2755;
            float _2757;
            float _2898 = 0.0;
            float _2899 = 0.0;
            float _2900 = 0.0;
            float _2901 = 0.0;
            float _2902 = 0.0;
            float _2903 = 0.0;
            uint _2904 = 0u;
            uint _2913;
            bool _2914;
            for (;;)
            {
                _2913 = texelFetch(g_lightClassification, int((((_2639 << 5u) + (_2625 << 9u)) + (_2904 << 2u)) >> 2u)).x;
                _2914 = _2913 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2914)
                {
                    frontier_phi_66_pred = _2898;
                    frontier_phi_66_pred_1 = _2903;
                    frontier_phi_66_pred_2 = _2902;
                    frontier_phi_66_pred_3 = _2901;
                    frontier_phi_66_pred_4 = _2900;
                    frontier_phi_66_pred_5 = _2899;
                }
                else
                {
                    float _3043;
                    float _3044;
                    float _3045;
                    float _3046;
                    float _3047;
                    float _3048;
                    uint _3049;
                    _3043 = _2898;
                    _3044 = _2899;
                    _3045 = _2900;
                    _3046 = _2901;
                    _3047 = _2902;
                    _3048 = _2903;
                    _3049 = _2913;
                    float _2970;
                    float _2971;
                    float _2972;
                    float _2973;
                    float _2974;
                    float _2975;
                    for (;;)
                    {
                        uint _3053 = uint(findLSB(_3049)) + (_2904 << 5u);
                        uint _3050 = (_3049 + 4294967295u) & _3049;
                        uint _3055 = _3053 * 48u;
                        vec4 _3069 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3055)).x, texelFetch(g_PointLightRenderingBuffer, int(_3055 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3055 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3055 + 3u)).x));
                        uint _3075 = (_3053 * 48u) + 4u;
                        vec4 _3088 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3075)).x, texelFetch(g_PointLightRenderingBuffer, int(_3075 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3075 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3075 + 3u)).x));
                        uint _3094 = (_3053 * 48u) + 8u;
                        vec3 _3105 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3094)).x, texelFetch(g_PointLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3094 + 2u)).x));
                        float _3109 = _3069.x - _2599;
                        float _3110 = _3069.y - _2600;
                        float _3111 = _3069.z - _2601;
                        float _3112 = dot(vec3(_3109, _3110, _3111), vec3(_3109, _3110, _3111));
                        float _3115 = inversesqrt(_3112);
                        float _3116 = _3115 * _3109;
                        float _3117 = _3115 * _3110;
                        float _3118 = _3115 * _3111;
                        float _3119 = dot(vec3(_809, _812, _815), vec3(_3116, _3117, _3118));
                        float _3124 = 1.0 - (_3112 * _3069.w);
                        float _4546 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
                        float _3125 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                        float _3126 = sqrt(_3112) * _3088.w;
                        float _3129 = 1.39999997615814208984375 / (_3126 + 1.39999997615814208984375);
                        float _3130 = _3129 * _3129;
                        float _3133 = ((1.0 - _3130) * _3119) + _3130;
                        float _3136 = _3126 * _3126;
                        float _3140 = ((isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0))) * _3125) / ((_3136 * 0.699999988079071044921875) + 1.0);
                        float _3144 = (-0.0) - _2599;
                        float _3145 = (-0.0) - _2600;
                        float _3146 = (-0.0) - _2601;
                        float _3150 = inversesqrt(dot(vec3(_3144, _3145, _3146), vec3(_3144, _3145, _3146)));
                        float _3151 = _3150 * _3144;
                        float _3152 = _3150 * _3145;
                        float _3153 = _3150 * _3146;
                        float _3161 = exp2(log2(1.0 / ((_3136 * 3.5) + 5.0)) * 0.25);
                        float _3162 = 1.0 - _884;
                        float _3169 = sqrt(1.0 - ((1.0 - (_3162 * _3162)) * (1.0 - (_3161 * _3161))));
                        float _3170 = _3169 * _3169;
                        float _3171 = _3170 * _3170;
                        float _3172 = _3151 + _3116;
                        float _3173 = _3152 + _3117;
                        float _3174 = _3153 + _3118;
                        float _3178 = inversesqrt(dot(vec3(_3172, _3173, _3174), vec3(_3172, _3173, _3174)));
                        float _3182 = dot(vec3(_809, _812, _815), vec3(_3151, _3152, _3153));
                        float _4562 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                        float _3185 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
                        float _3186 = dot(vec3(_809, _812, _815), vec3(_3178 * _3172, _3178 * _3173, _3178 * _3174));
                        float _4573 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
                        float _3189 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
                        float _3193 = ((_3189 * _3189) * (_3171 + (-1.0))) + 1.0;
                        float _3194 = _3129 * _3170;
                        float _3195 = _3194 * _3194;
                        float _3198 = ((1.0 - _3195) * _3119) + _3195;
                        float _4584 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                        float _3199 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
                        float _3200 = 1.0 - _3170;
                        float _3210 = (0.5 / (((_3199 * ((_3185 * _3200) + _3170)) + 9.9999999392252902907785028219223e-09) + (((_3199 * _3200) + _3170) * _3185))) * _3199;
                        float _4595 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                        float _3221 = (((_3171 * 3.1415927410125732421875) * (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0)))) / ((_3193 * _3193) * ((_3136 * 2.1991131305694580078125) + 3.141590118408203125))) * _3125;
                        _2973 = (_3140 * _3088.x) + _3046;
                        _2974 = (_3140 * _3088.y) + _3047;
                        _2975 = (_3140 * _3088.z) + _3048;
                        _2970 = (_3221 * _3105.x) + _3043;
                        _2971 = (_3221 * _3105.y) + _3044;
                        _2972 = (_3221 * _3105.z) + _3045;
                        if (_3050 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3043 = _2970;
                            _3044 = _2971;
                            _3045 = _2972;
                            _3046 = _2973;
                            _3047 = _2974;
                            _3048 = _2975;
                            _3049 = _3050;
                        }
                    }
                    frontier_phi_66_pred = _2970;
                    frontier_phi_66_pred_1 = _2975;
                    frontier_phi_66_pred_2 = _2974;
                    frontier_phi_66_pred_3 = _2973;
                    frontier_phi_66_pred_4 = _2972;
                    frontier_phi_66_pred_5 = _2971;
                }
                _2747 = frontier_phi_66_pred;
                _2757 = frontier_phi_66_pred_1;
                _2755 = frontier_phi_66_pred_2;
                _2753 = frontier_phi_66_pred_3;
                _2751 = frontier_phi_66_pred_4;
                _2749 = frontier_phi_66_pred_5;
                uint _2905 = _2904 + 1u;
                if (_2905 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2898 = _2747;
                    _2899 = _2749;
                    _2900 = _2751;
                    _2901 = _2753;
                    _2902 = _2755;
                    _2903 = _2757;
                    _2904 = _2905;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2746 = _2747;
            _2748 = _2749;
            _2750 = _2751;
            _2752 = _2753;
            _2754 = _2755;
            _2756 = _2757;
        }
        uvec4 _2760 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2761 = _2760.z;
        uint _2763 = (_2761 >> 8u) & 15u;
        float _2866;
        float _2868;
        float _2870;
        float _2872;
        float _2874;
        float _2876;
        if (((4294967295u << _2763) & _2645) == 0u)
        {
            _2866 = _2746;
            _2868 = _2748;
            _2870 = _2750;
            _2872 = _2752;
            _2874 = _2754;
            _2876 = _2756;
        }
        else
        {
            float _2891 = inversesqrt(dot(vec3(_2599, _2600, _2601), vec3(_2599, _2600, _2601)));
            float _2892 = _2891 * _2599;
            float _2893 = _2891 * _2600;
            float _2894 = _2891 * _2601;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2763 < ((_2761 >> 12u) & 15u))
            {
                float _2867;
                float _2869;
                float _2871;
                float _2873;
                float _2875;
                float _2877;
                float _3026 = _2746;
                float _3027 = _2748;
                float _3028 = _2750;
                float _3029 = _2752;
                float _3030 = _2754;
                float _3031 = _2756;
                uint _3032 = _2763;
                uint _3041;
                bool _3042;
                for (;;)
                {
                    _3041 = texelFetch(g_lightClassification, int((((_2639 << 5u) + (_2625 << 9u)) + (_3032 << 2u)) >> 2u)).x;
                    _3042 = _3041 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3042)
                    {
                        frontier_phi_77_pred = _3031;
                        frontier_phi_77_pred_1 = _3030;
                        frontier_phi_77_pred_2 = _3029;
                        frontier_phi_77_pred_3 = _3028;
                        frontier_phi_77_pred_4 = _3027;
                        frontier_phi_77_pred_5 = _3026;
                    }
                    else
                    {
                        float _3235;
                        float _3236;
                        float _3237;
                        float _3238;
                        float _3239;
                        float _3240;
                        float _3528;
                        float _3529;
                        float _3530;
                        float _3531;
                        float _3532;
                        float _3533;
                        float _3248 = _3026;
                        float _3249 = _3027;
                        float _3250 = _3028;
                        float _3251 = _3029;
                        float _3252 = _3030;
                        float _3253 = _3031;
                        uint _3254 = _3041;
                        uint _3255;
                        vec4 _3280;
                        float _3281;
                        vec4 _3296;
                        vec3 _3308;
                        vec4 _3323;
                        vec4 _3338;
                        float _3384;
                        bool _3385;
                        for (;;)
                        {
                            uint _3265 = ((_3032 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3254));
                            _3255 = (_3254 + 4294967295u) & _3254;
                            uint _3267 = _3265 * 40u;
                            _3280 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3267)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 3u)).x));
                            _3281 = _3280.w;
                            uint _3283 = (_3265 * 40u) + 4u;
                            _3296 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3283)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 3u)).x));
                            uint _3298 = (_3265 * 40u) + 8u;
                            _3308 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3298)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 2u)).x));
                            uint _3310 = (_3265 * 40u) + 16u;
                            _3323 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3310)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 3u)).x));
                            uint _3325 = (_3265 * 40u) + 20u;
                            _3338 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3325)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 3u)).x));
                            uint _3340 = (_3265 * 40u) + 24u;
                            vec4 _3353 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3340)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 3u)).x));
                            uint _3359 = (_3265 * 40u) + 28u;
                            vec4 _3372 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3359)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 3u)).x));
                            _3384 = fma(_2601, _3372.z, fma(_2600, _3372.y, _3372.x * _2599)) + _3372.w;
                            _3385 = !((fma(_2601, _3353.z, fma(_2600, _3353.y, _3353.x * _2599)) + _3353.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3385)
                            {
                                float _3412 = _3280.x - _2599;
                                float _3413 = _3280.y - _2600;
                                float _3414 = _3280.z - _2601;
                                float _3415 = dot(vec3(_3412, _3413, _3414), vec3(_3412, _3413, _3414));
                                float _3418 = inversesqrt(_3415);
                                float _3419 = _3418 * _3412;
                                float _3420 = _3418 * _3413;
                                float _3421 = _3418 * _3414;
                                float _3425 = 1.0 - (_3415 / (_3281 * _3281));
                                float _4606 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                                float _3426 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                                float _3430 = sqrt(_3415) * _3296.w;
                                float _3432 = 1.39999997615814208984375 / (_3430 + 1.39999997615814208984375);
                                float _3433 = _3432 * _3432;
                                float _3436 = ((1.0 - _3433) * dot(vec3(_3419, _3420, _3421), vec3(_809, _812, _815))) + _3433;
                                float _3439 = _3430 * _3430;
                                float _3443 = (fma(_2601, _3323.z, fma(_2600, _3323.y, _3323.x * _2599)) + _3323.w) / _3384;
                                float _3444 = (fma(_2601, _3338.z, fma(_2600, _3338.y, _3338.x * _2599)) + _3338.w) / _3384;
                                float _3448 = 1.0 - dot(vec2(_3443, _3444), vec2(_3443, _3444));
                                float _4622 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                                float _3449 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
                                float _3450 = _3449 * (((isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0))) * _3426) / ((_3439 * 0.699999988079071044921875) + 1.0));
                                float _3462 = exp2(log2(1.0 / ((_3439 * 3.5) + 5.0)) * 0.25);
                                float _3463 = 1.0 - _884;
                                float _3470 = sqrt(1.0 - ((1.0 - (_3463 * _3463)) * (1.0 - (_3462 * _3462))));
                                float _3471 = _3470 * _3470;
                                float _3472 = _3471 * _3471;
                                float _3473 = _3419 - _2892;
                                float _3474 = _3420 - _2893;
                                float _3475 = _3421 - _2894;
                                float _3479 = inversesqrt(dot(vec3(_3473, _3474, _3475), vec3(_3473, _3474, _3475)));
                                float _3483 = dot(vec3(_809, _812, _815), vec3((-0.0) - _2892, (-0.0) - _2893, (-0.0) - _2894));
                                float _4633 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                                float _3486 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
                                float _3487 = dot(vec3(_809, _812, _815), vec3(_3479 * _3473, _3479 * _3474, _3479 * _3475));
                                float _4644 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                                float _3490 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                                float _3494 = ((_3490 * _3490) * (_3472 + (-1.0))) + 1.0;
                                float _3495 = _3432 * _3471;
                                float _3496 = _3495 * _3495;
                                float _3502 = ((1.0 - _3496) * dot(vec3(_809, _812, _815), vec3(_3419, _3420, _3421))) + _3496;
                                float _4655 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                                float _3503 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                                float _3504 = 1.0 - _3471;
                                float _3514 = (0.5 / (((_3503 * ((_3486 * _3504) + _3471)) + 9.9999999392252902907785028219223e-09) + (((_3503 * _3504) + _3471) * _3486))) * _3503;
                                float _4666 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                                float _3524 = (_3449 * _3426) * (((_3472 * 3.1415927410125732421875) * (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0)))) / ((_3494 * _3494) * ((_3439 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3450 * _3296.y;
                                frontier_phi_83_pred_1 = _3450 * _3296.x;
                                frontier_phi_83_pred_2 = _3524 * _3308.z;
                                frontier_phi_83_pred_3 = _3524 * _3308.y;
                                frontier_phi_83_pred_4 = _3524 * _3308.x;
                                frontier_phi_83_pred_5 = _3450 * _3296.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3532 = frontier_phi_83_pred;
                            _3531 = frontier_phi_83_pred_1;
                            _3530 = frontier_phi_83_pred_2;
                            _3529 = frontier_phi_83_pred_3;
                            _3528 = frontier_phi_83_pred_4;
                            _3533 = frontier_phi_83_pred_5;
                            _3238 = _3531 + _3251;
                            _3239 = _3532 + _3252;
                            _3240 = _3533 + _3253;
                            _3235 = _3528 + _3248;
                            _3236 = _3529 + _3249;
                            _3237 = _3530 + _3250;
                            if (_3255 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3248 = _3235;
                                _3249 = _3236;
                                _3250 = _3237;
                                _3251 = _3238;
                                _3252 = _3239;
                                _3253 = _3240;
                                _3254 = _3255;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3240;
                        frontier_phi_77_pred_1 = _3239;
                        frontier_phi_77_pred_2 = _3238;
                        frontier_phi_77_pred_3 = _3237;
                        frontier_phi_77_pred_4 = _3236;
                        frontier_phi_77_pred_5 = _3235;
                    }
                    _2877 = frontier_phi_77_pred;
                    _2875 = frontier_phi_77_pred_1;
                    _2873 = frontier_phi_77_pred_2;
                    _2871 = frontier_phi_77_pred_3;
                    _2869 = frontier_phi_77_pred_4;
                    _2867 = frontier_phi_77_pred_5;
                    uint _3033 = _3032 + 1u;
                    if (_3033 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3026 = _2867;
                        _3027 = _2869;
                        _3028 = _2871;
                        _3029 = _2873;
                        _3030 = _2875;
                        _3031 = _2877;
                        _3032 = _3033;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2871;
                frontier_phi_58_59_ladder_1 = _2877;
                frontier_phi_58_59_ladder_2 = _2875;
                frontier_phi_58_59_ladder_3 = _2873;
                frontier_phi_58_59_ladder_4 = _2869;
                frontier_phi_58_59_ladder_5 = _2867;
            }
            else
            {
                frontier_phi_58_59_ladder = _2750;
                frontier_phi_58_59_ladder_1 = _2756;
                frontier_phi_58_59_ladder_2 = _2754;
                frontier_phi_58_59_ladder_3 = _2752;
                frontier_phi_58_59_ladder_4 = _2748;
                frontier_phi_58_59_ladder_5 = _2746;
            }
            _2866 = frontier_phi_58_59_ladder_5;
            _2868 = frontier_phi_58_59_ladder_4;
            _2870 = frontier_phi_58_59_ladder;
            _2872 = frontier_phi_58_59_ladder_3;
            _2874 = frontier_phi_58_59_ladder_2;
            _2876 = frontier_phi_58_59_ladder_1;
        }
        float _2881 = isnan(1.0) ? _868 : (isnan(_868) ? 1.0 : min(_868, 1.0));
        _2658 = (_2881 * _2872) + _2091;
        _2660 = (_2881 * _2874) + _2093;
        _2662 = (_2881 * _2876) + _2095;
        _2664 = ((_2866 * _852) * _2881) + _2439;
        _2666 = ((_2868 * _854) * _2881) + _2441;
        _2668 = ((_2870 * _855) * _2881) + _2443;
    }
    else
    {
        _2658 = _2091;
        _2660 = _2093;
        _2662 = _2095;
        _2664 = _2439;
        _2666 = _2441;
        _2668 = _2443;
    }
    float _4682 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _4693 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _4704 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _2685 = ((isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0))) * (_2658 + ((isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) * _868))) + ((_2664 + ((isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0))) * _1707)) * cbPerFrame._m0[3u].x);
    float _2686 = ((isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0))) * (_2660 + ((isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))) * _868))) + ((_2666 + ((isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0))) * _1707)) * cbPerFrame._m0[3u].x);
    float _2687 = ((isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0))) * (_2662 + ((isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))) * _868))) + ((_2668 + ((isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0))) * _1707)) * cbPerFrame._m0[3u].x);
    uint _2688 = _269 + 6u;
    float _2696 = _788 / cbSceneParam._m0[86u].x;
    float _2697 = _789 / cbSceneParam._m0[86u].y;
    vec4 _2711 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2696, _2697, (log2((isnan(cbSceneParam._m0[77u].w) ? _710 : (isnan(_710) ? cbSceneParam._m0[77u].w : min(_710, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2713 = _2711.x;
    float _2714 = _2711.y;
    float _2715 = _2711.z;
    float _2716 = _2711.w;
    float _2808;
    float _2810;
    float _2812;
    float _2814;
    if (_710 > cbSceneParam._m0[78u].w)
    {
        float _2771 = isnan(_710) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _710 : min(cbSceneParam._m0[80u].w, _710));
        float _2772 = _2771 / _710;
        float _2783 = _2772 * _760;
        float _2784 = _761 * _2772;
        float _2785 = (-0.0) - _2784;
        float _2786 = _2772 * _762;
        float _2788 = (cbSceneParam._m0[77u].w * _2785) / _2771;
        float _2789 = _2788 + cbSceneParam._m0[79u].w;
        float _2790 = cbSceneParam._m0[79u].w - _2784;
        float _2796 = sqrt(((_2783 * _2783) + (_2784 * _2784)) + (_2786 * _2786));
        float _2799 = (1.0 - (cbSceneParam._m0[77u].w / _2771)) * _2796;
        float _2804 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2806 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2983;
        if (abs((_2785 - _2788) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2983 = ((((_2789 > 0.0) ? exp2(_2804 * _2789) : (2.0 - exp2(_2806 * _2789))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2799;
        }
        else
        {
            float _2927 = 1.0 / cbSceneParam._m0[80u].x;
            float _2928 = isnan(_2790) ? _2789 : (isnan(_2789) ? _2790 : max(_2789, _2790));
            float _2929 = isnan(_2790) ? _2789 : (isnan(_2789) ? _2790 : min(_2789, _2790));
            float _2938 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : min(_2928, 0.0));
            float _2939 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : min(_2929, 0.0));
            _2983 = ((abs(_2796 / _2785) * cbSceneParam._m0[80u].y) * ((((_2938 - _2939) * 2.0) - ((exp2(_2804 * (isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0)))) - exp2(_2804 * (isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0))))) * _2927)) - ((exp2(_2806 * _2938) - exp2(_2806 * _2939)) * _2927))) + (_2799 * cbSceneParam._m0[80u].z);
        }
        vec4 _2985 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2696, _2697, 1.0), 0.0);
        float _2994 = exp2((_2983 * (-1.44269502162933349609375)) * (1.0 - _2985.w));
        float _2995 = log2(_2994);
        float _3011 = log2(_2716);
        _2808 = (exp2(_3011 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2995 * cbSceneParam._m0[78u].x)) * _2985.x) / cbSceneParam._m0[78u].x)) + _2713;
        _2810 = (exp2(_3011 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2995 * cbSceneParam._m0[78u].y)) * _2985.y) / cbSceneParam._m0[78u].y)) + _2714;
        _2812 = (exp2(_3011 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2995 * cbSceneParam._m0[78u].z)) * _2985.z) / cbSceneParam._m0[78u].z)) + _2715;
        _2814 = _2994 * _2716;
    }
    else
    {
        _2808 = _2713;
        _2810 = _2714;
        _2812 = _2715;
        _2814 = _2716;
    }
    bool _3021;
    vec4 _2824;
    vec4 _2846;
    float _2848;
    float _2852;
    float _2853;
    float _2854;
    float _2855;
    bool _2865;
    for (;;)
    {
        _2824 = cbMatDynParam._m0[0u];
        float _2826 = roundEven(_2824.y);
        bool _2827 = _2826 == 3.0;
        float _2828 = log2(_2814);
        float _2835 = exp2(_2828 * cbSceneParam._m0[78u].x) * _2685;
        float _2836 = exp2(_2828 * cbSceneParam._m0[78u].y) * _2686;
        float _2837 = exp2(_2828 * cbSceneParam._m0[78u].z) * _2687;
        float _2844 = _776 + (-0.5);
        _2846 = cbMtdParam._m0[1u];
        _2848 = _2846.y * _2844;
        float _2851 = (_2826 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2852 = _2851 * (_2827 ? _2835 : (_2835 + (cbSceneParam._m0[72u].w * _2808)));
        _2853 = _2851 * (_2827 ? _2836 : (_2836 + (cbSceneParam._m0[72u].w * _2810)));
        _2854 = _2851 * (_2827 ? _2837 : (_2837 + (cbSceneParam._m0[72u].w * _2812)));
        _2855 = _2844 * 0.999000012874603271484375;
        _2865 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2865)
        {
            if ((cbInstanceData._m0[_269 + 7u].x + _2855) < 0.5)
            {
                _3021 = true;
                break;
            }
        }
        uint _2962 = _828 + uint(_2824.w);
        if ((cbInstanceData._m0[_2962].w < 1.0) && ((cbInstanceData._m0[_2962].w + _2855) < 0.5))
        {
            _3021 = true;
            break;
        }
        if ((_2848 + 1.0) < _2846.x)
        {
            _3021 = true;
            break;
        }
        _3021 = false;
        break;
    }
    float _3226;
    if (_3021)
    {
        discard_state = true;
        _3226 = 0.0;
    }
    else
    {
        _3226 = cbInstanceData._m0[_2688].w;
    }
    SV_Target.x = _2852;
    SV_Target.y = _2853;
    SV_Target.z = _2854;
    SV_Target.w = _3226;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2688].w;
    discard_exit();
}


