#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1440;
float _4102;
float _4103;
float _4104;
float _4105;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _242 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _243 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _244 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _250 = inversesqrt(dot(vec3(_242, _243, _244), vec3(_242, _243, _244)));
    float _257 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _264 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4114 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _4125 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _4136 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    uint _289 = uint(roundEven(NORMAL.w)) * 13u;
    uint _294 = _289 + 1u;
    uint _298 = _289 + 2u;
    float _307 = sqrt(((cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x)) + (cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x));
    float _308 = _307 * TEXCOORD.z;
    float _309 = _307 * TEXCOORD.w;
    vec4 _322 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _308) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _309) + cbTextureTilingScale._m0[13u].w));
    vec4 _346 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _351 = _346.x * cbMtdParam._m0[11u].x;
    float _352 = _346.y * cbMtdParam._m0[11u].y;
    float _353 = _346.z * cbMtdParam._m0[11u].z;
    vec4 _372 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _308) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _309) + cbTextureTilingScale._m0[5u].w));
    vec4 _408 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _410 = _408.x;
    float _422 = dot(vec4(_410, _408.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _439 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_410 - _422) * cbMtdParam._m0[24u].y) + _422) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4147 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _440 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
    float _447 = (_440 * ((_372.x * cbMtdParam._m0[12u].x) - _351)) + _351;
    float _448 = (_440 * ((_372.y * cbMtdParam._m0[12u].y) - _352)) + _352;
    float _449 = (_440 * ((_372.z * cbMtdParam._m0[12u].z) - _353)) + _353;
    float _453 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _322.x) * _447;
    float _456 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _322.y) * _448;
    float _459 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _322.z) * _449;
    float _466 = ((_447 - _453) * (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0)))) + _453;
    float _467 = ((_448 - _456) * (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0)))) + _456;
    float _468 = ((_449 - _459) * (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0)))) + _459;
    vec4 _487 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _308) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _309) + cbTextureTilingScale._m0[14u].w));
    vec4 _507 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _308) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _309) + cbTextureTilingScale._m0[20u].w));
    vec4 _532 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _308) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _309) + cbTextureTilingScale._m0[4u].w));
    vec4 _549 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _551 = _549.x;
    float _552 = _549.y;
    float _553 = _549.z;
    float _562 = ((_532.z - _553) * _440) + _553;
    float _565 = ((((_532.x - _551) * _440) + _551) * 2.0) + (-1.0);
    float _566 = ((((_532.y - _552) * _440) + _552) * 2.0) + (-1.0);
    float _567 = dot(vec2(_565, _566), vec2(_565, _566));
    float _4158 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _572 = sqrt(1.0 - (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))));
    vec4 _585 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _603 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _308) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _309) + cbTextureTilingScale._m0[11u].w));
    float _605 = _603.x;
    float _606 = 1.0 - _605;
    float _612 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _615 = ((isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : min(_612, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _624 = (_615 - ((((((_605 - _606) * cbMtdParam._m0[24u].z) + _606) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _615))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4179 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _625 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
    float _632 = (_625 * ((_487.x * cbMtdParam._m0[18u].x) - _466)) + _466;
    float _633 = (_625 * ((_487.y * cbMtdParam._m0[18u].y) - _467)) + _467;
    float _634 = (_625 * ((_487.z * cbMtdParam._m0[18u].z) - _468)) + _468;
    vec4 _646 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _308) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _309) + cbTextureTilingScale._m0[19u].w));
    float _648 = _646.x;
    float _649 = 1.0 - _648;
    float _674 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_648 - _649) * cbMtdParam._m0[24u].w) + _649) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4190 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _675 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _683 = ((((cbMtdParam._m0[10u].x - _632) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _675) + _632;
    float _684 = ((((cbMtdParam._m0[10u].y - _633) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _675) + _633;
    float _685 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _634)) * _675) + _634;
    vec4 _697 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _711 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _713 = _711.x;
    float _731 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _308) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _309) + cbTextureTilingScale._m0[9u].w)).x - _713) * _440) + _713;
    float _735 = ((_697.x - _731) * cbMtdParam._m0[19u].z) + _731;
    float _737 = _735 - (_735 * _625);
    float _739 = _737 - (_737 * _675);
    float _744 = (((_507.z - _562) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _562;
    vec4 _758 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _308) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _309) + cbTextureTilingScale._m0[15u].w));
    float _765 = (_758.x * 2.0) + (-1.0);
    float _766 = (_758.y * 2.0) + (-1.0);
    float _767 = dot(vec2(_765, _766), vec2(_765, _766));
    float _4201 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _775 = (_625 * (_758.z - _744)) + _744;
    float _778 = ((cbMtdParam._m0[23u].y - _775) * _675) + _775;
    vec4 _797 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _308) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _309) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _803 = (_797.x * 2.0) + (-1.0);
    float _804 = (_797.y * 2.0) + (-1.0);
    float _805 = dot(vec2(_803, _804), vec2(_803, _804));
    float _4212 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _815 = _565 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_507.x * 2.0) + (-1.0)));
    float _816 = _566 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_507.y * 2.0) + (-1.0)));
    float _828 = (((_765 - _815) + (cbMtdParam._m0[21u].x * _815)) * _625) + _815;
    float _829 = (((_766 - _816) + (cbMtdParam._m0[21u].x * _816)) * _625) + _816;
    float _830 = (_625 * (sqrt(1.0 - (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0)))) - _572)) + _572;
    float _841 = (((_803 - _828) + (_828 * cbMtdParam._m0[22u].z)) * _675) + _828;
    float _842 = (((_804 - _829) + (_829 * cbMtdParam._m0[22u].z)) * _675) + _829;
    float _843 = ((sqrt(1.0 - (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0)))) - _830) * _675) + _830;
    float _847 = cbMtdParam._m0[22u].x + _585.w;
    float _850 = fma(_843, _257 * NORMAL.x, fma(_842, _264 * TANGENT.x, (_250 * _242) * _841));
    float _853 = fma(_843, _257 * NORMAL.y, fma(_842, _264 * TANGENT.y, (_250 * _243) * _841));
    float _856 = fma(_843, _257 * NORMAL.z, fma(_842, _264 * TANGENT.z, (_250 * _244) * _841));
    float _860 = inversesqrt(dot(vec3(_850, _853, _856), vec3(_850, _853, _856)));
    float _861 = _860 * _850;
    float _862 = _860 * _853;
    float _863 = _860 * _856;
    float _4223 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _864 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _4234 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _4245 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _4256 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _4267 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _4278 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _869 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
    float _883 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _923 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _933 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _923);
    float _934 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _923);
    float _935 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _923);
    float _939 = inversesqrt(dot(vec3(_933, _934, _935), vec3(_933, _934, _935)));
    float _940 = _933 * _939;
    float _941 = _934 * _939;
    float _942 = _935 * _939;
    vec4 _947 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _949 = _947.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1121 = sqrt(((_933 * _933) + (_934 * _934)) + (_935 * _935));
        float _1127 = (cbMatDynParam._m0[5u].x * _1121) + cbMatDynParam._m0[5u].y;
        float _4289 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1132 = (cbMatDynParam._m0[5u].z * _1121) + cbMatDynParam._m0[5u].w;
        float _4300 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) - _1128)) + _1128) < ((_949 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _960 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _961 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _979 = fma(_863, cbSceneParam._m0[5u].z, fma(_862, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _861));
    float _982 = fma(_863, cbSceneParam._m0[6u].z, fma(_862, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _861));
    float _985 = fma(_863, cbSceneParam._m0[7u].z, fma(_862, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _861));
    uint _998 = _289 + 9u;
    uint _999 = _998 + uint(cbMatDynParam._m0[0u].w);
    float _1005 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0)))) * cbInstanceData._m0[_999].x;
    float _1006 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0)))) * cbInstanceData._m0[_999].y;
    float _1007 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0)))) * cbInstanceData._m0[_999].z;
    float _4311 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _1008 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
    float _4322 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _1009 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
    float _4333 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _1010 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
    float _1011 = 1.0 - _869;
    float _1012 = _1008 * _1011;
    float _1013 = _1009 * _1011;
    float _1014 = _1010 * _1011;
    float _1019 = (_1008 + (-0.039999999105930328369140625)) * _869;
    float _1020 = (_1009 + (-0.039999999105930328369140625)) * _869;
    float _1021 = (_1010 + (-0.039999999105930328369140625)) * _869;
    float _1022 = _1019 + 0.039999999105930328369140625;
    float _1024 = _1020 + 0.039999999105930328369140625;
    float _1025 = _1021 + 0.039999999105930328369140625;
    vec4 _1034 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _960, cbSceneParam._m0[86u].y * _961));
    float _1038 = ((isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * TEXCOORD_5.w) * _1034.x;
    float _1039 = dot(vec3(_861, _862, _863), vec3(_940, _941, _942));
    float _1042 = _1039 * 2.0;
    float _1046 = (_1042 * _861) - _940;
    float _1047 = (_1042 * _862) - _941;
    float _1048 = (_1042 * _863) - _942;
    float _1052 = abs(dot(vec3(_940, _941, _942), vec3(_861, _862, _863)));
    float _4344 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _1054 = sqrt(_864);
    float _1067 = exp2((_1054 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1054 * 3.0));
    float _1073 = (1.0 - _1067) * ((_1054 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1074 = _1067 * _1054;
    float _1102 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1106 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1110 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1439;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1164 = fma(_1110, cbModelParam._m0[26u].z, fma(_1106, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1102));
        float _1168 = fma(_1110, cbModelParam._m0[27u].z, fma(_1106, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1102));
        float _1172 = fma(_1110, cbModelParam._m0[28u].z, fma(_1106, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1102));
        float _1197 = _1102 + _861;
        float _1198 = _1106 + _862;
        float _1199 = _1110 + _863;
        float _1209 = fma(_1199, cbModelParam._m0[26u].z, fma(_1198, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1197)) - _1164;
        float _1210 = fma(_1199, cbModelParam._m0[27u].z, fma(_1198, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1197)) - _1168;
        float _1211 = fma(_1199, cbModelParam._m0[28u].z, fma(_1198, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1197)) - _1172;
        float _1215 = inversesqrt(dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211)));
        float _1228 = ((_1215 * _1209) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1164 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1229 = ((_1215 * _1210) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1168 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1230 = ((_1215 * _1211) / cbModelParam._m0[34u].z) + ((((((_1172 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1254 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        float _1267 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1233.x + (-0.5));
        float _1269 = _1267 * (_1233.y + (-0.5));
        float _1270 = _1267 * (_1233.z + (-0.5));
        float _1277 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1240.x + (-0.5));
        float _1279 = _1277 * (_1240.y + (-0.5));
        float _1280 = _1277 * (_1240.z + (-0.5));
        float _1287 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1247.x + (-0.5));
        float _1289 = _1287 * (_1247.y + (-0.5));
        float _1290 = _1287 * (_1247.z + (-0.5));
        float _1297 = exp2((_1254.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1254.x + (-0.5));
        float _1299 = _1297 * (_1254.y + (-0.5));
        float _1300 = _1297 * (_1254.z + (-0.5));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1303 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1304 = _1268 * 0.5;
        float _1305 = _1278 * 0.5;
        float _1306 = _1288 * 0.5;
        float _1307 = dot(vec3(_1304, _1305, _1306), vec3(_1304, _1305, _1306));
        float _1312 = (_1307 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1307);
        float _1321 = (dot(vec3(_861, _862, _863), vec3(_1312 * _1304, _1312 * _1305, _1312 * _1306)) + 1.0) * 0.5;
        float _4370 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1331 = sqrt(((_1305 * _1305) + (_1304 * _1304)) + (_1306 * _1306)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _4381 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
        float _1333 = _1332 * 2.0;
        float _1337 = (1.0 - _1332) / (_1332 + 1.0);
        float _4392 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _1347 = ((((1.0 - _1338) * (_1333 + 2.0)) * exp2(log2(isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * (_1333 + 1.0))) + _1338) * _1301;
        float _1348 = _1269 * 0.5;
        float _1349 = _1279 * 0.5;
        float _1350 = _1289 * 0.5;
        float _1351 = dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350));
        float _1356 = (_1351 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1351);
        float _1364 = (dot(vec3(_861, _862, _863), vec3(_1356 * _1348, _1356 * _1349, _1356 * _1350)) + 1.0) * 0.5;
        float _4403 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1373 = sqrt(((_1349 * _1349) + (_1348 * _1348)) + (_1350 * _1350)) / (_1302 + 9.9999997473787516355514526367188e-06);
        float _4414 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _1375 = _1374 * 2.0;
        float _1379 = (1.0 - _1374) / (_1374 + 1.0);
        float _4425 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _1389 = ((((1.0 - _1380) * (_1375 + 2.0)) * exp2(log2(isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * (_1375 + 1.0))) + _1380) * _1302;
        float _1390 = _1270 * 0.5;
        float _1391 = _1280 * 0.5;
        float _1392 = _1290 * 0.5;
        float _1393 = dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392));
        float _1398 = (_1393 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1393);
        float _1406 = (dot(vec3(_861, _862, _863), vec3(_1398 * _1390, _1398 * _1391, _1398 * _1392)) + 1.0) * 0.5;
        float _4436 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1415 = sqrt(((_1391 * _1391) + (_1390 * _1390)) + (_1392 * _1392)) / (_1303 + 9.9999997473787516355514526367188e-06);
        float _4447 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
        float _1417 = _1416 * 2.0;
        float _1421 = (1.0 - _1416) / (_1416 + 1.0);
        float _4458 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _1431 = ((((1.0 - _1422) * (_1417 + 2.0)) * exp2(log2(isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_1417 + 1.0))) + _1422) * _1303;
        _1439 = _1270;
        _1441 = _1269;
        _1442 = _1268;
        _1443 = _1280;
        _1444 = _1279;
        _1445 = _1278;
        _1446 = _1290;
        _1447 = _1289;
        _1448 = _1288;
        _1449 = _1303;
        _1450 = _1302;
        _1451 = _1301;
        _1452 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)));
        _1453 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)));
        _1454 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)));
    }
    else
    {
        _1439 = _1440;
        _1441 = _1440;
        _1442 = _1440;
        _1443 = _1440;
        _1444 = _1440;
        _1445 = _1440;
        _1446 = _1440;
        _1447 = _1440;
        _1448 = _1440;
        _1449 = _1440;
        _1450 = _1440;
        _1451 = _1440;
        _1452 = 0.0;
        _1453 = 0.0;
        _1454 = 0.0;
    }
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1482 = fma(_1110, cbModelParam._m0[30u].z, fma(_1106, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1102));
        float _1486 = fma(_1110, cbModelParam._m0[31u].z, fma(_1106, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1102));
        float _1490 = fma(_1110, cbModelParam._m0[32u].z, fma(_1106, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1102));
        float _1513 = _1102 + _861;
        float _1514 = _1106 + _862;
        float _1515 = _1110 + _863;
        float _1525 = fma(_1515, cbModelParam._m0[30u].z, fma(_1514, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1513)) - _1482;
        float _1526 = fma(_1515, cbModelParam._m0[31u].z, fma(_1514, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1513)) - _1486;
        float _1527 = fma(_1515, cbModelParam._m0[32u].z, fma(_1514, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1513)) - _1490;
        float _1531 = inversesqrt(dot(vec3(_1525, _1526, _1527), vec3(_1525, _1526, _1527)));
        float _1544 = ((_1531 * _1525) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1482 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1545 = ((_1531 * _1526) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1486 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1546 = ((_1531 * _1527) / cbModelParam._m0[35u].z) + ((((((_1490 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1548 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1544, _1545, _1546), 0.0);
        vec4 _1555 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1544, _1545, _1546), 0.0);
        vec4 _1562 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1544, _1545, _1546), 0.0);
        vec4 _1569 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1544, _1545, _1546), 0.0);
        float _1581 = exp2((_1548.w + (-0.5)) * 20.0) * 2.0;
        float _1582 = _1581 * (_1548.x + (-0.5));
        float _1583 = _1581 * (_1548.y + (-0.5));
        float _1584 = _1581 * (_1548.z + (-0.5));
        float _1591 = exp2((_1555.w + (-0.5)) * 20.0) * 2.0;
        float _1592 = _1591 * (_1555.x + (-0.5));
        float _1593 = _1591 * (_1555.y + (-0.5));
        float _1594 = _1591 * (_1555.z + (-0.5));
        float _1601 = exp2((_1562.w + (-0.5)) * 20.0) * 2.0;
        float _1602 = _1601 * (_1562.x + (-0.5));
        float _1603 = _1601 * (_1562.y + (-0.5));
        float _1604 = _1601 * (_1562.z + (-0.5));
        float _1611 = exp2((_1569.w + (-0.5)) * 20.0) * 2.0;
        float _1612 = _1611 * (_1569.x + (-0.5));
        float _1613 = _1611 * (_1569.y + (-0.5));
        float _1614 = _1611 * (_1569.z + (-0.5));
        float _1615 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1616 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1617 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1618 = _1582 * 0.5;
        float _1619 = _1592 * 0.5;
        float _1620 = _1602 * 0.5;
        float _1621 = dot(vec3(_1618, _1619, _1620), vec3(_1618, _1619, _1620));
        float _1626 = (_1621 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1621);
        float _1634 = (dot(vec3(_861, _862, _863), vec3(_1626 * _1618, _1626 * _1619, _1626 * _1620)) + 1.0) * 0.5;
        float _4499 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1643 = sqrt(((_1619 * _1619) + (_1618 * _1618)) + (_1620 * _1620)) / (_1615 + 9.9999997473787516355514526367188e-06);
        float _4510 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
        float _1645 = _1644 * 2.0;
        float _1649 = (1.0 - _1644) / (_1644 + 1.0);
        float _4521 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1650 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _1659 = ((((1.0 - _1650) * (_1645 + 2.0)) * exp2(log2(isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (_1645 + 1.0))) + _1650) * _1615;
        float _1660 = _1583 * 0.5;
        float _1661 = _1593 * 0.5;
        float _1662 = _1603 * 0.5;
        float _1663 = dot(vec3(_1660, _1661, _1662), vec3(_1660, _1661, _1662));
        float _1668 = (_1663 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1663);
        float _1676 = (dot(vec3(_861, _862, _863), vec3(_1668 * _1660, _1668 * _1661, _1668 * _1662)) + 1.0) * 0.5;
        float _4532 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1685 = sqrt(((_1661 * _1661) + (_1660 * _1660)) + (_1662 * _1662)) / (_1616 + 9.9999997473787516355514526367188e-06);
        float _4543 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
        float _1687 = _1686 * 2.0;
        float _1691 = (1.0 - _1686) / (_1686 + 1.0);
        float _4554 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1692 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _1701 = ((((1.0 - _1692) * (_1687 + 2.0)) * exp2(log2(isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (_1687 + 1.0))) + _1692) * _1616;
        float _1702 = _1584 * 0.5;
        float _1703 = _1594 * 0.5;
        float _1704 = _1604 * 0.5;
        float _1705 = dot(vec3(_1702, _1703, _1704), vec3(_1702, _1703, _1704));
        float _1710 = (_1705 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1705);
        float _1718 = (dot(vec3(_861, _862, _863), vec3(_1710 * _1702, _1710 * _1703, _1710 * _1704)) + 1.0) * 0.5;
        float _4565 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1727 = sqrt(((_1703 * _1703) + (_1702 * _1702)) + (_1704 * _1704)) / (_1617 + 9.9999997473787516355514526367188e-06);
        float _4576 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1728 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
        float _1729 = _1728 * 2.0;
        float _1733 = (1.0 - _1728) / (_1728 + 1.0);
        float _4587 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1734 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
        float _1743 = ((((1.0 - _1734) * (_1729 + 2.0)) * exp2(log2(isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * (_1729 + 1.0))) + _1734) * _1617;
        _1751 = _1584;
        _1752 = _1583;
        _1753 = _1582;
        _1754 = _1594;
        _1755 = _1593;
        _1756 = _1592;
        _1757 = _1604;
        _1758 = _1603;
        _1759 = _1602;
        _1760 = _1617;
        _1761 = _1616;
        _1762 = _1615;
        _1763 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)));
        _1764 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)));
        _1765 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0)));
    }
    else
    {
        _1751 = _1440;
        _1752 = _1440;
        _1753 = _1440;
        _1754 = _1440;
        _1755 = _1440;
        _1756 = _1440;
        _1757 = _1440;
        _1758 = _1440;
        _1759 = _1440;
        _1760 = _1440;
        _1761 = _1440;
        _1762 = _1440;
        _1763 = 0.0;
        _1764 = 0.0;
        _1765 = 0.0;
    }
    float _1775 = (cbModelParam._m0[1u].x * (_1763 - _1452)) + _1452;
    float _1776 = (cbModelParam._m0[1u].x * (_1764 - _1453)) + _1453;
    float _1777 = (cbModelParam._m0[1u].x * (_1765 - _1454)) + _1454;
    float _1798 = fma(_1777, cbSceneParam._m0[89u].z, fma(_1776, cbSceneParam._m0[89u].y, _1775 * cbSceneParam._m0[89u].x));
    float _1801 = fma(_1777, cbSceneParam._m0[90u].z, fma(_1776, cbSceneParam._m0[90u].y, _1775 * cbSceneParam._m0[90u].x));
    float _1804 = fma(_1777, cbSceneParam._m0[91u].z, fma(_1776, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1775));
    float _1819 = _1046 * 0.5;
    float _1820 = _1047 * 0.5;
    float _1821 = _1048 * 0.5;
    float _1822 = dot(vec4(_1819, _1820, _1821, 1.0), vec4(_1753, _1756, _1759, _1762));
    float _1825 = dot(vec4(_1819, _1820, _1821, 1.0), vec4(_1752, _1755, _1758, _1761));
    float _1828 = dot(vec4(_1819, _1820, _1821, 1.0), vec4(_1751, _1754, _1757, _1760));
    float _1862;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1835 = dot(vec4(_1819, _1820, _1821, 1.0), vec4(_1439, _1443, _1446, _1449));
        float _1839 = dot(vec4(_1819, _1820, _1821, 1.0), vec4(_1441, _1444, _1447, _1450));
        float _1843 = dot(vec4(_1819, _1820, _1821, 1.0), vec4(_1442, _1445, _1448, _1451));
        float _1850 = dot(vec4(cbModelParam._m0[39u]), vec4(_1819, _1820, _1821, 1.0));
        _1862 = dot(vec3(isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0)), isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0)), isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1850) ? 0.0 : (isnan(0.0) ? _1850 : max(0.0, _1850))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1862 = 1.0;
    }
    float _1873;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1864 = dot(vec4(cbModelParam._m0[40u]), vec4(_1819, _1820, _1821, 1.0));
        _1873 = dot(vec3(isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0)), isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0)), isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1864) ? 0.0 : (isnan(0.0) ? _1864 : max(0.0, _1864))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1873 = 1.0;
    }
    float _1877 = (_1873 * cbModelParam._m0[1u].x) + (_1862 * (1.0 - cbModelParam._m0[1u].x));
    float _1887 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _864);
    float _1888 = isnan(_1887) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1887 : min(cbModelParam._m0[25u].z, _1887));
    float _1968;
    float _1970;
    float _1972;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1935 = fma(_1110, cbModelParam._m0[13u].z, fma(_1106, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1102)) + cbModelParam._m0[13u].w;
        float _1939 = fma(_1110, cbModelParam._m0[14u].z, fma(_1106, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1102)) + cbModelParam._m0[14u].w;
        float _1943 = fma(_1110, cbModelParam._m0[15u].z, fma(_1106, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1102)) + cbModelParam._m0[15u].w;
        float _1946 = fma(_1048, cbModelParam._m0[13u].z, fma(_1047, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1046));
        float _1949 = fma(_1048, cbModelParam._m0[14u].z, fma(_1047, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1046));
        float _1952 = fma(_1048, cbModelParam._m0[15u].z, fma(_1047, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1046));
        float _1980;
        if (_1946 > 0.0)
        {
            _1980 = abs((1.0 - _1935) / _1946);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1946 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1935 + 1.0) / _1946);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1980 = frontier_phi_17_15_ladder;
        }
        float _2151;
        if (_1949 > 0.0)
        {
            _2151 = abs((1.0 - _1939) / _1949);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1949 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1939 + 1.0) / _1949);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2151 = frontier_phi_26_22_ladder;
        }
        float _2446;
        if (_1952 > 0.0)
        {
            _2446 = abs((1.0 - _1943) / _1952);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1952 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1943 + 1.0) / _1952);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2446 = frontier_phi_38_33_ladder;
        }
        float _2448 = isnan(_2151) ? _1980 : (isnan(_1980) ? _2151 : min(_1980, _2151));
        float _2449 = isnan(_2446) ? _2448 : (isnan(_2448) ? _2446 : min(_2448, _2446));
        float _2453 = (_2449 * _1946) + _1935;
        float _2454 = (_2449 * _1949) + _1939;
        float _2455 = (_2449 * _1952) + _1943;
        float _2456 = _2449 * 9.9999997473787516355514526367188e-05;
        float _2458 = (-1.0) - _2456;
        float _2460 = _2456 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2455 > _2460) || ((_2455 < _2458) || ((_2454 > _2460) || ((_2454 < _2458) || ((_2453 < _2458) || (_2453 > _2460))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2600 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2455, cbModelParam._m0[9u].z, fma(_2454, cbModelParam._m0[9u].y, _2453 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2455, cbModelParam._m0[10u].z, fma(_2454, cbModelParam._m0[10u].y, _2453 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2455, cbModelParam._m0[11u].z, fma(_2454, cbModelParam._m0[11u].y, _2453 * cbModelParam._m0[11u].x))), _1888);
            frontier_phi_16_38_ladder = _2600.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2600.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2600.x * cbModelParam._m0[1u].y;
        }
        _1968 = frontier_phi_16_38_ladder_2;
        _1970 = frontier_phi_16_38_ladder_1;
        _1972 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1956 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1046, _1047, _1048), _1888);
        _1968 = _1956.x * cbModelParam._m0[1u].y;
        _1970 = _1956.y * cbModelParam._m0[1u].y;
        _1972 = _1956.z * cbModelParam._m0[1u].y;
    }
    float _1976 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _864);
    float _1977 = isnan(_1976) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1976 : min(cbModelParam._m0[25u].w, _1976));
    float _2066;
    float _2068;
    float _2070;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2030 = fma(_1110, cbModelParam._m0[21u].z, fma(_1106, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1102)) + cbModelParam._m0[21u].w;
        float _2034 = fma(_1110, cbModelParam._m0[22u].z, fma(_1106, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1102)) + cbModelParam._m0[22u].w;
        float _2038 = fma(_1110, cbModelParam._m0[23u].z, fma(_1106, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1102)) + cbModelParam._m0[23u].w;
        float _2041 = fma(_1048, cbModelParam._m0[21u].z, fma(_1047, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1046));
        float _2044 = fma(_1048, cbModelParam._m0[22u].z, fma(_1047, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1046));
        float _2047 = fma(_1048, cbModelParam._m0[23u].z, fma(_1047, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1046));
        float _2156;
        if (_2041 > 0.0)
        {
            _2156 = abs((1.0 - _2030) / _2041);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2041 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2030 + 1.0) / _2041);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2156 = frontier_phi_28_24_ladder;
        }
        float _2473;
        if (_2044 > 0.0)
        {
            _2473 = abs((1.0 - _2034) / _2044);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2044 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2034 + 1.0) / _2044);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2473 = frontier_phi_40_35_ladder;
        }
        float _2811;
        if (_2047 > 0.0)
        {
            _2811 = abs((1.0 - _2038) / _2047);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2047 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2038 + 1.0) / _2047);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2811 = frontier_phi_50_47_ladder;
        }
        float _2813 = isnan(_2473) ? _2156 : (isnan(_2156) ? _2473 : min(_2156, _2473));
        float _2814 = isnan(_2811) ? _2813 : (isnan(_2813) ? _2811 : min(_2813, _2811));
        float _2818 = (_2814 * _2041) + _2030;
        float _2819 = (_2814 * _2044) + _2034;
        float _2820 = (_2814 * _2047) + _2038;
        float _2821 = _2814 * 9.9999997473787516355514526367188e-05;
        float _2822 = (-1.0) - _2821;
        float _2824 = _2821 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2820 > _2824) || ((_2820 < _2822) || ((_2819 > _2824) || ((_2819 < _2822) || ((_2818 < _2822) || (_2818 > _2824))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2942 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2820, cbModelParam._m0[17u].z, fma(_2819, cbModelParam._m0[17u].y, _2818 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2820, cbModelParam._m0[18u].z, fma(_2819, cbModelParam._m0[18u].y, _2818 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2820, cbModelParam._m0[19u].z, fma(_2819, cbModelParam._m0[19u].y, _2818 * cbModelParam._m0[19u].x))), _1977);
            frontier_phi_25_50_ladder = _2942.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2942.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2942.x * cbModelParam._m0[1u].z;
        }
        _2066 = frontier_phi_25_50_ladder_2;
        _2068 = frontier_phi_25_50_ladder_1;
        _2070 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2050 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1046, _1047, _1048), _1977);
        _2066 = _2050.x * cbModelParam._m0[1u].z;
        _2068 = _2050.y * cbModelParam._m0[1u].z;
        _2070 = _2050.z * cbModelParam._m0[1u].z;
    }
    float _2083 = (((_1073 * _1022) + _1074) * _1038) * ((cbModelParam._m0[1u].w * (_2066 - _1968)) + _1968);
    float _2085 = (((_1073 * _1024) + _1074) * _1038) * ((cbModelParam._m0[1u].w * (_2068 - _1970)) + _1970);
    float _2087 = (((_1073 * _1025) + _1074) * _1038) * ((cbModelParam._m0[1u].w * (_2070 - _1972)) + _1972);
    float _2090 = fma(_2087, cbSceneParam._m0[89u].z, fma(_2085, cbSceneParam._m0[89u].y, _2083 * cbSceneParam._m0[89u].x));
    float _2093 = fma(_2087, cbSceneParam._m0[90u].z, fma(_2085, cbSceneParam._m0[90u].y, _2083 * cbSceneParam._m0[90u].x));
    float _2096 = fma(_2087, cbSceneParam._m0[91u].z, fma(_2085, cbSceneParam._m0[91u].y, _2083 * cbSceneParam._m0[91u].x));
    float _2130 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2134 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2138 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2142 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2143 = _2130 / _2142;
    float _2144 = _2134 / _2142;
    float _2145 = _2138 / _2142;
    float _2292;
    float _2293;
    float _2294;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2172 = ((uint(_2145 > cbSceneParam._m0[59u].y) + uint(_2145 > cbSceneParam._m0[59u].x)) + uint(_2145 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2173 = _2172 + 43u;
        uint _2181 = _2172 + 44u;
        uint _2189 = _2172 + 45u;
        uint _2197 = _2172 + 46u;
        float _2208 = fma(_2142, cbSceneParam._m0[_2173].w, fma(_2138, cbSceneParam._m0[_2173].z, fma(_2134, cbSceneParam._m0[_2173].y, _2130 * cbSceneParam._m0[_2173].x)));
        float _2212 = fma(_2142, cbSceneParam._m0[_2181].w, fma(_2138, cbSceneParam._m0[_2181].z, fma(_2134, cbSceneParam._m0[_2181].y, _2130 * cbSceneParam._m0[_2181].x)));
        float _2220 = fma(_2142, cbSceneParam._m0[_2197].w, fma(_2138, cbSceneParam._m0[_2197].z, fma(_2134, cbSceneParam._m0[_2197].y, _2130 * cbSceneParam._m0[_2197].x)));
        float _2225 = cbSceneParam._m0[33u].z * _2220;
        float _2227 = cbSceneParam._m0[33u].w * _2220;
        float _2230 = fma(_2142, cbSceneParam._m0[_2189].w, fma(_2138, cbSceneParam._m0[_2189].z, fma(_2134, cbSceneParam._m0[_2189].y, _2130 * cbSceneParam._m0[_2189].x))) / _2220;
        float _2278 = (cbSceneParam._m0[33u].x - sqrt(((_2144 * _2144) + (_2143 * _2143)) + (_2145 * _2145))) * cbSceneParam._m0[33u].y;
        float _4713 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        float _2285 = (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2225 + _2208) / _2220, (_2227 + _2212) / _2220), _2230), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2227 + _2208) / _2220, (_2212 - _2225) / _2220), _2230), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2208 - _2225) / _2220, (_2212 - _2227) / _2220), _2230), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2208 - _2227) / _2220, (_2225 + _2212) / _2220), _2230), 0.0)).x), vec4(0.25)));
        _2292 = 1.0 - (_2285 * cbSceneParam._m0[34u].x);
        _2293 = 1.0 - (_2285 * cbSceneParam._m0[34u].y);
        _2294 = 1.0 - (_2285 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2292 = 1.0;
        _2293 = 1.0;
        _2294 = 1.0;
    }
    float _2358;
    float _2360;
    float _2362;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2346 = fma(_2142, cbSceneParam._m0[63u].w, fma(_2138, cbSceneParam._m0[63u].z, fma(_2134, cbSceneParam._m0[63u].y, _2130 * cbSceneParam._m0[63u].x)));
        float _2347 = fma(_2142, cbSceneParam._m0[60u].w, fma(_2138, cbSceneParam._m0[60u].z, fma(_2134, cbSceneParam._m0[60u].y, _2130 * cbSceneParam._m0[60u].x))) / _2346;
        float _2348 = fma(_2142, cbSceneParam._m0[61u].w, fma(_2138, cbSceneParam._m0[61u].z, fma(_2134, cbSceneParam._m0[61u].y, _2130 * cbSceneParam._m0[61u].x))) / _2346;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2347 >= cbSceneParam._m0[64u].x) && (_2348 >= cbSceneParam._m0[64u].y)) && (_2347 <= cbSceneParam._m0[64u].z)) && (_2348 <= cbSceneParam._m0[64u].w))
        {
            float _2486 = fma(_2142, cbSceneParam._m0[62u].w, fma(_2138, cbSceneParam._m0[62u].z, fma(_2134, cbSceneParam._m0[62u].y, _2130 * cbSceneParam._m0[62u].x))) / _2346;
            float _2490 = isnan(cbSceneParam._m0[41u].w) ? _2486 : (isnan(_2486) ? cbSceneParam._m0[41u].w : max(_2486, cbSceneParam._m0[41u].w));
            float _2533 = (cbSceneParam._m0[33u].x - sqrt(((_2144 * _2144) + (_2143 * _2143)) + (_2145 * _2145))) * cbSceneParam._m0[33u].y;
            float _4729 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
            float _2540 = (isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2347, cbSceneParam._m0[33u].w + _2348), _2490), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2347, _2348 - cbSceneParam._m0[33u].z), _2490), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2347 - cbSceneParam._m0[33u].z, _2348 - cbSceneParam._m0[33u].w), _2490), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2347 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2348), _2490), 0.0)).x), vec4(0.25)));
            float _2544 = 1.0 - (_2540 * cbSceneParam._m0[34u].x);
            float _2545 = 1.0 - (_2540 * cbSceneParam._m0[34u].y);
            float _2546 = 1.0 - (_2540 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2546) ? _2294 : (isnan(_2294) ? _2546 : min(_2294, _2546));
            frontier_phi_37_36_ladder_1 = isnan(_2545) ? _2293 : (isnan(_2293) ? _2545 : min(_2293, _2545));
            frontier_phi_37_36_ladder_2 = isnan(_2544) ? _2292 : (isnan(_2292) ? _2544 : min(_2292, _2544));
        }
        else
        {
            frontier_phi_37_36_ladder = _2294;
            frontier_phi_37_36_ladder_1 = _2293;
            frontier_phi_37_36_ladder_2 = _2292;
        }
        _2358 = frontier_phi_37_36_ladder_2;
        _2360 = frontier_phi_37_36_ladder_1;
        _2362 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2358 = _2292;
        _2360 = _2293;
        _2362 = _2294;
    }
    uvec4 _2367 = floatBitsToUint(cbInstanceData._m0[_289 + 5u]);
    uint _2369 = _2367.x * 14u;
    uint _2370 = _2369 + 13u;
    float _2377 = _1038 + (-1.0);
    float _2382 = (cbLight._m0[_2370].x * _2377) + 1.0;
    float _2383 = (cbLight._m0[_2370].y * _2377) + 1.0;
    float _2384 = (cbLight._m0[_2370].z * _2377) + 1.0;
    float _2385 = (cbLight._m0[_2370].w * _2377) + 1.0;
    uint _2386 = _2369 + 5u;
    float _2392 = isnan(1.0) ? _2383 : (isnan(_2383) ? 1.0 : min(_2383, 1.0));
    uint _2396 = _2369 + 4u;
    float _2405 = isnan(1.0) ? _2382 : (isnan(_2382) ? 1.0 : min(_2382, 1.0));
    uint _2409 = _2369 | 1u;
    float _2420 = dot(vec3(cbLight._m0[_2369].xyz), vec3(_861, _862, _863));
    float _2423 = dot(vec3(cbLight._m0[_2409].xyz), vec3(_861, _862, _863));
    float _4765 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
    float _4776 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
    float _2428 = (isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0))) * 0.3183098733425140380859375;
    float _2430 = (isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0))) * 0.3183098733425140380859375;
    float _2437 = ((cbLight._m0[_2386].x * _2392) * _2430) + (((cbLight._m0[_2396].x * _2358) * _2405) * _2428);
    float _2438 = ((_2392 * cbLight._m0[_2386].y) * _2430) + (((cbLight._m0[_2396].y * _2360) * _2405) * _2428);
    float _2439 = ((_2392 * cbLight._m0[_2386].z) * _2430) + (((cbLight._m0[_2396].z * _2362) * _2405) * _2428);
    uvec4 _2443 = floatBitsToUint(cbLight._m0[_2369 + 12u]);
    bool _2445 = _2443.x == 0u;
    float _2547;
    float _2549;
    float _2551;
    if (_2445)
    {
        _2547 = _2437;
        _2549 = _2438;
        _2551 = _2439;
    }
    else
    {
        uint _2555 = _2369 + 6u;
        float _2571 = (dot(vec3(cbLight._m0[_2369 + 2u].xyz), vec3(_861, _862, _863)) * 0.5) + 0.5;
        float _2572 = _2571 * _2571;
        float _4787 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
        float _2573 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
        float _2574 = isnan(1.0) ? _2384 : (isnan(_2384) ? 1.0 : min(_2384, 1.0));
        _2547 = (((cbLight._m0[_2555].x * 0.3183098733425140380859375) * _2573) * _2574) + _2437;
        _2549 = (((cbLight._m0[_2555].y * 0.3183098733425140380859375) * _2573) * _2574) + _2438;
        _2551 = (((cbLight._m0[_2555].z * 0.3183098733425140380859375) * _2573) * _2574) + _2439;
    }
    bool _2554 = _2443.y == 0u;
    float _2609;
    float _2611;
    float _2613;
    if (_2554)
    {
        _2609 = _2547;
        _2611 = _2549;
        _2613 = _2551;
    }
    else
    {
        uint _2782 = _2369 + 7u;
        float _2798 = (dot(vec3(cbLight._m0[_2369 + 3u].xyz), vec3(_861, _862, _863)) * 0.5) + 0.5;
        float _2799 = _2798 * _2798;
        float _4803 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
        float _2800 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
        float _2801 = isnan(1.0) ? _2385 : (isnan(_2385) ? 1.0 : min(_2385, 1.0));
        _2609 = (((cbLight._m0[_2782].x * 0.3183098733425140380859375) * _2800) * _2801) + _2547;
        _2611 = (((cbLight._m0[_2782].y * 0.3183098733425140380859375) * _2800) * _2801) + _2549;
        _2613 = (((cbLight._m0[_2782].z * 0.3183098733425140380859375) * _2800) * _2801) + _2551;
    }
    uint _2616 = _2369 + 8u;
    float _2629 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2369].w)) * _864) * 0.949999988079071044921875);
    float _2630 = _2629 * _2629;
    float _2631 = cbLight._m0[_2369].x + _940;
    float _2632 = cbLight._m0[_2369].y + _941;
    float _2633 = cbLight._m0[_2369].z + _942;
    float _2637 = inversesqrt(dot(vec3(_2631, _2632, _2633), vec3(_2631, _2632, _2633)));
    float _2638 = _2637 * _2631;
    float _2639 = _2637 * _2632;
    float _2640 = _2637 * _2633;
    float _2641 = dot(vec3(_861, _862, _863), vec3(cbLight._m0[_2369].xyz));
    float _4819 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
    float _2644 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
    float _4830 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    float _2645 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
    float _2646 = dot(vec3(_861, _862, _863), vec3(_2638, _2639, _2640));
    float _4841 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
    float _2649 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
    float _2650 = dot(vec3(cbLight._m0[_2369].xyz), vec3(_2638, _2639, _2640));
    float _4852 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
    float _2654 = _2630 * _2630;
    float _2658 = ((_2649 * _2649) * (_2654 + (-1.0))) + 1.0;
    float _2666 = exp2(log2(1.0 - (isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0)))) * 5.0);
    float _2667 = 0.959999978542327880859375 - _1019;
    float _2669 = 0.959999978542327880859375 - _1020;
    float _2670 = 0.959999978542327880859375 - _1021;
    float _2677 = 1.0 - _2630;
    float _2688 = (0.5 / (((_2645 * ((_2644 * _2677) + _2630)) + 9.9999999392252902907785028219223e-09) + (((_2645 * _2677) + _2630) * _2644))) * _2644;
    float _4863 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
    float _2690 = (isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0))) * (_2654 / ((_2658 * _2658) * 3.141590118408203125));
    uint _2704 = _2369 + 9u;
    float _2715 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2409].w)) * _864) * 0.949999988079071044921875);
    float _2716 = _2715 * _2715;
    float _2717 = cbLight._m0[_2409].x + _940;
    float _2718 = cbLight._m0[_2409].y + _941;
    float _2719 = cbLight._m0[_2409].z + _942;
    float _2723 = inversesqrt(dot(vec3(_2717, _2718, _2719), vec3(_2717, _2718, _2719)));
    float _2724 = _2723 * _2717;
    float _2725 = _2723 * _2718;
    float _2726 = _2723 * _2719;
    float _2727 = dot(vec3(_861, _862, _863), vec3(cbLight._m0[_2409].xyz));
    float _4874 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
    float _2730 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
    float _2731 = dot(vec3(_861, _862, _863), vec3(_2724, _2725, _2726));
    float _4885 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
    float _2734 = isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0));
    float _2735 = dot(vec3(cbLight._m0[_2409].xyz), vec3(_2724, _2725, _2726));
    float _4896 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
    float _2739 = _2716 * _2716;
    float _2743 = ((_2734 * _2734) * (_2739 + (-1.0))) + 1.0;
    float _2750 = exp2(log2(1.0 - (isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0)))) * 5.0);
    float _2757 = 1.0 - _2716;
    float _2767 = (0.5 / (((_2645 * ((_2730 * _2757) + _2716)) + 9.9999999392252902907785028219223e-09) + (((_2645 * _2757) + _2716) * _2730))) * _2730;
    float _4907 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
    float _2769 = (isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0))) * (_2739 / ((_2743 * _2743) * 3.141590118408203125));
    float _2779 = (((((_2750 * _2667) + _1022) * cbLight._m0[_2704].x) * _2769) * _2392) + ((((cbLight._m0[_2616].x * _2358) * ((_2666 * _2667) + _1022)) * _2690) * _2405);
    float _2780 = (((((_2750 * _2669) + _1024) * cbLight._m0[_2704].y) * _2769) * _2392) + ((((cbLight._m0[_2616].y * _2360) * ((_2666 * _2669) + _1024)) * _2690) * _2405);
    float _2781 = (((((_2750 * _2670) + _1025) * cbLight._m0[_2704].z) * _2769) * _2392) + ((((cbLight._m0[_2616].z * _2362) * ((_2666 * _2670) + _1025)) * _2690) * _2405);
    float _2837;
    float _2839;
    float _2841;
    if (_2445)
    {
        _2837 = _2779;
        _2839 = _2780;
        _2841 = _2781;
    }
    else
    {
        uint _2843 = _2369 + 2u;
        uint _2847 = _2369 + 10u;
        float _2861 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2843].w)) * _864) * 0.949999988079071044921875);
        float _2862 = _2861 * _2861;
        float _2863 = cbLight._m0[_2843].x + _940;
        float _2864 = cbLight._m0[_2843].y + _941;
        float _2865 = cbLight._m0[_2843].z + _942;
        float _2869 = inversesqrt(dot(vec3(_2863, _2864, _2865), vec3(_2863, _2864, _2865)));
        float _2870 = _2869 * _2863;
        float _2871 = _2869 * _2864;
        float _2872 = _2869 * _2865;
        float _2873 = dot(vec3(_861, _862, _863), vec3(cbLight._m0[_2843].xyz));
        float _4918 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
        float _2876 = isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0));
        float _2877 = dot(vec3(_861, _862, _863), vec3(_2870, _2871, _2872));
        float _4929 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
        float _2880 = isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0));
        float _2881 = dot(vec3(cbLight._m0[_2843].xyz), vec3(_2870, _2871, _2872));
        float _4940 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
        float _2885 = _2862 * _2862;
        float _2889 = ((_2880 * _2880) * (_2885 + (-1.0))) + 1.0;
        float _2896 = exp2(log2(1.0 - (isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0)))) * 5.0);
        float _2903 = 1.0 - _2862;
        float _2913 = (0.5 / (((_2645 * ((_2876 * _2903) + _2862)) + 9.9999999392252902907785028219223e-09) + (((_2645 * _2903) + _2862) * _2876))) * _2876;
        float _4951 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
        float _2915 = (isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0))) * (_2885 / ((_2889 * _2889) * 3.141590118408203125));
        float _2916 = isnan(1.0) ? _2384 : (isnan(_2384) ? 1.0 : min(_2384, 1.0));
        _2837 = (((((_2896 * _2667) + _1022) * cbLight._m0[_2847].x) * _2915) * _2916) + _2779;
        _2839 = (((((_2896 * _2669) + _1024) * cbLight._m0[_2847].y) * _2915) * _2916) + _2780;
        _2841 = (((((_2896 * _2670) + _1025) * cbLight._m0[_2847].z) * _2915) * _2916) + _2781;
    }
    float _2947;
    float _2949;
    float _2951;
    if (_2554)
    {
        _2947 = _2837;
        _2949 = _2839;
        _2951 = _2841;
    }
    else
    {
        uint _2958 = _2369 + 3u;
        uint _2962 = _2369 + 11u;
        float _2976 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2958].w)) * _864) * 0.949999988079071044921875);
        float _2977 = _2976 * _2976;
        float _2978 = cbLight._m0[_2958].x + _940;
        float _2979 = cbLight._m0[_2958].y + _941;
        float _2980 = cbLight._m0[_2958].z + _942;
        float _2984 = inversesqrt(dot(vec3(_2978, _2979, _2980), vec3(_2978, _2979, _2980)));
        float _2985 = _2984 * _2978;
        float _2986 = _2984 * _2979;
        float _2987 = _2984 * _2980;
        float _2988 = dot(vec3(_861, _862, _863), vec3(cbLight._m0[_2958].xyz));
        float _4967 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
        float _2991 = isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0));
        float _2992 = dot(vec3(_861, _862, _863), vec3(_2985, _2986, _2987));
        float _4978 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
        float _2995 = isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0));
        float _2996 = dot(vec3(cbLight._m0[_2958].xyz), vec3(_2985, _2986, _2987));
        float _4989 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
        float _3000 = _2977 * _2977;
        float _3004 = ((_2995 * _2995) * (_3000 + (-1.0))) + 1.0;
        float _3011 = exp2(log2(1.0 - (isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0)))) * 5.0);
        float _3018 = 1.0 - _2977;
        float _3028 = (0.5 / (((_2645 * ((_2991 * _3018) + _2977)) + 9.9999999392252902907785028219223e-09) + (((_2645 * _3018) + _2977) * _2991))) * _2991;
        float _5000 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
        float _3030 = (isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0))) * (_3000 / ((_3004 * _3004) * 3.141590118408203125));
        float _3031 = isnan(1.0) ? _2385 : (isnan(_2385) ? 1.0 : min(_2385, 1.0));
        _2947 = (((((_3011 * _2667) + _1022) * cbLight._m0[_2962].x) * _3030) * _3031) + _2837;
        _2949 = (((((_3011 * _2669) + _1024) * cbLight._m0[_2962].y) * _3030) * _3031) + _2839;
        _2951 = (((((_3011 * _2670) + _1025) * cbLight._m0[_2962].z) * _3030) * _3031) + _2841;
    }
    float _3097;
    float _3099;
    float _3101;
    float _3103;
    float _3105;
    float _3107;
    if (_2367.y == 0u)
    {
        uvec4 _3052 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3053 = _3052.x;
        uint _3064 = uint((float(_3052.y) * floor(float(uint(cbSceneParam._m0[85u].y * _961) / _3053))) + floor(float(uint(cbSceneParam._m0[85u].x * _960) / _3053)));
        float _3074 = (log2(_2145 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3075 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
        uint _3078 = uint(isnan(14.0) ? _3075 : (isnan(_3075) ? 14.0 : min(_3075, 14.0)));
        uvec4 _3083 = texelFetch(g_lightClusterGridBuffer, int(((_3078 << 2u) + (_3064 << 6u)) >> 2u));
        uint _3084 = _3083.x;
        uint _3085 = _3052.z;
        float _3164;
        float _3166;
        float _3168;
        float _3170;
        float _3172;
        float _3174;
        if (((((1u << ((_3085 >> 4u) & 15u)) + 4294967295u) & _3084) == 0u) || ((_3085 & 240u) == 0u))
        {
            _3164 = 0.0;
            _3166 = 0.0;
            _3168 = 0.0;
            _3170 = 0.0;
            _3172 = 0.0;
            _3174 = 0.0;
        }
        else
        {
            float _3165;
            float _3167;
            float _3169;
            float _3171;
            float _3173;
            float _3175;
            float _3317 = 0.0;
            float _3318 = 0.0;
            float _3319 = 0.0;
            float _3320 = 0.0;
            float _3321 = 0.0;
            float _3322 = 0.0;
            uint _3323 = 0u;
            uint _3332;
            bool _3333;
            for (;;)
            {
                _3332 = texelFetch(g_lightClassification, int((((_3078 << 5u) + (_3064 << 9u)) + (_3323 << 2u)) >> 2u)).x;
                _3333 = _3332 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3333)
                {
                    frontier_phi_71_pred = _3322;
                    frontier_phi_71_pred_1 = _3321;
                    frontier_phi_71_pred_2 = _3320;
                    frontier_phi_71_pred_3 = _3319;
                    frontier_phi_71_pred_4 = _3318;
                    frontier_phi_71_pred_5 = _3317;
                }
                else
                {
                    float _3462;
                    float _3463;
                    float _3464;
                    float _3465;
                    float _3466;
                    float _3467;
                    uint _3468;
                    _3462 = _3317;
                    _3463 = _3318;
                    _3464 = _3319;
                    _3465 = _3320;
                    _3466 = _3321;
                    _3467 = _3322;
                    _3468 = _3332;
                    float _3389;
                    float _3390;
                    float _3391;
                    float _3392;
                    float _3393;
                    float _3394;
                    for (;;)
                    {
                        uint _3472 = uint(findLSB(_3468)) + (_3323 << 5u);
                        uint _3469 = (_3468 + 4294967295u) & _3468;
                        uint _3474 = _3472 * 48u;
                        vec4 _3488 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3474)).x, texelFetch(g_PointLightRenderingBuffer, int(_3474 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3474 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3474 + 3u)).x));
                        uint _3494 = (_3472 * 48u) + 4u;
                        vec4 _3507 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3494)).x, texelFetch(g_PointLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3494 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3494 + 3u)).x));
                        uint _3513 = (_3472 * 48u) + 8u;
                        vec3 _3524 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3513)).x, texelFetch(g_PointLightRenderingBuffer, int(_3513 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3513 + 2u)).x));
                        float _3528 = _3488.x - _2143;
                        float _3529 = _3488.y - _2144;
                        float _3530 = _3488.z - _2145;
                        float _3531 = dot(vec3(_3528, _3529, _3530), vec3(_3528, _3529, _3530));
                        float _3534 = inversesqrt(_3531);
                        float _3535 = _3534 * _3528;
                        float _3536 = _3534 * _3529;
                        float _3537 = _3534 * _3530;
                        float _3538 = dot(vec3(_979, _982, _985), vec3(_3535, _3536, _3537));
                        float _3543 = 1.0 - (_3531 * _3488.w);
                        float _5026 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                        float _3544 = isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0));
                        float _3545 = sqrt(_3531) * _3507.w;
                        float _3548 = 1.39999997615814208984375 / (_3545 + 1.39999997615814208984375);
                        float _3549 = _3548 * _3548;
                        float _3552 = ((1.0 - _3549) * _3538) + _3549;
                        float _3555 = _3545 * _3545;
                        float _3559 = ((isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0))) * _3544) / ((_3555 * 0.699999988079071044921875) + 1.0);
                        float _3563 = (-0.0) - _2143;
                        float _3564 = (-0.0) - _2144;
                        float _3565 = (-0.0) - _2145;
                        float _3569 = inversesqrt(dot(vec3(_3563, _3564, _3565), vec3(_3563, _3564, _3565)));
                        float _3570 = _3569 * _3563;
                        float _3571 = _3569 * _3564;
                        float _3572 = _3569 * _3565;
                        float _3579 = exp2(log2(1.0 / ((_3555 * 3.5) + 5.0)) * 0.25);
                        float _3580 = 1.0 - _1054;
                        float _3587 = sqrt(1.0 - ((1.0 - (_3580 * _3580)) * (1.0 - (_3579 * _3579))));
                        float _3588 = _3587 * _3587;
                        float _3589 = _3588 * _3588;
                        float _3590 = _3570 + _3535;
                        float _3591 = _3571 + _3536;
                        float _3592 = _3572 + _3537;
                        float _3596 = inversesqrt(dot(vec3(_3590, _3591, _3592), vec3(_3590, _3591, _3592)));
                        float _3600 = dot(vec3(_979, _982, _985), vec3(_3570, _3571, _3572));
                        float _5042 = isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0));
                        float _3603 = isnan(1.0) ? _5042 : (isnan(_5042) ? 1.0 : min(_5042, 1.0));
                        float _3604 = dot(vec3(_979, _982, _985), vec3(_3596 * _3590, _3596 * _3591, _3596 * _3592));
                        float _5053 = isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0));
                        float _3607 = isnan(1.0) ? _5053 : (isnan(_5053) ? 1.0 : min(_5053, 1.0));
                        float _3611 = ((_3607 * _3607) * (_3589 + (-1.0))) + 1.0;
                        float _3612 = _3548 * _3588;
                        float _3613 = _3612 * _3612;
                        float _3616 = ((1.0 - _3613) * _3538) + _3613;
                        float _5064 = isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0));
                        float _3617 = isnan(1.0) ? _5064 : (isnan(_5064) ? 1.0 : min(_5064, 1.0));
                        float _3618 = 1.0 - _3588;
                        float _3628 = (0.5 / (((_3617 * ((_3603 * _3618) + _3588)) + 9.9999999392252902907785028219223e-09) + (((_3617 * _3618) + _3588) * _3603))) * _3617;
                        float _5075 = isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0));
                        float _3639 = (((_3589 * 3.1415927410125732421875) * (isnan(1.0) ? _5075 : (isnan(_5075) ? 1.0 : min(_5075, 1.0)))) / ((_3611 * _3611) * ((_3555 * 2.1991131305694580078125) + 3.141590118408203125))) * _3544;
                        _3392 = (_3559 * _3507.x) + _3465;
                        _3393 = (_3559 * _3507.y) + _3466;
                        _3394 = (_3559 * _3507.z) + _3467;
                        _3389 = (_3639 * _3524.x) + _3462;
                        _3390 = (_3639 * _3524.y) + _3463;
                        _3391 = (_3639 * _3524.z) + _3464;
                        if (_3469 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3462 = _3389;
                            _3463 = _3390;
                            _3464 = _3391;
                            _3465 = _3392;
                            _3466 = _3393;
                            _3467 = _3394;
                            _3468 = _3469;
                        }
                    }
                    frontier_phi_71_pred = _3394;
                    frontier_phi_71_pred_1 = _3393;
                    frontier_phi_71_pred_2 = _3392;
                    frontier_phi_71_pred_3 = _3391;
                    frontier_phi_71_pred_4 = _3390;
                    frontier_phi_71_pred_5 = _3389;
                }
                _3175 = frontier_phi_71_pred;
                _3173 = frontier_phi_71_pred_1;
                _3171 = frontier_phi_71_pred_2;
                _3169 = frontier_phi_71_pred_3;
                _3167 = frontier_phi_71_pred_4;
                _3165 = frontier_phi_71_pred_5;
                uint _3324 = _3323 + 1u;
                if (_3324 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3317 = _3165;
                    _3318 = _3167;
                    _3319 = _3169;
                    _3320 = _3171;
                    _3321 = _3173;
                    _3322 = _3175;
                    _3323 = _3324;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3164 = _3165;
            _3166 = _3167;
            _3168 = _3169;
            _3170 = _3171;
            _3172 = _3173;
            _3174 = _3175;
        }
        uvec4 _3178 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3179 = _3178.z;
        uint _3181 = (_3179 >> 8u) & 15u;
        float _3285;
        float _3287;
        float _3289;
        float _3291;
        float _3293;
        float _3295;
        if (((4294967295u << _3181) & _3084) == 0u)
        {
            _3285 = _3164;
            _3287 = _3166;
            _3289 = _3168;
            _3291 = _3170;
            _3293 = _3172;
            _3295 = _3174;
        }
        else
        {
            float _3310 = inversesqrt(dot(vec3(_2143, _2144, _2145), vec3(_2143, _2144, _2145)));
            float _3311 = _3310 * _2143;
            float _3312 = _3310 * _2144;
            float _3313 = _3310 * _2145;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3181 < ((_3179 >> 12u) & 15u))
            {
                float _3286;
                float _3288;
                float _3290;
                float _3292;
                float _3294;
                float _3296;
                float _3445 = _3164;
                float _3446 = _3166;
                float _3447 = _3168;
                float _3448 = _3170;
                float _3449 = _3172;
                float _3450 = _3174;
                uint _3451 = _3181;
                uint _3460;
                bool _3461;
                for (;;)
                {
                    _3460 = texelFetch(g_lightClassification, int((((_3078 << 5u) + (_3064 << 9u)) + (_3451 << 2u)) >> 2u)).x;
                    _3461 = _3460 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3461)
                    {
                        frontier_phi_82_pred = _3450;
                        frontier_phi_82_pred_1 = _3449;
                        frontier_phi_82_pred_2 = _3448;
                        frontier_phi_82_pred_3 = _3447;
                        frontier_phi_82_pred_4 = _3446;
                        frontier_phi_82_pred_5 = _3445;
                    }
                    else
                    {
                        float _3653;
                        float _3654;
                        float _3655;
                        float _3656;
                        float _3657;
                        float _3658;
                        float _3946;
                        float _3947;
                        float _3948;
                        float _3949;
                        float _3950;
                        float _3951;
                        float _3666 = _3445;
                        float _3667 = _3446;
                        float _3668 = _3447;
                        float _3669 = _3448;
                        float _3670 = _3449;
                        float _3671 = _3450;
                        uint _3672 = _3460;
                        uint _3673;
                        vec4 _3698;
                        float _3699;
                        vec4 _3714;
                        vec3 _3726;
                        vec4 _3741;
                        vec4 _3756;
                        float _3802;
                        bool _3803;
                        for (;;)
                        {
                            uint _3683 = ((_3451 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3672));
                            _3673 = (_3672 + 4294967295u) & _3672;
                            uint _3685 = _3683 * 40u;
                            _3698 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3685)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 3u)).x));
                            _3699 = _3698.w;
                            uint _3701 = (_3683 * 40u) + 4u;
                            _3714 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3701)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 3u)).x));
                            uint _3716 = (_3683 * 40u) + 8u;
                            _3726 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3716)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 2u)).x));
                            uint _3728 = (_3683 * 40u) + 16u;
                            _3741 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3728)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 3u)).x));
                            uint _3743 = (_3683 * 40u) + 20u;
                            _3756 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3743)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 3u)).x));
                            uint _3758 = (_3683 * 40u) + 24u;
                            vec4 _3771 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3758)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 3u)).x));
                            uint _3777 = (_3683 * 40u) + 28u;
                            vec4 _3790 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3777)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3777 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3777 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3777 + 3u)).x));
                            _3802 = fma(_2145, _3790.z, fma(_2144, _3790.y, _3790.x * _2143)) + _3790.w;
                            _3803 = !((fma(_2145, _3771.z, fma(_2144, _3771.y, _3771.x * _2143)) + _3771.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3803)
                            {
                                float _3830 = _3698.x - _2143;
                                float _3831 = _3698.y - _2144;
                                float _3832 = _3698.z - _2145;
                                float _3833 = dot(vec3(_3830, _3831, _3832), vec3(_3830, _3831, _3832));
                                float _3836 = inversesqrt(_3833);
                                float _3837 = _3836 * _3830;
                                float _3838 = _3836 * _3831;
                                float _3839 = _3836 * _3832;
                                float _3843 = 1.0 - (_3833 / (_3699 * _3699));
                                float _5086 = isnan(0.0) ? _3843 : (isnan(_3843) ? 0.0 : max(_3843, 0.0));
                                float _3844 = isnan(1.0) ? _5086 : (isnan(_5086) ? 1.0 : min(_5086, 1.0));
                                float _3848 = sqrt(_3833) * _3714.w;
                                float _3850 = 1.39999997615814208984375 / (_3848 + 1.39999997615814208984375);
                                float _3851 = _3850 * _3850;
                                float _3854 = ((1.0 - _3851) * dot(vec3(_3837, _3838, _3839), vec3(_979, _982, _985))) + _3851;
                                float _3857 = _3848 * _3848;
                                float _3861 = (fma(_2145, _3741.z, fma(_2144, _3741.y, _3741.x * _2143)) + _3741.w) / _3802;
                                float _3862 = (fma(_2145, _3756.z, fma(_2144, _3756.y, _3756.x * _2143)) + _3756.w) / _3802;
                                float _3866 = 1.0 - dot(vec2(_3861, _3862), vec2(_3861, _3862));
                                float _5102 = isnan(0.0) ? _3866 : (isnan(_3866) ? 0.0 : max(_3866, 0.0));
                                float _3867 = isnan(1.0) ? _5102 : (isnan(_5102) ? 1.0 : min(_5102, 1.0));
                                float _3868 = _3867 * (((isnan(0.0) ? _3854 : (isnan(_3854) ? 0.0 : max(_3854, 0.0))) * _3844) / ((_3857 * 0.699999988079071044921875) + 1.0));
                                float _3880 = exp2(log2(1.0 / ((_3857 * 3.5) + 5.0)) * 0.25);
                                float _3881 = 1.0 - _1054;
                                float _3888 = sqrt(1.0 - ((1.0 - (_3881 * _3881)) * (1.0 - (_3880 * _3880))));
                                float _3889 = _3888 * _3888;
                                float _3890 = _3889 * _3889;
                                float _3891 = _3837 - _3311;
                                float _3892 = _3838 - _3312;
                                float _3893 = _3839 - _3313;
                                float _3897 = inversesqrt(dot(vec3(_3891, _3892, _3893), vec3(_3891, _3892, _3893)));
                                float _3901 = dot(vec3(_979, _982, _985), vec3((-0.0) - _3311, (-0.0) - _3312, (-0.0) - _3313));
                                float _5113 = isnan(0.0) ? _3901 : (isnan(_3901) ? 0.0 : max(_3901, 0.0));
                                float _3904 = isnan(1.0) ? _5113 : (isnan(_5113) ? 1.0 : min(_5113, 1.0));
                                float _3905 = dot(vec3(_979, _982, _985), vec3(_3897 * _3891, _3897 * _3892, _3897 * _3893));
                                float _5124 = isnan(0.0) ? _3905 : (isnan(_3905) ? 0.0 : max(_3905, 0.0));
                                float _3908 = isnan(1.0) ? _5124 : (isnan(_5124) ? 1.0 : min(_5124, 1.0));
                                float _3912 = ((_3908 * _3908) * (_3890 + (-1.0))) + 1.0;
                                float _3913 = _3850 * _3889;
                                float _3914 = _3913 * _3913;
                                float _3920 = ((1.0 - _3914) * dot(vec3(_979, _982, _985), vec3(_3837, _3838, _3839))) + _3914;
                                float _5135 = isnan(0.0) ? _3920 : (isnan(_3920) ? 0.0 : max(_3920, 0.0));
                                float _3921 = isnan(1.0) ? _5135 : (isnan(_5135) ? 1.0 : min(_5135, 1.0));
                                float _3922 = 1.0 - _3889;
                                float _3932 = (0.5 / (((_3921 * ((_3904 * _3922) + _3889)) + 9.9999999392252902907785028219223e-09) + (((_3921 * _3922) + _3889) * _3904))) * _3921;
                                float _5146 = isnan(0.0) ? _3932 : (isnan(_3932) ? 0.0 : max(_3932, 0.0));
                                float _3942 = (_3867 * _3844) * (((_3890 * 3.1415927410125732421875) * (isnan(1.0) ? _5146 : (isnan(_5146) ? 1.0 : min(_5146, 1.0)))) / ((_3912 * _3912) * ((_3857 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3868 * _3714.z;
                                frontier_phi_88_pred_1 = _3868 * _3714.y;
                                frontier_phi_88_pred_2 = _3868 * _3714.x;
                                frontier_phi_88_pred_3 = _3942 * _3726.z;
                                frontier_phi_88_pred_4 = _3942 * _3726.y;
                                frontier_phi_88_pred_5 = _3942 * _3726.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3951 = frontier_phi_88_pred;
                            _3950 = frontier_phi_88_pred_1;
                            _3949 = frontier_phi_88_pred_2;
                            _3948 = frontier_phi_88_pred_3;
                            _3947 = frontier_phi_88_pred_4;
                            _3946 = frontier_phi_88_pred_5;
                            _3656 = _3949 + _3669;
                            _3657 = _3950 + _3670;
                            _3658 = _3951 + _3671;
                            _3653 = _3946 + _3666;
                            _3654 = _3947 + _3667;
                            _3655 = _3948 + _3668;
                            if (_3673 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3666 = _3653;
                                _3667 = _3654;
                                _3668 = _3655;
                                _3669 = _3656;
                                _3670 = _3657;
                                _3671 = _3658;
                                _3672 = _3673;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3658;
                        frontier_phi_82_pred_1 = _3657;
                        frontier_phi_82_pred_2 = _3656;
                        frontier_phi_82_pred_3 = _3655;
                        frontier_phi_82_pred_4 = _3654;
                        frontier_phi_82_pred_5 = _3653;
                    }
                    _3296 = frontier_phi_82_pred;
                    _3294 = frontier_phi_82_pred_1;
                    _3292 = frontier_phi_82_pred_2;
                    _3290 = frontier_phi_82_pred_3;
                    _3288 = frontier_phi_82_pred_4;
                    _3286 = frontier_phi_82_pred_5;
                    uint _3452 = _3451 + 1u;
                    if (_3452 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3445 = _3286;
                        _3446 = _3288;
                        _3447 = _3290;
                        _3448 = _3292;
                        _3449 = _3294;
                        _3450 = _3296;
                        _3451 = _3452;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3292;
                frontier_phi_63_64_ladder_1 = _3296;
                frontier_phi_63_64_ladder_2 = _3294;
                frontier_phi_63_64_ladder_3 = _3290;
                frontier_phi_63_64_ladder_4 = _3288;
                frontier_phi_63_64_ladder_5 = _3286;
            }
            else
            {
                frontier_phi_63_64_ladder = _3170;
                frontier_phi_63_64_ladder_1 = _3174;
                frontier_phi_63_64_ladder_2 = _3172;
                frontier_phi_63_64_ladder_3 = _3168;
                frontier_phi_63_64_ladder_4 = _3166;
                frontier_phi_63_64_ladder_5 = _3164;
            }
            _3285 = frontier_phi_63_64_ladder_5;
            _3287 = frontier_phi_63_64_ladder_4;
            _3289 = frontier_phi_63_64_ladder_3;
            _3291 = frontier_phi_63_64_ladder;
            _3293 = frontier_phi_63_64_ladder_2;
            _3295 = frontier_phi_63_64_ladder_1;
        }
        float _3300 = isnan(1.0) ? _1038 : (isnan(_1038) ? 1.0 : min(_1038, 1.0));
        _3097 = (_3300 * _3291) + _2609;
        _3099 = (_3300 * _3293) + _2611;
        _3101 = (_3300 * _3295) + _2613;
        _3103 = ((_3285 * _1022) * _3300) + _2947;
        _3105 = ((_3287 * _1024) * _3300) + _2949;
        _3107 = ((_3289 * _1025) * _3300) + _2951;
    }
    else
    {
        _3097 = _2609;
        _3099 = _2611;
        _3101 = _2613;
        _3103 = _2947;
        _3105 = _2949;
        _3107 = _2951;
    }
    float _5162 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _5173 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _5184 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _3124 = ((isnan(1.0) ? _5162 : (isnan(_5162) ? 1.0 : min(_5162, 1.0))) * (_3097 + ((isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0))) * _1038))) + ((_3103 + ((isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0))) * _1877)) * cbPerFrame._m0[3u].x);
    float _3125 = ((isnan(1.0) ? _5173 : (isnan(_5173) ? 1.0 : min(_5173, 1.0))) * (_3099 + ((isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0))) * _1038))) + ((_3105 + ((isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0))) * _1877)) * cbPerFrame._m0[3u].x);
    float _3126 = ((isnan(1.0) ? _5184 : (isnan(_5184) ? 1.0 : min(_5184, 1.0))) * (_3101 + ((isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0))) * _1038))) + ((_3107 + ((isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0))) * _1877)) * cbPerFrame._m0[3u].x);
    uint _3127 = _289 + 6u;
    float _3135 = _960 / cbSceneParam._m0[86u].x;
    float _3136 = _961 / cbSceneParam._m0[86u].y;
    vec4 _3150 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3135, _3136, (log2((isnan(cbSceneParam._m0[77u].w) ? _883 : (isnan(_883) ? cbSceneParam._m0[77u].w : min(_883, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3152 = _3150.x;
    float _3153 = _3150.y;
    float _3154 = _3150.z;
    float _3155 = _3150.w;
    float _3227;
    float _3229;
    float _3231;
    float _3233;
    if (_883 > cbSceneParam._m0[78u].w)
    {
        float _3189 = isnan(_883) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _883 : min(cbSceneParam._m0[80u].w, _883));
        float _3190 = _3189 / _883;
        float _3201 = _3190 * _933;
        float _3202 = _934 * _3190;
        float _3203 = (-0.0) - _3202;
        float _3205 = _3190 * _935;
        float _3207 = (cbSceneParam._m0[77u].w * _3203) / _3189;
        float _3208 = _3207 + cbSceneParam._m0[79u].w;
        float _3209 = cbSceneParam._m0[79u].w - _3202;
        float _3215 = sqrt(((_3201 * _3201) + (_3202 * _3202)) + (_3205 * _3205));
        float _3218 = (1.0 - (cbSceneParam._m0[77u].w / _3189)) * _3215;
        float _3223 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3225 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3402;
        if (abs((_3203 - _3207) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3402 = ((((_3208 > 0.0) ? exp2(_3223 * _3208) : (2.0 - exp2(_3225 * _3208))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3218;
        }
        else
        {
            float _3346 = 1.0 / cbSceneParam._m0[80u].x;
            float _3347 = isnan(_3209) ? _3208 : (isnan(_3208) ? _3209 : max(_3208, _3209));
            float _3348 = isnan(_3209) ? _3208 : (isnan(_3208) ? _3209 : min(_3208, _3209));
            float _3357 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : min(_3347, 0.0));
            float _3358 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : min(_3348, 0.0));
            _3402 = ((abs(_3215 / _3203) * cbSceneParam._m0[80u].y) * ((((_3357 - _3358) * 2.0) - ((exp2(_3223 * (isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0)))) - exp2(_3223 * (isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0))))) * _3346)) - ((exp2(_3225 * _3357) - exp2(_3225 * _3358)) * _3346))) + (_3218 * cbSceneParam._m0[80u].z);
        }
        vec4 _3404 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3135, _3136, 1.0), 0.0);
        float _3413 = exp2((_3402 * (-1.44269502162933349609375)) * (1.0 - _3404.w));
        float _3414 = log2(_3413);
        float _3430 = log2(_3155);
        _3227 = (exp2(_3430 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3414 * cbSceneParam._m0[78u].x)) * _3404.x) / cbSceneParam._m0[78u].x)) + _3152;
        _3229 = (exp2(_3430 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3414 * cbSceneParam._m0[78u].y)) * _3404.y) / cbSceneParam._m0[78u].y)) + _3153;
        _3231 = (exp2(_3430 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3414 * cbSceneParam._m0[78u].z)) * _3404.z) / cbSceneParam._m0[78u].z)) + _3154;
        _3233 = _3413 * _3155;
    }
    else
    {
        _3227 = _3152;
        _3229 = _3153;
        _3231 = _3154;
        _3233 = _3155;
    }
    bool _3440;
    vec4 _3243;
    vec4 _3265;
    float _3267;
    float _3271;
    float _3272;
    float _3273;
    float _3274;
    bool _3284;
    for (;;)
    {
        _3243 = cbMatDynParam._m0[0u];
        float _3245 = roundEven(_3243.y);
        bool _3246 = _3245 == 3.0;
        float _3247 = log2(_3233);
        float _3254 = exp2(_3247 * cbSceneParam._m0[78u].x) * _3124;
        float _3255 = exp2(_3247 * cbSceneParam._m0[78u].y) * _3125;
        float _3256 = exp2(_3247 * cbSceneParam._m0[78u].z) * _3126;
        float _3263 = _949 + (-0.5);
        _3265 = cbMtdParam._m0[1u];
        _3267 = _3265.y * _3263;
        float _3270 = (_3245 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3271 = _3270 * (_3246 ? _3254 : (_3254 + (cbSceneParam._m0[72u].w * _3227)));
        _3272 = _3270 * (_3246 ? _3255 : (_3255 + (cbSceneParam._m0[72u].w * _3229)));
        _3273 = _3270 * (_3246 ? _3256 : (_3256 + (cbSceneParam._m0[72u].w * _3231)));
        _3274 = _3263 * 0.999000012874603271484375;
        _3284 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3284)
        {
            if ((cbInstanceData._m0[_289 + 7u].x + _3274) < 0.5)
            {
                _3440 = true;
                break;
            }
        }
        uint _3381 = _998 + uint(_3243.w);
        if ((cbInstanceData._m0[_3381].w < 1.0) && ((cbInstanceData._m0[_3381].w + _3274) < 0.5))
        {
            _3440 = true;
            break;
        }
        if ((_3267 + 1.0) < _3265.x)
        {
            _3440 = true;
            break;
        }
        _3440 = false;
        break;
    }
    float _3644;
    if (_3440)
    {
        discard_state = true;
        _3644 = 0.0;
    }
    else
    {
        _3644 = cbInstanceData._m0[_3127].w;
    }
    SV_Target.x = _3271;
    SV_Target.y = _3272;
    SV_Target.z = _3273;
    SV_Target.w = _3644;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3127].w;
    discard_exit();
}


