#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1408;
float _4071;
float _4072;
float _4073;
float _4074;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _244 = _243 * _235;
    float _245 = _243 * _236;
    float _246 = _243 * _237;
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = _250 * NORMAL.x;
    float _252 = _250 * NORMAL.y;
    float _253 = _250 * NORMAL.z;
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _258 = _257 * TANGENT.x;
    float _259 = _257 * TANGENT.y;
    float _260 = _257 * TANGENT.z;
    uint _263 = uint(roundEven(NORMAL.w)) * 13u;
    uint _268 = _263 + 1u;
    uint _272 = _263 + 2u;
    float _281 = sqrt(((cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x)) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x));
    float _282 = _281 * TEXCOORD.z;
    float _283 = _281 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _309 = _303.x * cbMtdParam._m0[11u].x;
    float _310 = _303.y * cbMtdParam._m0[11u].y;
    float _311 = _303.z * cbMtdParam._m0[11u].z;
    vec4 _330 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _282) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _283) + cbTextureTilingScale._m0[5u].w));
    vec4 _368 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _370 = _368.x;
    float _382 = dot(vec4(_370, _368.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _399 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_370 - _382) * cbMtdParam._m0[24u].y) + _382) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4083 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _400 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _407 = (_400 * ((_330.x * cbMtdParam._m0[12u].x) - _309)) + _309;
    float _408 = (_400 * ((_330.y * cbMtdParam._m0[12u].y) - _310)) + _310;
    float _409 = (_400 * ((_330.z * cbMtdParam._m0[12u].z) - _311)) + _311;
    vec4 _427 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _282) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _283) + cbTextureTilingScale._m0[20u].w));
    vec4 _454 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _282) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _283) + cbTextureTilingScale._m0[4u].w));
    vec4 _471 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _473 = _471.x;
    float _474 = _471.y;
    float _475 = _471.z;
    float _484 = ((_454.z - _475) * _400) + _475;
    float _487 = ((((_454.x - _473) * _400) + _473) * 2.0) + (-1.0);
    float _488 = ((((_454.y - _474) * _400) + _474) * 2.0) + (-1.0);
    float _489 = dot(vec2(_487, _488), vec2(_487, _488));
    float _4094 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _494 = sqrt(1.0 - (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))));
    float _497 = _487 + ((((_427.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _498 = _488 + ((((_427.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _501 = fma(_494, _251, fma(_498, _258, _497 * _244));
    float _504 = fma(_494, _252, fma(_498, _259, _497 * _245));
    float _507 = fma(_494, _253, fma(_498, _260, _497 * _246));
    float _511 = inversesqrt(dot(vec3(_501, _504, _507), vec3(_501, _504, _507)));
    vec4 _527 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _553 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _282) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _283) + cbTextureTilingScale._m0[11u].w));
    float _555 = _553.x;
    float _556 = 1.0 - _555;
    float _560 = ((_555 - _556) * cbMtdParam._m0[24u].z) + _556;
    float _562 = (cbMtdParam._m0[19u].x + dot(vec4(_511 * _501, _511 * _504, _511 * _507, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_560 * cbMtdParam._m0[21u].z);
    float _4105 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _563 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _565 = (-0.0) - cbMtdParam._m0[24u].x;
    float _567 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _568 = isnan(1.0) ? _567 : (isnan(_567) ? 1.0 : min(_567, 1.0));
    float _575 = _563 - ((_563 * TEXCOORD_8.x) * _568);
    float _576 = _563 - ((_563 * TEXCOORD_8.y) * _568);
    float _577 = _563 - ((_563 * TEXCOORD_8.z) * _568);
    float _584 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _588 = ((isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : min(_584, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _596 = (_588 - (((_560 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _588))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4136 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _597 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _601 = ((_575 * (cbMtdParam._m0[17u].x - _407)) * _597) + _407;
    float _602 = ((_576 * (cbMtdParam._m0[17u].y - _408)) * _597) + _408;
    float _603 = ((_577 * (cbMtdParam._m0[17u].z - _409)) * _597) + _409;
    vec4 _615 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _282) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _283) + cbTextureTilingScale._m0[19u].w));
    float _617 = _615.x;
    float _618 = 1.0 - _617;
    float _645 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_617 - _618) * cbMtdParam._m0[24u].w) + _618) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4147 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _646 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
    float _654 = ((((cbMtdParam._m0[10u].x - _601) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _646) + _601;
    float _655 = ((((cbMtdParam._m0[10u].y - _602) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _646) + _602;
    float _656 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _603)) * _646) + _603;
    vec4 _682 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _684 = _682.x;
    float _702 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _282) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _283) + cbTextureTilingScale._m0[9u].w)).x - _684) * _400) + _684;
    float _706 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _702) * cbMtdParam._m0[19u].z) + _702;
    float _709 = _706 - ((_597 * _575) * _706);
    float _711 = _709 - (_709 * _646);
    float _716 = (((_427.z - _484) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _484;
    vec4 _730 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _282) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _283) + cbTextureTilingScale._m0[15u].w));
    float _737 = (_730.x * 2.0) + (-1.0);
    float _738 = (_730.y * 2.0) + (-1.0);
    float _739 = dot(vec2(_737, _738), vec2(_737, _738));
    float _4158 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _748 = (((_730.z - _716) * _575) * _597) + _716;
    float _751 = ((cbMtdParam._m0[23u].y - _748) * _646) + _748;
    vec4 _770 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _282) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _283) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _776 = (_770.x * 2.0) + (-1.0);
    float _777 = (_770.y * 2.0) + (-1.0);
    float _778 = dot(vec2(_776, _777), vec2(_776, _777));
    float _4169 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _798 = (((cbMtdParam._m0[21u].x * _497) + ((_737 - _497) * _575)) * _597) + _497;
    float _799 = (((cbMtdParam._m0[21u].x * _498) + ((_738 - _498) * _576)) * _597) + _498;
    float _800 = (((sqrt(1.0 - (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0)))) - _494) * _577) * _597) + _494;
    float _811 = (((_776 - _798) + (_798 * cbMtdParam._m0[22u].z)) * _646) + _798;
    float _812 = (((_777 - _799) + (_799 * cbMtdParam._m0[22u].z)) * _646) + _799;
    float _813 = ((sqrt(1.0 - (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0)))) - _800) * _646) + _800;
    float _815 = cbMtdParam._m0[22u].x + _527.w;
    float _818 = fma(_813, _251, fma(_812, _258, _811 * _244));
    float _821 = fma(_813, _252, fma(_812, _259, _811 * _245));
    float _824 = fma(_813, _253, fma(_812, _260, _811 * _246));
    float _828 = inversesqrt(dot(vec3(_818, _821, _824), vec3(_818, _821, _824)));
    float _829 = _828 * _818;
    float _830 = _828 * _821;
    float _831 = _828 * _824;
    float _4180 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _832 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    float _4191 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _4202 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _4213 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _4224 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _4235 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _837 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
    float _851 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _891 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _901 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _891);
    float _902 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _891);
    float _903 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _891);
    float _907 = inversesqrt(dot(vec3(_901, _902, _903), vec3(_901, _902, _903)));
    float _908 = _901 * _907;
    float _909 = _902 * _907;
    float _910 = _903 * _907;
    vec4 _915 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _917 = _915.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1089 = sqrt(((_901 * _901) + (_902 * _902)) + (_903 * _903));
        float _1095 = (cbMatDynParam._m0[5u].x * _1089) + cbMatDynParam._m0[5u].y;
        float _4246 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1100 = (cbMatDynParam._m0[5u].z * _1089) + cbMatDynParam._m0[5u].w;
        float _4257 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) - _1096)) + _1096) < ((_917 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _928 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _929 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _947 = fma(_831, cbSceneParam._m0[5u].z, fma(_830, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _829));
    float _950 = fma(_831, cbSceneParam._m0[6u].z, fma(_830, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _829));
    float _953 = fma(_831, cbSceneParam._m0[7u].z, fma(_830, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _829));
    uint _966 = _263 + 9u;
    uint _967 = _966 + uint(cbMatDynParam._m0[0u].w);
    float _973 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0)))) * cbInstanceData._m0[_967].x;
    float _974 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0)))) * cbInstanceData._m0[_967].y;
    float _975 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0)))) * cbInstanceData._m0[_967].z;
    float _4268 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _976 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
    float _4279 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _977 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
    float _4290 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _978 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
    float _979 = 1.0 - _837;
    float _980 = _976 * _979;
    float _981 = _977 * _979;
    float _982 = _978 * _979;
    float _987 = (_976 + (-0.039999999105930328369140625)) * _837;
    float _988 = (_977 + (-0.039999999105930328369140625)) * _837;
    float _989 = (_978 + (-0.039999999105930328369140625)) * _837;
    float _990 = _987 + 0.039999999105930328369140625;
    float _992 = _988 + 0.039999999105930328369140625;
    float _993 = _989 + 0.039999999105930328369140625;
    vec4 _1002 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _928, cbSceneParam._m0[86u].y * _929));
    float _1006 = ((isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * TEXCOORD_5.w) * _1002.x;
    float _1007 = dot(vec3(_829, _830, _831), vec3(_908, _909, _910));
    float _1010 = _1007 * 2.0;
    float _1014 = (_1010 * _829) - _908;
    float _1015 = (_1010 * _830) - _909;
    float _1016 = (_1010 * _831) - _910;
    float _1020 = abs(dot(vec3(_908, _909, _910), vec3(_829, _830, _831)));
    float _4301 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
    float _1022 = sqrt(_832);
    float _1035 = exp2((_1022 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1022 * 3.0));
    float _1041 = (1.0 - _1035) * ((_1022 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1042 = _1035 * _1022;
    float _1070 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1074 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1078 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1407;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1132 = fma(_1078, cbModelParam._m0[26u].z, fma(_1074, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1070));
        float _1136 = fma(_1078, cbModelParam._m0[27u].z, fma(_1074, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1070));
        float _1140 = fma(_1078, cbModelParam._m0[28u].z, fma(_1074, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1070));
        float _1165 = _1070 + _829;
        float _1166 = _1074 + _830;
        float _1167 = _1078 + _831;
        float _1177 = fma(_1167, cbModelParam._m0[26u].z, fma(_1166, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1165)) - _1132;
        float _1178 = fma(_1167, cbModelParam._m0[27u].z, fma(_1166, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1165)) - _1136;
        float _1179 = fma(_1167, cbModelParam._m0[28u].z, fma(_1166, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1165)) - _1140;
        float _1183 = inversesqrt(dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179)));
        float _1196 = ((_1183 * _1177) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1132 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1197 = ((_1183 * _1178) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1136 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1198 = ((_1183 * _1179) / cbModelParam._m0[34u].z) + ((((((_1140 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        vec4 _1222 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        float _1235 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1201.x + (-0.5));
        float _1237 = _1235 * (_1201.y + (-0.5));
        float _1238 = _1235 * (_1201.z + (-0.5));
        float _1245 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1246 = _1245 * (_1208.x + (-0.5));
        float _1247 = _1245 * (_1208.y + (-0.5));
        float _1248 = _1245 * (_1208.z + (-0.5));
        float _1255 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1256 = _1255 * (_1215.x + (-0.5));
        float _1257 = _1255 * (_1215.y + (-0.5));
        float _1258 = _1255 * (_1215.z + (-0.5));
        float _1265 = exp2((_1222.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1222.x + (-0.5));
        float _1267 = _1265 * (_1222.y + (-0.5));
        float _1268 = _1265 * (_1222.z + (-0.5));
        float _1269 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1270 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1271 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1272 = _1236 * 0.5;
        float _1273 = _1246 * 0.5;
        float _1274 = _1256 * 0.5;
        float _1275 = dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274));
        float _1280 = (_1275 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1275);
        float _1289 = (dot(vec3(_829, _830, _831), vec3(_1280 * _1272, _1280 * _1273, _1280 * _1274)) + 1.0) * 0.5;
        float _4327 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1299 = sqrt(((_1273 * _1273) + (_1272 * _1272)) + (_1274 * _1274)) / (_1269 + 9.9999997473787516355514526367188e-06);
        float _4338 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _1301 = _1300 * 2.0;
        float _1305 = (1.0 - _1300) / (_1300 + 1.0);
        float _4349 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1315 = ((((1.0 - _1306) * (_1301 + 2.0)) * exp2(log2(isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_1301 + 1.0))) + _1306) * _1269;
        float _1316 = _1237 * 0.5;
        float _1317 = _1247 * 0.5;
        float _1318 = _1257 * 0.5;
        float _1319 = dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318));
        float _1324 = (_1319 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1319);
        float _1332 = (dot(vec3(_829, _830, _831), vec3(_1324 * _1316, _1324 * _1317, _1324 * _1318)) + 1.0) * 0.5;
        float _4360 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1341 = sqrt(((_1317 * _1317) + (_1316 * _1316)) + (_1318 * _1318)) / (_1270 + 9.9999997473787516355514526367188e-06);
        float _4371 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _1343 = _1342 * 2.0;
        float _1347 = (1.0 - _1342) / (_1342 + 1.0);
        float _4382 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _1357 = ((((1.0 - _1348) * (_1343 + 2.0)) * exp2(log2(isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_1343 + 1.0))) + _1348) * _1270;
        float _1358 = _1238 * 0.5;
        float _1359 = _1248 * 0.5;
        float _1360 = _1258 * 0.5;
        float _1361 = dot(vec3(_1358, _1359, _1360), vec3(_1358, _1359, _1360));
        float _1366 = (_1361 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1361);
        float _1374 = (dot(vec3(_829, _830, _831), vec3(_1366 * _1358, _1366 * _1359, _1366 * _1360)) + 1.0) * 0.5;
        float _4393 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1383 = sqrt(((_1359 * _1359) + (_1358 * _1358)) + (_1360 * _1360)) / (_1271 + 9.9999997473787516355514526367188e-06);
        float _4404 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _1385 = _1384 * 2.0;
        float _1389 = (1.0 - _1384) / (_1384 + 1.0);
        float _4415 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _1399 = ((((1.0 - _1390) * (_1385 + 2.0)) * exp2(log2(isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * (_1385 + 1.0))) + _1390) * _1271;
        _1407 = _1238;
        _1409 = _1237;
        _1410 = _1236;
        _1411 = _1248;
        _1412 = _1247;
        _1413 = _1246;
        _1414 = _1258;
        _1415 = _1257;
        _1416 = _1256;
        _1417 = _1271;
        _1418 = _1270;
        _1419 = _1269;
        _1420 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)));
        _1421 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)));
        _1422 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)));
    }
    else
    {
        _1407 = _1408;
        _1409 = _1408;
        _1410 = _1408;
        _1411 = _1408;
        _1412 = _1408;
        _1413 = _1408;
        _1414 = _1408;
        _1415 = _1408;
        _1416 = _1408;
        _1417 = _1408;
        _1418 = _1408;
        _1419 = _1408;
        _1420 = 0.0;
        _1421 = 0.0;
        _1422 = 0.0;
    }
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1450 = fma(_1078, cbModelParam._m0[30u].z, fma(_1074, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1070));
        float _1454 = fma(_1078, cbModelParam._m0[31u].z, fma(_1074, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1070));
        float _1458 = fma(_1078, cbModelParam._m0[32u].z, fma(_1074, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1070));
        float _1481 = _1070 + _829;
        float _1482 = _1074 + _830;
        float _1483 = _1078 + _831;
        float _1493 = fma(_1483, cbModelParam._m0[30u].z, fma(_1482, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1481)) - _1450;
        float _1494 = fma(_1483, cbModelParam._m0[31u].z, fma(_1482, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1481)) - _1454;
        float _1495 = fma(_1483, cbModelParam._m0[32u].z, fma(_1482, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1481)) - _1458;
        float _1499 = inversesqrt(dot(vec3(_1493, _1494, _1495), vec3(_1493, _1494, _1495)));
        float _1512 = ((_1499 * _1493) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1450 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1513 = ((_1499 * _1494) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1454 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1514 = ((_1499 * _1495) / cbModelParam._m0[35u].z) + ((((((_1458 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1516 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1512, _1513, _1514), 0.0);
        vec4 _1523 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1512, _1513, _1514), 0.0);
        vec4 _1530 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1512, _1513, _1514), 0.0);
        vec4 _1537 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1512, _1513, _1514), 0.0);
        float _1549 = exp2((_1516.w + (-0.5)) * 20.0) * 2.0;
        float _1550 = _1549 * (_1516.x + (-0.5));
        float _1551 = _1549 * (_1516.y + (-0.5));
        float _1552 = _1549 * (_1516.z + (-0.5));
        float _1559 = exp2((_1523.w + (-0.5)) * 20.0) * 2.0;
        float _1560 = _1559 * (_1523.x + (-0.5));
        float _1561 = _1559 * (_1523.y + (-0.5));
        float _1562 = _1559 * (_1523.z + (-0.5));
        float _1569 = exp2((_1530.w + (-0.5)) * 20.0) * 2.0;
        float _1570 = _1569 * (_1530.x + (-0.5));
        float _1571 = _1569 * (_1530.y + (-0.5));
        float _1572 = _1569 * (_1530.z + (-0.5));
        float _1579 = exp2((_1537.w + (-0.5)) * 20.0) * 2.0;
        float _1580 = _1579 * (_1537.x + (-0.5));
        float _1581 = _1579 * (_1537.y + (-0.5));
        float _1582 = _1579 * (_1537.z + (-0.5));
        float _1583 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1584 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1585 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1586 = _1550 * 0.5;
        float _1587 = _1560 * 0.5;
        float _1588 = _1570 * 0.5;
        float _1589 = dot(vec3(_1586, _1587, _1588), vec3(_1586, _1587, _1588));
        float _1594 = (_1589 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1589);
        float _1602 = (dot(vec3(_829, _830, _831), vec3(_1594 * _1586, _1594 * _1587, _1594 * _1588)) + 1.0) * 0.5;
        float _4456 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1611 = sqrt(((_1587 * _1587) + (_1586 * _1586)) + (_1588 * _1588)) / (_1583 + 9.9999997473787516355514526367188e-06);
        float _4467 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1612 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _1613 = _1612 * 2.0;
        float _1617 = (1.0 - _1612) / (_1612 + 1.0);
        float _4478 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _1627 = ((((1.0 - _1618) * (_1613 + 2.0)) * exp2(log2(isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_1613 + 1.0))) + _1618) * _1583;
        float _1628 = _1551 * 0.5;
        float _1629 = _1561 * 0.5;
        float _1630 = _1571 * 0.5;
        float _1631 = dot(vec3(_1628, _1629, _1630), vec3(_1628, _1629, _1630));
        float _1636 = (_1631 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1631);
        float _1644 = (dot(vec3(_829, _830, _831), vec3(_1636 * _1628, _1636 * _1629, _1636 * _1630)) + 1.0) * 0.5;
        float _4489 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1653 = sqrt(((_1629 * _1629) + (_1628 * _1628)) + (_1630 * _1630)) / (_1584 + 9.9999997473787516355514526367188e-06);
        float _4500 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1654 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _1655 = _1654 * 2.0;
        float _1659 = (1.0 - _1654) / (_1654 + 1.0);
        float _4511 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1660 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _1669 = ((((1.0 - _1660) * (_1655 + 2.0)) * exp2(log2(isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (_1655 + 1.0))) + _1660) * _1584;
        float _1670 = _1552 * 0.5;
        float _1671 = _1562 * 0.5;
        float _1672 = _1572 * 0.5;
        float _1673 = dot(vec3(_1670, _1671, _1672), vec3(_1670, _1671, _1672));
        float _1678 = (_1673 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1673);
        float _1686 = (dot(vec3(_829, _830, _831), vec3(_1678 * _1670, _1678 * _1671, _1678 * _1672)) + 1.0) * 0.5;
        float _4522 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1695 = sqrt(((_1671 * _1671) + (_1670 * _1670)) + (_1672 * _1672)) / (_1585 + 9.9999997473787516355514526367188e-06);
        float _4533 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1696 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _1697 = _1696 * 2.0;
        float _1701 = (1.0 - _1696) / (_1696 + 1.0);
        float _4544 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1702 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
        float _1711 = ((((1.0 - _1702) * (_1697 + 2.0)) * exp2(log2(isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0))) * (_1697 + 1.0))) + _1702) * _1585;
        _1719 = _1552;
        _1720 = _1551;
        _1721 = _1550;
        _1722 = _1562;
        _1723 = _1561;
        _1724 = _1560;
        _1725 = _1572;
        _1726 = _1571;
        _1727 = _1570;
        _1728 = _1585;
        _1729 = _1584;
        _1730 = _1583;
        _1731 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)));
        _1732 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)));
        _1733 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0)));
    }
    else
    {
        _1719 = _1408;
        _1720 = _1408;
        _1721 = _1408;
        _1722 = _1408;
        _1723 = _1408;
        _1724 = _1408;
        _1725 = _1408;
        _1726 = _1408;
        _1727 = _1408;
        _1728 = _1408;
        _1729 = _1408;
        _1730 = _1408;
        _1731 = 0.0;
        _1732 = 0.0;
        _1733 = 0.0;
    }
    float _1743 = (cbModelParam._m0[1u].x * (_1731 - _1420)) + _1420;
    float _1744 = (cbModelParam._m0[1u].x * (_1732 - _1421)) + _1421;
    float _1745 = (cbModelParam._m0[1u].x * (_1733 - _1422)) + _1422;
    float _1766 = fma(_1745, cbSceneParam._m0[89u].z, fma(_1744, cbSceneParam._m0[89u].y, _1743 * cbSceneParam._m0[89u].x));
    float _1769 = fma(_1745, cbSceneParam._m0[90u].z, fma(_1744, cbSceneParam._m0[90u].y, _1743 * cbSceneParam._m0[90u].x));
    float _1772 = fma(_1745, cbSceneParam._m0[91u].z, fma(_1744, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1743));
    float _1787 = _1014 * 0.5;
    float _1788 = _1015 * 0.5;
    float _1789 = _1016 * 0.5;
    float _1790 = dot(vec4(_1787, _1788, _1789, 1.0), vec4(_1721, _1724, _1727, _1730));
    float _1793 = dot(vec4(_1787, _1788, _1789, 1.0), vec4(_1720, _1723, _1726, _1729));
    float _1796 = dot(vec4(_1787, _1788, _1789, 1.0), vec4(_1719, _1722, _1725, _1728));
    float _1830;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1803 = dot(vec4(_1787, _1788, _1789, 1.0), vec4(_1407, _1411, _1414, _1417));
        float _1807 = dot(vec4(_1787, _1788, _1789, 1.0), vec4(_1409, _1412, _1415, _1418));
        float _1811 = dot(vec4(_1787, _1788, _1789, 1.0), vec4(_1410, _1413, _1416, _1419));
        float _1818 = dot(vec4(cbModelParam._m0[39u]), vec4(_1787, _1788, _1789, 1.0));
        _1830 = dot(vec3(isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0)), isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0)), isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1818) ? 0.0 : (isnan(0.0) ? _1818 : max(0.0, _1818))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1830 = 1.0;
    }
    float _1841;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1832 = dot(vec4(cbModelParam._m0[40u]), vec4(_1787, _1788, _1789, 1.0));
        _1841 = dot(vec3(isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0)), isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0)), isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1832) ? 0.0 : (isnan(0.0) ? _1832 : max(0.0, _1832))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1841 = 1.0;
    }
    float _1845 = (_1841 * cbModelParam._m0[1u].x) + (_1830 * (1.0 - cbModelParam._m0[1u].x));
    float _1855 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _832);
    float _1856 = isnan(_1855) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1855 : min(cbModelParam._m0[25u].z, _1855));
    float _1937;
    float _1939;
    float _1941;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1904 = fma(_1078, cbModelParam._m0[13u].z, fma(_1074, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1070)) + cbModelParam._m0[13u].w;
        float _1908 = fma(_1078, cbModelParam._m0[14u].z, fma(_1074, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1070)) + cbModelParam._m0[14u].w;
        float _1912 = fma(_1078, cbModelParam._m0[15u].z, fma(_1074, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1070)) + cbModelParam._m0[15u].w;
        float _1915 = fma(_1016, cbModelParam._m0[13u].z, fma(_1015, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1014));
        float _1918 = fma(_1016, cbModelParam._m0[14u].z, fma(_1015, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1014));
        float _1921 = fma(_1016, cbModelParam._m0[15u].z, fma(_1015, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1014));
        float _1949;
        if (_1915 > 0.0)
        {
            _1949 = abs((1.0 - _1904) / _1915);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1915 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1904 + 1.0) / _1915);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1949 = frontier_phi_17_15_ladder;
        }
        float _2121;
        if (_1918 > 0.0)
        {
            _2121 = abs((1.0 - _1908) / _1918);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1918 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1908 + 1.0) / _1918);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2121 = frontier_phi_26_22_ladder;
        }
        float _2416;
        if (_1921 > 0.0)
        {
            _2416 = abs((1.0 - _1912) / _1921);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1921 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1912 + 1.0) / _1921);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2416 = frontier_phi_38_33_ladder;
        }
        float _2418 = isnan(_2121) ? _1949 : (isnan(_1949) ? _2121 : min(_1949, _2121));
        float _2419 = isnan(_2416) ? _2418 : (isnan(_2418) ? _2416 : min(_2418, _2416));
        float _2423 = (_2419 * _1915) + _1904;
        float _2424 = (_2419 * _1918) + _1908;
        float _2425 = (_2419 * _1921) + _1912;
        float _2426 = _2419 * 9.9999997473787516355514526367188e-05;
        float _2428 = (-1.0) - _2426;
        float _2430 = _2426 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2425 > _2430) || ((_2425 < _2428) || ((_2424 > _2430) || ((_2424 < _2428) || ((_2423 < _2428) || (_2423 > _2430))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2570 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2425, cbModelParam._m0[9u].z, fma(_2424, cbModelParam._m0[9u].y, _2423 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2425, cbModelParam._m0[10u].z, fma(_2424, cbModelParam._m0[10u].y, _2423 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2425, cbModelParam._m0[11u].z, fma(_2424, cbModelParam._m0[11u].y, _2423 * cbModelParam._m0[11u].x))), _1856);
            frontier_phi_16_38_ladder = _2570.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2570.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2570.x * cbModelParam._m0[1u].y;
        }
        _1937 = frontier_phi_16_38_ladder_2;
        _1939 = frontier_phi_16_38_ladder_1;
        _1941 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1925 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1014, _1015, _1016), _1856);
        _1937 = _1925.x * cbModelParam._m0[1u].y;
        _1939 = _1925.y * cbModelParam._m0[1u].y;
        _1941 = _1925.z * cbModelParam._m0[1u].y;
    }
    float _1945 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _832);
    float _1946 = isnan(_1945) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1945 : min(cbModelParam._m0[25u].w, _1945));
    float _2036;
    float _2038;
    float _2040;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2000 = fma(_1078, cbModelParam._m0[21u].z, fma(_1074, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1070)) + cbModelParam._m0[21u].w;
        float _2004 = fma(_1078, cbModelParam._m0[22u].z, fma(_1074, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1070)) + cbModelParam._m0[22u].w;
        float _2008 = fma(_1078, cbModelParam._m0[23u].z, fma(_1074, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1070)) + cbModelParam._m0[23u].w;
        float _2011 = fma(_1016, cbModelParam._m0[21u].z, fma(_1015, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1014));
        float _2014 = fma(_1016, cbModelParam._m0[22u].z, fma(_1015, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1014));
        float _2017 = fma(_1016, cbModelParam._m0[23u].z, fma(_1015, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1014));
        float _2126;
        if (_2011 > 0.0)
        {
            _2126 = abs((1.0 - _2000) / _2011);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2011 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2000 + 1.0) / _2011);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2126 = frontier_phi_28_24_ladder;
        }
        float _2443;
        if (_2014 > 0.0)
        {
            _2443 = abs((1.0 - _2004) / _2014);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2014 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2004 + 1.0) / _2014);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2443 = frontier_phi_40_35_ladder;
        }
        float _2781;
        if (_2017 > 0.0)
        {
            _2781 = abs((1.0 - _2008) / _2017);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2017 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2008 + 1.0) / _2017);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2781 = frontier_phi_50_47_ladder;
        }
        float _2783 = isnan(_2443) ? _2126 : (isnan(_2126) ? _2443 : min(_2126, _2443));
        float _2784 = isnan(_2781) ? _2783 : (isnan(_2783) ? _2781 : min(_2783, _2781));
        float _2788 = (_2784 * _2011) + _2000;
        float _2789 = (_2784 * _2014) + _2004;
        float _2790 = (_2784 * _2017) + _2008;
        float _2791 = _2784 * 9.9999997473787516355514526367188e-05;
        float _2792 = (-1.0) - _2791;
        float _2794 = _2791 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2790 > _2794) || ((_2790 < _2792) || ((_2789 > _2794) || ((_2789 < _2792) || ((_2788 < _2792) || (_2788 > _2794))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2912 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2790, cbModelParam._m0[17u].z, fma(_2789, cbModelParam._m0[17u].y, _2788 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2790, cbModelParam._m0[18u].z, fma(_2789, cbModelParam._m0[18u].y, _2788 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2790, cbModelParam._m0[19u].z, fma(_2789, cbModelParam._m0[19u].y, _2788 * cbModelParam._m0[19u].x))), _1946);
            frontier_phi_25_50_ladder = _2912.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2912.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2912.x * cbModelParam._m0[1u].z;
        }
        _2036 = frontier_phi_25_50_ladder_2;
        _2038 = frontier_phi_25_50_ladder_1;
        _2040 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2020 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1014, _1015, _1016), _1946);
        _2036 = _2020.x * cbModelParam._m0[1u].z;
        _2038 = _2020.y * cbModelParam._m0[1u].z;
        _2040 = _2020.z * cbModelParam._m0[1u].z;
    }
    float _2053 = (((_1041 * _990) + _1042) * _1006) * ((cbModelParam._m0[1u].w * (_2036 - _1937)) + _1937);
    float _2055 = (((_1041 * _992) + _1042) * _1006) * ((cbModelParam._m0[1u].w * (_2038 - _1939)) + _1939);
    float _2057 = (((_1041 * _993) + _1042) * _1006) * ((cbModelParam._m0[1u].w * (_2040 - _1941)) + _1941);
    float _2060 = fma(_2057, cbSceneParam._m0[89u].z, fma(_2055, cbSceneParam._m0[89u].y, _2053 * cbSceneParam._m0[89u].x));
    float _2063 = fma(_2057, cbSceneParam._m0[90u].z, fma(_2055, cbSceneParam._m0[90u].y, _2053 * cbSceneParam._m0[90u].x));
    float _2066 = fma(_2057, cbSceneParam._m0[91u].z, fma(_2055, cbSceneParam._m0[91u].y, _2053 * cbSceneParam._m0[91u].x));
    float _2100 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2104 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2108 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2112 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2113 = _2100 / _2112;
    float _2114 = _2104 / _2112;
    float _2115 = _2108 / _2112;
    float _2262;
    float _2263;
    float _2264;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2142 = ((uint(_2115 > cbSceneParam._m0[59u].y) + uint(_2115 > cbSceneParam._m0[59u].x)) + uint(_2115 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2143 = _2142 + 43u;
        uint _2151 = _2142 + 44u;
        uint _2159 = _2142 + 45u;
        uint _2167 = _2142 + 46u;
        float _2178 = fma(_2112, cbSceneParam._m0[_2143].w, fma(_2108, cbSceneParam._m0[_2143].z, fma(_2104, cbSceneParam._m0[_2143].y, _2100 * cbSceneParam._m0[_2143].x)));
        float _2182 = fma(_2112, cbSceneParam._m0[_2151].w, fma(_2108, cbSceneParam._m0[_2151].z, fma(_2104, cbSceneParam._m0[_2151].y, _2100 * cbSceneParam._m0[_2151].x)));
        float _2190 = fma(_2112, cbSceneParam._m0[_2167].w, fma(_2108, cbSceneParam._m0[_2167].z, fma(_2104, cbSceneParam._m0[_2167].y, _2100 * cbSceneParam._m0[_2167].x)));
        float _2195 = cbSceneParam._m0[33u].z * _2190;
        float _2197 = cbSceneParam._m0[33u].w * _2190;
        float _2200 = fma(_2112, cbSceneParam._m0[_2159].w, fma(_2108, cbSceneParam._m0[_2159].z, fma(_2104, cbSceneParam._m0[_2159].y, _2100 * cbSceneParam._m0[_2159].x))) / _2190;
        float _2248 = (cbSceneParam._m0[33u].x - sqrt(((_2114 * _2114) + (_2113 * _2113)) + (_2115 * _2115))) * cbSceneParam._m0[33u].y;
        float _4670 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2255 = (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2195 + _2178) / _2190, (_2197 + _2182) / _2190), _2200), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2197 + _2178) / _2190, (_2182 - _2195) / _2190), _2200), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2178 - _2195) / _2190, (_2182 - _2197) / _2190), _2200), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2178 - _2197) / _2190, (_2195 + _2182) / _2190), _2200), 0.0)).x), vec4(0.25)));
        _2262 = 1.0 - (_2255 * cbSceneParam._m0[34u].x);
        _2263 = 1.0 - (_2255 * cbSceneParam._m0[34u].y);
        _2264 = 1.0 - (_2255 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2262 = 1.0;
        _2263 = 1.0;
        _2264 = 1.0;
    }
    float _2328;
    float _2330;
    float _2332;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2316 = fma(_2112, cbSceneParam._m0[63u].w, fma(_2108, cbSceneParam._m0[63u].z, fma(_2104, cbSceneParam._m0[63u].y, _2100 * cbSceneParam._m0[63u].x)));
        float _2317 = fma(_2112, cbSceneParam._m0[60u].w, fma(_2108, cbSceneParam._m0[60u].z, fma(_2104, cbSceneParam._m0[60u].y, _2100 * cbSceneParam._m0[60u].x))) / _2316;
        float _2318 = fma(_2112, cbSceneParam._m0[61u].w, fma(_2108, cbSceneParam._m0[61u].z, fma(_2104, cbSceneParam._m0[61u].y, _2100 * cbSceneParam._m0[61u].x))) / _2316;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2317 >= cbSceneParam._m0[64u].x) && (_2318 >= cbSceneParam._m0[64u].y)) && (_2317 <= cbSceneParam._m0[64u].z)) && (_2318 <= cbSceneParam._m0[64u].w))
        {
            float _2456 = fma(_2112, cbSceneParam._m0[62u].w, fma(_2108, cbSceneParam._m0[62u].z, fma(_2104, cbSceneParam._m0[62u].y, _2100 * cbSceneParam._m0[62u].x))) / _2316;
            float _2460 = isnan(cbSceneParam._m0[41u].w) ? _2456 : (isnan(_2456) ? cbSceneParam._m0[41u].w : max(_2456, cbSceneParam._m0[41u].w));
            float _2503 = (cbSceneParam._m0[33u].x - sqrt(((_2114 * _2114) + (_2113 * _2113)) + (_2115 * _2115))) * cbSceneParam._m0[33u].y;
            float _4686 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
            float _2510 = (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2317, cbSceneParam._m0[33u].w + _2318), _2460), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2317, _2318 - cbSceneParam._m0[33u].z), _2460), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2317 - cbSceneParam._m0[33u].z, _2318 - cbSceneParam._m0[33u].w), _2460), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2317 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2318), _2460), 0.0)).x), vec4(0.25)));
            float _2514 = 1.0 - (_2510 * cbSceneParam._m0[34u].x);
            float _2515 = 1.0 - (_2510 * cbSceneParam._m0[34u].y);
            float _2516 = 1.0 - (_2510 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2516) ? _2264 : (isnan(_2264) ? _2516 : min(_2264, _2516));
            frontier_phi_37_36_ladder_1 = isnan(_2515) ? _2263 : (isnan(_2263) ? _2515 : min(_2263, _2515));
            frontier_phi_37_36_ladder_2 = isnan(_2514) ? _2262 : (isnan(_2262) ? _2514 : min(_2262, _2514));
        }
        else
        {
            frontier_phi_37_36_ladder = _2264;
            frontier_phi_37_36_ladder_1 = _2263;
            frontier_phi_37_36_ladder_2 = _2262;
        }
        _2328 = frontier_phi_37_36_ladder_2;
        _2330 = frontier_phi_37_36_ladder_1;
        _2332 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2328 = _2262;
        _2330 = _2263;
        _2332 = _2264;
    }
    uvec4 _2337 = floatBitsToUint(cbInstanceData._m0[_263 + 5u]);
    uint _2339 = _2337.x * 14u;
    uint _2340 = _2339 + 13u;
    float _2347 = _1006 + (-1.0);
    float _2352 = (cbLight._m0[_2340].x * _2347) + 1.0;
    float _2353 = (cbLight._m0[_2340].y * _2347) + 1.0;
    float _2354 = (cbLight._m0[_2340].z * _2347) + 1.0;
    float _2355 = (cbLight._m0[_2340].w * _2347) + 1.0;
    uint _2356 = _2339 + 5u;
    float _2362 = isnan(1.0) ? _2353 : (isnan(_2353) ? 1.0 : min(_2353, 1.0));
    uint _2366 = _2339 + 4u;
    float _2375 = isnan(1.0) ? _2352 : (isnan(_2352) ? 1.0 : min(_2352, 1.0));
    uint _2379 = _2339 | 1u;
    float _2390 = dot(vec3(cbLight._m0[_2339].xyz), vec3(_829, _830, _831));
    float _2393 = dot(vec3(cbLight._m0[_2379].xyz), vec3(_829, _830, _831));
    float _4722 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _4733 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
    float _2398 = (isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0))) * 0.3183098733425140380859375;
    float _2400 = (isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0))) * 0.3183098733425140380859375;
    float _2407 = ((cbLight._m0[_2356].x * _2362) * _2400) + (((cbLight._m0[_2366].x * _2328) * _2375) * _2398);
    float _2408 = ((_2362 * cbLight._m0[_2356].y) * _2400) + (((cbLight._m0[_2366].y * _2330) * _2375) * _2398);
    float _2409 = ((_2362 * cbLight._m0[_2356].z) * _2400) + (((cbLight._m0[_2366].z * _2332) * _2375) * _2398);
    uvec4 _2413 = floatBitsToUint(cbLight._m0[_2339 + 12u]);
    bool _2415 = _2413.x == 0u;
    float _2517;
    float _2519;
    float _2521;
    if (_2415)
    {
        _2517 = _2407;
        _2519 = _2408;
        _2521 = _2409;
    }
    else
    {
        uint _2525 = _2339 + 6u;
        float _2541 = (dot(vec3(cbLight._m0[_2339 + 2u].xyz), vec3(_829, _830, _831)) * 0.5) + 0.5;
        float _2542 = _2541 * _2541;
        float _4744 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        float _2543 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
        float _2544 = isnan(1.0) ? _2354 : (isnan(_2354) ? 1.0 : min(_2354, 1.0));
        _2517 = (((cbLight._m0[_2525].x * 0.3183098733425140380859375) * _2543) * _2544) + _2407;
        _2519 = (((cbLight._m0[_2525].y * 0.3183098733425140380859375) * _2543) * _2544) + _2408;
        _2521 = (((cbLight._m0[_2525].z * 0.3183098733425140380859375) * _2543) * _2544) + _2409;
    }
    bool _2524 = _2413.y == 0u;
    float _2579;
    float _2581;
    float _2583;
    if (_2524)
    {
        _2579 = _2517;
        _2581 = _2519;
        _2583 = _2521;
    }
    else
    {
        uint _2752 = _2339 + 7u;
        float _2768 = (dot(vec3(cbLight._m0[_2339 + 3u].xyz), vec3(_829, _830, _831)) * 0.5) + 0.5;
        float _2769 = _2768 * _2768;
        float _4760 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        float _2770 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
        float _2771 = isnan(1.0) ? _2355 : (isnan(_2355) ? 1.0 : min(_2355, 1.0));
        _2579 = (((cbLight._m0[_2752].x * 0.3183098733425140380859375) * _2770) * _2771) + _2517;
        _2581 = (((cbLight._m0[_2752].y * 0.3183098733425140380859375) * _2770) * _2771) + _2519;
        _2583 = (((cbLight._m0[_2752].z * 0.3183098733425140380859375) * _2770) * _2771) + _2521;
    }
    uint _2586 = _2339 + 8u;
    float _2599 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2339].w)) * _832) * 0.949999988079071044921875);
    float _2600 = _2599 * _2599;
    float _2601 = cbLight._m0[_2339].x + _908;
    float _2602 = cbLight._m0[_2339].y + _909;
    float _2603 = cbLight._m0[_2339].z + _910;
    float _2607 = inversesqrt(dot(vec3(_2601, _2602, _2603), vec3(_2601, _2602, _2603)));
    float _2608 = _2607 * _2601;
    float _2609 = _2607 * _2602;
    float _2610 = _2607 * _2603;
    float _2611 = dot(vec3(_829, _830, _831), vec3(cbLight._m0[_2339].xyz));
    float _4776 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
    float _2614 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
    float _4787 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _2615 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
    float _2616 = dot(vec3(_829, _830, _831), vec3(_2608, _2609, _2610));
    float _4798 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
    float _2619 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
    float _2620 = dot(vec3(cbLight._m0[_2339].xyz), vec3(_2608, _2609, _2610));
    float _4809 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
    float _2624 = _2600 * _2600;
    float _2628 = ((_2619 * _2619) * (_2624 + (-1.0))) + 1.0;
    float _2636 = exp2(log2(1.0 - (isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0)))) * 5.0);
    float _2637 = 0.959999978542327880859375 - _987;
    float _2639 = 0.959999978542327880859375 - _988;
    float _2640 = 0.959999978542327880859375 - _989;
    float _2647 = 1.0 - _2600;
    float _2658 = (0.5 / (((_2615 * ((_2614 * _2647) + _2600)) + 9.9999999392252902907785028219223e-09) + (((_2615 * _2647) + _2600) * _2614))) * _2614;
    float _4820 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
    float _2660 = (isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0))) * (_2624 / ((_2628 * _2628) * 3.141590118408203125));
    uint _2674 = _2339 + 9u;
    float _2685 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2379].w)) * _832) * 0.949999988079071044921875);
    float _2686 = _2685 * _2685;
    float _2687 = cbLight._m0[_2379].x + _908;
    float _2688 = cbLight._m0[_2379].y + _909;
    float _2689 = cbLight._m0[_2379].z + _910;
    float _2693 = inversesqrt(dot(vec3(_2687, _2688, _2689), vec3(_2687, _2688, _2689)));
    float _2694 = _2693 * _2687;
    float _2695 = _2693 * _2688;
    float _2696 = _2693 * _2689;
    float _2697 = dot(vec3(_829, _830, _831), vec3(cbLight._m0[_2379].xyz));
    float _4831 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
    float _2700 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
    float _2701 = dot(vec3(_829, _830, _831), vec3(_2694, _2695, _2696));
    float _4842 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
    float _2704 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
    float _2705 = dot(vec3(cbLight._m0[_2379].xyz), vec3(_2694, _2695, _2696));
    float _4853 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
    float _2709 = _2686 * _2686;
    float _2713 = ((_2704 * _2704) * (_2709 + (-1.0))) + 1.0;
    float _2720 = exp2(log2(1.0 - (isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0)))) * 5.0);
    float _2727 = 1.0 - _2686;
    float _2737 = (0.5 / (((_2615 * ((_2700 * _2727) + _2686)) + 9.9999999392252902907785028219223e-09) + (((_2615 * _2727) + _2686) * _2700))) * _2700;
    float _4864 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
    float _2739 = (isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0))) * (_2709 / ((_2713 * _2713) * 3.141590118408203125));
    float _2749 = (((((_2720 * _2637) + _990) * cbLight._m0[_2674].x) * _2739) * _2362) + ((((cbLight._m0[_2586].x * _2328) * ((_2636 * _2637) + _990)) * _2660) * _2375);
    float _2750 = (((((_2720 * _2639) + _992) * cbLight._m0[_2674].y) * _2739) * _2362) + ((((cbLight._m0[_2586].y * _2330) * ((_2636 * _2639) + _992)) * _2660) * _2375);
    float _2751 = (((((_2720 * _2640) + _993) * cbLight._m0[_2674].z) * _2739) * _2362) + ((((cbLight._m0[_2586].z * _2332) * ((_2636 * _2640) + _993)) * _2660) * _2375);
    float _2807;
    float _2809;
    float _2811;
    if (_2415)
    {
        _2807 = _2749;
        _2809 = _2750;
        _2811 = _2751;
    }
    else
    {
        uint _2813 = _2339 + 2u;
        uint _2817 = _2339 + 10u;
        float _2831 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2813].w)) * _832) * 0.949999988079071044921875);
        float _2832 = _2831 * _2831;
        float _2833 = cbLight._m0[_2813].x + _908;
        float _2834 = cbLight._m0[_2813].y + _909;
        float _2835 = cbLight._m0[_2813].z + _910;
        float _2839 = inversesqrt(dot(vec3(_2833, _2834, _2835), vec3(_2833, _2834, _2835)));
        float _2840 = _2839 * _2833;
        float _2841 = _2839 * _2834;
        float _2842 = _2839 * _2835;
        float _2843 = dot(vec3(_829, _830, _831), vec3(cbLight._m0[_2813].xyz));
        float _4875 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
        float _2846 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
        float _2847 = dot(vec3(_829, _830, _831), vec3(_2840, _2841, _2842));
        float _4886 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
        float _2850 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
        float _2851 = dot(vec3(cbLight._m0[_2813].xyz), vec3(_2840, _2841, _2842));
        float _4897 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
        float _2855 = _2832 * _2832;
        float _2859 = ((_2850 * _2850) * (_2855 + (-1.0))) + 1.0;
        float _2866 = exp2(log2(1.0 - (isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0)))) * 5.0);
        float _2873 = 1.0 - _2832;
        float _2883 = (0.5 / (((_2615 * ((_2846 * _2873) + _2832)) + 9.9999999392252902907785028219223e-09) + (((_2615 * _2873) + _2832) * _2846))) * _2846;
        float _4908 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
        float _2885 = (isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0))) * (_2855 / ((_2859 * _2859) * 3.141590118408203125));
        float _2886 = isnan(1.0) ? _2354 : (isnan(_2354) ? 1.0 : min(_2354, 1.0));
        _2807 = (((((_2866 * _2637) + _990) * cbLight._m0[_2817].x) * _2885) * _2886) + _2749;
        _2809 = (((((_2866 * _2639) + _992) * cbLight._m0[_2817].y) * _2885) * _2886) + _2750;
        _2811 = (((((_2866 * _2640) + _993) * cbLight._m0[_2817].z) * _2885) * _2886) + _2751;
    }
    float _2917;
    float _2919;
    float _2921;
    if (_2524)
    {
        _2917 = _2807;
        _2919 = _2809;
        _2921 = _2811;
    }
    else
    {
        uint _2928 = _2339 + 3u;
        uint _2932 = _2339 + 11u;
        float _2946 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2928].w)) * _832) * 0.949999988079071044921875);
        float _2947 = _2946 * _2946;
        float _2948 = cbLight._m0[_2928].x + _908;
        float _2949 = cbLight._m0[_2928].y + _909;
        float _2950 = cbLight._m0[_2928].z + _910;
        float _2954 = inversesqrt(dot(vec3(_2948, _2949, _2950), vec3(_2948, _2949, _2950)));
        float _2955 = _2954 * _2948;
        float _2956 = _2954 * _2949;
        float _2957 = _2954 * _2950;
        float _2958 = dot(vec3(_829, _830, _831), vec3(cbLight._m0[_2928].xyz));
        float _4924 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
        float _2961 = isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0));
        float _2962 = dot(vec3(_829, _830, _831), vec3(_2955, _2956, _2957));
        float _4935 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
        float _2965 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
        float _2966 = dot(vec3(cbLight._m0[_2928].xyz), vec3(_2955, _2956, _2957));
        float _4946 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
        float _2970 = _2947 * _2947;
        float _2974 = ((_2965 * _2965) * (_2970 + (-1.0))) + 1.0;
        float _2981 = exp2(log2(1.0 - (isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0)))) * 5.0);
        float _2988 = 1.0 - _2947;
        float _2998 = (0.5 / (((_2615 * ((_2961 * _2988) + _2947)) + 9.9999999392252902907785028219223e-09) + (((_2615 * _2988) + _2947) * _2961))) * _2961;
        float _4957 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
        float _3000 = (isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0))) * (_2970 / ((_2974 * _2974) * 3.141590118408203125));
        float _3001 = isnan(1.0) ? _2355 : (isnan(_2355) ? 1.0 : min(_2355, 1.0));
        _2917 = (((((_2981 * _2637) + _990) * cbLight._m0[_2932].x) * _3000) * _3001) + _2807;
        _2919 = (((((_2981 * _2639) + _992) * cbLight._m0[_2932].y) * _3000) * _3001) + _2809;
        _2921 = (((((_2981 * _2640) + _993) * cbLight._m0[_2932].z) * _3000) * _3001) + _2811;
    }
    float _3067;
    float _3069;
    float _3071;
    float _3073;
    float _3075;
    float _3077;
    if (_2337.y == 0u)
    {
        uvec4 _3022 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3023 = _3022.x;
        uint _3034 = uint((float(_3022.y) * floor(float(uint(cbSceneParam._m0[85u].y * _929) / _3023))) + floor(float(uint(cbSceneParam._m0[85u].x * _928) / _3023)));
        float _3044 = (log2(_2115 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3045 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
        uint _3048 = uint(isnan(14.0) ? _3045 : (isnan(_3045) ? 14.0 : min(_3045, 14.0)));
        uvec4 _3053 = texelFetch(g_lightClusterGridBuffer, int(((_3048 << 2u) + (_3034 << 6u)) >> 2u));
        uint _3054 = _3053.x;
        uint _3055 = _3022.z;
        float _3134;
        float _3136;
        float _3138;
        float _3140;
        float _3142;
        float _3144;
        if (((((1u << ((_3055 >> 4u) & 15u)) + 4294967295u) & _3054) == 0u) || ((_3055 & 240u) == 0u))
        {
            _3134 = 0.0;
            _3136 = 0.0;
            _3138 = 0.0;
            _3140 = 0.0;
            _3142 = 0.0;
            _3144 = 0.0;
        }
        else
        {
            float _3135;
            float _3137;
            float _3139;
            float _3141;
            float _3143;
            float _3145;
            float _3286 = 0.0;
            float _3287 = 0.0;
            float _3288 = 0.0;
            float _3289 = 0.0;
            float _3290 = 0.0;
            float _3291 = 0.0;
            uint _3292 = 0u;
            uint _3301;
            bool _3302;
            for (;;)
            {
                _3301 = texelFetch(g_lightClassification, int((((_3048 << 5u) + (_3034 << 9u)) + (_3292 << 2u)) >> 2u)).x;
                _3302 = _3301 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3302)
                {
                    frontier_phi_71_pred = _3291;
                    frontier_phi_71_pred_1 = _3290;
                    frontier_phi_71_pred_2 = _3289;
                    frontier_phi_71_pred_3 = _3288;
                    frontier_phi_71_pred_4 = _3287;
                    frontier_phi_71_pred_5 = _3286;
                }
                else
                {
                    float _3431;
                    float _3432;
                    float _3433;
                    float _3434;
                    float _3435;
                    float _3436;
                    uint _3437;
                    _3431 = _3286;
                    _3432 = _3287;
                    _3433 = _3288;
                    _3434 = _3289;
                    _3435 = _3290;
                    _3436 = _3291;
                    _3437 = _3301;
                    float _3358;
                    float _3359;
                    float _3360;
                    float _3361;
                    float _3362;
                    float _3363;
                    for (;;)
                    {
                        uint _3441 = uint(findLSB(_3437)) + (_3292 << 5u);
                        uint _3438 = (_3437 + 4294967295u) & _3437;
                        uint _3443 = _3441 * 48u;
                        vec4 _3457 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3443)).x, texelFetch(g_PointLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3443 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3443 + 3u)).x));
                        uint _3463 = (_3441 * 48u) + 4u;
                        vec4 _3476 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3463)).x, texelFetch(g_PointLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3463 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3463 + 3u)).x));
                        uint _3482 = (_3441 * 48u) + 8u;
                        vec3 _3493 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3482)).x, texelFetch(g_PointLightRenderingBuffer, int(_3482 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3482 + 2u)).x));
                        float _3497 = _3457.x - _2113;
                        float _3498 = _3457.y - _2114;
                        float _3499 = _3457.z - _2115;
                        float _3500 = dot(vec3(_3497, _3498, _3499), vec3(_3497, _3498, _3499));
                        float _3503 = inversesqrt(_3500);
                        float _3504 = _3503 * _3497;
                        float _3505 = _3503 * _3498;
                        float _3506 = _3503 * _3499;
                        float _3507 = dot(vec3(_947, _950, _953), vec3(_3504, _3505, _3506));
                        float _3512 = 1.0 - (_3500 * _3457.w);
                        float _4983 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                        float _3513 = isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0));
                        float _3514 = sqrt(_3500) * _3476.w;
                        float _3517 = 1.39999997615814208984375 / (_3514 + 1.39999997615814208984375);
                        float _3518 = _3517 * _3517;
                        float _3521 = ((1.0 - _3518) * _3507) + _3518;
                        float _3524 = _3514 * _3514;
                        float _3528 = ((isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0))) * _3513) / ((_3524 * 0.699999988079071044921875) + 1.0);
                        float _3532 = (-0.0) - _2113;
                        float _3533 = (-0.0) - _2114;
                        float _3534 = (-0.0) - _2115;
                        float _3538 = inversesqrt(dot(vec3(_3532, _3533, _3534), vec3(_3532, _3533, _3534)));
                        float _3539 = _3538 * _3532;
                        float _3540 = _3538 * _3533;
                        float _3541 = _3538 * _3534;
                        float _3548 = exp2(log2(1.0 / ((_3524 * 3.5) + 5.0)) * 0.25);
                        float _3549 = 1.0 - _1022;
                        float _3556 = sqrt(1.0 - ((1.0 - (_3549 * _3549)) * (1.0 - (_3548 * _3548))));
                        float _3557 = _3556 * _3556;
                        float _3558 = _3557 * _3557;
                        float _3559 = _3539 + _3504;
                        float _3560 = _3540 + _3505;
                        float _3561 = _3541 + _3506;
                        float _3565 = inversesqrt(dot(vec3(_3559, _3560, _3561), vec3(_3559, _3560, _3561)));
                        float _3569 = dot(vec3(_947, _950, _953), vec3(_3539, _3540, _3541));
                        float _4999 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                        float _3572 = isnan(1.0) ? _4999 : (isnan(_4999) ? 1.0 : min(_4999, 1.0));
                        float _3573 = dot(vec3(_947, _950, _953), vec3(_3565 * _3559, _3565 * _3560, _3565 * _3561));
                        float _5010 = isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0));
                        float _3576 = isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0));
                        float _3580 = ((_3576 * _3576) * (_3558 + (-1.0))) + 1.0;
                        float _3581 = _3517 * _3557;
                        float _3582 = _3581 * _3581;
                        float _3585 = ((1.0 - _3582) * _3507) + _3582;
                        float _5021 = isnan(0.0) ? _3585 : (isnan(_3585) ? 0.0 : max(_3585, 0.0));
                        float _3586 = isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0));
                        float _3587 = 1.0 - _3557;
                        float _3597 = (0.5 / (((_3586 * ((_3572 * _3587) + _3557)) + 9.9999999392252902907785028219223e-09) + (((_3586 * _3587) + _3557) * _3572))) * _3586;
                        float _5032 = isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0));
                        float _3608 = (((_3558 * 3.1415927410125732421875) * (isnan(1.0) ? _5032 : (isnan(_5032) ? 1.0 : min(_5032, 1.0)))) / ((_3580 * _3580) * ((_3524 * 2.1991131305694580078125) + 3.141590118408203125))) * _3513;
                        _3361 = (_3528 * _3476.x) + _3434;
                        _3362 = (_3528 * _3476.y) + _3435;
                        _3363 = (_3528 * _3476.z) + _3436;
                        _3358 = (_3608 * _3493.x) + _3431;
                        _3359 = (_3608 * _3493.y) + _3432;
                        _3360 = (_3608 * _3493.z) + _3433;
                        if (_3438 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3431 = _3358;
                            _3432 = _3359;
                            _3433 = _3360;
                            _3434 = _3361;
                            _3435 = _3362;
                            _3436 = _3363;
                            _3437 = _3438;
                        }
                    }
                    frontier_phi_71_pred = _3363;
                    frontier_phi_71_pred_1 = _3362;
                    frontier_phi_71_pred_2 = _3361;
                    frontier_phi_71_pred_3 = _3360;
                    frontier_phi_71_pred_4 = _3359;
                    frontier_phi_71_pred_5 = _3358;
                }
                _3145 = frontier_phi_71_pred;
                _3143 = frontier_phi_71_pred_1;
                _3141 = frontier_phi_71_pred_2;
                _3139 = frontier_phi_71_pred_3;
                _3137 = frontier_phi_71_pred_4;
                _3135 = frontier_phi_71_pred_5;
                uint _3293 = _3292 + 1u;
                if (_3293 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3286 = _3135;
                    _3287 = _3137;
                    _3288 = _3139;
                    _3289 = _3141;
                    _3290 = _3143;
                    _3291 = _3145;
                    _3292 = _3293;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3134 = _3135;
            _3136 = _3137;
            _3138 = _3139;
            _3140 = _3141;
            _3142 = _3143;
            _3144 = _3145;
        }
        uvec4 _3148 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3149 = _3148.z;
        uint _3151 = (_3149 >> 8u) & 15u;
        float _3254;
        float _3256;
        float _3258;
        float _3260;
        float _3262;
        float _3264;
        if (((4294967295u << _3151) & _3054) == 0u)
        {
            _3254 = _3134;
            _3256 = _3136;
            _3258 = _3138;
            _3260 = _3140;
            _3262 = _3142;
            _3264 = _3144;
        }
        else
        {
            float _3279 = inversesqrt(dot(vec3(_2113, _2114, _2115), vec3(_2113, _2114, _2115)));
            float _3280 = _3279 * _2113;
            float _3281 = _3279 * _2114;
            float _3282 = _3279 * _2115;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3151 < ((_3149 >> 12u) & 15u))
            {
                float _3255;
                float _3257;
                float _3259;
                float _3261;
                float _3263;
                float _3265;
                float _3414 = _3134;
                float _3415 = _3136;
                float _3416 = _3138;
                float _3417 = _3140;
                float _3418 = _3142;
                float _3419 = _3144;
                uint _3420 = _3151;
                uint _3429;
                bool _3430;
                for (;;)
                {
                    _3429 = texelFetch(g_lightClassification, int((((_3048 << 5u) + (_3034 << 9u)) + (_3420 << 2u)) >> 2u)).x;
                    _3430 = _3429 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3430)
                    {
                        frontier_phi_82_pred = _3419;
                        frontier_phi_82_pred_1 = _3418;
                        frontier_phi_82_pred_2 = _3417;
                        frontier_phi_82_pred_3 = _3416;
                        frontier_phi_82_pred_4 = _3415;
                        frontier_phi_82_pred_5 = _3414;
                    }
                    else
                    {
                        float _3622;
                        float _3623;
                        float _3624;
                        float _3625;
                        float _3626;
                        float _3627;
                        float _3915;
                        float _3916;
                        float _3917;
                        float _3918;
                        float _3919;
                        float _3920;
                        float _3635 = _3414;
                        float _3636 = _3415;
                        float _3637 = _3416;
                        float _3638 = _3417;
                        float _3639 = _3418;
                        float _3640 = _3419;
                        uint _3641 = _3429;
                        uint _3642;
                        vec4 _3667;
                        float _3668;
                        vec4 _3683;
                        vec3 _3695;
                        vec4 _3710;
                        vec4 _3725;
                        float _3771;
                        bool _3772;
                        for (;;)
                        {
                            uint _3652 = ((_3420 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3641));
                            _3642 = (_3641 + 4294967295u) & _3641;
                            uint _3654 = _3652 * 40u;
                            _3667 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3654)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 3u)).x));
                            _3668 = _3667.w;
                            uint _3670 = (_3652 * 40u) + 4u;
                            _3683 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3670)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 3u)).x));
                            uint _3685 = (_3652 * 40u) + 8u;
                            _3695 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3685)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 2u)).x));
                            uint _3697 = (_3652 * 40u) + 16u;
                            _3710 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3697)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 3u)).x));
                            uint _3712 = (_3652 * 40u) + 20u;
                            _3725 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3712)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3712 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3712 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3712 + 3u)).x));
                            uint _3727 = (_3652 * 40u) + 24u;
                            vec4 _3740 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3727)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3727 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3727 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3727 + 3u)).x));
                            uint _3746 = (_3652 * 40u) + 28u;
                            vec4 _3759 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3746)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3746 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3746 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3746 + 3u)).x));
                            _3771 = fma(_2115, _3759.z, fma(_2114, _3759.y, _3759.x * _2113)) + _3759.w;
                            _3772 = !((fma(_2115, _3740.z, fma(_2114, _3740.y, _3740.x * _2113)) + _3740.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3772)
                            {
                                float _3799 = _3667.x - _2113;
                                float _3800 = _3667.y - _2114;
                                float _3801 = _3667.z - _2115;
                                float _3802 = dot(vec3(_3799, _3800, _3801), vec3(_3799, _3800, _3801));
                                float _3805 = inversesqrt(_3802);
                                float _3806 = _3805 * _3799;
                                float _3807 = _3805 * _3800;
                                float _3808 = _3805 * _3801;
                                float _3812 = 1.0 - (_3802 / (_3668 * _3668));
                                float _5043 = isnan(0.0) ? _3812 : (isnan(_3812) ? 0.0 : max(_3812, 0.0));
                                float _3813 = isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0));
                                float _3817 = sqrt(_3802) * _3683.w;
                                float _3819 = 1.39999997615814208984375 / (_3817 + 1.39999997615814208984375);
                                float _3820 = _3819 * _3819;
                                float _3823 = ((1.0 - _3820) * dot(vec3(_3806, _3807, _3808), vec3(_947, _950, _953))) + _3820;
                                float _3826 = _3817 * _3817;
                                float _3830 = (fma(_2115, _3710.z, fma(_2114, _3710.y, _3710.x * _2113)) + _3710.w) / _3771;
                                float _3831 = (fma(_2115, _3725.z, fma(_2114, _3725.y, _3725.x * _2113)) + _3725.w) / _3771;
                                float _3835 = 1.0 - dot(vec2(_3830, _3831), vec2(_3830, _3831));
                                float _5059 = isnan(0.0) ? _3835 : (isnan(_3835) ? 0.0 : max(_3835, 0.0));
                                float _3836 = isnan(1.0) ? _5059 : (isnan(_5059) ? 1.0 : min(_5059, 1.0));
                                float _3837 = _3836 * (((isnan(0.0) ? _3823 : (isnan(_3823) ? 0.0 : max(_3823, 0.0))) * _3813) / ((_3826 * 0.699999988079071044921875) + 1.0));
                                float _3849 = exp2(log2(1.0 / ((_3826 * 3.5) + 5.0)) * 0.25);
                                float _3850 = 1.0 - _1022;
                                float _3857 = sqrt(1.0 - ((1.0 - (_3850 * _3850)) * (1.0 - (_3849 * _3849))));
                                float _3858 = _3857 * _3857;
                                float _3859 = _3858 * _3858;
                                float _3860 = _3806 - _3280;
                                float _3861 = _3807 - _3281;
                                float _3862 = _3808 - _3282;
                                float _3866 = inversesqrt(dot(vec3(_3860, _3861, _3862), vec3(_3860, _3861, _3862)));
                                float _3870 = dot(vec3(_947, _950, _953), vec3((-0.0) - _3280, (-0.0) - _3281, (-0.0) - _3282));
                                float _5070 = isnan(0.0) ? _3870 : (isnan(_3870) ? 0.0 : max(_3870, 0.0));
                                float _3873 = isnan(1.0) ? _5070 : (isnan(_5070) ? 1.0 : min(_5070, 1.0));
                                float _3874 = dot(vec3(_947, _950, _953), vec3(_3866 * _3860, _3866 * _3861, _3866 * _3862));
                                float _5081 = isnan(0.0) ? _3874 : (isnan(_3874) ? 0.0 : max(_3874, 0.0));
                                float _3877 = isnan(1.0) ? _5081 : (isnan(_5081) ? 1.0 : min(_5081, 1.0));
                                float _3881 = ((_3877 * _3877) * (_3859 + (-1.0))) + 1.0;
                                float _3882 = _3819 * _3858;
                                float _3883 = _3882 * _3882;
                                float _3889 = ((1.0 - _3883) * dot(vec3(_947, _950, _953), vec3(_3806, _3807, _3808))) + _3883;
                                float _5092 = isnan(0.0) ? _3889 : (isnan(_3889) ? 0.0 : max(_3889, 0.0));
                                float _3890 = isnan(1.0) ? _5092 : (isnan(_5092) ? 1.0 : min(_5092, 1.0));
                                float _3891 = 1.0 - _3858;
                                float _3901 = (0.5 / (((_3890 * ((_3873 * _3891) + _3858)) + 9.9999999392252902907785028219223e-09) + (((_3890 * _3891) + _3858) * _3873))) * _3890;
                                float _5103 = isnan(0.0) ? _3901 : (isnan(_3901) ? 0.0 : max(_3901, 0.0));
                                float _3911 = (_3836 * _3813) * (((_3859 * 3.1415927410125732421875) * (isnan(1.0) ? _5103 : (isnan(_5103) ? 1.0 : min(_5103, 1.0)))) / ((_3881 * _3881) * ((_3826 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3837 * _3683.z;
                                frontier_phi_88_pred_1 = _3837 * _3683.y;
                                frontier_phi_88_pred_2 = _3837 * _3683.x;
                                frontier_phi_88_pred_3 = _3911 * _3695.z;
                                frontier_phi_88_pred_4 = _3911 * _3695.y;
                                frontier_phi_88_pred_5 = _3911 * _3695.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3920 = frontier_phi_88_pred;
                            _3919 = frontier_phi_88_pred_1;
                            _3918 = frontier_phi_88_pred_2;
                            _3917 = frontier_phi_88_pred_3;
                            _3916 = frontier_phi_88_pred_4;
                            _3915 = frontier_phi_88_pred_5;
                            _3625 = _3918 + _3638;
                            _3626 = _3919 + _3639;
                            _3627 = _3920 + _3640;
                            _3622 = _3915 + _3635;
                            _3623 = _3916 + _3636;
                            _3624 = _3917 + _3637;
                            if (_3642 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3635 = _3622;
                                _3636 = _3623;
                                _3637 = _3624;
                                _3638 = _3625;
                                _3639 = _3626;
                                _3640 = _3627;
                                _3641 = _3642;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3627;
                        frontier_phi_82_pred_1 = _3626;
                        frontier_phi_82_pred_2 = _3625;
                        frontier_phi_82_pred_3 = _3624;
                        frontier_phi_82_pred_4 = _3623;
                        frontier_phi_82_pred_5 = _3622;
                    }
                    _3265 = frontier_phi_82_pred;
                    _3263 = frontier_phi_82_pred_1;
                    _3261 = frontier_phi_82_pred_2;
                    _3259 = frontier_phi_82_pred_3;
                    _3257 = frontier_phi_82_pred_4;
                    _3255 = frontier_phi_82_pred_5;
                    uint _3421 = _3420 + 1u;
                    if (_3421 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3414 = _3255;
                        _3415 = _3257;
                        _3416 = _3259;
                        _3417 = _3261;
                        _3418 = _3263;
                        _3419 = _3265;
                        _3420 = _3421;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3261;
                frontier_phi_63_64_ladder_1 = _3265;
                frontier_phi_63_64_ladder_2 = _3263;
                frontier_phi_63_64_ladder_3 = _3259;
                frontier_phi_63_64_ladder_4 = _3257;
                frontier_phi_63_64_ladder_5 = _3255;
            }
            else
            {
                frontier_phi_63_64_ladder = _3140;
                frontier_phi_63_64_ladder_1 = _3144;
                frontier_phi_63_64_ladder_2 = _3142;
                frontier_phi_63_64_ladder_3 = _3138;
                frontier_phi_63_64_ladder_4 = _3136;
                frontier_phi_63_64_ladder_5 = _3134;
            }
            _3254 = frontier_phi_63_64_ladder_5;
            _3256 = frontier_phi_63_64_ladder_4;
            _3258 = frontier_phi_63_64_ladder_3;
            _3260 = frontier_phi_63_64_ladder;
            _3262 = frontier_phi_63_64_ladder_2;
            _3264 = frontier_phi_63_64_ladder_1;
        }
        float _3269 = isnan(1.0) ? _1006 : (isnan(_1006) ? 1.0 : min(_1006, 1.0));
        _3067 = (_3269 * _3260) + _2579;
        _3069 = (_3269 * _3262) + _2581;
        _3071 = (_3269 * _3264) + _2583;
        _3073 = ((_3254 * _990) * _3269) + _2917;
        _3075 = ((_3256 * _992) * _3269) + _2919;
        _3077 = ((_3258 * _993) * _3269) + _2921;
    }
    else
    {
        _3067 = _2579;
        _3069 = _2581;
        _3071 = _2583;
        _3073 = _2917;
        _3075 = _2919;
        _3077 = _2921;
    }
    float _5119 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _5130 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _5141 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _3094 = ((isnan(1.0) ? _5119 : (isnan(_5119) ? 1.0 : min(_5119, 1.0))) * (_3067 + ((isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))) * _1006))) + ((_3073 + ((isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0))) * _1845)) * cbPerFrame._m0[3u].x);
    float _3095 = ((isnan(1.0) ? _5130 : (isnan(_5130) ? 1.0 : min(_5130, 1.0))) * (_3069 + ((isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))) * _1006))) + ((_3075 + ((isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0))) * _1845)) * cbPerFrame._m0[3u].x);
    float _3096 = ((isnan(1.0) ? _5141 : (isnan(_5141) ? 1.0 : min(_5141, 1.0))) * (_3071 + ((isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))) * _1006))) + ((_3077 + ((isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0))) * _1845)) * cbPerFrame._m0[3u].x);
    uint _3097 = _263 + 6u;
    float _3105 = _928 / cbSceneParam._m0[86u].x;
    float _3106 = _929 / cbSceneParam._m0[86u].y;
    vec4 _3120 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3105, _3106, (log2((isnan(cbSceneParam._m0[77u].w) ? _851 : (isnan(_851) ? cbSceneParam._m0[77u].w : min(_851, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3122 = _3120.x;
    float _3123 = _3120.y;
    float _3124 = _3120.z;
    float _3125 = _3120.w;
    float _3196;
    float _3198;
    float _3200;
    float _3202;
    if (_851 > cbSceneParam._m0[78u].w)
    {
        float _3159 = isnan(_851) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _851 : min(cbSceneParam._m0[80u].w, _851));
        float _3160 = _3159 / _851;
        float _3171 = _3160 * _901;
        float _3172 = _902 * _3160;
        float _3173 = (-0.0) - _3172;
        float _3174 = _3160 * _903;
        float _3176 = (cbSceneParam._m0[77u].w * _3173) / _3159;
        float _3177 = _3176 + cbSceneParam._m0[79u].w;
        float _3178 = cbSceneParam._m0[79u].w - _3172;
        float _3184 = sqrt(((_3171 * _3171) + (_3172 * _3172)) + (_3174 * _3174));
        float _3187 = (1.0 - (cbSceneParam._m0[77u].w / _3159)) * _3184;
        float _3192 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3194 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3371;
        if (abs((_3173 - _3176) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3371 = ((((_3177 > 0.0) ? exp2(_3192 * _3177) : (2.0 - exp2(_3194 * _3177))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3187;
        }
        else
        {
            float _3315 = 1.0 / cbSceneParam._m0[80u].x;
            float _3316 = isnan(_3178) ? _3177 : (isnan(_3177) ? _3178 : max(_3177, _3178));
            float _3317 = isnan(_3178) ? _3177 : (isnan(_3177) ? _3178 : min(_3177, _3178));
            float _3326 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : min(_3316, 0.0));
            float _3327 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : min(_3317, 0.0));
            _3371 = ((abs(_3184 / _3173) * cbSceneParam._m0[80u].y) * ((((_3326 - _3327) * 2.0) - ((exp2(_3192 * (isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0)))) - exp2(_3192 * (isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0))))) * _3315)) - ((exp2(_3194 * _3326) - exp2(_3194 * _3327)) * _3315))) + (_3187 * cbSceneParam._m0[80u].z);
        }
        vec4 _3373 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3105, _3106, 1.0), 0.0);
        float _3382 = exp2((_3371 * (-1.44269502162933349609375)) * (1.0 - _3373.w));
        float _3383 = log2(_3382);
        float _3399 = log2(_3125);
        _3196 = (exp2(_3399 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3383 * cbSceneParam._m0[78u].x)) * _3373.x) / cbSceneParam._m0[78u].x)) + _3122;
        _3198 = (exp2(_3399 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3383 * cbSceneParam._m0[78u].y)) * _3373.y) / cbSceneParam._m0[78u].y)) + _3123;
        _3200 = (exp2(_3399 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3383 * cbSceneParam._m0[78u].z)) * _3373.z) / cbSceneParam._m0[78u].z)) + _3124;
        _3202 = _3382 * _3125;
    }
    else
    {
        _3196 = _3122;
        _3198 = _3123;
        _3200 = _3124;
        _3202 = _3125;
    }
    bool _3409;
    vec4 _3212;
    vec4 _3234;
    float _3236;
    float _3240;
    float _3241;
    float _3242;
    float _3243;
    bool _3253;
    for (;;)
    {
        _3212 = cbMatDynParam._m0[0u];
        float _3214 = roundEven(_3212.y);
        bool _3215 = _3214 == 3.0;
        float _3216 = log2(_3202);
        float _3223 = exp2(_3216 * cbSceneParam._m0[78u].x) * _3094;
        float _3224 = exp2(_3216 * cbSceneParam._m0[78u].y) * _3095;
        float _3225 = exp2(_3216 * cbSceneParam._m0[78u].z) * _3096;
        float _3232 = _917 + (-0.5);
        _3234 = cbMtdParam._m0[1u];
        _3236 = _3234.y * _3232;
        float _3239 = (_3214 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3240 = _3239 * (_3215 ? _3223 : (_3223 + (cbSceneParam._m0[72u].w * _3196)));
        _3241 = _3239 * (_3215 ? _3224 : (_3224 + (cbSceneParam._m0[72u].w * _3198)));
        _3242 = _3239 * (_3215 ? _3225 : (_3225 + (cbSceneParam._m0[72u].w * _3200)));
        _3243 = _3232 * 0.999000012874603271484375;
        _3253 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3253)
        {
            if ((cbInstanceData._m0[_263 + 7u].x + _3243) < 0.5)
            {
                _3409 = true;
                break;
            }
        }
        uint _3350 = _966 + uint(_3212.w);
        if ((cbInstanceData._m0[_3350].w < 1.0) && ((cbInstanceData._m0[_3350].w + _3243) < 0.5))
        {
            _3409 = true;
            break;
        }
        if ((_3236 + 1.0) < _3234.x)
        {
            _3409 = true;
            break;
        }
        _3409 = false;
        break;
    }
    float _3613;
    if (_3409)
    {
        discard_state = true;
        _3613 = 0.0;
    }
    else
    {
        _3613 = cbInstanceData._m0[_3097].w;
    }
    SV_Target.x = _3240;
    SV_Target.y = _3241;
    SV_Target.z = _3242;
    SV_Target.w = _3613;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3097].w;
    discard_exit();
}


