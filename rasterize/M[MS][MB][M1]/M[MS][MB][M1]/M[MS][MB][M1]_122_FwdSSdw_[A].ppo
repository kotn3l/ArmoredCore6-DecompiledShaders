#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1481;
float _3885;
float _3886;
float _3887;
float _3888;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _238 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _239 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _240 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _246 = inversesqrt(dot(vec3(_238, _239, _240), vec3(_238, _239, _240)));
    float _247 = _246 * _238;
    float _248 = _246 * _239;
    float _249 = _246 * _240;
    float _253 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = _253 * NORMAL.x;
    float _255 = _253 * NORMAL.y;
    float _256 = _253 * NORMAL.z;
    float _260 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _261 = _260 * TANGENT.x;
    float _262 = _260 * TANGENT.y;
    float _263 = _260 * TANGENT.z;
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3897 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3908 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3919 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    uint _285 = uint(roundEven(NORMAL.w)) * 13u;
    uint _290 = _285 + 1u;
    uint _294 = _285 + 2u;
    float _303 = sqrt(((cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x)) + (cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x));
    float _304 = _303 * TEXCOORD.z;
    float _305 = _303 * TEXCOORD.w;
    vec4 _318 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _304) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _305) + cbTextureTilingScale._m0[13u].w));
    vec4 _342 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _347 = _342.x * cbMtdParam._m0[11u].x;
    float _348 = _342.y * cbMtdParam._m0[11u].y;
    float _349 = _342.z * cbMtdParam._m0[11u].z;
    vec4 _368 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _304) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _305) + cbTextureTilingScale._m0[5u].w));
    vec4 _404 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _406 = _404.x;
    float _418 = dot(vec4(_406, _404.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _435 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_406 - _418) * cbMtdParam._m0[24u].y) + _418) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3930 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _436 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _443 = (_436 * ((_368.x * cbMtdParam._m0[12u].x) - _347)) + _347;
    float _444 = (_436 * ((_368.y * cbMtdParam._m0[12u].y) - _348)) + _348;
    float _445 = (_436 * ((_368.z * cbMtdParam._m0[12u].z) - _349)) + _349;
    float _449 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _318.x) * _443;
    float _452 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _318.y) * _444;
    float _455 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _318.z) * _445;
    float _462 = ((_443 - _449) * (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0)))) + _449;
    float _463 = ((_444 - _452) * (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0)))) + _452;
    float _464 = ((_445 - _455) * (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0)))) + _455;
    vec4 _482 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _304) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _305) + cbTextureTilingScale._m0[20u].w));
    vec4 _509 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _304) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _305) + cbTextureTilingScale._m0[4u].w));
    vec4 _526 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _528 = _526.x;
    float _529 = _526.y;
    float _530 = _526.z;
    float _539 = ((_509.z - _530) * _436) + _530;
    float _542 = ((((_509.x - _528) * _436) + _528) * 2.0) + (-1.0);
    float _543 = ((((_509.y - _529) * _436) + _529) * 2.0) + (-1.0);
    float _544 = dot(vec2(_542, _543), vec2(_542, _543));
    float _3941 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _549 = sqrt(1.0 - (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))));
    vec4 _569 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _581 = (_542 + ((((_482.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_569.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _582 = (_543 + ((((_482.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_569.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _585 = fma(_549, _254, fma(_582, _261, _581 * _247));
    float _588 = fma(_549, _255, fma(_582, _262, _581 * _248));
    float _591 = fma(_549, _256, fma(_582, _263, _581 * _249));
    float _595 = inversesqrt(dot(vec3(_585, _588, _591), vec3(_585, _588, _591)));
    vec4 _622 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _304) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _305) + cbTextureTilingScale._m0[11u].w));
    float _624 = _622.x;
    float _625 = 1.0 - _624;
    float _629 = ((_624 - _625) * cbMtdParam._m0[24u].z) + _625;
    float _631 = (cbMtdParam._m0[19u].x + dot(vec4(_595 * _585, _595 * _588, _595 * _591, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_629 * cbMtdParam._m0[21u].z);
    float _3952 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _632 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _634 = (-0.0) - cbMtdParam._m0[24u].x;
    float _636 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _637 = isnan(1.0) ? _636 : (isnan(_636) ? 1.0 : min(_636, 1.0));
    float _644 = _632 - ((_632 * TEXCOORD_8.x) * _637);
    float _645 = _632 - ((_632 * TEXCOORD_8.y) * _637);
    float _646 = _632 - ((_632 * TEXCOORD_8.z) * _637);
    float _653 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _657 = ((isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : min(_653, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _665 = (_657 - (((_629 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _657))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3983 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _666 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _670 = ((_644 * (cbMtdParam._m0[17u].x - _462)) * _666) + _462;
    float _671 = ((_645 * (cbMtdParam._m0[17u].y - _463)) * _666) + _463;
    float _672 = ((_646 * (cbMtdParam._m0[17u].z - _464)) * _666) + _464;
    vec4 _684 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _304) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _305) + cbTextureTilingScale._m0[19u].w));
    float _686 = _684.x;
    float _687 = 1.0 - _686;
    float _712 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_686 - _687) * cbMtdParam._m0[24u].w) + _687) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3994 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _713 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    float _721 = ((((cbMtdParam._m0[10u].x - _670) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _713) + _670;
    float _722 = ((((cbMtdParam._m0[10u].y - _671) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _713) + _671;
    float _723 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _672)) * _713) + _672;
    vec4 _749 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _751 = _749.x;
    float _769 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _304) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _305) + cbTextureTilingScale._m0[9u].w)).x - _751) * _436) + _751;
    float _773 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _769) * cbMtdParam._m0[19u].z) + _769;
    float _776 = _773 - ((_666 * _644) * _773);
    float _778 = _776 - (_776 * _713);
    float _783 = (((_482.z - _539) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _539;
    float _787 = ((_569.z - _783) * cbMtdParam._m0[19u].w) + _783;
    vec4 _801 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _304) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _305) + cbTextureTilingScale._m0[15u].w));
    float _808 = (_801.x * 2.0) + (-1.0);
    float _809 = (_801.y * 2.0) + (-1.0);
    float _810 = dot(vec2(_808, _809), vec2(_808, _809));
    float _4005 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _819 = (((_801.z - _787) * _644) * _666) + _787;
    float _822 = ((cbMtdParam._m0[23u].y - _819) * _713) + _819;
    vec4 _841 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _304) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _305) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _847 = (_841.x * 2.0) + (-1.0);
    float _848 = (_841.y * 2.0) + (-1.0);
    float _849 = dot(vec2(_847, _848), vec2(_847, _848));
    float _4016 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _869 = (((cbMtdParam._m0[21u].x * _581) + ((_808 - _581) * _644)) * _666) + _581;
    float _870 = (((cbMtdParam._m0[21u].x * _582) + ((_809 - _582) * _645)) * _666) + _582;
    float _871 = (((sqrt(1.0 - (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0)))) - _549) * _646) * _666) + _549;
    float _882 = (((_847 - _869) + (_869 * cbMtdParam._m0[22u].z)) * _713) + _869;
    float _883 = (((_848 - _870) + (_870 * cbMtdParam._m0[22u].z)) * _713) + _870;
    float _884 = ((sqrt(1.0 - (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) - _871) * _713) + _871;
    float _888 = cbMtdParam._m0[22u].x + _569.w;
    float _891 = fma(_884, _254, fma(_883, _261, _882 * _247));
    float _894 = fma(_884, _255, fma(_883, _262, _882 * _248));
    float _897 = fma(_884, _256, fma(_883, _263, _882 * _249));
    float _901 = inversesqrt(dot(vec3(_891, _894, _897), vec3(_891, _894, _897)));
    float _902 = _901 * _891;
    float _903 = _901 * _894;
    float _904 = _901 * _897;
    float _4027 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _905 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _4038 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _4049 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _4060 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _4071 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _4082 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _910 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _924 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _964 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _974 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _964);
    float _975 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _964);
    float _976 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _964);
    float _980 = inversesqrt(dot(vec3(_974, _975, _976), vec3(_974, _975, _976)));
    float _981 = _974 * _980;
    float _982 = _975 * _980;
    float _983 = _976 * _980;
    vec4 _988 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _990 = _988.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1162 = sqrt(((_974 * _974) + (_975 * _975)) + (_976 * _976));
        float _1168 = (cbMatDynParam._m0[5u].x * _1162) + cbMatDynParam._m0[5u].y;
        float _4093 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1173 = (cbMatDynParam._m0[5u].z * _1162) + cbMatDynParam._m0[5u].w;
        float _4104 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) - _1169)) + _1169) < ((_990 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1001 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1002 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1020 = fma(_904, cbSceneParam._m0[5u].z, fma(_903, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _902));
    float _1023 = fma(_904, cbSceneParam._m0[6u].z, fma(_903, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _902));
    float _1026 = fma(_904, cbSceneParam._m0[7u].z, fma(_903, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _902));
    uint _1039 = _285 + 9u;
    uint _1040 = _1039 + uint(cbMatDynParam._m0[0u].w);
    float _1046 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0)))) * cbInstanceData._m0[_1040].x;
    float _1047 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0)))) * cbInstanceData._m0[_1040].y;
    float _1048 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0)))) * cbInstanceData._m0[_1040].z;
    float _4115 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
    float _1049 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _4126 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
    float _1050 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    float _4137 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _1051 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    float _1052 = 1.0 - _910;
    float _1053 = _1049 * _1052;
    float _1054 = _1050 * _1052;
    float _1055 = _1051 * _1052;
    float _1060 = (_1049 + (-0.039999999105930328369140625)) * _910;
    float _1061 = (_1050 + (-0.039999999105930328369140625)) * _910;
    float _1062 = (_1051 + (-0.039999999105930328369140625)) * _910;
    float _1063 = _1060 + 0.039999999105930328369140625;
    float _1065 = _1061 + 0.039999999105930328369140625;
    float _1066 = _1062 + 0.039999999105930328369140625;
    vec4 _1075 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1001, cbSceneParam._m0[86u].y * _1002));
    float _1079 = ((isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * TEXCOORD_5.w) * _1075.x;
    float _1080 = dot(vec3(_902, _903, _904), vec3(_981, _982, _983));
    float _1083 = _1080 * 2.0;
    float _1087 = (_1083 * _902) - _981;
    float _1088 = (_1083 * _903) - _982;
    float _1089 = (_1083 * _904) - _983;
    float _1093 = abs(dot(vec3(_981, _982, _983), vec3(_902, _903, _904)));
    float _4148 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
    float _1095 = sqrt(_905);
    float _1108 = exp2((_1095 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1095 * 3.0));
    float _1114 = (1.0 - _1108) * ((_1095 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1115 = _1108 * _1095;
    float _1143 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1147 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1151 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1480;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1205 = fma(_1151, cbModelParam._m0[26u].z, fma(_1147, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1143));
        float _1209 = fma(_1151, cbModelParam._m0[27u].z, fma(_1147, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1143));
        float _1213 = fma(_1151, cbModelParam._m0[28u].z, fma(_1147, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1143));
        float _1238 = _1143 + _902;
        float _1239 = _1147 + _903;
        float _1240 = _1151 + _904;
        float _1250 = fma(_1240, cbModelParam._m0[26u].z, fma(_1239, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1238)) - _1205;
        float _1251 = fma(_1240, cbModelParam._m0[27u].z, fma(_1239, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1238)) - _1209;
        float _1252 = fma(_1240, cbModelParam._m0[28u].z, fma(_1239, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1238)) - _1213;
        float _1256 = inversesqrt(dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252)));
        float _1269 = ((_1256 * _1250) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1205 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1270 = ((_1256 * _1251) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1209 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1271 = ((_1256 * _1252) / cbModelParam._m0[34u].z) + ((((((_1213 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1274 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        vec4 _1281 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        vec4 _1288 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        vec4 _1295 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        float _1308 = exp2((_1274.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1274.x + (-0.5));
        float _1310 = _1308 * (_1274.y + (-0.5));
        float _1311 = _1308 * (_1274.z + (-0.5));
        float _1318 = exp2((_1281.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1281.x + (-0.5));
        float _1320 = _1318 * (_1281.y + (-0.5));
        float _1321 = _1318 * (_1281.z + (-0.5));
        float _1328 = exp2((_1288.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1288.x + (-0.5));
        float _1330 = _1328 * (_1288.y + (-0.5));
        float _1331 = _1328 * (_1288.z + (-0.5));
        float _1338 = exp2((_1295.w + (-0.5)) * 20.0) * 2.0;
        float _1339 = _1338 * (_1295.x + (-0.5));
        float _1340 = _1338 * (_1295.y + (-0.5));
        float _1341 = _1338 * (_1295.z + (-0.5));
        float _1342 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1343 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1344 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1345 = _1309 * 0.5;
        float _1346 = _1319 * 0.5;
        float _1347 = _1329 * 0.5;
        float _1348 = dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347));
        float _1353 = (_1348 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1348);
        float _1362 = (dot(vec3(_902, _903, _904), vec3(_1353 * _1345, _1353 * _1346, _1353 * _1347)) + 1.0) * 0.5;
        float _4174 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1372 = sqrt(((_1346 * _1346) + (_1345 * _1345)) + (_1347 * _1347)) / (_1342 + 9.9999997473787516355514526367188e-06);
        float _4185 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1374 = _1373 * 2.0;
        float _1378 = (1.0 - _1373) / (_1373 + 1.0);
        float _4196 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1388 = ((((1.0 - _1379) * (_1374 + 2.0)) * exp2(log2(isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_1374 + 1.0))) + _1379) * _1342;
        float _1389 = _1310 * 0.5;
        float _1390 = _1320 * 0.5;
        float _1391 = _1330 * 0.5;
        float _1392 = dot(vec3(_1389, _1390, _1391), vec3(_1389, _1390, _1391));
        float _1397 = (_1392 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1392);
        float _1405 = (dot(vec3(_902, _903, _904), vec3(_1397 * _1389, _1397 * _1390, _1397 * _1391)) + 1.0) * 0.5;
        float _4207 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1414 = sqrt(((_1390 * _1390) + (_1389 * _1389)) + (_1391 * _1391)) / (_1343 + 9.9999997473787516355514526367188e-06);
        float _4218 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1416 = _1415 * 2.0;
        float _1420 = (1.0 - _1415) / (_1415 + 1.0);
        float _4229 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1430 = ((((1.0 - _1421) * (_1416 + 2.0)) * exp2(log2(isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_1416 + 1.0))) + _1421) * _1343;
        float _1431 = _1311 * 0.5;
        float _1432 = _1321 * 0.5;
        float _1433 = _1331 * 0.5;
        float _1434 = dot(vec3(_1431, _1432, _1433), vec3(_1431, _1432, _1433));
        float _1439 = (_1434 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1434);
        float _1447 = (dot(vec3(_902, _903, _904), vec3(_1439 * _1431, _1439 * _1432, _1439 * _1433)) + 1.0) * 0.5;
        float _4240 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1456 = sqrt(((_1432 * _1432) + (_1431 * _1431)) + (_1433 * _1433)) / (_1344 + 9.9999997473787516355514526367188e-06);
        float _4251 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1458 = _1457 * 2.0;
        float _1462 = (1.0 - _1457) / (_1457 + 1.0);
        float _4262 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _1472 = ((((1.0 - _1463) * (_1458 + 2.0)) * exp2(log2(isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * (_1458 + 1.0))) + _1463) * _1344;
        _1480 = _1311;
        _1482 = _1310;
        _1483 = _1309;
        _1484 = _1321;
        _1485 = _1320;
        _1486 = _1319;
        _1487 = _1331;
        _1488 = _1330;
        _1489 = _1329;
        _1490 = _1344;
        _1491 = _1343;
        _1492 = _1342;
        _1493 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)));
        _1494 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)));
        _1495 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)));
    }
    else
    {
        _1480 = _1481;
        _1482 = _1481;
        _1483 = _1481;
        _1484 = _1481;
        _1485 = _1481;
        _1486 = _1481;
        _1487 = _1481;
        _1488 = _1481;
        _1489 = _1481;
        _1490 = _1481;
        _1491 = _1481;
        _1492 = _1481;
        _1493 = 0.0;
        _1494 = 0.0;
        _1495 = 0.0;
    }
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1523 = fma(_1151, cbModelParam._m0[30u].z, fma(_1147, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1143));
        float _1527 = fma(_1151, cbModelParam._m0[31u].z, fma(_1147, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1143));
        float _1531 = fma(_1151, cbModelParam._m0[32u].z, fma(_1147, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1143));
        float _1554 = _1143 + _902;
        float _1555 = _1147 + _903;
        float _1556 = _1151 + _904;
        float _1566 = fma(_1556, cbModelParam._m0[30u].z, fma(_1555, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1554)) - _1523;
        float _1567 = fma(_1556, cbModelParam._m0[31u].z, fma(_1555, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1554)) - _1527;
        float _1568 = fma(_1556, cbModelParam._m0[32u].z, fma(_1555, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1554)) - _1531;
        float _1572 = inversesqrt(dot(vec3(_1566, _1567, _1568), vec3(_1566, _1567, _1568)));
        float _1585 = ((_1572 * _1566) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1523 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1586 = ((_1572 * _1567) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1527 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1587 = ((_1572 * _1568) / cbModelParam._m0[35u].z) + ((((((_1531 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1589 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1585, _1586, _1587), 0.0);
        vec4 _1596 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1585, _1586, _1587), 0.0);
        vec4 _1603 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1585, _1586, _1587), 0.0);
        vec4 _1610 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1585, _1586, _1587), 0.0);
        float _1622 = exp2((_1589.w + (-0.5)) * 20.0) * 2.0;
        float _1623 = _1622 * (_1589.x + (-0.5));
        float _1624 = _1622 * (_1589.y + (-0.5));
        float _1625 = _1622 * (_1589.z + (-0.5));
        float _1632 = exp2((_1596.w + (-0.5)) * 20.0) * 2.0;
        float _1633 = _1632 * (_1596.x + (-0.5));
        float _1634 = _1632 * (_1596.y + (-0.5));
        float _1635 = _1632 * (_1596.z + (-0.5));
        float _1642 = exp2((_1603.w + (-0.5)) * 20.0) * 2.0;
        float _1643 = _1642 * (_1603.x + (-0.5));
        float _1644 = _1642 * (_1603.y + (-0.5));
        float _1645 = _1642 * (_1603.z + (-0.5));
        float _1652 = exp2((_1610.w + (-0.5)) * 20.0) * 2.0;
        float _1653 = _1652 * (_1610.x + (-0.5));
        float _1654 = _1652 * (_1610.y + (-0.5));
        float _1655 = _1652 * (_1610.z + (-0.5));
        float _1656 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1657 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1658 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1659 = _1623 * 0.5;
        float _1660 = _1633 * 0.5;
        float _1661 = _1643 * 0.5;
        float _1662 = dot(vec3(_1659, _1660, _1661), vec3(_1659, _1660, _1661));
        float _1667 = (_1662 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1662);
        float _1675 = (dot(vec3(_902, _903, _904), vec3(_1667 * _1659, _1667 * _1660, _1667 * _1661)) + 1.0) * 0.5;
        float _4303 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1684 = sqrt(((_1660 * _1660) + (_1659 * _1659)) + (_1661 * _1661)) / (_1656 + 9.9999997473787516355514526367188e-06);
        float _4314 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1685 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1686 = _1685 * 2.0;
        float _1690 = (1.0 - _1685) / (_1685 + 1.0);
        float _4325 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1691 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1700 = ((((1.0 - _1691) * (_1686 + 2.0)) * exp2(log2(isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_1686 + 1.0))) + _1691) * _1656;
        float _1701 = _1624 * 0.5;
        float _1702 = _1634 * 0.5;
        float _1703 = _1644 * 0.5;
        float _1704 = dot(vec3(_1701, _1702, _1703), vec3(_1701, _1702, _1703));
        float _1709 = (_1704 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1704);
        float _1717 = (dot(vec3(_902, _903, _904), vec3(_1709 * _1701, _1709 * _1702, _1709 * _1703)) + 1.0) * 0.5;
        float _4336 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1726 = sqrt(((_1702 * _1702) + (_1701 * _1701)) + (_1703 * _1703)) / (_1657 + 9.9999997473787516355514526367188e-06);
        float _4347 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1727 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _1728 = _1727 * 2.0;
        float _1732 = (1.0 - _1727) / (_1727 + 1.0);
        float _4358 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1733 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _1742 = ((((1.0 - _1733) * (_1728 + 2.0)) * exp2(log2(isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_1728 + 1.0))) + _1733) * _1657;
        float _1743 = _1625 * 0.5;
        float _1744 = _1635 * 0.5;
        float _1745 = _1645 * 0.5;
        float _1746 = dot(vec3(_1743, _1744, _1745), vec3(_1743, _1744, _1745));
        float _1751 = (_1746 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1746);
        float _1759 = (dot(vec3(_902, _903, _904), vec3(_1751 * _1743, _1751 * _1744, _1751 * _1745)) + 1.0) * 0.5;
        float _4369 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
        float _1768 = sqrt(((_1744 * _1744) + (_1743 * _1743)) + (_1745 * _1745)) / (_1658 + 9.9999997473787516355514526367188e-06);
        float _4380 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        float _1769 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _1770 = _1769 * 2.0;
        float _1774 = (1.0 - _1769) / (_1769 + 1.0);
        float _4391 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1775 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _1784 = ((((1.0 - _1775) * (_1770 + 2.0)) * exp2(log2(isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * (_1770 + 1.0))) + _1775) * _1658;
        _1792 = _1625;
        _1793 = _1624;
        _1794 = _1623;
        _1795 = _1635;
        _1796 = _1634;
        _1797 = _1633;
        _1798 = _1645;
        _1799 = _1644;
        _1800 = _1643;
        _1801 = _1658;
        _1802 = _1657;
        _1803 = _1656;
        _1804 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0)));
        _1805 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0)));
        _1806 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0)));
    }
    else
    {
        _1792 = _1481;
        _1793 = _1481;
        _1794 = _1481;
        _1795 = _1481;
        _1796 = _1481;
        _1797 = _1481;
        _1798 = _1481;
        _1799 = _1481;
        _1800 = _1481;
        _1801 = _1481;
        _1802 = _1481;
        _1803 = _1481;
        _1804 = 0.0;
        _1805 = 0.0;
        _1806 = 0.0;
    }
    float _1816 = (cbModelParam._m0[1u].x * (_1804 - _1493)) + _1493;
    float _1817 = (cbModelParam._m0[1u].x * (_1805 - _1494)) + _1494;
    float _1818 = (cbModelParam._m0[1u].x * (_1806 - _1495)) + _1495;
    float _1839 = fma(_1818, cbSceneParam._m0[89u].z, fma(_1817, cbSceneParam._m0[89u].y, _1816 * cbSceneParam._m0[89u].x));
    float _1842 = fma(_1818, cbSceneParam._m0[90u].z, fma(_1817, cbSceneParam._m0[90u].y, _1816 * cbSceneParam._m0[90u].x));
    float _1845 = fma(_1818, cbSceneParam._m0[91u].z, fma(_1817, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1816));
    float _1860 = _1087 * 0.5;
    float _1861 = _1088 * 0.5;
    float _1862 = _1089 * 0.5;
    float _1863 = dot(vec4(_1860, _1861, _1862, 1.0), vec4(_1794, _1797, _1800, _1803));
    float _1866 = dot(vec4(_1860, _1861, _1862, 1.0), vec4(_1793, _1796, _1799, _1802));
    float _1869 = dot(vec4(_1860, _1861, _1862, 1.0), vec4(_1792, _1795, _1798, _1801));
    float _1903;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1876 = dot(vec4(_1860, _1861, _1862, 1.0), vec4(_1480, _1484, _1487, _1490));
        float _1880 = dot(vec4(_1860, _1861, _1862, 1.0), vec4(_1482, _1485, _1488, _1491));
        float _1884 = dot(vec4(_1860, _1861, _1862, 1.0), vec4(_1483, _1486, _1489, _1492));
        float _1891 = dot(vec4(cbModelParam._m0[39u]), vec4(_1860, _1861, _1862, 1.0));
        _1903 = dot(vec3(isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0)), isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0)), isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1891) ? 0.0 : (isnan(0.0) ? _1891 : max(0.0, _1891))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1903 = 1.0;
    }
    float _1914;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1905 = dot(vec4(cbModelParam._m0[40u]), vec4(_1860, _1861, _1862, 1.0));
        _1914 = dot(vec3(isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0)), isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0)), isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1905) ? 0.0 : (isnan(0.0) ? _1905 : max(0.0, _1905))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1914 = 1.0;
    }
    float _1918 = (_1914 * cbModelParam._m0[1u].x) + (_1903 * (1.0 - cbModelParam._m0[1u].x));
    float _1928 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _905);
    float _1929 = isnan(_1928) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1928 : min(cbModelParam._m0[25u].z, _1928));
    float _2010;
    float _2012;
    float _2014;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1977 = fma(_1151, cbModelParam._m0[13u].z, fma(_1147, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1143)) + cbModelParam._m0[13u].w;
        float _1981 = fma(_1151, cbModelParam._m0[14u].z, fma(_1147, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1143)) + cbModelParam._m0[14u].w;
        float _1985 = fma(_1151, cbModelParam._m0[15u].z, fma(_1147, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1143)) + cbModelParam._m0[15u].w;
        float _1988 = fma(_1089, cbModelParam._m0[13u].z, fma(_1088, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1087));
        float _1991 = fma(_1089, cbModelParam._m0[14u].z, fma(_1088, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1087));
        float _1994 = fma(_1089, cbModelParam._m0[15u].z, fma(_1088, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1087));
        float _2022;
        if (_1988 > 0.0)
        {
            _2022 = abs((1.0 - _1977) / _1988);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1988 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1977 + 1.0) / _1988);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2022 = frontier_phi_17_15_ladder;
        }
        float _2246;
        if (_1991 > 0.0)
        {
            _2246 = abs((1.0 - _1981) / _1991);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1991 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1981 + 1.0) / _1991);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2246 = frontier_phi_26_22_ladder;
        }
        float _2503;
        if (_1994 > 0.0)
        {
            _2503 = abs((1.0 - _1985) / _1994);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1994 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1985 + 1.0) / _1994);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2503 = frontier_phi_38_33_ladder;
        }
        float _2505 = isnan(_2246) ? _2022 : (isnan(_2022) ? _2246 : min(_2022, _2246));
        float _2506 = isnan(_2503) ? _2505 : (isnan(_2505) ? _2503 : min(_2505, _2503));
        float _2510 = (_2506 * _1988) + _1977;
        float _2511 = (_2506 * _1991) + _1981;
        float _2512 = (_2506 * _1994) + _1985;
        float _2513 = _2506 * 9.9999997473787516355514526367188e-05;
        float _2515 = (-1.0) - _2513;
        float _2517 = _2513 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2512 > _2517) || ((_2512 < _2515) || ((_2511 > _2517) || ((_2511 < _2515) || ((_2510 < _2515) || (_2510 > _2517))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2640 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2512, cbModelParam._m0[9u].z, fma(_2511, cbModelParam._m0[9u].y, _2510 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2512, cbModelParam._m0[10u].z, fma(_2511, cbModelParam._m0[10u].y, _2510 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2512, cbModelParam._m0[11u].z, fma(_2511, cbModelParam._m0[11u].y, _2510 * cbModelParam._m0[11u].x))), _1929);
            frontier_phi_16_38_ladder = _2640.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2640.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2640.x * cbModelParam._m0[1u].y;
        }
        _2010 = frontier_phi_16_38_ladder_2;
        _2012 = frontier_phi_16_38_ladder_1;
        _2014 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1998 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1087, _1088, _1089), _1929);
        _2010 = _1998.x * cbModelParam._m0[1u].y;
        _2012 = _1998.y * cbModelParam._m0[1u].y;
        _2014 = _1998.z * cbModelParam._m0[1u].y;
    }
    float _2018 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _905);
    float _2019 = isnan(_2018) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2018 : min(cbModelParam._m0[25u].w, _2018));
    float _2109;
    float _2111;
    float _2113;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2073 = fma(_1151, cbModelParam._m0[21u].z, fma(_1147, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1143)) + cbModelParam._m0[21u].w;
        float _2077 = fma(_1151, cbModelParam._m0[22u].z, fma(_1147, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1143)) + cbModelParam._m0[22u].w;
        float _2081 = fma(_1151, cbModelParam._m0[23u].z, fma(_1147, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1143)) + cbModelParam._m0[23u].w;
        float _2084 = fma(_1089, cbModelParam._m0[21u].z, fma(_1088, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1087));
        float _2087 = fma(_1089, cbModelParam._m0[22u].z, fma(_1088, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1087));
        float _2090 = fma(_1089, cbModelParam._m0[23u].z, fma(_1088, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1087));
        float _2251;
        if (_2084 > 0.0)
        {
            _2251 = abs((1.0 - _2073) / _2084);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2084 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2073 + 1.0) / _2084);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2251 = frontier_phi_28_24_ladder;
        }
        float _2530;
        if (_2087 > 0.0)
        {
            _2530 = abs((1.0 - _2077) / _2087);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2087 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2077 + 1.0) / _2087);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2530 = frontier_phi_40_35_ladder;
        }
        float _2743;
        if (_2090 > 0.0)
        {
            _2743 = abs((1.0 - _2081) / _2090);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2090 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2081 + 1.0) / _2090);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2743 = frontier_phi_49_46_ladder;
        }
        float _2745 = isnan(_2530) ? _2251 : (isnan(_2251) ? _2530 : min(_2251, _2530));
        float _2746 = isnan(_2743) ? _2745 : (isnan(_2745) ? _2743 : min(_2745, _2743));
        float _2750 = (_2746 * _2084) + _2073;
        float _2751 = (_2746 * _2087) + _2077;
        float _2752 = (_2746 * _2090) + _2081;
        float _2753 = _2746 * 9.9999997473787516355514526367188e-05;
        float _2754 = (-1.0) - _2753;
        float _2756 = _2753 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2752 > _2756) || ((_2752 < _2754) || ((_2751 > _2756) || ((_2751 < _2754) || ((_2750 < _2754) || (_2750 > _2756))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2951 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2752, cbModelParam._m0[17u].z, fma(_2751, cbModelParam._m0[17u].y, _2750 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2752, cbModelParam._m0[18u].z, fma(_2751, cbModelParam._m0[18u].y, _2750 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2752, cbModelParam._m0[19u].z, fma(_2751, cbModelParam._m0[19u].y, _2750 * cbModelParam._m0[19u].x))), _2019);
            frontier_phi_25_49_ladder = _2951.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2951.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2951.x * cbModelParam._m0[1u].z;
        }
        _2109 = frontier_phi_25_49_ladder_2;
        _2111 = frontier_phi_25_49_ladder_1;
        _2113 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2093 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1087, _1088, _1089), _2019);
        _2109 = _2093.x * cbModelParam._m0[1u].z;
        _2111 = _2093.y * cbModelParam._m0[1u].z;
        _2113 = _2093.z * cbModelParam._m0[1u].z;
    }
    float _2126 = (((_1114 * _1063) + _1115) * _1079) * ((cbModelParam._m0[1u].w * (_2109 - _2010)) + _2010);
    float _2128 = (((_1114 * _1065) + _1115) * _1079) * ((cbModelParam._m0[1u].w * (_2111 - _2012)) + _2012);
    float _2130 = (((_1114 * _1066) + _1115) * _1079) * ((cbModelParam._m0[1u].w * (_2113 - _2014)) + _2014);
    float _2133 = fma(_2130, cbSceneParam._m0[89u].z, fma(_2128, cbSceneParam._m0[89u].y, _2126 * cbSceneParam._m0[89u].x));
    float _2136 = fma(_2130, cbSceneParam._m0[90u].z, fma(_2128, cbSceneParam._m0[90u].y, _2126 * cbSceneParam._m0[90u].x));
    float _2139 = fma(_2130, cbSceneParam._m0[91u].z, fma(_2128, cbSceneParam._m0[91u].y, _2126 * cbSceneParam._m0[91u].x));
    vec4 _2147 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1001, _1002));
    float _2149 = _2147.w;
    float _2161 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2149);
    float _2162 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2149);
    float _2163 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2149);
    uvec4 _2167 = floatBitsToUint(cbInstanceData._m0[_285 + 5u]);
    uint _2169 = _2167.x * 14u;
    uint _2170 = _2169 + 13u;
    float _2177 = _1079 + (-1.0);
    float _2182 = (cbLight._m0[_2170].x * _2177) + 1.0;
    float _2183 = (cbLight._m0[_2170].y * _2177) + 1.0;
    float _2184 = (cbLight._m0[_2170].z * _2177) + 1.0;
    float _2185 = (cbLight._m0[_2170].w * _2177) + 1.0;
    uint _2186 = _2169 + 5u;
    float _2192 = isnan(1.0) ? _2183 : (isnan(_2183) ? 1.0 : min(_2183, 1.0));
    uint _2196 = _2169 + 4u;
    float _2205 = isnan(1.0) ? _2182 : (isnan(_2182) ? 1.0 : min(_2182, 1.0));
    uint _2209 = _2169 | 1u;
    float _2220 = dot(vec3(cbLight._m0[_2169].xyz), vec3(_902, _903, _904));
    float _2223 = dot(vec3(cbLight._m0[_2209].xyz), vec3(_902, _903, _904));
    float _4527 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _4538 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2228 = (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * 0.3183098733425140380859375;
    float _2230 = (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0))) * 0.3183098733425140380859375;
    float _2237 = ((cbLight._m0[_2186].x * _2192) * _2230) + (((cbLight._m0[_2196].x * _2161) * _2205) * _2228);
    float _2238 = ((_2192 * cbLight._m0[_2186].y) * _2230) + (((cbLight._m0[_2196].y * _2162) * _2205) * _2228);
    float _2239 = ((_2192 * cbLight._m0[_2186].z) * _2230) + (((cbLight._m0[_2196].z * _2163) * _2205) * _2228);
    uvec4 _2243 = floatBitsToUint(cbLight._m0[_2169 + 12u]);
    bool _2245 = _2243.x == 0u;
    float _2256;
    float _2258;
    float _2260;
    if (_2245)
    {
        _2256 = _2237;
        _2258 = _2238;
        _2260 = _2239;
    }
    else
    {
        uint _2264 = _2169 + 6u;
        float _2280 = (dot(vec3(cbLight._m0[_2169 + 2u].xyz), vec3(_902, _903, _904)) * 0.5) + 0.5;
        float _2281 = _2280 * _2280;
        float _4549 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        float _2282 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
        float _2283 = isnan(1.0) ? _2184 : (isnan(_2184) ? 1.0 : min(_2184, 1.0));
        _2256 = (((cbLight._m0[_2264].x * 0.3183098733425140380859375) * _2282) * _2283) + _2237;
        _2258 = (((cbLight._m0[_2264].y * 0.3183098733425140380859375) * _2282) * _2283) + _2238;
        _2260 = (((cbLight._m0[_2264].z * 0.3183098733425140380859375) * _2282) * _2283) + _2239;
    }
    bool _2263 = _2243.y == 0u;
    float _2301;
    float _2303;
    float _2305;
    if (_2263)
    {
        _2301 = _2256;
        _2303 = _2258;
        _2305 = _2260;
    }
    else
    {
        uint _2474 = _2169 + 7u;
        float _2490 = (dot(vec3(cbLight._m0[_2169 + 3u].xyz), vec3(_902, _903, _904)) * 0.5) + 0.5;
        float _2491 = _2490 * _2490;
        float _4565 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2492 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
        float _2493 = isnan(1.0) ? _2185 : (isnan(_2185) ? 1.0 : min(_2185, 1.0));
        _2301 = (((cbLight._m0[_2474].x * 0.3183098733425140380859375) * _2492) * _2493) + _2256;
        _2303 = (((cbLight._m0[_2474].y * 0.3183098733425140380859375) * _2492) * _2493) + _2258;
        _2305 = (((cbLight._m0[_2474].z * 0.3183098733425140380859375) * _2492) * _2493) + _2260;
    }
    uint _2308 = _2169 + 8u;
    float _2321 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2169].w)) * _905) * 0.949999988079071044921875);
    float _2322 = _2321 * _2321;
    float _2323 = cbLight._m0[_2169].x + _981;
    float _2324 = cbLight._m0[_2169].y + _982;
    float _2325 = cbLight._m0[_2169].z + _983;
    float _2329 = inversesqrt(dot(vec3(_2323, _2324, _2325), vec3(_2323, _2324, _2325)));
    float _2330 = _2329 * _2323;
    float _2331 = _2329 * _2324;
    float _2332 = _2329 * _2325;
    float _2333 = dot(vec3(_902, _903, _904), vec3(cbLight._m0[_2169].xyz));
    float _4581 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2336 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
    float _4592 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
    float _2337 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
    float _2338 = dot(vec3(_902, _903, _904), vec3(_2330, _2331, _2332));
    float _4603 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2341 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
    float _2342 = dot(vec3(cbLight._m0[_2169].xyz), vec3(_2330, _2331, _2332));
    float _4614 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _2346 = _2322 * _2322;
    float _2350 = ((_2341 * _2341) * (_2346 + (-1.0))) + 1.0;
    float _2358 = exp2(log2(1.0 - (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0)))) * 5.0);
    float _2359 = 0.959999978542327880859375 - _1060;
    float _2361 = 0.959999978542327880859375 - _1061;
    float _2362 = 0.959999978542327880859375 - _1062;
    float _2369 = 1.0 - _2322;
    float _2380 = (0.5 / (((_2337 * ((_2336 * _2369) + _2322)) + 9.9999999392252902907785028219223e-09) + (((_2337 * _2369) + _2322) * _2336))) * _2336;
    float _4625 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2382 = (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (_2346 / ((_2350 * _2350) * 3.141590118408203125));
    uint _2396 = _2169 + 9u;
    float _2407 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2209].w)) * _905) * 0.949999988079071044921875);
    float _2408 = _2407 * _2407;
    float _2409 = cbLight._m0[_2209].x + _981;
    float _2410 = cbLight._m0[_2209].y + _982;
    float _2411 = cbLight._m0[_2209].z + _983;
    float _2415 = inversesqrt(dot(vec3(_2409, _2410, _2411), vec3(_2409, _2410, _2411)));
    float _2416 = _2415 * _2409;
    float _2417 = _2415 * _2410;
    float _2418 = _2415 * _2411;
    float _2419 = dot(vec3(_902, _903, _904), vec3(cbLight._m0[_2209].xyz));
    float _4636 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
    float _2422 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
    float _2423 = dot(vec3(_902, _903, _904), vec3(_2416, _2417, _2418));
    float _4647 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
    float _2426 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
    float _2427 = dot(vec3(cbLight._m0[_2209].xyz), vec3(_2416, _2417, _2418));
    float _4658 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
    float _2431 = _2408 * _2408;
    float _2435 = ((_2426 * _2426) * (_2431 + (-1.0))) + 1.0;
    float _2442 = exp2(log2(1.0 - (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0)))) * 5.0);
    float _2449 = 1.0 - _2408;
    float _2459 = (0.5 / (((_2337 * ((_2422 * _2449) + _2408)) + 9.9999999392252902907785028219223e-09) + (((_2337 * _2449) + _2408) * _2422))) * _2422;
    float _4669 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
    float _2461 = (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0))) * (_2431 / ((_2435 * _2435) * 3.141590118408203125));
    float _2471 = (((((_2442 * _2359) + _1063) * cbLight._m0[_2396].x) * _2461) * _2192) + ((((cbLight._m0[_2308].x * _2161) * ((_2358 * _2359) + _1063)) * _2382) * _2205);
    float _2472 = (((((_2442 * _2361) + _1065) * cbLight._m0[_2396].y) * _2461) * _2192) + ((((cbLight._m0[_2308].y * _2162) * ((_2358 * _2361) + _1065)) * _2382) * _2205);
    float _2473 = (((((_2442 * _2362) + _1066) * cbLight._m0[_2396].z) * _2461) * _2192) + ((((cbLight._m0[_2308].z * _2163) * ((_2358 * _2362) + _1066)) * _2382) * _2205);
    float _2535;
    float _2537;
    float _2539;
    if (_2245)
    {
        _2535 = _2471;
        _2537 = _2472;
        _2539 = _2473;
    }
    else
    {
        uint _2541 = _2169 + 2u;
        uint _2545 = _2169 + 10u;
        float _2559 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2541].w)) * _905) * 0.949999988079071044921875);
        float _2560 = _2559 * _2559;
        float _2561 = cbLight._m0[_2541].x + _981;
        float _2562 = cbLight._m0[_2541].y + _982;
        float _2563 = cbLight._m0[_2541].z + _983;
        float _2567 = inversesqrt(dot(vec3(_2561, _2562, _2563), vec3(_2561, _2562, _2563)));
        float _2568 = _2567 * _2561;
        float _2569 = _2567 * _2562;
        float _2570 = _2567 * _2563;
        float _2571 = dot(vec3(_902, _903, _904), vec3(cbLight._m0[_2541].xyz));
        float _4680 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        float _2574 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
        float _2575 = dot(vec3(_902, _903, _904), vec3(_2568, _2569, _2570));
        float _4691 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        float _2578 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
        float _2579 = dot(vec3(cbLight._m0[_2541].xyz), vec3(_2568, _2569, _2570));
        float _4702 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        float _2583 = _2560 * _2560;
        float _2587 = ((_2578 * _2578) * (_2583 + (-1.0))) + 1.0;
        float _2594 = exp2(log2(1.0 - (isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0)))) * 5.0);
        float _2601 = 1.0 - _2560;
        float _2611 = (0.5 / (((_2337 * ((_2574 * _2601) + _2560)) + 9.9999999392252902907785028219223e-09) + (((_2337 * _2601) + _2560) * _2574))) * _2574;
        float _4713 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
        float _2613 = (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0))) * (_2583 / ((_2587 * _2587) * 3.141590118408203125));
        float _2614 = isnan(1.0) ? _2184 : (isnan(_2184) ? 1.0 : min(_2184, 1.0));
        _2535 = (((((_2594 * _2359) + _1063) * cbLight._m0[_2545].x) * _2613) * _2614) + _2471;
        _2537 = (((((_2594 * _2361) + _1065) * cbLight._m0[_2545].y) * _2613) * _2614) + _2472;
        _2539 = (((((_2594 * _2362) + _1066) * cbLight._m0[_2545].z) * _2613) * _2614) + _2473;
    }
    float _2649;
    float _2651;
    float _2653;
    if (_2263)
    {
        _2649 = _2535;
        _2651 = _2537;
        _2653 = _2539;
    }
    else
    {
        uint _2660 = _2169 + 3u;
        uint _2664 = _2169 + 11u;
        float _2678 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2660].w)) * _905) * 0.949999988079071044921875);
        float _2679 = _2678 * _2678;
        float _2680 = cbLight._m0[_2660].x + _981;
        float _2681 = cbLight._m0[_2660].y + _982;
        float _2682 = cbLight._m0[_2660].z + _983;
        float _2686 = inversesqrt(dot(vec3(_2680, _2681, _2682), vec3(_2680, _2681, _2682)));
        float _2687 = _2686 * _2680;
        float _2688 = _2686 * _2681;
        float _2689 = _2686 * _2682;
        float _2690 = dot(vec3(_902, _903, _904), vec3(cbLight._m0[_2660].xyz));
        float _4729 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
        float _2693 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
        float _2694 = dot(vec3(_902, _903, _904), vec3(_2687, _2688, _2689));
        float _4740 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
        float _2697 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
        float _2698 = dot(vec3(cbLight._m0[_2660].xyz), vec3(_2687, _2688, _2689));
        float _4751 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
        float _2702 = _2679 * _2679;
        float _2706 = ((_2697 * _2697) * (_2702 + (-1.0))) + 1.0;
        float _2713 = exp2(log2(1.0 - (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0)))) * 5.0);
        float _2720 = 1.0 - _2679;
        float _2730 = (0.5 / (((_2337 * ((_2693 * _2720) + _2679)) + 9.9999999392252902907785028219223e-09) + (((_2337 * _2720) + _2679) * _2693))) * _2693;
        float _4762 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
        float _2732 = (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0))) * (_2702 / ((_2706 * _2706) * 3.141590118408203125));
        float _2733 = isnan(1.0) ? _2185 : (isnan(_2185) ? 1.0 : min(_2185, 1.0));
        _2649 = (((((_2713 * _2359) + _1063) * cbLight._m0[_2664].x) * _2732) * _2733) + _2535;
        _2651 = (((((_2713 * _2361) + _1065) * cbLight._m0[_2664].y) * _2732) * _2733) + _2537;
        _2653 = (((((_2713 * _2362) + _1066) * cbLight._m0[_2664].z) * _2732) * _2733) + _2539;
    }
    float _2868;
    float _2870;
    float _2872;
    float _2874;
    float _2876;
    float _2878;
    if (_2167.y == 0u)
    {
        float _2808 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2809 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2808;
        float _2810 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2808;
        float _2811 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2808;
        uvec4 _2823 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2824 = _2823.x;
        uint _2835 = uint((float(_2823.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1002) / _2824))) + floor(float(uint(cbSceneParam._m0[85u].x * _1001) / _2824)));
        float _2845 = (log2(_2811 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2846 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
        uint _2849 = uint(isnan(14.0) ? _2846 : (isnan(_2846) ? 14.0 : min(_2846, 14.0)));
        uvec4 _2854 = texelFetch(g_lightClusterGridBuffer, int(((_2849 << 2u) + (_2835 << 6u)) >> 2u));
        uint _2855 = _2854.x;
        uint _2856 = _2823.z;
        float _2956;
        float _2958;
        float _2960;
        float _2962;
        float _2964;
        float _2966;
        if (((((1u << ((_2856 >> 4u) & 15u)) + 4294967295u) & _2855) == 0u) || ((_2856 & 240u) == 0u))
        {
            _2956 = 0.0;
            _2958 = 0.0;
            _2960 = 0.0;
            _2962 = 0.0;
            _2964 = 0.0;
            _2966 = 0.0;
        }
        else
        {
            float _2957;
            float _2959;
            float _2961;
            float _2963;
            float _2965;
            float _2967;
            float _3108 = 0.0;
            float _3109 = 0.0;
            float _3110 = 0.0;
            float _3111 = 0.0;
            float _3112 = 0.0;
            float _3113 = 0.0;
            uint _3114 = 0u;
            uint _3123;
            bool _3124;
            for (;;)
            {
                _3123 = texelFetch(g_lightClassification, int((((_2849 << 5u) + (_2835 << 9u)) + (_3114 << 2u)) >> 2u)).x;
                _3124 = _3123 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3124)
                {
                    frontier_phi_66_pred = _3108;
                    frontier_phi_66_pred_1 = _3113;
                    frontier_phi_66_pred_2 = _3112;
                    frontier_phi_66_pred_3 = _3111;
                    frontier_phi_66_pred_4 = _3110;
                    frontier_phi_66_pred_5 = _3109;
                }
                else
                {
                    float _3253;
                    float _3254;
                    float _3255;
                    float _3256;
                    float _3257;
                    float _3258;
                    uint _3259;
                    _3253 = _3108;
                    _3254 = _3109;
                    _3255 = _3110;
                    _3256 = _3111;
                    _3257 = _3112;
                    _3258 = _3113;
                    _3259 = _3123;
                    float _3180;
                    float _3181;
                    float _3182;
                    float _3183;
                    float _3184;
                    float _3185;
                    for (;;)
                    {
                        uint _3263 = uint(findLSB(_3259)) + (_3114 << 5u);
                        uint _3260 = (_3259 + 4294967295u) & _3259;
                        uint _3265 = _3263 * 48u;
                        vec4 _3279 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3265)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 3u)).x));
                        uint _3285 = (_3263 * 48u) + 4u;
                        vec4 _3298 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3285)).x, texelFetch(g_PointLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3285 + 3u)).x));
                        uint _3304 = (_3263 * 48u) + 8u;
                        vec3 _3315 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3304)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 2u)).x));
                        float _3319 = _3279.x - _2809;
                        float _3320 = _3279.y - _2810;
                        float _3321 = _3279.z - _2811;
                        float _3322 = dot(vec3(_3319, _3320, _3321), vec3(_3319, _3320, _3321));
                        float _3325 = inversesqrt(_3322);
                        float _3326 = _3325 * _3319;
                        float _3327 = _3325 * _3320;
                        float _3328 = _3325 * _3321;
                        float _3329 = dot(vec3(_1020, _1023, _1026), vec3(_3326, _3327, _3328));
                        float _3334 = 1.0 - (_3322 * _3279.w);
                        float _4788 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                        float _3335 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
                        float _3336 = sqrt(_3322) * _3298.w;
                        float _3339 = 1.39999997615814208984375 / (_3336 + 1.39999997615814208984375);
                        float _3340 = _3339 * _3339;
                        float _3343 = ((1.0 - _3340) * _3329) + _3340;
                        float _3346 = _3336 * _3336;
                        float _3350 = ((isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0))) * _3335) / ((_3346 * 0.699999988079071044921875) + 1.0);
                        float _3354 = (-0.0) - _2809;
                        float _3355 = (-0.0) - _2810;
                        float _3356 = (-0.0) - _2811;
                        float _3360 = inversesqrt(dot(vec3(_3354, _3355, _3356), vec3(_3354, _3355, _3356)));
                        float _3361 = _3360 * _3354;
                        float _3362 = _3360 * _3355;
                        float _3363 = _3360 * _3356;
                        float _3371 = exp2(log2(1.0 / ((_3346 * 3.5) + 5.0)) * 0.25);
                        float _3372 = 1.0 - _1095;
                        float _3379 = sqrt(1.0 - ((1.0 - (_3372 * _3372)) * (1.0 - (_3371 * _3371))));
                        float _3380 = _3379 * _3379;
                        float _3381 = _3380 * _3380;
                        float _3382 = _3361 + _3326;
                        float _3383 = _3362 + _3327;
                        float _3384 = _3363 + _3328;
                        float _3388 = inversesqrt(dot(vec3(_3382, _3383, _3384), vec3(_3382, _3383, _3384)));
                        float _3392 = dot(vec3(_1020, _1023, _1026), vec3(_3361, _3362, _3363));
                        float _4804 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                        float _3395 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
                        float _3396 = dot(vec3(_1020, _1023, _1026), vec3(_3388 * _3382, _3388 * _3383, _3388 * _3384));
                        float _4815 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                        float _3399 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
                        float _3403 = ((_3399 * _3399) * (_3381 + (-1.0))) + 1.0;
                        float _3404 = _3339 * _3380;
                        float _3405 = _3404 * _3404;
                        float _3408 = ((1.0 - _3405) * _3329) + _3405;
                        float _4826 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                        float _3409 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
                        float _3410 = 1.0 - _3380;
                        float _3420 = (0.5 / (((_3409 * ((_3395 * _3410) + _3380)) + 9.9999999392252902907785028219223e-09) + (((_3409 * _3410) + _3380) * _3395))) * _3409;
                        float _4837 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                        float _3431 = (((_3381 * 3.1415927410125732421875) * (isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0)))) / ((_3403 * _3403) * ((_3346 * 2.1991131305694580078125) + 3.141590118408203125))) * _3335;
                        _3183 = (_3350 * _3298.x) + _3256;
                        _3184 = (_3350 * _3298.y) + _3257;
                        _3185 = (_3350 * _3298.z) + _3258;
                        _3180 = (_3431 * _3315.x) + _3253;
                        _3181 = (_3431 * _3315.y) + _3254;
                        _3182 = (_3431 * _3315.z) + _3255;
                        if (_3260 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3253 = _3180;
                            _3254 = _3181;
                            _3255 = _3182;
                            _3256 = _3183;
                            _3257 = _3184;
                            _3258 = _3185;
                            _3259 = _3260;
                        }
                    }
                    frontier_phi_66_pred = _3180;
                    frontier_phi_66_pred_1 = _3185;
                    frontier_phi_66_pred_2 = _3184;
                    frontier_phi_66_pred_3 = _3183;
                    frontier_phi_66_pred_4 = _3182;
                    frontier_phi_66_pred_5 = _3181;
                }
                _2957 = frontier_phi_66_pred;
                _2967 = frontier_phi_66_pred_1;
                _2965 = frontier_phi_66_pred_2;
                _2963 = frontier_phi_66_pred_3;
                _2961 = frontier_phi_66_pred_4;
                _2959 = frontier_phi_66_pred_5;
                uint _3115 = _3114 + 1u;
                if (_3115 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3108 = _2957;
                    _3109 = _2959;
                    _3110 = _2961;
                    _3111 = _2963;
                    _3112 = _2965;
                    _3113 = _2967;
                    _3114 = _3115;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2956 = _2957;
            _2958 = _2959;
            _2960 = _2961;
            _2962 = _2963;
            _2964 = _2965;
            _2966 = _2967;
        }
        uvec4 _2970 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2971 = _2970.z;
        uint _2973 = (_2971 >> 8u) & 15u;
        float _3076;
        float _3078;
        float _3080;
        float _3082;
        float _3084;
        float _3086;
        if (((4294967295u << _2973) & _2855) == 0u)
        {
            _3076 = _2956;
            _3078 = _2958;
            _3080 = _2960;
            _3082 = _2962;
            _3084 = _2964;
            _3086 = _2966;
        }
        else
        {
            float _3101 = inversesqrt(dot(vec3(_2809, _2810, _2811), vec3(_2809, _2810, _2811)));
            float _3102 = _3101 * _2809;
            float _3103 = _3101 * _2810;
            float _3104 = _3101 * _2811;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2973 < ((_2971 >> 12u) & 15u))
            {
                float _3077;
                float _3079;
                float _3081;
                float _3083;
                float _3085;
                float _3087;
                float _3236 = _2956;
                float _3237 = _2958;
                float _3238 = _2960;
                float _3239 = _2962;
                float _3240 = _2964;
                float _3241 = _2966;
                uint _3242 = _2973;
                uint _3251;
                bool _3252;
                for (;;)
                {
                    _3251 = texelFetch(g_lightClassification, int((((_2849 << 5u) + (_2835 << 9u)) + (_3242 << 2u)) >> 2u)).x;
                    _3252 = _3251 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3252)
                    {
                        frontier_phi_77_pred = _3241;
                        frontier_phi_77_pred_1 = _3240;
                        frontier_phi_77_pred_2 = _3239;
                        frontier_phi_77_pred_3 = _3238;
                        frontier_phi_77_pred_4 = _3237;
                        frontier_phi_77_pred_5 = _3236;
                    }
                    else
                    {
                        float _3445;
                        float _3446;
                        float _3447;
                        float _3448;
                        float _3449;
                        float _3450;
                        float _3738;
                        float _3739;
                        float _3740;
                        float _3741;
                        float _3742;
                        float _3743;
                        float _3458 = _3236;
                        float _3459 = _3237;
                        float _3460 = _3238;
                        float _3461 = _3239;
                        float _3462 = _3240;
                        float _3463 = _3241;
                        uint _3464 = _3251;
                        uint _3465;
                        vec4 _3490;
                        float _3491;
                        vec4 _3506;
                        vec3 _3518;
                        vec4 _3533;
                        vec4 _3548;
                        float _3594;
                        bool _3595;
                        for (;;)
                        {
                            uint _3475 = ((_3242 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3464));
                            _3465 = (_3464 + 4294967295u) & _3464;
                            uint _3477 = _3475 * 40u;
                            _3490 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3477)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 3u)).x));
                            _3491 = _3490.w;
                            uint _3493 = (_3475 * 40u) + 4u;
                            _3506 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3493)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 3u)).x));
                            uint _3508 = (_3475 * 40u) + 8u;
                            _3518 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3508)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 2u)).x));
                            uint _3520 = (_3475 * 40u) + 16u;
                            _3533 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3520)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 3u)).x));
                            uint _3535 = (_3475 * 40u) + 20u;
                            _3548 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3535)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 3u)).x));
                            uint _3550 = (_3475 * 40u) + 24u;
                            vec4 _3563 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3550)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 3u)).x));
                            uint _3569 = (_3475 * 40u) + 28u;
                            vec4 _3582 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 3u)).x));
                            _3594 = fma(_2811, _3582.z, fma(_2810, _3582.y, _3582.x * _2809)) + _3582.w;
                            _3595 = !((fma(_2811, _3563.z, fma(_2810, _3563.y, _3563.x * _2809)) + _3563.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3595)
                            {
                                float _3622 = _3490.x - _2809;
                                float _3623 = _3490.y - _2810;
                                float _3624 = _3490.z - _2811;
                                float _3625 = dot(vec3(_3622, _3623, _3624), vec3(_3622, _3623, _3624));
                                float _3628 = inversesqrt(_3625);
                                float _3629 = _3628 * _3622;
                                float _3630 = _3628 * _3623;
                                float _3631 = _3628 * _3624;
                                float _3635 = 1.0 - (_3625 / (_3491 * _3491));
                                float _4848 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                                float _3636 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
                                float _3640 = sqrt(_3625) * _3506.w;
                                float _3642 = 1.39999997615814208984375 / (_3640 + 1.39999997615814208984375);
                                float _3643 = _3642 * _3642;
                                float _3646 = ((1.0 - _3643) * dot(vec3(_3629, _3630, _3631), vec3(_1020, _1023, _1026))) + _3643;
                                float _3649 = _3640 * _3640;
                                float _3653 = (fma(_2811, _3533.z, fma(_2810, _3533.y, _3533.x * _2809)) + _3533.w) / _3594;
                                float _3654 = (fma(_2811, _3548.z, fma(_2810, _3548.y, _3548.x * _2809)) + _3548.w) / _3594;
                                float _3658 = 1.0 - dot(vec2(_3653, _3654), vec2(_3653, _3654));
                                float _4864 = isnan(0.0) ? _3658 : (isnan(_3658) ? 0.0 : max(_3658, 0.0));
                                float _3659 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
                                float _3660 = _3659 * (((isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0))) * _3636) / ((_3649 * 0.699999988079071044921875) + 1.0));
                                float _3672 = exp2(log2(1.0 / ((_3649 * 3.5) + 5.0)) * 0.25);
                                float _3673 = 1.0 - _1095;
                                float _3680 = sqrt(1.0 - ((1.0 - (_3673 * _3673)) * (1.0 - (_3672 * _3672))));
                                float _3681 = _3680 * _3680;
                                float _3682 = _3681 * _3681;
                                float _3683 = _3629 - _3102;
                                float _3684 = _3630 - _3103;
                                float _3685 = _3631 - _3104;
                                float _3689 = inversesqrt(dot(vec3(_3683, _3684, _3685), vec3(_3683, _3684, _3685)));
                                float _3693 = dot(vec3(_1020, _1023, _1026), vec3((-0.0) - _3102, (-0.0) - _3103, (-0.0) - _3104));
                                float _4875 = isnan(0.0) ? _3693 : (isnan(_3693) ? 0.0 : max(_3693, 0.0));
                                float _3696 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
                                float _3697 = dot(vec3(_1020, _1023, _1026), vec3(_3689 * _3683, _3689 * _3684, _3689 * _3685));
                                float _4886 = isnan(0.0) ? _3697 : (isnan(_3697) ? 0.0 : max(_3697, 0.0));
                                float _3700 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
                                float _3704 = ((_3700 * _3700) * (_3682 + (-1.0))) + 1.0;
                                float _3705 = _3642 * _3681;
                                float _3706 = _3705 * _3705;
                                float _3712 = ((1.0 - _3706) * dot(vec3(_1020, _1023, _1026), vec3(_3629, _3630, _3631))) + _3706;
                                float _4897 = isnan(0.0) ? _3712 : (isnan(_3712) ? 0.0 : max(_3712, 0.0));
                                float _3713 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
                                float _3714 = 1.0 - _3681;
                                float _3724 = (0.5 / (((_3713 * ((_3696 * _3714) + _3681)) + 9.9999999392252902907785028219223e-09) + (((_3713 * _3714) + _3681) * _3696))) * _3713;
                                float _4908 = isnan(0.0) ? _3724 : (isnan(_3724) ? 0.0 : max(_3724, 0.0));
                                float _3734 = (_3659 * _3636) * (((_3682 * 3.1415927410125732421875) * (isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0)))) / ((_3704 * _3704) * ((_3649 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3660 * _3506.y;
                                frontier_phi_83_pred_1 = _3660 * _3506.x;
                                frontier_phi_83_pred_2 = _3734 * _3518.z;
                                frontier_phi_83_pred_3 = _3734 * _3518.y;
                                frontier_phi_83_pred_4 = _3734 * _3518.x;
                                frontier_phi_83_pred_5 = _3660 * _3506.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3742 = frontier_phi_83_pred;
                            _3741 = frontier_phi_83_pred_1;
                            _3740 = frontier_phi_83_pred_2;
                            _3739 = frontier_phi_83_pred_3;
                            _3738 = frontier_phi_83_pred_4;
                            _3743 = frontier_phi_83_pred_5;
                            _3448 = _3741 + _3461;
                            _3449 = _3742 + _3462;
                            _3450 = _3743 + _3463;
                            _3445 = _3738 + _3458;
                            _3446 = _3739 + _3459;
                            _3447 = _3740 + _3460;
                            if (_3465 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3458 = _3445;
                                _3459 = _3446;
                                _3460 = _3447;
                                _3461 = _3448;
                                _3462 = _3449;
                                _3463 = _3450;
                                _3464 = _3465;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3450;
                        frontier_phi_77_pred_1 = _3449;
                        frontier_phi_77_pred_2 = _3448;
                        frontier_phi_77_pred_3 = _3447;
                        frontier_phi_77_pred_4 = _3446;
                        frontier_phi_77_pred_5 = _3445;
                    }
                    _3087 = frontier_phi_77_pred;
                    _3085 = frontier_phi_77_pred_1;
                    _3083 = frontier_phi_77_pred_2;
                    _3081 = frontier_phi_77_pred_3;
                    _3079 = frontier_phi_77_pred_4;
                    _3077 = frontier_phi_77_pred_5;
                    uint _3243 = _3242 + 1u;
                    if (_3243 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3236 = _3077;
                        _3237 = _3079;
                        _3238 = _3081;
                        _3239 = _3083;
                        _3240 = _3085;
                        _3241 = _3087;
                        _3242 = _3243;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3081;
                frontier_phi_58_59_ladder_1 = _3087;
                frontier_phi_58_59_ladder_2 = _3085;
                frontier_phi_58_59_ladder_3 = _3083;
                frontier_phi_58_59_ladder_4 = _3079;
                frontier_phi_58_59_ladder_5 = _3077;
            }
            else
            {
                frontier_phi_58_59_ladder = _2960;
                frontier_phi_58_59_ladder_1 = _2966;
                frontier_phi_58_59_ladder_2 = _2964;
                frontier_phi_58_59_ladder_3 = _2962;
                frontier_phi_58_59_ladder_4 = _2958;
                frontier_phi_58_59_ladder_5 = _2956;
            }
            _3076 = frontier_phi_58_59_ladder_5;
            _3078 = frontier_phi_58_59_ladder_4;
            _3080 = frontier_phi_58_59_ladder;
            _3082 = frontier_phi_58_59_ladder_3;
            _3084 = frontier_phi_58_59_ladder_2;
            _3086 = frontier_phi_58_59_ladder_1;
        }
        float _3091 = isnan(1.0) ? _1079 : (isnan(_1079) ? 1.0 : min(_1079, 1.0));
        _2868 = (_3091 * _3082) + _2301;
        _2870 = (_3091 * _3084) + _2303;
        _2872 = (_3091 * _3086) + _2305;
        _2874 = ((_3076 * _1063) * _3091) + _2649;
        _2876 = ((_3078 * _1065) * _3091) + _2651;
        _2878 = ((_3080 * _1066) * _3091) + _2653;
    }
    else
    {
        _2868 = _2301;
        _2870 = _2303;
        _2872 = _2305;
        _2874 = _2649;
        _2876 = _2651;
        _2878 = _2653;
    }
    float _4924 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
    float _4935 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    float _4946 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
    float _2895 = ((isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0))) * (_2868 + ((isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0))) * _1079))) + ((_2874 + ((isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0))) * _1918)) * cbPerFrame._m0[3u].x);
    float _2896 = ((isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0))) * (_2870 + ((isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0))) * _1079))) + ((_2876 + ((isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0))) * _1918)) * cbPerFrame._m0[3u].x);
    float _2897 = ((isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0))) * (_2872 + ((isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0))) * _1079))) + ((_2878 + ((isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0))) * _1918)) * cbPerFrame._m0[3u].x);
    uint _2898 = _285 + 6u;
    float _2906 = _1001 / cbSceneParam._m0[86u].x;
    float _2907 = _1002 / cbSceneParam._m0[86u].y;
    vec4 _2921 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2906, _2907, (log2((isnan(cbSceneParam._m0[77u].w) ? _924 : (isnan(_924) ? cbSceneParam._m0[77u].w : min(_924, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2923 = _2921.x;
    float _2924 = _2921.y;
    float _2925 = _2921.z;
    float _2926 = _2921.w;
    float _3018;
    float _3020;
    float _3022;
    float _3024;
    if (_924 > cbSceneParam._m0[78u].w)
    {
        float _2981 = isnan(_924) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _924 : min(cbSceneParam._m0[80u].w, _924));
        float _2982 = _2981 / _924;
        float _2993 = _2982 * _974;
        float _2994 = _975 * _2982;
        float _2995 = (-0.0) - _2994;
        float _2996 = _2982 * _976;
        float _2998 = (cbSceneParam._m0[77u].w * _2995) / _2981;
        float _2999 = _2998 + cbSceneParam._m0[79u].w;
        float _3000 = cbSceneParam._m0[79u].w - _2994;
        float _3006 = sqrt(((_2993 * _2993) + (_2994 * _2994)) + (_2996 * _2996));
        float _3009 = (1.0 - (cbSceneParam._m0[77u].w / _2981)) * _3006;
        float _3014 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3016 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3193;
        if (abs((_2995 - _2998) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3193 = ((((_2999 > 0.0) ? exp2(_3014 * _2999) : (2.0 - exp2(_3016 * _2999))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3009;
        }
        else
        {
            float _3137 = 1.0 / cbSceneParam._m0[80u].x;
            float _3138 = isnan(_3000) ? _2999 : (isnan(_2999) ? _3000 : max(_2999, _3000));
            float _3139 = isnan(_3000) ? _2999 : (isnan(_2999) ? _3000 : min(_2999, _3000));
            float _3148 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : min(_3138, 0.0));
            float _3149 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : min(_3139, 0.0));
            _3193 = ((abs(_3006 / _2995) * cbSceneParam._m0[80u].y) * ((((_3148 - _3149) * 2.0) - ((exp2(_3014 * (isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0)))) - exp2(_3014 * (isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0))))) * _3137)) - ((exp2(_3016 * _3148) - exp2(_3016 * _3149)) * _3137))) + (_3009 * cbSceneParam._m0[80u].z);
        }
        vec4 _3195 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2906, _2907, 1.0), 0.0);
        float _3204 = exp2((_3193 * (-1.44269502162933349609375)) * (1.0 - _3195.w));
        float _3205 = log2(_3204);
        float _3221 = log2(_2926);
        _3018 = (exp2(_3221 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3205 * cbSceneParam._m0[78u].x)) * _3195.x) / cbSceneParam._m0[78u].x)) + _2923;
        _3020 = (exp2(_3221 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3205 * cbSceneParam._m0[78u].y)) * _3195.y) / cbSceneParam._m0[78u].y)) + _2924;
        _3022 = (exp2(_3221 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3205 * cbSceneParam._m0[78u].z)) * _3195.z) / cbSceneParam._m0[78u].z)) + _2925;
        _3024 = _3204 * _2926;
    }
    else
    {
        _3018 = _2923;
        _3020 = _2924;
        _3022 = _2925;
        _3024 = _2926;
    }
    bool _3231;
    vec4 _3034;
    vec4 _3056;
    float _3058;
    float _3062;
    float _3063;
    float _3064;
    float _3065;
    bool _3075;
    for (;;)
    {
        _3034 = cbMatDynParam._m0[0u];
        float _3036 = roundEven(_3034.y);
        bool _3037 = _3036 == 3.0;
        float _3038 = log2(_3024);
        float _3045 = exp2(_3038 * cbSceneParam._m0[78u].x) * _2895;
        float _3046 = exp2(_3038 * cbSceneParam._m0[78u].y) * _2896;
        float _3047 = exp2(_3038 * cbSceneParam._m0[78u].z) * _2897;
        float _3054 = _990 + (-0.5);
        _3056 = cbMtdParam._m0[1u];
        _3058 = _3056.y * _3054;
        float _3061 = (_3036 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3062 = _3061 * (_3037 ? _3045 : (_3045 + (cbSceneParam._m0[72u].w * _3018)));
        _3063 = _3061 * (_3037 ? _3046 : (_3046 + (cbSceneParam._m0[72u].w * _3020)));
        _3064 = _3061 * (_3037 ? _3047 : (_3047 + (cbSceneParam._m0[72u].w * _3022)));
        _3065 = _3054 * 0.999000012874603271484375;
        _3075 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3075)
        {
            if ((cbInstanceData._m0[_285 + 7u].x + _3065) < 0.5)
            {
                _3231 = true;
                break;
            }
        }
        uint _3172 = _1039 + uint(_3034.w);
        if ((cbInstanceData._m0[_3172].w < 1.0) && ((cbInstanceData._m0[_3172].w + _3065) < 0.5))
        {
            _3231 = true;
            break;
        }
        if ((_3058 + 1.0) < _3056.x)
        {
            _3231 = true;
            break;
        }
        _3231 = false;
        break;
    }
    float _3436;
    if (_3231)
    {
        discard_state = true;
        _3436 = 0.0;
    }
    else
    {
        _3436 = cbInstanceData._m0[_2898].w;
    }
    SV_Target.x = _3062;
    SV_Target.y = _3063;
    SV_Target.z = _3064;
    SV_Target.w = _3436;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2898].w;
    discard_exit();
}


