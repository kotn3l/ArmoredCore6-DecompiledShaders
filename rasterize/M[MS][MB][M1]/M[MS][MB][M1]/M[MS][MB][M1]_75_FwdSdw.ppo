#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1242;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = _236 * NORMAL.x;
    float _238 = _236 * NORMAL.y;
    float _239 = _236 * NORMAL.z;
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _249 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _249 + 1u;
    uint _258 = _249 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_249].x * cbInstanceData._m0[_249].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _295 = _289.x * cbMtdParam._m0[11u].x;
    float _296 = _289.y * cbMtdParam._m0[11u].y;
    float _297 = _289.z * cbMtdParam._m0[11u].z;
    vec4 _316 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _354 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _356 = _354.x;
    float _368 = dot(vec4(_356, _354.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _385 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_356 - _368) * cbMtdParam._m0[24u].y) + _368) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3853 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _386 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _393 = (_386 * ((_316.x * cbMtdParam._m0[12u].x) - _295)) + _295;
    float _394 = (_386 * ((_316.y * cbMtdParam._m0[12u].y) - _296)) + _296;
    float _395 = (_386 * ((_316.z * cbMtdParam._m0[12u].z) - _297)) + _297;
    vec4 _408 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _425 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _427 = _425.x;
    float _428 = _425.y;
    float _429 = _425.z;
    float _438 = ((_408.z - _429) * _386) + _429;
    float _441 = ((((_408.x - _427) * _386) + _427) * 2.0) + (-1.0);
    float _443 = ((((_408.y - _428) * _386) + _428) * 2.0) + (-1.0);
    float _444 = dot(vec2(_441, _443), vec2(_441, _443));
    float _3864 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _449 = sqrt(1.0 - (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))));
    vec4 _462 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _476 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _268) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _269) + cbTextureTilingScale._m0[19u].w));
    float _478 = _476.x;
    float _479 = 1.0 - _478;
    float _507 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_478 - _479) * cbMtdParam._m0[24u].w) + _479) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3875 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _508 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
    float _516 = ((((cbMtdParam._m0[10u].x - _393) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _508) + _393;
    float _517 = ((((cbMtdParam._m0[10u].y - _394) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _508) + _394;
    float _518 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _395)) * _508) + _395;
    vec4 _530 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _544 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _546 = _544.x;
    float _564 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _268) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _269) + cbTextureTilingScale._m0[9u].w)).x - _546) * _386) + _546;
    float _568 = ((_530.x - _564) * cbMtdParam._m0[19u].z) + _564;
    float _570 = _568 - (_568 * _508);
    float _574 = ((cbMtdParam._m0[23u].y - _438) * _508) + _438;
    vec4 _593 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _268) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _269) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _595 = _593.x;
    float _596 = _593.y;
    float _600 = dot(vec4(cbMtdParam._m0[29u].yzw, 0.0), vec4(_237, _238, _239, 0.0));
    vec4 _615 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _268) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _269) + cbTextureTilingScale._m0[18u].w));
    float _617 = _615.x;
    float _622 = fract(_615.w + cbPerFrame._m0[22u].x);
    float _624 = (1.0 - _622) * _617;
    float _629 = ((_622 + (-1.0)) + _617) * 9.0;
    float _631 = ((_617 + (-1.0)) + _622) * 9.0;
    float _632 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _633 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _647 = (_624 * ((_615.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _632 : (isnan(_632) ? 3.0 : min(_632, 3.0))) * 3.1415927410125732421875);
    float _649 = (_624 * ((_615.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _633 : (isnan(_633) ? 3.0 : min(_633, 3.0))) * 3.1415927410125732421875);
    float _653 = inversesqrt(dot(vec3(_647, _649, 1.0), vec3(_647, _649, 1.0)));
    float _669 = (((((0.5 - _595) + ((_647 * 0.5) * _653)) * _600) + _595) * 2.0) + (-1.0);
    float _670 = (((((0.5 - _596) + ((_653 * 0.5) * _649)) * _600) + _596) * 2.0) + (-1.0);
    float _671 = dot(vec2(_669, _670), vec2(_669, _670));
    float _3906 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _687 = ((((cbMtdParam._m0[22u].z * _441) - _441) + _669) * _508) + _441;
    float _688 = ((((cbMtdParam._m0[22u].z * _443) - _443) + _670) * _508) + _443;
    float _689 = (_508 * (sqrt(1.0 - (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0)))) - _449)) + _449;
    float _691 = cbMtdParam._m0[22u].x + _462.w;
    float _694 = fma(_689, _237, fma(_688, _243 * TANGENT.x, (_229 * _221) * _687));
    float _697 = fma(_689, _238, fma(_688, _243 * TANGENT.y, (_229 * _222) * _687));
    float _700 = fma(_689, _239, fma(_688, _243 * TANGENT.z, (_229 * _223) * _687));
    float _704 = inversesqrt(dot(vec3(_694, _697, _700), vec3(_694, _697, _700)));
    float _705 = _704 * _694;
    float _706 = _704 * _697;
    float _707 = _704 * _700;
    float _3917 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _708 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _3928 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _3939 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _3950 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _3961 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _3972 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _713 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _727 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _767 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _777 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _767);
    float _778 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _767);
    float _779 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _767);
    float _783 = inversesqrt(dot(vec3(_777, _778, _779), vec3(_777, _778, _779)));
    float _784 = _777 * _783;
    float _785 = _778 * _783;
    float _786 = _779 * _783;
    float _792 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _793 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _811 = fma(_707, cbSceneParam._m0[5u].z, fma(_706, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _705));
    float _814 = fma(_707, cbSceneParam._m0[6u].z, fma(_706, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _705));
    float _817 = fma(_707, cbSceneParam._m0[7u].z, fma(_706, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _705));
    uint _831 = (_249 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _837 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0)))) * cbInstanceData._m0[_831].x;
    float _838 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0)))) * cbInstanceData._m0[_831].y;
    float _839 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0)))) * cbInstanceData._m0[_831].z;
    float _3983 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _840 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _3994 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _841 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    float _4005 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _842 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    float _843 = 1.0 - _713;
    float _844 = _840 * _843;
    float _845 = _841 * _843;
    float _846 = _842 * _843;
    float _851 = (_840 + (-0.039999999105930328369140625)) * _713;
    float _852 = (_841 + (-0.039999999105930328369140625)) * _713;
    float _853 = (_842 + (-0.039999999105930328369140625)) * _713;
    float _854 = _851 + 0.039999999105930328369140625;
    float _856 = _852 + 0.039999999105930328369140625;
    float _857 = _853 + 0.039999999105930328369140625;
    vec4 _866 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _792, cbSceneParam._m0[86u].y * _793));
    float _870 = ((isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * TEXCOORD_5.w) * _866.x;
    float _871 = dot(vec3(_705, _706, _707), vec3(_784, _785, _786));
    float _874 = _871 * 2.0;
    float _878 = (_874 * _705) - _784;
    float _879 = (_874 * _706) - _785;
    float _880 = (_874 * _707) - _786;
    float _884 = abs(dot(vec3(_784, _785, _786), vec3(_705, _706, _707)));
    float _4016 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _886 = sqrt(_708);
    float _898 = exp2((_886 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_886 * 3.0));
    float _904 = (1.0 - _898) * ((_886 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _905 = _898 * _886;
    float _933 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _937 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _941 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1241;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _967 = fma(_941, cbModelParam._m0[26u].z, fma(_937, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _933));
        float _971 = fma(_941, cbModelParam._m0[27u].z, fma(_937, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _933));
        float _975 = fma(_941, cbModelParam._m0[28u].z, fma(_937, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _933));
        float _999 = _933 + _705;
        float _1000 = _937 + _706;
        float _1001 = _941 + _707;
        float _1011 = fma(_1001, cbModelParam._m0[26u].z, fma(_1000, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _999)) - _967;
        float _1012 = fma(_1001, cbModelParam._m0[27u].z, fma(_1000, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _999)) - _971;
        float _1013 = fma(_1001, cbModelParam._m0[28u].z, fma(_1000, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _999)) - _975;
        float _1017 = inversesqrt(dot(vec3(_1011, _1012, _1013), vec3(_1011, _1012, _1013)));
        float _1030 = ((_1017 * _1011) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_967 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1031 = ((_1017 * _1012) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_971 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1032 = ((_1017 * _1013) / cbModelParam._m0[34u].z) + ((((((_975 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1030, _1031, _1032), 0.0);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1030, _1031, _1032), 0.0);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1030, _1031, _1032), 0.0);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1030, _1031, _1032), 0.0);
        float _1069 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1070 = _1069 * (_1035.x + (-0.5));
        float _1071 = _1069 * (_1035.y + (-0.5));
        float _1072 = _1069 * (_1035.z + (-0.5));
        float _1079 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1080 = _1079 * (_1042.x + (-0.5));
        float _1081 = _1079 * (_1042.y + (-0.5));
        float _1082 = _1079 * (_1042.z + (-0.5));
        float _1089 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1049.x + (-0.5));
        float _1091 = _1089 * (_1049.y + (-0.5));
        float _1092 = _1089 * (_1049.z + (-0.5));
        float _1099 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1056.x + (-0.5));
        float _1101 = _1099 * (_1056.y + (-0.5));
        float _1102 = _1099 * (_1056.z + (-0.5));
        float _1103 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1104 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1105 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1106 = _1070 * 0.5;
        float _1107 = _1080 * 0.5;
        float _1108 = _1090 * 0.5;
        float _1109 = dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108));
        float _1114 = (_1109 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1109);
        float _1123 = (dot(vec3(_705, _706, _707), vec3(_1114 * _1106, _1114 * _1107, _1114 * _1108)) + 1.0) * 0.5;
        float _4042 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1133 = sqrt(((_1107 * _1107) + (_1106 * _1106)) + (_1108 * _1108)) / (_1103 + 9.9999997473787516355514526367188e-06);
        float _4053 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1135 = _1134 * 2.0;
        float _1139 = (1.0 - _1134) / (_1134 + 1.0);
        float _4064 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1149 = ((((1.0 - _1140) * (_1135 + 2.0)) * exp2(log2(isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * (_1135 + 1.0))) + _1140) * _1103;
        float _1150 = _1071 * 0.5;
        float _1151 = _1081 * 0.5;
        float _1152 = _1091 * 0.5;
        float _1153 = dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152));
        float _1158 = (_1153 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1153);
        float _1166 = (dot(vec3(_705, _706, _707), vec3(_1158 * _1150, _1158 * _1151, _1158 * _1152)) + 1.0) * 0.5;
        float _4075 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1175 = sqrt(((_1151 * _1151) + (_1150 * _1150)) + (_1152 * _1152)) / (_1104 + 9.9999997473787516355514526367188e-06);
        float _4086 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1177 = _1176 * 2.0;
        float _1181 = (1.0 - _1176) / (_1176 + 1.0);
        float _4097 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1191 = ((((1.0 - _1182) * (_1177 + 2.0)) * exp2(log2(isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * (_1177 + 1.0))) + _1182) * _1104;
        float _1192 = _1072 * 0.5;
        float _1193 = _1082 * 0.5;
        float _1194 = _1092 * 0.5;
        float _1195 = dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194));
        float _1200 = (_1195 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1195);
        float _1208 = (dot(vec3(_705, _706, _707), vec3(_1200 * _1192, _1200 * _1193, _1200 * _1194)) + 1.0) * 0.5;
        float _4108 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1217 = sqrt(((_1193 * _1193) + (_1192 * _1192)) + (_1194 * _1194)) / (_1105 + 9.9999997473787516355514526367188e-06);
        float _4119 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _1219 = _1218 * 2.0;
        float _1223 = (1.0 - _1218) / (_1218 + 1.0);
        float _4130 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1233 = ((((1.0 - _1224) * (_1219 + 2.0)) * exp2(log2(isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * (_1219 + 1.0))) + _1224) * _1105;
        _1241 = _1072;
        _1243 = _1071;
        _1244 = _1070;
        _1245 = _1082;
        _1246 = _1081;
        _1247 = _1080;
        _1248 = _1092;
        _1249 = _1091;
        _1250 = _1090;
        _1251 = _1105;
        _1252 = _1104;
        _1253 = _1103;
        _1254 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)));
        _1255 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)));
        _1256 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)));
    }
    else
    {
        _1241 = _1242;
        _1243 = _1242;
        _1244 = _1242;
        _1245 = _1242;
        _1246 = _1242;
        _1247 = _1242;
        _1248 = _1242;
        _1249 = _1242;
        _1250 = _1242;
        _1251 = _1242;
        _1252 = _1242;
        _1253 = _1242;
        _1254 = 0.0;
        _1255 = 0.0;
        _1256 = 0.0;
    }
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1281 = fma(_941, cbModelParam._m0[30u].z, fma(_937, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _933));
        float _1285 = fma(_941, cbModelParam._m0[31u].z, fma(_937, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _933));
        float _1289 = fma(_941, cbModelParam._m0[32u].z, fma(_937, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _933));
        float _1312 = _933 + _705;
        float _1313 = _937 + _706;
        float _1314 = _941 + _707;
        float _1324 = fma(_1314, cbModelParam._m0[30u].z, fma(_1313, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1312)) - _1281;
        float _1325 = fma(_1314, cbModelParam._m0[31u].z, fma(_1313, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1312)) - _1285;
        float _1326 = fma(_1314, cbModelParam._m0[32u].z, fma(_1313, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1312)) - _1289;
        float _1330 = inversesqrt(dot(vec3(_1324, _1325, _1326), vec3(_1324, _1325, _1326)));
        float _1343 = ((_1330 * _1324) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1281 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1344 = ((_1330 * _1325) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1285 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1345 = ((_1330 * _1326) / cbModelParam._m0[35u].z) + ((((((_1289 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1347 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1343, _1344, _1345), 0.0);
        vec4 _1354 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1343, _1344, _1345), 0.0);
        vec4 _1361 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1343, _1344, _1345), 0.0);
        vec4 _1368 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1343, _1344, _1345), 0.0);
        float _1380 = exp2((_1347.w + (-0.5)) * 20.0) * 2.0;
        float _1381 = _1380 * (_1347.x + (-0.5));
        float _1382 = _1380 * (_1347.y + (-0.5));
        float _1383 = _1380 * (_1347.z + (-0.5));
        float _1390 = exp2((_1354.w + (-0.5)) * 20.0) * 2.0;
        float _1391 = _1390 * (_1354.x + (-0.5));
        float _1392 = _1390 * (_1354.y + (-0.5));
        float _1393 = _1390 * (_1354.z + (-0.5));
        float _1400 = exp2((_1361.w + (-0.5)) * 20.0) * 2.0;
        float _1401 = _1400 * (_1361.x + (-0.5));
        float _1402 = _1400 * (_1361.y + (-0.5));
        float _1403 = _1400 * (_1361.z + (-0.5));
        float _1410 = exp2((_1368.w + (-0.5)) * 20.0) * 2.0;
        float _1411 = _1410 * (_1368.x + (-0.5));
        float _1412 = _1410 * (_1368.y + (-0.5));
        float _1413 = _1410 * (_1368.z + (-0.5));
        float _1414 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1415 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1416 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1417 = _1381 * 0.5;
        float _1418 = _1391 * 0.5;
        float _1419 = _1401 * 0.5;
        float _1420 = dot(vec3(_1417, _1418, _1419), vec3(_1417, _1418, _1419));
        float _1425 = (_1420 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1420);
        float _1433 = (dot(vec3(_705, _706, _707), vec3(_1425 * _1417, _1425 * _1418, _1425 * _1419)) + 1.0) * 0.5;
        float _4171 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1442 = sqrt(((_1418 * _1418) + (_1417 * _1417)) + (_1419 * _1419)) / (_1414 + 9.9999997473787516355514526367188e-06);
        float _4182 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1444 = _1443 * 2.0;
        float _1448 = (1.0 - _1443) / (_1443 + 1.0);
        float _4193 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1458 = ((((1.0 - _1449) * (_1444 + 2.0)) * exp2(log2(isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_1444 + 1.0))) + _1449) * _1414;
        float _1459 = _1382 * 0.5;
        float _1460 = _1392 * 0.5;
        float _1461 = _1402 * 0.5;
        float _1462 = dot(vec3(_1459, _1460, _1461), vec3(_1459, _1460, _1461));
        float _1467 = (_1462 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1462);
        float _1475 = (dot(vec3(_705, _706, _707), vec3(_1467 * _1459, _1467 * _1460, _1467 * _1461)) + 1.0) * 0.5;
        float _4204 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1484 = sqrt(((_1460 * _1460) + (_1459 * _1459)) + (_1461 * _1461)) / (_1415 + 9.9999997473787516355514526367188e-06);
        float _4215 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _1486 = _1485 * 2.0;
        float _1490 = (1.0 - _1485) / (_1485 + 1.0);
        float _4226 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _1500 = ((((1.0 - _1491) * (_1486 + 2.0)) * exp2(log2(isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (_1486 + 1.0))) + _1491) * _1415;
        float _1501 = _1383 * 0.5;
        float _1502 = _1393 * 0.5;
        float _1503 = _1403 * 0.5;
        float _1504 = dot(vec3(_1501, _1502, _1503), vec3(_1501, _1502, _1503));
        float _1509 = (_1504 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1504);
        float _1517 = (dot(vec3(_705, _706, _707), vec3(_1509 * _1501, _1509 * _1502, _1509 * _1503)) + 1.0) * 0.5;
        float _4237 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1526 = sqrt(((_1502 * _1502) + (_1501 * _1501)) + (_1503 * _1503)) / (_1416 + 9.9999997473787516355514526367188e-06);
        float _4248 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _1528 = _1527 * 2.0;
        float _1532 = (1.0 - _1527) / (_1527 + 1.0);
        float _4259 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _1542 = ((((1.0 - _1533) * (_1528 + 2.0)) * exp2(log2(isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * (_1528 + 1.0))) + _1533) * _1416;
        _1550 = _1383;
        _1551 = _1382;
        _1552 = _1381;
        _1553 = _1393;
        _1554 = _1392;
        _1555 = _1391;
        _1556 = _1403;
        _1557 = _1402;
        _1558 = _1401;
        _1559 = _1416;
        _1560 = _1415;
        _1561 = _1414;
        _1562 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)));
        _1563 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)));
        _1564 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0)));
    }
    else
    {
        _1550 = _1242;
        _1551 = _1242;
        _1552 = _1242;
        _1553 = _1242;
        _1554 = _1242;
        _1555 = _1242;
        _1556 = _1242;
        _1557 = _1242;
        _1558 = _1242;
        _1559 = _1242;
        _1560 = _1242;
        _1561 = _1242;
        _1562 = 0.0;
        _1563 = 0.0;
        _1564 = 0.0;
    }
    float _1574 = (cbModelParam._m0[1u].x * (_1562 - _1254)) + _1254;
    float _1575 = (cbModelParam._m0[1u].x * (_1563 - _1255)) + _1255;
    float _1576 = (cbModelParam._m0[1u].x * (_1564 - _1256)) + _1256;
    float _1597 = fma(_1576, cbSceneParam._m0[89u].z, fma(_1575, cbSceneParam._m0[89u].y, _1574 * cbSceneParam._m0[89u].x));
    float _1600 = fma(_1576, cbSceneParam._m0[90u].z, fma(_1575, cbSceneParam._m0[90u].y, _1574 * cbSceneParam._m0[90u].x));
    float _1603 = fma(_1576, cbSceneParam._m0[91u].z, fma(_1575, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1574));
    float _1618 = _878 * 0.5;
    float _1619 = _879 * 0.5;
    float _1620 = _880 * 0.5;
    float _1621 = dot(vec4(_1618, _1619, _1620, 1.0), vec4(_1552, _1555, _1558, _1561));
    float _1624 = dot(vec4(_1618, _1619, _1620, 1.0), vec4(_1551, _1554, _1557, _1560));
    float _1627 = dot(vec4(_1618, _1619, _1620, 1.0), vec4(_1550, _1553, _1556, _1559));
    float _1661;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1634 = dot(vec4(_1618, _1619, _1620, 1.0), vec4(_1241, _1245, _1248, _1251));
        float _1638 = dot(vec4(_1618, _1619, _1620, 1.0), vec4(_1243, _1246, _1249, _1252));
        float _1642 = dot(vec4(_1618, _1619, _1620, 1.0), vec4(_1244, _1247, _1250, _1253));
        float _1649 = dot(vec4(cbModelParam._m0[39u]), vec4(_1618, _1619, _1620, 1.0));
        _1661 = dot(vec3(isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)), isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)), isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1649) ? 0.0 : (isnan(0.0) ? _1649 : max(0.0, _1649))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1661 = 1.0;
    }
    float _1672;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1663 = dot(vec4(cbModelParam._m0[40u]), vec4(_1618, _1619, _1620, 1.0));
        _1672 = dot(vec3(isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)), isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)), isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1663) ? 0.0 : (isnan(0.0) ? _1663 : max(0.0, _1663))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1672 = 1.0;
    }
    float _1676 = (_1672 * cbModelParam._m0[1u].x) + (_1661 * (1.0 - cbModelParam._m0[1u].x));
    float _1686 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _708);
    float _1687 = isnan(_1686) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1686 : min(cbModelParam._m0[25u].z, _1686));
    float _1769;
    float _1771;
    float _1773;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1736 = fma(_941, cbModelParam._m0[13u].z, fma(_937, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _933)) + cbModelParam._m0[13u].w;
        float _1740 = fma(_941, cbModelParam._m0[14u].z, fma(_937, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _933)) + cbModelParam._m0[14u].w;
        float _1744 = fma(_941, cbModelParam._m0[15u].z, fma(_937, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _933)) + cbModelParam._m0[15u].w;
        float _1747 = fma(_880, cbModelParam._m0[13u].z, fma(_879, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _878));
        float _1750 = fma(_880, cbModelParam._m0[14u].z, fma(_879, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _878));
        float _1753 = fma(_880, cbModelParam._m0[15u].z, fma(_879, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _878));
        float _1781;
        if (_1747 > 0.0)
        {
            _1781 = abs((1.0 - _1736) / _1747);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1747 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1736 + 1.0) / _1747);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1781 = frontier_phi_14_12_ladder;
        }
        float _1953;
        if (_1750 > 0.0)
        {
            _1953 = abs((1.0 - _1740) / _1750);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1750 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1740 + 1.0) / _1750);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1953 = frontier_phi_23_19_ladder;
        }
        float _2248;
        if (_1753 > 0.0)
        {
            _2248 = abs((1.0 - _1744) / _1753);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1753 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1744 + 1.0) / _1753);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2248 = frontier_phi_35_30_ladder;
        }
        float _2250 = isnan(_1953) ? _1781 : (isnan(_1781) ? _1953 : min(_1781, _1953));
        float _2251 = isnan(_2248) ? _2250 : (isnan(_2250) ? _2248 : min(_2250, _2248));
        float _2255 = (_2251 * _1747) + _1736;
        float _2256 = (_2251 * _1750) + _1740;
        float _2257 = (_2251 * _1753) + _1744;
        float _2258 = _2251 * 9.9999997473787516355514526367188e-05;
        float _2260 = (-1.0) - _2258;
        float _2262 = _2258 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2257 > _2262) || ((_2257 < _2260) || ((_2256 > _2262) || ((_2256 < _2260) || ((_2255 < _2260) || (_2255 > _2262))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2402 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2257, cbModelParam._m0[9u].z, fma(_2256, cbModelParam._m0[9u].y, _2255 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2257, cbModelParam._m0[10u].z, fma(_2256, cbModelParam._m0[10u].y, _2255 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2257, cbModelParam._m0[11u].z, fma(_2256, cbModelParam._m0[11u].y, _2255 * cbModelParam._m0[11u].x))), _1687);
            frontier_phi_13_35_ladder = _2402.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2402.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2402.x * cbModelParam._m0[1u].y;
        }
        _1769 = frontier_phi_13_35_ladder_2;
        _1771 = frontier_phi_13_35_ladder_1;
        _1773 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1757 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_878, _879, _880), _1687);
        _1769 = _1757.x * cbModelParam._m0[1u].y;
        _1771 = _1757.y * cbModelParam._m0[1u].y;
        _1773 = _1757.z * cbModelParam._m0[1u].y;
    }
    float _1777 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _708);
    float _1778 = isnan(_1777) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1777 : min(cbModelParam._m0[25u].w, _1777));
    float _1868;
    float _1870;
    float _1872;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1832 = fma(_941, cbModelParam._m0[21u].z, fma(_937, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _933)) + cbModelParam._m0[21u].w;
        float _1836 = fma(_941, cbModelParam._m0[22u].z, fma(_937, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _933)) + cbModelParam._m0[22u].w;
        float _1840 = fma(_941, cbModelParam._m0[23u].z, fma(_937, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _933)) + cbModelParam._m0[23u].w;
        float _1843 = fma(_880, cbModelParam._m0[21u].z, fma(_879, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _878));
        float _1846 = fma(_880, cbModelParam._m0[22u].z, fma(_879, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _878));
        float _1849 = fma(_880, cbModelParam._m0[23u].z, fma(_879, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _878));
        float _1958;
        if (_1843 > 0.0)
        {
            _1958 = abs((1.0 - _1832) / _1843);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1843 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1832 + 1.0) / _1843);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1958 = frontier_phi_25_21_ladder;
        }
        float _2275;
        if (_1846 > 0.0)
        {
            _2275 = abs((1.0 - _1836) / _1846);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1846 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1836 + 1.0) / _1846);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2275 = frontier_phi_37_32_ladder;
        }
        float _2613;
        if (_1849 > 0.0)
        {
            _2613 = abs((1.0 - _1840) / _1849);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1849 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1840 + 1.0) / _1849);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2613 = frontier_phi_47_44_ladder;
        }
        float _2615 = isnan(_2275) ? _1958 : (isnan(_1958) ? _2275 : min(_1958, _2275));
        float _2616 = isnan(_2613) ? _2615 : (isnan(_2615) ? _2613 : min(_2615, _2613));
        float _2620 = (_2616 * _1843) + _1832;
        float _2621 = (_2616 * _1846) + _1836;
        float _2622 = (_2616 * _1849) + _1840;
        float _2623 = _2616 * 9.9999997473787516355514526367188e-05;
        float _2624 = (-1.0) - _2623;
        float _2626 = _2623 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2622 > _2626) || ((_2622 < _2624) || ((_2621 > _2626) || ((_2621 < _2624) || ((_2620 < _2624) || (_2620 > _2626))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2744 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2622, cbModelParam._m0[17u].z, fma(_2621, cbModelParam._m0[17u].y, _2620 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2622, cbModelParam._m0[18u].z, fma(_2621, cbModelParam._m0[18u].y, _2620 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2622, cbModelParam._m0[19u].z, fma(_2621, cbModelParam._m0[19u].y, _2620 * cbModelParam._m0[19u].x))), _1778);
            frontier_phi_22_47_ladder = _2744.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2744.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2744.x * cbModelParam._m0[1u].z;
        }
        _1868 = frontier_phi_22_47_ladder_2;
        _1870 = frontier_phi_22_47_ladder_1;
        _1872 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1852 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_878, _879, _880), _1778);
        _1868 = _1852.x * cbModelParam._m0[1u].z;
        _1870 = _1852.y * cbModelParam._m0[1u].z;
        _1872 = _1852.z * cbModelParam._m0[1u].z;
    }
    float _1885 = (((_904 * _854) + _905) * _870) * ((cbModelParam._m0[1u].w * (_1868 - _1769)) + _1769);
    float _1887 = (((_904 * _856) + _905) * _870) * ((cbModelParam._m0[1u].w * (_1870 - _1771)) + _1771);
    float _1889 = (((_904 * _857) + _905) * _870) * ((cbModelParam._m0[1u].w * (_1872 - _1773)) + _1773);
    float _1892 = fma(_1889, cbSceneParam._m0[89u].z, fma(_1887, cbSceneParam._m0[89u].y, _1885 * cbSceneParam._m0[89u].x));
    float _1895 = fma(_1889, cbSceneParam._m0[90u].z, fma(_1887, cbSceneParam._m0[90u].y, _1885 * cbSceneParam._m0[90u].x));
    float _1898 = fma(_1889, cbSceneParam._m0[91u].z, fma(_1887, cbSceneParam._m0[91u].y, _1885 * cbSceneParam._m0[91u].x));
    float _1932 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1936 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1940 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1944 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1945 = _1932 / _1944;
    float _1946 = _1936 / _1944;
    float _1947 = _1940 / _1944;
    float _2094;
    float _2095;
    float _2096;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1974 = ((uint(_1947 > cbSceneParam._m0[59u].y) + uint(_1947 > cbSceneParam._m0[59u].x)) + uint(_1947 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1975 = _1974 + 43u;
        uint _1983 = _1974 + 44u;
        uint _1991 = _1974 + 45u;
        uint _1999 = _1974 + 46u;
        float _2010 = fma(_1944, cbSceneParam._m0[_1975].w, fma(_1940, cbSceneParam._m0[_1975].z, fma(_1936, cbSceneParam._m0[_1975].y, _1932 * cbSceneParam._m0[_1975].x)));
        float _2014 = fma(_1944, cbSceneParam._m0[_1983].w, fma(_1940, cbSceneParam._m0[_1983].z, fma(_1936, cbSceneParam._m0[_1983].y, _1932 * cbSceneParam._m0[_1983].x)));
        float _2022 = fma(_1944, cbSceneParam._m0[_1999].w, fma(_1940, cbSceneParam._m0[_1999].z, fma(_1936, cbSceneParam._m0[_1999].y, _1932 * cbSceneParam._m0[_1999].x)));
        float _2027 = cbSceneParam._m0[33u].z * _2022;
        float _2029 = cbSceneParam._m0[33u].w * _2022;
        float _2032 = fma(_1944, cbSceneParam._m0[_1991].w, fma(_1940, cbSceneParam._m0[_1991].z, fma(_1936, cbSceneParam._m0[_1991].y, _1932 * cbSceneParam._m0[_1991].x))) / _2022;
        float _2080 = (cbSceneParam._m0[33u].x - sqrt(((_1946 * _1946) + (_1945 * _1945)) + (_1947 * _1947))) * cbSceneParam._m0[33u].y;
        float _4385 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
        float _2087 = (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2027 + _2010) / _2022, (_2029 + _2014) / _2022), _2032), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2029 + _2010) / _2022, (_2014 - _2027) / _2022), _2032), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2010 - _2027) / _2022, (_2014 - _2029) / _2022), _2032), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2010 - _2029) / _2022, (_2027 + _2014) / _2022), _2032), 0.0)).x), vec4(0.25)));
        _2094 = 1.0 - (_2087 * cbSceneParam._m0[34u].x);
        _2095 = 1.0 - (_2087 * cbSceneParam._m0[34u].y);
        _2096 = 1.0 - (_2087 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2094 = 1.0;
        _2095 = 1.0;
        _2096 = 1.0;
    }
    float _2160;
    float _2162;
    float _2164;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2148 = fma(_1944, cbSceneParam._m0[63u].w, fma(_1940, cbSceneParam._m0[63u].z, fma(_1936, cbSceneParam._m0[63u].y, _1932 * cbSceneParam._m0[63u].x)));
        float _2149 = fma(_1944, cbSceneParam._m0[60u].w, fma(_1940, cbSceneParam._m0[60u].z, fma(_1936, cbSceneParam._m0[60u].y, _1932 * cbSceneParam._m0[60u].x))) / _2148;
        float _2150 = fma(_1944, cbSceneParam._m0[61u].w, fma(_1940, cbSceneParam._m0[61u].z, fma(_1936, cbSceneParam._m0[61u].y, _1932 * cbSceneParam._m0[61u].x))) / _2148;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2149 >= cbSceneParam._m0[64u].x) && (_2150 >= cbSceneParam._m0[64u].y)) && (_2149 <= cbSceneParam._m0[64u].z)) && (_2150 <= cbSceneParam._m0[64u].w))
        {
            float _2288 = fma(_1944, cbSceneParam._m0[62u].w, fma(_1940, cbSceneParam._m0[62u].z, fma(_1936, cbSceneParam._m0[62u].y, _1932 * cbSceneParam._m0[62u].x))) / _2148;
            float _2292 = isnan(cbSceneParam._m0[41u].w) ? _2288 : (isnan(_2288) ? cbSceneParam._m0[41u].w : max(_2288, cbSceneParam._m0[41u].w));
            float _2335 = (cbSceneParam._m0[33u].x - sqrt(((_1946 * _1946) + (_1945 * _1945)) + (_1947 * _1947))) * cbSceneParam._m0[33u].y;
            float _4401 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
            float _2342 = (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2149, cbSceneParam._m0[33u].w + _2150), _2292), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2149, _2150 - cbSceneParam._m0[33u].z), _2292), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2149 - cbSceneParam._m0[33u].z, _2150 - cbSceneParam._m0[33u].w), _2292), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2149 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2150), _2292), 0.0)).x), vec4(0.25)));
            float _2346 = 1.0 - (_2342 * cbSceneParam._m0[34u].x);
            float _2347 = 1.0 - (_2342 * cbSceneParam._m0[34u].y);
            float _2348 = 1.0 - (_2342 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2348) ? _2096 : (isnan(_2096) ? _2348 : min(_2096, _2348));
            frontier_phi_34_33_ladder_1 = isnan(_2347) ? _2095 : (isnan(_2095) ? _2347 : min(_2095, _2347));
            frontier_phi_34_33_ladder_2 = isnan(_2346) ? _2094 : (isnan(_2094) ? _2346 : min(_2094, _2346));
        }
        else
        {
            frontier_phi_34_33_ladder = _2096;
            frontier_phi_34_33_ladder_1 = _2095;
            frontier_phi_34_33_ladder_2 = _2094;
        }
        _2160 = frontier_phi_34_33_ladder_2;
        _2162 = frontier_phi_34_33_ladder_1;
        _2164 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2160 = _2094;
        _2162 = _2095;
        _2164 = _2096;
    }
    uvec4 _2169 = floatBitsToUint(cbInstanceData._m0[_249 + 5u]);
    uint _2171 = _2169.x * 14u;
    uint _2172 = _2171 + 13u;
    float _2179 = _870 + (-1.0);
    float _2184 = (cbLight._m0[_2172].x * _2179) + 1.0;
    float _2185 = (cbLight._m0[_2172].y * _2179) + 1.0;
    float _2186 = (cbLight._m0[_2172].z * _2179) + 1.0;
    float _2187 = (cbLight._m0[_2172].w * _2179) + 1.0;
    uint _2188 = _2171 + 5u;
    float _2194 = isnan(1.0) ? _2185 : (isnan(_2185) ? 1.0 : min(_2185, 1.0));
    uint _2198 = _2171 + 4u;
    float _2207 = isnan(1.0) ? _2184 : (isnan(_2184) ? 1.0 : min(_2184, 1.0));
    uint _2211 = _2171 | 1u;
    float _2222 = dot(vec3(cbLight._m0[_2171].xyz), vec3(_705, _706, _707));
    float _2225 = dot(vec3(cbLight._m0[_2211].xyz), vec3(_705, _706, _707));
    float _4437 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _4448 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _2230 = (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * 0.3183098733425140380859375;
    float _2232 = (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * 0.3183098733425140380859375;
    float _2239 = ((cbLight._m0[_2188].x * _2194) * _2232) + (((cbLight._m0[_2198].x * _2160) * _2207) * _2230);
    float _2240 = ((_2194 * cbLight._m0[_2188].y) * _2232) + (((cbLight._m0[_2198].y * _2162) * _2207) * _2230);
    float _2241 = ((_2194 * cbLight._m0[_2188].z) * _2232) + (((cbLight._m0[_2198].z * _2164) * _2207) * _2230);
    uvec4 _2245 = floatBitsToUint(cbLight._m0[_2171 + 12u]);
    bool _2247 = _2245.x == 0u;
    float _2349;
    float _2351;
    float _2353;
    if (_2247)
    {
        _2349 = _2239;
        _2351 = _2240;
        _2353 = _2241;
    }
    else
    {
        uint _2357 = _2171 + 6u;
        float _2373 = (dot(vec3(cbLight._m0[_2171 + 2u].xyz), vec3(_705, _706, _707)) * 0.5) + 0.5;
        float _2374 = _2373 * _2373;
        float _4459 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2375 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _2376 = isnan(1.0) ? _2186 : (isnan(_2186) ? 1.0 : min(_2186, 1.0));
        _2349 = (((cbLight._m0[_2357].x * 0.3183098733425140380859375) * _2375) * _2376) + _2239;
        _2351 = (((cbLight._m0[_2357].y * 0.3183098733425140380859375) * _2375) * _2376) + _2240;
        _2353 = (((cbLight._m0[_2357].z * 0.3183098733425140380859375) * _2375) * _2376) + _2241;
    }
    bool _2356 = _2245.y == 0u;
    float _2411;
    float _2413;
    float _2415;
    if (_2356)
    {
        _2411 = _2349;
        _2413 = _2351;
        _2415 = _2353;
    }
    else
    {
        uint _2584 = _2171 + 7u;
        float _2600 = (dot(vec3(cbLight._m0[_2171 + 3u].xyz), vec3(_705, _706, _707)) * 0.5) + 0.5;
        float _2601 = _2600 * _2600;
        float _4475 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
        float _2602 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _2603 = isnan(1.0) ? _2187 : (isnan(_2187) ? 1.0 : min(_2187, 1.0));
        _2411 = (((cbLight._m0[_2584].x * 0.3183098733425140380859375) * _2602) * _2603) + _2349;
        _2413 = (((cbLight._m0[_2584].y * 0.3183098733425140380859375) * _2602) * _2603) + _2351;
        _2415 = (((cbLight._m0[_2584].z * 0.3183098733425140380859375) * _2602) * _2603) + _2353;
    }
    uint _2418 = _2171 + 8u;
    float _2431 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2171].w)) * _708) * 0.949999988079071044921875);
    float _2432 = _2431 * _2431;
    float _2433 = cbLight._m0[_2171].x + _784;
    float _2434 = cbLight._m0[_2171].y + _785;
    float _2435 = cbLight._m0[_2171].z + _786;
    float _2439 = inversesqrt(dot(vec3(_2433, _2434, _2435), vec3(_2433, _2434, _2435)));
    float _2440 = _2439 * _2433;
    float _2441 = _2439 * _2434;
    float _2442 = _2439 * _2435;
    float _2443 = dot(vec3(_705, _706, _707), vec3(cbLight._m0[_2171].xyz));
    float _4491 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
    float _2446 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
    float _4502 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _2447 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
    float _2448 = dot(vec3(_705, _706, _707), vec3(_2440, _2441, _2442));
    float _4513 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
    float _2451 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
    float _2452 = dot(vec3(cbLight._m0[_2171].xyz), vec3(_2440, _2441, _2442));
    float _4524 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
    float _2456 = _2432 * _2432;
    float _2460 = ((_2451 * _2451) * (_2456 + (-1.0))) + 1.0;
    float _2468 = exp2(log2(1.0 - (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0)))) * 5.0);
    float _2469 = 0.959999978542327880859375 - _851;
    float _2471 = 0.959999978542327880859375 - _852;
    float _2472 = 0.959999978542327880859375 - _853;
    float _2479 = 1.0 - _2432;
    float _2490 = (0.5 / (((_2447 * ((_2446 * _2479) + _2432)) + 9.9999999392252902907785028219223e-09) + (((_2447 * _2479) + _2432) * _2446))) * _2446;
    float _4535 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
    float _2492 = (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (_2456 / ((_2460 * _2460) * 3.141590118408203125));
    uint _2506 = _2171 + 9u;
    float _2517 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2211].w)) * _708) * 0.949999988079071044921875);
    float _2518 = _2517 * _2517;
    float _2519 = cbLight._m0[_2211].x + _784;
    float _2520 = cbLight._m0[_2211].y + _785;
    float _2521 = cbLight._m0[_2211].z + _786;
    float _2525 = inversesqrt(dot(vec3(_2519, _2520, _2521), vec3(_2519, _2520, _2521)));
    float _2526 = _2525 * _2519;
    float _2527 = _2525 * _2520;
    float _2528 = _2525 * _2521;
    float _2529 = dot(vec3(_705, _706, _707), vec3(cbLight._m0[_2211].xyz));
    float _4546 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
    float _2532 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
    float _2533 = dot(vec3(_705, _706, _707), vec3(_2526, _2527, _2528));
    float _4557 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
    float _2536 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
    float _2537 = dot(vec3(cbLight._m0[_2211].xyz), vec3(_2526, _2527, _2528));
    float _4568 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
    float _2541 = _2518 * _2518;
    float _2545 = ((_2536 * _2536) * (_2541 + (-1.0))) + 1.0;
    float _2552 = exp2(log2(1.0 - (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0)))) * 5.0);
    float _2559 = 1.0 - _2518;
    float _2569 = (0.5 / (((_2447 * ((_2532 * _2559) + _2518)) + 9.9999999392252902907785028219223e-09) + (((_2447 * _2559) + _2518) * _2532))) * _2532;
    float _4579 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
    float _2571 = (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * (_2541 / ((_2545 * _2545) * 3.141590118408203125));
    float _2581 = (((((_2552 * _2469) + _854) * cbLight._m0[_2506].x) * _2571) * _2194) + ((((cbLight._m0[_2418].x * _2160) * ((_2468 * _2469) + _854)) * _2492) * _2207);
    float _2582 = (((((_2552 * _2471) + _856) * cbLight._m0[_2506].y) * _2571) * _2194) + ((((cbLight._m0[_2418].y * _2162) * ((_2468 * _2471) + _856)) * _2492) * _2207);
    float _2583 = (((((_2552 * _2472) + _857) * cbLight._m0[_2506].z) * _2571) * _2194) + ((((cbLight._m0[_2418].z * _2164) * ((_2468 * _2472) + _857)) * _2492) * _2207);
    float _2639;
    float _2641;
    float _2643;
    if (_2247)
    {
        _2639 = _2581;
        _2641 = _2582;
        _2643 = _2583;
    }
    else
    {
        uint _2645 = _2171 + 2u;
        uint _2649 = _2171 + 10u;
        float _2663 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2645].w)) * _708) * 0.949999988079071044921875);
        float _2664 = _2663 * _2663;
        float _2665 = cbLight._m0[_2645].x + _784;
        float _2666 = cbLight._m0[_2645].y + _785;
        float _2667 = cbLight._m0[_2645].z + _786;
        float _2671 = inversesqrt(dot(vec3(_2665, _2666, _2667), vec3(_2665, _2666, _2667)));
        float _2672 = _2671 * _2665;
        float _2673 = _2671 * _2666;
        float _2674 = _2671 * _2667;
        float _2675 = dot(vec3(_705, _706, _707), vec3(cbLight._m0[_2645].xyz));
        float _4590 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2678 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
        float _2679 = dot(vec3(_705, _706, _707), vec3(_2672, _2673, _2674));
        float _4601 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
        float _2682 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
        float _2683 = dot(vec3(cbLight._m0[_2645].xyz), vec3(_2672, _2673, _2674));
        float _4612 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
        float _2687 = _2664 * _2664;
        float _2691 = ((_2682 * _2682) * (_2687 + (-1.0))) + 1.0;
        float _2698 = exp2(log2(1.0 - (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0)))) * 5.0);
        float _2705 = 1.0 - _2664;
        float _2715 = (0.5 / (((_2447 * ((_2678 * _2705) + _2664)) + 9.9999999392252902907785028219223e-09) + (((_2447 * _2705) + _2664) * _2678))) * _2678;
        float _4623 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
        float _2717 = (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (_2687 / ((_2691 * _2691) * 3.141590118408203125));
        float _2718 = isnan(1.0) ? _2186 : (isnan(_2186) ? 1.0 : min(_2186, 1.0));
        _2639 = (((((_2698 * _2469) + _854) * cbLight._m0[_2649].x) * _2717) * _2718) + _2581;
        _2641 = (((((_2698 * _2471) + _856) * cbLight._m0[_2649].y) * _2717) * _2718) + _2582;
        _2643 = (((((_2698 * _2472) + _857) * cbLight._m0[_2649].z) * _2717) * _2718) + _2583;
    }
    float _2749;
    float _2751;
    float _2753;
    if (_2356)
    {
        _2749 = _2639;
        _2751 = _2641;
        _2753 = _2643;
    }
    else
    {
        uint _2760 = _2171 + 3u;
        uint _2764 = _2171 + 11u;
        float _2778 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2760].w)) * _708) * 0.949999988079071044921875);
        float _2779 = _2778 * _2778;
        float _2780 = cbLight._m0[_2760].x + _784;
        float _2781 = cbLight._m0[_2760].y + _785;
        float _2782 = cbLight._m0[_2760].z + _786;
        float _2786 = inversesqrt(dot(vec3(_2780, _2781, _2782), vec3(_2780, _2781, _2782)));
        float _2787 = _2786 * _2780;
        float _2788 = _2786 * _2781;
        float _2789 = _2786 * _2782;
        float _2790 = dot(vec3(_705, _706, _707), vec3(cbLight._m0[_2760].xyz));
        float _4639 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
        float _2793 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
        float _2794 = dot(vec3(_705, _706, _707), vec3(_2787, _2788, _2789));
        float _4650 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
        float _2797 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
        float _2798 = dot(vec3(cbLight._m0[_2760].xyz), vec3(_2787, _2788, _2789));
        float _4661 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
        float _2802 = _2779 * _2779;
        float _2806 = ((_2797 * _2797) * (_2802 + (-1.0))) + 1.0;
        float _2813 = exp2(log2(1.0 - (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0)))) * 5.0);
        float _2820 = 1.0 - _2779;
        float _2830 = (0.5 / (((_2447 * ((_2793 * _2820) + _2779)) + 9.9999999392252902907785028219223e-09) + (((_2447 * _2820) + _2779) * _2793))) * _2793;
        float _4672 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
        float _2832 = (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0))) * (_2802 / ((_2806 * _2806) * 3.141590118408203125));
        float _2833 = isnan(1.0) ? _2187 : (isnan(_2187) ? 1.0 : min(_2187, 1.0));
        _2749 = (((((_2813 * _2469) + _854) * cbLight._m0[_2764].x) * _2832) * _2833) + _2639;
        _2751 = (((((_2813 * _2471) + _856) * cbLight._m0[_2764].y) * _2832) * _2833) + _2641;
        _2753 = (((((_2813 * _2472) + _857) * cbLight._m0[_2764].z) * _2832) * _2833) + _2643;
    }
    float _2899;
    float _2901;
    float _2903;
    float _2905;
    float _2907;
    float _2909;
    if (_2169.y == 0u)
    {
        uvec4 _2854 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2855 = _2854.x;
        uint _2866 = uint((float(_2854.y) * floor(float(uint(cbSceneParam._m0[85u].y * _793) / _2855))) + floor(float(uint(cbSceneParam._m0[85u].x * _792) / _2855)));
        float _2876 = (log2(_1947 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2877 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
        uint _2880 = uint(isnan(14.0) ? _2877 : (isnan(_2877) ? 14.0 : min(_2877, 14.0)));
        uvec4 _2885 = texelFetch(g_lightClusterGridBuffer, int(((_2880 << 2u) + (_2866 << 6u)) >> 2u));
        uint _2886 = _2885.x;
        uint _2887 = _2854.z;
        float _2966;
        float _2968;
        float _2970;
        float _2972;
        float _2974;
        float _2976;
        if (((((1u << ((_2887 >> 4u) & 15u)) + 4294967295u) & _2886) == 0u) || ((_2887 & 240u) == 0u))
        {
            _2966 = 0.0;
            _2968 = 0.0;
            _2970 = 0.0;
            _2972 = 0.0;
            _2974 = 0.0;
            _2976 = 0.0;
        }
        else
        {
            float _2967;
            float _2969;
            float _2971;
            float _2973;
            float _2975;
            float _2977;
            float _3111 = 0.0;
            float _3112 = 0.0;
            float _3113 = 0.0;
            float _3114 = 0.0;
            float _3115 = 0.0;
            float _3116 = 0.0;
            uint _3117 = 0u;
            uint _3126;
            bool _3127;
            for (;;)
            {
                _3126 = texelFetch(g_lightClassification, int((((_2880 << 5u) + (_2866 << 9u)) + (_3117 << 2u)) >> 2u)).x;
                _3127 = _3126 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3127)
                {
                    frontier_phi_66_pred = _3116;
                    frontier_phi_66_pred_1 = _3115;
                    frontier_phi_66_pred_2 = _3114;
                    frontier_phi_66_pred_3 = _3113;
                    frontier_phi_66_pred_4 = _3112;
                    frontier_phi_66_pred_5 = _3111;
                }
                else
                {
                    float _3235;
                    float _3236;
                    float _3237;
                    float _3238;
                    float _3239;
                    float _3240;
                    uint _3241;
                    _3235 = _3111;
                    _3236 = _3112;
                    _3237 = _3113;
                    _3238 = _3114;
                    _3239 = _3115;
                    _3240 = _3116;
                    _3241 = _3126;
                    float _3167;
                    float _3168;
                    float _3169;
                    float _3170;
                    float _3171;
                    float _3172;
                    for (;;)
                    {
                        uint _3245 = uint(findLSB(_3241)) + (_3117 << 5u);
                        uint _3242 = (_3241 + 4294967295u) & _3241;
                        uint _3247 = _3245 * 48u;
                        vec4 _3261 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3247)).x, texelFetch(g_PointLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3247 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3247 + 3u)).x));
                        uint _3267 = (_3245 * 48u) + 4u;
                        vec4 _3280 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3267)).x, texelFetch(g_PointLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3267 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3267 + 3u)).x));
                        uint _3286 = (_3245 * 48u) + 8u;
                        vec3 _3297 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3286)).x, texelFetch(g_PointLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3286 + 2u)).x));
                        float _3301 = _3261.x - _1945;
                        float _3302 = _3261.y - _1946;
                        float _3303 = _3261.z - _1947;
                        float _3304 = dot(vec3(_3301, _3302, _3303), vec3(_3301, _3302, _3303));
                        float _3307 = inversesqrt(_3304);
                        float _3308 = _3307 * _3301;
                        float _3309 = _3307 * _3302;
                        float _3310 = _3307 * _3303;
                        float _3311 = dot(vec3(_811, _814, _817), vec3(_3308, _3309, _3310));
                        float _3316 = 1.0 - (_3304 * _3261.w);
                        float _4698 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                        float _3317 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
                        float _3318 = sqrt(_3304) * _3280.w;
                        float _3321 = 1.39999997615814208984375 / (_3318 + 1.39999997615814208984375);
                        float _3322 = _3321 * _3321;
                        float _3325 = ((1.0 - _3322) * _3311) + _3322;
                        float _3328 = _3318 * _3318;
                        float _3332 = ((isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0))) * _3317) / ((_3328 * 0.699999988079071044921875) + 1.0);
                        float _3336 = (-0.0) - _1945;
                        float _3337 = (-0.0) - _1946;
                        float _3338 = (-0.0) - _1947;
                        float _3342 = inversesqrt(dot(vec3(_3336, _3337, _3338), vec3(_3336, _3337, _3338)));
                        float _3343 = _3342 * _3336;
                        float _3344 = _3342 * _3337;
                        float _3345 = _3342 * _3338;
                        float _3352 = exp2(log2(1.0 / ((_3328 * 3.5) + 5.0)) * 0.25);
                        float _3353 = 1.0 - _886;
                        float _3360 = sqrt(1.0 - ((1.0 - (_3353 * _3353)) * (1.0 - (_3352 * _3352))));
                        float _3361 = _3360 * _3360;
                        float _3362 = _3361 * _3361;
                        float _3363 = _3343 + _3308;
                        float _3364 = _3344 + _3309;
                        float _3365 = _3345 + _3310;
                        float _3369 = inversesqrt(dot(vec3(_3363, _3364, _3365), vec3(_3363, _3364, _3365)));
                        float _3373 = dot(vec3(_811, _814, _817), vec3(_3343, _3344, _3345));
                        float _4714 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                        float _3376 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
                        float _3377 = dot(vec3(_811, _814, _817), vec3(_3369 * _3363, _3369 * _3364, _3369 * _3365));
                        float _4725 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                        float _3380 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
                        float _3384 = ((_3380 * _3380) * (_3362 + (-1.0))) + 1.0;
                        float _3385 = _3321 * _3361;
                        float _3386 = _3385 * _3385;
                        float _3389 = ((1.0 - _3386) * _3311) + _3386;
                        float _4736 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                        float _3390 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
                        float _3391 = 1.0 - _3361;
                        float _3401 = (0.5 / (((_3390 * ((_3376 * _3391) + _3361)) + 9.9999999392252902907785028219223e-09) + (((_3390 * _3391) + _3361) * _3376))) * _3390;
                        float _4747 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                        float _3411 = (((_3362 * 3.1415927410125732421875) * (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0)))) / ((_3384 * _3384) * ((_3328 * 2.1991131305694580078125) + 3.141590118408203125))) * _3317;
                        _3170 = (_3332 * _3280.x) + _3238;
                        _3171 = (_3332 * _3280.y) + _3239;
                        _3172 = (_3332 * _3280.z) + _3240;
                        _3167 = (_3411 * _3297.x) + _3235;
                        _3168 = (_3411 * _3297.y) + _3236;
                        _3169 = (_3411 * _3297.z) + _3237;
                        if (_3242 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3235 = _3167;
                            _3236 = _3168;
                            _3237 = _3169;
                            _3238 = _3170;
                            _3239 = _3171;
                            _3240 = _3172;
                            _3241 = _3242;
                        }
                    }
                    frontier_phi_66_pred = _3172;
                    frontier_phi_66_pred_1 = _3171;
                    frontier_phi_66_pred_2 = _3170;
                    frontier_phi_66_pred_3 = _3169;
                    frontier_phi_66_pred_4 = _3168;
                    frontier_phi_66_pred_5 = _3167;
                }
                _2977 = frontier_phi_66_pred;
                _2975 = frontier_phi_66_pred_1;
                _2973 = frontier_phi_66_pred_2;
                _2971 = frontier_phi_66_pred_3;
                _2969 = frontier_phi_66_pred_4;
                _2967 = frontier_phi_66_pred_5;
                uint _3118 = _3117 + 1u;
                if (_3118 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3111 = _2967;
                    _3112 = _2969;
                    _3113 = _2971;
                    _3114 = _2973;
                    _3115 = _2975;
                    _3116 = _2977;
                    _3117 = _3118;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2966 = _2967;
            _2968 = _2969;
            _2970 = _2971;
            _2972 = _2973;
            _2974 = _2975;
            _2976 = _2977;
        }
        uvec4 _2980 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2981 = _2980.z;
        uint _2983 = (_2981 >> 8u) & 15u;
        float _3079;
        float _3081;
        float _3083;
        float _3085;
        float _3087;
        float _3089;
        if (((4294967295u << _2983) & _2886) == 0u)
        {
            _3079 = _2966;
            _3081 = _2968;
            _3083 = _2970;
            _3085 = _2972;
            _3087 = _2974;
            _3089 = _2976;
        }
        else
        {
            float _3104 = inversesqrt(dot(vec3(_1945, _1946, _1947), vec3(_1945, _1946, _1947)));
            float _3105 = _3104 * _1945;
            float _3106 = _3104 * _1946;
            float _3107 = _3104 * _1947;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2983 < ((_2981 >> 12u) & 15u))
            {
                float _3080;
                float _3082;
                float _3084;
                float _3086;
                float _3088;
                float _3090;
                float _3218 = _2966;
                float _3219 = _2968;
                float _3220 = _2970;
                float _3221 = _2972;
                float _3222 = _2974;
                float _3223 = _2976;
                uint _3224 = _2983;
                uint _3233;
                bool _3234;
                for (;;)
                {
                    _3233 = texelFetch(g_lightClassification, int((((_2880 << 5u) + (_2866 << 9u)) + (_3224 << 2u)) >> 2u)).x;
                    _3234 = _3233 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3234)
                    {
                        frontier_phi_72_pred = _3223;
                        frontier_phi_72_pred_1 = _3222;
                        frontier_phi_72_pred_2 = _3221;
                        frontier_phi_72_pred_3 = _3220;
                        frontier_phi_72_pred_4 = _3219;
                        frontier_phi_72_pred_5 = _3218;
                    }
                    else
                    {
                        float _3416;
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3420;
                        float _3421;
                        float _3710;
                        float _3711;
                        float _3712;
                        float _3713;
                        float _3714;
                        float _3715;
                        float _3429 = _3218;
                        float _3430 = _3219;
                        float _3431 = _3220;
                        float _3432 = _3221;
                        float _3433 = _3222;
                        float _3434 = _3223;
                        uint _3435 = _3233;
                        uint _3436;
                        vec4 _3461;
                        float _3462;
                        vec4 _3477;
                        vec3 _3489;
                        vec4 _3504;
                        vec4 _3520;
                        float _3566;
                        bool _3567;
                        for (;;)
                        {
                            uint _3446 = ((_3224 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3435));
                            _3436 = (_3435 + 4294967295u) & _3435;
                            uint _3448 = _3446 * 40u;
                            _3461 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3448)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 3u)).x));
                            _3462 = _3461.w;
                            uint _3464 = (_3446 * 40u) + 4u;
                            _3477 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3464)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 3u)).x));
                            uint _3479 = (_3446 * 40u) + 8u;
                            _3489 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 2u)).x));
                            uint _3491 = (_3446 * 40u) + 16u;
                            _3504 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3491)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 3u)).x));
                            uint _3507 = (_3446 * 40u) + 20u;
                            _3520 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3507)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 3u)).x));
                            uint _3522 = (_3446 * 40u) + 24u;
                            vec4 _3535 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 3u)).x));
                            uint _3541 = (_3446 * 40u) + 28u;
                            vec4 _3554 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 3u)).x));
                            _3566 = fma(_1947, _3554.z, fma(_1946, _3554.y, _3554.x * _1945)) + _3554.w;
                            _3567 = !((fma(_1947, _3535.z, fma(_1946, _3535.y, _3535.x * _1945)) + _3535.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3567)
                            {
                                float _3594 = _3461.x - _1945;
                                float _3595 = _3461.y - _1946;
                                float _3596 = _3461.z - _1947;
                                float _3597 = dot(vec3(_3594, _3595, _3596), vec3(_3594, _3595, _3596));
                                float _3600 = inversesqrt(_3597);
                                float _3601 = _3600 * _3594;
                                float _3602 = _3600 * _3595;
                                float _3603 = _3600 * _3596;
                                float _3607 = 1.0 - (_3597 / (_3462 * _3462));
                                float _4758 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                                float _3608 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
                                float _3612 = sqrt(_3597) * _3477.w;
                                float _3614 = 1.39999997615814208984375 / (_3612 + 1.39999997615814208984375);
                                float _3615 = _3614 * _3614;
                                float _3618 = ((1.0 - _3615) * dot(vec3(_3601, _3602, _3603), vec3(_811, _814, _817))) + _3615;
                                float _3621 = _3612 * _3612;
                                float _3625 = (fma(_1947, _3504.z, fma(_1946, _3504.y, _3504.x * _1945)) + _3504.w) / _3566;
                                float _3626 = (fma(_1947, _3520.z, fma(_1946, _3520.y, _3520.x * _1945)) + _3520.w) / _3566;
                                float _3630 = 1.0 - dot(vec2(_3625, _3626), vec2(_3625, _3626));
                                float _4774 = isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0));
                                float _3631 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
                                float _3632 = _3631 * (((isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0))) * _3608) / ((_3621 * 0.699999988079071044921875) + 1.0));
                                float _3644 = exp2(log2(1.0 / ((_3621 * 3.5) + 5.0)) * 0.25);
                                float _3645 = 1.0 - _886;
                                float _3652 = sqrt(1.0 - ((1.0 - (_3645 * _3645)) * (1.0 - (_3644 * _3644))));
                                float _3653 = _3652 * _3652;
                                float _3654 = _3653 * _3653;
                                float _3655 = _3601 - _3105;
                                float _3656 = _3602 - _3106;
                                float _3657 = _3603 - _3107;
                                float _3661 = inversesqrt(dot(vec3(_3655, _3656, _3657), vec3(_3655, _3656, _3657)));
                                float _3665 = dot(vec3(_811, _814, _817), vec3((-0.0) - _3105, (-0.0) - _3106, (-0.0) - _3107));
                                float _4785 = isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0));
                                float _3668 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
                                float _3669 = dot(vec3(_811, _814, _817), vec3(_3661 * _3655, _3661 * _3656, _3661 * _3657));
                                float _4796 = isnan(0.0) ? _3669 : (isnan(_3669) ? 0.0 : max(_3669, 0.0));
                                float _3672 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
                                float _3676 = ((_3672 * _3672) * (_3654 + (-1.0))) + 1.0;
                                float _3677 = _3614 * _3653;
                                float _3678 = _3677 * _3677;
                                float _3684 = ((1.0 - _3678) * dot(vec3(_811, _814, _817), vec3(_3601, _3602, _3603))) + _3678;
                                float _4807 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                                float _3685 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
                                float _3686 = 1.0 - _3653;
                                float _3696 = (0.5 / (((_3685 * ((_3668 * _3686) + _3653)) + 9.9999999392252902907785028219223e-09) + (((_3685 * _3686) + _3653) * _3668))) * _3685;
                                float _4818 = isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0));
                                float _3706 = (_3631 * _3608) * (((_3654 * 3.1415927410125732421875) * (isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0)))) / ((_3676 * _3676) * ((_3621 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3632 * _3477.y;
                                frontier_phi_78_pred_1 = _3632 * _3477.x;
                                frontier_phi_78_pred_2 = _3706 * _3489.z;
                                frontier_phi_78_pred_3 = _3706 * _3489.y;
                                frontier_phi_78_pred_4 = _3706 * _3489.x;
                                frontier_phi_78_pred_5 = _3632 * _3477.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3714 = frontier_phi_78_pred;
                            _3713 = frontier_phi_78_pred_1;
                            _3712 = frontier_phi_78_pred_2;
                            _3711 = frontier_phi_78_pred_3;
                            _3710 = frontier_phi_78_pred_4;
                            _3715 = frontier_phi_78_pred_5;
                            _3419 = _3713 + _3432;
                            _3420 = _3714 + _3433;
                            _3421 = _3715 + _3434;
                            _3416 = _3710 + _3429;
                            _3417 = _3711 + _3430;
                            _3418 = _3712 + _3431;
                            if (_3436 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3429 = _3416;
                                _3430 = _3417;
                                _3431 = _3418;
                                _3432 = _3419;
                                _3433 = _3420;
                                _3434 = _3421;
                                _3435 = _3436;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3421;
                        frontier_phi_72_pred_1 = _3420;
                        frontier_phi_72_pred_2 = _3419;
                        frontier_phi_72_pred_3 = _3418;
                        frontier_phi_72_pred_4 = _3417;
                        frontier_phi_72_pred_5 = _3416;
                    }
                    _3090 = frontier_phi_72_pred;
                    _3088 = frontier_phi_72_pred_1;
                    _3086 = frontier_phi_72_pred_2;
                    _3084 = frontier_phi_72_pred_3;
                    _3082 = frontier_phi_72_pred_4;
                    _3080 = frontier_phi_72_pred_5;
                    uint _3225 = _3224 + 1u;
                    if (_3225 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3218 = _3080;
                        _3219 = _3082;
                        _3220 = _3084;
                        _3221 = _3086;
                        _3222 = _3088;
                        _3223 = _3090;
                        _3224 = _3225;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3090;
                frontier_phi_60_61_ladder_1 = _3088;
                frontier_phi_60_61_ladder_2 = _3084;
                frontier_phi_60_61_ladder_3 = _3082;
                frontier_phi_60_61_ladder_4 = _3080;
                frontier_phi_60_61_ladder_5 = _3086;
            }
            else
            {
                frontier_phi_60_61_ladder = _2976;
                frontier_phi_60_61_ladder_1 = _2974;
                frontier_phi_60_61_ladder_2 = _2970;
                frontier_phi_60_61_ladder_3 = _2968;
                frontier_phi_60_61_ladder_4 = _2966;
                frontier_phi_60_61_ladder_5 = _2972;
            }
            _3079 = frontier_phi_60_61_ladder_4;
            _3081 = frontier_phi_60_61_ladder_3;
            _3083 = frontier_phi_60_61_ladder_2;
            _3085 = frontier_phi_60_61_ladder_5;
            _3087 = frontier_phi_60_61_ladder_1;
            _3089 = frontier_phi_60_61_ladder;
        }
        float _3094 = isnan(1.0) ? _870 : (isnan(_870) ? 1.0 : min(_870, 1.0));
        _2899 = (_3094 * _3085) + _2411;
        _2901 = (_3094 * _3087) + _2413;
        _2903 = (_3094 * _3089) + _2415;
        _2905 = ((_3079 * _854) * _3094) + _2749;
        _2907 = ((_3081 * _856) * _3094) + _2751;
        _2909 = ((_3083 * _857) * _3094) + _2753;
    }
    else
    {
        _2899 = _2411;
        _2901 = _2413;
        _2903 = _2415;
        _2905 = _2749;
        _2907 = _2751;
        _2909 = _2753;
    }
    float _4834 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _4845 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _4856 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    uint _2929 = _249 + 6u;
    float _2937 = _792 / cbSceneParam._m0[86u].x;
    float _2938 = _793 / cbSceneParam._m0[86u].y;
    vec4 _2952 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2937, _2938, (log2((isnan(cbSceneParam._m0[77u].w) ? _727 : (isnan(_727) ? cbSceneParam._m0[77u].w : min(_727, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2954 = _2952.x;
    float _2955 = _2952.y;
    float _2956 = _2952.z;
    float _2957 = _2952.w;
    float _3029;
    float _3031;
    float _3033;
    float _3035;
    if (_727 > cbSceneParam._m0[78u].w)
    {
        float _2991 = isnan(_727) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _727 : min(cbSceneParam._m0[80u].w, _727));
        float _2992 = _2991 / _727;
        float _3003 = _2992 * _777;
        float _3004 = _778 * _2992;
        float _3005 = (-0.0) - _3004;
        float _3007 = _2992 * _779;
        float _3009 = (cbSceneParam._m0[77u].w * _3005) / _2991;
        float _3010 = _3009 + cbSceneParam._m0[79u].w;
        float _3011 = cbSceneParam._m0[79u].w - _3004;
        float _3017 = sqrt(((_3003 * _3003) + (_3004 * _3004)) + (_3007 * _3007));
        float _3020 = (1.0 - (cbSceneParam._m0[77u].w / _2991)) * _3017;
        float _3025 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3027 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3180;
        if (abs((_3005 - _3009) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3180 = ((((_3010 > 0.0) ? exp2(_3025 * _3010) : (2.0 - exp2(_3027 * _3010))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3020;
        }
        else
        {
            float _3140 = 1.0 / cbSceneParam._m0[80u].x;
            float _3141 = isnan(_3011) ? _3010 : (isnan(_3010) ? _3011 : max(_3010, _3011));
            float _3142 = isnan(_3011) ? _3010 : (isnan(_3010) ? _3011 : min(_3010, _3011));
            float _3151 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : min(_3141, 0.0));
            float _3152 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : min(_3142, 0.0));
            _3180 = ((abs(_3017 / _3005) * cbSceneParam._m0[80u].y) * ((((_3151 - _3152) * 2.0) - ((exp2(_3025 * (isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0)))) - exp2(_3025 * (isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0))))) * _3140)) - ((exp2(_3027 * _3151) - exp2(_3027 * _3152)) * _3140))) + (_3020 * cbSceneParam._m0[80u].z);
        }
        vec4 _3182 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2937, _2938, 1.0), 0.0);
        float _3191 = exp2((_3180 * (-1.44269502162933349609375)) * (1.0 - _3182.w));
        float _3192 = log2(_3191);
        float _3208 = log2(_2957);
        _3029 = (exp2(_3208 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3192 * cbSceneParam._m0[78u].x)) * _3182.x) / cbSceneParam._m0[78u].x)) + _2954;
        _3031 = (exp2(_3208 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3192 * cbSceneParam._m0[78u].y)) * _3182.y) / cbSceneParam._m0[78u].y)) + _2955;
        _3033 = (exp2(_3208 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3192 * cbSceneParam._m0[78u].z)) * _3182.z) / cbSceneParam._m0[78u].z)) + _2956;
        _3035 = _3191 * _2957;
    }
    else
    {
        _3029 = _2954;
        _3031 = _2955;
        _3033 = _2956;
        _3035 = _2957;
    }
    float _3047 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3048 = _3047 == 3.0;
    float _3049 = log2(_3035);
    float _3056 = exp2(_3049 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0))) * (_2899 + ((isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0))) * _870))) + ((_2905 + ((isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0))) * _1676)) * cbPerFrame._m0[3u].x));
    float _3057 = exp2(_3049 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0))) * (_2901 + ((isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0))) * _870))) + ((_2907 + ((isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))) * _1676)) * cbPerFrame._m0[3u].x));
    float _3058 = exp2(_3049 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0))) * (_2903 + ((isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0))) * _870))) + ((_2909 + ((isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0))) * _1676)) * cbPerFrame._m0[3u].x));
    float _3067 = (_3047 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3067 * (_3048 ? _3056 : (_3056 + (cbSceneParam._m0[72u].w * _3029)));
    SV_Target.y = _3067 * (_3048 ? _3057 : (_3057 + (cbSceneParam._m0[72u].w * _3031)));
    SV_Target.z = _3067 * (_3048 ? _3058 : (_3058 + (cbSceneParam._m0[72u].w * _3033)));
    SV_Target.w = cbInstanceData._m0[_2929].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2929].w;
}


