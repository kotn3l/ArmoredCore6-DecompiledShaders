#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1068;
float _3733;
float _3734;
float _3735;
float _3736;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _209 = _208 * _200;
    float _210 = _208 * _201;
    float _211 = _208 * _202;
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _223 = _222 * TANGENT.x;
    float _224 = _222 * TANGENT.y;
    float _225 = _222 * TANGENT.z;
    uint _228 = uint(roundEven(NORMAL.w)) * 13u;
    uint _234 = _228 + 1u;
    uint _238 = _228 + 2u;
    float _247 = sqrt(((cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x) + (cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x)) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x));
    float _248 = _247 * TEXCOORD.z;
    float _249 = _247 * TEXCOORD.w;
    vec4 _268 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _274 = _268.x * cbMtdParam._m0[9u].x;
    float _275 = _268.y * cbMtdParam._m0[9u].y;
    float _276 = _268.z * cbMtdParam._m0[9u].z;
    vec4 _295 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _248) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _249) + cbTextureTilingScale._m0[14u].w));
    vec4 _315 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _319 = _315.z;
    float _324 = (_315.x * 2.0) + (-1.0);
    float _326 = (_315.y * 2.0) + (-1.0);
    float _327 = dot(vec2(_324, _326), vec2(_324, _326));
    float _3745 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _333 = sqrt(1.0 - (isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))));
    float _336 = fma(_333, _216, fma(_326, _223, _324 * _209));
    float _339 = fma(_333, _217, fma(_326, _224, _324 * _210));
    float _342 = fma(_333, _218, fma(_326, _225, _324 * _211));
    float _346 = inversesqrt(dot(vec3(_336, _339, _342), vec3(_336, _339, _342)));
    vec4 _382 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _248) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _249) + cbTextureTilingScale._m0[11u].w));
    float _384 = _382.x;
    float _385 = 1.0 - _384;
    float _394 = (cbMtdParam._m0[19u].x + dot(vec4(_346 * _336, _346 * _339, _346 * _342, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_384 - _385) * cbMtdParam._m0[24u].z) + _385) * cbMtdParam._m0[21u].z);
    float _3756 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _395 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _402 = (_395 * ((_295.x * cbMtdParam._m0[18u].x) - _274)) + _274;
    float _403 = (_395 * ((_295.y * cbMtdParam._m0[18u].y) - _275)) + _275;
    float _404 = (_395 * ((_295.z * cbMtdParam._m0[18u].z) - _276)) + _276;
    vec4 _417 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _419 = _417.x;
    float _421 = _419 - (_419 * _395);
    vec4 _434 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _248) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _249) + cbTextureTilingScale._m0[15u].w));
    float _441 = (_434.x * 2.0) + (-1.0);
    float _442 = (_434.y * 2.0) + (-1.0);
    float _443 = dot(vec2(_441, _442), vec2(_441, _442));
    float _3767 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _451 = ((_434.z - _319) * _395) + _319;
    float _461 = ((sqrt(1.0 - (isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0)))) - _333) * _395) + _333;
    float _464 = (((_441 - _324) * _395) + _324) + (cbMtdParam._m0[21u].x * _324);
    float _465 = (((_442 - _326) * _395) + _326) + (cbMtdParam._m0[21u].x * _326);
    float _470 = cbMtdParam._m0[22u].x + _315.w;
    float _473 = fma(_461, _216, fma(_465, _223, _464 * _209));
    float _476 = fma(_461, _217, fma(_465, _224, _464 * _210));
    float _479 = fma(_461, _218, fma(_465, _225, _464 * _211));
    float _483 = inversesqrt(dot(vec3(_473, _476, _479), vec3(_473, _476, _479)));
    float _484 = _483 * _473;
    float _485 = _483 * _476;
    float _486 = _483 * _479;
    float _3778 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _487 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _3789 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _3800 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _3811 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _3822 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _3833 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _492 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    float _506 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _547 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _557 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _547);
    float _558 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _547);
    float _559 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _547);
    float _563 = inversesqrt(dot(vec3(_557, _558, _559), vec3(_557, _558, _559)));
    float _564 = _557 * _563;
    float _565 = _558 * _563;
    float _566 = _559 * _563;
    vec4 _571 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _573 = _571.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _748 = sqrt(((_557 * _557) + (_558 * _558)) + (_559 * _559));
        float _754 = (cbMatDynParam._m0[5u].x * _748) + cbMatDynParam._m0[5u].y;
        float _3844 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _755 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _759 = (cbMatDynParam._m0[5u].z * _748) + cbMatDynParam._m0[5u].w;
        float _3855 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) - _755)) + _755) < ((_573 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _585 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _586 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _606 = fma(_486, cbSceneParam._m0[5u].z, fma(_485, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _484));
    float _609 = fma(_486, cbSceneParam._m0[6u].z, fma(_485, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _484));
    float _612 = fma(_486, cbSceneParam._m0[7u].z, fma(_485, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _484));
    uint _625 = _228 + 9u;
    uint _626 = _625 + uint(cbMatDynParam._m0[0u].w);
    float _632 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0)))) * cbInstanceData._m0[_626].x;
    float _633 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0)))) * cbInstanceData._m0[_626].y;
    float _634 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0)))) * cbInstanceData._m0[_626].z;
    float _3866 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _635 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _3877 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _636 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    float _3888 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _637 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _638 = 1.0 - _492;
    float _639 = _635 * _638;
    float _640 = _636 * _638;
    float _641 = _637 * _638;
    float _646 = (_635 + (-0.039999999105930328369140625)) * _492;
    float _647 = (_636 + (-0.039999999105930328369140625)) * _492;
    float _648 = (_637 + (-0.039999999105930328369140625)) * _492;
    float _649 = _646 + 0.039999999105930328369140625;
    float _651 = _647 + 0.039999999105930328369140625;
    float _652 = _648 + 0.039999999105930328369140625;
    vec4 _661 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _585, cbSceneParam._m0[86u].y * _586));
    float _665 = ((isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * TEXCOORD_5.w) * _661.x;
    float _666 = dot(vec3(_484, _485, _486), vec3(_564, _565, _566));
    float _669 = _666 * 2.0;
    float _673 = (_669 * _484) - _564;
    float _674 = (_669 * _485) - _565;
    float _675 = (_669 * _486) - _566;
    float _679 = abs(dot(vec3(_564, _565, _566), vec3(_484, _485, _486)));
    float _3899 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _681 = sqrt(_487);
    float _694 = exp2((_681 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_681 * 3.0));
    float _700 = (1.0 - _694) * ((_681 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _701 = _694 * _681;
    float _729 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _733 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _737 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1067;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _792 = fma(_737, cbModelParam._m0[26u].z, fma(_733, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _729));
        float _796 = fma(_737, cbModelParam._m0[27u].z, fma(_733, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _729));
        float _800 = fma(_737, cbModelParam._m0[28u].z, fma(_733, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _729));
        float _825 = _729 + _484;
        float _826 = _733 + _485;
        float _827 = _737 + _486;
        float _837 = fma(_827, cbModelParam._m0[26u].z, fma(_826, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _825)) - _792;
        float _838 = fma(_827, cbModelParam._m0[27u].z, fma(_826, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _825)) - _796;
        float _839 = fma(_827, cbModelParam._m0[28u].z, fma(_826, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _825)) - _800;
        float _843 = inversesqrt(dot(vec3(_837, _838, _839), vec3(_837, _838, _839)));
        float _856 = ((_843 * _837) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_792 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _857 = ((_843 * _838) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_796 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _858 = ((_843 * _839) / cbModelParam._m0[34u].z) + ((((((_800 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _861 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_856, _857, _858), 0.0);
        vec4 _868 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_856, _857, _858), 0.0);
        vec4 _875 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_856, _857, _858), 0.0);
        vec4 _882 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_856, _857, _858), 0.0);
        float _895 = exp2((_861.w + (-0.5)) * 20.0) * 2.0;
        float _896 = _895 * (_861.x + (-0.5));
        float _897 = _895 * (_861.y + (-0.5));
        float _898 = _895 * (_861.z + (-0.5));
        float _905 = exp2((_868.w + (-0.5)) * 20.0) * 2.0;
        float _906 = _905 * (_868.x + (-0.5));
        float _907 = _905 * (_868.y + (-0.5));
        float _908 = _905 * (_868.z + (-0.5));
        float _915 = exp2((_875.w + (-0.5)) * 20.0) * 2.0;
        float _916 = _915 * (_875.x + (-0.5));
        float _917 = _915 * (_875.y + (-0.5));
        float _918 = _915 * (_875.z + (-0.5));
        float _925 = exp2((_882.w + (-0.5)) * 20.0) * 2.0;
        float _926 = _925 * (_882.x + (-0.5));
        float _927 = _925 * (_882.y + (-0.5));
        float _928 = _925 * (_882.z + (-0.5));
        float _929 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _930 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _931 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _932 = _896 * 0.5;
        float _933 = _906 * 0.5;
        float _934 = _916 * 0.5;
        float _935 = dot(vec3(_932, _933, _934), vec3(_932, _933, _934));
        float _940 = (_935 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_935);
        float _949 = (dot(vec3(_484, _485, _486), vec3(_940 * _932, _940 * _933, _940 * _934)) + 1.0) * 0.5;
        float _3925 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _959 = sqrt(((_933 * _933) + (_932 * _932)) + (_934 * _934)) / (_929 + 9.9999997473787516355514526367188e-06);
        float _3936 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _961 = _960 * 2.0;
        float _965 = (1.0 - _960) / (_960 + 1.0);
        float _3947 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _966 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _975 = ((((1.0 - _966) * (_961 + 2.0)) * exp2(log2(isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * (_961 + 1.0))) + _966) * _929;
        float _976 = _897 * 0.5;
        float _977 = _907 * 0.5;
        float _978 = _917 * 0.5;
        float _979 = dot(vec3(_976, _977, _978), vec3(_976, _977, _978));
        float _984 = (_979 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_979);
        float _992 = (dot(vec3(_484, _485, _486), vec3(_984 * _976, _984 * _977, _984 * _978)) + 1.0) * 0.5;
        float _3958 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _1001 = sqrt(((_977 * _977) + (_976 * _976)) + (_978 * _978)) / (_930 + 9.9999997473787516355514526367188e-06);
        float _3969 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1003 = _1002 * 2.0;
        float _1007 = (1.0 - _1002) / (_1002 + 1.0);
        float _3980 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1017 = ((((1.0 - _1008) * (_1003 + 2.0)) * exp2(log2(isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * (_1003 + 1.0))) + _1008) * _930;
        float _1018 = _898 * 0.5;
        float _1019 = _908 * 0.5;
        float _1020 = _918 * 0.5;
        float _1021 = dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020));
        float _1026 = (_1021 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1021);
        float _1034 = (dot(vec3(_484, _485, _486), vec3(_1026 * _1018, _1026 * _1019, _1026 * _1020)) + 1.0) * 0.5;
        float _3991 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1043 = sqrt(((_1019 * _1019) + (_1018 * _1018)) + (_1020 * _1020)) / (_931 + 9.9999997473787516355514526367188e-06);
        float _4002 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1045 = _1044 * 2.0;
        float _1049 = (1.0 - _1044) / (_1044 + 1.0);
        float _4013 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1059 = ((((1.0 - _1050) * (_1045 + 2.0)) * exp2(log2(isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_1045 + 1.0))) + _1050) * _931;
        _1067 = _898;
        _1069 = _897;
        _1070 = _896;
        _1071 = _908;
        _1072 = _907;
        _1073 = _906;
        _1074 = _918;
        _1075 = _917;
        _1076 = _916;
        _1077 = _931;
        _1078 = _930;
        _1079 = _929;
        _1080 = cbModelParam._m0[36u].z * (isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0)));
        _1081 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0)));
        _1082 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0)));
    }
    else
    {
        _1067 = _1068;
        _1069 = _1068;
        _1070 = _1068;
        _1071 = _1068;
        _1072 = _1068;
        _1073 = _1068;
        _1074 = _1068;
        _1075 = _1068;
        _1076 = _1068;
        _1077 = _1068;
        _1078 = _1068;
        _1079 = _1068;
        _1080 = 0.0;
        _1081 = 0.0;
        _1082 = 0.0;
    }
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1110 = fma(_737, cbModelParam._m0[30u].z, fma(_733, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _729));
        float _1114 = fma(_737, cbModelParam._m0[31u].z, fma(_733, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _729));
        float _1118 = fma(_737, cbModelParam._m0[32u].z, fma(_733, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _729));
        float _1141 = _729 + _484;
        float _1142 = _733 + _485;
        float _1143 = _737 + _486;
        float _1153 = fma(_1143, cbModelParam._m0[30u].z, fma(_1142, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1141)) - _1110;
        float _1154 = fma(_1143, cbModelParam._m0[31u].z, fma(_1142, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1141)) - _1114;
        float _1155 = fma(_1143, cbModelParam._m0[32u].z, fma(_1142, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1141)) - _1118;
        float _1159 = inversesqrt(dot(vec3(_1153, _1154, _1155), vec3(_1153, _1154, _1155)));
        float _1172 = ((_1159 * _1153) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1110 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1173 = ((_1159 * _1154) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1114 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1174 = ((_1159 * _1155) / cbModelParam._m0[35u].z) + ((((((_1118 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        float _1209 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1176.x + (-0.5));
        float _1211 = _1209 * (_1176.y + (-0.5));
        float _1212 = _1209 * (_1176.z + (-0.5));
        float _1219 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1183.x + (-0.5));
        float _1221 = _1219 * (_1183.y + (-0.5));
        float _1222 = _1219 * (_1183.z + (-0.5));
        float _1229 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1190.x + (-0.5));
        float _1231 = _1229 * (_1190.y + (-0.5));
        float _1232 = _1229 * (_1190.z + (-0.5));
        float _1239 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1197.x + (-0.5));
        float _1241 = _1239 * (_1197.y + (-0.5));
        float _1242 = _1239 * (_1197.z + (-0.5));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1245 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1246 = _1210 * 0.5;
        float _1247 = _1220 * 0.5;
        float _1248 = _1230 * 0.5;
        float _1249 = dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248));
        float _1254 = (_1249 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1249);
        float _1262 = (dot(vec3(_484, _485, _486), vec3(_1254 * _1246, _1254 * _1247, _1254 * _1248)) + 1.0) * 0.5;
        float _4054 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1271 = sqrt(((_1247 * _1247) + (_1246 * _1246)) + (_1248 * _1248)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _4065 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1273 = _1272 * 2.0;
        float _1277 = (1.0 - _1272) / (_1272 + 1.0);
        float _4076 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1287 = ((((1.0 - _1278) * (_1273 + 2.0)) * exp2(log2(isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_1273 + 1.0))) + _1278) * _1243;
        float _1288 = _1211 * 0.5;
        float _1289 = _1221 * 0.5;
        float _1290 = _1231 * 0.5;
        float _1291 = dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290));
        float _1296 = (_1291 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1291);
        float _1304 = (dot(vec3(_484, _485, _486), vec3(_1296 * _1288, _1296 * _1289, _1296 * _1290)) + 1.0) * 0.5;
        float _4087 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1313 = sqrt(((_1289 * _1289) + (_1288 * _1288)) + (_1290 * _1290)) / (_1244 + 9.9999997473787516355514526367188e-06);
        float _4098 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1315 = _1314 * 2.0;
        float _1319 = (1.0 - _1314) / (_1314 + 1.0);
        float _4109 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1329 = ((((1.0 - _1320) * (_1315 + 2.0)) * exp2(log2(isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_1315 + 1.0))) + _1320) * _1244;
        float _1330 = _1212 * 0.5;
        float _1331 = _1222 * 0.5;
        float _1332 = _1232 * 0.5;
        float _1333 = dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332));
        float _1338 = (_1333 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1333);
        float _1346 = (dot(vec3(_484, _485, _486), vec3(_1338 * _1330, _1338 * _1331, _1338 * _1332)) + 1.0) * 0.5;
        float _4120 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1355 = sqrt(((_1331 * _1331) + (_1330 * _1330)) + (_1332 * _1332)) / (_1245 + 9.9999997473787516355514526367188e-06);
        float _4131 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1357 = _1356 * 2.0;
        float _1361 = (1.0 - _1356) / (_1356 + 1.0);
        float _4142 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1371 = ((((1.0 - _1362) * (_1357 + 2.0)) * exp2(log2(isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_1357 + 1.0))) + _1362) * _1245;
        _1379 = _1212;
        _1380 = _1211;
        _1381 = _1210;
        _1382 = _1222;
        _1383 = _1221;
        _1384 = _1220;
        _1385 = _1232;
        _1386 = _1231;
        _1387 = _1230;
        _1388 = _1245;
        _1389 = _1244;
        _1390 = _1243;
        _1391 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)));
        _1392 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)));
        _1393 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)));
    }
    else
    {
        _1379 = _1068;
        _1380 = _1068;
        _1381 = _1068;
        _1382 = _1068;
        _1383 = _1068;
        _1384 = _1068;
        _1385 = _1068;
        _1386 = _1068;
        _1387 = _1068;
        _1388 = _1068;
        _1389 = _1068;
        _1390 = _1068;
        _1391 = 0.0;
        _1392 = 0.0;
        _1393 = 0.0;
    }
    float _1403 = (cbModelParam._m0[1u].x * (_1391 - _1080)) + _1080;
    float _1404 = (cbModelParam._m0[1u].x * (_1392 - _1081)) + _1081;
    float _1405 = (cbModelParam._m0[1u].x * (_1393 - _1082)) + _1082;
    float _1426 = fma(_1405, cbSceneParam._m0[89u].z, fma(_1404, cbSceneParam._m0[89u].y, _1403 * cbSceneParam._m0[89u].x));
    float _1429 = fma(_1405, cbSceneParam._m0[90u].z, fma(_1404, cbSceneParam._m0[90u].y, _1403 * cbSceneParam._m0[90u].x));
    float _1432 = fma(_1405, cbSceneParam._m0[91u].z, fma(_1404, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1403));
    float _1447 = _673 * 0.5;
    float _1448 = _674 * 0.5;
    float _1449 = _675 * 0.5;
    float _1450 = dot(vec4(_1447, _1448, _1449, 1.0), vec4(_1381, _1384, _1387, _1390));
    float _1453 = dot(vec4(_1447, _1448, _1449, 1.0), vec4(_1380, _1383, _1386, _1389));
    float _1456 = dot(vec4(_1447, _1448, _1449, 1.0), vec4(_1379, _1382, _1385, _1388));
    float _1490;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1463 = dot(vec4(_1447, _1448, _1449, 1.0), vec4(_1067, _1071, _1074, _1077));
        float _1467 = dot(vec4(_1447, _1448, _1449, 1.0), vec4(_1069, _1072, _1075, _1078));
        float _1471 = dot(vec4(_1447, _1448, _1449, 1.0), vec4(_1070, _1073, _1076, _1079));
        float _1478 = dot(vec4(cbModelParam._m0[39u]), vec4(_1447, _1448, _1449, 1.0));
        _1490 = dot(vec3(isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)), isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)), isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1478) ? 0.0 : (isnan(0.0) ? _1478 : max(0.0, _1478))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1490 = 1.0;
    }
    float _1501;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1492 = dot(vec4(cbModelParam._m0[40u]), vec4(_1447, _1448, _1449, 1.0));
        _1501 = dot(vec3(isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)), isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)), isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1492) ? 0.0 : (isnan(0.0) ? _1492 : max(0.0, _1492))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1501 = 1.0;
    }
    float _1505 = (_1501 * cbModelParam._m0[1u].x) + (_1490 * (1.0 - cbModelParam._m0[1u].x));
    float _1515 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _487);
    float _1516 = isnan(_1515) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1515 : min(cbModelParam._m0[25u].z, _1515));
    float _1596;
    float _1598;
    float _1600;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1563 = fma(_737, cbModelParam._m0[13u].z, fma(_733, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _729)) + cbModelParam._m0[13u].w;
        float _1567 = fma(_737, cbModelParam._m0[14u].z, fma(_733, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _729)) + cbModelParam._m0[14u].w;
        float _1571 = fma(_737, cbModelParam._m0[15u].z, fma(_733, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _729)) + cbModelParam._m0[15u].w;
        float _1574 = fma(_675, cbModelParam._m0[13u].z, fma(_674, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _673));
        float _1577 = fma(_675, cbModelParam._m0[14u].z, fma(_674, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _673));
        float _1580 = fma(_675, cbModelParam._m0[15u].z, fma(_674, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _673));
        float _1608;
        if (_1574 > 0.0)
        {
            _1608 = abs((1.0 - _1563) / _1574);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1574 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1563 + 1.0) / _1574);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1608 = frontier_phi_17_15_ladder;
        }
        float _1779;
        if (_1577 > 0.0)
        {
            _1779 = abs((1.0 - _1567) / _1577);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1577 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1567 + 1.0) / _1577);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1779 = frontier_phi_26_22_ladder;
        }
        float _2075;
        if (_1580 > 0.0)
        {
            _2075 = abs((1.0 - _1571) / _1580);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1580 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1571 + 1.0) / _1580);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2075 = frontier_phi_38_33_ladder;
        }
        float _2077 = isnan(_1779) ? _1608 : (isnan(_1608) ? _1779 : min(_1608, _1779));
        float _2078 = isnan(_2075) ? _2077 : (isnan(_2077) ? _2075 : min(_2077, _2075));
        float _2082 = (_2078 * _1574) + _1563;
        float _2083 = (_2078 * _1577) + _1567;
        float _2084 = (_2078 * _1580) + _1571;
        float _2085 = _2078 * 9.9999997473787516355514526367188e-05;
        float _2087 = (-1.0) - _2085;
        float _2089 = _2085 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2084 > _2089) || ((_2084 < _2087) || ((_2083 > _2089) || ((_2083 < _2087) || ((_2082 < _2087) || (_2082 > _2089))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2229 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2084, cbModelParam._m0[9u].z, fma(_2083, cbModelParam._m0[9u].y, _2082 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2084, cbModelParam._m0[10u].z, fma(_2083, cbModelParam._m0[10u].y, _2082 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2084, cbModelParam._m0[11u].z, fma(_2083, cbModelParam._m0[11u].y, _2082 * cbModelParam._m0[11u].x))), _1516);
            frontier_phi_16_38_ladder = _2229.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2229.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2229.x * cbModelParam._m0[1u].y;
        }
        _1596 = frontier_phi_16_38_ladder_2;
        _1598 = frontier_phi_16_38_ladder_1;
        _1600 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1584 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_673, _674, _675), _1516);
        _1596 = _1584.x * cbModelParam._m0[1u].y;
        _1598 = _1584.y * cbModelParam._m0[1u].y;
        _1600 = _1584.z * cbModelParam._m0[1u].y;
    }
    float _1604 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _487);
    float _1605 = isnan(_1604) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1604 : min(cbModelParam._m0[25u].w, _1604));
    float _1694;
    float _1696;
    float _1698;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1658 = fma(_737, cbModelParam._m0[21u].z, fma(_733, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _729)) + cbModelParam._m0[21u].w;
        float _1662 = fma(_737, cbModelParam._m0[22u].z, fma(_733, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _729)) + cbModelParam._m0[22u].w;
        float _1666 = fma(_737, cbModelParam._m0[23u].z, fma(_733, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _729)) + cbModelParam._m0[23u].w;
        float _1669 = fma(_675, cbModelParam._m0[21u].z, fma(_674, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _673));
        float _1672 = fma(_675, cbModelParam._m0[22u].z, fma(_674, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _673));
        float _1675 = fma(_675, cbModelParam._m0[23u].z, fma(_674, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _673));
        float _1784;
        if (_1669 > 0.0)
        {
            _1784 = abs((1.0 - _1658) / _1669);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1669 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1658 + 1.0) / _1669);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1784 = frontier_phi_28_24_ladder;
        }
        float _2102;
        if (_1672 > 0.0)
        {
            _2102 = abs((1.0 - _1662) / _1672);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1672 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1662 + 1.0) / _1672);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2102 = frontier_phi_40_35_ladder;
        }
        float _2440;
        if (_1675 > 0.0)
        {
            _2440 = abs((1.0 - _1666) / _1675);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1675 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1666 + 1.0) / _1675);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2440 = frontier_phi_50_47_ladder;
        }
        float _2442 = isnan(_2102) ? _1784 : (isnan(_1784) ? _2102 : min(_1784, _2102));
        float _2443 = isnan(_2440) ? _2442 : (isnan(_2442) ? _2440 : min(_2442, _2440));
        float _2447 = (_2443 * _1669) + _1658;
        float _2448 = (_2443 * _1672) + _1662;
        float _2449 = (_2443 * _1675) + _1666;
        float _2450 = _2443 * 9.9999997473787516355514526367188e-05;
        float _2451 = (-1.0) - _2450;
        float _2453 = _2450 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2449 > _2453) || ((_2449 < _2451) || ((_2448 > _2453) || ((_2448 < _2451) || ((_2447 < _2451) || (_2447 > _2453))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2571 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2449, cbModelParam._m0[17u].z, fma(_2448, cbModelParam._m0[17u].y, _2447 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2449, cbModelParam._m0[18u].z, fma(_2448, cbModelParam._m0[18u].y, _2447 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2449, cbModelParam._m0[19u].z, fma(_2448, cbModelParam._m0[19u].y, _2447 * cbModelParam._m0[19u].x))), _1605);
            frontier_phi_25_50_ladder = _2571.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2571.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2571.x * cbModelParam._m0[1u].z;
        }
        _1694 = frontier_phi_25_50_ladder_2;
        _1696 = frontier_phi_25_50_ladder_1;
        _1698 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1678 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_673, _674, _675), _1605);
        _1694 = _1678.x * cbModelParam._m0[1u].z;
        _1696 = _1678.y * cbModelParam._m0[1u].z;
        _1698 = _1678.z * cbModelParam._m0[1u].z;
    }
    float _1711 = (((_700 * _649) + _701) * _665) * ((cbModelParam._m0[1u].w * (_1694 - _1596)) + _1596);
    float _1713 = (((_700 * _651) + _701) * _665) * ((cbModelParam._m0[1u].w * (_1696 - _1598)) + _1598);
    float _1715 = (((_700 * _652) + _701) * _665) * ((cbModelParam._m0[1u].w * (_1698 - _1600)) + _1600);
    float _1718 = fma(_1715, cbSceneParam._m0[89u].z, fma(_1713, cbSceneParam._m0[89u].y, _1711 * cbSceneParam._m0[89u].x));
    float _1721 = fma(_1715, cbSceneParam._m0[90u].z, fma(_1713, cbSceneParam._m0[90u].y, _1711 * cbSceneParam._m0[90u].x));
    float _1724 = fma(_1715, cbSceneParam._m0[91u].z, fma(_1713, cbSceneParam._m0[91u].y, _1711 * cbSceneParam._m0[91u].x));
    float _1758 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1762 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1766 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1770 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1771 = _1758 / _1770;
    float _1772 = _1762 / _1770;
    float _1773 = _1766 / _1770;
    float _1920;
    float _1921;
    float _1922;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1800 = ((uint(_1773 > cbSceneParam._m0[59u].y) + uint(_1773 > cbSceneParam._m0[59u].x)) + uint(_1773 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1801 = _1800 + 43u;
        uint _1809 = _1800 + 44u;
        uint _1817 = _1800 + 45u;
        uint _1825 = _1800 + 46u;
        float _1836 = fma(_1770, cbSceneParam._m0[_1801].w, fma(_1766, cbSceneParam._m0[_1801].z, fma(_1762, cbSceneParam._m0[_1801].y, _1758 * cbSceneParam._m0[_1801].x)));
        float _1840 = fma(_1770, cbSceneParam._m0[_1809].w, fma(_1766, cbSceneParam._m0[_1809].z, fma(_1762, cbSceneParam._m0[_1809].y, _1758 * cbSceneParam._m0[_1809].x)));
        float _1848 = fma(_1770, cbSceneParam._m0[_1825].w, fma(_1766, cbSceneParam._m0[_1825].z, fma(_1762, cbSceneParam._m0[_1825].y, _1758 * cbSceneParam._m0[_1825].x)));
        float _1853 = cbSceneParam._m0[33u].z * _1848;
        float _1855 = cbSceneParam._m0[33u].w * _1848;
        float _1858 = fma(_1770, cbSceneParam._m0[_1817].w, fma(_1766, cbSceneParam._m0[_1817].z, fma(_1762, cbSceneParam._m0[_1817].y, _1758 * cbSceneParam._m0[_1817].x))) / _1848;
        float _1906 = (cbSceneParam._m0[33u].x - sqrt(((_1772 * _1772) + (_1771 * _1771)) + (_1773 * _1773))) * cbSceneParam._m0[33u].y;
        float _4268 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
        float _1913 = (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1853 + _1836) / _1848, (_1855 + _1840) / _1848), _1858), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1855 + _1836) / _1848, (_1840 - _1853) / _1848), _1858), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1836 - _1853) / _1848, (_1840 - _1855) / _1848), _1858), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1836 - _1855) / _1848, (_1853 + _1840) / _1848), _1858), 0.0)).x), vec4(0.25)));
        _1920 = 1.0 - (_1913 * cbSceneParam._m0[34u].x);
        _1921 = 1.0 - (_1913 * cbSceneParam._m0[34u].y);
        _1922 = 1.0 - (_1913 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1920 = 1.0;
        _1921 = 1.0;
        _1922 = 1.0;
    }
    float _1986;
    float _1988;
    float _1990;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1974 = fma(_1770, cbSceneParam._m0[63u].w, fma(_1766, cbSceneParam._m0[63u].z, fma(_1762, cbSceneParam._m0[63u].y, _1758 * cbSceneParam._m0[63u].x)));
        float _1975 = fma(_1770, cbSceneParam._m0[60u].w, fma(_1766, cbSceneParam._m0[60u].z, fma(_1762, cbSceneParam._m0[60u].y, _1758 * cbSceneParam._m0[60u].x))) / _1974;
        float _1976 = fma(_1770, cbSceneParam._m0[61u].w, fma(_1766, cbSceneParam._m0[61u].z, fma(_1762, cbSceneParam._m0[61u].y, _1758 * cbSceneParam._m0[61u].x))) / _1974;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1975 >= cbSceneParam._m0[64u].x) && (_1976 >= cbSceneParam._m0[64u].y)) && (_1975 <= cbSceneParam._m0[64u].z)) && (_1976 <= cbSceneParam._m0[64u].w))
        {
            float _2115 = fma(_1770, cbSceneParam._m0[62u].w, fma(_1766, cbSceneParam._m0[62u].z, fma(_1762, cbSceneParam._m0[62u].y, _1758 * cbSceneParam._m0[62u].x))) / _1974;
            float _2119 = isnan(cbSceneParam._m0[41u].w) ? _2115 : (isnan(_2115) ? cbSceneParam._m0[41u].w : max(_2115, cbSceneParam._m0[41u].w));
            float _2162 = (cbSceneParam._m0[33u].x - sqrt(((_1772 * _1772) + (_1771 * _1771)) + (_1773 * _1773))) * cbSceneParam._m0[33u].y;
            float _4284 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
            float _2169 = (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1975, cbSceneParam._m0[33u].w + _1976), _2119), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1975, _1976 - cbSceneParam._m0[33u].z), _2119), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1975 - cbSceneParam._m0[33u].z, _1976 - cbSceneParam._m0[33u].w), _2119), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1975 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1976), _2119), 0.0)).x), vec4(0.25)));
            float _2173 = 1.0 - (_2169 * cbSceneParam._m0[34u].x);
            float _2174 = 1.0 - (_2169 * cbSceneParam._m0[34u].y);
            float _2175 = 1.0 - (_2169 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2175) ? _1922 : (isnan(_1922) ? _2175 : min(_1922, _2175));
            frontier_phi_37_36_ladder_1 = isnan(_2174) ? _1921 : (isnan(_1921) ? _2174 : min(_1921, _2174));
            frontier_phi_37_36_ladder_2 = isnan(_2173) ? _1920 : (isnan(_1920) ? _2173 : min(_1920, _2173));
        }
        else
        {
            frontier_phi_37_36_ladder = _1922;
            frontier_phi_37_36_ladder_1 = _1921;
            frontier_phi_37_36_ladder_2 = _1920;
        }
        _1986 = frontier_phi_37_36_ladder_2;
        _1988 = frontier_phi_37_36_ladder_1;
        _1990 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1986 = _1920;
        _1988 = _1921;
        _1990 = _1922;
    }
    uvec4 _1995 = floatBitsToUint(cbInstanceData._m0[_228 + 5u]);
    uint _1997 = _1995.x * 14u;
    uint _1998 = _1997 + 13u;
    float _2005 = _665 + (-1.0);
    float _2010 = (cbLight._m0[_1998].x * _2005) + 1.0;
    float _2011 = (cbLight._m0[_1998].y * _2005) + 1.0;
    float _2012 = (cbLight._m0[_1998].z * _2005) + 1.0;
    float _2013 = (cbLight._m0[_1998].w * _2005) + 1.0;
    uint _2014 = _1997 + 5u;
    float _2020 = isnan(1.0) ? _2011 : (isnan(_2011) ? 1.0 : min(_2011, 1.0));
    uint _2024 = _1997 + 4u;
    float _2034 = isnan(1.0) ? _2010 : (isnan(_2010) ? 1.0 : min(_2010, 1.0));
    uint _2038 = _1997 | 1u;
    float _2049 = dot(vec3(cbLight._m0[_1997].xyz), vec3(_484, _485, _486));
    float _2052 = dot(vec3(cbLight._m0[_2038].xyz), vec3(_484, _485, _486));
    float _4320 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
    float _4331 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _2057 = (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * 0.3183098733425140380859375;
    float _2059 = (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * 0.3183098733425140380859375;
    float _2066 = ((cbLight._m0[_2014].x * _2020) * _2059) + (((cbLight._m0[_2024].x * _1986) * _2034) * _2057);
    float _2067 = ((_2020 * cbLight._m0[_2014].y) * _2059) + (((cbLight._m0[_2024].y * _1988) * _2034) * _2057);
    float _2068 = ((_2020 * cbLight._m0[_2014].z) * _2059) + (((cbLight._m0[_2024].z * _1990) * _2034) * _2057);
    uvec4 _2072 = floatBitsToUint(cbLight._m0[_1997 + 12u]);
    bool _2074 = _2072.x == 0u;
    float _2176;
    float _2178;
    float _2180;
    if (_2074)
    {
        _2176 = _2066;
        _2178 = _2067;
        _2180 = _2068;
    }
    else
    {
        uint _2184 = _1997 + 6u;
        float _2200 = (dot(vec3(cbLight._m0[_1997 + 2u].xyz), vec3(_484, _485, _486)) * 0.5) + 0.5;
        float _2201 = _2200 * _2200;
        float _4342 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
        float _2202 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _2203 = isnan(1.0) ? _2012 : (isnan(_2012) ? 1.0 : min(_2012, 1.0));
        _2176 = (((cbLight._m0[_2184].x * 0.3183098733425140380859375) * _2202) * _2203) + _2066;
        _2178 = (((cbLight._m0[_2184].y * 0.3183098733425140380859375) * _2202) * _2203) + _2067;
        _2180 = (((cbLight._m0[_2184].z * 0.3183098733425140380859375) * _2202) * _2203) + _2068;
    }
    bool _2183 = _2072.y == 0u;
    float _2238;
    float _2240;
    float _2242;
    if (_2183)
    {
        _2238 = _2176;
        _2240 = _2178;
        _2242 = _2180;
    }
    else
    {
        uint _2411 = _1997 + 7u;
        float _2427 = (dot(vec3(cbLight._m0[_1997 + 3u].xyz), vec3(_484, _485, _486)) * 0.5) + 0.5;
        float _2428 = _2427 * _2427;
        float _4358 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2429 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _2430 = isnan(1.0) ? _2013 : (isnan(_2013) ? 1.0 : min(_2013, 1.0));
        _2238 = (((cbLight._m0[_2411].x * 0.3183098733425140380859375) * _2429) * _2430) + _2176;
        _2240 = (((cbLight._m0[_2411].y * 0.3183098733425140380859375) * _2429) * _2430) + _2178;
        _2242 = (((cbLight._m0[_2411].z * 0.3183098733425140380859375) * _2429) * _2430) + _2180;
    }
    uint _2245 = _1997 + 8u;
    float _2258 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1997].w)) * _487) * 0.949999988079071044921875);
    float _2259 = _2258 * _2258;
    float _2260 = cbLight._m0[_1997].x + _564;
    float _2261 = cbLight._m0[_1997].y + _565;
    float _2262 = cbLight._m0[_1997].z + _566;
    float _2266 = inversesqrt(dot(vec3(_2260, _2261, _2262), vec3(_2260, _2261, _2262)));
    float _2267 = _2266 * _2260;
    float _2268 = _2266 * _2261;
    float _2269 = _2266 * _2262;
    float _2270 = dot(vec3(_484, _485, _486), vec3(cbLight._m0[_1997].xyz));
    float _4374 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2273 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
    float _4385 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _2274 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
    float _2275 = dot(vec3(_484, _485, _486), vec3(_2267, _2268, _2269));
    float _4396 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2278 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
    float _2279 = dot(vec3(cbLight._m0[_1997].xyz), vec3(_2267, _2268, _2269));
    float _4407 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _2283 = _2259 * _2259;
    float _2287 = ((_2278 * _2278) * (_2283 + (-1.0))) + 1.0;
    float _2295 = exp2(log2(1.0 - (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0)))) * 5.0);
    float _2296 = 0.959999978542327880859375 - _646;
    float _2298 = 0.959999978542327880859375 - _647;
    float _2299 = 0.959999978542327880859375 - _648;
    float _2306 = 1.0 - _2259;
    float _2317 = (0.5 / (((_2274 * ((_2273 * _2306) + _2259)) + 9.9999999392252902907785028219223e-09) + (((_2274 * _2306) + _2259) * _2273))) * _2273;
    float _4418 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2319 = (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0))) * (_2283 / ((_2287 * _2287) * 3.141590118408203125));
    uint _2333 = _1997 + 9u;
    float _2344 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2038].w)) * _487) * 0.949999988079071044921875);
    float _2345 = _2344 * _2344;
    float _2346 = cbLight._m0[_2038].x + _564;
    float _2347 = cbLight._m0[_2038].y + _565;
    float _2348 = cbLight._m0[_2038].z + _566;
    float _2352 = inversesqrt(dot(vec3(_2346, _2347, _2348), vec3(_2346, _2347, _2348)));
    float _2353 = _2352 * _2346;
    float _2354 = _2352 * _2347;
    float _2355 = _2352 * _2348;
    float _2356 = dot(vec3(_484, _485, _486), vec3(cbLight._m0[_2038].xyz));
    float _4429 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2359 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
    float _2360 = dot(vec3(_484, _485, _486), vec3(_2353, _2354, _2355));
    float _4440 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2363 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
    float _2364 = dot(vec3(cbLight._m0[_2038].xyz), vec3(_2353, _2354, _2355));
    float _4451 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2368 = _2345 * _2345;
    float _2372 = ((_2363 * _2363) * (_2368 + (-1.0))) + 1.0;
    float _2379 = exp2(log2(1.0 - (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0)))) * 5.0);
    float _2386 = 1.0 - _2345;
    float _2396 = (0.5 / (((_2274 * ((_2359 * _2386) + _2345)) + 9.9999999392252902907785028219223e-09) + (((_2274 * _2386) + _2345) * _2359))) * _2359;
    float _4462 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2398 = (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (_2368 / ((_2372 * _2372) * 3.141590118408203125));
    float _2408 = (((((_2379 * _2296) + _649) * cbLight._m0[_2333].x) * _2398) * _2020) + ((((cbLight._m0[_2245].x * _1986) * ((_2295 * _2296) + _649)) * _2319) * _2034);
    float _2409 = (((((_2379 * _2298) + _651) * cbLight._m0[_2333].y) * _2398) * _2020) + ((((cbLight._m0[_2245].y * _1988) * ((_2295 * _2298) + _651)) * _2319) * _2034);
    float _2410 = (((((_2379 * _2299) + _652) * cbLight._m0[_2333].z) * _2398) * _2020) + ((((cbLight._m0[_2245].z * _1990) * ((_2295 * _2299) + _652)) * _2319) * _2034);
    float _2466;
    float _2468;
    float _2470;
    if (_2074)
    {
        _2466 = _2408;
        _2468 = _2409;
        _2470 = _2410;
    }
    else
    {
        uint _2472 = _1997 + 2u;
        uint _2476 = _1997 + 10u;
        float _2490 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2472].w)) * _487) * 0.949999988079071044921875);
        float _2491 = _2490 * _2490;
        float _2492 = cbLight._m0[_2472].x + _564;
        float _2493 = cbLight._m0[_2472].y + _565;
        float _2494 = cbLight._m0[_2472].z + _566;
        float _2498 = inversesqrt(dot(vec3(_2492, _2493, _2494), vec3(_2492, _2493, _2494)));
        float _2499 = _2498 * _2492;
        float _2500 = _2498 * _2493;
        float _2501 = _2498 * _2494;
        float _2502 = dot(vec3(_484, _485, _486), vec3(cbLight._m0[_2472].xyz));
        float _4473 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2505 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
        float _2506 = dot(vec3(_484, _485, _486), vec3(_2499, _2500, _2501));
        float _4484 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2509 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _2510 = dot(vec3(cbLight._m0[_2472].xyz), vec3(_2499, _2500, _2501));
        float _4495 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
        float _2514 = _2491 * _2491;
        float _2518 = ((_2509 * _2509) * (_2514 + (-1.0))) + 1.0;
        float _2525 = exp2(log2(1.0 - (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0)))) * 5.0);
        float _2532 = 1.0 - _2491;
        float _2542 = (0.5 / (((_2274 * ((_2505 * _2532) + _2491)) + 9.9999999392252902907785028219223e-09) + (((_2274 * _2532) + _2491) * _2505))) * _2505;
        float _4506 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        float _2544 = (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * (_2514 / ((_2518 * _2518) * 3.141590118408203125));
        float _2545 = isnan(1.0) ? _2012 : (isnan(_2012) ? 1.0 : min(_2012, 1.0));
        _2466 = (((((_2525 * _2296) + _649) * cbLight._m0[_2476].x) * _2544) * _2545) + _2408;
        _2468 = (((((_2525 * _2298) + _651) * cbLight._m0[_2476].y) * _2544) * _2545) + _2409;
        _2470 = (((((_2525 * _2299) + _652) * cbLight._m0[_2476].z) * _2544) * _2545) + _2410;
    }
    float _2576;
    float _2578;
    float _2580;
    if (_2183)
    {
        _2576 = _2466;
        _2578 = _2468;
        _2580 = _2470;
    }
    else
    {
        uint _2587 = _1997 + 3u;
        uint _2591 = _1997 + 11u;
        float _2605 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2587].w)) * _487) * 0.949999988079071044921875);
        float _2606 = _2605 * _2605;
        float _2607 = cbLight._m0[_2587].x + _564;
        float _2608 = cbLight._m0[_2587].y + _565;
        float _2609 = cbLight._m0[_2587].z + _566;
        float _2613 = inversesqrt(dot(vec3(_2607, _2608, _2609), vec3(_2607, _2608, _2609)));
        float _2614 = _2613 * _2607;
        float _2615 = _2613 * _2608;
        float _2616 = _2613 * _2609;
        float _2617 = dot(vec3(_484, _485, _486), vec3(cbLight._m0[_2587].xyz));
        float _4522 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2620 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _2621 = dot(vec3(_484, _485, _486), vec3(_2614, _2615, _2616));
        float _4533 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
        float _2624 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _2625 = dot(vec3(cbLight._m0[_2587].xyz), vec3(_2614, _2615, _2616));
        float _4544 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
        float _2629 = _2606 * _2606;
        float _2633 = ((_2624 * _2624) * (_2629 + (-1.0))) + 1.0;
        float _2640 = exp2(log2(1.0 - (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0)))) * 5.0);
        float _2647 = 1.0 - _2606;
        float _2657 = (0.5 / (((_2274 * ((_2620 * _2647) + _2606)) + 9.9999999392252902907785028219223e-09) + (((_2274 * _2647) + _2606) * _2620))) * _2620;
        float _4555 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
        float _2659 = (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (_2629 / ((_2633 * _2633) * 3.141590118408203125));
        float _2660 = isnan(1.0) ? _2013 : (isnan(_2013) ? 1.0 : min(_2013, 1.0));
        _2576 = (((((_2640 * _2296) + _649) * cbLight._m0[_2591].x) * _2659) * _2660) + _2466;
        _2578 = (((((_2640 * _2298) + _651) * cbLight._m0[_2591].y) * _2659) * _2660) + _2468;
        _2580 = (((((_2640 * _2299) + _652) * cbLight._m0[_2591].z) * _2659) * _2660) + _2470;
    }
    float _2726;
    float _2728;
    float _2730;
    float _2732;
    float _2734;
    float _2736;
    if (_1995.y == 0u)
    {
        uvec4 _2681 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2682 = _2681.x;
        uint _2693 = uint((float(_2681.y) * floor(float(uint(cbSceneParam._m0[85u].y * _586) / _2682))) + floor(float(uint(cbSceneParam._m0[85u].x * _585) / _2682)));
        float _2703 = (log2(_1773 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2704 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        uint _2707 = uint(isnan(14.0) ? _2704 : (isnan(_2704) ? 14.0 : min(_2704, 14.0)));
        uvec4 _2712 = texelFetch(g_lightClusterGridBuffer, int(((_2707 << 2u) + (_2693 << 6u)) >> 2u));
        uint _2713 = _2712.x;
        uint _2714 = _2681.z;
        float _2793;
        float _2795;
        float _2797;
        float _2799;
        float _2801;
        float _2803;
        if (((((1u << ((_2714 >> 4u) & 15u)) + 4294967295u) & _2713) == 0u) || ((_2714 & 240u) == 0u))
        {
            _2793 = 0.0;
            _2795 = 0.0;
            _2797 = 0.0;
            _2799 = 0.0;
            _2801 = 0.0;
            _2803 = 0.0;
        }
        else
        {
            float _2794;
            float _2796;
            float _2798;
            float _2800;
            float _2802;
            float _2804;
            float _2946 = 0.0;
            float _2947 = 0.0;
            float _2948 = 0.0;
            float _2949 = 0.0;
            float _2950 = 0.0;
            float _2951 = 0.0;
            uint _2952 = 0u;
            uint _2961;
            bool _2962;
            for (;;)
            {
                _2961 = texelFetch(g_lightClassification, int((((_2707 << 5u) + (_2693 << 9u)) + (_2952 << 2u)) >> 2u)).x;
                _2962 = _2961 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2962)
                {
                    frontier_phi_71_pred = _2951;
                    frontier_phi_71_pred_1 = _2950;
                    frontier_phi_71_pred_2 = _2949;
                    frontier_phi_71_pred_3 = _2948;
                    frontier_phi_71_pred_4 = _2947;
                    frontier_phi_71_pred_5 = _2946;
                }
                else
                {
                    float _3091;
                    float _3092;
                    float _3093;
                    float _3094;
                    float _3095;
                    float _3096;
                    uint _3097;
                    _3091 = _2946;
                    _3092 = _2947;
                    _3093 = _2948;
                    _3094 = _2949;
                    _3095 = _2950;
                    _3096 = _2951;
                    _3097 = _2961;
                    float _3018;
                    float _3019;
                    float _3020;
                    float _3021;
                    float _3022;
                    float _3023;
                    for (;;)
                    {
                        uint _3101 = uint(findLSB(_3097)) + (_2952 << 5u);
                        uint _3098 = (_3097 + 4294967295u) & _3097;
                        uint _3103 = _3101 * 48u;
                        vec4 _3117 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3103)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 3u)).x));
                        uint _3123 = (_3101 * 48u) + 4u;
                        vec4 _3136 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3123)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 3u)).x));
                        uint _3142 = (_3101 * 48u) + 8u;
                        vec3 _3153 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3142)).x, texelFetch(g_PointLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3142 + 2u)).x));
                        float _3157 = _3117.x - _1771;
                        float _3158 = _3117.y - _1772;
                        float _3159 = _3117.z - _1773;
                        float _3160 = dot(vec3(_3157, _3158, _3159), vec3(_3157, _3158, _3159));
                        float _3163 = inversesqrt(_3160);
                        float _3164 = _3163 * _3157;
                        float _3165 = _3163 * _3158;
                        float _3166 = _3163 * _3159;
                        float _3167 = dot(vec3(_606, _609, _612), vec3(_3164, _3165, _3166));
                        float _3172 = 1.0 - (_3160 * _3117.w);
                        float _4581 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                        float _3173 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                        float _3174 = sqrt(_3160) * _3136.w;
                        float _3177 = 1.39999997615814208984375 / (_3174 + 1.39999997615814208984375);
                        float _3178 = _3177 * _3177;
                        float _3181 = ((1.0 - _3178) * _3167) + _3178;
                        float _3184 = _3174 * _3174;
                        float _3188 = ((isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0))) * _3173) / ((_3184 * 0.699999988079071044921875) + 1.0);
                        float _3192 = (-0.0) - _1771;
                        float _3193 = (-0.0) - _1772;
                        float _3194 = (-0.0) - _1773;
                        float _3198 = inversesqrt(dot(vec3(_3192, _3193, _3194), vec3(_3192, _3193, _3194)));
                        float _3199 = _3198 * _3192;
                        float _3200 = _3198 * _3193;
                        float _3201 = _3198 * _3194;
                        float _3208 = exp2(log2(1.0 / ((_3184 * 3.5) + 5.0)) * 0.25);
                        float _3209 = 1.0 - _681;
                        float _3216 = sqrt(1.0 - ((1.0 - (_3209 * _3209)) * (1.0 - (_3208 * _3208))));
                        float _3217 = _3216 * _3216;
                        float _3218 = _3217 * _3217;
                        float _3219 = _3199 + _3164;
                        float _3220 = _3200 + _3165;
                        float _3221 = _3201 + _3166;
                        float _3225 = inversesqrt(dot(vec3(_3219, _3220, _3221), vec3(_3219, _3220, _3221)));
                        float _3229 = dot(vec3(_606, _609, _612), vec3(_3199, _3200, _3201));
                        float _4597 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                        float _3232 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
                        float _3233 = dot(vec3(_606, _609, _612), vec3(_3225 * _3219, _3225 * _3220, _3225 * _3221));
                        float _4608 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                        float _3236 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
                        float _3240 = ((_3236 * _3236) * (_3218 + (-1.0))) + 1.0;
                        float _3241 = _3177 * _3217;
                        float _3242 = _3241 * _3241;
                        float _3245 = ((1.0 - _3242) * _3167) + _3242;
                        float _4619 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                        float _3246 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                        float _3247 = 1.0 - _3217;
                        float _3257 = (0.5 / (((_3246 * ((_3232 * _3247) + _3217)) + 9.9999999392252902907785028219223e-09) + (((_3246 * _3247) + _3217) * _3232))) * _3246;
                        float _4630 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                        float _3268 = (((_3218 * 3.1415927410125732421875) * (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0)))) / ((_3240 * _3240) * ((_3184 * 2.1991131305694580078125) + 3.141590118408203125))) * _3173;
                        _3021 = (_3188 * _3136.x) + _3094;
                        _3022 = (_3188 * _3136.y) + _3095;
                        _3023 = (_3188 * _3136.z) + _3096;
                        _3018 = (_3268 * _3153.x) + _3091;
                        _3019 = (_3268 * _3153.y) + _3092;
                        _3020 = (_3268 * _3153.z) + _3093;
                        if (_3098 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3091 = _3018;
                            _3092 = _3019;
                            _3093 = _3020;
                            _3094 = _3021;
                            _3095 = _3022;
                            _3096 = _3023;
                            _3097 = _3098;
                        }
                    }
                    frontier_phi_71_pred = _3023;
                    frontier_phi_71_pred_1 = _3022;
                    frontier_phi_71_pred_2 = _3021;
                    frontier_phi_71_pred_3 = _3020;
                    frontier_phi_71_pred_4 = _3019;
                    frontier_phi_71_pred_5 = _3018;
                }
                _2804 = frontier_phi_71_pred;
                _2802 = frontier_phi_71_pred_1;
                _2800 = frontier_phi_71_pred_2;
                _2798 = frontier_phi_71_pred_3;
                _2796 = frontier_phi_71_pred_4;
                _2794 = frontier_phi_71_pred_5;
                uint _2953 = _2952 + 1u;
                if (_2953 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2946 = _2794;
                    _2947 = _2796;
                    _2948 = _2798;
                    _2949 = _2800;
                    _2950 = _2802;
                    _2951 = _2804;
                    _2952 = _2953;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2793 = _2794;
            _2795 = _2796;
            _2797 = _2798;
            _2799 = _2800;
            _2801 = _2802;
            _2803 = _2804;
        }
        uvec4 _2807 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2808 = _2807.z;
        uint _2810 = (_2808 >> 8u) & 15u;
        float _2914;
        float _2916;
        float _2918;
        float _2920;
        float _2922;
        float _2924;
        if (((4294967295u << _2810) & _2713) == 0u)
        {
            _2914 = _2793;
            _2916 = _2795;
            _2918 = _2797;
            _2920 = _2799;
            _2922 = _2801;
            _2924 = _2803;
        }
        else
        {
            float _2939 = inversesqrt(dot(vec3(_1771, _1772, _1773), vec3(_1771, _1772, _1773)));
            float _2940 = _2939 * _1771;
            float _2941 = _2939 * _1772;
            float _2942 = _2939 * _1773;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2810 < ((_2808 >> 12u) & 15u))
            {
                float _2915;
                float _2917;
                float _2919;
                float _2921;
                float _2923;
                float _2925;
                float _3074 = _2793;
                float _3075 = _2795;
                float _3076 = _2797;
                float _3077 = _2799;
                float _3078 = _2801;
                float _3079 = _2803;
                uint _3080 = _2810;
                uint _3089;
                bool _3090;
                for (;;)
                {
                    _3089 = texelFetch(g_lightClassification, int((((_2707 << 5u) + (_2693 << 9u)) + (_3080 << 2u)) >> 2u)).x;
                    _3090 = _3089 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3090)
                    {
                        frontier_phi_82_pred = _3079;
                        frontier_phi_82_pred_1 = _3078;
                        frontier_phi_82_pred_2 = _3077;
                        frontier_phi_82_pred_3 = _3076;
                        frontier_phi_82_pred_4 = _3075;
                        frontier_phi_82_pred_5 = _3074;
                    }
                    else
                    {
                        float _3282;
                        float _3283;
                        float _3284;
                        float _3285;
                        float _3286;
                        float _3287;
                        float _3577;
                        float _3578;
                        float _3579;
                        float _3580;
                        float _3581;
                        float _3582;
                        float _3295 = _3074;
                        float _3296 = _3075;
                        float _3297 = _3076;
                        float _3298 = _3077;
                        float _3299 = _3078;
                        float _3300 = _3079;
                        uint _3301 = _3089;
                        uint _3302;
                        vec4 _3327;
                        float _3328;
                        vec4 _3343;
                        vec3 _3355;
                        vec4 _3371;
                        vec4 _3387;
                        float _3433;
                        bool _3434;
                        for (;;)
                        {
                            uint _3312 = ((_3080 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3301));
                            _3302 = (_3301 + 4294967295u) & _3301;
                            uint _3314 = _3312 * 40u;
                            _3327 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3314)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 3u)).x));
                            _3328 = _3327.w;
                            uint _3330 = (_3312 * 40u) + 4u;
                            _3343 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3330)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 3u)).x));
                            uint _3345 = (_3312 * 40u) + 8u;
                            _3355 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3345)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 2u)).x));
                            uint _3358 = (_3312 * 40u) + 16u;
                            _3371 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3358)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 3u)).x));
                            uint _3374 = (_3312 * 40u) + 20u;
                            _3387 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3374)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 3u)).x));
                            uint _3389 = (_3312 * 40u) + 24u;
                            vec4 _3402 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3389)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 3u)).x));
                            uint _3408 = (_3312 * 40u) + 28u;
                            vec4 _3421 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3408)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 3u)).x));
                            _3433 = fma(_1773, _3421.z, fma(_1772, _3421.y, _3421.x * _1771)) + _3421.w;
                            _3434 = !((fma(_1773, _3402.z, fma(_1772, _3402.y, _3402.x * _1771)) + _3402.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3434)
                            {
                                float _3461 = _3327.x - _1771;
                                float _3462 = _3327.y - _1772;
                                float _3463 = _3327.z - _1773;
                                float _3464 = dot(vec3(_3461, _3462, _3463), vec3(_3461, _3462, _3463));
                                float _3467 = inversesqrt(_3464);
                                float _3468 = _3467 * _3461;
                                float _3469 = _3467 * _3462;
                                float _3470 = _3467 * _3463;
                                float _3474 = 1.0 - (_3464 / (_3328 * _3328));
                                float _4641 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                                float _3475 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
                                float _3479 = sqrt(_3464) * _3343.w;
                                float _3481 = 1.39999997615814208984375 / (_3479 + 1.39999997615814208984375);
                                float _3482 = _3481 * _3481;
                                float _3485 = ((1.0 - _3482) * dot(vec3(_3468, _3469, _3470), vec3(_606, _609, _612))) + _3482;
                                float _3488 = _3479 * _3479;
                                float _3492 = (fma(_1773, _3371.z, fma(_1772, _3371.y, _3371.x * _1771)) + _3371.w) / _3433;
                                float _3493 = (fma(_1773, _3387.z, fma(_1772, _3387.y, _3387.x * _1771)) + _3387.w) / _3433;
                                float _3497 = 1.0 - dot(vec2(_3492, _3493), vec2(_3492, _3493));
                                float _4657 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                                float _3498 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                                float _3499 = _3498 * (((isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0))) * _3475) / ((_3488 * 0.699999988079071044921875) + 1.0));
                                float _3511 = exp2(log2(1.0 / ((_3488 * 3.5) + 5.0)) * 0.25);
                                float _3512 = 1.0 - _681;
                                float _3519 = sqrt(1.0 - ((1.0 - (_3512 * _3512)) * (1.0 - (_3511 * _3511))));
                                float _3520 = _3519 * _3519;
                                float _3521 = _3520 * _3520;
                                float _3522 = _3468 - _2940;
                                float _3523 = _3469 - _2941;
                                float _3524 = _3470 - _2942;
                                float _3528 = inversesqrt(dot(vec3(_3522, _3523, _3524), vec3(_3522, _3523, _3524)));
                                float _3532 = dot(vec3(_606, _609, _612), vec3((-0.0) - _2940, (-0.0) - _2941, (-0.0) - _2942));
                                float _4668 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                                float _3535 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                                float _3536 = dot(vec3(_606, _609, _612), vec3(_3528 * _3522, _3528 * _3523, _3528 * _3524));
                                float _4679 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                                float _3539 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
                                float _3543 = ((_3539 * _3539) * (_3521 + (-1.0))) + 1.0;
                                float _3544 = _3481 * _3520;
                                float _3545 = _3544 * _3544;
                                float _3551 = ((1.0 - _3545) * dot(vec3(_606, _609, _612), vec3(_3468, _3469, _3470))) + _3545;
                                float _4690 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                                float _3552 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
                                float _3553 = 1.0 - _3520;
                                float _3563 = (0.5 / (((_3552 * ((_3535 * _3553) + _3520)) + 9.9999999392252902907785028219223e-09) + (((_3552 * _3553) + _3520) * _3535))) * _3552;
                                float _4701 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                                float _3573 = (_3498 * _3475) * (((_3521 * 3.1415927410125732421875) * (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0)))) / ((_3543 * _3543) * ((_3488 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3499 * _3343.z;
                                frontier_phi_88_pred_1 = _3499 * _3343.y;
                                frontier_phi_88_pred_2 = _3499 * _3343.x;
                                frontier_phi_88_pred_3 = _3573 * _3355.z;
                                frontier_phi_88_pred_4 = _3573 * _3355.y;
                                frontier_phi_88_pred_5 = _3573 * _3355.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3582 = frontier_phi_88_pred;
                            _3581 = frontier_phi_88_pred_1;
                            _3580 = frontier_phi_88_pred_2;
                            _3579 = frontier_phi_88_pred_3;
                            _3578 = frontier_phi_88_pred_4;
                            _3577 = frontier_phi_88_pred_5;
                            _3285 = _3580 + _3298;
                            _3286 = _3581 + _3299;
                            _3287 = _3582 + _3300;
                            _3282 = _3577 + _3295;
                            _3283 = _3578 + _3296;
                            _3284 = _3579 + _3297;
                            if (_3302 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3295 = _3282;
                                _3296 = _3283;
                                _3297 = _3284;
                                _3298 = _3285;
                                _3299 = _3286;
                                _3300 = _3287;
                                _3301 = _3302;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3287;
                        frontier_phi_82_pred_1 = _3286;
                        frontier_phi_82_pred_2 = _3285;
                        frontier_phi_82_pred_3 = _3284;
                        frontier_phi_82_pred_4 = _3283;
                        frontier_phi_82_pred_5 = _3282;
                    }
                    _2925 = frontier_phi_82_pred;
                    _2923 = frontier_phi_82_pred_1;
                    _2921 = frontier_phi_82_pred_2;
                    _2919 = frontier_phi_82_pred_3;
                    _2917 = frontier_phi_82_pred_4;
                    _2915 = frontier_phi_82_pred_5;
                    uint _3081 = _3080 + 1u;
                    if (_3081 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3074 = _2915;
                        _3075 = _2917;
                        _3076 = _2919;
                        _3077 = _2921;
                        _3078 = _2923;
                        _3079 = _2925;
                        _3080 = _3081;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2921;
                frontier_phi_63_64_ladder_1 = _2925;
                frontier_phi_63_64_ladder_2 = _2923;
                frontier_phi_63_64_ladder_3 = _2919;
                frontier_phi_63_64_ladder_4 = _2917;
                frontier_phi_63_64_ladder_5 = _2915;
            }
            else
            {
                frontier_phi_63_64_ladder = _2799;
                frontier_phi_63_64_ladder_1 = _2803;
                frontier_phi_63_64_ladder_2 = _2801;
                frontier_phi_63_64_ladder_3 = _2797;
                frontier_phi_63_64_ladder_4 = _2795;
                frontier_phi_63_64_ladder_5 = _2793;
            }
            _2914 = frontier_phi_63_64_ladder_5;
            _2916 = frontier_phi_63_64_ladder_4;
            _2918 = frontier_phi_63_64_ladder_3;
            _2920 = frontier_phi_63_64_ladder;
            _2922 = frontier_phi_63_64_ladder_2;
            _2924 = frontier_phi_63_64_ladder_1;
        }
        float _2929 = isnan(1.0) ? _665 : (isnan(_665) ? 1.0 : min(_665, 1.0));
        _2726 = (_2929 * _2920) + _2238;
        _2728 = (_2929 * _2922) + _2240;
        _2730 = (_2929 * _2924) + _2242;
        _2732 = ((_2914 * _649) * _2929) + _2576;
        _2734 = ((_2916 * _651) * _2929) + _2578;
        _2736 = ((_2918 * _652) * _2929) + _2580;
    }
    else
    {
        _2726 = _2238;
        _2728 = _2240;
        _2730 = _2242;
        _2732 = _2576;
        _2734 = _2578;
        _2736 = _2580;
    }
    float _4717 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _4728 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _4739 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _2753 = ((isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0))) * (_2726 + ((isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0))) * _665))) + ((_2732 + ((isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))) * _1505)) * cbPerFrame._m0[3u].x);
    float _2754 = ((isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0))) * (_2728 + ((isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0))) * _665))) + ((_2734 + ((isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))) * _1505)) * cbPerFrame._m0[3u].x);
    float _2755 = ((isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0))) * (_2730 + ((isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0))) * _665))) + ((_2736 + ((isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))) * _1505)) * cbPerFrame._m0[3u].x);
    uint _2756 = _228 + 6u;
    float _2764 = _585 / cbSceneParam._m0[86u].x;
    float _2765 = _586 / cbSceneParam._m0[86u].y;
    vec4 _2779 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2764, _2765, (log2((isnan(cbSceneParam._m0[77u].w) ? _506 : (isnan(_506) ? cbSceneParam._m0[77u].w : min(_506, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2781 = _2779.x;
    float _2782 = _2779.y;
    float _2783 = _2779.z;
    float _2784 = _2779.w;
    float _2856;
    float _2858;
    float _2860;
    float _2862;
    if (_506 > cbSceneParam._m0[78u].w)
    {
        float _2818 = isnan(_506) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _506 : min(cbSceneParam._m0[80u].w, _506));
        float _2819 = _2818 / _506;
        float _2830 = _2819 * _557;
        float _2831 = _558 * _2819;
        float _2832 = (-0.0) - _2831;
        float _2834 = _2819 * _559;
        float _2836 = (cbSceneParam._m0[77u].w * _2832) / _2818;
        float _2837 = _2836 + cbSceneParam._m0[79u].w;
        float _2838 = cbSceneParam._m0[79u].w - _2831;
        float _2844 = sqrt(((_2830 * _2830) + (_2831 * _2831)) + (_2834 * _2834));
        float _2847 = (1.0 - (cbSceneParam._m0[77u].w / _2818)) * _2844;
        float _2852 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2854 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3031;
        if (abs((_2832 - _2836) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3031 = ((((_2837 > 0.0) ? exp2(_2852 * _2837) : (2.0 - exp2(_2854 * _2837))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2847;
        }
        else
        {
            float _2975 = 1.0 / cbSceneParam._m0[80u].x;
            float _2976 = isnan(_2838) ? _2837 : (isnan(_2837) ? _2838 : max(_2837, _2838));
            float _2977 = isnan(_2838) ? _2837 : (isnan(_2837) ? _2838 : min(_2837, _2838));
            float _2986 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : min(_2976, 0.0));
            float _2987 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : min(_2977, 0.0));
            _3031 = ((abs(_2844 / _2832) * cbSceneParam._m0[80u].y) * ((((_2986 - _2987) * 2.0) - ((exp2(_2852 * (isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0)))) - exp2(_2852 * (isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0))))) * _2975)) - ((exp2(_2854 * _2986) - exp2(_2854 * _2987)) * _2975))) + (_2847 * cbSceneParam._m0[80u].z);
        }
        vec4 _3033 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2764, _2765, 1.0), 0.0);
        float _3042 = exp2((_3031 * (-1.44269502162933349609375)) * (1.0 - _3033.w));
        float _3043 = log2(_3042);
        float _3059 = log2(_2784);
        _2856 = (exp2(_3059 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3043 * cbSceneParam._m0[78u].x)) * _3033.x) / cbSceneParam._m0[78u].x)) + _2781;
        _2858 = (exp2(_3059 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3043 * cbSceneParam._m0[78u].y)) * _3033.y) / cbSceneParam._m0[78u].y)) + _2782;
        _2860 = (exp2(_3059 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3043 * cbSceneParam._m0[78u].z)) * _3033.z) / cbSceneParam._m0[78u].z)) + _2783;
        _2862 = _3042 * _2784;
    }
    else
    {
        _2856 = _2781;
        _2858 = _2782;
        _2860 = _2783;
        _2862 = _2784;
    }
    bool _3069;
    vec4 _2872;
    vec4 _2894;
    float _2896;
    float _2900;
    float _2901;
    float _2902;
    float _2903;
    bool _2913;
    for (;;)
    {
        _2872 = cbMatDynParam._m0[0u];
        float _2874 = roundEven(_2872.y);
        bool _2875 = _2874 == 3.0;
        float _2876 = log2(_2862);
        float _2883 = exp2(_2876 * cbSceneParam._m0[78u].x) * _2753;
        float _2884 = exp2(_2876 * cbSceneParam._m0[78u].y) * _2754;
        float _2885 = exp2(_2876 * cbSceneParam._m0[78u].z) * _2755;
        float _2892 = _573 + (-0.5);
        _2894 = cbMtdParam._m0[1u];
        _2896 = _2894.y * _2892;
        float _2899 = (_2874 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2900 = _2899 * (_2875 ? _2883 : (_2883 + (cbSceneParam._m0[72u].w * _2856)));
        _2901 = _2899 * (_2875 ? _2884 : (_2884 + (cbSceneParam._m0[72u].w * _2858)));
        _2902 = _2899 * (_2875 ? _2885 : (_2885 + (cbSceneParam._m0[72u].w * _2860)));
        _2903 = _2892 * 0.999000012874603271484375;
        _2913 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2913)
        {
            if ((cbInstanceData._m0[_228 + 7u].x + _2903) < 0.5)
            {
                _3069 = true;
                break;
            }
        }
        uint _3010 = _625 + uint(_2872.w);
        if ((cbInstanceData._m0[_3010].w < 1.0) && ((cbInstanceData._m0[_3010].w + _2903) < 0.5))
        {
            _3069 = true;
            break;
        }
        if ((_2896 + 1.0) < _2894.x)
        {
            _3069 = true;
            break;
        }
        _3069 = false;
        break;
    }
    float _3273;
    if (_3069)
    {
        discard_state = true;
        _3273 = 0.0;
    }
    else
    {
        _3273 = cbInstanceData._m0[_2756].w;
    }
    SV_Target.x = _2900;
    SV_Target.y = _2901;
    SV_Target.z = _2902;
    SV_Target.w = _3273;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2756].w;
    discard_exit();
}


