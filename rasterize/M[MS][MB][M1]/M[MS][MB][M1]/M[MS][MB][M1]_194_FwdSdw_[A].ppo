#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1347;
float _4008;
float _4009;
float _4010;
float _4011;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _252 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _252 + 1u;
    uint _262 = _252 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _359 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _361 = _359.x;
    float _373 = dot(vec4(_361, _359.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _390 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_361 - _373) * cbMtdParam._m0[24u].y) + _373) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4020 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _391 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
    float _398 = (_391 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _399 = (_391 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _400 = (_391 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _417 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _272) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _273) + cbTextureTilingScale._m0[3u].w));
    vec4 _437 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _439 = _437.x;
    float _449 = dot(vec4(_439, _437.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _463 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_439 - _449) * cbMtdParam._m0[24u].y) + _449) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4031 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _464 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _471 = (_464 * ((_417.x * cbMtdParam._m0[13u].x) - _398)) + _398;
    float _472 = (_464 * ((_417.y * cbMtdParam._m0[13u].y) - _399)) + _399;
    float _473 = (_464 * ((_417.z * cbMtdParam._m0[13u].z) - _400)) + _400;
    vec4 _492 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _272) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _273) + cbTextureTilingScale._m0[14u].w));
    vec4 _512 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _529 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _531 = _529.x;
    float _532 = _529.y;
    float _533 = _529.z;
    float _540 = ((_512.x - _531) * _391) + _531;
    float _541 = ((_512.y - _532) * _391) + _532;
    float _542 = ((_512.z - _533) * _391) + _533;
    vec4 _554 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _272) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _273) + cbTextureTilingScale._m0[2u].w));
    float _567 = ((_554.z - _542) * _464) + _542;
    float _570 = ((((_554.x - _540) * _464) + _540) * 2.0) + (-1.0);
    float _572 = ((((_554.y - _541) * _464) + _541) * 2.0) + (-1.0);
    float _573 = dot(vec2(_570, _572), vec2(_570, _572));
    float _4042 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _578 = sqrt(1.0 - (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))));
    vec4 _591 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _609 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _611 = _609.x;
    float _612 = 1.0 - _611;
    float _625 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_611 - _612) * cbMtdParam._m0[24u].z) + _612) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4053 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _626 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _633 = (_626 * ((_492.x * cbMtdParam._m0[18u].x) - _471)) + _471;
    float _634 = (_626 * ((_492.y * cbMtdParam._m0[18u].y) - _472)) + _472;
    float _635 = (_626 * ((_492.z * cbMtdParam._m0[18u].z) - _473)) + _473;
    vec4 _647 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _661 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _663 = _661.x;
    float _681 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _272) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _273) + cbTextureTilingScale._m0[9u].w)).x - _663) * _391) + _663;
    float _698 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _272) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _273) + cbTextureTilingScale._m0[21u].w)).x - _681) * _464) + _681;
    float _702 = ((_647.x - _698) * cbMtdParam._m0[19u].z) + _698;
    float _704 = _702 - (_702 * _626);
    vec4 _717 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _724 = (_717.x * 2.0) + (-1.0);
    float _725 = (_717.y * 2.0) + (-1.0);
    float _726 = dot(vec2(_724, _725), vec2(_724, _725));
    float _4064 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _734 = (_626 * (_717.z - _567)) + _567;
    float _746 = (((_724 - _570) + (cbMtdParam._m0[21u].x * _570)) * _626) + _570;
    float _747 = (((_725 - _572) + (cbMtdParam._m0[21u].x * _572)) * _626) + _572;
    float _748 = (_626 * (sqrt(1.0 - (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0)))) - _578)) + _578;
    float _753 = cbMtdParam._m0[22u].x + _591.w;
    float _756 = fma(_748, _239 * NORMAL.x, fma(_747, _246 * TANGENT.x, (_232 * _224) * _746));
    float _759 = fma(_748, _239 * NORMAL.y, fma(_747, _246 * TANGENT.y, (_232 * _225) * _746));
    float _762 = fma(_748, _239 * NORMAL.z, fma(_747, _246 * TANGENT.z, (_232 * _226) * _746));
    float _766 = inversesqrt(dot(vec3(_756, _759, _762), vec3(_756, _759, _762)));
    float _767 = _766 * _756;
    float _768 = _766 * _759;
    float _769 = _766 * _762;
    float _4075 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _770 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _4086 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _4097 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _4108 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _4119 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _4130 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _775 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _789 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _830 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _840 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _830);
    float _841 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _830);
    float _842 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _830);
    float _846 = inversesqrt(dot(vec3(_840, _841, _842), vec3(_840, _841, _842)));
    float _847 = _840 * _846;
    float _848 = _841 * _846;
    float _849 = _842 * _846;
    vec4 _854 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _856 = _854.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1028 = sqrt(((_840 * _840) + (_841 * _841)) + (_842 * _842));
        float _1034 = (cbMatDynParam._m0[5u].x * _1028) + cbMatDynParam._m0[5u].y;
        float _4141 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1039 = (cbMatDynParam._m0[5u].z * _1028) + cbMatDynParam._m0[5u].w;
        float _4152 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) - _1035)) + _1035) < ((_856 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _867 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _868 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _886 = fma(_769, cbSceneParam._m0[5u].z, fma(_768, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _767));
    float _889 = fma(_769, cbSceneParam._m0[6u].z, fma(_768, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _767));
    float _892 = fma(_769, cbSceneParam._m0[7u].z, fma(_768, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _767));
    uint _905 = _252 + 9u;
    uint _906 = _905 + uint(cbMatDynParam._m0[0u].w);
    float _912 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0)))) * cbInstanceData._m0[_906].x;
    float _913 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0)))) * cbInstanceData._m0[_906].y;
    float _914 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) * cbInstanceData._m0[_906].z;
    float _4163 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _915 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _4174 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _916 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
    float _4185 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _917 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _918 = 1.0 - _775;
    float _919 = _915 * _918;
    float _920 = _916 * _918;
    float _921 = _917 * _918;
    float _926 = (_915 + (-0.039999999105930328369140625)) * _775;
    float _927 = (_916 + (-0.039999999105930328369140625)) * _775;
    float _928 = (_917 + (-0.039999999105930328369140625)) * _775;
    float _929 = _926 + 0.039999999105930328369140625;
    float _931 = _927 + 0.039999999105930328369140625;
    float _932 = _928 + 0.039999999105930328369140625;
    vec4 _941 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _867, cbSceneParam._m0[86u].y * _868));
    float _945 = ((isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * TEXCOORD_5.w) * _941.x;
    float _946 = dot(vec3(_767, _768, _769), vec3(_847, _848, _849));
    float _949 = _946 * 2.0;
    float _953 = (_949 * _767) - _847;
    float _954 = (_949 * _768) - _848;
    float _955 = (_949 * _769) - _849;
    float _959 = abs(dot(vec3(_847, _848, _849), vec3(_767, _768, _769)));
    float _4196 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _961 = sqrt(_770);
    float _974 = exp2((_961 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_961 * 3.0));
    float _980 = (1.0 - _974) * ((_961 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _981 = _974 * _961;
    float _1009 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1013 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1017 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1346;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1071 = fma(_1017, cbModelParam._m0[26u].z, fma(_1013, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1009));
        float _1075 = fma(_1017, cbModelParam._m0[27u].z, fma(_1013, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1009));
        float _1079 = fma(_1017, cbModelParam._m0[28u].z, fma(_1013, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1009));
        float _1104 = _1009 + _767;
        float _1105 = _1013 + _768;
        float _1106 = _1017 + _769;
        float _1116 = fma(_1106, cbModelParam._m0[26u].z, fma(_1105, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1104)) - _1071;
        float _1117 = fma(_1106, cbModelParam._m0[27u].z, fma(_1105, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1104)) - _1075;
        float _1118 = fma(_1106, cbModelParam._m0[28u].z, fma(_1105, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1104)) - _1079;
        float _1122 = inversesqrt(dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118)));
        float _1135 = ((_1122 * _1116) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1071 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1136 = ((_1122 * _1117) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1075 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1137 = ((_1122 * _1118) / cbModelParam._m0[34u].z) + ((((((_1079 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        float _1174 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1140.x + (-0.5));
        float _1176 = _1174 * (_1140.y + (-0.5));
        float _1177 = _1174 * (_1140.z + (-0.5));
        float _1184 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1147.x + (-0.5));
        float _1186 = _1184 * (_1147.y + (-0.5));
        float _1187 = _1184 * (_1147.z + (-0.5));
        float _1194 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1154.x + (-0.5));
        float _1196 = _1194 * (_1154.y + (-0.5));
        float _1197 = _1194 * (_1154.z + (-0.5));
        float _1204 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1161.x + (-0.5));
        float _1206 = _1204 * (_1161.y + (-0.5));
        float _1207 = _1204 * (_1161.z + (-0.5));
        float _1208 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1209 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1210 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1211 = _1175 * 0.5;
        float _1212 = _1185 * 0.5;
        float _1213 = _1195 * 0.5;
        float _1214 = dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213));
        float _1219 = (_1214 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1214);
        float _1228 = (dot(vec3(_767, _768, _769), vec3(_1219 * _1211, _1219 * _1212, _1219 * _1213)) + 1.0) * 0.5;
        float _4222 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1238 = sqrt(((_1212 * _1212) + (_1211 * _1211)) + (_1213 * _1213)) / (_1208 + 9.9999997473787516355514526367188e-06);
        float _4233 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1240 = _1239 * 2.0;
        float _1244 = (1.0 - _1239) / (_1239 + 1.0);
        float _4244 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _1254 = ((((1.0 - _1245) * (_1240 + 2.0)) * exp2(log2(isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (_1240 + 1.0))) + _1245) * _1208;
        float _1255 = _1176 * 0.5;
        float _1256 = _1186 * 0.5;
        float _1257 = _1196 * 0.5;
        float _1258 = dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257));
        float _1263 = (_1258 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1258);
        float _1271 = (dot(vec3(_767, _768, _769), vec3(_1263 * _1255, _1263 * _1256, _1263 * _1257)) + 1.0) * 0.5;
        float _4255 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1280 = sqrt(((_1256 * _1256) + (_1255 * _1255)) + (_1257 * _1257)) / (_1209 + 9.9999997473787516355514526367188e-06);
        float _4266 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1282 = _1281 * 2.0;
        float _1286 = (1.0 - _1281) / (_1281 + 1.0);
        float _4277 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1296 = ((((1.0 - _1287) * (_1282 + 2.0)) * exp2(log2(isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_1282 + 1.0))) + _1287) * _1209;
        float _1297 = _1177 * 0.5;
        float _1298 = _1187 * 0.5;
        float _1299 = _1197 * 0.5;
        float _1300 = dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299));
        float _1305 = (_1300 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1300);
        float _1313 = (dot(vec3(_767, _768, _769), vec3(_1305 * _1297, _1305 * _1298, _1305 * _1299)) + 1.0) * 0.5;
        float _4288 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1322 = sqrt(((_1298 * _1298) + (_1297 * _1297)) + (_1299 * _1299)) / (_1210 + 9.9999997473787516355514526367188e-06);
        float _4299 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1324 = _1323 * 2.0;
        float _1328 = (1.0 - _1323) / (_1323 + 1.0);
        float _4310 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1338 = ((((1.0 - _1329) * (_1324 + 2.0)) * exp2(log2(isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_1324 + 1.0))) + _1329) * _1210;
        _1346 = _1177;
        _1348 = _1176;
        _1349 = _1175;
        _1350 = _1187;
        _1351 = _1186;
        _1352 = _1185;
        _1353 = _1197;
        _1354 = _1196;
        _1355 = _1195;
        _1356 = _1210;
        _1357 = _1209;
        _1358 = _1208;
        _1359 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)));
        _1360 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)));
        _1361 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)));
    }
    else
    {
        _1346 = _1347;
        _1348 = _1347;
        _1349 = _1347;
        _1350 = _1347;
        _1351 = _1347;
        _1352 = _1347;
        _1353 = _1347;
        _1354 = _1347;
        _1355 = _1347;
        _1356 = _1347;
        _1357 = _1347;
        _1358 = _1347;
        _1359 = 0.0;
        _1360 = 0.0;
        _1361 = 0.0;
    }
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1388 = fma(_1017, cbModelParam._m0[30u].z, fma(_1013, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1009));
        float _1392 = fma(_1017, cbModelParam._m0[31u].z, fma(_1013, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1009));
        float _1396 = fma(_1017, cbModelParam._m0[32u].z, fma(_1013, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1009));
        float _1419 = _1009 + _767;
        float _1420 = _1013 + _768;
        float _1421 = _1017 + _769;
        float _1431 = fma(_1421, cbModelParam._m0[30u].z, fma(_1420, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1419)) - _1388;
        float _1432 = fma(_1421, cbModelParam._m0[31u].z, fma(_1420, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1419)) - _1392;
        float _1433 = fma(_1421, cbModelParam._m0[32u].z, fma(_1420, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1419)) - _1396;
        float _1437 = inversesqrt(dot(vec3(_1431, _1432, _1433), vec3(_1431, _1432, _1433)));
        float _1450 = ((_1437 * _1431) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1388 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1451 = ((_1437 * _1432) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1392 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1452 = ((_1437 * _1433) / cbModelParam._m0[35u].z) + ((((((_1396 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1454 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1450, _1451, _1452), 0.0);
        vec4 _1461 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1450, _1451, _1452), 0.0);
        vec4 _1468 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1450, _1451, _1452), 0.0);
        vec4 _1475 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1450, _1451, _1452), 0.0);
        float _1487 = exp2((_1454.w + (-0.5)) * 20.0) * 2.0;
        float _1488 = _1487 * (_1454.x + (-0.5));
        float _1489 = _1487 * (_1454.y + (-0.5));
        float _1490 = _1487 * (_1454.z + (-0.5));
        float _1497 = exp2((_1461.w + (-0.5)) * 20.0) * 2.0;
        float _1498 = _1497 * (_1461.x + (-0.5));
        float _1499 = _1497 * (_1461.y + (-0.5));
        float _1500 = _1497 * (_1461.z + (-0.5));
        float _1507 = exp2((_1468.w + (-0.5)) * 20.0) * 2.0;
        float _1508 = _1507 * (_1468.x + (-0.5));
        float _1509 = _1507 * (_1468.y + (-0.5));
        float _1510 = _1507 * (_1468.z + (-0.5));
        float _1517 = exp2((_1475.w + (-0.5)) * 20.0) * 2.0;
        float _1518 = _1517 * (_1475.x + (-0.5));
        float _1519 = _1517 * (_1475.y + (-0.5));
        float _1520 = _1517 * (_1475.z + (-0.5));
        float _1521 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1522 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1523 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1524 = _1488 * 0.5;
        float _1525 = _1498 * 0.5;
        float _1526 = _1508 * 0.5;
        float _1527 = dot(vec3(_1524, _1525, _1526), vec3(_1524, _1525, _1526));
        float _1532 = (_1527 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1527);
        float _1540 = (dot(vec3(_767, _768, _769), vec3(_1532 * _1524, _1532 * _1525, _1532 * _1526)) + 1.0) * 0.5;
        float _4351 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1549 = sqrt(((_1525 * _1525) + (_1524 * _1524)) + (_1526 * _1526)) / (_1521 + 9.9999997473787516355514526367188e-06);
        float _4362 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1550 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _1551 = _1550 * 2.0;
        float _1555 = (1.0 - _1550) / (_1550 + 1.0);
        float _4373 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _1565 = ((((1.0 - _1556) * (_1551 + 2.0)) * exp2(log2(isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * (_1551 + 1.0))) + _1556) * _1521;
        float _1566 = _1489 * 0.5;
        float _1567 = _1499 * 0.5;
        float _1568 = _1509 * 0.5;
        float _1569 = dot(vec3(_1566, _1567, _1568), vec3(_1566, _1567, _1568));
        float _1574 = (_1569 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1569);
        float _1582 = (dot(vec3(_767, _768, _769), vec3(_1574 * _1566, _1574 * _1567, _1574 * _1568)) + 1.0) * 0.5;
        float _4384 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1591 = sqrt(((_1567 * _1567) + (_1566 * _1566)) + (_1568 * _1568)) / (_1522 + 9.9999997473787516355514526367188e-06);
        float _4395 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1592 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _1593 = _1592 * 2.0;
        float _1597 = (1.0 - _1592) / (_1592 + 1.0);
        float _4406 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1598 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _1607 = ((((1.0 - _1598) * (_1593 + 2.0)) * exp2(log2(isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * (_1593 + 1.0))) + _1598) * _1522;
        float _1608 = _1490 * 0.5;
        float _1609 = _1500 * 0.5;
        float _1610 = _1510 * 0.5;
        float _1611 = dot(vec3(_1608, _1609, _1610), vec3(_1608, _1609, _1610));
        float _1616 = (_1611 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1611);
        float _1624 = (dot(vec3(_767, _768, _769), vec3(_1616 * _1608, _1616 * _1609, _1616 * _1610)) + 1.0) * 0.5;
        float _4417 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1633 = sqrt(((_1609 * _1609) + (_1608 * _1608)) + (_1610 * _1610)) / (_1523 + 9.9999997473787516355514526367188e-06);
        float _4428 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1634 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _1635 = _1634 * 2.0;
        float _1639 = (1.0 - _1634) / (_1634 + 1.0);
        float _4439 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1640 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _1649 = ((((1.0 - _1640) * (_1635 + 2.0)) * exp2(log2(isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_1635 + 1.0))) + _1640) * _1523;
        _1657 = _1490;
        _1658 = _1489;
        _1659 = _1488;
        _1660 = _1500;
        _1661 = _1499;
        _1662 = _1498;
        _1663 = _1510;
        _1664 = _1509;
        _1665 = _1508;
        _1666 = _1523;
        _1667 = _1522;
        _1668 = _1521;
        _1669 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)));
        _1670 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)));
        _1671 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0)));
    }
    else
    {
        _1657 = _1347;
        _1658 = _1347;
        _1659 = _1347;
        _1660 = _1347;
        _1661 = _1347;
        _1662 = _1347;
        _1663 = _1347;
        _1664 = _1347;
        _1665 = _1347;
        _1666 = _1347;
        _1667 = _1347;
        _1668 = _1347;
        _1669 = 0.0;
        _1670 = 0.0;
        _1671 = 0.0;
    }
    float _1681 = (cbModelParam._m0[1u].x * (_1669 - _1359)) + _1359;
    float _1682 = (cbModelParam._m0[1u].x * (_1670 - _1360)) + _1360;
    float _1683 = (cbModelParam._m0[1u].x * (_1671 - _1361)) + _1361;
    float _1704 = fma(_1683, cbSceneParam._m0[89u].z, fma(_1682, cbSceneParam._m0[89u].y, _1681 * cbSceneParam._m0[89u].x));
    float _1707 = fma(_1683, cbSceneParam._m0[90u].z, fma(_1682, cbSceneParam._m0[90u].y, _1681 * cbSceneParam._m0[90u].x));
    float _1710 = fma(_1683, cbSceneParam._m0[91u].z, fma(_1682, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1681));
    float _1725 = _953 * 0.5;
    float _1726 = _954 * 0.5;
    float _1727 = _955 * 0.5;
    float _1728 = dot(vec4(_1725, _1726, _1727, 1.0), vec4(_1659, _1662, _1665, _1668));
    float _1731 = dot(vec4(_1725, _1726, _1727, 1.0), vec4(_1658, _1661, _1664, _1667));
    float _1734 = dot(vec4(_1725, _1726, _1727, 1.0), vec4(_1657, _1660, _1663, _1666));
    float _1768;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1741 = dot(vec4(_1725, _1726, _1727, 1.0), vec4(_1346, _1350, _1353, _1356));
        float _1745 = dot(vec4(_1725, _1726, _1727, 1.0), vec4(_1348, _1351, _1354, _1357));
        float _1749 = dot(vec4(_1725, _1726, _1727, 1.0), vec4(_1349, _1352, _1355, _1358));
        float _1756 = dot(vec4(cbModelParam._m0[39u]), vec4(_1725, _1726, _1727, 1.0));
        _1768 = dot(vec3(isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)), isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0)), isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1756) ? 0.0 : (isnan(0.0) ? _1756 : max(0.0, _1756))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1768 = 1.0;
    }
    float _1779;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1770 = dot(vec4(cbModelParam._m0[40u]), vec4(_1725, _1726, _1727, 1.0));
        _1779 = dot(vec3(isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0)), isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0)), isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1770) ? 0.0 : (isnan(0.0) ? _1770 : max(0.0, _1770))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1779 = 1.0;
    }
    float _1783 = (_1779 * cbModelParam._m0[1u].x) + (_1768 * (1.0 - cbModelParam._m0[1u].x));
    float _1793 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _770);
    float _1794 = isnan(_1793) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1793 : min(cbModelParam._m0[25u].z, _1793));
    float _1874;
    float _1876;
    float _1878;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1841 = fma(_1017, cbModelParam._m0[13u].z, fma(_1013, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1009)) + cbModelParam._m0[13u].w;
        float _1845 = fma(_1017, cbModelParam._m0[14u].z, fma(_1013, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1009)) + cbModelParam._m0[14u].w;
        float _1849 = fma(_1017, cbModelParam._m0[15u].z, fma(_1013, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1009)) + cbModelParam._m0[15u].w;
        float _1852 = fma(_955, cbModelParam._m0[13u].z, fma(_954, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _953));
        float _1855 = fma(_955, cbModelParam._m0[14u].z, fma(_954, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _953));
        float _1858 = fma(_955, cbModelParam._m0[15u].z, fma(_954, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _953));
        float _1886;
        if (_1852 > 0.0)
        {
            _1886 = abs((1.0 - _1841) / _1852);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1852 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1841 + 1.0) / _1852);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1886 = frontier_phi_17_15_ladder;
        }
        float _2057;
        if (_1855 > 0.0)
        {
            _2057 = abs((1.0 - _1845) / _1855);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1855 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1845 + 1.0) / _1855);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2057 = frontier_phi_26_22_ladder;
        }
        float _2352;
        if (_1858 > 0.0)
        {
            _2352 = abs((1.0 - _1849) / _1858);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1858 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1849 + 1.0) / _1858);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2352 = frontier_phi_38_33_ladder;
        }
        float _2354 = isnan(_2057) ? _1886 : (isnan(_1886) ? _2057 : min(_1886, _2057));
        float _2355 = isnan(_2352) ? _2354 : (isnan(_2354) ? _2352 : min(_2354, _2352));
        float _2359 = (_2355 * _1852) + _1841;
        float _2360 = (_2355 * _1855) + _1845;
        float _2361 = (_2355 * _1858) + _1849;
        float _2362 = _2355 * 9.9999997473787516355514526367188e-05;
        float _2364 = (-1.0) - _2362;
        float _2366 = _2362 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2361 > _2366) || ((_2361 < _2364) || ((_2360 > _2366) || ((_2360 < _2364) || ((_2359 < _2364) || (_2359 > _2366))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2506 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2361, cbModelParam._m0[9u].z, fma(_2360, cbModelParam._m0[9u].y, _2359 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2361, cbModelParam._m0[10u].z, fma(_2360, cbModelParam._m0[10u].y, _2359 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2361, cbModelParam._m0[11u].z, fma(_2360, cbModelParam._m0[11u].y, _2359 * cbModelParam._m0[11u].x))), _1794);
            frontier_phi_16_38_ladder = _2506.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2506.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2506.x * cbModelParam._m0[1u].y;
        }
        _1874 = frontier_phi_16_38_ladder_2;
        _1876 = frontier_phi_16_38_ladder_1;
        _1878 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1862 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_953, _954, _955), _1794);
        _1874 = _1862.x * cbModelParam._m0[1u].y;
        _1876 = _1862.y * cbModelParam._m0[1u].y;
        _1878 = _1862.z * cbModelParam._m0[1u].y;
    }
    float _1882 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _770);
    float _1883 = isnan(_1882) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1882 : min(cbModelParam._m0[25u].w, _1882));
    float _1972;
    float _1974;
    float _1976;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1936 = fma(_1017, cbModelParam._m0[21u].z, fma(_1013, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1009)) + cbModelParam._m0[21u].w;
        float _1940 = fma(_1017, cbModelParam._m0[22u].z, fma(_1013, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1009)) + cbModelParam._m0[22u].w;
        float _1944 = fma(_1017, cbModelParam._m0[23u].z, fma(_1013, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1009)) + cbModelParam._m0[23u].w;
        float _1947 = fma(_955, cbModelParam._m0[21u].z, fma(_954, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _953));
        float _1950 = fma(_955, cbModelParam._m0[22u].z, fma(_954, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _953));
        float _1953 = fma(_955, cbModelParam._m0[23u].z, fma(_954, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _953));
        float _2062;
        if (_1947 > 0.0)
        {
            _2062 = abs((1.0 - _1936) / _1947);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1947 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1936 + 1.0) / _1947);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2062 = frontier_phi_28_24_ladder;
        }
        float _2379;
        if (_1950 > 0.0)
        {
            _2379 = abs((1.0 - _1940) / _1950);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1950 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1940 + 1.0) / _1950);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2379 = frontier_phi_40_35_ladder;
        }
        float _2717;
        if (_1953 > 0.0)
        {
            _2717 = abs((1.0 - _1944) / _1953);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1953 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1944 + 1.0) / _1953);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2717 = frontier_phi_50_47_ladder;
        }
        float _2719 = isnan(_2379) ? _2062 : (isnan(_2062) ? _2379 : min(_2062, _2379));
        float _2720 = isnan(_2717) ? _2719 : (isnan(_2719) ? _2717 : min(_2719, _2717));
        float _2724 = (_2720 * _1947) + _1936;
        float _2725 = (_2720 * _1950) + _1940;
        float _2726 = (_2720 * _1953) + _1944;
        float _2727 = _2720 * 9.9999997473787516355514526367188e-05;
        float _2728 = (-1.0) - _2727;
        float _2730 = _2727 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2726 > _2730) || ((_2726 < _2728) || ((_2725 > _2730) || ((_2725 < _2728) || ((_2724 < _2728) || (_2724 > _2730))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2848 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2726, cbModelParam._m0[17u].z, fma(_2725, cbModelParam._m0[17u].y, _2724 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2726, cbModelParam._m0[18u].z, fma(_2725, cbModelParam._m0[18u].y, _2724 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2726, cbModelParam._m0[19u].z, fma(_2725, cbModelParam._m0[19u].y, _2724 * cbModelParam._m0[19u].x))), _1883);
            frontier_phi_25_50_ladder = _2848.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2848.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2848.x * cbModelParam._m0[1u].z;
        }
        _1972 = frontier_phi_25_50_ladder_2;
        _1974 = frontier_phi_25_50_ladder_1;
        _1976 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1956 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_953, _954, _955), _1883);
        _1972 = _1956.x * cbModelParam._m0[1u].z;
        _1974 = _1956.y * cbModelParam._m0[1u].z;
        _1976 = _1956.z * cbModelParam._m0[1u].z;
    }
    float _1989 = (((_980 * _929) + _981) * _945) * ((cbModelParam._m0[1u].w * (_1972 - _1874)) + _1874);
    float _1991 = (((_980 * _931) + _981) * _945) * ((cbModelParam._m0[1u].w * (_1974 - _1876)) + _1876);
    float _1993 = (((_980 * _932) + _981) * _945) * ((cbModelParam._m0[1u].w * (_1976 - _1878)) + _1878);
    float _1996 = fma(_1993, cbSceneParam._m0[89u].z, fma(_1991, cbSceneParam._m0[89u].y, _1989 * cbSceneParam._m0[89u].x));
    float _1999 = fma(_1993, cbSceneParam._m0[90u].z, fma(_1991, cbSceneParam._m0[90u].y, _1989 * cbSceneParam._m0[90u].x));
    float _2002 = fma(_1993, cbSceneParam._m0[91u].z, fma(_1991, cbSceneParam._m0[91u].y, _1989 * cbSceneParam._m0[91u].x));
    float _2036 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2040 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2044 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2048 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2049 = _2036 / _2048;
    float _2050 = _2040 / _2048;
    float _2051 = _2044 / _2048;
    float _2198;
    float _2199;
    float _2200;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2078 = ((uint(_2051 > cbSceneParam._m0[59u].y) + uint(_2051 > cbSceneParam._m0[59u].x)) + uint(_2051 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2079 = _2078 + 43u;
        uint _2087 = _2078 + 44u;
        uint _2095 = _2078 + 45u;
        uint _2103 = _2078 + 46u;
        float _2114 = fma(_2048, cbSceneParam._m0[_2079].w, fma(_2044, cbSceneParam._m0[_2079].z, fma(_2040, cbSceneParam._m0[_2079].y, _2036 * cbSceneParam._m0[_2079].x)));
        float _2118 = fma(_2048, cbSceneParam._m0[_2087].w, fma(_2044, cbSceneParam._m0[_2087].z, fma(_2040, cbSceneParam._m0[_2087].y, _2036 * cbSceneParam._m0[_2087].x)));
        float _2126 = fma(_2048, cbSceneParam._m0[_2103].w, fma(_2044, cbSceneParam._m0[_2103].z, fma(_2040, cbSceneParam._m0[_2103].y, _2036 * cbSceneParam._m0[_2103].x)));
        float _2131 = cbSceneParam._m0[33u].z * _2126;
        float _2133 = cbSceneParam._m0[33u].w * _2126;
        float _2136 = fma(_2048, cbSceneParam._m0[_2095].w, fma(_2044, cbSceneParam._m0[_2095].z, fma(_2040, cbSceneParam._m0[_2095].y, _2036 * cbSceneParam._m0[_2095].x))) / _2126;
        float _2184 = (cbSceneParam._m0[33u].x - sqrt(((_2050 * _2050) + (_2049 * _2049)) + (_2051 * _2051))) * cbSceneParam._m0[33u].y;
        float _4565 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
        float _2191 = (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2131 + _2114) / _2126, (_2133 + _2118) / _2126), _2136), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2133 + _2114) / _2126, (_2118 - _2131) / _2126), _2136), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2114 - _2131) / _2126, (_2118 - _2133) / _2126), _2136), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2114 - _2133) / _2126, (_2131 + _2118) / _2126), _2136), 0.0)).x), vec4(0.25)));
        _2198 = 1.0 - (_2191 * cbSceneParam._m0[34u].x);
        _2199 = 1.0 - (_2191 * cbSceneParam._m0[34u].y);
        _2200 = 1.0 - (_2191 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2198 = 1.0;
        _2199 = 1.0;
        _2200 = 1.0;
    }
    float _2264;
    float _2266;
    float _2268;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2252 = fma(_2048, cbSceneParam._m0[63u].w, fma(_2044, cbSceneParam._m0[63u].z, fma(_2040, cbSceneParam._m0[63u].y, _2036 * cbSceneParam._m0[63u].x)));
        float _2253 = fma(_2048, cbSceneParam._m0[60u].w, fma(_2044, cbSceneParam._m0[60u].z, fma(_2040, cbSceneParam._m0[60u].y, _2036 * cbSceneParam._m0[60u].x))) / _2252;
        float _2254 = fma(_2048, cbSceneParam._m0[61u].w, fma(_2044, cbSceneParam._m0[61u].z, fma(_2040, cbSceneParam._m0[61u].y, _2036 * cbSceneParam._m0[61u].x))) / _2252;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2253 >= cbSceneParam._m0[64u].x) && (_2254 >= cbSceneParam._m0[64u].y)) && (_2253 <= cbSceneParam._m0[64u].z)) && (_2254 <= cbSceneParam._m0[64u].w))
        {
            float _2392 = fma(_2048, cbSceneParam._m0[62u].w, fma(_2044, cbSceneParam._m0[62u].z, fma(_2040, cbSceneParam._m0[62u].y, _2036 * cbSceneParam._m0[62u].x))) / _2252;
            float _2396 = isnan(cbSceneParam._m0[41u].w) ? _2392 : (isnan(_2392) ? cbSceneParam._m0[41u].w : max(_2392, cbSceneParam._m0[41u].w));
            float _2439 = (cbSceneParam._m0[33u].x - sqrt(((_2050 * _2050) + (_2049 * _2049)) + (_2051 * _2051))) * cbSceneParam._m0[33u].y;
            float _4581 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
            float _2446 = (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2253, cbSceneParam._m0[33u].w + _2254), _2396), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2253, _2254 - cbSceneParam._m0[33u].z), _2396), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2253 - cbSceneParam._m0[33u].z, _2254 - cbSceneParam._m0[33u].w), _2396), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2253 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2254), _2396), 0.0)).x), vec4(0.25)));
            float _2450 = 1.0 - (_2446 * cbSceneParam._m0[34u].x);
            float _2451 = 1.0 - (_2446 * cbSceneParam._m0[34u].y);
            float _2452 = 1.0 - (_2446 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2452) ? _2200 : (isnan(_2200) ? _2452 : min(_2200, _2452));
            frontier_phi_37_36_ladder_1 = isnan(_2451) ? _2199 : (isnan(_2199) ? _2451 : min(_2199, _2451));
            frontier_phi_37_36_ladder_2 = isnan(_2450) ? _2198 : (isnan(_2198) ? _2450 : min(_2198, _2450));
        }
        else
        {
            frontier_phi_37_36_ladder = _2200;
            frontier_phi_37_36_ladder_1 = _2199;
            frontier_phi_37_36_ladder_2 = _2198;
        }
        _2264 = frontier_phi_37_36_ladder_2;
        _2266 = frontier_phi_37_36_ladder_1;
        _2268 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2264 = _2198;
        _2266 = _2199;
        _2268 = _2200;
    }
    uvec4 _2273 = floatBitsToUint(cbInstanceData._m0[_252 + 5u]);
    uint _2275 = _2273.x * 14u;
    uint _2276 = _2275 + 13u;
    float _2283 = _945 + (-1.0);
    float _2288 = (cbLight._m0[_2276].x * _2283) + 1.0;
    float _2289 = (cbLight._m0[_2276].y * _2283) + 1.0;
    float _2290 = (cbLight._m0[_2276].z * _2283) + 1.0;
    float _2291 = (cbLight._m0[_2276].w * _2283) + 1.0;
    uint _2292 = _2275 + 5u;
    float _2298 = isnan(1.0) ? _2289 : (isnan(_2289) ? 1.0 : min(_2289, 1.0));
    uint _2302 = _2275 + 4u;
    float _2311 = isnan(1.0) ? _2288 : (isnan(_2288) ? 1.0 : min(_2288, 1.0));
    uint _2315 = _2275 | 1u;
    float _2326 = dot(vec3(cbLight._m0[_2275].xyz), vec3(_767, _768, _769));
    float _2329 = dot(vec3(cbLight._m0[_2315].xyz), vec3(_767, _768, _769));
    float _4617 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _4628 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2334 = (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * 0.3183098733425140380859375;
    float _2336 = (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * 0.3183098733425140380859375;
    float _2343 = ((cbLight._m0[_2292].x * _2298) * _2336) + (((cbLight._m0[_2302].x * _2264) * _2311) * _2334);
    float _2344 = ((_2298 * cbLight._m0[_2292].y) * _2336) + (((cbLight._m0[_2302].y * _2266) * _2311) * _2334);
    float _2345 = ((_2298 * cbLight._m0[_2292].z) * _2336) + (((cbLight._m0[_2302].z * _2268) * _2311) * _2334);
    uvec4 _2349 = floatBitsToUint(cbLight._m0[_2275 + 12u]);
    bool _2351 = _2349.x == 0u;
    float _2453;
    float _2455;
    float _2457;
    if (_2351)
    {
        _2453 = _2343;
        _2455 = _2344;
        _2457 = _2345;
    }
    else
    {
        uint _2461 = _2275 + 6u;
        float _2477 = (dot(vec3(cbLight._m0[_2275 + 2u].xyz), vec3(_767, _768, _769)) * 0.5) + 0.5;
        float _2478 = _2477 * _2477;
        float _4639 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2479 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
        float _2480 = isnan(1.0) ? _2290 : (isnan(_2290) ? 1.0 : min(_2290, 1.0));
        _2453 = (((cbLight._m0[_2461].x * 0.3183098733425140380859375) * _2479) * _2480) + _2343;
        _2455 = (((cbLight._m0[_2461].y * 0.3183098733425140380859375) * _2479) * _2480) + _2344;
        _2457 = (((cbLight._m0[_2461].z * 0.3183098733425140380859375) * _2479) * _2480) + _2345;
    }
    bool _2460 = _2349.y == 0u;
    float _2515;
    float _2517;
    float _2519;
    if (_2460)
    {
        _2515 = _2453;
        _2517 = _2455;
        _2519 = _2457;
    }
    else
    {
        uint _2688 = _2275 + 7u;
        float _2704 = (dot(vec3(cbLight._m0[_2275 + 3u].xyz), vec3(_767, _768, _769)) * 0.5) + 0.5;
        float _2705 = _2704 * _2704;
        float _4655 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        float _2706 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
        float _2707 = isnan(1.0) ? _2291 : (isnan(_2291) ? 1.0 : min(_2291, 1.0));
        _2515 = (((cbLight._m0[_2688].x * 0.3183098733425140380859375) * _2706) * _2707) + _2453;
        _2517 = (((cbLight._m0[_2688].y * 0.3183098733425140380859375) * _2706) * _2707) + _2455;
        _2519 = (((cbLight._m0[_2688].z * 0.3183098733425140380859375) * _2706) * _2707) + _2457;
    }
    uint _2522 = _2275 + 8u;
    float _2535 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2275].w)) * _770) * 0.949999988079071044921875);
    float _2536 = _2535 * _2535;
    float _2537 = cbLight._m0[_2275].x + _847;
    float _2538 = cbLight._m0[_2275].y + _848;
    float _2539 = cbLight._m0[_2275].z + _849;
    float _2543 = inversesqrt(dot(vec3(_2537, _2538, _2539), vec3(_2537, _2538, _2539)));
    float _2544 = _2543 * _2537;
    float _2545 = _2543 * _2538;
    float _2546 = _2543 * _2539;
    float _2547 = dot(vec3(_767, _768, _769), vec3(cbLight._m0[_2275].xyz));
    float _4671 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
    float _2550 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
    float _4682 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _2551 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
    float _2552 = dot(vec3(_767, _768, _769), vec3(_2544, _2545, _2546));
    float _4693 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
    float _2555 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
    float _2556 = dot(vec3(cbLight._m0[_2275].xyz), vec3(_2544, _2545, _2546));
    float _4704 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
    float _2560 = _2536 * _2536;
    float _2564 = ((_2555 * _2555) * (_2560 + (-1.0))) + 1.0;
    float _2572 = exp2(log2(1.0 - (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0)))) * 5.0);
    float _2573 = 0.959999978542327880859375 - _926;
    float _2575 = 0.959999978542327880859375 - _927;
    float _2576 = 0.959999978542327880859375 - _928;
    float _2583 = 1.0 - _2536;
    float _2594 = (0.5 / (((_2551 * ((_2550 * _2583) + _2536)) + 9.9999999392252902907785028219223e-09) + (((_2551 * _2583) + _2536) * _2550))) * _2550;
    float _4715 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
    float _2596 = (isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0))) * (_2560 / ((_2564 * _2564) * 3.141590118408203125));
    uint _2610 = _2275 + 9u;
    float _2621 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2315].w)) * _770) * 0.949999988079071044921875);
    float _2622 = _2621 * _2621;
    float _2623 = cbLight._m0[_2315].x + _847;
    float _2624 = cbLight._m0[_2315].y + _848;
    float _2625 = cbLight._m0[_2315].z + _849;
    float _2629 = inversesqrt(dot(vec3(_2623, _2624, _2625), vec3(_2623, _2624, _2625)));
    float _2630 = _2629 * _2623;
    float _2631 = _2629 * _2624;
    float _2632 = _2629 * _2625;
    float _2633 = dot(vec3(_767, _768, _769), vec3(cbLight._m0[_2315].xyz));
    float _4726 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
    float _2636 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
    float _2637 = dot(vec3(_767, _768, _769), vec3(_2630, _2631, _2632));
    float _4737 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
    float _2640 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
    float _2641 = dot(vec3(cbLight._m0[_2315].xyz), vec3(_2630, _2631, _2632));
    float _4748 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
    float _2645 = _2622 * _2622;
    float _2649 = ((_2640 * _2640) * (_2645 + (-1.0))) + 1.0;
    float _2656 = exp2(log2(1.0 - (isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0)))) * 5.0);
    float _2663 = 1.0 - _2622;
    float _2673 = (0.5 / (((_2551 * ((_2636 * _2663) + _2622)) + 9.9999999392252902907785028219223e-09) + (((_2551 * _2663) + _2622) * _2636))) * _2636;
    float _4759 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
    float _2675 = (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0))) * (_2645 / ((_2649 * _2649) * 3.141590118408203125));
    float _2685 = (((((_2656 * _2573) + _929) * cbLight._m0[_2610].x) * _2675) * _2298) + ((((cbLight._m0[_2522].x * _2264) * ((_2572 * _2573) + _929)) * _2596) * _2311);
    float _2686 = (((((_2656 * _2575) + _931) * cbLight._m0[_2610].y) * _2675) * _2298) + ((((cbLight._m0[_2522].y * _2266) * ((_2572 * _2575) + _931)) * _2596) * _2311);
    float _2687 = (((((_2656 * _2576) + _932) * cbLight._m0[_2610].z) * _2675) * _2298) + ((((cbLight._m0[_2522].z * _2268) * ((_2572 * _2576) + _932)) * _2596) * _2311);
    float _2743;
    float _2745;
    float _2747;
    if (_2351)
    {
        _2743 = _2685;
        _2745 = _2686;
        _2747 = _2687;
    }
    else
    {
        uint _2749 = _2275 + 2u;
        uint _2753 = _2275 + 10u;
        float _2767 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2749].w)) * _770) * 0.949999988079071044921875);
        float _2768 = _2767 * _2767;
        float _2769 = cbLight._m0[_2749].x + _847;
        float _2770 = cbLight._m0[_2749].y + _848;
        float _2771 = cbLight._m0[_2749].z + _849;
        float _2775 = inversesqrt(dot(vec3(_2769, _2770, _2771), vec3(_2769, _2770, _2771)));
        float _2776 = _2775 * _2769;
        float _2777 = _2775 * _2770;
        float _2778 = _2775 * _2771;
        float _2779 = dot(vec3(_767, _768, _769), vec3(cbLight._m0[_2749].xyz));
        float _4770 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        float _2782 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
        float _2783 = dot(vec3(_767, _768, _769), vec3(_2776, _2777, _2778));
        float _4781 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
        float _2786 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
        float _2787 = dot(vec3(cbLight._m0[_2749].xyz), vec3(_2776, _2777, _2778));
        float _4792 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
        float _2791 = _2768 * _2768;
        float _2795 = ((_2786 * _2786) * (_2791 + (-1.0))) + 1.0;
        float _2802 = exp2(log2(1.0 - (isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0)))) * 5.0);
        float _2809 = 1.0 - _2768;
        float _2819 = (0.5 / (((_2551 * ((_2782 * _2809) + _2768)) + 9.9999999392252902907785028219223e-09) + (((_2551 * _2809) + _2768) * _2782))) * _2782;
        float _4803 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
        float _2821 = (isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0))) * (_2791 / ((_2795 * _2795) * 3.141590118408203125));
        float _2822 = isnan(1.0) ? _2290 : (isnan(_2290) ? 1.0 : min(_2290, 1.0));
        _2743 = (((((_2802 * _2573) + _929) * cbLight._m0[_2753].x) * _2821) * _2822) + _2685;
        _2745 = (((((_2802 * _2575) + _931) * cbLight._m0[_2753].y) * _2821) * _2822) + _2686;
        _2747 = (((((_2802 * _2576) + _932) * cbLight._m0[_2753].z) * _2821) * _2822) + _2687;
    }
    float _2853;
    float _2855;
    float _2857;
    if (_2460)
    {
        _2853 = _2743;
        _2855 = _2745;
        _2857 = _2747;
    }
    else
    {
        uint _2864 = _2275 + 3u;
        uint _2868 = _2275 + 11u;
        float _2882 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2864].w)) * _770) * 0.949999988079071044921875);
        float _2883 = _2882 * _2882;
        float _2884 = cbLight._m0[_2864].x + _847;
        float _2885 = cbLight._m0[_2864].y + _848;
        float _2886 = cbLight._m0[_2864].z + _849;
        float _2890 = inversesqrt(dot(vec3(_2884, _2885, _2886), vec3(_2884, _2885, _2886)));
        float _2891 = _2890 * _2884;
        float _2892 = _2890 * _2885;
        float _2893 = _2890 * _2886;
        float _2894 = dot(vec3(_767, _768, _769), vec3(cbLight._m0[_2864].xyz));
        float _4819 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
        float _2897 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
        float _2898 = dot(vec3(_767, _768, _769), vec3(_2891, _2892, _2893));
        float _4830 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
        float _2901 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
        float _2902 = dot(vec3(cbLight._m0[_2864].xyz), vec3(_2891, _2892, _2893));
        float _4841 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
        float _2906 = _2883 * _2883;
        float _2910 = ((_2901 * _2901) * (_2906 + (-1.0))) + 1.0;
        float _2917 = exp2(log2(1.0 - (isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0)))) * 5.0);
        float _2924 = 1.0 - _2883;
        float _2934 = (0.5 / (((_2551 * ((_2897 * _2924) + _2883)) + 9.9999999392252902907785028219223e-09) + (((_2551 * _2924) + _2883) * _2897))) * _2897;
        float _4852 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
        float _2936 = (isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0))) * (_2906 / ((_2910 * _2910) * 3.141590118408203125));
        float _2937 = isnan(1.0) ? _2291 : (isnan(_2291) ? 1.0 : min(_2291, 1.0));
        _2853 = (((((_2917 * _2573) + _929) * cbLight._m0[_2868].x) * _2936) * _2937) + _2743;
        _2855 = (((((_2917 * _2575) + _931) * cbLight._m0[_2868].y) * _2936) * _2937) + _2745;
        _2857 = (((((_2917 * _2576) + _932) * cbLight._m0[_2868].z) * _2936) * _2937) + _2747;
    }
    float _3003;
    float _3005;
    float _3007;
    float _3009;
    float _3011;
    float _3013;
    if (_2273.y == 0u)
    {
        uvec4 _2958 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2959 = _2958.x;
        uint _2970 = uint((float(_2958.y) * floor(float(uint(cbSceneParam._m0[85u].y * _868) / _2959))) + floor(float(uint(cbSceneParam._m0[85u].x * _867) / _2959)));
        float _2980 = (log2(_2051 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2981 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
        uint _2984 = uint(isnan(14.0) ? _2981 : (isnan(_2981) ? 14.0 : min(_2981, 14.0)));
        uvec4 _2989 = texelFetch(g_lightClusterGridBuffer, int(((_2984 << 2u) + (_2970 << 6u)) >> 2u));
        uint _2990 = _2989.x;
        uint _2991 = _2958.z;
        float _3070;
        float _3072;
        float _3074;
        float _3076;
        float _3078;
        float _3080;
        if (((((1u << ((_2991 >> 4u) & 15u)) + 4294967295u) & _2990) == 0u) || ((_2991 & 240u) == 0u))
        {
            _3070 = 0.0;
            _3072 = 0.0;
            _3074 = 0.0;
            _3076 = 0.0;
            _3078 = 0.0;
            _3080 = 0.0;
        }
        else
        {
            float _3071;
            float _3073;
            float _3075;
            float _3077;
            float _3079;
            float _3081;
            float _3223 = 0.0;
            float _3224 = 0.0;
            float _3225 = 0.0;
            float _3226 = 0.0;
            float _3227 = 0.0;
            float _3228 = 0.0;
            uint _3229 = 0u;
            uint _3238;
            bool _3239;
            for (;;)
            {
                _3238 = texelFetch(g_lightClassification, int((((_2984 << 5u) + (_2970 << 9u)) + (_3229 << 2u)) >> 2u)).x;
                _3239 = _3238 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3239)
                {
                    frontier_phi_71_pred = _3228;
                    frontier_phi_71_pred_1 = _3227;
                    frontier_phi_71_pred_2 = _3226;
                    frontier_phi_71_pred_3 = _3225;
                    frontier_phi_71_pred_4 = _3224;
                    frontier_phi_71_pred_5 = _3223;
                }
                else
                {
                    float _3368;
                    float _3369;
                    float _3370;
                    float _3371;
                    float _3372;
                    float _3373;
                    uint _3374;
                    _3368 = _3223;
                    _3369 = _3224;
                    _3370 = _3225;
                    _3371 = _3226;
                    _3372 = _3227;
                    _3373 = _3228;
                    _3374 = _3238;
                    float _3295;
                    float _3296;
                    float _3297;
                    float _3298;
                    float _3299;
                    float _3300;
                    for (;;)
                    {
                        uint _3378 = uint(findLSB(_3374)) + (_3229 << 5u);
                        uint _3375 = (_3374 + 4294967295u) & _3374;
                        uint _3380 = _3378 * 48u;
                        vec4 _3394 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3380)).x, texelFetch(g_PointLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3380 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3380 + 3u)).x));
                        uint _3400 = (_3378 * 48u) + 4u;
                        vec4 _3413 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3400)).x, texelFetch(g_PointLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3400 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3400 + 3u)).x));
                        uint _3419 = (_3378 * 48u) + 8u;
                        vec3 _3430 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3419)).x, texelFetch(g_PointLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3419 + 2u)).x));
                        float _3434 = _3394.x - _2049;
                        float _3435 = _3394.y - _2050;
                        float _3436 = _3394.z - _2051;
                        float _3437 = dot(vec3(_3434, _3435, _3436), vec3(_3434, _3435, _3436));
                        float _3440 = inversesqrt(_3437);
                        float _3441 = _3440 * _3434;
                        float _3442 = _3440 * _3435;
                        float _3443 = _3440 * _3436;
                        float _3444 = dot(vec3(_886, _889, _892), vec3(_3441, _3442, _3443));
                        float _3449 = 1.0 - (_3437 * _3394.w);
                        float _4878 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                        float _3450 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
                        float _3451 = sqrt(_3437) * _3413.w;
                        float _3454 = 1.39999997615814208984375 / (_3451 + 1.39999997615814208984375);
                        float _3455 = _3454 * _3454;
                        float _3458 = ((1.0 - _3455) * _3444) + _3455;
                        float _3461 = _3451 * _3451;
                        float _3465 = ((isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0))) * _3450) / ((_3461 * 0.699999988079071044921875) + 1.0);
                        float _3469 = (-0.0) - _2049;
                        float _3470 = (-0.0) - _2050;
                        float _3471 = (-0.0) - _2051;
                        float _3475 = inversesqrt(dot(vec3(_3469, _3470, _3471), vec3(_3469, _3470, _3471)));
                        float _3476 = _3475 * _3469;
                        float _3477 = _3475 * _3470;
                        float _3478 = _3475 * _3471;
                        float _3485 = exp2(log2(1.0 / ((_3461 * 3.5) + 5.0)) * 0.25);
                        float _3486 = 1.0 - _961;
                        float _3493 = sqrt(1.0 - ((1.0 - (_3486 * _3486)) * (1.0 - (_3485 * _3485))));
                        float _3494 = _3493 * _3493;
                        float _3495 = _3494 * _3494;
                        float _3496 = _3476 + _3441;
                        float _3497 = _3477 + _3442;
                        float _3498 = _3478 + _3443;
                        float _3502 = inversesqrt(dot(vec3(_3496, _3497, _3498), vec3(_3496, _3497, _3498)));
                        float _3506 = dot(vec3(_886, _889, _892), vec3(_3476, _3477, _3478));
                        float _4894 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                        float _3509 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
                        float _3510 = dot(vec3(_886, _889, _892), vec3(_3502 * _3496, _3502 * _3497, _3502 * _3498));
                        float _4905 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                        float _3513 = isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0));
                        float _3517 = ((_3513 * _3513) * (_3495 + (-1.0))) + 1.0;
                        float _3518 = _3454 * _3494;
                        float _3519 = _3518 * _3518;
                        float _3522 = ((1.0 - _3519) * _3444) + _3519;
                        float _4916 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                        float _3523 = isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0));
                        float _3524 = 1.0 - _3494;
                        float _3534 = (0.5 / (((_3523 * ((_3509 * _3524) + _3494)) + 9.9999999392252902907785028219223e-09) + (((_3523 * _3524) + _3494) * _3509))) * _3523;
                        float _4927 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0));
                        float _3545 = (((_3495 * 3.1415927410125732421875) * (isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0)))) / ((_3517 * _3517) * ((_3461 * 2.1991131305694580078125) + 3.141590118408203125))) * _3450;
                        _3298 = (_3465 * _3413.x) + _3371;
                        _3299 = (_3465 * _3413.y) + _3372;
                        _3300 = (_3465 * _3413.z) + _3373;
                        _3295 = (_3545 * _3430.x) + _3368;
                        _3296 = (_3545 * _3430.y) + _3369;
                        _3297 = (_3545 * _3430.z) + _3370;
                        if (_3375 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3368 = _3295;
                            _3369 = _3296;
                            _3370 = _3297;
                            _3371 = _3298;
                            _3372 = _3299;
                            _3373 = _3300;
                            _3374 = _3375;
                        }
                    }
                    frontier_phi_71_pred = _3300;
                    frontier_phi_71_pred_1 = _3299;
                    frontier_phi_71_pred_2 = _3298;
                    frontier_phi_71_pred_3 = _3297;
                    frontier_phi_71_pred_4 = _3296;
                    frontier_phi_71_pred_5 = _3295;
                }
                _3081 = frontier_phi_71_pred;
                _3079 = frontier_phi_71_pred_1;
                _3077 = frontier_phi_71_pred_2;
                _3075 = frontier_phi_71_pred_3;
                _3073 = frontier_phi_71_pred_4;
                _3071 = frontier_phi_71_pred_5;
                uint _3230 = _3229 + 1u;
                if (_3230 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3223 = _3071;
                    _3224 = _3073;
                    _3225 = _3075;
                    _3226 = _3077;
                    _3227 = _3079;
                    _3228 = _3081;
                    _3229 = _3230;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3070 = _3071;
            _3072 = _3073;
            _3074 = _3075;
            _3076 = _3077;
            _3078 = _3079;
            _3080 = _3081;
        }
        uvec4 _3084 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3085 = _3084.z;
        uint _3087 = (_3085 >> 8u) & 15u;
        float _3191;
        float _3193;
        float _3195;
        float _3197;
        float _3199;
        float _3201;
        if (((4294967295u << _3087) & _2990) == 0u)
        {
            _3191 = _3070;
            _3193 = _3072;
            _3195 = _3074;
            _3197 = _3076;
            _3199 = _3078;
            _3201 = _3080;
        }
        else
        {
            float _3216 = inversesqrt(dot(vec3(_2049, _2050, _2051), vec3(_2049, _2050, _2051)));
            float _3217 = _3216 * _2049;
            float _3218 = _3216 * _2050;
            float _3219 = _3216 * _2051;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3087 < ((_3085 >> 12u) & 15u))
            {
                float _3192;
                float _3194;
                float _3196;
                float _3198;
                float _3200;
                float _3202;
                float _3351 = _3070;
                float _3352 = _3072;
                float _3353 = _3074;
                float _3354 = _3076;
                float _3355 = _3078;
                float _3356 = _3080;
                uint _3357 = _3087;
                uint _3366;
                bool _3367;
                for (;;)
                {
                    _3366 = texelFetch(g_lightClassification, int((((_2984 << 5u) + (_2970 << 9u)) + (_3357 << 2u)) >> 2u)).x;
                    _3367 = _3366 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3367)
                    {
                        frontier_phi_82_pred = _3356;
                        frontier_phi_82_pred_1 = _3355;
                        frontier_phi_82_pred_2 = _3354;
                        frontier_phi_82_pred_3 = _3353;
                        frontier_phi_82_pred_4 = _3352;
                        frontier_phi_82_pred_5 = _3351;
                    }
                    else
                    {
                        float _3559;
                        float _3560;
                        float _3561;
                        float _3562;
                        float _3563;
                        float _3564;
                        float _3852;
                        float _3853;
                        float _3854;
                        float _3855;
                        float _3856;
                        float _3857;
                        float _3572 = _3351;
                        float _3573 = _3352;
                        float _3574 = _3353;
                        float _3575 = _3354;
                        float _3576 = _3355;
                        float _3577 = _3356;
                        uint _3578 = _3366;
                        uint _3579;
                        vec4 _3604;
                        float _3605;
                        vec4 _3620;
                        vec3 _3632;
                        vec4 _3647;
                        vec4 _3662;
                        float _3708;
                        bool _3709;
                        for (;;)
                        {
                            uint _3589 = ((_3357 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3578));
                            _3579 = (_3578 + 4294967295u) & _3578;
                            uint _3591 = _3589 * 40u;
                            _3604 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3591)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 3u)).x));
                            _3605 = _3604.w;
                            uint _3607 = (_3589 * 40u) + 4u;
                            _3620 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3607)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 3u)).x));
                            uint _3622 = (_3589 * 40u) + 8u;
                            _3632 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3622)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 2u)).x));
                            uint _3634 = (_3589 * 40u) + 16u;
                            _3647 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3634)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 3u)).x));
                            uint _3649 = (_3589 * 40u) + 20u;
                            _3662 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3649)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 3u)).x));
                            uint _3664 = (_3589 * 40u) + 24u;
                            vec4 _3677 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3664)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 3u)).x));
                            uint _3683 = (_3589 * 40u) + 28u;
                            vec4 _3696 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3683)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 3u)).x));
                            _3708 = fma(_2051, _3696.z, fma(_2050, _3696.y, _3696.x * _2049)) + _3696.w;
                            _3709 = !((fma(_2051, _3677.z, fma(_2050, _3677.y, _3677.x * _2049)) + _3677.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3709)
                            {
                                float _3736 = _3604.x - _2049;
                                float _3737 = _3604.y - _2050;
                                float _3738 = _3604.z - _2051;
                                float _3739 = dot(vec3(_3736, _3737, _3738), vec3(_3736, _3737, _3738));
                                float _3742 = inversesqrt(_3739);
                                float _3743 = _3742 * _3736;
                                float _3744 = _3742 * _3737;
                                float _3745 = _3742 * _3738;
                                float _3749 = 1.0 - (_3739 / (_3605 * _3605));
                                float _4938 = isnan(0.0) ? _3749 : (isnan(_3749) ? 0.0 : max(_3749, 0.0));
                                float _3750 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
                                float _3754 = sqrt(_3739) * _3620.w;
                                float _3756 = 1.39999997615814208984375 / (_3754 + 1.39999997615814208984375);
                                float _3757 = _3756 * _3756;
                                float _3760 = ((1.0 - _3757) * dot(vec3(_3743, _3744, _3745), vec3(_886, _889, _892))) + _3757;
                                float _3763 = _3754 * _3754;
                                float _3767 = (fma(_2051, _3647.z, fma(_2050, _3647.y, _3647.x * _2049)) + _3647.w) / _3708;
                                float _3768 = (fma(_2051, _3662.z, fma(_2050, _3662.y, _3662.x * _2049)) + _3662.w) / _3708;
                                float _3772 = 1.0 - dot(vec2(_3767, _3768), vec2(_3767, _3768));
                                float _4954 = isnan(0.0) ? _3772 : (isnan(_3772) ? 0.0 : max(_3772, 0.0));
                                float _3773 = isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0));
                                float _3774 = _3773 * (((isnan(0.0) ? _3760 : (isnan(_3760) ? 0.0 : max(_3760, 0.0))) * _3750) / ((_3763 * 0.699999988079071044921875) + 1.0));
                                float _3786 = exp2(log2(1.0 / ((_3763 * 3.5) + 5.0)) * 0.25);
                                float _3787 = 1.0 - _961;
                                float _3794 = sqrt(1.0 - ((1.0 - (_3787 * _3787)) * (1.0 - (_3786 * _3786))));
                                float _3795 = _3794 * _3794;
                                float _3796 = _3795 * _3795;
                                float _3797 = _3743 - _3217;
                                float _3798 = _3744 - _3218;
                                float _3799 = _3745 - _3219;
                                float _3803 = inversesqrt(dot(vec3(_3797, _3798, _3799), vec3(_3797, _3798, _3799)));
                                float _3807 = dot(vec3(_886, _889, _892), vec3((-0.0) - _3217, (-0.0) - _3218, (-0.0) - _3219));
                                float _4965 = isnan(0.0) ? _3807 : (isnan(_3807) ? 0.0 : max(_3807, 0.0));
                                float _3810 = isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0));
                                float _3811 = dot(vec3(_886, _889, _892), vec3(_3803 * _3797, _3803 * _3798, _3803 * _3799));
                                float _4976 = isnan(0.0) ? _3811 : (isnan(_3811) ? 0.0 : max(_3811, 0.0));
                                float _3814 = isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0));
                                float _3818 = ((_3814 * _3814) * (_3796 + (-1.0))) + 1.0;
                                float _3819 = _3756 * _3795;
                                float _3820 = _3819 * _3819;
                                float _3826 = ((1.0 - _3820) * dot(vec3(_886, _889, _892), vec3(_3743, _3744, _3745))) + _3820;
                                float _4987 = isnan(0.0) ? _3826 : (isnan(_3826) ? 0.0 : max(_3826, 0.0));
                                float _3827 = isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0));
                                float _3828 = 1.0 - _3795;
                                float _3838 = (0.5 / (((_3827 * ((_3810 * _3828) + _3795)) + 9.9999999392252902907785028219223e-09) + (((_3827 * _3828) + _3795) * _3810))) * _3827;
                                float _4998 = isnan(0.0) ? _3838 : (isnan(_3838) ? 0.0 : max(_3838, 0.0));
                                float _3848 = (_3773 * _3750) * (((_3796 * 3.1415927410125732421875) * (isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0)))) / ((_3818 * _3818) * ((_3763 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3774 * _3620.z;
                                frontier_phi_88_pred_1 = _3774 * _3620.y;
                                frontier_phi_88_pred_2 = _3774 * _3620.x;
                                frontier_phi_88_pred_3 = _3848 * _3632.z;
                                frontier_phi_88_pred_4 = _3848 * _3632.y;
                                frontier_phi_88_pred_5 = _3848 * _3632.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3857 = frontier_phi_88_pred;
                            _3856 = frontier_phi_88_pred_1;
                            _3855 = frontier_phi_88_pred_2;
                            _3854 = frontier_phi_88_pred_3;
                            _3853 = frontier_phi_88_pred_4;
                            _3852 = frontier_phi_88_pred_5;
                            _3562 = _3855 + _3575;
                            _3563 = _3856 + _3576;
                            _3564 = _3857 + _3577;
                            _3559 = _3852 + _3572;
                            _3560 = _3853 + _3573;
                            _3561 = _3854 + _3574;
                            if (_3579 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3572 = _3559;
                                _3573 = _3560;
                                _3574 = _3561;
                                _3575 = _3562;
                                _3576 = _3563;
                                _3577 = _3564;
                                _3578 = _3579;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3564;
                        frontier_phi_82_pred_1 = _3563;
                        frontier_phi_82_pred_2 = _3562;
                        frontier_phi_82_pred_3 = _3561;
                        frontier_phi_82_pred_4 = _3560;
                        frontier_phi_82_pred_5 = _3559;
                    }
                    _3202 = frontier_phi_82_pred;
                    _3200 = frontier_phi_82_pred_1;
                    _3198 = frontier_phi_82_pred_2;
                    _3196 = frontier_phi_82_pred_3;
                    _3194 = frontier_phi_82_pred_4;
                    _3192 = frontier_phi_82_pred_5;
                    uint _3358 = _3357 + 1u;
                    if (_3358 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3351 = _3192;
                        _3352 = _3194;
                        _3353 = _3196;
                        _3354 = _3198;
                        _3355 = _3200;
                        _3356 = _3202;
                        _3357 = _3358;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3198;
                frontier_phi_63_64_ladder_1 = _3202;
                frontier_phi_63_64_ladder_2 = _3200;
                frontier_phi_63_64_ladder_3 = _3196;
                frontier_phi_63_64_ladder_4 = _3194;
                frontier_phi_63_64_ladder_5 = _3192;
            }
            else
            {
                frontier_phi_63_64_ladder = _3076;
                frontier_phi_63_64_ladder_1 = _3080;
                frontier_phi_63_64_ladder_2 = _3078;
                frontier_phi_63_64_ladder_3 = _3074;
                frontier_phi_63_64_ladder_4 = _3072;
                frontier_phi_63_64_ladder_5 = _3070;
            }
            _3191 = frontier_phi_63_64_ladder_5;
            _3193 = frontier_phi_63_64_ladder_4;
            _3195 = frontier_phi_63_64_ladder_3;
            _3197 = frontier_phi_63_64_ladder;
            _3199 = frontier_phi_63_64_ladder_2;
            _3201 = frontier_phi_63_64_ladder_1;
        }
        float _3206 = isnan(1.0) ? _945 : (isnan(_945) ? 1.0 : min(_945, 1.0));
        _3003 = (_3206 * _3197) + _2515;
        _3005 = (_3206 * _3199) + _2517;
        _3007 = (_3206 * _3201) + _2519;
        _3009 = ((_3191 * _929) * _3206) + _2853;
        _3011 = ((_3193 * _931) * _3206) + _2855;
        _3013 = ((_3195 * _932) * _3206) + _2857;
    }
    else
    {
        _3003 = _2515;
        _3005 = _2517;
        _3007 = _2519;
        _3009 = _2853;
        _3011 = _2855;
        _3013 = _2857;
    }
    float _5014 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _5025 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _5036 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _3030 = ((isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0))) * (_3003 + ((isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))) * _945))) + ((_3009 + ((isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0))) * _1783)) * cbPerFrame._m0[3u].x);
    float _3031 = ((isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0))) * (_3005 + ((isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))) * _945))) + ((_3011 + ((isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0))) * _1783)) * cbPerFrame._m0[3u].x);
    float _3032 = ((isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0))) * (_3007 + ((isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))) * _945))) + ((_3013 + ((isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0))) * _1783)) * cbPerFrame._m0[3u].x);
    uint _3033 = _252 + 6u;
    float _3041 = _867 / cbSceneParam._m0[86u].x;
    float _3042 = _868 / cbSceneParam._m0[86u].y;
    vec4 _3056 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3041, _3042, (log2((isnan(cbSceneParam._m0[77u].w) ? _789 : (isnan(_789) ? cbSceneParam._m0[77u].w : min(_789, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3058 = _3056.x;
    float _3059 = _3056.y;
    float _3060 = _3056.z;
    float _3061 = _3056.w;
    float _3133;
    float _3135;
    float _3137;
    float _3139;
    if (_789 > cbSceneParam._m0[78u].w)
    {
        float _3095 = isnan(_789) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _789 : min(cbSceneParam._m0[80u].w, _789));
        float _3096 = _3095 / _789;
        float _3107 = _3096 * _840;
        float _3108 = _841 * _3096;
        float _3109 = (-0.0) - _3108;
        float _3111 = _3096 * _842;
        float _3113 = (cbSceneParam._m0[77u].w * _3109) / _3095;
        float _3114 = _3113 + cbSceneParam._m0[79u].w;
        float _3115 = cbSceneParam._m0[79u].w - _3108;
        float _3121 = sqrt(((_3107 * _3107) + (_3108 * _3108)) + (_3111 * _3111));
        float _3124 = (1.0 - (cbSceneParam._m0[77u].w / _3095)) * _3121;
        float _3129 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3131 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3308;
        if (abs((_3109 - _3113) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3308 = ((((_3114 > 0.0) ? exp2(_3129 * _3114) : (2.0 - exp2(_3131 * _3114))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3124;
        }
        else
        {
            float _3252 = 1.0 / cbSceneParam._m0[80u].x;
            float _3253 = isnan(_3115) ? _3114 : (isnan(_3114) ? _3115 : max(_3114, _3115));
            float _3254 = isnan(_3115) ? _3114 : (isnan(_3114) ? _3115 : min(_3114, _3115));
            float _3263 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : min(_3253, 0.0));
            float _3264 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : min(_3254, 0.0));
            _3308 = ((abs(_3121 / _3109) * cbSceneParam._m0[80u].y) * ((((_3263 - _3264) * 2.0) - ((exp2(_3129 * (isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0)))) - exp2(_3129 * (isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0))))) * _3252)) - ((exp2(_3131 * _3263) - exp2(_3131 * _3264)) * _3252))) + (_3124 * cbSceneParam._m0[80u].z);
        }
        vec4 _3310 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3041, _3042, 1.0), 0.0);
        float _3319 = exp2((_3308 * (-1.44269502162933349609375)) * (1.0 - _3310.w));
        float _3320 = log2(_3319);
        float _3336 = log2(_3061);
        _3133 = (exp2(_3336 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3320 * cbSceneParam._m0[78u].x)) * _3310.x) / cbSceneParam._m0[78u].x)) + _3058;
        _3135 = (exp2(_3336 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3320 * cbSceneParam._m0[78u].y)) * _3310.y) / cbSceneParam._m0[78u].y)) + _3059;
        _3137 = (exp2(_3336 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3320 * cbSceneParam._m0[78u].z)) * _3310.z) / cbSceneParam._m0[78u].z)) + _3060;
        _3139 = _3319 * _3061;
    }
    else
    {
        _3133 = _3058;
        _3135 = _3059;
        _3137 = _3060;
        _3139 = _3061;
    }
    bool _3346;
    vec4 _3149;
    vec4 _3171;
    float _3173;
    float _3177;
    float _3178;
    float _3179;
    float _3180;
    bool _3190;
    for (;;)
    {
        _3149 = cbMatDynParam._m0[0u];
        float _3151 = roundEven(_3149.y);
        bool _3152 = _3151 == 3.0;
        float _3153 = log2(_3139);
        float _3160 = exp2(_3153 * cbSceneParam._m0[78u].x) * _3030;
        float _3161 = exp2(_3153 * cbSceneParam._m0[78u].y) * _3031;
        float _3162 = exp2(_3153 * cbSceneParam._m0[78u].z) * _3032;
        float _3169 = _856 + (-0.5);
        _3171 = cbMtdParam._m0[1u];
        _3173 = _3171.y * _3169;
        float _3176 = (_3151 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3177 = _3176 * (_3152 ? _3160 : (_3160 + (cbSceneParam._m0[72u].w * _3133)));
        _3178 = _3176 * (_3152 ? _3161 : (_3161 + (cbSceneParam._m0[72u].w * _3135)));
        _3179 = _3176 * (_3152 ? _3162 : (_3162 + (cbSceneParam._m0[72u].w * _3137)));
        _3180 = _3169 * 0.999000012874603271484375;
        _3190 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3190)
        {
            if ((cbInstanceData._m0[_252 + 7u].x + _3180) < 0.5)
            {
                _3346 = true;
                break;
            }
        }
        uint _3287 = _905 + uint(_3149.w);
        if ((cbInstanceData._m0[_3287].w < 1.0) && ((cbInstanceData._m0[_3287].w + _3180) < 0.5))
        {
            _3346 = true;
            break;
        }
        if ((_3173 + 1.0) < _3171.x)
        {
            _3346 = true;
            break;
        }
        _3346 = false;
        break;
    }
    float _3550;
    if (_3346)
    {
        discard_state = true;
        _3550 = 0.0;
    }
    else
    {
        _3550 = cbInstanceData._m0[_3033].w;
    }
    SV_Target.x = _3177;
    SV_Target.y = _3178;
    SV_Target.z = _3179;
    SV_Target.w = _3550;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3033].w;
    discard_exit();
}


