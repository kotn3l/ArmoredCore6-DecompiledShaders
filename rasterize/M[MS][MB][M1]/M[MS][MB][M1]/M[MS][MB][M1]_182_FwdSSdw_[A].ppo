#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1338;
float _3742;
float _3743;
float _3744;
float _3745;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _248 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _248 + 1u;
    uint _258 = _248 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _295 = _289.x * cbMtdParam._m0[11u].x;
    float _296 = _289.y * cbMtdParam._m0[11u].y;
    float _297 = _289.z * cbMtdParam._m0[11u].z;
    vec4 _316 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _355 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _357 = _355.x;
    float _369 = dot(vec4(_357, _355.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _386 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_357 - _369) * cbMtdParam._m0[24u].y) + _369) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3754 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _387 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
    float _394 = (_387 * ((_316.x * cbMtdParam._m0[12u].x) - _295)) + _295;
    float _395 = (_387 * ((_316.y * cbMtdParam._m0[12u].y) - _296)) + _296;
    float _396 = (_387 * ((_316.z * cbMtdParam._m0[12u].z) - _297)) + _297;
    vec4 _413 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _268) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _269) + cbTextureTilingScale._m0[3u].w));
    vec4 _433 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _435 = _433.x;
    float _445 = dot(vec4(_435, _433.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _459 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_435 - _445) * cbMtdParam._m0[24u].y) + _445) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3765 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _460 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
    float _467 = (_460 * ((_413.x * cbMtdParam._m0[13u].x) - _394)) + _394;
    float _468 = (_460 * ((_413.y * cbMtdParam._m0[13u].y) - _395)) + _395;
    float _469 = (_460 * ((_413.z * cbMtdParam._m0[13u].z) - _396)) + _396;
    vec4 _487 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _504 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _506 = _504.x;
    float _507 = _504.y;
    float _508 = _504.z;
    float _515 = ((_487.x - _506) * _387) + _506;
    float _516 = ((_487.y - _507) * _387) + _507;
    float _517 = ((_487.z - _508) * _387) + _508;
    vec4 _529 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _268) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _269) + cbTextureTilingScale._m0[2u].w));
    float _542 = ((_529.z - _517) * _460) + _517;
    float _545 = ((((_529.x - _515) * _460) + _515) * 2.0) + (-1.0);
    float _547 = ((((_529.y - _516) * _460) + _516) * 2.0) + (-1.0);
    float _548 = dot(vec2(_545, _547), vec2(_545, _547));
    float _3776 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _553 = sqrt(1.0 - (isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))));
    vec4 _567 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _592 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _268) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _594 = _592.x;
    float _595 = 1.0 - _594;
    float _608 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_594 - _595) * cbMtdParam._m0[24u].z) + _595) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3787 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _609 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _616 = (_609 * (cbMtdParam._m0[17u].x - _467)) + _467;
    float _617 = (_609 * (cbMtdParam._m0[17u].y - _468)) + _468;
    float _618 = (_609 * (cbMtdParam._m0[17u].z - _469)) + _469;
    vec4 _630 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _644 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _646 = _644.x;
    float _664 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _268) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _269) + cbTextureTilingScale._m0[9u].w)).x - _646) * _387) + _646;
    float _681 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _268) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _269) + cbTextureTilingScale._m0[21u].w)).x - _664) * _460) + _664;
    float _685 = ((_630.x - _681) * cbMtdParam._m0[19u].z) + _681;
    float _687 = _685 - (_685 * _609);
    float _691 = (cbMtdParam._m0[19u].w * (_567.z - _542)) + _542;
    vec4 _704 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _268) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _269) + cbTextureTilingScale._m0[15u].w));
    float _711 = (_704.x * 2.0) + (-1.0);
    float _712 = (_704.y * 2.0) + (-1.0);
    float _713 = dot(vec2(_711, _712), vec2(_711, _712));
    float _3798 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _721 = (_609 * (_704.z - _691)) + _691;
    float _724 = (((_567.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _545;
    float _725 = (((_567.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _547;
    float _737 = (((_711 - _724) + (cbMtdParam._m0[21u].x * _724)) * _609) + _724;
    float _738 = (((_712 - _725) + (cbMtdParam._m0[21u].x * _725)) * _609) + _725;
    float _739 = (_609 * (sqrt(1.0 - (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0)))) - _553)) + _553;
    float _744 = cbMtdParam._m0[22u].x + _567.w;
    float _747 = fma(_739, _235 * NORMAL.x, fma(_738, _242 * TANGENT.x, (_228 * _220) * _737));
    float _750 = fma(_739, _235 * NORMAL.y, fma(_738, _242 * TANGENT.y, (_228 * _221) * _737));
    float _753 = fma(_739, _235 * NORMAL.z, fma(_738, _242 * TANGENT.z, (_228 * _222) * _737));
    float _757 = inversesqrt(dot(vec3(_747, _750, _753), vec3(_747, _750, _753)));
    float _758 = _757 * _747;
    float _759 = _757 * _750;
    float _760 = _757 * _753;
    float _3809 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _761 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _3820 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _3831 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _3842 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _3853 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _3864 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _766 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
    float _780 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _821 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _831 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _821);
    float _832 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _821);
    float _833 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _821);
    float _837 = inversesqrt(dot(vec3(_831, _832, _833), vec3(_831, _832, _833)));
    float _838 = _831 * _837;
    float _839 = _832 * _837;
    float _840 = _833 * _837;
    vec4 _845 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _847 = _845.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1019 = sqrt(((_831 * _831) + (_832 * _832)) + (_833 * _833));
        float _1025 = (cbMatDynParam._m0[5u].x * _1019) + cbMatDynParam._m0[5u].y;
        float _3875 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1030 = (cbMatDynParam._m0[5u].z * _1019) + cbMatDynParam._m0[5u].w;
        float _3886 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) - _1026)) + _1026) < ((_847 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _858 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _859 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _877 = fma(_760, cbSceneParam._m0[5u].z, fma(_759, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _758));
    float _880 = fma(_760, cbSceneParam._m0[6u].z, fma(_759, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _758));
    float _883 = fma(_760, cbSceneParam._m0[7u].z, fma(_759, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _758));
    uint _896 = _248 + 9u;
    uint _897 = _896 + uint(cbMatDynParam._m0[0u].w);
    float _903 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0)))) * cbInstanceData._m0[_897].x;
    float _904 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0)))) * cbInstanceData._m0[_897].y;
    float _905 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0)))) * cbInstanceData._m0[_897].z;
    float _3897 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _906 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _3908 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _907 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _3919 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _908 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _909 = 1.0 - _766;
    float _910 = _906 * _909;
    float _911 = _907 * _909;
    float _912 = _908 * _909;
    float _917 = (_906 + (-0.039999999105930328369140625)) * _766;
    float _918 = (_907 + (-0.039999999105930328369140625)) * _766;
    float _919 = (_908 + (-0.039999999105930328369140625)) * _766;
    float _920 = _917 + 0.039999999105930328369140625;
    float _922 = _918 + 0.039999999105930328369140625;
    float _923 = _919 + 0.039999999105930328369140625;
    vec4 _932 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _858, cbSceneParam._m0[86u].y * _859));
    float _936 = ((isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * TEXCOORD_5.w) * _932.x;
    float _937 = dot(vec3(_758, _759, _760), vec3(_838, _839, _840));
    float _940 = _937 * 2.0;
    float _944 = (_940 * _758) - _838;
    float _945 = (_940 * _759) - _839;
    float _946 = (_940 * _760) - _840;
    float _950 = abs(dot(vec3(_838, _839, _840), vec3(_758, _759, _760)));
    float _3930 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _952 = sqrt(_761);
    float _965 = exp2((_952 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_952 * 3.0));
    float _971 = (1.0 - _965) * ((_952 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _972 = _965 * _952;
    float _1000 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1004 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1008 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1337;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1062 = fma(_1008, cbModelParam._m0[26u].z, fma(_1004, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1000));
        float _1066 = fma(_1008, cbModelParam._m0[27u].z, fma(_1004, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1000));
        float _1070 = fma(_1008, cbModelParam._m0[28u].z, fma(_1004, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1000));
        float _1095 = _1000 + _758;
        float _1096 = _1004 + _759;
        float _1097 = _1008 + _760;
        float _1107 = fma(_1097, cbModelParam._m0[26u].z, fma(_1096, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1095)) - _1062;
        float _1108 = fma(_1097, cbModelParam._m0[27u].z, fma(_1096, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1095)) - _1066;
        float _1109 = fma(_1097, cbModelParam._m0[28u].z, fma(_1096, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1095)) - _1070;
        float _1113 = inversesqrt(dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109)));
        float _1126 = ((_1113 * _1107) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1062 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1127 = ((_1113 * _1108) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1066 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1128 = ((_1113 * _1109) / cbModelParam._m0[34u].z) + ((((((_1070 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1131 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1126, _1127, _1128), 0.0);
        vec4 _1138 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1126, _1127, _1128), 0.0);
        vec4 _1145 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1126, _1127, _1128), 0.0);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1126, _1127, _1128), 0.0);
        float _1165 = exp2((_1131.w + (-0.5)) * 20.0) * 2.0;
        float _1166 = _1165 * (_1131.x + (-0.5));
        float _1167 = _1165 * (_1131.y + (-0.5));
        float _1168 = _1165 * (_1131.z + (-0.5));
        float _1175 = exp2((_1138.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1138.x + (-0.5));
        float _1177 = _1175 * (_1138.y + (-0.5));
        float _1178 = _1175 * (_1138.z + (-0.5));
        float _1185 = exp2((_1145.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1145.x + (-0.5));
        float _1187 = _1185 * (_1145.y + (-0.5));
        float _1188 = _1185 * (_1145.z + (-0.5));
        float _1195 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1152.x + (-0.5));
        float _1197 = _1195 * (_1152.y + (-0.5));
        float _1198 = _1195 * (_1152.z + (-0.5));
        float _1199 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1200 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1201 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1202 = _1166 * 0.5;
        float _1203 = _1176 * 0.5;
        float _1204 = _1186 * 0.5;
        float _1205 = dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204));
        float _1210 = (_1205 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1205);
        float _1219 = (dot(vec3(_758, _759, _760), vec3(_1210 * _1202, _1210 * _1203, _1210 * _1204)) + 1.0) * 0.5;
        float _3956 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1229 = sqrt(((_1203 * _1203) + (_1202 * _1202)) + (_1204 * _1204)) / (_1199 + 9.9999997473787516355514526367188e-06);
        float _3967 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1231 = _1230 * 2.0;
        float _1235 = (1.0 - _1230) / (_1230 + 1.0);
        float _3978 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1245 = ((((1.0 - _1236) * (_1231 + 2.0)) * exp2(log2(isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * (_1231 + 1.0))) + _1236) * _1199;
        float _1246 = _1167 * 0.5;
        float _1247 = _1177 * 0.5;
        float _1248 = _1187 * 0.5;
        float _1249 = dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248));
        float _1254 = (_1249 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1249);
        float _1262 = (dot(vec3(_758, _759, _760), vec3(_1254 * _1246, _1254 * _1247, _1254 * _1248)) + 1.0) * 0.5;
        float _3989 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1271 = sqrt(((_1247 * _1247) + (_1246 * _1246)) + (_1248 * _1248)) / (_1200 + 9.9999997473787516355514526367188e-06);
        float _4000 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1273 = _1272 * 2.0;
        float _1277 = (1.0 - _1272) / (_1272 + 1.0);
        float _4011 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1287 = ((((1.0 - _1278) * (_1273 + 2.0)) * exp2(log2(isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (_1273 + 1.0))) + _1278) * _1200;
        float _1288 = _1168 * 0.5;
        float _1289 = _1178 * 0.5;
        float _1290 = _1188 * 0.5;
        float _1291 = dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290));
        float _1296 = (_1291 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1291);
        float _1304 = (dot(vec3(_758, _759, _760), vec3(_1296 * _1288, _1296 * _1289, _1296 * _1290)) + 1.0) * 0.5;
        float _4022 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1313 = sqrt(((_1289 * _1289) + (_1288 * _1288)) + (_1290 * _1290)) / (_1201 + 9.9999997473787516355514526367188e-06);
        float _4033 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1315 = _1314 * 2.0;
        float _1319 = (1.0 - _1314) / (_1314 + 1.0);
        float _4044 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1329 = ((((1.0 - _1320) * (_1315 + 2.0)) * exp2(log2(isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_1315 + 1.0))) + _1320) * _1201;
        _1337 = _1168;
        _1339 = _1167;
        _1340 = _1166;
        _1341 = _1178;
        _1342 = _1177;
        _1343 = _1176;
        _1344 = _1188;
        _1345 = _1187;
        _1346 = _1186;
        _1347 = _1201;
        _1348 = _1200;
        _1349 = _1199;
        _1350 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)));
        _1351 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)));
        _1352 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)));
    }
    else
    {
        _1337 = _1338;
        _1339 = _1338;
        _1340 = _1338;
        _1341 = _1338;
        _1342 = _1338;
        _1343 = _1338;
        _1344 = _1338;
        _1345 = _1338;
        _1346 = _1338;
        _1347 = _1338;
        _1348 = _1338;
        _1349 = _1338;
        _1350 = 0.0;
        _1351 = 0.0;
        _1352 = 0.0;
    }
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1379 = fma(_1008, cbModelParam._m0[30u].z, fma(_1004, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1000));
        float _1383 = fma(_1008, cbModelParam._m0[31u].z, fma(_1004, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1000));
        float _1387 = fma(_1008, cbModelParam._m0[32u].z, fma(_1004, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1000));
        float _1410 = _1000 + _758;
        float _1411 = _1004 + _759;
        float _1412 = _1008 + _760;
        float _1422 = fma(_1412, cbModelParam._m0[30u].z, fma(_1411, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1410)) - _1379;
        float _1423 = fma(_1412, cbModelParam._m0[31u].z, fma(_1411, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1410)) - _1383;
        float _1424 = fma(_1412, cbModelParam._m0[32u].z, fma(_1411, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1410)) - _1387;
        float _1428 = inversesqrt(dot(vec3(_1422, _1423, _1424), vec3(_1422, _1423, _1424)));
        float _1441 = ((_1428 * _1422) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1379 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1442 = ((_1428 * _1423) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1383 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1443 = ((_1428 * _1424) / cbModelParam._m0[35u].z) + ((((((_1387 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1445 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        vec4 _1452 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        vec4 _1459 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        vec4 _1466 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        float _1478 = exp2((_1445.w + (-0.5)) * 20.0) * 2.0;
        float _1479 = _1478 * (_1445.x + (-0.5));
        float _1480 = _1478 * (_1445.y + (-0.5));
        float _1481 = _1478 * (_1445.z + (-0.5));
        float _1488 = exp2((_1452.w + (-0.5)) * 20.0) * 2.0;
        float _1489 = _1488 * (_1452.x + (-0.5));
        float _1490 = _1488 * (_1452.y + (-0.5));
        float _1491 = _1488 * (_1452.z + (-0.5));
        float _1498 = exp2((_1459.w + (-0.5)) * 20.0) * 2.0;
        float _1499 = _1498 * (_1459.x + (-0.5));
        float _1500 = _1498 * (_1459.y + (-0.5));
        float _1501 = _1498 * (_1459.z + (-0.5));
        float _1508 = exp2((_1466.w + (-0.5)) * 20.0) * 2.0;
        float _1509 = _1508 * (_1466.x + (-0.5));
        float _1510 = _1508 * (_1466.y + (-0.5));
        float _1511 = _1508 * (_1466.z + (-0.5));
        float _1512 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1513 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1514 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1515 = _1479 * 0.5;
        float _1516 = _1489 * 0.5;
        float _1517 = _1499 * 0.5;
        float _1518 = dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517));
        float _1523 = (_1518 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1518);
        float _1531 = (dot(vec3(_758, _759, _760), vec3(_1523 * _1515, _1523 * _1516, _1523 * _1517)) + 1.0) * 0.5;
        float _4085 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1540 = sqrt(((_1516 * _1516) + (_1515 * _1515)) + (_1517 * _1517)) / (_1512 + 9.9999997473787516355514526367188e-06);
        float _4096 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1542 = _1541 * 2.0;
        float _1546 = (1.0 - _1541) / (_1541 + 1.0);
        float _4107 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1556 = ((((1.0 - _1547) * (_1542 + 2.0)) * exp2(log2(isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (_1542 + 1.0))) + _1547) * _1512;
        float _1557 = _1480 * 0.5;
        float _1558 = _1490 * 0.5;
        float _1559 = _1500 * 0.5;
        float _1560 = dot(vec3(_1557, _1558, _1559), vec3(_1557, _1558, _1559));
        float _1565 = (_1560 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1560);
        float _1573 = (dot(vec3(_758, _759, _760), vec3(_1565 * _1557, _1565 * _1558, _1565 * _1559)) + 1.0) * 0.5;
        float _4118 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1582 = sqrt(((_1558 * _1558) + (_1557 * _1557)) + (_1559 * _1559)) / (_1513 + 9.9999997473787516355514526367188e-06);
        float _4129 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1584 = _1583 * 2.0;
        float _1588 = (1.0 - _1583) / (_1583 + 1.0);
        float _4140 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1598 = ((((1.0 - _1589) * (_1584 + 2.0)) * exp2(log2(isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * (_1584 + 1.0))) + _1589) * _1513;
        float _1599 = _1481 * 0.5;
        float _1600 = _1491 * 0.5;
        float _1601 = _1501 * 0.5;
        float _1602 = dot(vec3(_1599, _1600, _1601), vec3(_1599, _1600, _1601));
        float _1607 = (_1602 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1602);
        float _1615 = (dot(vec3(_758, _759, _760), vec3(_1607 * _1599, _1607 * _1600, _1607 * _1601)) + 1.0) * 0.5;
        float _4151 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1624 = sqrt(((_1600 * _1600) + (_1599 * _1599)) + (_1601 * _1601)) / (_1514 + 9.9999997473787516355514526367188e-06);
        float _4162 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1626 = _1625 * 2.0;
        float _1630 = (1.0 - _1625) / (_1625 + 1.0);
        float _4173 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1640 = ((((1.0 - _1631) * (_1626 + 2.0)) * exp2(log2(isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_1626 + 1.0))) + _1631) * _1514;
        _1648 = _1481;
        _1649 = _1480;
        _1650 = _1479;
        _1651 = _1491;
        _1652 = _1490;
        _1653 = _1489;
        _1654 = _1501;
        _1655 = _1500;
        _1656 = _1499;
        _1657 = _1514;
        _1658 = _1513;
        _1659 = _1512;
        _1660 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)));
        _1661 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)));
        _1662 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)));
    }
    else
    {
        _1648 = _1338;
        _1649 = _1338;
        _1650 = _1338;
        _1651 = _1338;
        _1652 = _1338;
        _1653 = _1338;
        _1654 = _1338;
        _1655 = _1338;
        _1656 = _1338;
        _1657 = _1338;
        _1658 = _1338;
        _1659 = _1338;
        _1660 = 0.0;
        _1661 = 0.0;
        _1662 = 0.0;
    }
    float _1672 = (cbModelParam._m0[1u].x * (_1660 - _1350)) + _1350;
    float _1673 = (cbModelParam._m0[1u].x * (_1661 - _1351)) + _1351;
    float _1674 = (cbModelParam._m0[1u].x * (_1662 - _1352)) + _1352;
    float _1695 = fma(_1674, cbSceneParam._m0[89u].z, fma(_1673, cbSceneParam._m0[89u].y, _1672 * cbSceneParam._m0[89u].x));
    float _1698 = fma(_1674, cbSceneParam._m0[90u].z, fma(_1673, cbSceneParam._m0[90u].y, _1672 * cbSceneParam._m0[90u].x));
    float _1701 = fma(_1674, cbSceneParam._m0[91u].z, fma(_1673, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1672));
    float _1716 = _944 * 0.5;
    float _1717 = _945 * 0.5;
    float _1718 = _946 * 0.5;
    float _1719 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1650, _1653, _1656, _1659));
    float _1722 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1649, _1652, _1655, _1658));
    float _1725 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1648, _1651, _1654, _1657));
    float _1759;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1732 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1337, _1341, _1344, _1347));
        float _1736 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1339, _1342, _1345, _1348));
        float _1740 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1340, _1343, _1346, _1349));
        float _1747 = dot(vec4(cbModelParam._m0[39u]), vec4(_1716, _1717, _1718, 1.0));
        _1759 = dot(vec3(isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0)), isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)), isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1747) ? 0.0 : (isnan(0.0) ? _1747 : max(0.0, _1747))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1759 = 1.0;
    }
    float _1770;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1761 = dot(vec4(cbModelParam._m0[40u]), vec4(_1716, _1717, _1718, 1.0));
        _1770 = dot(vec3(isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)), isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)), isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1761) ? 0.0 : (isnan(0.0) ? _1761 : max(0.0, _1761))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1770 = 1.0;
    }
    float _1774 = (_1770 * cbModelParam._m0[1u].x) + (_1759 * (1.0 - cbModelParam._m0[1u].x));
    float _1784 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _761);
    float _1785 = isnan(_1784) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1784 : min(cbModelParam._m0[25u].z, _1784));
    float _1866;
    float _1868;
    float _1870;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1833 = fma(_1008, cbModelParam._m0[13u].z, fma(_1004, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1000)) + cbModelParam._m0[13u].w;
        float _1837 = fma(_1008, cbModelParam._m0[14u].z, fma(_1004, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1000)) + cbModelParam._m0[14u].w;
        float _1841 = fma(_1008, cbModelParam._m0[15u].z, fma(_1004, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1000)) + cbModelParam._m0[15u].w;
        float _1844 = fma(_946, cbModelParam._m0[13u].z, fma(_945, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _944));
        float _1847 = fma(_946, cbModelParam._m0[14u].z, fma(_945, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _944));
        float _1850 = fma(_946, cbModelParam._m0[15u].z, fma(_945, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _944));
        float _1878;
        if (_1844 > 0.0)
        {
            _1878 = abs((1.0 - _1833) / _1844);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1844 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1833 + 1.0) / _1844);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1878 = frontier_phi_17_15_ladder;
        }
        float _2102;
        if (_1847 > 0.0)
        {
            _2102 = abs((1.0 - _1837) / _1847);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1847 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1837 + 1.0) / _1847);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2102 = frontier_phi_26_22_ladder;
        }
        float _2359;
        if (_1850 > 0.0)
        {
            _2359 = abs((1.0 - _1841) / _1850);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1850 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1841 + 1.0) / _1850);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2359 = frontier_phi_38_33_ladder;
        }
        float _2361 = isnan(_2102) ? _1878 : (isnan(_1878) ? _2102 : min(_1878, _2102));
        float _2362 = isnan(_2359) ? _2361 : (isnan(_2361) ? _2359 : min(_2361, _2359));
        float _2366 = (_2362 * _1844) + _1833;
        float _2367 = (_2362 * _1847) + _1837;
        float _2368 = (_2362 * _1850) + _1841;
        float _2369 = _2362 * 9.9999997473787516355514526367188e-05;
        float _2371 = (-1.0) - _2369;
        float _2373 = _2369 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2368 > _2373) || ((_2368 < _2371) || ((_2367 > _2373) || ((_2367 < _2371) || ((_2366 < _2371) || (_2366 > _2373))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2496 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2368, cbModelParam._m0[9u].z, fma(_2367, cbModelParam._m0[9u].y, _2366 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2368, cbModelParam._m0[10u].z, fma(_2367, cbModelParam._m0[10u].y, _2366 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2368, cbModelParam._m0[11u].z, fma(_2367, cbModelParam._m0[11u].y, _2366 * cbModelParam._m0[11u].x))), _1785);
            frontier_phi_16_38_ladder = _2496.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2496.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2496.x * cbModelParam._m0[1u].y;
        }
        _1866 = frontier_phi_16_38_ladder_2;
        _1868 = frontier_phi_16_38_ladder_1;
        _1870 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1854 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_944, _945, _946), _1785);
        _1866 = _1854.x * cbModelParam._m0[1u].y;
        _1868 = _1854.y * cbModelParam._m0[1u].y;
        _1870 = _1854.z * cbModelParam._m0[1u].y;
    }
    float _1874 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _761);
    float _1875 = isnan(_1874) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1874 : min(cbModelParam._m0[25u].w, _1874));
    float _1965;
    float _1967;
    float _1969;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1929 = fma(_1008, cbModelParam._m0[21u].z, fma(_1004, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1000)) + cbModelParam._m0[21u].w;
        float _1933 = fma(_1008, cbModelParam._m0[22u].z, fma(_1004, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1000)) + cbModelParam._m0[22u].w;
        float _1937 = fma(_1008, cbModelParam._m0[23u].z, fma(_1004, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1000)) + cbModelParam._m0[23u].w;
        float _1940 = fma(_946, cbModelParam._m0[21u].z, fma(_945, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _944));
        float _1943 = fma(_946, cbModelParam._m0[22u].z, fma(_945, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _944));
        float _1946 = fma(_946, cbModelParam._m0[23u].z, fma(_945, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _944));
        float _2107;
        if (_1940 > 0.0)
        {
            _2107 = abs((1.0 - _1929) / _1940);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1940 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1929 + 1.0) / _1940);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2107 = frontier_phi_28_24_ladder;
        }
        float _2386;
        if (_1943 > 0.0)
        {
            _2386 = abs((1.0 - _1933) / _1943);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1943 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1933 + 1.0) / _1943);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2386 = frontier_phi_40_35_ladder;
        }
        float _2599;
        if (_1946 > 0.0)
        {
            _2599 = abs((1.0 - _1937) / _1946);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1946 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1937 + 1.0) / _1946);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2599 = frontier_phi_49_46_ladder;
        }
        float _2601 = isnan(_2386) ? _2107 : (isnan(_2107) ? _2386 : min(_2107, _2386));
        float _2602 = isnan(_2599) ? _2601 : (isnan(_2601) ? _2599 : min(_2601, _2599));
        float _2606 = (_2602 * _1940) + _1929;
        float _2607 = (_2602 * _1943) + _1933;
        float _2608 = (_2602 * _1946) + _1937;
        float _2609 = _2602 * 9.9999997473787516355514526367188e-05;
        float _2610 = (-1.0) - _2609;
        float _2612 = _2609 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2608 > _2612) || ((_2608 < _2610) || ((_2607 > _2612) || ((_2607 < _2610) || ((_2606 < _2610) || (_2606 > _2612))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2807 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2608, cbModelParam._m0[17u].z, fma(_2607, cbModelParam._m0[17u].y, _2606 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2608, cbModelParam._m0[18u].z, fma(_2607, cbModelParam._m0[18u].y, _2606 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2608, cbModelParam._m0[19u].z, fma(_2607, cbModelParam._m0[19u].y, _2606 * cbModelParam._m0[19u].x))), _1875);
            frontier_phi_25_49_ladder = _2807.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2807.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2807.x * cbModelParam._m0[1u].z;
        }
        _1965 = frontier_phi_25_49_ladder_2;
        _1967 = frontier_phi_25_49_ladder_1;
        _1969 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1949 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_944, _945, _946), _1875);
        _1965 = _1949.x * cbModelParam._m0[1u].z;
        _1967 = _1949.y * cbModelParam._m0[1u].z;
        _1969 = _1949.z * cbModelParam._m0[1u].z;
    }
    float _1982 = (((_971 * _920) + _972) * _936) * ((cbModelParam._m0[1u].w * (_1965 - _1866)) + _1866);
    float _1984 = (((_971 * _922) + _972) * _936) * ((cbModelParam._m0[1u].w * (_1967 - _1868)) + _1868);
    float _1986 = (((_971 * _923) + _972) * _936) * ((cbModelParam._m0[1u].w * (_1969 - _1870)) + _1870);
    float _1989 = fma(_1986, cbSceneParam._m0[89u].z, fma(_1984, cbSceneParam._m0[89u].y, _1982 * cbSceneParam._m0[89u].x));
    float _1992 = fma(_1986, cbSceneParam._m0[90u].z, fma(_1984, cbSceneParam._m0[90u].y, _1982 * cbSceneParam._m0[90u].x));
    float _1995 = fma(_1986, cbSceneParam._m0[91u].z, fma(_1984, cbSceneParam._m0[91u].y, _1982 * cbSceneParam._m0[91u].x));
    vec4 _2003 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_858, _859));
    float _2005 = _2003.w;
    float _2017 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2005);
    float _2018 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2005);
    float _2019 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2005);
    uvec4 _2023 = floatBitsToUint(cbInstanceData._m0[_248 + 5u]);
    uint _2025 = _2023.x * 14u;
    uint _2026 = _2025 + 13u;
    float _2033 = _936 + (-1.0);
    float _2038 = (cbLight._m0[_2026].x * _2033) + 1.0;
    float _2039 = (cbLight._m0[_2026].y * _2033) + 1.0;
    float _2040 = (cbLight._m0[_2026].z * _2033) + 1.0;
    float _2041 = (cbLight._m0[_2026].w * _2033) + 1.0;
    uint _2042 = _2025 + 5u;
    float _2048 = isnan(1.0) ? _2039 : (isnan(_2039) ? 1.0 : min(_2039, 1.0));
    uint _2052 = _2025 + 4u;
    float _2061 = isnan(1.0) ? _2038 : (isnan(_2038) ? 1.0 : min(_2038, 1.0));
    uint _2065 = _2025 | 1u;
    float _2076 = dot(vec3(cbLight._m0[_2025].xyz), vec3(_758, _759, _760));
    float _2079 = dot(vec3(cbLight._m0[_2065].xyz), vec3(_758, _759, _760));
    float _4309 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _4320 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
    float _2084 = (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * 0.3183098733425140380859375;
    float _2086 = (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * 0.3183098733425140380859375;
    float _2093 = ((cbLight._m0[_2042].x * _2048) * _2086) + (((cbLight._m0[_2052].x * _2017) * _2061) * _2084);
    float _2094 = ((_2048 * cbLight._m0[_2042].y) * _2086) + (((cbLight._m0[_2052].y * _2018) * _2061) * _2084);
    float _2095 = ((_2048 * cbLight._m0[_2042].z) * _2086) + (((cbLight._m0[_2052].z * _2019) * _2061) * _2084);
    uvec4 _2099 = floatBitsToUint(cbLight._m0[_2025 + 12u]);
    bool _2101 = _2099.x == 0u;
    float _2112;
    float _2114;
    float _2116;
    if (_2101)
    {
        _2112 = _2093;
        _2114 = _2094;
        _2116 = _2095;
    }
    else
    {
        uint _2120 = _2025 + 6u;
        float _2136 = (dot(vec3(cbLight._m0[_2025 + 2u].xyz), vec3(_758, _759, _760)) * 0.5) + 0.5;
        float _2137 = _2136 * _2136;
        float _4331 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        float _2138 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _2139 = isnan(1.0) ? _2040 : (isnan(_2040) ? 1.0 : min(_2040, 1.0));
        _2112 = (((cbLight._m0[_2120].x * 0.3183098733425140380859375) * _2138) * _2139) + _2093;
        _2114 = (((cbLight._m0[_2120].y * 0.3183098733425140380859375) * _2138) * _2139) + _2094;
        _2116 = (((cbLight._m0[_2120].z * 0.3183098733425140380859375) * _2138) * _2139) + _2095;
    }
    bool _2119 = _2099.y == 0u;
    float _2157;
    float _2159;
    float _2161;
    if (_2119)
    {
        _2157 = _2112;
        _2159 = _2114;
        _2161 = _2116;
    }
    else
    {
        uint _2330 = _2025 + 7u;
        float _2346 = (dot(vec3(cbLight._m0[_2025 + 3u].xyz), vec3(_758, _759, _760)) * 0.5) + 0.5;
        float _2347 = _2346 * _2346;
        float _4347 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
        float _2348 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _2349 = isnan(1.0) ? _2041 : (isnan(_2041) ? 1.0 : min(_2041, 1.0));
        _2157 = (((cbLight._m0[_2330].x * 0.3183098733425140380859375) * _2348) * _2349) + _2112;
        _2159 = (((cbLight._m0[_2330].y * 0.3183098733425140380859375) * _2348) * _2349) + _2114;
        _2161 = (((cbLight._m0[_2330].z * 0.3183098733425140380859375) * _2348) * _2349) + _2116;
    }
    uint _2164 = _2025 + 8u;
    float _2177 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2025].w)) * _761) * 0.949999988079071044921875);
    float _2178 = _2177 * _2177;
    float _2179 = cbLight._m0[_2025].x + _838;
    float _2180 = cbLight._m0[_2025].y + _839;
    float _2181 = cbLight._m0[_2025].z + _840;
    float _2185 = inversesqrt(dot(vec3(_2179, _2180, _2181), vec3(_2179, _2180, _2181)));
    float _2186 = _2185 * _2179;
    float _2187 = _2185 * _2180;
    float _2188 = _2185 * _2181;
    float _2189 = dot(vec3(_758, _759, _760), vec3(cbLight._m0[_2025].xyz));
    float _4363 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2192 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
    float _4374 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _2193 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
    float _2194 = dot(vec3(_758, _759, _760), vec3(_2186, _2187, _2188));
    float _4385 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2197 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
    float _2198 = dot(vec3(cbLight._m0[_2025].xyz), vec3(_2186, _2187, _2188));
    float _4396 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
    float _2202 = _2178 * _2178;
    float _2206 = ((_2197 * _2197) * (_2202 + (-1.0))) + 1.0;
    float _2214 = exp2(log2(1.0 - (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0)))) * 5.0);
    float _2215 = 0.959999978542327880859375 - _917;
    float _2217 = 0.959999978542327880859375 - _918;
    float _2218 = 0.959999978542327880859375 - _919;
    float _2225 = 1.0 - _2178;
    float _2236 = (0.5 / (((_2193 * ((_2192 * _2225) + _2178)) + 9.9999999392252902907785028219223e-09) + (((_2193 * _2225) + _2178) * _2192))) * _2192;
    float _4407 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2238 = (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * (_2202 / ((_2206 * _2206) * 3.141590118408203125));
    uint _2252 = _2025 + 9u;
    float _2263 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2065].w)) * _761) * 0.949999988079071044921875);
    float _2264 = _2263 * _2263;
    float _2265 = cbLight._m0[_2065].x + _838;
    float _2266 = cbLight._m0[_2065].y + _839;
    float _2267 = cbLight._m0[_2065].z + _840;
    float _2271 = inversesqrt(dot(vec3(_2265, _2266, _2267), vec3(_2265, _2266, _2267)));
    float _2272 = _2271 * _2265;
    float _2273 = _2271 * _2266;
    float _2274 = _2271 * _2267;
    float _2275 = dot(vec3(_758, _759, _760), vec3(cbLight._m0[_2065].xyz));
    float _4418 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2278 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
    float _2279 = dot(vec3(_758, _759, _760), vec3(_2272, _2273, _2274));
    float _4429 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _2282 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
    float _2283 = dot(vec3(cbLight._m0[_2065].xyz), vec3(_2272, _2273, _2274));
    float _4440 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2287 = _2264 * _2264;
    float _2291 = ((_2282 * _2282) * (_2287 + (-1.0))) + 1.0;
    float _2298 = exp2(log2(1.0 - (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0)))) * 5.0);
    float _2305 = 1.0 - _2264;
    float _2315 = (0.5 / (((_2193 * ((_2278 * _2305) + _2264)) + 9.9999999392252902907785028219223e-09) + (((_2193 * _2305) + _2264) * _2278))) * _2278;
    float _4451 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2317 = (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (_2287 / ((_2291 * _2291) * 3.141590118408203125));
    float _2327 = (((((_2298 * _2215) + _920) * cbLight._m0[_2252].x) * _2317) * _2048) + ((((cbLight._m0[_2164].x * _2017) * ((_2214 * _2215) + _920)) * _2238) * _2061);
    float _2328 = (((((_2298 * _2217) + _922) * cbLight._m0[_2252].y) * _2317) * _2048) + ((((cbLight._m0[_2164].y * _2018) * ((_2214 * _2217) + _922)) * _2238) * _2061);
    float _2329 = (((((_2298 * _2218) + _923) * cbLight._m0[_2252].z) * _2317) * _2048) + ((((cbLight._m0[_2164].z * _2019) * ((_2214 * _2218) + _923)) * _2238) * _2061);
    float _2391;
    float _2393;
    float _2395;
    if (_2101)
    {
        _2391 = _2327;
        _2393 = _2328;
        _2395 = _2329;
    }
    else
    {
        uint _2397 = _2025 + 2u;
        uint _2401 = _2025 + 10u;
        float _2415 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2397].w)) * _761) * 0.949999988079071044921875);
        float _2416 = _2415 * _2415;
        float _2417 = cbLight._m0[_2397].x + _838;
        float _2418 = cbLight._m0[_2397].y + _839;
        float _2419 = cbLight._m0[_2397].z + _840;
        float _2423 = inversesqrt(dot(vec3(_2417, _2418, _2419), vec3(_2417, _2418, _2419)));
        float _2424 = _2423 * _2417;
        float _2425 = _2423 * _2418;
        float _2426 = _2423 * _2419;
        float _2427 = dot(vec3(_758, _759, _760), vec3(cbLight._m0[_2397].xyz));
        float _4462 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2430 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _2431 = dot(vec3(_758, _759, _760), vec3(_2424, _2425, _2426));
        float _4473 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2434 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
        float _2435 = dot(vec3(cbLight._m0[_2397].xyz), vec3(_2424, _2425, _2426));
        float _4484 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
        float _2439 = _2416 * _2416;
        float _2443 = ((_2434 * _2434) * (_2439 + (-1.0))) + 1.0;
        float _2450 = exp2(log2(1.0 - (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0)))) * 5.0);
        float _2457 = 1.0 - _2416;
        float _2467 = (0.5 / (((_2193 * ((_2430 * _2457) + _2416)) + 9.9999999392252902907785028219223e-09) + (((_2193 * _2457) + _2416) * _2430))) * _2430;
        float _4495 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2469 = (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_2439 / ((_2443 * _2443) * 3.141590118408203125));
        float _2470 = isnan(1.0) ? _2040 : (isnan(_2040) ? 1.0 : min(_2040, 1.0));
        _2391 = (((((_2450 * _2215) + _920) * cbLight._m0[_2401].x) * _2469) * _2470) + _2327;
        _2393 = (((((_2450 * _2217) + _922) * cbLight._m0[_2401].y) * _2469) * _2470) + _2328;
        _2395 = (((((_2450 * _2218) + _923) * cbLight._m0[_2401].z) * _2469) * _2470) + _2329;
    }
    float _2505;
    float _2507;
    float _2509;
    if (_2119)
    {
        _2505 = _2391;
        _2507 = _2393;
        _2509 = _2395;
    }
    else
    {
        uint _2516 = _2025 + 3u;
        uint _2520 = _2025 + 11u;
        float _2534 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2516].w)) * _761) * 0.949999988079071044921875);
        float _2535 = _2534 * _2534;
        float _2536 = cbLight._m0[_2516].x + _838;
        float _2537 = cbLight._m0[_2516].y + _839;
        float _2538 = cbLight._m0[_2516].z + _840;
        float _2542 = inversesqrt(dot(vec3(_2536, _2537, _2538), vec3(_2536, _2537, _2538)));
        float _2543 = _2542 * _2536;
        float _2544 = _2542 * _2537;
        float _2545 = _2542 * _2538;
        float _2546 = dot(vec3(_758, _759, _760), vec3(cbLight._m0[_2516].xyz));
        float _4511 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
        float _2549 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _2550 = dot(vec3(_758, _759, _760), vec3(_2543, _2544, _2545));
        float _4522 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        float _2553 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _2554 = dot(vec3(cbLight._m0[_2516].xyz), vec3(_2543, _2544, _2545));
        float _4533 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        float _2558 = _2535 * _2535;
        float _2562 = ((_2553 * _2553) * (_2558 + (-1.0))) + 1.0;
        float _2569 = exp2(log2(1.0 - (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0)))) * 5.0);
        float _2576 = 1.0 - _2535;
        float _2586 = (0.5 / (((_2193 * ((_2549 * _2576) + _2535)) + 9.9999999392252902907785028219223e-09) + (((_2193 * _2576) + _2535) * _2549))) * _2549;
        float _4544 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2588 = (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * (_2558 / ((_2562 * _2562) * 3.141590118408203125));
        float _2589 = isnan(1.0) ? _2041 : (isnan(_2041) ? 1.0 : min(_2041, 1.0));
        _2505 = (((((_2569 * _2215) + _920) * cbLight._m0[_2520].x) * _2588) * _2589) + _2391;
        _2507 = (((((_2569 * _2217) + _922) * cbLight._m0[_2520].y) * _2588) * _2589) + _2393;
        _2509 = (((((_2569 * _2218) + _923) * cbLight._m0[_2520].z) * _2588) * _2589) + _2395;
    }
    float _2724;
    float _2726;
    float _2728;
    float _2730;
    float _2732;
    float _2734;
    if (_2023.y == 0u)
    {
        float _2664 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2665 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2664;
        float _2666 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2664;
        float _2667 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2664;
        uvec4 _2679 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2680 = _2679.x;
        uint _2691 = uint((float(_2679.y) * floor(float(uint(cbSceneParam._m0[85u].y * _859) / _2680))) + floor(float(uint(cbSceneParam._m0[85u].x * _858) / _2680)));
        float _2701 = (log2(_2667 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2702 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        uint _2705 = uint(isnan(14.0) ? _2702 : (isnan(_2702) ? 14.0 : min(_2702, 14.0)));
        uvec4 _2710 = texelFetch(g_lightClusterGridBuffer, int(((_2705 << 2u) + (_2691 << 6u)) >> 2u));
        uint _2711 = _2710.x;
        uint _2712 = _2679.z;
        float _2812;
        float _2814;
        float _2816;
        float _2818;
        float _2820;
        float _2822;
        if (((((1u << ((_2712 >> 4u) & 15u)) + 4294967295u) & _2711) == 0u) || ((_2712 & 240u) == 0u))
        {
            _2812 = 0.0;
            _2814 = 0.0;
            _2816 = 0.0;
            _2818 = 0.0;
            _2820 = 0.0;
            _2822 = 0.0;
        }
        else
        {
            float _2813;
            float _2815;
            float _2817;
            float _2819;
            float _2821;
            float _2823;
            float _2965 = 0.0;
            float _2966 = 0.0;
            float _2967 = 0.0;
            float _2968 = 0.0;
            float _2969 = 0.0;
            float _2970 = 0.0;
            uint _2971 = 0u;
            uint _2980;
            bool _2981;
            for (;;)
            {
                _2980 = texelFetch(g_lightClassification, int((((_2705 << 5u) + (_2691 << 9u)) + (_2971 << 2u)) >> 2u)).x;
                _2981 = _2980 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2981)
                {
                    frontier_phi_66_pred = _2965;
                    frontier_phi_66_pred_1 = _2970;
                    frontier_phi_66_pred_2 = _2969;
                    frontier_phi_66_pred_3 = _2968;
                    frontier_phi_66_pred_4 = _2967;
                    frontier_phi_66_pred_5 = _2966;
                }
                else
                {
                    float _3110;
                    float _3111;
                    float _3112;
                    float _3113;
                    float _3114;
                    float _3115;
                    uint _3116;
                    _3110 = _2965;
                    _3111 = _2966;
                    _3112 = _2967;
                    _3113 = _2968;
                    _3114 = _2969;
                    _3115 = _2970;
                    _3116 = _2980;
                    float _3037;
                    float _3038;
                    float _3039;
                    float _3040;
                    float _3041;
                    float _3042;
                    for (;;)
                    {
                        uint _3120 = uint(findLSB(_3116)) + (_2971 << 5u);
                        uint _3117 = (_3116 + 4294967295u) & _3116;
                        uint _3122 = _3120 * 48u;
                        vec4 _3136 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3122)).x, texelFetch(g_PointLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3122 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3122 + 3u)).x));
                        uint _3142 = (_3120 * 48u) + 4u;
                        vec4 _3155 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3142)).x, texelFetch(g_PointLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3142 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3142 + 3u)).x));
                        uint _3161 = (_3120 * 48u) + 8u;
                        vec3 _3172 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3161)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 2u)).x));
                        float _3176 = _3136.x - _2665;
                        float _3177 = _3136.y - _2666;
                        float _3178 = _3136.z - _2667;
                        float _3179 = dot(vec3(_3176, _3177, _3178), vec3(_3176, _3177, _3178));
                        float _3182 = inversesqrt(_3179);
                        float _3183 = _3182 * _3176;
                        float _3184 = _3182 * _3177;
                        float _3185 = _3182 * _3178;
                        float _3186 = dot(vec3(_877, _880, _883), vec3(_3183, _3184, _3185));
                        float _3191 = 1.0 - (_3179 * _3136.w);
                        float _4570 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                        float _3192 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
                        float _3193 = sqrt(_3179) * _3155.w;
                        float _3196 = 1.39999997615814208984375 / (_3193 + 1.39999997615814208984375);
                        float _3197 = _3196 * _3196;
                        float _3200 = ((1.0 - _3197) * _3186) + _3197;
                        float _3203 = _3193 * _3193;
                        float _3207 = ((isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0))) * _3192) / ((_3203 * 0.699999988079071044921875) + 1.0);
                        float _3211 = (-0.0) - _2665;
                        float _3212 = (-0.0) - _2666;
                        float _3213 = (-0.0) - _2667;
                        float _3217 = inversesqrt(dot(vec3(_3211, _3212, _3213), vec3(_3211, _3212, _3213)));
                        float _3218 = _3217 * _3211;
                        float _3219 = _3217 * _3212;
                        float _3220 = _3217 * _3213;
                        float _3228 = exp2(log2(1.0 / ((_3203 * 3.5) + 5.0)) * 0.25);
                        float _3229 = 1.0 - _952;
                        float _3236 = sqrt(1.0 - ((1.0 - (_3229 * _3229)) * (1.0 - (_3228 * _3228))));
                        float _3237 = _3236 * _3236;
                        float _3238 = _3237 * _3237;
                        float _3239 = _3218 + _3183;
                        float _3240 = _3219 + _3184;
                        float _3241 = _3220 + _3185;
                        float _3245 = inversesqrt(dot(vec3(_3239, _3240, _3241), vec3(_3239, _3240, _3241)));
                        float _3249 = dot(vec3(_877, _880, _883), vec3(_3218, _3219, _3220));
                        float _4586 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                        float _3252 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
                        float _3253 = dot(vec3(_877, _880, _883), vec3(_3245 * _3239, _3245 * _3240, _3245 * _3241));
                        float _4597 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                        float _3256 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
                        float _3260 = ((_3256 * _3256) * (_3238 + (-1.0))) + 1.0;
                        float _3261 = _3196 * _3237;
                        float _3262 = _3261 * _3261;
                        float _3265 = ((1.0 - _3262) * _3186) + _3262;
                        float _4608 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                        float _3266 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
                        float _3267 = 1.0 - _3237;
                        float _3277 = (0.5 / (((_3266 * ((_3252 * _3267) + _3237)) + 9.9999999392252902907785028219223e-09) + (((_3266 * _3267) + _3237) * _3252))) * _3266;
                        float _4619 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                        float _3288 = (((_3238 * 3.1415927410125732421875) * (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0)))) / ((_3260 * _3260) * ((_3203 * 2.1991131305694580078125) + 3.141590118408203125))) * _3192;
                        _3040 = (_3207 * _3155.x) + _3113;
                        _3041 = (_3207 * _3155.y) + _3114;
                        _3042 = (_3207 * _3155.z) + _3115;
                        _3037 = (_3288 * _3172.x) + _3110;
                        _3038 = (_3288 * _3172.y) + _3111;
                        _3039 = (_3288 * _3172.z) + _3112;
                        if (_3117 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3110 = _3037;
                            _3111 = _3038;
                            _3112 = _3039;
                            _3113 = _3040;
                            _3114 = _3041;
                            _3115 = _3042;
                            _3116 = _3117;
                        }
                    }
                    frontier_phi_66_pred = _3037;
                    frontier_phi_66_pred_1 = _3042;
                    frontier_phi_66_pred_2 = _3041;
                    frontier_phi_66_pred_3 = _3040;
                    frontier_phi_66_pred_4 = _3039;
                    frontier_phi_66_pred_5 = _3038;
                }
                _2813 = frontier_phi_66_pred;
                _2823 = frontier_phi_66_pred_1;
                _2821 = frontier_phi_66_pred_2;
                _2819 = frontier_phi_66_pred_3;
                _2817 = frontier_phi_66_pred_4;
                _2815 = frontier_phi_66_pred_5;
                uint _2972 = _2971 + 1u;
                if (_2972 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2965 = _2813;
                    _2966 = _2815;
                    _2967 = _2817;
                    _2968 = _2819;
                    _2969 = _2821;
                    _2970 = _2823;
                    _2971 = _2972;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2812 = _2813;
            _2814 = _2815;
            _2816 = _2817;
            _2818 = _2819;
            _2820 = _2821;
            _2822 = _2823;
        }
        uvec4 _2826 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2827 = _2826.z;
        uint _2829 = (_2827 >> 8u) & 15u;
        float _2933;
        float _2935;
        float _2937;
        float _2939;
        float _2941;
        float _2943;
        if (((4294967295u << _2829) & _2711) == 0u)
        {
            _2933 = _2812;
            _2935 = _2814;
            _2937 = _2816;
            _2939 = _2818;
            _2941 = _2820;
            _2943 = _2822;
        }
        else
        {
            float _2958 = inversesqrt(dot(vec3(_2665, _2666, _2667), vec3(_2665, _2666, _2667)));
            float _2959 = _2958 * _2665;
            float _2960 = _2958 * _2666;
            float _2961 = _2958 * _2667;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2829 < ((_2827 >> 12u) & 15u))
            {
                float _2934;
                float _2936;
                float _2938;
                float _2940;
                float _2942;
                float _2944;
                float _3093 = _2812;
                float _3094 = _2814;
                float _3095 = _2816;
                float _3096 = _2818;
                float _3097 = _2820;
                float _3098 = _2822;
                uint _3099 = _2829;
                uint _3108;
                bool _3109;
                for (;;)
                {
                    _3108 = texelFetch(g_lightClassification, int((((_2705 << 5u) + (_2691 << 9u)) + (_3099 << 2u)) >> 2u)).x;
                    _3109 = _3108 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3109)
                    {
                        frontier_phi_77_pred = _3098;
                        frontier_phi_77_pred_1 = _3097;
                        frontier_phi_77_pred_2 = _3096;
                        frontier_phi_77_pred_3 = _3095;
                        frontier_phi_77_pred_4 = _3094;
                        frontier_phi_77_pred_5 = _3093;
                    }
                    else
                    {
                        float _3302;
                        float _3303;
                        float _3304;
                        float _3305;
                        float _3306;
                        float _3307;
                        float _3595;
                        float _3596;
                        float _3597;
                        float _3598;
                        float _3599;
                        float _3600;
                        float _3315 = _3093;
                        float _3316 = _3094;
                        float _3317 = _3095;
                        float _3318 = _3096;
                        float _3319 = _3097;
                        float _3320 = _3098;
                        uint _3321 = _3108;
                        uint _3322;
                        vec4 _3347;
                        float _3348;
                        vec4 _3363;
                        vec3 _3375;
                        vec4 _3390;
                        vec4 _3405;
                        float _3451;
                        bool _3452;
                        for (;;)
                        {
                            uint _3332 = ((_3099 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3321));
                            _3322 = (_3321 + 4294967295u) & _3321;
                            uint _3334 = _3332 * 40u;
                            _3347 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3334)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 3u)).x));
                            _3348 = _3347.w;
                            uint _3350 = (_3332 * 40u) + 4u;
                            _3363 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3350)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 3u)).x));
                            uint _3365 = (_3332 * 40u) + 8u;
                            _3375 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3365)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 2u)).x));
                            uint _3377 = (_3332 * 40u) + 16u;
                            _3390 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3377)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 3u)).x));
                            uint _3392 = (_3332 * 40u) + 20u;
                            _3405 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 3u)).x));
                            uint _3407 = (_3332 * 40u) + 24u;
                            vec4 _3420 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3407)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 3u)).x));
                            uint _3426 = (_3332 * 40u) + 28u;
                            vec4 _3439 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3426)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 3u)).x));
                            _3451 = fma(_2667, _3439.z, fma(_2666, _3439.y, _3439.x * _2665)) + _3439.w;
                            _3452 = !((fma(_2667, _3420.z, fma(_2666, _3420.y, _3420.x * _2665)) + _3420.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3452)
                            {
                                float _3479 = _3347.x - _2665;
                                float _3480 = _3347.y - _2666;
                                float _3481 = _3347.z - _2667;
                                float _3482 = dot(vec3(_3479, _3480, _3481), vec3(_3479, _3480, _3481));
                                float _3485 = inversesqrt(_3482);
                                float _3486 = _3485 * _3479;
                                float _3487 = _3485 * _3480;
                                float _3488 = _3485 * _3481;
                                float _3492 = 1.0 - (_3482 / (_3348 * _3348));
                                float _4630 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                                float _3493 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                                float _3497 = sqrt(_3482) * _3363.w;
                                float _3499 = 1.39999997615814208984375 / (_3497 + 1.39999997615814208984375);
                                float _3500 = _3499 * _3499;
                                float _3503 = ((1.0 - _3500) * dot(vec3(_3486, _3487, _3488), vec3(_877, _880, _883))) + _3500;
                                float _3506 = _3497 * _3497;
                                float _3510 = (fma(_2667, _3390.z, fma(_2666, _3390.y, _3390.x * _2665)) + _3390.w) / _3451;
                                float _3511 = (fma(_2667, _3405.z, fma(_2666, _3405.y, _3405.x * _2665)) + _3405.w) / _3451;
                                float _3515 = 1.0 - dot(vec2(_3510, _3511), vec2(_3510, _3511));
                                float _4646 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                                float _3516 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                                float _3517 = _3516 * (((isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0))) * _3493) / ((_3506 * 0.699999988079071044921875) + 1.0));
                                float _3529 = exp2(log2(1.0 / ((_3506 * 3.5) + 5.0)) * 0.25);
                                float _3530 = 1.0 - _952;
                                float _3537 = sqrt(1.0 - ((1.0 - (_3530 * _3530)) * (1.0 - (_3529 * _3529))));
                                float _3538 = _3537 * _3537;
                                float _3539 = _3538 * _3538;
                                float _3540 = _3486 - _2959;
                                float _3541 = _3487 - _2960;
                                float _3542 = _3488 - _2961;
                                float _3546 = inversesqrt(dot(vec3(_3540, _3541, _3542), vec3(_3540, _3541, _3542)));
                                float _3550 = dot(vec3(_877, _880, _883), vec3((-0.0) - _2959, (-0.0) - _2960, (-0.0) - _2961));
                                float _4657 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                                float _3553 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                                float _3554 = dot(vec3(_877, _880, _883), vec3(_3546 * _3540, _3546 * _3541, _3546 * _3542));
                                float _4668 = isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0));
                                float _3557 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                                float _3561 = ((_3557 * _3557) * (_3539 + (-1.0))) + 1.0;
                                float _3562 = _3499 * _3538;
                                float _3563 = _3562 * _3562;
                                float _3569 = ((1.0 - _3563) * dot(vec3(_877, _880, _883), vec3(_3486, _3487, _3488))) + _3563;
                                float _4679 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                                float _3570 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
                                float _3571 = 1.0 - _3538;
                                float _3581 = (0.5 / (((_3570 * ((_3553 * _3571) + _3538)) + 9.9999999392252902907785028219223e-09) + (((_3570 * _3571) + _3538) * _3553))) * _3570;
                                float _4690 = isnan(0.0) ? _3581 : (isnan(_3581) ? 0.0 : max(_3581, 0.0));
                                float _3591 = (_3516 * _3493) * (((_3539 * 3.1415927410125732421875) * (isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0)))) / ((_3561 * _3561) * ((_3506 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3517 * _3363.y;
                                frontier_phi_83_pred_1 = _3517 * _3363.x;
                                frontier_phi_83_pred_2 = _3591 * _3375.z;
                                frontier_phi_83_pred_3 = _3591 * _3375.y;
                                frontier_phi_83_pred_4 = _3591 * _3375.x;
                                frontier_phi_83_pred_5 = _3517 * _3363.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3599 = frontier_phi_83_pred;
                            _3598 = frontier_phi_83_pred_1;
                            _3597 = frontier_phi_83_pred_2;
                            _3596 = frontier_phi_83_pred_3;
                            _3595 = frontier_phi_83_pred_4;
                            _3600 = frontier_phi_83_pred_5;
                            _3305 = _3598 + _3318;
                            _3306 = _3599 + _3319;
                            _3307 = _3600 + _3320;
                            _3302 = _3595 + _3315;
                            _3303 = _3596 + _3316;
                            _3304 = _3597 + _3317;
                            if (_3322 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3315 = _3302;
                                _3316 = _3303;
                                _3317 = _3304;
                                _3318 = _3305;
                                _3319 = _3306;
                                _3320 = _3307;
                                _3321 = _3322;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3307;
                        frontier_phi_77_pred_1 = _3306;
                        frontier_phi_77_pred_2 = _3305;
                        frontier_phi_77_pred_3 = _3304;
                        frontier_phi_77_pred_4 = _3303;
                        frontier_phi_77_pred_5 = _3302;
                    }
                    _2944 = frontier_phi_77_pred;
                    _2942 = frontier_phi_77_pred_1;
                    _2940 = frontier_phi_77_pred_2;
                    _2938 = frontier_phi_77_pred_3;
                    _2936 = frontier_phi_77_pred_4;
                    _2934 = frontier_phi_77_pred_5;
                    uint _3100 = _3099 + 1u;
                    if (_3100 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3093 = _2934;
                        _3094 = _2936;
                        _3095 = _2938;
                        _3096 = _2940;
                        _3097 = _2942;
                        _3098 = _2944;
                        _3099 = _3100;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2938;
                frontier_phi_58_59_ladder_1 = _2944;
                frontier_phi_58_59_ladder_2 = _2942;
                frontier_phi_58_59_ladder_3 = _2940;
                frontier_phi_58_59_ladder_4 = _2936;
                frontier_phi_58_59_ladder_5 = _2934;
            }
            else
            {
                frontier_phi_58_59_ladder = _2816;
                frontier_phi_58_59_ladder_1 = _2822;
                frontier_phi_58_59_ladder_2 = _2820;
                frontier_phi_58_59_ladder_3 = _2818;
                frontier_phi_58_59_ladder_4 = _2814;
                frontier_phi_58_59_ladder_5 = _2812;
            }
            _2933 = frontier_phi_58_59_ladder_5;
            _2935 = frontier_phi_58_59_ladder_4;
            _2937 = frontier_phi_58_59_ladder;
            _2939 = frontier_phi_58_59_ladder_3;
            _2941 = frontier_phi_58_59_ladder_2;
            _2943 = frontier_phi_58_59_ladder_1;
        }
        float _2948 = isnan(1.0) ? _936 : (isnan(_936) ? 1.0 : min(_936, 1.0));
        _2724 = (_2948 * _2939) + _2157;
        _2726 = (_2948 * _2941) + _2159;
        _2728 = (_2948 * _2943) + _2161;
        _2730 = ((_2933 * _920) * _2948) + _2505;
        _2732 = ((_2935 * _922) * _2948) + _2507;
        _2734 = ((_2937 * _923) * _2948) + _2509;
    }
    else
    {
        _2724 = _2157;
        _2726 = _2159;
        _2728 = _2161;
        _2730 = _2505;
        _2732 = _2507;
        _2734 = _2509;
    }
    float _4706 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _4717 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _4728 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _2751 = ((isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0))) * (_2724 + ((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _936))) + ((_2730 + ((isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0))) * _1774)) * cbPerFrame._m0[3u].x);
    float _2752 = ((isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0))) * (_2726 + ((isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))) * _936))) + ((_2732 + ((isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0))) * _1774)) * cbPerFrame._m0[3u].x);
    float _2753 = ((isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0))) * (_2728 + ((isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))) * _936))) + ((_2734 + ((isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0))) * _1774)) * cbPerFrame._m0[3u].x);
    uint _2754 = _248 + 6u;
    float _2762 = _858 / cbSceneParam._m0[86u].x;
    float _2763 = _859 / cbSceneParam._m0[86u].y;
    vec4 _2777 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2762, _2763, (log2((isnan(cbSceneParam._m0[77u].w) ? _780 : (isnan(_780) ? cbSceneParam._m0[77u].w : min(_780, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2779 = _2777.x;
    float _2780 = _2777.y;
    float _2781 = _2777.z;
    float _2782 = _2777.w;
    float _2875;
    float _2877;
    float _2879;
    float _2881;
    if (_780 > cbSceneParam._m0[78u].w)
    {
        float _2837 = isnan(_780) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _780 : min(cbSceneParam._m0[80u].w, _780));
        float _2838 = _2837 / _780;
        float _2849 = _2838 * _831;
        float _2850 = _832 * _2838;
        float _2851 = (-0.0) - _2850;
        float _2853 = _2838 * _833;
        float _2855 = (cbSceneParam._m0[77u].w * _2851) / _2837;
        float _2856 = _2855 + cbSceneParam._m0[79u].w;
        float _2857 = cbSceneParam._m0[79u].w - _2850;
        float _2863 = sqrt(((_2849 * _2849) + (_2850 * _2850)) + (_2853 * _2853));
        float _2866 = (1.0 - (cbSceneParam._m0[77u].w / _2837)) * _2863;
        float _2871 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2873 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3050;
        if (abs((_2851 - _2855) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3050 = ((((_2856 > 0.0) ? exp2(_2871 * _2856) : (2.0 - exp2(_2873 * _2856))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2866;
        }
        else
        {
            float _2994 = 1.0 / cbSceneParam._m0[80u].x;
            float _2995 = isnan(_2857) ? _2856 : (isnan(_2856) ? _2857 : max(_2856, _2857));
            float _2996 = isnan(_2857) ? _2856 : (isnan(_2856) ? _2857 : min(_2856, _2857));
            float _3005 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : min(_2995, 0.0));
            float _3006 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : min(_2996, 0.0));
            _3050 = ((abs(_2863 / _2851) * cbSceneParam._m0[80u].y) * ((((_3005 - _3006) * 2.0) - ((exp2(_2871 * (isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0)))) - exp2(_2871 * (isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0))))) * _2994)) - ((exp2(_2873 * _3005) - exp2(_2873 * _3006)) * _2994))) + (_2866 * cbSceneParam._m0[80u].z);
        }
        vec4 _3052 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2762, _2763, 1.0), 0.0);
        float _3061 = exp2((_3050 * (-1.44269502162933349609375)) * (1.0 - _3052.w));
        float _3062 = log2(_3061);
        float _3078 = log2(_2782);
        _2875 = (exp2(_3078 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3062 * cbSceneParam._m0[78u].x)) * _3052.x) / cbSceneParam._m0[78u].x)) + _2779;
        _2877 = (exp2(_3078 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3062 * cbSceneParam._m0[78u].y)) * _3052.y) / cbSceneParam._m0[78u].y)) + _2780;
        _2879 = (exp2(_3078 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3062 * cbSceneParam._m0[78u].z)) * _3052.z) / cbSceneParam._m0[78u].z)) + _2781;
        _2881 = _3061 * _2782;
    }
    else
    {
        _2875 = _2779;
        _2877 = _2780;
        _2879 = _2781;
        _2881 = _2782;
    }
    bool _3088;
    vec4 _2891;
    vec4 _2913;
    float _2915;
    float _2919;
    float _2920;
    float _2921;
    float _2922;
    bool _2932;
    for (;;)
    {
        _2891 = cbMatDynParam._m0[0u];
        float _2893 = roundEven(_2891.y);
        bool _2894 = _2893 == 3.0;
        float _2895 = log2(_2881);
        float _2902 = exp2(_2895 * cbSceneParam._m0[78u].x) * _2751;
        float _2903 = exp2(_2895 * cbSceneParam._m0[78u].y) * _2752;
        float _2904 = exp2(_2895 * cbSceneParam._m0[78u].z) * _2753;
        float _2911 = _847 + (-0.5);
        _2913 = cbMtdParam._m0[1u];
        _2915 = _2913.y * _2911;
        float _2918 = (_2893 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2919 = _2918 * (_2894 ? _2902 : (_2902 + (cbSceneParam._m0[72u].w * _2875)));
        _2920 = _2918 * (_2894 ? _2903 : (_2903 + (cbSceneParam._m0[72u].w * _2877)));
        _2921 = _2918 * (_2894 ? _2904 : (_2904 + (cbSceneParam._m0[72u].w * _2879)));
        _2922 = _2911 * 0.999000012874603271484375;
        _2932 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2932)
        {
            if ((cbInstanceData._m0[_248 + 7u].x + _2922) < 0.5)
            {
                _3088 = true;
                break;
            }
        }
        uint _3029 = _896 + uint(_2891.w);
        if ((cbInstanceData._m0[_3029].w < 1.0) && ((cbInstanceData._m0[_3029].w + _2922) < 0.5))
        {
            _3088 = true;
            break;
        }
        if ((_2915 + 1.0) < _2913.x)
        {
            _3088 = true;
            break;
        }
        _3088 = false;
        break;
    }
    float _3293;
    if (_3088)
    {
        discard_state = true;
        _3293 = 0.0;
    }
    else
    {
        _3293 = cbInstanceData._m0[_2754].w;
    }
    SV_Target.x = _2919;
    SV_Target.y = _2920;
    SV_Target.z = _2921;
    SV_Target.w = _3293;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2754].w;
    discard_exit();
}


