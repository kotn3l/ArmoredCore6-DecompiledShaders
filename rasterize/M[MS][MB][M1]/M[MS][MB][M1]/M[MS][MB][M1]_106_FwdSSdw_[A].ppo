#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1440;
float _3844;
float _3845;
float _3846;
float _3847;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _245 = _244 * _236;
    float _246 = _244 * _237;
    float _247 = _244 * _238;
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = _251 * NORMAL.x;
    float _253 = _251 * NORMAL.y;
    float _254 = _251 * NORMAL.z;
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = _258 * TANGENT.x;
    float _260 = _258 * TANGENT.y;
    float _261 = _258 * TANGENT.z;
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3856 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3867 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3878 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _345 = _340.x * cbMtdParam._m0[11u].x;
    float _346 = _340.y * cbMtdParam._m0[11u].y;
    float _347 = _340.z * cbMtdParam._m0[11u].z;
    vec4 _366 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _402 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _404 = _402.x;
    float _416 = dot(vec4(_404, _402.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _433 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_404 - _416) * cbMtdParam._m0[24u].y) + _416) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3889 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _434 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _441 = (_434 * ((_366.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _442 = (_434 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _443 = (_434 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    float _447 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _441;
    float _450 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _442;
    float _453 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _443;
    float _460 = ((_441 - _447) * (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0)))) + _447;
    float _461 = ((_442 - _450) * (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0)))) + _450;
    float _462 = ((_443 - _453) * (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0)))) + _453;
    vec4 _480 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _507 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _524 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _526 = _524.x;
    float _527 = _524.y;
    float _528 = _524.z;
    float _537 = ((_507.z - _528) * _434) + _528;
    float _540 = ((((_507.x - _526) * _434) + _526) * 2.0) + (-1.0);
    float _541 = ((((_507.y - _527) * _434) + _527) * 2.0) + (-1.0);
    float _542 = dot(vec2(_540, _541), vec2(_540, _541));
    float _3900 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _547 = sqrt(1.0 - (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))));
    float _550 = _540 + ((((_480.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _551 = _541 + ((((_480.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _554 = fma(_547, _252, fma(_551, _259, _550 * _245));
    float _557 = fma(_547, _253, fma(_551, _260, _550 * _246));
    float _560 = fma(_547, _254, fma(_551, _261, _550 * _247));
    float _564 = inversesqrt(dot(vec3(_554, _557, _560), vec3(_554, _557, _560)));
    vec4 _580 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _606 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _302) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _303) + cbTextureTilingScale._m0[11u].w));
    float _608 = _606.x;
    float _609 = 1.0 - _608;
    float _615 = (cbMtdParam._m0[19u].x + dot(vec4(_564 * _554, _564 * _557, _564 * _560, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_608 - _609) * cbMtdParam._m0[24u].z) + _609) * cbMtdParam._m0[21u].z);
    float _3911 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _616 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _618 = (-0.0) - cbMtdParam._m0[24u].x;
    float _620 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _621 = isnan(1.0) ? _620 : (isnan(_620) ? 1.0 : min(_620, 1.0));
    float _628 = _616 - ((_616 * TEXCOORD_8.x) * _621);
    float _629 = _616 - ((_616 * TEXCOORD_8.y) * _621);
    float _630 = _616 - ((_616 * TEXCOORD_8.z) * _621);
    float _637 = (_628 * (cbMtdParam._m0[17u].x - _460)) + _460;
    float _638 = (_629 * (cbMtdParam._m0[17u].y - _461)) + _461;
    float _639 = (_630 * (cbMtdParam._m0[17u].z - _462)) + _462;
    vec4 _651 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _653 = _651.x;
    float _654 = 1.0 - _653;
    float _680 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_653 - _654) * cbMtdParam._m0[24u].w) + _654) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3932 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _681 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _689 = ((((cbMtdParam._m0[10u].x - _637) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _681) + _637;
    float _690 = ((((cbMtdParam._m0[10u].y - _638) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _681) + _638;
    float _691 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _639)) * _681) + _639;
    vec4 _717 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _719 = _717.x;
    float _737 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _302) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _303) + cbTextureTilingScale._m0[9u].w)).x - _719) * _434) + _719;
    float _741 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _737) * cbMtdParam._m0[19u].z) + _737;
    float _743 = _741 - (_741 * _628);
    float _745 = _743 - (_743 * _681);
    float _750 = (((_480.z - _537) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _537;
    vec4 _764 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _302) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _303) + cbTextureTilingScale._m0[15u].w));
    float _771 = (_764.x * 2.0) + (-1.0);
    float _772 = (_764.y * 2.0) + (-1.0);
    float _773 = dot(vec2(_771, _772), vec2(_771, _772));
    float _3943 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _781 = ((_764.z - _750) * _628) + _750;
    float _784 = ((cbMtdParam._m0[23u].y - _781) * _681) + _781;
    vec4 _803 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _809 = (_803.x * 2.0) + (-1.0);
    float _810 = (_803.y * 2.0) + (-1.0);
    float _811 = dot(vec2(_809, _810), vec2(_809, _810));
    float _3954 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _826 = ((sqrt(1.0 - (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0)))) - _547) * _630) + _547;
    float _829 = (((_771 - _550) * _628) + _550) + (cbMtdParam._m0[21u].x * _550);
    float _830 = (((_772 - _551) * _629) + _551) + (cbMtdParam._m0[21u].x * _551);
    float _841 = (((_809 - _829) + (_829 * cbMtdParam._m0[22u].z)) * _681) + _829;
    float _842 = (((_810 - _830) + (_830 * cbMtdParam._m0[22u].z)) * _681) + _830;
    float _843 = (_681 * (sqrt(1.0 - (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0)))) - _826)) + _826;
    float _847 = cbMtdParam._m0[22u].x + _580.w;
    float _850 = fma(_843, _252, fma(_842, _259, _841 * _245));
    float _853 = fma(_843, _253, fma(_842, _260, _841 * _246));
    float _856 = fma(_843, _254, fma(_842, _261, _841 * _247));
    float _860 = inversesqrt(dot(vec3(_850, _853, _856), vec3(_850, _853, _856)));
    float _861 = _860 * _850;
    float _862 = _860 * _853;
    float _863 = _860 * _856;
    float _3965 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _864 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _3976 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _3987 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _3998 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _4009 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _4020 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _869 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
    float _883 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _923 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _933 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _923);
    float _934 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _923);
    float _935 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _923);
    float _939 = inversesqrt(dot(vec3(_933, _934, _935), vec3(_933, _934, _935)));
    float _940 = _933 * _939;
    float _941 = _934 * _939;
    float _942 = _935 * _939;
    vec4 _947 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _949 = _947.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1121 = sqrt(((_933 * _933) + (_934 * _934)) + (_935 * _935));
        float _1127 = (cbMatDynParam._m0[5u].x * _1121) + cbMatDynParam._m0[5u].y;
        float _4031 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1132 = (cbMatDynParam._m0[5u].z * _1121) + cbMatDynParam._m0[5u].w;
        float _4042 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) - _1128)) + _1128) < ((_949 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _960 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _961 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _979 = fma(_863, cbSceneParam._m0[5u].z, fma(_862, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _861));
    float _982 = fma(_863, cbSceneParam._m0[6u].z, fma(_862, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _861));
    float _985 = fma(_863, cbSceneParam._m0[7u].z, fma(_862, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _861));
    uint _998 = _283 + 9u;
    uint _999 = _998 + uint(cbMatDynParam._m0[0u].w);
    float _1005 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0)))) * cbInstanceData._m0[_999].x;
    float _1006 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0)))) * cbInstanceData._m0[_999].y;
    float _1007 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0)))) * cbInstanceData._m0[_999].z;
    float _4053 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _1008 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _4064 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _1009 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _4075 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _1010 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _1011 = 1.0 - _869;
    float _1012 = _1008 * _1011;
    float _1013 = _1009 * _1011;
    float _1014 = _1010 * _1011;
    float _1019 = (_1008 + (-0.039999999105930328369140625)) * _869;
    float _1020 = (_1009 + (-0.039999999105930328369140625)) * _869;
    float _1021 = (_1010 + (-0.039999999105930328369140625)) * _869;
    float _1022 = _1019 + 0.039999999105930328369140625;
    float _1024 = _1020 + 0.039999999105930328369140625;
    float _1025 = _1021 + 0.039999999105930328369140625;
    vec4 _1034 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _960, cbSceneParam._m0[86u].y * _961));
    float _1038 = ((isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * TEXCOORD_5.w) * _1034.x;
    float _1039 = dot(vec3(_861, _862, _863), vec3(_940, _941, _942));
    float _1042 = _1039 * 2.0;
    float _1046 = (_1042 * _861) - _940;
    float _1047 = (_1042 * _862) - _941;
    float _1048 = (_1042 * _863) - _942;
    float _1052 = abs(dot(vec3(_940, _941, _942), vec3(_861, _862, _863)));
    float _4086 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _1054 = sqrt(_864);
    float _1067 = exp2((_1054 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1054 * 3.0));
    float _1073 = (1.0 - _1067) * ((_1054 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1074 = _1067 * _1054;
    float _1102 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1106 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1110 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1439;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1164 = fma(_1110, cbModelParam._m0[26u].z, fma(_1106, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1102));
        float _1168 = fma(_1110, cbModelParam._m0[27u].z, fma(_1106, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1102));
        float _1172 = fma(_1110, cbModelParam._m0[28u].z, fma(_1106, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1102));
        float _1197 = _1102 + _861;
        float _1198 = _1106 + _862;
        float _1199 = _1110 + _863;
        float _1209 = fma(_1199, cbModelParam._m0[26u].z, fma(_1198, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1197)) - _1164;
        float _1210 = fma(_1199, cbModelParam._m0[27u].z, fma(_1198, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1197)) - _1168;
        float _1211 = fma(_1199, cbModelParam._m0[28u].z, fma(_1198, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1197)) - _1172;
        float _1215 = inversesqrt(dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211)));
        float _1228 = ((_1215 * _1209) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1164 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1229 = ((_1215 * _1210) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1168 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1230 = ((_1215 * _1211) / cbModelParam._m0[34u].z) + ((((((_1172 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1254 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        float _1267 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1233.x + (-0.5));
        float _1269 = _1267 * (_1233.y + (-0.5));
        float _1270 = _1267 * (_1233.z + (-0.5));
        float _1277 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1240.x + (-0.5));
        float _1279 = _1277 * (_1240.y + (-0.5));
        float _1280 = _1277 * (_1240.z + (-0.5));
        float _1287 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1247.x + (-0.5));
        float _1289 = _1287 * (_1247.y + (-0.5));
        float _1290 = _1287 * (_1247.z + (-0.5));
        float _1297 = exp2((_1254.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1254.x + (-0.5));
        float _1299 = _1297 * (_1254.y + (-0.5));
        float _1300 = _1297 * (_1254.z + (-0.5));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1303 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1304 = _1268 * 0.5;
        float _1305 = _1278 * 0.5;
        float _1306 = _1288 * 0.5;
        float _1307 = dot(vec3(_1304, _1305, _1306), vec3(_1304, _1305, _1306));
        float _1312 = (_1307 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1307);
        float _1321 = (dot(vec3(_861, _862, _863), vec3(_1312 * _1304, _1312 * _1305, _1312 * _1306)) + 1.0) * 0.5;
        float _4112 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1331 = sqrt(((_1305 * _1305) + (_1304 * _1304)) + (_1306 * _1306)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _4123 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1333 = _1332 * 2.0;
        float _1337 = (1.0 - _1332) / (_1332 + 1.0);
        float _4134 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1347 = ((((1.0 - _1338) * (_1333 + 2.0)) * exp2(log2(isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_1333 + 1.0))) + _1338) * _1301;
        float _1348 = _1269 * 0.5;
        float _1349 = _1279 * 0.5;
        float _1350 = _1289 * 0.5;
        float _1351 = dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350));
        float _1356 = (_1351 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1351);
        float _1364 = (dot(vec3(_861, _862, _863), vec3(_1356 * _1348, _1356 * _1349, _1356 * _1350)) + 1.0) * 0.5;
        float _4145 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1373 = sqrt(((_1349 * _1349) + (_1348 * _1348)) + (_1350 * _1350)) / (_1302 + 9.9999997473787516355514526367188e-06);
        float _4156 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1375 = _1374 * 2.0;
        float _1379 = (1.0 - _1374) / (_1374 + 1.0);
        float _4167 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1389 = ((((1.0 - _1380) * (_1375 + 2.0)) * exp2(log2(isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_1375 + 1.0))) + _1380) * _1302;
        float _1390 = _1270 * 0.5;
        float _1391 = _1280 * 0.5;
        float _1392 = _1290 * 0.5;
        float _1393 = dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392));
        float _1398 = (_1393 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1393);
        float _1406 = (dot(vec3(_861, _862, _863), vec3(_1398 * _1390, _1398 * _1391, _1398 * _1392)) + 1.0) * 0.5;
        float _4178 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1415 = sqrt(((_1391 * _1391) + (_1390 * _1390)) + (_1392 * _1392)) / (_1303 + 9.9999997473787516355514526367188e-06);
        float _4189 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1417 = _1416 * 2.0;
        float _1421 = (1.0 - _1416) / (_1416 + 1.0);
        float _4200 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1431 = ((((1.0 - _1422) * (_1417 + 2.0)) * exp2(log2(isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_1417 + 1.0))) + _1422) * _1303;
        _1439 = _1270;
        _1441 = _1269;
        _1442 = _1268;
        _1443 = _1280;
        _1444 = _1279;
        _1445 = _1278;
        _1446 = _1290;
        _1447 = _1289;
        _1448 = _1288;
        _1449 = _1303;
        _1450 = _1302;
        _1451 = _1301;
        _1452 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)));
        _1453 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)));
        _1454 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)));
    }
    else
    {
        _1439 = _1440;
        _1441 = _1440;
        _1442 = _1440;
        _1443 = _1440;
        _1444 = _1440;
        _1445 = _1440;
        _1446 = _1440;
        _1447 = _1440;
        _1448 = _1440;
        _1449 = _1440;
        _1450 = _1440;
        _1451 = _1440;
        _1452 = 0.0;
        _1453 = 0.0;
        _1454 = 0.0;
    }
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1482 = fma(_1110, cbModelParam._m0[30u].z, fma(_1106, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1102));
        float _1486 = fma(_1110, cbModelParam._m0[31u].z, fma(_1106, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1102));
        float _1490 = fma(_1110, cbModelParam._m0[32u].z, fma(_1106, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1102));
        float _1513 = _1102 + _861;
        float _1514 = _1106 + _862;
        float _1515 = _1110 + _863;
        float _1525 = fma(_1515, cbModelParam._m0[30u].z, fma(_1514, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1513)) - _1482;
        float _1526 = fma(_1515, cbModelParam._m0[31u].z, fma(_1514, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1513)) - _1486;
        float _1527 = fma(_1515, cbModelParam._m0[32u].z, fma(_1514, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1513)) - _1490;
        float _1531 = inversesqrt(dot(vec3(_1525, _1526, _1527), vec3(_1525, _1526, _1527)));
        float _1544 = ((_1531 * _1525) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1482 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1545 = ((_1531 * _1526) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1486 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1546 = ((_1531 * _1527) / cbModelParam._m0[35u].z) + ((((((_1490 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1548 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1544, _1545, _1546), 0.0);
        vec4 _1555 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1544, _1545, _1546), 0.0);
        vec4 _1562 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1544, _1545, _1546), 0.0);
        vec4 _1569 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1544, _1545, _1546), 0.0);
        float _1581 = exp2((_1548.w + (-0.5)) * 20.0) * 2.0;
        float _1582 = _1581 * (_1548.x + (-0.5));
        float _1583 = _1581 * (_1548.y + (-0.5));
        float _1584 = _1581 * (_1548.z + (-0.5));
        float _1591 = exp2((_1555.w + (-0.5)) * 20.0) * 2.0;
        float _1592 = _1591 * (_1555.x + (-0.5));
        float _1593 = _1591 * (_1555.y + (-0.5));
        float _1594 = _1591 * (_1555.z + (-0.5));
        float _1601 = exp2((_1562.w + (-0.5)) * 20.0) * 2.0;
        float _1602 = _1601 * (_1562.x + (-0.5));
        float _1603 = _1601 * (_1562.y + (-0.5));
        float _1604 = _1601 * (_1562.z + (-0.5));
        float _1611 = exp2((_1569.w + (-0.5)) * 20.0) * 2.0;
        float _1612 = _1611 * (_1569.x + (-0.5));
        float _1613 = _1611 * (_1569.y + (-0.5));
        float _1614 = _1611 * (_1569.z + (-0.5));
        float _1615 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1616 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1617 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1618 = _1582 * 0.5;
        float _1619 = _1592 * 0.5;
        float _1620 = _1602 * 0.5;
        float _1621 = dot(vec3(_1618, _1619, _1620), vec3(_1618, _1619, _1620));
        float _1626 = (_1621 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1621);
        float _1634 = (dot(vec3(_861, _862, _863), vec3(_1626 * _1618, _1626 * _1619, _1626 * _1620)) + 1.0) * 0.5;
        float _4241 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1643 = sqrt(((_1619 * _1619) + (_1618 * _1618)) + (_1620 * _1620)) / (_1615 + 9.9999997473787516355514526367188e-06);
        float _4252 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _1645 = _1644 * 2.0;
        float _1649 = (1.0 - _1644) / (_1644 + 1.0);
        float _4263 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1650 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1659 = ((((1.0 - _1650) * (_1645 + 2.0)) * exp2(log2(isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_1645 + 1.0))) + _1650) * _1615;
        float _1660 = _1583 * 0.5;
        float _1661 = _1593 * 0.5;
        float _1662 = _1603 * 0.5;
        float _1663 = dot(vec3(_1660, _1661, _1662), vec3(_1660, _1661, _1662));
        float _1668 = (_1663 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1663);
        float _1676 = (dot(vec3(_861, _862, _863), vec3(_1668 * _1660, _1668 * _1661, _1668 * _1662)) + 1.0) * 0.5;
        float _4274 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1685 = sqrt(((_1661 * _1661) + (_1660 * _1660)) + (_1662 * _1662)) / (_1616 + 9.9999997473787516355514526367188e-06);
        float _4285 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _1687 = _1686 * 2.0;
        float _1691 = (1.0 - _1686) / (_1686 + 1.0);
        float _4296 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1692 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1701 = ((((1.0 - _1692) * (_1687 + 2.0)) * exp2(log2(isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (_1687 + 1.0))) + _1692) * _1616;
        float _1702 = _1584 * 0.5;
        float _1703 = _1594 * 0.5;
        float _1704 = _1604 * 0.5;
        float _1705 = dot(vec3(_1702, _1703, _1704), vec3(_1702, _1703, _1704));
        float _1710 = (_1705 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1705);
        float _1718 = (dot(vec3(_861, _862, _863), vec3(_1710 * _1702, _1710 * _1703, _1710 * _1704)) + 1.0) * 0.5;
        float _4307 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1727 = sqrt(((_1703 * _1703) + (_1702 * _1702)) + (_1704 * _1704)) / (_1617 + 9.9999997473787516355514526367188e-06);
        float _4318 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1728 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _1729 = _1728 * 2.0;
        float _1733 = (1.0 - _1728) / (_1728 + 1.0);
        float _4329 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1734 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _1743 = ((((1.0 - _1734) * (_1729 + 2.0)) * exp2(log2(isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (_1729 + 1.0))) + _1734) * _1617;
        _1751 = _1584;
        _1752 = _1583;
        _1753 = _1582;
        _1754 = _1594;
        _1755 = _1593;
        _1756 = _1592;
        _1757 = _1604;
        _1758 = _1603;
        _1759 = _1602;
        _1760 = _1617;
        _1761 = _1616;
        _1762 = _1615;
        _1763 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)));
        _1764 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)));
        _1765 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0)));
    }
    else
    {
        _1751 = _1440;
        _1752 = _1440;
        _1753 = _1440;
        _1754 = _1440;
        _1755 = _1440;
        _1756 = _1440;
        _1757 = _1440;
        _1758 = _1440;
        _1759 = _1440;
        _1760 = _1440;
        _1761 = _1440;
        _1762 = _1440;
        _1763 = 0.0;
        _1764 = 0.0;
        _1765 = 0.0;
    }
    float _1775 = (cbModelParam._m0[1u].x * (_1763 - _1452)) + _1452;
    float _1776 = (cbModelParam._m0[1u].x * (_1764 - _1453)) + _1453;
    float _1777 = (cbModelParam._m0[1u].x * (_1765 - _1454)) + _1454;
    float _1798 = fma(_1777, cbSceneParam._m0[89u].z, fma(_1776, cbSceneParam._m0[89u].y, _1775 * cbSceneParam._m0[89u].x));
    float _1801 = fma(_1777, cbSceneParam._m0[90u].z, fma(_1776, cbSceneParam._m0[90u].y, _1775 * cbSceneParam._m0[90u].x));
    float _1804 = fma(_1777, cbSceneParam._m0[91u].z, fma(_1776, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1775));
    float _1819 = _1046 * 0.5;
    float _1820 = _1047 * 0.5;
    float _1821 = _1048 * 0.5;
    float _1822 = dot(vec4(_1819, _1820, _1821, 1.0), vec4(_1753, _1756, _1759, _1762));
    float _1825 = dot(vec4(_1819, _1820, _1821, 1.0), vec4(_1752, _1755, _1758, _1761));
    float _1828 = dot(vec4(_1819, _1820, _1821, 1.0), vec4(_1751, _1754, _1757, _1760));
    float _1862;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1835 = dot(vec4(_1819, _1820, _1821, 1.0), vec4(_1439, _1443, _1446, _1449));
        float _1839 = dot(vec4(_1819, _1820, _1821, 1.0), vec4(_1441, _1444, _1447, _1450));
        float _1843 = dot(vec4(_1819, _1820, _1821, 1.0), vec4(_1442, _1445, _1448, _1451));
        float _1850 = dot(vec4(cbModelParam._m0[39u]), vec4(_1819, _1820, _1821, 1.0));
        _1862 = dot(vec3(isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0)), isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0)), isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1850) ? 0.0 : (isnan(0.0) ? _1850 : max(0.0, _1850))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1862 = 1.0;
    }
    float _1873;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1864 = dot(vec4(cbModelParam._m0[40u]), vec4(_1819, _1820, _1821, 1.0));
        _1873 = dot(vec3(isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0)), isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0)), isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1864) ? 0.0 : (isnan(0.0) ? _1864 : max(0.0, _1864))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1873 = 1.0;
    }
    float _1877 = (_1873 * cbModelParam._m0[1u].x) + (_1862 * (1.0 - cbModelParam._m0[1u].x));
    float _1887 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _864);
    float _1888 = isnan(_1887) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1887 : min(cbModelParam._m0[25u].z, _1887));
    float _1969;
    float _1971;
    float _1973;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1936 = fma(_1110, cbModelParam._m0[13u].z, fma(_1106, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1102)) + cbModelParam._m0[13u].w;
        float _1940 = fma(_1110, cbModelParam._m0[14u].z, fma(_1106, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1102)) + cbModelParam._m0[14u].w;
        float _1944 = fma(_1110, cbModelParam._m0[15u].z, fma(_1106, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1102)) + cbModelParam._m0[15u].w;
        float _1947 = fma(_1048, cbModelParam._m0[13u].z, fma(_1047, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1046));
        float _1950 = fma(_1048, cbModelParam._m0[14u].z, fma(_1047, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1046));
        float _1953 = fma(_1048, cbModelParam._m0[15u].z, fma(_1047, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1046));
        float _1981;
        if (_1947 > 0.0)
        {
            _1981 = abs((1.0 - _1936) / _1947);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1947 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1936 + 1.0) / _1947);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1981 = frontier_phi_17_15_ladder;
        }
        float _2205;
        if (_1950 > 0.0)
        {
            _2205 = abs((1.0 - _1940) / _1950);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1950 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1940 + 1.0) / _1950);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2205 = frontier_phi_26_22_ladder;
        }
        float _2462;
        if (_1953 > 0.0)
        {
            _2462 = abs((1.0 - _1944) / _1953);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1953 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1944 + 1.0) / _1953);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2462 = frontier_phi_38_33_ladder;
        }
        float _2464 = isnan(_2205) ? _1981 : (isnan(_1981) ? _2205 : min(_1981, _2205));
        float _2465 = isnan(_2462) ? _2464 : (isnan(_2464) ? _2462 : min(_2464, _2462));
        float _2469 = (_2465 * _1947) + _1936;
        float _2470 = (_2465 * _1950) + _1940;
        float _2471 = (_2465 * _1953) + _1944;
        float _2472 = _2465 * 9.9999997473787516355514526367188e-05;
        float _2474 = (-1.0) - _2472;
        float _2476 = _2472 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2471 > _2476) || ((_2471 < _2474) || ((_2470 > _2476) || ((_2470 < _2474) || ((_2469 < _2474) || (_2469 > _2476))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2599 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2471, cbModelParam._m0[9u].z, fma(_2470, cbModelParam._m0[9u].y, _2469 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2471, cbModelParam._m0[10u].z, fma(_2470, cbModelParam._m0[10u].y, _2469 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2471, cbModelParam._m0[11u].z, fma(_2470, cbModelParam._m0[11u].y, _2469 * cbModelParam._m0[11u].x))), _1888);
            frontier_phi_16_38_ladder = _2599.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2599.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2599.x * cbModelParam._m0[1u].y;
        }
        _1969 = frontier_phi_16_38_ladder_2;
        _1971 = frontier_phi_16_38_ladder_1;
        _1973 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1957 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1046, _1047, _1048), _1888);
        _1969 = _1957.x * cbModelParam._m0[1u].y;
        _1971 = _1957.y * cbModelParam._m0[1u].y;
        _1973 = _1957.z * cbModelParam._m0[1u].y;
    }
    float _1977 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _864);
    float _1978 = isnan(_1977) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1977 : min(cbModelParam._m0[25u].w, _1977));
    float _2068;
    float _2070;
    float _2072;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2032 = fma(_1110, cbModelParam._m0[21u].z, fma(_1106, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1102)) + cbModelParam._m0[21u].w;
        float _2036 = fma(_1110, cbModelParam._m0[22u].z, fma(_1106, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1102)) + cbModelParam._m0[22u].w;
        float _2040 = fma(_1110, cbModelParam._m0[23u].z, fma(_1106, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1102)) + cbModelParam._m0[23u].w;
        float _2043 = fma(_1048, cbModelParam._m0[21u].z, fma(_1047, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1046));
        float _2046 = fma(_1048, cbModelParam._m0[22u].z, fma(_1047, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1046));
        float _2049 = fma(_1048, cbModelParam._m0[23u].z, fma(_1047, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1046));
        float _2210;
        if (_2043 > 0.0)
        {
            _2210 = abs((1.0 - _2032) / _2043);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2043 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2032 + 1.0) / _2043);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2210 = frontier_phi_28_24_ladder;
        }
        float _2489;
        if (_2046 > 0.0)
        {
            _2489 = abs((1.0 - _2036) / _2046);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2046 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2036 + 1.0) / _2046);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2489 = frontier_phi_40_35_ladder;
        }
        float _2702;
        if (_2049 > 0.0)
        {
            _2702 = abs((1.0 - _2040) / _2049);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2049 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2040 + 1.0) / _2049);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2702 = frontier_phi_49_46_ladder;
        }
        float _2704 = isnan(_2489) ? _2210 : (isnan(_2210) ? _2489 : min(_2210, _2489));
        float _2705 = isnan(_2702) ? _2704 : (isnan(_2704) ? _2702 : min(_2704, _2702));
        float _2709 = (_2705 * _2043) + _2032;
        float _2710 = (_2705 * _2046) + _2036;
        float _2711 = (_2705 * _2049) + _2040;
        float _2712 = _2705 * 9.9999997473787516355514526367188e-05;
        float _2713 = (-1.0) - _2712;
        float _2715 = _2712 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2711 > _2715) || ((_2711 < _2713) || ((_2710 > _2715) || ((_2710 < _2713) || ((_2709 < _2713) || (_2709 > _2715))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2910 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2711, cbModelParam._m0[17u].z, fma(_2710, cbModelParam._m0[17u].y, _2709 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2711, cbModelParam._m0[18u].z, fma(_2710, cbModelParam._m0[18u].y, _2709 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2711, cbModelParam._m0[19u].z, fma(_2710, cbModelParam._m0[19u].y, _2709 * cbModelParam._m0[19u].x))), _1978);
            frontier_phi_25_49_ladder = _2910.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2910.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2910.x * cbModelParam._m0[1u].z;
        }
        _2068 = frontier_phi_25_49_ladder_2;
        _2070 = frontier_phi_25_49_ladder_1;
        _2072 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2052 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1046, _1047, _1048), _1978);
        _2068 = _2052.x * cbModelParam._m0[1u].z;
        _2070 = _2052.y * cbModelParam._m0[1u].z;
        _2072 = _2052.z * cbModelParam._m0[1u].z;
    }
    float _2085 = (((_1073 * _1022) + _1074) * _1038) * ((cbModelParam._m0[1u].w * (_2068 - _1969)) + _1969);
    float _2087 = (((_1073 * _1024) + _1074) * _1038) * ((cbModelParam._m0[1u].w * (_2070 - _1971)) + _1971);
    float _2089 = (((_1073 * _1025) + _1074) * _1038) * ((cbModelParam._m0[1u].w * (_2072 - _1973)) + _1973);
    float _2092 = fma(_2089, cbSceneParam._m0[89u].z, fma(_2087, cbSceneParam._m0[89u].y, _2085 * cbSceneParam._m0[89u].x));
    float _2095 = fma(_2089, cbSceneParam._m0[90u].z, fma(_2087, cbSceneParam._m0[90u].y, _2085 * cbSceneParam._m0[90u].x));
    float _2098 = fma(_2089, cbSceneParam._m0[91u].z, fma(_2087, cbSceneParam._m0[91u].y, _2085 * cbSceneParam._m0[91u].x));
    vec4 _2106 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_960, _961));
    float _2108 = _2106.w;
    float _2120 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2108);
    float _2121 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2108);
    float _2122 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2108);
    uvec4 _2126 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2128 = _2126.x * 14u;
    uint _2129 = _2128 + 13u;
    float _2136 = _1038 + (-1.0);
    float _2141 = (cbLight._m0[_2129].x * _2136) + 1.0;
    float _2142 = (cbLight._m0[_2129].y * _2136) + 1.0;
    float _2143 = (cbLight._m0[_2129].z * _2136) + 1.0;
    float _2144 = (cbLight._m0[_2129].w * _2136) + 1.0;
    uint _2145 = _2128 + 5u;
    float _2151 = isnan(1.0) ? _2142 : (isnan(_2142) ? 1.0 : min(_2142, 1.0));
    uint _2155 = _2128 + 4u;
    float _2164 = isnan(1.0) ? _2141 : (isnan(_2141) ? 1.0 : min(_2141, 1.0));
    uint _2168 = _2128 | 1u;
    float _2179 = dot(vec3(cbLight._m0[_2128].xyz), vec3(_861, _862, _863));
    float _2182 = dot(vec3(cbLight._m0[_2168].xyz), vec3(_861, _862, _863));
    float _4465 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _4476 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2187 = (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * 0.3183098733425140380859375;
    float _2189 = (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * 0.3183098733425140380859375;
    float _2196 = ((cbLight._m0[_2145].x * _2151) * _2189) + (((cbLight._m0[_2155].x * _2120) * _2164) * _2187);
    float _2197 = ((_2151 * cbLight._m0[_2145].y) * _2189) + (((cbLight._m0[_2155].y * _2121) * _2164) * _2187);
    float _2198 = ((_2151 * cbLight._m0[_2145].z) * _2189) + (((cbLight._m0[_2155].z * _2122) * _2164) * _2187);
    uvec4 _2202 = floatBitsToUint(cbLight._m0[_2128 + 12u]);
    bool _2204 = _2202.x == 0u;
    float _2215;
    float _2217;
    float _2219;
    if (_2204)
    {
        _2215 = _2196;
        _2217 = _2197;
        _2219 = _2198;
    }
    else
    {
        uint _2223 = _2128 + 6u;
        float _2239 = (dot(vec3(cbLight._m0[_2128 + 2u].xyz), vec3(_861, _862, _863)) * 0.5) + 0.5;
        float _2240 = _2239 * _2239;
        float _4487 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2241 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _2242 = isnan(1.0) ? _2143 : (isnan(_2143) ? 1.0 : min(_2143, 1.0));
        _2215 = (((cbLight._m0[_2223].x * 0.3183098733425140380859375) * _2241) * _2242) + _2196;
        _2217 = (((cbLight._m0[_2223].y * 0.3183098733425140380859375) * _2241) * _2242) + _2197;
        _2219 = (((cbLight._m0[_2223].z * 0.3183098733425140380859375) * _2241) * _2242) + _2198;
    }
    bool _2222 = _2202.y == 0u;
    float _2260;
    float _2262;
    float _2264;
    if (_2222)
    {
        _2260 = _2215;
        _2262 = _2217;
        _2264 = _2219;
    }
    else
    {
        uint _2433 = _2128 + 7u;
        float _2449 = (dot(vec3(cbLight._m0[_2128 + 3u].xyz), vec3(_861, _862, _863)) * 0.5) + 0.5;
        float _2450 = _2449 * _2449;
        float _4503 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2451 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _2452 = isnan(1.0) ? _2144 : (isnan(_2144) ? 1.0 : min(_2144, 1.0));
        _2260 = (((cbLight._m0[_2433].x * 0.3183098733425140380859375) * _2451) * _2452) + _2215;
        _2262 = (((cbLight._m0[_2433].y * 0.3183098733425140380859375) * _2451) * _2452) + _2217;
        _2264 = (((cbLight._m0[_2433].z * 0.3183098733425140380859375) * _2451) * _2452) + _2219;
    }
    uint _2267 = _2128 + 8u;
    float _2280 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2128].w)) * _864) * 0.949999988079071044921875);
    float _2281 = _2280 * _2280;
    float _2282 = cbLight._m0[_2128].x + _940;
    float _2283 = cbLight._m0[_2128].y + _941;
    float _2284 = cbLight._m0[_2128].z + _942;
    float _2288 = inversesqrt(dot(vec3(_2282, _2283, _2284), vec3(_2282, _2283, _2284)));
    float _2289 = _2288 * _2282;
    float _2290 = _2288 * _2283;
    float _2291 = _2288 * _2284;
    float _2292 = dot(vec3(_861, _862, _863), vec3(cbLight._m0[_2128].xyz));
    float _4519 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2295 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
    float _4530 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    float _2296 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
    float _2297 = dot(vec3(_861, _862, _863), vec3(_2289, _2290, _2291));
    float _4541 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
    float _2300 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
    float _2301 = dot(vec3(cbLight._m0[_2128].xyz), vec3(_2289, _2290, _2291));
    float _4552 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2305 = _2281 * _2281;
    float _2309 = ((_2300 * _2300) * (_2305 + (-1.0))) + 1.0;
    float _2317 = exp2(log2(1.0 - (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0)))) * 5.0);
    float _2318 = 0.959999978542327880859375 - _1019;
    float _2320 = 0.959999978542327880859375 - _1020;
    float _2321 = 0.959999978542327880859375 - _1021;
    float _2328 = 1.0 - _2281;
    float _2339 = (0.5 / (((_2296 * ((_2295 * _2328) + _2281)) + 9.9999999392252902907785028219223e-09) + (((_2296 * _2328) + _2281) * _2295))) * _2295;
    float _4563 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2341 = (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0))) * (_2305 / ((_2309 * _2309) * 3.141590118408203125));
    uint _2355 = _2128 + 9u;
    float _2366 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2168].w)) * _864) * 0.949999988079071044921875);
    float _2367 = _2366 * _2366;
    float _2368 = cbLight._m0[_2168].x + _940;
    float _2369 = cbLight._m0[_2168].y + _941;
    float _2370 = cbLight._m0[_2168].z + _942;
    float _2374 = inversesqrt(dot(vec3(_2368, _2369, _2370), vec3(_2368, _2369, _2370)));
    float _2375 = _2374 * _2368;
    float _2376 = _2374 * _2369;
    float _2377 = _2374 * _2370;
    float _2378 = dot(vec3(_861, _862, _863), vec3(cbLight._m0[_2168].xyz));
    float _4574 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
    float _2381 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
    float _2382 = dot(vec3(_861, _862, _863), vec3(_2375, _2376, _2377));
    float _4585 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2385 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
    float _2386 = dot(vec3(cbLight._m0[_2168].xyz), vec3(_2375, _2376, _2377));
    float _4596 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2390 = _2367 * _2367;
    float _2394 = ((_2385 * _2385) * (_2390 + (-1.0))) + 1.0;
    float _2401 = exp2(log2(1.0 - (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0)))) * 5.0);
    float _2408 = 1.0 - _2367;
    float _2418 = (0.5 / (((_2296 * ((_2381 * _2408) + _2367)) + 9.9999999392252902907785028219223e-09) + (((_2296 * _2408) + _2367) * _2381))) * _2381;
    float _4607 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _2420 = (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * (_2390 / ((_2394 * _2394) * 3.141590118408203125));
    float _2430 = (((((_2401 * _2318) + _1022) * cbLight._m0[_2355].x) * _2420) * _2151) + ((((cbLight._m0[_2267].x * _2120) * ((_2317 * _2318) + _1022)) * _2341) * _2164);
    float _2431 = (((((_2401 * _2320) + _1024) * cbLight._m0[_2355].y) * _2420) * _2151) + ((((cbLight._m0[_2267].y * _2121) * ((_2317 * _2320) + _1024)) * _2341) * _2164);
    float _2432 = (((((_2401 * _2321) + _1025) * cbLight._m0[_2355].z) * _2420) * _2151) + ((((cbLight._m0[_2267].z * _2122) * ((_2317 * _2321) + _1025)) * _2341) * _2164);
    float _2494;
    float _2496;
    float _2498;
    if (_2204)
    {
        _2494 = _2430;
        _2496 = _2431;
        _2498 = _2432;
    }
    else
    {
        uint _2500 = _2128 + 2u;
        uint _2504 = _2128 + 10u;
        float _2518 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2500].w)) * _864) * 0.949999988079071044921875);
        float _2519 = _2518 * _2518;
        float _2520 = cbLight._m0[_2500].x + _940;
        float _2521 = cbLight._m0[_2500].y + _941;
        float _2522 = cbLight._m0[_2500].z + _942;
        float _2526 = inversesqrt(dot(vec3(_2520, _2521, _2522), vec3(_2520, _2521, _2522)));
        float _2527 = _2526 * _2520;
        float _2528 = _2526 * _2521;
        float _2529 = _2526 * _2522;
        float _2530 = dot(vec3(_861, _862, _863), vec3(cbLight._m0[_2500].xyz));
        float _4618 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        float _2533 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
        float _2534 = dot(vec3(_861, _862, _863), vec3(_2527, _2528, _2529));
        float _4629 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2537 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
        float _2538 = dot(vec3(cbLight._m0[_2500].xyz), vec3(_2527, _2528, _2529));
        float _4640 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2542 = _2519 * _2519;
        float _2546 = ((_2537 * _2537) * (_2542 + (-1.0))) + 1.0;
        float _2553 = exp2(log2(1.0 - (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0)))) * 5.0);
        float _2560 = 1.0 - _2519;
        float _2570 = (0.5 / (((_2296 * ((_2533 * _2560) + _2519)) + 9.9999999392252902907785028219223e-09) + (((_2296 * _2560) + _2519) * _2533))) * _2533;
        float _4651 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2572 = (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0))) * (_2542 / ((_2546 * _2546) * 3.141590118408203125));
        float _2573 = isnan(1.0) ? _2143 : (isnan(_2143) ? 1.0 : min(_2143, 1.0));
        _2494 = (((((_2553 * _2318) + _1022) * cbLight._m0[_2504].x) * _2572) * _2573) + _2430;
        _2496 = (((((_2553 * _2320) + _1024) * cbLight._m0[_2504].y) * _2572) * _2573) + _2431;
        _2498 = (((((_2553 * _2321) + _1025) * cbLight._m0[_2504].z) * _2572) * _2573) + _2432;
    }
    float _2608;
    float _2610;
    float _2612;
    if (_2222)
    {
        _2608 = _2494;
        _2610 = _2496;
        _2612 = _2498;
    }
    else
    {
        uint _2619 = _2128 + 3u;
        uint _2623 = _2128 + 11u;
        float _2637 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2619].w)) * _864) * 0.949999988079071044921875);
        float _2638 = _2637 * _2637;
        float _2639 = cbLight._m0[_2619].x + _940;
        float _2640 = cbLight._m0[_2619].y + _941;
        float _2641 = cbLight._m0[_2619].z + _942;
        float _2645 = inversesqrt(dot(vec3(_2639, _2640, _2641), vec3(_2639, _2640, _2641)));
        float _2646 = _2645 * _2639;
        float _2647 = _2645 * _2640;
        float _2648 = _2645 * _2641;
        float _2649 = dot(vec3(_861, _862, _863), vec3(cbLight._m0[_2619].xyz));
        float _4667 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        float _2652 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
        float _2653 = dot(vec3(_861, _862, _863), vec3(_2646, _2647, _2648));
        float _4678 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        float _2656 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
        float _2657 = dot(vec3(cbLight._m0[_2619].xyz), vec3(_2646, _2647, _2648));
        float _4689 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
        float _2661 = _2638 * _2638;
        float _2665 = ((_2656 * _2656) * (_2661 + (-1.0))) + 1.0;
        float _2672 = exp2(log2(1.0 - (isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0)))) * 5.0);
        float _2679 = 1.0 - _2638;
        float _2689 = (0.5 / (((_2296 * ((_2652 * _2679) + _2638)) + 9.9999999392252902907785028219223e-09) + (((_2296 * _2679) + _2638) * _2652))) * _2652;
        float _4700 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
        float _2691 = (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0))) * (_2661 / ((_2665 * _2665) * 3.141590118408203125));
        float _2692 = isnan(1.0) ? _2144 : (isnan(_2144) ? 1.0 : min(_2144, 1.0));
        _2608 = (((((_2672 * _2318) + _1022) * cbLight._m0[_2623].x) * _2691) * _2692) + _2494;
        _2610 = (((((_2672 * _2320) + _1024) * cbLight._m0[_2623].y) * _2691) * _2692) + _2496;
        _2612 = (((((_2672 * _2321) + _1025) * cbLight._m0[_2623].z) * _2691) * _2692) + _2498;
    }
    float _2827;
    float _2829;
    float _2831;
    float _2833;
    float _2835;
    float _2837;
    if (_2126.y == 0u)
    {
        float _2767 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2768 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2767;
        float _2769 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2767;
        float _2770 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2767;
        uvec4 _2782 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2783 = _2782.x;
        uint _2794 = uint((float(_2782.y) * floor(float(uint(cbSceneParam._m0[85u].y * _961) / _2783))) + floor(float(uint(cbSceneParam._m0[85u].x * _960) / _2783)));
        float _2804 = (log2(_2770 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2805 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
        uint _2808 = uint(isnan(14.0) ? _2805 : (isnan(_2805) ? 14.0 : min(_2805, 14.0)));
        uvec4 _2813 = texelFetch(g_lightClusterGridBuffer, int(((_2808 << 2u) + (_2794 << 6u)) >> 2u));
        uint _2814 = _2813.x;
        uint _2815 = _2782.z;
        float _2915;
        float _2917;
        float _2919;
        float _2921;
        float _2923;
        float _2925;
        if (((((1u << ((_2815 >> 4u) & 15u)) + 4294967295u) & _2814) == 0u) || ((_2815 & 240u) == 0u))
        {
            _2915 = 0.0;
            _2917 = 0.0;
            _2919 = 0.0;
            _2921 = 0.0;
            _2923 = 0.0;
            _2925 = 0.0;
        }
        else
        {
            float _2916;
            float _2918;
            float _2920;
            float _2922;
            float _2924;
            float _2926;
            float _3067 = 0.0;
            float _3068 = 0.0;
            float _3069 = 0.0;
            float _3070 = 0.0;
            float _3071 = 0.0;
            float _3072 = 0.0;
            uint _3073 = 0u;
            uint _3082;
            bool _3083;
            for (;;)
            {
                _3082 = texelFetch(g_lightClassification, int((((_2808 << 5u) + (_2794 << 9u)) + (_3073 << 2u)) >> 2u)).x;
                _3083 = _3082 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3083)
                {
                    frontier_phi_66_pred = _3067;
                    frontier_phi_66_pred_1 = _3072;
                    frontier_phi_66_pred_2 = _3071;
                    frontier_phi_66_pred_3 = _3070;
                    frontier_phi_66_pred_4 = _3069;
                    frontier_phi_66_pred_5 = _3068;
                }
                else
                {
                    float _3212;
                    float _3213;
                    float _3214;
                    float _3215;
                    float _3216;
                    float _3217;
                    uint _3218;
                    _3212 = _3067;
                    _3213 = _3068;
                    _3214 = _3069;
                    _3215 = _3070;
                    _3216 = _3071;
                    _3217 = _3072;
                    _3218 = _3082;
                    float _3139;
                    float _3140;
                    float _3141;
                    float _3142;
                    float _3143;
                    float _3144;
                    for (;;)
                    {
                        uint _3222 = uint(findLSB(_3218)) + (_3073 << 5u);
                        uint _3219 = (_3218 + 4294967295u) & _3218;
                        uint _3224 = _3222 * 48u;
                        vec4 _3238 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3224)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 3u)).x));
                        uint _3244 = (_3222 * 48u) + 4u;
                        vec4 _3257 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3244)).x, texelFetch(g_PointLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3244 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3244 + 3u)).x));
                        uint _3263 = (_3222 * 48u) + 8u;
                        vec3 _3274 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3263)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 2u)).x));
                        float _3278 = _3238.x - _2768;
                        float _3279 = _3238.y - _2769;
                        float _3280 = _3238.z - _2770;
                        float _3281 = dot(vec3(_3278, _3279, _3280), vec3(_3278, _3279, _3280));
                        float _3284 = inversesqrt(_3281);
                        float _3285 = _3284 * _3278;
                        float _3286 = _3284 * _3279;
                        float _3287 = _3284 * _3280;
                        float _3288 = dot(vec3(_979, _982, _985), vec3(_3285, _3286, _3287));
                        float _3293 = 1.0 - (_3281 * _3238.w);
                        float _4726 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                        float _3294 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                        float _3295 = sqrt(_3281) * _3257.w;
                        float _3298 = 1.39999997615814208984375 / (_3295 + 1.39999997615814208984375);
                        float _3299 = _3298 * _3298;
                        float _3302 = ((1.0 - _3299) * _3288) + _3299;
                        float _3305 = _3295 * _3295;
                        float _3309 = ((isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0))) * _3294) / ((_3305 * 0.699999988079071044921875) + 1.0);
                        float _3313 = (-0.0) - _2768;
                        float _3314 = (-0.0) - _2769;
                        float _3315 = (-0.0) - _2770;
                        float _3319 = inversesqrt(dot(vec3(_3313, _3314, _3315), vec3(_3313, _3314, _3315)));
                        float _3320 = _3319 * _3313;
                        float _3321 = _3319 * _3314;
                        float _3322 = _3319 * _3315;
                        float _3330 = exp2(log2(1.0 / ((_3305 * 3.5) + 5.0)) * 0.25);
                        float _3331 = 1.0 - _1054;
                        float _3338 = sqrt(1.0 - ((1.0 - (_3331 * _3331)) * (1.0 - (_3330 * _3330))));
                        float _3339 = _3338 * _3338;
                        float _3340 = _3339 * _3339;
                        float _3341 = _3320 + _3285;
                        float _3342 = _3321 + _3286;
                        float _3343 = _3322 + _3287;
                        float _3347 = inversesqrt(dot(vec3(_3341, _3342, _3343), vec3(_3341, _3342, _3343)));
                        float _3351 = dot(vec3(_979, _982, _985), vec3(_3320, _3321, _3322));
                        float _4742 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                        float _3354 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
                        float _3355 = dot(vec3(_979, _982, _985), vec3(_3347 * _3341, _3347 * _3342, _3347 * _3343));
                        float _4753 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                        float _3358 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
                        float _3362 = ((_3358 * _3358) * (_3340 + (-1.0))) + 1.0;
                        float _3363 = _3298 * _3339;
                        float _3364 = _3363 * _3363;
                        float _3367 = ((1.0 - _3364) * _3288) + _3364;
                        float _4764 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                        float _3368 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
                        float _3369 = 1.0 - _3339;
                        float _3379 = (0.5 / (((_3368 * ((_3354 * _3369) + _3339)) + 9.9999999392252902907785028219223e-09) + (((_3368 * _3369) + _3339) * _3354))) * _3368;
                        float _4775 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                        float _3390 = (((_3340 * 3.1415927410125732421875) * (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0)))) / ((_3362 * _3362) * ((_3305 * 2.1991131305694580078125) + 3.141590118408203125))) * _3294;
                        _3142 = (_3309 * _3257.x) + _3215;
                        _3143 = (_3309 * _3257.y) + _3216;
                        _3144 = (_3309 * _3257.z) + _3217;
                        _3139 = (_3390 * _3274.x) + _3212;
                        _3140 = (_3390 * _3274.y) + _3213;
                        _3141 = (_3390 * _3274.z) + _3214;
                        if (_3219 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3212 = _3139;
                            _3213 = _3140;
                            _3214 = _3141;
                            _3215 = _3142;
                            _3216 = _3143;
                            _3217 = _3144;
                            _3218 = _3219;
                        }
                    }
                    frontier_phi_66_pred = _3139;
                    frontier_phi_66_pred_1 = _3144;
                    frontier_phi_66_pred_2 = _3143;
                    frontier_phi_66_pred_3 = _3142;
                    frontier_phi_66_pred_4 = _3141;
                    frontier_phi_66_pred_5 = _3140;
                }
                _2916 = frontier_phi_66_pred;
                _2926 = frontier_phi_66_pred_1;
                _2924 = frontier_phi_66_pred_2;
                _2922 = frontier_phi_66_pred_3;
                _2920 = frontier_phi_66_pred_4;
                _2918 = frontier_phi_66_pred_5;
                uint _3074 = _3073 + 1u;
                if (_3074 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3067 = _2916;
                    _3068 = _2918;
                    _3069 = _2920;
                    _3070 = _2922;
                    _3071 = _2924;
                    _3072 = _2926;
                    _3073 = _3074;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2915 = _2916;
            _2917 = _2918;
            _2919 = _2920;
            _2921 = _2922;
            _2923 = _2924;
            _2925 = _2926;
        }
        uvec4 _2929 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2930 = _2929.z;
        uint _2932 = (_2930 >> 8u) & 15u;
        float _3035;
        float _3037;
        float _3039;
        float _3041;
        float _3043;
        float _3045;
        if (((4294967295u << _2932) & _2814) == 0u)
        {
            _3035 = _2915;
            _3037 = _2917;
            _3039 = _2919;
            _3041 = _2921;
            _3043 = _2923;
            _3045 = _2925;
        }
        else
        {
            float _3060 = inversesqrt(dot(vec3(_2768, _2769, _2770), vec3(_2768, _2769, _2770)));
            float _3061 = _3060 * _2768;
            float _3062 = _3060 * _2769;
            float _3063 = _3060 * _2770;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2932 < ((_2930 >> 12u) & 15u))
            {
                float _3036;
                float _3038;
                float _3040;
                float _3042;
                float _3044;
                float _3046;
                float _3195 = _2915;
                float _3196 = _2917;
                float _3197 = _2919;
                float _3198 = _2921;
                float _3199 = _2923;
                float _3200 = _2925;
                uint _3201 = _2932;
                uint _3210;
                bool _3211;
                for (;;)
                {
                    _3210 = texelFetch(g_lightClassification, int((((_2808 << 5u) + (_2794 << 9u)) + (_3201 << 2u)) >> 2u)).x;
                    _3211 = _3210 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3211)
                    {
                        frontier_phi_77_pred = _3200;
                        frontier_phi_77_pred_1 = _3199;
                        frontier_phi_77_pred_2 = _3198;
                        frontier_phi_77_pred_3 = _3197;
                        frontier_phi_77_pred_4 = _3196;
                        frontier_phi_77_pred_5 = _3195;
                    }
                    else
                    {
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3408;
                        float _3409;
                        float _3697;
                        float _3698;
                        float _3699;
                        float _3700;
                        float _3701;
                        float _3702;
                        float _3417 = _3195;
                        float _3418 = _3196;
                        float _3419 = _3197;
                        float _3420 = _3198;
                        float _3421 = _3199;
                        float _3422 = _3200;
                        uint _3423 = _3210;
                        uint _3424;
                        vec4 _3449;
                        float _3450;
                        vec4 _3465;
                        vec3 _3477;
                        vec4 _3492;
                        vec4 _3507;
                        float _3553;
                        bool _3554;
                        for (;;)
                        {
                            uint _3434 = ((_3201 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3423));
                            _3424 = (_3423 + 4294967295u) & _3423;
                            uint _3436 = _3434 * 40u;
                            _3449 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3436)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 3u)).x));
                            _3450 = _3449.w;
                            uint _3452 = (_3434 * 40u) + 4u;
                            _3465 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3452)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 3u)).x));
                            uint _3467 = (_3434 * 40u) + 8u;
                            _3477 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3467)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 2u)).x));
                            uint _3479 = (_3434 * 40u) + 16u;
                            _3492 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 3u)).x));
                            uint _3494 = (_3434 * 40u) + 20u;
                            _3507 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3494)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 3u)).x));
                            uint _3509 = (_3434 * 40u) + 24u;
                            vec4 _3522 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3509)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 3u)).x));
                            uint _3528 = (_3434 * 40u) + 28u;
                            vec4 _3541 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3528)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 3u)).x));
                            _3553 = fma(_2770, _3541.z, fma(_2769, _3541.y, _3541.x * _2768)) + _3541.w;
                            _3554 = !((fma(_2770, _3522.z, fma(_2769, _3522.y, _3522.x * _2768)) + _3522.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3554)
                            {
                                float _3581 = _3449.x - _2768;
                                float _3582 = _3449.y - _2769;
                                float _3583 = _3449.z - _2770;
                                float _3584 = dot(vec3(_3581, _3582, _3583), vec3(_3581, _3582, _3583));
                                float _3587 = inversesqrt(_3584);
                                float _3588 = _3587 * _3581;
                                float _3589 = _3587 * _3582;
                                float _3590 = _3587 * _3583;
                                float _3594 = 1.0 - (_3584 / (_3450 * _3450));
                                float _4786 = isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0));
                                float _3595 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
                                float _3599 = sqrt(_3584) * _3465.w;
                                float _3601 = 1.39999997615814208984375 / (_3599 + 1.39999997615814208984375);
                                float _3602 = _3601 * _3601;
                                float _3605 = ((1.0 - _3602) * dot(vec3(_3588, _3589, _3590), vec3(_979, _982, _985))) + _3602;
                                float _3608 = _3599 * _3599;
                                float _3612 = (fma(_2770, _3492.z, fma(_2769, _3492.y, _3492.x * _2768)) + _3492.w) / _3553;
                                float _3613 = (fma(_2770, _3507.z, fma(_2769, _3507.y, _3507.x * _2768)) + _3507.w) / _3553;
                                float _3617 = 1.0 - dot(vec2(_3612, _3613), vec2(_3612, _3613));
                                float _4802 = isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0));
                                float _3618 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
                                float _3619 = _3618 * (((isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0))) * _3595) / ((_3608 * 0.699999988079071044921875) + 1.0));
                                float _3631 = exp2(log2(1.0 / ((_3608 * 3.5) + 5.0)) * 0.25);
                                float _3632 = 1.0 - _1054;
                                float _3639 = sqrt(1.0 - ((1.0 - (_3632 * _3632)) * (1.0 - (_3631 * _3631))));
                                float _3640 = _3639 * _3639;
                                float _3641 = _3640 * _3640;
                                float _3642 = _3588 - _3061;
                                float _3643 = _3589 - _3062;
                                float _3644 = _3590 - _3063;
                                float _3648 = inversesqrt(dot(vec3(_3642, _3643, _3644), vec3(_3642, _3643, _3644)));
                                float _3652 = dot(vec3(_979, _982, _985), vec3((-0.0) - _3061, (-0.0) - _3062, (-0.0) - _3063));
                                float _4813 = isnan(0.0) ? _3652 : (isnan(_3652) ? 0.0 : max(_3652, 0.0));
                                float _3655 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
                                float _3656 = dot(vec3(_979, _982, _985), vec3(_3648 * _3642, _3648 * _3643, _3648 * _3644));
                                float _4824 = isnan(0.0) ? _3656 : (isnan(_3656) ? 0.0 : max(_3656, 0.0));
                                float _3659 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
                                float _3663 = ((_3659 * _3659) * (_3641 + (-1.0))) + 1.0;
                                float _3664 = _3601 * _3640;
                                float _3665 = _3664 * _3664;
                                float _3671 = ((1.0 - _3665) * dot(vec3(_979, _982, _985), vec3(_3588, _3589, _3590))) + _3665;
                                float _4835 = isnan(0.0) ? _3671 : (isnan(_3671) ? 0.0 : max(_3671, 0.0));
                                float _3672 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
                                float _3673 = 1.0 - _3640;
                                float _3683 = (0.5 / (((_3672 * ((_3655 * _3673) + _3640)) + 9.9999999392252902907785028219223e-09) + (((_3672 * _3673) + _3640) * _3655))) * _3672;
                                float _4846 = isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0));
                                float _3693 = (_3618 * _3595) * (((_3641 * 3.1415927410125732421875) * (isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0)))) / ((_3663 * _3663) * ((_3608 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3619 * _3465.y;
                                frontier_phi_83_pred_1 = _3619 * _3465.x;
                                frontier_phi_83_pred_2 = _3693 * _3477.z;
                                frontier_phi_83_pred_3 = _3693 * _3477.y;
                                frontier_phi_83_pred_4 = _3693 * _3477.x;
                                frontier_phi_83_pred_5 = _3619 * _3465.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3701 = frontier_phi_83_pred;
                            _3700 = frontier_phi_83_pred_1;
                            _3699 = frontier_phi_83_pred_2;
                            _3698 = frontier_phi_83_pred_3;
                            _3697 = frontier_phi_83_pred_4;
                            _3702 = frontier_phi_83_pred_5;
                            _3407 = _3700 + _3420;
                            _3408 = _3701 + _3421;
                            _3409 = _3702 + _3422;
                            _3404 = _3697 + _3417;
                            _3405 = _3698 + _3418;
                            _3406 = _3699 + _3419;
                            if (_3424 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3417 = _3404;
                                _3418 = _3405;
                                _3419 = _3406;
                                _3420 = _3407;
                                _3421 = _3408;
                                _3422 = _3409;
                                _3423 = _3424;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3409;
                        frontier_phi_77_pred_1 = _3408;
                        frontier_phi_77_pred_2 = _3407;
                        frontier_phi_77_pred_3 = _3406;
                        frontier_phi_77_pred_4 = _3405;
                        frontier_phi_77_pred_5 = _3404;
                    }
                    _3046 = frontier_phi_77_pred;
                    _3044 = frontier_phi_77_pred_1;
                    _3042 = frontier_phi_77_pred_2;
                    _3040 = frontier_phi_77_pred_3;
                    _3038 = frontier_phi_77_pred_4;
                    _3036 = frontier_phi_77_pred_5;
                    uint _3202 = _3201 + 1u;
                    if (_3202 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3195 = _3036;
                        _3196 = _3038;
                        _3197 = _3040;
                        _3198 = _3042;
                        _3199 = _3044;
                        _3200 = _3046;
                        _3201 = _3202;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3040;
                frontier_phi_58_59_ladder_1 = _3046;
                frontier_phi_58_59_ladder_2 = _3044;
                frontier_phi_58_59_ladder_3 = _3042;
                frontier_phi_58_59_ladder_4 = _3038;
                frontier_phi_58_59_ladder_5 = _3036;
            }
            else
            {
                frontier_phi_58_59_ladder = _2919;
                frontier_phi_58_59_ladder_1 = _2925;
                frontier_phi_58_59_ladder_2 = _2923;
                frontier_phi_58_59_ladder_3 = _2921;
                frontier_phi_58_59_ladder_4 = _2917;
                frontier_phi_58_59_ladder_5 = _2915;
            }
            _3035 = frontier_phi_58_59_ladder_5;
            _3037 = frontier_phi_58_59_ladder_4;
            _3039 = frontier_phi_58_59_ladder;
            _3041 = frontier_phi_58_59_ladder_3;
            _3043 = frontier_phi_58_59_ladder_2;
            _3045 = frontier_phi_58_59_ladder_1;
        }
        float _3050 = isnan(1.0) ? _1038 : (isnan(_1038) ? 1.0 : min(_1038, 1.0));
        _2827 = (_3050 * _3041) + _2260;
        _2829 = (_3050 * _3043) + _2262;
        _2831 = (_3050 * _3045) + _2264;
        _2833 = ((_3035 * _1022) * _3050) + _2608;
        _2835 = ((_3037 * _1024) * _3050) + _2610;
        _2837 = ((_3039 * _1025) * _3050) + _2612;
    }
    else
    {
        _2827 = _2260;
        _2829 = _2262;
        _2831 = _2264;
        _2833 = _2608;
        _2835 = _2610;
        _2837 = _2612;
    }
    float _4862 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _4873 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _4884 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _2854 = ((isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0))) * (_2827 + ((isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0))) * _1038))) + ((_2833 + ((isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0))) * _1877)) * cbPerFrame._m0[3u].x);
    float _2855 = ((isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0))) * (_2829 + ((isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0))) * _1038))) + ((_2835 + ((isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0))) * _1877)) * cbPerFrame._m0[3u].x);
    float _2856 = ((isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0))) * (_2831 + ((isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0))) * _1038))) + ((_2837 + ((isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0))) * _1877)) * cbPerFrame._m0[3u].x);
    uint _2857 = _283 + 6u;
    float _2865 = _960 / cbSceneParam._m0[86u].x;
    float _2866 = _961 / cbSceneParam._m0[86u].y;
    vec4 _2880 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2865, _2866, (log2((isnan(cbSceneParam._m0[77u].w) ? _883 : (isnan(_883) ? cbSceneParam._m0[77u].w : min(_883, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2882 = _2880.x;
    float _2883 = _2880.y;
    float _2884 = _2880.z;
    float _2885 = _2880.w;
    float _2977;
    float _2979;
    float _2981;
    float _2983;
    if (_883 > cbSceneParam._m0[78u].w)
    {
        float _2940 = isnan(_883) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _883 : min(cbSceneParam._m0[80u].w, _883));
        float _2941 = _2940 / _883;
        float _2952 = _2941 * _933;
        float _2953 = _934 * _2941;
        float _2954 = (-0.0) - _2953;
        float _2955 = _2941 * _935;
        float _2957 = (cbSceneParam._m0[77u].w * _2954) / _2940;
        float _2958 = _2957 + cbSceneParam._m0[79u].w;
        float _2959 = cbSceneParam._m0[79u].w - _2953;
        float _2965 = sqrt(((_2952 * _2952) + (_2953 * _2953)) + (_2955 * _2955));
        float _2968 = (1.0 - (cbSceneParam._m0[77u].w / _2940)) * _2965;
        float _2973 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2975 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3152;
        if (abs((_2954 - _2957) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3152 = ((((_2958 > 0.0) ? exp2(_2973 * _2958) : (2.0 - exp2(_2975 * _2958))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2968;
        }
        else
        {
            float _3096 = 1.0 / cbSceneParam._m0[80u].x;
            float _3097 = isnan(_2959) ? _2958 : (isnan(_2958) ? _2959 : max(_2958, _2959));
            float _3098 = isnan(_2959) ? _2958 : (isnan(_2958) ? _2959 : min(_2958, _2959));
            float _3107 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : min(_3097, 0.0));
            float _3108 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : min(_3098, 0.0));
            _3152 = ((abs(_2965 / _2954) * cbSceneParam._m0[80u].y) * ((((_3107 - _3108) * 2.0) - ((exp2(_2973 * (isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0)))) - exp2(_2973 * (isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0))))) * _3096)) - ((exp2(_2975 * _3107) - exp2(_2975 * _3108)) * _3096))) + (_2968 * cbSceneParam._m0[80u].z);
        }
        vec4 _3154 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2865, _2866, 1.0), 0.0);
        float _3163 = exp2((_3152 * (-1.44269502162933349609375)) * (1.0 - _3154.w));
        float _3164 = log2(_3163);
        float _3180 = log2(_2885);
        _2977 = (exp2(_3180 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3164 * cbSceneParam._m0[78u].x)) * _3154.x) / cbSceneParam._m0[78u].x)) + _2882;
        _2979 = (exp2(_3180 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3164 * cbSceneParam._m0[78u].y)) * _3154.y) / cbSceneParam._m0[78u].y)) + _2883;
        _2981 = (exp2(_3180 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3164 * cbSceneParam._m0[78u].z)) * _3154.z) / cbSceneParam._m0[78u].z)) + _2884;
        _2983 = _3163 * _2885;
    }
    else
    {
        _2977 = _2882;
        _2979 = _2883;
        _2981 = _2884;
        _2983 = _2885;
    }
    bool _3190;
    vec4 _2993;
    vec4 _3015;
    float _3017;
    float _3021;
    float _3022;
    float _3023;
    float _3024;
    bool _3034;
    for (;;)
    {
        _2993 = cbMatDynParam._m0[0u];
        float _2995 = roundEven(_2993.y);
        bool _2996 = _2995 == 3.0;
        float _2997 = log2(_2983);
        float _3004 = exp2(_2997 * cbSceneParam._m0[78u].x) * _2854;
        float _3005 = exp2(_2997 * cbSceneParam._m0[78u].y) * _2855;
        float _3006 = exp2(_2997 * cbSceneParam._m0[78u].z) * _2856;
        float _3013 = _949 + (-0.5);
        _3015 = cbMtdParam._m0[1u];
        _3017 = _3015.y * _3013;
        float _3020 = (_2995 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3021 = _3020 * (_2996 ? _3004 : (_3004 + (cbSceneParam._m0[72u].w * _2977)));
        _3022 = _3020 * (_2996 ? _3005 : (_3005 + (cbSceneParam._m0[72u].w * _2979)));
        _3023 = _3020 * (_2996 ? _3006 : (_3006 + (cbSceneParam._m0[72u].w * _2981)));
        _3024 = _3013 * 0.999000012874603271484375;
        _3034 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3034)
        {
            if ((cbInstanceData._m0[_283 + 7u].x + _3024) < 0.5)
            {
                _3190 = true;
                break;
            }
        }
        uint _3131 = _998 + uint(_2993.w);
        if ((cbInstanceData._m0[_3131].w < 1.0) && ((cbInstanceData._m0[_3131].w + _3024) < 0.5))
        {
            _3190 = true;
            break;
        }
        if ((_3017 + 1.0) < _3015.x)
        {
            _3190 = true;
            break;
        }
        _3190 = false;
        break;
    }
    float _3395;
    if (_3190)
    {
        discard_state = true;
        _3395 = 0.0;
    }
    else
    {
        _3395 = cbInstanceData._m0[_2857].w;
    }
    SV_Target.x = _3021;
    SV_Target.y = _3022;
    SV_Target.z = _3023;
    SV_Target.w = _3395;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2857].w;
    discard_exit();
}


