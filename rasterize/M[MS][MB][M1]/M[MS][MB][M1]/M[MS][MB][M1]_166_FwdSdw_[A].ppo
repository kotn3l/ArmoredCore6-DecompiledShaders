#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1227;
float _3891;
float _3892;
float _3893;
float _3894;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _244 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _244 + 1u;
    uint _254 = _244 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _291 = _285.x * cbMtdParam._m0[11u].x;
    float _292 = _285.y * cbMtdParam._m0[11u].y;
    float _293 = _285.z * cbMtdParam._m0[11u].z;
    vec4 _312 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _351 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _353 = _351.x;
    float _365 = dot(vec4(_353, _351.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _382 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_353 - _365) * cbMtdParam._m0[24u].y) + _365) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3903 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _383 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _390 = (_383 * ((_312.x * cbMtdParam._m0[12u].x) - _291)) + _291;
    float _391 = (_383 * ((_312.y * cbMtdParam._m0[12u].y) - _292)) + _292;
    float _392 = (_383 * ((_312.z * cbMtdParam._m0[12u].z) - _293)) + _293;
    vec4 _409 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _264) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _265) + cbTextureTilingScale._m0[3u].w));
    vec4 _429 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _431 = _429.x;
    float _441 = dot(vec4(_431, _429.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _455 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_431 - _441) * cbMtdParam._m0[24u].y) + _441) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3914 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _456 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _463 = (_456 * ((_409.x * cbMtdParam._m0[13u].x) - _390)) + _390;
    float _464 = (_456 * ((_409.y * cbMtdParam._m0[13u].y) - _391)) + _391;
    float _465 = (_456 * ((_409.z * cbMtdParam._m0[13u].z) - _392)) + _392;
    vec4 _478 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _495 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _497 = _495.x;
    float _498 = _495.y;
    float _499 = _495.z;
    float _506 = ((_478.x - _497) * _383) + _497;
    float _507 = ((_478.y - _498) * _383) + _498;
    float _508 = ((_478.z - _499) * _383) + _499;
    vec4 _520 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _264) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _265) + cbTextureTilingScale._m0[2u].w));
    float _533 = ((_520.z - _508) * _456) + _508;
    float _536 = ((((_520.x - _506) * _456) + _506) * 2.0) + (-1.0);
    float _538 = ((((_520.y - _507) * _456) + _507) * 2.0) + (-1.0);
    float _539 = dot(vec2(_536, _538), vec2(_536, _538));
    float _3925 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _544 = sqrt(1.0 - (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))));
    vec4 _557 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _571 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _585 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _587 = _585.x;
    float _605 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _264) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _265) + cbTextureTilingScale._m0[9u].w)).x - _587) * _383) + _587;
    float _623 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _264) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _265) + cbTextureTilingScale._m0[21u].w)).x - _605) * _456) + _605;
    float _627 = ((_571.x - _623) * cbMtdParam._m0[19u].z) + _623;
    float _632 = cbMtdParam._m0[22u].x + _557.w;
    float _635 = fma(_544, _231 * NORMAL.x, fma(_538, _238 * TANGENT.x, (_224 * _216) * _536));
    float _638 = fma(_544, _231 * NORMAL.y, fma(_538, _238 * TANGENT.y, (_224 * _217) * _536));
    float _641 = fma(_544, _231 * NORMAL.z, fma(_538, _238 * TANGENT.z, (_224 * _218) * _536));
    float _645 = inversesqrt(dot(vec3(_635, _638, _641), vec3(_635, _638, _641)));
    float _646 = _645 * _635;
    float _647 = _645 * _638;
    float _648 = _645 * _641;
    float _3936 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _649 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _3947 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _3958 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _3969 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _3980 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _3991 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _654 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _668 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _709 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _719 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _709);
    float _720 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _709);
    float _721 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _709);
    float _725 = inversesqrt(dot(vec3(_719, _720, _721), vec3(_719, _720, _721)));
    float _726 = _719 * _725;
    float _727 = _720 * _725;
    float _728 = _721 * _725;
    vec4 _733 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _735 = _733.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _907 = sqrt(((_719 * _719) + (_720 * _720)) + (_721 * _721));
        float _913 = (cbMatDynParam._m0[5u].x * _907) + cbMatDynParam._m0[5u].y;
        float _4002 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _918 = (cbMatDynParam._m0[5u].z * _907) + cbMatDynParam._m0[5u].w;
        float _4013 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) - _914)) + _914) < ((_735 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _746 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _747 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _765 = fma(_648, cbSceneParam._m0[5u].z, fma(_647, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _646));
    float _768 = fma(_648, cbSceneParam._m0[6u].z, fma(_647, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _646));
    float _771 = fma(_648, cbSceneParam._m0[7u].z, fma(_647, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _646));
    uint _784 = _244 + 9u;
    uint _785 = _784 + uint(cbMatDynParam._m0[0u].w);
    float _791 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0)))) * cbInstanceData._m0[_785].x;
    float _792 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0)))) * cbInstanceData._m0[_785].y;
    float _793 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0)))) * cbInstanceData._m0[_785].z;
    float _4024 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _794 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _4035 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _795 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _4046 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _796 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _797 = 1.0 - _654;
    float _798 = _794 * _797;
    float _799 = _795 * _797;
    float _800 = _796 * _797;
    float _805 = (_794 + (-0.039999999105930328369140625)) * _654;
    float _806 = (_795 + (-0.039999999105930328369140625)) * _654;
    float _807 = (_796 + (-0.039999999105930328369140625)) * _654;
    float _808 = _805 + 0.039999999105930328369140625;
    float _810 = _806 + 0.039999999105930328369140625;
    float _811 = _807 + 0.039999999105930328369140625;
    vec4 _820 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _746, cbSceneParam._m0[86u].y * _747));
    float _824 = ((isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * TEXCOORD_5.w) * _820.x;
    float _825 = dot(vec3(_646, _647, _648), vec3(_726, _727, _728));
    float _828 = _825 * 2.0;
    float _832 = (_828 * _646) - _726;
    float _833 = (_828 * _647) - _727;
    float _834 = (_828 * _648) - _728;
    float _838 = abs(dot(vec3(_726, _727, _728), vec3(_646, _647, _648)));
    float _4057 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _840 = sqrt(_649);
    float _853 = exp2((_840 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_840 * 3.0));
    float _859 = (1.0 - _853) * ((_840 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _860 = _853 * _840;
    float _888 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _892 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _896 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1226;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _951 = fma(_896, cbModelParam._m0[26u].z, fma(_892, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _888));
        float _955 = fma(_896, cbModelParam._m0[27u].z, fma(_892, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _888));
        float _959 = fma(_896, cbModelParam._m0[28u].z, fma(_892, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _888));
        float _984 = _888 + _646;
        float _985 = _892 + _647;
        float _986 = _896 + _648;
        float _996 = fma(_986, cbModelParam._m0[26u].z, fma(_985, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _984)) - _951;
        float _997 = fma(_986, cbModelParam._m0[27u].z, fma(_985, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _984)) - _955;
        float _998 = fma(_986, cbModelParam._m0[28u].z, fma(_985, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _984)) - _959;
        float _1002 = inversesqrt(dot(vec3(_996, _997, _998), vec3(_996, _997, _998)));
        float _1015 = ((_1002 * _996) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_951 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1016 = ((_1002 * _997) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_955 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1017 = ((_1002 * _998) / cbModelParam._m0[34u].z) + ((((((_959 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1020 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1027 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1034 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1041 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        float _1054 = exp2((_1020.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1020.x + (-0.5));
        float _1056 = _1054 * (_1020.y + (-0.5));
        float _1057 = _1054 * (_1020.z + (-0.5));
        float _1064 = exp2((_1027.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1027.x + (-0.5));
        float _1066 = _1064 * (_1027.y + (-0.5));
        float _1067 = _1064 * (_1027.z + (-0.5));
        float _1074 = exp2((_1034.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1034.x + (-0.5));
        float _1076 = _1074 * (_1034.y + (-0.5));
        float _1077 = _1074 * (_1034.z + (-0.5));
        float _1084 = exp2((_1041.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1041.x + (-0.5));
        float _1086 = _1084 * (_1041.y + (-0.5));
        float _1087 = _1084 * (_1041.z + (-0.5));
        float _1088 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1089 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1090 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1091 = _1055 * 0.5;
        float _1092 = _1065 * 0.5;
        float _1093 = _1075 * 0.5;
        float _1094 = dot(vec3(_1091, _1092, _1093), vec3(_1091, _1092, _1093));
        float _1099 = (_1094 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1094);
        float _1108 = (dot(vec3(_646, _647, _648), vec3(_1099 * _1091, _1099 * _1092, _1099 * _1093)) + 1.0) * 0.5;
        float _4083 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1118 = sqrt(((_1092 * _1092) + (_1091 * _1091)) + (_1093 * _1093)) / (_1088 + 9.9999997473787516355514526367188e-06);
        float _4094 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1120 = _1119 * 2.0;
        float _1124 = (1.0 - _1119) / (_1119 + 1.0);
        float _4105 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1134 = ((((1.0 - _1125) * (_1120 + 2.0)) * exp2(log2(isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * (_1120 + 1.0))) + _1125) * _1088;
        float _1135 = _1056 * 0.5;
        float _1136 = _1066 * 0.5;
        float _1137 = _1076 * 0.5;
        float _1138 = dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137));
        float _1143 = (_1138 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1138);
        float _1151 = (dot(vec3(_646, _647, _648), vec3(_1143 * _1135, _1143 * _1136, _1143 * _1137)) + 1.0) * 0.5;
        float _4116 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1160 = sqrt(((_1136 * _1136) + (_1135 * _1135)) + (_1137 * _1137)) / (_1089 + 9.9999997473787516355514526367188e-06);
        float _4127 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1162 = _1161 * 2.0;
        float _1166 = (1.0 - _1161) / (_1161 + 1.0);
        float _4138 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1176 = ((((1.0 - _1167) * (_1162 + 2.0)) * exp2(log2(isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_1162 + 1.0))) + _1167) * _1089;
        float _1177 = _1057 * 0.5;
        float _1178 = _1067 * 0.5;
        float _1179 = _1077 * 0.5;
        float _1180 = dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179));
        float _1185 = (_1180 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1180);
        float _1193 = (dot(vec3(_646, _647, _648), vec3(_1185 * _1177, _1185 * _1178, _1185 * _1179)) + 1.0) * 0.5;
        float _4149 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1202 = sqrt(((_1178 * _1178) + (_1177 * _1177)) + (_1179 * _1179)) / (_1090 + 9.9999997473787516355514526367188e-06);
        float _4160 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1204 = _1203 * 2.0;
        float _1208 = (1.0 - _1203) / (_1203 + 1.0);
        float _4171 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1218 = ((((1.0 - _1209) * (_1204 + 2.0)) * exp2(log2(isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_1204 + 1.0))) + _1209) * _1090;
        _1226 = _1057;
        _1228 = _1056;
        _1229 = _1055;
        _1230 = _1067;
        _1231 = _1066;
        _1232 = _1065;
        _1233 = _1077;
        _1234 = _1076;
        _1235 = _1075;
        _1236 = _1090;
        _1237 = _1089;
        _1238 = _1088;
        _1239 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0)));
        _1240 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0)));
        _1241 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0)));
    }
    else
    {
        _1226 = _1227;
        _1228 = _1227;
        _1229 = _1227;
        _1230 = _1227;
        _1231 = _1227;
        _1232 = _1227;
        _1233 = _1227;
        _1234 = _1227;
        _1235 = _1227;
        _1236 = _1227;
        _1237 = _1227;
        _1238 = _1227;
        _1239 = 0.0;
        _1240 = 0.0;
        _1241 = 0.0;
    }
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1268 = fma(_896, cbModelParam._m0[30u].z, fma(_892, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _888));
        float _1272 = fma(_896, cbModelParam._m0[31u].z, fma(_892, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _888));
        float _1276 = fma(_896, cbModelParam._m0[32u].z, fma(_892, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _888));
        float _1299 = _888 + _646;
        float _1300 = _892 + _647;
        float _1301 = _896 + _648;
        float _1311 = fma(_1301, cbModelParam._m0[30u].z, fma(_1300, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1299)) - _1268;
        float _1312 = fma(_1301, cbModelParam._m0[31u].z, fma(_1300, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1299)) - _1272;
        float _1313 = fma(_1301, cbModelParam._m0[32u].z, fma(_1300, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1299)) - _1276;
        float _1317 = inversesqrt(dot(vec3(_1311, _1312, _1313), vec3(_1311, _1312, _1313)));
        float _1330 = ((_1317 * _1311) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1268 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1331 = ((_1317 * _1312) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1272 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1332 = ((_1317 * _1313) / cbModelParam._m0[35u].z) + ((((((_1276 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1334 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1330, _1331, _1332), 0.0);
        vec4 _1341 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1330, _1331, _1332), 0.0);
        vec4 _1348 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1330, _1331, _1332), 0.0);
        vec4 _1355 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1330, _1331, _1332), 0.0);
        float _1367 = exp2((_1334.w + (-0.5)) * 20.0) * 2.0;
        float _1368 = _1367 * (_1334.x + (-0.5));
        float _1369 = _1367 * (_1334.y + (-0.5));
        float _1370 = _1367 * (_1334.z + (-0.5));
        float _1377 = exp2((_1341.w + (-0.5)) * 20.0) * 2.0;
        float _1378 = _1377 * (_1341.x + (-0.5));
        float _1379 = _1377 * (_1341.y + (-0.5));
        float _1380 = _1377 * (_1341.z + (-0.5));
        float _1387 = exp2((_1348.w + (-0.5)) * 20.0) * 2.0;
        float _1388 = _1387 * (_1348.x + (-0.5));
        float _1389 = _1387 * (_1348.y + (-0.5));
        float _1390 = _1387 * (_1348.z + (-0.5));
        float _1397 = exp2((_1355.w + (-0.5)) * 20.0) * 2.0;
        float _1398 = _1397 * (_1355.x + (-0.5));
        float _1399 = _1397 * (_1355.y + (-0.5));
        float _1400 = _1397 * (_1355.z + (-0.5));
        float _1401 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1402 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1403 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1404 = _1368 * 0.5;
        float _1405 = _1378 * 0.5;
        float _1406 = _1388 * 0.5;
        float _1407 = dot(vec3(_1404, _1405, _1406), vec3(_1404, _1405, _1406));
        float _1412 = (_1407 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1407);
        float _1420 = (dot(vec3(_646, _647, _648), vec3(_1412 * _1404, _1412 * _1405, _1412 * _1406)) + 1.0) * 0.5;
        float _4212 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1429 = sqrt(((_1405 * _1405) + (_1404 * _1404)) + (_1406 * _1406)) / (_1401 + 9.9999997473787516355514526367188e-06);
        float _4223 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _1431 = _1430 * 2.0;
        float _1435 = (1.0 - _1430) / (_1430 + 1.0);
        float _4234 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _1445 = ((((1.0 - _1436) * (_1431 + 2.0)) * exp2(log2(isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_1431 + 1.0))) + _1436) * _1401;
        float _1446 = _1369 * 0.5;
        float _1447 = _1379 * 0.5;
        float _1448 = _1389 * 0.5;
        float _1449 = dot(vec3(_1446, _1447, _1448), vec3(_1446, _1447, _1448));
        float _1454 = (_1449 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1449);
        float _1462 = (dot(vec3(_646, _647, _648), vec3(_1454 * _1446, _1454 * _1447, _1454 * _1448)) + 1.0) * 0.5;
        float _4245 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1471 = sqrt(((_1447 * _1447) + (_1446 * _1446)) + (_1448 * _1448)) / (_1402 + 9.9999997473787516355514526367188e-06);
        float _4256 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1473 = _1472 * 2.0;
        float _1477 = (1.0 - _1472) / (_1472 + 1.0);
        float _4267 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _1487 = ((((1.0 - _1478) * (_1473 + 2.0)) * exp2(log2(isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * (_1473 + 1.0))) + _1478) * _1402;
        float _1488 = _1370 * 0.5;
        float _1489 = _1380 * 0.5;
        float _1490 = _1390 * 0.5;
        float _1491 = dot(vec3(_1488, _1489, _1490), vec3(_1488, _1489, _1490));
        float _1496 = (_1491 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1491);
        float _1504 = (dot(vec3(_646, _647, _648), vec3(_1496 * _1488, _1496 * _1489, _1496 * _1490)) + 1.0) * 0.5;
        float _4278 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1513 = sqrt(((_1489 * _1489) + (_1488 * _1488)) + (_1490 * _1490)) / (_1403 + 9.9999997473787516355514526367188e-06);
        float _4289 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1515 = _1514 * 2.0;
        float _1519 = (1.0 - _1514) / (_1514 + 1.0);
        float _4300 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _1529 = ((((1.0 - _1520) * (_1515 + 2.0)) * exp2(log2(isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_1515 + 1.0))) + _1520) * _1403;
        _1537 = _1370;
        _1538 = _1369;
        _1539 = _1368;
        _1540 = _1380;
        _1541 = _1379;
        _1542 = _1378;
        _1543 = _1390;
        _1544 = _1389;
        _1545 = _1388;
        _1546 = _1403;
        _1547 = _1402;
        _1548 = _1401;
        _1549 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)));
        _1550 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)));
        _1551 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)));
    }
    else
    {
        _1537 = _1227;
        _1538 = _1227;
        _1539 = _1227;
        _1540 = _1227;
        _1541 = _1227;
        _1542 = _1227;
        _1543 = _1227;
        _1544 = _1227;
        _1545 = _1227;
        _1546 = _1227;
        _1547 = _1227;
        _1548 = _1227;
        _1549 = 0.0;
        _1550 = 0.0;
        _1551 = 0.0;
    }
    float _1561 = (cbModelParam._m0[1u].x * (_1549 - _1239)) + _1239;
    float _1562 = (cbModelParam._m0[1u].x * (_1550 - _1240)) + _1240;
    float _1563 = (cbModelParam._m0[1u].x * (_1551 - _1241)) + _1241;
    float _1584 = fma(_1563, cbSceneParam._m0[89u].z, fma(_1562, cbSceneParam._m0[89u].y, _1561 * cbSceneParam._m0[89u].x));
    float _1587 = fma(_1563, cbSceneParam._m0[90u].z, fma(_1562, cbSceneParam._m0[90u].y, _1561 * cbSceneParam._m0[90u].x));
    float _1590 = fma(_1563, cbSceneParam._m0[91u].z, fma(_1562, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1561));
    float _1605 = _832 * 0.5;
    float _1606 = _833 * 0.5;
    float _1607 = _834 * 0.5;
    float _1608 = dot(vec4(_1605, _1606, _1607, 1.0), vec4(_1539, _1542, _1545, _1548));
    float _1611 = dot(vec4(_1605, _1606, _1607, 1.0), vec4(_1538, _1541, _1544, _1547));
    float _1614 = dot(vec4(_1605, _1606, _1607, 1.0), vec4(_1537, _1540, _1543, _1546));
    float _1648;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1621 = dot(vec4(_1605, _1606, _1607, 1.0), vec4(_1226, _1230, _1233, _1236));
        float _1625 = dot(vec4(_1605, _1606, _1607, 1.0), vec4(_1228, _1231, _1234, _1237));
        float _1629 = dot(vec4(_1605, _1606, _1607, 1.0), vec4(_1229, _1232, _1235, _1238));
        float _1636 = dot(vec4(cbModelParam._m0[39u]), vec4(_1605, _1606, _1607, 1.0));
        _1648 = dot(vec3(isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)), isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)), isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1636) ? 0.0 : (isnan(0.0) ? _1636 : max(0.0, _1636))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1648 = 1.0;
    }
    float _1659;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1650 = dot(vec4(cbModelParam._m0[40u]), vec4(_1605, _1606, _1607, 1.0));
        _1659 = dot(vec3(isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)), isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)), isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1650) ? 0.0 : (isnan(0.0) ? _1650 : max(0.0, _1650))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1659 = 1.0;
    }
    float _1663 = (_1659 * cbModelParam._m0[1u].x) + (_1648 * (1.0 - cbModelParam._m0[1u].x));
    float _1673 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _649);
    float _1674 = isnan(_1673) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1673 : min(cbModelParam._m0[25u].z, _1673));
    float _1756;
    float _1758;
    float _1760;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1723 = fma(_896, cbModelParam._m0[13u].z, fma(_892, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _888)) + cbModelParam._m0[13u].w;
        float _1727 = fma(_896, cbModelParam._m0[14u].z, fma(_892, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _888)) + cbModelParam._m0[14u].w;
        float _1731 = fma(_896, cbModelParam._m0[15u].z, fma(_892, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _888)) + cbModelParam._m0[15u].w;
        float _1734 = fma(_834, cbModelParam._m0[13u].z, fma(_833, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _832));
        float _1737 = fma(_834, cbModelParam._m0[14u].z, fma(_833, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _832));
        float _1740 = fma(_834, cbModelParam._m0[15u].z, fma(_833, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _832));
        float _1768;
        if (_1734 > 0.0)
        {
            _1768 = abs((1.0 - _1723) / _1734);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1723 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1768 = frontier_phi_17_15_ladder;
        }
        float _1940;
        if (_1737 > 0.0)
        {
            _1940 = abs((1.0 - _1727) / _1737);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1737 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1727 + 1.0) / _1737);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1940 = frontier_phi_26_22_ladder;
        }
        float _2235;
        if (_1740 > 0.0)
        {
            _2235 = abs((1.0 - _1731) / _1740);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1740 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1731 + 1.0) / _1740);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2235 = frontier_phi_38_33_ladder;
        }
        float _2237 = isnan(_1940) ? _1768 : (isnan(_1768) ? _1940 : min(_1768, _1940));
        float _2238 = isnan(_2235) ? _2237 : (isnan(_2237) ? _2235 : min(_2237, _2235));
        float _2242 = (_2238 * _1734) + _1723;
        float _2243 = (_2238 * _1737) + _1727;
        float _2244 = (_2238 * _1740) + _1731;
        float _2245 = _2238 * 9.9999997473787516355514526367188e-05;
        float _2247 = (-1.0) - _2245;
        float _2249 = _2245 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2244 > _2249) || ((_2244 < _2247) || ((_2243 > _2249) || ((_2243 < _2247) || ((_2242 < _2247) || (_2242 > _2249))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2389 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2244, cbModelParam._m0[9u].z, fma(_2243, cbModelParam._m0[9u].y, _2242 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2244, cbModelParam._m0[10u].z, fma(_2243, cbModelParam._m0[10u].y, _2242 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2244, cbModelParam._m0[11u].z, fma(_2243, cbModelParam._m0[11u].y, _2242 * cbModelParam._m0[11u].x))), _1674);
            frontier_phi_16_38_ladder = _2389.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2389.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2389.x * cbModelParam._m0[1u].y;
        }
        _1756 = frontier_phi_16_38_ladder_2;
        _1758 = frontier_phi_16_38_ladder_1;
        _1760 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1744 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_832, _833, _834), _1674);
        _1756 = _1744.x * cbModelParam._m0[1u].y;
        _1758 = _1744.y * cbModelParam._m0[1u].y;
        _1760 = _1744.z * cbModelParam._m0[1u].y;
    }
    float _1764 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _649);
    float _1765 = isnan(_1764) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1764 : min(cbModelParam._m0[25u].w, _1764));
    float _1855;
    float _1857;
    float _1859;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1819 = fma(_896, cbModelParam._m0[21u].z, fma(_892, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _888)) + cbModelParam._m0[21u].w;
        float _1823 = fma(_896, cbModelParam._m0[22u].z, fma(_892, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _888)) + cbModelParam._m0[22u].w;
        float _1827 = fma(_896, cbModelParam._m0[23u].z, fma(_892, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _888)) + cbModelParam._m0[23u].w;
        float _1830 = fma(_834, cbModelParam._m0[21u].z, fma(_833, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _832));
        float _1833 = fma(_834, cbModelParam._m0[22u].z, fma(_833, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _832));
        float _1836 = fma(_834, cbModelParam._m0[23u].z, fma(_833, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _832));
        float _1945;
        if (_1830 > 0.0)
        {
            _1945 = abs((1.0 - _1819) / _1830);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1830 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1819 + 1.0) / _1830);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1945 = frontier_phi_28_24_ladder;
        }
        float _2262;
        if (_1833 > 0.0)
        {
            _2262 = abs((1.0 - _1823) / _1833);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1833 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1823 + 1.0) / _1833);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2262 = frontier_phi_40_35_ladder;
        }
        float _2600;
        if (_1836 > 0.0)
        {
            _2600 = abs((1.0 - _1827) / _1836);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1836 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1827 + 1.0) / _1836);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2600 = frontier_phi_50_47_ladder;
        }
        float _2602 = isnan(_2262) ? _1945 : (isnan(_1945) ? _2262 : min(_1945, _2262));
        float _2603 = isnan(_2600) ? _2602 : (isnan(_2602) ? _2600 : min(_2602, _2600));
        float _2607 = (_2603 * _1830) + _1819;
        float _2608 = (_2603 * _1833) + _1823;
        float _2609 = (_2603 * _1836) + _1827;
        float _2610 = _2603 * 9.9999997473787516355514526367188e-05;
        float _2611 = (-1.0) - _2610;
        float _2613 = _2610 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2609 > _2613) || ((_2609 < _2611) || ((_2608 > _2613) || ((_2608 < _2611) || ((_2607 < _2611) || (_2607 > _2613))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2731 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2609, cbModelParam._m0[17u].z, fma(_2608, cbModelParam._m0[17u].y, _2607 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2609, cbModelParam._m0[18u].z, fma(_2608, cbModelParam._m0[18u].y, _2607 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2609, cbModelParam._m0[19u].z, fma(_2608, cbModelParam._m0[19u].y, _2607 * cbModelParam._m0[19u].x))), _1765);
            frontier_phi_25_50_ladder = _2731.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2731.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2731.x * cbModelParam._m0[1u].z;
        }
        _1855 = frontier_phi_25_50_ladder_2;
        _1857 = frontier_phi_25_50_ladder_1;
        _1859 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1839 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_832, _833, _834), _1765);
        _1855 = _1839.x * cbModelParam._m0[1u].z;
        _1857 = _1839.y * cbModelParam._m0[1u].z;
        _1859 = _1839.z * cbModelParam._m0[1u].z;
    }
    float _1872 = (((_859 * _808) + _860) * _824) * ((cbModelParam._m0[1u].w * (_1855 - _1756)) + _1756);
    float _1874 = (((_859 * _810) + _860) * _824) * ((cbModelParam._m0[1u].w * (_1857 - _1758)) + _1758);
    float _1876 = (((_859 * _811) + _860) * _824) * ((cbModelParam._m0[1u].w * (_1859 - _1760)) + _1760);
    float _1879 = fma(_1876, cbSceneParam._m0[89u].z, fma(_1874, cbSceneParam._m0[89u].y, _1872 * cbSceneParam._m0[89u].x));
    float _1882 = fma(_1876, cbSceneParam._m0[90u].z, fma(_1874, cbSceneParam._m0[90u].y, _1872 * cbSceneParam._m0[90u].x));
    float _1885 = fma(_1876, cbSceneParam._m0[91u].z, fma(_1874, cbSceneParam._m0[91u].y, _1872 * cbSceneParam._m0[91u].x));
    float _1919 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1923 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1927 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1931 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1932 = _1919 / _1931;
    float _1933 = _1923 / _1931;
    float _1934 = _1927 / _1931;
    float _2081;
    float _2082;
    float _2083;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1961 = ((uint(_1934 > cbSceneParam._m0[59u].y) + uint(_1934 > cbSceneParam._m0[59u].x)) + uint(_1934 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1962 = _1961 + 43u;
        uint _1970 = _1961 + 44u;
        uint _1978 = _1961 + 45u;
        uint _1986 = _1961 + 46u;
        float _1997 = fma(_1931, cbSceneParam._m0[_1962].w, fma(_1927, cbSceneParam._m0[_1962].z, fma(_1923, cbSceneParam._m0[_1962].y, _1919 * cbSceneParam._m0[_1962].x)));
        float _2001 = fma(_1931, cbSceneParam._m0[_1970].w, fma(_1927, cbSceneParam._m0[_1970].z, fma(_1923, cbSceneParam._m0[_1970].y, _1919 * cbSceneParam._m0[_1970].x)));
        float _2009 = fma(_1931, cbSceneParam._m0[_1986].w, fma(_1927, cbSceneParam._m0[_1986].z, fma(_1923, cbSceneParam._m0[_1986].y, _1919 * cbSceneParam._m0[_1986].x)));
        float _2014 = cbSceneParam._m0[33u].z * _2009;
        float _2016 = cbSceneParam._m0[33u].w * _2009;
        float _2019 = fma(_1931, cbSceneParam._m0[_1978].w, fma(_1927, cbSceneParam._m0[_1978].z, fma(_1923, cbSceneParam._m0[_1978].y, _1919 * cbSceneParam._m0[_1978].x))) / _2009;
        float _2067 = (cbSceneParam._m0[33u].x - sqrt(((_1933 * _1933) + (_1932 * _1932)) + (_1934 * _1934))) * cbSceneParam._m0[33u].y;
        float _4426 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
        float _2074 = (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2014 + _1997) / _2009, (_2016 + _2001) / _2009), _2019), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2016 + _1997) / _2009, (_2001 - _2014) / _2009), _2019), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1997 - _2014) / _2009, (_2001 - _2016) / _2009), _2019), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1997 - _2016) / _2009, (_2014 + _2001) / _2009), _2019), 0.0)).x), vec4(0.25)));
        _2081 = 1.0 - (_2074 * cbSceneParam._m0[34u].x);
        _2082 = 1.0 - (_2074 * cbSceneParam._m0[34u].y);
        _2083 = 1.0 - (_2074 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2081 = 1.0;
        _2082 = 1.0;
        _2083 = 1.0;
    }
    float _2147;
    float _2149;
    float _2151;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2135 = fma(_1931, cbSceneParam._m0[63u].w, fma(_1927, cbSceneParam._m0[63u].z, fma(_1923, cbSceneParam._m0[63u].y, _1919 * cbSceneParam._m0[63u].x)));
        float _2136 = fma(_1931, cbSceneParam._m0[60u].w, fma(_1927, cbSceneParam._m0[60u].z, fma(_1923, cbSceneParam._m0[60u].y, _1919 * cbSceneParam._m0[60u].x))) / _2135;
        float _2137 = fma(_1931, cbSceneParam._m0[61u].w, fma(_1927, cbSceneParam._m0[61u].z, fma(_1923, cbSceneParam._m0[61u].y, _1919 * cbSceneParam._m0[61u].x))) / _2135;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2136 >= cbSceneParam._m0[64u].x) && (_2137 >= cbSceneParam._m0[64u].y)) && (_2136 <= cbSceneParam._m0[64u].z)) && (_2137 <= cbSceneParam._m0[64u].w))
        {
            float _2275 = fma(_1931, cbSceneParam._m0[62u].w, fma(_1927, cbSceneParam._m0[62u].z, fma(_1923, cbSceneParam._m0[62u].y, _1919 * cbSceneParam._m0[62u].x))) / _2135;
            float _2279 = isnan(cbSceneParam._m0[41u].w) ? _2275 : (isnan(_2275) ? cbSceneParam._m0[41u].w : max(_2275, cbSceneParam._m0[41u].w));
            float _2322 = (cbSceneParam._m0[33u].x - sqrt(((_1933 * _1933) + (_1932 * _1932)) + (_1934 * _1934))) * cbSceneParam._m0[33u].y;
            float _4442 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
            float _2329 = (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2136, cbSceneParam._m0[33u].w + _2137), _2279), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2136, _2137 - cbSceneParam._m0[33u].z), _2279), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2136 - cbSceneParam._m0[33u].z, _2137 - cbSceneParam._m0[33u].w), _2279), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2136 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2137), _2279), 0.0)).x), vec4(0.25)));
            float _2333 = 1.0 - (_2329 * cbSceneParam._m0[34u].x);
            float _2334 = 1.0 - (_2329 * cbSceneParam._m0[34u].y);
            float _2335 = 1.0 - (_2329 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2335) ? _2083 : (isnan(_2083) ? _2335 : min(_2083, _2335));
            frontier_phi_37_36_ladder_1 = isnan(_2334) ? _2082 : (isnan(_2082) ? _2334 : min(_2082, _2334));
            frontier_phi_37_36_ladder_2 = isnan(_2333) ? _2081 : (isnan(_2081) ? _2333 : min(_2081, _2333));
        }
        else
        {
            frontier_phi_37_36_ladder = _2083;
            frontier_phi_37_36_ladder_1 = _2082;
            frontier_phi_37_36_ladder_2 = _2081;
        }
        _2147 = frontier_phi_37_36_ladder_2;
        _2149 = frontier_phi_37_36_ladder_1;
        _2151 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2147 = _2081;
        _2149 = _2082;
        _2151 = _2083;
    }
    uvec4 _2156 = floatBitsToUint(cbInstanceData._m0[_244 + 5u]);
    uint _2158 = _2156.x * 14u;
    uint _2159 = _2158 + 13u;
    float _2166 = _824 + (-1.0);
    float _2171 = (cbLight._m0[_2159].x * _2166) + 1.0;
    float _2172 = (cbLight._m0[_2159].y * _2166) + 1.0;
    float _2173 = (cbLight._m0[_2159].z * _2166) + 1.0;
    float _2174 = (cbLight._m0[_2159].w * _2166) + 1.0;
    uint _2175 = _2158 + 5u;
    float _2181 = isnan(1.0) ? _2172 : (isnan(_2172) ? 1.0 : min(_2172, 1.0));
    uint _2185 = _2158 + 4u;
    float _2194 = isnan(1.0) ? _2171 : (isnan(_2171) ? 1.0 : min(_2171, 1.0));
    uint _2198 = _2158 | 1u;
    float _2209 = dot(vec3(cbLight._m0[_2158].xyz), vec3(_646, _647, _648));
    float _2212 = dot(vec3(cbLight._m0[_2198].xyz), vec3(_646, _647, _648));
    float _4478 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _4489 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2217 = (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * 0.3183098733425140380859375;
    float _2219 = (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * 0.3183098733425140380859375;
    float _2226 = ((cbLight._m0[_2175].x * _2181) * _2219) + (((cbLight._m0[_2185].x * _2147) * _2194) * _2217);
    float _2227 = ((_2181 * cbLight._m0[_2175].y) * _2219) + (((cbLight._m0[_2185].y * _2149) * _2194) * _2217);
    float _2228 = ((_2181 * cbLight._m0[_2175].z) * _2219) + (((cbLight._m0[_2185].z * _2151) * _2194) * _2217);
    uvec4 _2232 = floatBitsToUint(cbLight._m0[_2158 + 12u]);
    bool _2234 = _2232.x == 0u;
    float _2336;
    float _2338;
    float _2340;
    if (_2234)
    {
        _2336 = _2226;
        _2338 = _2227;
        _2340 = _2228;
    }
    else
    {
        uint _2344 = _2158 + 6u;
        float _2360 = (dot(vec3(cbLight._m0[_2158 + 2u].xyz), vec3(_646, _647, _648)) * 0.5) + 0.5;
        float _2361 = _2360 * _2360;
        float _4500 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2362 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _2363 = isnan(1.0) ? _2173 : (isnan(_2173) ? 1.0 : min(_2173, 1.0));
        _2336 = (((cbLight._m0[_2344].x * 0.3183098733425140380859375) * _2362) * _2363) + _2226;
        _2338 = (((cbLight._m0[_2344].y * 0.3183098733425140380859375) * _2362) * _2363) + _2227;
        _2340 = (((cbLight._m0[_2344].z * 0.3183098733425140380859375) * _2362) * _2363) + _2228;
    }
    bool _2343 = _2232.y == 0u;
    float _2398;
    float _2400;
    float _2402;
    if (_2343)
    {
        _2398 = _2336;
        _2400 = _2338;
        _2402 = _2340;
    }
    else
    {
        uint _2571 = _2158 + 7u;
        float _2587 = (dot(vec3(cbLight._m0[_2158 + 3u].xyz), vec3(_646, _647, _648)) * 0.5) + 0.5;
        float _2588 = _2587 * _2587;
        float _4516 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        float _2589 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _2590 = isnan(1.0) ? _2174 : (isnan(_2174) ? 1.0 : min(_2174, 1.0));
        _2398 = (((cbLight._m0[_2571].x * 0.3183098733425140380859375) * _2589) * _2590) + _2336;
        _2400 = (((cbLight._m0[_2571].y * 0.3183098733425140380859375) * _2589) * _2590) + _2338;
        _2402 = (((cbLight._m0[_2571].z * 0.3183098733425140380859375) * _2589) * _2590) + _2340;
    }
    uint _2405 = _2158 + 8u;
    float _2418 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2158].w)) * _649) * 0.949999988079071044921875);
    float _2419 = _2418 * _2418;
    float _2420 = cbLight._m0[_2158].x + _726;
    float _2421 = cbLight._m0[_2158].y + _727;
    float _2422 = cbLight._m0[_2158].z + _728;
    float _2426 = inversesqrt(dot(vec3(_2420, _2421, _2422), vec3(_2420, _2421, _2422)));
    float _2427 = _2426 * _2420;
    float _2428 = _2426 * _2421;
    float _2429 = _2426 * _2422;
    float _2430 = dot(vec3(_646, _647, _648), vec3(cbLight._m0[_2158].xyz));
    float _4532 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    float _2433 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
    float _4543 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _2434 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
    float _2435 = dot(vec3(_646, _647, _648), vec3(_2427, _2428, _2429));
    float _4554 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
    float _2438 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
    float _2439 = dot(vec3(cbLight._m0[_2158].xyz), vec3(_2427, _2428, _2429));
    float _4565 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
    float _2443 = _2419 * _2419;
    float _2447 = ((_2438 * _2438) * (_2443 + (-1.0))) + 1.0;
    float _2455 = exp2(log2(1.0 - (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0)))) * 5.0);
    float _2456 = 0.959999978542327880859375 - _805;
    float _2458 = 0.959999978542327880859375 - _806;
    float _2459 = 0.959999978542327880859375 - _807;
    float _2466 = 1.0 - _2419;
    float _2477 = (0.5 / (((_2434 * ((_2433 * _2466) + _2419)) + 9.9999999392252902907785028219223e-09) + (((_2434 * _2466) + _2419) * _2433))) * _2433;
    float _4576 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2479 = (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * (_2443 / ((_2447 * _2447) * 3.141590118408203125));
    uint _2493 = _2158 + 9u;
    float _2504 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2198].w)) * _649) * 0.949999988079071044921875);
    float _2505 = _2504 * _2504;
    float _2506 = cbLight._m0[_2198].x + _726;
    float _2507 = cbLight._m0[_2198].y + _727;
    float _2508 = cbLight._m0[_2198].z + _728;
    float _2512 = inversesqrt(dot(vec3(_2506, _2507, _2508), vec3(_2506, _2507, _2508)));
    float _2513 = _2512 * _2506;
    float _2514 = _2512 * _2507;
    float _2515 = _2512 * _2508;
    float _2516 = dot(vec3(_646, _647, _648), vec3(cbLight._m0[_2198].xyz));
    float _4587 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
    float _2519 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
    float _2520 = dot(vec3(_646, _647, _648), vec3(_2513, _2514, _2515));
    float _4598 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
    float _2523 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
    float _2524 = dot(vec3(cbLight._m0[_2198].xyz), vec3(_2513, _2514, _2515));
    float _4609 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
    float _2528 = _2505 * _2505;
    float _2532 = ((_2523 * _2523) * (_2528 + (-1.0))) + 1.0;
    float _2539 = exp2(log2(1.0 - (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0)))) * 5.0);
    float _2546 = 1.0 - _2505;
    float _2556 = (0.5 / (((_2434 * ((_2519 * _2546) + _2505)) + 9.9999999392252902907785028219223e-09) + (((_2434 * _2546) + _2505) * _2519))) * _2519;
    float _4620 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
    float _2558 = (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * (_2528 / ((_2532 * _2532) * 3.141590118408203125));
    float _2568 = (((((_2539 * _2456) + _808) * cbLight._m0[_2493].x) * _2558) * _2181) + ((((cbLight._m0[_2405].x * _2147) * ((_2455 * _2456) + _808)) * _2479) * _2194);
    float _2569 = (((((_2539 * _2458) + _810) * cbLight._m0[_2493].y) * _2558) * _2181) + ((((cbLight._m0[_2405].y * _2149) * ((_2455 * _2458) + _810)) * _2479) * _2194);
    float _2570 = (((((_2539 * _2459) + _811) * cbLight._m0[_2493].z) * _2558) * _2181) + ((((cbLight._m0[_2405].z * _2151) * ((_2455 * _2459) + _811)) * _2479) * _2194);
    float _2626;
    float _2628;
    float _2630;
    if (_2234)
    {
        _2626 = _2568;
        _2628 = _2569;
        _2630 = _2570;
    }
    else
    {
        uint _2632 = _2158 + 2u;
        uint _2636 = _2158 + 10u;
        float _2650 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2632].w)) * _649) * 0.949999988079071044921875);
        float _2651 = _2650 * _2650;
        float _2652 = cbLight._m0[_2632].x + _726;
        float _2653 = cbLight._m0[_2632].y + _727;
        float _2654 = cbLight._m0[_2632].z + _728;
        float _2658 = inversesqrt(dot(vec3(_2652, _2653, _2654), vec3(_2652, _2653, _2654)));
        float _2659 = _2658 * _2652;
        float _2660 = _2658 * _2653;
        float _2661 = _2658 * _2654;
        float _2662 = dot(vec3(_646, _647, _648), vec3(cbLight._m0[_2632].xyz));
        float _4631 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
        float _2665 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
        float _2666 = dot(vec3(_646, _647, _648), vec3(_2659, _2660, _2661));
        float _4642 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
        float _2669 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
        float _2670 = dot(vec3(cbLight._m0[_2632].xyz), vec3(_2659, _2660, _2661));
        float _4653 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        float _2674 = _2651 * _2651;
        float _2678 = ((_2669 * _2669) * (_2674 + (-1.0))) + 1.0;
        float _2685 = exp2(log2(1.0 - (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0)))) * 5.0);
        float _2692 = 1.0 - _2651;
        float _2702 = (0.5 / (((_2434 * ((_2665 * _2692) + _2651)) + 9.9999999392252902907785028219223e-09) + (((_2434 * _2692) + _2651) * _2665))) * _2665;
        float _4664 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
        float _2704 = (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))) * (_2674 / ((_2678 * _2678) * 3.141590118408203125));
        float _2705 = isnan(1.0) ? _2173 : (isnan(_2173) ? 1.0 : min(_2173, 1.0));
        _2626 = (((((_2685 * _2456) + _808) * cbLight._m0[_2636].x) * _2704) * _2705) + _2568;
        _2628 = (((((_2685 * _2458) + _810) * cbLight._m0[_2636].y) * _2704) * _2705) + _2569;
        _2630 = (((((_2685 * _2459) + _811) * cbLight._m0[_2636].z) * _2704) * _2705) + _2570;
    }
    float _2736;
    float _2738;
    float _2740;
    if (_2343)
    {
        _2736 = _2626;
        _2738 = _2628;
        _2740 = _2630;
    }
    else
    {
        uint _2747 = _2158 + 3u;
        uint _2751 = _2158 + 11u;
        float _2765 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2747].w)) * _649) * 0.949999988079071044921875);
        float _2766 = _2765 * _2765;
        float _2767 = cbLight._m0[_2747].x + _726;
        float _2768 = cbLight._m0[_2747].y + _727;
        float _2769 = cbLight._m0[_2747].z + _728;
        float _2773 = inversesqrt(dot(vec3(_2767, _2768, _2769), vec3(_2767, _2768, _2769)));
        float _2774 = _2773 * _2767;
        float _2775 = _2773 * _2768;
        float _2776 = _2773 * _2769;
        float _2777 = dot(vec3(_646, _647, _648), vec3(cbLight._m0[_2747].xyz));
        float _4680 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
        float _2780 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
        float _2781 = dot(vec3(_646, _647, _648), vec3(_2774, _2775, _2776));
        float _4691 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
        float _2784 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
        float _2785 = dot(vec3(cbLight._m0[_2747].xyz), vec3(_2774, _2775, _2776));
        float _4702 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
        float _2789 = _2766 * _2766;
        float _2793 = ((_2784 * _2784) * (_2789 + (-1.0))) + 1.0;
        float _2800 = exp2(log2(1.0 - (isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0)))) * 5.0);
        float _2807 = 1.0 - _2766;
        float _2817 = (0.5 / (((_2434 * ((_2780 * _2807) + _2766)) + 9.9999999392252902907785028219223e-09) + (((_2434 * _2807) + _2766) * _2780))) * _2780;
        float _4713 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
        float _2819 = (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0))) * (_2789 / ((_2793 * _2793) * 3.141590118408203125));
        float _2820 = isnan(1.0) ? _2174 : (isnan(_2174) ? 1.0 : min(_2174, 1.0));
        _2736 = (((((_2800 * _2456) + _808) * cbLight._m0[_2751].x) * _2819) * _2820) + _2626;
        _2738 = (((((_2800 * _2458) + _810) * cbLight._m0[_2751].y) * _2819) * _2820) + _2628;
        _2740 = (((((_2800 * _2459) + _811) * cbLight._m0[_2751].z) * _2819) * _2820) + _2630;
    }
    float _2886;
    float _2888;
    float _2890;
    float _2892;
    float _2894;
    float _2896;
    if (_2156.y == 0u)
    {
        uvec4 _2841 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2842 = _2841.x;
        uint _2853 = uint((float(_2841.y) * floor(float(uint(cbSceneParam._m0[85u].y * _747) / _2842))) + floor(float(uint(cbSceneParam._m0[85u].x * _746) / _2842)));
        float _2863 = (log2(_1934 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2864 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
        uint _2867 = uint(isnan(14.0) ? _2864 : (isnan(_2864) ? 14.0 : min(_2864, 14.0)));
        uvec4 _2872 = texelFetch(g_lightClusterGridBuffer, int(((_2867 << 2u) + (_2853 << 6u)) >> 2u));
        uint _2873 = _2872.x;
        uint _2874 = _2841.z;
        float _2953;
        float _2955;
        float _2957;
        float _2959;
        float _2961;
        float _2963;
        if (((((1u << ((_2874 >> 4u) & 15u)) + 4294967295u) & _2873) == 0u) || ((_2874 & 240u) == 0u))
        {
            _2953 = 0.0;
            _2955 = 0.0;
            _2957 = 0.0;
            _2959 = 0.0;
            _2961 = 0.0;
            _2963 = 0.0;
        }
        else
        {
            float _2954;
            float _2956;
            float _2958;
            float _2960;
            float _2962;
            float _2964;
            float _3106 = 0.0;
            float _3107 = 0.0;
            float _3108 = 0.0;
            float _3109 = 0.0;
            float _3110 = 0.0;
            float _3111 = 0.0;
            uint _3112 = 0u;
            uint _3121;
            bool _3122;
            for (;;)
            {
                _3121 = texelFetch(g_lightClassification, int((((_2867 << 5u) + (_2853 << 9u)) + (_3112 << 2u)) >> 2u)).x;
                _3122 = _3121 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3122)
                {
                    frontier_phi_71_pred = _3111;
                    frontier_phi_71_pred_1 = _3110;
                    frontier_phi_71_pred_2 = _3109;
                    frontier_phi_71_pred_3 = _3108;
                    frontier_phi_71_pred_4 = _3107;
                    frontier_phi_71_pred_5 = _3106;
                }
                else
                {
                    float _3251;
                    float _3252;
                    float _3253;
                    float _3254;
                    float _3255;
                    float _3256;
                    uint _3257;
                    _3251 = _3106;
                    _3252 = _3107;
                    _3253 = _3108;
                    _3254 = _3109;
                    _3255 = _3110;
                    _3256 = _3111;
                    _3257 = _3121;
                    float _3178;
                    float _3179;
                    float _3180;
                    float _3181;
                    float _3182;
                    float _3183;
                    for (;;)
                    {
                        uint _3261 = uint(findLSB(_3257)) + (_3112 << 5u);
                        uint _3258 = (_3257 + 4294967295u) & _3257;
                        uint _3263 = _3261 * 48u;
                        vec4 _3277 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3263)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 3u)).x));
                        uint _3283 = (_3261 * 48u) + 4u;
                        vec4 _3296 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3283)).x, texelFetch(g_PointLightRenderingBuffer, int(_3283 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3283 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3283 + 3u)).x));
                        uint _3302 = (_3261 * 48u) + 8u;
                        vec3 _3313 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3302)).x, texelFetch(g_PointLightRenderingBuffer, int(_3302 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3302 + 2u)).x));
                        float _3317 = _3277.x - _1932;
                        float _3318 = _3277.y - _1933;
                        float _3319 = _3277.z - _1934;
                        float _3320 = dot(vec3(_3317, _3318, _3319), vec3(_3317, _3318, _3319));
                        float _3323 = inversesqrt(_3320);
                        float _3324 = _3323 * _3317;
                        float _3325 = _3323 * _3318;
                        float _3326 = _3323 * _3319;
                        float _3327 = dot(vec3(_765, _768, _771), vec3(_3324, _3325, _3326));
                        float _3332 = 1.0 - (_3320 * _3277.w);
                        float _4739 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                        float _3333 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                        float _3334 = sqrt(_3320) * _3296.w;
                        float _3337 = 1.39999997615814208984375 / (_3334 + 1.39999997615814208984375);
                        float _3338 = _3337 * _3337;
                        float _3341 = ((1.0 - _3338) * _3327) + _3338;
                        float _3344 = _3334 * _3334;
                        float _3348 = ((isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0))) * _3333) / ((_3344 * 0.699999988079071044921875) + 1.0);
                        float _3352 = (-0.0) - _1932;
                        float _3353 = (-0.0) - _1933;
                        float _3354 = (-0.0) - _1934;
                        float _3358 = inversesqrt(dot(vec3(_3352, _3353, _3354), vec3(_3352, _3353, _3354)));
                        float _3359 = _3358 * _3352;
                        float _3360 = _3358 * _3353;
                        float _3361 = _3358 * _3354;
                        float _3368 = exp2(log2(1.0 / ((_3344 * 3.5) + 5.0)) * 0.25);
                        float _3369 = 1.0 - _840;
                        float _3376 = sqrt(1.0 - ((1.0 - (_3369 * _3369)) * (1.0 - (_3368 * _3368))));
                        float _3377 = _3376 * _3376;
                        float _3378 = _3377 * _3377;
                        float _3379 = _3359 + _3324;
                        float _3380 = _3360 + _3325;
                        float _3381 = _3361 + _3326;
                        float _3385 = inversesqrt(dot(vec3(_3379, _3380, _3381), vec3(_3379, _3380, _3381)));
                        float _3389 = dot(vec3(_765, _768, _771), vec3(_3359, _3360, _3361));
                        float _4755 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                        float _3392 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
                        float _3393 = dot(vec3(_765, _768, _771), vec3(_3385 * _3379, _3385 * _3380, _3385 * _3381));
                        float _4766 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                        float _3396 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
                        float _3400 = ((_3396 * _3396) * (_3378 + (-1.0))) + 1.0;
                        float _3401 = _3337 * _3377;
                        float _3402 = _3401 * _3401;
                        float _3405 = ((1.0 - _3402) * _3327) + _3402;
                        float _4777 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                        float _3406 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
                        float _3407 = 1.0 - _3377;
                        float _3417 = (0.5 / (((_3406 * ((_3392 * _3407) + _3377)) + 9.9999999392252902907785028219223e-09) + (((_3406 * _3407) + _3377) * _3392))) * _3406;
                        float _4788 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                        float _3428 = (((_3378 * 3.1415927410125732421875) * (isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0)))) / ((_3400 * _3400) * ((_3344 * 2.1991131305694580078125) + 3.141590118408203125))) * _3333;
                        _3181 = (_3348 * _3296.x) + _3254;
                        _3182 = (_3348 * _3296.y) + _3255;
                        _3183 = (_3348 * _3296.z) + _3256;
                        _3178 = (_3428 * _3313.x) + _3251;
                        _3179 = (_3428 * _3313.y) + _3252;
                        _3180 = (_3428 * _3313.z) + _3253;
                        if (_3258 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3251 = _3178;
                            _3252 = _3179;
                            _3253 = _3180;
                            _3254 = _3181;
                            _3255 = _3182;
                            _3256 = _3183;
                            _3257 = _3258;
                        }
                    }
                    frontier_phi_71_pred = _3183;
                    frontier_phi_71_pred_1 = _3182;
                    frontier_phi_71_pred_2 = _3181;
                    frontier_phi_71_pred_3 = _3180;
                    frontier_phi_71_pred_4 = _3179;
                    frontier_phi_71_pred_5 = _3178;
                }
                _2964 = frontier_phi_71_pred;
                _2962 = frontier_phi_71_pred_1;
                _2960 = frontier_phi_71_pred_2;
                _2958 = frontier_phi_71_pred_3;
                _2956 = frontier_phi_71_pred_4;
                _2954 = frontier_phi_71_pred_5;
                uint _3113 = _3112 + 1u;
                if (_3113 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3106 = _2954;
                    _3107 = _2956;
                    _3108 = _2958;
                    _3109 = _2960;
                    _3110 = _2962;
                    _3111 = _2964;
                    _3112 = _3113;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2953 = _2954;
            _2955 = _2956;
            _2957 = _2958;
            _2959 = _2960;
            _2961 = _2962;
            _2963 = _2964;
        }
        uvec4 _2967 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2968 = _2967.z;
        uint _2970 = (_2968 >> 8u) & 15u;
        float _3074;
        float _3076;
        float _3078;
        float _3080;
        float _3082;
        float _3084;
        if (((4294967295u << _2970) & _2873) == 0u)
        {
            _3074 = _2953;
            _3076 = _2955;
            _3078 = _2957;
            _3080 = _2959;
            _3082 = _2961;
            _3084 = _2963;
        }
        else
        {
            float _3099 = inversesqrt(dot(vec3(_1932, _1933, _1934), vec3(_1932, _1933, _1934)));
            float _3100 = _3099 * _1932;
            float _3101 = _3099 * _1933;
            float _3102 = _3099 * _1934;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2970 < ((_2968 >> 12u) & 15u))
            {
                float _3075;
                float _3077;
                float _3079;
                float _3081;
                float _3083;
                float _3085;
                float _3234 = _2953;
                float _3235 = _2955;
                float _3236 = _2957;
                float _3237 = _2959;
                float _3238 = _2961;
                float _3239 = _2963;
                uint _3240 = _2970;
                uint _3249;
                bool _3250;
                for (;;)
                {
                    _3249 = texelFetch(g_lightClassification, int((((_2867 << 5u) + (_2853 << 9u)) + (_3240 << 2u)) >> 2u)).x;
                    _3250 = _3249 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3250)
                    {
                        frontier_phi_82_pred = _3239;
                        frontier_phi_82_pred_1 = _3238;
                        frontier_phi_82_pred_2 = _3237;
                        frontier_phi_82_pred_3 = _3236;
                        frontier_phi_82_pred_4 = _3235;
                        frontier_phi_82_pred_5 = _3234;
                    }
                    else
                    {
                        float _3442;
                        float _3443;
                        float _3444;
                        float _3445;
                        float _3446;
                        float _3447;
                        float _3735;
                        float _3736;
                        float _3737;
                        float _3738;
                        float _3739;
                        float _3740;
                        float _3455 = _3234;
                        float _3456 = _3235;
                        float _3457 = _3236;
                        float _3458 = _3237;
                        float _3459 = _3238;
                        float _3460 = _3239;
                        uint _3461 = _3249;
                        uint _3462;
                        vec4 _3487;
                        float _3488;
                        vec4 _3503;
                        vec3 _3515;
                        vec4 _3530;
                        vec4 _3545;
                        float _3591;
                        bool _3592;
                        for (;;)
                        {
                            uint _3472 = ((_3240 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3461));
                            _3462 = (_3461 + 4294967295u) & _3461;
                            uint _3474 = _3472 * 40u;
                            _3487 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3474)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 3u)).x));
                            _3488 = _3487.w;
                            uint _3490 = (_3472 * 40u) + 4u;
                            _3503 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3490)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 3u)).x));
                            uint _3505 = (_3472 * 40u) + 8u;
                            _3515 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3505)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 2u)).x));
                            uint _3517 = (_3472 * 40u) + 16u;
                            _3530 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3517)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 3u)).x));
                            uint _3532 = (_3472 * 40u) + 20u;
                            _3545 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3532)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 3u)).x));
                            uint _3547 = (_3472 * 40u) + 24u;
                            vec4 _3560 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3547)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 3u)).x));
                            uint _3566 = (_3472 * 40u) + 28u;
                            vec4 _3579 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3566)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 3u)).x));
                            _3591 = fma(_1934, _3579.z, fma(_1933, _3579.y, _3579.x * _1932)) + _3579.w;
                            _3592 = !((fma(_1934, _3560.z, fma(_1933, _3560.y, _3560.x * _1932)) + _3560.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3592)
                            {
                                float _3619 = _3487.x - _1932;
                                float _3620 = _3487.y - _1933;
                                float _3621 = _3487.z - _1934;
                                float _3622 = dot(vec3(_3619, _3620, _3621), vec3(_3619, _3620, _3621));
                                float _3625 = inversesqrt(_3622);
                                float _3626 = _3625 * _3619;
                                float _3627 = _3625 * _3620;
                                float _3628 = _3625 * _3621;
                                float _3632 = 1.0 - (_3622 / (_3488 * _3488));
                                float _4799 = isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0));
                                float _3633 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                                float _3637 = sqrt(_3622) * _3503.w;
                                float _3639 = 1.39999997615814208984375 / (_3637 + 1.39999997615814208984375);
                                float _3640 = _3639 * _3639;
                                float _3643 = ((1.0 - _3640) * dot(vec3(_3626, _3627, _3628), vec3(_765, _768, _771))) + _3640;
                                float _3646 = _3637 * _3637;
                                float _3650 = (fma(_1934, _3530.z, fma(_1933, _3530.y, _3530.x * _1932)) + _3530.w) / _3591;
                                float _3651 = (fma(_1934, _3545.z, fma(_1933, _3545.y, _3545.x * _1932)) + _3545.w) / _3591;
                                float _3655 = 1.0 - dot(vec2(_3650, _3651), vec2(_3650, _3651));
                                float _4815 = isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0));
                                float _3656 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
                                float _3657 = _3656 * (((isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0))) * _3633) / ((_3646 * 0.699999988079071044921875) + 1.0));
                                float _3669 = exp2(log2(1.0 / ((_3646 * 3.5) + 5.0)) * 0.25);
                                float _3670 = 1.0 - _840;
                                float _3677 = sqrt(1.0 - ((1.0 - (_3670 * _3670)) * (1.0 - (_3669 * _3669))));
                                float _3678 = _3677 * _3677;
                                float _3679 = _3678 * _3678;
                                float _3680 = _3626 - _3100;
                                float _3681 = _3627 - _3101;
                                float _3682 = _3628 - _3102;
                                float _3686 = inversesqrt(dot(vec3(_3680, _3681, _3682), vec3(_3680, _3681, _3682)));
                                float _3690 = dot(vec3(_765, _768, _771), vec3((-0.0) - _3100, (-0.0) - _3101, (-0.0) - _3102));
                                float _4826 = isnan(0.0) ? _3690 : (isnan(_3690) ? 0.0 : max(_3690, 0.0));
                                float _3693 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
                                float _3694 = dot(vec3(_765, _768, _771), vec3(_3686 * _3680, _3686 * _3681, _3686 * _3682));
                                float _4837 = isnan(0.0) ? _3694 : (isnan(_3694) ? 0.0 : max(_3694, 0.0));
                                float _3697 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
                                float _3701 = ((_3697 * _3697) * (_3679 + (-1.0))) + 1.0;
                                float _3702 = _3639 * _3678;
                                float _3703 = _3702 * _3702;
                                float _3709 = ((1.0 - _3703) * dot(vec3(_765, _768, _771), vec3(_3626, _3627, _3628))) + _3703;
                                float _4848 = isnan(0.0) ? _3709 : (isnan(_3709) ? 0.0 : max(_3709, 0.0));
                                float _3710 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
                                float _3711 = 1.0 - _3678;
                                float _3721 = (0.5 / (((_3710 * ((_3693 * _3711) + _3678)) + 9.9999999392252902907785028219223e-09) + (((_3710 * _3711) + _3678) * _3693))) * _3710;
                                float _4859 = isnan(0.0) ? _3721 : (isnan(_3721) ? 0.0 : max(_3721, 0.0));
                                float _3731 = (_3656 * _3633) * (((_3679 * 3.1415927410125732421875) * (isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0)))) / ((_3701 * _3701) * ((_3646 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3657 * _3503.z;
                                frontier_phi_88_pred_1 = _3657 * _3503.y;
                                frontier_phi_88_pred_2 = _3657 * _3503.x;
                                frontier_phi_88_pred_3 = _3731 * _3515.z;
                                frontier_phi_88_pred_4 = _3731 * _3515.y;
                                frontier_phi_88_pred_5 = _3731 * _3515.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3740 = frontier_phi_88_pred;
                            _3739 = frontier_phi_88_pred_1;
                            _3738 = frontier_phi_88_pred_2;
                            _3737 = frontier_phi_88_pred_3;
                            _3736 = frontier_phi_88_pred_4;
                            _3735 = frontier_phi_88_pred_5;
                            _3445 = _3738 + _3458;
                            _3446 = _3739 + _3459;
                            _3447 = _3740 + _3460;
                            _3442 = _3735 + _3455;
                            _3443 = _3736 + _3456;
                            _3444 = _3737 + _3457;
                            if (_3462 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3455 = _3442;
                                _3456 = _3443;
                                _3457 = _3444;
                                _3458 = _3445;
                                _3459 = _3446;
                                _3460 = _3447;
                                _3461 = _3462;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3447;
                        frontier_phi_82_pred_1 = _3446;
                        frontier_phi_82_pred_2 = _3445;
                        frontier_phi_82_pred_3 = _3444;
                        frontier_phi_82_pred_4 = _3443;
                        frontier_phi_82_pred_5 = _3442;
                    }
                    _3085 = frontier_phi_82_pred;
                    _3083 = frontier_phi_82_pred_1;
                    _3081 = frontier_phi_82_pred_2;
                    _3079 = frontier_phi_82_pred_3;
                    _3077 = frontier_phi_82_pred_4;
                    _3075 = frontier_phi_82_pred_5;
                    uint _3241 = _3240 + 1u;
                    if (_3241 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3234 = _3075;
                        _3235 = _3077;
                        _3236 = _3079;
                        _3237 = _3081;
                        _3238 = _3083;
                        _3239 = _3085;
                        _3240 = _3241;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3081;
                frontier_phi_63_64_ladder_1 = _3085;
                frontier_phi_63_64_ladder_2 = _3083;
                frontier_phi_63_64_ladder_3 = _3079;
                frontier_phi_63_64_ladder_4 = _3077;
                frontier_phi_63_64_ladder_5 = _3075;
            }
            else
            {
                frontier_phi_63_64_ladder = _2959;
                frontier_phi_63_64_ladder_1 = _2963;
                frontier_phi_63_64_ladder_2 = _2961;
                frontier_phi_63_64_ladder_3 = _2957;
                frontier_phi_63_64_ladder_4 = _2955;
                frontier_phi_63_64_ladder_5 = _2953;
            }
            _3074 = frontier_phi_63_64_ladder_5;
            _3076 = frontier_phi_63_64_ladder_4;
            _3078 = frontier_phi_63_64_ladder_3;
            _3080 = frontier_phi_63_64_ladder;
            _3082 = frontier_phi_63_64_ladder_2;
            _3084 = frontier_phi_63_64_ladder_1;
        }
        float _3089 = isnan(1.0) ? _824 : (isnan(_824) ? 1.0 : min(_824, 1.0));
        _2886 = (_3089 * _3080) + _2398;
        _2888 = (_3089 * _3082) + _2400;
        _2890 = (_3089 * _3084) + _2402;
        _2892 = ((_3074 * _808) * _3089) + _2736;
        _2894 = ((_3076 * _810) * _3089) + _2738;
        _2896 = ((_3078 * _811) * _3089) + _2740;
    }
    else
    {
        _2886 = _2398;
        _2888 = _2400;
        _2890 = _2402;
        _2892 = _2736;
        _2894 = _2738;
        _2896 = _2740;
    }
    float _4875 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _4886 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _4897 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _2913 = ((isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0))) * (_2886 + ((isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0))) * _824))) + ((_2892 + ((isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0))) * _1663)) * cbPerFrame._m0[3u].x);
    float _2914 = ((isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0))) * (_2888 + ((isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))) * _824))) + ((_2894 + ((isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0))) * _1663)) * cbPerFrame._m0[3u].x);
    float _2915 = ((isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0))) * (_2890 + ((isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))) * _824))) + ((_2896 + ((isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0))) * _1663)) * cbPerFrame._m0[3u].x);
    uint _2916 = _244 + 6u;
    float _2924 = _746 / cbSceneParam._m0[86u].x;
    float _2925 = _747 / cbSceneParam._m0[86u].y;
    vec4 _2939 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2924, _2925, (log2((isnan(cbSceneParam._m0[77u].w) ? _668 : (isnan(_668) ? cbSceneParam._m0[77u].w : min(_668, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2941 = _2939.x;
    float _2942 = _2939.y;
    float _2943 = _2939.z;
    float _2944 = _2939.w;
    float _3016;
    float _3018;
    float _3020;
    float _3022;
    if (_668 > cbSceneParam._m0[78u].w)
    {
        float _2978 = isnan(_668) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _668 : min(cbSceneParam._m0[80u].w, _668));
        float _2979 = _2978 / _668;
        float _2990 = _2979 * _719;
        float _2991 = _720 * _2979;
        float _2992 = (-0.0) - _2991;
        float _2994 = _2979 * _721;
        float _2996 = (cbSceneParam._m0[77u].w * _2992) / _2978;
        float _2997 = _2996 + cbSceneParam._m0[79u].w;
        float _2998 = cbSceneParam._m0[79u].w - _2991;
        float _3004 = sqrt(((_2990 * _2990) + (_2991 * _2991)) + (_2994 * _2994));
        float _3007 = (1.0 - (cbSceneParam._m0[77u].w / _2978)) * _3004;
        float _3012 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3014 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3191;
        if (abs((_2992 - _2996) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3191 = ((((_2997 > 0.0) ? exp2(_3012 * _2997) : (2.0 - exp2(_3014 * _2997))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3007;
        }
        else
        {
            float _3135 = 1.0 / cbSceneParam._m0[80u].x;
            float _3136 = isnan(_2998) ? _2997 : (isnan(_2997) ? _2998 : max(_2997, _2998));
            float _3137 = isnan(_2998) ? _2997 : (isnan(_2997) ? _2998 : min(_2997, _2998));
            float _3146 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : min(_3136, 0.0));
            float _3147 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : min(_3137, 0.0));
            _3191 = ((abs(_3004 / _2992) * cbSceneParam._m0[80u].y) * ((((_3146 - _3147) * 2.0) - ((exp2(_3012 * (isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0)))) - exp2(_3012 * (isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0))))) * _3135)) - ((exp2(_3014 * _3146) - exp2(_3014 * _3147)) * _3135))) + (_3007 * cbSceneParam._m0[80u].z);
        }
        vec4 _3193 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2924, _2925, 1.0), 0.0);
        float _3202 = exp2((_3191 * (-1.44269502162933349609375)) * (1.0 - _3193.w));
        float _3203 = log2(_3202);
        float _3219 = log2(_2944);
        _3016 = (exp2(_3219 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3203 * cbSceneParam._m0[78u].x)) * _3193.x) / cbSceneParam._m0[78u].x)) + _2941;
        _3018 = (exp2(_3219 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3203 * cbSceneParam._m0[78u].y)) * _3193.y) / cbSceneParam._m0[78u].y)) + _2942;
        _3020 = (exp2(_3219 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3203 * cbSceneParam._m0[78u].z)) * _3193.z) / cbSceneParam._m0[78u].z)) + _2943;
        _3022 = _3202 * _2944;
    }
    else
    {
        _3016 = _2941;
        _3018 = _2942;
        _3020 = _2943;
        _3022 = _2944;
    }
    bool _3229;
    vec4 _3032;
    vec4 _3054;
    float _3056;
    float _3060;
    float _3061;
    float _3062;
    float _3063;
    bool _3073;
    for (;;)
    {
        _3032 = cbMatDynParam._m0[0u];
        float _3034 = roundEven(_3032.y);
        bool _3035 = _3034 == 3.0;
        float _3036 = log2(_3022);
        float _3043 = exp2(_3036 * cbSceneParam._m0[78u].x) * _2913;
        float _3044 = exp2(_3036 * cbSceneParam._m0[78u].y) * _2914;
        float _3045 = exp2(_3036 * cbSceneParam._m0[78u].z) * _2915;
        float _3052 = _735 + (-0.5);
        _3054 = cbMtdParam._m0[1u];
        _3056 = _3054.y * _3052;
        float _3059 = (_3034 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3060 = _3059 * (_3035 ? _3043 : (_3043 + (cbSceneParam._m0[72u].w * _3016)));
        _3061 = _3059 * (_3035 ? _3044 : (_3044 + (cbSceneParam._m0[72u].w * _3018)));
        _3062 = _3059 * (_3035 ? _3045 : (_3045 + (cbSceneParam._m0[72u].w * _3020)));
        _3063 = _3052 * 0.999000012874603271484375;
        _3073 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3073)
        {
            if ((cbInstanceData._m0[_244 + 7u].x + _3063) < 0.5)
            {
                _3229 = true;
                break;
            }
        }
        uint _3170 = _784 + uint(_3032.w);
        if ((cbInstanceData._m0[_3170].w < 1.0) && ((cbInstanceData._m0[_3170].w + _3063) < 0.5))
        {
            _3229 = true;
            break;
        }
        if ((_3056 + 1.0) < _3054.x)
        {
            _3229 = true;
            break;
        }
        _3229 = false;
        break;
    }
    float _3433;
    if (_3229)
    {
        discard_state = true;
        _3433 = 0.0;
    }
    else
    {
        _3433 = cbInstanceData._m0[_2916].w;
    }
    SV_Target.x = _3060;
    SV_Target.y = _3061;
    SV_Target.z = _3062;
    SV_Target.w = _3433;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2916].w;
    discard_exit();
}


