#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1260;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = _236 * NORMAL.x;
    float _238 = _236 * NORMAL.y;
    float _239 = _236 * NORMAL.z;
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _249 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _249 + 1u;
    uint _258 = _249 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_249].x * cbInstanceData._m0[_249].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _295 = _289.x * cbMtdParam._m0[11u].x;
    float _296 = _289.y * cbMtdParam._m0[11u].y;
    float _297 = _289.z * cbMtdParam._m0[11u].z;
    vec4 _316 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _354 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _356 = _354.x;
    float _368 = dot(vec4(_356, _354.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _385 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_356 - _368) * cbMtdParam._m0[24u].y) + _368) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3871 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _386 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _393 = (_386 * ((_316.x * cbMtdParam._m0[12u].x) - _295)) + _295;
    float _394 = (_386 * ((_316.y * cbMtdParam._m0[12u].y) - _296)) + _296;
    float _395 = (_386 * ((_316.z * cbMtdParam._m0[12u].z) - _297)) + _297;
    vec4 _408 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _425 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _427 = _425.x;
    float _428 = _425.y;
    float _429 = _425.z;
    float _438 = ((_408.z - _429) * _386) + _429;
    float _441 = ((((_408.x - _427) * _386) + _427) * 2.0) + (-1.0);
    float _443 = ((((_408.y - _428) * _386) + _428) * 2.0) + (-1.0);
    float _444 = dot(vec2(_441, _443), vec2(_441, _443));
    float _3882 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _449 = sqrt(1.0 - (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))));
    vec4 _465 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _477 = (((_465.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _441;
    float _478 = (((_465.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _443;
    vec4 _490 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _268) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _269) + cbTextureTilingScale._m0[19u].w));
    float _492 = _490.x;
    float _493 = 1.0 - _492;
    float _521 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_492 - _493) * cbMtdParam._m0[24u].w) + _493) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3893 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _522 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _530 = ((((cbMtdParam._m0[10u].x - _393) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _522) + _393;
    float _531 = ((((cbMtdParam._m0[10u].y - _394) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _522) + _394;
    float _532 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _395)) * _522) + _395;
    vec4 _544 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _558 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _560 = _558.x;
    float _578 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _268) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _269) + cbTextureTilingScale._m0[9u].w)).x - _560) * _386) + _560;
    float _582 = ((_544.x - _578) * cbMtdParam._m0[19u].z) + _578;
    float _584 = _582 - (_582 * _522);
    float _588 = (cbMtdParam._m0[19u].w * (_465.z - _438)) + _438;
    float _592 = ((cbMtdParam._m0[23u].y - _588) * _522) + _588;
    vec4 _611 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _268) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _269) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _613 = _611.x;
    float _614 = _611.y;
    float _618 = dot(vec4(cbMtdParam._m0[29u].yzw, 0.0), vec4(_237, _238, _239, 0.0));
    vec4 _633 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _268) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _269) + cbTextureTilingScale._m0[18u].w));
    float _635 = _633.x;
    float _640 = fract(_633.w + cbPerFrame._m0[22u].x);
    float _642 = (1.0 - _640) * _635;
    float _647 = ((_640 + (-1.0)) + _635) * 9.0;
    float _649 = ((_635 + (-1.0)) + _640) * 9.0;
    float _650 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _651 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _665 = (_642 * ((_633.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _650 : (isnan(_650) ? 3.0 : min(_650, 3.0))) * 3.1415927410125732421875);
    float _667 = (_642 * ((_633.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _651 : (isnan(_651) ? 3.0 : min(_651, 3.0))) * 3.1415927410125732421875);
    float _671 = inversesqrt(dot(vec3(_665, _667, 1.0), vec3(_665, _667, 1.0)));
    float _687 = (((((0.5 - _613) + ((_665 * 0.5) * _671)) * _618) + _613) * 2.0) + (-1.0);
    float _688 = (((((0.5 - _614) + ((_671 * 0.5) * _667)) * _618) + _614) * 2.0) + (-1.0);
    float _689 = dot(vec2(_687, _688), vec2(_687, _688));
    float _3924 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _705 = ((((cbMtdParam._m0[22u].z * _477) - _477) + _687) * _522) + _477;
    float _706 = ((((cbMtdParam._m0[22u].z * _478) - _478) + _688) * _522) + _478;
    float _707 = (_522 * (sqrt(1.0 - (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0)))) - _449)) + _449;
    float _709 = cbMtdParam._m0[22u].x + _465.w;
    float _712 = fma(_707, _237, fma(_706, _243 * TANGENT.x, (_229 * _221) * _705));
    float _715 = fma(_707, _238, fma(_706, _243 * TANGENT.y, (_229 * _222) * _705));
    float _718 = fma(_707, _239, fma(_706, _243 * TANGENT.z, (_229 * _223) * _705));
    float _722 = inversesqrt(dot(vec3(_712, _715, _718), vec3(_712, _715, _718)));
    float _723 = _722 * _712;
    float _724 = _722 * _715;
    float _725 = _722 * _718;
    float _3935 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _726 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    float _3946 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _3957 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _3968 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _3979 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _3990 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _731 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _745 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _785 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _795 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _785);
    float _796 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _785);
    float _797 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _785);
    float _801 = inversesqrt(dot(vec3(_795, _796, _797), vec3(_795, _796, _797)));
    float _802 = _795 * _801;
    float _803 = _796 * _801;
    float _804 = _797 * _801;
    float _810 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _811 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _829 = fma(_725, cbSceneParam._m0[5u].z, fma(_724, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _723));
    float _832 = fma(_725, cbSceneParam._m0[6u].z, fma(_724, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _723));
    float _835 = fma(_725, cbSceneParam._m0[7u].z, fma(_724, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _723));
    uint _849 = (_249 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _855 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0)))) * cbInstanceData._m0[_849].x;
    float _856 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0)))) * cbInstanceData._m0[_849].y;
    float _857 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0)))) * cbInstanceData._m0[_849].z;
    float _4001 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _858 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _4012 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _859 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    float _4023 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _860 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
    float _861 = 1.0 - _731;
    float _862 = _858 * _861;
    float _863 = _859 * _861;
    float _864 = _860 * _861;
    float _869 = (_858 + (-0.039999999105930328369140625)) * _731;
    float _870 = (_859 + (-0.039999999105930328369140625)) * _731;
    float _871 = (_860 + (-0.039999999105930328369140625)) * _731;
    float _872 = _869 + 0.039999999105930328369140625;
    float _874 = _870 + 0.039999999105930328369140625;
    float _875 = _871 + 0.039999999105930328369140625;
    vec4 _884 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _810, cbSceneParam._m0[86u].y * _811));
    float _888 = ((isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * TEXCOORD_5.w) * _884.x;
    float _889 = dot(vec3(_723, _724, _725), vec3(_802, _803, _804));
    float _892 = _889 * 2.0;
    float _896 = (_892 * _723) - _802;
    float _897 = (_892 * _724) - _803;
    float _898 = (_892 * _725) - _804;
    float _902 = abs(dot(vec3(_802, _803, _804), vec3(_723, _724, _725)));
    float _4034 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _904 = sqrt(_726);
    float _916 = exp2((_904 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_904 * 3.0));
    float _922 = (1.0 - _916) * ((_904 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _923 = _916 * _904;
    float _951 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _955 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _959 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1259;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _985 = fma(_959, cbModelParam._m0[26u].z, fma(_955, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _951));
        float _989 = fma(_959, cbModelParam._m0[27u].z, fma(_955, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _951));
        float _993 = fma(_959, cbModelParam._m0[28u].z, fma(_955, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _951));
        float _1017 = _951 + _723;
        float _1018 = _955 + _724;
        float _1019 = _959 + _725;
        float _1029 = fma(_1019, cbModelParam._m0[26u].z, fma(_1018, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1017)) - _985;
        float _1030 = fma(_1019, cbModelParam._m0[27u].z, fma(_1018, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1017)) - _989;
        float _1031 = fma(_1019, cbModelParam._m0[28u].z, fma(_1018, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1017)) - _993;
        float _1035 = inversesqrt(dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031)));
        float _1048 = ((_1035 * _1029) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_985 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1049 = ((_1035 * _1030) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_989 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1050 = ((_1035 * _1031) / cbModelParam._m0[34u].z) + ((((((_993 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        float _1087 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1053.x + (-0.5));
        float _1089 = _1087 * (_1053.y + (-0.5));
        float _1090 = _1087 * (_1053.z + (-0.5));
        float _1097 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1060.x + (-0.5));
        float _1099 = _1097 * (_1060.y + (-0.5));
        float _1100 = _1097 * (_1060.z + (-0.5));
        float _1107 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1067.x + (-0.5));
        float _1109 = _1107 * (_1067.y + (-0.5));
        float _1110 = _1107 * (_1067.z + (-0.5));
        float _1117 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1074.x + (-0.5));
        float _1119 = _1117 * (_1074.y + (-0.5));
        float _1120 = _1117 * (_1074.z + (-0.5));
        float _1121 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1122 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1123 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1124 = _1088 * 0.5;
        float _1125 = _1098 * 0.5;
        float _1126 = _1108 * 0.5;
        float _1127 = dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126));
        float _1132 = (_1127 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1127);
        float _1141 = (dot(vec3(_723, _724, _725), vec3(_1132 * _1124, _1132 * _1125, _1132 * _1126)) + 1.0) * 0.5;
        float _4060 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1151 = sqrt(((_1125 * _1125) + (_1124 * _1124)) + (_1126 * _1126)) / (_1121 + 9.9999997473787516355514526367188e-06);
        float _4071 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1153 = _1152 * 2.0;
        float _1157 = (1.0 - _1152) / (_1152 + 1.0);
        float _4082 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1167 = ((((1.0 - _1158) * (_1153 + 2.0)) * exp2(log2(isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_1153 + 1.0))) + _1158) * _1121;
        float _1168 = _1089 * 0.5;
        float _1169 = _1099 * 0.5;
        float _1170 = _1109 * 0.5;
        float _1171 = dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170));
        float _1176 = (_1171 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1171);
        float _1184 = (dot(vec3(_723, _724, _725), vec3(_1176 * _1168, _1176 * _1169, _1176 * _1170)) + 1.0) * 0.5;
        float _4093 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1193 = sqrt(((_1169 * _1169) + (_1168 * _1168)) + (_1170 * _1170)) / (_1122 + 9.9999997473787516355514526367188e-06);
        float _4104 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1195 = _1194 * 2.0;
        float _1199 = (1.0 - _1194) / (_1194 + 1.0);
        float _4115 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1209 = ((((1.0 - _1200) * (_1195 + 2.0)) * exp2(log2(isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * (_1195 + 1.0))) + _1200) * _1122;
        float _1210 = _1090 * 0.5;
        float _1211 = _1100 * 0.5;
        float _1212 = _1110 * 0.5;
        float _1213 = dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212));
        float _1218 = (_1213 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1213);
        float _1226 = (dot(vec3(_723, _724, _725), vec3(_1218 * _1210, _1218 * _1211, _1218 * _1212)) + 1.0) * 0.5;
        float _4126 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1235 = sqrt(((_1211 * _1211) + (_1210 * _1210)) + (_1212 * _1212)) / (_1123 + 9.9999997473787516355514526367188e-06);
        float _4137 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1237 = _1236 * 2.0;
        float _1241 = (1.0 - _1236) / (_1236 + 1.0);
        float _4148 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1251 = ((((1.0 - _1242) * (_1237 + 2.0)) * exp2(log2(isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_1237 + 1.0))) + _1242) * _1123;
        _1259 = _1090;
        _1261 = _1089;
        _1262 = _1088;
        _1263 = _1100;
        _1264 = _1099;
        _1265 = _1098;
        _1266 = _1110;
        _1267 = _1109;
        _1268 = _1108;
        _1269 = _1123;
        _1270 = _1122;
        _1271 = _1121;
        _1272 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)));
        _1273 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)));
        _1274 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)));
    }
    else
    {
        _1259 = _1260;
        _1261 = _1260;
        _1262 = _1260;
        _1263 = _1260;
        _1264 = _1260;
        _1265 = _1260;
        _1266 = _1260;
        _1267 = _1260;
        _1268 = _1260;
        _1269 = _1260;
        _1270 = _1260;
        _1271 = _1260;
        _1272 = 0.0;
        _1273 = 0.0;
        _1274 = 0.0;
    }
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1299 = fma(_959, cbModelParam._m0[30u].z, fma(_955, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _951));
        float _1303 = fma(_959, cbModelParam._m0[31u].z, fma(_955, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _951));
        float _1307 = fma(_959, cbModelParam._m0[32u].z, fma(_955, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _951));
        float _1330 = _951 + _723;
        float _1331 = _955 + _724;
        float _1332 = _959 + _725;
        float _1342 = fma(_1332, cbModelParam._m0[30u].z, fma(_1331, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1330)) - _1299;
        float _1343 = fma(_1332, cbModelParam._m0[31u].z, fma(_1331, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1330)) - _1303;
        float _1344 = fma(_1332, cbModelParam._m0[32u].z, fma(_1331, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1330)) - _1307;
        float _1348 = inversesqrt(dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344)));
        float _1361 = ((_1348 * _1342) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1299 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1362 = ((_1348 * _1343) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1303 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1363 = ((_1348 * _1344) / cbModelParam._m0[35u].z) + ((((((_1307 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1365 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        vec4 _1372 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        vec4 _1379 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        vec4 _1386 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        float _1398 = exp2((_1365.w + (-0.5)) * 20.0) * 2.0;
        float _1399 = _1398 * (_1365.x + (-0.5));
        float _1400 = _1398 * (_1365.y + (-0.5));
        float _1401 = _1398 * (_1365.z + (-0.5));
        float _1408 = exp2((_1372.w + (-0.5)) * 20.0) * 2.0;
        float _1409 = _1408 * (_1372.x + (-0.5));
        float _1410 = _1408 * (_1372.y + (-0.5));
        float _1411 = _1408 * (_1372.z + (-0.5));
        float _1418 = exp2((_1379.w + (-0.5)) * 20.0) * 2.0;
        float _1419 = _1418 * (_1379.x + (-0.5));
        float _1420 = _1418 * (_1379.y + (-0.5));
        float _1421 = _1418 * (_1379.z + (-0.5));
        float _1428 = exp2((_1386.w + (-0.5)) * 20.0) * 2.0;
        float _1429 = _1428 * (_1386.x + (-0.5));
        float _1430 = _1428 * (_1386.y + (-0.5));
        float _1431 = _1428 * (_1386.z + (-0.5));
        float _1432 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1433 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1434 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1435 = _1399 * 0.5;
        float _1436 = _1409 * 0.5;
        float _1437 = _1419 * 0.5;
        float _1438 = dot(vec3(_1435, _1436, _1437), vec3(_1435, _1436, _1437));
        float _1443 = (_1438 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1438);
        float _1451 = (dot(vec3(_723, _724, _725), vec3(_1443 * _1435, _1443 * _1436, _1443 * _1437)) + 1.0) * 0.5;
        float _4189 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1460 = sqrt(((_1436 * _1436) + (_1435 * _1435)) + (_1437 * _1437)) / (_1432 + 9.9999997473787516355514526367188e-06);
        float _4200 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1462 = _1461 * 2.0;
        float _1466 = (1.0 - _1461) / (_1461 + 1.0);
        float _4211 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _1476 = ((((1.0 - _1467) * (_1462 + 2.0)) * exp2(log2(isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_1462 + 1.0))) + _1467) * _1432;
        float _1477 = _1400 * 0.5;
        float _1478 = _1410 * 0.5;
        float _1479 = _1420 * 0.5;
        float _1480 = dot(vec3(_1477, _1478, _1479), vec3(_1477, _1478, _1479));
        float _1485 = (_1480 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1480);
        float _1493 = (dot(vec3(_723, _724, _725), vec3(_1485 * _1477, _1485 * _1478, _1485 * _1479)) + 1.0) * 0.5;
        float _4222 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1502 = sqrt(((_1478 * _1478) + (_1477 * _1477)) + (_1479 * _1479)) / (_1433 + 9.9999997473787516355514526367188e-06);
        float _4233 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1504 = _1503 * 2.0;
        float _1508 = (1.0 - _1503) / (_1503 + 1.0);
        float _4244 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _1518 = ((((1.0 - _1509) * (_1504 + 2.0)) * exp2(log2(isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (_1504 + 1.0))) + _1509) * _1433;
        float _1519 = _1401 * 0.5;
        float _1520 = _1411 * 0.5;
        float _1521 = _1421 * 0.5;
        float _1522 = dot(vec3(_1519, _1520, _1521), vec3(_1519, _1520, _1521));
        float _1527 = (_1522 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1522);
        float _1535 = (dot(vec3(_723, _724, _725), vec3(_1527 * _1519, _1527 * _1520, _1527 * _1521)) + 1.0) * 0.5;
        float _4255 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1544 = sqrt(((_1520 * _1520) + (_1519 * _1519)) + (_1521 * _1521)) / (_1434 + 9.9999997473787516355514526367188e-06);
        float _4266 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1546 = _1545 * 2.0;
        float _1550 = (1.0 - _1545) / (_1545 + 1.0);
        float _4277 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1560 = ((((1.0 - _1551) * (_1546 + 2.0)) * exp2(log2(isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_1546 + 1.0))) + _1551) * _1434;
        _1568 = _1401;
        _1569 = _1400;
        _1570 = _1399;
        _1571 = _1411;
        _1572 = _1410;
        _1573 = _1409;
        _1574 = _1421;
        _1575 = _1420;
        _1576 = _1419;
        _1577 = _1434;
        _1578 = _1433;
        _1579 = _1432;
        _1580 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)));
        _1581 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)));
        _1582 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)));
    }
    else
    {
        _1568 = _1260;
        _1569 = _1260;
        _1570 = _1260;
        _1571 = _1260;
        _1572 = _1260;
        _1573 = _1260;
        _1574 = _1260;
        _1575 = _1260;
        _1576 = _1260;
        _1577 = _1260;
        _1578 = _1260;
        _1579 = _1260;
        _1580 = 0.0;
        _1581 = 0.0;
        _1582 = 0.0;
    }
    float _1592 = (cbModelParam._m0[1u].x * (_1580 - _1272)) + _1272;
    float _1593 = (cbModelParam._m0[1u].x * (_1581 - _1273)) + _1273;
    float _1594 = (cbModelParam._m0[1u].x * (_1582 - _1274)) + _1274;
    float _1615 = fma(_1594, cbSceneParam._m0[89u].z, fma(_1593, cbSceneParam._m0[89u].y, _1592 * cbSceneParam._m0[89u].x));
    float _1618 = fma(_1594, cbSceneParam._m0[90u].z, fma(_1593, cbSceneParam._m0[90u].y, _1592 * cbSceneParam._m0[90u].x));
    float _1621 = fma(_1594, cbSceneParam._m0[91u].z, fma(_1593, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1592));
    float _1636 = _896 * 0.5;
    float _1637 = _897 * 0.5;
    float _1638 = _898 * 0.5;
    float _1639 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1570, _1573, _1576, _1579));
    float _1642 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1569, _1572, _1575, _1578));
    float _1645 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1568, _1571, _1574, _1577));
    float _1679;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1652 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1259, _1263, _1266, _1269));
        float _1656 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1261, _1264, _1267, _1270));
        float _1660 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1262, _1265, _1268, _1271));
        float _1667 = dot(vec4(cbModelParam._m0[39u]), vec4(_1636, _1637, _1638, 1.0));
        _1679 = dot(vec3(isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)), isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)), isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1667) ? 0.0 : (isnan(0.0) ? _1667 : max(0.0, _1667))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1679 = 1.0;
    }
    float _1690;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1681 = dot(vec4(cbModelParam._m0[40u]), vec4(_1636, _1637, _1638, 1.0));
        _1690 = dot(vec3(isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)), isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)), isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1681) ? 0.0 : (isnan(0.0) ? _1681 : max(0.0, _1681))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1690 = 1.0;
    }
    float _1694 = (_1690 * cbModelParam._m0[1u].x) + (_1679 * (1.0 - cbModelParam._m0[1u].x));
    float _1704 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _726);
    float _1705 = isnan(_1704) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1704 : min(cbModelParam._m0[25u].z, _1704));
    float _1787;
    float _1789;
    float _1791;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1754 = fma(_959, cbModelParam._m0[13u].z, fma(_955, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _951)) + cbModelParam._m0[13u].w;
        float _1758 = fma(_959, cbModelParam._m0[14u].z, fma(_955, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _951)) + cbModelParam._m0[14u].w;
        float _1762 = fma(_959, cbModelParam._m0[15u].z, fma(_955, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _951)) + cbModelParam._m0[15u].w;
        float _1765 = fma(_898, cbModelParam._m0[13u].z, fma(_897, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _896));
        float _1768 = fma(_898, cbModelParam._m0[14u].z, fma(_897, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _896));
        float _1771 = fma(_898, cbModelParam._m0[15u].z, fma(_897, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _896));
        float _1799;
        if (_1765 > 0.0)
        {
            _1799 = abs((1.0 - _1754) / _1765);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1765 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1754 + 1.0) / _1765);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1799 = frontier_phi_14_12_ladder;
        }
        float _1971;
        if (_1768 > 0.0)
        {
            _1971 = abs((1.0 - _1758) / _1768);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1768 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1758 + 1.0) / _1768);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1971 = frontier_phi_23_19_ladder;
        }
        float _2266;
        if (_1771 > 0.0)
        {
            _2266 = abs((1.0 - _1762) / _1771);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1771 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1762 + 1.0) / _1771);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2266 = frontier_phi_35_30_ladder;
        }
        float _2268 = isnan(_1971) ? _1799 : (isnan(_1799) ? _1971 : min(_1799, _1971));
        float _2269 = isnan(_2266) ? _2268 : (isnan(_2268) ? _2266 : min(_2268, _2266));
        float _2273 = (_2269 * _1765) + _1754;
        float _2274 = (_2269 * _1768) + _1758;
        float _2275 = (_2269 * _1771) + _1762;
        float _2276 = _2269 * 9.9999997473787516355514526367188e-05;
        float _2278 = (-1.0) - _2276;
        float _2280 = _2276 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2275 > _2280) || ((_2275 < _2278) || ((_2274 > _2280) || ((_2274 < _2278) || ((_2273 < _2278) || (_2273 > _2280))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2420 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2275, cbModelParam._m0[9u].z, fma(_2274, cbModelParam._m0[9u].y, _2273 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2275, cbModelParam._m0[10u].z, fma(_2274, cbModelParam._m0[10u].y, _2273 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2275, cbModelParam._m0[11u].z, fma(_2274, cbModelParam._m0[11u].y, _2273 * cbModelParam._m0[11u].x))), _1705);
            frontier_phi_13_35_ladder = _2420.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2420.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2420.x * cbModelParam._m0[1u].y;
        }
        _1787 = frontier_phi_13_35_ladder_2;
        _1789 = frontier_phi_13_35_ladder_1;
        _1791 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1775 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_896, _897, _898), _1705);
        _1787 = _1775.x * cbModelParam._m0[1u].y;
        _1789 = _1775.y * cbModelParam._m0[1u].y;
        _1791 = _1775.z * cbModelParam._m0[1u].y;
    }
    float _1795 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _726);
    float _1796 = isnan(_1795) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1795 : min(cbModelParam._m0[25u].w, _1795));
    float _1886;
    float _1888;
    float _1890;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1850 = fma(_959, cbModelParam._m0[21u].z, fma(_955, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _951)) + cbModelParam._m0[21u].w;
        float _1854 = fma(_959, cbModelParam._m0[22u].z, fma(_955, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _951)) + cbModelParam._m0[22u].w;
        float _1858 = fma(_959, cbModelParam._m0[23u].z, fma(_955, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _951)) + cbModelParam._m0[23u].w;
        float _1861 = fma(_898, cbModelParam._m0[21u].z, fma(_897, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _896));
        float _1864 = fma(_898, cbModelParam._m0[22u].z, fma(_897, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _896));
        float _1867 = fma(_898, cbModelParam._m0[23u].z, fma(_897, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _896));
        float _1976;
        if (_1861 > 0.0)
        {
            _1976 = abs((1.0 - _1850) / _1861);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1850 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1976 = frontier_phi_25_21_ladder;
        }
        float _2293;
        if (_1864 > 0.0)
        {
            _2293 = abs((1.0 - _1854) / _1864);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1864 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1854 + 1.0) / _1864);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2293 = frontier_phi_37_32_ladder;
        }
        float _2631;
        if (_1867 > 0.0)
        {
            _2631 = abs((1.0 - _1858) / _1867);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1867 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1858 + 1.0) / _1867);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2631 = frontier_phi_47_44_ladder;
        }
        float _2633 = isnan(_2293) ? _1976 : (isnan(_1976) ? _2293 : min(_1976, _2293));
        float _2634 = isnan(_2631) ? _2633 : (isnan(_2633) ? _2631 : min(_2633, _2631));
        float _2638 = (_2634 * _1861) + _1850;
        float _2639 = (_2634 * _1864) + _1854;
        float _2640 = (_2634 * _1867) + _1858;
        float _2641 = _2634 * 9.9999997473787516355514526367188e-05;
        float _2642 = (-1.0) - _2641;
        float _2644 = _2641 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2640 > _2644) || ((_2640 < _2642) || ((_2639 > _2644) || ((_2639 < _2642) || ((_2638 < _2642) || (_2638 > _2644))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2762 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2640, cbModelParam._m0[17u].z, fma(_2639, cbModelParam._m0[17u].y, _2638 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2640, cbModelParam._m0[18u].z, fma(_2639, cbModelParam._m0[18u].y, _2638 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2640, cbModelParam._m0[19u].z, fma(_2639, cbModelParam._m0[19u].y, _2638 * cbModelParam._m0[19u].x))), _1796);
            frontier_phi_22_47_ladder = _2762.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2762.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2762.x * cbModelParam._m0[1u].z;
        }
        _1886 = frontier_phi_22_47_ladder_2;
        _1888 = frontier_phi_22_47_ladder_1;
        _1890 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1870 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_896, _897, _898), _1796);
        _1886 = _1870.x * cbModelParam._m0[1u].z;
        _1888 = _1870.y * cbModelParam._m0[1u].z;
        _1890 = _1870.z * cbModelParam._m0[1u].z;
    }
    float _1903 = (((_922 * _872) + _923) * _888) * ((cbModelParam._m0[1u].w * (_1886 - _1787)) + _1787);
    float _1905 = (((_922 * _874) + _923) * _888) * ((cbModelParam._m0[1u].w * (_1888 - _1789)) + _1789);
    float _1907 = (((_922 * _875) + _923) * _888) * ((cbModelParam._m0[1u].w * (_1890 - _1791)) + _1791);
    float _1910 = fma(_1907, cbSceneParam._m0[89u].z, fma(_1905, cbSceneParam._m0[89u].y, _1903 * cbSceneParam._m0[89u].x));
    float _1913 = fma(_1907, cbSceneParam._m0[90u].z, fma(_1905, cbSceneParam._m0[90u].y, _1903 * cbSceneParam._m0[90u].x));
    float _1916 = fma(_1907, cbSceneParam._m0[91u].z, fma(_1905, cbSceneParam._m0[91u].y, _1903 * cbSceneParam._m0[91u].x));
    float _1950 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1954 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1958 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1962 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1963 = _1950 / _1962;
    float _1964 = _1954 / _1962;
    float _1965 = _1958 / _1962;
    float _2112;
    float _2113;
    float _2114;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1992 = ((uint(_1965 > cbSceneParam._m0[59u].y) + uint(_1965 > cbSceneParam._m0[59u].x)) + uint(_1965 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1993 = _1992 + 43u;
        uint _2001 = _1992 + 44u;
        uint _2009 = _1992 + 45u;
        uint _2017 = _1992 + 46u;
        float _2028 = fma(_1962, cbSceneParam._m0[_1993].w, fma(_1958, cbSceneParam._m0[_1993].z, fma(_1954, cbSceneParam._m0[_1993].y, _1950 * cbSceneParam._m0[_1993].x)));
        float _2032 = fma(_1962, cbSceneParam._m0[_2001].w, fma(_1958, cbSceneParam._m0[_2001].z, fma(_1954, cbSceneParam._m0[_2001].y, _1950 * cbSceneParam._m0[_2001].x)));
        float _2040 = fma(_1962, cbSceneParam._m0[_2017].w, fma(_1958, cbSceneParam._m0[_2017].z, fma(_1954, cbSceneParam._m0[_2017].y, _1950 * cbSceneParam._m0[_2017].x)));
        float _2045 = cbSceneParam._m0[33u].z * _2040;
        float _2047 = cbSceneParam._m0[33u].w * _2040;
        float _2050 = fma(_1962, cbSceneParam._m0[_2009].w, fma(_1958, cbSceneParam._m0[_2009].z, fma(_1954, cbSceneParam._m0[_2009].y, _1950 * cbSceneParam._m0[_2009].x))) / _2040;
        float _2098 = (cbSceneParam._m0[33u].x - sqrt(((_1964 * _1964) + (_1963 * _1963)) + (_1965 * _1965))) * cbSceneParam._m0[33u].y;
        float _4403 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
        float _2105 = (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2045 + _2028) / _2040, (_2047 + _2032) / _2040), _2050), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2047 + _2028) / _2040, (_2032 - _2045) / _2040), _2050), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2028 - _2045) / _2040, (_2032 - _2047) / _2040), _2050), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2028 - _2047) / _2040, (_2045 + _2032) / _2040), _2050), 0.0)).x), vec4(0.25)));
        _2112 = 1.0 - (_2105 * cbSceneParam._m0[34u].x);
        _2113 = 1.0 - (_2105 * cbSceneParam._m0[34u].y);
        _2114 = 1.0 - (_2105 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2112 = 1.0;
        _2113 = 1.0;
        _2114 = 1.0;
    }
    float _2178;
    float _2180;
    float _2182;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2166 = fma(_1962, cbSceneParam._m0[63u].w, fma(_1958, cbSceneParam._m0[63u].z, fma(_1954, cbSceneParam._m0[63u].y, _1950 * cbSceneParam._m0[63u].x)));
        float _2167 = fma(_1962, cbSceneParam._m0[60u].w, fma(_1958, cbSceneParam._m0[60u].z, fma(_1954, cbSceneParam._m0[60u].y, _1950 * cbSceneParam._m0[60u].x))) / _2166;
        float _2168 = fma(_1962, cbSceneParam._m0[61u].w, fma(_1958, cbSceneParam._m0[61u].z, fma(_1954, cbSceneParam._m0[61u].y, _1950 * cbSceneParam._m0[61u].x))) / _2166;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2167 >= cbSceneParam._m0[64u].x) && (_2168 >= cbSceneParam._m0[64u].y)) && (_2167 <= cbSceneParam._m0[64u].z)) && (_2168 <= cbSceneParam._m0[64u].w))
        {
            float _2306 = fma(_1962, cbSceneParam._m0[62u].w, fma(_1958, cbSceneParam._m0[62u].z, fma(_1954, cbSceneParam._m0[62u].y, _1950 * cbSceneParam._m0[62u].x))) / _2166;
            float _2310 = isnan(cbSceneParam._m0[41u].w) ? _2306 : (isnan(_2306) ? cbSceneParam._m0[41u].w : max(_2306, cbSceneParam._m0[41u].w));
            float _2353 = (cbSceneParam._m0[33u].x - sqrt(((_1964 * _1964) + (_1963 * _1963)) + (_1965 * _1965))) * cbSceneParam._m0[33u].y;
            float _4419 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
            float _2360 = (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2167, cbSceneParam._m0[33u].w + _2168), _2310), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2167, _2168 - cbSceneParam._m0[33u].z), _2310), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2167 - cbSceneParam._m0[33u].z, _2168 - cbSceneParam._m0[33u].w), _2310), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2167 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2168), _2310), 0.0)).x), vec4(0.25)));
            float _2364 = 1.0 - (_2360 * cbSceneParam._m0[34u].x);
            float _2365 = 1.0 - (_2360 * cbSceneParam._m0[34u].y);
            float _2366 = 1.0 - (_2360 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2366) ? _2114 : (isnan(_2114) ? _2366 : min(_2114, _2366));
            frontier_phi_34_33_ladder_1 = isnan(_2365) ? _2113 : (isnan(_2113) ? _2365 : min(_2113, _2365));
            frontier_phi_34_33_ladder_2 = isnan(_2364) ? _2112 : (isnan(_2112) ? _2364 : min(_2112, _2364));
        }
        else
        {
            frontier_phi_34_33_ladder = _2114;
            frontier_phi_34_33_ladder_1 = _2113;
            frontier_phi_34_33_ladder_2 = _2112;
        }
        _2178 = frontier_phi_34_33_ladder_2;
        _2180 = frontier_phi_34_33_ladder_1;
        _2182 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2178 = _2112;
        _2180 = _2113;
        _2182 = _2114;
    }
    uvec4 _2187 = floatBitsToUint(cbInstanceData._m0[_249 + 5u]);
    uint _2189 = _2187.x * 14u;
    uint _2190 = _2189 + 13u;
    float _2197 = _888 + (-1.0);
    float _2202 = (cbLight._m0[_2190].x * _2197) + 1.0;
    float _2203 = (cbLight._m0[_2190].y * _2197) + 1.0;
    float _2204 = (cbLight._m0[_2190].z * _2197) + 1.0;
    float _2205 = (cbLight._m0[_2190].w * _2197) + 1.0;
    uint _2206 = _2189 + 5u;
    float _2212 = isnan(1.0) ? _2203 : (isnan(_2203) ? 1.0 : min(_2203, 1.0));
    uint _2216 = _2189 + 4u;
    float _2225 = isnan(1.0) ? _2202 : (isnan(_2202) ? 1.0 : min(_2202, 1.0));
    uint _2229 = _2189 | 1u;
    float _2240 = dot(vec3(cbLight._m0[_2189].xyz), vec3(_723, _724, _725));
    float _2243 = dot(vec3(cbLight._m0[_2229].xyz), vec3(_723, _724, _725));
    float _4455 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _4466 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2248 = (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * 0.3183098733425140380859375;
    float _2250 = (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * 0.3183098733425140380859375;
    float _2257 = ((cbLight._m0[_2206].x * _2212) * _2250) + (((cbLight._m0[_2216].x * _2178) * _2225) * _2248);
    float _2258 = ((_2212 * cbLight._m0[_2206].y) * _2250) + (((cbLight._m0[_2216].y * _2180) * _2225) * _2248);
    float _2259 = ((_2212 * cbLight._m0[_2206].z) * _2250) + (((cbLight._m0[_2216].z * _2182) * _2225) * _2248);
    uvec4 _2263 = floatBitsToUint(cbLight._m0[_2189 + 12u]);
    bool _2265 = _2263.x == 0u;
    float _2367;
    float _2369;
    float _2371;
    if (_2265)
    {
        _2367 = _2257;
        _2369 = _2258;
        _2371 = _2259;
    }
    else
    {
        uint _2375 = _2189 + 6u;
        float _2391 = (dot(vec3(cbLight._m0[_2189 + 2u].xyz), vec3(_723, _724, _725)) * 0.5) + 0.5;
        float _2392 = _2391 * _2391;
        float _4477 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2393 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _2394 = isnan(1.0) ? _2204 : (isnan(_2204) ? 1.0 : min(_2204, 1.0));
        _2367 = (((cbLight._m0[_2375].x * 0.3183098733425140380859375) * _2393) * _2394) + _2257;
        _2369 = (((cbLight._m0[_2375].y * 0.3183098733425140380859375) * _2393) * _2394) + _2258;
        _2371 = (((cbLight._m0[_2375].z * 0.3183098733425140380859375) * _2393) * _2394) + _2259;
    }
    bool _2374 = _2263.y == 0u;
    float _2429;
    float _2431;
    float _2433;
    if (_2374)
    {
        _2429 = _2367;
        _2431 = _2369;
        _2433 = _2371;
    }
    else
    {
        uint _2602 = _2189 + 7u;
        float _2618 = (dot(vec3(cbLight._m0[_2189 + 3u].xyz), vec3(_723, _724, _725)) * 0.5) + 0.5;
        float _2619 = _2618 * _2618;
        float _4493 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        float _2620 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _2621 = isnan(1.0) ? _2205 : (isnan(_2205) ? 1.0 : min(_2205, 1.0));
        _2429 = (((cbLight._m0[_2602].x * 0.3183098733425140380859375) * _2620) * _2621) + _2367;
        _2431 = (((cbLight._m0[_2602].y * 0.3183098733425140380859375) * _2620) * _2621) + _2369;
        _2433 = (((cbLight._m0[_2602].z * 0.3183098733425140380859375) * _2620) * _2621) + _2371;
    }
    uint _2436 = _2189 + 8u;
    float _2449 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2189].w)) * _726) * 0.949999988079071044921875);
    float _2450 = _2449 * _2449;
    float _2451 = cbLight._m0[_2189].x + _802;
    float _2452 = cbLight._m0[_2189].y + _803;
    float _2453 = cbLight._m0[_2189].z + _804;
    float _2457 = inversesqrt(dot(vec3(_2451, _2452, _2453), vec3(_2451, _2452, _2453)));
    float _2458 = _2457 * _2451;
    float _2459 = _2457 * _2452;
    float _2460 = _2457 * _2453;
    float _2461 = dot(vec3(_723, _724, _725), vec3(cbLight._m0[_2189].xyz));
    float _4509 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _2464 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
    float _4520 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _2465 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
    float _2466 = dot(vec3(_723, _724, _725), vec3(_2458, _2459, _2460));
    float _4531 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
    float _2469 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
    float _2470 = dot(vec3(cbLight._m0[_2189].xyz), vec3(_2458, _2459, _2460));
    float _4542 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
    float _2474 = _2450 * _2450;
    float _2478 = ((_2469 * _2469) * (_2474 + (-1.0))) + 1.0;
    float _2486 = exp2(log2(1.0 - (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0)))) * 5.0);
    float _2487 = 0.959999978542327880859375 - _869;
    float _2489 = 0.959999978542327880859375 - _870;
    float _2490 = 0.959999978542327880859375 - _871;
    float _2497 = 1.0 - _2450;
    float _2508 = (0.5 / (((_2465 * ((_2464 * _2497) + _2450)) + 9.9999999392252902907785028219223e-09) + (((_2465 * _2497) + _2450) * _2464))) * _2464;
    float _4553 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
    float _2510 = (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * (_2474 / ((_2478 * _2478) * 3.141590118408203125));
    uint _2524 = _2189 + 9u;
    float _2535 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2229].w)) * _726) * 0.949999988079071044921875);
    float _2536 = _2535 * _2535;
    float _2537 = cbLight._m0[_2229].x + _802;
    float _2538 = cbLight._m0[_2229].y + _803;
    float _2539 = cbLight._m0[_2229].z + _804;
    float _2543 = inversesqrt(dot(vec3(_2537, _2538, _2539), vec3(_2537, _2538, _2539)));
    float _2544 = _2543 * _2537;
    float _2545 = _2543 * _2538;
    float _2546 = _2543 * _2539;
    float _2547 = dot(vec3(_723, _724, _725), vec3(cbLight._m0[_2229].xyz));
    float _4564 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
    float _2550 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
    float _2551 = dot(vec3(_723, _724, _725), vec3(_2544, _2545, _2546));
    float _4575 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
    float _2554 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
    float _2555 = dot(vec3(cbLight._m0[_2229].xyz), vec3(_2544, _2545, _2546));
    float _4586 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
    float _2559 = _2536 * _2536;
    float _2563 = ((_2554 * _2554) * (_2559 + (-1.0))) + 1.0;
    float _2570 = exp2(log2(1.0 - (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0)))) * 5.0);
    float _2577 = 1.0 - _2536;
    float _2587 = (0.5 / (((_2465 * ((_2550 * _2577) + _2536)) + 9.9999999392252902907785028219223e-09) + (((_2465 * _2577) + _2536) * _2550))) * _2550;
    float _4597 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
    float _2589 = (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * (_2559 / ((_2563 * _2563) * 3.141590118408203125));
    float _2599 = (((((_2570 * _2487) + _872) * cbLight._m0[_2524].x) * _2589) * _2212) + ((((cbLight._m0[_2436].x * _2178) * ((_2486 * _2487) + _872)) * _2510) * _2225);
    float _2600 = (((((_2570 * _2489) + _874) * cbLight._m0[_2524].y) * _2589) * _2212) + ((((cbLight._m0[_2436].y * _2180) * ((_2486 * _2489) + _874)) * _2510) * _2225);
    float _2601 = (((((_2570 * _2490) + _875) * cbLight._m0[_2524].z) * _2589) * _2212) + ((((cbLight._m0[_2436].z * _2182) * ((_2486 * _2490) + _875)) * _2510) * _2225);
    float _2657;
    float _2659;
    float _2661;
    if (_2265)
    {
        _2657 = _2599;
        _2659 = _2600;
        _2661 = _2601;
    }
    else
    {
        uint _2663 = _2189 + 2u;
        uint _2667 = _2189 + 10u;
        float _2681 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2663].w)) * _726) * 0.949999988079071044921875);
        float _2682 = _2681 * _2681;
        float _2683 = cbLight._m0[_2663].x + _802;
        float _2684 = cbLight._m0[_2663].y + _803;
        float _2685 = cbLight._m0[_2663].z + _804;
        float _2689 = inversesqrt(dot(vec3(_2683, _2684, _2685), vec3(_2683, _2684, _2685)));
        float _2690 = _2689 * _2683;
        float _2691 = _2689 * _2684;
        float _2692 = _2689 * _2685;
        float _2693 = dot(vec3(_723, _724, _725), vec3(cbLight._m0[_2663].xyz));
        float _4608 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
        float _2696 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
        float _2697 = dot(vec3(_723, _724, _725), vec3(_2690, _2691, _2692));
        float _4619 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
        float _2700 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
        float _2701 = dot(vec3(cbLight._m0[_2663].xyz), vec3(_2690, _2691, _2692));
        float _4630 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        float _2705 = _2682 * _2682;
        float _2709 = ((_2700 * _2700) * (_2705 + (-1.0))) + 1.0;
        float _2716 = exp2(log2(1.0 - (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0)))) * 5.0);
        float _2723 = 1.0 - _2682;
        float _2733 = (0.5 / (((_2465 * ((_2696 * _2723) + _2682)) + 9.9999999392252902907785028219223e-09) + (((_2465 * _2723) + _2682) * _2696))) * _2696;
        float _4641 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        float _2735 = (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * (_2705 / ((_2709 * _2709) * 3.141590118408203125));
        float _2736 = isnan(1.0) ? _2204 : (isnan(_2204) ? 1.0 : min(_2204, 1.0));
        _2657 = (((((_2716 * _2487) + _872) * cbLight._m0[_2667].x) * _2735) * _2736) + _2599;
        _2659 = (((((_2716 * _2489) + _874) * cbLight._m0[_2667].y) * _2735) * _2736) + _2600;
        _2661 = (((((_2716 * _2490) + _875) * cbLight._m0[_2667].z) * _2735) * _2736) + _2601;
    }
    float _2767;
    float _2769;
    float _2771;
    if (_2374)
    {
        _2767 = _2657;
        _2769 = _2659;
        _2771 = _2661;
    }
    else
    {
        uint _2778 = _2189 + 3u;
        uint _2782 = _2189 + 11u;
        float _2796 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2778].w)) * _726) * 0.949999988079071044921875);
        float _2797 = _2796 * _2796;
        float _2798 = cbLight._m0[_2778].x + _802;
        float _2799 = cbLight._m0[_2778].y + _803;
        float _2800 = cbLight._m0[_2778].z + _804;
        float _2804 = inversesqrt(dot(vec3(_2798, _2799, _2800), vec3(_2798, _2799, _2800)));
        float _2805 = _2804 * _2798;
        float _2806 = _2804 * _2799;
        float _2807 = _2804 * _2800;
        float _2808 = dot(vec3(_723, _724, _725), vec3(cbLight._m0[_2778].xyz));
        float _4657 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
        float _2811 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
        float _2812 = dot(vec3(_723, _724, _725), vec3(_2805, _2806, _2807));
        float _4668 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
        float _2815 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
        float _2816 = dot(vec3(cbLight._m0[_2778].xyz), vec3(_2805, _2806, _2807));
        float _4679 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
        float _2820 = _2797 * _2797;
        float _2824 = ((_2815 * _2815) * (_2820 + (-1.0))) + 1.0;
        float _2831 = exp2(log2(1.0 - (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0)))) * 5.0);
        float _2838 = 1.0 - _2797;
        float _2848 = (0.5 / (((_2465 * ((_2811 * _2838) + _2797)) + 9.9999999392252902907785028219223e-09) + (((_2465 * _2838) + _2797) * _2811))) * _2811;
        float _4690 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
        float _2850 = (isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0))) * (_2820 / ((_2824 * _2824) * 3.141590118408203125));
        float _2851 = isnan(1.0) ? _2205 : (isnan(_2205) ? 1.0 : min(_2205, 1.0));
        _2767 = (((((_2831 * _2487) + _872) * cbLight._m0[_2782].x) * _2850) * _2851) + _2657;
        _2769 = (((((_2831 * _2489) + _874) * cbLight._m0[_2782].y) * _2850) * _2851) + _2659;
        _2771 = (((((_2831 * _2490) + _875) * cbLight._m0[_2782].z) * _2850) * _2851) + _2661;
    }
    float _2917;
    float _2919;
    float _2921;
    float _2923;
    float _2925;
    float _2927;
    if (_2187.y == 0u)
    {
        uvec4 _2872 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2873 = _2872.x;
        uint _2884 = uint((float(_2872.y) * floor(float(uint(cbSceneParam._m0[85u].y * _811) / _2873))) + floor(float(uint(cbSceneParam._m0[85u].x * _810) / _2873)));
        float _2894 = (log2(_1965 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2895 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
        uint _2898 = uint(isnan(14.0) ? _2895 : (isnan(_2895) ? 14.0 : min(_2895, 14.0)));
        uvec4 _2903 = texelFetch(g_lightClusterGridBuffer, int(((_2898 << 2u) + (_2884 << 6u)) >> 2u));
        uint _2904 = _2903.x;
        uint _2905 = _2872.z;
        float _2984;
        float _2986;
        float _2988;
        float _2990;
        float _2992;
        float _2994;
        if (((((1u << ((_2905 >> 4u) & 15u)) + 4294967295u) & _2904) == 0u) || ((_2905 & 240u) == 0u))
        {
            _2984 = 0.0;
            _2986 = 0.0;
            _2988 = 0.0;
            _2990 = 0.0;
            _2992 = 0.0;
            _2994 = 0.0;
        }
        else
        {
            float _2985;
            float _2987;
            float _2989;
            float _2991;
            float _2993;
            float _2995;
            float _3129 = 0.0;
            float _3130 = 0.0;
            float _3131 = 0.0;
            float _3132 = 0.0;
            float _3133 = 0.0;
            float _3134 = 0.0;
            uint _3135 = 0u;
            uint _3144;
            bool _3145;
            for (;;)
            {
                _3144 = texelFetch(g_lightClassification, int((((_2898 << 5u) + (_2884 << 9u)) + (_3135 << 2u)) >> 2u)).x;
                _3145 = _3144 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3145)
                {
                    frontier_phi_66_pred = _3134;
                    frontier_phi_66_pred_1 = _3133;
                    frontier_phi_66_pred_2 = _3132;
                    frontier_phi_66_pred_3 = _3131;
                    frontier_phi_66_pred_4 = _3130;
                    frontier_phi_66_pred_5 = _3129;
                }
                else
                {
                    float _3253;
                    float _3254;
                    float _3255;
                    float _3256;
                    float _3257;
                    float _3258;
                    uint _3259;
                    _3253 = _3129;
                    _3254 = _3130;
                    _3255 = _3131;
                    _3256 = _3132;
                    _3257 = _3133;
                    _3258 = _3134;
                    _3259 = _3144;
                    float _3185;
                    float _3186;
                    float _3187;
                    float _3188;
                    float _3189;
                    float _3190;
                    for (;;)
                    {
                        uint _3263 = uint(findLSB(_3259)) + (_3135 << 5u);
                        uint _3260 = (_3259 + 4294967295u) & _3259;
                        uint _3265 = _3263 * 48u;
                        vec4 _3279 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3265)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 3u)).x));
                        uint _3285 = (_3263 * 48u) + 4u;
                        vec4 _3298 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3285)).x, texelFetch(g_PointLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3285 + 3u)).x));
                        uint _3304 = (_3263 * 48u) + 8u;
                        vec3 _3315 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3304)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 2u)).x));
                        float _3319 = _3279.x - _1963;
                        float _3320 = _3279.y - _1964;
                        float _3321 = _3279.z - _1965;
                        float _3322 = dot(vec3(_3319, _3320, _3321), vec3(_3319, _3320, _3321));
                        float _3325 = inversesqrt(_3322);
                        float _3326 = _3325 * _3319;
                        float _3327 = _3325 * _3320;
                        float _3328 = _3325 * _3321;
                        float _3329 = dot(vec3(_829, _832, _835), vec3(_3326, _3327, _3328));
                        float _3334 = 1.0 - (_3322 * _3279.w);
                        float _4716 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                        float _3335 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
                        float _3336 = sqrt(_3322) * _3298.w;
                        float _3339 = 1.39999997615814208984375 / (_3336 + 1.39999997615814208984375);
                        float _3340 = _3339 * _3339;
                        float _3343 = ((1.0 - _3340) * _3329) + _3340;
                        float _3346 = _3336 * _3336;
                        float _3350 = ((isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0))) * _3335) / ((_3346 * 0.699999988079071044921875) + 1.0);
                        float _3354 = (-0.0) - _1963;
                        float _3355 = (-0.0) - _1964;
                        float _3356 = (-0.0) - _1965;
                        float _3360 = inversesqrt(dot(vec3(_3354, _3355, _3356), vec3(_3354, _3355, _3356)));
                        float _3361 = _3360 * _3354;
                        float _3362 = _3360 * _3355;
                        float _3363 = _3360 * _3356;
                        float _3370 = exp2(log2(1.0 / ((_3346 * 3.5) + 5.0)) * 0.25);
                        float _3371 = 1.0 - _904;
                        float _3378 = sqrt(1.0 - ((1.0 - (_3371 * _3371)) * (1.0 - (_3370 * _3370))));
                        float _3379 = _3378 * _3378;
                        float _3380 = _3379 * _3379;
                        float _3381 = _3361 + _3326;
                        float _3382 = _3362 + _3327;
                        float _3383 = _3363 + _3328;
                        float _3387 = inversesqrt(dot(vec3(_3381, _3382, _3383), vec3(_3381, _3382, _3383)));
                        float _3391 = dot(vec3(_829, _832, _835), vec3(_3361, _3362, _3363));
                        float _4732 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                        float _3394 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
                        float _3395 = dot(vec3(_829, _832, _835), vec3(_3387 * _3381, _3387 * _3382, _3387 * _3383));
                        float _4743 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                        float _3398 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
                        float _3402 = ((_3398 * _3398) * (_3380 + (-1.0))) + 1.0;
                        float _3403 = _3339 * _3379;
                        float _3404 = _3403 * _3403;
                        float _3407 = ((1.0 - _3404) * _3329) + _3404;
                        float _4754 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                        float _3408 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
                        float _3409 = 1.0 - _3379;
                        float _3419 = (0.5 / (((_3408 * ((_3394 * _3409) + _3379)) + 9.9999999392252902907785028219223e-09) + (((_3408 * _3409) + _3379) * _3394))) * _3408;
                        float _4765 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                        float _3429 = (((_3380 * 3.1415927410125732421875) * (isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0)))) / ((_3402 * _3402) * ((_3346 * 2.1991131305694580078125) + 3.141590118408203125))) * _3335;
                        _3188 = (_3350 * _3298.x) + _3256;
                        _3189 = (_3350 * _3298.y) + _3257;
                        _3190 = (_3350 * _3298.z) + _3258;
                        _3185 = (_3429 * _3315.x) + _3253;
                        _3186 = (_3429 * _3315.y) + _3254;
                        _3187 = (_3429 * _3315.z) + _3255;
                        if (_3260 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3253 = _3185;
                            _3254 = _3186;
                            _3255 = _3187;
                            _3256 = _3188;
                            _3257 = _3189;
                            _3258 = _3190;
                            _3259 = _3260;
                        }
                    }
                    frontier_phi_66_pred = _3190;
                    frontier_phi_66_pred_1 = _3189;
                    frontier_phi_66_pred_2 = _3188;
                    frontier_phi_66_pred_3 = _3187;
                    frontier_phi_66_pred_4 = _3186;
                    frontier_phi_66_pred_5 = _3185;
                }
                _2995 = frontier_phi_66_pred;
                _2993 = frontier_phi_66_pred_1;
                _2991 = frontier_phi_66_pred_2;
                _2989 = frontier_phi_66_pred_3;
                _2987 = frontier_phi_66_pred_4;
                _2985 = frontier_phi_66_pred_5;
                uint _3136 = _3135 + 1u;
                if (_3136 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3129 = _2985;
                    _3130 = _2987;
                    _3131 = _2989;
                    _3132 = _2991;
                    _3133 = _2993;
                    _3134 = _2995;
                    _3135 = _3136;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2984 = _2985;
            _2986 = _2987;
            _2988 = _2989;
            _2990 = _2991;
            _2992 = _2993;
            _2994 = _2995;
        }
        uvec4 _2998 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2999 = _2998.z;
        uint _3001 = (_2999 >> 8u) & 15u;
        float _3097;
        float _3099;
        float _3101;
        float _3103;
        float _3105;
        float _3107;
        if (((4294967295u << _3001) & _2904) == 0u)
        {
            _3097 = _2984;
            _3099 = _2986;
            _3101 = _2988;
            _3103 = _2990;
            _3105 = _2992;
            _3107 = _2994;
        }
        else
        {
            float _3122 = inversesqrt(dot(vec3(_1963, _1964, _1965), vec3(_1963, _1964, _1965)));
            float _3123 = _3122 * _1963;
            float _3124 = _3122 * _1964;
            float _3125 = _3122 * _1965;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3001 < ((_2999 >> 12u) & 15u))
            {
                float _3098;
                float _3100;
                float _3102;
                float _3104;
                float _3106;
                float _3108;
                float _3236 = _2984;
                float _3237 = _2986;
                float _3238 = _2988;
                float _3239 = _2990;
                float _3240 = _2992;
                float _3241 = _2994;
                uint _3242 = _3001;
                uint _3251;
                bool _3252;
                for (;;)
                {
                    _3251 = texelFetch(g_lightClassification, int((((_2898 << 5u) + (_2884 << 9u)) + (_3242 << 2u)) >> 2u)).x;
                    _3252 = _3251 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3252)
                    {
                        frontier_phi_72_pred = _3241;
                        frontier_phi_72_pred_1 = _3240;
                        frontier_phi_72_pred_2 = _3239;
                        frontier_phi_72_pred_3 = _3238;
                        frontier_phi_72_pred_4 = _3237;
                        frontier_phi_72_pred_5 = _3236;
                    }
                    else
                    {
                        float _3434;
                        float _3435;
                        float _3436;
                        float _3437;
                        float _3438;
                        float _3439;
                        float _3728;
                        float _3729;
                        float _3730;
                        float _3731;
                        float _3732;
                        float _3733;
                        float _3447 = _3236;
                        float _3448 = _3237;
                        float _3449 = _3238;
                        float _3450 = _3239;
                        float _3451 = _3240;
                        float _3452 = _3241;
                        uint _3453 = _3251;
                        uint _3454;
                        vec4 _3479;
                        float _3480;
                        vec4 _3495;
                        vec3 _3507;
                        vec4 _3522;
                        vec4 _3538;
                        float _3584;
                        bool _3585;
                        for (;;)
                        {
                            uint _3464 = ((_3242 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3453));
                            _3454 = (_3453 + 4294967295u) & _3453;
                            uint _3466 = _3464 * 40u;
                            _3479 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3466)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 3u)).x));
                            _3480 = _3479.w;
                            uint _3482 = (_3464 * 40u) + 4u;
                            _3495 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3482)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 3u)).x));
                            uint _3497 = (_3464 * 40u) + 8u;
                            _3507 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3497)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 2u)).x));
                            uint _3509 = (_3464 * 40u) + 16u;
                            _3522 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3509)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 3u)).x));
                            uint _3525 = (_3464 * 40u) + 20u;
                            _3538 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 3u)).x));
                            uint _3540 = (_3464 * 40u) + 24u;
                            vec4 _3553 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3540)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 3u)).x));
                            uint _3559 = (_3464 * 40u) + 28u;
                            vec4 _3572 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 3u)).x));
                            _3584 = fma(_1965, _3572.z, fma(_1964, _3572.y, _3572.x * _1963)) + _3572.w;
                            _3585 = !((fma(_1965, _3553.z, fma(_1964, _3553.y, _3553.x * _1963)) + _3553.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3585)
                            {
                                float _3612 = _3479.x - _1963;
                                float _3613 = _3479.y - _1964;
                                float _3614 = _3479.z - _1965;
                                float _3615 = dot(vec3(_3612, _3613, _3614), vec3(_3612, _3613, _3614));
                                float _3618 = inversesqrt(_3615);
                                float _3619 = _3618 * _3612;
                                float _3620 = _3618 * _3613;
                                float _3621 = _3618 * _3614;
                                float _3625 = 1.0 - (_3615 / (_3480 * _3480));
                                float _4776 = isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0));
                                float _3626 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
                                float _3630 = sqrt(_3615) * _3495.w;
                                float _3632 = 1.39999997615814208984375 / (_3630 + 1.39999997615814208984375);
                                float _3633 = _3632 * _3632;
                                float _3636 = ((1.0 - _3633) * dot(vec3(_3619, _3620, _3621), vec3(_829, _832, _835))) + _3633;
                                float _3639 = _3630 * _3630;
                                float _3643 = (fma(_1965, _3522.z, fma(_1964, _3522.y, _3522.x * _1963)) + _3522.w) / _3584;
                                float _3644 = (fma(_1965, _3538.z, fma(_1964, _3538.y, _3538.x * _1963)) + _3538.w) / _3584;
                                float _3648 = 1.0 - dot(vec2(_3643, _3644), vec2(_3643, _3644));
                                float _4792 = isnan(0.0) ? _3648 : (isnan(_3648) ? 0.0 : max(_3648, 0.0));
                                float _3649 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
                                float _3650 = _3649 * (((isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0))) * _3626) / ((_3639 * 0.699999988079071044921875) + 1.0));
                                float _3662 = exp2(log2(1.0 / ((_3639 * 3.5) + 5.0)) * 0.25);
                                float _3663 = 1.0 - _904;
                                float _3670 = sqrt(1.0 - ((1.0 - (_3663 * _3663)) * (1.0 - (_3662 * _3662))));
                                float _3671 = _3670 * _3670;
                                float _3672 = _3671 * _3671;
                                float _3673 = _3619 - _3123;
                                float _3674 = _3620 - _3124;
                                float _3675 = _3621 - _3125;
                                float _3679 = inversesqrt(dot(vec3(_3673, _3674, _3675), vec3(_3673, _3674, _3675)));
                                float _3683 = dot(vec3(_829, _832, _835), vec3((-0.0) - _3123, (-0.0) - _3124, (-0.0) - _3125));
                                float _4803 = isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0));
                                float _3686 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                                float _3687 = dot(vec3(_829, _832, _835), vec3(_3679 * _3673, _3679 * _3674, _3679 * _3675));
                                float _4814 = isnan(0.0) ? _3687 : (isnan(_3687) ? 0.0 : max(_3687, 0.0));
                                float _3690 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
                                float _3694 = ((_3690 * _3690) * (_3672 + (-1.0))) + 1.0;
                                float _3695 = _3632 * _3671;
                                float _3696 = _3695 * _3695;
                                float _3702 = ((1.0 - _3696) * dot(vec3(_829, _832, _835), vec3(_3619, _3620, _3621))) + _3696;
                                float _4825 = isnan(0.0) ? _3702 : (isnan(_3702) ? 0.0 : max(_3702, 0.0));
                                float _3703 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
                                float _3704 = 1.0 - _3671;
                                float _3714 = (0.5 / (((_3703 * ((_3686 * _3704) + _3671)) + 9.9999999392252902907785028219223e-09) + (((_3703 * _3704) + _3671) * _3686))) * _3703;
                                float _4836 = isnan(0.0) ? _3714 : (isnan(_3714) ? 0.0 : max(_3714, 0.0));
                                float _3724 = (_3649 * _3626) * (((_3672 * 3.1415927410125732421875) * (isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0)))) / ((_3694 * _3694) * ((_3639 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3650 * _3495.y;
                                frontier_phi_78_pred_1 = _3650 * _3495.x;
                                frontier_phi_78_pred_2 = _3724 * _3507.z;
                                frontier_phi_78_pred_3 = _3724 * _3507.y;
                                frontier_phi_78_pred_4 = _3724 * _3507.x;
                                frontier_phi_78_pred_5 = _3650 * _3495.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3732 = frontier_phi_78_pred;
                            _3731 = frontier_phi_78_pred_1;
                            _3730 = frontier_phi_78_pred_2;
                            _3729 = frontier_phi_78_pred_3;
                            _3728 = frontier_phi_78_pred_4;
                            _3733 = frontier_phi_78_pred_5;
                            _3437 = _3731 + _3450;
                            _3438 = _3732 + _3451;
                            _3439 = _3733 + _3452;
                            _3434 = _3728 + _3447;
                            _3435 = _3729 + _3448;
                            _3436 = _3730 + _3449;
                            if (_3454 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3447 = _3434;
                                _3448 = _3435;
                                _3449 = _3436;
                                _3450 = _3437;
                                _3451 = _3438;
                                _3452 = _3439;
                                _3453 = _3454;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3439;
                        frontier_phi_72_pred_1 = _3438;
                        frontier_phi_72_pred_2 = _3437;
                        frontier_phi_72_pred_3 = _3436;
                        frontier_phi_72_pred_4 = _3435;
                        frontier_phi_72_pred_5 = _3434;
                    }
                    _3108 = frontier_phi_72_pred;
                    _3106 = frontier_phi_72_pred_1;
                    _3104 = frontier_phi_72_pred_2;
                    _3102 = frontier_phi_72_pred_3;
                    _3100 = frontier_phi_72_pred_4;
                    _3098 = frontier_phi_72_pred_5;
                    uint _3243 = _3242 + 1u;
                    if (_3243 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3236 = _3098;
                        _3237 = _3100;
                        _3238 = _3102;
                        _3239 = _3104;
                        _3240 = _3106;
                        _3241 = _3108;
                        _3242 = _3243;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3108;
                frontier_phi_60_61_ladder_1 = _3106;
                frontier_phi_60_61_ladder_2 = _3102;
                frontier_phi_60_61_ladder_3 = _3100;
                frontier_phi_60_61_ladder_4 = _3098;
                frontier_phi_60_61_ladder_5 = _3104;
            }
            else
            {
                frontier_phi_60_61_ladder = _2994;
                frontier_phi_60_61_ladder_1 = _2992;
                frontier_phi_60_61_ladder_2 = _2988;
                frontier_phi_60_61_ladder_3 = _2986;
                frontier_phi_60_61_ladder_4 = _2984;
                frontier_phi_60_61_ladder_5 = _2990;
            }
            _3097 = frontier_phi_60_61_ladder_4;
            _3099 = frontier_phi_60_61_ladder_3;
            _3101 = frontier_phi_60_61_ladder_2;
            _3103 = frontier_phi_60_61_ladder_5;
            _3105 = frontier_phi_60_61_ladder_1;
            _3107 = frontier_phi_60_61_ladder;
        }
        float _3112 = isnan(1.0) ? _888 : (isnan(_888) ? 1.0 : min(_888, 1.0));
        _2917 = (_3112 * _3103) + _2429;
        _2919 = (_3112 * _3105) + _2431;
        _2921 = (_3112 * _3107) + _2433;
        _2923 = ((_3097 * _872) * _3112) + _2767;
        _2925 = ((_3099 * _874) * _3112) + _2769;
        _2927 = ((_3101 * _875) * _3112) + _2771;
    }
    else
    {
        _2917 = _2429;
        _2919 = _2431;
        _2921 = _2433;
        _2923 = _2767;
        _2925 = _2769;
        _2927 = _2771;
    }
    float _4852 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _4863 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _4874 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    uint _2947 = _249 + 6u;
    float _2955 = _810 / cbSceneParam._m0[86u].x;
    float _2956 = _811 / cbSceneParam._m0[86u].y;
    vec4 _2970 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2955, _2956, (log2((isnan(cbSceneParam._m0[77u].w) ? _745 : (isnan(_745) ? cbSceneParam._m0[77u].w : min(_745, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2972 = _2970.x;
    float _2973 = _2970.y;
    float _2974 = _2970.z;
    float _2975 = _2970.w;
    float _3047;
    float _3049;
    float _3051;
    float _3053;
    if (_745 > cbSceneParam._m0[78u].w)
    {
        float _3009 = isnan(_745) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _745 : min(cbSceneParam._m0[80u].w, _745));
        float _3010 = _3009 / _745;
        float _3021 = _3010 * _795;
        float _3022 = _796 * _3010;
        float _3023 = (-0.0) - _3022;
        float _3025 = _3010 * _797;
        float _3027 = (cbSceneParam._m0[77u].w * _3023) / _3009;
        float _3028 = _3027 + cbSceneParam._m0[79u].w;
        float _3029 = cbSceneParam._m0[79u].w - _3022;
        float _3035 = sqrt(((_3021 * _3021) + (_3022 * _3022)) + (_3025 * _3025));
        float _3038 = (1.0 - (cbSceneParam._m0[77u].w / _3009)) * _3035;
        float _3043 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3045 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3198;
        if (abs((_3023 - _3027) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3198 = ((((_3028 > 0.0) ? exp2(_3043 * _3028) : (2.0 - exp2(_3045 * _3028))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3038;
        }
        else
        {
            float _3158 = 1.0 / cbSceneParam._m0[80u].x;
            float _3159 = isnan(_3029) ? _3028 : (isnan(_3028) ? _3029 : max(_3028, _3029));
            float _3160 = isnan(_3029) ? _3028 : (isnan(_3028) ? _3029 : min(_3028, _3029));
            float _3169 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : min(_3159, 0.0));
            float _3170 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : min(_3160, 0.0));
            _3198 = ((abs(_3035 / _3023) * cbSceneParam._m0[80u].y) * ((((_3169 - _3170) * 2.0) - ((exp2(_3043 * (isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0)))) - exp2(_3043 * (isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0))))) * _3158)) - ((exp2(_3045 * _3169) - exp2(_3045 * _3170)) * _3158))) + (_3038 * cbSceneParam._m0[80u].z);
        }
        vec4 _3200 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2955, _2956, 1.0), 0.0);
        float _3209 = exp2((_3198 * (-1.44269502162933349609375)) * (1.0 - _3200.w));
        float _3210 = log2(_3209);
        float _3226 = log2(_2975);
        _3047 = (exp2(_3226 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3210 * cbSceneParam._m0[78u].x)) * _3200.x) / cbSceneParam._m0[78u].x)) + _2972;
        _3049 = (exp2(_3226 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3210 * cbSceneParam._m0[78u].y)) * _3200.y) / cbSceneParam._m0[78u].y)) + _2973;
        _3051 = (exp2(_3226 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3210 * cbSceneParam._m0[78u].z)) * _3200.z) / cbSceneParam._m0[78u].z)) + _2974;
        _3053 = _3209 * _2975;
    }
    else
    {
        _3047 = _2972;
        _3049 = _2973;
        _3051 = _2974;
        _3053 = _2975;
    }
    float _3065 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3066 = _3065 == 3.0;
    float _3067 = log2(_3053);
    float _3074 = exp2(_3067 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0))) * (_2917 + ((isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))) * _888))) + ((_2923 + ((isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0))) * _1694)) * cbPerFrame._m0[3u].x));
    float _3075 = exp2(_3067 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0))) * (_2919 + ((isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))) * _888))) + ((_2925 + ((isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0))) * _1694)) * cbPerFrame._m0[3u].x));
    float _3076 = exp2(_3067 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0))) * (_2921 + ((isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0))) * _888))) + ((_2927 + ((isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0))) * _1694)) * cbPerFrame._m0[3u].x));
    float _3085 = (_3065 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3085 * (_3066 ? _3074 : (_3074 + (cbSceneParam._m0[72u].w * _3047)));
    SV_Target.y = _3085 * (_3066 ? _3075 : (_3075 + (cbSceneParam._m0[72u].w * _3049)));
    SV_Target.z = _3085 * (_3066 ? _3076 : (_3076 + (cbSceneParam._m0[72u].w * _3051)));
    SV_Target.w = cbInstanceData._m0[_2947].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2947].w;
}


