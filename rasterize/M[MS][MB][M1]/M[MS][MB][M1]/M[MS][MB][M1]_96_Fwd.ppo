#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1167;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _213 = _212 * _204;
    float _214 = _212 * _205;
    float _215 = _212 * _206;
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _227 = _226 * TANGENT.x;
    float _228 = _226 * TANGENT.y;
    float _229 = _226 * TANGENT.z;
    uint _232 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _232 + 1u;
    uint _242 = _232 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _273 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _279 = _273.x * cbMtdParam._m0[11u].x;
    float _280 = _273.y * cbMtdParam._m0[11u].y;
    float _281 = _273.z * cbMtdParam._m0[11u].z;
    vec4 _300 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _252) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _253) + cbTextureTilingScale._m0[5u].w));
    vec4 _338 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _340 = _338.x;
    float _352 = dot(vec4(_340, _338.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _369 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_340 - _352) * cbMtdParam._m0[24u].y) + _352) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3495 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _370 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
    float _377 = (_370 * ((_300.x * cbMtdParam._m0[12u].x) - _279)) + _279;
    float _378 = (_370 * ((_300.y * cbMtdParam._m0[12u].y) - _280)) + _280;
    float _379 = (_370 * ((_300.z * cbMtdParam._m0[12u].z) - _281)) + _281;
    vec4 _397 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _252) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _253) + cbTextureTilingScale._m0[4u].w));
    vec4 _414 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _416 = _414.x;
    float _417 = _414.y;
    float _418 = _414.z;
    float _427 = ((_397.z - _418) * _370) + _418;
    float _430 = ((((_397.x - _416) * _370) + _416) * 2.0) + (-1.0);
    float _432 = ((((_397.y - _417) * _370) + _417) * 2.0) + (-1.0);
    float _433 = dot(vec2(_430, _432), vec2(_430, _432));
    float _3506 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _438 = sqrt(1.0 - (isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0))));
    float _441 = fma(_438, _220, fma(_432, _227, _430 * _213));
    float _444 = fma(_438, _221, fma(_432, _228, _430 * _214));
    float _447 = fma(_438, _222, fma(_432, _229, _430 * _215));
    float _451 = inversesqrt(dot(vec3(_441, _444, _447), vec3(_441, _444, _447)));
    vec4 _467 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _493 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _252) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _253) + cbTextureTilingScale._m0[11u].w));
    float _495 = _493.x;
    float _496 = 1.0 - _495;
    float _502 = (cbMtdParam._m0[19u].x + dot(vec4(_451 * _441, _451 * _444, _451 * _447, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_495 - _496) * cbMtdParam._m0[24u].z) + _496) * cbMtdParam._m0[21u].z);
    float _3517 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _503 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
    float _510 = (_503 * (cbMtdParam._m0[17u].x - _377)) + _377;
    float _511 = (_503 * (cbMtdParam._m0[17u].y - _378)) + _378;
    float _512 = (_503 * (cbMtdParam._m0[17u].z - _379)) + _379;
    vec4 _524 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _538 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _540 = _538.x;
    float _558 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _252) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _253) + cbTextureTilingScale._m0[9u].w)).x - _540) * _370) + _540;
    float _562 = ((_524.x - _558) * cbMtdParam._m0[19u].z) + _558;
    float _564 = _562 - (_562 * _503);
    vec4 _577 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _252) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _253) + cbTextureTilingScale._m0[15u].w));
    float _584 = (_577.x * 2.0) + (-1.0);
    float _585 = (_577.y * 2.0) + (-1.0);
    float _586 = dot(vec2(_584, _585), vec2(_584, _585));
    float _3528 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _594 = ((_577.z - _427) * _503) + _427;
    float _604 = ((sqrt(1.0 - (isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0)))) - _438) * _503) + _438;
    float _607 = (((_584 - _430) * _503) + _430) + (cbMtdParam._m0[21u].x * _430);
    float _608 = (((_585 - _432) * _503) + _432) + (cbMtdParam._m0[21u].x * _432);
    float _613 = cbMtdParam._m0[22u].x + _467.w;
    float _616 = fma(_604, _220, fma(_608, _227, _607 * _213));
    float _619 = fma(_604, _221, fma(_608, _228, _607 * _214));
    float _622 = fma(_604, _222, fma(_608, _229, _607 * _215));
    float _626 = inversesqrt(dot(vec3(_616, _619, _622), vec3(_616, _619, _622)));
    float _627 = _626 * _616;
    float _628 = _626 * _619;
    float _629 = _626 * _622;
    float _3539 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _630 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
    float _3550 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _3561 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _3572 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _3583 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _3594 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _635 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
    float _649 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _690 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _700 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _690);
    float _701 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _690);
    float _702 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _690);
    float _706 = inversesqrt(dot(vec3(_700, _701, _702), vec3(_700, _701, _702)));
    float _707 = _700 * _706;
    float _708 = _701 * _706;
    float _709 = _702 * _706;
    float _715 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _716 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _734 = fma(_629, cbSceneParam._m0[5u].z, fma(_628, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _627));
    float _737 = fma(_629, cbSceneParam._m0[6u].z, fma(_628, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _627));
    float _740 = fma(_629, cbSceneParam._m0[7u].z, fma(_628, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _627));
    uint _754 = (_232 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _760 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0)))) * cbInstanceData._m0[_754].x;
    float _761 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0)))) * cbInstanceData._m0[_754].y;
    float _762 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0)))) * cbInstanceData._m0[_754].z;
    float _3605 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _763 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
    float _3616 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _764 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
    float _3627 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _765 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
    float _766 = 1.0 - _635;
    float _767 = _763 * _766;
    float _768 = _764 * _766;
    float _769 = _765 * _766;
    float _774 = (_763 + (-0.039999999105930328369140625)) * _635;
    float _775 = (_764 + (-0.039999999105930328369140625)) * _635;
    float _776 = (_765 + (-0.039999999105930328369140625)) * _635;
    float _777 = _774 + 0.039999999105930328369140625;
    float _779 = _775 + 0.039999999105930328369140625;
    float _780 = _776 + 0.039999999105930328369140625;
    vec4 _789 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _715, cbSceneParam._m0[86u].y * _716));
    float _793 = ((isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0))) * TEXCOORD_5.w) * _789.x;
    float _794 = dot(vec3(_627, _628, _629), vec3(_707, _708, _709));
    float _797 = _794 * 2.0;
    float _801 = (_797 * _627) - _707;
    float _802 = (_797 * _628) - _708;
    float _803 = (_797 * _629) - _709;
    float _807 = abs(dot(vec3(_707, _708, _709), vec3(_627, _628, _629)));
    float _3638 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _809 = sqrt(_630);
    float _822 = exp2((_809 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_809 * 3.0));
    float _828 = (1.0 - _822) * ((_809 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _829 = _822 * _809;
    float _857 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _861 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _865 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1166;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _891 = fma(_865, cbModelParam._m0[26u].z, fma(_861, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _857));
        float _895 = fma(_865, cbModelParam._m0[27u].z, fma(_861, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _857));
        float _899 = fma(_865, cbModelParam._m0[28u].z, fma(_861, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _857));
        float _924 = _857 + _627;
        float _925 = _861 + _628;
        float _926 = _865 + _629;
        float _936 = fma(_926, cbModelParam._m0[26u].z, fma(_925, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _924)) - _891;
        float _937 = fma(_926, cbModelParam._m0[27u].z, fma(_925, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _924)) - _895;
        float _938 = fma(_926, cbModelParam._m0[28u].z, fma(_925, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _924)) - _899;
        float _942 = inversesqrt(dot(vec3(_936, _937, _938), vec3(_936, _937, _938)));
        float _955 = ((_942 * _936) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_891 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _956 = ((_942 * _937) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_895 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _957 = ((_942 * _938) / cbModelParam._m0[34u].z) + ((((((_899 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _981 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        float _994 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_960.x + (-0.5));
        float _996 = _994 * (_960.y + (-0.5));
        float _997 = _994 * (_960.z + (-0.5));
        float _1004 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_967.x + (-0.5));
        float _1006 = _1004 * (_967.y + (-0.5));
        float _1007 = _1004 * (_967.z + (-0.5));
        float _1014 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_974.x + (-0.5));
        float _1016 = _1014 * (_974.y + (-0.5));
        float _1017 = _1014 * (_974.z + (-0.5));
        float _1024 = exp2((_981.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_981.x + (-0.5));
        float _1026 = _1024 * (_981.y + (-0.5));
        float _1027 = _1024 * (_981.z + (-0.5));
        float _1028 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1029 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = _995 * 0.5;
        float _1032 = _1005 * 0.5;
        float _1033 = _1015 * 0.5;
        float _1034 = dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033));
        float _1039 = (_1034 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1034);
        float _1048 = (dot(vec3(_627, _628, _629), vec3(_1039 * _1031, _1039 * _1032, _1039 * _1033)) + 1.0) * 0.5;
        float _3664 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1058 = sqrt(((_1032 * _1032) + (_1031 * _1031)) + (_1033 * _1033)) / (_1028 + 9.9999997473787516355514526367188e-06);
        float _3675 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _1060 = _1059 * 2.0;
        float _1064 = (1.0 - _1059) / (_1059 + 1.0);
        float _3686 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _1074 = ((((1.0 - _1065) * (_1060 + 2.0)) * exp2(log2(isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) * (_1060 + 1.0))) + _1065) * _1028;
        float _1075 = _996 * 0.5;
        float _1076 = _1006 * 0.5;
        float _1077 = _1016 * 0.5;
        float _1078 = dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077));
        float _1083 = (_1078 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1078);
        float _1091 = (dot(vec3(_627, _628, _629), vec3(_1083 * _1075, _1083 * _1076, _1083 * _1077)) + 1.0) * 0.5;
        float _3697 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1100 = sqrt(((_1076 * _1076) + (_1075 * _1075)) + (_1077 * _1077)) / (_1029 + 9.9999997473787516355514526367188e-06);
        float _3708 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _1102 = _1101 * 2.0;
        float _1106 = (1.0 - _1101) / (_1101 + 1.0);
        float _3719 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1116 = ((((1.0 - _1107) * (_1102 + 2.0)) * exp2(log2(isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * (_1102 + 1.0))) + _1107) * _1029;
        float _1117 = _997 * 0.5;
        float _1118 = _1007 * 0.5;
        float _1119 = _1017 * 0.5;
        float _1120 = dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119));
        float _1125 = (_1120 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1120);
        float _1133 = (dot(vec3(_627, _628, _629), vec3(_1125 * _1117, _1125 * _1118, _1125 * _1119)) + 1.0) * 0.5;
        float _3730 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1142 = sqrt(((_1118 * _1118) + (_1117 * _1117)) + (_1119 * _1119)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _3741 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1144 = _1143 * 2.0;
        float _1148 = (1.0 - _1143) / (_1143 + 1.0);
        float _3752 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1158 = ((((1.0 - _1149) * (_1144 + 2.0)) * exp2(log2(isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * (_1144 + 1.0))) + _1149) * _1030;
        _1166 = _997;
        _1168 = _996;
        _1169 = _995;
        _1170 = _1007;
        _1171 = _1006;
        _1172 = _1005;
        _1173 = _1017;
        _1174 = _1016;
        _1175 = _1015;
        _1176 = _1030;
        _1177 = _1029;
        _1178 = _1028;
        _1179 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0)));
        _1180 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0)));
        _1181 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)));
    }
    else
    {
        _1166 = _1167;
        _1168 = _1167;
        _1169 = _1167;
        _1170 = _1167;
        _1171 = _1167;
        _1172 = _1167;
        _1173 = _1167;
        _1174 = _1167;
        _1175 = _1167;
        _1176 = _1167;
        _1177 = _1167;
        _1178 = _1167;
        _1179 = 0.0;
        _1180 = 0.0;
        _1181 = 0.0;
    }
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1206 = fma(_865, cbModelParam._m0[30u].z, fma(_861, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _857));
        float _1210 = fma(_865, cbModelParam._m0[31u].z, fma(_861, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _857));
        float _1214 = fma(_865, cbModelParam._m0[32u].z, fma(_861, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _857));
        float _1237 = _857 + _627;
        float _1238 = _861 + _628;
        float _1239 = _865 + _629;
        float _1249 = fma(_1239, cbModelParam._m0[30u].z, fma(_1238, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1237)) - _1206;
        float _1250 = fma(_1239, cbModelParam._m0[31u].z, fma(_1238, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1237)) - _1210;
        float _1251 = fma(_1239, cbModelParam._m0[32u].z, fma(_1238, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1237)) - _1214;
        float _1255 = inversesqrt(dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251)));
        float _1268 = ((_1255 * _1249) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1206 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1269 = ((_1255 * _1250) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1210 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1270 = ((_1255 * _1251) / cbModelParam._m0[35u].z) + ((((((_1214 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1272 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        vec4 _1279 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        vec4 _1286 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        float _1305 = exp2((_1272.w + (-0.5)) * 20.0) * 2.0;
        float _1306 = _1305 * (_1272.x + (-0.5));
        float _1307 = _1305 * (_1272.y + (-0.5));
        float _1308 = _1305 * (_1272.z + (-0.5));
        float _1315 = exp2((_1279.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1279.x + (-0.5));
        float _1317 = _1315 * (_1279.y + (-0.5));
        float _1318 = _1315 * (_1279.z + (-0.5));
        float _1325 = exp2((_1286.w + (-0.5)) * 20.0) * 2.0;
        float _1326 = _1325 * (_1286.x + (-0.5));
        float _1327 = _1325 * (_1286.y + (-0.5));
        float _1328 = _1325 * (_1286.z + (-0.5));
        float _1335 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1293.x + (-0.5));
        float _1337 = _1335 * (_1293.y + (-0.5));
        float _1338 = _1335 * (_1293.z + (-0.5));
        float _1339 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1340 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1341 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1342 = _1306 * 0.5;
        float _1343 = _1316 * 0.5;
        float _1344 = _1326 * 0.5;
        float _1345 = dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344));
        float _1350 = (_1345 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1345);
        float _1358 = (dot(vec3(_627, _628, _629), vec3(_1350 * _1342, _1350 * _1343, _1350 * _1344)) + 1.0) * 0.5;
        float _3793 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1367 = sqrt(((_1343 * _1343) + (_1342 * _1342)) + (_1344 * _1344)) / (_1339 + 9.9999997473787516355514526367188e-06);
        float _3804 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1369 = _1368 * 2.0;
        float _1373 = (1.0 - _1368) / (_1368 + 1.0);
        float _3815 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1383 = ((((1.0 - _1374) * (_1369 + 2.0)) * exp2(log2(isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * (_1369 + 1.0))) + _1374) * _1339;
        float _1384 = _1307 * 0.5;
        float _1385 = _1317 * 0.5;
        float _1386 = _1327 * 0.5;
        float _1387 = dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386));
        float _1392 = (_1387 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1387);
        float _1400 = (dot(vec3(_627, _628, _629), vec3(_1392 * _1384, _1392 * _1385, _1392 * _1386)) + 1.0) * 0.5;
        float _3826 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1409 = sqrt(((_1385 * _1385) + (_1384 * _1384)) + (_1386 * _1386)) / (_1340 + 9.9999997473787516355514526367188e-06);
        float _3837 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1411 = _1410 * 2.0;
        float _1415 = (1.0 - _1410) / (_1410 + 1.0);
        float _3848 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1425 = ((((1.0 - _1416) * (_1411 + 2.0)) * exp2(log2(isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * (_1411 + 1.0))) + _1416) * _1340;
        float _1426 = _1308 * 0.5;
        float _1427 = _1318 * 0.5;
        float _1428 = _1328 * 0.5;
        float _1429 = dot(vec3(_1426, _1427, _1428), vec3(_1426, _1427, _1428));
        float _1434 = (_1429 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1429);
        float _1442 = (dot(vec3(_627, _628, _629), vec3(_1434 * _1426, _1434 * _1427, _1434 * _1428)) + 1.0) * 0.5;
        float _3859 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1451 = sqrt(((_1427 * _1427) + (_1426 * _1426)) + (_1428 * _1428)) / (_1341 + 9.9999997473787516355514526367188e-06);
        float _3870 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1453 = _1452 * 2.0;
        float _1457 = (1.0 - _1452) / (_1452 + 1.0);
        float _3881 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1467 = ((((1.0 - _1458) * (_1453 + 2.0)) * exp2(log2(isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * (_1453 + 1.0))) + _1458) * _1341;
        _1475 = _1308;
        _1476 = _1307;
        _1477 = _1306;
        _1478 = _1318;
        _1479 = _1317;
        _1480 = _1316;
        _1481 = _1328;
        _1482 = _1327;
        _1483 = _1326;
        _1484 = _1341;
        _1485 = _1340;
        _1486 = _1339;
        _1487 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)));
        _1488 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)));
        _1489 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)));
    }
    else
    {
        _1475 = _1167;
        _1476 = _1167;
        _1477 = _1167;
        _1478 = _1167;
        _1479 = _1167;
        _1480 = _1167;
        _1481 = _1167;
        _1482 = _1167;
        _1483 = _1167;
        _1484 = _1167;
        _1485 = _1167;
        _1486 = _1167;
        _1487 = 0.0;
        _1488 = 0.0;
        _1489 = 0.0;
    }
    float _1499 = (cbModelParam._m0[1u].x * (_1487 - _1179)) + _1179;
    float _1500 = (cbModelParam._m0[1u].x * (_1488 - _1180)) + _1180;
    float _1501 = (cbModelParam._m0[1u].x * (_1489 - _1181)) + _1181;
    float _1522 = fma(_1501, cbSceneParam._m0[89u].z, fma(_1500, cbSceneParam._m0[89u].y, _1499 * cbSceneParam._m0[89u].x));
    float _1525 = fma(_1501, cbSceneParam._m0[90u].z, fma(_1500, cbSceneParam._m0[90u].y, _1499 * cbSceneParam._m0[90u].x));
    float _1528 = fma(_1501, cbSceneParam._m0[91u].z, fma(_1500, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1499));
    float _1543 = _801 * 0.5;
    float _1544 = _802 * 0.5;
    float _1545 = _803 * 0.5;
    float _1546 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1477, _1480, _1483, _1486));
    float _1549 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1476, _1479, _1482, _1485));
    float _1552 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1475, _1478, _1481, _1484));
    float _1586;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1559 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1166, _1170, _1173, _1176));
        float _1563 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1168, _1171, _1174, _1177));
        float _1567 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1169, _1172, _1175, _1178));
        float _1574 = dot(vec4(cbModelParam._m0[39u]), vec4(_1543, _1544, _1545, 1.0));
        _1586 = dot(vec3(isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)), isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)), isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1574) ? 0.0 : (isnan(0.0) ? _1574 : max(0.0, _1574))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1586 = 1.0;
    }
    float _1597;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1588 = dot(vec4(cbModelParam._m0[40u]), vec4(_1543, _1544, _1545, 1.0));
        _1597 = dot(vec3(isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0)), isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)), isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1588) ? 0.0 : (isnan(0.0) ? _1588 : max(0.0, _1588))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1597 = 1.0;
    }
    float _1601 = (_1597 * cbModelParam._m0[1u].x) + (_1586 * (1.0 - cbModelParam._m0[1u].x));
    float _1611 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _630);
    float _1612 = isnan(_1611) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1611 : min(cbModelParam._m0[25u].z, _1611));
    float _1693;
    float _1695;
    float _1697;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1660 = fma(_865, cbModelParam._m0[13u].z, fma(_861, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _857)) + cbModelParam._m0[13u].w;
        float _1664 = fma(_865, cbModelParam._m0[14u].z, fma(_861, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _857)) + cbModelParam._m0[14u].w;
        float _1668 = fma(_865, cbModelParam._m0[15u].z, fma(_861, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _857)) + cbModelParam._m0[15u].w;
        float _1671 = fma(_803, cbModelParam._m0[13u].z, fma(_802, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _801));
        float _1674 = fma(_803, cbModelParam._m0[14u].z, fma(_802, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _801));
        float _1677 = fma(_803, cbModelParam._m0[15u].z, fma(_802, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _801));
        float _1705;
        if (_1671 > 0.0)
        {
            _1705 = abs((1.0 - _1660) / _1671);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1671 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1660 + 1.0) / _1671);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1705 = frontier_phi_14_12_ladder;
        }
        float _1908;
        if (_1674 > 0.0)
        {
            _1908 = abs((1.0 - _1664) / _1674);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1674 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1664 + 1.0) / _1674);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1908 = frontier_phi_23_19_ladder;
        }
        float _2162;
        if (_1677 > 0.0)
        {
            _2162 = abs((1.0 - _1668) / _1677);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1677 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1668 + 1.0) / _1677);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2162 = frontier_phi_35_30_ladder;
        }
        float _2164 = isnan(_1908) ? _1705 : (isnan(_1705) ? _1908 : min(_1705, _1908));
        float _2165 = isnan(_2162) ? _2164 : (isnan(_2164) ? _2162 : min(_2164, _2162));
        float _2169 = (_2165 * _1671) + _1660;
        float _2170 = (_2165 * _1674) + _1664;
        float _2171 = (_2165 * _1677) + _1668;
        float _2172 = _2165 * 9.9999997473787516355514526367188e-05;
        float _2174 = (-1.0) - _2172;
        float _2176 = _2172 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2171 > _2176) || ((_2171 < _2174) || ((_2170 > _2176) || ((_2170 < _2174) || ((_2169 < _2174) || (_2169 > _2176))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2299 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2171, cbModelParam._m0[9u].z, fma(_2170, cbModelParam._m0[9u].y, _2169 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2171, cbModelParam._m0[10u].z, fma(_2170, cbModelParam._m0[10u].y, _2169 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2171, cbModelParam._m0[11u].z, fma(_2170, cbModelParam._m0[11u].y, _2169 * cbModelParam._m0[11u].x))), _1612);
            frontier_phi_13_35_ladder = _2299.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2299.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2299.x * cbModelParam._m0[1u].y;
        }
        _1693 = frontier_phi_13_35_ladder_2;
        _1695 = frontier_phi_13_35_ladder_1;
        _1697 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1681 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_801, _802, _803), _1612);
        _1693 = _1681.x * cbModelParam._m0[1u].y;
        _1695 = _1681.y * cbModelParam._m0[1u].y;
        _1697 = _1681.z * cbModelParam._m0[1u].y;
    }
    float _1701 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _630);
    float _1702 = isnan(_1701) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1701 : min(cbModelParam._m0[25u].w, _1701));
    float _1792;
    float _1794;
    float _1796;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1756 = fma(_865, cbModelParam._m0[21u].z, fma(_861, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _857)) + cbModelParam._m0[21u].w;
        float _1760 = fma(_865, cbModelParam._m0[22u].z, fma(_861, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _857)) + cbModelParam._m0[22u].w;
        float _1764 = fma(_865, cbModelParam._m0[23u].z, fma(_861, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _857)) + cbModelParam._m0[23u].w;
        float _1767 = fma(_803, cbModelParam._m0[21u].z, fma(_802, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _801));
        float _1770 = fma(_803, cbModelParam._m0[22u].z, fma(_802, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _801));
        float _1773 = fma(_803, cbModelParam._m0[23u].z, fma(_802, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _801));
        float _1913;
        if (_1767 > 0.0)
        {
            _1913 = abs((1.0 - _1756) / _1767);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1767 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1756 + 1.0) / _1767);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1913 = frontier_phi_25_21_ladder;
        }
        float _2189;
        if (_1770 > 0.0)
        {
            _2189 = abs((1.0 - _1760) / _1770);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1770 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1760 + 1.0) / _1770);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2189 = frontier_phi_37_32_ladder;
        }
        float _2402;
        if (_1773 > 0.0)
        {
            _2402 = abs((1.0 - _1764) / _1773);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1773 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1764 + 1.0) / _1773);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2402 = frontier_phi_46_43_ladder;
        }
        float _2404 = isnan(_2189) ? _1913 : (isnan(_1913) ? _2189 : min(_1913, _2189));
        float _2405 = isnan(_2402) ? _2404 : (isnan(_2404) ? _2402 : min(_2404, _2402));
        float _2409 = (_2405 * _1767) + _1756;
        float _2410 = (_2405 * _1770) + _1760;
        float _2411 = (_2405 * _1773) + _1764;
        float _2412 = _2405 * 9.9999997473787516355514526367188e-05;
        float _2413 = (-1.0) - _2412;
        float _2415 = _2412 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2411 > _2415) || ((_2411 < _2413) || ((_2410 > _2415) || ((_2410 < _2413) || ((_2409 < _2413) || (_2409 > _2415))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2610 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2411, cbModelParam._m0[17u].z, fma(_2410, cbModelParam._m0[17u].y, _2409 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2411, cbModelParam._m0[18u].z, fma(_2410, cbModelParam._m0[18u].y, _2409 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2411, cbModelParam._m0[19u].z, fma(_2410, cbModelParam._m0[19u].y, _2409 * cbModelParam._m0[19u].x))), _1702);
            frontier_phi_22_46_ladder = _2610.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2610.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2610.x * cbModelParam._m0[1u].z;
        }
        _1792 = frontier_phi_22_46_ladder_2;
        _1794 = frontier_phi_22_46_ladder_1;
        _1796 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1776 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_801, _802, _803), _1702);
        _1792 = _1776.x * cbModelParam._m0[1u].z;
        _1794 = _1776.y * cbModelParam._m0[1u].z;
        _1796 = _1776.z * cbModelParam._m0[1u].z;
    }
    float _1809 = (((_828 * _777) + _829) * _793) * ((cbModelParam._m0[1u].w * (_1792 - _1693)) + _1693);
    float _1811 = (((_828 * _779) + _829) * _793) * ((cbModelParam._m0[1u].w * (_1794 - _1695)) + _1695);
    float _1813 = (((_828 * _780) + _829) * _793) * ((cbModelParam._m0[1u].w * (_1796 - _1697)) + _1697);
    float _1816 = fma(_1813, cbSceneParam._m0[89u].z, fma(_1811, cbSceneParam._m0[89u].y, _1809 * cbSceneParam._m0[89u].x));
    float _1819 = fma(_1813, cbSceneParam._m0[90u].z, fma(_1811, cbSceneParam._m0[90u].y, _1809 * cbSceneParam._m0[90u].x));
    float _1822 = fma(_1813, cbSceneParam._m0[91u].z, fma(_1811, cbSceneParam._m0[91u].y, _1809 * cbSceneParam._m0[91u].x));
    uvec4 _1832 = floatBitsToUint(cbInstanceData._m0[_232 + 5u]);
    uint _1834 = _1832.x * 14u;
    uint _1835 = _1834 + 13u;
    float _1842 = _793 + (-1.0);
    float _1847 = (cbLight._m0[_1835].x * _1842) + 1.0;
    float _1848 = (cbLight._m0[_1835].y * _1842) + 1.0;
    float _1849 = (cbLight._m0[_1835].z * _1842) + 1.0;
    float _1850 = (cbLight._m0[_1835].w * _1842) + 1.0;
    uint _1851 = _1834 + 5u;
    float _1857 = isnan(1.0) ? _1848 : (isnan(_1848) ? 1.0 : min(_1848, 1.0));
    uint _1861 = _1834 + 4u;
    float _1867 = isnan(1.0) ? _1847 : (isnan(_1847) ? 1.0 : min(_1847, 1.0));
    uint _1871 = _1834 | 1u;
    float _1882 = dot(vec3(cbLight._m0[_1834].xyz), vec3(_627, _628, _629));
    float _1885 = dot(vec3(cbLight._m0[_1871].xyz), vec3(_627, _628, _629));
    float _4017 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
    float _4028 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _1890 = (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * 0.3183098733425140380859375;
    float _1892 = (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * 0.3183098733425140380859375;
    float _1899 = ((cbLight._m0[_1851].x * _1857) * _1892) + ((cbLight._m0[_1861].x * _1867) * _1890);
    float _1900 = ((_1857 * cbLight._m0[_1851].y) * _1892) + ((_1867 * cbLight._m0[_1861].y) * _1890);
    float _1901 = ((_1857 * cbLight._m0[_1851].z) * _1892) + ((_1867 * cbLight._m0[_1861].z) * _1890);
    uvec4 _1905 = floatBitsToUint(cbLight._m0[_1834 + 12u]);
    bool _1907 = _1905.x == 0u;
    float _1918;
    float _1920;
    float _1922;
    if (_1907)
    {
        _1918 = _1899;
        _1920 = _1900;
        _1922 = _1901;
    }
    else
    {
        uint _1926 = _1834 + 6u;
        float _1942 = (dot(vec3(cbLight._m0[_1834 + 2u].xyz), vec3(_627, _628, _629)) * 0.5) + 0.5;
        float _1943 = _1942 * _1942;
        float _4039 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
        float _1944 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1945 = isnan(1.0) ? _1849 : (isnan(_1849) ? 1.0 : min(_1849, 1.0));
        _1918 = (((cbLight._m0[_1926].x * 0.3183098733425140380859375) * _1944) * _1945) + _1899;
        _1920 = (((cbLight._m0[_1926].y * 0.3183098733425140380859375) * _1944) * _1945) + _1900;
        _1922 = (((cbLight._m0[_1926].z * 0.3183098733425140380859375) * _1944) * _1945) + _1901;
    }
    bool _1925 = _1905.y == 0u;
    float _1963;
    float _1965;
    float _1967;
    if (_1925)
    {
        _1963 = _1918;
        _1965 = _1920;
        _1967 = _1922;
    }
    else
    {
        uint _2133 = _1834 + 7u;
        float _2149 = (dot(vec3(cbLight._m0[_1834 + 3u].xyz), vec3(_627, _628, _629)) * 0.5) + 0.5;
        float _2150 = _2149 * _2149;
        float _4055 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2151 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _2152 = isnan(1.0) ? _1850 : (isnan(_1850) ? 1.0 : min(_1850, 1.0));
        _1963 = (((cbLight._m0[_2133].x * 0.3183098733425140380859375) * _2151) * _2152) + _1918;
        _1965 = (((cbLight._m0[_2133].y * 0.3183098733425140380859375) * _2151) * _2152) + _1920;
        _1967 = (((cbLight._m0[_2133].z * 0.3183098733425140380859375) * _2151) * _2152) + _1922;
    }
    uint _1970 = _1834 + 8u;
    float _1983 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1834].w)) * _630) * 0.949999988079071044921875);
    float _1984 = _1983 * _1983;
    float _1985 = cbLight._m0[_1834].x + _707;
    float _1986 = cbLight._m0[_1834].y + _708;
    float _1987 = cbLight._m0[_1834].z + _709;
    float _1991 = inversesqrt(dot(vec3(_1985, _1986, _1987), vec3(_1985, _1986, _1987)));
    float _1992 = _1991 * _1985;
    float _1993 = _1991 * _1986;
    float _1994 = _1991 * _1987;
    float _1995 = dot(vec3(_627, _628, _629), vec3(cbLight._m0[_1834].xyz));
    float _4071 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _1998 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _4082 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _1999 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _2000 = dot(vec3(_627, _628, _629), vec3(_1992, _1993, _1994));
    float _4093 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2003 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _2004 = dot(vec3(cbLight._m0[_1834].xyz), vec3(_1992, _1993, _1994));
    float _4104 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _2008 = _1984 * _1984;
    float _2012 = ((_2003 * _2003) * (_2008 + (-1.0))) + 1.0;
    float _2020 = exp2(log2(1.0 - (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0)))) * 5.0);
    float _2021 = 0.959999978542327880859375 - _774;
    float _2023 = 0.959999978542327880859375 - _775;
    float _2024 = 0.959999978542327880859375 - _776;
    float _2031 = 1.0 - _1984;
    float _2042 = (0.5 / (((_1999 * ((_1998 * _2031) + _1984)) + 9.9999999392252902907785028219223e-09) + (((_1999 * _2031) + _1984) * _1998))) * _1998;
    float _4115 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2044 = (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * (_2008 / ((_2012 * _2012) * 3.141590118408203125));
    uint _2055 = _1834 + 9u;
    float _2066 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1871].w)) * _630) * 0.949999988079071044921875);
    float _2067 = _2066 * _2066;
    float _2068 = cbLight._m0[_1871].x + _707;
    float _2069 = cbLight._m0[_1871].y + _708;
    float _2070 = cbLight._m0[_1871].z + _709;
    float _2074 = inversesqrt(dot(vec3(_2068, _2069, _2070), vec3(_2068, _2069, _2070)));
    float _2075 = _2074 * _2068;
    float _2076 = _2074 * _2069;
    float _2077 = _2074 * _2070;
    float _2078 = dot(vec3(_627, _628, _629), vec3(cbLight._m0[_1871].xyz));
    float _4126 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _2081 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    float _2082 = dot(vec3(_627, _628, _629), vec3(_2075, _2076, _2077));
    float _4137 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2085 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    float _2086 = dot(vec3(cbLight._m0[_1871].xyz), vec3(_2075, _2076, _2077));
    float _4148 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _2090 = _2067 * _2067;
    float _2094 = ((_2085 * _2085) * (_2090 + (-1.0))) + 1.0;
    float _2101 = exp2(log2(1.0 - (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0)))) * 5.0);
    float _2108 = 1.0 - _2067;
    float _2118 = (0.5 / (((_1999 * ((_2081 * _2108) + _2067)) + 9.9999999392252902907785028219223e-09) + (((_1999 * _2108) + _2067) * _2081))) * _2081;
    float _4159 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2120 = (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_2090 / ((_2094 * _2094) * 3.141590118408203125));
    float _2130 = (((((_2101 * _2021) + _777) * cbLight._m0[_2055].x) * _2120) * _1857) + (((((_2020 * _2021) + _777) * cbLight._m0[_1970].x) * _2044) * _1867);
    float _2131 = (((((_2101 * _2023) + _779) * cbLight._m0[_2055].y) * _2120) * _1857) + (((((_2020 * _2023) + _779) * cbLight._m0[_1970].y) * _2044) * _1867);
    float _2132 = (((((_2101 * _2024) + _780) * cbLight._m0[_2055].z) * _2120) * _1857) + (((((_2020 * _2024) + _780) * cbLight._m0[_1970].z) * _2044) * _1867);
    float _2194;
    float _2196;
    float _2198;
    if (_1907)
    {
        _2194 = _2130;
        _2196 = _2131;
        _2198 = _2132;
    }
    else
    {
        uint _2200 = _1834 + 2u;
        uint _2204 = _1834 + 10u;
        float _2218 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2200].w)) * _630) * 0.949999988079071044921875);
        float _2219 = _2218 * _2218;
        float _2220 = cbLight._m0[_2200].x + _707;
        float _2221 = cbLight._m0[_2200].y + _708;
        float _2222 = cbLight._m0[_2200].z + _709;
        float _2226 = inversesqrt(dot(vec3(_2220, _2221, _2222), vec3(_2220, _2221, _2222)));
        float _2227 = _2226 * _2220;
        float _2228 = _2226 * _2221;
        float _2229 = _2226 * _2222;
        float _2230 = dot(vec3(_627, _628, _629), vec3(cbLight._m0[_2200].xyz));
        float _4170 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        float _2233 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _2234 = dot(vec3(_627, _628, _629), vec3(_2227, _2228, _2229));
        float _4181 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2237 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _2238 = dot(vec3(cbLight._m0[_2200].xyz), vec3(_2227, _2228, _2229));
        float _4192 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        float _2242 = _2219 * _2219;
        float _2246 = ((_2237 * _2237) * (_2242 + (-1.0))) + 1.0;
        float _2253 = exp2(log2(1.0 - (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0)))) * 5.0);
        float _2260 = 1.0 - _2219;
        float _2270 = (0.5 / (((_1999 * ((_2233 * _2260) + _2219)) + 9.9999999392252902907785028219223e-09) + (((_1999 * _2260) + _2219) * _2233))) * _2233;
        float _4203 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2272 = (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_2242 / ((_2246 * _2246) * 3.141590118408203125));
        float _2273 = isnan(1.0) ? _1849 : (isnan(_1849) ? 1.0 : min(_1849, 1.0));
        _2194 = (((((_2253 * _2021) + _777) * cbLight._m0[_2204].x) * _2272) * _2273) + _2130;
        _2196 = (((((_2253 * _2023) + _779) * cbLight._m0[_2204].y) * _2272) * _2273) + _2131;
        _2198 = (((((_2253 * _2024) + _780) * cbLight._m0[_2204].z) * _2272) * _2273) + _2132;
    }
    float _2308;
    float _2310;
    float _2312;
    if (_1925)
    {
        _2308 = _2194;
        _2310 = _2196;
        _2312 = _2198;
    }
    else
    {
        uint _2319 = _1834 + 3u;
        uint _2323 = _1834 + 11u;
        float _2337 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2319].w)) * _630) * 0.949999988079071044921875);
        float _2338 = _2337 * _2337;
        float _2339 = cbLight._m0[_2319].x + _707;
        float _2340 = cbLight._m0[_2319].y + _708;
        float _2341 = cbLight._m0[_2319].z + _709;
        float _2345 = inversesqrt(dot(vec3(_2339, _2340, _2341), vec3(_2339, _2340, _2341)));
        float _2346 = _2345 * _2339;
        float _2347 = _2345 * _2340;
        float _2348 = _2345 * _2341;
        float _2349 = dot(vec3(_627, _628, _629), vec3(cbLight._m0[_2319].xyz));
        float _4219 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2352 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _2353 = dot(vec3(_627, _628, _629), vec3(_2346, _2347, _2348));
        float _4230 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2356 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _2357 = dot(vec3(cbLight._m0[_2319].xyz), vec3(_2346, _2347, _2348));
        float _4241 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2361 = _2338 * _2338;
        float _2365 = ((_2356 * _2356) * (_2361 + (-1.0))) + 1.0;
        float _2372 = exp2(log2(1.0 - (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0)))) * 5.0);
        float _2379 = 1.0 - _2338;
        float _2389 = (0.5 / (((_1999 * ((_2352 * _2379) + _2338)) + 9.9999999392252902907785028219223e-09) + (((_1999 * _2379) + _2338) * _2352))) * _2352;
        float _4252 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2391 = (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_2361 / ((_2365 * _2365) * 3.141590118408203125));
        float _2392 = isnan(1.0) ? _1850 : (isnan(_1850) ? 1.0 : min(_1850, 1.0));
        _2308 = (((((_2372 * _2021) + _777) * cbLight._m0[_2323].x) * _2391) * _2392) + _2194;
        _2310 = (((((_2372 * _2023) + _779) * cbLight._m0[_2323].y) * _2391) * _2392) + _2196;
        _2312 = (((((_2372 * _2024) + _780) * cbLight._m0[_2323].z) * _2391) * _2392) + _2198;
    }
    float _2527;
    float _2529;
    float _2531;
    float _2533;
    float _2535;
    float _2537;
    if (_1832.y == 0u)
    {
        float _2467 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2468 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2467;
        float _2469 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2467;
        float _2470 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2467;
        uvec4 _2482 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2483 = _2482.x;
        uint _2494 = uint((float(_2482.y) * floor(float(uint(cbSceneParam._m0[85u].y * _716) / _2483))) + floor(float(uint(cbSceneParam._m0[85u].x * _715) / _2483)));
        float _2504 = (log2(_2470 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2505 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        uint _2508 = uint(isnan(14.0) ? _2505 : (isnan(_2505) ? 14.0 : min(_2505, 14.0)));
        uvec4 _2513 = texelFetch(g_lightClusterGridBuffer, int(((_2508 << 2u) + (_2494 << 6u)) >> 2u));
        uint _2514 = _2513.x;
        uint _2515 = _2482.z;
        float _2615;
        float _2617;
        float _2619;
        float _2621;
        float _2623;
        float _2625;
        if (((((1u << ((_2515 >> 4u) & 15u)) + 4294967295u) & _2514) == 0u) || ((_2515 & 240u) == 0u))
        {
            _2615 = 0.0;
            _2617 = 0.0;
            _2619 = 0.0;
            _2621 = 0.0;
            _2623 = 0.0;
            _2625 = 0.0;
        }
        else
        {
            float _2616;
            float _2618;
            float _2620;
            float _2622;
            float _2624;
            float _2626;
            float _2760 = 0.0;
            float _2761 = 0.0;
            float _2762 = 0.0;
            float _2763 = 0.0;
            float _2764 = 0.0;
            float _2765 = 0.0;
            uint _2766 = 0u;
            uint _2775;
            bool _2776;
            for (;;)
            {
                _2775 = texelFetch(g_lightClassification, int((((_2508 << 5u) + (_2494 << 9u)) + (_2766 << 2u)) >> 2u)).x;
                _2776 = _2775 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2776)
                {
                    frontier_phi_61_pred = _2760;
                    frontier_phi_61_pred_1 = _2765;
                    frontier_phi_61_pred_2 = _2764;
                    frontier_phi_61_pred_3 = _2763;
                    frontier_phi_61_pred_4 = _2762;
                    frontier_phi_61_pred_5 = _2761;
                }
                else
                {
                    float _2884;
                    float _2885;
                    float _2886;
                    float _2887;
                    float _2888;
                    float _2889;
                    uint _2890;
                    _2884 = _2760;
                    _2885 = _2761;
                    _2886 = _2762;
                    _2887 = _2763;
                    _2888 = _2764;
                    _2889 = _2765;
                    _2890 = _2775;
                    float _2816;
                    float _2817;
                    float _2818;
                    float _2819;
                    float _2820;
                    float _2821;
                    for (;;)
                    {
                        uint _2894 = uint(findLSB(_2890)) + (_2766 << 5u);
                        uint _2891 = (_2890 + 4294967295u) & _2890;
                        uint _2896 = _2894 * 48u;
                        vec4 _2910 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2896)).x, texelFetch(g_PointLightRenderingBuffer, int(_2896 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2896 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2896 + 3u)).x));
                        uint _2916 = (_2894 * 48u) + 4u;
                        vec4 _2929 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2916)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 3u)).x));
                        uint _2935 = (_2894 * 48u) + 8u;
                        vec3 _2946 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2935)).x, texelFetch(g_PointLightRenderingBuffer, int(_2935 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2935 + 2u)).x));
                        float _2950 = _2910.x - _2468;
                        float _2951 = _2910.y - _2469;
                        float _2952 = _2910.z - _2470;
                        float _2953 = dot(vec3(_2950, _2951, _2952), vec3(_2950, _2951, _2952));
                        float _2956 = inversesqrt(_2953);
                        float _2957 = _2956 * _2950;
                        float _2958 = _2956 * _2951;
                        float _2959 = _2956 * _2952;
                        float _2960 = dot(vec3(_734, _737, _740), vec3(_2957, _2958, _2959));
                        float _2965 = 1.0 - (_2953 * _2910.w);
                        float _4278 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
                        float _2966 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
                        float _2967 = sqrt(_2953) * _2929.w;
                        float _2970 = 1.39999997615814208984375 / (_2967 + 1.39999997615814208984375);
                        float _2971 = _2970 * _2970;
                        float _2974 = ((1.0 - _2971) * _2960) + _2971;
                        float _2977 = _2967 * _2967;
                        float _2981 = ((isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0))) * _2966) / ((_2977 * 0.699999988079071044921875) + 1.0);
                        float _2985 = (-0.0) - _2468;
                        float _2986 = (-0.0) - _2469;
                        float _2987 = (-0.0) - _2470;
                        float _2991 = inversesqrt(dot(vec3(_2985, _2986, _2987), vec3(_2985, _2986, _2987)));
                        float _2992 = _2991 * _2985;
                        float _2993 = _2991 * _2986;
                        float _2994 = _2991 * _2987;
                        float _3002 = exp2(log2(1.0 / ((_2977 * 3.5) + 5.0)) * 0.25);
                        float _3003 = 1.0 - _809;
                        float _3010 = sqrt(1.0 - ((1.0 - (_3003 * _3003)) * (1.0 - (_3002 * _3002))));
                        float _3011 = _3010 * _3010;
                        float _3012 = _3011 * _3011;
                        float _3013 = _2992 + _2957;
                        float _3014 = _2993 + _2958;
                        float _3015 = _2994 + _2959;
                        float _3019 = inversesqrt(dot(vec3(_3013, _3014, _3015), vec3(_3013, _3014, _3015)));
                        float _3023 = dot(vec3(_734, _737, _740), vec3(_2992, _2993, _2994));
                        float _4294 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
                        float _3026 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
                        float _3027 = dot(vec3(_734, _737, _740), vec3(_3019 * _3013, _3019 * _3014, _3019 * _3015));
                        float _4305 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                        float _3030 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
                        float _3034 = ((_3030 * _3030) * (_3012 + (-1.0))) + 1.0;
                        float _3035 = _2970 * _3011;
                        float _3036 = _3035 * _3035;
                        float _3039 = ((1.0 - _3036) * _2960) + _3036;
                        float _4316 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                        float _3040 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
                        float _3041 = 1.0 - _3011;
                        float _3051 = (0.5 / (((_3040 * ((_3026 * _3041) + _3011)) + 9.9999999392252902907785028219223e-09) + (((_3040 * _3041) + _3011) * _3026))) * _3040;
                        float _4327 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                        float _3062 = (((_3012 * 3.1415927410125732421875) * (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0)))) / ((_3034 * _3034) * ((_2977 * 2.1991131305694580078125) + 3.141590118408203125))) * _2966;
                        _2819 = (_2981 * _2929.x) + _2887;
                        _2820 = (_2981 * _2929.y) + _2888;
                        _2821 = (_2981 * _2929.z) + _2889;
                        _2816 = (_3062 * _2946.x) + _2884;
                        _2817 = (_3062 * _2946.y) + _2885;
                        _2818 = (_3062 * _2946.z) + _2886;
                        if (_2891 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2884 = _2816;
                            _2885 = _2817;
                            _2886 = _2818;
                            _2887 = _2819;
                            _2888 = _2820;
                            _2889 = _2821;
                            _2890 = _2891;
                        }
                    }
                    frontier_phi_61_pred = _2816;
                    frontier_phi_61_pred_1 = _2821;
                    frontier_phi_61_pred_2 = _2820;
                    frontier_phi_61_pred_3 = _2819;
                    frontier_phi_61_pred_4 = _2818;
                    frontier_phi_61_pred_5 = _2817;
                }
                _2616 = frontier_phi_61_pred;
                _2626 = frontier_phi_61_pred_1;
                _2624 = frontier_phi_61_pred_2;
                _2622 = frontier_phi_61_pred_3;
                _2620 = frontier_phi_61_pred_4;
                _2618 = frontier_phi_61_pred_5;
                uint _2767 = _2766 + 1u;
                if (_2767 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2760 = _2616;
                    _2761 = _2618;
                    _2762 = _2620;
                    _2763 = _2622;
                    _2764 = _2624;
                    _2765 = _2626;
                    _2766 = _2767;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2615 = _2616;
            _2617 = _2618;
            _2619 = _2620;
            _2621 = _2622;
            _2623 = _2624;
            _2625 = _2626;
        }
        uvec4 _2629 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2630 = _2629.z;
        uint _2632 = (_2630 >> 8u) & 15u;
        float _2728;
        float _2730;
        float _2732;
        float _2734;
        float _2736;
        float _2738;
        if (((4294967295u << _2632) & _2514) == 0u)
        {
            _2728 = _2615;
            _2730 = _2617;
            _2732 = _2619;
            _2734 = _2621;
            _2736 = _2623;
            _2738 = _2625;
        }
        else
        {
            float _2753 = inversesqrt(dot(vec3(_2468, _2469, _2470), vec3(_2468, _2469, _2470)));
            float _2754 = _2753 * _2468;
            float _2755 = _2753 * _2469;
            float _2756 = _2753 * _2470;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2632 < ((_2630 >> 12u) & 15u))
            {
                float _2729;
                float _2731;
                float _2733;
                float _2735;
                float _2737;
                float _2739;
                float _2867 = _2615;
                float _2868 = _2617;
                float _2869 = _2619;
                float _2870 = _2621;
                float _2871 = _2623;
                float _2872 = _2625;
                uint _2873 = _2632;
                uint _2882;
                bool _2883;
                for (;;)
                {
                    _2882 = texelFetch(g_lightClassification, int((((_2508 << 5u) + (_2494 << 9u)) + (_2873 << 2u)) >> 2u)).x;
                    _2883 = _2882 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2883)
                    {
                        frontier_phi_67_pred = _2870;
                        frontier_phi_67_pred_1 = _2871;
                        frontier_phi_67_pred_2 = _2872;
                        frontier_phi_67_pred_3 = _2869;
                        frontier_phi_67_pred_4 = _2868;
                        frontier_phi_67_pred_5 = _2867;
                    }
                    else
                    {
                        float _3067;
                        float _3068;
                        float _3069;
                        float _3070;
                        float _3071;
                        float _3072;
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3080 = _2867;
                        float _3081 = _2868;
                        float _3082 = _2869;
                        float _3083 = _2870;
                        float _3084 = _2871;
                        float _3085 = _2872;
                        uint _3086 = _2882;
                        uint _3087;
                        vec4 _3112;
                        float _3113;
                        vec4 _3128;
                        vec3 _3140;
                        vec4 _3155;
                        vec4 _3171;
                        float _3217;
                        bool _3218;
                        for (;;)
                        {
                            uint _3097 = ((_2873 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3086));
                            _3087 = (_3086 + 4294967295u) & _3086;
                            uint _3099 = _3097 * 40u;
                            _3112 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3099)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 3u)).x));
                            _3113 = _3112.w;
                            uint _3115 = (_3097 * 40u) + 4u;
                            _3128 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 3u)).x));
                            uint _3130 = (_3097 * 40u) + 8u;
                            _3140 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3130)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 2u)).x));
                            uint _3142 = (_3097 * 40u) + 16u;
                            _3155 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3142)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 3u)).x));
                            uint _3158 = (_3097 * 40u) + 20u;
                            _3171 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 3u)).x));
                            uint _3173 = (_3097 * 40u) + 24u;
                            vec4 _3186 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 3u)).x));
                            uint _3192 = (_3097 * 40u) + 28u;
                            vec4 _3205 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3192)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 3u)).x));
                            _3217 = fma(_2470, _3205.z, fma(_2469, _3205.y, _3205.x * _2468)) + _3205.w;
                            _3218 = !((fma(_2470, _3186.z, fma(_2469, _3186.y, _3186.x * _2468)) + _3186.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3218)
                            {
                                float _3245 = _3112.x - _2468;
                                float _3246 = _3112.y - _2469;
                                float _3247 = _3112.z - _2470;
                                float _3248 = dot(vec3(_3245, _3246, _3247), vec3(_3245, _3246, _3247));
                                float _3251 = inversesqrt(_3248);
                                float _3252 = _3251 * _3245;
                                float _3253 = _3251 * _3246;
                                float _3254 = _3251 * _3247;
                                float _3258 = 1.0 - (_3248 / (_3113 * _3113));
                                float _4338 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                                float _3259 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
                                float _3263 = sqrt(_3248) * _3128.w;
                                float _3265 = 1.39999997615814208984375 / (_3263 + 1.39999997615814208984375);
                                float _3266 = _3265 * _3265;
                                float _3269 = ((1.0 - _3266) * dot(vec3(_3252, _3253, _3254), vec3(_734, _737, _740))) + _3266;
                                float _3272 = _3263 * _3263;
                                float _3276 = (fma(_2470, _3155.z, fma(_2469, _3155.y, _3155.x * _2468)) + _3155.w) / _3217;
                                float _3277 = (fma(_2470, _3171.z, fma(_2469, _3171.y, _3171.x * _2468)) + _3171.w) / _3217;
                                float _3281 = 1.0 - dot(vec2(_3276, _3277), vec2(_3276, _3277));
                                float _4354 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
                                float _3282 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
                                float _3283 = _3282 * (((isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0))) * _3259) / ((_3272 * 0.699999988079071044921875) + 1.0));
                                float _3295 = exp2(log2(1.0 / ((_3272 * 3.5) + 5.0)) * 0.25);
                                float _3296 = 1.0 - _809;
                                float _3303 = sqrt(1.0 - ((1.0 - (_3296 * _3296)) * (1.0 - (_3295 * _3295))));
                                float _3304 = _3303 * _3303;
                                float _3305 = _3304 * _3304;
                                float _3306 = _3252 - _2754;
                                float _3307 = _3253 - _2755;
                                float _3308 = _3254 - _2756;
                                float _3312 = inversesqrt(dot(vec3(_3306, _3307, _3308), vec3(_3306, _3307, _3308)));
                                float _3316 = dot(vec3(_734, _737, _740), vec3((-0.0) - _2754, (-0.0) - _2755, (-0.0) - _2756));
                                float _4365 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                                float _3319 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
                                float _3320 = dot(vec3(_734, _737, _740), vec3(_3312 * _3306, _3312 * _3307, _3312 * _3308));
                                float _4376 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                                float _3323 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
                                float _3327 = ((_3323 * _3323) * (_3305 + (-1.0))) + 1.0;
                                float _3328 = _3265 * _3304;
                                float _3329 = _3328 * _3328;
                                float _3335 = ((1.0 - _3329) * dot(vec3(_734, _737, _740), vec3(_3252, _3253, _3254))) + _3329;
                                float _4387 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                                float _3336 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
                                float _3337 = 1.0 - _3304;
                                float _3347 = (0.5 / (((_3336 * ((_3319 * _3337) + _3304)) + 9.9999999392252902907785028219223e-09) + (((_3336 * _3337) + _3304) * _3319))) * _3336;
                                float _4398 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                                float _3357 = (_3282 * _3259) * (((_3305 * 3.1415927410125732421875) * (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0)))) / ((_3327 * _3327) * ((_3272 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3357 * _3140.x;
                                frontier_phi_73_pred_1 = _3357 * _3140.y;
                                frontier_phi_73_pred_2 = _3283 * _3128.z;
                                frontier_phi_73_pred_3 = _3283 * _3128.y;
                                frontier_phi_73_pred_4 = _3283 * _3128.x;
                                frontier_phi_73_pred_5 = _3357 * _3140.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3361 = frontier_phi_73_pred;
                            _3362 = frontier_phi_73_pred_1;
                            _3366 = frontier_phi_73_pred_2;
                            _3365 = frontier_phi_73_pred_3;
                            _3364 = frontier_phi_73_pred_4;
                            _3363 = frontier_phi_73_pred_5;
                            _3070 = _3364 + _3083;
                            _3071 = _3365 + _3084;
                            _3072 = _3366 + _3085;
                            _3067 = _3361 + _3080;
                            _3068 = _3362 + _3081;
                            _3069 = _3363 + _3082;
                            if (_3087 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3080 = _3067;
                                _3081 = _3068;
                                _3082 = _3069;
                                _3083 = _3070;
                                _3084 = _3071;
                                _3085 = _3072;
                                _3086 = _3087;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3070;
                        frontier_phi_67_pred_1 = _3071;
                        frontier_phi_67_pred_2 = _3072;
                        frontier_phi_67_pred_3 = _3069;
                        frontier_phi_67_pred_4 = _3068;
                        frontier_phi_67_pred_5 = _3067;
                    }
                    _2735 = frontier_phi_67_pred;
                    _2737 = frontier_phi_67_pred_1;
                    _2739 = frontier_phi_67_pred_2;
                    _2733 = frontier_phi_67_pred_3;
                    _2731 = frontier_phi_67_pred_4;
                    _2729 = frontier_phi_67_pred_5;
                    uint _2874 = _2873 + 1u;
                    if (_2874 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2867 = _2729;
                        _2868 = _2731;
                        _2869 = _2733;
                        _2870 = _2735;
                        _2871 = _2737;
                        _2872 = _2739;
                        _2873 = _2874;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2737;
                frontier_phi_55_56_ladder_1 = _2739;
                frontier_phi_55_56_ladder_2 = _2735;
                frontier_phi_55_56_ladder_3 = _2733;
                frontier_phi_55_56_ladder_4 = _2731;
                frontier_phi_55_56_ladder_5 = _2729;
            }
            else
            {
                frontier_phi_55_56_ladder = _2623;
                frontier_phi_55_56_ladder_1 = _2625;
                frontier_phi_55_56_ladder_2 = _2621;
                frontier_phi_55_56_ladder_3 = _2619;
                frontier_phi_55_56_ladder_4 = _2617;
                frontier_phi_55_56_ladder_5 = _2615;
            }
            _2728 = frontier_phi_55_56_ladder_5;
            _2730 = frontier_phi_55_56_ladder_4;
            _2732 = frontier_phi_55_56_ladder_3;
            _2734 = frontier_phi_55_56_ladder_2;
            _2736 = frontier_phi_55_56_ladder;
            _2738 = frontier_phi_55_56_ladder_1;
        }
        float _2743 = isnan(1.0) ? _793 : (isnan(_793) ? 1.0 : min(_793, 1.0));
        _2527 = (_2743 * _2734) + _1963;
        _2529 = (_2743 * _2736) + _1965;
        _2531 = (_2743 * _2738) + _1967;
        _2533 = ((_2728 * _777) * _2743) + _2308;
        _2535 = ((_2730 * _779) * _2743) + _2310;
        _2537 = ((_2732 * _780) * _2743) + _2312;
    }
    else
    {
        _2527 = _1963;
        _2529 = _1965;
        _2531 = _1967;
        _2533 = _2308;
        _2535 = _2310;
        _2537 = _2312;
    }
    float _4414 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _4425 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _4436 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    uint _2557 = _232 + 6u;
    float _2565 = _715 / cbSceneParam._m0[86u].x;
    float _2566 = _716 / cbSceneParam._m0[86u].y;
    vec4 _2580 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2565, _2566, (log2((isnan(cbSceneParam._m0[77u].w) ? _649 : (isnan(_649) ? cbSceneParam._m0[77u].w : min(_649, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2582 = _2580.x;
    float _2583 = _2580.y;
    float _2584 = _2580.z;
    float _2585 = _2580.w;
    float _2678;
    float _2680;
    float _2682;
    float _2684;
    if (_649 > cbSceneParam._m0[78u].w)
    {
        float _2640 = isnan(_649) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _649 : min(cbSceneParam._m0[80u].w, _649));
        float _2641 = _2640 / _649;
        float _2652 = _2641 * _700;
        float _2653 = _701 * _2641;
        float _2654 = (-0.0) - _2653;
        float _2656 = _2641 * _702;
        float _2658 = (cbSceneParam._m0[77u].w * _2654) / _2640;
        float _2659 = _2658 + cbSceneParam._m0[79u].w;
        float _2660 = cbSceneParam._m0[79u].w - _2653;
        float _2666 = sqrt(((_2652 * _2652) + (_2653 * _2653)) + (_2656 * _2656));
        float _2669 = (1.0 - (cbSceneParam._m0[77u].w / _2640)) * _2666;
        float _2674 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2676 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2829;
        if (abs((_2654 - _2658) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2829 = ((((_2659 > 0.0) ? exp2(_2674 * _2659) : (2.0 - exp2(_2676 * _2659))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2669;
        }
        else
        {
            float _2789 = 1.0 / cbSceneParam._m0[80u].x;
            float _2790 = isnan(_2660) ? _2659 : (isnan(_2659) ? _2660 : max(_2659, _2660));
            float _2791 = isnan(_2660) ? _2659 : (isnan(_2659) ? _2660 : min(_2659, _2660));
            float _2800 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : min(_2790, 0.0));
            float _2801 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : min(_2791, 0.0));
            _2829 = ((abs(_2666 / _2654) * cbSceneParam._m0[80u].y) * ((((_2800 - _2801) * 2.0) - ((exp2(_2674 * (isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0)))) - exp2(_2674 * (isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0))))) * _2789)) - ((exp2(_2676 * _2800) - exp2(_2676 * _2801)) * _2789))) + (_2669 * cbSceneParam._m0[80u].z);
        }
        vec4 _2831 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2565, _2566, 1.0), 0.0);
        float _2840 = exp2((_2829 * (-1.44269502162933349609375)) * (1.0 - _2831.w));
        float _2841 = log2(_2840);
        float _2857 = log2(_2585);
        _2678 = (exp2(_2857 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2841 * cbSceneParam._m0[78u].x)) * _2831.x) / cbSceneParam._m0[78u].x)) + _2582;
        _2680 = (exp2(_2857 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2841 * cbSceneParam._m0[78u].y)) * _2831.y) / cbSceneParam._m0[78u].y)) + _2583;
        _2682 = (exp2(_2857 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2841 * cbSceneParam._m0[78u].z)) * _2831.z) / cbSceneParam._m0[78u].z)) + _2584;
        _2684 = _2840 * _2585;
    }
    else
    {
        _2678 = _2582;
        _2680 = _2583;
        _2682 = _2584;
        _2684 = _2585;
    }
    float _2696 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2697 = _2696 == 3.0;
    float _2698 = log2(_2684);
    float _2705 = exp2(_2698 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (_2527 + ((isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))) * _793))) + ((_2533 + ((isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))) * _1601)) * cbPerFrame._m0[3u].x));
    float _2706 = exp2(_2698 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * (_2529 + ((isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))) * _793))) + ((_2535 + ((isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))) * _1601)) * cbPerFrame._m0[3u].x));
    float _2707 = exp2(_2698 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_2531 + ((isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))) * _793))) + ((_2537 + ((isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))) * _1601)) * cbPerFrame._m0[3u].x));
    float _2716 = (_2696 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2716 * (_2697 ? _2705 : (_2705 + (cbSceneParam._m0[72u].w * _2678)));
    SV_Target.y = _2716 * (_2697 ? _2706 : (_2706 + (cbSceneParam._m0[72u].w * _2680)));
    SV_Target.z = _2716 * (_2697 ? _2707 : (_2707 + (cbSceneParam._m0[72u].w * _2682)));
    SV_Target.w = cbInstanceData._m0[_2557].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2557].w;
}


