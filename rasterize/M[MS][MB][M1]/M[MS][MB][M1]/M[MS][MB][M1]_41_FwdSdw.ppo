#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1125;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _241 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _241 + 1u;
    uint _250 = _241 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_241].x * cbInstanceData._m0[_241].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _280 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _286 = _280.x * cbMtdParam._m0[9u].x;
    float _287 = _280.y * cbMtdParam._m0[9u].y;
    float _288 = _280.z * cbMtdParam._m0[9u].z;
    vec4 _307 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _260) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _261) + cbTextureTilingScale._m0[14u].w));
    vec4 _327 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _331 = _327.z;
    float _336 = (_327.x * 2.0) + (-1.0);
    float _338 = (_327.y * 2.0) + (-1.0);
    float _339 = dot(vec2(_336, _338), vec2(_336, _338));
    float _3736 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _345 = sqrt(1.0 - (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))));
    vec4 _362 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _364 = _362.x;
    float _365 = 1.0 - _364;
    float _374 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _377 = ((isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : min(_374, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _386 = (_377 - ((((((_364 - _365) * cbMtdParam._m0[24u].z) + _365) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _377))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3757 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _387 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _394 = (_387 * ((_307.x * cbMtdParam._m0[18u].x) - _286)) + _286;
    float _395 = (_387 * ((_307.y * cbMtdParam._m0[18u].y) - _287)) + _287;
    float _396 = (_387 * ((_307.z * cbMtdParam._m0[18u].z) - _288)) + _288;
    vec4 _409 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _260) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _261) + cbTextureTilingScale._m0[19u].w));
    float _411 = _409.x;
    float _412 = 1.0 - _411;
    float _441 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_411 - _412) * cbMtdParam._m0[24u].w) + _412) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3768 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _442 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _450 = ((((cbMtdParam._m0[10u].x - _394) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _442) + _394;
    float _451 = ((((cbMtdParam._m0[10u].y - _395) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _442) + _395;
    float _452 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _396)) * _442) + _396;
    vec4 _465 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _467 = _465.x;
    float _469 = _467 - (_467 * _387);
    float _471 = _469 - (_469 * _442);
    vec4 _485 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _492 = (_485.x * 2.0) + (-1.0);
    float _493 = (_485.y * 2.0) + (-1.0);
    float _494 = dot(vec2(_492, _493), vec2(_492, _493));
    float _3779 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _502 = (_387 * (_485.z - _331)) + _331;
    float _505 = ((cbMtdParam._m0[23u].y - _502) * _442) + _502;
    vec4 _527 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _260) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _261) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _533 = (_527.x * 2.0) + (-1.0);
    float _534 = (_527.y * 2.0) + (-1.0);
    float _535 = dot(vec2(_533, _534), vec2(_533, _534));
    float _3790 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _552 = (((_492 - _336) + (cbMtdParam._m0[21u].x * _336)) * _387) + _336;
    float _553 = (((_493 - _338) + (cbMtdParam._m0[21u].x * _338)) * _387) + _338;
    float _554 = (_387 * (sqrt(1.0 - (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0)))) - _345)) + _345;
    float _565 = (((_533 - _552) + (_552 * cbMtdParam._m0[22u].z)) * _442) + _552;
    float _566 = (((_534 - _553) + (_553 * cbMtdParam._m0[22u].z)) * _442) + _553;
    float _567 = ((sqrt(1.0 - (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) - _554) * _442) + _554;
    float _569 = cbMtdParam._m0[22u].x + _327.w;
    float _572 = fma(_567, _228 * NORMAL.x, fma(_566, _235 * TANGENT.x, (_221 * _213) * _565));
    float _575 = fma(_567, _228 * NORMAL.y, fma(_566, _235 * TANGENT.y, (_221 * _214) * _565));
    float _578 = fma(_567, _228 * NORMAL.z, fma(_566, _235 * TANGENT.z, (_221 * _215) * _565));
    float _582 = inversesqrt(dot(vec3(_572, _575, _578), vec3(_572, _575, _578)));
    float _583 = _582 * _572;
    float _584 = _582 * _575;
    float _585 = _582 * _578;
    float _3801 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _586 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _3812 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _3823 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _3834 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _3845 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _3856 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _591 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _605 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _645 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _655 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _645);
    float _656 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _645);
    float _657 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _645);
    float _661 = inversesqrt(dot(vec3(_655, _656, _657), vec3(_655, _656, _657)));
    float _662 = _655 * _661;
    float _663 = _656 * _661;
    float _664 = _657 * _661;
    float _670 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _671 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _692 = fma(_585, cbSceneParam._m0[5u].z, fma(_584, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _583));
    float _695 = fma(_585, cbSceneParam._m0[6u].z, fma(_584, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _583));
    float _698 = fma(_585, cbSceneParam._m0[7u].z, fma(_584, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _583));
    uint _712 = (_241 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _718 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0)))) * cbInstanceData._m0[_712].x;
    float _719 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0)))) * cbInstanceData._m0[_712].y;
    float _720 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0)))) * cbInstanceData._m0[_712].z;
    float _3867 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _721 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    float _3878 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _722 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _3889 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _723 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _724 = 1.0 - _591;
    float _725 = _721 * _724;
    float _726 = _722 * _724;
    float _727 = _723 * _724;
    float _732 = (_721 + (-0.039999999105930328369140625)) * _591;
    float _733 = (_722 + (-0.039999999105930328369140625)) * _591;
    float _734 = (_723 + (-0.039999999105930328369140625)) * _591;
    float _735 = _732 + 0.039999999105930328369140625;
    float _737 = _733 + 0.039999999105930328369140625;
    float _738 = _734 + 0.039999999105930328369140625;
    vec4 _747 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _670, cbSceneParam._m0[86u].y * _671));
    float _751 = ((isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * TEXCOORD_5.w) * _747.x;
    float _752 = dot(vec3(_583, _584, _585), vec3(_662, _663, _664));
    float _755 = _752 * 2.0;
    float _759 = (_755 * _583) - _662;
    float _760 = (_755 * _584) - _663;
    float _761 = (_755 * _585) - _664;
    float _765 = abs(dot(vec3(_662, _663, _664), vec3(_583, _584, _585)));
    float _3900 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _767 = sqrt(_586);
    float _780 = exp2((_767 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_767 * 3.0));
    float _786 = (1.0 - _780) * ((_767 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _787 = _780 * _767;
    float _815 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _819 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _823 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1124;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _849 = fma(_823, cbModelParam._m0[26u].z, fma(_819, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _815));
        float _853 = fma(_823, cbModelParam._m0[27u].z, fma(_819, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _815));
        float _857 = fma(_823, cbModelParam._m0[28u].z, fma(_819, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _815));
        float _882 = _815 + _583;
        float _883 = _819 + _584;
        float _884 = _823 + _585;
        float _894 = fma(_884, cbModelParam._m0[26u].z, fma(_883, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _882)) - _849;
        float _895 = fma(_884, cbModelParam._m0[27u].z, fma(_883, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _882)) - _853;
        float _896 = fma(_884, cbModelParam._m0[28u].z, fma(_883, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _882)) - _857;
        float _900 = inversesqrt(dot(vec3(_894, _895, _896), vec3(_894, _895, _896)));
        float _913 = ((_900 * _894) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_849 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _914 = ((_900 * _895) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_853 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _915 = ((_900 * _896) / cbModelParam._m0[34u].z) + ((((((_857 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _918 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_913, _914, _915), 0.0);
        vec4 _925 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_913, _914, _915), 0.0);
        vec4 _932 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_913, _914, _915), 0.0);
        vec4 _939 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_913, _914, _915), 0.0);
        float _952 = exp2((_918.w + (-0.5)) * 20.0) * 2.0;
        float _953 = _952 * (_918.x + (-0.5));
        float _954 = _952 * (_918.y + (-0.5));
        float _955 = _952 * (_918.z + (-0.5));
        float _962 = exp2((_925.w + (-0.5)) * 20.0) * 2.0;
        float _963 = _962 * (_925.x + (-0.5));
        float _964 = _962 * (_925.y + (-0.5));
        float _965 = _962 * (_925.z + (-0.5));
        float _972 = exp2((_932.w + (-0.5)) * 20.0) * 2.0;
        float _973 = _972 * (_932.x + (-0.5));
        float _974 = _972 * (_932.y + (-0.5));
        float _975 = _972 * (_932.z + (-0.5));
        float _982 = exp2((_939.w + (-0.5)) * 20.0) * 2.0;
        float _983 = _982 * (_939.x + (-0.5));
        float _984 = _982 * (_939.y + (-0.5));
        float _985 = _982 * (_939.z + (-0.5));
        float _986 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _987 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _988 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _989 = _953 * 0.5;
        float _990 = _963 * 0.5;
        float _991 = _973 * 0.5;
        float _992 = dot(vec3(_989, _990, _991), vec3(_989, _990, _991));
        float _997 = (_992 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_992);
        float _1006 = (dot(vec3(_583, _584, _585), vec3(_997 * _989, _997 * _990, _997 * _991)) + 1.0) * 0.5;
        float _3926 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1016 = sqrt(((_990 * _990) + (_989 * _989)) + (_991 * _991)) / (_986 + 9.9999997473787516355514526367188e-06);
        float _3937 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1018 = _1017 * 2.0;
        float _1022 = (1.0 - _1017) / (_1017 + 1.0);
        float _3948 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1032 = ((((1.0 - _1023) * (_1018 + 2.0)) * exp2(log2(isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * (_1018 + 1.0))) + _1023) * _986;
        float _1033 = _954 * 0.5;
        float _1034 = _964 * 0.5;
        float _1035 = _974 * 0.5;
        float _1036 = dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035));
        float _1041 = (_1036 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1036);
        float _1049 = (dot(vec3(_583, _584, _585), vec3(_1041 * _1033, _1041 * _1034, _1041 * _1035)) + 1.0) * 0.5;
        float _3959 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1058 = sqrt(((_1034 * _1034) + (_1033 * _1033)) + (_1035 * _1035)) / (_987 + 9.9999997473787516355514526367188e-06);
        float _3970 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1060 = _1059 * 2.0;
        float _1064 = (1.0 - _1059) / (_1059 + 1.0);
        float _3981 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1074 = ((((1.0 - _1065) * (_1060 + 2.0)) * exp2(log2(isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * (_1060 + 1.0))) + _1065) * _987;
        float _1075 = _955 * 0.5;
        float _1076 = _965 * 0.5;
        float _1077 = _975 * 0.5;
        float _1078 = dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077));
        float _1083 = (_1078 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1078);
        float _1091 = (dot(vec3(_583, _584, _585), vec3(_1083 * _1075, _1083 * _1076, _1083 * _1077)) + 1.0) * 0.5;
        float _3992 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1100 = sqrt(((_1076 * _1076) + (_1075 * _1075)) + (_1077 * _1077)) / (_988 + 9.9999997473787516355514526367188e-06);
        float _4003 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1102 = _1101 * 2.0;
        float _1106 = (1.0 - _1101) / (_1101 + 1.0);
        float _4014 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1116 = ((((1.0 - _1107) * (_1102 + 2.0)) * exp2(log2(isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_1102 + 1.0))) + _1107) * _988;
        _1124 = _955;
        _1126 = _954;
        _1127 = _953;
        _1128 = _965;
        _1129 = _964;
        _1130 = _963;
        _1131 = _975;
        _1132 = _974;
        _1133 = _973;
        _1134 = _988;
        _1135 = _987;
        _1136 = _986;
        _1137 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0)));
        _1138 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0)));
        _1139 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0)));
    }
    else
    {
        _1124 = _1125;
        _1126 = _1125;
        _1127 = _1125;
        _1128 = _1125;
        _1129 = _1125;
        _1130 = _1125;
        _1131 = _1125;
        _1132 = _1125;
        _1133 = _1125;
        _1134 = _1125;
        _1135 = _1125;
        _1136 = _1125;
        _1137 = 0.0;
        _1138 = 0.0;
        _1139 = 0.0;
    }
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1164 = fma(_823, cbModelParam._m0[30u].z, fma(_819, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _815));
        float _1168 = fma(_823, cbModelParam._m0[31u].z, fma(_819, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _815));
        float _1172 = fma(_823, cbModelParam._m0[32u].z, fma(_819, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _815));
        float _1195 = _815 + _583;
        float _1196 = _819 + _584;
        float _1197 = _823 + _585;
        float _1207 = fma(_1197, cbModelParam._m0[30u].z, fma(_1196, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1195)) - _1164;
        float _1208 = fma(_1197, cbModelParam._m0[31u].z, fma(_1196, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1195)) - _1168;
        float _1209 = fma(_1197, cbModelParam._m0[32u].z, fma(_1196, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1195)) - _1172;
        float _1213 = inversesqrt(dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209)));
        float _1226 = ((_1213 * _1207) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1164 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1227 = ((_1213 * _1208) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1168 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1228 = ((_1213 * _1209) / cbModelParam._m0[35u].z) + ((((((_1172 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1230 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        float _1263 = exp2((_1230.w + (-0.5)) * 20.0) * 2.0;
        float _1264 = _1263 * (_1230.x + (-0.5));
        float _1265 = _1263 * (_1230.y + (-0.5));
        float _1266 = _1263 * (_1230.z + (-0.5));
        float _1273 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1274 = _1273 * (_1237.x + (-0.5));
        float _1275 = _1273 * (_1237.y + (-0.5));
        float _1276 = _1273 * (_1237.z + (-0.5));
        float _1283 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1284 = _1283 * (_1244.x + (-0.5));
        float _1285 = _1283 * (_1244.y + (-0.5));
        float _1286 = _1283 * (_1244.z + (-0.5));
        float _1293 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1294 = _1293 * (_1251.x + (-0.5));
        float _1295 = _1293 * (_1251.y + (-0.5));
        float _1296 = _1293 * (_1251.z + (-0.5));
        float _1297 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1298 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1299 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1300 = _1264 * 0.5;
        float _1301 = _1274 * 0.5;
        float _1302 = _1284 * 0.5;
        float _1303 = dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302));
        float _1308 = (_1303 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1303);
        float _1316 = (dot(vec3(_583, _584, _585), vec3(_1308 * _1300, _1308 * _1301, _1308 * _1302)) + 1.0) * 0.5;
        float _4055 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1325 = sqrt(((_1301 * _1301) + (_1300 * _1300)) + (_1302 * _1302)) / (_1297 + 9.9999997473787516355514526367188e-06);
        float _4066 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1327 = _1326 * 2.0;
        float _1331 = (1.0 - _1326) / (_1326 + 1.0);
        float _4077 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1341 = ((((1.0 - _1332) * (_1327 + 2.0)) * exp2(log2(isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_1327 + 1.0))) + _1332) * _1297;
        float _1342 = _1265 * 0.5;
        float _1343 = _1275 * 0.5;
        float _1344 = _1285 * 0.5;
        float _1345 = dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344));
        float _1350 = (_1345 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1345);
        float _1358 = (dot(vec3(_583, _584, _585), vec3(_1350 * _1342, _1350 * _1343, _1350 * _1344)) + 1.0) * 0.5;
        float _4088 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1367 = sqrt(((_1343 * _1343) + (_1342 * _1342)) + (_1344 * _1344)) / (_1298 + 9.9999997473787516355514526367188e-06);
        float _4099 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1369 = _1368 * 2.0;
        float _1373 = (1.0 - _1368) / (_1368 + 1.0);
        float _4110 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1383 = ((((1.0 - _1374) * (_1369 + 2.0)) * exp2(log2(isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (_1369 + 1.0))) + _1374) * _1298;
        float _1384 = _1266 * 0.5;
        float _1385 = _1276 * 0.5;
        float _1386 = _1286 * 0.5;
        float _1387 = dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386));
        float _1392 = (_1387 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1387);
        float _1400 = (dot(vec3(_583, _584, _585), vec3(_1392 * _1384, _1392 * _1385, _1392 * _1386)) + 1.0) * 0.5;
        float _4121 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1409 = sqrt(((_1385 * _1385) + (_1384 * _1384)) + (_1386 * _1386)) / (_1299 + 9.9999997473787516355514526367188e-06);
        float _4132 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1411 = _1410 * 2.0;
        float _1415 = (1.0 - _1410) / (_1410 + 1.0);
        float _4143 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1425 = ((((1.0 - _1416) * (_1411 + 2.0)) * exp2(log2(isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_1411 + 1.0))) + _1416) * _1299;
        _1433 = _1266;
        _1434 = _1265;
        _1435 = _1264;
        _1436 = _1276;
        _1437 = _1275;
        _1438 = _1274;
        _1439 = _1286;
        _1440 = _1285;
        _1441 = _1284;
        _1442 = _1299;
        _1443 = _1298;
        _1444 = _1297;
        _1445 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)));
        _1446 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)));
        _1447 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)));
    }
    else
    {
        _1433 = _1125;
        _1434 = _1125;
        _1435 = _1125;
        _1436 = _1125;
        _1437 = _1125;
        _1438 = _1125;
        _1439 = _1125;
        _1440 = _1125;
        _1441 = _1125;
        _1442 = _1125;
        _1443 = _1125;
        _1444 = _1125;
        _1445 = 0.0;
        _1446 = 0.0;
        _1447 = 0.0;
    }
    float _1457 = (cbModelParam._m0[1u].x * (_1445 - _1137)) + _1137;
    float _1458 = (cbModelParam._m0[1u].x * (_1446 - _1138)) + _1138;
    float _1459 = (cbModelParam._m0[1u].x * (_1447 - _1139)) + _1139;
    float _1480 = fma(_1459, cbSceneParam._m0[89u].z, fma(_1458, cbSceneParam._m0[89u].y, _1457 * cbSceneParam._m0[89u].x));
    float _1483 = fma(_1459, cbSceneParam._m0[90u].z, fma(_1458, cbSceneParam._m0[90u].y, _1457 * cbSceneParam._m0[90u].x));
    float _1486 = fma(_1459, cbSceneParam._m0[91u].z, fma(_1458, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1457));
    float _1501 = _759 * 0.5;
    float _1502 = _760 * 0.5;
    float _1503 = _761 * 0.5;
    float _1504 = dot(vec4(_1501, _1502, _1503, 1.0), vec4(_1435, _1438, _1441, _1444));
    float _1507 = dot(vec4(_1501, _1502, _1503, 1.0), vec4(_1434, _1437, _1440, _1443));
    float _1510 = dot(vec4(_1501, _1502, _1503, 1.0), vec4(_1433, _1436, _1439, _1442));
    float _1544;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1517 = dot(vec4(_1501, _1502, _1503, 1.0), vec4(_1124, _1128, _1131, _1134));
        float _1521 = dot(vec4(_1501, _1502, _1503, 1.0), vec4(_1126, _1129, _1132, _1135));
        float _1525 = dot(vec4(_1501, _1502, _1503, 1.0), vec4(_1127, _1130, _1133, _1136));
        float _1532 = dot(vec4(cbModelParam._m0[39u]), vec4(_1501, _1502, _1503, 1.0));
        _1544 = dot(vec3(isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)), isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)), isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1532) ? 0.0 : (isnan(0.0) ? _1532 : max(0.0, _1532))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1544 = 1.0;
    }
    float _1555;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1546 = dot(vec4(cbModelParam._m0[40u]), vec4(_1501, _1502, _1503, 1.0));
        _1555 = dot(vec3(isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0)), isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)), isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1546) ? 0.0 : (isnan(0.0) ? _1546 : max(0.0, _1546))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1555 = 1.0;
    }
    float _1559 = (_1555 * cbModelParam._m0[1u].x) + (_1544 * (1.0 - cbModelParam._m0[1u].x));
    float _1569 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _586);
    float _1570 = isnan(_1569) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1569 : min(cbModelParam._m0[25u].z, _1569));
    float _1650;
    float _1652;
    float _1654;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1617 = fma(_823, cbModelParam._m0[13u].z, fma(_819, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _815)) + cbModelParam._m0[13u].w;
        float _1621 = fma(_823, cbModelParam._m0[14u].z, fma(_819, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _815)) + cbModelParam._m0[14u].w;
        float _1625 = fma(_823, cbModelParam._m0[15u].z, fma(_819, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _815)) + cbModelParam._m0[15u].w;
        float _1628 = fma(_761, cbModelParam._m0[13u].z, fma(_760, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _759));
        float _1631 = fma(_761, cbModelParam._m0[14u].z, fma(_760, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _759));
        float _1634 = fma(_761, cbModelParam._m0[15u].z, fma(_760, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _759));
        float _1662;
        if (_1628 > 0.0)
        {
            _1662 = abs((1.0 - _1617) / _1628);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1628 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1617 + 1.0) / _1628);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1662 = frontier_phi_14_12_ladder;
        }
        float _1833;
        if (_1631 > 0.0)
        {
            _1833 = abs((1.0 - _1621) / _1631);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1631 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1621 + 1.0) / _1631);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1833 = frontier_phi_23_19_ladder;
        }
        float _2129;
        if (_1634 > 0.0)
        {
            _2129 = abs((1.0 - _1625) / _1634);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1634 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1625 + 1.0) / _1634);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2129 = frontier_phi_35_30_ladder;
        }
        float _2131 = isnan(_1833) ? _1662 : (isnan(_1662) ? _1833 : min(_1662, _1833));
        float _2132 = isnan(_2129) ? _2131 : (isnan(_2131) ? _2129 : min(_2131, _2129));
        float _2136 = (_2132 * _1628) + _1617;
        float _2137 = (_2132 * _1631) + _1621;
        float _2138 = (_2132 * _1634) + _1625;
        float _2139 = _2132 * 9.9999997473787516355514526367188e-05;
        float _2141 = (-1.0) - _2139;
        float _2143 = _2139 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2138 > _2143) || ((_2138 < _2141) || ((_2137 > _2143) || ((_2137 < _2141) || ((_2136 < _2141) || (_2136 > _2143))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2283 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2138, cbModelParam._m0[9u].z, fma(_2137, cbModelParam._m0[9u].y, _2136 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2138, cbModelParam._m0[10u].z, fma(_2137, cbModelParam._m0[10u].y, _2136 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2138, cbModelParam._m0[11u].z, fma(_2137, cbModelParam._m0[11u].y, _2136 * cbModelParam._m0[11u].x))), _1570);
            frontier_phi_13_35_ladder = _2283.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2283.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2283.x * cbModelParam._m0[1u].y;
        }
        _1650 = frontier_phi_13_35_ladder_2;
        _1652 = frontier_phi_13_35_ladder_1;
        _1654 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1638 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_759, _760, _761), _1570);
        _1650 = _1638.x * cbModelParam._m0[1u].y;
        _1652 = _1638.y * cbModelParam._m0[1u].y;
        _1654 = _1638.z * cbModelParam._m0[1u].y;
    }
    float _1658 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _586);
    float _1659 = isnan(_1658) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1658 : min(cbModelParam._m0[25u].w, _1658));
    float _1748;
    float _1750;
    float _1752;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1712 = fma(_823, cbModelParam._m0[21u].z, fma(_819, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _815)) + cbModelParam._m0[21u].w;
        float _1716 = fma(_823, cbModelParam._m0[22u].z, fma(_819, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _815)) + cbModelParam._m0[22u].w;
        float _1720 = fma(_823, cbModelParam._m0[23u].z, fma(_819, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _815)) + cbModelParam._m0[23u].w;
        float _1723 = fma(_761, cbModelParam._m0[21u].z, fma(_760, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _759));
        float _1726 = fma(_761, cbModelParam._m0[22u].z, fma(_760, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _759));
        float _1729 = fma(_761, cbModelParam._m0[23u].z, fma(_760, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _759));
        float _1838;
        if (_1723 > 0.0)
        {
            _1838 = abs((1.0 - _1712) / _1723);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1723 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1712 + 1.0) / _1723);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1838 = frontier_phi_25_21_ladder;
        }
        float _2156;
        if (_1726 > 0.0)
        {
            _2156 = abs((1.0 - _1716) / _1726);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1726 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1716 + 1.0) / _1726);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2156 = frontier_phi_37_32_ladder;
        }
        float _2494;
        if (_1729 > 0.0)
        {
            _2494 = abs((1.0 - _1720) / _1729);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1729 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1720 + 1.0) / _1729);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2494 = frontier_phi_47_44_ladder;
        }
        float _2496 = isnan(_2156) ? _1838 : (isnan(_1838) ? _2156 : min(_1838, _2156));
        float _2497 = isnan(_2494) ? _2496 : (isnan(_2496) ? _2494 : min(_2496, _2494));
        float _2501 = (_2497 * _1723) + _1712;
        float _2502 = (_2497 * _1726) + _1716;
        float _2503 = (_2497 * _1729) + _1720;
        float _2504 = _2497 * 9.9999997473787516355514526367188e-05;
        float _2505 = (-1.0) - _2504;
        float _2507 = _2504 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2503 > _2507) || ((_2503 < _2505) || ((_2502 > _2507) || ((_2502 < _2505) || ((_2501 < _2505) || (_2501 > _2507))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2625 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2503, cbModelParam._m0[17u].z, fma(_2502, cbModelParam._m0[17u].y, _2501 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2503, cbModelParam._m0[18u].z, fma(_2502, cbModelParam._m0[18u].y, _2501 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2503, cbModelParam._m0[19u].z, fma(_2502, cbModelParam._m0[19u].y, _2501 * cbModelParam._m0[19u].x))), _1659);
            frontier_phi_22_47_ladder = _2625.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2625.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2625.x * cbModelParam._m0[1u].z;
        }
        _1748 = frontier_phi_22_47_ladder_2;
        _1750 = frontier_phi_22_47_ladder_1;
        _1752 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1732 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_759, _760, _761), _1659);
        _1748 = _1732.x * cbModelParam._m0[1u].z;
        _1750 = _1732.y * cbModelParam._m0[1u].z;
        _1752 = _1732.z * cbModelParam._m0[1u].z;
    }
    float _1765 = (((_786 * _735) + _787) * _751) * ((cbModelParam._m0[1u].w * (_1748 - _1650)) + _1650);
    float _1767 = (((_786 * _737) + _787) * _751) * ((cbModelParam._m0[1u].w * (_1750 - _1652)) + _1652);
    float _1769 = (((_786 * _738) + _787) * _751) * ((cbModelParam._m0[1u].w * (_1752 - _1654)) + _1654);
    float _1772 = fma(_1769, cbSceneParam._m0[89u].z, fma(_1767, cbSceneParam._m0[89u].y, _1765 * cbSceneParam._m0[89u].x));
    float _1775 = fma(_1769, cbSceneParam._m0[90u].z, fma(_1767, cbSceneParam._m0[90u].y, _1765 * cbSceneParam._m0[90u].x));
    float _1778 = fma(_1769, cbSceneParam._m0[91u].z, fma(_1767, cbSceneParam._m0[91u].y, _1765 * cbSceneParam._m0[91u].x));
    float _1812 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1816 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1820 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1824 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1825 = _1812 / _1824;
    float _1826 = _1816 / _1824;
    float _1827 = _1820 / _1824;
    float _1974;
    float _1975;
    float _1976;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1854 = ((uint(_1827 > cbSceneParam._m0[59u].y) + uint(_1827 > cbSceneParam._m0[59u].x)) + uint(_1827 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1855 = _1854 + 43u;
        uint _1863 = _1854 + 44u;
        uint _1871 = _1854 + 45u;
        uint _1879 = _1854 + 46u;
        float _1890 = fma(_1824, cbSceneParam._m0[_1855].w, fma(_1820, cbSceneParam._m0[_1855].z, fma(_1816, cbSceneParam._m0[_1855].y, _1812 * cbSceneParam._m0[_1855].x)));
        float _1894 = fma(_1824, cbSceneParam._m0[_1863].w, fma(_1820, cbSceneParam._m0[_1863].z, fma(_1816, cbSceneParam._m0[_1863].y, _1812 * cbSceneParam._m0[_1863].x)));
        float _1902 = fma(_1824, cbSceneParam._m0[_1879].w, fma(_1820, cbSceneParam._m0[_1879].z, fma(_1816, cbSceneParam._m0[_1879].y, _1812 * cbSceneParam._m0[_1879].x)));
        float _1907 = cbSceneParam._m0[33u].z * _1902;
        float _1909 = cbSceneParam._m0[33u].w * _1902;
        float _1912 = fma(_1824, cbSceneParam._m0[_1871].w, fma(_1820, cbSceneParam._m0[_1871].z, fma(_1816, cbSceneParam._m0[_1871].y, _1812 * cbSceneParam._m0[_1871].x))) / _1902;
        float _1960 = (cbSceneParam._m0[33u].x - sqrt(((_1826 * _1826) + (_1825 * _1825)) + (_1827 * _1827))) * cbSceneParam._m0[33u].y;
        float _4269 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
        float _1967 = (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1907 + _1890) / _1902, (_1909 + _1894) / _1902), _1912), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1909 + _1890) / _1902, (_1894 - _1907) / _1902), _1912), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1890 - _1907) / _1902, (_1894 - _1909) / _1902), _1912), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1890 - _1909) / _1902, (_1907 + _1894) / _1902), _1912), 0.0)).x), vec4(0.25)));
        _1974 = 1.0 - (_1967 * cbSceneParam._m0[34u].x);
        _1975 = 1.0 - (_1967 * cbSceneParam._m0[34u].y);
        _1976 = 1.0 - (_1967 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1974 = 1.0;
        _1975 = 1.0;
        _1976 = 1.0;
    }
    float _2040;
    float _2042;
    float _2044;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2028 = fma(_1824, cbSceneParam._m0[63u].w, fma(_1820, cbSceneParam._m0[63u].z, fma(_1816, cbSceneParam._m0[63u].y, _1812 * cbSceneParam._m0[63u].x)));
        float _2029 = fma(_1824, cbSceneParam._m0[60u].w, fma(_1820, cbSceneParam._m0[60u].z, fma(_1816, cbSceneParam._m0[60u].y, _1812 * cbSceneParam._m0[60u].x))) / _2028;
        float _2030 = fma(_1824, cbSceneParam._m0[61u].w, fma(_1820, cbSceneParam._m0[61u].z, fma(_1816, cbSceneParam._m0[61u].y, _1812 * cbSceneParam._m0[61u].x))) / _2028;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2029 >= cbSceneParam._m0[64u].x) && (_2030 >= cbSceneParam._m0[64u].y)) && (_2029 <= cbSceneParam._m0[64u].z)) && (_2030 <= cbSceneParam._m0[64u].w))
        {
            float _2169 = fma(_1824, cbSceneParam._m0[62u].w, fma(_1820, cbSceneParam._m0[62u].z, fma(_1816, cbSceneParam._m0[62u].y, _1812 * cbSceneParam._m0[62u].x))) / _2028;
            float _2173 = isnan(cbSceneParam._m0[41u].w) ? _2169 : (isnan(_2169) ? cbSceneParam._m0[41u].w : max(_2169, cbSceneParam._m0[41u].w));
            float _2216 = (cbSceneParam._m0[33u].x - sqrt(((_1826 * _1826) + (_1825 * _1825)) + (_1827 * _1827))) * cbSceneParam._m0[33u].y;
            float _4285 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
            float _2223 = (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2029, cbSceneParam._m0[33u].w + _2030), _2173), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2029, _2030 - cbSceneParam._m0[33u].z), _2173), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2029 - cbSceneParam._m0[33u].z, _2030 - cbSceneParam._m0[33u].w), _2173), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2029 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2030), _2173), 0.0)).x), vec4(0.25)));
            float _2227 = 1.0 - (_2223 * cbSceneParam._m0[34u].x);
            float _2228 = 1.0 - (_2223 * cbSceneParam._m0[34u].y);
            float _2229 = 1.0 - (_2223 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2229) ? _1976 : (isnan(_1976) ? _2229 : min(_1976, _2229));
            frontier_phi_34_33_ladder_1 = isnan(_2228) ? _1975 : (isnan(_1975) ? _2228 : min(_1975, _2228));
            frontier_phi_34_33_ladder_2 = isnan(_2227) ? _1974 : (isnan(_1974) ? _2227 : min(_1974, _2227));
        }
        else
        {
            frontier_phi_34_33_ladder = _1976;
            frontier_phi_34_33_ladder_1 = _1975;
            frontier_phi_34_33_ladder_2 = _1974;
        }
        _2040 = frontier_phi_34_33_ladder_2;
        _2042 = frontier_phi_34_33_ladder_1;
        _2044 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2040 = _1974;
        _2042 = _1975;
        _2044 = _1976;
    }
    uvec4 _2049 = floatBitsToUint(cbInstanceData._m0[_241 + 5u]);
    uint _2051 = _2049.x * 14u;
    uint _2052 = _2051 + 13u;
    float _2059 = _751 + (-1.0);
    float _2064 = (cbLight._m0[_2052].x * _2059) + 1.0;
    float _2065 = (cbLight._m0[_2052].y * _2059) + 1.0;
    float _2066 = (cbLight._m0[_2052].z * _2059) + 1.0;
    float _2067 = (cbLight._m0[_2052].w * _2059) + 1.0;
    uint _2068 = _2051 + 5u;
    float _2074 = isnan(1.0) ? _2065 : (isnan(_2065) ? 1.0 : min(_2065, 1.0));
    uint _2078 = _2051 + 4u;
    float _2088 = isnan(1.0) ? _2064 : (isnan(_2064) ? 1.0 : min(_2064, 1.0));
    uint _2092 = _2051 | 1u;
    float _2103 = dot(vec3(cbLight._m0[_2051].xyz), vec3(_583, _584, _585));
    float _2106 = dot(vec3(cbLight._m0[_2092].xyz), vec3(_583, _584, _585));
    float _4321 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _4332 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2111 = (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * 0.3183098733425140380859375;
    float _2113 = (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * 0.3183098733425140380859375;
    float _2120 = ((cbLight._m0[_2068].x * _2074) * _2113) + (((cbLight._m0[_2078].x * _2040) * _2088) * _2111);
    float _2121 = ((_2074 * cbLight._m0[_2068].y) * _2113) + (((cbLight._m0[_2078].y * _2042) * _2088) * _2111);
    float _2122 = ((_2074 * cbLight._m0[_2068].z) * _2113) + (((cbLight._m0[_2078].z * _2044) * _2088) * _2111);
    uvec4 _2126 = floatBitsToUint(cbLight._m0[_2051 + 12u]);
    bool _2128 = _2126.x == 0u;
    float _2230;
    float _2232;
    float _2234;
    if (_2128)
    {
        _2230 = _2120;
        _2232 = _2121;
        _2234 = _2122;
    }
    else
    {
        uint _2238 = _2051 + 6u;
        float _2254 = (dot(vec3(cbLight._m0[_2051 + 2u].xyz), vec3(_583, _584, _585)) * 0.5) + 0.5;
        float _2255 = _2254 * _2254;
        float _4343 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
        float _2256 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _2257 = isnan(1.0) ? _2066 : (isnan(_2066) ? 1.0 : min(_2066, 1.0));
        _2230 = (((cbLight._m0[_2238].x * 0.3183098733425140380859375) * _2256) * _2257) + _2120;
        _2232 = (((cbLight._m0[_2238].y * 0.3183098733425140380859375) * _2256) * _2257) + _2121;
        _2234 = (((cbLight._m0[_2238].z * 0.3183098733425140380859375) * _2256) * _2257) + _2122;
    }
    bool _2237 = _2126.y == 0u;
    float _2292;
    float _2294;
    float _2296;
    if (_2237)
    {
        _2292 = _2230;
        _2294 = _2232;
        _2296 = _2234;
    }
    else
    {
        uint _2465 = _2051 + 7u;
        float _2481 = (dot(vec3(cbLight._m0[_2051 + 3u].xyz), vec3(_583, _584, _585)) * 0.5) + 0.5;
        float _2482 = _2481 * _2481;
        float _4359 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2483 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _2484 = isnan(1.0) ? _2067 : (isnan(_2067) ? 1.0 : min(_2067, 1.0));
        _2292 = (((cbLight._m0[_2465].x * 0.3183098733425140380859375) * _2483) * _2484) + _2230;
        _2294 = (((cbLight._m0[_2465].y * 0.3183098733425140380859375) * _2483) * _2484) + _2232;
        _2296 = (((cbLight._m0[_2465].z * 0.3183098733425140380859375) * _2483) * _2484) + _2234;
    }
    uint _2299 = _2051 + 8u;
    float _2312 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2051].w)) * _586) * 0.949999988079071044921875);
    float _2313 = _2312 * _2312;
    float _2314 = cbLight._m0[_2051].x + _662;
    float _2315 = cbLight._m0[_2051].y + _663;
    float _2316 = cbLight._m0[_2051].z + _664;
    float _2320 = inversesqrt(dot(vec3(_2314, _2315, _2316), vec3(_2314, _2315, _2316)));
    float _2321 = _2320 * _2314;
    float _2322 = _2320 * _2315;
    float _2323 = _2320 * _2316;
    float _2324 = dot(vec3(_583, _584, _585), vec3(cbLight._m0[_2051].xyz));
    float _4375 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _2327 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
    float _4386 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _2328 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
    float _2329 = dot(vec3(_583, _584, _585), vec3(_2321, _2322, _2323));
    float _4397 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2332 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
    float _2333 = dot(vec3(cbLight._m0[_2051].xyz), vec3(_2321, _2322, _2323));
    float _4408 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2337 = _2313 * _2313;
    float _2341 = ((_2332 * _2332) * (_2337 + (-1.0))) + 1.0;
    float _2349 = exp2(log2(1.0 - (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0)))) * 5.0);
    float _2350 = 0.959999978542327880859375 - _732;
    float _2352 = 0.959999978542327880859375 - _733;
    float _2353 = 0.959999978542327880859375 - _734;
    float _2360 = 1.0 - _2313;
    float _2371 = (0.5 / (((_2328 * ((_2327 * _2360) + _2313)) + 9.9999999392252902907785028219223e-09) + (((_2328 * _2360) + _2313) * _2327))) * _2327;
    float _4419 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _2373 = (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * (_2337 / ((_2341 * _2341) * 3.141590118408203125));
    uint _2387 = _2051 + 9u;
    float _2398 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2092].w)) * _586) * 0.949999988079071044921875);
    float _2399 = _2398 * _2398;
    float _2400 = cbLight._m0[_2092].x + _662;
    float _2401 = cbLight._m0[_2092].y + _663;
    float _2402 = cbLight._m0[_2092].z + _664;
    float _2406 = inversesqrt(dot(vec3(_2400, _2401, _2402), vec3(_2400, _2401, _2402)));
    float _2407 = _2406 * _2400;
    float _2408 = _2406 * _2401;
    float _2409 = _2406 * _2402;
    float _2410 = dot(vec3(_583, _584, _585), vec3(cbLight._m0[_2092].xyz));
    float _4430 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
    float _2413 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
    float _2414 = dot(vec3(_583, _584, _585), vec3(_2407, _2408, _2409));
    float _4441 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2417 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
    float _2418 = dot(vec3(cbLight._m0[_2092].xyz), vec3(_2407, _2408, _2409));
    float _4452 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _2422 = _2399 * _2399;
    float _2426 = ((_2417 * _2417) * (_2422 + (-1.0))) + 1.0;
    float _2433 = exp2(log2(1.0 - (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0)))) * 5.0);
    float _2440 = 1.0 - _2399;
    float _2450 = (0.5 / (((_2328 * ((_2413 * _2440) + _2399)) + 9.9999999392252902907785028219223e-09) + (((_2328 * _2440) + _2399) * _2413))) * _2413;
    float _4463 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2452 = (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (_2422 / ((_2426 * _2426) * 3.141590118408203125));
    float _2462 = (((((_2433 * _2350) + _735) * cbLight._m0[_2387].x) * _2452) * _2074) + ((((cbLight._m0[_2299].x * _2040) * ((_2349 * _2350) + _735)) * _2373) * _2088);
    float _2463 = (((((_2433 * _2352) + _737) * cbLight._m0[_2387].y) * _2452) * _2074) + ((((cbLight._m0[_2299].y * _2042) * ((_2349 * _2352) + _737)) * _2373) * _2088);
    float _2464 = (((((_2433 * _2353) + _738) * cbLight._m0[_2387].z) * _2452) * _2074) + ((((cbLight._m0[_2299].z * _2044) * ((_2349 * _2353) + _738)) * _2373) * _2088);
    float _2520;
    float _2522;
    float _2524;
    if (_2128)
    {
        _2520 = _2462;
        _2522 = _2463;
        _2524 = _2464;
    }
    else
    {
        uint _2526 = _2051 + 2u;
        uint _2530 = _2051 + 10u;
        float _2544 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2526].w)) * _586) * 0.949999988079071044921875);
        float _2545 = _2544 * _2544;
        float _2546 = cbLight._m0[_2526].x + _662;
        float _2547 = cbLight._m0[_2526].y + _663;
        float _2548 = cbLight._m0[_2526].z + _664;
        float _2552 = inversesqrt(dot(vec3(_2546, _2547, _2548), vec3(_2546, _2547, _2548)));
        float _2553 = _2552 * _2546;
        float _2554 = _2552 * _2547;
        float _2555 = _2552 * _2548;
        float _2556 = dot(vec3(_583, _584, _585), vec3(cbLight._m0[_2526].xyz));
        float _4474 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2559 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
        float _2560 = dot(vec3(_583, _584, _585), vec3(_2553, _2554, _2555));
        float _4485 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        float _2563 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _2564 = dot(vec3(cbLight._m0[_2526].xyz), vec3(_2553, _2554, _2555));
        float _4496 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2568 = _2545 * _2545;
        float _2572 = ((_2563 * _2563) * (_2568 + (-1.0))) + 1.0;
        float _2579 = exp2(log2(1.0 - (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0)))) * 5.0);
        float _2586 = 1.0 - _2545;
        float _2596 = (0.5 / (((_2328 * ((_2559 * _2586) + _2545)) + 9.9999999392252902907785028219223e-09) + (((_2328 * _2586) + _2545) * _2559))) * _2559;
        float _4507 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2598 = (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * (_2568 / ((_2572 * _2572) * 3.141590118408203125));
        float _2599 = isnan(1.0) ? _2066 : (isnan(_2066) ? 1.0 : min(_2066, 1.0));
        _2520 = (((((_2579 * _2350) + _735) * cbLight._m0[_2530].x) * _2598) * _2599) + _2462;
        _2522 = (((((_2579 * _2352) + _737) * cbLight._m0[_2530].y) * _2598) * _2599) + _2463;
        _2524 = (((((_2579 * _2353) + _738) * cbLight._m0[_2530].z) * _2598) * _2599) + _2464;
    }
    float _2630;
    float _2632;
    float _2634;
    if (_2237)
    {
        _2630 = _2520;
        _2632 = _2522;
        _2634 = _2524;
    }
    else
    {
        uint _2641 = _2051 + 3u;
        uint _2645 = _2051 + 11u;
        float _2659 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2641].w)) * _586) * 0.949999988079071044921875);
        float _2660 = _2659 * _2659;
        float _2661 = cbLight._m0[_2641].x + _662;
        float _2662 = cbLight._m0[_2641].y + _663;
        float _2663 = cbLight._m0[_2641].z + _664;
        float _2667 = inversesqrt(dot(vec3(_2661, _2662, _2663), vec3(_2661, _2662, _2663)));
        float _2668 = _2667 * _2661;
        float _2669 = _2667 * _2662;
        float _2670 = _2667 * _2663;
        float _2671 = dot(vec3(_583, _584, _585), vec3(cbLight._m0[_2641].xyz));
        float _4523 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2674 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
        float _2675 = dot(vec3(_583, _584, _585), vec3(_2668, _2669, _2670));
        float _4534 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2678 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
        float _2679 = dot(vec3(cbLight._m0[_2641].xyz), vec3(_2668, _2669, _2670));
        float _4545 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
        float _2683 = _2660 * _2660;
        float _2687 = ((_2678 * _2678) * (_2683 + (-1.0))) + 1.0;
        float _2694 = exp2(log2(1.0 - (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0)))) * 5.0);
        float _2701 = 1.0 - _2660;
        float _2711 = (0.5 / (((_2328 * ((_2674 * _2701) + _2660)) + 9.9999999392252902907785028219223e-09) + (((_2328 * _2701) + _2660) * _2674))) * _2674;
        float _4556 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2713 = (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (_2683 / ((_2687 * _2687) * 3.141590118408203125));
        float _2714 = isnan(1.0) ? _2067 : (isnan(_2067) ? 1.0 : min(_2067, 1.0));
        _2630 = (((((_2694 * _2350) + _735) * cbLight._m0[_2645].x) * _2713) * _2714) + _2520;
        _2632 = (((((_2694 * _2352) + _737) * cbLight._m0[_2645].y) * _2713) * _2714) + _2522;
        _2634 = (((((_2694 * _2353) + _738) * cbLight._m0[_2645].z) * _2713) * _2714) + _2524;
    }
    float _2780;
    float _2782;
    float _2784;
    float _2786;
    float _2788;
    float _2790;
    if (_2049.y == 0u)
    {
        uvec4 _2735 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2736 = _2735.x;
        uint _2747 = uint((float(_2735.y) * floor(float(uint(cbSceneParam._m0[85u].y * _671) / _2736))) + floor(float(uint(cbSceneParam._m0[85u].x * _670) / _2736)));
        float _2757 = (log2(_1827 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2758 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
        uint _2761 = uint(isnan(14.0) ? _2758 : (isnan(_2758) ? 14.0 : min(_2758, 14.0)));
        uvec4 _2766 = texelFetch(g_lightClusterGridBuffer, int(((_2761 << 2u) + (_2747 << 6u)) >> 2u));
        uint _2767 = _2766.x;
        uint _2768 = _2735.z;
        float _2847;
        float _2849;
        float _2851;
        float _2853;
        float _2855;
        float _2857;
        if (((((1u << ((_2768 >> 4u) & 15u)) + 4294967295u) & _2767) == 0u) || ((_2768 & 240u) == 0u))
        {
            _2847 = 0.0;
            _2849 = 0.0;
            _2851 = 0.0;
            _2853 = 0.0;
            _2855 = 0.0;
            _2857 = 0.0;
        }
        else
        {
            float _2848;
            float _2850;
            float _2852;
            float _2854;
            float _2856;
            float _2858;
            float _2992 = 0.0;
            float _2993 = 0.0;
            float _2994 = 0.0;
            float _2995 = 0.0;
            float _2996 = 0.0;
            float _2997 = 0.0;
            uint _2998 = 0u;
            uint _3007;
            bool _3008;
            for (;;)
            {
                _3007 = texelFetch(g_lightClassification, int((((_2761 << 5u) + (_2747 << 9u)) + (_2998 << 2u)) >> 2u)).x;
                _3008 = _3007 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3008)
                {
                    frontier_phi_66_pred = _2997;
                    frontier_phi_66_pred_1 = _2996;
                    frontier_phi_66_pred_2 = _2995;
                    frontier_phi_66_pred_3 = _2994;
                    frontier_phi_66_pred_4 = _2993;
                    frontier_phi_66_pred_5 = _2992;
                }
                else
                {
                    float _3116;
                    float _3117;
                    float _3118;
                    float _3119;
                    float _3120;
                    float _3121;
                    uint _3122;
                    _3116 = _2992;
                    _3117 = _2993;
                    _3118 = _2994;
                    _3119 = _2995;
                    _3120 = _2996;
                    _3121 = _2997;
                    _3122 = _3007;
                    float _3048;
                    float _3049;
                    float _3050;
                    float _3051;
                    float _3052;
                    float _3053;
                    for (;;)
                    {
                        uint _3126 = uint(findLSB(_3122)) + (_2998 << 5u);
                        uint _3123 = (_3122 + 4294967295u) & _3122;
                        uint _3128 = _3126 * 48u;
                        vec4 _3142 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3128)).x, texelFetch(g_PointLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3128 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3128 + 3u)).x));
                        uint _3148 = (_3126 * 48u) + 4u;
                        vec4 _3161 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3148)).x, texelFetch(g_PointLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3148 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3148 + 3u)).x));
                        uint _3167 = (_3126 * 48u) + 8u;
                        vec3 _3178 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3167)).x, texelFetch(g_PointLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3167 + 2u)).x));
                        float _3182 = _3142.x - _1825;
                        float _3183 = _3142.y - _1826;
                        float _3184 = _3142.z - _1827;
                        float _3185 = dot(vec3(_3182, _3183, _3184), vec3(_3182, _3183, _3184));
                        float _3188 = inversesqrt(_3185);
                        float _3189 = _3188 * _3182;
                        float _3190 = _3188 * _3183;
                        float _3191 = _3188 * _3184;
                        float _3192 = dot(vec3(_692, _695, _698), vec3(_3189, _3190, _3191));
                        float _3197 = 1.0 - (_3185 * _3142.w);
                        float _4582 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                        float _3198 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
                        float _3199 = sqrt(_3185) * _3161.w;
                        float _3202 = 1.39999997615814208984375 / (_3199 + 1.39999997615814208984375);
                        float _3203 = _3202 * _3202;
                        float _3206 = ((1.0 - _3203) * _3192) + _3203;
                        float _3209 = _3199 * _3199;
                        float _3213 = ((isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0))) * _3198) / ((_3209 * 0.699999988079071044921875) + 1.0);
                        float _3217 = (-0.0) - _1825;
                        float _3218 = (-0.0) - _1826;
                        float _3219 = (-0.0) - _1827;
                        float _3223 = inversesqrt(dot(vec3(_3217, _3218, _3219), vec3(_3217, _3218, _3219)));
                        float _3224 = _3223 * _3217;
                        float _3225 = _3223 * _3218;
                        float _3226 = _3223 * _3219;
                        float _3233 = exp2(log2(1.0 / ((_3209 * 3.5) + 5.0)) * 0.25);
                        float _3234 = 1.0 - _767;
                        float _3241 = sqrt(1.0 - ((1.0 - (_3234 * _3234)) * (1.0 - (_3233 * _3233))));
                        float _3242 = _3241 * _3241;
                        float _3243 = _3242 * _3242;
                        float _3244 = _3224 + _3189;
                        float _3245 = _3225 + _3190;
                        float _3246 = _3226 + _3191;
                        float _3250 = inversesqrt(dot(vec3(_3244, _3245, _3246), vec3(_3244, _3245, _3246)));
                        float _3254 = dot(vec3(_692, _695, _698), vec3(_3224, _3225, _3226));
                        float _4598 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                        float _3257 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
                        float _3258 = dot(vec3(_692, _695, _698), vec3(_3250 * _3244, _3250 * _3245, _3250 * _3246));
                        float _4609 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                        float _3261 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
                        float _3265 = ((_3261 * _3261) * (_3243 + (-1.0))) + 1.0;
                        float _3266 = _3202 * _3242;
                        float _3267 = _3266 * _3266;
                        float _3270 = ((1.0 - _3267) * _3192) + _3267;
                        float _4620 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                        float _3271 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
                        float _3272 = 1.0 - _3242;
                        float _3282 = (0.5 / (((_3271 * ((_3257 * _3272) + _3242)) + 9.9999999392252902907785028219223e-09) + (((_3271 * _3272) + _3242) * _3257))) * _3271;
                        float _4631 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                        float _3293 = (((_3243 * 3.1415927410125732421875) * (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0)))) / ((_3265 * _3265) * ((_3209 * 2.1991131305694580078125) + 3.141590118408203125))) * _3198;
                        _3051 = (_3213 * _3161.x) + _3119;
                        _3052 = (_3213 * _3161.y) + _3120;
                        _3053 = (_3213 * _3161.z) + _3121;
                        _3048 = (_3293 * _3178.x) + _3116;
                        _3049 = (_3293 * _3178.y) + _3117;
                        _3050 = (_3293 * _3178.z) + _3118;
                        if (_3123 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3116 = _3048;
                            _3117 = _3049;
                            _3118 = _3050;
                            _3119 = _3051;
                            _3120 = _3052;
                            _3121 = _3053;
                            _3122 = _3123;
                        }
                    }
                    frontier_phi_66_pred = _3053;
                    frontier_phi_66_pred_1 = _3052;
                    frontier_phi_66_pred_2 = _3051;
                    frontier_phi_66_pred_3 = _3050;
                    frontier_phi_66_pred_4 = _3049;
                    frontier_phi_66_pred_5 = _3048;
                }
                _2858 = frontier_phi_66_pred;
                _2856 = frontier_phi_66_pred_1;
                _2854 = frontier_phi_66_pred_2;
                _2852 = frontier_phi_66_pred_3;
                _2850 = frontier_phi_66_pred_4;
                _2848 = frontier_phi_66_pred_5;
                uint _2999 = _2998 + 1u;
                if (_2999 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2992 = _2848;
                    _2993 = _2850;
                    _2994 = _2852;
                    _2995 = _2854;
                    _2996 = _2856;
                    _2997 = _2858;
                    _2998 = _2999;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2847 = _2848;
            _2849 = _2850;
            _2851 = _2852;
            _2853 = _2854;
            _2855 = _2856;
            _2857 = _2858;
        }
        uvec4 _2861 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2862 = _2861.z;
        uint _2864 = (_2862 >> 8u) & 15u;
        float _2960;
        float _2962;
        float _2964;
        float _2966;
        float _2968;
        float _2970;
        if (((4294967295u << _2864) & _2767) == 0u)
        {
            _2960 = _2847;
            _2962 = _2849;
            _2964 = _2851;
            _2966 = _2853;
            _2968 = _2855;
            _2970 = _2857;
        }
        else
        {
            float _2985 = inversesqrt(dot(vec3(_1825, _1826, _1827), vec3(_1825, _1826, _1827)));
            float _2986 = _2985 * _1825;
            float _2987 = _2985 * _1826;
            float _2988 = _2985 * _1827;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2864 < ((_2862 >> 12u) & 15u))
            {
                float _2961;
                float _2963;
                float _2965;
                float _2967;
                float _2969;
                float _2971;
                float _3099 = _2847;
                float _3100 = _2849;
                float _3101 = _2851;
                float _3102 = _2853;
                float _3103 = _2855;
                float _3104 = _2857;
                uint _3105 = _2864;
                uint _3114;
                bool _3115;
                for (;;)
                {
                    _3114 = texelFetch(g_lightClassification, int((((_2761 << 5u) + (_2747 << 9u)) + (_3105 << 2u)) >> 2u)).x;
                    _3115 = _3114 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3115)
                    {
                        frontier_phi_72_pred = _3104;
                        frontier_phi_72_pred_1 = _3103;
                        frontier_phi_72_pred_2 = _3102;
                        frontier_phi_72_pred_3 = _3101;
                        frontier_phi_72_pred_4 = _3100;
                        frontier_phi_72_pred_5 = _3099;
                    }
                    else
                    {
                        float _3298;
                        float _3299;
                        float _3300;
                        float _3301;
                        float _3302;
                        float _3303;
                        float _3593;
                        float _3594;
                        float _3595;
                        float _3596;
                        float _3597;
                        float _3598;
                        float _3311 = _3099;
                        float _3312 = _3100;
                        float _3313 = _3101;
                        float _3314 = _3102;
                        float _3315 = _3103;
                        float _3316 = _3104;
                        uint _3317 = _3114;
                        uint _3318;
                        vec4 _3343;
                        float _3344;
                        vec4 _3359;
                        vec3 _3371;
                        vec4 _3387;
                        vec4 _3403;
                        float _3449;
                        bool _3450;
                        for (;;)
                        {
                            uint _3328 = ((_3105 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3317));
                            _3318 = (_3317 + 4294967295u) & _3317;
                            uint _3330 = _3328 * 40u;
                            _3343 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3330)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 3u)).x));
                            _3344 = _3343.w;
                            uint _3346 = (_3328 * 40u) + 4u;
                            _3359 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3346)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 3u)).x));
                            uint _3361 = (_3328 * 40u) + 8u;
                            _3371 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3361)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 2u)).x));
                            uint _3374 = (_3328 * 40u) + 16u;
                            _3387 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3374)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 3u)).x));
                            uint _3390 = (_3328 * 40u) + 20u;
                            _3403 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3390)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 3u)).x));
                            uint _3405 = (_3328 * 40u) + 24u;
                            vec4 _3418 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3405)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 3u)).x));
                            uint _3424 = (_3328 * 40u) + 28u;
                            vec4 _3437 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3424)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 3u)).x));
                            _3449 = fma(_1827, _3437.z, fma(_1826, _3437.y, _3437.x * _1825)) + _3437.w;
                            _3450 = !((fma(_1827, _3418.z, fma(_1826, _3418.y, _3418.x * _1825)) + _3418.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3450)
                            {
                                float _3477 = _3343.x - _1825;
                                float _3478 = _3343.y - _1826;
                                float _3479 = _3343.z - _1827;
                                float _3480 = dot(vec3(_3477, _3478, _3479), vec3(_3477, _3478, _3479));
                                float _3483 = inversesqrt(_3480);
                                float _3484 = _3483 * _3477;
                                float _3485 = _3483 * _3478;
                                float _3486 = _3483 * _3479;
                                float _3490 = 1.0 - (_3480 / (_3344 * _3344));
                                float _4642 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                                float _3491 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
                                float _3495 = sqrt(_3480) * _3359.w;
                                float _3497 = 1.39999997615814208984375 / (_3495 + 1.39999997615814208984375);
                                float _3498 = _3497 * _3497;
                                float _3501 = ((1.0 - _3498) * dot(vec3(_3484, _3485, _3486), vec3(_692, _695, _698))) + _3498;
                                float _3504 = _3495 * _3495;
                                float _3508 = (fma(_1827, _3387.z, fma(_1826, _3387.y, _3387.x * _1825)) + _3387.w) / _3449;
                                float _3509 = (fma(_1827, _3403.z, fma(_1826, _3403.y, _3403.x * _1825)) + _3403.w) / _3449;
                                float _3513 = 1.0 - dot(vec2(_3508, _3509), vec2(_3508, _3509));
                                float _4658 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                                float _3514 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
                                float _3515 = _3514 * (((isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0))) * _3491) / ((_3504 * 0.699999988079071044921875) + 1.0));
                                float _3527 = exp2(log2(1.0 / ((_3504 * 3.5) + 5.0)) * 0.25);
                                float _3528 = 1.0 - _767;
                                float _3535 = sqrt(1.0 - ((1.0 - (_3528 * _3528)) * (1.0 - (_3527 * _3527))));
                                float _3536 = _3535 * _3535;
                                float _3537 = _3536 * _3536;
                                float _3538 = _3484 - _2986;
                                float _3539 = _3485 - _2987;
                                float _3540 = _3486 - _2988;
                                float _3544 = inversesqrt(dot(vec3(_3538, _3539, _3540), vec3(_3538, _3539, _3540)));
                                float _3548 = dot(vec3(_692, _695, _698), vec3((-0.0) - _2986, (-0.0) - _2987, (-0.0) - _2988));
                                float _4669 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                                float _3551 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                                float _3552 = dot(vec3(_692, _695, _698), vec3(_3544 * _3538, _3544 * _3539, _3544 * _3540));
                                float _4680 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                                float _3555 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
                                float _3559 = ((_3555 * _3555) * (_3537 + (-1.0))) + 1.0;
                                float _3560 = _3497 * _3536;
                                float _3561 = _3560 * _3560;
                                float _3567 = ((1.0 - _3561) * dot(vec3(_692, _695, _698), vec3(_3484, _3485, _3486))) + _3561;
                                float _4691 = isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0));
                                float _3568 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
                                float _3569 = 1.0 - _3536;
                                float _3579 = (0.5 / (((_3568 * ((_3551 * _3569) + _3536)) + 9.9999999392252902907785028219223e-09) + (((_3568 * _3569) + _3536) * _3551))) * _3568;
                                float _4702 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                                float _3589 = (_3514 * _3491) * (((_3537 * 3.1415927410125732421875) * (isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0)))) / ((_3559 * _3559) * ((_3504 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3515 * _3359.y;
                                frontier_phi_78_pred_1 = _3515 * _3359.x;
                                frontier_phi_78_pred_2 = _3589 * _3371.z;
                                frontier_phi_78_pred_3 = _3589 * _3371.y;
                                frontier_phi_78_pred_4 = _3589 * _3371.x;
                                frontier_phi_78_pred_5 = _3515 * _3359.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3597 = frontier_phi_78_pred;
                            _3596 = frontier_phi_78_pred_1;
                            _3595 = frontier_phi_78_pred_2;
                            _3594 = frontier_phi_78_pred_3;
                            _3593 = frontier_phi_78_pred_4;
                            _3598 = frontier_phi_78_pred_5;
                            _3301 = _3596 + _3314;
                            _3302 = _3597 + _3315;
                            _3303 = _3598 + _3316;
                            _3298 = _3593 + _3311;
                            _3299 = _3594 + _3312;
                            _3300 = _3595 + _3313;
                            if (_3318 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3311 = _3298;
                                _3312 = _3299;
                                _3313 = _3300;
                                _3314 = _3301;
                                _3315 = _3302;
                                _3316 = _3303;
                                _3317 = _3318;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3303;
                        frontier_phi_72_pred_1 = _3302;
                        frontier_phi_72_pred_2 = _3301;
                        frontier_phi_72_pred_3 = _3300;
                        frontier_phi_72_pred_4 = _3299;
                        frontier_phi_72_pred_5 = _3298;
                    }
                    _2971 = frontier_phi_72_pred;
                    _2969 = frontier_phi_72_pred_1;
                    _2967 = frontier_phi_72_pred_2;
                    _2965 = frontier_phi_72_pred_3;
                    _2963 = frontier_phi_72_pred_4;
                    _2961 = frontier_phi_72_pred_5;
                    uint _3106 = _3105 + 1u;
                    if (_3106 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3099 = _2961;
                        _3100 = _2963;
                        _3101 = _2965;
                        _3102 = _2967;
                        _3103 = _2969;
                        _3104 = _2971;
                        _3105 = _3106;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2971;
                frontier_phi_60_61_ladder_1 = _2969;
                frontier_phi_60_61_ladder_2 = _2965;
                frontier_phi_60_61_ladder_3 = _2963;
                frontier_phi_60_61_ladder_4 = _2961;
                frontier_phi_60_61_ladder_5 = _2967;
            }
            else
            {
                frontier_phi_60_61_ladder = _2857;
                frontier_phi_60_61_ladder_1 = _2855;
                frontier_phi_60_61_ladder_2 = _2851;
                frontier_phi_60_61_ladder_3 = _2849;
                frontier_phi_60_61_ladder_4 = _2847;
                frontier_phi_60_61_ladder_5 = _2853;
            }
            _2960 = frontier_phi_60_61_ladder_4;
            _2962 = frontier_phi_60_61_ladder_3;
            _2964 = frontier_phi_60_61_ladder_2;
            _2966 = frontier_phi_60_61_ladder_5;
            _2968 = frontier_phi_60_61_ladder_1;
            _2970 = frontier_phi_60_61_ladder;
        }
        float _2975 = isnan(1.0) ? _751 : (isnan(_751) ? 1.0 : min(_751, 1.0));
        _2780 = (_2975 * _2966) + _2292;
        _2782 = (_2975 * _2968) + _2294;
        _2784 = (_2975 * _2970) + _2296;
        _2786 = ((_2960 * _735) * _2975) + _2630;
        _2788 = ((_2962 * _737) * _2975) + _2632;
        _2790 = ((_2964 * _738) * _2975) + _2634;
    }
    else
    {
        _2780 = _2292;
        _2782 = _2294;
        _2784 = _2296;
        _2786 = _2630;
        _2788 = _2632;
        _2790 = _2634;
    }
    float _4718 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _4729 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _4740 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    uint _2810 = _241 + 6u;
    float _2818 = _670 / cbSceneParam._m0[86u].x;
    float _2819 = _671 / cbSceneParam._m0[86u].y;
    vec4 _2833 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2818, _2819, (log2((isnan(cbSceneParam._m0[77u].w) ? _605 : (isnan(_605) ? cbSceneParam._m0[77u].w : min(_605, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2835 = _2833.x;
    float _2836 = _2833.y;
    float _2837 = _2833.z;
    float _2838 = _2833.w;
    float _2910;
    float _2912;
    float _2914;
    float _2916;
    if (_605 > cbSceneParam._m0[78u].w)
    {
        float _2872 = isnan(_605) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _605 : min(cbSceneParam._m0[80u].w, _605));
        float _2873 = _2872 / _605;
        float _2884 = _2873 * _655;
        float _2885 = _656 * _2873;
        float _2886 = (-0.0) - _2885;
        float _2888 = _2873 * _657;
        float _2890 = (cbSceneParam._m0[77u].w * _2886) / _2872;
        float _2891 = _2890 + cbSceneParam._m0[79u].w;
        float _2892 = cbSceneParam._m0[79u].w - _2885;
        float _2898 = sqrt(((_2884 * _2884) + (_2885 * _2885)) + (_2888 * _2888));
        float _2901 = (1.0 - (cbSceneParam._m0[77u].w / _2872)) * _2898;
        float _2906 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2908 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3061;
        if (abs((_2886 - _2890) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3061 = ((((_2891 > 0.0) ? exp2(_2906 * _2891) : (2.0 - exp2(_2908 * _2891))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2901;
        }
        else
        {
            float _3021 = 1.0 / cbSceneParam._m0[80u].x;
            float _3022 = isnan(_2892) ? _2891 : (isnan(_2891) ? _2892 : max(_2891, _2892));
            float _3023 = isnan(_2892) ? _2891 : (isnan(_2891) ? _2892 : min(_2891, _2892));
            float _3032 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : min(_3022, 0.0));
            float _3033 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : min(_3023, 0.0));
            _3061 = ((abs(_2898 / _2886) * cbSceneParam._m0[80u].y) * ((((_3032 - _3033) * 2.0) - ((exp2(_2906 * (isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0)))) - exp2(_2906 * (isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0))))) * _3021)) - ((exp2(_2908 * _3032) - exp2(_2908 * _3033)) * _3021))) + (_2901 * cbSceneParam._m0[80u].z);
        }
        vec4 _3063 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2818, _2819, 1.0), 0.0);
        float _3072 = exp2((_3061 * (-1.44269502162933349609375)) * (1.0 - _3063.w));
        float _3073 = log2(_3072);
        float _3089 = log2(_2838);
        _2910 = (exp2(_3089 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3073 * cbSceneParam._m0[78u].x)) * _3063.x) / cbSceneParam._m0[78u].x)) + _2835;
        _2912 = (exp2(_3089 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3073 * cbSceneParam._m0[78u].y)) * _3063.y) / cbSceneParam._m0[78u].y)) + _2836;
        _2914 = (exp2(_3089 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3073 * cbSceneParam._m0[78u].z)) * _3063.z) / cbSceneParam._m0[78u].z)) + _2837;
        _2916 = _3072 * _2838;
    }
    else
    {
        _2910 = _2835;
        _2912 = _2836;
        _2914 = _2837;
        _2916 = _2838;
    }
    float _2928 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2929 = _2928 == 3.0;
    float _2930 = log2(_2916);
    float _2937 = exp2(_2930 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0))) * (_2780 + ((isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))) * _751))) + ((_2786 + ((isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))) * _1559)) * cbPerFrame._m0[3u].x));
    float _2938 = exp2(_2930 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0))) * (_2782 + ((isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0))) * _751))) + ((_2788 + ((isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))) * _1559)) * cbPerFrame._m0[3u].x));
    float _2939 = exp2(_2930 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0))) * (_2784 + ((isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))) * _751))) + ((_2790 + ((isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0))) * _1559)) * cbPerFrame._m0[3u].x));
    float _2948 = (_2928 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2948 * (_2929 ? _2937 : (_2937 + (cbSceneParam._m0[72u].w * _2910)));
    SV_Target.y = _2948 * (_2929 ? _2938 : (_2938 + (cbSceneParam._m0[72u].w * _2912)));
    SV_Target.z = _2948 * (_2929 ? _2939 : (_2939 + (cbSceneParam._m0[72u].w * _2914)));
    SV_Target.w = cbInstanceData._m0[_2810].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2810].w;
}


