#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1059;
float _3443;
float _3444;
float _3445;
float _3446;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _230 = uint(roundEven(NORMAL.w)) * 13u;
    uint _236 = _230 + 1u;
    uint _240 = _230 + 2u;
    float _249 = sqrt(((cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x)) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x));
    float _250 = _249 * TEXCOORD.z;
    float _251 = _249 * TEXCOORD.w;
    vec4 _270 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _276 = _270.x * cbMtdParam._m0[9u].x;
    float _277 = _270.y * cbMtdParam._m0[9u].y;
    float _278 = _270.z * cbMtdParam._m0[9u].z;
    vec4 _296 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _250) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _251) + cbTextureTilingScale._m0[20u].w));
    vec4 _322 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _326 = _322.z;
    float _330 = (_322.x * 2.0) + (-1.0);
    float _331 = (_322.y * 2.0) + (-1.0);
    float _332 = dot(vec2(_330, _331), vec2(_330, _331));
    float _3455 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _338 = sqrt(1.0 - (isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0))));
    float _343 = _330 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_296.x * 2.0) + (-1.0)));
    float _344 = _331 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_296.y * 2.0) + (-1.0)));
    vec4 _361 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _250) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _251) + cbTextureTilingScale._m0[11u].w));
    float _363 = _361.x;
    float _364 = 1.0 - _363;
    float _380 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_363 - _364) * cbMtdParam._m0[24u].z) + _364) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3466 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _381 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
    float _388 = (_381 * (cbMtdParam._m0[17u].x - _276)) + _276;
    float _389 = (_381 * (cbMtdParam._m0[17u].y - _277)) + _277;
    float _390 = (_381 * (cbMtdParam._m0[17u].z - _278)) + _278;
    vec4 _403 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _405 = _403.x;
    float _407 = _405 - (_405 * _381);
    float _412 = (((_296.z - _326) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _326;
    vec4 _425 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _250) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _251) + cbTextureTilingScale._m0[15u].w));
    float _432 = (_425.x * 2.0) + (-1.0);
    float _433 = (_425.y * 2.0) + (-1.0);
    float _434 = dot(vec2(_432, _433), vec2(_432, _433));
    float _3477 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _442 = (_381 * (_425.z - _412)) + _412;
    float _454 = (((_432 - _343) + (cbMtdParam._m0[21u].x * _343)) * _381) + _343;
    float _455 = (((_433 - _344) + (cbMtdParam._m0[21u].x * _344)) * _381) + _344;
    float _456 = (_381 * (sqrt(1.0 - (isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0)))) - _338)) + _338;
    float _461 = cbMtdParam._m0[22u].x + _322.w;
    float _464 = fma(_456, _217 * NORMAL.x, fma(_455, _224 * TANGENT.x, (_210 * _202) * _454));
    float _467 = fma(_456, _217 * NORMAL.y, fma(_455, _224 * TANGENT.y, (_210 * _203) * _454));
    float _470 = fma(_456, _217 * NORMAL.z, fma(_455, _224 * TANGENT.z, (_210 * _204) * _454));
    float _474 = inversesqrt(dot(vec3(_464, _467, _470), vec3(_464, _467, _470)));
    float _475 = _474 * _464;
    float _476 = _474 * _467;
    float _477 = _474 * _470;
    float _3488 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _478 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
    float _3499 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _3510 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _3521 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _3532 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _3543 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _483 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
    float _497 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _538 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _548 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _538);
    float _549 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _538);
    float _550 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _538);
    float _554 = inversesqrt(dot(vec3(_548, _549, _550), vec3(_548, _549, _550)));
    float _555 = _548 * _554;
    float _556 = _549 * _554;
    float _557 = _550 * _554;
    vec4 _562 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _564 = _562.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _739 = sqrt(((_548 * _548) + (_549 * _549)) + (_550 * _550));
        float _745 = (cbMatDynParam._m0[5u].x * _739) + cbMatDynParam._m0[5u].y;
        float _3554 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _746 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _750 = (cbMatDynParam._m0[5u].z * _739) + cbMatDynParam._m0[5u].w;
        float _3565 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))) - _746)) + _746) < ((_564 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _576 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _577 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _597 = fma(_477, cbSceneParam._m0[5u].z, fma(_476, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _475));
    float _600 = fma(_477, cbSceneParam._m0[6u].z, fma(_476, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _475));
    float _603 = fma(_477, cbSceneParam._m0[7u].z, fma(_476, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _475));
    uint _616 = _230 + 9u;
    uint _617 = _616 + uint(cbMatDynParam._m0[0u].w);
    float _623 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0)))) * cbInstanceData._m0[_617].x;
    float _624 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0)))) * cbInstanceData._m0[_617].y;
    float _625 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0)))) * cbInstanceData._m0[_617].z;
    float _3576 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _626 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
    float _3587 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _627 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
    float _3598 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _628 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
    float _629 = 1.0 - _483;
    float _630 = _626 * _629;
    float _631 = _627 * _629;
    float _632 = _628 * _629;
    float _637 = (_626 + (-0.039999999105930328369140625)) * _483;
    float _638 = (_627 + (-0.039999999105930328369140625)) * _483;
    float _639 = (_628 + (-0.039999999105930328369140625)) * _483;
    float _640 = _637 + 0.039999999105930328369140625;
    float _642 = _638 + 0.039999999105930328369140625;
    float _643 = _639 + 0.039999999105930328369140625;
    vec4 _652 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _576, cbSceneParam._m0[86u].y * _577));
    float _656 = ((isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0))) * TEXCOORD_5.w) * _652.x;
    float _657 = dot(vec3(_475, _476, _477), vec3(_555, _556, _557));
    float _660 = _657 * 2.0;
    float _664 = (_660 * _475) - _555;
    float _665 = (_660 * _476) - _556;
    float _666 = (_660 * _477) - _557;
    float _670 = abs(dot(vec3(_555, _556, _557), vec3(_475, _476, _477)));
    float _3609 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _672 = sqrt(_478);
    float _685 = exp2((_672 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_672 * 3.0));
    float _691 = (1.0 - _685) * ((_672 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _692 = _685 * _672;
    float _720 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _724 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _728 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1058;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _783 = fma(_728, cbModelParam._m0[26u].z, fma(_724, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _720));
        float _787 = fma(_728, cbModelParam._m0[27u].z, fma(_724, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _720));
        float _791 = fma(_728, cbModelParam._m0[28u].z, fma(_724, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _720));
        float _816 = _720 + _475;
        float _817 = _724 + _476;
        float _818 = _728 + _477;
        float _828 = fma(_818, cbModelParam._m0[26u].z, fma(_817, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _816)) - _783;
        float _829 = fma(_818, cbModelParam._m0[27u].z, fma(_817, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _816)) - _787;
        float _830 = fma(_818, cbModelParam._m0[28u].z, fma(_817, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _816)) - _791;
        float _834 = inversesqrt(dot(vec3(_828, _829, _830), vec3(_828, _829, _830)));
        float _847 = ((_834 * _828) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_783 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _848 = ((_834 * _829) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_787 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _849 = ((_834 * _830) / cbModelParam._m0[34u].z) + ((((((_791 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_847, _848, _849), 0.0);
        vec4 _859 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_847, _848, _849), 0.0);
        vec4 _866 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_847, _848, _849), 0.0);
        vec4 _873 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_847, _848, _849), 0.0);
        float _886 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _887 = _886 * (_852.x + (-0.5));
        float _888 = _886 * (_852.y + (-0.5));
        float _889 = _886 * (_852.z + (-0.5));
        float _896 = exp2((_859.w + (-0.5)) * 20.0) * 2.0;
        float _897 = _896 * (_859.x + (-0.5));
        float _898 = _896 * (_859.y + (-0.5));
        float _899 = _896 * (_859.z + (-0.5));
        float _906 = exp2((_866.w + (-0.5)) * 20.0) * 2.0;
        float _907 = _906 * (_866.x + (-0.5));
        float _908 = _906 * (_866.y + (-0.5));
        float _909 = _906 * (_866.z + (-0.5));
        float _916 = exp2((_873.w + (-0.5)) * 20.0) * 2.0;
        float _917 = _916 * (_873.x + (-0.5));
        float _918 = _916 * (_873.y + (-0.5));
        float _919 = _916 * (_873.z + (-0.5));
        float _920 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _921 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _922 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _923 = _887 * 0.5;
        float _924 = _897 * 0.5;
        float _925 = _907 * 0.5;
        float _926 = dot(vec3(_923, _924, _925), vec3(_923, _924, _925));
        float _931 = (_926 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_926);
        float _940 = (dot(vec3(_475, _476, _477), vec3(_931 * _923, _931 * _924, _931 * _925)) + 1.0) * 0.5;
        float _3635 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _950 = sqrt(((_924 * _924) + (_923 * _923)) + (_925 * _925)) / (_920 + 9.9999997473787516355514526367188e-06);
        float _3646 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _951 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _952 = _951 * 2.0;
        float _956 = (1.0 - _951) / (_951 + 1.0);
        float _3657 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _957 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _966 = ((((1.0 - _957) * (_952 + 2.0)) * exp2(log2(isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0))) * (_952 + 1.0))) + _957) * _920;
        float _967 = _888 * 0.5;
        float _968 = _898 * 0.5;
        float _969 = _908 * 0.5;
        float _970 = dot(vec3(_967, _968, _969), vec3(_967, _968, _969));
        float _975 = (_970 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_970);
        float _983 = (dot(vec3(_475, _476, _477), vec3(_975 * _967, _975 * _968, _975 * _969)) + 1.0) * 0.5;
        float _3668 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _992 = sqrt(((_968 * _968) + (_967 * _967)) + (_969 * _969)) / (_921 + 9.9999997473787516355514526367188e-06);
        float _3679 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _993 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _994 = _993 * 2.0;
        float _998 = (1.0 - _993) / (_993 + 1.0);
        float _3690 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _999 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _1008 = ((((1.0 - _999) * (_994 + 2.0)) * exp2(log2(isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))) * (_994 + 1.0))) + _999) * _921;
        float _1009 = _889 * 0.5;
        float _1010 = _899 * 0.5;
        float _1011 = _909 * 0.5;
        float _1012 = dot(vec3(_1009, _1010, _1011), vec3(_1009, _1010, _1011));
        float _1017 = (_1012 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1012);
        float _1025 = (dot(vec3(_475, _476, _477), vec3(_1017 * _1009, _1017 * _1010, _1017 * _1011)) + 1.0) * 0.5;
        float _3701 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1034 = sqrt(((_1010 * _1010) + (_1009 * _1009)) + (_1011 * _1011)) / (_922 + 9.9999997473787516355514526367188e-06);
        float _3712 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1036 = _1035 * 2.0;
        float _1040 = (1.0 - _1035) / (_1035 + 1.0);
        float _3723 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1050 = ((((1.0 - _1041) * (_1036 + 2.0)) * exp2(log2(isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) * (_1036 + 1.0))) + _1041) * _922;
        _1058 = _889;
        _1060 = _888;
        _1061 = _887;
        _1062 = _899;
        _1063 = _898;
        _1064 = _897;
        _1065 = _909;
        _1066 = _908;
        _1067 = _907;
        _1068 = _922;
        _1069 = _921;
        _1070 = _920;
        _1071 = cbModelParam._m0[36u].z * (isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0)));
        _1072 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0)));
        _1073 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0)));
    }
    else
    {
        _1058 = _1059;
        _1060 = _1059;
        _1061 = _1059;
        _1062 = _1059;
        _1063 = _1059;
        _1064 = _1059;
        _1065 = _1059;
        _1066 = _1059;
        _1067 = _1059;
        _1068 = _1059;
        _1069 = _1059;
        _1070 = _1059;
        _1071 = 0.0;
        _1072 = 0.0;
        _1073 = 0.0;
    }
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1101 = fma(_728, cbModelParam._m0[30u].z, fma(_724, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _720));
        float _1105 = fma(_728, cbModelParam._m0[31u].z, fma(_724, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _720));
        float _1109 = fma(_728, cbModelParam._m0[32u].z, fma(_724, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _720));
        float _1132 = _720 + _475;
        float _1133 = _724 + _476;
        float _1134 = _728 + _477;
        float _1144 = fma(_1134, cbModelParam._m0[30u].z, fma(_1133, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1132)) - _1101;
        float _1145 = fma(_1134, cbModelParam._m0[31u].z, fma(_1133, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1132)) - _1105;
        float _1146 = fma(_1134, cbModelParam._m0[32u].z, fma(_1133, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1132)) - _1109;
        float _1150 = inversesqrt(dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146)));
        float _1163 = ((_1150 * _1144) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1101 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1164 = ((_1150 * _1145) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1105 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1165 = ((_1150 * _1146) / cbModelParam._m0[35u].z) + ((((((_1109 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        float _1200 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1167.x + (-0.5));
        float _1202 = _1200 * (_1167.y + (-0.5));
        float _1203 = _1200 * (_1167.z + (-0.5));
        float _1210 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1174.x + (-0.5));
        float _1212 = _1210 * (_1174.y + (-0.5));
        float _1213 = _1210 * (_1174.z + (-0.5));
        float _1220 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1181.x + (-0.5));
        float _1222 = _1220 * (_1181.y + (-0.5));
        float _1223 = _1220 * (_1181.z + (-0.5));
        float _1230 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1188.x + (-0.5));
        float _1232 = _1230 * (_1188.y + (-0.5));
        float _1233 = _1230 * (_1188.z + (-0.5));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = _1201 * 0.5;
        float _1238 = _1211 * 0.5;
        float _1239 = _1221 * 0.5;
        float _1240 = dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239));
        float _1245 = (_1240 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1240);
        float _1253 = (dot(vec3(_475, _476, _477), vec3(_1245 * _1237, _1245 * _1238, _1245 * _1239)) + 1.0) * 0.5;
        float _3764 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1262 = sqrt(((_1238 * _1238) + (_1237 * _1237)) + (_1239 * _1239)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _3775 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1264 = _1263 * 2.0;
        float _1268 = (1.0 - _1263) / (_1263 + 1.0);
        float _3786 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1278 = ((((1.0 - _1269) * (_1264 + 2.0)) * exp2(log2(isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) * (_1264 + 1.0))) + _1269) * _1234;
        float _1279 = _1202 * 0.5;
        float _1280 = _1212 * 0.5;
        float _1281 = _1222 * 0.5;
        float _1282 = dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281));
        float _1287 = (_1282 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1282);
        float _1295 = (dot(vec3(_475, _476, _477), vec3(_1287 * _1279, _1287 * _1280, _1287 * _1281)) + 1.0) * 0.5;
        float _3797 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1304 = sqrt(((_1280 * _1280) + (_1279 * _1279)) + (_1281 * _1281)) / (_1235 + 9.9999997473787516355514526367188e-06);
        float _3808 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1306 = _1305 * 2.0;
        float _1310 = (1.0 - _1305) / (_1305 + 1.0);
        float _3819 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1320 = ((((1.0 - _1311) * (_1306 + 2.0)) * exp2(log2(isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * (_1306 + 1.0))) + _1311) * _1235;
        float _1321 = _1203 * 0.5;
        float _1322 = _1213 * 0.5;
        float _1323 = _1223 * 0.5;
        float _1324 = dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323));
        float _1329 = (_1324 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1324);
        float _1337 = (dot(vec3(_475, _476, _477), vec3(_1329 * _1321, _1329 * _1322, _1329 * _1323)) + 1.0) * 0.5;
        float _3830 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1346 = sqrt(((_1322 * _1322) + (_1321 * _1321)) + (_1323 * _1323)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _3841 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1348 = _1347 * 2.0;
        float _1352 = (1.0 - _1347) / (_1347 + 1.0);
        float _3852 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1362 = ((((1.0 - _1353) * (_1348 + 2.0)) * exp2(log2(isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * (_1348 + 1.0))) + _1353) * _1236;
        _1370 = _1203;
        _1371 = _1202;
        _1372 = _1201;
        _1373 = _1213;
        _1374 = _1212;
        _1375 = _1211;
        _1376 = _1223;
        _1377 = _1222;
        _1378 = _1221;
        _1379 = _1236;
        _1380 = _1235;
        _1381 = _1234;
        _1382 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)));
        _1383 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)));
        _1384 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)));
    }
    else
    {
        _1370 = _1059;
        _1371 = _1059;
        _1372 = _1059;
        _1373 = _1059;
        _1374 = _1059;
        _1375 = _1059;
        _1376 = _1059;
        _1377 = _1059;
        _1378 = _1059;
        _1379 = _1059;
        _1380 = _1059;
        _1381 = _1059;
        _1382 = 0.0;
        _1383 = 0.0;
        _1384 = 0.0;
    }
    float _1394 = (cbModelParam._m0[1u].x * (_1382 - _1071)) + _1071;
    float _1395 = (cbModelParam._m0[1u].x * (_1383 - _1072)) + _1072;
    float _1396 = (cbModelParam._m0[1u].x * (_1384 - _1073)) + _1073;
    float _1417 = fma(_1396, cbSceneParam._m0[89u].z, fma(_1395, cbSceneParam._m0[89u].y, _1394 * cbSceneParam._m0[89u].x));
    float _1420 = fma(_1396, cbSceneParam._m0[90u].z, fma(_1395, cbSceneParam._m0[90u].y, _1394 * cbSceneParam._m0[90u].x));
    float _1423 = fma(_1396, cbSceneParam._m0[91u].z, fma(_1395, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1394));
    float _1438 = _664 * 0.5;
    float _1439 = _665 * 0.5;
    float _1440 = _666 * 0.5;
    float _1441 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1372, _1375, _1378, _1381));
    float _1444 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1371, _1374, _1377, _1380));
    float _1447 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1370, _1373, _1376, _1379));
    float _1481;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1454 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1058, _1062, _1065, _1068));
        float _1458 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1060, _1063, _1066, _1069));
        float _1462 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1061, _1064, _1067, _1070));
        float _1469 = dot(vec4(cbModelParam._m0[39u]), vec4(_1438, _1439, _1440, 1.0));
        _1481 = dot(vec3(isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)), isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)), isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1469) ? 0.0 : (isnan(0.0) ? _1469 : max(0.0, _1469))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1481 = 1.0;
    }
    float _1492;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1483 = dot(vec4(cbModelParam._m0[40u]), vec4(_1438, _1439, _1440, 1.0));
        _1492 = dot(vec3(isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)), isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)), isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1483) ? 0.0 : (isnan(0.0) ? _1483 : max(0.0, _1483))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1492 = 1.0;
    }
    float _1496 = (_1492 * cbModelParam._m0[1u].x) + (_1481 * (1.0 - cbModelParam._m0[1u].x));
    float _1506 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _478);
    float _1507 = isnan(_1506) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1506 : min(cbModelParam._m0[25u].z, _1506));
    float _1588;
    float _1590;
    float _1592;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1555 = fma(_728, cbModelParam._m0[13u].z, fma(_724, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _720)) + cbModelParam._m0[13u].w;
        float _1559 = fma(_728, cbModelParam._m0[14u].z, fma(_724, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _720)) + cbModelParam._m0[14u].w;
        float _1563 = fma(_728, cbModelParam._m0[15u].z, fma(_724, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _720)) + cbModelParam._m0[15u].w;
        float _1566 = fma(_666, cbModelParam._m0[13u].z, fma(_665, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _664));
        float _1569 = fma(_666, cbModelParam._m0[14u].z, fma(_665, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _664));
        float _1572 = fma(_666, cbModelParam._m0[15u].z, fma(_665, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _664));
        float _1600;
        if (_1566 > 0.0)
        {
            _1600 = abs((1.0 - _1555) / _1566);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1566 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1555 + 1.0) / _1566);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1600 = frontier_phi_17_15_ladder;
        }
        float _1805;
        if (_1569 > 0.0)
        {
            _1805 = abs((1.0 - _1559) / _1569);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1569 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1559 + 1.0) / _1569);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1805 = frontier_phi_26_22_ladder;
        }
        float _2059;
        if (_1572 > 0.0)
        {
            _2059 = abs((1.0 - _1563) / _1572);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1572 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1563 + 1.0) / _1572);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2059 = frontier_phi_38_33_ladder;
        }
        float _2061 = isnan(_1805) ? _1600 : (isnan(_1600) ? _1805 : min(_1600, _1805));
        float _2062 = isnan(_2059) ? _2061 : (isnan(_2061) ? _2059 : min(_2061, _2059));
        float _2066 = (_2062 * _1566) + _1555;
        float _2067 = (_2062 * _1569) + _1559;
        float _2068 = (_2062 * _1572) + _1563;
        float _2069 = _2062 * 9.9999997473787516355514526367188e-05;
        float _2071 = (-1.0) - _2069;
        float _2073 = _2069 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2068 > _2073) || ((_2068 < _2071) || ((_2067 > _2073) || ((_2067 < _2071) || ((_2066 < _2071) || (_2066 > _2073))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2196 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2068, cbModelParam._m0[9u].z, fma(_2067, cbModelParam._m0[9u].y, _2066 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2068, cbModelParam._m0[10u].z, fma(_2067, cbModelParam._m0[10u].y, _2066 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2068, cbModelParam._m0[11u].z, fma(_2067, cbModelParam._m0[11u].y, _2066 * cbModelParam._m0[11u].x))), _1507);
            frontier_phi_16_38_ladder = _2196.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2196.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2196.x * cbModelParam._m0[1u].y;
        }
        _1588 = frontier_phi_16_38_ladder_2;
        _1590 = frontier_phi_16_38_ladder_1;
        _1592 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1576 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_664, _665, _666), _1507);
        _1588 = _1576.x * cbModelParam._m0[1u].y;
        _1590 = _1576.y * cbModelParam._m0[1u].y;
        _1592 = _1576.z * cbModelParam._m0[1u].y;
    }
    float _1596 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _478);
    float _1597 = isnan(_1596) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1596 : min(cbModelParam._m0[25u].w, _1596));
    float _1688;
    float _1690;
    float _1692;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1652 = fma(_728, cbModelParam._m0[21u].z, fma(_724, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _720)) + cbModelParam._m0[21u].w;
        float _1656 = fma(_728, cbModelParam._m0[22u].z, fma(_724, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _720)) + cbModelParam._m0[22u].w;
        float _1660 = fma(_728, cbModelParam._m0[23u].z, fma(_724, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _720)) + cbModelParam._m0[23u].w;
        float _1663 = fma(_666, cbModelParam._m0[21u].z, fma(_665, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _664));
        float _1666 = fma(_666, cbModelParam._m0[22u].z, fma(_665, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _664));
        float _1669 = fma(_666, cbModelParam._m0[23u].z, fma(_665, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _664));
        float _1810;
        if (_1663 > 0.0)
        {
            _1810 = abs((1.0 - _1652) / _1663);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1663 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1652 + 1.0) / _1663);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1810 = frontier_phi_28_24_ladder;
        }
        float _2086;
        if (_1666 > 0.0)
        {
            _2086 = abs((1.0 - _1656) / _1666);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1666 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1656 + 1.0) / _1666);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2086 = frontier_phi_40_35_ladder;
        }
        float _2299;
        if (_1669 > 0.0)
        {
            _2299 = abs((1.0 - _1660) / _1669);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1669 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1660 + 1.0) / _1669);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2299 = frontier_phi_49_46_ladder;
        }
        float _2301 = isnan(_2086) ? _1810 : (isnan(_1810) ? _2086 : min(_1810, _2086));
        float _2302 = isnan(_2299) ? _2301 : (isnan(_2301) ? _2299 : min(_2301, _2299));
        float _2306 = (_2302 * _1663) + _1652;
        float _2307 = (_2302 * _1666) + _1656;
        float _2308 = (_2302 * _1669) + _1660;
        float _2309 = _2302 * 9.9999997473787516355514526367188e-05;
        float _2310 = (-1.0) - _2309;
        float _2312 = _2309 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2308 > _2312) || ((_2308 < _2310) || ((_2307 > _2312) || ((_2307 < _2310) || ((_2306 < _2310) || (_2306 > _2312))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2507 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2308, cbModelParam._m0[17u].z, fma(_2307, cbModelParam._m0[17u].y, _2306 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2308, cbModelParam._m0[18u].z, fma(_2307, cbModelParam._m0[18u].y, _2306 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2308, cbModelParam._m0[19u].z, fma(_2307, cbModelParam._m0[19u].y, _2306 * cbModelParam._m0[19u].x))), _1597);
            frontier_phi_25_49_ladder = _2507.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2507.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2507.x * cbModelParam._m0[1u].z;
        }
        _1688 = frontier_phi_25_49_ladder_2;
        _1690 = frontier_phi_25_49_ladder_1;
        _1692 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1672 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_664, _665, _666), _1597);
        _1688 = _1672.x * cbModelParam._m0[1u].z;
        _1690 = _1672.y * cbModelParam._m0[1u].z;
        _1692 = _1672.z * cbModelParam._m0[1u].z;
    }
    float _1705 = (((_691 * _640) + _692) * _656) * ((cbModelParam._m0[1u].w * (_1688 - _1588)) + _1588);
    float _1707 = (((_691 * _642) + _692) * _656) * ((cbModelParam._m0[1u].w * (_1690 - _1590)) + _1590);
    float _1709 = (((_691 * _643) + _692) * _656) * ((cbModelParam._m0[1u].w * (_1692 - _1592)) + _1592);
    float _1712 = fma(_1709, cbSceneParam._m0[89u].z, fma(_1707, cbSceneParam._m0[89u].y, _1705 * cbSceneParam._m0[89u].x));
    float _1715 = fma(_1709, cbSceneParam._m0[90u].z, fma(_1707, cbSceneParam._m0[90u].y, _1705 * cbSceneParam._m0[90u].x));
    float _1718 = fma(_1709, cbSceneParam._m0[91u].z, fma(_1707, cbSceneParam._m0[91u].y, _1705 * cbSceneParam._m0[91u].x));
    uvec4 _1728 = floatBitsToUint(cbInstanceData._m0[_230 + 5u]);
    uint _1730 = _1728.x * 14u;
    uint _1731 = _1730 + 13u;
    float _1738 = _656 + (-1.0);
    float _1743 = (cbLight._m0[_1731].x * _1738) + 1.0;
    float _1744 = (cbLight._m0[_1731].y * _1738) + 1.0;
    float _1745 = (cbLight._m0[_1731].z * _1738) + 1.0;
    float _1746 = (cbLight._m0[_1731].w * _1738) + 1.0;
    uint _1747 = _1730 + 5u;
    float _1753 = isnan(1.0) ? _1744 : (isnan(_1744) ? 1.0 : min(_1744, 1.0));
    uint _1757 = _1730 + 4u;
    float _1764 = isnan(1.0) ? _1743 : (isnan(_1743) ? 1.0 : min(_1743, 1.0));
    uint _1768 = _1730 | 1u;
    float _1779 = dot(vec3(cbLight._m0[_1730].xyz), vec3(_475, _476, _477));
    float _1782 = dot(vec3(cbLight._m0[_1768].xyz), vec3(_475, _476, _477));
    float _3988 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
    float _3999 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
    float _1787 = (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * 0.3183098733425140380859375;
    float _1789 = (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * 0.3183098733425140380859375;
    float _1796 = ((cbLight._m0[_1747].x * _1753) * _1789) + ((cbLight._m0[_1757].x * _1764) * _1787);
    float _1797 = ((_1753 * cbLight._m0[_1747].y) * _1789) + ((_1764 * cbLight._m0[_1757].y) * _1787);
    float _1798 = ((_1753 * cbLight._m0[_1747].z) * _1789) + ((_1764 * cbLight._m0[_1757].z) * _1787);
    uvec4 _1802 = floatBitsToUint(cbLight._m0[_1730 + 12u]);
    bool _1804 = _1802.x == 0u;
    float _1815;
    float _1817;
    float _1819;
    if (_1804)
    {
        _1815 = _1796;
        _1817 = _1797;
        _1819 = _1798;
    }
    else
    {
        uint _1823 = _1730 + 6u;
        float _1839 = (dot(vec3(cbLight._m0[_1730 + 2u].xyz), vec3(_475, _476, _477)) * 0.5) + 0.5;
        float _1840 = _1839 * _1839;
        float _4010 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
        float _1841 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1842 = isnan(1.0) ? _1745 : (isnan(_1745) ? 1.0 : min(_1745, 1.0));
        _1815 = (((cbLight._m0[_1823].x * 0.3183098733425140380859375) * _1841) * _1842) + _1796;
        _1817 = (((cbLight._m0[_1823].y * 0.3183098733425140380859375) * _1841) * _1842) + _1797;
        _1819 = (((cbLight._m0[_1823].z * 0.3183098733425140380859375) * _1841) * _1842) + _1798;
    }
    bool _1822 = _1802.y == 0u;
    float _1860;
    float _1862;
    float _1864;
    if (_1822)
    {
        _1860 = _1815;
        _1862 = _1817;
        _1864 = _1819;
    }
    else
    {
        uint _2030 = _1730 + 7u;
        float _2046 = (dot(vec3(cbLight._m0[_1730 + 3u].xyz), vec3(_475, _476, _477)) * 0.5) + 0.5;
        float _2047 = _2046 * _2046;
        float _4026 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        float _2048 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _2049 = isnan(1.0) ? _1746 : (isnan(_1746) ? 1.0 : min(_1746, 1.0));
        _1860 = (((cbLight._m0[_2030].x * 0.3183098733425140380859375) * _2048) * _2049) + _1815;
        _1862 = (((cbLight._m0[_2030].y * 0.3183098733425140380859375) * _2048) * _2049) + _1817;
        _1864 = (((cbLight._m0[_2030].z * 0.3183098733425140380859375) * _2048) * _2049) + _1819;
    }
    uint _1867 = _1730 + 8u;
    float _1880 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1730].w)) * _478) * 0.949999988079071044921875);
    float _1881 = _1880 * _1880;
    float _1882 = cbLight._m0[_1730].x + _555;
    float _1883 = cbLight._m0[_1730].y + _556;
    float _1884 = cbLight._m0[_1730].z + _557;
    float _1888 = inversesqrt(dot(vec3(_1882, _1883, _1884), vec3(_1882, _1883, _1884)));
    float _1889 = _1888 * _1882;
    float _1890 = _1888 * _1883;
    float _1891 = _1888 * _1884;
    float _1892 = dot(vec3(_475, _476, _477), vec3(cbLight._m0[_1730].xyz));
    float _4042 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1895 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _4053 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _1896 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _1897 = dot(vec3(_475, _476, _477), vec3(_1889, _1890, _1891));
    float _4064 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _1900 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _1901 = dot(vec3(cbLight._m0[_1730].xyz), vec3(_1889, _1890, _1891));
    float _4075 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1905 = _1881 * _1881;
    float _1909 = ((_1900 * _1900) * (_1905 + (-1.0))) + 1.0;
    float _1917 = exp2(log2(1.0 - (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0)))) * 5.0);
    float _1918 = 0.959999978542327880859375 - _637;
    float _1920 = 0.959999978542327880859375 - _638;
    float _1921 = 0.959999978542327880859375 - _639;
    float _1928 = 1.0 - _1881;
    float _1939 = (0.5 / (((_1896 * ((_1895 * _1928) + _1881)) + 9.9999999392252902907785028219223e-09) + (((_1896 * _1928) + _1881) * _1895))) * _1895;
    float _4086 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
    float _1941 = (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (_1905 / ((_1909 * _1909) * 3.141590118408203125));
    uint _1952 = _1730 + 9u;
    float _1963 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1768].w)) * _478) * 0.949999988079071044921875);
    float _1964 = _1963 * _1963;
    float _1965 = cbLight._m0[_1768].x + _555;
    float _1966 = cbLight._m0[_1768].y + _556;
    float _1967 = cbLight._m0[_1768].z + _557;
    float _1971 = inversesqrt(dot(vec3(_1965, _1966, _1967), vec3(_1965, _1966, _1967)));
    float _1972 = _1971 * _1965;
    float _1973 = _1971 * _1966;
    float _1974 = _1971 * _1967;
    float _1975 = dot(vec3(_475, _476, _477), vec3(cbLight._m0[_1768].xyz));
    float _4097 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _1978 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _1979 = dot(vec3(_475, _476, _477), vec3(_1972, _1973, _1974));
    float _4108 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _1982 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _1983 = dot(vec3(cbLight._m0[_1768].xyz), vec3(_1972, _1973, _1974));
    float _4119 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _1987 = _1964 * _1964;
    float _1991 = ((_1982 * _1982) * (_1987 + (-1.0))) + 1.0;
    float _1998 = exp2(log2(1.0 - (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) * 5.0);
    float _2005 = 1.0 - _1964;
    float _2015 = (0.5 / (((_1896 * ((_1978 * _2005) + _1964)) + 9.9999999392252902907785028219223e-09) + (((_1896 * _2005) + _1964) * _1978))) * _1978;
    float _4130 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2017 = (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_1987 / ((_1991 * _1991) * 3.141590118408203125));
    float _2027 = (((((_1998 * _1918) + _640) * cbLight._m0[_1952].x) * _2017) * _1753) + (((((_1917 * _1918) + _640) * cbLight._m0[_1867].x) * _1941) * _1764);
    float _2028 = (((((_1998 * _1920) + _642) * cbLight._m0[_1952].y) * _2017) * _1753) + (((((_1917 * _1920) + _642) * cbLight._m0[_1867].y) * _1941) * _1764);
    float _2029 = (((((_1998 * _1921) + _643) * cbLight._m0[_1952].z) * _2017) * _1753) + (((((_1917 * _1921) + _643) * cbLight._m0[_1867].z) * _1941) * _1764);
    float _2091;
    float _2093;
    float _2095;
    if (_1804)
    {
        _2091 = _2027;
        _2093 = _2028;
        _2095 = _2029;
    }
    else
    {
        uint _2097 = _1730 + 2u;
        uint _2101 = _1730 + 10u;
        float _2115 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2097].w)) * _478) * 0.949999988079071044921875);
        float _2116 = _2115 * _2115;
        float _2117 = cbLight._m0[_2097].x + _555;
        float _2118 = cbLight._m0[_2097].y + _556;
        float _2119 = cbLight._m0[_2097].z + _557;
        float _2123 = inversesqrt(dot(vec3(_2117, _2118, _2119), vec3(_2117, _2118, _2119)));
        float _2124 = _2123 * _2117;
        float _2125 = _2123 * _2118;
        float _2126 = _2123 * _2119;
        float _2127 = dot(vec3(_475, _476, _477), vec3(cbLight._m0[_2097].xyz));
        float _4141 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
        float _2130 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _2131 = dot(vec3(_475, _476, _477), vec3(_2124, _2125, _2126));
        float _4152 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
        float _2134 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _2135 = dot(vec3(cbLight._m0[_2097].xyz), vec3(_2124, _2125, _2126));
        float _4163 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2139 = _2116 * _2116;
        float _2143 = ((_2134 * _2134) * (_2139 + (-1.0))) + 1.0;
        float _2150 = exp2(log2(1.0 - (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) * 5.0);
        float _2157 = 1.0 - _2116;
        float _2167 = (0.5 / (((_1896 * ((_2130 * _2157) + _2116)) + 9.9999999392252902907785028219223e-09) + (((_1896 * _2157) + _2116) * _2130))) * _2130;
        float _4174 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
        float _2169 = (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_2139 / ((_2143 * _2143) * 3.141590118408203125));
        float _2170 = isnan(1.0) ? _1745 : (isnan(_1745) ? 1.0 : min(_1745, 1.0));
        _2091 = (((((_2150 * _1918) + _640) * cbLight._m0[_2101].x) * _2169) * _2170) + _2027;
        _2093 = (((((_2150 * _1920) + _642) * cbLight._m0[_2101].y) * _2169) * _2170) + _2028;
        _2095 = (((((_2150 * _1921) + _643) * cbLight._m0[_2101].z) * _2169) * _2170) + _2029;
    }
    float _2205;
    float _2207;
    float _2209;
    if (_1822)
    {
        _2205 = _2091;
        _2207 = _2093;
        _2209 = _2095;
    }
    else
    {
        uint _2216 = _1730 + 3u;
        uint _2220 = _1730 + 11u;
        float _2234 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2216].w)) * _478) * 0.949999988079071044921875);
        float _2235 = _2234 * _2234;
        float _2236 = cbLight._m0[_2216].x + _555;
        float _2237 = cbLight._m0[_2216].y + _556;
        float _2238 = cbLight._m0[_2216].z + _557;
        float _2242 = inversesqrt(dot(vec3(_2236, _2237, _2238), vec3(_2236, _2237, _2238)));
        float _2243 = _2242 * _2236;
        float _2244 = _2242 * _2237;
        float _2245 = _2242 * _2238;
        float _2246 = dot(vec3(_475, _476, _477), vec3(cbLight._m0[_2216].xyz));
        float _4190 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2249 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _2250 = dot(vec3(_475, _476, _477), vec3(_2243, _2244, _2245));
        float _4201 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2253 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _2254 = dot(vec3(cbLight._m0[_2216].xyz), vec3(_2243, _2244, _2245));
        float _4212 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        float _2258 = _2235 * _2235;
        float _2262 = ((_2253 * _2253) * (_2258 + (-1.0))) + 1.0;
        float _2269 = exp2(log2(1.0 - (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0)))) * 5.0);
        float _2276 = 1.0 - _2235;
        float _2286 = (0.5 / (((_1896 * ((_2249 * _2276) + _2235)) + 9.9999999392252902907785028219223e-09) + (((_1896 * _2276) + _2235) * _2249))) * _2249;
        float _4223 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        float _2288 = (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_2258 / ((_2262 * _2262) * 3.141590118408203125));
        float _2289 = isnan(1.0) ? _1746 : (isnan(_1746) ? 1.0 : min(_1746, 1.0));
        _2205 = (((((_2269 * _1918) + _640) * cbLight._m0[_2220].x) * _2288) * _2289) + _2091;
        _2207 = (((((_2269 * _1920) + _642) * cbLight._m0[_2220].y) * _2288) * _2289) + _2093;
        _2209 = (((((_2269 * _1921) + _643) * cbLight._m0[_2220].z) * _2288) * _2289) + _2095;
    }
    float _2424;
    float _2426;
    float _2428;
    float _2430;
    float _2432;
    float _2434;
    if (_1728.y == 0u)
    {
        float _2364 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2365 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2364;
        float _2366 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2364;
        float _2367 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2364;
        uvec4 _2379 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2380 = _2379.x;
        uint _2391 = uint((float(_2379.y) * floor(float(uint(cbSceneParam._m0[85u].y * _577) / _2380))) + floor(float(uint(cbSceneParam._m0[85u].x * _576) / _2380)));
        float _2401 = (log2(_2367 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2402 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        uint _2405 = uint(isnan(14.0) ? _2402 : (isnan(_2402) ? 14.0 : min(_2402, 14.0)));
        uvec4 _2410 = texelFetch(g_lightClusterGridBuffer, int(((_2405 << 2u) + (_2391 << 6u)) >> 2u));
        uint _2411 = _2410.x;
        uint _2412 = _2379.z;
        float _2512;
        float _2514;
        float _2516;
        float _2518;
        float _2520;
        float _2522;
        if (((((1u << ((_2412 >> 4u) & 15u)) + 4294967295u) & _2411) == 0u) || ((_2412 & 240u) == 0u))
        {
            _2512 = 0.0;
            _2514 = 0.0;
            _2516 = 0.0;
            _2518 = 0.0;
            _2520 = 0.0;
            _2522 = 0.0;
        }
        else
        {
            float _2513;
            float _2515;
            float _2517;
            float _2519;
            float _2521;
            float _2523;
            float _2665 = 0.0;
            float _2666 = 0.0;
            float _2667 = 0.0;
            float _2668 = 0.0;
            float _2669 = 0.0;
            float _2670 = 0.0;
            uint _2671 = 0u;
            uint _2680;
            bool _2681;
            for (;;)
            {
                _2680 = texelFetch(g_lightClassification, int((((_2405 << 5u) + (_2391 << 9u)) + (_2671 << 2u)) >> 2u)).x;
                _2681 = _2680 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2681)
                {
                    frontier_phi_66_pred = _2665;
                    frontier_phi_66_pred_1 = _2670;
                    frontier_phi_66_pred_2 = _2669;
                    frontier_phi_66_pred_3 = _2668;
                    frontier_phi_66_pred_4 = _2667;
                    frontier_phi_66_pred_5 = _2666;
                }
                else
                {
                    float _2810;
                    float _2811;
                    float _2812;
                    float _2813;
                    float _2814;
                    float _2815;
                    uint _2816;
                    _2810 = _2665;
                    _2811 = _2666;
                    _2812 = _2667;
                    _2813 = _2668;
                    _2814 = _2669;
                    _2815 = _2670;
                    _2816 = _2680;
                    float _2737;
                    float _2738;
                    float _2739;
                    float _2740;
                    float _2741;
                    float _2742;
                    for (;;)
                    {
                        uint _2820 = uint(findLSB(_2816)) + (_2671 << 5u);
                        uint _2817 = (_2816 + 4294967295u) & _2816;
                        uint _2822 = _2820 * 48u;
                        vec4 _2836 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2822)).x, texelFetch(g_PointLightRenderingBuffer, int(_2822 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2822 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2822 + 3u)).x));
                        uint _2842 = (_2820 * 48u) + 4u;
                        vec4 _2855 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2842)).x, texelFetch(g_PointLightRenderingBuffer, int(_2842 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2842 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2842 + 3u)).x));
                        uint _2861 = (_2820 * 48u) + 8u;
                        vec3 _2872 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2861)).x, texelFetch(g_PointLightRenderingBuffer, int(_2861 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2861 + 2u)).x));
                        float _2876 = _2836.x - _2365;
                        float _2877 = _2836.y - _2366;
                        float _2878 = _2836.z - _2367;
                        float _2879 = dot(vec3(_2876, _2877, _2878), vec3(_2876, _2877, _2878));
                        float _2882 = inversesqrt(_2879);
                        float _2883 = _2882 * _2876;
                        float _2884 = _2882 * _2877;
                        float _2885 = _2882 * _2878;
                        float _2886 = dot(vec3(_597, _600, _603), vec3(_2883, _2884, _2885));
                        float _2891 = 1.0 - (_2879 * _2836.w);
                        float _4249 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
                        float _2892 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
                        float _2893 = sqrt(_2879) * _2855.w;
                        float _2896 = 1.39999997615814208984375 / (_2893 + 1.39999997615814208984375);
                        float _2897 = _2896 * _2896;
                        float _2900 = ((1.0 - _2897) * _2886) + _2897;
                        float _2903 = _2893 * _2893;
                        float _2907 = ((isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0))) * _2892) / ((_2903 * 0.699999988079071044921875) + 1.0);
                        float _2911 = (-0.0) - _2365;
                        float _2912 = (-0.0) - _2366;
                        float _2913 = (-0.0) - _2367;
                        float _2917 = inversesqrt(dot(vec3(_2911, _2912, _2913), vec3(_2911, _2912, _2913)));
                        float _2918 = _2917 * _2911;
                        float _2919 = _2917 * _2912;
                        float _2920 = _2917 * _2913;
                        float _2928 = exp2(log2(1.0 / ((_2903 * 3.5) + 5.0)) * 0.25);
                        float _2929 = 1.0 - _672;
                        float _2936 = sqrt(1.0 - ((1.0 - (_2929 * _2929)) * (1.0 - (_2928 * _2928))));
                        float _2937 = _2936 * _2936;
                        float _2938 = _2937 * _2937;
                        float _2939 = _2918 + _2883;
                        float _2940 = _2919 + _2884;
                        float _2941 = _2920 + _2885;
                        float _2945 = inversesqrt(dot(vec3(_2939, _2940, _2941), vec3(_2939, _2940, _2941)));
                        float _2949 = dot(vec3(_597, _600, _603), vec3(_2918, _2919, _2920));
                        float _4265 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
                        float _2952 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
                        float _2953 = dot(vec3(_597, _600, _603), vec3(_2945 * _2939, _2945 * _2940, _2945 * _2941));
                        float _4276 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
                        float _2956 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
                        float _2960 = ((_2956 * _2956) * (_2938 + (-1.0))) + 1.0;
                        float _2961 = _2896 * _2937;
                        float _2962 = _2961 * _2961;
                        float _2965 = ((1.0 - _2962) * _2886) + _2962;
                        float _4287 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
                        float _2966 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
                        float _2967 = 1.0 - _2937;
                        float _2977 = (0.5 / (((_2966 * ((_2952 * _2967) + _2937)) + 9.9999999392252902907785028219223e-09) + (((_2966 * _2967) + _2937) * _2952))) * _2966;
                        float _4298 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
                        float _2988 = (((_2938 * 3.1415927410125732421875) * (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0)))) / ((_2960 * _2960) * ((_2903 * 2.1991131305694580078125) + 3.141590118408203125))) * _2892;
                        _2740 = (_2907 * _2855.x) + _2813;
                        _2741 = (_2907 * _2855.y) + _2814;
                        _2742 = (_2907 * _2855.z) + _2815;
                        _2737 = (_2988 * _2872.x) + _2810;
                        _2738 = (_2988 * _2872.y) + _2811;
                        _2739 = (_2988 * _2872.z) + _2812;
                        if (_2817 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2810 = _2737;
                            _2811 = _2738;
                            _2812 = _2739;
                            _2813 = _2740;
                            _2814 = _2741;
                            _2815 = _2742;
                            _2816 = _2817;
                        }
                    }
                    frontier_phi_66_pred = _2737;
                    frontier_phi_66_pred_1 = _2742;
                    frontier_phi_66_pred_2 = _2741;
                    frontier_phi_66_pred_3 = _2740;
                    frontier_phi_66_pred_4 = _2739;
                    frontier_phi_66_pred_5 = _2738;
                }
                _2513 = frontier_phi_66_pred;
                _2523 = frontier_phi_66_pred_1;
                _2521 = frontier_phi_66_pred_2;
                _2519 = frontier_phi_66_pred_3;
                _2517 = frontier_phi_66_pred_4;
                _2515 = frontier_phi_66_pred_5;
                uint _2672 = _2671 + 1u;
                if (_2672 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2665 = _2513;
                    _2666 = _2515;
                    _2667 = _2517;
                    _2668 = _2519;
                    _2669 = _2521;
                    _2670 = _2523;
                    _2671 = _2672;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2512 = _2513;
            _2514 = _2515;
            _2516 = _2517;
            _2518 = _2519;
            _2520 = _2521;
            _2522 = _2523;
        }
        uvec4 _2526 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2527 = _2526.z;
        uint _2529 = (_2527 >> 8u) & 15u;
        float _2633;
        float _2635;
        float _2637;
        float _2639;
        float _2641;
        float _2643;
        if (((4294967295u << _2529) & _2411) == 0u)
        {
            _2633 = _2512;
            _2635 = _2514;
            _2637 = _2516;
            _2639 = _2518;
            _2641 = _2520;
            _2643 = _2522;
        }
        else
        {
            float _2658 = inversesqrt(dot(vec3(_2365, _2366, _2367), vec3(_2365, _2366, _2367)));
            float _2659 = _2658 * _2365;
            float _2660 = _2658 * _2366;
            float _2661 = _2658 * _2367;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2529 < ((_2527 >> 12u) & 15u))
            {
                float _2634;
                float _2636;
                float _2638;
                float _2640;
                float _2642;
                float _2644;
                float _2793 = _2512;
                float _2794 = _2514;
                float _2795 = _2516;
                float _2796 = _2518;
                float _2797 = _2520;
                float _2798 = _2522;
                uint _2799 = _2529;
                uint _2808;
                bool _2809;
                for (;;)
                {
                    _2808 = texelFetch(g_lightClassification, int((((_2405 << 5u) + (_2391 << 9u)) + (_2799 << 2u)) >> 2u)).x;
                    _2809 = _2808 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2809)
                    {
                        frontier_phi_77_pred = _2798;
                        frontier_phi_77_pred_1 = _2797;
                        frontier_phi_77_pred_2 = _2796;
                        frontier_phi_77_pred_3 = _2795;
                        frontier_phi_77_pred_4 = _2794;
                        frontier_phi_77_pred_5 = _2793;
                    }
                    else
                    {
                        float _3002;
                        float _3003;
                        float _3004;
                        float _3005;
                        float _3006;
                        float _3007;
                        float _3296;
                        float _3297;
                        float _3298;
                        float _3299;
                        float _3300;
                        float _3301;
                        float _3015 = _2793;
                        float _3016 = _2794;
                        float _3017 = _2795;
                        float _3018 = _2796;
                        float _3019 = _2797;
                        float _3020 = _2798;
                        uint _3021 = _2808;
                        uint _3022;
                        vec4 _3047;
                        float _3048;
                        vec4 _3063;
                        vec3 _3075;
                        vec4 _3091;
                        vec4 _3106;
                        float _3152;
                        bool _3153;
                        for (;;)
                        {
                            uint _3032 = ((_2799 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3021));
                            _3022 = (_3021 + 4294967295u) & _3021;
                            uint _3034 = _3032 * 40u;
                            _3047 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3034)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 3u)).x));
                            _3048 = _3047.w;
                            uint _3050 = (_3032 * 40u) + 4u;
                            _3063 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3050)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 3u)).x));
                            uint _3065 = (_3032 * 40u) + 8u;
                            _3075 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3065)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 2u)).x));
                            uint _3078 = (_3032 * 40u) + 16u;
                            _3091 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3078)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 3u)).x));
                            uint _3093 = (_3032 * 40u) + 20u;
                            _3106 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3093)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 3u)).x));
                            uint _3108 = (_3032 * 40u) + 24u;
                            vec4 _3121 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3108)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 3u)).x));
                            uint _3127 = (_3032 * 40u) + 28u;
                            vec4 _3140 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3127)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 3u)).x));
                            _3152 = fma(_2367, _3140.z, fma(_2366, _3140.y, _3140.x * _2365)) + _3140.w;
                            _3153 = !((fma(_2367, _3121.z, fma(_2366, _3121.y, _3121.x * _2365)) + _3121.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3153)
                            {
                                float _3180 = _3047.x - _2365;
                                float _3181 = _3047.y - _2366;
                                float _3182 = _3047.z - _2367;
                                float _3183 = dot(vec3(_3180, _3181, _3182), vec3(_3180, _3181, _3182));
                                float _3186 = inversesqrt(_3183);
                                float _3187 = _3186 * _3180;
                                float _3188 = _3186 * _3181;
                                float _3189 = _3186 * _3182;
                                float _3193 = 1.0 - (_3183 / (_3048 * _3048));
                                float _4309 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                                float _3194 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
                                float _3198 = sqrt(_3183) * _3063.w;
                                float _3200 = 1.39999997615814208984375 / (_3198 + 1.39999997615814208984375);
                                float _3201 = _3200 * _3200;
                                float _3204 = ((1.0 - _3201) * dot(vec3(_3187, _3188, _3189), vec3(_597, _600, _603))) + _3201;
                                float _3207 = _3198 * _3198;
                                float _3211 = (fma(_2367, _3091.z, fma(_2366, _3091.y, _3091.x * _2365)) + _3091.w) / _3152;
                                float _3212 = (fma(_2367, _3106.z, fma(_2366, _3106.y, _3106.x * _2365)) + _3106.w) / _3152;
                                float _3216 = 1.0 - dot(vec2(_3211, _3212), vec2(_3211, _3212));
                                float _4325 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                                float _3217 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
                                float _3218 = _3217 * (((isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0))) * _3194) / ((_3207 * 0.699999988079071044921875) + 1.0));
                                float _3230 = exp2(log2(1.0 / ((_3207 * 3.5) + 5.0)) * 0.25);
                                float _3231 = 1.0 - _672;
                                float _3238 = sqrt(1.0 - ((1.0 - (_3231 * _3231)) * (1.0 - (_3230 * _3230))));
                                float _3239 = _3238 * _3238;
                                float _3240 = _3239 * _3239;
                                float _3241 = _3187 - _2659;
                                float _3242 = _3188 - _2660;
                                float _3243 = _3189 - _2661;
                                float _3247 = inversesqrt(dot(vec3(_3241, _3242, _3243), vec3(_3241, _3242, _3243)));
                                float _3251 = dot(vec3(_597, _600, _603), vec3((-0.0) - _2659, (-0.0) - _2660, (-0.0) - _2661));
                                float _4336 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0));
                                float _3254 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
                                float _3255 = dot(vec3(_597, _600, _603), vec3(_3247 * _3241, _3247 * _3242, _3247 * _3243));
                                float _4347 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                                float _3258 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
                                float _3262 = ((_3258 * _3258) * (_3240 + (-1.0))) + 1.0;
                                float _3263 = _3200 * _3239;
                                float _3264 = _3263 * _3263;
                                float _3270 = ((1.0 - _3264) * dot(vec3(_597, _600, _603), vec3(_3187, _3188, _3189))) + _3264;
                                float _4358 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                                float _3271 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
                                float _3272 = 1.0 - _3239;
                                float _3282 = (0.5 / (((_3271 * ((_3254 * _3272) + _3239)) + 9.9999999392252902907785028219223e-09) + (((_3271 * _3272) + _3239) * _3254))) * _3271;
                                float _4369 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                                float _3292 = (_3217 * _3194) * (((_3240 * 3.1415927410125732421875) * (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0)))) / ((_3262 * _3262) * ((_3207 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3218 * _3063.y;
                                frontier_phi_83_pred_1 = _3218 * _3063.x;
                                frontier_phi_83_pred_2 = _3292 * _3075.z;
                                frontier_phi_83_pred_3 = _3292 * _3075.y;
                                frontier_phi_83_pred_4 = _3292 * _3075.x;
                                frontier_phi_83_pred_5 = _3218 * _3063.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3300 = frontier_phi_83_pred;
                            _3299 = frontier_phi_83_pred_1;
                            _3298 = frontier_phi_83_pred_2;
                            _3297 = frontier_phi_83_pred_3;
                            _3296 = frontier_phi_83_pred_4;
                            _3301 = frontier_phi_83_pred_5;
                            _3005 = _3299 + _3018;
                            _3006 = _3300 + _3019;
                            _3007 = _3301 + _3020;
                            _3002 = _3296 + _3015;
                            _3003 = _3297 + _3016;
                            _3004 = _3298 + _3017;
                            if (_3022 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3015 = _3002;
                                _3016 = _3003;
                                _3017 = _3004;
                                _3018 = _3005;
                                _3019 = _3006;
                                _3020 = _3007;
                                _3021 = _3022;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3007;
                        frontier_phi_77_pred_1 = _3006;
                        frontier_phi_77_pred_2 = _3005;
                        frontier_phi_77_pred_3 = _3004;
                        frontier_phi_77_pred_4 = _3003;
                        frontier_phi_77_pred_5 = _3002;
                    }
                    _2644 = frontier_phi_77_pred;
                    _2642 = frontier_phi_77_pred_1;
                    _2640 = frontier_phi_77_pred_2;
                    _2638 = frontier_phi_77_pred_3;
                    _2636 = frontier_phi_77_pred_4;
                    _2634 = frontier_phi_77_pred_5;
                    uint _2800 = _2799 + 1u;
                    if (_2800 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2793 = _2634;
                        _2794 = _2636;
                        _2795 = _2638;
                        _2796 = _2640;
                        _2797 = _2642;
                        _2798 = _2644;
                        _2799 = _2800;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2638;
                frontier_phi_58_59_ladder_1 = _2644;
                frontier_phi_58_59_ladder_2 = _2642;
                frontier_phi_58_59_ladder_3 = _2640;
                frontier_phi_58_59_ladder_4 = _2636;
                frontier_phi_58_59_ladder_5 = _2634;
            }
            else
            {
                frontier_phi_58_59_ladder = _2516;
                frontier_phi_58_59_ladder_1 = _2522;
                frontier_phi_58_59_ladder_2 = _2520;
                frontier_phi_58_59_ladder_3 = _2518;
                frontier_phi_58_59_ladder_4 = _2514;
                frontier_phi_58_59_ladder_5 = _2512;
            }
            _2633 = frontier_phi_58_59_ladder_5;
            _2635 = frontier_phi_58_59_ladder_4;
            _2637 = frontier_phi_58_59_ladder;
            _2639 = frontier_phi_58_59_ladder_3;
            _2641 = frontier_phi_58_59_ladder_2;
            _2643 = frontier_phi_58_59_ladder_1;
        }
        float _2648 = isnan(1.0) ? _656 : (isnan(_656) ? 1.0 : min(_656, 1.0));
        _2424 = (_2648 * _2639) + _1860;
        _2426 = (_2648 * _2641) + _1862;
        _2428 = (_2648 * _2643) + _1864;
        _2430 = ((_2633 * _640) * _2648) + _2205;
        _2432 = ((_2635 * _642) * _2648) + _2207;
        _2434 = ((_2637 * _643) * _2648) + _2209;
    }
    else
    {
        _2424 = _1860;
        _2426 = _1862;
        _2428 = _1864;
        _2430 = _2205;
        _2432 = _2207;
        _2434 = _2209;
    }
    float _4385 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _4396 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _4407 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _2451 = ((isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_2424 + ((isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0))) * _656))) + ((_2430 + ((isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))) * _1496)) * cbPerFrame._m0[3u].x);
    float _2452 = ((isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_2426 + ((isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0))) * _656))) + ((_2432 + ((isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))) * _1496)) * cbPerFrame._m0[3u].x);
    float _2453 = ((isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * (_2428 + ((isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0))) * _656))) + ((_2434 + ((isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))) * _1496)) * cbPerFrame._m0[3u].x);
    uint _2454 = _230 + 6u;
    float _2462 = _576 / cbSceneParam._m0[86u].x;
    float _2463 = _577 / cbSceneParam._m0[86u].y;
    vec4 _2477 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2462, _2463, (log2((isnan(cbSceneParam._m0[77u].w) ? _497 : (isnan(_497) ? cbSceneParam._m0[77u].w : min(_497, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2479 = _2477.x;
    float _2480 = _2477.y;
    float _2481 = _2477.z;
    float _2482 = _2477.w;
    float _2575;
    float _2577;
    float _2579;
    float _2581;
    if (_497 > cbSceneParam._m0[78u].w)
    {
        float _2537 = isnan(_497) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _497 : min(cbSceneParam._m0[80u].w, _497));
        float _2538 = _2537 / _497;
        float _2549 = _2538 * _548;
        float _2550 = _549 * _2538;
        float _2551 = (-0.0) - _2550;
        float _2553 = _2538 * _550;
        float _2555 = (cbSceneParam._m0[77u].w * _2551) / _2537;
        float _2556 = _2555 + cbSceneParam._m0[79u].w;
        float _2557 = cbSceneParam._m0[79u].w - _2550;
        float _2563 = sqrt(((_2549 * _2549) + (_2550 * _2550)) + (_2553 * _2553));
        float _2566 = (1.0 - (cbSceneParam._m0[77u].w / _2537)) * _2563;
        float _2571 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2573 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2750;
        if (abs((_2551 - _2555) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2750 = ((((_2556 > 0.0) ? exp2(_2571 * _2556) : (2.0 - exp2(_2573 * _2556))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2566;
        }
        else
        {
            float _2694 = 1.0 / cbSceneParam._m0[80u].x;
            float _2695 = isnan(_2557) ? _2556 : (isnan(_2556) ? _2557 : max(_2556, _2557));
            float _2696 = isnan(_2557) ? _2556 : (isnan(_2556) ? _2557 : min(_2556, _2557));
            float _2705 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : min(_2695, 0.0));
            float _2706 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : min(_2696, 0.0));
            _2750 = ((abs(_2563 / _2551) * cbSceneParam._m0[80u].y) * ((((_2705 - _2706) * 2.0) - ((exp2(_2571 * (isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0)))) - exp2(_2571 * (isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0))))) * _2694)) - ((exp2(_2573 * _2705) - exp2(_2573 * _2706)) * _2694))) + (_2566 * cbSceneParam._m0[80u].z);
        }
        vec4 _2752 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2462, _2463, 1.0), 0.0);
        float _2761 = exp2((_2750 * (-1.44269502162933349609375)) * (1.0 - _2752.w));
        float _2762 = log2(_2761);
        float _2778 = log2(_2482);
        _2575 = (exp2(_2778 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2762 * cbSceneParam._m0[78u].x)) * _2752.x) / cbSceneParam._m0[78u].x)) + _2479;
        _2577 = (exp2(_2778 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2762 * cbSceneParam._m0[78u].y)) * _2752.y) / cbSceneParam._m0[78u].y)) + _2480;
        _2579 = (exp2(_2778 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2762 * cbSceneParam._m0[78u].z)) * _2752.z) / cbSceneParam._m0[78u].z)) + _2481;
        _2581 = _2761 * _2482;
    }
    else
    {
        _2575 = _2479;
        _2577 = _2480;
        _2579 = _2481;
        _2581 = _2482;
    }
    bool _2788;
    vec4 _2591;
    vec4 _2613;
    float _2615;
    float _2619;
    float _2620;
    float _2621;
    float _2622;
    bool _2632;
    for (;;)
    {
        _2591 = cbMatDynParam._m0[0u];
        float _2593 = roundEven(_2591.y);
        bool _2594 = _2593 == 3.0;
        float _2595 = log2(_2581);
        float _2602 = exp2(_2595 * cbSceneParam._m0[78u].x) * _2451;
        float _2603 = exp2(_2595 * cbSceneParam._m0[78u].y) * _2452;
        float _2604 = exp2(_2595 * cbSceneParam._m0[78u].z) * _2453;
        float _2611 = _564 + (-0.5);
        _2613 = cbMtdParam._m0[1u];
        _2615 = _2613.y * _2611;
        float _2618 = (_2593 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2619 = _2618 * (_2594 ? _2602 : (_2602 + (cbSceneParam._m0[72u].w * _2575)));
        _2620 = _2618 * (_2594 ? _2603 : (_2603 + (cbSceneParam._m0[72u].w * _2577)));
        _2621 = _2618 * (_2594 ? _2604 : (_2604 + (cbSceneParam._m0[72u].w * _2579)));
        _2622 = _2611 * 0.999000012874603271484375;
        _2632 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2632)
        {
            if ((cbInstanceData._m0[_230 + 7u].x + _2622) < 0.5)
            {
                _2788 = true;
                break;
            }
        }
        uint _2729 = _616 + uint(_2591.w);
        if ((cbInstanceData._m0[_2729].w < 1.0) && ((cbInstanceData._m0[_2729].w + _2622) < 0.5))
        {
            _2788 = true;
            break;
        }
        if ((_2615 + 1.0) < _2613.x)
        {
            _2788 = true;
            break;
        }
        _2788 = false;
        break;
    }
    float _2993;
    if (_2788)
    {
        discard_state = true;
        _2993 = 0.0;
    }
    else
    {
        _2993 = cbInstanceData._m0[_2454].w;
    }
    SV_Target.x = _2619;
    SV_Target.y = _2620;
    SV_Target.z = _2621;
    SV_Target.w = _2993;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2454].w;
    discard_exit();
}


