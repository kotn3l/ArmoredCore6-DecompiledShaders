#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1300;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _232 = _231 * _223;
    float _233 = _231 * _224;
    float _234 = _231 * _225;
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = _238 * NORMAL.x;
    float _240 = _238 * NORMAL.y;
    float _241 = _238 * NORMAL.z;
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = _245 * TANGENT.x;
    float _247 = _245 * TANGENT.y;
    float _248 = _245 * TANGENT.z;
    uint _251 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _251 + 1u;
    uint _260 = _251 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_251].x * cbInstanceData._m0[_251].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _356 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _358 = _356.x;
    float _370 = dot(vec4(_358, _356.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _387 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_358 - _370) * cbMtdParam._m0[24u].y) + _370) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3910 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _388 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _395 = (_388 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _396 = (_388 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _397 = (_388 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _415 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _432 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _434 = _432.x;
    float _435 = _432.y;
    float _436 = _432.z;
    float _445 = ((_415.z - _436) * _388) + _436;
    float _448 = ((((_415.x - _434) * _388) + _434) * 2.0) + (-1.0);
    float _450 = ((((_415.y - _435) * _388) + _435) * 2.0) + (-1.0);
    float _451 = dot(vec2(_448, _450), vec2(_448, _450));
    float _3921 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _456 = sqrt(1.0 - (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))));
    float _459 = fma(_456, _239, fma(_450, _246, _448 * _232));
    float _462 = fma(_456, _240, fma(_450, _247, _448 * _233));
    float _465 = fma(_456, _241, fma(_450, _248, _448 * _234));
    float _469 = inversesqrt(dot(vec3(_459, _462, _465), vec3(_459, _462, _465)));
    vec4 _485 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _511 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _513 = _511.x;
    float _514 = 1.0 - _513;
    float _520 = (cbMtdParam._m0[19u].x + dot(vec4(_469 * _459, _469 * _462, _469 * _465, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_513 - _514) * cbMtdParam._m0[24u].z) + _514) * cbMtdParam._m0[21u].z);
    float _3932 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _521 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _523 = (-0.0) - cbMtdParam._m0[24u].x;
    float _525 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _526 = isnan(1.0) ? _525 : (isnan(_525) ? 1.0 : min(_525, 1.0));
    float _533 = _521 - ((_521 * TEXCOORD_8.x) * _526);
    float _534 = _521 - ((_521 * TEXCOORD_8.y) * _526);
    float _535 = _521 - ((_521 * TEXCOORD_8.z) * _526);
    float _542 = (_533 * (cbMtdParam._m0[17u].x - _395)) + _395;
    float _543 = (_534 * (cbMtdParam._m0[17u].y - _396)) + _396;
    float _544 = (_535 * (cbMtdParam._m0[17u].z - _397)) + _397;
    vec4 _556 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _270) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _271) + cbTextureTilingScale._m0[19u].w));
    float _558 = _556.x;
    float _559 = 1.0 - _558;
    float _587 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_558 - _559) * cbMtdParam._m0[24u].w) + _559) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3953 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _588 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _596 = ((((cbMtdParam._m0[10u].x - _542) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _588) + _542;
    float _597 = ((((cbMtdParam._m0[10u].y - _543) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _588) + _543;
    float _598 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _544)) * _588) + _544;
    vec4 _624 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _626 = _624.x;
    float _644 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _270) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _271) + cbTextureTilingScale._m0[9u].w)).x - _626) * _388) + _626;
    float _648 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _644) * cbMtdParam._m0[19u].z) + _644;
    float _650 = _648 - (_648 * _533);
    float _652 = _650 - (_650 * _588);
    vec4 _666 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _673 = (_666.x * 2.0) + (-1.0);
    float _674 = (_666.y * 2.0) + (-1.0);
    float _675 = dot(vec2(_673, _674), vec2(_673, _674));
    float _3964 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _683 = ((_666.z - _445) * _533) + _445;
    float _686 = ((cbMtdParam._m0[23u].y - _683) * _588) + _683;
    vec4 _705 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _270) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _271) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _711 = (_705.x * 2.0) + (-1.0);
    float _712 = (_705.y * 2.0) + (-1.0);
    float _713 = dot(vec2(_711, _712), vec2(_711, _712));
    float _3975 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _728 = ((sqrt(1.0 - (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0)))) - _456) * _535) + _456;
    float _731 = (((_673 - _448) * _533) + _448) + (cbMtdParam._m0[21u].x * _448);
    float _732 = (((_674 - _450) * _534) + _450) + (cbMtdParam._m0[21u].x * _450);
    float _743 = (((_711 - _731) + (_731 * cbMtdParam._m0[22u].z)) * _588) + _731;
    float _744 = (((_712 - _732) + (_732 * cbMtdParam._m0[22u].z)) * _588) + _732;
    float _745 = (_588 * (sqrt(1.0 - (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0)))) - _728)) + _728;
    float _747 = cbMtdParam._m0[22u].x + _485.w;
    float _750 = fma(_745, _239, fma(_744, _246, _743 * _232));
    float _753 = fma(_745, _240, fma(_744, _247, _743 * _233));
    float _756 = fma(_745, _241, fma(_744, _248, _743 * _234));
    float _760 = inversesqrt(dot(vec3(_750, _753, _756), vec3(_750, _753, _756)));
    float _761 = _760 * _750;
    float _762 = _760 * _753;
    float _763 = _760 * _756;
    float _3986 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _764 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _3997 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _4008 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _4019 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _4030 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _4041 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _769 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _783 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _823 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _833 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _823);
    float _834 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _823);
    float _835 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _823);
    float _839 = inversesqrt(dot(vec3(_833, _834, _835), vec3(_833, _834, _835)));
    float _840 = _833 * _839;
    float _841 = _834 * _839;
    float _842 = _835 * _839;
    float _848 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _849 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _867 = fma(_763, cbSceneParam._m0[5u].z, fma(_762, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _761));
    float _870 = fma(_763, cbSceneParam._m0[6u].z, fma(_762, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _761));
    float _873 = fma(_763, cbSceneParam._m0[7u].z, fma(_762, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _761));
    uint _887 = (_251 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _893 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) * cbInstanceData._m0[_887].x;
    float _894 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) * cbInstanceData._m0[_887].y;
    float _895 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0)))) * cbInstanceData._m0[_887].z;
    float _4052 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _896 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _4063 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _897 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _4074 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _898 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _899 = 1.0 - _769;
    float _900 = _896 * _899;
    float _901 = _897 * _899;
    float _902 = _898 * _899;
    float _907 = (_896 + (-0.039999999105930328369140625)) * _769;
    float _908 = (_897 + (-0.039999999105930328369140625)) * _769;
    float _909 = (_898 + (-0.039999999105930328369140625)) * _769;
    float _910 = _907 + 0.039999999105930328369140625;
    float _912 = _908 + 0.039999999105930328369140625;
    float _913 = _909 + 0.039999999105930328369140625;
    vec4 _922 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _848, cbSceneParam._m0[86u].y * _849));
    float _926 = ((isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * TEXCOORD_5.w) * _922.x;
    float _927 = dot(vec3(_761, _762, _763), vec3(_840, _841, _842));
    float _930 = _927 * 2.0;
    float _934 = (_930 * _761) - _840;
    float _935 = (_930 * _762) - _841;
    float _936 = (_930 * _763) - _842;
    float _940 = abs(dot(vec3(_840, _841, _842), vec3(_761, _762, _763)));
    float _4085 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _942 = sqrt(_764);
    float _955 = exp2((_942 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_942 * 3.0));
    float _961 = (1.0 - _955) * ((_942 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _962 = _955 * _942;
    float _990 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _994 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _998 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1299;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1024 = fma(_998, cbModelParam._m0[26u].z, fma(_994, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _990));
        float _1028 = fma(_998, cbModelParam._m0[27u].z, fma(_994, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _990));
        float _1032 = fma(_998, cbModelParam._m0[28u].z, fma(_994, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _990));
        float _1057 = _990 + _761;
        float _1058 = _994 + _762;
        float _1059 = _998 + _763;
        float _1069 = fma(_1059, cbModelParam._m0[26u].z, fma(_1058, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1057)) - _1024;
        float _1070 = fma(_1059, cbModelParam._m0[27u].z, fma(_1058, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1057)) - _1028;
        float _1071 = fma(_1059, cbModelParam._m0[28u].z, fma(_1058, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1057)) - _1032;
        float _1075 = inversesqrt(dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071)));
        float _1088 = ((_1075 * _1069) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1024 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1089 = ((_1075 * _1070) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1028 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1090 = ((_1075 * _1071) / cbModelParam._m0[34u].z) + ((((((_1032 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        vec4 _1114 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        float _1127 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1093.x + (-0.5));
        float _1129 = _1127 * (_1093.y + (-0.5));
        float _1130 = _1127 * (_1093.z + (-0.5));
        float _1137 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1100.x + (-0.5));
        float _1139 = _1137 * (_1100.y + (-0.5));
        float _1140 = _1137 * (_1100.z + (-0.5));
        float _1147 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1107.x + (-0.5));
        float _1149 = _1147 * (_1107.y + (-0.5));
        float _1150 = _1147 * (_1107.z + (-0.5));
        float _1157 = exp2((_1114.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1114.x + (-0.5));
        float _1159 = _1157 * (_1114.y + (-0.5));
        float _1160 = _1157 * (_1114.z + (-0.5));
        float _1161 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1162 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1163 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1164 = _1128 * 0.5;
        float _1165 = _1138 * 0.5;
        float _1166 = _1148 * 0.5;
        float _1167 = dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166));
        float _1172 = (_1167 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1167);
        float _1181 = (dot(vec3(_761, _762, _763), vec3(_1172 * _1164, _1172 * _1165, _1172 * _1166)) + 1.0) * 0.5;
        float _4111 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1191 = sqrt(((_1165 * _1165) + (_1164 * _1164)) + (_1166 * _1166)) / (_1161 + 9.9999997473787516355514526367188e-06);
        float _4122 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1193 = _1192 * 2.0;
        float _1197 = (1.0 - _1192) / (_1192 + 1.0);
        float _4133 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1207 = ((((1.0 - _1198) * (_1193 + 2.0)) * exp2(log2(isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_1193 + 1.0))) + _1198) * _1161;
        float _1208 = _1129 * 0.5;
        float _1209 = _1139 * 0.5;
        float _1210 = _1149 * 0.5;
        float _1211 = dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210));
        float _1216 = (_1211 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1211);
        float _1224 = (dot(vec3(_761, _762, _763), vec3(_1216 * _1208, _1216 * _1209, _1216 * _1210)) + 1.0) * 0.5;
        float _4144 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1233 = sqrt(((_1209 * _1209) + (_1208 * _1208)) + (_1210 * _1210)) / (_1162 + 9.9999997473787516355514526367188e-06);
        float _4155 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1235 = _1234 * 2.0;
        float _1239 = (1.0 - _1234) / (_1234 + 1.0);
        float _4166 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1249 = ((((1.0 - _1240) * (_1235 + 2.0)) * exp2(log2(isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_1235 + 1.0))) + _1240) * _1162;
        float _1250 = _1130 * 0.5;
        float _1251 = _1140 * 0.5;
        float _1252 = _1150 * 0.5;
        float _1253 = dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252));
        float _1258 = (_1253 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1253);
        float _1266 = (dot(vec3(_761, _762, _763), vec3(_1258 * _1250, _1258 * _1251, _1258 * _1252)) + 1.0) * 0.5;
        float _4177 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1275 = sqrt(((_1251 * _1251) + (_1250 * _1250)) + (_1252 * _1252)) / (_1163 + 9.9999997473787516355514526367188e-06);
        float _4188 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1277 = _1276 * 2.0;
        float _1281 = (1.0 - _1276) / (_1276 + 1.0);
        float _4199 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1291 = ((((1.0 - _1282) * (_1277 + 2.0)) * exp2(log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1277 + 1.0))) + _1282) * _1163;
        _1299 = _1130;
        _1301 = _1129;
        _1302 = _1128;
        _1303 = _1140;
        _1304 = _1139;
        _1305 = _1138;
        _1306 = _1150;
        _1307 = _1149;
        _1308 = _1148;
        _1309 = _1163;
        _1310 = _1162;
        _1311 = _1161;
        _1312 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0)));
        _1313 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)));
        _1314 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)));
    }
    else
    {
        _1299 = _1300;
        _1301 = _1300;
        _1302 = _1300;
        _1303 = _1300;
        _1304 = _1300;
        _1305 = _1300;
        _1306 = _1300;
        _1307 = _1300;
        _1308 = _1300;
        _1309 = _1300;
        _1310 = _1300;
        _1311 = _1300;
        _1312 = 0.0;
        _1313 = 0.0;
        _1314 = 0.0;
    }
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1339 = fma(_998, cbModelParam._m0[30u].z, fma(_994, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _990));
        float _1343 = fma(_998, cbModelParam._m0[31u].z, fma(_994, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _990));
        float _1347 = fma(_998, cbModelParam._m0[32u].z, fma(_994, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _990));
        float _1370 = _990 + _761;
        float _1371 = _994 + _762;
        float _1372 = _998 + _763;
        float _1382 = fma(_1372, cbModelParam._m0[30u].z, fma(_1371, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1370)) - _1339;
        float _1383 = fma(_1372, cbModelParam._m0[31u].z, fma(_1371, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1370)) - _1343;
        float _1384 = fma(_1372, cbModelParam._m0[32u].z, fma(_1371, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1370)) - _1347;
        float _1388 = inversesqrt(dot(vec3(_1382, _1383, _1384), vec3(_1382, _1383, _1384)));
        float _1401 = ((_1388 * _1382) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1339 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1402 = ((_1388 * _1383) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1343 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1403 = ((_1388 * _1384) / cbModelParam._m0[35u].z) + ((((((_1347 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1405 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1401, _1402, _1403), 0.0);
        vec4 _1412 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1401, _1402, _1403), 0.0);
        vec4 _1419 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1401, _1402, _1403), 0.0);
        vec4 _1426 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1401, _1402, _1403), 0.0);
        float _1438 = exp2((_1405.w + (-0.5)) * 20.0) * 2.0;
        float _1439 = _1438 * (_1405.x + (-0.5));
        float _1440 = _1438 * (_1405.y + (-0.5));
        float _1441 = _1438 * (_1405.z + (-0.5));
        float _1448 = exp2((_1412.w + (-0.5)) * 20.0) * 2.0;
        float _1449 = _1448 * (_1412.x + (-0.5));
        float _1450 = _1448 * (_1412.y + (-0.5));
        float _1451 = _1448 * (_1412.z + (-0.5));
        float _1458 = exp2((_1419.w + (-0.5)) * 20.0) * 2.0;
        float _1459 = _1458 * (_1419.x + (-0.5));
        float _1460 = _1458 * (_1419.y + (-0.5));
        float _1461 = _1458 * (_1419.z + (-0.5));
        float _1468 = exp2((_1426.w + (-0.5)) * 20.0) * 2.0;
        float _1469 = _1468 * (_1426.x + (-0.5));
        float _1470 = _1468 * (_1426.y + (-0.5));
        float _1471 = _1468 * (_1426.z + (-0.5));
        float _1472 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1473 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1474 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1475 = _1439 * 0.5;
        float _1476 = _1449 * 0.5;
        float _1477 = _1459 * 0.5;
        float _1478 = dot(vec3(_1475, _1476, _1477), vec3(_1475, _1476, _1477));
        float _1483 = (_1478 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1478);
        float _1491 = (dot(vec3(_761, _762, _763), vec3(_1483 * _1475, _1483 * _1476, _1483 * _1477)) + 1.0) * 0.5;
        float _4240 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1500 = sqrt(((_1476 * _1476) + (_1475 * _1475)) + (_1477 * _1477)) / (_1472 + 9.9999997473787516355514526367188e-06);
        float _4251 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1502 = _1501 * 2.0;
        float _1506 = (1.0 - _1501) / (_1501 + 1.0);
        float _4262 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _1516 = ((((1.0 - _1507) * (_1502 + 2.0)) * exp2(log2(isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * (_1502 + 1.0))) + _1507) * _1472;
        float _1517 = _1440 * 0.5;
        float _1518 = _1450 * 0.5;
        float _1519 = _1460 * 0.5;
        float _1520 = dot(vec3(_1517, _1518, _1519), vec3(_1517, _1518, _1519));
        float _1525 = (_1520 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1520);
        float _1533 = (dot(vec3(_761, _762, _763), vec3(_1525 * _1517, _1525 * _1518, _1525 * _1519)) + 1.0) * 0.5;
        float _4273 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1542 = sqrt(((_1518 * _1518) + (_1517 * _1517)) + (_1519 * _1519)) / (_1473 + 9.9999997473787516355514526367188e-06);
        float _4284 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1544 = _1543 * 2.0;
        float _1548 = (1.0 - _1543) / (_1543 + 1.0);
        float _4295 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1558 = ((((1.0 - _1549) * (_1544 + 2.0)) * exp2(log2(isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_1544 + 1.0))) + _1549) * _1473;
        float _1559 = _1441 * 0.5;
        float _1560 = _1451 * 0.5;
        float _1561 = _1461 * 0.5;
        float _1562 = dot(vec3(_1559, _1560, _1561), vec3(_1559, _1560, _1561));
        float _1567 = (_1562 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1562);
        float _1575 = (dot(vec3(_761, _762, _763), vec3(_1567 * _1559, _1567 * _1560, _1567 * _1561)) + 1.0) * 0.5;
        float _4306 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1584 = sqrt(((_1560 * _1560) + (_1559 * _1559)) + (_1561 * _1561)) / (_1474 + 9.9999997473787516355514526367188e-06);
        float _4317 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1586 = _1585 * 2.0;
        float _1590 = (1.0 - _1585) / (_1585 + 1.0);
        float _4328 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1600 = ((((1.0 - _1591) * (_1586 + 2.0)) * exp2(log2(isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_1586 + 1.0))) + _1591) * _1474;
        _1608 = _1441;
        _1609 = _1440;
        _1610 = _1439;
        _1611 = _1451;
        _1612 = _1450;
        _1613 = _1449;
        _1614 = _1461;
        _1615 = _1460;
        _1616 = _1459;
        _1617 = _1474;
        _1618 = _1473;
        _1619 = _1472;
        _1620 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)));
        _1621 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)));
        _1622 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)));
    }
    else
    {
        _1608 = _1300;
        _1609 = _1300;
        _1610 = _1300;
        _1611 = _1300;
        _1612 = _1300;
        _1613 = _1300;
        _1614 = _1300;
        _1615 = _1300;
        _1616 = _1300;
        _1617 = _1300;
        _1618 = _1300;
        _1619 = _1300;
        _1620 = 0.0;
        _1621 = 0.0;
        _1622 = 0.0;
    }
    float _1632 = (cbModelParam._m0[1u].x * (_1620 - _1312)) + _1312;
    float _1633 = (cbModelParam._m0[1u].x * (_1621 - _1313)) + _1313;
    float _1634 = (cbModelParam._m0[1u].x * (_1622 - _1314)) + _1314;
    float _1655 = fma(_1634, cbSceneParam._m0[89u].z, fma(_1633, cbSceneParam._m0[89u].y, _1632 * cbSceneParam._m0[89u].x));
    float _1658 = fma(_1634, cbSceneParam._m0[90u].z, fma(_1633, cbSceneParam._m0[90u].y, _1632 * cbSceneParam._m0[90u].x));
    float _1661 = fma(_1634, cbSceneParam._m0[91u].z, fma(_1633, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1632));
    float _1676 = _934 * 0.5;
    float _1677 = _935 * 0.5;
    float _1678 = _936 * 0.5;
    float _1679 = dot(vec4(_1676, _1677, _1678, 1.0), vec4(_1610, _1613, _1616, _1619));
    float _1682 = dot(vec4(_1676, _1677, _1678, 1.0), vec4(_1609, _1612, _1615, _1618));
    float _1685 = dot(vec4(_1676, _1677, _1678, 1.0), vec4(_1608, _1611, _1614, _1617));
    float _1719;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1692 = dot(vec4(_1676, _1677, _1678, 1.0), vec4(_1299, _1303, _1306, _1309));
        float _1696 = dot(vec4(_1676, _1677, _1678, 1.0), vec4(_1301, _1304, _1307, _1310));
        float _1700 = dot(vec4(_1676, _1677, _1678, 1.0), vec4(_1302, _1305, _1308, _1311));
        float _1707 = dot(vec4(cbModelParam._m0[39u]), vec4(_1676, _1677, _1678, 1.0));
        _1719 = dot(vec3(isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0)), isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0)), isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1707) ? 0.0 : (isnan(0.0) ? _1707 : max(0.0, _1707))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1719 = 1.0;
    }
    float _1730;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1721 = dot(vec4(cbModelParam._m0[40u]), vec4(_1676, _1677, _1678, 1.0));
        _1730 = dot(vec3(isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)), isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)), isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1721) ? 0.0 : (isnan(0.0) ? _1721 : max(0.0, _1721))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1730 = 1.0;
    }
    float _1734 = (_1730 * cbModelParam._m0[1u].x) + (_1719 * (1.0 - cbModelParam._m0[1u].x));
    float _1744 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _764);
    float _1745 = isnan(_1744) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1744 : min(cbModelParam._m0[25u].z, _1744));
    float _1826;
    float _1828;
    float _1830;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1793 = fma(_998, cbModelParam._m0[13u].z, fma(_994, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _990)) + cbModelParam._m0[13u].w;
        float _1797 = fma(_998, cbModelParam._m0[14u].z, fma(_994, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _990)) + cbModelParam._m0[14u].w;
        float _1801 = fma(_998, cbModelParam._m0[15u].z, fma(_994, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _990)) + cbModelParam._m0[15u].w;
        float _1804 = fma(_936, cbModelParam._m0[13u].z, fma(_935, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _934));
        float _1807 = fma(_936, cbModelParam._m0[14u].z, fma(_935, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _934));
        float _1810 = fma(_936, cbModelParam._m0[15u].z, fma(_935, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _934));
        float _1838;
        if (_1804 > 0.0)
        {
            _1838 = abs((1.0 - _1793) / _1804);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1804 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1793 + 1.0) / _1804);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1838 = frontier_phi_14_12_ladder;
        }
        float _2010;
        if (_1807 > 0.0)
        {
            _2010 = abs((1.0 - _1797) / _1807);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1797 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2010 = frontier_phi_23_19_ladder;
        }
        float _2305;
        if (_1810 > 0.0)
        {
            _2305 = abs((1.0 - _1801) / _1810);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1810 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1801 + 1.0) / _1810);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2305 = frontier_phi_35_30_ladder;
        }
        float _2307 = isnan(_2010) ? _1838 : (isnan(_1838) ? _2010 : min(_1838, _2010));
        float _2308 = isnan(_2305) ? _2307 : (isnan(_2307) ? _2305 : min(_2307, _2305));
        float _2312 = (_2308 * _1804) + _1793;
        float _2313 = (_2308 * _1807) + _1797;
        float _2314 = (_2308 * _1810) + _1801;
        float _2315 = _2308 * 9.9999997473787516355514526367188e-05;
        float _2317 = (-1.0) - _2315;
        float _2319 = _2315 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2314 > _2319) || ((_2314 < _2317) || ((_2313 > _2319) || ((_2313 < _2317) || ((_2312 < _2317) || (_2312 > _2319))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2459 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2314, cbModelParam._m0[9u].z, fma(_2313, cbModelParam._m0[9u].y, _2312 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2314, cbModelParam._m0[10u].z, fma(_2313, cbModelParam._m0[10u].y, _2312 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2314, cbModelParam._m0[11u].z, fma(_2313, cbModelParam._m0[11u].y, _2312 * cbModelParam._m0[11u].x))), _1745);
            frontier_phi_13_35_ladder = _2459.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2459.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2459.x * cbModelParam._m0[1u].y;
        }
        _1826 = frontier_phi_13_35_ladder_2;
        _1828 = frontier_phi_13_35_ladder_1;
        _1830 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1814 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_934, _935, _936), _1745);
        _1826 = _1814.x * cbModelParam._m0[1u].y;
        _1828 = _1814.y * cbModelParam._m0[1u].y;
        _1830 = _1814.z * cbModelParam._m0[1u].y;
    }
    float _1834 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _764);
    float _1835 = isnan(_1834) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1834 : min(cbModelParam._m0[25u].w, _1834));
    float _1925;
    float _1927;
    float _1929;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1889 = fma(_998, cbModelParam._m0[21u].z, fma(_994, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _990)) + cbModelParam._m0[21u].w;
        float _1893 = fma(_998, cbModelParam._m0[22u].z, fma(_994, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _990)) + cbModelParam._m0[22u].w;
        float _1897 = fma(_998, cbModelParam._m0[23u].z, fma(_994, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _990)) + cbModelParam._m0[23u].w;
        float _1900 = fma(_936, cbModelParam._m0[21u].z, fma(_935, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _934));
        float _1903 = fma(_936, cbModelParam._m0[22u].z, fma(_935, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _934));
        float _1906 = fma(_936, cbModelParam._m0[23u].z, fma(_935, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _934));
        float _2015;
        if (_1900 > 0.0)
        {
            _2015 = abs((1.0 - _1889) / _1900);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1900 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1889 + 1.0) / _1900);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2015 = frontier_phi_25_21_ladder;
        }
        float _2332;
        if (_1903 > 0.0)
        {
            _2332 = abs((1.0 - _1893) / _1903);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1903 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1893 + 1.0) / _1903);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2332 = frontier_phi_37_32_ladder;
        }
        float _2670;
        if (_1906 > 0.0)
        {
            _2670 = abs((1.0 - _1897) / _1906);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1906 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1897 + 1.0) / _1906);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2670 = frontier_phi_47_44_ladder;
        }
        float _2672 = isnan(_2332) ? _2015 : (isnan(_2015) ? _2332 : min(_2015, _2332));
        float _2673 = isnan(_2670) ? _2672 : (isnan(_2672) ? _2670 : min(_2672, _2670));
        float _2677 = (_2673 * _1900) + _1889;
        float _2678 = (_2673 * _1903) + _1893;
        float _2679 = (_2673 * _1906) + _1897;
        float _2680 = _2673 * 9.9999997473787516355514526367188e-05;
        float _2681 = (-1.0) - _2680;
        float _2683 = _2680 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2679 > _2683) || ((_2679 < _2681) || ((_2678 > _2683) || ((_2678 < _2681) || ((_2677 < _2681) || (_2677 > _2683))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2801 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2679, cbModelParam._m0[17u].z, fma(_2678, cbModelParam._m0[17u].y, _2677 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2679, cbModelParam._m0[18u].z, fma(_2678, cbModelParam._m0[18u].y, _2677 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2679, cbModelParam._m0[19u].z, fma(_2678, cbModelParam._m0[19u].y, _2677 * cbModelParam._m0[19u].x))), _1835);
            frontier_phi_22_47_ladder = _2801.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2801.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2801.x * cbModelParam._m0[1u].z;
        }
        _1925 = frontier_phi_22_47_ladder_2;
        _1927 = frontier_phi_22_47_ladder_1;
        _1929 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1909 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_934, _935, _936), _1835);
        _1925 = _1909.x * cbModelParam._m0[1u].z;
        _1927 = _1909.y * cbModelParam._m0[1u].z;
        _1929 = _1909.z * cbModelParam._m0[1u].z;
    }
    float _1942 = (((_961 * _910) + _962) * _926) * ((cbModelParam._m0[1u].w * (_1925 - _1826)) + _1826);
    float _1944 = (((_961 * _912) + _962) * _926) * ((cbModelParam._m0[1u].w * (_1927 - _1828)) + _1828);
    float _1946 = (((_961 * _913) + _962) * _926) * ((cbModelParam._m0[1u].w * (_1929 - _1830)) + _1830);
    float _1949 = fma(_1946, cbSceneParam._m0[89u].z, fma(_1944, cbSceneParam._m0[89u].y, _1942 * cbSceneParam._m0[89u].x));
    float _1952 = fma(_1946, cbSceneParam._m0[90u].z, fma(_1944, cbSceneParam._m0[90u].y, _1942 * cbSceneParam._m0[90u].x));
    float _1955 = fma(_1946, cbSceneParam._m0[91u].z, fma(_1944, cbSceneParam._m0[91u].y, _1942 * cbSceneParam._m0[91u].x));
    float _1989 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1993 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1997 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2001 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2002 = _1989 / _2001;
    float _2003 = _1993 / _2001;
    float _2004 = _1997 / _2001;
    float _2151;
    float _2152;
    float _2153;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2031 = ((uint(_2004 > cbSceneParam._m0[59u].y) + uint(_2004 > cbSceneParam._m0[59u].x)) + uint(_2004 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2032 = _2031 + 43u;
        uint _2040 = _2031 + 44u;
        uint _2048 = _2031 + 45u;
        uint _2056 = _2031 + 46u;
        float _2067 = fma(_2001, cbSceneParam._m0[_2032].w, fma(_1997, cbSceneParam._m0[_2032].z, fma(_1993, cbSceneParam._m0[_2032].y, _1989 * cbSceneParam._m0[_2032].x)));
        float _2071 = fma(_2001, cbSceneParam._m0[_2040].w, fma(_1997, cbSceneParam._m0[_2040].z, fma(_1993, cbSceneParam._m0[_2040].y, _1989 * cbSceneParam._m0[_2040].x)));
        float _2079 = fma(_2001, cbSceneParam._m0[_2056].w, fma(_1997, cbSceneParam._m0[_2056].z, fma(_1993, cbSceneParam._m0[_2056].y, _1989 * cbSceneParam._m0[_2056].x)));
        float _2084 = cbSceneParam._m0[33u].z * _2079;
        float _2086 = cbSceneParam._m0[33u].w * _2079;
        float _2089 = fma(_2001, cbSceneParam._m0[_2048].w, fma(_1997, cbSceneParam._m0[_2048].z, fma(_1993, cbSceneParam._m0[_2048].y, _1989 * cbSceneParam._m0[_2048].x))) / _2079;
        float _2137 = (cbSceneParam._m0[33u].x - sqrt(((_2003 * _2003) + (_2002 * _2002)) + (_2004 * _2004))) * cbSceneParam._m0[33u].y;
        float _4454 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        float _2144 = (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2084 + _2067) / _2079, (_2086 + _2071) / _2079), _2089), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2086 + _2067) / _2079, (_2071 - _2084) / _2079), _2089), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2067 - _2084) / _2079, (_2071 - _2086) / _2079), _2089), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2067 - _2086) / _2079, (_2084 + _2071) / _2079), _2089), 0.0)).x), vec4(0.25)));
        _2151 = 1.0 - (_2144 * cbSceneParam._m0[34u].x);
        _2152 = 1.0 - (_2144 * cbSceneParam._m0[34u].y);
        _2153 = 1.0 - (_2144 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2151 = 1.0;
        _2152 = 1.0;
        _2153 = 1.0;
    }
    float _2217;
    float _2219;
    float _2221;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2205 = fma(_2001, cbSceneParam._m0[63u].w, fma(_1997, cbSceneParam._m0[63u].z, fma(_1993, cbSceneParam._m0[63u].y, _1989 * cbSceneParam._m0[63u].x)));
        float _2206 = fma(_2001, cbSceneParam._m0[60u].w, fma(_1997, cbSceneParam._m0[60u].z, fma(_1993, cbSceneParam._m0[60u].y, _1989 * cbSceneParam._m0[60u].x))) / _2205;
        float _2207 = fma(_2001, cbSceneParam._m0[61u].w, fma(_1997, cbSceneParam._m0[61u].z, fma(_1993, cbSceneParam._m0[61u].y, _1989 * cbSceneParam._m0[61u].x))) / _2205;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2206 >= cbSceneParam._m0[64u].x) && (_2207 >= cbSceneParam._m0[64u].y)) && (_2206 <= cbSceneParam._m0[64u].z)) && (_2207 <= cbSceneParam._m0[64u].w))
        {
            float _2345 = fma(_2001, cbSceneParam._m0[62u].w, fma(_1997, cbSceneParam._m0[62u].z, fma(_1993, cbSceneParam._m0[62u].y, _1989 * cbSceneParam._m0[62u].x))) / _2205;
            float _2349 = isnan(cbSceneParam._m0[41u].w) ? _2345 : (isnan(_2345) ? cbSceneParam._m0[41u].w : max(_2345, cbSceneParam._m0[41u].w));
            float _2392 = (cbSceneParam._m0[33u].x - sqrt(((_2003 * _2003) + (_2002 * _2002)) + (_2004 * _2004))) * cbSceneParam._m0[33u].y;
            float _4470 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
            float _2399 = (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2206, cbSceneParam._m0[33u].w + _2207), _2349), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2206, _2207 - cbSceneParam._m0[33u].z), _2349), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2206 - cbSceneParam._m0[33u].z, _2207 - cbSceneParam._m0[33u].w), _2349), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2206 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2207), _2349), 0.0)).x), vec4(0.25)));
            float _2403 = 1.0 - (_2399 * cbSceneParam._m0[34u].x);
            float _2404 = 1.0 - (_2399 * cbSceneParam._m0[34u].y);
            float _2405 = 1.0 - (_2399 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2405) ? _2153 : (isnan(_2153) ? _2405 : min(_2153, _2405));
            frontier_phi_34_33_ladder_1 = isnan(_2404) ? _2152 : (isnan(_2152) ? _2404 : min(_2152, _2404));
            frontier_phi_34_33_ladder_2 = isnan(_2403) ? _2151 : (isnan(_2151) ? _2403 : min(_2151, _2403));
        }
        else
        {
            frontier_phi_34_33_ladder = _2153;
            frontier_phi_34_33_ladder_1 = _2152;
            frontier_phi_34_33_ladder_2 = _2151;
        }
        _2217 = frontier_phi_34_33_ladder_2;
        _2219 = frontier_phi_34_33_ladder_1;
        _2221 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2217 = _2151;
        _2219 = _2152;
        _2221 = _2153;
    }
    uvec4 _2226 = floatBitsToUint(cbInstanceData._m0[_251 + 5u]);
    uint _2228 = _2226.x * 14u;
    uint _2229 = _2228 + 13u;
    float _2236 = _926 + (-1.0);
    float _2241 = (cbLight._m0[_2229].x * _2236) + 1.0;
    float _2242 = (cbLight._m0[_2229].y * _2236) + 1.0;
    float _2243 = (cbLight._m0[_2229].z * _2236) + 1.0;
    float _2244 = (cbLight._m0[_2229].w * _2236) + 1.0;
    uint _2245 = _2228 + 5u;
    float _2251 = isnan(1.0) ? _2242 : (isnan(_2242) ? 1.0 : min(_2242, 1.0));
    uint _2255 = _2228 + 4u;
    float _2264 = isnan(1.0) ? _2241 : (isnan(_2241) ? 1.0 : min(_2241, 1.0));
    uint _2268 = _2228 | 1u;
    float _2279 = dot(vec3(cbLight._m0[_2228].xyz), vec3(_761, _762, _763));
    float _2282 = dot(vec3(cbLight._m0[_2268].xyz), vec3(_761, _762, _763));
    float _4506 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _4517 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2287 = (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * 0.3183098733425140380859375;
    float _2289 = (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * 0.3183098733425140380859375;
    float _2296 = ((cbLight._m0[_2245].x * _2251) * _2289) + (((cbLight._m0[_2255].x * _2217) * _2264) * _2287);
    float _2297 = ((_2251 * cbLight._m0[_2245].y) * _2289) + (((cbLight._m0[_2255].y * _2219) * _2264) * _2287);
    float _2298 = ((_2251 * cbLight._m0[_2245].z) * _2289) + (((cbLight._m0[_2255].z * _2221) * _2264) * _2287);
    uvec4 _2302 = floatBitsToUint(cbLight._m0[_2228 + 12u]);
    bool _2304 = _2302.x == 0u;
    float _2406;
    float _2408;
    float _2410;
    if (_2304)
    {
        _2406 = _2296;
        _2408 = _2297;
        _2410 = _2298;
    }
    else
    {
        uint _2414 = _2228 + 6u;
        float _2430 = (dot(vec3(cbLight._m0[_2228 + 2u].xyz), vec3(_761, _762, _763)) * 0.5) + 0.5;
        float _2431 = _2430 * _2430;
        float _4528 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2432 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
        float _2433 = isnan(1.0) ? _2243 : (isnan(_2243) ? 1.0 : min(_2243, 1.0));
        _2406 = (((cbLight._m0[_2414].x * 0.3183098733425140380859375) * _2432) * _2433) + _2296;
        _2408 = (((cbLight._m0[_2414].y * 0.3183098733425140380859375) * _2432) * _2433) + _2297;
        _2410 = (((cbLight._m0[_2414].z * 0.3183098733425140380859375) * _2432) * _2433) + _2298;
    }
    bool _2413 = _2302.y == 0u;
    float _2468;
    float _2470;
    float _2472;
    if (_2413)
    {
        _2468 = _2406;
        _2470 = _2408;
        _2472 = _2410;
    }
    else
    {
        uint _2641 = _2228 + 7u;
        float _2657 = (dot(vec3(cbLight._m0[_2228 + 3u].xyz), vec3(_761, _762, _763)) * 0.5) + 0.5;
        float _2658 = _2657 * _2657;
        float _4544 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        float _2659 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
        float _2660 = isnan(1.0) ? _2244 : (isnan(_2244) ? 1.0 : min(_2244, 1.0));
        _2468 = (((cbLight._m0[_2641].x * 0.3183098733425140380859375) * _2659) * _2660) + _2406;
        _2470 = (((cbLight._m0[_2641].y * 0.3183098733425140380859375) * _2659) * _2660) + _2408;
        _2472 = (((cbLight._m0[_2641].z * 0.3183098733425140380859375) * _2659) * _2660) + _2410;
    }
    uint _2475 = _2228 + 8u;
    float _2488 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2228].w)) * _764) * 0.949999988079071044921875);
    float _2489 = _2488 * _2488;
    float _2490 = cbLight._m0[_2228].x + _840;
    float _2491 = cbLight._m0[_2228].y + _841;
    float _2492 = cbLight._m0[_2228].z + _842;
    float _2496 = inversesqrt(dot(vec3(_2490, _2491, _2492), vec3(_2490, _2491, _2492)));
    float _2497 = _2496 * _2490;
    float _2498 = _2496 * _2491;
    float _2499 = _2496 * _2492;
    float _2500 = dot(vec3(_761, _762, _763), vec3(cbLight._m0[_2228].xyz));
    float _4560 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
    float _2503 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
    float _4571 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _2504 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
    float _2505 = dot(vec3(_761, _762, _763), vec3(_2497, _2498, _2499));
    float _4582 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
    float _2508 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
    float _2509 = dot(vec3(cbLight._m0[_2228].xyz), vec3(_2497, _2498, _2499));
    float _4593 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
    float _2513 = _2489 * _2489;
    float _2517 = ((_2508 * _2508) * (_2513 + (-1.0))) + 1.0;
    float _2525 = exp2(log2(1.0 - (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0)))) * 5.0);
    float _2526 = 0.959999978542327880859375 - _907;
    float _2528 = 0.959999978542327880859375 - _908;
    float _2529 = 0.959999978542327880859375 - _909;
    float _2536 = 1.0 - _2489;
    float _2547 = (0.5 / (((_2504 * ((_2503 * _2536) + _2489)) + 9.9999999392252902907785028219223e-09) + (((_2504 * _2536) + _2489) * _2503))) * _2503;
    float _4604 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
    float _2549 = (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * (_2513 / ((_2517 * _2517) * 3.141590118408203125));
    uint _2563 = _2228 + 9u;
    float _2574 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2268].w)) * _764) * 0.949999988079071044921875);
    float _2575 = _2574 * _2574;
    float _2576 = cbLight._m0[_2268].x + _840;
    float _2577 = cbLight._m0[_2268].y + _841;
    float _2578 = cbLight._m0[_2268].z + _842;
    float _2582 = inversesqrt(dot(vec3(_2576, _2577, _2578), vec3(_2576, _2577, _2578)));
    float _2583 = _2582 * _2576;
    float _2584 = _2582 * _2577;
    float _2585 = _2582 * _2578;
    float _2586 = dot(vec3(_761, _762, _763), vec3(cbLight._m0[_2268].xyz));
    float _4615 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
    float _2589 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
    float _2590 = dot(vec3(_761, _762, _763), vec3(_2583, _2584, _2585));
    float _4626 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
    float _2593 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
    float _2594 = dot(vec3(cbLight._m0[_2268].xyz), vec3(_2583, _2584, _2585));
    float _4637 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
    float _2598 = _2575 * _2575;
    float _2602 = ((_2593 * _2593) * (_2598 + (-1.0))) + 1.0;
    float _2609 = exp2(log2(1.0 - (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0)))) * 5.0);
    float _2616 = 1.0 - _2575;
    float _2626 = (0.5 / (((_2504 * ((_2589 * _2616) + _2575)) + 9.9999999392252902907785028219223e-09) + (((_2504 * _2616) + _2575) * _2589))) * _2589;
    float _4648 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
    float _2628 = (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0))) * (_2598 / ((_2602 * _2602) * 3.141590118408203125));
    float _2638 = (((((_2609 * _2526) + _910) * cbLight._m0[_2563].x) * _2628) * _2251) + ((((cbLight._m0[_2475].x * _2217) * ((_2525 * _2526) + _910)) * _2549) * _2264);
    float _2639 = (((((_2609 * _2528) + _912) * cbLight._m0[_2563].y) * _2628) * _2251) + ((((cbLight._m0[_2475].y * _2219) * ((_2525 * _2528) + _912)) * _2549) * _2264);
    float _2640 = (((((_2609 * _2529) + _913) * cbLight._m0[_2563].z) * _2628) * _2251) + ((((cbLight._m0[_2475].z * _2221) * ((_2525 * _2529) + _913)) * _2549) * _2264);
    float _2696;
    float _2698;
    float _2700;
    if (_2304)
    {
        _2696 = _2638;
        _2698 = _2639;
        _2700 = _2640;
    }
    else
    {
        uint _2702 = _2228 + 2u;
        uint _2706 = _2228 + 10u;
        float _2720 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2702].w)) * _764) * 0.949999988079071044921875);
        float _2721 = _2720 * _2720;
        float _2722 = cbLight._m0[_2702].x + _840;
        float _2723 = cbLight._m0[_2702].y + _841;
        float _2724 = cbLight._m0[_2702].z + _842;
        float _2728 = inversesqrt(dot(vec3(_2722, _2723, _2724), vec3(_2722, _2723, _2724)));
        float _2729 = _2728 * _2722;
        float _2730 = _2728 * _2723;
        float _2731 = _2728 * _2724;
        float _2732 = dot(vec3(_761, _762, _763), vec3(cbLight._m0[_2702].xyz));
        float _4659 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
        float _2735 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
        float _2736 = dot(vec3(_761, _762, _763), vec3(_2729, _2730, _2731));
        float _4670 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
        float _2739 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
        float _2740 = dot(vec3(cbLight._m0[_2702].xyz), vec3(_2729, _2730, _2731));
        float _4681 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
        float _2744 = _2721 * _2721;
        float _2748 = ((_2739 * _2739) * (_2744 + (-1.0))) + 1.0;
        float _2755 = exp2(log2(1.0 - (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0)))) * 5.0);
        float _2762 = 1.0 - _2721;
        float _2772 = (0.5 / (((_2504 * ((_2735 * _2762) + _2721)) + 9.9999999392252902907785028219223e-09) + (((_2504 * _2762) + _2721) * _2735))) * _2735;
        float _4692 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
        float _2774 = (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0))) * (_2744 / ((_2748 * _2748) * 3.141590118408203125));
        float _2775 = isnan(1.0) ? _2243 : (isnan(_2243) ? 1.0 : min(_2243, 1.0));
        _2696 = (((((_2755 * _2526) + _910) * cbLight._m0[_2706].x) * _2774) * _2775) + _2638;
        _2698 = (((((_2755 * _2528) + _912) * cbLight._m0[_2706].y) * _2774) * _2775) + _2639;
        _2700 = (((((_2755 * _2529) + _913) * cbLight._m0[_2706].z) * _2774) * _2775) + _2640;
    }
    float _2806;
    float _2808;
    float _2810;
    if (_2413)
    {
        _2806 = _2696;
        _2808 = _2698;
        _2810 = _2700;
    }
    else
    {
        uint _2817 = _2228 + 3u;
        uint _2821 = _2228 + 11u;
        float _2835 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2817].w)) * _764) * 0.949999988079071044921875);
        float _2836 = _2835 * _2835;
        float _2837 = cbLight._m0[_2817].x + _840;
        float _2838 = cbLight._m0[_2817].y + _841;
        float _2839 = cbLight._m0[_2817].z + _842;
        float _2843 = inversesqrt(dot(vec3(_2837, _2838, _2839), vec3(_2837, _2838, _2839)));
        float _2844 = _2843 * _2837;
        float _2845 = _2843 * _2838;
        float _2846 = _2843 * _2839;
        float _2847 = dot(vec3(_761, _762, _763), vec3(cbLight._m0[_2817].xyz));
        float _4708 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
        float _2850 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
        float _2851 = dot(vec3(_761, _762, _763), vec3(_2844, _2845, _2846));
        float _4719 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
        float _2854 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
        float _2855 = dot(vec3(cbLight._m0[_2817].xyz), vec3(_2844, _2845, _2846));
        float _4730 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
        float _2859 = _2836 * _2836;
        float _2863 = ((_2854 * _2854) * (_2859 + (-1.0))) + 1.0;
        float _2870 = exp2(log2(1.0 - (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0)))) * 5.0);
        float _2877 = 1.0 - _2836;
        float _2887 = (0.5 / (((_2504 * ((_2850 * _2877) + _2836)) + 9.9999999392252902907785028219223e-09) + (((_2504 * _2877) + _2836) * _2850))) * _2850;
        float _4741 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
        float _2889 = (isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0))) * (_2859 / ((_2863 * _2863) * 3.141590118408203125));
        float _2890 = isnan(1.0) ? _2244 : (isnan(_2244) ? 1.0 : min(_2244, 1.0));
        _2806 = (((((_2870 * _2526) + _910) * cbLight._m0[_2821].x) * _2889) * _2890) + _2696;
        _2808 = (((((_2870 * _2528) + _912) * cbLight._m0[_2821].y) * _2889) * _2890) + _2698;
        _2810 = (((((_2870 * _2529) + _913) * cbLight._m0[_2821].z) * _2889) * _2890) + _2700;
    }
    float _2956;
    float _2958;
    float _2960;
    float _2962;
    float _2964;
    float _2966;
    if (_2226.y == 0u)
    {
        uvec4 _2911 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2912 = _2911.x;
        uint _2923 = uint((float(_2911.y) * floor(float(uint(cbSceneParam._m0[85u].y * _849) / _2912))) + floor(float(uint(cbSceneParam._m0[85u].x * _848) / _2912)));
        float _2933 = (log2(_2004 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2934 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
        uint _2937 = uint(isnan(14.0) ? _2934 : (isnan(_2934) ? 14.0 : min(_2934, 14.0)));
        uvec4 _2942 = texelFetch(g_lightClusterGridBuffer, int(((_2937 << 2u) + (_2923 << 6u)) >> 2u));
        uint _2943 = _2942.x;
        uint _2944 = _2911.z;
        float _3023;
        float _3025;
        float _3027;
        float _3029;
        float _3031;
        float _3033;
        if (((((1u << ((_2944 >> 4u) & 15u)) + 4294967295u) & _2943) == 0u) || ((_2944 & 240u) == 0u))
        {
            _3023 = 0.0;
            _3025 = 0.0;
            _3027 = 0.0;
            _3029 = 0.0;
            _3031 = 0.0;
            _3033 = 0.0;
        }
        else
        {
            float _3024;
            float _3026;
            float _3028;
            float _3030;
            float _3032;
            float _3034;
            float _3167 = 0.0;
            float _3168 = 0.0;
            float _3169 = 0.0;
            float _3170 = 0.0;
            float _3171 = 0.0;
            float _3172 = 0.0;
            uint _3173 = 0u;
            uint _3182;
            bool _3183;
            for (;;)
            {
                _3182 = texelFetch(g_lightClassification, int((((_2937 << 5u) + (_2923 << 9u)) + (_3173 << 2u)) >> 2u)).x;
                _3183 = _3182 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3183)
                {
                    frontier_phi_66_pred = _3172;
                    frontier_phi_66_pred_1 = _3171;
                    frontier_phi_66_pred_2 = _3170;
                    frontier_phi_66_pred_3 = _3169;
                    frontier_phi_66_pred_4 = _3168;
                    frontier_phi_66_pred_5 = _3167;
                }
                else
                {
                    float _3291;
                    float _3292;
                    float _3293;
                    float _3294;
                    float _3295;
                    float _3296;
                    uint _3297;
                    _3291 = _3167;
                    _3292 = _3168;
                    _3293 = _3169;
                    _3294 = _3170;
                    _3295 = _3171;
                    _3296 = _3172;
                    _3297 = _3182;
                    float _3223;
                    float _3224;
                    float _3225;
                    float _3226;
                    float _3227;
                    float _3228;
                    for (;;)
                    {
                        uint _3301 = uint(findLSB(_3297)) + (_3173 << 5u);
                        uint _3298 = (_3297 + 4294967295u) & _3297;
                        uint _3303 = _3301 * 48u;
                        vec4 _3317 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3303)).x, texelFetch(g_PointLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3303 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3303 + 3u)).x));
                        uint _3323 = (_3301 * 48u) + 4u;
                        vec4 _3336 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3323)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 3u)).x));
                        uint _3342 = (_3301 * 48u) + 8u;
                        vec3 _3353 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3342)).x, texelFetch(g_PointLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3342 + 2u)).x));
                        float _3357 = _3317.x - _2002;
                        float _3358 = _3317.y - _2003;
                        float _3359 = _3317.z - _2004;
                        float _3360 = dot(vec3(_3357, _3358, _3359), vec3(_3357, _3358, _3359));
                        float _3363 = inversesqrt(_3360);
                        float _3364 = _3363 * _3357;
                        float _3365 = _3363 * _3358;
                        float _3366 = _3363 * _3359;
                        float _3367 = dot(vec3(_867, _870, _873), vec3(_3364, _3365, _3366));
                        float _3372 = 1.0 - (_3360 * _3317.w);
                        float _4767 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                        float _3373 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
                        float _3374 = sqrt(_3360) * _3336.w;
                        float _3377 = 1.39999997615814208984375 / (_3374 + 1.39999997615814208984375);
                        float _3378 = _3377 * _3377;
                        float _3381 = ((1.0 - _3378) * _3367) + _3378;
                        float _3384 = _3374 * _3374;
                        float _3388 = ((isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0))) * _3373) / ((_3384 * 0.699999988079071044921875) + 1.0);
                        float _3392 = (-0.0) - _2002;
                        float _3393 = (-0.0) - _2003;
                        float _3394 = (-0.0) - _2004;
                        float _3398 = inversesqrt(dot(vec3(_3392, _3393, _3394), vec3(_3392, _3393, _3394)));
                        float _3399 = _3398 * _3392;
                        float _3400 = _3398 * _3393;
                        float _3401 = _3398 * _3394;
                        float _3408 = exp2(log2(1.0 / ((_3384 * 3.5) + 5.0)) * 0.25);
                        float _3409 = 1.0 - _942;
                        float _3416 = sqrt(1.0 - ((1.0 - (_3409 * _3409)) * (1.0 - (_3408 * _3408))));
                        float _3417 = _3416 * _3416;
                        float _3418 = _3417 * _3417;
                        float _3419 = _3399 + _3364;
                        float _3420 = _3400 + _3365;
                        float _3421 = _3401 + _3366;
                        float _3425 = inversesqrt(dot(vec3(_3419, _3420, _3421), vec3(_3419, _3420, _3421)));
                        float _3429 = dot(vec3(_867, _870, _873), vec3(_3399, _3400, _3401));
                        float _4783 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                        float _3432 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
                        float _3433 = dot(vec3(_867, _870, _873), vec3(_3425 * _3419, _3425 * _3420, _3425 * _3421));
                        float _4794 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                        float _3436 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
                        float _3440 = ((_3436 * _3436) * (_3418 + (-1.0))) + 1.0;
                        float _3441 = _3377 * _3417;
                        float _3442 = _3441 * _3441;
                        float _3445 = ((1.0 - _3442) * _3367) + _3442;
                        float _4805 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                        float _3446 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
                        float _3447 = 1.0 - _3417;
                        float _3457 = (0.5 / (((_3446 * ((_3432 * _3447) + _3417)) + 9.9999999392252902907785028219223e-09) + (((_3446 * _3447) + _3417) * _3432))) * _3446;
                        float _4816 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                        float _3468 = (((_3418 * 3.1415927410125732421875) * (isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0)))) / ((_3440 * _3440) * ((_3384 * 2.1991131305694580078125) + 3.141590118408203125))) * _3373;
                        _3226 = (_3388 * _3336.x) + _3294;
                        _3227 = (_3388 * _3336.y) + _3295;
                        _3228 = (_3388 * _3336.z) + _3296;
                        _3223 = (_3468 * _3353.x) + _3291;
                        _3224 = (_3468 * _3353.y) + _3292;
                        _3225 = (_3468 * _3353.z) + _3293;
                        if (_3298 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3291 = _3223;
                            _3292 = _3224;
                            _3293 = _3225;
                            _3294 = _3226;
                            _3295 = _3227;
                            _3296 = _3228;
                            _3297 = _3298;
                        }
                    }
                    frontier_phi_66_pred = _3228;
                    frontier_phi_66_pred_1 = _3227;
                    frontier_phi_66_pred_2 = _3226;
                    frontier_phi_66_pred_3 = _3225;
                    frontier_phi_66_pred_4 = _3224;
                    frontier_phi_66_pred_5 = _3223;
                }
                _3034 = frontier_phi_66_pred;
                _3032 = frontier_phi_66_pred_1;
                _3030 = frontier_phi_66_pred_2;
                _3028 = frontier_phi_66_pred_3;
                _3026 = frontier_phi_66_pred_4;
                _3024 = frontier_phi_66_pred_5;
                uint _3174 = _3173 + 1u;
                if (_3174 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3167 = _3024;
                    _3168 = _3026;
                    _3169 = _3028;
                    _3170 = _3030;
                    _3171 = _3032;
                    _3172 = _3034;
                    _3173 = _3174;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3023 = _3024;
            _3025 = _3026;
            _3027 = _3028;
            _3029 = _3030;
            _3031 = _3032;
            _3033 = _3034;
        }
        uvec4 _3037 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3038 = _3037.z;
        uint _3040 = (_3038 >> 8u) & 15u;
        float _3135;
        float _3137;
        float _3139;
        float _3141;
        float _3143;
        float _3145;
        if (((4294967295u << _3040) & _2943) == 0u)
        {
            _3135 = _3023;
            _3137 = _3025;
            _3139 = _3027;
            _3141 = _3029;
            _3143 = _3031;
            _3145 = _3033;
        }
        else
        {
            float _3160 = inversesqrt(dot(vec3(_2002, _2003, _2004), vec3(_2002, _2003, _2004)));
            float _3161 = _3160 * _2002;
            float _3162 = _3160 * _2003;
            float _3163 = _3160 * _2004;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3040 < ((_3038 >> 12u) & 15u))
            {
                float _3136;
                float _3138;
                float _3140;
                float _3142;
                float _3144;
                float _3146;
                float _3274 = _3023;
                float _3275 = _3025;
                float _3276 = _3027;
                float _3277 = _3029;
                float _3278 = _3031;
                float _3279 = _3033;
                uint _3280 = _3040;
                uint _3289;
                bool _3290;
                for (;;)
                {
                    _3289 = texelFetch(g_lightClassification, int((((_2937 << 5u) + (_2923 << 9u)) + (_3280 << 2u)) >> 2u)).x;
                    _3290 = _3289 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3290)
                    {
                        frontier_phi_72_pred = _3279;
                        frontier_phi_72_pred_1 = _3278;
                        frontier_phi_72_pred_2 = _3277;
                        frontier_phi_72_pred_3 = _3276;
                        frontier_phi_72_pred_4 = _3275;
                        frontier_phi_72_pred_5 = _3274;
                    }
                    else
                    {
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3767;
                        float _3768;
                        float _3769;
                        float _3770;
                        float _3771;
                        float _3772;
                        float _3486 = _3274;
                        float _3487 = _3275;
                        float _3488 = _3276;
                        float _3489 = _3277;
                        float _3490 = _3278;
                        float _3491 = _3279;
                        uint _3492 = _3289;
                        uint _3493;
                        vec4 _3518;
                        float _3519;
                        vec4 _3534;
                        vec3 _3546;
                        vec4 _3561;
                        vec4 _3577;
                        float _3623;
                        bool _3624;
                        for (;;)
                        {
                            uint _3503 = ((_3280 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3492));
                            _3493 = (_3492 + 4294967295u) & _3492;
                            uint _3505 = _3503 * 40u;
                            _3518 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3505)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 3u)).x));
                            _3519 = _3518.w;
                            uint _3521 = (_3503 * 40u) + 4u;
                            _3534 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3521)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 3u)).x));
                            uint _3536 = (_3503 * 40u) + 8u;
                            _3546 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3536)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 2u)).x));
                            uint _3548 = (_3503 * 40u) + 16u;
                            _3561 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3548)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 3u)).x));
                            uint _3564 = (_3503 * 40u) + 20u;
                            _3577 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3564)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 3u)).x));
                            uint _3579 = (_3503 * 40u) + 24u;
                            vec4 _3592 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3579)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 3u)).x));
                            uint _3598 = (_3503 * 40u) + 28u;
                            vec4 _3611 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3598)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 3u)).x));
                            _3623 = fma(_2004, _3611.z, fma(_2003, _3611.y, _3611.x * _2002)) + _3611.w;
                            _3624 = !((fma(_2004, _3592.z, fma(_2003, _3592.y, _3592.x * _2002)) + _3592.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3624)
                            {
                                float _3651 = _3518.x - _2002;
                                float _3652 = _3518.y - _2003;
                                float _3653 = _3518.z - _2004;
                                float _3654 = dot(vec3(_3651, _3652, _3653), vec3(_3651, _3652, _3653));
                                float _3657 = inversesqrt(_3654);
                                float _3658 = _3657 * _3651;
                                float _3659 = _3657 * _3652;
                                float _3660 = _3657 * _3653;
                                float _3664 = 1.0 - (_3654 / (_3519 * _3519));
                                float _4827 = isnan(0.0) ? _3664 : (isnan(_3664) ? 0.0 : max(_3664, 0.0));
                                float _3665 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                                float _3669 = sqrt(_3654) * _3534.w;
                                float _3671 = 1.39999997615814208984375 / (_3669 + 1.39999997615814208984375);
                                float _3672 = _3671 * _3671;
                                float _3675 = ((1.0 - _3672) * dot(vec3(_3658, _3659, _3660), vec3(_867, _870, _873))) + _3672;
                                float _3678 = _3669 * _3669;
                                float _3682 = (fma(_2004, _3561.z, fma(_2003, _3561.y, _3561.x * _2002)) + _3561.w) / _3623;
                                float _3683 = (fma(_2004, _3577.z, fma(_2003, _3577.y, _3577.x * _2002)) + _3577.w) / _3623;
                                float _3687 = 1.0 - dot(vec2(_3682, _3683), vec2(_3682, _3683));
                                float _4843 = isnan(0.0) ? _3687 : (isnan(_3687) ? 0.0 : max(_3687, 0.0));
                                float _3688 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
                                float _3689 = _3688 * (((isnan(0.0) ? _3675 : (isnan(_3675) ? 0.0 : max(_3675, 0.0))) * _3665) / ((_3678 * 0.699999988079071044921875) + 1.0));
                                float _3701 = exp2(log2(1.0 / ((_3678 * 3.5) + 5.0)) * 0.25);
                                float _3702 = 1.0 - _942;
                                float _3709 = sqrt(1.0 - ((1.0 - (_3702 * _3702)) * (1.0 - (_3701 * _3701))));
                                float _3710 = _3709 * _3709;
                                float _3711 = _3710 * _3710;
                                float _3712 = _3658 - _3161;
                                float _3713 = _3659 - _3162;
                                float _3714 = _3660 - _3163;
                                float _3718 = inversesqrt(dot(vec3(_3712, _3713, _3714), vec3(_3712, _3713, _3714)));
                                float _3722 = dot(vec3(_867, _870, _873), vec3((-0.0) - _3161, (-0.0) - _3162, (-0.0) - _3163));
                                float _4854 = isnan(0.0) ? _3722 : (isnan(_3722) ? 0.0 : max(_3722, 0.0));
                                float _3725 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
                                float _3726 = dot(vec3(_867, _870, _873), vec3(_3718 * _3712, _3718 * _3713, _3718 * _3714));
                                float _4865 = isnan(0.0) ? _3726 : (isnan(_3726) ? 0.0 : max(_3726, 0.0));
                                float _3729 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
                                float _3733 = ((_3729 * _3729) * (_3711 + (-1.0))) + 1.0;
                                float _3734 = _3671 * _3710;
                                float _3735 = _3734 * _3734;
                                float _3741 = ((1.0 - _3735) * dot(vec3(_867, _870, _873), vec3(_3658, _3659, _3660))) + _3735;
                                float _4876 = isnan(0.0) ? _3741 : (isnan(_3741) ? 0.0 : max(_3741, 0.0));
                                float _3742 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
                                float _3743 = 1.0 - _3710;
                                float _3753 = (0.5 / (((_3742 * ((_3725 * _3743) + _3710)) + 9.9999999392252902907785028219223e-09) + (((_3742 * _3743) + _3710) * _3725))) * _3742;
                                float _4887 = isnan(0.0) ? _3753 : (isnan(_3753) ? 0.0 : max(_3753, 0.0));
                                float _3763 = (_3688 * _3665) * (((_3711 * 3.1415927410125732421875) * (isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0)))) / ((_3733 * _3733) * ((_3678 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3689 * _3534.y;
                                frontier_phi_78_pred_1 = _3689 * _3534.x;
                                frontier_phi_78_pred_2 = _3763 * _3546.z;
                                frontier_phi_78_pred_3 = _3763 * _3546.y;
                                frontier_phi_78_pred_4 = _3763 * _3546.x;
                                frontier_phi_78_pred_5 = _3689 * _3534.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3771 = frontier_phi_78_pred;
                            _3770 = frontier_phi_78_pred_1;
                            _3769 = frontier_phi_78_pred_2;
                            _3768 = frontier_phi_78_pred_3;
                            _3767 = frontier_phi_78_pred_4;
                            _3772 = frontier_phi_78_pred_5;
                            _3476 = _3770 + _3489;
                            _3477 = _3771 + _3490;
                            _3478 = _3772 + _3491;
                            _3473 = _3767 + _3486;
                            _3474 = _3768 + _3487;
                            _3475 = _3769 + _3488;
                            if (_3493 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3486 = _3473;
                                _3487 = _3474;
                                _3488 = _3475;
                                _3489 = _3476;
                                _3490 = _3477;
                                _3491 = _3478;
                                _3492 = _3493;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3478;
                        frontier_phi_72_pred_1 = _3477;
                        frontier_phi_72_pred_2 = _3476;
                        frontier_phi_72_pred_3 = _3475;
                        frontier_phi_72_pred_4 = _3474;
                        frontier_phi_72_pred_5 = _3473;
                    }
                    _3146 = frontier_phi_72_pred;
                    _3144 = frontier_phi_72_pred_1;
                    _3142 = frontier_phi_72_pred_2;
                    _3140 = frontier_phi_72_pred_3;
                    _3138 = frontier_phi_72_pred_4;
                    _3136 = frontier_phi_72_pred_5;
                    uint _3281 = _3280 + 1u;
                    if (_3281 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3274 = _3136;
                        _3275 = _3138;
                        _3276 = _3140;
                        _3277 = _3142;
                        _3278 = _3144;
                        _3279 = _3146;
                        _3280 = _3281;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3146;
                frontier_phi_60_61_ladder_1 = _3144;
                frontier_phi_60_61_ladder_2 = _3140;
                frontier_phi_60_61_ladder_3 = _3138;
                frontier_phi_60_61_ladder_4 = _3136;
                frontier_phi_60_61_ladder_5 = _3142;
            }
            else
            {
                frontier_phi_60_61_ladder = _3033;
                frontier_phi_60_61_ladder_1 = _3031;
                frontier_phi_60_61_ladder_2 = _3027;
                frontier_phi_60_61_ladder_3 = _3025;
                frontier_phi_60_61_ladder_4 = _3023;
                frontier_phi_60_61_ladder_5 = _3029;
            }
            _3135 = frontier_phi_60_61_ladder_4;
            _3137 = frontier_phi_60_61_ladder_3;
            _3139 = frontier_phi_60_61_ladder_2;
            _3141 = frontier_phi_60_61_ladder_5;
            _3143 = frontier_phi_60_61_ladder_1;
            _3145 = frontier_phi_60_61_ladder;
        }
        float _3150 = isnan(1.0) ? _926 : (isnan(_926) ? 1.0 : min(_926, 1.0));
        _2956 = (_3150 * _3141) + _2468;
        _2958 = (_3150 * _3143) + _2470;
        _2960 = (_3150 * _3145) + _2472;
        _2962 = ((_3135 * _910) * _3150) + _2806;
        _2964 = ((_3137 * _912) * _3150) + _2808;
        _2966 = ((_3139 * _913) * _3150) + _2810;
    }
    else
    {
        _2956 = _2468;
        _2958 = _2470;
        _2960 = _2472;
        _2962 = _2806;
        _2964 = _2808;
        _2966 = _2810;
    }
    float _4903 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _4914 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _4925 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    uint _2986 = _251 + 6u;
    float _2994 = _848 / cbSceneParam._m0[86u].x;
    float _2995 = _849 / cbSceneParam._m0[86u].y;
    vec4 _3009 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2994, _2995, (log2((isnan(cbSceneParam._m0[77u].w) ? _783 : (isnan(_783) ? cbSceneParam._m0[77u].w : min(_783, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3011 = _3009.x;
    float _3012 = _3009.y;
    float _3013 = _3009.z;
    float _3014 = _3009.w;
    float _3085;
    float _3087;
    float _3089;
    float _3091;
    if (_783 > cbSceneParam._m0[78u].w)
    {
        float _3048 = isnan(_783) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _783 : min(cbSceneParam._m0[80u].w, _783));
        float _3049 = _3048 / _783;
        float _3060 = _3049 * _833;
        float _3061 = _834 * _3049;
        float _3062 = (-0.0) - _3061;
        float _3063 = _3049 * _835;
        float _3065 = (cbSceneParam._m0[77u].w * _3062) / _3048;
        float _3066 = _3065 + cbSceneParam._m0[79u].w;
        float _3067 = cbSceneParam._m0[79u].w - _3061;
        float _3073 = sqrt(((_3060 * _3060) + (_3061 * _3061)) + (_3063 * _3063));
        float _3076 = (1.0 - (cbSceneParam._m0[77u].w / _3048)) * _3073;
        float _3081 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3083 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3236;
        if (abs((_3062 - _3065) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3236 = ((((_3066 > 0.0) ? exp2(_3081 * _3066) : (2.0 - exp2(_3083 * _3066))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3076;
        }
        else
        {
            float _3196 = 1.0 / cbSceneParam._m0[80u].x;
            float _3197 = isnan(_3067) ? _3066 : (isnan(_3066) ? _3067 : max(_3066, _3067));
            float _3198 = isnan(_3067) ? _3066 : (isnan(_3066) ? _3067 : min(_3066, _3067));
            float _3207 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : min(_3197, 0.0));
            float _3208 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : min(_3198, 0.0));
            _3236 = ((abs(_3073 / _3062) * cbSceneParam._m0[80u].y) * ((((_3207 - _3208) * 2.0) - ((exp2(_3081 * (isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0)))) - exp2(_3081 * (isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0))))) * _3196)) - ((exp2(_3083 * _3207) - exp2(_3083 * _3208)) * _3196))) + (_3076 * cbSceneParam._m0[80u].z);
        }
        vec4 _3238 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2994, _2995, 1.0), 0.0);
        float _3247 = exp2((_3236 * (-1.44269502162933349609375)) * (1.0 - _3238.w));
        float _3248 = log2(_3247);
        float _3264 = log2(_3014);
        _3085 = (exp2(_3264 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3248 * cbSceneParam._m0[78u].x)) * _3238.x) / cbSceneParam._m0[78u].x)) + _3011;
        _3087 = (exp2(_3264 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3248 * cbSceneParam._m0[78u].y)) * _3238.y) / cbSceneParam._m0[78u].y)) + _3012;
        _3089 = (exp2(_3264 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3248 * cbSceneParam._m0[78u].z)) * _3238.z) / cbSceneParam._m0[78u].z)) + _3013;
        _3091 = _3247 * _3014;
    }
    else
    {
        _3085 = _3011;
        _3087 = _3012;
        _3089 = _3013;
        _3091 = _3014;
    }
    float _3103 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3104 = _3103 == 3.0;
    float _3105 = log2(_3091);
    float _3112 = exp2(_3105 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0))) * (_2956 + ((isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) * _926))) + ((_2962 + ((isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0))) * _1734)) * cbPerFrame._m0[3u].x));
    float _3113 = exp2(_3105 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0))) * (_2958 + ((isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))) * _926))) + ((_2964 + ((isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0))) * _1734)) * cbPerFrame._m0[3u].x));
    float _3114 = exp2(_3105 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0))) * (_2960 + ((isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))) * _926))) + ((_2966 + ((isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0))) * _1734)) * cbPerFrame._m0[3u].x));
    float _3123 = (_3103 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3123 * (_3104 ? _3112 : (_3112 + (cbSceneParam._m0[72u].w * _3085)));
    SV_Target.y = _3123 * (_3104 ? _3113 : (_3113 + (cbSceneParam._m0[72u].w * _3087)));
    SV_Target.z = _3123 * (_3104 ? _3114 : (_3114 + (cbSceneParam._m0[72u].w * _3089)));
    SV_Target.w = cbInstanceData._m0[_2986].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2986].w;
}


