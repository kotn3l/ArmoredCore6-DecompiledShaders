#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1216;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _226 = _225 * _217;
    float _227 = _225 * _218;
    float _228 = _225 * _219;
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = _232 * NORMAL.x;
    float _234 = _232 * NORMAL.y;
    float _235 = _232 * NORMAL.z;
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _240 = _239 * TANGENT.x;
    float _241 = _239 * TANGENT.y;
    float _242 = _239 * TANGENT.z;
    uint _245 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _245 + 1u;
    uint _254 = _245 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_245].x * cbInstanceData._m0[_245].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _284 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _290 = _284.x * cbMtdParam._m0[9u].x;
    float _291 = _284.y * cbMtdParam._m0[9u].y;
    float _292 = _284.z * cbMtdParam._m0[9u].z;
    vec4 _311 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _264) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _265) + cbTextureTilingScale._m0[14u].w));
    vec4 _331 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _264) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _265) + cbTextureTilingScale._m0[20u].w));
    vec4 _357 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _361 = _357.z;
    float _365 = (_357.x * 2.0) + (-1.0);
    float _366 = (_357.y * 2.0) + (-1.0);
    float _367 = dot(vec2(_365, _366), vec2(_365, _366));
    float _3566 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _373 = sqrt(1.0 - (isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0))));
    float _378 = _365 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_331.x * 2.0) + (-1.0)));
    float _379 = _366 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_331.y * 2.0) + (-1.0)));
    float _382 = fma(_373, _233, fma(_379, _240, _378 * _226));
    float _385 = fma(_373, _234, fma(_379, _241, _378 * _227));
    float _388 = fma(_373, _235, fma(_379, _242, _378 * _228));
    float _392 = inversesqrt(dot(vec3(_382, _385, _388), vec3(_382, _385, _388)));
    vec4 _428 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _430 = _428.x;
    float _431 = 1.0 - _430;
    float _438 = ((_430 - _431) * cbMtdParam._m0[24u].z) + _431;
    float _440 = (cbMtdParam._m0[19u].x + dot(vec4(_392 * _382, _392 * _385, _392 * _388, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_438 * cbMtdParam._m0[21u].z);
    float _3577 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _441 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
    float _443 = (-0.0) - cbMtdParam._m0[24u].x;
    float _445 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _446 = isnan(1.0) ? _445 : (isnan(_445) ? 1.0 : min(_445, 1.0));
    float _453 = _441 - ((_441 * TEXCOORD_8.x) * _446);
    float _454 = _441 - ((_441 * TEXCOORD_8.y) * _446);
    float _455 = _441 - ((_441 * TEXCOORD_8.z) * _446);
    float _462 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _466 = ((isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : min(_462, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _474 = (_466 - (((_438 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _466))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3608 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _475 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
    float _479 = ((_453 * ((_311.x * cbMtdParam._m0[18u].x) - _290)) * _475) + _290;
    float _480 = ((_454 * ((_311.y * cbMtdParam._m0[18u].y) - _291)) * _475) + _291;
    float _481 = ((_455 * ((_311.z * cbMtdParam._m0[18u].z) - _292)) * _475) + _292;
    vec4 _493 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _264) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _265) + cbTextureTilingScale._m0[19u].w));
    float _495 = _493.x;
    float _496 = 1.0 - _495;
    float _525 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_495 - _496) * cbMtdParam._m0[24u].w) + _496) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3619 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _526 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
    float _534 = ((((cbMtdParam._m0[10u].x - _479) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _526) + _479;
    float _535 = ((((cbMtdParam._m0[10u].y - _480) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _526) + _480;
    float _536 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _481)) * _526) + _481;
    vec4 _549 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _551 = _549.x;
    float _554 = _551 - ((_551 * _453) * _475);
    float _556 = _554 - (_554 * _526);
    float _561 = (((_331.z - _361) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _361;
    vec4 _575 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _582 = (_575.x * 2.0) + (-1.0);
    float _583 = (_575.y * 2.0) + (-1.0);
    float _584 = dot(vec2(_582, _583), vec2(_582, _583));
    float _3630 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _593 = (((_575.z - _561) * _453) * _475) + _561;
    float _596 = ((cbMtdParam._m0[23u].y - _593) * _526) + _593;
    vec4 _615 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _264) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _265) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _621 = (_615.x * 2.0) + (-1.0);
    float _622 = (_615.y * 2.0) + (-1.0);
    float _623 = dot(vec2(_621, _622), vec2(_621, _622));
    float _3641 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _643 = (((cbMtdParam._m0[21u].x * _378) + ((_582 - _378) * _453)) * _475) + _378;
    float _644 = (((cbMtdParam._m0[21u].x * _379) + ((_583 - _379) * _454)) * _475) + _379;
    float _645 = (((sqrt(1.0 - (isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0)))) - _373) * _455) * _475) + _373;
    float _656 = (((_621 - _643) + (_643 * cbMtdParam._m0[22u].z)) * _526) + _643;
    float _657 = (((_622 - _644) + (_644 * cbMtdParam._m0[22u].z)) * _526) + _644;
    float _658 = ((sqrt(1.0 - (isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0)))) - _645) * _526) + _645;
    float _660 = cbMtdParam._m0[22u].x + _357.w;
    float _663 = fma(_658, _233, fma(_657, _240, _656 * _226));
    float _666 = fma(_658, _234, fma(_657, _241, _656 * _227));
    float _669 = fma(_658, _235, fma(_657, _242, _656 * _228));
    float _673 = inversesqrt(dot(vec3(_663, _666, _669), vec3(_663, _666, _669)));
    float _674 = _673 * _663;
    float _675 = _673 * _666;
    float _676 = _673 * _669;
    float _3652 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _677 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
    float _3663 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _3674 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _3685 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _3696 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _3707 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _682 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
    float _696 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _736 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _746 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _736);
    float _747 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _736);
    float _748 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _736);
    float _752 = inversesqrt(dot(vec3(_746, _747, _748), vec3(_746, _747, _748)));
    float _753 = _746 * _752;
    float _754 = _747 * _752;
    float _755 = _748 * _752;
    float _761 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _762 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _783 = fma(_676, cbSceneParam._m0[5u].z, fma(_675, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _674));
    float _786 = fma(_676, cbSceneParam._m0[6u].z, fma(_675, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _674));
    float _789 = fma(_676, cbSceneParam._m0[7u].z, fma(_675, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _674));
    uint _803 = (_245 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _809 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0)))) * cbInstanceData._m0[_803].x;
    float _810 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0)))) * cbInstanceData._m0[_803].y;
    float _811 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0)))) * cbInstanceData._m0[_803].z;
    float _3718 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _812 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
    float _3729 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _813 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
    float _3740 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _814 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
    float _815 = 1.0 - _682;
    float _816 = _812 * _815;
    float _817 = _813 * _815;
    float _818 = _814 * _815;
    float _823 = (_812 + (-0.039999999105930328369140625)) * _682;
    float _824 = (_813 + (-0.039999999105930328369140625)) * _682;
    float _825 = (_814 + (-0.039999999105930328369140625)) * _682;
    float _826 = _823 + 0.039999999105930328369140625;
    float _828 = _824 + 0.039999999105930328369140625;
    float _829 = _825 + 0.039999999105930328369140625;
    vec4 _838 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _761, cbSceneParam._m0[86u].y * _762));
    float _842 = ((isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) * TEXCOORD_5.w) * _838.x;
    float _843 = dot(vec3(_674, _675, _676), vec3(_753, _754, _755));
    float _846 = _843 * 2.0;
    float _850 = (_846 * _674) - _753;
    float _851 = (_846 * _675) - _754;
    float _852 = (_846 * _676) - _755;
    float _856 = abs(dot(vec3(_753, _754, _755), vec3(_674, _675, _676)));
    float _3751 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _858 = sqrt(_677);
    float _871 = exp2((_858 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_858 * 3.0));
    float _877 = (1.0 - _871) * ((_858 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _878 = _871 * _858;
    float _906 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _910 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _914 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1215;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _940 = fma(_914, cbModelParam._m0[26u].z, fma(_910, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _906));
        float _944 = fma(_914, cbModelParam._m0[27u].z, fma(_910, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _906));
        float _948 = fma(_914, cbModelParam._m0[28u].z, fma(_910, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _906));
        float _973 = _906 + _674;
        float _974 = _910 + _675;
        float _975 = _914 + _676;
        float _985 = fma(_975, cbModelParam._m0[26u].z, fma(_974, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _973)) - _940;
        float _986 = fma(_975, cbModelParam._m0[27u].z, fma(_974, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _973)) - _944;
        float _987 = fma(_975, cbModelParam._m0[28u].z, fma(_974, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _973)) - _948;
        float _991 = inversesqrt(dot(vec3(_985, _986, _987), vec3(_985, _986, _987)));
        float _1004 = ((_991 * _985) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_940 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1005 = ((_991 * _986) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_944 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1006 = ((_991 * _987) / cbModelParam._m0[34u].z) + ((((((_948 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1004, _1005, _1006), 0.0);
        vec4 _1016 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1004, _1005, _1006), 0.0);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1004, _1005, _1006), 0.0);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1004, _1005, _1006), 0.0);
        float _1043 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1009.x + (-0.5));
        float _1045 = _1043 * (_1009.y + (-0.5));
        float _1046 = _1043 * (_1009.z + (-0.5));
        float _1053 = exp2((_1016.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1016.x + (-0.5));
        float _1055 = _1053 * (_1016.y + (-0.5));
        float _1056 = _1053 * (_1016.z + (-0.5));
        float _1063 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = _1063 * (_1023.x + (-0.5));
        float _1065 = _1063 * (_1023.y + (-0.5));
        float _1066 = _1063 * (_1023.z + (-0.5));
        float _1073 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1074 = _1073 * (_1030.x + (-0.5));
        float _1075 = _1073 * (_1030.y + (-0.5));
        float _1076 = _1073 * (_1030.z + (-0.5));
        float _1077 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1078 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1079 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1080 = _1044 * 0.5;
        float _1081 = _1054 * 0.5;
        float _1082 = _1064 * 0.5;
        float _1083 = dot(vec3(_1080, _1081, _1082), vec3(_1080, _1081, _1082));
        float _1088 = (_1083 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1083);
        float _1097 = (dot(vec3(_674, _675, _676), vec3(_1088 * _1080, _1088 * _1081, _1088 * _1082)) + 1.0) * 0.5;
        float _3777 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1107 = sqrt(((_1081 * _1081) + (_1080 * _1080)) + (_1082 * _1082)) / (_1077 + 9.9999997473787516355514526367188e-06);
        float _3788 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1109 = _1108 * 2.0;
        float _1113 = (1.0 - _1108) / (_1108 + 1.0);
        float _3799 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1123 = ((((1.0 - _1114) * (_1109 + 2.0)) * exp2(log2(isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))) * (_1109 + 1.0))) + _1114) * _1077;
        float _1124 = _1045 * 0.5;
        float _1125 = _1055 * 0.5;
        float _1126 = _1065 * 0.5;
        float _1127 = dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126));
        float _1132 = (_1127 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1127);
        float _1140 = (dot(vec3(_674, _675, _676), vec3(_1132 * _1124, _1132 * _1125, _1132 * _1126)) + 1.0) * 0.5;
        float _3810 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1149 = sqrt(((_1125 * _1125) + (_1124 * _1124)) + (_1126 * _1126)) / (_1078 + 9.9999997473787516355514526367188e-06);
        float _3821 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1151 = _1150 * 2.0;
        float _1155 = (1.0 - _1150) / (_1150 + 1.0);
        float _3832 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1165 = ((((1.0 - _1156) * (_1151 + 2.0)) * exp2(log2(isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))) * (_1151 + 1.0))) + _1156) * _1078;
        float _1166 = _1046 * 0.5;
        float _1167 = _1056 * 0.5;
        float _1168 = _1066 * 0.5;
        float _1169 = dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168));
        float _1174 = (_1169 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1169);
        float _1182 = (dot(vec3(_674, _675, _676), vec3(_1174 * _1166, _1174 * _1167, _1174 * _1168)) + 1.0) * 0.5;
        float _3843 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1191 = sqrt(((_1167 * _1167) + (_1166 * _1166)) + (_1168 * _1168)) / (_1079 + 9.9999997473787516355514526367188e-06);
        float _3854 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1193 = _1192 * 2.0;
        float _1197 = (1.0 - _1192) / (_1192 + 1.0);
        float _3865 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1207 = ((((1.0 - _1198) * (_1193 + 2.0)) * exp2(log2(isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * (_1193 + 1.0))) + _1198) * _1079;
        _1215 = _1046;
        _1217 = _1045;
        _1218 = _1044;
        _1219 = _1056;
        _1220 = _1055;
        _1221 = _1054;
        _1222 = _1066;
        _1223 = _1065;
        _1224 = _1064;
        _1225 = _1079;
        _1226 = _1078;
        _1227 = _1077;
        _1228 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0)));
        _1229 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0)));
        _1230 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0)));
    }
    else
    {
        _1215 = _1216;
        _1217 = _1216;
        _1218 = _1216;
        _1219 = _1216;
        _1220 = _1216;
        _1221 = _1216;
        _1222 = _1216;
        _1223 = _1216;
        _1224 = _1216;
        _1225 = _1216;
        _1226 = _1216;
        _1227 = _1216;
        _1228 = 0.0;
        _1229 = 0.0;
        _1230 = 0.0;
    }
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1255 = fma(_914, cbModelParam._m0[30u].z, fma(_910, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _906));
        float _1259 = fma(_914, cbModelParam._m0[31u].z, fma(_910, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _906));
        float _1263 = fma(_914, cbModelParam._m0[32u].z, fma(_910, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _906));
        float _1286 = _906 + _674;
        float _1287 = _910 + _675;
        float _1288 = _914 + _676;
        float _1298 = fma(_1288, cbModelParam._m0[30u].z, fma(_1287, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1286)) - _1255;
        float _1299 = fma(_1288, cbModelParam._m0[31u].z, fma(_1287, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1286)) - _1259;
        float _1300 = fma(_1288, cbModelParam._m0[32u].z, fma(_1287, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1286)) - _1263;
        float _1304 = inversesqrt(dot(vec3(_1298, _1299, _1300), vec3(_1298, _1299, _1300)));
        float _1317 = ((_1304 * _1298) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1255 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1318 = ((_1304 * _1299) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1259 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1319 = ((_1304 * _1300) / cbModelParam._m0[35u].z) + ((((((_1263 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1321 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1317, _1318, _1319), 0.0);
        vec4 _1328 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1317, _1318, _1319), 0.0);
        vec4 _1335 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1317, _1318, _1319), 0.0);
        vec4 _1342 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1317, _1318, _1319), 0.0);
        float _1354 = exp2((_1321.w + (-0.5)) * 20.0) * 2.0;
        float _1355 = _1354 * (_1321.x + (-0.5));
        float _1356 = _1354 * (_1321.y + (-0.5));
        float _1357 = _1354 * (_1321.z + (-0.5));
        float _1364 = exp2((_1328.w + (-0.5)) * 20.0) * 2.0;
        float _1365 = _1364 * (_1328.x + (-0.5));
        float _1366 = _1364 * (_1328.y + (-0.5));
        float _1367 = _1364 * (_1328.z + (-0.5));
        float _1374 = exp2((_1335.w + (-0.5)) * 20.0) * 2.0;
        float _1375 = _1374 * (_1335.x + (-0.5));
        float _1376 = _1374 * (_1335.y + (-0.5));
        float _1377 = _1374 * (_1335.z + (-0.5));
        float _1384 = exp2((_1342.w + (-0.5)) * 20.0) * 2.0;
        float _1385 = _1384 * (_1342.x + (-0.5));
        float _1386 = _1384 * (_1342.y + (-0.5));
        float _1387 = _1384 * (_1342.z + (-0.5));
        float _1388 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1389 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1390 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1391 = _1355 * 0.5;
        float _1392 = _1365 * 0.5;
        float _1393 = _1375 * 0.5;
        float _1394 = dot(vec3(_1391, _1392, _1393), vec3(_1391, _1392, _1393));
        float _1399 = (_1394 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1394);
        float _1407 = (dot(vec3(_674, _675, _676), vec3(_1399 * _1391, _1399 * _1392, _1399 * _1393)) + 1.0) * 0.5;
        float _3906 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1416 = sqrt(((_1392 * _1392) + (_1391 * _1391)) + (_1393 * _1393)) / (_1388 + 9.9999997473787516355514526367188e-06);
        float _3917 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1418 = _1417 * 2.0;
        float _1422 = (1.0 - _1417) / (_1417 + 1.0);
        float _3928 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1432 = ((((1.0 - _1423) * (_1418 + 2.0)) * exp2(log2(isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) * (_1418 + 1.0))) + _1423) * _1388;
        float _1433 = _1356 * 0.5;
        float _1434 = _1366 * 0.5;
        float _1435 = _1376 * 0.5;
        float _1436 = dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435));
        float _1441 = (_1436 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1436);
        float _1449 = (dot(vec3(_674, _675, _676), vec3(_1441 * _1433, _1441 * _1434, _1441 * _1435)) + 1.0) * 0.5;
        float _3939 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1458 = sqrt(((_1434 * _1434) + (_1433 * _1433)) + (_1435 * _1435)) / (_1389 + 9.9999997473787516355514526367188e-06);
        float _3950 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _1460 = _1459 * 2.0;
        float _1464 = (1.0 - _1459) / (_1459 + 1.0);
        float _3961 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1474 = ((((1.0 - _1465) * (_1460 + 2.0)) * exp2(log2(isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) * (_1460 + 1.0))) + _1465) * _1389;
        float _1475 = _1357 * 0.5;
        float _1476 = _1367 * 0.5;
        float _1477 = _1377 * 0.5;
        float _1478 = dot(vec3(_1475, _1476, _1477), vec3(_1475, _1476, _1477));
        float _1483 = (_1478 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1478);
        float _1491 = (dot(vec3(_674, _675, _676), vec3(_1483 * _1475, _1483 * _1476, _1483 * _1477)) + 1.0) * 0.5;
        float _3972 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1500 = sqrt(((_1476 * _1476) + (_1475 * _1475)) + (_1477 * _1477)) / (_1390 + 9.9999997473787516355514526367188e-06);
        float _3983 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _1502 = _1501 * 2.0;
        float _1506 = (1.0 - _1501) / (_1501 + 1.0);
        float _3994 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1516 = ((((1.0 - _1507) * (_1502 + 2.0)) * exp2(log2(isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))) * (_1502 + 1.0))) + _1507) * _1390;
        _1524 = _1357;
        _1525 = _1356;
        _1526 = _1355;
        _1527 = _1367;
        _1528 = _1366;
        _1529 = _1365;
        _1530 = _1377;
        _1531 = _1376;
        _1532 = _1375;
        _1533 = _1390;
        _1534 = _1389;
        _1535 = _1388;
        _1536 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)));
        _1537 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)));
        _1538 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)));
    }
    else
    {
        _1524 = _1216;
        _1525 = _1216;
        _1526 = _1216;
        _1527 = _1216;
        _1528 = _1216;
        _1529 = _1216;
        _1530 = _1216;
        _1531 = _1216;
        _1532 = _1216;
        _1533 = _1216;
        _1534 = _1216;
        _1535 = _1216;
        _1536 = 0.0;
        _1537 = 0.0;
        _1538 = 0.0;
    }
    float _1548 = (cbModelParam._m0[1u].x * (_1536 - _1228)) + _1228;
    float _1549 = (cbModelParam._m0[1u].x * (_1537 - _1229)) + _1229;
    float _1550 = (cbModelParam._m0[1u].x * (_1538 - _1230)) + _1230;
    float _1571 = fma(_1550, cbSceneParam._m0[89u].z, fma(_1549, cbSceneParam._m0[89u].y, _1548 * cbSceneParam._m0[89u].x));
    float _1574 = fma(_1550, cbSceneParam._m0[90u].z, fma(_1549, cbSceneParam._m0[90u].y, _1548 * cbSceneParam._m0[90u].x));
    float _1577 = fma(_1550, cbSceneParam._m0[91u].z, fma(_1549, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1548));
    float _1592 = _850 * 0.5;
    float _1593 = _851 * 0.5;
    float _1594 = _852 * 0.5;
    float _1595 = dot(vec4(_1592, _1593, _1594, 1.0), vec4(_1526, _1529, _1532, _1535));
    float _1598 = dot(vec4(_1592, _1593, _1594, 1.0), vec4(_1525, _1528, _1531, _1534));
    float _1601 = dot(vec4(_1592, _1593, _1594, 1.0), vec4(_1524, _1527, _1530, _1533));
    float _1635;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1608 = dot(vec4(_1592, _1593, _1594, 1.0), vec4(_1215, _1219, _1222, _1225));
        float _1612 = dot(vec4(_1592, _1593, _1594, 1.0), vec4(_1217, _1220, _1223, _1226));
        float _1616 = dot(vec4(_1592, _1593, _1594, 1.0), vec4(_1218, _1221, _1224, _1227));
        float _1623 = dot(vec4(cbModelParam._m0[39u]), vec4(_1592, _1593, _1594, 1.0));
        _1635 = dot(vec3(isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0)), isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0)), isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1623) ? 0.0 : (isnan(0.0) ? _1623 : max(0.0, _1623))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1635 = 1.0;
    }
    float _1646;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1637 = dot(vec4(cbModelParam._m0[40u]), vec4(_1592, _1593, _1594, 1.0));
        _1646 = dot(vec3(isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)), isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)), isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1637) ? 0.0 : (isnan(0.0) ? _1637 : max(0.0, _1637))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1646 = 1.0;
    }
    float _1650 = (_1646 * cbModelParam._m0[1u].x) + (_1635 * (1.0 - cbModelParam._m0[1u].x));
    float _1660 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _677);
    float _1661 = isnan(_1660) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1660 : min(cbModelParam._m0[25u].z, _1660));
    float _1741;
    float _1743;
    float _1745;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1708 = fma(_914, cbModelParam._m0[13u].z, fma(_910, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _906)) + cbModelParam._m0[13u].w;
        float _1712 = fma(_914, cbModelParam._m0[14u].z, fma(_910, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _906)) + cbModelParam._m0[14u].w;
        float _1716 = fma(_914, cbModelParam._m0[15u].z, fma(_910, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _906)) + cbModelParam._m0[15u].w;
        float _1719 = fma(_852, cbModelParam._m0[13u].z, fma(_851, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _850));
        float _1722 = fma(_852, cbModelParam._m0[14u].z, fma(_851, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _850));
        float _1725 = fma(_852, cbModelParam._m0[15u].z, fma(_851, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _850));
        float _1753;
        if (_1719 > 0.0)
        {
            _1753 = abs((1.0 - _1708) / _1719);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1719 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1708 + 1.0) / _1719);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1753 = frontier_phi_14_12_ladder;
        }
        float _1977;
        if (_1722 > 0.0)
        {
            _1977 = abs((1.0 - _1712) / _1722);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1722 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1712 + 1.0) / _1722);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1977 = frontier_phi_23_19_ladder;
        }
        float _2234;
        if (_1725 > 0.0)
        {
            _2234 = abs((1.0 - _1716) / _1725);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1725 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1716 + 1.0) / _1725);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2234 = frontier_phi_35_30_ladder;
        }
        float _2236 = isnan(_1977) ? _1753 : (isnan(_1753) ? _1977 : min(_1753, _1977));
        float _2237 = isnan(_2234) ? _2236 : (isnan(_2236) ? _2234 : min(_2236, _2234));
        float _2241 = (_2237 * _1719) + _1708;
        float _2242 = (_2237 * _1722) + _1712;
        float _2243 = (_2237 * _1725) + _1716;
        float _2244 = _2237 * 9.9999997473787516355514526367188e-05;
        float _2246 = (-1.0) - _2244;
        float _2248 = _2244 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2243 > _2248) || ((_2243 < _2246) || ((_2242 > _2248) || ((_2242 < _2246) || ((_2241 < _2246) || (_2241 > _2248))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2371 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2243, cbModelParam._m0[9u].z, fma(_2242, cbModelParam._m0[9u].y, _2241 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2243, cbModelParam._m0[10u].z, fma(_2242, cbModelParam._m0[10u].y, _2241 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2243, cbModelParam._m0[11u].z, fma(_2242, cbModelParam._m0[11u].y, _2241 * cbModelParam._m0[11u].x))), _1661);
            frontier_phi_13_35_ladder = _2371.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2371.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2371.x * cbModelParam._m0[1u].y;
        }
        _1741 = frontier_phi_13_35_ladder_2;
        _1743 = frontier_phi_13_35_ladder_1;
        _1745 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1729 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_850, _851, _852), _1661);
        _1741 = _1729.x * cbModelParam._m0[1u].y;
        _1743 = _1729.y * cbModelParam._m0[1u].y;
        _1745 = _1729.z * cbModelParam._m0[1u].y;
    }
    float _1749 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _677);
    float _1750 = isnan(_1749) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1749 : min(cbModelParam._m0[25u].w, _1749));
    float _1839;
    float _1841;
    float _1843;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1803 = fma(_914, cbModelParam._m0[21u].z, fma(_910, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _906)) + cbModelParam._m0[21u].w;
        float _1807 = fma(_914, cbModelParam._m0[22u].z, fma(_910, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _906)) + cbModelParam._m0[22u].w;
        float _1811 = fma(_914, cbModelParam._m0[23u].z, fma(_910, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _906)) + cbModelParam._m0[23u].w;
        float _1814 = fma(_852, cbModelParam._m0[21u].z, fma(_851, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _850));
        float _1817 = fma(_852, cbModelParam._m0[22u].z, fma(_851, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _850));
        float _1820 = fma(_852, cbModelParam._m0[23u].z, fma(_851, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _850));
        float _1982;
        if (_1814 > 0.0)
        {
            _1982 = abs((1.0 - _1803) / _1814);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1814 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1803 + 1.0) / _1814);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1982 = frontier_phi_25_21_ladder;
        }
        float _2261;
        if (_1817 > 0.0)
        {
            _2261 = abs((1.0 - _1807) / _1817);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1817 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1807 + 1.0) / _1817);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2261 = frontier_phi_37_32_ladder;
        }
        float _2474;
        if (_1820 > 0.0)
        {
            _2474 = abs((1.0 - _1811) / _1820);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1820 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1811 + 1.0) / _1820);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2474 = frontier_phi_46_43_ladder;
        }
        float _2476 = isnan(_2261) ? _1982 : (isnan(_1982) ? _2261 : min(_1982, _2261));
        float _2477 = isnan(_2474) ? _2476 : (isnan(_2476) ? _2474 : min(_2476, _2474));
        float _2481 = (_2477 * _1814) + _1803;
        float _2482 = (_2477 * _1817) + _1807;
        float _2483 = (_2477 * _1820) + _1811;
        float _2484 = _2477 * 9.9999997473787516355514526367188e-05;
        float _2485 = (-1.0) - _2484;
        float _2487 = _2484 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2483 > _2487) || ((_2483 < _2485) || ((_2482 > _2487) || ((_2482 < _2485) || ((_2481 < _2485) || (_2481 > _2487))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2682 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2483, cbModelParam._m0[17u].z, fma(_2482, cbModelParam._m0[17u].y, _2481 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2483, cbModelParam._m0[18u].z, fma(_2482, cbModelParam._m0[18u].y, _2481 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2483, cbModelParam._m0[19u].z, fma(_2482, cbModelParam._m0[19u].y, _2481 * cbModelParam._m0[19u].x))), _1750);
            frontier_phi_22_46_ladder = _2682.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2682.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2682.x * cbModelParam._m0[1u].z;
        }
        _1839 = frontier_phi_22_46_ladder_2;
        _1841 = frontier_phi_22_46_ladder_1;
        _1843 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1823 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_850, _851, _852), _1750);
        _1839 = _1823.x * cbModelParam._m0[1u].z;
        _1841 = _1823.y * cbModelParam._m0[1u].z;
        _1843 = _1823.z * cbModelParam._m0[1u].z;
    }
    float _1856 = (((_877 * _826) + _878) * _842) * ((cbModelParam._m0[1u].w * (_1839 - _1741)) + _1741);
    float _1858 = (((_877 * _828) + _878) * _842) * ((cbModelParam._m0[1u].w * (_1841 - _1743)) + _1743);
    float _1860 = (((_877 * _829) + _878) * _842) * ((cbModelParam._m0[1u].w * (_1843 - _1745)) + _1745);
    float _1863 = fma(_1860, cbSceneParam._m0[89u].z, fma(_1858, cbSceneParam._m0[89u].y, _1856 * cbSceneParam._m0[89u].x));
    float _1866 = fma(_1860, cbSceneParam._m0[90u].z, fma(_1858, cbSceneParam._m0[90u].y, _1856 * cbSceneParam._m0[90u].x));
    float _1869 = fma(_1860, cbSceneParam._m0[91u].z, fma(_1858, cbSceneParam._m0[91u].y, _1856 * cbSceneParam._m0[91u].x));
    vec4 _1877 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_761, _762));
    float _1879 = _1877.w;
    float _1891 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1879);
    float _1892 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1879);
    float _1893 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1879);
    uvec4 _1897 = floatBitsToUint(cbInstanceData._m0[_245 + 5u]);
    uint _1899 = _1897.x * 14u;
    uint _1900 = _1899 + 13u;
    float _1907 = _842 + (-1.0);
    float _1912 = (cbLight._m0[_1900].x * _1907) + 1.0;
    float _1913 = (cbLight._m0[_1900].y * _1907) + 1.0;
    float _1914 = (cbLight._m0[_1900].z * _1907) + 1.0;
    float _1915 = (cbLight._m0[_1900].w * _1907) + 1.0;
    uint _1916 = _1899 + 5u;
    float _1922 = isnan(1.0) ? _1913 : (isnan(_1913) ? 1.0 : min(_1913, 1.0));
    uint _1926 = _1899 + 4u;
    float _1936 = isnan(1.0) ? _1912 : (isnan(_1912) ? 1.0 : min(_1912, 1.0));
    uint _1940 = _1899 | 1u;
    float _1951 = dot(vec3(cbLight._m0[_1899].xyz), vec3(_674, _675, _676));
    float _1954 = dot(vec3(cbLight._m0[_1940].xyz), vec3(_674, _675, _676));
    float _4130 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
    float _4141 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1959 = (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * 0.3183098733425140380859375;
    float _1961 = (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * 0.3183098733425140380859375;
    float _1968 = ((cbLight._m0[_1916].x * _1922) * _1961) + (((cbLight._m0[_1926].x * _1891) * _1936) * _1959);
    float _1969 = ((_1922 * cbLight._m0[_1916].y) * _1961) + (((cbLight._m0[_1926].y * _1892) * _1936) * _1959);
    float _1970 = ((_1922 * cbLight._m0[_1916].z) * _1961) + (((cbLight._m0[_1926].z * _1893) * _1936) * _1959);
    uvec4 _1974 = floatBitsToUint(cbLight._m0[_1899 + 12u]);
    bool _1976 = _1974.x == 0u;
    float _1987;
    float _1989;
    float _1991;
    if (_1976)
    {
        _1987 = _1968;
        _1989 = _1969;
        _1991 = _1970;
    }
    else
    {
        uint _1995 = _1899 + 6u;
        float _2011 = (dot(vec3(cbLight._m0[_1899 + 2u].xyz), vec3(_674, _675, _676)) * 0.5) + 0.5;
        float _2012 = _2011 * _2011;
        float _4152 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
        float _2013 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _2014 = isnan(1.0) ? _1914 : (isnan(_1914) ? 1.0 : min(_1914, 1.0));
        _1987 = (((cbLight._m0[_1995].x * 0.3183098733425140380859375) * _2013) * _2014) + _1968;
        _1989 = (((cbLight._m0[_1995].y * 0.3183098733425140380859375) * _2013) * _2014) + _1969;
        _1991 = (((cbLight._m0[_1995].z * 0.3183098733425140380859375) * _2013) * _2014) + _1970;
    }
    bool _1994 = _1974.y == 0u;
    float _2032;
    float _2034;
    float _2036;
    if (_1994)
    {
        _2032 = _1987;
        _2034 = _1989;
        _2036 = _1991;
    }
    else
    {
        uint _2205 = _1899 + 7u;
        float _2221 = (dot(vec3(cbLight._m0[_1899 + 3u].xyz), vec3(_674, _675, _676)) * 0.5) + 0.5;
        float _2222 = _2221 * _2221;
        float _4168 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        float _2223 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _2224 = isnan(1.0) ? _1915 : (isnan(_1915) ? 1.0 : min(_1915, 1.0));
        _2032 = (((cbLight._m0[_2205].x * 0.3183098733425140380859375) * _2223) * _2224) + _1987;
        _2034 = (((cbLight._m0[_2205].y * 0.3183098733425140380859375) * _2223) * _2224) + _1989;
        _2036 = (((cbLight._m0[_2205].z * 0.3183098733425140380859375) * _2223) * _2224) + _1991;
    }
    uint _2039 = _1899 + 8u;
    float _2052 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1899].w)) * _677) * 0.949999988079071044921875);
    float _2053 = _2052 * _2052;
    float _2054 = cbLight._m0[_1899].x + _753;
    float _2055 = cbLight._m0[_1899].y + _754;
    float _2056 = cbLight._m0[_1899].z + _755;
    float _2060 = inversesqrt(dot(vec3(_2054, _2055, _2056), vec3(_2054, _2055, _2056)));
    float _2061 = _2060 * _2054;
    float _2062 = _2060 * _2055;
    float _2063 = _2060 * _2056;
    float _2064 = dot(vec3(_674, _675, _676), vec3(cbLight._m0[_1899].xyz));
    float _4184 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2067 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    float _4195 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _2068 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _2069 = dot(vec3(_674, _675, _676), vec3(_2061, _2062, _2063));
    float _4206 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _2072 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
    float _2073 = dot(vec3(cbLight._m0[_1899].xyz), vec3(_2061, _2062, _2063));
    float _4217 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2077 = _2053 * _2053;
    float _2081 = ((_2072 * _2072) * (_2077 + (-1.0))) + 1.0;
    float _2089 = exp2(log2(1.0 - (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0)))) * 5.0);
    float _2090 = 0.959999978542327880859375 - _823;
    float _2092 = 0.959999978542327880859375 - _824;
    float _2093 = 0.959999978542327880859375 - _825;
    float _2100 = 1.0 - _2053;
    float _2111 = (0.5 / (((_2068 * ((_2067 * _2100) + _2053)) + 9.9999999392252902907785028219223e-09) + (((_2068 * _2100) + _2053) * _2067))) * _2067;
    float _4228 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2113 = (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_2077 / ((_2081 * _2081) * 3.141590118408203125));
    uint _2127 = _1899 + 9u;
    float _2138 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1940].w)) * _677) * 0.949999988079071044921875);
    float _2139 = _2138 * _2138;
    float _2140 = cbLight._m0[_1940].x + _753;
    float _2141 = cbLight._m0[_1940].y + _754;
    float _2142 = cbLight._m0[_1940].z + _755;
    float _2146 = inversesqrt(dot(vec3(_2140, _2141, _2142), vec3(_2140, _2141, _2142)));
    float _2147 = _2146 * _2140;
    float _2148 = _2146 * _2141;
    float _2149 = _2146 * _2142;
    float _2150 = dot(vec3(_674, _675, _676), vec3(cbLight._m0[_1940].xyz));
    float _4239 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2153 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
    float _2154 = dot(vec3(_674, _675, _676), vec3(_2147, _2148, _2149));
    float _4250 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
    float _2157 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    float _2158 = dot(vec3(cbLight._m0[_1940].xyz), vec3(_2147, _2148, _2149));
    float _4261 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2162 = _2139 * _2139;
    float _2166 = ((_2157 * _2157) * (_2162 + (-1.0))) + 1.0;
    float _2173 = exp2(log2(1.0 - (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0)))) * 5.0);
    float _2180 = 1.0 - _2139;
    float _2190 = (0.5 / (((_2068 * ((_2153 * _2180) + _2139)) + 9.9999999392252902907785028219223e-09) + (((_2068 * _2180) + _2139) * _2153))) * _2153;
    float _4272 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2192 = (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_2162 / ((_2166 * _2166) * 3.141590118408203125));
    float _2202 = (((((_2173 * _2090) + _826) * cbLight._m0[_2127].x) * _2192) * _1922) + ((((cbLight._m0[_2039].x * _1891) * ((_2089 * _2090) + _826)) * _2113) * _1936);
    float _2203 = (((((_2173 * _2092) + _828) * cbLight._m0[_2127].y) * _2192) * _1922) + ((((cbLight._m0[_2039].y * _1892) * ((_2089 * _2092) + _828)) * _2113) * _1936);
    float _2204 = (((((_2173 * _2093) + _829) * cbLight._m0[_2127].z) * _2192) * _1922) + ((((cbLight._m0[_2039].z * _1893) * ((_2089 * _2093) + _829)) * _2113) * _1936);
    float _2266;
    float _2268;
    float _2270;
    if (_1976)
    {
        _2266 = _2202;
        _2268 = _2203;
        _2270 = _2204;
    }
    else
    {
        uint _2272 = _1899 + 2u;
        uint _2276 = _1899 + 10u;
        float _2290 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2272].w)) * _677) * 0.949999988079071044921875);
        float _2291 = _2290 * _2290;
        float _2292 = cbLight._m0[_2272].x + _753;
        float _2293 = cbLight._m0[_2272].y + _754;
        float _2294 = cbLight._m0[_2272].z + _755;
        float _2298 = inversesqrt(dot(vec3(_2292, _2293, _2294), vec3(_2292, _2293, _2294)));
        float _2299 = _2298 * _2292;
        float _2300 = _2298 * _2293;
        float _2301 = _2298 * _2294;
        float _2302 = dot(vec3(_674, _675, _676), vec3(cbLight._m0[_2272].xyz));
        float _4283 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2305 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _2306 = dot(vec3(_674, _675, _676), vec3(_2299, _2300, _2301));
        float _4294 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
        float _2309 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _2310 = dot(vec3(cbLight._m0[_2272].xyz), vec3(_2299, _2300, _2301));
        float _4305 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
        float _2314 = _2291 * _2291;
        float _2318 = ((_2309 * _2309) * (_2314 + (-1.0))) + 1.0;
        float _2325 = exp2(log2(1.0 - (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0)))) * 5.0);
        float _2332 = 1.0 - _2291;
        float _2342 = (0.5 / (((_2068 * ((_2305 * _2332) + _2291)) + 9.9999999392252902907785028219223e-09) + (((_2068 * _2332) + _2291) * _2305))) * _2305;
        float _4316 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2344 = (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2314 / ((_2318 * _2318) * 3.141590118408203125));
        float _2345 = isnan(1.0) ? _1914 : (isnan(_1914) ? 1.0 : min(_1914, 1.0));
        _2266 = (((((_2325 * _2090) + _826) * cbLight._m0[_2276].x) * _2344) * _2345) + _2202;
        _2268 = (((((_2325 * _2092) + _828) * cbLight._m0[_2276].y) * _2344) * _2345) + _2203;
        _2270 = (((((_2325 * _2093) + _829) * cbLight._m0[_2276].z) * _2344) * _2345) + _2204;
    }
    float _2380;
    float _2382;
    float _2384;
    if (_1994)
    {
        _2380 = _2266;
        _2382 = _2268;
        _2384 = _2270;
    }
    else
    {
        uint _2391 = _1899 + 3u;
        uint _2395 = _1899 + 11u;
        float _2409 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2391].w)) * _677) * 0.949999988079071044921875);
        float _2410 = _2409 * _2409;
        float _2411 = cbLight._m0[_2391].x + _753;
        float _2412 = cbLight._m0[_2391].y + _754;
        float _2413 = cbLight._m0[_2391].z + _755;
        float _2417 = inversesqrt(dot(vec3(_2411, _2412, _2413), vec3(_2411, _2412, _2413)));
        float _2418 = _2417 * _2411;
        float _2419 = _2417 * _2412;
        float _2420 = _2417 * _2413;
        float _2421 = dot(vec3(_674, _675, _676), vec3(cbLight._m0[_2391].xyz));
        float _4332 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        float _2424 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _2425 = dot(vec3(_674, _675, _676), vec3(_2418, _2419, _2420));
        float _4343 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2428 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _2429 = dot(vec3(cbLight._m0[_2391].xyz), vec3(_2418, _2419, _2420));
        float _4354 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2433 = _2410 * _2410;
        float _2437 = ((_2428 * _2428) * (_2433 + (-1.0))) + 1.0;
        float _2444 = exp2(log2(1.0 - (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0)))) * 5.0);
        float _2451 = 1.0 - _2410;
        float _2461 = (0.5 / (((_2068 * ((_2424 * _2451) + _2410)) + 9.9999999392252902907785028219223e-09) + (((_2068 * _2451) + _2410) * _2424))) * _2424;
        float _4365 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2463 = (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_2433 / ((_2437 * _2437) * 3.141590118408203125));
        float _2464 = isnan(1.0) ? _1915 : (isnan(_1915) ? 1.0 : min(_1915, 1.0));
        _2380 = (((((_2444 * _2090) + _826) * cbLight._m0[_2395].x) * _2463) * _2464) + _2266;
        _2382 = (((((_2444 * _2092) + _828) * cbLight._m0[_2395].y) * _2463) * _2464) + _2268;
        _2384 = (((((_2444 * _2093) + _829) * cbLight._m0[_2395].z) * _2463) * _2464) + _2270;
    }
    float _2599;
    float _2601;
    float _2603;
    float _2605;
    float _2607;
    float _2609;
    if (_1897.y == 0u)
    {
        float _2539 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2540 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2539;
        float _2541 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2539;
        float _2542 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2539;
        uvec4 _2554 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2555 = _2554.x;
        uint _2566 = uint((float(_2554.y) * floor(float(uint(cbSceneParam._m0[85u].y * _762) / _2555))) + floor(float(uint(cbSceneParam._m0[85u].x * _761) / _2555)));
        float _2576 = (log2(_2542 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2577 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        uint _2580 = uint(isnan(14.0) ? _2577 : (isnan(_2577) ? 14.0 : min(_2577, 14.0)));
        uvec4 _2585 = texelFetch(g_lightClusterGridBuffer, int(((_2580 << 2u) + (_2566 << 6u)) >> 2u));
        uint _2586 = _2585.x;
        uint _2587 = _2554.z;
        float _2687;
        float _2689;
        float _2691;
        float _2693;
        float _2695;
        float _2697;
        if (((((1u << ((_2587 >> 4u) & 15u)) + 4294967295u) & _2586) == 0u) || ((_2587 & 240u) == 0u))
        {
            _2687 = 0.0;
            _2689 = 0.0;
            _2691 = 0.0;
            _2693 = 0.0;
            _2695 = 0.0;
            _2697 = 0.0;
        }
        else
        {
            float _2688;
            float _2690;
            float _2692;
            float _2694;
            float _2696;
            float _2698;
            float _2831 = 0.0;
            float _2832 = 0.0;
            float _2833 = 0.0;
            float _2834 = 0.0;
            float _2835 = 0.0;
            float _2836 = 0.0;
            uint _2837 = 0u;
            uint _2846;
            bool _2847;
            for (;;)
            {
                _2846 = texelFetch(g_lightClassification, int((((_2580 << 5u) + (_2566 << 9u)) + (_2837 << 2u)) >> 2u)).x;
                _2847 = _2846 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2847)
                {
                    frontier_phi_61_pred = _2831;
                    frontier_phi_61_pred_1 = _2836;
                    frontier_phi_61_pred_2 = _2835;
                    frontier_phi_61_pred_3 = _2834;
                    frontier_phi_61_pred_4 = _2833;
                    frontier_phi_61_pred_5 = _2832;
                }
                else
                {
                    float _2955;
                    float _2956;
                    float _2957;
                    float _2958;
                    float _2959;
                    float _2960;
                    uint _2961;
                    _2955 = _2831;
                    _2956 = _2832;
                    _2957 = _2833;
                    _2958 = _2834;
                    _2959 = _2835;
                    _2960 = _2836;
                    _2961 = _2846;
                    float _2887;
                    float _2888;
                    float _2889;
                    float _2890;
                    float _2891;
                    float _2892;
                    for (;;)
                    {
                        uint _2965 = uint(findLSB(_2961)) + (_2837 << 5u);
                        uint _2962 = (_2961 + 4294967295u) & _2961;
                        uint _2967 = _2965 * 48u;
                        vec4 _2981 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2967)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 3u)).x));
                        uint _2987 = (_2965 * 48u) + 4u;
                        vec4 _3000 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2987)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 3u)).x));
                        uint _3006 = (_2965 * 48u) + 8u;
                        vec3 _3017 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3006)).x, texelFetch(g_PointLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3006 + 2u)).x));
                        float _3021 = _2981.x - _2540;
                        float _3022 = _2981.y - _2541;
                        float _3023 = _2981.z - _2542;
                        float _3024 = dot(vec3(_3021, _3022, _3023), vec3(_3021, _3022, _3023));
                        float _3027 = inversesqrt(_3024);
                        float _3028 = _3027 * _3021;
                        float _3029 = _3027 * _3022;
                        float _3030 = _3027 * _3023;
                        float _3031 = dot(vec3(_783, _786, _789), vec3(_3028, _3029, _3030));
                        float _3036 = 1.0 - (_3024 * _2981.w);
                        float _4391 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                        float _3037 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
                        float _3038 = sqrt(_3024) * _3000.w;
                        float _3041 = 1.39999997615814208984375 / (_3038 + 1.39999997615814208984375);
                        float _3042 = _3041 * _3041;
                        float _3045 = ((1.0 - _3042) * _3031) + _3042;
                        float _3048 = _3038 * _3038;
                        float _3052 = ((isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0))) * _3037) / ((_3048 * 0.699999988079071044921875) + 1.0);
                        float _3056 = (-0.0) - _2540;
                        float _3057 = (-0.0) - _2541;
                        float _3058 = (-0.0) - _2542;
                        float _3062 = inversesqrt(dot(vec3(_3056, _3057, _3058), vec3(_3056, _3057, _3058)));
                        float _3063 = _3062 * _3056;
                        float _3064 = _3062 * _3057;
                        float _3065 = _3062 * _3058;
                        float _3073 = exp2(log2(1.0 / ((_3048 * 3.5) + 5.0)) * 0.25);
                        float _3074 = 1.0 - _858;
                        float _3081 = sqrt(1.0 - ((1.0 - (_3074 * _3074)) * (1.0 - (_3073 * _3073))));
                        float _3082 = _3081 * _3081;
                        float _3083 = _3082 * _3082;
                        float _3084 = _3063 + _3028;
                        float _3085 = _3064 + _3029;
                        float _3086 = _3065 + _3030;
                        float _3090 = inversesqrt(dot(vec3(_3084, _3085, _3086), vec3(_3084, _3085, _3086)));
                        float _3094 = dot(vec3(_783, _786, _789), vec3(_3063, _3064, _3065));
                        float _4407 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                        float _3097 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
                        float _3098 = dot(vec3(_783, _786, _789), vec3(_3090 * _3084, _3090 * _3085, _3090 * _3086));
                        float _4418 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                        float _3101 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
                        float _3105 = ((_3101 * _3101) * (_3083 + (-1.0))) + 1.0;
                        float _3106 = _3041 * _3082;
                        float _3107 = _3106 * _3106;
                        float _3110 = ((1.0 - _3107) * _3031) + _3107;
                        float _4429 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                        float _3111 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
                        float _3112 = 1.0 - _3082;
                        float _3122 = (0.5 / (((_3111 * ((_3097 * _3112) + _3082)) + 9.9999999392252902907785028219223e-09) + (((_3111 * _3112) + _3082) * _3097))) * _3111;
                        float _4440 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
                        float _3133 = (((_3083 * 3.1415927410125732421875) * (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0)))) / ((_3105 * _3105) * ((_3048 * 2.1991131305694580078125) + 3.141590118408203125))) * _3037;
                        _2890 = (_3052 * _3000.x) + _2958;
                        _2891 = (_3052 * _3000.y) + _2959;
                        _2892 = (_3052 * _3000.z) + _2960;
                        _2887 = (_3133 * _3017.x) + _2955;
                        _2888 = (_3133 * _3017.y) + _2956;
                        _2889 = (_3133 * _3017.z) + _2957;
                        if (_2962 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2955 = _2887;
                            _2956 = _2888;
                            _2957 = _2889;
                            _2958 = _2890;
                            _2959 = _2891;
                            _2960 = _2892;
                            _2961 = _2962;
                        }
                    }
                    frontier_phi_61_pred = _2887;
                    frontier_phi_61_pred_1 = _2892;
                    frontier_phi_61_pred_2 = _2891;
                    frontier_phi_61_pred_3 = _2890;
                    frontier_phi_61_pred_4 = _2889;
                    frontier_phi_61_pred_5 = _2888;
                }
                _2688 = frontier_phi_61_pred;
                _2698 = frontier_phi_61_pred_1;
                _2696 = frontier_phi_61_pred_2;
                _2694 = frontier_phi_61_pred_3;
                _2692 = frontier_phi_61_pred_4;
                _2690 = frontier_phi_61_pred_5;
                uint _2838 = _2837 + 1u;
                if (_2838 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2831 = _2688;
                    _2832 = _2690;
                    _2833 = _2692;
                    _2834 = _2694;
                    _2835 = _2696;
                    _2836 = _2698;
                    _2837 = _2838;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2687 = _2688;
            _2689 = _2690;
            _2691 = _2692;
            _2693 = _2694;
            _2695 = _2696;
            _2697 = _2698;
        }
        uvec4 _2701 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2702 = _2701.z;
        uint _2704 = (_2702 >> 8u) & 15u;
        float _2799;
        float _2801;
        float _2803;
        float _2805;
        float _2807;
        float _2809;
        if (((4294967295u << _2704) & _2586) == 0u)
        {
            _2799 = _2687;
            _2801 = _2689;
            _2803 = _2691;
            _2805 = _2693;
            _2807 = _2695;
            _2809 = _2697;
        }
        else
        {
            float _2824 = inversesqrt(dot(vec3(_2540, _2541, _2542), vec3(_2540, _2541, _2542)));
            float _2825 = _2824 * _2540;
            float _2826 = _2824 * _2541;
            float _2827 = _2824 * _2542;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2704 < ((_2702 >> 12u) & 15u))
            {
                float _2800;
                float _2802;
                float _2804;
                float _2806;
                float _2808;
                float _2810;
                float _2938 = _2687;
                float _2939 = _2689;
                float _2940 = _2691;
                float _2941 = _2693;
                float _2942 = _2695;
                float _2943 = _2697;
                uint _2944 = _2704;
                uint _2953;
                bool _2954;
                for (;;)
                {
                    _2953 = texelFetch(g_lightClassification, int((((_2580 << 5u) + (_2566 << 9u)) + (_2944 << 2u)) >> 2u)).x;
                    _2954 = _2953 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2954)
                    {
                        frontier_phi_67_pred = _2941;
                        frontier_phi_67_pred_1 = _2942;
                        frontier_phi_67_pred_2 = _2943;
                        frontier_phi_67_pred_3 = _2940;
                        frontier_phi_67_pred_4 = _2939;
                        frontier_phi_67_pred_5 = _2938;
                    }
                    else
                    {
                        float _3138;
                        float _3139;
                        float _3140;
                        float _3141;
                        float _3142;
                        float _3143;
                        float _3432;
                        float _3433;
                        float _3434;
                        float _3435;
                        float _3436;
                        float _3437;
                        float _3151 = _2938;
                        float _3152 = _2939;
                        float _3153 = _2940;
                        float _3154 = _2941;
                        float _3155 = _2942;
                        float _3156 = _2943;
                        uint _3157 = _2953;
                        uint _3158;
                        vec4 _3183;
                        float _3184;
                        vec4 _3199;
                        vec3 _3211;
                        vec4 _3227;
                        vec4 _3242;
                        float _3288;
                        bool _3289;
                        for (;;)
                        {
                            uint _3168 = ((_2944 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3157));
                            _3158 = (_3157 + 4294967295u) & _3157;
                            uint _3170 = _3168 * 40u;
                            _3183 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3170)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 3u)).x));
                            _3184 = _3183.w;
                            uint _3186 = (_3168 * 40u) + 4u;
                            _3199 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3186)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 3u)).x));
                            uint _3201 = (_3168 * 40u) + 8u;
                            _3211 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3201)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 2u)).x));
                            uint _3214 = (_3168 * 40u) + 16u;
                            _3227 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 3u)).x));
                            uint _3229 = (_3168 * 40u) + 20u;
                            _3242 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3229)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 3u)).x));
                            uint _3244 = (_3168 * 40u) + 24u;
                            vec4 _3257 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3244)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 3u)).x));
                            uint _3263 = (_3168 * 40u) + 28u;
                            vec4 _3276 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3263)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 3u)).x));
                            _3288 = fma(_2542, _3276.z, fma(_2541, _3276.y, _3276.x * _2540)) + _3276.w;
                            _3289 = !((fma(_2542, _3257.z, fma(_2541, _3257.y, _3257.x * _2540)) + _3257.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3289)
                            {
                                float _3316 = _3183.x - _2540;
                                float _3317 = _3183.y - _2541;
                                float _3318 = _3183.z - _2542;
                                float _3319 = dot(vec3(_3316, _3317, _3318), vec3(_3316, _3317, _3318));
                                float _3322 = inversesqrt(_3319);
                                float _3323 = _3322 * _3316;
                                float _3324 = _3322 * _3317;
                                float _3325 = _3322 * _3318;
                                float _3329 = 1.0 - (_3319 / (_3184 * _3184));
                                float _4451 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                                float _3330 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
                                float _3334 = sqrt(_3319) * _3199.w;
                                float _3336 = 1.39999997615814208984375 / (_3334 + 1.39999997615814208984375);
                                float _3337 = _3336 * _3336;
                                float _3340 = ((1.0 - _3337) * dot(vec3(_3323, _3324, _3325), vec3(_783, _786, _789))) + _3337;
                                float _3343 = _3334 * _3334;
                                float _3347 = (fma(_2542, _3227.z, fma(_2541, _3227.y, _3227.x * _2540)) + _3227.w) / _3288;
                                float _3348 = (fma(_2542, _3242.z, fma(_2541, _3242.y, _3242.x * _2540)) + _3242.w) / _3288;
                                float _3352 = 1.0 - dot(vec2(_3347, _3348), vec2(_3347, _3348));
                                float _4467 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                                float _3353 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
                                float _3354 = _3353 * (((isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0))) * _3330) / ((_3343 * 0.699999988079071044921875) + 1.0));
                                float _3366 = exp2(log2(1.0 / ((_3343 * 3.5) + 5.0)) * 0.25);
                                float _3367 = 1.0 - _858;
                                float _3374 = sqrt(1.0 - ((1.0 - (_3367 * _3367)) * (1.0 - (_3366 * _3366))));
                                float _3375 = _3374 * _3374;
                                float _3376 = _3375 * _3375;
                                float _3377 = _3323 - _2825;
                                float _3378 = _3324 - _2826;
                                float _3379 = _3325 - _2827;
                                float _3383 = inversesqrt(dot(vec3(_3377, _3378, _3379), vec3(_3377, _3378, _3379)));
                                float _3387 = dot(vec3(_783, _786, _789), vec3((-0.0) - _2825, (-0.0) - _2826, (-0.0) - _2827));
                                float _4478 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                                float _3390 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
                                float _3391 = dot(vec3(_783, _786, _789), vec3(_3383 * _3377, _3383 * _3378, _3383 * _3379));
                                float _4489 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                                float _3394 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
                                float _3398 = ((_3394 * _3394) * (_3376 + (-1.0))) + 1.0;
                                float _3399 = _3336 * _3375;
                                float _3400 = _3399 * _3399;
                                float _3406 = ((1.0 - _3400) * dot(vec3(_783, _786, _789), vec3(_3323, _3324, _3325))) + _3400;
                                float _4500 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                                float _3407 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
                                float _3408 = 1.0 - _3375;
                                float _3418 = (0.5 / (((_3407 * ((_3390 * _3408) + _3375)) + 9.9999999392252902907785028219223e-09) + (((_3407 * _3408) + _3375) * _3390))) * _3407;
                                float _4511 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0));
                                float _3428 = (_3353 * _3330) * (((_3376 * 3.1415927410125732421875) * (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0)))) / ((_3398 * _3398) * ((_3343 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3428 * _3211.x;
                                frontier_phi_73_pred_1 = _3428 * _3211.y;
                                frontier_phi_73_pred_2 = _3354 * _3199.z;
                                frontier_phi_73_pred_3 = _3354 * _3199.y;
                                frontier_phi_73_pred_4 = _3354 * _3199.x;
                                frontier_phi_73_pred_5 = _3428 * _3211.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3432 = frontier_phi_73_pred;
                            _3433 = frontier_phi_73_pred_1;
                            _3437 = frontier_phi_73_pred_2;
                            _3436 = frontier_phi_73_pred_3;
                            _3435 = frontier_phi_73_pred_4;
                            _3434 = frontier_phi_73_pred_5;
                            _3141 = _3435 + _3154;
                            _3142 = _3436 + _3155;
                            _3143 = _3437 + _3156;
                            _3138 = _3432 + _3151;
                            _3139 = _3433 + _3152;
                            _3140 = _3434 + _3153;
                            if (_3158 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3151 = _3138;
                                _3152 = _3139;
                                _3153 = _3140;
                                _3154 = _3141;
                                _3155 = _3142;
                                _3156 = _3143;
                                _3157 = _3158;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3141;
                        frontier_phi_67_pred_1 = _3142;
                        frontier_phi_67_pred_2 = _3143;
                        frontier_phi_67_pred_3 = _3140;
                        frontier_phi_67_pred_4 = _3139;
                        frontier_phi_67_pred_5 = _3138;
                    }
                    _2806 = frontier_phi_67_pred;
                    _2808 = frontier_phi_67_pred_1;
                    _2810 = frontier_phi_67_pred_2;
                    _2804 = frontier_phi_67_pred_3;
                    _2802 = frontier_phi_67_pred_4;
                    _2800 = frontier_phi_67_pred_5;
                    uint _2945 = _2944 + 1u;
                    if (_2945 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2938 = _2800;
                        _2939 = _2802;
                        _2940 = _2804;
                        _2941 = _2806;
                        _2942 = _2808;
                        _2943 = _2810;
                        _2944 = _2945;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2808;
                frontier_phi_55_56_ladder_1 = _2810;
                frontier_phi_55_56_ladder_2 = _2806;
                frontier_phi_55_56_ladder_3 = _2804;
                frontier_phi_55_56_ladder_4 = _2802;
                frontier_phi_55_56_ladder_5 = _2800;
            }
            else
            {
                frontier_phi_55_56_ladder = _2695;
                frontier_phi_55_56_ladder_1 = _2697;
                frontier_phi_55_56_ladder_2 = _2693;
                frontier_phi_55_56_ladder_3 = _2691;
                frontier_phi_55_56_ladder_4 = _2689;
                frontier_phi_55_56_ladder_5 = _2687;
            }
            _2799 = frontier_phi_55_56_ladder_5;
            _2801 = frontier_phi_55_56_ladder_4;
            _2803 = frontier_phi_55_56_ladder_3;
            _2805 = frontier_phi_55_56_ladder_2;
            _2807 = frontier_phi_55_56_ladder;
            _2809 = frontier_phi_55_56_ladder_1;
        }
        float _2814 = isnan(1.0) ? _842 : (isnan(_842) ? 1.0 : min(_842, 1.0));
        _2599 = (_2814 * _2805) + _2032;
        _2601 = (_2814 * _2807) + _2034;
        _2603 = (_2814 * _2809) + _2036;
        _2605 = ((_2799 * _826) * _2814) + _2380;
        _2607 = ((_2801 * _828) * _2814) + _2382;
        _2609 = ((_2803 * _829) * _2814) + _2384;
    }
    else
    {
        _2599 = _2032;
        _2601 = _2034;
        _2603 = _2036;
        _2605 = _2380;
        _2607 = _2382;
        _2609 = _2384;
    }
    float _4527 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _4538 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _4549 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    uint _2629 = _245 + 6u;
    float _2637 = _761 / cbSceneParam._m0[86u].x;
    float _2638 = _762 / cbSceneParam._m0[86u].y;
    vec4 _2652 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2637, _2638, (log2((isnan(cbSceneParam._m0[77u].w) ? _696 : (isnan(_696) ? cbSceneParam._m0[77u].w : min(_696, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2654 = _2652.x;
    float _2655 = _2652.y;
    float _2656 = _2652.z;
    float _2657 = _2652.w;
    float _2749;
    float _2751;
    float _2753;
    float _2755;
    if (_696 > cbSceneParam._m0[78u].w)
    {
        float _2712 = isnan(_696) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _696 : min(cbSceneParam._m0[80u].w, _696));
        float _2713 = _2712 / _696;
        float _2724 = _2713 * _746;
        float _2725 = _747 * _2713;
        float _2726 = (-0.0) - _2725;
        float _2727 = _2713 * _748;
        float _2729 = (cbSceneParam._m0[77u].w * _2726) / _2712;
        float _2730 = _2729 + cbSceneParam._m0[79u].w;
        float _2731 = cbSceneParam._m0[79u].w - _2725;
        float _2737 = sqrt(((_2724 * _2724) + (_2725 * _2725)) + (_2727 * _2727));
        float _2740 = (1.0 - (cbSceneParam._m0[77u].w / _2712)) * _2737;
        float _2745 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2747 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2900;
        if (abs((_2726 - _2729) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2900 = ((((_2730 > 0.0) ? exp2(_2745 * _2730) : (2.0 - exp2(_2747 * _2730))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2740;
        }
        else
        {
            float _2860 = 1.0 / cbSceneParam._m0[80u].x;
            float _2861 = isnan(_2731) ? _2730 : (isnan(_2730) ? _2731 : max(_2730, _2731));
            float _2862 = isnan(_2731) ? _2730 : (isnan(_2730) ? _2731 : min(_2730, _2731));
            float _2871 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : min(_2861, 0.0));
            float _2872 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : min(_2862, 0.0));
            _2900 = ((abs(_2737 / _2726) * cbSceneParam._m0[80u].y) * ((((_2871 - _2872) * 2.0) - ((exp2(_2745 * (isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0)))) - exp2(_2745 * (isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0))))) * _2860)) - ((exp2(_2747 * _2871) - exp2(_2747 * _2872)) * _2860))) + (_2740 * cbSceneParam._m0[80u].z);
        }
        vec4 _2902 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2637, _2638, 1.0), 0.0);
        float _2911 = exp2((_2900 * (-1.44269502162933349609375)) * (1.0 - _2902.w));
        float _2912 = log2(_2911);
        float _2928 = log2(_2657);
        _2749 = (exp2(_2928 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2912 * cbSceneParam._m0[78u].x)) * _2902.x) / cbSceneParam._m0[78u].x)) + _2654;
        _2751 = (exp2(_2928 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2912 * cbSceneParam._m0[78u].y)) * _2902.y) / cbSceneParam._m0[78u].y)) + _2655;
        _2753 = (exp2(_2928 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2912 * cbSceneParam._m0[78u].z)) * _2902.z) / cbSceneParam._m0[78u].z)) + _2656;
        _2755 = _2911 * _2657;
    }
    else
    {
        _2749 = _2654;
        _2751 = _2655;
        _2753 = _2656;
        _2755 = _2657;
    }
    float _2767 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2768 = _2767 == 3.0;
    float _2769 = log2(_2755);
    float _2776 = exp2(_2769 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * (_2599 + ((isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))) * _842))) + ((_2605 + ((isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0))) * _1650)) * cbPerFrame._m0[3u].x));
    float _2777 = exp2(_2769 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0))) * (_2601 + ((isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0))) * _842))) + ((_2607 + ((isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))) * _1650)) * cbPerFrame._m0[3u].x));
    float _2778 = exp2(_2769 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * (_2603 + ((isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0))) * _842))) + ((_2609 + ((isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))) * _1650)) * cbPerFrame._m0[3u].x));
    float _2787 = (_2767 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2787 * (_2768 ? _2776 : (_2776 + (cbSceneParam._m0[72u].w * _2749)));
    SV_Target.y = _2787 * (_2768 ? _2777 : (_2777 + (cbSceneParam._m0[72u].w * _2751)));
    SV_Target.z = _2787 * (_2768 ? _2778 : (_2778 + (cbSceneParam._m0[72u].w * _2753)));
    SV_Target.w = cbInstanceData._m0[_2629].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2629].w;
}


