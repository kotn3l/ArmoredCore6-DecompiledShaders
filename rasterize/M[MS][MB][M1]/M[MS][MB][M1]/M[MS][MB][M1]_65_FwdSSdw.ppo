#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1169;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _249 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _251 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _252 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3522 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3533 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _3544 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    uint _262 = uint(roundEven(NORMAL.w)) * 13u;
    uint _267 = _262 + 1u;
    uint _271 = _262 + 2u;
    float _280 = sqrt(((cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x)) + (cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x));
    float _281 = _280 * TEXCOORD.z;
    float _282 = _280 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _281) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _282) + cbTextureTilingScale._m0[13u].w));
    vec4 _319 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _324 = _319.x * cbMtdParam._m0[11u].x;
    float _325 = _319.y * cbMtdParam._m0[11u].y;
    float _326 = _319.z * cbMtdParam._m0[11u].z;
    vec4 _345 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _281) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _282) + cbTextureTilingScale._m0[5u].w));
    vec4 _381 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _383 = _381.x;
    float _395 = dot(vec4(_383, _381.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _412 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_383 - _395) * cbMtdParam._m0[24u].y) + _395) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3555 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _413 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
    float _420 = (_413 * ((_345.x * cbMtdParam._m0[12u].x) - _324)) + _324;
    float _421 = (_413 * ((_345.y * cbMtdParam._m0[12u].y) - _325)) + _325;
    float _422 = (_413 * ((_345.z * cbMtdParam._m0[12u].z) - _326)) + _326;
    float _426 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _295.x) * _420;
    float _429 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _295.y) * _421;
    float _432 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _295.z) * _422;
    float _439 = ((_420 - _426) * (isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0)))) + _426;
    float _440 = ((_421 - _429) * (isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0)))) + _429;
    float _441 = ((_422 - _432) * (isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0)))) + _432;
    vec4 _454 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _281) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _282) + cbTextureTilingScale._m0[20u].w));
    vec4 _479 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _281) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _282) + cbTextureTilingScale._m0[4u].w));
    vec4 _496 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _498 = _496.x;
    float _499 = _496.y;
    float _500 = _496.z;
    float _509 = ((_479.z - _500) * _413) + _500;
    float _512 = ((((_479.x - _498) * _413) + _498) * 2.0) + (-1.0);
    float _513 = ((((_479.y - _499) * _413) + _499) * 2.0) + (-1.0);
    float _514 = dot(vec2(_512, _513), vec2(_512, _513));
    float _3566 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _519 = sqrt(1.0 - (isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0))));
    vec4 _541 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _553 = (_512 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_454.x * 2.0) + (-1.0)))) + (((_541.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _554 = (_513 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_454.y * 2.0) + (-1.0)))) + (((_541.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _566 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _580 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _582 = _580.x;
    float _600 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _281) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _282) + cbTextureTilingScale._m0[9u].w)).x - _582) * _413) + _582;
    float _604 = ((_566.x - _600) * cbMtdParam._m0[19u].z) + _600;
    float _609 = (((_454.z - _509) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _509;
    float _613 = ((_541.z - _609) * cbMtdParam._m0[19u].w) + _609;
    float _615 = cbMtdParam._m0[22u].x + _541.w;
    float _618 = fma(_519, _228 * NORMAL.x, fma(_554, _235 * TANGENT.x, (_221 * _213) * _553));
    float _621 = fma(_519, _228 * NORMAL.y, fma(_554, _235 * TANGENT.y, (_221 * _214) * _553));
    float _624 = fma(_519, _228 * NORMAL.z, fma(_554, _235 * TANGENT.z, (_221 * _215) * _553));
    float _628 = inversesqrt(dot(vec3(_618, _621, _624), vec3(_618, _621, _624)));
    float _629 = _628 * _618;
    float _630 = _628 * _621;
    float _631 = _628 * _624;
    float _3577 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _632 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
    float _3588 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _3599 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _3610 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _3621 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _3632 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _637 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
    float _651 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _692 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _702 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _692);
    float _703 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _692);
    float _704 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _692);
    float _708 = inversesqrt(dot(vec3(_702, _703, _704), vec3(_702, _703, _704)));
    float _709 = _702 * _708;
    float _710 = _703 * _708;
    float _711 = _704 * _708;
    float _717 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _718 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _736 = fma(_631, cbSceneParam._m0[5u].z, fma(_630, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _629));
    float _739 = fma(_631, cbSceneParam._m0[6u].z, fma(_630, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _629));
    float _742 = fma(_631, cbSceneParam._m0[7u].z, fma(_630, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _629));
    uint _756 = (_262 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _762 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0)))) * cbInstanceData._m0[_756].x;
    float _763 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0)))) * cbInstanceData._m0[_756].y;
    float _764 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0)))) * cbInstanceData._m0[_756].z;
    float _3643 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _765 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
    float _3654 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _766 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    float _3665 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _767 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _768 = 1.0 - _637;
    float _769 = _765 * _768;
    float _770 = _766 * _768;
    float _771 = _767 * _768;
    float _776 = (_765 + (-0.039999999105930328369140625)) * _637;
    float _777 = (_766 + (-0.039999999105930328369140625)) * _637;
    float _778 = (_767 + (-0.039999999105930328369140625)) * _637;
    float _779 = _776 + 0.039999999105930328369140625;
    float _781 = _777 + 0.039999999105930328369140625;
    float _782 = _778 + 0.039999999105930328369140625;
    vec4 _791 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _717, cbSceneParam._m0[86u].y * _718));
    float _795 = ((isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) * TEXCOORD_5.w) * _791.x;
    float _796 = dot(vec3(_629, _630, _631), vec3(_709, _710, _711));
    float _799 = _796 * 2.0;
    float _803 = (_799 * _629) - _709;
    float _804 = (_799 * _630) - _710;
    float _805 = (_799 * _631) - _711;
    float _809 = abs(dot(vec3(_709, _710, _711), vec3(_629, _630, _631)));
    float _3676 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _811 = sqrt(_632);
    float _824 = exp2((_811 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_811 * 3.0));
    float _830 = (1.0 - _824) * ((_811 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _831 = _824 * _811;
    float _859 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _863 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _867 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1168;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _893 = fma(_867, cbModelParam._m0[26u].z, fma(_863, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _859));
        float _897 = fma(_867, cbModelParam._m0[27u].z, fma(_863, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _859));
        float _901 = fma(_867, cbModelParam._m0[28u].z, fma(_863, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _859));
        float _926 = _859 + _629;
        float _927 = _863 + _630;
        float _928 = _867 + _631;
        float _938 = fma(_928, cbModelParam._m0[26u].z, fma(_927, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _926)) - _893;
        float _939 = fma(_928, cbModelParam._m0[27u].z, fma(_927, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _926)) - _897;
        float _940 = fma(_928, cbModelParam._m0[28u].z, fma(_927, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _926)) - _901;
        float _944 = inversesqrt(dot(vec3(_938, _939, _940), vec3(_938, _939, _940)));
        float _957 = ((_944 * _938) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_893 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _958 = ((_944 * _939) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_897 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _959 = ((_944 * _940) / cbModelParam._m0[34u].z) + ((((((_901 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _983 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        float _996 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_962.x + (-0.5));
        float _998 = _996 * (_962.y + (-0.5));
        float _999 = _996 * (_962.z + (-0.5));
        float _1006 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_969.x + (-0.5));
        float _1008 = _1006 * (_969.y + (-0.5));
        float _1009 = _1006 * (_969.z + (-0.5));
        float _1016 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_976.x + (-0.5));
        float _1018 = _1016 * (_976.y + (-0.5));
        float _1019 = _1016 * (_976.z + (-0.5));
        float _1026 = exp2((_983.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_983.x + (-0.5));
        float _1028 = _1026 * (_983.y + (-0.5));
        float _1029 = _1026 * (_983.z + (-0.5));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = _997 * 0.5;
        float _1034 = _1007 * 0.5;
        float _1035 = _1017 * 0.5;
        float _1036 = dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035));
        float _1041 = (_1036 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1036);
        float _1050 = (dot(vec3(_629, _630, _631), vec3(_1041 * _1033, _1041 * _1034, _1041 * _1035)) + 1.0) * 0.5;
        float _3702 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1060 = sqrt(((_1034 * _1034) + (_1033 * _1033)) + (_1035 * _1035)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _3713 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _1062 = _1061 * 2.0;
        float _1066 = (1.0 - _1061) / (_1061 + 1.0);
        float _3724 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1076 = ((((1.0 - _1067) * (_1062 + 2.0)) * exp2(log2(isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * (_1062 + 1.0))) + _1067) * _1030;
        float _1077 = _998 * 0.5;
        float _1078 = _1008 * 0.5;
        float _1079 = _1018 * 0.5;
        float _1080 = dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079));
        float _1085 = (_1080 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1080);
        float _1093 = (dot(vec3(_629, _630, _631), vec3(_1085 * _1077, _1085 * _1078, _1085 * _1079)) + 1.0) * 0.5;
        float _3735 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1102 = sqrt(((_1078 * _1078) + (_1077 * _1077)) + (_1079 * _1079)) / (_1031 + 9.9999997473787516355514526367188e-06);
        float _3746 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1104 = _1103 * 2.0;
        float _1108 = (1.0 - _1103) / (_1103 + 1.0);
        float _3757 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1118 = ((((1.0 - _1109) * (_1104 + 2.0)) * exp2(log2(isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * (_1104 + 1.0))) + _1109) * _1031;
        float _1119 = _999 * 0.5;
        float _1120 = _1009 * 0.5;
        float _1121 = _1019 * 0.5;
        float _1122 = dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121));
        float _1127 = (_1122 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1122);
        float _1135 = (dot(vec3(_629, _630, _631), vec3(_1127 * _1119, _1127 * _1120, _1127 * _1121)) + 1.0) * 0.5;
        float _3768 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1144 = sqrt(((_1120 * _1120) + (_1119 * _1119)) + (_1121 * _1121)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _3779 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1146 = _1145 * 2.0;
        float _1150 = (1.0 - _1145) / (_1145 + 1.0);
        float _3790 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1160 = ((((1.0 - _1151) * (_1146 + 2.0)) * exp2(log2(isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * (_1146 + 1.0))) + _1151) * _1032;
        _1168 = _999;
        _1170 = _998;
        _1171 = _997;
        _1172 = _1009;
        _1173 = _1008;
        _1174 = _1007;
        _1175 = _1019;
        _1176 = _1018;
        _1177 = _1017;
        _1178 = _1032;
        _1179 = _1031;
        _1180 = _1030;
        _1181 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0)));
        _1182 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0)));
        _1183 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)));
    }
    else
    {
        _1168 = _1169;
        _1170 = _1169;
        _1171 = _1169;
        _1172 = _1169;
        _1173 = _1169;
        _1174 = _1169;
        _1175 = _1169;
        _1176 = _1169;
        _1177 = _1169;
        _1178 = _1169;
        _1179 = _1169;
        _1180 = _1169;
        _1181 = 0.0;
        _1182 = 0.0;
        _1183 = 0.0;
    }
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1208 = fma(_867, cbModelParam._m0[30u].z, fma(_863, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _859));
        float _1212 = fma(_867, cbModelParam._m0[31u].z, fma(_863, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _859));
        float _1216 = fma(_867, cbModelParam._m0[32u].z, fma(_863, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _859));
        float _1239 = _859 + _629;
        float _1240 = _863 + _630;
        float _1241 = _867 + _631;
        float _1251 = fma(_1241, cbModelParam._m0[30u].z, fma(_1240, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1239)) - _1208;
        float _1252 = fma(_1241, cbModelParam._m0[31u].z, fma(_1240, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1239)) - _1212;
        float _1253 = fma(_1241, cbModelParam._m0[32u].z, fma(_1240, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1239)) - _1216;
        float _1257 = inversesqrt(dot(vec3(_1251, _1252, _1253), vec3(_1251, _1252, _1253)));
        float _1270 = ((_1257 * _1251) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1208 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1271 = ((_1257 * _1252) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1212 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1272 = ((_1257 * _1253) / cbModelParam._m0[35u].z) + ((((((_1216 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1274 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        vec4 _1281 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        vec4 _1288 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        vec4 _1295 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        float _1307 = exp2((_1274.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1274.x + (-0.5));
        float _1309 = _1307 * (_1274.y + (-0.5));
        float _1310 = _1307 * (_1274.z + (-0.5));
        float _1317 = exp2((_1281.w + (-0.5)) * 20.0) * 2.0;
        float _1318 = _1317 * (_1281.x + (-0.5));
        float _1319 = _1317 * (_1281.y + (-0.5));
        float _1320 = _1317 * (_1281.z + (-0.5));
        float _1327 = exp2((_1288.w + (-0.5)) * 20.0) * 2.0;
        float _1328 = _1327 * (_1288.x + (-0.5));
        float _1329 = _1327 * (_1288.y + (-0.5));
        float _1330 = _1327 * (_1288.z + (-0.5));
        float _1337 = exp2((_1295.w + (-0.5)) * 20.0) * 2.0;
        float _1338 = _1337 * (_1295.x + (-0.5));
        float _1339 = _1337 * (_1295.y + (-0.5));
        float _1340 = _1337 * (_1295.z + (-0.5));
        float _1341 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1342 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1343 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1344 = _1308 * 0.5;
        float _1345 = _1318 * 0.5;
        float _1346 = _1328 * 0.5;
        float _1347 = dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346));
        float _1352 = (_1347 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1347);
        float _1360 = (dot(vec3(_629, _630, _631), vec3(_1352 * _1344, _1352 * _1345, _1352 * _1346)) + 1.0) * 0.5;
        float _3831 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1369 = sqrt(((_1345 * _1345) + (_1344 * _1344)) + (_1346 * _1346)) / (_1341 + 9.9999997473787516355514526367188e-06);
        float _3842 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1371 = _1370 * 2.0;
        float _1375 = (1.0 - _1370) / (_1370 + 1.0);
        float _3853 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1385 = ((((1.0 - _1376) * (_1371 + 2.0)) * exp2(log2(isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * (_1371 + 1.0))) + _1376) * _1341;
        float _1386 = _1309 * 0.5;
        float _1387 = _1319 * 0.5;
        float _1388 = _1329 * 0.5;
        float _1389 = dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388));
        float _1394 = (_1389 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1389);
        float _1402 = (dot(vec3(_629, _630, _631), vec3(_1394 * _1386, _1394 * _1387, _1394 * _1388)) + 1.0) * 0.5;
        float _3864 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1411 = sqrt(((_1387 * _1387) + (_1386 * _1386)) + (_1388 * _1388)) / (_1342 + 9.9999997473787516355514526367188e-06);
        float _3875 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1413 = _1412 * 2.0;
        float _1417 = (1.0 - _1412) / (_1412 + 1.0);
        float _3886 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1427 = ((((1.0 - _1418) * (_1413 + 2.0)) * exp2(log2(isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * (_1413 + 1.0))) + _1418) * _1342;
        float _1428 = _1310 * 0.5;
        float _1429 = _1320 * 0.5;
        float _1430 = _1330 * 0.5;
        float _1431 = dot(vec3(_1428, _1429, _1430), vec3(_1428, _1429, _1430));
        float _1436 = (_1431 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1431);
        float _1444 = (dot(vec3(_629, _630, _631), vec3(_1436 * _1428, _1436 * _1429, _1436 * _1430)) + 1.0) * 0.5;
        float _3897 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1453 = sqrt(((_1429 * _1429) + (_1428 * _1428)) + (_1430 * _1430)) / (_1343 + 9.9999997473787516355514526367188e-06);
        float _3908 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1455 = _1454 * 2.0;
        float _1459 = (1.0 - _1454) / (_1454 + 1.0);
        float _3919 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1469 = ((((1.0 - _1460) * (_1455 + 2.0)) * exp2(log2(isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * (_1455 + 1.0))) + _1460) * _1343;
        _1477 = _1310;
        _1478 = _1309;
        _1479 = _1308;
        _1480 = _1320;
        _1481 = _1319;
        _1482 = _1318;
        _1483 = _1330;
        _1484 = _1329;
        _1485 = _1328;
        _1486 = _1343;
        _1487 = _1342;
        _1488 = _1341;
        _1489 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)));
        _1490 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)));
        _1491 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)));
    }
    else
    {
        _1477 = _1169;
        _1478 = _1169;
        _1479 = _1169;
        _1480 = _1169;
        _1481 = _1169;
        _1482 = _1169;
        _1483 = _1169;
        _1484 = _1169;
        _1485 = _1169;
        _1486 = _1169;
        _1487 = _1169;
        _1488 = _1169;
        _1489 = 0.0;
        _1490 = 0.0;
        _1491 = 0.0;
    }
    float _1501 = (cbModelParam._m0[1u].x * (_1489 - _1181)) + _1181;
    float _1502 = (cbModelParam._m0[1u].x * (_1490 - _1182)) + _1182;
    float _1503 = (cbModelParam._m0[1u].x * (_1491 - _1183)) + _1183;
    float _1524 = fma(_1503, cbSceneParam._m0[89u].z, fma(_1502, cbSceneParam._m0[89u].y, _1501 * cbSceneParam._m0[89u].x));
    float _1527 = fma(_1503, cbSceneParam._m0[90u].z, fma(_1502, cbSceneParam._m0[90u].y, _1501 * cbSceneParam._m0[90u].x));
    float _1530 = fma(_1503, cbSceneParam._m0[91u].z, fma(_1502, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1501));
    float _1545 = _803 * 0.5;
    float _1546 = _804 * 0.5;
    float _1547 = _805 * 0.5;
    float _1548 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1479, _1482, _1485, _1488));
    float _1551 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1478, _1481, _1484, _1487));
    float _1554 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1477, _1480, _1483, _1486));
    float _1588;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1561 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1168, _1172, _1175, _1178));
        float _1565 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1170, _1173, _1176, _1179));
        float _1569 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1171, _1174, _1177, _1180));
        float _1576 = dot(vec4(cbModelParam._m0[39u]), vec4(_1545, _1546, _1547, 1.0));
        _1588 = dot(vec3(isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)), isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)), isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1576) ? 0.0 : (isnan(0.0) ? _1576 : max(0.0, _1576))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1588 = 1.0;
    }
    float _1599;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1590 = dot(vec4(cbModelParam._m0[40u]), vec4(_1545, _1546, _1547, 1.0));
        _1599 = dot(vec3(isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)), isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)), isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1590) ? 0.0 : (isnan(0.0) ? _1590 : max(0.0, _1590))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1599 = 1.0;
    }
    float _1603 = (_1599 * cbModelParam._m0[1u].x) + (_1588 * (1.0 - cbModelParam._m0[1u].x));
    float _1613 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _632);
    float _1614 = isnan(_1613) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1613 : min(cbModelParam._m0[25u].z, _1613));
    float _1696;
    float _1698;
    float _1700;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1663 = fma(_867, cbModelParam._m0[13u].z, fma(_863, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _859)) + cbModelParam._m0[13u].w;
        float _1667 = fma(_867, cbModelParam._m0[14u].z, fma(_863, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _859)) + cbModelParam._m0[14u].w;
        float _1671 = fma(_867, cbModelParam._m0[15u].z, fma(_863, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _859)) + cbModelParam._m0[15u].w;
        float _1674 = fma(_805, cbModelParam._m0[13u].z, fma(_804, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _803));
        float _1677 = fma(_805, cbModelParam._m0[14u].z, fma(_804, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _803));
        float _1680 = fma(_805, cbModelParam._m0[15u].z, fma(_804, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _803));
        float _1708;
        if (_1674 > 0.0)
        {
            _1708 = abs((1.0 - _1663) / _1674);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1674 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1663 + 1.0) / _1674);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1708 = frontier_phi_14_12_ladder;
        }
        float _1933;
        if (_1677 > 0.0)
        {
            _1933 = abs((1.0 - _1667) / _1677);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1677 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1667 + 1.0) / _1677);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1933 = frontier_phi_23_19_ladder;
        }
        float _2190;
        if (_1680 > 0.0)
        {
            _2190 = abs((1.0 - _1671) / _1680);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1680 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1671 + 1.0) / _1680);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2190 = frontier_phi_35_30_ladder;
        }
        float _2192 = isnan(_1933) ? _1708 : (isnan(_1708) ? _1933 : min(_1708, _1933));
        float _2193 = isnan(_2190) ? _2192 : (isnan(_2192) ? _2190 : min(_2192, _2190));
        float _2197 = (_2193 * _1674) + _1663;
        float _2198 = (_2193 * _1677) + _1667;
        float _2199 = (_2193 * _1680) + _1671;
        float _2200 = _2193 * 9.9999997473787516355514526367188e-05;
        float _2202 = (-1.0) - _2200;
        float _2204 = _2200 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2199 > _2204) || ((_2199 < _2202) || ((_2198 > _2204) || ((_2198 < _2202) || ((_2197 < _2202) || (_2197 > _2204))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2327 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2199, cbModelParam._m0[9u].z, fma(_2198, cbModelParam._m0[9u].y, _2197 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2199, cbModelParam._m0[10u].z, fma(_2198, cbModelParam._m0[10u].y, _2197 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2199, cbModelParam._m0[11u].z, fma(_2198, cbModelParam._m0[11u].y, _2197 * cbModelParam._m0[11u].x))), _1614);
            frontier_phi_13_35_ladder = _2327.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2327.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2327.x * cbModelParam._m0[1u].y;
        }
        _1696 = frontier_phi_13_35_ladder_2;
        _1698 = frontier_phi_13_35_ladder_1;
        _1700 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1684 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_803, _804, _805), _1614);
        _1696 = _1684.x * cbModelParam._m0[1u].y;
        _1698 = _1684.y * cbModelParam._m0[1u].y;
        _1700 = _1684.z * cbModelParam._m0[1u].y;
    }
    float _1704 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _632);
    float _1705 = isnan(_1704) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1704 : min(cbModelParam._m0[25u].w, _1704));
    float _1796;
    float _1798;
    float _1800;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1760 = fma(_867, cbModelParam._m0[21u].z, fma(_863, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _859)) + cbModelParam._m0[21u].w;
        float _1764 = fma(_867, cbModelParam._m0[22u].z, fma(_863, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _859)) + cbModelParam._m0[22u].w;
        float _1768 = fma(_867, cbModelParam._m0[23u].z, fma(_863, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _859)) + cbModelParam._m0[23u].w;
        float _1771 = fma(_805, cbModelParam._m0[21u].z, fma(_804, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _803));
        float _1774 = fma(_805, cbModelParam._m0[22u].z, fma(_804, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _803));
        float _1777 = fma(_805, cbModelParam._m0[23u].z, fma(_804, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _803));
        float _1938;
        if (_1771 > 0.0)
        {
            _1938 = abs((1.0 - _1760) / _1771);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1771 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1760 + 1.0) / _1771);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1938 = frontier_phi_25_21_ladder;
        }
        float _2217;
        if (_1774 > 0.0)
        {
            _2217 = abs((1.0 - _1764) / _1774);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1774 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1764 + 1.0) / _1774);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2217 = frontier_phi_37_32_ladder;
        }
        float _2430;
        if (_1777 > 0.0)
        {
            _2430 = abs((1.0 - _1768) / _1777);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1777 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1768 + 1.0) / _1777);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2430 = frontier_phi_46_43_ladder;
        }
        float _2432 = isnan(_2217) ? _1938 : (isnan(_1938) ? _2217 : min(_1938, _2217));
        float _2433 = isnan(_2430) ? _2432 : (isnan(_2432) ? _2430 : min(_2432, _2430));
        float _2437 = (_2433 * _1771) + _1760;
        float _2438 = (_2433 * _1774) + _1764;
        float _2439 = (_2433 * _1777) + _1768;
        float _2440 = _2433 * 9.9999997473787516355514526367188e-05;
        float _2441 = (-1.0) - _2440;
        float _2443 = _2440 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2439 > _2443) || ((_2439 < _2441) || ((_2438 > _2443) || ((_2438 < _2441) || ((_2437 < _2441) || (_2437 > _2443))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2638 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2439, cbModelParam._m0[17u].z, fma(_2438, cbModelParam._m0[17u].y, _2437 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2439, cbModelParam._m0[18u].z, fma(_2438, cbModelParam._m0[18u].y, _2437 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2439, cbModelParam._m0[19u].z, fma(_2438, cbModelParam._m0[19u].y, _2437 * cbModelParam._m0[19u].x))), _1705);
            frontier_phi_22_46_ladder = _2638.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2638.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2638.x * cbModelParam._m0[1u].z;
        }
        _1796 = frontier_phi_22_46_ladder_2;
        _1798 = frontier_phi_22_46_ladder_1;
        _1800 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1780 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_803, _804, _805), _1705);
        _1796 = _1780.x * cbModelParam._m0[1u].z;
        _1798 = _1780.y * cbModelParam._m0[1u].z;
        _1800 = _1780.z * cbModelParam._m0[1u].z;
    }
    float _1813 = (((_830 * _779) + _831) * _795) * ((cbModelParam._m0[1u].w * (_1796 - _1696)) + _1696);
    float _1815 = (((_830 * _781) + _831) * _795) * ((cbModelParam._m0[1u].w * (_1798 - _1698)) + _1698);
    float _1817 = (((_830 * _782) + _831) * _795) * ((cbModelParam._m0[1u].w * (_1800 - _1700)) + _1700);
    float _1820 = fma(_1817, cbSceneParam._m0[89u].z, fma(_1815, cbSceneParam._m0[89u].y, _1813 * cbSceneParam._m0[89u].x));
    float _1823 = fma(_1817, cbSceneParam._m0[90u].z, fma(_1815, cbSceneParam._m0[90u].y, _1813 * cbSceneParam._m0[90u].x));
    float _1826 = fma(_1817, cbSceneParam._m0[91u].z, fma(_1815, cbSceneParam._m0[91u].y, _1813 * cbSceneParam._m0[91u].x));
    vec4 _1834 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_717, _718));
    float _1836 = _1834.w;
    float _1848 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1836);
    float _1849 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1836);
    float _1850 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1836);
    uvec4 _1854 = floatBitsToUint(cbInstanceData._m0[_262 + 5u]);
    uint _1856 = _1854.x * 14u;
    uint _1857 = _1856 + 13u;
    float _1864 = _795 + (-1.0);
    float _1869 = (cbLight._m0[_1857].x * _1864) + 1.0;
    float _1870 = (cbLight._m0[_1857].y * _1864) + 1.0;
    float _1871 = (cbLight._m0[_1857].z * _1864) + 1.0;
    float _1872 = (cbLight._m0[_1857].w * _1864) + 1.0;
    uint _1873 = _1856 + 5u;
    float _1879 = isnan(1.0) ? _1870 : (isnan(_1870) ? 1.0 : min(_1870, 1.0));
    uint _1883 = _1856 + 4u;
    float _1892 = isnan(1.0) ? _1869 : (isnan(_1869) ? 1.0 : min(_1869, 1.0));
    uint _1896 = _1856 | 1u;
    float _1907 = dot(vec3(cbLight._m0[_1856].xyz), vec3(_629, _630, _631));
    float _1910 = dot(vec3(cbLight._m0[_1896].xyz), vec3(_629, _630, _631));
    float _4055 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
    float _4066 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
    float _1915 = (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * 0.3183098733425140380859375;
    float _1917 = (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * 0.3183098733425140380859375;
    float _1924 = ((cbLight._m0[_1873].x * _1879) * _1917) + (((cbLight._m0[_1883].x * _1848) * _1892) * _1915);
    float _1925 = ((_1879 * cbLight._m0[_1873].y) * _1917) + (((cbLight._m0[_1883].y * _1849) * _1892) * _1915);
    float _1926 = ((_1879 * cbLight._m0[_1873].z) * _1917) + (((cbLight._m0[_1883].z * _1850) * _1892) * _1915);
    uvec4 _1930 = floatBitsToUint(cbLight._m0[_1856 + 12u]);
    bool _1932 = _1930.x == 0u;
    float _1943;
    float _1945;
    float _1947;
    if (_1932)
    {
        _1943 = _1924;
        _1945 = _1925;
        _1947 = _1926;
    }
    else
    {
        uint _1951 = _1856 + 6u;
        float _1967 = (dot(vec3(cbLight._m0[_1856 + 2u].xyz), vec3(_629, _630, _631)) * 0.5) + 0.5;
        float _1968 = _1967 * _1967;
        float _4077 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
        float _1969 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1970 = isnan(1.0) ? _1871 : (isnan(_1871) ? 1.0 : min(_1871, 1.0));
        _1943 = (((cbLight._m0[_1951].x * 0.3183098733425140380859375) * _1969) * _1970) + _1924;
        _1945 = (((cbLight._m0[_1951].y * 0.3183098733425140380859375) * _1969) * _1970) + _1925;
        _1947 = (((cbLight._m0[_1951].z * 0.3183098733425140380859375) * _1969) * _1970) + _1926;
    }
    bool _1950 = _1930.y == 0u;
    float _1988;
    float _1990;
    float _1992;
    if (_1950)
    {
        _1988 = _1943;
        _1990 = _1945;
        _1992 = _1947;
    }
    else
    {
        uint _2161 = _1856 + 7u;
        float _2177 = (dot(vec3(cbLight._m0[_1856 + 3u].xyz), vec3(_629, _630, _631)) * 0.5) + 0.5;
        float _2178 = _2177 * _2177;
        float _4093 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
        float _2179 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _2180 = isnan(1.0) ? _1872 : (isnan(_1872) ? 1.0 : min(_1872, 1.0));
        _1988 = (((cbLight._m0[_2161].x * 0.3183098733425140380859375) * _2179) * _2180) + _1943;
        _1990 = (((cbLight._m0[_2161].y * 0.3183098733425140380859375) * _2179) * _2180) + _1945;
        _1992 = (((cbLight._m0[_2161].z * 0.3183098733425140380859375) * _2179) * _2180) + _1947;
    }
    uint _1995 = _1856 + 8u;
    float _2008 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1856].w)) * _632) * 0.949999988079071044921875);
    float _2009 = _2008 * _2008;
    float _2010 = cbLight._m0[_1856].x + _709;
    float _2011 = cbLight._m0[_1856].y + _710;
    float _2012 = cbLight._m0[_1856].z + _711;
    float _2016 = inversesqrt(dot(vec3(_2010, _2011, _2012), vec3(_2010, _2011, _2012)));
    float _2017 = _2016 * _2010;
    float _2018 = _2016 * _2011;
    float _2019 = _2016 * _2012;
    float _2020 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_1856].xyz));
    float _4109 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
    float _2023 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _4120 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _2024 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _2025 = dot(vec3(_629, _630, _631), vec3(_2017, _2018, _2019));
    float _4131 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2028 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _2029 = dot(vec3(cbLight._m0[_1856].xyz), vec3(_2017, _2018, _2019));
    float _4142 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _2033 = _2009 * _2009;
    float _2037 = ((_2028 * _2028) * (_2033 + (-1.0))) + 1.0;
    float _2045 = exp2(log2(1.0 - (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0)))) * 5.0);
    float _2046 = 0.959999978542327880859375 - _776;
    float _2048 = 0.959999978542327880859375 - _777;
    float _2049 = 0.959999978542327880859375 - _778;
    float _2056 = 1.0 - _2009;
    float _2067 = (0.5 / (((_2024 * ((_2023 * _2056) + _2009)) + 9.9999999392252902907785028219223e-09) + (((_2024 * _2056) + _2009) * _2023))) * _2023;
    float _4153 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2069 = (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_2033 / ((_2037 * _2037) * 3.141590118408203125));
    uint _2083 = _1856 + 9u;
    float _2094 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1896].w)) * _632) * 0.949999988079071044921875);
    float _2095 = _2094 * _2094;
    float _2096 = cbLight._m0[_1896].x + _709;
    float _2097 = cbLight._m0[_1896].y + _710;
    float _2098 = cbLight._m0[_1896].z + _711;
    float _2102 = inversesqrt(dot(vec3(_2096, _2097, _2098), vec3(_2096, _2097, _2098)));
    float _2103 = _2102 * _2096;
    float _2104 = _2102 * _2097;
    float _2105 = _2102 * _2098;
    float _2106 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_1896].xyz));
    float _4164 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2109 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
    float _2110 = dot(vec3(_629, _630, _631), vec3(_2103, _2104, _2105));
    float _4175 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2113 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
    float _2114 = dot(vec3(cbLight._m0[_1896].xyz), vec3(_2103, _2104, _2105));
    float _4186 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2118 = _2095 * _2095;
    float _2122 = ((_2113 * _2113) * (_2118 + (-1.0))) + 1.0;
    float _2129 = exp2(log2(1.0 - (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0)))) * 5.0);
    float _2136 = 1.0 - _2095;
    float _2146 = (0.5 / (((_2024 * ((_2109 * _2136) + _2095)) + 9.9999999392252902907785028219223e-09) + (((_2024 * _2136) + _2095) * _2109))) * _2109;
    float _4197 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2148 = (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_2118 / ((_2122 * _2122) * 3.141590118408203125));
    float _2158 = (((((_2129 * _2046) + _779) * cbLight._m0[_2083].x) * _2148) * _1879) + ((((cbLight._m0[_1995].x * _1848) * ((_2045 * _2046) + _779)) * _2069) * _1892);
    float _2159 = (((((_2129 * _2048) + _781) * cbLight._m0[_2083].y) * _2148) * _1879) + ((((cbLight._m0[_1995].y * _1849) * ((_2045 * _2048) + _781)) * _2069) * _1892);
    float _2160 = (((((_2129 * _2049) + _782) * cbLight._m0[_2083].z) * _2148) * _1879) + ((((cbLight._m0[_1995].z * _1850) * ((_2045 * _2049) + _782)) * _2069) * _1892);
    float _2222;
    float _2224;
    float _2226;
    if (_1932)
    {
        _2222 = _2158;
        _2224 = _2159;
        _2226 = _2160;
    }
    else
    {
        uint _2228 = _1856 + 2u;
        uint _2232 = _1856 + 10u;
        float _2246 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2228].w)) * _632) * 0.949999988079071044921875);
        float _2247 = _2246 * _2246;
        float _2248 = cbLight._m0[_2228].x + _709;
        float _2249 = cbLight._m0[_2228].y + _710;
        float _2250 = cbLight._m0[_2228].z + _711;
        float _2254 = inversesqrt(dot(vec3(_2248, _2249, _2250), vec3(_2248, _2249, _2250)));
        float _2255 = _2254 * _2248;
        float _2256 = _2254 * _2249;
        float _2257 = _2254 * _2250;
        float _2258 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_2228].xyz));
        float _4208 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        float _2261 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _2262 = dot(vec3(_629, _630, _631), vec3(_2255, _2256, _2257));
        float _4219 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
        float _2265 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _2266 = dot(vec3(cbLight._m0[_2228].xyz), vec3(_2255, _2256, _2257));
        float _4230 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        float _2270 = _2247 * _2247;
        float _2274 = ((_2265 * _2265) * (_2270 + (-1.0))) + 1.0;
        float _2281 = exp2(log2(1.0 - (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0)))) * 5.0);
        float _2288 = 1.0 - _2247;
        float _2298 = (0.5 / (((_2024 * ((_2261 * _2288) + _2247)) + 9.9999999392252902907785028219223e-09) + (((_2024 * _2288) + _2247) * _2261))) * _2261;
        float _4241 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2300 = (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_2270 / ((_2274 * _2274) * 3.141590118408203125));
        float _2301 = isnan(1.0) ? _1871 : (isnan(_1871) ? 1.0 : min(_1871, 1.0));
        _2222 = (((((_2281 * _2046) + _779) * cbLight._m0[_2232].x) * _2300) * _2301) + _2158;
        _2224 = (((((_2281 * _2048) + _781) * cbLight._m0[_2232].y) * _2300) * _2301) + _2159;
        _2226 = (((((_2281 * _2049) + _782) * cbLight._m0[_2232].z) * _2300) * _2301) + _2160;
    }
    float _2336;
    float _2338;
    float _2340;
    if (_1950)
    {
        _2336 = _2222;
        _2338 = _2224;
        _2340 = _2226;
    }
    else
    {
        uint _2347 = _1856 + 3u;
        uint _2351 = _1856 + 11u;
        float _2365 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2347].w)) * _632) * 0.949999988079071044921875);
        float _2366 = _2365 * _2365;
        float _2367 = cbLight._m0[_2347].x + _709;
        float _2368 = cbLight._m0[_2347].y + _710;
        float _2369 = cbLight._m0[_2347].z + _711;
        float _2373 = inversesqrt(dot(vec3(_2367, _2368, _2369), vec3(_2367, _2368, _2369)));
        float _2374 = _2373 * _2367;
        float _2375 = _2373 * _2368;
        float _2376 = _2373 * _2369;
        float _2377 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_2347].xyz));
        float _4257 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2380 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _2381 = dot(vec3(_629, _630, _631), vec3(_2374, _2375, _2376));
        float _4268 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
        float _2384 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _2385 = dot(vec3(cbLight._m0[_2347].xyz), vec3(_2374, _2375, _2376));
        float _4279 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
        float _2389 = _2366 * _2366;
        float _2393 = ((_2384 * _2384) * (_2389 + (-1.0))) + 1.0;
        float _2400 = exp2(log2(1.0 - (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0)))) * 5.0);
        float _2407 = 1.0 - _2366;
        float _2417 = (0.5 / (((_2024 * ((_2380 * _2407) + _2366)) + 9.9999999392252902907785028219223e-09) + (((_2024 * _2407) + _2366) * _2380))) * _2380;
        float _4290 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
        float _2419 = (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_2389 / ((_2393 * _2393) * 3.141590118408203125));
        float _2420 = isnan(1.0) ? _1872 : (isnan(_1872) ? 1.0 : min(_1872, 1.0));
        _2336 = (((((_2400 * _2046) + _779) * cbLight._m0[_2351].x) * _2419) * _2420) + _2222;
        _2338 = (((((_2400 * _2048) + _781) * cbLight._m0[_2351].y) * _2419) * _2420) + _2224;
        _2340 = (((((_2400 * _2049) + _782) * cbLight._m0[_2351].z) * _2419) * _2420) + _2226;
    }
    float _2555;
    float _2557;
    float _2559;
    float _2561;
    float _2563;
    float _2565;
    if (_1854.y == 0u)
    {
        float _2495 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2496 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2495;
        float _2497 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2495;
        float _2498 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2495;
        uvec4 _2510 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2511 = _2510.x;
        uint _2522 = uint((float(_2510.y) * floor(float(uint(cbSceneParam._m0[85u].y * _718) / _2511))) + floor(float(uint(cbSceneParam._m0[85u].x * _717) / _2511)));
        float _2532 = (log2(_2498 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2533 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
        uint _2536 = uint(isnan(14.0) ? _2533 : (isnan(_2533) ? 14.0 : min(_2533, 14.0)));
        uvec4 _2541 = texelFetch(g_lightClusterGridBuffer, int(((_2536 << 2u) + (_2522 << 6u)) >> 2u));
        uint _2542 = _2541.x;
        uint _2543 = _2510.z;
        float _2643;
        float _2645;
        float _2647;
        float _2649;
        float _2651;
        float _2653;
        if (((((1u << ((_2543 >> 4u) & 15u)) + 4294967295u) & _2542) == 0u) || ((_2543 & 240u) == 0u))
        {
            _2643 = 0.0;
            _2645 = 0.0;
            _2647 = 0.0;
            _2649 = 0.0;
            _2651 = 0.0;
            _2653 = 0.0;
        }
        else
        {
            float _2644;
            float _2646;
            float _2648;
            float _2650;
            float _2652;
            float _2654;
            float _2788 = 0.0;
            float _2789 = 0.0;
            float _2790 = 0.0;
            float _2791 = 0.0;
            float _2792 = 0.0;
            float _2793 = 0.0;
            uint _2794 = 0u;
            uint _2803;
            bool _2804;
            for (;;)
            {
                _2803 = texelFetch(g_lightClassification, int((((_2536 << 5u) + (_2522 << 9u)) + (_2794 << 2u)) >> 2u)).x;
                _2804 = _2803 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2804)
                {
                    frontier_phi_61_pred = _2788;
                    frontier_phi_61_pred_1 = _2793;
                    frontier_phi_61_pred_2 = _2792;
                    frontier_phi_61_pred_3 = _2791;
                    frontier_phi_61_pred_4 = _2790;
                    frontier_phi_61_pred_5 = _2789;
                }
                else
                {
                    float _2912;
                    float _2913;
                    float _2914;
                    float _2915;
                    float _2916;
                    float _2917;
                    uint _2918;
                    _2912 = _2788;
                    _2913 = _2789;
                    _2914 = _2790;
                    _2915 = _2791;
                    _2916 = _2792;
                    _2917 = _2793;
                    _2918 = _2803;
                    float _2844;
                    float _2845;
                    float _2846;
                    float _2847;
                    float _2848;
                    float _2849;
                    for (;;)
                    {
                        uint _2922 = uint(findLSB(_2918)) + (_2794 << 5u);
                        uint _2919 = (_2918 + 4294967295u) & _2918;
                        uint _2924 = _2922 * 48u;
                        vec4 _2938 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2924)).x, texelFetch(g_PointLightRenderingBuffer, int(_2924 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2924 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2924 + 3u)).x));
                        uint _2944 = (_2922 * 48u) + 4u;
                        vec4 _2957 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2944)).x, texelFetch(g_PointLightRenderingBuffer, int(_2944 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2944 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2944 + 3u)).x));
                        uint _2963 = (_2922 * 48u) + 8u;
                        vec3 _2974 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2963)).x, texelFetch(g_PointLightRenderingBuffer, int(_2963 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2963 + 2u)).x));
                        float _2978 = _2938.x - _2496;
                        float _2979 = _2938.y - _2497;
                        float _2980 = _2938.z - _2498;
                        float _2981 = dot(vec3(_2978, _2979, _2980), vec3(_2978, _2979, _2980));
                        float _2984 = inversesqrt(_2981);
                        float _2985 = _2984 * _2978;
                        float _2986 = _2984 * _2979;
                        float _2987 = _2984 * _2980;
                        float _2988 = dot(vec3(_736, _739, _742), vec3(_2985, _2986, _2987));
                        float _2993 = 1.0 - (_2981 * _2938.w);
                        float _4316 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
                        float _2994 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
                        float _2995 = sqrt(_2981) * _2957.w;
                        float _2998 = 1.39999997615814208984375 / (_2995 + 1.39999997615814208984375);
                        float _2999 = _2998 * _2998;
                        float _3002 = ((1.0 - _2999) * _2988) + _2999;
                        float _3005 = _2995 * _2995;
                        float _3009 = ((isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0))) * _2994) / ((_3005 * 0.699999988079071044921875) + 1.0);
                        float _3013 = (-0.0) - _2496;
                        float _3014 = (-0.0) - _2497;
                        float _3015 = (-0.0) - _2498;
                        float _3019 = inversesqrt(dot(vec3(_3013, _3014, _3015), vec3(_3013, _3014, _3015)));
                        float _3020 = _3019 * _3013;
                        float _3021 = _3019 * _3014;
                        float _3022 = _3019 * _3015;
                        float _3030 = exp2(log2(1.0 / ((_3005 * 3.5) + 5.0)) * 0.25);
                        float _3031 = 1.0 - _811;
                        float _3038 = sqrt(1.0 - ((1.0 - (_3031 * _3031)) * (1.0 - (_3030 * _3030))));
                        float _3039 = _3038 * _3038;
                        float _3040 = _3039 * _3039;
                        float _3041 = _3020 + _2985;
                        float _3042 = _3021 + _2986;
                        float _3043 = _3022 + _2987;
                        float _3047 = inversesqrt(dot(vec3(_3041, _3042, _3043), vec3(_3041, _3042, _3043)));
                        float _3051 = dot(vec3(_736, _739, _742), vec3(_3020, _3021, _3022));
                        float _4332 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                        float _3054 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
                        float _3055 = dot(vec3(_736, _739, _742), vec3(_3047 * _3041, _3047 * _3042, _3047 * _3043));
                        float _4343 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                        float _3058 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
                        float _3062 = ((_3058 * _3058) * (_3040 + (-1.0))) + 1.0;
                        float _3063 = _2998 * _3039;
                        float _3064 = _3063 * _3063;
                        float _3067 = ((1.0 - _3064) * _2988) + _3064;
                        float _4354 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                        float _3068 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
                        float _3069 = 1.0 - _3039;
                        float _3079 = (0.5 / (((_3068 * ((_3054 * _3069) + _3039)) + 9.9999999392252902907785028219223e-09) + (((_3068 * _3069) + _3039) * _3054))) * _3068;
                        float _4365 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                        float _3090 = (((_3040 * 3.1415927410125732421875) * (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0)))) / ((_3062 * _3062) * ((_3005 * 2.1991131305694580078125) + 3.141590118408203125))) * _2994;
                        _2847 = (_3009 * _2957.x) + _2915;
                        _2848 = (_3009 * _2957.y) + _2916;
                        _2849 = (_3009 * _2957.z) + _2917;
                        _2844 = (_3090 * _2974.x) + _2912;
                        _2845 = (_3090 * _2974.y) + _2913;
                        _2846 = (_3090 * _2974.z) + _2914;
                        if (_2919 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2912 = _2844;
                            _2913 = _2845;
                            _2914 = _2846;
                            _2915 = _2847;
                            _2916 = _2848;
                            _2917 = _2849;
                            _2918 = _2919;
                        }
                    }
                    frontier_phi_61_pred = _2844;
                    frontier_phi_61_pred_1 = _2849;
                    frontier_phi_61_pred_2 = _2848;
                    frontier_phi_61_pred_3 = _2847;
                    frontier_phi_61_pred_4 = _2846;
                    frontier_phi_61_pred_5 = _2845;
                }
                _2644 = frontier_phi_61_pred;
                _2654 = frontier_phi_61_pred_1;
                _2652 = frontier_phi_61_pred_2;
                _2650 = frontier_phi_61_pred_3;
                _2648 = frontier_phi_61_pred_4;
                _2646 = frontier_phi_61_pred_5;
                uint _2795 = _2794 + 1u;
                if (_2795 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2788 = _2644;
                    _2789 = _2646;
                    _2790 = _2648;
                    _2791 = _2650;
                    _2792 = _2652;
                    _2793 = _2654;
                    _2794 = _2795;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2643 = _2644;
            _2645 = _2646;
            _2647 = _2648;
            _2649 = _2650;
            _2651 = _2652;
            _2653 = _2654;
        }
        uvec4 _2657 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2658 = _2657.z;
        uint _2660 = (_2658 >> 8u) & 15u;
        float _2756;
        float _2758;
        float _2760;
        float _2762;
        float _2764;
        float _2766;
        if (((4294967295u << _2660) & _2542) == 0u)
        {
            _2756 = _2643;
            _2758 = _2645;
            _2760 = _2647;
            _2762 = _2649;
            _2764 = _2651;
            _2766 = _2653;
        }
        else
        {
            float _2781 = inversesqrt(dot(vec3(_2496, _2497, _2498), vec3(_2496, _2497, _2498)));
            float _2782 = _2781 * _2496;
            float _2783 = _2781 * _2497;
            float _2784 = _2781 * _2498;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2660 < ((_2658 >> 12u) & 15u))
            {
                float _2757;
                float _2759;
                float _2761;
                float _2763;
                float _2765;
                float _2767;
                float _2895 = _2643;
                float _2896 = _2645;
                float _2897 = _2647;
                float _2898 = _2649;
                float _2899 = _2651;
                float _2900 = _2653;
                uint _2901 = _2660;
                uint _2910;
                bool _2911;
                for (;;)
                {
                    _2910 = texelFetch(g_lightClassification, int((((_2536 << 5u) + (_2522 << 9u)) + (_2901 << 2u)) >> 2u)).x;
                    _2911 = _2910 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2911)
                    {
                        frontier_phi_67_pred = _2898;
                        frontier_phi_67_pred_1 = _2899;
                        frontier_phi_67_pred_2 = _2900;
                        frontier_phi_67_pred_3 = _2897;
                        frontier_phi_67_pred_4 = _2896;
                        frontier_phi_67_pred_5 = _2895;
                    }
                    else
                    {
                        float _3095;
                        float _3096;
                        float _3097;
                        float _3098;
                        float _3099;
                        float _3100;
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3391;
                        float _3392;
                        float _3393;
                        float _3108 = _2895;
                        float _3109 = _2896;
                        float _3110 = _2897;
                        float _3111 = _2898;
                        float _3112 = _2899;
                        float _3113 = _2900;
                        uint _3114 = _2910;
                        uint _3115;
                        vec4 _3140;
                        float _3141;
                        vec4 _3156;
                        vec3 _3168;
                        vec4 _3183;
                        vec4 _3198;
                        float _3244;
                        bool _3245;
                        for (;;)
                        {
                            uint _3125 = ((_2901 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3114));
                            _3115 = (_3114 + 4294967295u) & _3114;
                            uint _3127 = _3125 * 40u;
                            _3140 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3127)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 3u)).x));
                            _3141 = _3140.w;
                            uint _3143 = (_3125 * 40u) + 4u;
                            _3156 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3143)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 3u)).x));
                            uint _3158 = (_3125 * 40u) + 8u;
                            _3168 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x));
                            uint _3170 = (_3125 * 40u) + 16u;
                            _3183 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3170)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 3u)).x));
                            uint _3185 = (_3125 * 40u) + 20u;
                            _3198 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3185)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 3u)).x));
                            uint _3200 = (_3125 * 40u) + 24u;
                            vec4 _3213 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3200)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 3u)).x));
                            uint _3219 = (_3125 * 40u) + 28u;
                            vec4 _3232 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3219)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 3u)).x));
                            _3244 = fma(_2498, _3232.z, fma(_2497, _3232.y, _3232.x * _2496)) + _3232.w;
                            _3245 = !((fma(_2498, _3213.z, fma(_2497, _3213.y, _3213.x * _2496)) + _3213.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3245)
                            {
                                float _3272 = _3140.x - _2496;
                                float _3273 = _3140.y - _2497;
                                float _3274 = _3140.z - _2498;
                                float _3275 = dot(vec3(_3272, _3273, _3274), vec3(_3272, _3273, _3274));
                                float _3278 = inversesqrt(_3275);
                                float _3279 = _3278 * _3272;
                                float _3280 = _3278 * _3273;
                                float _3281 = _3278 * _3274;
                                float _3285 = 1.0 - (_3275 / (_3141 * _3141));
                                float _4376 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                                float _3286 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
                                float _3290 = sqrt(_3275) * _3156.w;
                                float _3292 = 1.39999997615814208984375 / (_3290 + 1.39999997615814208984375);
                                float _3293 = _3292 * _3292;
                                float _3296 = ((1.0 - _3293) * dot(vec3(_3279, _3280, _3281), vec3(_736, _739, _742))) + _3293;
                                float _3299 = _3290 * _3290;
                                float _3303 = (fma(_2498, _3183.z, fma(_2497, _3183.y, _3183.x * _2496)) + _3183.w) / _3244;
                                float _3304 = (fma(_2498, _3198.z, fma(_2497, _3198.y, _3198.x * _2496)) + _3198.w) / _3244;
                                float _3308 = 1.0 - dot(vec2(_3303, _3304), vec2(_3303, _3304));
                                float _4392 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                                float _3309 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
                                float _3310 = _3309 * (((isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0))) * _3286) / ((_3299 * 0.699999988079071044921875) + 1.0));
                                float _3322 = exp2(log2(1.0 / ((_3299 * 3.5) + 5.0)) * 0.25);
                                float _3323 = 1.0 - _811;
                                float _3330 = sqrt(1.0 - ((1.0 - (_3323 * _3323)) * (1.0 - (_3322 * _3322))));
                                float _3331 = _3330 * _3330;
                                float _3332 = _3331 * _3331;
                                float _3333 = _3279 - _2782;
                                float _3334 = _3280 - _2783;
                                float _3335 = _3281 - _2784;
                                float _3339 = inversesqrt(dot(vec3(_3333, _3334, _3335), vec3(_3333, _3334, _3335)));
                                float _3343 = dot(vec3(_736, _739, _742), vec3((-0.0) - _2782, (-0.0) - _2783, (-0.0) - _2784));
                                float _4403 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                                float _3346 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
                                float _3347 = dot(vec3(_736, _739, _742), vec3(_3339 * _3333, _3339 * _3334, _3339 * _3335));
                                float _4414 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                                float _3350 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
                                float _3354 = ((_3350 * _3350) * (_3332 + (-1.0))) + 1.0;
                                float _3355 = _3292 * _3331;
                                float _3356 = _3355 * _3355;
                                float _3362 = ((1.0 - _3356) * dot(vec3(_736, _739, _742), vec3(_3279, _3280, _3281))) + _3356;
                                float _4425 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                                float _3363 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                                float _3364 = 1.0 - _3331;
                                float _3374 = (0.5 / (((_3363 * ((_3346 * _3364) + _3331)) + 9.9999999392252902907785028219223e-09) + (((_3363 * _3364) + _3331) * _3346))) * _3363;
                                float _4436 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                                float _3384 = (_3309 * _3286) * (((_3332 * 3.1415927410125732421875) * (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0)))) / ((_3354 * _3354) * ((_3299 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3384 * _3168.x;
                                frontier_phi_73_pred_1 = _3384 * _3168.y;
                                frontier_phi_73_pred_2 = _3310 * _3156.z;
                                frontier_phi_73_pred_3 = _3310 * _3156.y;
                                frontier_phi_73_pred_4 = _3310 * _3156.x;
                                frontier_phi_73_pred_5 = _3384 * _3168.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3388 = frontier_phi_73_pred;
                            _3389 = frontier_phi_73_pred_1;
                            _3393 = frontier_phi_73_pred_2;
                            _3392 = frontier_phi_73_pred_3;
                            _3391 = frontier_phi_73_pred_4;
                            _3390 = frontier_phi_73_pred_5;
                            _3098 = _3391 + _3111;
                            _3099 = _3392 + _3112;
                            _3100 = _3393 + _3113;
                            _3095 = _3388 + _3108;
                            _3096 = _3389 + _3109;
                            _3097 = _3390 + _3110;
                            if (_3115 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3108 = _3095;
                                _3109 = _3096;
                                _3110 = _3097;
                                _3111 = _3098;
                                _3112 = _3099;
                                _3113 = _3100;
                                _3114 = _3115;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3098;
                        frontier_phi_67_pred_1 = _3099;
                        frontier_phi_67_pred_2 = _3100;
                        frontier_phi_67_pred_3 = _3097;
                        frontier_phi_67_pred_4 = _3096;
                        frontier_phi_67_pred_5 = _3095;
                    }
                    _2763 = frontier_phi_67_pred;
                    _2765 = frontier_phi_67_pred_1;
                    _2767 = frontier_phi_67_pred_2;
                    _2761 = frontier_phi_67_pred_3;
                    _2759 = frontier_phi_67_pred_4;
                    _2757 = frontier_phi_67_pred_5;
                    uint _2902 = _2901 + 1u;
                    if (_2902 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2895 = _2757;
                        _2896 = _2759;
                        _2897 = _2761;
                        _2898 = _2763;
                        _2899 = _2765;
                        _2900 = _2767;
                        _2901 = _2902;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2765;
                frontier_phi_55_56_ladder_1 = _2767;
                frontier_phi_55_56_ladder_2 = _2763;
                frontier_phi_55_56_ladder_3 = _2761;
                frontier_phi_55_56_ladder_4 = _2759;
                frontier_phi_55_56_ladder_5 = _2757;
            }
            else
            {
                frontier_phi_55_56_ladder = _2651;
                frontier_phi_55_56_ladder_1 = _2653;
                frontier_phi_55_56_ladder_2 = _2649;
                frontier_phi_55_56_ladder_3 = _2647;
                frontier_phi_55_56_ladder_4 = _2645;
                frontier_phi_55_56_ladder_5 = _2643;
            }
            _2756 = frontier_phi_55_56_ladder_5;
            _2758 = frontier_phi_55_56_ladder_4;
            _2760 = frontier_phi_55_56_ladder_3;
            _2762 = frontier_phi_55_56_ladder_2;
            _2764 = frontier_phi_55_56_ladder;
            _2766 = frontier_phi_55_56_ladder_1;
        }
        float _2771 = isnan(1.0) ? _795 : (isnan(_795) ? 1.0 : min(_795, 1.0));
        _2555 = (_2771 * _2762) + _1988;
        _2557 = (_2771 * _2764) + _1990;
        _2559 = (_2771 * _2766) + _1992;
        _2561 = ((_2756 * _779) * _2771) + _2336;
        _2563 = ((_2758 * _781) * _2771) + _2338;
        _2565 = ((_2760 * _782) * _2771) + _2340;
    }
    else
    {
        _2555 = _1988;
        _2557 = _1990;
        _2559 = _1992;
        _2561 = _2336;
        _2563 = _2338;
        _2565 = _2340;
    }
    float _4452 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _4463 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _4474 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    uint _2585 = _262 + 6u;
    float _2593 = _717 / cbSceneParam._m0[86u].x;
    float _2594 = _718 / cbSceneParam._m0[86u].y;
    vec4 _2608 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2593, _2594, (log2((isnan(cbSceneParam._m0[77u].w) ? _651 : (isnan(_651) ? cbSceneParam._m0[77u].w : min(_651, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2610 = _2608.x;
    float _2611 = _2608.y;
    float _2612 = _2608.z;
    float _2613 = _2608.w;
    float _2706;
    float _2708;
    float _2710;
    float _2712;
    if (_651 > cbSceneParam._m0[78u].w)
    {
        float _2668 = isnan(_651) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _651 : min(cbSceneParam._m0[80u].w, _651));
        float _2669 = _2668 / _651;
        float _2680 = _2669 * _702;
        float _2681 = _703 * _2669;
        float _2682 = (-0.0) - _2681;
        float _2684 = _2669 * _704;
        float _2686 = (cbSceneParam._m0[77u].w * _2682) / _2668;
        float _2687 = _2686 + cbSceneParam._m0[79u].w;
        float _2688 = cbSceneParam._m0[79u].w - _2681;
        float _2694 = sqrt(((_2680 * _2680) + (_2681 * _2681)) + (_2684 * _2684));
        float _2697 = (1.0 - (cbSceneParam._m0[77u].w / _2668)) * _2694;
        float _2702 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2704 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2857;
        if (abs((_2682 - _2686) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2857 = ((((_2687 > 0.0) ? exp2(_2702 * _2687) : (2.0 - exp2(_2704 * _2687))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2697;
        }
        else
        {
            float _2817 = 1.0 / cbSceneParam._m0[80u].x;
            float _2818 = isnan(_2688) ? _2687 : (isnan(_2687) ? _2688 : max(_2687, _2688));
            float _2819 = isnan(_2688) ? _2687 : (isnan(_2687) ? _2688 : min(_2687, _2688));
            float _2828 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : min(_2818, 0.0));
            float _2829 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : min(_2819, 0.0));
            _2857 = ((abs(_2694 / _2682) * cbSceneParam._m0[80u].y) * ((((_2828 - _2829) * 2.0) - ((exp2(_2702 * (isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0)))) - exp2(_2702 * (isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0))))) * _2817)) - ((exp2(_2704 * _2828) - exp2(_2704 * _2829)) * _2817))) + (_2697 * cbSceneParam._m0[80u].z);
        }
        vec4 _2859 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2593, _2594, 1.0), 0.0);
        float _2868 = exp2((_2857 * (-1.44269502162933349609375)) * (1.0 - _2859.w));
        float _2869 = log2(_2868);
        float _2885 = log2(_2613);
        _2706 = (exp2(_2885 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2869 * cbSceneParam._m0[78u].x)) * _2859.x) / cbSceneParam._m0[78u].x)) + _2610;
        _2708 = (exp2(_2885 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2869 * cbSceneParam._m0[78u].y)) * _2859.y) / cbSceneParam._m0[78u].y)) + _2611;
        _2710 = (exp2(_2885 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2869 * cbSceneParam._m0[78u].z)) * _2859.z) / cbSceneParam._m0[78u].z)) + _2612;
        _2712 = _2868 * _2613;
    }
    else
    {
        _2706 = _2610;
        _2708 = _2611;
        _2710 = _2612;
        _2712 = _2613;
    }
    float _2724 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2725 = _2724 == 3.0;
    float _2726 = log2(_2712);
    float _2733 = exp2(_2726 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * (_2555 + ((isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0))) * _795))) + ((_2561 + ((isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0))) * _1603)) * cbPerFrame._m0[3u].x));
    float _2734 = exp2(_2726 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (_2557 + ((isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0))) * _795))) + ((_2563 + ((isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))) * _1603)) * cbPerFrame._m0[3u].x));
    float _2735 = exp2(_2726 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_2559 + ((isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))) * _795))) + ((_2565 + ((isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))) * _1603)) * cbPerFrame._m0[3u].x));
    float _2744 = (_2724 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2744 * (_2725 ? _2733 : (_2733 + (cbSceneParam._m0[72u].w * _2706)));
    SV_Target.y = _2744 * (_2725 ? _2734 : (_2734 + (cbSceneParam._m0[72u].w * _2708)));
    SV_Target.z = _2744 * (_2725 ? _2735 : (_2735 + (cbSceneParam._m0[72u].w * _2710)));
    SV_Target.w = cbInstanceData._m0[_2585].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2585].w;
}


