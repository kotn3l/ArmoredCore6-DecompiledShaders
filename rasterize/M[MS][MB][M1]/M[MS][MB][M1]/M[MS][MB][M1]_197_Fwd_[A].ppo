#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1438;
float _3816;
float _3817;
float _3818;
float _3819;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3828 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _3839 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _3850 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    uint _280 = uint(roundEven(NORMAL.w)) * 13u;
    uint _285 = _280 + 1u;
    uint _289 = _280 + 2u;
    float _298 = sqrt(((cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x)) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x));
    float _299 = _298 * TEXCOORD.z;
    float _300 = _298 * TEXCOORD.w;
    vec4 _313 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _299) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _300) + cbTextureTilingScale._m0[13u].w));
    vec4 _337 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _342 = _337.x * cbMtdParam._m0[11u].x;
    float _343 = _337.y * cbMtdParam._m0[11u].y;
    float _344 = _337.z * cbMtdParam._m0[11u].z;
    vec4 _363 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _299) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _300) + cbTextureTilingScale._m0[5u].w));
    vec4 _400 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _402 = _400.x;
    float _414 = dot(vec4(_402, _400.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _431 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_402 - _414) * cbMtdParam._m0[24u].y) + _414) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3861 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _432 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
    float _439 = (_432 * ((_363.x * cbMtdParam._m0[12u].x) - _342)) + _342;
    float _440 = (_432 * ((_363.y * cbMtdParam._m0[12u].y) - _343)) + _343;
    float _441 = (_432 * ((_363.z * cbMtdParam._m0[12u].z) - _344)) + _344;
    vec4 _458 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _299) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _300) + cbTextureTilingScale._m0[3u].w));
    vec4 _478 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _480 = _478.x;
    float _490 = dot(vec4(_480, _478.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _504 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_480 - _490) * cbMtdParam._m0[24u].y) + _490) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3872 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _505 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _512 = (_505 * ((_458.x * cbMtdParam._m0[13u].x) - _439)) + _439;
    float _513 = (_505 * ((_458.y * cbMtdParam._m0[13u].y) - _440)) + _440;
    float _514 = (_505 * ((_458.z * cbMtdParam._m0[13u].z) - _441)) + _441;
    float _518 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _313.x) * _512;
    float _521 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _313.y) * _513;
    float _524 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _313.z) * _514;
    float _531 = ((_512 - _518) * (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0)))) + _518;
    float _532 = ((_513 - _521) * (isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0)))) + _521;
    float _533 = ((_514 - _524) * (isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0)))) + _524;
    vec4 _552 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _299) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _300) + cbTextureTilingScale._m0[14u].w));
    vec4 _571 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _299) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _300) + cbTextureTilingScale._m0[20u].w));
    vec4 _594 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _299) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _300) + cbTextureTilingScale._m0[4u].w));
    vec4 _611 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _613 = _611.x;
    float _614 = _611.y;
    float _615 = _611.z;
    float _622 = ((_594.x - _613) * _432) + _613;
    float _623 = ((_594.y - _614) * _432) + _614;
    float _624 = ((_594.z - _615) * _432) + _615;
    vec4 _636 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _299) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _300) + cbTextureTilingScale._m0[2u].w));
    float _649 = ((_636.z - _624) * _505) + _624;
    float _652 = ((((_636.x - _622) * _505) + _622) * 2.0) + (-1.0);
    float _653 = ((((_636.y - _623) * _505) + _623) * 2.0) + (-1.0);
    float _654 = dot(vec2(_652, _653), vec2(_652, _653));
    float _3883 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _659 = sqrt(1.0 - (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))));
    vec4 _672 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _690 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _299) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _300) + cbTextureTilingScale._m0[11u].w));
    float _692 = _690.x;
    float _693 = 1.0 - _692;
    float _706 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_692 - _693) * cbMtdParam._m0[24u].z) + _693) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3894 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _707 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _714 = (_707 * ((_552.x * cbMtdParam._m0[18u].x) - _531)) + _531;
    float _715 = (_707 * ((_552.y * cbMtdParam._m0[18u].y) - _532)) + _532;
    float _716 = (_707 * ((_552.z * cbMtdParam._m0[18u].z) - _533)) + _533;
    vec4 _728 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _742 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _744 = _742.x;
    float _762 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _299) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _300) + cbTextureTilingScale._m0[9u].w)).x - _744) * _432) + _744;
    float _779 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _299) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _300) + cbTextureTilingScale._m0[21u].w)).x - _762) * _505) + _762;
    float _783 = ((_728.x - _779) * cbMtdParam._m0[19u].z) + _779;
    float _785 = _783 - (_783 * _707);
    float _790 = (((_571.z - _649) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _649;
    vec4 _803 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _299) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _300) + cbTextureTilingScale._m0[15u].w));
    float _810 = (_803.x * 2.0) + (-1.0);
    float _811 = (_803.y * 2.0) + (-1.0);
    float _812 = dot(vec2(_810, _811), vec2(_810, _811));
    float _3905 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _820 = (_707 * (_803.z - _790)) + _790;
    float _825 = _652 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_571.x * 2.0) + (-1.0)));
    float _826 = _653 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_571.y * 2.0) + (-1.0)));
    float _838 = (((_810 - _825) + (cbMtdParam._m0[21u].x * _825)) * _707) + _825;
    float _839 = (((_811 - _826) + (cbMtdParam._m0[21u].x * _826)) * _707) + _826;
    float _840 = (_707 * (sqrt(1.0 - (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0)))) - _659)) + _659;
    float _844 = cbMtdParam._m0[22u].x + _672.w;
    float _847 = fma(_840, _246 * NORMAL.x, fma(_839, _253 * TANGENT.x, (_239 * _231) * _838));
    float _850 = fma(_840, _246 * NORMAL.y, fma(_839, _253 * TANGENT.y, (_239 * _232) * _838));
    float _853 = fma(_840, _246 * NORMAL.z, fma(_839, _253 * TANGENT.z, (_239 * _233) * _838));
    float _857 = inversesqrt(dot(vec3(_847, _850, _853), vec3(_847, _850, _853)));
    float _858 = _857 * _847;
    float _859 = _857 * _850;
    float _860 = _857 * _853;
    float _3916 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _861 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _3927 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _3938 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _3949 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _3960 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _3971 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _866 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _880 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _921 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _931 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _921);
    float _932 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _921);
    float _933 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _921);
    float _937 = inversesqrt(dot(vec3(_931, _932, _933), vec3(_931, _932, _933)));
    float _938 = _931 * _937;
    float _939 = _932 * _937;
    float _940 = _933 * _937;
    vec4 _945 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _947 = _945.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1119 = sqrt(((_931 * _931) + (_932 * _932)) + (_933 * _933));
        float _1125 = (cbMatDynParam._m0[5u].x * _1119) + cbMatDynParam._m0[5u].y;
        float _3982 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1130 = (cbMatDynParam._m0[5u].z * _1119) + cbMatDynParam._m0[5u].w;
        float _3993 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) - _1126)) + _1126) < ((_947 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _958 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _959 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _977 = fma(_860, cbSceneParam._m0[5u].z, fma(_859, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _858));
    float _980 = fma(_860, cbSceneParam._m0[6u].z, fma(_859, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _858));
    float _983 = fma(_860, cbSceneParam._m0[7u].z, fma(_859, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _858));
    uint _996 = _280 + 9u;
    uint _997 = _996 + uint(cbMatDynParam._m0[0u].w);
    float _1003 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0)))) * cbInstanceData._m0[_997].x;
    float _1004 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0)))) * cbInstanceData._m0[_997].y;
    float _1005 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0)))) * cbInstanceData._m0[_997].z;
    float _4004 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _1006 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _4015 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _1007 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _4026 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _1008 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _1009 = 1.0 - _866;
    float _1010 = _1006 * _1009;
    float _1011 = _1007 * _1009;
    float _1012 = _1008 * _1009;
    float _1017 = (_1006 + (-0.039999999105930328369140625)) * _866;
    float _1018 = (_1007 + (-0.039999999105930328369140625)) * _866;
    float _1019 = (_1008 + (-0.039999999105930328369140625)) * _866;
    float _1020 = _1017 + 0.039999999105930328369140625;
    float _1022 = _1018 + 0.039999999105930328369140625;
    float _1023 = _1019 + 0.039999999105930328369140625;
    vec4 _1032 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _958, cbSceneParam._m0[86u].y * _959));
    float _1036 = ((isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * TEXCOORD_5.w) * _1032.x;
    float _1037 = dot(vec3(_858, _859, _860), vec3(_938, _939, _940));
    float _1040 = _1037 * 2.0;
    float _1044 = (_1040 * _858) - _938;
    float _1045 = (_1040 * _859) - _939;
    float _1046 = (_1040 * _860) - _940;
    float _1050 = abs(dot(vec3(_938, _939, _940), vec3(_858, _859, _860)));
    float _4037 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _1052 = sqrt(_861);
    float _1065 = exp2((_1052 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1052 * 3.0));
    float _1071 = (1.0 - _1065) * ((_1052 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1072 = _1065 * _1052;
    float _1100 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1104 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1108 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1437;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1162 = fma(_1108, cbModelParam._m0[26u].z, fma(_1104, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1100));
        float _1166 = fma(_1108, cbModelParam._m0[27u].z, fma(_1104, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1100));
        float _1170 = fma(_1108, cbModelParam._m0[28u].z, fma(_1104, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1100));
        float _1195 = _1100 + _858;
        float _1196 = _1104 + _859;
        float _1197 = _1108 + _860;
        float _1207 = fma(_1197, cbModelParam._m0[26u].z, fma(_1196, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1195)) - _1162;
        float _1208 = fma(_1197, cbModelParam._m0[27u].z, fma(_1196, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1195)) - _1166;
        float _1209 = fma(_1197, cbModelParam._m0[28u].z, fma(_1196, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1195)) - _1170;
        float _1213 = inversesqrt(dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209)));
        float _1226 = ((_1213 * _1207) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1162 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1227 = ((_1213 * _1208) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1166 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1228 = ((_1213 * _1209) / cbModelParam._m0[34u].z) + ((((((_1170 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1252 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        float _1265 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1231.x + (-0.5));
        float _1267 = _1265 * (_1231.y + (-0.5));
        float _1268 = _1265 * (_1231.z + (-0.5));
        float _1275 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1276 = _1275 * (_1238.x + (-0.5));
        float _1277 = _1275 * (_1238.y + (-0.5));
        float _1278 = _1275 * (_1238.z + (-0.5));
        float _1285 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1245.x + (-0.5));
        float _1287 = _1285 * (_1245.y + (-0.5));
        float _1288 = _1285 * (_1245.z + (-0.5));
        float _1295 = exp2((_1252.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1252.x + (-0.5));
        float _1297 = _1295 * (_1252.y + (-0.5));
        float _1298 = _1295 * (_1252.z + (-0.5));
        float _1299 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1300 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = _1266 * 0.5;
        float _1303 = _1276 * 0.5;
        float _1304 = _1286 * 0.5;
        float _1305 = dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304));
        float _1310 = (_1305 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1305);
        float _1319 = (dot(vec3(_858, _859, _860), vec3(_1310 * _1302, _1310 * _1303, _1310 * _1304)) + 1.0) * 0.5;
        float _4063 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1329 = sqrt(((_1303 * _1303) + (_1302 * _1302)) + (_1304 * _1304)) / (_1299 + 9.9999997473787516355514526367188e-06);
        float _4074 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1331 = _1330 * 2.0;
        float _1335 = (1.0 - _1330) / (_1330 + 1.0);
        float _4085 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1345 = ((((1.0 - _1336) * (_1331 + 2.0)) * exp2(log2(isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * (_1331 + 1.0))) + _1336) * _1299;
        float _1346 = _1267 * 0.5;
        float _1347 = _1277 * 0.5;
        float _1348 = _1287 * 0.5;
        float _1349 = dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348));
        float _1354 = (_1349 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1349);
        float _1362 = (dot(vec3(_858, _859, _860), vec3(_1354 * _1346, _1354 * _1347, _1354 * _1348)) + 1.0) * 0.5;
        float _4096 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1371 = sqrt(((_1347 * _1347) + (_1346 * _1346)) + (_1348 * _1348)) / (_1300 + 9.9999997473787516355514526367188e-06);
        float _4107 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1373 = _1372 * 2.0;
        float _1377 = (1.0 - _1372) / (_1372 + 1.0);
        float _4118 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1387 = ((((1.0 - _1378) * (_1373 + 2.0)) * exp2(log2(isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (_1373 + 1.0))) + _1378) * _1300;
        float _1388 = _1268 * 0.5;
        float _1389 = _1278 * 0.5;
        float _1390 = _1288 * 0.5;
        float _1391 = dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390));
        float _1396 = (_1391 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1391);
        float _1404 = (dot(vec3(_858, _859, _860), vec3(_1396 * _1388, _1396 * _1389, _1396 * _1390)) + 1.0) * 0.5;
        float _4129 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1413 = sqrt(((_1389 * _1389) + (_1388 * _1388)) + (_1390 * _1390)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _4140 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1415 = _1414 * 2.0;
        float _1419 = (1.0 - _1414) / (_1414 + 1.0);
        float _4151 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1429 = ((((1.0 - _1420) * (_1415 + 2.0)) * exp2(log2(isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_1415 + 1.0))) + _1420) * _1301;
        _1437 = _1268;
        _1439 = _1267;
        _1440 = _1266;
        _1441 = _1278;
        _1442 = _1277;
        _1443 = _1276;
        _1444 = _1288;
        _1445 = _1287;
        _1446 = _1286;
        _1447 = _1301;
        _1448 = _1300;
        _1449 = _1299;
        _1450 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)));
        _1451 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)));
        _1452 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)));
    }
    else
    {
        _1437 = _1438;
        _1439 = _1438;
        _1440 = _1438;
        _1441 = _1438;
        _1442 = _1438;
        _1443 = _1438;
        _1444 = _1438;
        _1445 = _1438;
        _1446 = _1438;
        _1447 = _1438;
        _1448 = _1438;
        _1449 = _1438;
        _1450 = 0.0;
        _1451 = 0.0;
        _1452 = 0.0;
    }
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1479 = fma(_1108, cbModelParam._m0[30u].z, fma(_1104, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1100));
        float _1483 = fma(_1108, cbModelParam._m0[31u].z, fma(_1104, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1100));
        float _1487 = fma(_1108, cbModelParam._m0[32u].z, fma(_1104, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1100));
        float _1510 = _1100 + _858;
        float _1511 = _1104 + _859;
        float _1512 = _1108 + _860;
        float _1522 = fma(_1512, cbModelParam._m0[30u].z, fma(_1511, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1510)) - _1479;
        float _1523 = fma(_1512, cbModelParam._m0[31u].z, fma(_1511, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1510)) - _1483;
        float _1524 = fma(_1512, cbModelParam._m0[32u].z, fma(_1511, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1510)) - _1487;
        float _1528 = inversesqrt(dot(vec3(_1522, _1523, _1524), vec3(_1522, _1523, _1524)));
        float _1541 = ((_1528 * _1522) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1479 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1542 = ((_1528 * _1523) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1483 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1543 = ((_1528 * _1524) / cbModelParam._m0[35u].z) + ((((((_1487 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1545 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1541, _1542, _1543), 0.0);
        vec4 _1552 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1541, _1542, _1543), 0.0);
        vec4 _1559 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1541, _1542, _1543), 0.0);
        vec4 _1566 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1541, _1542, _1543), 0.0);
        float _1578 = exp2((_1545.w + (-0.5)) * 20.0) * 2.0;
        float _1579 = _1578 * (_1545.x + (-0.5));
        float _1580 = _1578 * (_1545.y + (-0.5));
        float _1581 = _1578 * (_1545.z + (-0.5));
        float _1588 = exp2((_1552.w + (-0.5)) * 20.0) * 2.0;
        float _1589 = _1588 * (_1552.x + (-0.5));
        float _1590 = _1588 * (_1552.y + (-0.5));
        float _1591 = _1588 * (_1552.z + (-0.5));
        float _1598 = exp2((_1559.w + (-0.5)) * 20.0) * 2.0;
        float _1599 = _1598 * (_1559.x + (-0.5));
        float _1600 = _1598 * (_1559.y + (-0.5));
        float _1601 = _1598 * (_1559.z + (-0.5));
        float _1608 = exp2((_1566.w + (-0.5)) * 20.0) * 2.0;
        float _1609 = _1608 * (_1566.x + (-0.5));
        float _1610 = _1608 * (_1566.y + (-0.5));
        float _1611 = _1608 * (_1566.z + (-0.5));
        float _1612 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1613 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1614 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1615 = _1579 * 0.5;
        float _1616 = _1589 * 0.5;
        float _1617 = _1599 * 0.5;
        float _1618 = dot(vec3(_1615, _1616, _1617), vec3(_1615, _1616, _1617));
        float _1623 = (_1618 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1618);
        float _1631 = (dot(vec3(_858, _859, _860), vec3(_1623 * _1615, _1623 * _1616, _1623 * _1617)) + 1.0) * 0.5;
        float _4192 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1640 = sqrt(((_1616 * _1616) + (_1615 * _1615)) + (_1617 * _1617)) / (_1612 + 9.9999997473787516355514526367188e-06);
        float _4203 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1642 = _1641 * 2.0;
        float _1646 = (1.0 - _1641) / (_1641 + 1.0);
        float _4214 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1647 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1656 = ((((1.0 - _1647) * (_1642 + 2.0)) * exp2(log2(isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_1642 + 1.0))) + _1647) * _1612;
        float _1657 = _1580 * 0.5;
        float _1658 = _1590 * 0.5;
        float _1659 = _1600 * 0.5;
        float _1660 = dot(vec3(_1657, _1658, _1659), vec3(_1657, _1658, _1659));
        float _1665 = (_1660 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1660);
        float _1673 = (dot(vec3(_858, _859, _860), vec3(_1665 * _1657, _1665 * _1658, _1665 * _1659)) + 1.0) * 0.5;
        float _4225 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1682 = sqrt(((_1658 * _1658) + (_1657 * _1657)) + (_1659 * _1659)) / (_1613 + 9.9999997473787516355514526367188e-06);
        float _4236 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1683 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1684 = _1683 * 2.0;
        float _1688 = (1.0 - _1683) / (_1683 + 1.0);
        float _4247 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1689 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1698 = ((((1.0 - _1689) * (_1684 + 2.0)) * exp2(log2(isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * (_1684 + 1.0))) + _1689) * _1613;
        float _1699 = _1581 * 0.5;
        float _1700 = _1591 * 0.5;
        float _1701 = _1601 * 0.5;
        float _1702 = dot(vec3(_1699, _1700, _1701), vec3(_1699, _1700, _1701));
        float _1707 = (_1702 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1702);
        float _1715 = (dot(vec3(_858, _859, _860), vec3(_1707 * _1699, _1707 * _1700, _1707 * _1701)) + 1.0) * 0.5;
        float _4258 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1724 = sqrt(((_1700 * _1700) + (_1699 * _1699)) + (_1701 * _1701)) / (_1614 + 9.9999997473787516355514526367188e-06);
        float _4269 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1725 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1726 = _1725 * 2.0;
        float _1730 = (1.0 - _1725) / (_1725 + 1.0);
        float _4280 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1731 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1740 = ((((1.0 - _1731) * (_1726 + 2.0)) * exp2(log2(isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_1726 + 1.0))) + _1731) * _1614;
        _1748 = _1581;
        _1749 = _1580;
        _1750 = _1579;
        _1751 = _1591;
        _1752 = _1590;
        _1753 = _1589;
        _1754 = _1601;
        _1755 = _1600;
        _1756 = _1599;
        _1757 = _1614;
        _1758 = _1613;
        _1759 = _1612;
        _1760 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)));
        _1761 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0)));
        _1762 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0)));
    }
    else
    {
        _1748 = _1438;
        _1749 = _1438;
        _1750 = _1438;
        _1751 = _1438;
        _1752 = _1438;
        _1753 = _1438;
        _1754 = _1438;
        _1755 = _1438;
        _1756 = _1438;
        _1757 = _1438;
        _1758 = _1438;
        _1759 = _1438;
        _1760 = 0.0;
        _1761 = 0.0;
        _1762 = 0.0;
    }
    float _1772 = (cbModelParam._m0[1u].x * (_1760 - _1450)) + _1450;
    float _1773 = (cbModelParam._m0[1u].x * (_1761 - _1451)) + _1451;
    float _1774 = (cbModelParam._m0[1u].x * (_1762 - _1452)) + _1452;
    float _1795 = fma(_1774, cbSceneParam._m0[89u].z, fma(_1773, cbSceneParam._m0[89u].y, _1772 * cbSceneParam._m0[89u].x));
    float _1798 = fma(_1774, cbSceneParam._m0[90u].z, fma(_1773, cbSceneParam._m0[90u].y, _1772 * cbSceneParam._m0[90u].x));
    float _1801 = fma(_1774, cbSceneParam._m0[91u].z, fma(_1773, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1772));
    float _1816 = _1044 * 0.5;
    float _1817 = _1045 * 0.5;
    float _1818 = _1046 * 0.5;
    float _1819 = dot(vec4(_1816, _1817, _1818, 1.0), vec4(_1750, _1753, _1756, _1759));
    float _1822 = dot(vec4(_1816, _1817, _1818, 1.0), vec4(_1749, _1752, _1755, _1758));
    float _1825 = dot(vec4(_1816, _1817, _1818, 1.0), vec4(_1748, _1751, _1754, _1757));
    float _1859;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1832 = dot(vec4(_1816, _1817, _1818, 1.0), vec4(_1437, _1441, _1444, _1447));
        float _1836 = dot(vec4(_1816, _1817, _1818, 1.0), vec4(_1439, _1442, _1445, _1448));
        float _1840 = dot(vec4(_1816, _1817, _1818, 1.0), vec4(_1440, _1443, _1446, _1449));
        float _1847 = dot(vec4(cbModelParam._m0[39u]), vec4(_1816, _1817, _1818, 1.0));
        _1859 = dot(vec3(isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0)), isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0)), isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1847) ? 0.0 : (isnan(0.0) ? _1847 : max(0.0, _1847))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1859 = 1.0;
    }
    float _1870;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1861 = dot(vec4(cbModelParam._m0[40u]), vec4(_1816, _1817, _1818, 1.0));
        _1870 = dot(vec3(isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0)), isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0)), isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1861) ? 0.0 : (isnan(0.0) ? _1861 : max(0.0, _1861))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1870 = 1.0;
    }
    float _1874 = (_1870 * cbModelParam._m0[1u].x) + (_1859 * (1.0 - cbModelParam._m0[1u].x));
    float _1884 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _861);
    float _1885 = isnan(_1884) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1884 : min(cbModelParam._m0[25u].z, _1884));
    float _1965;
    float _1967;
    float _1969;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1932 = fma(_1108, cbModelParam._m0[13u].z, fma(_1104, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1100)) + cbModelParam._m0[13u].w;
        float _1936 = fma(_1108, cbModelParam._m0[14u].z, fma(_1104, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1100)) + cbModelParam._m0[14u].w;
        float _1940 = fma(_1108, cbModelParam._m0[15u].z, fma(_1104, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1100)) + cbModelParam._m0[15u].w;
        float _1943 = fma(_1046, cbModelParam._m0[13u].z, fma(_1045, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1044));
        float _1946 = fma(_1046, cbModelParam._m0[14u].z, fma(_1045, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1044));
        float _1949 = fma(_1046, cbModelParam._m0[15u].z, fma(_1045, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1044));
        float _1977;
        if (_1943 > 0.0)
        {
            _1977 = abs((1.0 - _1932) / _1943);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1943 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1932 + 1.0) / _1943);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1977 = frontier_phi_17_15_ladder;
        }
        float _2179;
        if (_1946 > 0.0)
        {
            _2179 = abs((1.0 - _1936) / _1946);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1946 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1936 + 1.0) / _1946);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2179 = frontier_phi_26_22_ladder;
        }
        float _2433;
        if (_1949 > 0.0)
        {
            _2433 = abs((1.0 - _1940) / _1949);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1949 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1940 + 1.0) / _1949);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2433 = frontier_phi_38_33_ladder;
        }
        float _2435 = isnan(_2179) ? _1977 : (isnan(_1977) ? _2179 : min(_1977, _2179));
        float _2436 = isnan(_2433) ? _2435 : (isnan(_2435) ? _2433 : min(_2435, _2433));
        float _2440 = (_2436 * _1943) + _1932;
        float _2441 = (_2436 * _1946) + _1936;
        float _2442 = (_2436 * _1949) + _1940;
        float _2443 = _2436 * 9.9999997473787516355514526367188e-05;
        float _2445 = (-1.0) - _2443;
        float _2447 = _2443 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2442 > _2447) || ((_2442 < _2445) || ((_2441 > _2447) || ((_2441 < _2445) || ((_2440 < _2445) || (_2440 > _2447))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2570 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2442, cbModelParam._m0[9u].z, fma(_2441, cbModelParam._m0[9u].y, _2440 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2442, cbModelParam._m0[10u].z, fma(_2441, cbModelParam._m0[10u].y, _2440 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2442, cbModelParam._m0[11u].z, fma(_2441, cbModelParam._m0[11u].y, _2440 * cbModelParam._m0[11u].x))), _1885);
            frontier_phi_16_38_ladder = _2570.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2570.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2570.x * cbModelParam._m0[1u].y;
        }
        _1965 = frontier_phi_16_38_ladder_2;
        _1967 = frontier_phi_16_38_ladder_1;
        _1969 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1953 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1044, _1045, _1046), _1885);
        _1965 = _1953.x * cbModelParam._m0[1u].y;
        _1967 = _1953.y * cbModelParam._m0[1u].y;
        _1969 = _1953.z * cbModelParam._m0[1u].y;
    }
    float _1973 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _861);
    float _1974 = isnan(_1973) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1973 : min(cbModelParam._m0[25u].w, _1973));
    float _2063;
    float _2065;
    float _2067;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2027 = fma(_1108, cbModelParam._m0[21u].z, fma(_1104, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1100)) + cbModelParam._m0[21u].w;
        float _2031 = fma(_1108, cbModelParam._m0[22u].z, fma(_1104, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1100)) + cbModelParam._m0[22u].w;
        float _2035 = fma(_1108, cbModelParam._m0[23u].z, fma(_1104, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1100)) + cbModelParam._m0[23u].w;
        float _2038 = fma(_1046, cbModelParam._m0[21u].z, fma(_1045, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1044));
        float _2041 = fma(_1046, cbModelParam._m0[22u].z, fma(_1045, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1044));
        float _2044 = fma(_1046, cbModelParam._m0[23u].z, fma(_1045, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1044));
        float _2184;
        if (_2038 > 0.0)
        {
            _2184 = abs((1.0 - _2027) / _2038);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2038 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2027 + 1.0) / _2038);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2184 = frontier_phi_28_24_ladder;
        }
        float _2460;
        if (_2041 > 0.0)
        {
            _2460 = abs((1.0 - _2031) / _2041);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2041 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2031 + 1.0) / _2041);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2460 = frontier_phi_40_35_ladder;
        }
        float _2673;
        if (_2044 > 0.0)
        {
            _2673 = abs((1.0 - _2035) / _2044);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2044 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2035 + 1.0) / _2044);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2673 = frontier_phi_49_46_ladder;
        }
        float _2675 = isnan(_2460) ? _2184 : (isnan(_2184) ? _2460 : min(_2184, _2460));
        float _2676 = isnan(_2673) ? _2675 : (isnan(_2675) ? _2673 : min(_2675, _2673));
        float _2680 = (_2676 * _2038) + _2027;
        float _2681 = (_2676 * _2041) + _2031;
        float _2682 = (_2676 * _2044) + _2035;
        float _2683 = _2676 * 9.9999997473787516355514526367188e-05;
        float _2684 = (-1.0) - _2683;
        float _2686 = _2683 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2682 > _2686) || ((_2682 < _2684) || ((_2681 > _2686) || ((_2681 < _2684) || ((_2680 < _2684) || (_2680 > _2686))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2881 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2682, cbModelParam._m0[17u].z, fma(_2681, cbModelParam._m0[17u].y, _2680 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2682, cbModelParam._m0[18u].z, fma(_2681, cbModelParam._m0[18u].y, _2680 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2682, cbModelParam._m0[19u].z, fma(_2681, cbModelParam._m0[19u].y, _2680 * cbModelParam._m0[19u].x))), _1974);
            frontier_phi_25_49_ladder = _2881.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2881.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2881.x * cbModelParam._m0[1u].z;
        }
        _2063 = frontier_phi_25_49_ladder_2;
        _2065 = frontier_phi_25_49_ladder_1;
        _2067 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2047 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1044, _1045, _1046), _1974);
        _2063 = _2047.x * cbModelParam._m0[1u].z;
        _2065 = _2047.y * cbModelParam._m0[1u].z;
        _2067 = _2047.z * cbModelParam._m0[1u].z;
    }
    float _2080 = (((_1071 * _1020) + _1072) * _1036) * ((cbModelParam._m0[1u].w * (_2063 - _1965)) + _1965);
    float _2082 = (((_1071 * _1022) + _1072) * _1036) * ((cbModelParam._m0[1u].w * (_2065 - _1967)) + _1967);
    float _2084 = (((_1071 * _1023) + _1072) * _1036) * ((cbModelParam._m0[1u].w * (_2067 - _1969)) + _1969);
    float _2087 = fma(_2084, cbSceneParam._m0[89u].z, fma(_2082, cbSceneParam._m0[89u].y, _2080 * cbSceneParam._m0[89u].x));
    float _2090 = fma(_2084, cbSceneParam._m0[90u].z, fma(_2082, cbSceneParam._m0[90u].y, _2080 * cbSceneParam._m0[90u].x));
    float _2093 = fma(_2084, cbSceneParam._m0[91u].z, fma(_2082, cbSceneParam._m0[91u].y, _2080 * cbSceneParam._m0[91u].x));
    uvec4 _2103 = floatBitsToUint(cbInstanceData._m0[_280 + 5u]);
    uint _2105 = _2103.x * 14u;
    uint _2106 = _2105 + 13u;
    float _2113 = _1036 + (-1.0);
    float _2118 = (cbLight._m0[_2106].x * _2113) + 1.0;
    float _2119 = (cbLight._m0[_2106].y * _2113) + 1.0;
    float _2120 = (cbLight._m0[_2106].z * _2113) + 1.0;
    float _2121 = (cbLight._m0[_2106].w * _2113) + 1.0;
    uint _2122 = _2105 + 5u;
    float _2128 = isnan(1.0) ? _2119 : (isnan(_2119) ? 1.0 : min(_2119, 1.0));
    uint _2132 = _2105 + 4u;
    float _2138 = isnan(1.0) ? _2118 : (isnan(_2118) ? 1.0 : min(_2118, 1.0));
    uint _2142 = _2105 | 1u;
    float _2153 = dot(vec3(cbLight._m0[_2105].xyz), vec3(_858, _859, _860));
    float _2156 = dot(vec3(cbLight._m0[_2142].xyz), vec3(_858, _859, _860));
    float _4416 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _4427 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2161 = (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * 0.3183098733425140380859375;
    float _2163 = (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * 0.3183098733425140380859375;
    float _2170 = ((cbLight._m0[_2122].x * _2128) * _2163) + ((cbLight._m0[_2132].x * _2138) * _2161);
    float _2171 = ((_2128 * cbLight._m0[_2122].y) * _2163) + ((_2138 * cbLight._m0[_2132].y) * _2161);
    float _2172 = ((_2128 * cbLight._m0[_2122].z) * _2163) + ((_2138 * cbLight._m0[_2132].z) * _2161);
    uvec4 _2176 = floatBitsToUint(cbLight._m0[_2105 + 12u]);
    bool _2178 = _2176.x == 0u;
    float _2189;
    float _2191;
    float _2193;
    if (_2178)
    {
        _2189 = _2170;
        _2191 = _2171;
        _2193 = _2172;
    }
    else
    {
        uint _2197 = _2105 + 6u;
        float _2213 = (dot(vec3(cbLight._m0[_2105 + 2u].xyz), vec3(_858, _859, _860)) * 0.5) + 0.5;
        float _2214 = _2213 * _2213;
        float _4438 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
        float _2215 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _2216 = isnan(1.0) ? _2120 : (isnan(_2120) ? 1.0 : min(_2120, 1.0));
        _2189 = (((cbLight._m0[_2197].x * 0.3183098733425140380859375) * _2215) * _2216) + _2170;
        _2191 = (((cbLight._m0[_2197].y * 0.3183098733425140380859375) * _2215) * _2216) + _2171;
        _2193 = (((cbLight._m0[_2197].z * 0.3183098733425140380859375) * _2215) * _2216) + _2172;
    }
    bool _2196 = _2176.y == 0u;
    float _2234;
    float _2236;
    float _2238;
    if (_2196)
    {
        _2234 = _2189;
        _2236 = _2191;
        _2238 = _2193;
    }
    else
    {
        uint _2404 = _2105 + 7u;
        float _2420 = (dot(vec3(cbLight._m0[_2105 + 3u].xyz), vec3(_858, _859, _860)) * 0.5) + 0.5;
        float _2421 = _2420 * _2420;
        float _4454 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        float _2422 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _2423 = isnan(1.0) ? _2121 : (isnan(_2121) ? 1.0 : min(_2121, 1.0));
        _2234 = (((cbLight._m0[_2404].x * 0.3183098733425140380859375) * _2422) * _2423) + _2189;
        _2236 = (((cbLight._m0[_2404].y * 0.3183098733425140380859375) * _2422) * _2423) + _2191;
        _2238 = (((cbLight._m0[_2404].z * 0.3183098733425140380859375) * _2422) * _2423) + _2193;
    }
    uint _2241 = _2105 + 8u;
    float _2254 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2105].w)) * _861) * 0.949999988079071044921875);
    float _2255 = _2254 * _2254;
    float _2256 = cbLight._m0[_2105].x + _938;
    float _2257 = cbLight._m0[_2105].y + _939;
    float _2258 = cbLight._m0[_2105].z + _940;
    float _2262 = inversesqrt(dot(vec3(_2256, _2257, _2258), vec3(_2256, _2257, _2258)));
    float _2263 = _2262 * _2256;
    float _2264 = _2262 * _2257;
    float _2265 = _2262 * _2258;
    float _2266 = dot(vec3(_858, _859, _860), vec3(cbLight._m0[_2105].xyz));
    float _4470 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _2269 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
    float _4481 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    float _2270 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
    float _2271 = dot(vec3(_858, _859, _860), vec3(_2263, _2264, _2265));
    float _4492 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2274 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
    float _2275 = dot(vec3(cbLight._m0[_2105].xyz), vec3(_2263, _2264, _2265));
    float _4503 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2279 = _2255 * _2255;
    float _2283 = ((_2274 * _2274) * (_2279 + (-1.0))) + 1.0;
    float _2291 = exp2(log2(1.0 - (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0)))) * 5.0);
    float _2292 = 0.959999978542327880859375 - _1017;
    float _2294 = 0.959999978542327880859375 - _1018;
    float _2295 = 0.959999978542327880859375 - _1019;
    float _2302 = 1.0 - _2255;
    float _2313 = (0.5 / (((_2270 * ((_2269 * _2302) + _2255)) + 9.9999999392252902907785028219223e-09) + (((_2270 * _2302) + _2255) * _2269))) * _2269;
    float _4514 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2315 = (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0))) * (_2279 / ((_2283 * _2283) * 3.141590118408203125));
    uint _2326 = _2105 + 9u;
    float _2337 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2142].w)) * _861) * 0.949999988079071044921875);
    float _2338 = _2337 * _2337;
    float _2339 = cbLight._m0[_2142].x + _938;
    float _2340 = cbLight._m0[_2142].y + _939;
    float _2341 = cbLight._m0[_2142].z + _940;
    float _2345 = inversesqrt(dot(vec3(_2339, _2340, _2341), vec3(_2339, _2340, _2341)));
    float _2346 = _2345 * _2339;
    float _2347 = _2345 * _2340;
    float _2348 = _2345 * _2341;
    float _2349 = dot(vec3(_858, _859, _860), vec3(cbLight._m0[_2142].xyz));
    float _4525 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
    float _2352 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
    float _2353 = dot(vec3(_858, _859, _860), vec3(_2346, _2347, _2348));
    float _4536 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _2356 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
    float _2357 = dot(vec3(cbLight._m0[_2142].xyz), vec3(_2346, _2347, _2348));
    float _4547 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2361 = _2338 * _2338;
    float _2365 = ((_2356 * _2356) * (_2361 + (-1.0))) + 1.0;
    float _2372 = exp2(log2(1.0 - (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0)))) * 5.0);
    float _2379 = 1.0 - _2338;
    float _2389 = (0.5 / (((_2270 * ((_2352 * _2379) + _2338)) + 9.9999999392252902907785028219223e-09) + (((_2270 * _2379) + _2338) * _2352))) * _2352;
    float _4558 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2391 = (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * (_2361 / ((_2365 * _2365) * 3.141590118408203125));
    float _2401 = (((((_2372 * _2292) + _1020) * cbLight._m0[_2326].x) * _2391) * _2128) + (((((_2291 * _2292) + _1020) * cbLight._m0[_2241].x) * _2315) * _2138);
    float _2402 = (((((_2372 * _2294) + _1022) * cbLight._m0[_2326].y) * _2391) * _2128) + (((((_2291 * _2294) + _1022) * cbLight._m0[_2241].y) * _2315) * _2138);
    float _2403 = (((((_2372 * _2295) + _1023) * cbLight._m0[_2326].z) * _2391) * _2128) + (((((_2291 * _2295) + _1023) * cbLight._m0[_2241].z) * _2315) * _2138);
    float _2465;
    float _2467;
    float _2469;
    if (_2178)
    {
        _2465 = _2401;
        _2467 = _2402;
        _2469 = _2403;
    }
    else
    {
        uint _2471 = _2105 + 2u;
        uint _2475 = _2105 + 10u;
        float _2489 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2471].w)) * _861) * 0.949999988079071044921875);
        float _2490 = _2489 * _2489;
        float _2491 = cbLight._m0[_2471].x + _938;
        float _2492 = cbLight._m0[_2471].y + _939;
        float _2493 = cbLight._m0[_2471].z + _940;
        float _2497 = inversesqrt(dot(vec3(_2491, _2492, _2493), vec3(_2491, _2492, _2493)));
        float _2498 = _2497 * _2491;
        float _2499 = _2497 * _2492;
        float _2500 = _2497 * _2493;
        float _2501 = dot(vec3(_858, _859, _860), vec3(cbLight._m0[_2471].xyz));
        float _4569 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2504 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
        float _2505 = dot(vec3(_858, _859, _860), vec3(_2498, _2499, _2500));
        float _4580 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
        float _2508 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _2509 = dot(vec3(cbLight._m0[_2471].xyz), vec3(_2498, _2499, _2500));
        float _4591 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2513 = _2490 * _2490;
        float _2517 = ((_2508 * _2508) * (_2513 + (-1.0))) + 1.0;
        float _2524 = exp2(log2(1.0 - (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0)))) * 5.0);
        float _2531 = 1.0 - _2490;
        float _2541 = (0.5 / (((_2270 * ((_2504 * _2531) + _2490)) + 9.9999999392252902907785028219223e-09) + (((_2270 * _2531) + _2490) * _2504))) * _2504;
        float _4602 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2543 = (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * (_2513 / ((_2517 * _2517) * 3.141590118408203125));
        float _2544 = isnan(1.0) ? _2120 : (isnan(_2120) ? 1.0 : min(_2120, 1.0));
        _2465 = (((((_2524 * _2292) + _1020) * cbLight._m0[_2475].x) * _2543) * _2544) + _2401;
        _2467 = (((((_2524 * _2294) + _1022) * cbLight._m0[_2475].y) * _2543) * _2544) + _2402;
        _2469 = (((((_2524 * _2295) + _1023) * cbLight._m0[_2475].z) * _2543) * _2544) + _2403;
    }
    float _2579;
    float _2581;
    float _2583;
    if (_2196)
    {
        _2579 = _2465;
        _2581 = _2467;
        _2583 = _2469;
    }
    else
    {
        uint _2590 = _2105 + 3u;
        uint _2594 = _2105 + 11u;
        float _2608 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2590].w)) * _861) * 0.949999988079071044921875);
        float _2609 = _2608 * _2608;
        float _2610 = cbLight._m0[_2590].x + _938;
        float _2611 = cbLight._m0[_2590].y + _939;
        float _2612 = cbLight._m0[_2590].z + _940;
        float _2616 = inversesqrt(dot(vec3(_2610, _2611, _2612), vec3(_2610, _2611, _2612)));
        float _2617 = _2616 * _2610;
        float _2618 = _2616 * _2611;
        float _2619 = _2616 * _2612;
        float _2620 = dot(vec3(_858, _859, _860), vec3(cbLight._m0[_2590].xyz));
        float _4618 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
        float _2623 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
        float _2624 = dot(vec3(_858, _859, _860), vec3(_2617, _2618, _2619));
        float _4629 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
        float _2627 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
        float _2628 = dot(vec3(cbLight._m0[_2590].xyz), vec3(_2617, _2618, _2619));
        float _4640 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        float _2632 = _2609 * _2609;
        float _2636 = ((_2627 * _2627) * (_2632 + (-1.0))) + 1.0;
        float _2643 = exp2(log2(1.0 - (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0)))) * 5.0);
        float _2650 = 1.0 - _2609;
        float _2660 = (0.5 / (((_2270 * ((_2623 * _2650) + _2609)) + 9.9999999392252902907785028219223e-09) + (((_2270 * _2650) + _2609) * _2623))) * _2623;
        float _4651 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2662 = (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0))) * (_2632 / ((_2636 * _2636) * 3.141590118408203125));
        float _2663 = isnan(1.0) ? _2121 : (isnan(_2121) ? 1.0 : min(_2121, 1.0));
        _2579 = (((((_2643 * _2292) + _1020) * cbLight._m0[_2594].x) * _2662) * _2663) + _2465;
        _2581 = (((((_2643 * _2294) + _1022) * cbLight._m0[_2594].y) * _2662) * _2663) + _2467;
        _2583 = (((((_2643 * _2295) + _1023) * cbLight._m0[_2594].z) * _2662) * _2663) + _2469;
    }
    float _2798;
    float _2800;
    float _2802;
    float _2804;
    float _2806;
    float _2808;
    if (_2103.y == 0u)
    {
        float _2738 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2739 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2738;
        float _2740 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2738;
        float _2741 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2738;
        uvec4 _2753 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2754 = _2753.x;
        uint _2765 = uint((float(_2753.y) * floor(float(uint(cbSceneParam._m0[85u].y * _959) / _2754))) + floor(float(uint(cbSceneParam._m0[85u].x * _958) / _2754)));
        float _2775 = (log2(_2741 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2776 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
        uint _2779 = uint(isnan(14.0) ? _2776 : (isnan(_2776) ? 14.0 : min(_2776, 14.0)));
        uvec4 _2784 = texelFetch(g_lightClusterGridBuffer, int(((_2779 << 2u) + (_2765 << 6u)) >> 2u));
        uint _2785 = _2784.x;
        uint _2786 = _2753.z;
        float _2886;
        float _2888;
        float _2890;
        float _2892;
        float _2894;
        float _2896;
        if (((((1u << ((_2786 >> 4u) & 15u)) + 4294967295u) & _2785) == 0u) || ((_2786 & 240u) == 0u))
        {
            _2886 = 0.0;
            _2888 = 0.0;
            _2890 = 0.0;
            _2892 = 0.0;
            _2894 = 0.0;
            _2896 = 0.0;
        }
        else
        {
            float _2887;
            float _2889;
            float _2891;
            float _2893;
            float _2895;
            float _2897;
            float _3039 = 0.0;
            float _3040 = 0.0;
            float _3041 = 0.0;
            float _3042 = 0.0;
            float _3043 = 0.0;
            float _3044 = 0.0;
            uint _3045 = 0u;
            uint _3054;
            bool _3055;
            for (;;)
            {
                _3054 = texelFetch(g_lightClassification, int((((_2779 << 5u) + (_2765 << 9u)) + (_3045 << 2u)) >> 2u)).x;
                _3055 = _3054 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3055)
                {
                    frontier_phi_66_pred = _3039;
                    frontier_phi_66_pred_1 = _3044;
                    frontier_phi_66_pred_2 = _3043;
                    frontier_phi_66_pred_3 = _3042;
                    frontier_phi_66_pred_4 = _3041;
                    frontier_phi_66_pred_5 = _3040;
                }
                else
                {
                    float _3184;
                    float _3185;
                    float _3186;
                    float _3187;
                    float _3188;
                    float _3189;
                    uint _3190;
                    _3184 = _3039;
                    _3185 = _3040;
                    _3186 = _3041;
                    _3187 = _3042;
                    _3188 = _3043;
                    _3189 = _3044;
                    _3190 = _3054;
                    float _3111;
                    float _3112;
                    float _3113;
                    float _3114;
                    float _3115;
                    float _3116;
                    for (;;)
                    {
                        uint _3194 = uint(findLSB(_3190)) + (_3045 << 5u);
                        uint _3191 = (_3190 + 4294967295u) & _3190;
                        uint _3196 = _3194 * 48u;
                        vec4 _3210 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3196)).x, texelFetch(g_PointLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3196 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3196 + 3u)).x));
                        uint _3216 = (_3194 * 48u) + 4u;
                        vec4 _3229 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3216)).x, texelFetch(g_PointLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3216 + 3u)).x));
                        uint _3235 = (_3194 * 48u) + 8u;
                        vec3 _3246 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3235)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 2u)).x));
                        float _3250 = _3210.x - _2739;
                        float _3251 = _3210.y - _2740;
                        float _3252 = _3210.z - _2741;
                        float _3253 = dot(vec3(_3250, _3251, _3252), vec3(_3250, _3251, _3252));
                        float _3256 = inversesqrt(_3253);
                        float _3257 = _3256 * _3250;
                        float _3258 = _3256 * _3251;
                        float _3259 = _3256 * _3252;
                        float _3260 = dot(vec3(_977, _980, _983), vec3(_3257, _3258, _3259));
                        float _3265 = 1.0 - (_3253 * _3210.w);
                        float _4677 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                        float _3266 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                        float _3267 = sqrt(_3253) * _3229.w;
                        float _3270 = 1.39999997615814208984375 / (_3267 + 1.39999997615814208984375);
                        float _3271 = _3270 * _3270;
                        float _3274 = ((1.0 - _3271) * _3260) + _3271;
                        float _3277 = _3267 * _3267;
                        float _3281 = ((isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0))) * _3266) / ((_3277 * 0.699999988079071044921875) + 1.0);
                        float _3285 = (-0.0) - _2739;
                        float _3286 = (-0.0) - _2740;
                        float _3287 = (-0.0) - _2741;
                        float _3291 = inversesqrt(dot(vec3(_3285, _3286, _3287), vec3(_3285, _3286, _3287)));
                        float _3292 = _3291 * _3285;
                        float _3293 = _3291 * _3286;
                        float _3294 = _3291 * _3287;
                        float _3302 = exp2(log2(1.0 / ((_3277 * 3.5) + 5.0)) * 0.25);
                        float _3303 = 1.0 - _1052;
                        float _3310 = sqrt(1.0 - ((1.0 - (_3303 * _3303)) * (1.0 - (_3302 * _3302))));
                        float _3311 = _3310 * _3310;
                        float _3312 = _3311 * _3311;
                        float _3313 = _3292 + _3257;
                        float _3314 = _3293 + _3258;
                        float _3315 = _3294 + _3259;
                        float _3319 = inversesqrt(dot(vec3(_3313, _3314, _3315), vec3(_3313, _3314, _3315)));
                        float _3323 = dot(vec3(_977, _980, _983), vec3(_3292, _3293, _3294));
                        float _4693 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                        float _3326 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                        float _3327 = dot(vec3(_977, _980, _983), vec3(_3319 * _3313, _3319 * _3314, _3319 * _3315));
                        float _4704 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                        float _3330 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                        float _3334 = ((_3330 * _3330) * (_3312 + (-1.0))) + 1.0;
                        float _3335 = _3270 * _3311;
                        float _3336 = _3335 * _3335;
                        float _3339 = ((1.0 - _3336) * _3260) + _3336;
                        float _4715 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                        float _3340 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                        float _3341 = 1.0 - _3311;
                        float _3351 = (0.5 / (((_3340 * ((_3326 * _3341) + _3311)) + 9.9999999392252902907785028219223e-09) + (((_3340 * _3341) + _3311) * _3326))) * _3340;
                        float _4726 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                        float _3362 = (((_3312 * 3.1415927410125732421875) * (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0)))) / ((_3334 * _3334) * ((_3277 * 2.1991131305694580078125) + 3.141590118408203125))) * _3266;
                        _3114 = (_3281 * _3229.x) + _3187;
                        _3115 = (_3281 * _3229.y) + _3188;
                        _3116 = (_3281 * _3229.z) + _3189;
                        _3111 = (_3362 * _3246.x) + _3184;
                        _3112 = (_3362 * _3246.y) + _3185;
                        _3113 = (_3362 * _3246.z) + _3186;
                        if (_3191 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3184 = _3111;
                            _3185 = _3112;
                            _3186 = _3113;
                            _3187 = _3114;
                            _3188 = _3115;
                            _3189 = _3116;
                            _3190 = _3191;
                        }
                    }
                    frontier_phi_66_pred = _3111;
                    frontier_phi_66_pred_1 = _3116;
                    frontier_phi_66_pred_2 = _3115;
                    frontier_phi_66_pred_3 = _3114;
                    frontier_phi_66_pred_4 = _3113;
                    frontier_phi_66_pred_5 = _3112;
                }
                _2887 = frontier_phi_66_pred;
                _2897 = frontier_phi_66_pred_1;
                _2895 = frontier_phi_66_pred_2;
                _2893 = frontier_phi_66_pred_3;
                _2891 = frontier_phi_66_pred_4;
                _2889 = frontier_phi_66_pred_5;
                uint _3046 = _3045 + 1u;
                if (_3046 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3039 = _2887;
                    _3040 = _2889;
                    _3041 = _2891;
                    _3042 = _2893;
                    _3043 = _2895;
                    _3044 = _2897;
                    _3045 = _3046;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2886 = _2887;
            _2888 = _2889;
            _2890 = _2891;
            _2892 = _2893;
            _2894 = _2895;
            _2896 = _2897;
        }
        uvec4 _2900 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2901 = _2900.z;
        uint _2903 = (_2901 >> 8u) & 15u;
        float _3007;
        float _3009;
        float _3011;
        float _3013;
        float _3015;
        float _3017;
        if (((4294967295u << _2903) & _2785) == 0u)
        {
            _3007 = _2886;
            _3009 = _2888;
            _3011 = _2890;
            _3013 = _2892;
            _3015 = _2894;
            _3017 = _2896;
        }
        else
        {
            float _3032 = inversesqrt(dot(vec3(_2739, _2740, _2741), vec3(_2739, _2740, _2741)));
            float _3033 = _3032 * _2739;
            float _3034 = _3032 * _2740;
            float _3035 = _3032 * _2741;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2903 < ((_2901 >> 12u) & 15u))
            {
                float _3008;
                float _3010;
                float _3012;
                float _3014;
                float _3016;
                float _3018;
                float _3167 = _2886;
                float _3168 = _2888;
                float _3169 = _2890;
                float _3170 = _2892;
                float _3171 = _2894;
                float _3172 = _2896;
                uint _3173 = _2903;
                uint _3182;
                bool _3183;
                for (;;)
                {
                    _3182 = texelFetch(g_lightClassification, int((((_2779 << 5u) + (_2765 << 9u)) + (_3173 << 2u)) >> 2u)).x;
                    _3183 = _3182 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3183)
                    {
                        frontier_phi_77_pred = _3172;
                        frontier_phi_77_pred_1 = _3171;
                        frontier_phi_77_pred_2 = _3170;
                        frontier_phi_77_pred_3 = _3169;
                        frontier_phi_77_pred_4 = _3168;
                        frontier_phi_77_pred_5 = _3167;
                    }
                    else
                    {
                        float _3376;
                        float _3377;
                        float _3378;
                        float _3379;
                        float _3380;
                        float _3381;
                        float _3669;
                        float _3670;
                        float _3671;
                        float _3672;
                        float _3673;
                        float _3674;
                        float _3389 = _3167;
                        float _3390 = _3168;
                        float _3391 = _3169;
                        float _3392 = _3170;
                        float _3393 = _3171;
                        float _3394 = _3172;
                        uint _3395 = _3182;
                        uint _3396;
                        vec4 _3421;
                        float _3422;
                        vec4 _3437;
                        vec3 _3449;
                        vec4 _3464;
                        vec4 _3479;
                        float _3525;
                        bool _3526;
                        for (;;)
                        {
                            uint _3406 = ((_3173 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3395));
                            _3396 = (_3395 + 4294967295u) & _3395;
                            uint _3408 = _3406 * 40u;
                            _3421 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3408)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 3u)).x));
                            _3422 = _3421.w;
                            uint _3424 = (_3406 * 40u) + 4u;
                            _3437 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3424)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 3u)).x));
                            uint _3439 = (_3406 * 40u) + 8u;
                            _3449 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3439)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 2u)).x));
                            uint _3451 = (_3406 * 40u) + 16u;
                            _3464 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3451)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 3u)).x));
                            uint _3466 = (_3406 * 40u) + 20u;
                            _3479 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3466)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 3u)).x));
                            uint _3481 = (_3406 * 40u) + 24u;
                            vec4 _3494 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3481)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 3u)).x));
                            uint _3500 = (_3406 * 40u) + 28u;
                            vec4 _3513 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3500)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 3u)).x));
                            _3525 = fma(_2741, _3513.z, fma(_2740, _3513.y, _3513.x * _2739)) + _3513.w;
                            _3526 = !((fma(_2741, _3494.z, fma(_2740, _3494.y, _3494.x * _2739)) + _3494.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3526)
                            {
                                float _3553 = _3421.x - _2739;
                                float _3554 = _3421.y - _2740;
                                float _3555 = _3421.z - _2741;
                                float _3556 = dot(vec3(_3553, _3554, _3555), vec3(_3553, _3554, _3555));
                                float _3559 = inversesqrt(_3556);
                                float _3560 = _3559 * _3553;
                                float _3561 = _3559 * _3554;
                                float _3562 = _3559 * _3555;
                                float _3566 = 1.0 - (_3556 / (_3422 * _3422));
                                float _4737 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                                float _3567 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
                                float _3571 = sqrt(_3556) * _3437.w;
                                float _3573 = 1.39999997615814208984375 / (_3571 + 1.39999997615814208984375);
                                float _3574 = _3573 * _3573;
                                float _3577 = ((1.0 - _3574) * dot(vec3(_3560, _3561, _3562), vec3(_977, _980, _983))) + _3574;
                                float _3580 = _3571 * _3571;
                                float _3584 = (fma(_2741, _3464.z, fma(_2740, _3464.y, _3464.x * _2739)) + _3464.w) / _3525;
                                float _3585 = (fma(_2741, _3479.z, fma(_2740, _3479.y, _3479.x * _2739)) + _3479.w) / _3525;
                                float _3589 = 1.0 - dot(vec2(_3584, _3585), vec2(_3584, _3585));
                                float _4753 = isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0));
                                float _3590 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
                                float _3591 = _3590 * (((isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0))) * _3567) / ((_3580 * 0.699999988079071044921875) + 1.0));
                                float _3603 = exp2(log2(1.0 / ((_3580 * 3.5) + 5.0)) * 0.25);
                                float _3604 = 1.0 - _1052;
                                float _3611 = sqrt(1.0 - ((1.0 - (_3604 * _3604)) * (1.0 - (_3603 * _3603))));
                                float _3612 = _3611 * _3611;
                                float _3613 = _3612 * _3612;
                                float _3614 = _3560 - _3033;
                                float _3615 = _3561 - _3034;
                                float _3616 = _3562 - _3035;
                                float _3620 = inversesqrt(dot(vec3(_3614, _3615, _3616), vec3(_3614, _3615, _3616)));
                                float _3624 = dot(vec3(_977, _980, _983), vec3((-0.0) - _3033, (-0.0) - _3034, (-0.0) - _3035));
                                float _4764 = isnan(0.0) ? _3624 : (isnan(_3624) ? 0.0 : max(_3624, 0.0));
                                float _3627 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
                                float _3628 = dot(vec3(_977, _980, _983), vec3(_3620 * _3614, _3620 * _3615, _3620 * _3616));
                                float _4775 = isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0));
                                float _3631 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
                                float _3635 = ((_3631 * _3631) * (_3613 + (-1.0))) + 1.0;
                                float _3636 = _3573 * _3612;
                                float _3637 = _3636 * _3636;
                                float _3643 = ((1.0 - _3637) * dot(vec3(_977, _980, _983), vec3(_3560, _3561, _3562))) + _3637;
                                float _4786 = isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0));
                                float _3644 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
                                float _3645 = 1.0 - _3612;
                                float _3655 = (0.5 / (((_3644 * ((_3627 * _3645) + _3612)) + 9.9999999392252902907785028219223e-09) + (((_3644 * _3645) + _3612) * _3627))) * _3644;
                                float _4797 = isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0));
                                float _3665 = (_3590 * _3567) * (((_3613 * 3.1415927410125732421875) * (isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0)))) / ((_3635 * _3635) * ((_3580 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3591 * _3437.y;
                                frontier_phi_83_pred_1 = _3591 * _3437.x;
                                frontier_phi_83_pred_2 = _3665 * _3449.z;
                                frontier_phi_83_pred_3 = _3665 * _3449.y;
                                frontier_phi_83_pred_4 = _3665 * _3449.x;
                                frontier_phi_83_pred_5 = _3591 * _3437.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3673 = frontier_phi_83_pred;
                            _3672 = frontier_phi_83_pred_1;
                            _3671 = frontier_phi_83_pred_2;
                            _3670 = frontier_phi_83_pred_3;
                            _3669 = frontier_phi_83_pred_4;
                            _3674 = frontier_phi_83_pred_5;
                            _3379 = _3672 + _3392;
                            _3380 = _3673 + _3393;
                            _3381 = _3674 + _3394;
                            _3376 = _3669 + _3389;
                            _3377 = _3670 + _3390;
                            _3378 = _3671 + _3391;
                            if (_3396 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3389 = _3376;
                                _3390 = _3377;
                                _3391 = _3378;
                                _3392 = _3379;
                                _3393 = _3380;
                                _3394 = _3381;
                                _3395 = _3396;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3381;
                        frontier_phi_77_pred_1 = _3380;
                        frontier_phi_77_pred_2 = _3379;
                        frontier_phi_77_pred_3 = _3378;
                        frontier_phi_77_pred_4 = _3377;
                        frontier_phi_77_pred_5 = _3376;
                    }
                    _3018 = frontier_phi_77_pred;
                    _3016 = frontier_phi_77_pred_1;
                    _3014 = frontier_phi_77_pred_2;
                    _3012 = frontier_phi_77_pred_3;
                    _3010 = frontier_phi_77_pred_4;
                    _3008 = frontier_phi_77_pred_5;
                    uint _3174 = _3173 + 1u;
                    if (_3174 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3167 = _3008;
                        _3168 = _3010;
                        _3169 = _3012;
                        _3170 = _3014;
                        _3171 = _3016;
                        _3172 = _3018;
                        _3173 = _3174;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3012;
                frontier_phi_58_59_ladder_1 = _3018;
                frontier_phi_58_59_ladder_2 = _3016;
                frontier_phi_58_59_ladder_3 = _3014;
                frontier_phi_58_59_ladder_4 = _3010;
                frontier_phi_58_59_ladder_5 = _3008;
            }
            else
            {
                frontier_phi_58_59_ladder = _2890;
                frontier_phi_58_59_ladder_1 = _2896;
                frontier_phi_58_59_ladder_2 = _2894;
                frontier_phi_58_59_ladder_3 = _2892;
                frontier_phi_58_59_ladder_4 = _2888;
                frontier_phi_58_59_ladder_5 = _2886;
            }
            _3007 = frontier_phi_58_59_ladder_5;
            _3009 = frontier_phi_58_59_ladder_4;
            _3011 = frontier_phi_58_59_ladder;
            _3013 = frontier_phi_58_59_ladder_3;
            _3015 = frontier_phi_58_59_ladder_2;
            _3017 = frontier_phi_58_59_ladder_1;
        }
        float _3022 = isnan(1.0) ? _1036 : (isnan(_1036) ? 1.0 : min(_1036, 1.0));
        _2798 = (_3022 * _3013) + _2234;
        _2800 = (_3022 * _3015) + _2236;
        _2802 = (_3022 * _3017) + _2238;
        _2804 = ((_3007 * _1020) * _3022) + _2579;
        _2806 = ((_3009 * _1022) * _3022) + _2581;
        _2808 = ((_3011 * _1023) * _3022) + _2583;
    }
    else
    {
        _2798 = _2234;
        _2800 = _2236;
        _2802 = _2238;
        _2804 = _2579;
        _2806 = _2581;
        _2808 = _2583;
    }
    float _4813 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _4824 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _4835 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _2825 = ((isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0))) * (_2798 + ((isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0))) * _1036))) + ((_2804 + ((isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0))) * _1874)) * cbPerFrame._m0[3u].x);
    float _2826 = ((isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0))) * (_2800 + ((isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0))) * _1036))) + ((_2806 + ((isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0))) * _1874)) * cbPerFrame._m0[3u].x);
    float _2827 = ((isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0))) * (_2802 + ((isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0))) * _1036))) + ((_2808 + ((isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0))) * _1874)) * cbPerFrame._m0[3u].x);
    uint _2828 = _280 + 6u;
    float _2836 = _958 / cbSceneParam._m0[86u].x;
    float _2837 = _959 / cbSceneParam._m0[86u].y;
    vec4 _2851 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2836, _2837, (log2((isnan(cbSceneParam._m0[77u].w) ? _880 : (isnan(_880) ? cbSceneParam._m0[77u].w : min(_880, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2853 = _2851.x;
    float _2854 = _2851.y;
    float _2855 = _2851.z;
    float _2856 = _2851.w;
    float _2949;
    float _2951;
    float _2953;
    float _2955;
    if (_880 > cbSceneParam._m0[78u].w)
    {
        float _2911 = isnan(_880) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _880 : min(cbSceneParam._m0[80u].w, _880));
        float _2912 = _2911 / _880;
        float _2923 = _2912 * _931;
        float _2924 = _932 * _2912;
        float _2925 = (-0.0) - _2924;
        float _2927 = _2912 * _933;
        float _2929 = (cbSceneParam._m0[77u].w * _2925) / _2911;
        float _2930 = _2929 + cbSceneParam._m0[79u].w;
        float _2931 = cbSceneParam._m0[79u].w - _2924;
        float _2937 = sqrt(((_2923 * _2923) + (_2924 * _2924)) + (_2927 * _2927));
        float _2940 = (1.0 - (cbSceneParam._m0[77u].w / _2911)) * _2937;
        float _2945 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2947 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3124;
        if (abs((_2925 - _2929) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3124 = ((((_2930 > 0.0) ? exp2(_2945 * _2930) : (2.0 - exp2(_2947 * _2930))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2940;
        }
        else
        {
            float _3068 = 1.0 / cbSceneParam._m0[80u].x;
            float _3069 = isnan(_2931) ? _2930 : (isnan(_2930) ? _2931 : max(_2930, _2931));
            float _3070 = isnan(_2931) ? _2930 : (isnan(_2930) ? _2931 : min(_2930, _2931));
            float _3079 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : min(_3069, 0.0));
            float _3080 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : min(_3070, 0.0));
            _3124 = ((abs(_2937 / _2925) * cbSceneParam._m0[80u].y) * ((((_3079 - _3080) * 2.0) - ((exp2(_2945 * (isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0)))) - exp2(_2945 * (isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0))))) * _3068)) - ((exp2(_2947 * _3079) - exp2(_2947 * _3080)) * _3068))) + (_2940 * cbSceneParam._m0[80u].z);
        }
        vec4 _3126 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2836, _2837, 1.0), 0.0);
        float _3135 = exp2((_3124 * (-1.44269502162933349609375)) * (1.0 - _3126.w));
        float _3136 = log2(_3135);
        float _3152 = log2(_2856);
        _2949 = (exp2(_3152 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3136 * cbSceneParam._m0[78u].x)) * _3126.x) / cbSceneParam._m0[78u].x)) + _2853;
        _2951 = (exp2(_3152 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3136 * cbSceneParam._m0[78u].y)) * _3126.y) / cbSceneParam._m0[78u].y)) + _2854;
        _2953 = (exp2(_3152 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3136 * cbSceneParam._m0[78u].z)) * _3126.z) / cbSceneParam._m0[78u].z)) + _2855;
        _2955 = _3135 * _2856;
    }
    else
    {
        _2949 = _2853;
        _2951 = _2854;
        _2953 = _2855;
        _2955 = _2856;
    }
    bool _3162;
    vec4 _2965;
    vec4 _2987;
    float _2989;
    float _2993;
    float _2994;
    float _2995;
    float _2996;
    bool _3006;
    for (;;)
    {
        _2965 = cbMatDynParam._m0[0u];
        float _2967 = roundEven(_2965.y);
        bool _2968 = _2967 == 3.0;
        float _2969 = log2(_2955);
        float _2976 = exp2(_2969 * cbSceneParam._m0[78u].x) * _2825;
        float _2977 = exp2(_2969 * cbSceneParam._m0[78u].y) * _2826;
        float _2978 = exp2(_2969 * cbSceneParam._m0[78u].z) * _2827;
        float _2985 = _947 + (-0.5);
        _2987 = cbMtdParam._m0[1u];
        _2989 = _2987.y * _2985;
        float _2992 = (_2967 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2993 = _2992 * (_2968 ? _2976 : (_2976 + (cbSceneParam._m0[72u].w * _2949)));
        _2994 = _2992 * (_2968 ? _2977 : (_2977 + (cbSceneParam._m0[72u].w * _2951)));
        _2995 = _2992 * (_2968 ? _2978 : (_2978 + (cbSceneParam._m0[72u].w * _2953)));
        _2996 = _2985 * 0.999000012874603271484375;
        _3006 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3006)
        {
            if ((cbInstanceData._m0[_280 + 7u].x + _2996) < 0.5)
            {
                _3162 = true;
                break;
            }
        }
        uint _3103 = _996 + uint(_2965.w);
        if ((cbInstanceData._m0[_3103].w < 1.0) && ((cbInstanceData._m0[_3103].w + _2996) < 0.5))
        {
            _3162 = true;
            break;
        }
        if ((_2989 + 1.0) < _2987.x)
        {
            _3162 = true;
            break;
        }
        _3162 = false;
        break;
    }
    float _3367;
    if (_3162)
    {
        discard_state = true;
        _3367 = 0.0;
    }
    else
    {
        _3367 = cbInstanceData._m0[_2828].w;
    }
    SV_Target.x = _2993;
    SV_Target.y = _2994;
    SV_Target.z = _2995;
    SV_Target.w = _3367;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2828].w;
    discard_exit();
}


