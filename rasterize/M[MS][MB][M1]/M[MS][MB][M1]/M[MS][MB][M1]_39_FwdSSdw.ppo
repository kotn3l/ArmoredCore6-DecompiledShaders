#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _999;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _224 = uint(roundEven(NORMAL.w)) * 13u;
    uint _230 = _224 + 1u;
    uint _234 = _224 + 2u;
    float _243 = sqrt(((cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x) + (cbInstanceData._m0[_224].x * cbInstanceData._m0[_224].x)) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x));
    float _244 = _243 * TEXCOORD.z;
    float _245 = _243 * TEXCOORD.w;
    vec4 _264 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _270 = _264.x * cbMtdParam._m0[9u].x;
    float _271 = _264.y * cbMtdParam._m0[9u].y;
    float _272 = _264.z * cbMtdParam._m0[9u].z;
    vec4 _291 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _244) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _245) + cbTextureTilingScale._m0[14u].w));
    vec4 _311 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _315 = _311.z;
    float _320 = (_311.x * 2.0) + (-1.0);
    float _322 = (_311.y * 2.0) + (-1.0);
    float _323 = dot(vec2(_320, _322), vec2(_320, _322));
    float _3352 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _329 = sqrt(1.0 - (isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0))));
    vec4 _346 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _244) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _245) + cbTextureTilingScale._m0[11u].w));
    float _348 = _346.x;
    float _349 = 1.0 - _348;
    float _365 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_348 - _349) * cbMtdParam._m0[24u].z) + _349) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3363 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _366 = isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0));
    float _373 = (_366 * ((_291.x * cbMtdParam._m0[18u].x) - _270)) + _270;
    float _374 = (_366 * ((_291.y * cbMtdParam._m0[18u].y) - _271)) + _271;
    float _375 = (_366 * ((_291.z * cbMtdParam._m0[18u].z) - _272)) + _272;
    vec4 _388 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _390 = _388.x;
    float _392 = _390 - (_390 * _366);
    vec4 _405 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _244) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _245) + cbTextureTilingScale._m0[15u].w));
    float _412 = (_405.x * 2.0) + (-1.0);
    float _413 = (_405.y * 2.0) + (-1.0);
    float _414 = dot(vec2(_412, _413), vec2(_412, _413));
    float _3374 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _422 = (_366 * (_405.z - _315)) + _315;
    float _434 = (((_412 - _320) + (cbMtdParam._m0[21u].x * _320)) * _366) + _320;
    float _435 = (((_413 - _322) + (cbMtdParam._m0[21u].x * _322)) * _366) + _322;
    float _436 = (_366 * (sqrt(1.0 - (isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0)))) - _329)) + _329;
    float _441 = cbMtdParam._m0[22u].x + _311.w;
    float _444 = fma(_436, _211 * NORMAL.x, fma(_435, _218 * TANGENT.x, (_204 * _196) * _434));
    float _447 = fma(_436, _211 * NORMAL.y, fma(_435, _218 * TANGENT.y, (_204 * _197) * _434));
    float _450 = fma(_436, _211 * NORMAL.z, fma(_435, _218 * TANGENT.z, (_204 * _198) * _434));
    float _454 = inversesqrt(dot(vec3(_444, _447, _450), vec3(_444, _447, _450)));
    float _455 = _454 * _444;
    float _456 = _454 * _447;
    float _457 = _454 * _450;
    float _3385 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _458 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
    float _3396 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _3407 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _3418 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _3429 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _3440 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _463 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
    float _477 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _518 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _528 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _518);
    float _529 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _518);
    float _530 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _518);
    float _534 = inversesqrt(dot(vec3(_528, _529, _530), vec3(_528, _529, _530)));
    float _535 = _528 * _534;
    float _536 = _529 * _534;
    float _537 = _530 * _534;
    float _543 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _544 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _565 = fma(_457, cbSceneParam._m0[5u].z, fma(_456, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _455));
    float _568 = fma(_457, cbSceneParam._m0[6u].z, fma(_456, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _455));
    float _571 = fma(_457, cbSceneParam._m0[7u].z, fma(_456, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _455));
    uint _585 = (_224 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _591 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0)))) * cbInstanceData._m0[_585].x;
    float _592 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0)))) * cbInstanceData._m0[_585].y;
    float _593 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0)))) * cbInstanceData._m0[_585].z;
    float _3451 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _594 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
    float _3462 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _595 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
    float _3473 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _596 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
    float _597 = 1.0 - _463;
    float _598 = _594 * _597;
    float _599 = _595 * _597;
    float _600 = _596 * _597;
    float _605 = (_594 + (-0.039999999105930328369140625)) * _463;
    float _606 = (_595 + (-0.039999999105930328369140625)) * _463;
    float _607 = (_596 + (-0.039999999105930328369140625)) * _463;
    float _608 = _605 + 0.039999999105930328369140625;
    float _610 = _606 + 0.039999999105930328369140625;
    float _611 = _607 + 0.039999999105930328369140625;
    vec4 _620 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _543, cbSceneParam._m0[86u].y * _544));
    float _624 = ((isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0))) * TEXCOORD_5.w) * _620.x;
    float _625 = dot(vec3(_455, _456, _457), vec3(_535, _536, _537));
    float _628 = _625 * 2.0;
    float _632 = (_628 * _455) - _535;
    float _633 = (_628 * _456) - _536;
    float _634 = (_628 * _457) - _537;
    float _638 = abs(dot(vec3(_535, _536, _537), vec3(_455, _456, _457)));
    float _3484 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _640 = sqrt(_458);
    float _653 = exp2((_640 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_640 * 3.0));
    float _659 = (1.0 - _653) * ((_640 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _660 = _653 * _640;
    float _688 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _692 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _696 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _998;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _723 = fma(_696, cbModelParam._m0[26u].z, fma(_692, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _688));
        float _727 = fma(_696, cbModelParam._m0[27u].z, fma(_692, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _688));
        float _731 = fma(_696, cbModelParam._m0[28u].z, fma(_692, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _688));
        float _756 = _688 + _455;
        float _757 = _692 + _456;
        float _758 = _696 + _457;
        float _768 = fma(_758, cbModelParam._m0[26u].z, fma(_757, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _756)) - _723;
        float _769 = fma(_758, cbModelParam._m0[27u].z, fma(_757, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _756)) - _727;
        float _770 = fma(_758, cbModelParam._m0[28u].z, fma(_757, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _756)) - _731;
        float _774 = inversesqrt(dot(vec3(_768, _769, _770), vec3(_768, _769, _770)));
        float _787 = ((_774 * _768) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_723 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _788 = ((_774 * _769) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_727 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _789 = ((_774 * _770) / cbModelParam._m0[34u].z) + ((((((_731 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _792 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_787, _788, _789), 0.0);
        vec4 _799 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_787, _788, _789), 0.0);
        vec4 _806 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_787, _788, _789), 0.0);
        vec4 _813 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_787, _788, _789), 0.0);
        float _826 = exp2((_792.w + (-0.5)) * 20.0) * 2.0;
        float _827 = _826 * (_792.x + (-0.5));
        float _828 = _826 * (_792.y + (-0.5));
        float _829 = _826 * (_792.z + (-0.5));
        float _836 = exp2((_799.w + (-0.5)) * 20.0) * 2.0;
        float _837 = _836 * (_799.x + (-0.5));
        float _838 = _836 * (_799.y + (-0.5));
        float _839 = _836 * (_799.z + (-0.5));
        float _846 = exp2((_806.w + (-0.5)) * 20.0) * 2.0;
        float _847 = _846 * (_806.x + (-0.5));
        float _848 = _846 * (_806.y + (-0.5));
        float _849 = _846 * (_806.z + (-0.5));
        float _856 = exp2((_813.w + (-0.5)) * 20.0) * 2.0;
        float _857 = _856 * (_813.x + (-0.5));
        float _858 = _856 * (_813.y + (-0.5));
        float _859 = _856 * (_813.z + (-0.5));
        float _860 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _861 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _862 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _863 = _827 * 0.5;
        float _864 = _837 * 0.5;
        float _865 = _847 * 0.5;
        float _866 = dot(vec3(_863, _864, _865), vec3(_863, _864, _865));
        float _871 = (_866 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_866);
        float _880 = (dot(vec3(_455, _456, _457), vec3(_871 * _863, _871 * _864, _871 * _865)) + 1.0) * 0.5;
        float _3510 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _890 = sqrt(((_864 * _864) + (_863 * _863)) + (_865 * _865)) / (_860 + 9.9999997473787516355514526367188e-06);
        float _3521 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _891 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
        float _892 = _891 * 2.0;
        float _896 = (1.0 - _891) / (_891 + 1.0);
        float _3532 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _897 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
        float _906 = ((((1.0 - _897) * (_892 + 2.0)) * exp2(log2(isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0))) * (_892 + 1.0))) + _897) * _860;
        float _907 = _828 * 0.5;
        float _908 = _838 * 0.5;
        float _909 = _848 * 0.5;
        float _910 = dot(vec3(_907, _908, _909), vec3(_907, _908, _909));
        float _915 = (_910 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_910);
        float _923 = (dot(vec3(_455, _456, _457), vec3(_915 * _907, _915 * _908, _915 * _909)) + 1.0) * 0.5;
        float _3543 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _932 = sqrt(((_908 * _908) + (_907 * _907)) + (_909 * _909)) / (_861 + 9.9999997473787516355514526367188e-06);
        float _3554 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _933 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _934 = _933 * 2.0;
        float _938 = (1.0 - _933) / (_933 + 1.0);
        float _3565 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _948 = ((((1.0 - _939) * (_934 + 2.0)) * exp2(log2(isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0))) * (_934 + 1.0))) + _939) * _861;
        float _949 = _829 * 0.5;
        float _950 = _839 * 0.5;
        float _951 = _849 * 0.5;
        float _952 = dot(vec3(_949, _950, _951), vec3(_949, _950, _951));
        float _957 = (_952 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_952);
        float _965 = (dot(vec3(_455, _456, _457), vec3(_957 * _949, _957 * _950, _957 * _951)) + 1.0) * 0.5;
        float _3576 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _974 = sqrt(((_950 * _950) + (_949 * _949)) + (_951 * _951)) / (_862 + 9.9999997473787516355514526367188e-06);
        float _3587 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _976 = _975 * 2.0;
        float _980 = (1.0 - _975) / (_975 + 1.0);
        float _3598 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
        float _990 = ((((1.0 - _981) * (_976 + 2.0)) * exp2(log2(isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0))) * (_976 + 1.0))) + _981) * _862;
        _998 = _829;
        _1000 = _828;
        _1001 = _827;
        _1002 = _839;
        _1003 = _838;
        _1004 = _837;
        _1005 = _849;
        _1006 = _848;
        _1007 = _847;
        _1008 = _862;
        _1009 = _861;
        _1010 = _860;
        _1011 = cbModelParam._m0[36u].z * (isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0)));
        _1012 = cbModelParam._m0[36u].z * (isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0)));
        _1013 = cbModelParam._m0[36u].z * (isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0)));
    }
    else
    {
        _998 = _999;
        _1000 = _999;
        _1001 = _999;
        _1002 = _999;
        _1003 = _999;
        _1004 = _999;
        _1005 = _999;
        _1006 = _999;
        _1007 = _999;
        _1008 = _999;
        _1009 = _999;
        _1010 = _999;
        _1011 = 0.0;
        _1012 = 0.0;
        _1013 = 0.0;
    }
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1038 = fma(_696, cbModelParam._m0[30u].z, fma(_692, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _688));
        float _1042 = fma(_696, cbModelParam._m0[31u].z, fma(_692, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _688));
        float _1046 = fma(_696, cbModelParam._m0[32u].z, fma(_692, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _688));
        float _1069 = _688 + _455;
        float _1070 = _692 + _456;
        float _1071 = _696 + _457;
        float _1081 = fma(_1071, cbModelParam._m0[30u].z, fma(_1070, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1069)) - _1038;
        float _1082 = fma(_1071, cbModelParam._m0[31u].z, fma(_1070, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1069)) - _1042;
        float _1083 = fma(_1071, cbModelParam._m0[32u].z, fma(_1070, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1069)) - _1046;
        float _1087 = inversesqrt(dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083)));
        float _1100 = ((_1087 * _1081) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1038 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1101 = ((_1087 * _1082) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1042 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1102 = ((_1087 * _1083) / cbModelParam._m0[35u].z) + ((((((_1046 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        float _1137 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1104.x + (-0.5));
        float _1139 = _1137 * (_1104.y + (-0.5));
        float _1140 = _1137 * (_1104.z + (-0.5));
        float _1147 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1111.x + (-0.5));
        float _1149 = _1147 * (_1111.y + (-0.5));
        float _1150 = _1147 * (_1111.z + (-0.5));
        float _1157 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1118.x + (-0.5));
        float _1159 = _1157 * (_1118.y + (-0.5));
        float _1160 = _1157 * (_1118.z + (-0.5));
        float _1167 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1125.x + (-0.5));
        float _1169 = _1167 * (_1125.y + (-0.5));
        float _1170 = _1167 * (_1125.z + (-0.5));
        float _1171 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1172 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1173 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1174 = _1138 * 0.5;
        float _1175 = _1148 * 0.5;
        float _1176 = _1158 * 0.5;
        float _1177 = dot(vec3(_1174, _1175, _1176), vec3(_1174, _1175, _1176));
        float _1182 = (_1177 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1177);
        float _1190 = (dot(vec3(_455, _456, _457), vec3(_1182 * _1174, _1182 * _1175, _1182 * _1176)) + 1.0) * 0.5;
        float _3639 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1199 = sqrt(((_1175 * _1175) + (_1174 * _1174)) + (_1176 * _1176)) / (_1171 + 9.9999997473787516355514526367188e-06);
        float _3650 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _1201 = _1200 * 2.0;
        float _1205 = (1.0 - _1200) / (_1200 + 1.0);
        float _3661 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _1215 = ((((1.0 - _1206) * (_1201 + 2.0)) * exp2(log2(isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) * (_1201 + 1.0))) + _1206) * _1171;
        float _1216 = _1139 * 0.5;
        float _1217 = _1149 * 0.5;
        float _1218 = _1159 * 0.5;
        float _1219 = dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218));
        float _1224 = (_1219 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1219);
        float _1232 = (dot(vec3(_455, _456, _457), vec3(_1224 * _1216, _1224 * _1217, _1224 * _1218)) + 1.0) * 0.5;
        float _3672 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1241 = sqrt(((_1217 * _1217) + (_1216 * _1216)) + (_1218 * _1218)) / (_1172 + 9.9999997473787516355514526367188e-06);
        float _3683 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1243 = _1242 * 2.0;
        float _1247 = (1.0 - _1242) / (_1242 + 1.0);
        float _3694 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1257 = ((((1.0 - _1248) * (_1243 + 2.0)) * exp2(log2(isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * (_1243 + 1.0))) + _1248) * _1172;
        float _1258 = _1140 * 0.5;
        float _1259 = _1150 * 0.5;
        float _1260 = _1160 * 0.5;
        float _1261 = dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260));
        float _1266 = (_1261 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1261);
        float _1274 = (dot(vec3(_455, _456, _457), vec3(_1266 * _1258, _1266 * _1259, _1266 * _1260)) + 1.0) * 0.5;
        float _3705 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1283 = sqrt(((_1259 * _1259) + (_1258 * _1258)) + (_1260 * _1260)) / (_1173 + 9.9999997473787516355514526367188e-06);
        float _3716 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1285 = _1284 * 2.0;
        float _1289 = (1.0 - _1284) / (_1284 + 1.0);
        float _3727 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1299 = ((((1.0 - _1290) * (_1285 + 2.0)) * exp2(log2(isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * (_1285 + 1.0))) + _1290) * _1173;
        _1307 = _1140;
        _1308 = _1139;
        _1309 = _1138;
        _1310 = _1150;
        _1311 = _1149;
        _1312 = _1148;
        _1313 = _1160;
        _1314 = _1159;
        _1315 = _1158;
        _1316 = _1173;
        _1317 = _1172;
        _1318 = _1171;
        _1319 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)));
        _1320 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)));
        _1321 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)));
    }
    else
    {
        _1307 = _999;
        _1308 = _999;
        _1309 = _999;
        _1310 = _999;
        _1311 = _999;
        _1312 = _999;
        _1313 = _999;
        _1314 = _999;
        _1315 = _999;
        _1316 = _999;
        _1317 = _999;
        _1318 = _999;
        _1319 = 0.0;
        _1320 = 0.0;
        _1321 = 0.0;
    }
    float _1331 = (cbModelParam._m0[1u].x * (_1319 - _1011)) + _1011;
    float _1332 = (cbModelParam._m0[1u].x * (_1320 - _1012)) + _1012;
    float _1333 = (cbModelParam._m0[1u].x * (_1321 - _1013)) + _1013;
    float _1354 = fma(_1333, cbSceneParam._m0[89u].z, fma(_1332, cbSceneParam._m0[89u].y, _1331 * cbSceneParam._m0[89u].x));
    float _1357 = fma(_1333, cbSceneParam._m0[90u].z, fma(_1332, cbSceneParam._m0[90u].y, _1331 * cbSceneParam._m0[90u].x));
    float _1360 = fma(_1333, cbSceneParam._m0[91u].z, fma(_1332, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1331));
    float _1375 = _632 * 0.5;
    float _1376 = _633 * 0.5;
    float _1377 = _634 * 0.5;
    float _1378 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_1309, _1312, _1315, _1318));
    float _1381 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_1308, _1311, _1314, _1317));
    float _1384 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_1307, _1310, _1313, _1316));
    float _1418;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1391 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_998, _1002, _1005, _1008));
        float _1395 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_1000, _1003, _1006, _1009));
        float _1399 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_1001, _1004, _1007, _1010));
        float _1406 = dot(vec4(cbModelParam._m0[39u]), vec4(_1375, _1376, _1377, 1.0));
        _1418 = dot(vec3(isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)), isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)), isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1406) ? 0.0 : (isnan(0.0) ? _1406 : max(0.0, _1406))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1418 = 1.0;
    }
    float _1429;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1420 = dot(vec4(cbModelParam._m0[40u]), vec4(_1375, _1376, _1377, 1.0));
        _1429 = dot(vec3(isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)), isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)), isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1420) ? 0.0 : (isnan(0.0) ? _1420 : max(0.0, _1420))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1429 = 1.0;
    }
    float _1433 = (_1429 * cbModelParam._m0[1u].x) + (_1418 * (1.0 - cbModelParam._m0[1u].x));
    float _1443 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _458);
    float _1444 = isnan(_1443) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1443 : min(cbModelParam._m0[25u].z, _1443));
    float _1524;
    float _1526;
    float _1528;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1491 = fma(_696, cbModelParam._m0[13u].z, fma(_692, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _688)) + cbModelParam._m0[13u].w;
        float _1495 = fma(_696, cbModelParam._m0[14u].z, fma(_692, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _688)) + cbModelParam._m0[14u].w;
        float _1499 = fma(_696, cbModelParam._m0[15u].z, fma(_692, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _688)) + cbModelParam._m0[15u].w;
        float _1502 = fma(_634, cbModelParam._m0[13u].z, fma(_633, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _632));
        float _1505 = fma(_634, cbModelParam._m0[14u].z, fma(_633, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _632));
        float _1508 = fma(_634, cbModelParam._m0[15u].z, fma(_633, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _632));
        float _1536;
        if (_1502 > 0.0)
        {
            _1536 = abs((1.0 - _1491) / _1502);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1502 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1491 + 1.0) / _1502);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1536 = frontier_phi_14_12_ladder;
        }
        float _1761;
        if (_1505 > 0.0)
        {
            _1761 = abs((1.0 - _1495) / _1505);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1505 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1495 + 1.0) / _1505);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1761 = frontier_phi_23_19_ladder;
        }
        float _2018;
        if (_1508 > 0.0)
        {
            _2018 = abs((1.0 - _1499) / _1508);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1508 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1499 + 1.0) / _1508);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2018 = frontier_phi_35_30_ladder;
        }
        float _2020 = isnan(_1761) ? _1536 : (isnan(_1536) ? _1761 : min(_1536, _1761));
        float _2021 = isnan(_2018) ? _2020 : (isnan(_2020) ? _2018 : min(_2020, _2018));
        float _2025 = (_2021 * _1502) + _1491;
        float _2026 = (_2021 * _1505) + _1495;
        float _2027 = (_2021 * _1508) + _1499;
        float _2028 = _2021 * 9.9999997473787516355514526367188e-05;
        float _2030 = (-1.0) - _2028;
        float _2032 = _2028 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2027 > _2032) || ((_2027 < _2030) || ((_2026 > _2032) || ((_2026 < _2030) || ((_2025 < _2030) || (_2025 > _2032))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2155 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2027, cbModelParam._m0[9u].z, fma(_2026, cbModelParam._m0[9u].y, _2025 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2027, cbModelParam._m0[10u].z, fma(_2026, cbModelParam._m0[10u].y, _2025 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2027, cbModelParam._m0[11u].z, fma(_2026, cbModelParam._m0[11u].y, _2025 * cbModelParam._m0[11u].x))), _1444);
            frontier_phi_13_35_ladder = _2155.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2155.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2155.x * cbModelParam._m0[1u].y;
        }
        _1524 = frontier_phi_13_35_ladder_2;
        _1526 = frontier_phi_13_35_ladder_1;
        _1528 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1512 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_632, _633, _634), _1444);
        _1524 = _1512.x * cbModelParam._m0[1u].y;
        _1526 = _1512.y * cbModelParam._m0[1u].y;
        _1528 = _1512.z * cbModelParam._m0[1u].y;
    }
    float _1532 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _458);
    float _1533 = isnan(_1532) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1532 : min(cbModelParam._m0[25u].w, _1532));
    float _1623;
    float _1625;
    float _1627;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1587 = fma(_696, cbModelParam._m0[21u].z, fma(_692, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _688)) + cbModelParam._m0[21u].w;
        float _1591 = fma(_696, cbModelParam._m0[22u].z, fma(_692, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _688)) + cbModelParam._m0[22u].w;
        float _1595 = fma(_696, cbModelParam._m0[23u].z, fma(_692, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _688)) + cbModelParam._m0[23u].w;
        float _1598 = fma(_634, cbModelParam._m0[21u].z, fma(_633, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _632));
        float _1601 = fma(_634, cbModelParam._m0[22u].z, fma(_633, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _632));
        float _1604 = fma(_634, cbModelParam._m0[23u].z, fma(_633, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _632));
        float _1766;
        if (_1598 > 0.0)
        {
            _1766 = abs((1.0 - _1587) / _1598);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1598 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1587 + 1.0) / _1598);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1766 = frontier_phi_25_21_ladder;
        }
        float _2045;
        if (_1601 > 0.0)
        {
            _2045 = abs((1.0 - _1591) / _1601);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1601 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1591 + 1.0) / _1601);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2045 = frontier_phi_37_32_ladder;
        }
        float _2258;
        if (_1604 > 0.0)
        {
            _2258 = abs((1.0 - _1595) / _1604);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1604 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1595 + 1.0) / _1604);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2258 = frontier_phi_46_43_ladder;
        }
        float _2260 = isnan(_2045) ? _1766 : (isnan(_1766) ? _2045 : min(_1766, _2045));
        float _2261 = isnan(_2258) ? _2260 : (isnan(_2260) ? _2258 : min(_2260, _2258));
        float _2265 = (_2261 * _1598) + _1587;
        float _2266 = (_2261 * _1601) + _1591;
        float _2267 = (_2261 * _1604) + _1595;
        float _2268 = _2261 * 9.9999997473787516355514526367188e-05;
        float _2269 = (-1.0) - _2268;
        float _2271 = _2268 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2267 > _2271) || ((_2267 < _2269) || ((_2266 > _2271) || ((_2266 < _2269) || ((_2265 < _2269) || (_2265 > _2271))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2466 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2267, cbModelParam._m0[17u].z, fma(_2266, cbModelParam._m0[17u].y, _2265 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2267, cbModelParam._m0[18u].z, fma(_2266, cbModelParam._m0[18u].y, _2265 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2267, cbModelParam._m0[19u].z, fma(_2266, cbModelParam._m0[19u].y, _2265 * cbModelParam._m0[19u].x))), _1533);
            frontier_phi_22_46_ladder = _2466.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2466.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2466.x * cbModelParam._m0[1u].z;
        }
        _1623 = frontier_phi_22_46_ladder_2;
        _1625 = frontier_phi_22_46_ladder_1;
        _1627 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1607 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_632, _633, _634), _1533);
        _1623 = _1607.x * cbModelParam._m0[1u].z;
        _1625 = _1607.y * cbModelParam._m0[1u].z;
        _1627 = _1607.z * cbModelParam._m0[1u].z;
    }
    float _1640 = (((_659 * _608) + _660) * _624) * ((cbModelParam._m0[1u].w * (_1623 - _1524)) + _1524);
    float _1642 = (((_659 * _610) + _660) * _624) * ((cbModelParam._m0[1u].w * (_1625 - _1526)) + _1526);
    float _1644 = (((_659 * _611) + _660) * _624) * ((cbModelParam._m0[1u].w * (_1627 - _1528)) + _1528);
    float _1647 = fma(_1644, cbSceneParam._m0[89u].z, fma(_1642, cbSceneParam._m0[89u].y, _1640 * cbSceneParam._m0[89u].x));
    float _1650 = fma(_1644, cbSceneParam._m0[90u].z, fma(_1642, cbSceneParam._m0[90u].y, _1640 * cbSceneParam._m0[90u].x));
    float _1653 = fma(_1644, cbSceneParam._m0[91u].z, fma(_1642, cbSceneParam._m0[91u].y, _1640 * cbSceneParam._m0[91u].x));
    vec4 _1661 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_543, _544));
    float _1663 = _1661.w;
    float _1675 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1663);
    float _1676 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1663);
    float _1677 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1663);
    uvec4 _1681 = floatBitsToUint(cbInstanceData._m0[_224 + 5u]);
    uint _1683 = _1681.x * 14u;
    uint _1684 = _1683 + 13u;
    float _1691 = _624 + (-1.0);
    float _1696 = (cbLight._m0[_1684].x * _1691) + 1.0;
    float _1697 = (cbLight._m0[_1684].y * _1691) + 1.0;
    float _1698 = (cbLight._m0[_1684].z * _1691) + 1.0;
    float _1699 = (cbLight._m0[_1684].w * _1691) + 1.0;
    uint _1700 = _1683 + 5u;
    float _1706 = isnan(1.0) ? _1697 : (isnan(_1697) ? 1.0 : min(_1697, 1.0));
    uint _1710 = _1683 + 4u;
    float _1720 = isnan(1.0) ? _1696 : (isnan(_1696) ? 1.0 : min(_1696, 1.0));
    uint _1724 = _1683 | 1u;
    float _1735 = dot(vec3(cbLight._m0[_1683].xyz), vec3(_455, _456, _457));
    float _1738 = dot(vec3(cbLight._m0[_1724].xyz), vec3(_455, _456, _457));
    float _3863 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
    float _3874 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
    float _1743 = (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * 0.3183098733425140380859375;
    float _1745 = (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * 0.3183098733425140380859375;
    float _1752 = ((cbLight._m0[_1700].x * _1706) * _1745) + (((cbLight._m0[_1710].x * _1675) * _1720) * _1743);
    float _1753 = ((_1706 * cbLight._m0[_1700].y) * _1745) + (((cbLight._m0[_1710].y * _1676) * _1720) * _1743);
    float _1754 = ((_1706 * cbLight._m0[_1700].z) * _1745) + (((cbLight._m0[_1710].z * _1677) * _1720) * _1743);
    uvec4 _1758 = floatBitsToUint(cbLight._m0[_1683 + 12u]);
    bool _1760 = _1758.x == 0u;
    float _1771;
    float _1773;
    float _1775;
    if (_1760)
    {
        _1771 = _1752;
        _1773 = _1753;
        _1775 = _1754;
    }
    else
    {
        uint _1779 = _1683 + 6u;
        float _1795 = (dot(vec3(cbLight._m0[_1683 + 2u].xyz), vec3(_455, _456, _457)) * 0.5) + 0.5;
        float _1796 = _1795 * _1795;
        float _3885 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
        float _1797 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1798 = isnan(1.0) ? _1698 : (isnan(_1698) ? 1.0 : min(_1698, 1.0));
        _1771 = (((cbLight._m0[_1779].x * 0.3183098733425140380859375) * _1797) * _1798) + _1752;
        _1773 = (((cbLight._m0[_1779].y * 0.3183098733425140380859375) * _1797) * _1798) + _1753;
        _1775 = (((cbLight._m0[_1779].z * 0.3183098733425140380859375) * _1797) * _1798) + _1754;
    }
    bool _1778 = _1758.y == 0u;
    float _1816;
    float _1818;
    float _1820;
    if (_1778)
    {
        _1816 = _1771;
        _1818 = _1773;
        _1820 = _1775;
    }
    else
    {
        uint _1989 = _1683 + 7u;
        float _2005 = (dot(vec3(cbLight._m0[_1683 + 3u].xyz), vec3(_455, _456, _457)) * 0.5) + 0.5;
        float _2006 = _2005 * _2005;
        float _3901 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
        float _2007 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _2008 = isnan(1.0) ? _1699 : (isnan(_1699) ? 1.0 : min(_1699, 1.0));
        _1816 = (((cbLight._m0[_1989].x * 0.3183098733425140380859375) * _2007) * _2008) + _1771;
        _1818 = (((cbLight._m0[_1989].y * 0.3183098733425140380859375) * _2007) * _2008) + _1773;
        _1820 = (((cbLight._m0[_1989].z * 0.3183098733425140380859375) * _2007) * _2008) + _1775;
    }
    uint _1823 = _1683 + 8u;
    float _1836 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1683].w)) * _458) * 0.949999988079071044921875);
    float _1837 = _1836 * _1836;
    float _1838 = cbLight._m0[_1683].x + _535;
    float _1839 = cbLight._m0[_1683].y + _536;
    float _1840 = cbLight._m0[_1683].z + _537;
    float _1844 = inversesqrt(dot(vec3(_1838, _1839, _1840), vec3(_1838, _1839, _1840)));
    float _1845 = _1844 * _1838;
    float _1846 = _1844 * _1839;
    float _1847 = _1844 * _1840;
    float _1848 = dot(vec3(_455, _456, _457), vec3(cbLight._m0[_1683].xyz));
    float _3917 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _1851 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _3928 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _1852 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _1853 = dot(vec3(_455, _456, _457), vec3(_1845, _1846, _1847));
    float _3939 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
    float _1856 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _1857 = dot(vec3(cbLight._m0[_1683].xyz), vec3(_1845, _1846, _1847));
    float _3950 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1861 = _1837 * _1837;
    float _1865 = ((_1856 * _1856) * (_1861 + (-1.0))) + 1.0;
    float _1873 = exp2(log2(1.0 - (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0)))) * 5.0);
    float _1874 = 0.959999978542327880859375 - _605;
    float _1876 = 0.959999978542327880859375 - _606;
    float _1877 = 0.959999978542327880859375 - _607;
    float _1884 = 1.0 - _1837;
    float _1895 = (0.5 / (((_1852 * ((_1851 * _1884) + _1837)) + 9.9999999392252902907785028219223e-09) + (((_1852 * _1884) + _1837) * _1851))) * _1851;
    float _3961 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1897 = (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * (_1861 / ((_1865 * _1865) * 3.141590118408203125));
    uint _1911 = _1683 + 9u;
    float _1922 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1724].w)) * _458) * 0.949999988079071044921875);
    float _1923 = _1922 * _1922;
    float _1924 = cbLight._m0[_1724].x + _535;
    float _1925 = cbLight._m0[_1724].y + _536;
    float _1926 = cbLight._m0[_1724].z + _537;
    float _1930 = inversesqrt(dot(vec3(_1924, _1925, _1926), vec3(_1924, _1925, _1926)));
    float _1931 = _1930 * _1924;
    float _1932 = _1930 * _1925;
    float _1933 = _1930 * _1926;
    float _1934 = dot(vec3(_455, _456, _457), vec3(cbLight._m0[_1724].xyz));
    float _3972 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
    float _1937 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _1938 = dot(vec3(_455, _456, _457), vec3(_1931, _1932, _1933));
    float _3983 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
    float _1941 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _1942 = dot(vec3(cbLight._m0[_1724].xyz), vec3(_1931, _1932, _1933));
    float _3994 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
    float _1946 = _1923 * _1923;
    float _1950 = ((_1941 * _1941) * (_1946 + (-1.0))) + 1.0;
    float _1957 = exp2(log2(1.0 - (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0)))) * 5.0);
    float _1964 = 1.0 - _1923;
    float _1974 = (0.5 / (((_1852 * ((_1937 * _1964) + _1923)) + 9.9999999392252902907785028219223e-09) + (((_1852 * _1964) + _1923) * _1937))) * _1937;
    float _4005 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
    float _1976 = (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * (_1946 / ((_1950 * _1950) * 3.141590118408203125));
    float _1986 = (((((_1957 * _1874) + _608) * cbLight._m0[_1911].x) * _1976) * _1706) + ((((cbLight._m0[_1823].x * _1675) * ((_1873 * _1874) + _608)) * _1897) * _1720);
    float _1987 = (((((_1957 * _1876) + _610) * cbLight._m0[_1911].y) * _1976) * _1706) + ((((cbLight._m0[_1823].y * _1676) * ((_1873 * _1876) + _610)) * _1897) * _1720);
    float _1988 = (((((_1957 * _1877) + _611) * cbLight._m0[_1911].z) * _1976) * _1706) + ((((cbLight._m0[_1823].z * _1677) * ((_1873 * _1877) + _611)) * _1897) * _1720);
    float _2050;
    float _2052;
    float _2054;
    if (_1760)
    {
        _2050 = _1986;
        _2052 = _1987;
        _2054 = _1988;
    }
    else
    {
        uint _2056 = _1683 + 2u;
        uint _2060 = _1683 + 10u;
        float _2074 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2056].w)) * _458) * 0.949999988079071044921875);
        float _2075 = _2074 * _2074;
        float _2076 = cbLight._m0[_2056].x + _535;
        float _2077 = cbLight._m0[_2056].y + _536;
        float _2078 = cbLight._m0[_2056].z + _537;
        float _2082 = inversesqrt(dot(vec3(_2076, _2077, _2078), vec3(_2076, _2077, _2078)));
        float _2083 = _2082 * _2076;
        float _2084 = _2082 * _2077;
        float _2085 = _2082 * _2078;
        float _2086 = dot(vec3(_455, _456, _457), vec3(cbLight._m0[_2056].xyz));
        float _4016 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
        float _2089 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _2090 = dot(vec3(_455, _456, _457), vec3(_2083, _2084, _2085));
        float _4027 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
        float _2093 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _2094 = dot(vec3(cbLight._m0[_2056].xyz), vec3(_2083, _2084, _2085));
        float _4038 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
        float _2098 = _2075 * _2075;
        float _2102 = ((_2093 * _2093) * (_2098 + (-1.0))) + 1.0;
        float _2109 = exp2(log2(1.0 - (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0)))) * 5.0);
        float _2116 = 1.0 - _2075;
        float _2126 = (0.5 / (((_1852 * ((_2089 * _2116) + _2075)) + 9.9999999392252902907785028219223e-09) + (((_1852 * _2116) + _2075) * _2089))) * _2089;
        float _4049 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
        float _2128 = (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_2098 / ((_2102 * _2102) * 3.141590118408203125));
        float _2129 = isnan(1.0) ? _1698 : (isnan(_1698) ? 1.0 : min(_1698, 1.0));
        _2050 = (((((_2109 * _1874) + _608) * cbLight._m0[_2060].x) * _2128) * _2129) + _1986;
        _2052 = (((((_2109 * _1876) + _610) * cbLight._m0[_2060].y) * _2128) * _2129) + _1987;
        _2054 = (((((_2109 * _1877) + _611) * cbLight._m0[_2060].z) * _2128) * _2129) + _1988;
    }
    float _2164;
    float _2166;
    float _2168;
    if (_1778)
    {
        _2164 = _2050;
        _2166 = _2052;
        _2168 = _2054;
    }
    else
    {
        uint _2175 = _1683 + 3u;
        uint _2179 = _1683 + 11u;
        float _2193 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2175].w)) * _458) * 0.949999988079071044921875);
        float _2194 = _2193 * _2193;
        float _2195 = cbLight._m0[_2175].x + _535;
        float _2196 = cbLight._m0[_2175].y + _536;
        float _2197 = cbLight._m0[_2175].z + _537;
        float _2201 = inversesqrt(dot(vec3(_2195, _2196, _2197), vec3(_2195, _2196, _2197)));
        float _2202 = _2201 * _2195;
        float _2203 = _2201 * _2196;
        float _2204 = _2201 * _2197;
        float _2205 = dot(vec3(_455, _456, _457), vec3(cbLight._m0[_2175].xyz));
        float _4065 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
        float _2208 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _2209 = dot(vec3(_455, _456, _457), vec3(_2202, _2203, _2204));
        float _4076 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        float _2212 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _2213 = dot(vec3(cbLight._m0[_2175].xyz), vec3(_2202, _2203, _2204));
        float _4087 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        float _2217 = _2194 * _2194;
        float _2221 = ((_2212 * _2212) * (_2217 + (-1.0))) + 1.0;
        float _2228 = exp2(log2(1.0 - (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0)))) * 5.0);
        float _2235 = 1.0 - _2194;
        float _2245 = (0.5 / (((_1852 * ((_2208 * _2235) + _2194)) + 9.9999999392252902907785028219223e-09) + (((_1852 * _2235) + _2194) * _2208))) * _2208;
        float _4098 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        float _2247 = (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_2217 / ((_2221 * _2221) * 3.141590118408203125));
        float _2248 = isnan(1.0) ? _1699 : (isnan(_1699) ? 1.0 : min(_1699, 1.0));
        _2164 = (((((_2228 * _1874) + _608) * cbLight._m0[_2179].x) * _2247) * _2248) + _2050;
        _2166 = (((((_2228 * _1876) + _610) * cbLight._m0[_2179].y) * _2247) * _2248) + _2052;
        _2168 = (((((_2228 * _1877) + _611) * cbLight._m0[_2179].z) * _2247) * _2248) + _2054;
    }
    float _2383;
    float _2385;
    float _2387;
    float _2389;
    float _2391;
    float _2393;
    if (_1681.y == 0u)
    {
        float _2323 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2324 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2323;
        float _2325 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2323;
        float _2326 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2323;
        uvec4 _2338 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2339 = _2338.x;
        uint _2350 = uint((float(_2338.y) * floor(float(uint(cbSceneParam._m0[85u].y * _544) / _2339))) + floor(float(uint(cbSceneParam._m0[85u].x * _543) / _2339)));
        float _2360 = (log2(_2326 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2361 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        uint _2364 = uint(isnan(14.0) ? _2361 : (isnan(_2361) ? 14.0 : min(_2361, 14.0)));
        uvec4 _2369 = texelFetch(g_lightClusterGridBuffer, int(((_2364 << 2u) + (_2350 << 6u)) >> 2u));
        uint _2370 = _2369.x;
        uint _2371 = _2338.z;
        float _2471;
        float _2473;
        float _2475;
        float _2477;
        float _2479;
        float _2481;
        if (((((1u << ((_2371 >> 4u) & 15u)) + 4294967295u) & _2370) == 0u) || ((_2371 & 240u) == 0u))
        {
            _2471 = 0.0;
            _2473 = 0.0;
            _2475 = 0.0;
            _2477 = 0.0;
            _2479 = 0.0;
            _2481 = 0.0;
        }
        else
        {
            float _2472;
            float _2474;
            float _2476;
            float _2478;
            float _2480;
            float _2482;
            float _2616 = 0.0;
            float _2617 = 0.0;
            float _2618 = 0.0;
            float _2619 = 0.0;
            float _2620 = 0.0;
            float _2621 = 0.0;
            uint _2622 = 0u;
            uint _2631;
            bool _2632;
            for (;;)
            {
                _2631 = texelFetch(g_lightClassification, int((((_2364 << 5u) + (_2350 << 9u)) + (_2622 << 2u)) >> 2u)).x;
                _2632 = _2631 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2632)
                {
                    frontier_phi_61_pred = _2616;
                    frontier_phi_61_pred_1 = _2621;
                    frontier_phi_61_pred_2 = _2620;
                    frontier_phi_61_pred_3 = _2619;
                    frontier_phi_61_pred_4 = _2618;
                    frontier_phi_61_pred_5 = _2617;
                }
                else
                {
                    float _2740;
                    float _2741;
                    float _2742;
                    float _2743;
                    float _2744;
                    float _2745;
                    uint _2746;
                    _2740 = _2616;
                    _2741 = _2617;
                    _2742 = _2618;
                    _2743 = _2619;
                    _2744 = _2620;
                    _2745 = _2621;
                    _2746 = _2631;
                    float _2672;
                    float _2673;
                    float _2674;
                    float _2675;
                    float _2676;
                    float _2677;
                    for (;;)
                    {
                        uint _2750 = uint(findLSB(_2746)) + (_2622 << 5u);
                        uint _2747 = (_2746 + 4294967295u) & _2746;
                        uint _2752 = _2750 * 48u;
                        vec4 _2766 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2752)).x, texelFetch(g_PointLightRenderingBuffer, int(_2752 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2752 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2752 + 3u)).x));
                        uint _2772 = (_2750 * 48u) + 4u;
                        vec4 _2785 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2772)).x, texelFetch(g_PointLightRenderingBuffer, int(_2772 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2772 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2772 + 3u)).x));
                        uint _2791 = (_2750 * 48u) + 8u;
                        vec3 _2802 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2791)).x, texelFetch(g_PointLightRenderingBuffer, int(_2791 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2791 + 2u)).x));
                        float _2806 = _2766.x - _2324;
                        float _2807 = _2766.y - _2325;
                        float _2808 = _2766.z - _2326;
                        float _2809 = dot(vec3(_2806, _2807, _2808), vec3(_2806, _2807, _2808));
                        float _2812 = inversesqrt(_2809);
                        float _2813 = _2812 * _2806;
                        float _2814 = _2812 * _2807;
                        float _2815 = _2812 * _2808;
                        float _2816 = dot(vec3(_565, _568, _571), vec3(_2813, _2814, _2815));
                        float _2821 = 1.0 - (_2809 * _2766.w);
                        float _4124 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
                        float _2822 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
                        float _2823 = sqrt(_2809) * _2785.w;
                        float _2826 = 1.39999997615814208984375 / (_2823 + 1.39999997615814208984375);
                        float _2827 = _2826 * _2826;
                        float _2830 = ((1.0 - _2827) * _2816) + _2827;
                        float _2833 = _2823 * _2823;
                        float _2837 = ((isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0))) * _2822) / ((_2833 * 0.699999988079071044921875) + 1.0);
                        float _2841 = (-0.0) - _2324;
                        float _2842 = (-0.0) - _2325;
                        float _2843 = (-0.0) - _2326;
                        float _2847 = inversesqrt(dot(vec3(_2841, _2842, _2843), vec3(_2841, _2842, _2843)));
                        float _2848 = _2847 * _2841;
                        float _2849 = _2847 * _2842;
                        float _2850 = _2847 * _2843;
                        float _2858 = exp2(log2(1.0 / ((_2833 * 3.5) + 5.0)) * 0.25);
                        float _2859 = 1.0 - _640;
                        float _2866 = sqrt(1.0 - ((1.0 - (_2859 * _2859)) * (1.0 - (_2858 * _2858))));
                        float _2867 = _2866 * _2866;
                        float _2868 = _2867 * _2867;
                        float _2869 = _2848 + _2813;
                        float _2870 = _2849 + _2814;
                        float _2871 = _2850 + _2815;
                        float _2875 = inversesqrt(dot(vec3(_2869, _2870, _2871), vec3(_2869, _2870, _2871)));
                        float _2879 = dot(vec3(_565, _568, _571), vec3(_2848, _2849, _2850));
                        float _4140 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
                        float _2882 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
                        float _2883 = dot(vec3(_565, _568, _571), vec3(_2875 * _2869, _2875 * _2870, _2875 * _2871));
                        float _4151 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
                        float _2886 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
                        float _2890 = ((_2886 * _2886) * (_2868 + (-1.0))) + 1.0;
                        float _2891 = _2826 * _2867;
                        float _2892 = _2891 * _2891;
                        float _2895 = ((1.0 - _2892) * _2816) + _2892;
                        float _4162 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
                        float _2896 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
                        float _2897 = 1.0 - _2867;
                        float _2907 = (0.5 / (((_2896 * ((_2882 * _2897) + _2867)) + 9.9999999392252902907785028219223e-09) + (((_2896 * _2897) + _2867) * _2882))) * _2896;
                        float _4173 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
                        float _2918 = (((_2868 * 3.1415927410125732421875) * (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) / ((_2890 * _2890) * ((_2833 * 2.1991131305694580078125) + 3.141590118408203125))) * _2822;
                        _2675 = (_2837 * _2785.x) + _2743;
                        _2676 = (_2837 * _2785.y) + _2744;
                        _2677 = (_2837 * _2785.z) + _2745;
                        _2672 = (_2918 * _2802.x) + _2740;
                        _2673 = (_2918 * _2802.y) + _2741;
                        _2674 = (_2918 * _2802.z) + _2742;
                        if (_2747 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2740 = _2672;
                            _2741 = _2673;
                            _2742 = _2674;
                            _2743 = _2675;
                            _2744 = _2676;
                            _2745 = _2677;
                            _2746 = _2747;
                        }
                    }
                    frontier_phi_61_pred = _2672;
                    frontier_phi_61_pred_1 = _2677;
                    frontier_phi_61_pred_2 = _2676;
                    frontier_phi_61_pred_3 = _2675;
                    frontier_phi_61_pred_4 = _2674;
                    frontier_phi_61_pred_5 = _2673;
                }
                _2472 = frontier_phi_61_pred;
                _2482 = frontier_phi_61_pred_1;
                _2480 = frontier_phi_61_pred_2;
                _2478 = frontier_phi_61_pred_3;
                _2476 = frontier_phi_61_pred_4;
                _2474 = frontier_phi_61_pred_5;
                uint _2623 = _2622 + 1u;
                if (_2623 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2616 = _2472;
                    _2617 = _2474;
                    _2618 = _2476;
                    _2619 = _2478;
                    _2620 = _2480;
                    _2621 = _2482;
                    _2622 = _2623;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2471 = _2472;
            _2473 = _2474;
            _2475 = _2476;
            _2477 = _2478;
            _2479 = _2480;
            _2481 = _2482;
        }
        uvec4 _2485 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2486 = _2485.z;
        uint _2488 = (_2486 >> 8u) & 15u;
        float _2584;
        float _2586;
        float _2588;
        float _2590;
        float _2592;
        float _2594;
        if (((4294967295u << _2488) & _2370) == 0u)
        {
            _2584 = _2471;
            _2586 = _2473;
            _2588 = _2475;
            _2590 = _2477;
            _2592 = _2479;
            _2594 = _2481;
        }
        else
        {
            float _2609 = inversesqrt(dot(vec3(_2324, _2325, _2326), vec3(_2324, _2325, _2326)));
            float _2610 = _2609 * _2324;
            float _2611 = _2609 * _2325;
            float _2612 = _2609 * _2326;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2488 < ((_2486 >> 12u) & 15u))
            {
                float _2585;
                float _2587;
                float _2589;
                float _2591;
                float _2593;
                float _2595;
                float _2723 = _2471;
                float _2724 = _2473;
                float _2725 = _2475;
                float _2726 = _2477;
                float _2727 = _2479;
                float _2728 = _2481;
                uint _2729 = _2488;
                uint _2738;
                bool _2739;
                for (;;)
                {
                    _2738 = texelFetch(g_lightClassification, int((((_2364 << 5u) + (_2350 << 9u)) + (_2729 << 2u)) >> 2u)).x;
                    _2739 = _2738 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2739)
                    {
                        frontier_phi_67_pred = _2726;
                        frontier_phi_67_pred_1 = _2727;
                        frontier_phi_67_pred_2 = _2728;
                        frontier_phi_67_pred_3 = _2725;
                        frontier_phi_67_pred_4 = _2724;
                        frontier_phi_67_pred_5 = _2723;
                    }
                    else
                    {
                        float _2923;
                        float _2924;
                        float _2925;
                        float _2926;
                        float _2927;
                        float _2928;
                        float _3218;
                        float _3219;
                        float _3220;
                        float _3221;
                        float _3222;
                        float _3223;
                        float _2936 = _2723;
                        float _2937 = _2724;
                        float _2938 = _2725;
                        float _2939 = _2726;
                        float _2940 = _2727;
                        float _2941 = _2728;
                        uint _2942 = _2738;
                        uint _2943;
                        vec4 _2968;
                        float _2969;
                        vec4 _2984;
                        vec3 _2996;
                        vec4 _3012;
                        vec4 _3028;
                        float _3074;
                        bool _3075;
                        for (;;)
                        {
                            uint _2953 = ((_2729 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2942));
                            _2943 = (_2942 + 4294967295u) & _2942;
                            uint _2955 = _2953 * 40u;
                            _2968 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2955)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 3u)).x));
                            _2969 = _2968.w;
                            uint _2971 = (_2953 * 40u) + 4u;
                            _2984 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2971)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 3u)).x));
                            uint _2986 = (_2953 * 40u) + 8u;
                            _2996 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2986)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 2u)).x));
                            uint _2999 = (_2953 * 40u) + 16u;
                            _3012 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2999)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 3u)).x));
                            uint _3015 = (_2953 * 40u) + 20u;
                            _3028 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3015)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 3u)).x));
                            uint _3030 = (_2953 * 40u) + 24u;
                            vec4 _3043 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3030)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 3u)).x));
                            uint _3049 = (_2953 * 40u) + 28u;
                            vec4 _3062 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3049)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 3u)).x));
                            _3074 = fma(_2326, _3062.z, fma(_2325, _3062.y, _3062.x * _2324)) + _3062.w;
                            _3075 = !((fma(_2326, _3043.z, fma(_2325, _3043.y, _3043.x * _2324)) + _3043.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3075)
                            {
                                float _3102 = _2968.x - _2324;
                                float _3103 = _2968.y - _2325;
                                float _3104 = _2968.z - _2326;
                                float _3105 = dot(vec3(_3102, _3103, _3104), vec3(_3102, _3103, _3104));
                                float _3108 = inversesqrt(_3105);
                                float _3109 = _3108 * _3102;
                                float _3110 = _3108 * _3103;
                                float _3111 = _3108 * _3104;
                                float _3115 = 1.0 - (_3105 / (_2969 * _2969));
                                float _4184 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                                float _3116 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
                                float _3120 = sqrt(_3105) * _2984.w;
                                float _3122 = 1.39999997615814208984375 / (_3120 + 1.39999997615814208984375);
                                float _3123 = _3122 * _3122;
                                float _3126 = ((1.0 - _3123) * dot(vec3(_3109, _3110, _3111), vec3(_565, _568, _571))) + _3123;
                                float _3129 = _3120 * _3120;
                                float _3133 = (fma(_2326, _3012.z, fma(_2325, _3012.y, _3012.x * _2324)) + _3012.w) / _3074;
                                float _3134 = (fma(_2326, _3028.z, fma(_2325, _3028.y, _3028.x * _2324)) + _3028.w) / _3074;
                                float _3138 = 1.0 - dot(vec2(_3133, _3134), vec2(_3133, _3134));
                                float _4200 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                                float _3139 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
                                float _3140 = _3139 * (((isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0))) * _3116) / ((_3129 * 0.699999988079071044921875) + 1.0));
                                float _3152 = exp2(log2(1.0 / ((_3129 * 3.5) + 5.0)) * 0.25);
                                float _3153 = 1.0 - _640;
                                float _3160 = sqrt(1.0 - ((1.0 - (_3153 * _3153)) * (1.0 - (_3152 * _3152))));
                                float _3161 = _3160 * _3160;
                                float _3162 = _3161 * _3161;
                                float _3163 = _3109 - _2610;
                                float _3164 = _3110 - _2611;
                                float _3165 = _3111 - _2612;
                                float _3169 = inversesqrt(dot(vec3(_3163, _3164, _3165), vec3(_3163, _3164, _3165)));
                                float _3173 = dot(vec3(_565, _568, _571), vec3((-0.0) - _2610, (-0.0) - _2611, (-0.0) - _2612));
                                float _4211 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                                float _3176 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
                                float _3177 = dot(vec3(_565, _568, _571), vec3(_3169 * _3163, _3169 * _3164, _3169 * _3165));
                                float _4222 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                                float _3180 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
                                float _3184 = ((_3180 * _3180) * (_3162 + (-1.0))) + 1.0;
                                float _3185 = _3122 * _3161;
                                float _3186 = _3185 * _3185;
                                float _3192 = ((1.0 - _3186) * dot(vec3(_565, _568, _571), vec3(_3109, _3110, _3111))) + _3186;
                                float _4233 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                                float _3193 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
                                float _3194 = 1.0 - _3161;
                                float _3204 = (0.5 / (((_3193 * ((_3176 * _3194) + _3161)) + 9.9999999392252902907785028219223e-09) + (((_3193 * _3194) + _3161) * _3176))) * _3193;
                                float _4244 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                                float _3214 = (_3139 * _3116) * (((_3162 * 3.1415927410125732421875) * (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0)))) / ((_3184 * _3184) * ((_3129 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3214 * _2996.x;
                                frontier_phi_73_pred_1 = _3214 * _2996.y;
                                frontier_phi_73_pred_2 = _3140 * _2984.z;
                                frontier_phi_73_pred_3 = _3140 * _2984.y;
                                frontier_phi_73_pred_4 = _3140 * _2984.x;
                                frontier_phi_73_pred_5 = _3214 * _2996.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3218 = frontier_phi_73_pred;
                            _3219 = frontier_phi_73_pred_1;
                            _3223 = frontier_phi_73_pred_2;
                            _3222 = frontier_phi_73_pred_3;
                            _3221 = frontier_phi_73_pred_4;
                            _3220 = frontier_phi_73_pred_5;
                            _2926 = _3221 + _2939;
                            _2927 = _3222 + _2940;
                            _2928 = _3223 + _2941;
                            _2923 = _3218 + _2936;
                            _2924 = _3219 + _2937;
                            _2925 = _3220 + _2938;
                            if (_2943 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2936 = _2923;
                                _2937 = _2924;
                                _2938 = _2925;
                                _2939 = _2926;
                                _2940 = _2927;
                                _2941 = _2928;
                                _2942 = _2943;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2926;
                        frontier_phi_67_pred_1 = _2927;
                        frontier_phi_67_pred_2 = _2928;
                        frontier_phi_67_pred_3 = _2925;
                        frontier_phi_67_pred_4 = _2924;
                        frontier_phi_67_pred_5 = _2923;
                    }
                    _2591 = frontier_phi_67_pred;
                    _2593 = frontier_phi_67_pred_1;
                    _2595 = frontier_phi_67_pred_2;
                    _2589 = frontier_phi_67_pred_3;
                    _2587 = frontier_phi_67_pred_4;
                    _2585 = frontier_phi_67_pred_5;
                    uint _2730 = _2729 + 1u;
                    if (_2730 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2723 = _2585;
                        _2724 = _2587;
                        _2725 = _2589;
                        _2726 = _2591;
                        _2727 = _2593;
                        _2728 = _2595;
                        _2729 = _2730;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2593;
                frontier_phi_55_56_ladder_1 = _2595;
                frontier_phi_55_56_ladder_2 = _2591;
                frontier_phi_55_56_ladder_3 = _2589;
                frontier_phi_55_56_ladder_4 = _2587;
                frontier_phi_55_56_ladder_5 = _2585;
            }
            else
            {
                frontier_phi_55_56_ladder = _2479;
                frontier_phi_55_56_ladder_1 = _2481;
                frontier_phi_55_56_ladder_2 = _2477;
                frontier_phi_55_56_ladder_3 = _2475;
                frontier_phi_55_56_ladder_4 = _2473;
                frontier_phi_55_56_ladder_5 = _2471;
            }
            _2584 = frontier_phi_55_56_ladder_5;
            _2586 = frontier_phi_55_56_ladder_4;
            _2588 = frontier_phi_55_56_ladder_3;
            _2590 = frontier_phi_55_56_ladder_2;
            _2592 = frontier_phi_55_56_ladder;
            _2594 = frontier_phi_55_56_ladder_1;
        }
        float _2599 = isnan(1.0) ? _624 : (isnan(_624) ? 1.0 : min(_624, 1.0));
        _2383 = (_2599 * _2590) + _1816;
        _2385 = (_2599 * _2592) + _1818;
        _2387 = (_2599 * _2594) + _1820;
        _2389 = ((_2584 * _608) * _2599) + _2164;
        _2391 = ((_2586 * _610) * _2599) + _2166;
        _2393 = ((_2588 * _611) * _2599) + _2168;
    }
    else
    {
        _2383 = _1816;
        _2385 = _1818;
        _2387 = _1820;
        _2389 = _2164;
        _2391 = _2166;
        _2393 = _2168;
    }
    float _4260 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _4271 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _4282 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    uint _2413 = _224 + 6u;
    float _2421 = _543 / cbSceneParam._m0[86u].x;
    float _2422 = _544 / cbSceneParam._m0[86u].y;
    vec4 _2436 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2421, _2422, (log2((isnan(cbSceneParam._m0[77u].w) ? _477 : (isnan(_477) ? cbSceneParam._m0[77u].w : min(_477, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2438 = _2436.x;
    float _2439 = _2436.y;
    float _2440 = _2436.z;
    float _2441 = _2436.w;
    float _2534;
    float _2536;
    float _2538;
    float _2540;
    if (_477 > cbSceneParam._m0[78u].w)
    {
        float _2496 = isnan(_477) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _477 : min(cbSceneParam._m0[80u].w, _477));
        float _2497 = _2496 / _477;
        float _2508 = _2497 * _528;
        float _2509 = _529 * _2497;
        float _2510 = (-0.0) - _2509;
        float _2512 = _2497 * _530;
        float _2514 = (cbSceneParam._m0[77u].w * _2510) / _2496;
        float _2515 = _2514 + cbSceneParam._m0[79u].w;
        float _2516 = cbSceneParam._m0[79u].w - _2509;
        float _2522 = sqrt(((_2508 * _2508) + (_2509 * _2509)) + (_2512 * _2512));
        float _2525 = (1.0 - (cbSceneParam._m0[77u].w / _2496)) * _2522;
        float _2530 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2532 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2685;
        if (abs((_2510 - _2514) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2685 = ((((_2515 > 0.0) ? exp2(_2530 * _2515) : (2.0 - exp2(_2532 * _2515))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2525;
        }
        else
        {
            float _2645 = 1.0 / cbSceneParam._m0[80u].x;
            float _2646 = isnan(_2516) ? _2515 : (isnan(_2515) ? _2516 : max(_2515, _2516));
            float _2647 = isnan(_2516) ? _2515 : (isnan(_2515) ? _2516 : min(_2515, _2516));
            float _2656 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : min(_2646, 0.0));
            float _2657 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : min(_2647, 0.0));
            _2685 = ((abs(_2522 / _2510) * cbSceneParam._m0[80u].y) * ((((_2656 - _2657) * 2.0) - ((exp2(_2530 * (isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0)))) - exp2(_2530 * (isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0))))) * _2645)) - ((exp2(_2532 * _2656) - exp2(_2532 * _2657)) * _2645))) + (_2525 * cbSceneParam._m0[80u].z);
        }
        vec4 _2687 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2421, _2422, 1.0), 0.0);
        float _2696 = exp2((_2685 * (-1.44269502162933349609375)) * (1.0 - _2687.w));
        float _2697 = log2(_2696);
        float _2713 = log2(_2441);
        _2534 = (exp2(_2713 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2697 * cbSceneParam._m0[78u].x)) * _2687.x) / cbSceneParam._m0[78u].x)) + _2438;
        _2536 = (exp2(_2713 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2697 * cbSceneParam._m0[78u].y)) * _2687.y) / cbSceneParam._m0[78u].y)) + _2439;
        _2538 = (exp2(_2713 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2697 * cbSceneParam._m0[78u].z)) * _2687.z) / cbSceneParam._m0[78u].z)) + _2440;
        _2540 = _2696 * _2441;
    }
    else
    {
        _2534 = _2438;
        _2536 = _2439;
        _2538 = _2440;
        _2540 = _2441;
    }
    float _2552 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2553 = _2552 == 3.0;
    float _2554 = log2(_2540);
    float _2561 = exp2(_2554 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (_2383 + ((isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0))) * _624))) + ((_2389 + ((isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0))) * _1433)) * cbPerFrame._m0[3u].x));
    float _2562 = exp2(_2554 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (_2385 + ((isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0))) * _624))) + ((_2391 + ((isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))) * _1433)) * cbPerFrame._m0[3u].x));
    float _2563 = exp2(_2554 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_2387 + ((isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0))) * _624))) + ((_2393 + ((isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))) * _1433)) * cbPerFrame._m0[3u].x));
    float _2572 = (_2552 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2572 * (_2553 ? _2561 : (_2561 + (cbSceneParam._m0[72u].w * _2534)));
    SV_Target.y = _2572 * (_2553 ? _2562 : (_2562 + (cbSceneParam._m0[72u].w * _2536)));
    SV_Target.z = _2572 * (_2553 ? _2563 : (_2563 + (cbSceneParam._m0[72u].w * _2538)));
    SV_Target.w = cbInstanceData._m0[_2413].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2413].w;
}


