#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1124;
float _3505;
float _3506;
float _3507;
float _3508;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _213 = _212 * _204;
    float _214 = _212 * _205;
    float _215 = _212 * _206;
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _227 = _226 * TANGENT.x;
    float _228 = _226 * TANGENT.y;
    float _229 = _226 * TANGENT.z;
    uint _232 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _232 + 1u;
    uint _242 = _232 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _272 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _278 = _272.x * cbMtdParam._m0[9u].x;
    float _279 = _272.y * cbMtdParam._m0[9u].y;
    float _280 = _272.z * cbMtdParam._m0[9u].z;
    vec4 _299 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _252) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _253) + cbTextureTilingScale._m0[14u].w));
    vec4 _319 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _252) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _253) + cbTextureTilingScale._m0[20u].w));
    vec4 _345 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _349 = _345.z;
    float _353 = (_345.x * 2.0) + (-1.0);
    float _354 = (_345.y * 2.0) + (-1.0);
    float _355 = dot(vec2(_353, _354), vec2(_353, _354));
    float _3517 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _361 = sqrt(1.0 - (isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0))));
    float _366 = _353 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_319.x * 2.0) + (-1.0)));
    float _367 = _354 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_319.y * 2.0) + (-1.0)));
    float _370 = fma(_361, _220, fma(_367, _227, _366 * _213));
    float _373 = fma(_361, _221, fma(_367, _228, _366 * _214));
    float _376 = fma(_361, _222, fma(_367, _229, _366 * _215));
    float _380 = inversesqrt(dot(vec3(_370, _373, _376), vec3(_370, _373, _376)));
    vec4 _416 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _252) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _253) + cbTextureTilingScale._m0[11u].w));
    float _418 = _416.x;
    float _419 = 1.0 - _418;
    float _426 = ((_418 - _419) * cbMtdParam._m0[24u].z) + _419;
    float _428 = (cbMtdParam._m0[19u].x + dot(vec4(_380 * _370, _380 * _373, _380 * _376, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_426 * cbMtdParam._m0[21u].z);
    float _3528 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _429 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
    float _444 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_426 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3539 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _445 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
    float _449 = ((_429 * ((_299.x * cbMtdParam._m0[18u].x) - _278)) * _445) + _278;
    float _450 = ((_429 * ((_299.y * cbMtdParam._m0[18u].y) - _279)) * _445) + _279;
    float _451 = ((_429 * ((_299.z * cbMtdParam._m0[18u].z) - _280)) * _445) + _280;
    vec4 _464 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _466 = _464.x;
    float _469 = _466 - ((_466 * _429) * _445);
    float _474 = (((_319.z - _349) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _349;
    vec4 _487 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _252) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _253) + cbTextureTilingScale._m0[15u].w));
    float _494 = (_487.x * 2.0) + (-1.0);
    float _495 = (_487.y * 2.0) + (-1.0);
    float _496 = dot(vec2(_494, _495), vec2(_494, _495));
    float _3550 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _505 = (((_487.z - _474) * _429) * _445) + _474;
    float _520 = (((cbMtdParam._m0[21u].x * _366) + ((_494 - _366) * _429)) * _445) + _366;
    float _521 = (((cbMtdParam._m0[21u].x * _367) + ((_495 - _367) * _429)) * _445) + _367;
    float _522 = (((sqrt(1.0 - (isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0)))) - _361) * _429) * _445) + _361;
    float _527 = cbMtdParam._m0[22u].x + _345.w;
    float _530 = fma(_522, _220, fma(_521, _227, _520 * _213));
    float _533 = fma(_522, _221, fma(_521, _228, _520 * _214));
    float _536 = fma(_522, _222, fma(_521, _229, _520 * _215));
    float _540 = inversesqrt(dot(vec3(_530, _533, _536), vec3(_530, _533, _536)));
    float _541 = _540 * _530;
    float _542 = _540 * _533;
    float _543 = _540 * _536;
    float _3561 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _544 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
    float _3572 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _3583 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _3594 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _3605 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _3616 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _549 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
    float _563 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _604 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _614 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _604);
    float _615 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _604);
    float _616 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _604);
    float _620 = inversesqrt(dot(vec3(_614, _615, _616), vec3(_614, _615, _616)));
    float _621 = _614 * _620;
    float _622 = _615 * _620;
    float _623 = _616 * _620;
    vec4 _628 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _630 = _628.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _805 = sqrt(((_614 * _614) + (_615 * _615)) + (_616 * _616));
        float _811 = (cbMatDynParam._m0[5u].x * _805) + cbMatDynParam._m0[5u].y;
        float _3627 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _812 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _816 = (cbMatDynParam._m0[5u].z * _805) + cbMatDynParam._m0[5u].w;
        float _3638 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) - _812)) + _812) < ((_630 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _642 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _643 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _663 = fma(_543, cbSceneParam._m0[5u].z, fma(_542, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _541));
    float _666 = fma(_543, cbSceneParam._m0[6u].z, fma(_542, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _541));
    float _669 = fma(_543, cbSceneParam._m0[7u].z, fma(_542, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _541));
    uint _682 = _232 + 9u;
    uint _683 = _682 + uint(cbMatDynParam._m0[0u].w);
    float _689 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0)))) * cbInstanceData._m0[_683].x;
    float _690 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0)))) * cbInstanceData._m0[_683].y;
    float _691 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0)))) * cbInstanceData._m0[_683].z;
    float _3649 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _692 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
    float _3660 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _693 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
    float _3671 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _694 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
    float _695 = 1.0 - _549;
    float _696 = _692 * _695;
    float _697 = _693 * _695;
    float _698 = _694 * _695;
    float _703 = (_692 + (-0.039999999105930328369140625)) * _549;
    float _704 = (_693 + (-0.039999999105930328369140625)) * _549;
    float _705 = (_694 + (-0.039999999105930328369140625)) * _549;
    float _706 = _703 + 0.039999999105930328369140625;
    float _708 = _704 + 0.039999999105930328369140625;
    float _709 = _705 + 0.039999999105930328369140625;
    vec4 _718 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _642, cbSceneParam._m0[86u].y * _643));
    float _722 = ((isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))) * TEXCOORD_5.w) * _718.x;
    float _723 = dot(vec3(_541, _542, _543), vec3(_621, _622, _623));
    float _726 = _723 * 2.0;
    float _730 = (_726 * _541) - _621;
    float _731 = (_726 * _542) - _622;
    float _732 = (_726 * _543) - _623;
    float _736 = abs(dot(vec3(_621, _622, _623), vec3(_541, _542, _543)));
    float _3682 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _738 = sqrt(_544);
    float _751 = exp2((_738 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_738 * 3.0));
    float _757 = (1.0 - _751) * ((_738 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _758 = _751 * _738;
    float _786 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _790 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _794 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1123;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _848 = fma(_794, cbModelParam._m0[26u].z, fma(_790, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _786));
        float _852 = fma(_794, cbModelParam._m0[27u].z, fma(_790, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _786));
        float _856 = fma(_794, cbModelParam._m0[28u].z, fma(_790, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _786));
        float _881 = _786 + _541;
        float _882 = _790 + _542;
        float _883 = _794 + _543;
        float _893 = fma(_883, cbModelParam._m0[26u].z, fma(_882, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _881)) - _848;
        float _894 = fma(_883, cbModelParam._m0[27u].z, fma(_882, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _881)) - _852;
        float _895 = fma(_883, cbModelParam._m0[28u].z, fma(_882, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _881)) - _856;
        float _899 = inversesqrt(dot(vec3(_893, _894, _895), vec3(_893, _894, _895)));
        float _912 = ((_899 * _893) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_848 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _913 = ((_899 * _894) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_852 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _914 = ((_899 * _895) / cbModelParam._m0[34u].z) + ((((((_856 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _917 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        vec4 _924 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        vec4 _931 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        vec4 _938 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        float _951 = exp2((_917.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_917.x + (-0.5));
        float _953 = _951 * (_917.y + (-0.5));
        float _954 = _951 * (_917.z + (-0.5));
        float _961 = exp2((_924.w + (-0.5)) * 20.0) * 2.0;
        float _962 = _961 * (_924.x + (-0.5));
        float _963 = _961 * (_924.y + (-0.5));
        float _964 = _961 * (_924.z + (-0.5));
        float _971 = exp2((_931.w + (-0.5)) * 20.0) * 2.0;
        float _972 = _971 * (_931.x + (-0.5));
        float _973 = _971 * (_931.y + (-0.5));
        float _974 = _971 * (_931.z + (-0.5));
        float _981 = exp2((_938.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_938.x + (-0.5));
        float _983 = _981 * (_938.y + (-0.5));
        float _984 = _981 * (_938.z + (-0.5));
        float _985 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _986 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _987 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _988 = _952 * 0.5;
        float _989 = _962 * 0.5;
        float _990 = _972 * 0.5;
        float _991 = dot(vec3(_988, _989, _990), vec3(_988, _989, _990));
        float _996 = (_991 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_991);
        float _1005 = (dot(vec3(_541, _542, _543), vec3(_996 * _988, _996 * _989, _996 * _990)) + 1.0) * 0.5;
        float _3708 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1015 = sqrt(((_989 * _989) + (_988 * _988)) + (_990 * _990)) / (_985 + 9.9999997473787516355514526367188e-06);
        float _3719 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1017 = _1016 * 2.0;
        float _1021 = (1.0 - _1016) / (_1016 + 1.0);
        float _3730 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _1031 = ((((1.0 - _1022) * (_1017 + 2.0)) * exp2(log2(isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * (_1017 + 1.0))) + _1022) * _985;
        float _1032 = _953 * 0.5;
        float _1033 = _963 * 0.5;
        float _1034 = _973 * 0.5;
        float _1035 = dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034));
        float _1040 = (_1035 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1035);
        float _1048 = (dot(vec3(_541, _542, _543), vec3(_1040 * _1032, _1040 * _1033, _1040 * _1034)) + 1.0) * 0.5;
        float _3741 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1057 = sqrt(((_1033 * _1033) + (_1032 * _1032)) + (_1034 * _1034)) / (_986 + 9.9999997473787516355514526367188e-06);
        float _3752 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1059 = _1058 * 2.0;
        float _1063 = (1.0 - _1058) / (_1058 + 1.0);
        float _3763 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _1073 = ((((1.0 - _1064) * (_1059 + 2.0)) * exp2(log2(isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) * (_1059 + 1.0))) + _1064) * _986;
        float _1074 = _954 * 0.5;
        float _1075 = _964 * 0.5;
        float _1076 = _974 * 0.5;
        float _1077 = dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076));
        float _1082 = (_1077 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1077);
        float _1090 = (dot(vec3(_541, _542, _543), vec3(_1082 * _1074, _1082 * _1075, _1082 * _1076)) + 1.0) * 0.5;
        float _3774 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1099 = sqrt(((_1075 * _1075) + (_1074 * _1074)) + (_1076 * _1076)) / (_987 + 9.9999997473787516355514526367188e-06);
        float _3785 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1101 = _1100 * 2.0;
        float _1105 = (1.0 - _1100) / (_1100 + 1.0);
        float _3796 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
        float _1115 = ((((1.0 - _1106) * (_1101 + 2.0)) * exp2(log2(isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * (_1101 + 1.0))) + _1106) * _987;
        _1123 = _954;
        _1125 = _953;
        _1126 = _952;
        _1127 = _964;
        _1128 = _963;
        _1129 = _962;
        _1130 = _974;
        _1131 = _973;
        _1132 = _972;
        _1133 = _987;
        _1134 = _986;
        _1135 = _985;
        _1136 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0)));
        _1137 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0)));
        _1138 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0)));
    }
    else
    {
        _1123 = _1124;
        _1125 = _1124;
        _1126 = _1124;
        _1127 = _1124;
        _1128 = _1124;
        _1129 = _1124;
        _1130 = _1124;
        _1131 = _1124;
        _1132 = _1124;
        _1133 = _1124;
        _1134 = _1124;
        _1135 = _1124;
        _1136 = 0.0;
        _1137 = 0.0;
        _1138 = 0.0;
    }
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1166 = fma(_794, cbModelParam._m0[30u].z, fma(_790, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _786));
        float _1170 = fma(_794, cbModelParam._m0[31u].z, fma(_790, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _786));
        float _1174 = fma(_794, cbModelParam._m0[32u].z, fma(_790, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _786));
        float _1197 = _786 + _541;
        float _1198 = _790 + _542;
        float _1199 = _794 + _543;
        float _1209 = fma(_1199, cbModelParam._m0[30u].z, fma(_1198, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1197)) - _1166;
        float _1210 = fma(_1199, cbModelParam._m0[31u].z, fma(_1198, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1197)) - _1170;
        float _1211 = fma(_1199, cbModelParam._m0[32u].z, fma(_1198, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1197)) - _1174;
        float _1215 = inversesqrt(dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211)));
        float _1228 = ((_1215 * _1209) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1166 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1229 = ((_1215 * _1210) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1170 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1230 = ((_1215 * _1211) / cbModelParam._m0[35u].z) + ((((((_1174 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1246 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1253 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        float _1265 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1232.x + (-0.5));
        float _1267 = _1265 * (_1232.y + (-0.5));
        float _1268 = _1265 * (_1232.z + (-0.5));
        float _1275 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1276 = _1275 * (_1239.x + (-0.5));
        float _1277 = _1275 * (_1239.y + (-0.5));
        float _1278 = _1275 * (_1239.z + (-0.5));
        float _1285 = exp2((_1246.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1246.x + (-0.5));
        float _1287 = _1285 * (_1246.y + (-0.5));
        float _1288 = _1285 * (_1246.z + (-0.5));
        float _1295 = exp2((_1253.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1253.x + (-0.5));
        float _1297 = _1295 * (_1253.y + (-0.5));
        float _1298 = _1295 * (_1253.z + (-0.5));
        float _1299 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1300 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = _1266 * 0.5;
        float _1303 = _1276 * 0.5;
        float _1304 = _1286 * 0.5;
        float _1305 = dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304));
        float _1310 = (_1305 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1305);
        float _1318 = (dot(vec3(_541, _542, _543), vec3(_1310 * _1302, _1310 * _1303, _1310 * _1304)) + 1.0) * 0.5;
        float _3837 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1327 = sqrt(((_1303 * _1303) + (_1302 * _1302)) + (_1304 * _1304)) / (_1299 + 9.9999997473787516355514526367188e-06);
        float _3848 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1329 = _1328 * 2.0;
        float _1333 = (1.0 - _1328) / (_1328 + 1.0);
        float _3859 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1343 = ((((1.0 - _1334) * (_1329 + 2.0)) * exp2(log2(isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_1329 + 1.0))) + _1334) * _1299;
        float _1344 = _1267 * 0.5;
        float _1345 = _1277 * 0.5;
        float _1346 = _1287 * 0.5;
        float _1347 = dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346));
        float _1352 = (_1347 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1347);
        float _1360 = (dot(vec3(_541, _542, _543), vec3(_1352 * _1344, _1352 * _1345, _1352 * _1346)) + 1.0) * 0.5;
        float _3870 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1369 = sqrt(((_1345 * _1345) + (_1344 * _1344)) + (_1346 * _1346)) / (_1300 + 9.9999997473787516355514526367188e-06);
        float _3881 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1371 = _1370 * 2.0;
        float _1375 = (1.0 - _1370) / (_1370 + 1.0);
        float _3892 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1385 = ((((1.0 - _1376) * (_1371 + 2.0)) * exp2(log2(isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_1371 + 1.0))) + _1376) * _1300;
        float _1386 = _1268 * 0.5;
        float _1387 = _1278 * 0.5;
        float _1388 = _1288 * 0.5;
        float _1389 = dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388));
        float _1394 = (_1389 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1389);
        float _1402 = (dot(vec3(_541, _542, _543), vec3(_1394 * _1386, _1394 * _1387, _1394 * _1388)) + 1.0) * 0.5;
        float _3903 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1411 = sqrt(((_1387 * _1387) + (_1386 * _1386)) + (_1388 * _1388)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _3914 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1413 = _1412 * 2.0;
        float _1417 = (1.0 - _1412) / (_1412 + 1.0);
        float _3925 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1427 = ((((1.0 - _1418) * (_1413 + 2.0)) * exp2(log2(isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_1413 + 1.0))) + _1418) * _1301;
        _1435 = _1268;
        _1436 = _1267;
        _1437 = _1266;
        _1438 = _1278;
        _1439 = _1277;
        _1440 = _1276;
        _1441 = _1288;
        _1442 = _1287;
        _1443 = _1286;
        _1444 = _1301;
        _1445 = _1300;
        _1446 = _1299;
        _1447 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)));
        _1448 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)));
        _1449 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)));
    }
    else
    {
        _1435 = _1124;
        _1436 = _1124;
        _1437 = _1124;
        _1438 = _1124;
        _1439 = _1124;
        _1440 = _1124;
        _1441 = _1124;
        _1442 = _1124;
        _1443 = _1124;
        _1444 = _1124;
        _1445 = _1124;
        _1446 = _1124;
        _1447 = 0.0;
        _1448 = 0.0;
        _1449 = 0.0;
    }
    float _1459 = (cbModelParam._m0[1u].x * (_1447 - _1136)) + _1136;
    float _1460 = (cbModelParam._m0[1u].x * (_1448 - _1137)) + _1137;
    float _1461 = (cbModelParam._m0[1u].x * (_1449 - _1138)) + _1138;
    float _1482 = fma(_1461, cbSceneParam._m0[89u].z, fma(_1460, cbSceneParam._m0[89u].y, _1459 * cbSceneParam._m0[89u].x));
    float _1485 = fma(_1461, cbSceneParam._m0[90u].z, fma(_1460, cbSceneParam._m0[90u].y, _1459 * cbSceneParam._m0[90u].x));
    float _1488 = fma(_1461, cbSceneParam._m0[91u].z, fma(_1460, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1459));
    float _1503 = _730 * 0.5;
    float _1504 = _731 * 0.5;
    float _1505 = _732 * 0.5;
    float _1506 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1437, _1440, _1443, _1446));
    float _1509 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1436, _1439, _1442, _1445));
    float _1512 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1435, _1438, _1441, _1444));
    float _1546;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1519 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1123, _1127, _1130, _1133));
        float _1523 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1125, _1128, _1131, _1134));
        float _1527 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1126, _1129, _1132, _1135));
        float _1534 = dot(vec4(cbModelParam._m0[39u]), vec4(_1503, _1504, _1505, 1.0));
        _1546 = dot(vec3(isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)), isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)), isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1534) ? 0.0 : (isnan(0.0) ? _1534 : max(0.0, _1534))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1546 = 1.0;
    }
    float _1557;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1548 = dot(vec4(cbModelParam._m0[40u]), vec4(_1503, _1504, _1505, 1.0));
        _1557 = dot(vec3(isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)), isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)), isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1548) ? 0.0 : (isnan(0.0) ? _1548 : max(0.0, _1548))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1557 = 1.0;
    }
    float _1561 = (_1557 * cbModelParam._m0[1u].x) + (_1546 * (1.0 - cbModelParam._m0[1u].x));
    float _1571 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _544);
    float _1572 = isnan(_1571) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1571 : min(cbModelParam._m0[25u].z, _1571));
    float _1652;
    float _1654;
    float _1656;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1619 = fma(_794, cbModelParam._m0[13u].z, fma(_790, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _786)) + cbModelParam._m0[13u].w;
        float _1623 = fma(_794, cbModelParam._m0[14u].z, fma(_790, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _786)) + cbModelParam._m0[14u].w;
        float _1627 = fma(_794, cbModelParam._m0[15u].z, fma(_790, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _786)) + cbModelParam._m0[15u].w;
        float _1630 = fma(_732, cbModelParam._m0[13u].z, fma(_731, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _730));
        float _1633 = fma(_732, cbModelParam._m0[14u].z, fma(_731, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _730));
        float _1636 = fma(_732, cbModelParam._m0[15u].z, fma(_731, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _730));
        float _1664;
        if (_1630 > 0.0)
        {
            _1664 = abs((1.0 - _1619) / _1630);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1630 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1619 + 1.0) / _1630);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1664 = frontier_phi_17_15_ladder;
        }
        float _1867;
        if (_1633 > 0.0)
        {
            _1867 = abs((1.0 - _1623) / _1633);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1633 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1623 + 1.0) / _1633);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1867 = frontier_phi_26_22_ladder;
        }
        float _2121;
        if (_1636 > 0.0)
        {
            _2121 = abs((1.0 - _1627) / _1636);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1636 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1627 + 1.0) / _1636);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2121 = frontier_phi_38_33_ladder;
        }
        float _2123 = isnan(_1867) ? _1664 : (isnan(_1664) ? _1867 : min(_1664, _1867));
        float _2124 = isnan(_2121) ? _2123 : (isnan(_2123) ? _2121 : min(_2123, _2121));
        float _2128 = (_2124 * _1630) + _1619;
        float _2129 = (_2124 * _1633) + _1623;
        float _2130 = (_2124 * _1636) + _1627;
        float _2131 = _2124 * 9.9999997473787516355514526367188e-05;
        float _2133 = (-1.0) - _2131;
        float _2135 = _2131 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2130 > _2135) || ((_2130 < _2133) || ((_2129 > _2135) || ((_2129 < _2133) || ((_2128 < _2133) || (_2128 > _2135))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2258 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2130, cbModelParam._m0[9u].z, fma(_2129, cbModelParam._m0[9u].y, _2128 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2130, cbModelParam._m0[10u].z, fma(_2129, cbModelParam._m0[10u].y, _2128 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2130, cbModelParam._m0[11u].z, fma(_2129, cbModelParam._m0[11u].y, _2128 * cbModelParam._m0[11u].x))), _1572);
            frontier_phi_16_38_ladder = _2258.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2258.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2258.x * cbModelParam._m0[1u].y;
        }
        _1652 = frontier_phi_16_38_ladder_2;
        _1654 = frontier_phi_16_38_ladder_1;
        _1656 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1640 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_730, _731, _732), _1572);
        _1652 = _1640.x * cbModelParam._m0[1u].y;
        _1654 = _1640.y * cbModelParam._m0[1u].y;
        _1656 = _1640.z * cbModelParam._m0[1u].y;
    }
    float _1660 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _544);
    float _1661 = isnan(_1660) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1660 : min(cbModelParam._m0[25u].w, _1660));
    float _1750;
    float _1752;
    float _1754;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1714 = fma(_794, cbModelParam._m0[21u].z, fma(_790, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _786)) + cbModelParam._m0[21u].w;
        float _1718 = fma(_794, cbModelParam._m0[22u].z, fma(_790, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _786)) + cbModelParam._m0[22u].w;
        float _1722 = fma(_794, cbModelParam._m0[23u].z, fma(_790, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _786)) + cbModelParam._m0[23u].w;
        float _1725 = fma(_732, cbModelParam._m0[21u].z, fma(_731, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _730));
        float _1728 = fma(_732, cbModelParam._m0[22u].z, fma(_731, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _730));
        float _1731 = fma(_732, cbModelParam._m0[23u].z, fma(_731, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _730));
        float _1872;
        if (_1725 > 0.0)
        {
            _1872 = abs((1.0 - _1714) / _1725);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1725 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1714 + 1.0) / _1725);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1872 = frontier_phi_28_24_ladder;
        }
        float _2148;
        if (_1728 > 0.0)
        {
            _2148 = abs((1.0 - _1718) / _1728);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1718 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2148 = frontier_phi_40_35_ladder;
        }
        float _2361;
        if (_1731 > 0.0)
        {
            _2361 = abs((1.0 - _1722) / _1731);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1722 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2361 = frontier_phi_49_46_ladder;
        }
        float _2363 = isnan(_2148) ? _1872 : (isnan(_1872) ? _2148 : min(_1872, _2148));
        float _2364 = isnan(_2361) ? _2363 : (isnan(_2363) ? _2361 : min(_2363, _2361));
        float _2368 = (_2364 * _1725) + _1714;
        float _2369 = (_2364 * _1728) + _1718;
        float _2370 = (_2364 * _1731) + _1722;
        float _2371 = _2364 * 9.9999997473787516355514526367188e-05;
        float _2372 = (-1.0) - _2371;
        float _2374 = _2371 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2370 > _2374) || ((_2370 < _2372) || ((_2369 > _2374) || ((_2369 < _2372) || ((_2368 < _2372) || (_2368 > _2374))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2569 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2370, cbModelParam._m0[17u].z, fma(_2369, cbModelParam._m0[17u].y, _2368 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2370, cbModelParam._m0[18u].z, fma(_2369, cbModelParam._m0[18u].y, _2368 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2370, cbModelParam._m0[19u].z, fma(_2369, cbModelParam._m0[19u].y, _2368 * cbModelParam._m0[19u].x))), _1661);
            frontier_phi_25_49_ladder = _2569.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2569.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2569.x * cbModelParam._m0[1u].z;
        }
        _1750 = frontier_phi_25_49_ladder_2;
        _1752 = frontier_phi_25_49_ladder_1;
        _1754 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1734 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_730, _731, _732), _1661);
        _1750 = _1734.x * cbModelParam._m0[1u].z;
        _1752 = _1734.y * cbModelParam._m0[1u].z;
        _1754 = _1734.z * cbModelParam._m0[1u].z;
    }
    float _1767 = (((_757 * _706) + _758) * _722) * ((cbModelParam._m0[1u].w * (_1750 - _1652)) + _1652);
    float _1769 = (((_757 * _708) + _758) * _722) * ((cbModelParam._m0[1u].w * (_1752 - _1654)) + _1654);
    float _1771 = (((_757 * _709) + _758) * _722) * ((cbModelParam._m0[1u].w * (_1754 - _1656)) + _1656);
    float _1774 = fma(_1771, cbSceneParam._m0[89u].z, fma(_1769, cbSceneParam._m0[89u].y, _1767 * cbSceneParam._m0[89u].x));
    float _1777 = fma(_1771, cbSceneParam._m0[90u].z, fma(_1769, cbSceneParam._m0[90u].y, _1767 * cbSceneParam._m0[90u].x));
    float _1780 = fma(_1771, cbSceneParam._m0[91u].z, fma(_1769, cbSceneParam._m0[91u].y, _1767 * cbSceneParam._m0[91u].x));
    uvec4 _1790 = floatBitsToUint(cbInstanceData._m0[_232 + 5u]);
    uint _1792 = _1790.x * 14u;
    uint _1793 = _1792 + 13u;
    float _1800 = _722 + (-1.0);
    float _1805 = (cbLight._m0[_1793].x * _1800) + 1.0;
    float _1806 = (cbLight._m0[_1793].y * _1800) + 1.0;
    float _1807 = (cbLight._m0[_1793].z * _1800) + 1.0;
    float _1808 = (cbLight._m0[_1793].w * _1800) + 1.0;
    uint _1809 = _1792 + 5u;
    float _1815 = isnan(1.0) ? _1806 : (isnan(_1806) ? 1.0 : min(_1806, 1.0));
    uint _1819 = _1792 + 4u;
    float _1826 = isnan(1.0) ? _1805 : (isnan(_1805) ? 1.0 : min(_1805, 1.0));
    uint _1830 = _1792 | 1u;
    float _1841 = dot(vec3(cbLight._m0[_1792].xyz), vec3(_541, _542, _543));
    float _1844 = dot(vec3(cbLight._m0[_1830].xyz), vec3(_541, _542, _543));
    float _4061 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
    float _4072 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _1849 = (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * 0.3183098733425140380859375;
    float _1851 = (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * 0.3183098733425140380859375;
    float _1858 = ((cbLight._m0[_1809].x * _1815) * _1851) + ((cbLight._m0[_1819].x * _1826) * _1849);
    float _1859 = ((_1815 * cbLight._m0[_1809].y) * _1851) + ((_1826 * cbLight._m0[_1819].y) * _1849);
    float _1860 = ((_1815 * cbLight._m0[_1809].z) * _1851) + ((_1826 * cbLight._m0[_1819].z) * _1849);
    uvec4 _1864 = floatBitsToUint(cbLight._m0[_1792 + 12u]);
    bool _1866 = _1864.x == 0u;
    float _1877;
    float _1879;
    float _1881;
    if (_1866)
    {
        _1877 = _1858;
        _1879 = _1859;
        _1881 = _1860;
    }
    else
    {
        uint _1885 = _1792 + 6u;
        float _1901 = (dot(vec3(cbLight._m0[_1792 + 2u].xyz), vec3(_541, _542, _543)) * 0.5) + 0.5;
        float _1902 = _1901 * _1901;
        float _4083 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
        float _1903 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1904 = isnan(1.0) ? _1807 : (isnan(_1807) ? 1.0 : min(_1807, 1.0));
        _1877 = (((cbLight._m0[_1885].x * 0.3183098733425140380859375) * _1903) * _1904) + _1858;
        _1879 = (((cbLight._m0[_1885].y * 0.3183098733425140380859375) * _1903) * _1904) + _1859;
        _1881 = (((cbLight._m0[_1885].z * 0.3183098733425140380859375) * _1903) * _1904) + _1860;
    }
    bool _1884 = _1864.y == 0u;
    float _1922;
    float _1924;
    float _1926;
    if (_1884)
    {
        _1922 = _1877;
        _1924 = _1879;
        _1926 = _1881;
    }
    else
    {
        uint _2092 = _1792 + 7u;
        float _2108 = (dot(vec3(cbLight._m0[_1792 + 3u].xyz), vec3(_541, _542, _543)) * 0.5) + 0.5;
        float _2109 = _2108 * _2108;
        float _4099 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
        float _2110 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _2111 = isnan(1.0) ? _1808 : (isnan(_1808) ? 1.0 : min(_1808, 1.0));
        _1922 = (((cbLight._m0[_2092].x * 0.3183098733425140380859375) * _2110) * _2111) + _1877;
        _1924 = (((cbLight._m0[_2092].y * 0.3183098733425140380859375) * _2110) * _2111) + _1879;
        _1926 = (((cbLight._m0[_2092].z * 0.3183098733425140380859375) * _2110) * _2111) + _1881;
    }
    uint _1929 = _1792 + 8u;
    float _1942 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1792].w)) * _544) * 0.949999988079071044921875);
    float _1943 = _1942 * _1942;
    float _1944 = cbLight._m0[_1792].x + _621;
    float _1945 = cbLight._m0[_1792].y + _622;
    float _1946 = cbLight._m0[_1792].z + _623;
    float _1950 = inversesqrt(dot(vec3(_1944, _1945, _1946), vec3(_1944, _1945, _1946)));
    float _1951 = _1950 * _1944;
    float _1952 = _1950 * _1945;
    float _1953 = _1950 * _1946;
    float _1954 = dot(vec3(_541, _542, _543), vec3(cbLight._m0[_1792].xyz));
    float _4115 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1957 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _4126 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _1958 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    float _1959 = dot(vec3(_541, _542, _543), vec3(_1951, _1952, _1953));
    float _4137 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1962 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    float _1963 = dot(vec3(cbLight._m0[_1792].xyz), vec3(_1951, _1952, _1953));
    float _4148 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1967 = _1943 * _1943;
    float _1971 = ((_1962 * _1962) * (_1967 + (-1.0))) + 1.0;
    float _1979 = exp2(log2(1.0 - (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0)))) * 5.0);
    float _1980 = 0.959999978542327880859375 - _703;
    float _1982 = 0.959999978542327880859375 - _704;
    float _1983 = 0.959999978542327880859375 - _705;
    float _1990 = 1.0 - _1943;
    float _2001 = (0.5 / (((_1958 * ((_1957 * _1990) + _1943)) + 9.9999999392252902907785028219223e-09) + (((_1958 * _1990) + _1943) * _1957))) * _1957;
    float _4159 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _2003 = (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_1967 / ((_1971 * _1971) * 3.141590118408203125));
    uint _2014 = _1792 + 9u;
    float _2025 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1830].w)) * _544) * 0.949999988079071044921875);
    float _2026 = _2025 * _2025;
    float _2027 = cbLight._m0[_1830].x + _621;
    float _2028 = cbLight._m0[_1830].y + _622;
    float _2029 = cbLight._m0[_1830].z + _623;
    float _2033 = inversesqrt(dot(vec3(_2027, _2028, _2029), vec3(_2027, _2028, _2029)));
    float _2034 = _2033 * _2027;
    float _2035 = _2033 * _2028;
    float _2036 = _2033 * _2029;
    float _2037 = dot(vec3(_541, _542, _543), vec3(cbLight._m0[_1830].xyz));
    float _4170 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2040 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
    float _2041 = dot(vec3(_541, _542, _543), vec3(_2034, _2035, _2036));
    float _4181 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2044 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _2045 = dot(vec3(cbLight._m0[_1830].xyz), vec3(_2034, _2035, _2036));
    float _4192 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2049 = _2026 * _2026;
    float _2053 = ((_2044 * _2044) * (_2049 + (-1.0))) + 1.0;
    float _2060 = exp2(log2(1.0 - (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0)))) * 5.0);
    float _2067 = 1.0 - _2026;
    float _2077 = (0.5 / (((_1958 * ((_2040 * _2067) + _2026)) + 9.9999999392252902907785028219223e-09) + (((_1958 * _2067) + _2026) * _2040))) * _2040;
    float _4203 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _2079 = (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_2049 / ((_2053 * _2053) * 3.141590118408203125));
    float _2089 = (((((_2060 * _1980) + _706) * cbLight._m0[_2014].x) * _2079) * _1815) + (((((_1979 * _1980) + _706) * cbLight._m0[_1929].x) * _2003) * _1826);
    float _2090 = (((((_2060 * _1982) + _708) * cbLight._m0[_2014].y) * _2079) * _1815) + (((((_1979 * _1982) + _708) * cbLight._m0[_1929].y) * _2003) * _1826);
    float _2091 = (((((_2060 * _1983) + _709) * cbLight._m0[_2014].z) * _2079) * _1815) + (((((_1979 * _1983) + _709) * cbLight._m0[_1929].z) * _2003) * _1826);
    float _2153;
    float _2155;
    float _2157;
    if (_1866)
    {
        _2153 = _2089;
        _2155 = _2090;
        _2157 = _2091;
    }
    else
    {
        uint _2159 = _1792 + 2u;
        uint _2163 = _1792 + 10u;
        float _2177 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2159].w)) * _544) * 0.949999988079071044921875);
        float _2178 = _2177 * _2177;
        float _2179 = cbLight._m0[_2159].x + _621;
        float _2180 = cbLight._m0[_2159].y + _622;
        float _2181 = cbLight._m0[_2159].z + _623;
        float _2185 = inversesqrt(dot(vec3(_2179, _2180, _2181), vec3(_2179, _2180, _2181)));
        float _2186 = _2185 * _2179;
        float _2187 = _2185 * _2180;
        float _2188 = _2185 * _2181;
        float _2189 = dot(vec3(_541, _542, _543), vec3(cbLight._m0[_2159].xyz));
        float _4214 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        float _2192 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _2193 = dot(vec3(_541, _542, _543), vec3(_2186, _2187, _2188));
        float _4225 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2196 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _2197 = dot(vec3(cbLight._m0[_2159].xyz), vec3(_2186, _2187, _2188));
        float _4236 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
        float _2201 = _2178 * _2178;
        float _2205 = ((_2196 * _2196) * (_2201 + (-1.0))) + 1.0;
        float _2212 = exp2(log2(1.0 - (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0)))) * 5.0);
        float _2219 = 1.0 - _2178;
        float _2229 = (0.5 / (((_1958 * ((_2192 * _2219) + _2178)) + 9.9999999392252902907785028219223e-09) + (((_1958 * _2219) + _2178) * _2192))) * _2192;
        float _4247 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2231 = (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_2201 / ((_2205 * _2205) * 3.141590118408203125));
        float _2232 = isnan(1.0) ? _1807 : (isnan(_1807) ? 1.0 : min(_1807, 1.0));
        _2153 = (((((_2212 * _1980) + _706) * cbLight._m0[_2163].x) * _2231) * _2232) + _2089;
        _2155 = (((((_2212 * _1982) + _708) * cbLight._m0[_2163].y) * _2231) * _2232) + _2090;
        _2157 = (((((_2212 * _1983) + _709) * cbLight._m0[_2163].z) * _2231) * _2232) + _2091;
    }
    float _2267;
    float _2269;
    float _2271;
    if (_1884)
    {
        _2267 = _2153;
        _2269 = _2155;
        _2271 = _2157;
    }
    else
    {
        uint _2278 = _1792 + 3u;
        uint _2282 = _1792 + 11u;
        float _2296 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2278].w)) * _544) * 0.949999988079071044921875);
        float _2297 = _2296 * _2296;
        float _2298 = cbLight._m0[_2278].x + _621;
        float _2299 = cbLight._m0[_2278].y + _622;
        float _2300 = cbLight._m0[_2278].z + _623;
        float _2304 = inversesqrt(dot(vec3(_2298, _2299, _2300), vec3(_2298, _2299, _2300)));
        float _2305 = _2304 * _2298;
        float _2306 = _2304 * _2299;
        float _2307 = _2304 * _2300;
        float _2308 = dot(vec3(_541, _542, _543), vec3(cbLight._m0[_2278].xyz));
        float _4263 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2311 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _2312 = dot(vec3(_541, _542, _543), vec3(_2305, _2306, _2307));
        float _4274 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2315 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _2316 = dot(vec3(cbLight._m0[_2278].xyz), vec3(_2305, _2306, _2307));
        float _4285 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        float _2320 = _2297 * _2297;
        float _2324 = ((_2315 * _2315) * (_2320 + (-1.0))) + 1.0;
        float _2331 = exp2(log2(1.0 - (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0)))) * 5.0);
        float _2338 = 1.0 - _2297;
        float _2348 = (0.5 / (((_1958 * ((_2311 * _2338) + _2297)) + 9.9999999392252902907785028219223e-09) + (((_1958 * _2338) + _2297) * _2311))) * _2311;
        float _4296 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2350 = (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_2320 / ((_2324 * _2324) * 3.141590118408203125));
        float _2351 = isnan(1.0) ? _1808 : (isnan(_1808) ? 1.0 : min(_1808, 1.0));
        _2267 = (((((_2331 * _1980) + _706) * cbLight._m0[_2282].x) * _2350) * _2351) + _2153;
        _2269 = (((((_2331 * _1982) + _708) * cbLight._m0[_2282].y) * _2350) * _2351) + _2155;
        _2271 = (((((_2331 * _1983) + _709) * cbLight._m0[_2282].z) * _2350) * _2351) + _2157;
    }
    float _2486;
    float _2488;
    float _2490;
    float _2492;
    float _2494;
    float _2496;
    if (_1790.y == 0u)
    {
        float _2426 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2427 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2426;
        float _2428 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2426;
        float _2429 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2426;
        uvec4 _2441 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2442 = _2441.x;
        uint _2453 = uint((float(_2441.y) * floor(float(uint(cbSceneParam._m0[85u].y * _643) / _2442))) + floor(float(uint(cbSceneParam._m0[85u].x * _642) / _2442)));
        float _2463 = (log2(_2429 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2464 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        uint _2467 = uint(isnan(14.0) ? _2464 : (isnan(_2464) ? 14.0 : min(_2464, 14.0)));
        uvec4 _2472 = texelFetch(g_lightClusterGridBuffer, int(((_2467 << 2u) + (_2453 << 6u)) >> 2u));
        uint _2473 = _2472.x;
        uint _2474 = _2441.z;
        float _2574;
        float _2576;
        float _2578;
        float _2580;
        float _2582;
        float _2584;
        if (((((1u << ((_2474 >> 4u) & 15u)) + 4294967295u) & _2473) == 0u) || ((_2474 & 240u) == 0u))
        {
            _2574 = 0.0;
            _2576 = 0.0;
            _2578 = 0.0;
            _2580 = 0.0;
            _2582 = 0.0;
            _2584 = 0.0;
        }
        else
        {
            float _2575;
            float _2577;
            float _2579;
            float _2581;
            float _2583;
            float _2585;
            float _2727 = 0.0;
            float _2728 = 0.0;
            float _2729 = 0.0;
            float _2730 = 0.0;
            float _2731 = 0.0;
            float _2732 = 0.0;
            uint _2733 = 0u;
            uint _2742;
            bool _2743;
            for (;;)
            {
                _2742 = texelFetch(g_lightClassification, int((((_2467 << 5u) + (_2453 << 9u)) + (_2733 << 2u)) >> 2u)).x;
                _2743 = _2742 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2743)
                {
                    frontier_phi_66_pred = _2727;
                    frontier_phi_66_pred_1 = _2732;
                    frontier_phi_66_pred_2 = _2731;
                    frontier_phi_66_pred_3 = _2730;
                    frontier_phi_66_pred_4 = _2729;
                    frontier_phi_66_pred_5 = _2728;
                }
                else
                {
                    float _2872;
                    float _2873;
                    float _2874;
                    float _2875;
                    float _2876;
                    float _2877;
                    uint _2878;
                    _2872 = _2727;
                    _2873 = _2728;
                    _2874 = _2729;
                    _2875 = _2730;
                    _2876 = _2731;
                    _2877 = _2732;
                    _2878 = _2742;
                    float _2799;
                    float _2800;
                    float _2801;
                    float _2802;
                    float _2803;
                    float _2804;
                    for (;;)
                    {
                        uint _2882 = uint(findLSB(_2878)) + (_2733 << 5u);
                        uint _2879 = (_2878 + 4294967295u) & _2878;
                        uint _2884 = _2882 * 48u;
                        vec4 _2898 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2884)).x, texelFetch(g_PointLightRenderingBuffer, int(_2884 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2884 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2884 + 3u)).x));
                        uint _2904 = (_2882 * 48u) + 4u;
                        vec4 _2917 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2904)).x, texelFetch(g_PointLightRenderingBuffer, int(_2904 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2904 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2904 + 3u)).x));
                        uint _2923 = (_2882 * 48u) + 8u;
                        vec3 _2934 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2923)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 2u)).x));
                        float _2938 = _2898.x - _2427;
                        float _2939 = _2898.y - _2428;
                        float _2940 = _2898.z - _2429;
                        float _2941 = dot(vec3(_2938, _2939, _2940), vec3(_2938, _2939, _2940));
                        float _2944 = inversesqrt(_2941);
                        float _2945 = _2944 * _2938;
                        float _2946 = _2944 * _2939;
                        float _2947 = _2944 * _2940;
                        float _2948 = dot(vec3(_663, _666, _669), vec3(_2945, _2946, _2947));
                        float _2953 = 1.0 - (_2941 * _2898.w);
                        float _4322 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
                        float _2954 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
                        float _2955 = sqrt(_2941) * _2917.w;
                        float _2958 = 1.39999997615814208984375 / (_2955 + 1.39999997615814208984375);
                        float _2959 = _2958 * _2958;
                        float _2962 = ((1.0 - _2959) * _2948) + _2959;
                        float _2965 = _2955 * _2955;
                        float _2969 = ((isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0))) * _2954) / ((_2965 * 0.699999988079071044921875) + 1.0);
                        float _2973 = (-0.0) - _2427;
                        float _2974 = (-0.0) - _2428;
                        float _2975 = (-0.0) - _2429;
                        float _2979 = inversesqrt(dot(vec3(_2973, _2974, _2975), vec3(_2973, _2974, _2975)));
                        float _2980 = _2979 * _2973;
                        float _2981 = _2979 * _2974;
                        float _2982 = _2979 * _2975;
                        float _2990 = exp2(log2(1.0 / ((_2965 * 3.5) + 5.0)) * 0.25);
                        float _2991 = 1.0 - _738;
                        float _2998 = sqrt(1.0 - ((1.0 - (_2991 * _2991)) * (1.0 - (_2990 * _2990))));
                        float _2999 = _2998 * _2998;
                        float _3000 = _2999 * _2999;
                        float _3001 = _2980 + _2945;
                        float _3002 = _2981 + _2946;
                        float _3003 = _2982 + _2947;
                        float _3007 = inversesqrt(dot(vec3(_3001, _3002, _3003), vec3(_3001, _3002, _3003)));
                        float _3011 = dot(vec3(_663, _666, _669), vec3(_2980, _2981, _2982));
                        float _4338 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
                        float _3014 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
                        float _3015 = dot(vec3(_663, _666, _669), vec3(_3007 * _3001, _3007 * _3002, _3007 * _3003));
                        float _4349 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
                        float _3018 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
                        float _3022 = ((_3018 * _3018) * (_3000 + (-1.0))) + 1.0;
                        float _3023 = _2958 * _2999;
                        float _3024 = _3023 * _3023;
                        float _3027 = ((1.0 - _3024) * _2948) + _3024;
                        float _4360 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                        float _3028 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
                        float _3029 = 1.0 - _2999;
                        float _3039 = (0.5 / (((_3028 * ((_3014 * _3029) + _2999)) + 9.9999999392252902907785028219223e-09) + (((_3028 * _3029) + _2999) * _3014))) * _3028;
                        float _4371 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                        float _3050 = (((_3000 * 3.1415927410125732421875) * (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0)))) / ((_3022 * _3022) * ((_2965 * 2.1991131305694580078125) + 3.141590118408203125))) * _2954;
                        _2802 = (_2969 * _2917.x) + _2875;
                        _2803 = (_2969 * _2917.y) + _2876;
                        _2804 = (_2969 * _2917.z) + _2877;
                        _2799 = (_3050 * _2934.x) + _2872;
                        _2800 = (_3050 * _2934.y) + _2873;
                        _2801 = (_3050 * _2934.z) + _2874;
                        if (_2879 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2872 = _2799;
                            _2873 = _2800;
                            _2874 = _2801;
                            _2875 = _2802;
                            _2876 = _2803;
                            _2877 = _2804;
                            _2878 = _2879;
                        }
                    }
                    frontier_phi_66_pred = _2799;
                    frontier_phi_66_pred_1 = _2804;
                    frontier_phi_66_pred_2 = _2803;
                    frontier_phi_66_pred_3 = _2802;
                    frontier_phi_66_pred_4 = _2801;
                    frontier_phi_66_pred_5 = _2800;
                }
                _2575 = frontier_phi_66_pred;
                _2585 = frontier_phi_66_pred_1;
                _2583 = frontier_phi_66_pred_2;
                _2581 = frontier_phi_66_pred_3;
                _2579 = frontier_phi_66_pred_4;
                _2577 = frontier_phi_66_pred_5;
                uint _2734 = _2733 + 1u;
                if (_2734 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2727 = _2575;
                    _2728 = _2577;
                    _2729 = _2579;
                    _2730 = _2581;
                    _2731 = _2583;
                    _2732 = _2585;
                    _2733 = _2734;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2574 = _2575;
            _2576 = _2577;
            _2578 = _2579;
            _2580 = _2581;
            _2582 = _2583;
            _2584 = _2585;
        }
        uvec4 _2588 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2589 = _2588.z;
        uint _2591 = (_2589 >> 8u) & 15u;
        float _2695;
        float _2697;
        float _2699;
        float _2701;
        float _2703;
        float _2705;
        if (((4294967295u << _2591) & _2473) == 0u)
        {
            _2695 = _2574;
            _2697 = _2576;
            _2699 = _2578;
            _2701 = _2580;
            _2703 = _2582;
            _2705 = _2584;
        }
        else
        {
            float _2720 = inversesqrt(dot(vec3(_2427, _2428, _2429), vec3(_2427, _2428, _2429)));
            float _2721 = _2720 * _2427;
            float _2722 = _2720 * _2428;
            float _2723 = _2720 * _2429;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2591 < ((_2589 >> 12u) & 15u))
            {
                float _2696;
                float _2698;
                float _2700;
                float _2702;
                float _2704;
                float _2706;
                float _2855 = _2574;
                float _2856 = _2576;
                float _2857 = _2578;
                float _2858 = _2580;
                float _2859 = _2582;
                float _2860 = _2584;
                uint _2861 = _2591;
                uint _2870;
                bool _2871;
                for (;;)
                {
                    _2870 = texelFetch(g_lightClassification, int((((_2467 << 5u) + (_2453 << 9u)) + (_2861 << 2u)) >> 2u)).x;
                    _2871 = _2870 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2871)
                    {
                        frontier_phi_77_pred = _2860;
                        frontier_phi_77_pred_1 = _2859;
                        frontier_phi_77_pred_2 = _2858;
                        frontier_phi_77_pred_3 = _2857;
                        frontier_phi_77_pred_4 = _2856;
                        frontier_phi_77_pred_5 = _2855;
                    }
                    else
                    {
                        float _3064;
                        float _3065;
                        float _3066;
                        float _3067;
                        float _3068;
                        float _3069;
                        float _3358;
                        float _3359;
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3077 = _2855;
                        float _3078 = _2856;
                        float _3079 = _2857;
                        float _3080 = _2858;
                        float _3081 = _2859;
                        float _3082 = _2860;
                        uint _3083 = _2870;
                        uint _3084;
                        vec4 _3109;
                        float _3110;
                        vec4 _3125;
                        vec3 _3137;
                        vec4 _3153;
                        vec4 _3168;
                        float _3214;
                        bool _3215;
                        for (;;)
                        {
                            uint _3094 = ((_2861 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3083));
                            _3084 = (_3083 + 4294967295u) & _3083;
                            uint _3096 = _3094 * 40u;
                            _3109 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3096)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 3u)).x));
                            _3110 = _3109.w;
                            uint _3112 = (_3094 * 40u) + 4u;
                            _3125 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3112)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 3u)).x));
                            uint _3127 = (_3094 * 40u) + 8u;
                            _3137 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3127)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 2u)).x));
                            uint _3140 = (_3094 * 40u) + 16u;
                            _3153 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3140)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 3u)).x));
                            uint _3155 = (_3094 * 40u) + 20u;
                            _3168 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3155)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 3u)).x));
                            uint _3170 = (_3094 * 40u) + 24u;
                            vec4 _3183 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3170)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 3u)).x));
                            uint _3189 = (_3094 * 40u) + 28u;
                            vec4 _3202 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3189)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 3u)).x));
                            _3214 = fma(_2429, _3202.z, fma(_2428, _3202.y, _3202.x * _2427)) + _3202.w;
                            _3215 = !((fma(_2429, _3183.z, fma(_2428, _3183.y, _3183.x * _2427)) + _3183.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3215)
                            {
                                float _3242 = _3109.x - _2427;
                                float _3243 = _3109.y - _2428;
                                float _3244 = _3109.z - _2429;
                                float _3245 = dot(vec3(_3242, _3243, _3244), vec3(_3242, _3243, _3244));
                                float _3248 = inversesqrt(_3245);
                                float _3249 = _3248 * _3242;
                                float _3250 = _3248 * _3243;
                                float _3251 = _3248 * _3244;
                                float _3255 = 1.0 - (_3245 / (_3110 * _3110));
                                float _4382 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                                float _3256 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
                                float _3260 = sqrt(_3245) * _3125.w;
                                float _3262 = 1.39999997615814208984375 / (_3260 + 1.39999997615814208984375);
                                float _3263 = _3262 * _3262;
                                float _3266 = ((1.0 - _3263) * dot(vec3(_3249, _3250, _3251), vec3(_663, _666, _669))) + _3263;
                                float _3269 = _3260 * _3260;
                                float _3273 = (fma(_2429, _3153.z, fma(_2428, _3153.y, _3153.x * _2427)) + _3153.w) / _3214;
                                float _3274 = (fma(_2429, _3168.z, fma(_2428, _3168.y, _3168.x * _2427)) + _3168.w) / _3214;
                                float _3278 = 1.0 - dot(vec2(_3273, _3274), vec2(_3273, _3274));
                                float _4398 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                                float _3279 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
                                float _3280 = _3279 * (((isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0))) * _3256) / ((_3269 * 0.699999988079071044921875) + 1.0));
                                float _3292 = exp2(log2(1.0 / ((_3269 * 3.5) + 5.0)) * 0.25);
                                float _3293 = 1.0 - _738;
                                float _3300 = sqrt(1.0 - ((1.0 - (_3293 * _3293)) * (1.0 - (_3292 * _3292))));
                                float _3301 = _3300 * _3300;
                                float _3302 = _3301 * _3301;
                                float _3303 = _3249 - _2721;
                                float _3304 = _3250 - _2722;
                                float _3305 = _3251 - _2723;
                                float _3309 = inversesqrt(dot(vec3(_3303, _3304, _3305), vec3(_3303, _3304, _3305)));
                                float _3313 = dot(vec3(_663, _666, _669), vec3((-0.0) - _2721, (-0.0) - _2722, (-0.0) - _2723));
                                float _4409 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                                float _3316 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
                                float _3317 = dot(vec3(_663, _666, _669), vec3(_3309 * _3303, _3309 * _3304, _3309 * _3305));
                                float _4420 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                                float _3320 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
                                float _3324 = ((_3320 * _3320) * (_3302 + (-1.0))) + 1.0;
                                float _3325 = _3262 * _3301;
                                float _3326 = _3325 * _3325;
                                float _3332 = ((1.0 - _3326) * dot(vec3(_663, _666, _669), vec3(_3249, _3250, _3251))) + _3326;
                                float _4431 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                                float _3333 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
                                float _3334 = 1.0 - _3301;
                                float _3344 = (0.5 / (((_3333 * ((_3316 * _3334) + _3301)) + 9.9999999392252902907785028219223e-09) + (((_3333 * _3334) + _3301) * _3316))) * _3333;
                                float _4442 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                                float _3354 = (_3279 * _3256) * (((_3302 * 3.1415927410125732421875) * (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0)))) / ((_3324 * _3324) * ((_3269 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3280 * _3125.y;
                                frontier_phi_83_pred_1 = _3280 * _3125.x;
                                frontier_phi_83_pred_2 = _3354 * _3137.z;
                                frontier_phi_83_pred_3 = _3354 * _3137.y;
                                frontier_phi_83_pred_4 = _3354 * _3137.x;
                                frontier_phi_83_pred_5 = _3280 * _3125.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3362 = frontier_phi_83_pred;
                            _3361 = frontier_phi_83_pred_1;
                            _3360 = frontier_phi_83_pred_2;
                            _3359 = frontier_phi_83_pred_3;
                            _3358 = frontier_phi_83_pred_4;
                            _3363 = frontier_phi_83_pred_5;
                            _3067 = _3361 + _3080;
                            _3068 = _3362 + _3081;
                            _3069 = _3363 + _3082;
                            _3064 = _3358 + _3077;
                            _3065 = _3359 + _3078;
                            _3066 = _3360 + _3079;
                            if (_3084 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3077 = _3064;
                                _3078 = _3065;
                                _3079 = _3066;
                                _3080 = _3067;
                                _3081 = _3068;
                                _3082 = _3069;
                                _3083 = _3084;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3069;
                        frontier_phi_77_pred_1 = _3068;
                        frontier_phi_77_pred_2 = _3067;
                        frontier_phi_77_pred_3 = _3066;
                        frontier_phi_77_pred_4 = _3065;
                        frontier_phi_77_pred_5 = _3064;
                    }
                    _2706 = frontier_phi_77_pred;
                    _2704 = frontier_phi_77_pred_1;
                    _2702 = frontier_phi_77_pred_2;
                    _2700 = frontier_phi_77_pred_3;
                    _2698 = frontier_phi_77_pred_4;
                    _2696 = frontier_phi_77_pred_5;
                    uint _2862 = _2861 + 1u;
                    if (_2862 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2855 = _2696;
                        _2856 = _2698;
                        _2857 = _2700;
                        _2858 = _2702;
                        _2859 = _2704;
                        _2860 = _2706;
                        _2861 = _2862;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2700;
                frontier_phi_58_59_ladder_1 = _2706;
                frontier_phi_58_59_ladder_2 = _2704;
                frontier_phi_58_59_ladder_3 = _2702;
                frontier_phi_58_59_ladder_4 = _2698;
                frontier_phi_58_59_ladder_5 = _2696;
            }
            else
            {
                frontier_phi_58_59_ladder = _2578;
                frontier_phi_58_59_ladder_1 = _2584;
                frontier_phi_58_59_ladder_2 = _2582;
                frontier_phi_58_59_ladder_3 = _2580;
                frontier_phi_58_59_ladder_4 = _2576;
                frontier_phi_58_59_ladder_5 = _2574;
            }
            _2695 = frontier_phi_58_59_ladder_5;
            _2697 = frontier_phi_58_59_ladder_4;
            _2699 = frontier_phi_58_59_ladder;
            _2701 = frontier_phi_58_59_ladder_3;
            _2703 = frontier_phi_58_59_ladder_2;
            _2705 = frontier_phi_58_59_ladder_1;
        }
        float _2710 = isnan(1.0) ? _722 : (isnan(_722) ? 1.0 : min(_722, 1.0));
        _2486 = (_2710 * _2701) + _1922;
        _2488 = (_2710 * _2703) + _1924;
        _2490 = (_2710 * _2705) + _1926;
        _2492 = ((_2695 * _706) * _2710) + _2267;
        _2494 = ((_2697 * _708) * _2710) + _2269;
        _2496 = ((_2699 * _709) * _2710) + _2271;
    }
    else
    {
        _2486 = _1922;
        _2488 = _1924;
        _2490 = _1926;
        _2492 = _2267;
        _2494 = _2269;
        _2496 = _2271;
    }
    float _4458 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _4469 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _4480 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _2513 = ((isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * (_2486 + ((isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0))) * _722))) + ((_2492 + ((isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))) * _1561)) * cbPerFrame._m0[3u].x);
    float _2514 = ((isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_2488 + ((isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0))) * _722))) + ((_2494 + ((isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))) * _1561)) * cbPerFrame._m0[3u].x);
    float _2515 = ((isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * (_2490 + ((isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0))) * _722))) + ((_2496 + ((isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))) * _1561)) * cbPerFrame._m0[3u].x);
    uint _2516 = _232 + 6u;
    float _2524 = _642 / cbSceneParam._m0[86u].x;
    float _2525 = _643 / cbSceneParam._m0[86u].y;
    vec4 _2539 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2524, _2525, (log2((isnan(cbSceneParam._m0[77u].w) ? _563 : (isnan(_563) ? cbSceneParam._m0[77u].w : min(_563, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2541 = _2539.x;
    float _2542 = _2539.y;
    float _2543 = _2539.z;
    float _2544 = _2539.w;
    float _2637;
    float _2639;
    float _2641;
    float _2643;
    if (_563 > cbSceneParam._m0[78u].w)
    {
        float _2599 = isnan(_563) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _563 : min(cbSceneParam._m0[80u].w, _563));
        float _2600 = _2599 / _563;
        float _2611 = _2600 * _614;
        float _2612 = _615 * _2600;
        float _2613 = (-0.0) - _2612;
        float _2615 = _2600 * _616;
        float _2617 = (cbSceneParam._m0[77u].w * _2613) / _2599;
        float _2618 = _2617 + cbSceneParam._m0[79u].w;
        float _2619 = cbSceneParam._m0[79u].w - _2612;
        float _2625 = sqrt(((_2611 * _2611) + (_2612 * _2612)) + (_2615 * _2615));
        float _2628 = (1.0 - (cbSceneParam._m0[77u].w / _2599)) * _2625;
        float _2633 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2635 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2812;
        if (abs((_2613 - _2617) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2812 = ((((_2618 > 0.0) ? exp2(_2633 * _2618) : (2.0 - exp2(_2635 * _2618))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2628;
        }
        else
        {
            float _2756 = 1.0 / cbSceneParam._m0[80u].x;
            float _2757 = isnan(_2619) ? _2618 : (isnan(_2618) ? _2619 : max(_2618, _2619));
            float _2758 = isnan(_2619) ? _2618 : (isnan(_2618) ? _2619 : min(_2618, _2619));
            float _2767 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : min(_2757, 0.0));
            float _2768 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : min(_2758, 0.0));
            _2812 = ((abs(_2625 / _2613) * cbSceneParam._m0[80u].y) * ((((_2767 - _2768) * 2.0) - ((exp2(_2633 * (isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0)))) - exp2(_2633 * (isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0))))) * _2756)) - ((exp2(_2635 * _2767) - exp2(_2635 * _2768)) * _2756))) + (_2628 * cbSceneParam._m0[80u].z);
        }
        vec4 _2814 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2524, _2525, 1.0), 0.0);
        float _2823 = exp2((_2812 * (-1.44269502162933349609375)) * (1.0 - _2814.w));
        float _2824 = log2(_2823);
        float _2840 = log2(_2544);
        _2637 = (exp2(_2840 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2824 * cbSceneParam._m0[78u].x)) * _2814.x) / cbSceneParam._m0[78u].x)) + _2541;
        _2639 = (exp2(_2840 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2824 * cbSceneParam._m0[78u].y)) * _2814.y) / cbSceneParam._m0[78u].y)) + _2542;
        _2641 = (exp2(_2840 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2824 * cbSceneParam._m0[78u].z)) * _2814.z) / cbSceneParam._m0[78u].z)) + _2543;
        _2643 = _2823 * _2544;
    }
    else
    {
        _2637 = _2541;
        _2639 = _2542;
        _2641 = _2543;
        _2643 = _2544;
    }
    bool _2850;
    vec4 _2653;
    vec4 _2675;
    float _2677;
    float _2681;
    float _2682;
    float _2683;
    float _2684;
    bool _2694;
    for (;;)
    {
        _2653 = cbMatDynParam._m0[0u];
        float _2655 = roundEven(_2653.y);
        bool _2656 = _2655 == 3.0;
        float _2657 = log2(_2643);
        float _2664 = exp2(_2657 * cbSceneParam._m0[78u].x) * _2513;
        float _2665 = exp2(_2657 * cbSceneParam._m0[78u].y) * _2514;
        float _2666 = exp2(_2657 * cbSceneParam._m0[78u].z) * _2515;
        float _2673 = _630 + (-0.5);
        _2675 = cbMtdParam._m0[1u];
        _2677 = _2675.y * _2673;
        float _2680 = (_2655 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2681 = _2680 * (_2656 ? _2664 : (_2664 + (cbSceneParam._m0[72u].w * _2637)));
        _2682 = _2680 * (_2656 ? _2665 : (_2665 + (cbSceneParam._m0[72u].w * _2639)));
        _2683 = _2680 * (_2656 ? _2666 : (_2666 + (cbSceneParam._m0[72u].w * _2641)));
        _2684 = _2673 * 0.999000012874603271484375;
        _2694 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2694)
        {
            if ((cbInstanceData._m0[_232 + 7u].x + _2684) < 0.5)
            {
                _2850 = true;
                break;
            }
        }
        uint _2791 = _682 + uint(_2653.w);
        if ((cbInstanceData._m0[_2791].w < 1.0) && ((cbInstanceData._m0[_2791].w + _2684) < 0.5))
        {
            _2850 = true;
            break;
        }
        if ((_2677 + 1.0) < _2675.x)
        {
            _2850 = true;
            break;
        }
        _2850 = false;
        break;
    }
    float _3055;
    if (_2850)
    {
        discard_state = true;
        _3055 = 0.0;
    }
    else
    {
        _3055 = cbInstanceData._m0[_2516].w;
    }
    SV_Target.x = _2681;
    SV_Target.y = _2682;
    SV_Target.z = _2683;
    SV_Target.w = _3055;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2516].w;
    discard_exit();
}


