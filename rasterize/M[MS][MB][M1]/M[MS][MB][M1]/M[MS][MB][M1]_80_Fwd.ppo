#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1352;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = _243 * NORMAL.x;
    float _245 = _243 * NORMAL.y;
    float _246 = _243 * NORMAL.z;
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3679 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _3690 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3701 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    uint _275 = uint(roundEven(NORMAL.w)) * 13u;
    uint _280 = _275 + 1u;
    uint _284 = _275 + 2u;
    float _293 = sqrt(((cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x) + (cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x)) + (cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x));
    float _294 = _293 * TEXCOORD.z;
    float _295 = _293 * TEXCOORD.w;
    vec4 _308 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _294) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _295) + cbTextureTilingScale._m0[13u].w));
    vec4 _332 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _337 = _332.x * cbMtdParam._m0[11u].x;
    float _338 = _332.y * cbMtdParam._m0[11u].y;
    float _339 = _332.z * cbMtdParam._m0[11u].z;
    vec4 _358 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _294) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _295) + cbTextureTilingScale._m0[5u].w));
    vec4 _394 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _396 = _394.x;
    float _408 = dot(vec4(_396, _394.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _425 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_396 - _408) * cbMtdParam._m0[24u].y) + _408) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3712 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _426 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
    float _433 = (_426 * ((_358.x * cbMtdParam._m0[12u].x) - _337)) + _337;
    float _434 = (_426 * ((_358.y * cbMtdParam._m0[12u].y) - _338)) + _338;
    float _435 = (_426 * ((_358.z * cbMtdParam._m0[12u].z) - _339)) + _339;
    float _439 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _308.x) * _433;
    float _442 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _308.y) * _434;
    float _445 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _308.z) * _435;
    float _452 = ((_433 - _439) * (isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0)))) + _439;
    float _453 = ((_434 - _442) * (isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0)))) + _442;
    float _454 = ((_435 - _445) * (isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0)))) + _445;
    vec4 _467 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _294) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _295) + cbTextureTilingScale._m0[20u].w));
    vec4 _492 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _294) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _295) + cbTextureTilingScale._m0[4u].w));
    vec4 _509 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _511 = _509.x;
    float _512 = _509.y;
    float _513 = _509.z;
    float _522 = ((_492.z - _513) * _426) + _513;
    float _525 = ((((_492.x - _511) * _426) + _511) * 2.0) + (-1.0);
    float _526 = ((((_492.y - _512) * _426) + _512) * 2.0) + (-1.0);
    float _527 = dot(vec2(_525, _526), vec2(_525, _526));
    float _3723 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _532 = sqrt(1.0 - (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))));
    vec4 _554 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _566 = (_525 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_467.x * 2.0) + (-1.0)))) + (((_554.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _567 = (_526 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_467.y * 2.0) + (-1.0)))) + (((_554.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _579 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _294) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _295) + cbTextureTilingScale._m0[19u].w));
    float _581 = _579.x;
    float _582 = 1.0 - _581;
    float _608 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_581 - _582) * cbMtdParam._m0[24u].w) + _582) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3734 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _609 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _617 = ((((cbMtdParam._m0[10u].x - _452) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _609) + _452;
    float _618 = ((((cbMtdParam._m0[10u].y - _453) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _609) + _453;
    float _619 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _454)) * _609) + _454;
    vec4 _631 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _645 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _647 = _645.x;
    float _665 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _294) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _295) + cbTextureTilingScale._m0[9u].w)).x - _647) * _426) + _647;
    float _669 = ((_631.x - _665) * cbMtdParam._m0[19u].z) + _665;
    float _671 = _669 - (_669 * _609);
    float _676 = (((_467.z - _522) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _522;
    float _680 = ((_554.z - _676) * cbMtdParam._m0[19u].w) + _676;
    float _684 = ((cbMtdParam._m0[23u].y - _680) * _609) + _680;
    vec4 _703 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _294) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _295) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _705 = _703.x;
    float _706 = _703.y;
    float _710 = dot(vec4(cbMtdParam._m0[29u].yzw, 0.0), vec4(_244, _245, _246, 0.0));
    vec4 _725 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _294) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _295) + cbTextureTilingScale._m0[18u].w));
    float _727 = _725.x;
    float _732 = fract(_725.w + cbPerFrame._m0[22u].x);
    float _734 = (1.0 - _732) * _727;
    float _739 = ((_732 + (-1.0)) + _727) * 9.0;
    float _741 = ((_727 + (-1.0)) + _732) * 9.0;
    float _742 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _743 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _757 = (_734 * ((_725.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _742 : (isnan(_742) ? 3.0 : min(_742, 3.0))) * 3.1415927410125732421875);
    float _759 = (_734 * ((_725.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _743 : (isnan(_743) ? 3.0 : min(_743, 3.0))) * 3.1415927410125732421875);
    float _763 = inversesqrt(dot(vec3(_757, _759, 1.0), vec3(_757, _759, 1.0)));
    float _779 = (((((0.5 - _705) + ((_757 * 0.5) * _763)) * _710) + _705) * 2.0) + (-1.0);
    float _780 = (((((0.5 - _706) + ((_763 * 0.5) * _759)) * _710) + _706) * 2.0) + (-1.0);
    float _781 = dot(vec2(_779, _780), vec2(_779, _780));
    float _3765 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _797 = ((((cbMtdParam._m0[22u].z * _566) - _566) + _779) * _609) + _566;
    float _798 = ((((cbMtdParam._m0[22u].z * _567) - _567) + _780) * _609) + _567;
    float _799 = (_609 * (sqrt(1.0 - (isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0)))) - _532)) + _532;
    float _801 = cbMtdParam._m0[22u].x + _554.w;
    float _804 = fma(_799, _244, fma(_798, _250 * TANGENT.x, (_236 * _228) * _797));
    float _807 = fma(_799, _245, fma(_798, _250 * TANGENT.y, (_236 * _229) * _797));
    float _810 = fma(_799, _246, fma(_798, _250 * TANGENT.z, (_236 * _230) * _797));
    float _814 = inversesqrt(dot(vec3(_804, _807, _810), vec3(_804, _807, _810)));
    float _815 = _814 * _804;
    float _816 = _814 * _807;
    float _817 = _814 * _810;
    float _3776 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _818 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _3787 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _3798 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _3809 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _3820 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _3831 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _823 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _837 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _877 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _887 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _877);
    float _888 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _877);
    float _889 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _877);
    float _893 = inversesqrt(dot(vec3(_887, _888, _889), vec3(_887, _888, _889)));
    float _894 = _887 * _893;
    float _895 = _888 * _893;
    float _896 = _889 * _893;
    float _902 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _903 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _921 = fma(_817, cbSceneParam._m0[5u].z, fma(_816, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _815));
    float _924 = fma(_817, cbSceneParam._m0[6u].z, fma(_816, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _815));
    float _927 = fma(_817, cbSceneParam._m0[7u].z, fma(_816, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _815));
    uint _941 = (_275 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _947 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0)))) * cbInstanceData._m0[_941].x;
    float _948 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0)))) * cbInstanceData._m0[_941].y;
    float _949 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0)))) * cbInstanceData._m0[_941].z;
    float _3842 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _950 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _3853 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _951 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _3864 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _952 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
    float _953 = 1.0 - _823;
    float _954 = _950 * _953;
    float _955 = _951 * _953;
    float _956 = _952 * _953;
    float _961 = (_950 + (-0.039999999105930328369140625)) * _823;
    float _962 = (_951 + (-0.039999999105930328369140625)) * _823;
    float _963 = (_952 + (-0.039999999105930328369140625)) * _823;
    float _964 = _961 + 0.039999999105930328369140625;
    float _966 = _962 + 0.039999999105930328369140625;
    float _967 = _963 + 0.039999999105930328369140625;
    vec4 _976 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _902, cbSceneParam._m0[86u].y * _903));
    float _980 = ((isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * TEXCOORD_5.w) * _976.x;
    float _981 = dot(vec3(_815, _816, _817), vec3(_894, _895, _896));
    float _984 = _981 * 2.0;
    float _988 = (_984 * _815) - _894;
    float _989 = (_984 * _816) - _895;
    float _990 = (_984 * _817) - _896;
    float _994 = abs(dot(vec3(_894, _895, _896), vec3(_815, _816, _817)));
    float _3875 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _996 = sqrt(_818);
    float _1008 = exp2((_996 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_996 * 3.0));
    float _1014 = (1.0 - _1008) * ((_996 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1015 = _1008 * _996;
    float _1043 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1047 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1051 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1351;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1077 = fma(_1051, cbModelParam._m0[26u].z, fma(_1047, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1043));
        float _1081 = fma(_1051, cbModelParam._m0[27u].z, fma(_1047, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1043));
        float _1085 = fma(_1051, cbModelParam._m0[28u].z, fma(_1047, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1043));
        float _1109 = _1043 + _815;
        float _1110 = _1047 + _816;
        float _1111 = _1051 + _817;
        float _1121 = fma(_1111, cbModelParam._m0[26u].z, fma(_1110, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1109)) - _1077;
        float _1122 = fma(_1111, cbModelParam._m0[27u].z, fma(_1110, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1109)) - _1081;
        float _1123 = fma(_1111, cbModelParam._m0[28u].z, fma(_1110, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1109)) - _1085;
        float _1127 = inversesqrt(dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123)));
        float _1140 = ((_1127 * _1121) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1077 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1141 = ((_1127 * _1122) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1081 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1142 = ((_1127 * _1123) / cbModelParam._m0[34u].z) + ((((((_1085 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1145 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        float _1179 = exp2((_1145.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1145.x + (-0.5));
        float _1181 = _1179 * (_1145.y + (-0.5));
        float _1182 = _1179 * (_1145.z + (-0.5));
        float _1189 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1152.x + (-0.5));
        float _1191 = _1189 * (_1152.y + (-0.5));
        float _1192 = _1189 * (_1152.z + (-0.5));
        float _1199 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1159.x + (-0.5));
        float _1201 = _1199 * (_1159.y + (-0.5));
        float _1202 = _1199 * (_1159.z + (-0.5));
        float _1209 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1166.x + (-0.5));
        float _1211 = _1209 * (_1166.y + (-0.5));
        float _1212 = _1209 * (_1166.z + (-0.5));
        float _1213 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1214 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1215 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1216 = _1180 * 0.5;
        float _1217 = _1190 * 0.5;
        float _1218 = _1200 * 0.5;
        float _1219 = dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218));
        float _1224 = (_1219 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1219);
        float _1233 = (dot(vec3(_815, _816, _817), vec3(_1224 * _1216, _1224 * _1217, _1224 * _1218)) + 1.0) * 0.5;
        float _3901 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1243 = sqrt(((_1217 * _1217) + (_1216 * _1216)) + (_1218 * _1218)) / (_1213 + 9.9999997473787516355514526367188e-06);
        float _3912 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1245 = _1244 * 2.0;
        float _1249 = (1.0 - _1244) / (_1244 + 1.0);
        float _3923 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1259 = ((((1.0 - _1250) * (_1245 + 2.0)) * exp2(log2(isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * (_1245 + 1.0))) + _1250) * _1213;
        float _1260 = _1181 * 0.5;
        float _1261 = _1191 * 0.5;
        float _1262 = _1201 * 0.5;
        float _1263 = dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262));
        float _1268 = (_1263 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1263);
        float _1276 = (dot(vec3(_815, _816, _817), vec3(_1268 * _1260, _1268 * _1261, _1268 * _1262)) + 1.0) * 0.5;
        float _3934 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1285 = sqrt(((_1261 * _1261) + (_1260 * _1260)) + (_1262 * _1262)) / (_1214 + 9.9999997473787516355514526367188e-06);
        float _3945 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1287 = _1286 * 2.0;
        float _1291 = (1.0 - _1286) / (_1286 + 1.0);
        float _3956 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1301 = ((((1.0 - _1292) * (_1287 + 2.0)) * exp2(log2(isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * (_1287 + 1.0))) + _1292) * _1214;
        float _1302 = _1182 * 0.5;
        float _1303 = _1192 * 0.5;
        float _1304 = _1202 * 0.5;
        float _1305 = dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304));
        float _1310 = (_1305 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1305);
        float _1318 = (dot(vec3(_815, _816, _817), vec3(_1310 * _1302, _1310 * _1303, _1310 * _1304)) + 1.0) * 0.5;
        float _3967 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1327 = sqrt(((_1303 * _1303) + (_1302 * _1302)) + (_1304 * _1304)) / (_1215 + 9.9999997473787516355514526367188e-06);
        float _3978 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1329 = _1328 * 2.0;
        float _1333 = (1.0 - _1328) / (_1328 + 1.0);
        float _3989 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1343 = ((((1.0 - _1334) * (_1329 + 2.0)) * exp2(log2(isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * (_1329 + 1.0))) + _1334) * _1215;
        _1351 = _1182;
        _1353 = _1181;
        _1354 = _1180;
        _1355 = _1192;
        _1356 = _1191;
        _1357 = _1190;
        _1358 = _1202;
        _1359 = _1201;
        _1360 = _1200;
        _1361 = _1215;
        _1362 = _1214;
        _1363 = _1213;
        _1364 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)));
        _1365 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)));
        _1366 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)));
    }
    else
    {
        _1351 = _1352;
        _1353 = _1352;
        _1354 = _1352;
        _1355 = _1352;
        _1356 = _1352;
        _1357 = _1352;
        _1358 = _1352;
        _1359 = _1352;
        _1360 = _1352;
        _1361 = _1352;
        _1362 = _1352;
        _1363 = _1352;
        _1364 = 0.0;
        _1365 = 0.0;
        _1366 = 0.0;
    }
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1391 = fma(_1051, cbModelParam._m0[30u].z, fma(_1047, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1043));
        float _1395 = fma(_1051, cbModelParam._m0[31u].z, fma(_1047, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1043));
        float _1399 = fma(_1051, cbModelParam._m0[32u].z, fma(_1047, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1043));
        float _1422 = _1043 + _815;
        float _1423 = _1047 + _816;
        float _1424 = _1051 + _817;
        float _1434 = fma(_1424, cbModelParam._m0[30u].z, fma(_1423, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1422)) - _1391;
        float _1435 = fma(_1424, cbModelParam._m0[31u].z, fma(_1423, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1422)) - _1395;
        float _1436 = fma(_1424, cbModelParam._m0[32u].z, fma(_1423, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1422)) - _1399;
        float _1440 = inversesqrt(dot(vec3(_1434, _1435, _1436), vec3(_1434, _1435, _1436)));
        float _1453 = ((_1440 * _1434) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1391 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1454 = ((_1440 * _1435) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1395 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1455 = ((_1440 * _1436) / cbModelParam._m0[35u].z) + ((((((_1399 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1457 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1453, _1454, _1455), 0.0);
        vec4 _1464 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1453, _1454, _1455), 0.0);
        vec4 _1471 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1453, _1454, _1455), 0.0);
        vec4 _1478 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1453, _1454, _1455), 0.0);
        float _1490 = exp2((_1457.w + (-0.5)) * 20.0) * 2.0;
        float _1491 = _1490 * (_1457.x + (-0.5));
        float _1492 = _1490 * (_1457.y + (-0.5));
        float _1493 = _1490 * (_1457.z + (-0.5));
        float _1500 = exp2((_1464.w + (-0.5)) * 20.0) * 2.0;
        float _1501 = _1500 * (_1464.x + (-0.5));
        float _1502 = _1500 * (_1464.y + (-0.5));
        float _1503 = _1500 * (_1464.z + (-0.5));
        float _1510 = exp2((_1471.w + (-0.5)) * 20.0) * 2.0;
        float _1511 = _1510 * (_1471.x + (-0.5));
        float _1512 = _1510 * (_1471.y + (-0.5));
        float _1513 = _1510 * (_1471.z + (-0.5));
        float _1520 = exp2((_1478.w + (-0.5)) * 20.0) * 2.0;
        float _1521 = _1520 * (_1478.x + (-0.5));
        float _1522 = _1520 * (_1478.y + (-0.5));
        float _1523 = _1520 * (_1478.z + (-0.5));
        float _1524 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1525 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1526 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1527 = _1491 * 0.5;
        float _1528 = _1501 * 0.5;
        float _1529 = _1511 * 0.5;
        float _1530 = dot(vec3(_1527, _1528, _1529), vec3(_1527, _1528, _1529));
        float _1535 = (_1530 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1530);
        float _1543 = (dot(vec3(_815, _816, _817), vec3(_1535 * _1527, _1535 * _1528, _1535 * _1529)) + 1.0) * 0.5;
        float _4030 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1552 = sqrt(((_1528 * _1528) + (_1527 * _1527)) + (_1529 * _1529)) / (_1524 + 9.9999997473787516355514526367188e-06);
        float _4041 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1554 = _1553 * 2.0;
        float _1558 = (1.0 - _1553) / (_1553 + 1.0);
        float _4052 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1559 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1568 = ((((1.0 - _1559) * (_1554 + 2.0)) * exp2(log2(isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * (_1554 + 1.0))) + _1559) * _1524;
        float _1569 = _1492 * 0.5;
        float _1570 = _1502 * 0.5;
        float _1571 = _1512 * 0.5;
        float _1572 = dot(vec3(_1569, _1570, _1571), vec3(_1569, _1570, _1571));
        float _1577 = (_1572 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1572);
        float _1585 = (dot(vec3(_815, _816, _817), vec3(_1577 * _1569, _1577 * _1570, _1577 * _1571)) + 1.0) * 0.5;
        float _4063 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1594 = sqrt(((_1570 * _1570) + (_1569 * _1569)) + (_1571 * _1571)) / (_1525 + 9.9999997473787516355514526367188e-06);
        float _4074 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1596 = _1595 * 2.0;
        float _1600 = (1.0 - _1595) / (_1595 + 1.0);
        float _4085 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1601 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1610 = ((((1.0 - _1601) * (_1596 + 2.0)) * exp2(log2(isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * (_1596 + 1.0))) + _1601) * _1525;
        float _1611 = _1493 * 0.5;
        float _1612 = _1503 * 0.5;
        float _1613 = _1513 * 0.5;
        float _1614 = dot(vec3(_1611, _1612, _1613), vec3(_1611, _1612, _1613));
        float _1619 = (_1614 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1614);
        float _1627 = (dot(vec3(_815, _816, _817), vec3(_1619 * _1611, _1619 * _1612, _1619 * _1613)) + 1.0) * 0.5;
        float _4096 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1636 = sqrt(((_1612 * _1612) + (_1611 * _1611)) + (_1613 * _1613)) / (_1526 + 9.9999997473787516355514526367188e-06);
        float _4107 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1637 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1638 = _1637 * 2.0;
        float _1642 = (1.0 - _1637) / (_1637 + 1.0);
        float _4118 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1643 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1652 = ((((1.0 - _1643) * (_1638 + 2.0)) * exp2(log2(isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (_1638 + 1.0))) + _1643) * _1526;
        _1660 = _1493;
        _1661 = _1492;
        _1662 = _1491;
        _1663 = _1503;
        _1664 = _1502;
        _1665 = _1501;
        _1666 = _1513;
        _1667 = _1512;
        _1668 = _1511;
        _1669 = _1526;
        _1670 = _1525;
        _1671 = _1524;
        _1672 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)));
        _1673 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)));
        _1674 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)));
    }
    else
    {
        _1660 = _1352;
        _1661 = _1352;
        _1662 = _1352;
        _1663 = _1352;
        _1664 = _1352;
        _1665 = _1352;
        _1666 = _1352;
        _1667 = _1352;
        _1668 = _1352;
        _1669 = _1352;
        _1670 = _1352;
        _1671 = _1352;
        _1672 = 0.0;
        _1673 = 0.0;
        _1674 = 0.0;
    }
    float _1684 = (cbModelParam._m0[1u].x * (_1672 - _1364)) + _1364;
    float _1685 = (cbModelParam._m0[1u].x * (_1673 - _1365)) + _1365;
    float _1686 = (cbModelParam._m0[1u].x * (_1674 - _1366)) + _1366;
    float _1707 = fma(_1686, cbSceneParam._m0[89u].z, fma(_1685, cbSceneParam._m0[89u].y, _1684 * cbSceneParam._m0[89u].x));
    float _1710 = fma(_1686, cbSceneParam._m0[90u].z, fma(_1685, cbSceneParam._m0[90u].y, _1684 * cbSceneParam._m0[90u].x));
    float _1713 = fma(_1686, cbSceneParam._m0[91u].z, fma(_1685, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1684));
    float _1728 = _988 * 0.5;
    float _1729 = _989 * 0.5;
    float _1730 = _990 * 0.5;
    float _1731 = dot(vec4(_1728, _1729, _1730, 1.0), vec4(_1662, _1665, _1668, _1671));
    float _1734 = dot(vec4(_1728, _1729, _1730, 1.0), vec4(_1661, _1664, _1667, _1670));
    float _1737 = dot(vec4(_1728, _1729, _1730, 1.0), vec4(_1660, _1663, _1666, _1669));
    float _1771;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1744 = dot(vec4(_1728, _1729, _1730, 1.0), vec4(_1351, _1355, _1358, _1361));
        float _1748 = dot(vec4(_1728, _1729, _1730, 1.0), vec4(_1353, _1356, _1359, _1362));
        float _1752 = dot(vec4(_1728, _1729, _1730, 1.0), vec4(_1354, _1357, _1360, _1363));
        float _1759 = dot(vec4(cbModelParam._m0[39u]), vec4(_1728, _1729, _1730, 1.0));
        _1771 = dot(vec3(isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0)), isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0)), isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1759) ? 0.0 : (isnan(0.0) ? _1759 : max(0.0, _1759))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1771 = 1.0;
    }
    float _1782;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1773 = dot(vec4(cbModelParam._m0[40u]), vec4(_1728, _1729, _1730, 1.0));
        _1782 = dot(vec3(isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0)), isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0)), isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1773) ? 0.0 : (isnan(0.0) ? _1773 : max(0.0, _1773))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1782 = 1.0;
    }
    float _1786 = (_1782 * cbModelParam._m0[1u].x) + (_1771 * (1.0 - cbModelParam._m0[1u].x));
    float _1796 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _818);
    float _1797 = isnan(_1796) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1796 : min(cbModelParam._m0[25u].z, _1796));
    float _1879;
    float _1881;
    float _1883;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1846 = fma(_1051, cbModelParam._m0[13u].z, fma(_1047, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1043)) + cbModelParam._m0[13u].w;
        float _1850 = fma(_1051, cbModelParam._m0[14u].z, fma(_1047, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1043)) + cbModelParam._m0[14u].w;
        float _1854 = fma(_1051, cbModelParam._m0[15u].z, fma(_1047, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1043)) + cbModelParam._m0[15u].w;
        float _1857 = fma(_990, cbModelParam._m0[13u].z, fma(_989, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _988));
        float _1860 = fma(_990, cbModelParam._m0[14u].z, fma(_989, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _988));
        float _1863 = fma(_990, cbModelParam._m0[15u].z, fma(_989, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _988));
        float _1891;
        if (_1857 > 0.0)
        {
            _1891 = abs((1.0 - _1846) / _1857);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1846 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1891 = frontier_phi_14_12_ladder;
        }
        float _2094;
        if (_1860 > 0.0)
        {
            _2094 = abs((1.0 - _1850) / _1860);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1860 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1850 + 1.0) / _1860);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2094 = frontier_phi_23_19_ladder;
        }
        float _2348;
        if (_1863 > 0.0)
        {
            _2348 = abs((1.0 - _1854) / _1863);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1854 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2348 = frontier_phi_35_30_ladder;
        }
        float _2350 = isnan(_2094) ? _1891 : (isnan(_1891) ? _2094 : min(_1891, _2094));
        float _2351 = isnan(_2348) ? _2350 : (isnan(_2350) ? _2348 : min(_2350, _2348));
        float _2355 = (_2351 * _1857) + _1846;
        float _2356 = (_2351 * _1860) + _1850;
        float _2357 = (_2351 * _1863) + _1854;
        float _2358 = _2351 * 9.9999997473787516355514526367188e-05;
        float _2360 = (-1.0) - _2358;
        float _2362 = _2358 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2357 > _2362) || ((_2357 < _2360) || ((_2356 > _2362) || ((_2356 < _2360) || ((_2355 < _2360) || (_2355 > _2362))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2485 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2357, cbModelParam._m0[9u].z, fma(_2356, cbModelParam._m0[9u].y, _2355 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2357, cbModelParam._m0[10u].z, fma(_2356, cbModelParam._m0[10u].y, _2355 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2357, cbModelParam._m0[11u].z, fma(_2356, cbModelParam._m0[11u].y, _2355 * cbModelParam._m0[11u].x))), _1797);
            frontier_phi_13_35_ladder = _2485.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2485.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2485.x * cbModelParam._m0[1u].y;
        }
        _1879 = frontier_phi_13_35_ladder_2;
        _1881 = frontier_phi_13_35_ladder_1;
        _1883 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1867 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_988, _989, _990), _1797);
        _1879 = _1867.x * cbModelParam._m0[1u].y;
        _1881 = _1867.y * cbModelParam._m0[1u].y;
        _1883 = _1867.z * cbModelParam._m0[1u].y;
    }
    float _1887 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _818);
    float _1888 = isnan(_1887) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1887 : min(cbModelParam._m0[25u].w, _1887));
    float _1978;
    float _1980;
    float _1982;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1942 = fma(_1051, cbModelParam._m0[21u].z, fma(_1047, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1043)) + cbModelParam._m0[21u].w;
        float _1946 = fma(_1051, cbModelParam._m0[22u].z, fma(_1047, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1043)) + cbModelParam._m0[22u].w;
        float _1950 = fma(_1051, cbModelParam._m0[23u].z, fma(_1047, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1043)) + cbModelParam._m0[23u].w;
        float _1953 = fma(_990, cbModelParam._m0[21u].z, fma(_989, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _988));
        float _1956 = fma(_990, cbModelParam._m0[22u].z, fma(_989, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _988));
        float _1959 = fma(_990, cbModelParam._m0[23u].z, fma(_989, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _988));
        float _2099;
        if (_1953 > 0.0)
        {
            _2099 = abs((1.0 - _1942) / _1953);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1953 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1942 + 1.0) / _1953);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2099 = frontier_phi_25_21_ladder;
        }
        float _2375;
        if (_1956 > 0.0)
        {
            _2375 = abs((1.0 - _1946) / _1956);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1956 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1946 + 1.0) / _1956);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2375 = frontier_phi_37_32_ladder;
        }
        float _2588;
        if (_1959 > 0.0)
        {
            _2588 = abs((1.0 - _1950) / _1959);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1959 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1950 + 1.0) / _1959);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2588 = frontier_phi_46_43_ladder;
        }
        float _2590 = isnan(_2375) ? _2099 : (isnan(_2099) ? _2375 : min(_2099, _2375));
        float _2591 = isnan(_2588) ? _2590 : (isnan(_2590) ? _2588 : min(_2590, _2588));
        float _2595 = (_2591 * _1953) + _1942;
        float _2596 = (_2591 * _1956) + _1946;
        float _2597 = (_2591 * _1959) + _1950;
        float _2598 = _2591 * 9.9999997473787516355514526367188e-05;
        float _2599 = (-1.0) - _2598;
        float _2601 = _2598 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2597 > _2601) || ((_2597 < _2599) || ((_2596 > _2601) || ((_2596 < _2599) || ((_2595 < _2599) || (_2595 > _2601))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2796 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2597, cbModelParam._m0[17u].z, fma(_2596, cbModelParam._m0[17u].y, _2595 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2597, cbModelParam._m0[18u].z, fma(_2596, cbModelParam._m0[18u].y, _2595 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2597, cbModelParam._m0[19u].z, fma(_2596, cbModelParam._m0[19u].y, _2595 * cbModelParam._m0[19u].x))), _1888);
            frontier_phi_22_46_ladder = _2796.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2796.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2796.x * cbModelParam._m0[1u].z;
        }
        _1978 = frontier_phi_22_46_ladder_2;
        _1980 = frontier_phi_22_46_ladder_1;
        _1982 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1962 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_988, _989, _990), _1888);
        _1978 = _1962.x * cbModelParam._m0[1u].z;
        _1980 = _1962.y * cbModelParam._m0[1u].z;
        _1982 = _1962.z * cbModelParam._m0[1u].z;
    }
    float _1995 = (((_1014 * _964) + _1015) * _980) * ((cbModelParam._m0[1u].w * (_1978 - _1879)) + _1879);
    float _1997 = (((_1014 * _966) + _1015) * _980) * ((cbModelParam._m0[1u].w * (_1980 - _1881)) + _1881);
    float _1999 = (((_1014 * _967) + _1015) * _980) * ((cbModelParam._m0[1u].w * (_1982 - _1883)) + _1883);
    float _2002 = fma(_1999, cbSceneParam._m0[89u].z, fma(_1997, cbSceneParam._m0[89u].y, _1995 * cbSceneParam._m0[89u].x));
    float _2005 = fma(_1999, cbSceneParam._m0[90u].z, fma(_1997, cbSceneParam._m0[90u].y, _1995 * cbSceneParam._m0[90u].x));
    float _2008 = fma(_1999, cbSceneParam._m0[91u].z, fma(_1997, cbSceneParam._m0[91u].y, _1995 * cbSceneParam._m0[91u].x));
    uvec4 _2018 = floatBitsToUint(cbInstanceData._m0[_275 + 5u]);
    uint _2020 = _2018.x * 14u;
    uint _2021 = _2020 + 13u;
    float _2028 = _980 + (-1.0);
    float _2033 = (cbLight._m0[_2021].x * _2028) + 1.0;
    float _2034 = (cbLight._m0[_2021].y * _2028) + 1.0;
    float _2035 = (cbLight._m0[_2021].z * _2028) + 1.0;
    float _2036 = (cbLight._m0[_2021].w * _2028) + 1.0;
    uint _2037 = _2020 + 5u;
    float _2043 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
    uint _2047 = _2020 + 4u;
    float _2053 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
    uint _2057 = _2020 | 1u;
    float _2068 = dot(vec3(cbLight._m0[_2020].xyz), vec3(_815, _816, _817));
    float _2071 = dot(vec3(cbLight._m0[_2057].xyz), vec3(_815, _816, _817));
    float _4254 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _4265 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2076 = (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * 0.3183098733425140380859375;
    float _2078 = (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * 0.3183098733425140380859375;
    float _2085 = ((cbLight._m0[_2037].x * _2043) * _2078) + ((cbLight._m0[_2047].x * _2053) * _2076);
    float _2086 = ((_2043 * cbLight._m0[_2037].y) * _2078) + ((_2053 * cbLight._m0[_2047].y) * _2076);
    float _2087 = ((_2043 * cbLight._m0[_2037].z) * _2078) + ((_2053 * cbLight._m0[_2047].z) * _2076);
    uvec4 _2091 = floatBitsToUint(cbLight._m0[_2020 + 12u]);
    bool _2093 = _2091.x == 0u;
    float _2104;
    float _2106;
    float _2108;
    if (_2093)
    {
        _2104 = _2085;
        _2106 = _2086;
        _2108 = _2087;
    }
    else
    {
        uint _2112 = _2020 + 6u;
        float _2128 = (dot(vec3(cbLight._m0[_2020 + 2u].xyz), vec3(_815, _816, _817)) * 0.5) + 0.5;
        float _2129 = _2128 * _2128;
        float _4276 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2130 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _2131 = isnan(1.0) ? _2035 : (isnan(_2035) ? 1.0 : min(_2035, 1.0));
        _2104 = (((cbLight._m0[_2112].x * 0.3183098733425140380859375) * _2130) * _2131) + _2085;
        _2106 = (((cbLight._m0[_2112].y * 0.3183098733425140380859375) * _2130) * _2131) + _2086;
        _2108 = (((cbLight._m0[_2112].z * 0.3183098733425140380859375) * _2130) * _2131) + _2087;
    }
    bool _2111 = _2091.y == 0u;
    float _2149;
    float _2151;
    float _2153;
    if (_2111)
    {
        _2149 = _2104;
        _2151 = _2106;
        _2153 = _2108;
    }
    else
    {
        uint _2319 = _2020 + 7u;
        float _2335 = (dot(vec3(cbLight._m0[_2020 + 3u].xyz), vec3(_815, _816, _817)) * 0.5) + 0.5;
        float _2336 = _2335 * _2335;
        float _4292 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
        float _2337 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _2338 = isnan(1.0) ? _2036 : (isnan(_2036) ? 1.0 : min(_2036, 1.0));
        _2149 = (((cbLight._m0[_2319].x * 0.3183098733425140380859375) * _2337) * _2338) + _2104;
        _2151 = (((cbLight._m0[_2319].y * 0.3183098733425140380859375) * _2337) * _2338) + _2106;
        _2153 = (((cbLight._m0[_2319].z * 0.3183098733425140380859375) * _2337) * _2338) + _2108;
    }
    uint _2156 = _2020 + 8u;
    float _2169 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2020].w)) * _818) * 0.949999988079071044921875);
    float _2170 = _2169 * _2169;
    float _2171 = cbLight._m0[_2020].x + _894;
    float _2172 = cbLight._m0[_2020].y + _895;
    float _2173 = cbLight._m0[_2020].z + _896;
    float _2177 = inversesqrt(dot(vec3(_2171, _2172, _2173), vec3(_2171, _2172, _2173)));
    float _2178 = _2177 * _2171;
    float _2179 = _2177 * _2172;
    float _2180 = _2177 * _2173;
    float _2181 = dot(vec3(_815, _816, _817), vec3(cbLight._m0[_2020].xyz));
    float _4308 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2184 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
    float _4319 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _2185 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
    float _2186 = dot(vec3(_815, _816, _817), vec3(_2178, _2179, _2180));
    float _4330 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2189 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
    float _2190 = dot(vec3(cbLight._m0[_2020].xyz), vec3(_2178, _2179, _2180));
    float _4341 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2194 = _2170 * _2170;
    float _2198 = ((_2189 * _2189) * (_2194 + (-1.0))) + 1.0;
    float _2206 = exp2(log2(1.0 - (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0)))) * 5.0);
    float _2207 = 0.959999978542327880859375 - _961;
    float _2209 = 0.959999978542327880859375 - _962;
    float _2210 = 0.959999978542327880859375 - _963;
    float _2217 = 1.0 - _2170;
    float _2228 = (0.5 / (((_2185 * ((_2184 * _2217) + _2170)) + 9.9999999392252902907785028219223e-09) + (((_2185 * _2217) + _2170) * _2184))) * _2184;
    float _4352 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2230 = (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (_2194 / ((_2198 * _2198) * 3.141590118408203125));
    uint _2241 = _2020 + 9u;
    float _2252 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2057].w)) * _818) * 0.949999988079071044921875);
    float _2253 = _2252 * _2252;
    float _2254 = cbLight._m0[_2057].x + _894;
    float _2255 = cbLight._m0[_2057].y + _895;
    float _2256 = cbLight._m0[_2057].z + _896;
    float _2260 = inversesqrt(dot(vec3(_2254, _2255, _2256), vec3(_2254, _2255, _2256)));
    float _2261 = _2260 * _2254;
    float _2262 = _2260 * _2255;
    float _2263 = _2260 * _2256;
    float _2264 = dot(vec3(_815, _816, _817), vec3(cbLight._m0[_2057].xyz));
    float _4363 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2267 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
    float _2268 = dot(vec3(_815, _816, _817), vec3(_2261, _2262, _2263));
    float _4374 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2271 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
    float _2272 = dot(vec3(cbLight._m0[_2057].xyz), vec3(_2261, _2262, _2263));
    float _4385 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2276 = _2253 * _2253;
    float _2280 = ((_2271 * _2271) * (_2276 + (-1.0))) + 1.0;
    float _2287 = exp2(log2(1.0 - (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0)))) * 5.0);
    float _2294 = 1.0 - _2253;
    float _2304 = (0.5 / (((_2185 * ((_2267 * _2294) + _2253)) + 9.9999999392252902907785028219223e-09) + (((_2185 * _2294) + _2253) * _2267))) * _2267;
    float _4396 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _2306 = (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_2276 / ((_2280 * _2280) * 3.141590118408203125));
    float _2316 = (((((_2287 * _2207) + _964) * cbLight._m0[_2241].x) * _2306) * _2043) + (((((_2206 * _2207) + _964) * cbLight._m0[_2156].x) * _2230) * _2053);
    float _2317 = (((((_2287 * _2209) + _966) * cbLight._m0[_2241].y) * _2306) * _2043) + (((((_2206 * _2209) + _966) * cbLight._m0[_2156].y) * _2230) * _2053);
    float _2318 = (((((_2287 * _2210) + _967) * cbLight._m0[_2241].z) * _2306) * _2043) + (((((_2206 * _2210) + _967) * cbLight._m0[_2156].z) * _2230) * _2053);
    float _2380;
    float _2382;
    float _2384;
    if (_2093)
    {
        _2380 = _2316;
        _2382 = _2317;
        _2384 = _2318;
    }
    else
    {
        uint _2386 = _2020 + 2u;
        uint _2390 = _2020 + 10u;
        float _2404 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2386].w)) * _818) * 0.949999988079071044921875);
        float _2405 = _2404 * _2404;
        float _2406 = cbLight._m0[_2386].x + _894;
        float _2407 = cbLight._m0[_2386].y + _895;
        float _2408 = cbLight._m0[_2386].z + _896;
        float _2412 = inversesqrt(dot(vec3(_2406, _2407, _2408), vec3(_2406, _2407, _2408)));
        float _2413 = _2412 * _2406;
        float _2414 = _2412 * _2407;
        float _2415 = _2412 * _2408;
        float _2416 = dot(vec3(_815, _816, _817), vec3(cbLight._m0[_2386].xyz));
        float _4407 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2419 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _2420 = dot(vec3(_815, _816, _817), vec3(_2413, _2414, _2415));
        float _4418 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2423 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _2424 = dot(vec3(cbLight._m0[_2386].xyz), vec3(_2413, _2414, _2415));
        float _4429 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2428 = _2405 * _2405;
        float _2432 = ((_2423 * _2423) * (_2428 + (-1.0))) + 1.0;
        float _2439 = exp2(log2(1.0 - (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0)))) * 5.0);
        float _2446 = 1.0 - _2405;
        float _2456 = (0.5 / (((_2185 * ((_2419 * _2446) + _2405)) + 9.9999999392252902907785028219223e-09) + (((_2185 * _2446) + _2405) * _2419))) * _2419;
        float _4440 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2458 = (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_2428 / ((_2432 * _2432) * 3.141590118408203125));
        float _2459 = isnan(1.0) ? _2035 : (isnan(_2035) ? 1.0 : min(_2035, 1.0));
        _2380 = (((((_2439 * _2207) + _964) * cbLight._m0[_2390].x) * _2458) * _2459) + _2316;
        _2382 = (((((_2439 * _2209) + _966) * cbLight._m0[_2390].y) * _2458) * _2459) + _2317;
        _2384 = (((((_2439 * _2210) + _967) * cbLight._m0[_2390].z) * _2458) * _2459) + _2318;
    }
    float _2494;
    float _2496;
    float _2498;
    if (_2111)
    {
        _2494 = _2380;
        _2496 = _2382;
        _2498 = _2384;
    }
    else
    {
        uint _2505 = _2020 + 3u;
        uint _2509 = _2020 + 11u;
        float _2523 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2505].w)) * _818) * 0.949999988079071044921875);
        float _2524 = _2523 * _2523;
        float _2525 = cbLight._m0[_2505].x + _894;
        float _2526 = cbLight._m0[_2505].y + _895;
        float _2527 = cbLight._m0[_2505].z + _896;
        float _2531 = inversesqrt(dot(vec3(_2525, _2526, _2527), vec3(_2525, _2526, _2527)));
        float _2532 = _2531 * _2525;
        float _2533 = _2531 * _2526;
        float _2534 = _2531 * _2527;
        float _2535 = dot(vec3(_815, _816, _817), vec3(cbLight._m0[_2505].xyz));
        float _4456 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2538 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
        float _2539 = dot(vec3(_815, _816, _817), vec3(_2532, _2533, _2534));
        float _4467 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        float _2542 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _2543 = dot(vec3(cbLight._m0[_2505].xyz), vec3(_2532, _2533, _2534));
        float _4478 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2547 = _2524 * _2524;
        float _2551 = ((_2542 * _2542) * (_2547 + (-1.0))) + 1.0;
        float _2558 = exp2(log2(1.0 - (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0)))) * 5.0);
        float _2565 = 1.0 - _2524;
        float _2575 = (0.5 / (((_2185 * ((_2538 * _2565) + _2524)) + 9.9999999392252902907785028219223e-09) + (((_2185 * _2565) + _2524) * _2538))) * _2538;
        float _4489 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        float _2577 = (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (_2547 / ((_2551 * _2551) * 3.141590118408203125));
        float _2578 = isnan(1.0) ? _2036 : (isnan(_2036) ? 1.0 : min(_2036, 1.0));
        _2494 = (((((_2558 * _2207) + _964) * cbLight._m0[_2509].x) * _2577) * _2578) + _2380;
        _2496 = (((((_2558 * _2209) + _966) * cbLight._m0[_2509].y) * _2577) * _2578) + _2382;
        _2498 = (((((_2558 * _2210) + _967) * cbLight._m0[_2509].z) * _2577) * _2578) + _2384;
    }
    float _2713;
    float _2715;
    float _2717;
    float _2719;
    float _2721;
    float _2723;
    if (_2018.y == 0u)
    {
        float _2653 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2654 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2653;
        float _2655 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2653;
        float _2656 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2653;
        uvec4 _2668 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2669 = _2668.x;
        uint _2680 = uint((float(_2668.y) * floor(float(uint(cbSceneParam._m0[85u].y * _903) / _2669))) + floor(float(uint(cbSceneParam._m0[85u].x * _902) / _2669)));
        float _2690 = (log2(_2656 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2691 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
        uint _2694 = uint(isnan(14.0) ? _2691 : (isnan(_2691) ? 14.0 : min(_2691, 14.0)));
        uvec4 _2699 = texelFetch(g_lightClusterGridBuffer, int(((_2694 << 2u) + (_2680 << 6u)) >> 2u));
        uint _2700 = _2699.x;
        uint _2701 = _2668.z;
        float _2801;
        float _2803;
        float _2805;
        float _2807;
        float _2809;
        float _2811;
        if (((((1u << ((_2701 >> 4u) & 15u)) + 4294967295u) & _2700) == 0u) || ((_2701 & 240u) == 0u))
        {
            _2801 = 0.0;
            _2803 = 0.0;
            _2805 = 0.0;
            _2807 = 0.0;
            _2809 = 0.0;
            _2811 = 0.0;
        }
        else
        {
            float _2802;
            float _2804;
            float _2806;
            float _2808;
            float _2810;
            float _2812;
            float _2946 = 0.0;
            float _2947 = 0.0;
            float _2948 = 0.0;
            float _2949 = 0.0;
            float _2950 = 0.0;
            float _2951 = 0.0;
            uint _2952 = 0u;
            uint _2961;
            bool _2962;
            for (;;)
            {
                _2961 = texelFetch(g_lightClassification, int((((_2694 << 5u) + (_2680 << 9u)) + (_2952 << 2u)) >> 2u)).x;
                _2962 = _2961 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2962)
                {
                    frontier_phi_61_pred = _2946;
                    frontier_phi_61_pred_1 = _2951;
                    frontier_phi_61_pred_2 = _2950;
                    frontier_phi_61_pred_3 = _2949;
                    frontier_phi_61_pred_4 = _2948;
                    frontier_phi_61_pred_5 = _2947;
                }
                else
                {
                    float _3070;
                    float _3071;
                    float _3072;
                    float _3073;
                    float _3074;
                    float _3075;
                    uint _3076;
                    _3070 = _2946;
                    _3071 = _2947;
                    _3072 = _2948;
                    _3073 = _2949;
                    _3074 = _2950;
                    _3075 = _2951;
                    _3076 = _2961;
                    float _3002;
                    float _3003;
                    float _3004;
                    float _3005;
                    float _3006;
                    float _3007;
                    for (;;)
                    {
                        uint _3080 = uint(findLSB(_3076)) + (_2952 << 5u);
                        uint _3077 = (_3076 + 4294967295u) & _3076;
                        uint _3082 = _3080 * 48u;
                        vec4 _3096 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3082)).x, texelFetch(g_PointLightRenderingBuffer, int(_3082 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3082 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3082 + 3u)).x));
                        uint _3102 = (_3080 * 48u) + 4u;
                        vec4 _3115 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3102)).x, texelFetch(g_PointLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3102 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3102 + 3u)).x));
                        uint _3121 = (_3080 * 48u) + 8u;
                        vec3 _3132 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3121)).x, texelFetch(g_PointLightRenderingBuffer, int(_3121 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3121 + 2u)).x));
                        float _3136 = _3096.x - _2654;
                        float _3137 = _3096.y - _2655;
                        float _3138 = _3096.z - _2656;
                        float _3139 = dot(vec3(_3136, _3137, _3138), vec3(_3136, _3137, _3138));
                        float _3142 = inversesqrt(_3139);
                        float _3143 = _3142 * _3136;
                        float _3144 = _3142 * _3137;
                        float _3145 = _3142 * _3138;
                        float _3146 = dot(vec3(_921, _924, _927), vec3(_3143, _3144, _3145));
                        float _3151 = 1.0 - (_3139 * _3096.w);
                        float _4515 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                        float _3152 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
                        float _3153 = sqrt(_3139) * _3115.w;
                        float _3156 = 1.39999997615814208984375 / (_3153 + 1.39999997615814208984375);
                        float _3157 = _3156 * _3156;
                        float _3160 = ((1.0 - _3157) * _3146) + _3157;
                        float _3163 = _3153 * _3153;
                        float _3167 = ((isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0))) * _3152) / ((_3163 * 0.699999988079071044921875) + 1.0);
                        float _3171 = (-0.0) - _2654;
                        float _3172 = (-0.0) - _2655;
                        float _3173 = (-0.0) - _2656;
                        float _3177 = inversesqrt(dot(vec3(_3171, _3172, _3173), vec3(_3171, _3172, _3173)));
                        float _3178 = _3177 * _3171;
                        float _3179 = _3177 * _3172;
                        float _3180 = _3177 * _3173;
                        float _3188 = exp2(log2(1.0 / ((_3163 * 3.5) + 5.0)) * 0.25);
                        float _3189 = 1.0 - _996;
                        float _3196 = sqrt(1.0 - ((1.0 - (_3189 * _3189)) * (1.0 - (_3188 * _3188))));
                        float _3197 = _3196 * _3196;
                        float _3198 = _3197 * _3197;
                        float _3199 = _3178 + _3143;
                        float _3200 = _3179 + _3144;
                        float _3201 = _3180 + _3145;
                        float _3205 = inversesqrt(dot(vec3(_3199, _3200, _3201), vec3(_3199, _3200, _3201)));
                        float _3209 = dot(vec3(_921, _924, _927), vec3(_3178, _3179, _3180));
                        float _4531 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                        float _3212 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
                        float _3213 = dot(vec3(_921, _924, _927), vec3(_3205 * _3199, _3205 * _3200, _3205 * _3201));
                        float _4542 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                        float _3216 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
                        float _3220 = ((_3216 * _3216) * (_3198 + (-1.0))) + 1.0;
                        float _3221 = _3156 * _3197;
                        float _3222 = _3221 * _3221;
                        float _3225 = ((1.0 - _3222) * _3146) + _3222;
                        float _4553 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                        float _3226 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
                        float _3227 = 1.0 - _3197;
                        float _3237 = (0.5 / (((_3226 * ((_3212 * _3227) + _3197)) + 9.9999999392252902907785028219223e-09) + (((_3226 * _3227) + _3197) * _3212))) * _3226;
                        float _4564 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                        float _3247 = (((_3198 * 3.1415927410125732421875) * (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0)))) / ((_3220 * _3220) * ((_3163 * 2.1991131305694580078125) + 3.141590118408203125))) * _3152;
                        _3005 = (_3167 * _3115.x) + _3073;
                        _3006 = (_3167 * _3115.y) + _3074;
                        _3007 = (_3167 * _3115.z) + _3075;
                        _3002 = (_3247 * _3132.x) + _3070;
                        _3003 = (_3247 * _3132.y) + _3071;
                        _3004 = (_3247 * _3132.z) + _3072;
                        if (_3077 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3070 = _3002;
                            _3071 = _3003;
                            _3072 = _3004;
                            _3073 = _3005;
                            _3074 = _3006;
                            _3075 = _3007;
                            _3076 = _3077;
                        }
                    }
                    frontier_phi_61_pred = _3002;
                    frontier_phi_61_pred_1 = _3007;
                    frontier_phi_61_pred_2 = _3006;
                    frontier_phi_61_pred_3 = _3005;
                    frontier_phi_61_pred_4 = _3004;
                    frontier_phi_61_pred_5 = _3003;
                }
                _2802 = frontier_phi_61_pred;
                _2812 = frontier_phi_61_pred_1;
                _2810 = frontier_phi_61_pred_2;
                _2808 = frontier_phi_61_pred_3;
                _2806 = frontier_phi_61_pred_4;
                _2804 = frontier_phi_61_pred_5;
                uint _2953 = _2952 + 1u;
                if (_2953 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2946 = _2802;
                    _2947 = _2804;
                    _2948 = _2806;
                    _2949 = _2808;
                    _2950 = _2810;
                    _2951 = _2812;
                    _2952 = _2953;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2801 = _2802;
            _2803 = _2804;
            _2805 = _2806;
            _2807 = _2808;
            _2809 = _2810;
            _2811 = _2812;
        }
        uvec4 _2815 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2816 = _2815.z;
        uint _2818 = (_2816 >> 8u) & 15u;
        float _2914;
        float _2916;
        float _2918;
        float _2920;
        float _2922;
        float _2924;
        if (((4294967295u << _2818) & _2700) == 0u)
        {
            _2914 = _2801;
            _2916 = _2803;
            _2918 = _2805;
            _2920 = _2807;
            _2922 = _2809;
            _2924 = _2811;
        }
        else
        {
            float _2939 = inversesqrt(dot(vec3(_2654, _2655, _2656), vec3(_2654, _2655, _2656)));
            float _2940 = _2939 * _2654;
            float _2941 = _2939 * _2655;
            float _2942 = _2939 * _2656;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2818 < ((_2816 >> 12u) & 15u))
            {
                float _2915;
                float _2917;
                float _2919;
                float _2921;
                float _2923;
                float _2925;
                float _3053 = _2801;
                float _3054 = _2803;
                float _3055 = _2805;
                float _3056 = _2807;
                float _3057 = _2809;
                float _3058 = _2811;
                uint _3059 = _2818;
                uint _3068;
                bool _3069;
                for (;;)
                {
                    _3068 = texelFetch(g_lightClassification, int((((_2694 << 5u) + (_2680 << 9u)) + (_3059 << 2u)) >> 2u)).x;
                    _3069 = _3068 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3069)
                    {
                        frontier_phi_67_pred = _3056;
                        frontier_phi_67_pred_1 = _3057;
                        frontier_phi_67_pred_2 = _3058;
                        frontier_phi_67_pred_3 = _3055;
                        frontier_phi_67_pred_4 = _3054;
                        frontier_phi_67_pred_5 = _3053;
                    }
                    else
                    {
                        float _3252;
                        float _3253;
                        float _3254;
                        float _3255;
                        float _3256;
                        float _3257;
                        float _3545;
                        float _3546;
                        float _3547;
                        float _3548;
                        float _3549;
                        float _3550;
                        float _3265 = _3053;
                        float _3266 = _3054;
                        float _3267 = _3055;
                        float _3268 = _3056;
                        float _3269 = _3057;
                        float _3270 = _3058;
                        uint _3271 = _3068;
                        uint _3272;
                        vec4 _3297;
                        float _3298;
                        vec4 _3313;
                        vec3 _3325;
                        vec4 _3340;
                        vec4 _3355;
                        float _3401;
                        bool _3402;
                        for (;;)
                        {
                            uint _3282 = ((_3059 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3271));
                            _3272 = (_3271 + 4294967295u) & _3271;
                            uint _3284 = _3282 * 40u;
                            _3297 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3284)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 3u)).x));
                            _3298 = _3297.w;
                            uint _3300 = (_3282 * 40u) + 4u;
                            _3313 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3300)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 3u)).x));
                            uint _3315 = (_3282 * 40u) + 8u;
                            _3325 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3315)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 2u)).x));
                            uint _3327 = (_3282 * 40u) + 16u;
                            _3340 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3327)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 3u)).x));
                            uint _3342 = (_3282 * 40u) + 20u;
                            _3355 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3342)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 3u)).x));
                            uint _3357 = (_3282 * 40u) + 24u;
                            vec4 _3370 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3357)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 3u)).x));
                            uint _3376 = (_3282 * 40u) + 28u;
                            vec4 _3389 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3376)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 3u)).x));
                            _3401 = fma(_2656, _3389.z, fma(_2655, _3389.y, _3389.x * _2654)) + _3389.w;
                            _3402 = !((fma(_2656, _3370.z, fma(_2655, _3370.y, _3370.x * _2654)) + _3370.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3402)
                            {
                                float _3429 = _3297.x - _2654;
                                float _3430 = _3297.y - _2655;
                                float _3431 = _3297.z - _2656;
                                float _3432 = dot(vec3(_3429, _3430, _3431), vec3(_3429, _3430, _3431));
                                float _3435 = inversesqrt(_3432);
                                float _3436 = _3435 * _3429;
                                float _3437 = _3435 * _3430;
                                float _3438 = _3435 * _3431;
                                float _3442 = 1.0 - (_3432 / (_3298 * _3298));
                                float _4575 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                                float _3443 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
                                float _3447 = sqrt(_3432) * _3313.w;
                                float _3449 = 1.39999997615814208984375 / (_3447 + 1.39999997615814208984375);
                                float _3450 = _3449 * _3449;
                                float _3453 = ((1.0 - _3450) * dot(vec3(_3436, _3437, _3438), vec3(_921, _924, _927))) + _3450;
                                float _3456 = _3447 * _3447;
                                float _3460 = (fma(_2656, _3340.z, fma(_2655, _3340.y, _3340.x * _2654)) + _3340.w) / _3401;
                                float _3461 = (fma(_2656, _3355.z, fma(_2655, _3355.y, _3355.x * _2654)) + _3355.w) / _3401;
                                float _3465 = 1.0 - dot(vec2(_3460, _3461), vec2(_3460, _3461));
                                float _4591 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                                float _3466 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
                                float _3467 = _3466 * (((isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0))) * _3443) / ((_3456 * 0.699999988079071044921875) + 1.0));
                                float _3479 = exp2(log2(1.0 / ((_3456 * 3.5) + 5.0)) * 0.25);
                                float _3480 = 1.0 - _996;
                                float _3487 = sqrt(1.0 - ((1.0 - (_3480 * _3480)) * (1.0 - (_3479 * _3479))));
                                float _3488 = _3487 * _3487;
                                float _3489 = _3488 * _3488;
                                float _3490 = _3436 - _2940;
                                float _3491 = _3437 - _2941;
                                float _3492 = _3438 - _2942;
                                float _3496 = inversesqrt(dot(vec3(_3490, _3491, _3492), vec3(_3490, _3491, _3492)));
                                float _3500 = dot(vec3(_921, _924, _927), vec3((-0.0) - _2940, (-0.0) - _2941, (-0.0) - _2942));
                                float _4602 = isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0));
                                float _3503 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
                                float _3504 = dot(vec3(_921, _924, _927), vec3(_3496 * _3490, _3496 * _3491, _3496 * _3492));
                                float _4613 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                                float _3507 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
                                float _3511 = ((_3507 * _3507) * (_3489 + (-1.0))) + 1.0;
                                float _3512 = _3449 * _3488;
                                float _3513 = _3512 * _3512;
                                float _3519 = ((1.0 - _3513) * dot(vec3(_921, _924, _927), vec3(_3436, _3437, _3438))) + _3513;
                                float _4624 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0));
                                float _3520 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
                                float _3521 = 1.0 - _3488;
                                float _3531 = (0.5 / (((_3520 * ((_3503 * _3521) + _3488)) + 9.9999999392252902907785028219223e-09) + (((_3520 * _3521) + _3488) * _3503))) * _3520;
                                float _4635 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0));
                                float _3541 = (_3466 * _3443) * (((_3489 * 3.1415927410125732421875) * (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0)))) / ((_3511 * _3511) * ((_3456 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3541 * _3325.x;
                                frontier_phi_73_pred_1 = _3541 * _3325.y;
                                frontier_phi_73_pred_2 = _3467 * _3313.z;
                                frontier_phi_73_pred_3 = _3467 * _3313.y;
                                frontier_phi_73_pred_4 = _3467 * _3313.x;
                                frontier_phi_73_pred_5 = _3541 * _3325.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3545 = frontier_phi_73_pred;
                            _3546 = frontier_phi_73_pred_1;
                            _3550 = frontier_phi_73_pred_2;
                            _3549 = frontier_phi_73_pred_3;
                            _3548 = frontier_phi_73_pred_4;
                            _3547 = frontier_phi_73_pred_5;
                            _3255 = _3548 + _3268;
                            _3256 = _3549 + _3269;
                            _3257 = _3550 + _3270;
                            _3252 = _3545 + _3265;
                            _3253 = _3546 + _3266;
                            _3254 = _3547 + _3267;
                            if (_3272 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3265 = _3252;
                                _3266 = _3253;
                                _3267 = _3254;
                                _3268 = _3255;
                                _3269 = _3256;
                                _3270 = _3257;
                                _3271 = _3272;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3255;
                        frontier_phi_67_pred_1 = _3256;
                        frontier_phi_67_pred_2 = _3257;
                        frontier_phi_67_pred_3 = _3254;
                        frontier_phi_67_pred_4 = _3253;
                        frontier_phi_67_pred_5 = _3252;
                    }
                    _2921 = frontier_phi_67_pred;
                    _2923 = frontier_phi_67_pred_1;
                    _2925 = frontier_phi_67_pred_2;
                    _2919 = frontier_phi_67_pred_3;
                    _2917 = frontier_phi_67_pred_4;
                    _2915 = frontier_phi_67_pred_5;
                    uint _3060 = _3059 + 1u;
                    if (_3060 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3053 = _2915;
                        _3054 = _2917;
                        _3055 = _2919;
                        _3056 = _2921;
                        _3057 = _2923;
                        _3058 = _2925;
                        _3059 = _3060;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2923;
                frontier_phi_55_56_ladder_1 = _2925;
                frontier_phi_55_56_ladder_2 = _2921;
                frontier_phi_55_56_ladder_3 = _2919;
                frontier_phi_55_56_ladder_4 = _2917;
                frontier_phi_55_56_ladder_5 = _2915;
            }
            else
            {
                frontier_phi_55_56_ladder = _2809;
                frontier_phi_55_56_ladder_1 = _2811;
                frontier_phi_55_56_ladder_2 = _2807;
                frontier_phi_55_56_ladder_3 = _2805;
                frontier_phi_55_56_ladder_4 = _2803;
                frontier_phi_55_56_ladder_5 = _2801;
            }
            _2914 = frontier_phi_55_56_ladder_5;
            _2916 = frontier_phi_55_56_ladder_4;
            _2918 = frontier_phi_55_56_ladder_3;
            _2920 = frontier_phi_55_56_ladder_2;
            _2922 = frontier_phi_55_56_ladder;
            _2924 = frontier_phi_55_56_ladder_1;
        }
        float _2929 = isnan(1.0) ? _980 : (isnan(_980) ? 1.0 : min(_980, 1.0));
        _2713 = (_2929 * _2920) + _2149;
        _2715 = (_2929 * _2922) + _2151;
        _2717 = (_2929 * _2924) + _2153;
        _2719 = ((_2914 * _964) * _2929) + _2494;
        _2721 = ((_2916 * _966) * _2929) + _2496;
        _2723 = ((_2918 * _967) * _2929) + _2498;
    }
    else
    {
        _2713 = _2149;
        _2715 = _2151;
        _2717 = _2153;
        _2719 = _2494;
        _2721 = _2496;
        _2723 = _2498;
    }
    float _4651 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _4662 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _4673 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    uint _2743 = _275 + 6u;
    float _2751 = _902 / cbSceneParam._m0[86u].x;
    float _2752 = _903 / cbSceneParam._m0[86u].y;
    vec4 _2766 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2751, _2752, (log2((isnan(cbSceneParam._m0[77u].w) ? _837 : (isnan(_837) ? cbSceneParam._m0[77u].w : min(_837, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2768 = _2766.x;
    float _2769 = _2766.y;
    float _2770 = _2766.z;
    float _2771 = _2766.w;
    float _2864;
    float _2866;
    float _2868;
    float _2870;
    if (_837 > cbSceneParam._m0[78u].w)
    {
        float _2826 = isnan(_837) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _837 : min(cbSceneParam._m0[80u].w, _837));
        float _2827 = _2826 / _837;
        float _2838 = _2827 * _887;
        float _2839 = _888 * _2827;
        float _2840 = (-0.0) - _2839;
        float _2842 = _2827 * _889;
        float _2844 = (cbSceneParam._m0[77u].w * _2840) / _2826;
        float _2845 = _2844 + cbSceneParam._m0[79u].w;
        float _2846 = cbSceneParam._m0[79u].w - _2839;
        float _2852 = sqrt(((_2838 * _2838) + (_2839 * _2839)) + (_2842 * _2842));
        float _2855 = (1.0 - (cbSceneParam._m0[77u].w / _2826)) * _2852;
        float _2860 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2862 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3015;
        if (abs((_2840 - _2844) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3015 = ((((_2845 > 0.0) ? exp2(_2860 * _2845) : (2.0 - exp2(_2862 * _2845))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2855;
        }
        else
        {
            float _2975 = 1.0 / cbSceneParam._m0[80u].x;
            float _2976 = isnan(_2846) ? _2845 : (isnan(_2845) ? _2846 : max(_2845, _2846));
            float _2977 = isnan(_2846) ? _2845 : (isnan(_2845) ? _2846 : min(_2845, _2846));
            float _2986 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : min(_2976, 0.0));
            float _2987 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : min(_2977, 0.0));
            _3015 = ((abs(_2852 / _2840) * cbSceneParam._m0[80u].y) * ((((_2986 - _2987) * 2.0) - ((exp2(_2860 * (isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0)))) - exp2(_2860 * (isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0))))) * _2975)) - ((exp2(_2862 * _2986) - exp2(_2862 * _2987)) * _2975))) + (_2855 * cbSceneParam._m0[80u].z);
        }
        vec4 _3017 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2751, _2752, 1.0), 0.0);
        float _3026 = exp2((_3015 * (-1.44269502162933349609375)) * (1.0 - _3017.w));
        float _3027 = log2(_3026);
        float _3043 = log2(_2771);
        _2864 = (exp2(_3043 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3027 * cbSceneParam._m0[78u].x)) * _3017.x) / cbSceneParam._m0[78u].x)) + _2768;
        _2866 = (exp2(_3043 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3027 * cbSceneParam._m0[78u].y)) * _3017.y) / cbSceneParam._m0[78u].y)) + _2769;
        _2868 = (exp2(_3043 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3027 * cbSceneParam._m0[78u].z)) * _3017.z) / cbSceneParam._m0[78u].z)) + _2770;
        _2870 = _3026 * _2771;
    }
    else
    {
        _2864 = _2768;
        _2866 = _2769;
        _2868 = _2770;
        _2870 = _2771;
    }
    float _2882 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2883 = _2882 == 3.0;
    float _2884 = log2(_2870);
    float _2891 = exp2(_2884 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0))) * (_2713 + ((isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))) * _980))) + ((_2719 + ((isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0))) * _1786)) * cbPerFrame._m0[3u].x));
    float _2892 = exp2(_2884 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0))) * (_2715 + ((isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))) * _980))) + ((_2721 + ((isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0))) * _1786)) * cbPerFrame._m0[3u].x));
    float _2893 = exp2(_2884 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0))) * (_2717 + ((isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))) * _980))) + ((_2723 + ((isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0))) * _1786)) * cbPerFrame._m0[3u].x));
    float _2902 = (_2882 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2902 * (_2883 ? _2891 : (_2891 + (cbSceneParam._m0[72u].w * _2864)));
    SV_Target.y = _2902 * (_2883 ? _2892 : (_2892 + (cbSceneParam._m0[72u].w * _2866)));
    SV_Target.z = _2902 * (_2883 ? _2893 : (_2893 + (cbSceneParam._m0[72u].w * _2868)));
    SV_Target.w = cbInstanceData._m0[_2743].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2743].w;
}


