#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1426;
float _4087;
float _4088;
float _4089;
float _4090;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _244 = _243 * _235;
    float _245 = _243 * _236;
    float _246 = _243 * _237;
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = _250 * NORMAL.x;
    float _252 = _250 * NORMAL.y;
    float _253 = _250 * NORMAL.z;
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _258 = _257 * TANGENT.x;
    float _259 = _257 * TANGENT.y;
    float _260 = _257 * TANGENT.z;
    uint _263 = uint(roundEven(NORMAL.w)) * 13u;
    uint _268 = _263 + 1u;
    uint _272 = _263 + 2u;
    float _281 = sqrt(((cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x)) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x));
    float _282 = _281 * TEXCOORD.z;
    float _283 = _281 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _309 = _303.x * cbMtdParam._m0[11u].x;
    float _310 = _303.y * cbMtdParam._m0[11u].y;
    float _311 = _303.z * cbMtdParam._m0[11u].z;
    vec4 _330 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _282) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _283) + cbTextureTilingScale._m0[5u].w));
    vec4 _368 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _370 = _368.x;
    float _382 = dot(vec4(_370, _368.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _399 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_370 - _382) * cbMtdParam._m0[24u].y) + _382) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4099 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _400 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _407 = (_400 * ((_330.x * cbMtdParam._m0[12u].x) - _309)) + _309;
    float _408 = (_400 * ((_330.y * cbMtdParam._m0[12u].y) - _310)) + _310;
    float _409 = (_400 * ((_330.z * cbMtdParam._m0[12u].z) - _311)) + _311;
    vec4 _428 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _282) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _283) + cbTextureTilingScale._m0[14u].w));
    vec4 _448 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _282) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _283) + cbTextureTilingScale._m0[20u].w));
    vec4 _475 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _282) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _283) + cbTextureTilingScale._m0[4u].w));
    vec4 _492 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _494 = _492.x;
    float _495 = _492.y;
    float _496 = _492.z;
    float _505 = ((_475.z - _496) * _400) + _496;
    float _508 = ((((_475.x - _494) * _400) + _494) * 2.0) + (-1.0);
    float _509 = ((((_475.y - _495) * _400) + _495) * 2.0) + (-1.0);
    float _510 = dot(vec2(_508, _509), vec2(_508, _509));
    float _4110 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _515 = sqrt(1.0 - (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))));
    vec4 _535 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _547 = (_508 + ((((_448.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_535.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _548 = (_509 + ((((_448.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_535.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _551 = fma(_515, _251, fma(_548, _258, _547 * _244));
    float _554 = fma(_515, _252, fma(_548, _259, _547 * _245));
    float _557 = fma(_515, _253, fma(_548, _260, _547 * _246));
    float _561 = inversesqrt(dot(vec3(_551, _554, _557), vec3(_551, _554, _557)));
    vec4 _588 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _282) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _283) + cbTextureTilingScale._m0[11u].w));
    float _590 = _588.x;
    float _591 = 1.0 - _590;
    float _597 = (cbMtdParam._m0[19u].x + dot(vec4(_561 * _551, _561 * _554, _561 * _557, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_590 - _591) * cbMtdParam._m0[24u].z) + _591) * cbMtdParam._m0[21u].z);
    float _4121 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _598 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
    float _600 = (-0.0) - cbMtdParam._m0[24u].x;
    float _602 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _603 = isnan(1.0) ? _602 : (isnan(_602) ? 1.0 : min(_602, 1.0));
    float _610 = _598 - ((_598 * TEXCOORD_8.x) * _603);
    float _611 = _598 - ((_598 * TEXCOORD_8.y) * _603);
    float _612 = _598 - ((_598 * TEXCOORD_8.z) * _603);
    float _619 = (_610 * ((_428.x * cbMtdParam._m0[18u].x) - _407)) + _407;
    float _620 = (_611 * ((_428.y * cbMtdParam._m0[18u].y) - _408)) + _408;
    float _621 = (_612 * ((_428.z * cbMtdParam._m0[18u].z) - _409)) + _409;
    vec4 _633 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _282) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _283) + cbTextureTilingScale._m0[19u].w));
    float _635 = _633.x;
    float _636 = 1.0 - _635;
    float _664 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_635 - _636) * cbMtdParam._m0[24u].w) + _636) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4142 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _665 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
    float _673 = ((((cbMtdParam._m0[10u].x - _619) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _665) + _619;
    float _674 = ((((cbMtdParam._m0[10u].y - _620) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _665) + _620;
    float _675 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _621)) * _665) + _621;
    vec4 _701 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _703 = _701.x;
    float _721 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _282) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _283) + cbTextureTilingScale._m0[9u].w)).x - _703) * _400) + _703;
    float _725 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _721) * cbMtdParam._m0[19u].z) + _721;
    float _727 = _725 - (_725 * _610);
    float _729 = _727 - (_727 * _665);
    float _734 = (((_448.z - _505) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _505;
    float _738 = ((_535.z - _734) * cbMtdParam._m0[19u].w) + _734;
    vec4 _752 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _282) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _283) + cbTextureTilingScale._m0[15u].w));
    float _759 = (_752.x * 2.0) + (-1.0);
    float _760 = (_752.y * 2.0) + (-1.0);
    float _761 = dot(vec2(_759, _760), vec2(_759, _760));
    float _4153 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _769 = ((_752.z - _738) * _610) + _738;
    float _772 = ((cbMtdParam._m0[23u].y - _769) * _665) + _769;
    vec4 _791 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _282) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _283) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _797 = (_791.x * 2.0) + (-1.0);
    float _798 = (_791.y * 2.0) + (-1.0);
    float _799 = dot(vec2(_797, _798), vec2(_797, _798));
    float _4164 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _814 = ((sqrt(1.0 - (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0)))) - _515) * _612) + _515;
    float _817 = (((_759 - _547) * _610) + _547) + (cbMtdParam._m0[21u].x * _547);
    float _818 = (((_760 - _548) * _611) + _548) + (cbMtdParam._m0[21u].x * _548);
    float _829 = (((_797 - _817) + (_817 * cbMtdParam._m0[22u].z)) * _665) + _817;
    float _830 = (((_798 - _818) + (_818 * cbMtdParam._m0[22u].z)) * _665) + _818;
    float _831 = (_665 * (sqrt(1.0 - (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0)))) - _814)) + _814;
    float _833 = cbMtdParam._m0[22u].x + _535.w;
    float _836 = fma(_831, _251, fma(_830, _258, _829 * _244));
    float _839 = fma(_831, _252, fma(_830, _259, _829 * _245));
    float _842 = fma(_831, _253, fma(_830, _260, _829 * _246));
    float _846 = inversesqrt(dot(vec3(_836, _839, _842), vec3(_836, _839, _842)));
    float _847 = _846 * _836;
    float _848 = _846 * _839;
    float _849 = _846 * _842;
    float _4175 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _850 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
    float _4186 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _4197 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _4208 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _4219 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _4230 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _855 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
    float _869 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _909 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _919 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _909);
    float _920 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _909);
    float _921 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _909);
    float _925 = inversesqrt(dot(vec3(_919, _920, _921), vec3(_919, _920, _921)));
    float _926 = _919 * _925;
    float _927 = _920 * _925;
    float _928 = _921 * _925;
    vec4 _933 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _935 = _933.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1107 = sqrt(((_919 * _919) + (_920 * _920)) + (_921 * _921));
        float _1113 = (cbMatDynParam._m0[5u].x * _1107) + cbMatDynParam._m0[5u].y;
        float _4241 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _1118 = (cbMatDynParam._m0[5u].z * _1107) + cbMatDynParam._m0[5u].w;
        float _4252 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) - _1114)) + _1114) < ((_935 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _946 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _947 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _965 = fma(_849, cbSceneParam._m0[5u].z, fma(_848, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _847));
    float _968 = fma(_849, cbSceneParam._m0[6u].z, fma(_848, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _847));
    float _971 = fma(_849, cbSceneParam._m0[7u].z, fma(_848, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _847));
    uint _984 = _263 + 9u;
    uint _985 = _984 + uint(cbMatDynParam._m0[0u].w);
    float _991 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0)))) * cbInstanceData._m0[_985].x;
    float _992 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0)))) * cbInstanceData._m0[_985].y;
    float _993 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0)))) * cbInstanceData._m0[_985].z;
    float _4263 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _994 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
    float _4274 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _995 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
    float _4285 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _996 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
    float _997 = 1.0 - _855;
    float _998 = _994 * _997;
    float _999 = _995 * _997;
    float _1000 = _996 * _997;
    float _1005 = (_994 + (-0.039999999105930328369140625)) * _855;
    float _1006 = (_995 + (-0.039999999105930328369140625)) * _855;
    float _1007 = (_996 + (-0.039999999105930328369140625)) * _855;
    float _1008 = _1005 + 0.039999999105930328369140625;
    float _1010 = _1006 + 0.039999999105930328369140625;
    float _1011 = _1007 + 0.039999999105930328369140625;
    vec4 _1020 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _946, cbSceneParam._m0[86u].y * _947));
    float _1024 = ((isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * TEXCOORD_5.w) * _1020.x;
    float _1025 = dot(vec3(_847, _848, _849), vec3(_926, _927, _928));
    float _1028 = _1025 * 2.0;
    float _1032 = (_1028 * _847) - _926;
    float _1033 = (_1028 * _848) - _927;
    float _1034 = (_1028 * _849) - _928;
    float _1038 = abs(dot(vec3(_926, _927, _928), vec3(_847, _848, _849)));
    float _4296 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _1040 = sqrt(_850);
    float _1053 = exp2((_1040 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1040 * 3.0));
    float _1059 = (1.0 - _1053) * ((_1040 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1060 = _1053 * _1040;
    float _1088 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1092 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1096 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1425;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1150 = fma(_1096, cbModelParam._m0[26u].z, fma(_1092, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1088));
        float _1154 = fma(_1096, cbModelParam._m0[27u].z, fma(_1092, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1088));
        float _1158 = fma(_1096, cbModelParam._m0[28u].z, fma(_1092, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1088));
        float _1183 = _1088 + _847;
        float _1184 = _1092 + _848;
        float _1185 = _1096 + _849;
        float _1195 = fma(_1185, cbModelParam._m0[26u].z, fma(_1184, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1183)) - _1150;
        float _1196 = fma(_1185, cbModelParam._m0[27u].z, fma(_1184, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1183)) - _1154;
        float _1197 = fma(_1185, cbModelParam._m0[28u].z, fma(_1184, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1183)) - _1158;
        float _1201 = inversesqrt(dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197)));
        float _1214 = ((_1201 * _1195) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1150 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1215 = ((_1201 * _1196) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1154 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1216 = ((_1201 * _1197) / cbModelParam._m0[34u].z) + ((((((_1158 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1219 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        float _1253 = exp2((_1219.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1219.x + (-0.5));
        float _1255 = _1253 * (_1219.y + (-0.5));
        float _1256 = _1253 * (_1219.z + (-0.5));
        float _1263 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1264 = _1263 * (_1226.x + (-0.5));
        float _1265 = _1263 * (_1226.y + (-0.5));
        float _1266 = _1263 * (_1226.z + (-0.5));
        float _1273 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1274 = _1273 * (_1233.x + (-0.5));
        float _1275 = _1273 * (_1233.y + (-0.5));
        float _1276 = _1273 * (_1233.z + (-0.5));
        float _1283 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1284 = _1283 * (_1240.x + (-0.5));
        float _1285 = _1283 * (_1240.y + (-0.5));
        float _1286 = _1283 * (_1240.z + (-0.5));
        float _1287 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1288 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1289 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1290 = _1254 * 0.5;
        float _1291 = _1264 * 0.5;
        float _1292 = _1274 * 0.5;
        float _1293 = dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292));
        float _1298 = (_1293 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1293);
        float _1307 = (dot(vec3(_847, _848, _849), vec3(_1298 * _1290, _1298 * _1291, _1298 * _1292)) + 1.0) * 0.5;
        float _4322 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1317 = sqrt(((_1291 * _1291) + (_1290 * _1290)) + (_1292 * _1292)) / (_1287 + 9.9999997473787516355514526367188e-06);
        float _4333 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _1319 = _1318 * 2.0;
        float _1323 = (1.0 - _1318) / (_1318 + 1.0);
        float _4344 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _1333 = ((((1.0 - _1324) * (_1319 + 2.0)) * exp2(log2(isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_1319 + 1.0))) + _1324) * _1287;
        float _1334 = _1255 * 0.5;
        float _1335 = _1265 * 0.5;
        float _1336 = _1275 * 0.5;
        float _1337 = dot(vec3(_1334, _1335, _1336), vec3(_1334, _1335, _1336));
        float _1342 = (_1337 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1337);
        float _1350 = (dot(vec3(_847, _848, _849), vec3(_1342 * _1334, _1342 * _1335, _1342 * _1336)) + 1.0) * 0.5;
        float _4355 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1359 = sqrt(((_1335 * _1335) + (_1334 * _1334)) + (_1336 * _1336)) / (_1288 + 9.9999997473787516355514526367188e-06);
        float _4366 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _1361 = _1360 * 2.0;
        float _1365 = (1.0 - _1360) / (_1360 + 1.0);
        float _4377 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _1375 = ((((1.0 - _1366) * (_1361 + 2.0)) * exp2(log2(isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (_1361 + 1.0))) + _1366) * _1288;
        float _1376 = _1256 * 0.5;
        float _1377 = _1266 * 0.5;
        float _1378 = _1276 * 0.5;
        float _1379 = dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378));
        float _1384 = (_1379 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1379);
        float _1392 = (dot(vec3(_847, _848, _849), vec3(_1384 * _1376, _1384 * _1377, _1384 * _1378)) + 1.0) * 0.5;
        float _4388 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1401 = sqrt(((_1377 * _1377) + (_1376 * _1376)) + (_1378 * _1378)) / (_1289 + 9.9999997473787516355514526367188e-06);
        float _4399 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _1403 = _1402 * 2.0;
        float _1407 = (1.0 - _1402) / (_1402 + 1.0);
        float _4410 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _1417 = ((((1.0 - _1408) * (_1403 + 2.0)) * exp2(log2(isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_1403 + 1.0))) + _1408) * _1289;
        _1425 = _1256;
        _1427 = _1255;
        _1428 = _1254;
        _1429 = _1266;
        _1430 = _1265;
        _1431 = _1264;
        _1432 = _1276;
        _1433 = _1275;
        _1434 = _1274;
        _1435 = _1289;
        _1436 = _1288;
        _1437 = _1287;
        _1438 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)));
        _1439 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)));
        _1440 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)));
    }
    else
    {
        _1425 = _1426;
        _1427 = _1426;
        _1428 = _1426;
        _1429 = _1426;
        _1430 = _1426;
        _1431 = _1426;
        _1432 = _1426;
        _1433 = _1426;
        _1434 = _1426;
        _1435 = _1426;
        _1436 = _1426;
        _1437 = _1426;
        _1438 = 0.0;
        _1439 = 0.0;
        _1440 = 0.0;
    }
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1468 = fma(_1096, cbModelParam._m0[30u].z, fma(_1092, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1088));
        float _1472 = fma(_1096, cbModelParam._m0[31u].z, fma(_1092, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1088));
        float _1476 = fma(_1096, cbModelParam._m0[32u].z, fma(_1092, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1088));
        float _1499 = _1088 + _847;
        float _1500 = _1092 + _848;
        float _1501 = _1096 + _849;
        float _1511 = fma(_1501, cbModelParam._m0[30u].z, fma(_1500, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1499)) - _1468;
        float _1512 = fma(_1501, cbModelParam._m0[31u].z, fma(_1500, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1499)) - _1472;
        float _1513 = fma(_1501, cbModelParam._m0[32u].z, fma(_1500, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1499)) - _1476;
        float _1517 = inversesqrt(dot(vec3(_1511, _1512, _1513), vec3(_1511, _1512, _1513)));
        float _1530 = ((_1517 * _1511) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1468 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1531 = ((_1517 * _1512) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1472 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1532 = ((_1517 * _1513) / cbModelParam._m0[35u].z) + ((((((_1476 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1534 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1530, _1531, _1532), 0.0);
        vec4 _1541 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1530, _1531, _1532), 0.0);
        vec4 _1548 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1530, _1531, _1532), 0.0);
        vec4 _1555 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1530, _1531, _1532), 0.0);
        float _1567 = exp2((_1534.w + (-0.5)) * 20.0) * 2.0;
        float _1568 = _1567 * (_1534.x + (-0.5));
        float _1569 = _1567 * (_1534.y + (-0.5));
        float _1570 = _1567 * (_1534.z + (-0.5));
        float _1577 = exp2((_1541.w + (-0.5)) * 20.0) * 2.0;
        float _1578 = _1577 * (_1541.x + (-0.5));
        float _1579 = _1577 * (_1541.y + (-0.5));
        float _1580 = _1577 * (_1541.z + (-0.5));
        float _1587 = exp2((_1548.w + (-0.5)) * 20.0) * 2.0;
        float _1588 = _1587 * (_1548.x + (-0.5));
        float _1589 = _1587 * (_1548.y + (-0.5));
        float _1590 = _1587 * (_1548.z + (-0.5));
        float _1597 = exp2((_1555.w + (-0.5)) * 20.0) * 2.0;
        float _1598 = _1597 * (_1555.x + (-0.5));
        float _1599 = _1597 * (_1555.y + (-0.5));
        float _1600 = _1597 * (_1555.z + (-0.5));
        float _1601 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1602 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1603 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1604 = _1568 * 0.5;
        float _1605 = _1578 * 0.5;
        float _1606 = _1588 * 0.5;
        float _1607 = dot(vec3(_1604, _1605, _1606), vec3(_1604, _1605, _1606));
        float _1612 = (_1607 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1607);
        float _1620 = (dot(vec3(_847, _848, _849), vec3(_1612 * _1604, _1612 * _1605, _1612 * _1606)) + 1.0) * 0.5;
        float _4451 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1629 = sqrt(((_1605 * _1605) + (_1604 * _1604)) + (_1606 * _1606)) / (_1601 + 9.9999997473787516355514526367188e-06);
        float _4462 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _1631 = _1630 * 2.0;
        float _1635 = (1.0 - _1630) / (_1630 + 1.0);
        float _4473 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1636 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
        float _1645 = ((((1.0 - _1636) * (_1631 + 2.0)) * exp2(log2(isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (_1631 + 1.0))) + _1636) * _1601;
        float _1646 = _1569 * 0.5;
        float _1647 = _1579 * 0.5;
        float _1648 = _1589 * 0.5;
        float _1649 = dot(vec3(_1646, _1647, _1648), vec3(_1646, _1647, _1648));
        float _1654 = (_1649 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1649);
        float _1662 = (dot(vec3(_847, _848, _849), vec3(_1654 * _1646, _1654 * _1647, _1654 * _1648)) + 1.0) * 0.5;
        float _4484 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1671 = sqrt(((_1647 * _1647) + (_1646 * _1646)) + (_1648 * _1648)) / (_1602 + 9.9999997473787516355514526367188e-06);
        float _4495 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1672 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
        float _1673 = _1672 * 2.0;
        float _1677 = (1.0 - _1672) / (_1672 + 1.0);
        float _4506 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1678 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _1687 = ((((1.0 - _1678) * (_1673 + 2.0)) * exp2(log2(isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (_1673 + 1.0))) + _1678) * _1602;
        float _1688 = _1570 * 0.5;
        float _1689 = _1580 * 0.5;
        float _1690 = _1590 * 0.5;
        float _1691 = dot(vec3(_1688, _1689, _1690), vec3(_1688, _1689, _1690));
        float _1696 = (_1691 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1691);
        float _1704 = (dot(vec3(_847, _848, _849), vec3(_1696 * _1688, _1696 * _1689, _1696 * _1690)) + 1.0) * 0.5;
        float _4517 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1713 = sqrt(((_1689 * _1689) + (_1688 * _1688)) + (_1690 * _1690)) / (_1603 + 9.9999997473787516355514526367188e-06);
        float _4528 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1714 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
        float _1715 = _1714 * 2.0;
        float _1719 = (1.0 - _1714) / (_1714 + 1.0);
        float _4539 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1720 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
        float _1729 = ((((1.0 - _1720) * (_1715 + 2.0)) * exp2(log2(isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * (_1715 + 1.0))) + _1720) * _1603;
        _1737 = _1570;
        _1738 = _1569;
        _1739 = _1568;
        _1740 = _1580;
        _1741 = _1579;
        _1742 = _1578;
        _1743 = _1590;
        _1744 = _1589;
        _1745 = _1588;
        _1746 = _1603;
        _1747 = _1602;
        _1748 = _1601;
        _1749 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)));
        _1750 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)));
        _1751 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0)));
    }
    else
    {
        _1737 = _1426;
        _1738 = _1426;
        _1739 = _1426;
        _1740 = _1426;
        _1741 = _1426;
        _1742 = _1426;
        _1743 = _1426;
        _1744 = _1426;
        _1745 = _1426;
        _1746 = _1426;
        _1747 = _1426;
        _1748 = _1426;
        _1749 = 0.0;
        _1750 = 0.0;
        _1751 = 0.0;
    }
    float _1761 = (cbModelParam._m0[1u].x * (_1749 - _1438)) + _1438;
    float _1762 = (cbModelParam._m0[1u].x * (_1750 - _1439)) + _1439;
    float _1763 = (cbModelParam._m0[1u].x * (_1751 - _1440)) + _1440;
    float _1784 = fma(_1763, cbSceneParam._m0[89u].z, fma(_1762, cbSceneParam._m0[89u].y, _1761 * cbSceneParam._m0[89u].x));
    float _1787 = fma(_1763, cbSceneParam._m0[90u].z, fma(_1762, cbSceneParam._m0[90u].y, _1761 * cbSceneParam._m0[90u].x));
    float _1790 = fma(_1763, cbSceneParam._m0[91u].z, fma(_1762, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1761));
    float _1805 = _1032 * 0.5;
    float _1806 = _1033 * 0.5;
    float _1807 = _1034 * 0.5;
    float _1808 = dot(vec4(_1805, _1806, _1807, 1.0), vec4(_1739, _1742, _1745, _1748));
    float _1811 = dot(vec4(_1805, _1806, _1807, 1.0), vec4(_1738, _1741, _1744, _1747));
    float _1814 = dot(vec4(_1805, _1806, _1807, 1.0), vec4(_1737, _1740, _1743, _1746));
    float _1848;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1821 = dot(vec4(_1805, _1806, _1807, 1.0), vec4(_1425, _1429, _1432, _1435));
        float _1825 = dot(vec4(_1805, _1806, _1807, 1.0), vec4(_1427, _1430, _1433, _1436));
        float _1829 = dot(vec4(_1805, _1806, _1807, 1.0), vec4(_1428, _1431, _1434, _1437));
        float _1836 = dot(vec4(cbModelParam._m0[39u]), vec4(_1805, _1806, _1807, 1.0));
        _1848 = dot(vec3(isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0)), isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0)), isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1836) ? 0.0 : (isnan(0.0) ? _1836 : max(0.0, _1836))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1848 = 1.0;
    }
    float _1859;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1850 = dot(vec4(cbModelParam._m0[40u]), vec4(_1805, _1806, _1807, 1.0));
        _1859 = dot(vec3(isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0)), isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0)), isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1850) ? 0.0 : (isnan(0.0) ? _1850 : max(0.0, _1850))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1859 = 1.0;
    }
    float _1863 = (_1859 * cbModelParam._m0[1u].x) + (_1848 * (1.0 - cbModelParam._m0[1u].x));
    float _1873 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _850);
    float _1874 = isnan(_1873) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1873 : min(cbModelParam._m0[25u].z, _1873));
    float _1954;
    float _1956;
    float _1958;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1921 = fma(_1096, cbModelParam._m0[13u].z, fma(_1092, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1088)) + cbModelParam._m0[13u].w;
        float _1925 = fma(_1096, cbModelParam._m0[14u].z, fma(_1092, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1088)) + cbModelParam._m0[14u].w;
        float _1929 = fma(_1096, cbModelParam._m0[15u].z, fma(_1092, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1088)) + cbModelParam._m0[15u].w;
        float _1932 = fma(_1034, cbModelParam._m0[13u].z, fma(_1033, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1032));
        float _1935 = fma(_1034, cbModelParam._m0[14u].z, fma(_1033, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1032));
        float _1938 = fma(_1034, cbModelParam._m0[15u].z, fma(_1033, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1032));
        float _1966;
        if (_1932 > 0.0)
        {
            _1966 = abs((1.0 - _1921) / _1932);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1932 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1921 + 1.0) / _1932);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1966 = frontier_phi_17_15_ladder;
        }
        float _2137;
        if (_1935 > 0.0)
        {
            _2137 = abs((1.0 - _1925) / _1935);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1935 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1925 + 1.0) / _1935);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2137 = frontier_phi_26_22_ladder;
        }
        float _2432;
        if (_1938 > 0.0)
        {
            _2432 = abs((1.0 - _1929) / _1938);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1938 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1929 + 1.0) / _1938);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2432 = frontier_phi_38_33_ladder;
        }
        float _2434 = isnan(_2137) ? _1966 : (isnan(_1966) ? _2137 : min(_1966, _2137));
        float _2435 = isnan(_2432) ? _2434 : (isnan(_2434) ? _2432 : min(_2434, _2432));
        float _2439 = (_2435 * _1932) + _1921;
        float _2440 = (_2435 * _1935) + _1925;
        float _2441 = (_2435 * _1938) + _1929;
        float _2442 = _2435 * 9.9999997473787516355514526367188e-05;
        float _2444 = (-1.0) - _2442;
        float _2446 = _2442 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2441 > _2446) || ((_2441 < _2444) || ((_2440 > _2446) || ((_2440 < _2444) || ((_2439 < _2444) || (_2439 > _2446))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2586 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2441, cbModelParam._m0[9u].z, fma(_2440, cbModelParam._m0[9u].y, _2439 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2441, cbModelParam._m0[10u].z, fma(_2440, cbModelParam._m0[10u].y, _2439 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2441, cbModelParam._m0[11u].z, fma(_2440, cbModelParam._m0[11u].y, _2439 * cbModelParam._m0[11u].x))), _1874);
            frontier_phi_16_38_ladder = _2586.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2586.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2586.x * cbModelParam._m0[1u].y;
        }
        _1954 = frontier_phi_16_38_ladder_2;
        _1956 = frontier_phi_16_38_ladder_1;
        _1958 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1942 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1032, _1033, _1034), _1874);
        _1954 = _1942.x * cbModelParam._m0[1u].y;
        _1956 = _1942.y * cbModelParam._m0[1u].y;
        _1958 = _1942.z * cbModelParam._m0[1u].y;
    }
    float _1962 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _850);
    float _1963 = isnan(_1962) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1962 : min(cbModelParam._m0[25u].w, _1962));
    float _2052;
    float _2054;
    float _2056;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2016 = fma(_1096, cbModelParam._m0[21u].z, fma(_1092, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1088)) + cbModelParam._m0[21u].w;
        float _2020 = fma(_1096, cbModelParam._m0[22u].z, fma(_1092, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1088)) + cbModelParam._m0[22u].w;
        float _2024 = fma(_1096, cbModelParam._m0[23u].z, fma(_1092, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1088)) + cbModelParam._m0[23u].w;
        float _2027 = fma(_1034, cbModelParam._m0[21u].z, fma(_1033, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1032));
        float _2030 = fma(_1034, cbModelParam._m0[22u].z, fma(_1033, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1032));
        float _2033 = fma(_1034, cbModelParam._m0[23u].z, fma(_1033, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1032));
        float _2142;
        if (_2027 > 0.0)
        {
            _2142 = abs((1.0 - _2016) / _2027);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2027 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2016 + 1.0) / _2027);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2142 = frontier_phi_28_24_ladder;
        }
        float _2459;
        if (_2030 > 0.0)
        {
            _2459 = abs((1.0 - _2020) / _2030);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2030 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2020 + 1.0) / _2030);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2459 = frontier_phi_40_35_ladder;
        }
        float _2797;
        if (_2033 > 0.0)
        {
            _2797 = abs((1.0 - _2024) / _2033);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2033 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2024 + 1.0) / _2033);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2797 = frontier_phi_50_47_ladder;
        }
        float _2799 = isnan(_2459) ? _2142 : (isnan(_2142) ? _2459 : min(_2142, _2459));
        float _2800 = isnan(_2797) ? _2799 : (isnan(_2799) ? _2797 : min(_2799, _2797));
        float _2804 = (_2800 * _2027) + _2016;
        float _2805 = (_2800 * _2030) + _2020;
        float _2806 = (_2800 * _2033) + _2024;
        float _2807 = _2800 * 9.9999997473787516355514526367188e-05;
        float _2808 = (-1.0) - _2807;
        float _2810 = _2807 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2806 > _2810) || ((_2806 < _2808) || ((_2805 > _2810) || ((_2805 < _2808) || ((_2804 < _2808) || (_2804 > _2810))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2928 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2806, cbModelParam._m0[17u].z, fma(_2805, cbModelParam._m0[17u].y, _2804 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2806, cbModelParam._m0[18u].z, fma(_2805, cbModelParam._m0[18u].y, _2804 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2806, cbModelParam._m0[19u].z, fma(_2805, cbModelParam._m0[19u].y, _2804 * cbModelParam._m0[19u].x))), _1963);
            frontier_phi_25_50_ladder = _2928.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2928.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2928.x * cbModelParam._m0[1u].z;
        }
        _2052 = frontier_phi_25_50_ladder_2;
        _2054 = frontier_phi_25_50_ladder_1;
        _2056 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2036 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1032, _1033, _1034), _1963);
        _2052 = _2036.x * cbModelParam._m0[1u].z;
        _2054 = _2036.y * cbModelParam._m0[1u].z;
        _2056 = _2036.z * cbModelParam._m0[1u].z;
    }
    float _2069 = (((_1059 * _1008) + _1060) * _1024) * ((cbModelParam._m0[1u].w * (_2052 - _1954)) + _1954);
    float _2071 = (((_1059 * _1010) + _1060) * _1024) * ((cbModelParam._m0[1u].w * (_2054 - _1956)) + _1956);
    float _2073 = (((_1059 * _1011) + _1060) * _1024) * ((cbModelParam._m0[1u].w * (_2056 - _1958)) + _1958);
    float _2076 = fma(_2073, cbSceneParam._m0[89u].z, fma(_2071, cbSceneParam._m0[89u].y, _2069 * cbSceneParam._m0[89u].x));
    float _2079 = fma(_2073, cbSceneParam._m0[90u].z, fma(_2071, cbSceneParam._m0[90u].y, _2069 * cbSceneParam._m0[90u].x));
    float _2082 = fma(_2073, cbSceneParam._m0[91u].z, fma(_2071, cbSceneParam._m0[91u].y, _2069 * cbSceneParam._m0[91u].x));
    float _2116 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2120 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2124 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2128 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2129 = _2116 / _2128;
    float _2130 = _2120 / _2128;
    float _2131 = _2124 / _2128;
    float _2278;
    float _2279;
    float _2280;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2158 = ((uint(_2131 > cbSceneParam._m0[59u].y) + uint(_2131 > cbSceneParam._m0[59u].x)) + uint(_2131 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2159 = _2158 + 43u;
        uint _2167 = _2158 + 44u;
        uint _2175 = _2158 + 45u;
        uint _2183 = _2158 + 46u;
        float _2194 = fma(_2128, cbSceneParam._m0[_2159].w, fma(_2124, cbSceneParam._m0[_2159].z, fma(_2120, cbSceneParam._m0[_2159].y, _2116 * cbSceneParam._m0[_2159].x)));
        float _2198 = fma(_2128, cbSceneParam._m0[_2167].w, fma(_2124, cbSceneParam._m0[_2167].z, fma(_2120, cbSceneParam._m0[_2167].y, _2116 * cbSceneParam._m0[_2167].x)));
        float _2206 = fma(_2128, cbSceneParam._m0[_2183].w, fma(_2124, cbSceneParam._m0[_2183].z, fma(_2120, cbSceneParam._m0[_2183].y, _2116 * cbSceneParam._m0[_2183].x)));
        float _2211 = cbSceneParam._m0[33u].z * _2206;
        float _2213 = cbSceneParam._m0[33u].w * _2206;
        float _2216 = fma(_2128, cbSceneParam._m0[_2175].w, fma(_2124, cbSceneParam._m0[_2175].z, fma(_2120, cbSceneParam._m0[_2175].y, _2116 * cbSceneParam._m0[_2175].x))) / _2206;
        float _2264 = (cbSceneParam._m0[33u].x - sqrt(((_2130 * _2130) + (_2129 * _2129)) + (_2131 * _2131))) * cbSceneParam._m0[33u].y;
        float _4665 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
        float _2271 = (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2211 + _2194) / _2206, (_2213 + _2198) / _2206), _2216), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2213 + _2194) / _2206, (_2198 - _2211) / _2206), _2216), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2194 - _2211) / _2206, (_2198 - _2213) / _2206), _2216), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2194 - _2213) / _2206, (_2211 + _2198) / _2206), _2216), 0.0)).x), vec4(0.25)));
        _2278 = 1.0 - (_2271 * cbSceneParam._m0[34u].x);
        _2279 = 1.0 - (_2271 * cbSceneParam._m0[34u].y);
        _2280 = 1.0 - (_2271 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2278 = 1.0;
        _2279 = 1.0;
        _2280 = 1.0;
    }
    float _2344;
    float _2346;
    float _2348;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2332 = fma(_2128, cbSceneParam._m0[63u].w, fma(_2124, cbSceneParam._m0[63u].z, fma(_2120, cbSceneParam._m0[63u].y, _2116 * cbSceneParam._m0[63u].x)));
        float _2333 = fma(_2128, cbSceneParam._m0[60u].w, fma(_2124, cbSceneParam._m0[60u].z, fma(_2120, cbSceneParam._m0[60u].y, _2116 * cbSceneParam._m0[60u].x))) / _2332;
        float _2334 = fma(_2128, cbSceneParam._m0[61u].w, fma(_2124, cbSceneParam._m0[61u].z, fma(_2120, cbSceneParam._m0[61u].y, _2116 * cbSceneParam._m0[61u].x))) / _2332;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2333 >= cbSceneParam._m0[64u].x) && (_2334 >= cbSceneParam._m0[64u].y)) && (_2333 <= cbSceneParam._m0[64u].z)) && (_2334 <= cbSceneParam._m0[64u].w))
        {
            float _2472 = fma(_2128, cbSceneParam._m0[62u].w, fma(_2124, cbSceneParam._m0[62u].z, fma(_2120, cbSceneParam._m0[62u].y, _2116 * cbSceneParam._m0[62u].x))) / _2332;
            float _2476 = isnan(cbSceneParam._m0[41u].w) ? _2472 : (isnan(_2472) ? cbSceneParam._m0[41u].w : max(_2472, cbSceneParam._m0[41u].w));
            float _2519 = (cbSceneParam._m0[33u].x - sqrt(((_2130 * _2130) + (_2129 * _2129)) + (_2131 * _2131))) * cbSceneParam._m0[33u].y;
            float _4681 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
            float _2526 = (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2333, cbSceneParam._m0[33u].w + _2334), _2476), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2333, _2334 - cbSceneParam._m0[33u].z), _2476), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2333 - cbSceneParam._m0[33u].z, _2334 - cbSceneParam._m0[33u].w), _2476), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2333 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2334), _2476), 0.0)).x), vec4(0.25)));
            float _2530 = 1.0 - (_2526 * cbSceneParam._m0[34u].x);
            float _2531 = 1.0 - (_2526 * cbSceneParam._m0[34u].y);
            float _2532 = 1.0 - (_2526 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2532) ? _2280 : (isnan(_2280) ? _2532 : min(_2280, _2532));
            frontier_phi_37_36_ladder_1 = isnan(_2531) ? _2279 : (isnan(_2279) ? _2531 : min(_2279, _2531));
            frontier_phi_37_36_ladder_2 = isnan(_2530) ? _2278 : (isnan(_2278) ? _2530 : min(_2278, _2530));
        }
        else
        {
            frontier_phi_37_36_ladder = _2280;
            frontier_phi_37_36_ladder_1 = _2279;
            frontier_phi_37_36_ladder_2 = _2278;
        }
        _2344 = frontier_phi_37_36_ladder_2;
        _2346 = frontier_phi_37_36_ladder_1;
        _2348 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2344 = _2278;
        _2346 = _2279;
        _2348 = _2280;
    }
    uvec4 _2353 = floatBitsToUint(cbInstanceData._m0[_263 + 5u]);
    uint _2355 = _2353.x * 14u;
    uint _2356 = _2355 + 13u;
    float _2363 = _1024 + (-1.0);
    float _2368 = (cbLight._m0[_2356].x * _2363) + 1.0;
    float _2369 = (cbLight._m0[_2356].y * _2363) + 1.0;
    float _2370 = (cbLight._m0[_2356].z * _2363) + 1.0;
    float _2371 = (cbLight._m0[_2356].w * _2363) + 1.0;
    uint _2372 = _2355 + 5u;
    float _2378 = isnan(1.0) ? _2369 : (isnan(_2369) ? 1.0 : min(_2369, 1.0));
    uint _2382 = _2355 + 4u;
    float _2391 = isnan(1.0) ? _2368 : (isnan(_2368) ? 1.0 : min(_2368, 1.0));
    uint _2395 = _2355 | 1u;
    float _2406 = dot(vec3(cbLight._m0[_2355].xyz), vec3(_847, _848, _849));
    float _2409 = dot(vec3(cbLight._m0[_2395].xyz), vec3(_847, _848, _849));
    float _4717 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _4728 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
    float _2414 = (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0))) * 0.3183098733425140380859375;
    float _2416 = (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0))) * 0.3183098733425140380859375;
    float _2423 = ((cbLight._m0[_2372].x * _2378) * _2416) + (((cbLight._m0[_2382].x * _2344) * _2391) * _2414);
    float _2424 = ((_2378 * cbLight._m0[_2372].y) * _2416) + (((cbLight._m0[_2382].y * _2346) * _2391) * _2414);
    float _2425 = ((_2378 * cbLight._m0[_2372].z) * _2416) + (((cbLight._m0[_2382].z * _2348) * _2391) * _2414);
    uvec4 _2429 = floatBitsToUint(cbLight._m0[_2355 + 12u]);
    bool _2431 = _2429.x == 0u;
    float _2533;
    float _2535;
    float _2537;
    if (_2431)
    {
        _2533 = _2423;
        _2535 = _2424;
        _2537 = _2425;
    }
    else
    {
        uint _2541 = _2355 + 6u;
        float _2557 = (dot(vec3(cbLight._m0[_2355 + 2u].xyz), vec3(_847, _848, _849)) * 0.5) + 0.5;
        float _2558 = _2557 * _2557;
        float _4739 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2559 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
        float _2560 = isnan(1.0) ? _2370 : (isnan(_2370) ? 1.0 : min(_2370, 1.0));
        _2533 = (((cbLight._m0[_2541].x * 0.3183098733425140380859375) * _2559) * _2560) + _2423;
        _2535 = (((cbLight._m0[_2541].y * 0.3183098733425140380859375) * _2559) * _2560) + _2424;
        _2537 = (((cbLight._m0[_2541].z * 0.3183098733425140380859375) * _2559) * _2560) + _2425;
    }
    bool _2540 = _2429.y == 0u;
    float _2595;
    float _2597;
    float _2599;
    if (_2540)
    {
        _2595 = _2533;
        _2597 = _2535;
        _2599 = _2537;
    }
    else
    {
        uint _2768 = _2355 + 7u;
        float _2784 = (dot(vec3(cbLight._m0[_2355 + 3u].xyz), vec3(_847, _848, _849)) * 0.5) + 0.5;
        float _2785 = _2784 * _2784;
        float _4755 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
        float _2786 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
        float _2787 = isnan(1.0) ? _2371 : (isnan(_2371) ? 1.0 : min(_2371, 1.0));
        _2595 = (((cbLight._m0[_2768].x * 0.3183098733425140380859375) * _2786) * _2787) + _2533;
        _2597 = (((cbLight._m0[_2768].y * 0.3183098733425140380859375) * _2786) * _2787) + _2535;
        _2599 = (((cbLight._m0[_2768].z * 0.3183098733425140380859375) * _2786) * _2787) + _2537;
    }
    uint _2602 = _2355 + 8u;
    float _2615 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2355].w)) * _850) * 0.949999988079071044921875);
    float _2616 = _2615 * _2615;
    float _2617 = cbLight._m0[_2355].x + _926;
    float _2618 = cbLight._m0[_2355].y + _927;
    float _2619 = cbLight._m0[_2355].z + _928;
    float _2623 = inversesqrt(dot(vec3(_2617, _2618, _2619), vec3(_2617, _2618, _2619)));
    float _2624 = _2623 * _2617;
    float _2625 = _2623 * _2618;
    float _2626 = _2623 * _2619;
    float _2627 = dot(vec3(_847, _848, _849), vec3(cbLight._m0[_2355].xyz));
    float _4771 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
    float _2630 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
    float _4782 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    float _2631 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
    float _2632 = dot(vec3(_847, _848, _849), vec3(_2624, _2625, _2626));
    float _4793 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
    float _2635 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
    float _2636 = dot(vec3(cbLight._m0[_2355].xyz), vec3(_2624, _2625, _2626));
    float _4804 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
    float _2640 = _2616 * _2616;
    float _2644 = ((_2635 * _2635) * (_2640 + (-1.0))) + 1.0;
    float _2652 = exp2(log2(1.0 - (isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0)))) * 5.0);
    float _2653 = 0.959999978542327880859375 - _1005;
    float _2655 = 0.959999978542327880859375 - _1006;
    float _2656 = 0.959999978542327880859375 - _1007;
    float _2663 = 1.0 - _2616;
    float _2674 = (0.5 / (((_2631 * ((_2630 * _2663) + _2616)) + 9.9999999392252902907785028219223e-09) + (((_2631 * _2663) + _2616) * _2630))) * _2630;
    float _4815 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
    float _2676 = (isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0))) * (_2640 / ((_2644 * _2644) * 3.141590118408203125));
    uint _2690 = _2355 + 9u;
    float _2701 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2395].w)) * _850) * 0.949999988079071044921875);
    float _2702 = _2701 * _2701;
    float _2703 = cbLight._m0[_2395].x + _926;
    float _2704 = cbLight._m0[_2395].y + _927;
    float _2705 = cbLight._m0[_2395].z + _928;
    float _2709 = inversesqrt(dot(vec3(_2703, _2704, _2705), vec3(_2703, _2704, _2705)));
    float _2710 = _2709 * _2703;
    float _2711 = _2709 * _2704;
    float _2712 = _2709 * _2705;
    float _2713 = dot(vec3(_847, _848, _849), vec3(cbLight._m0[_2395].xyz));
    float _4826 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
    float _2716 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
    float _2717 = dot(vec3(_847, _848, _849), vec3(_2710, _2711, _2712));
    float _4837 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
    float _2720 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
    float _2721 = dot(vec3(cbLight._m0[_2395].xyz), vec3(_2710, _2711, _2712));
    float _4848 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
    float _2725 = _2702 * _2702;
    float _2729 = ((_2720 * _2720) * (_2725 + (-1.0))) + 1.0;
    float _2736 = exp2(log2(1.0 - (isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0)))) * 5.0);
    float _2743 = 1.0 - _2702;
    float _2753 = (0.5 / (((_2631 * ((_2716 * _2743) + _2702)) + 9.9999999392252902907785028219223e-09) + (((_2631 * _2743) + _2702) * _2716))) * _2716;
    float _4859 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
    float _2755 = (isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0))) * (_2725 / ((_2729 * _2729) * 3.141590118408203125));
    float _2765 = (((((_2736 * _2653) + _1008) * cbLight._m0[_2690].x) * _2755) * _2378) + ((((cbLight._m0[_2602].x * _2344) * ((_2652 * _2653) + _1008)) * _2676) * _2391);
    float _2766 = (((((_2736 * _2655) + _1010) * cbLight._m0[_2690].y) * _2755) * _2378) + ((((cbLight._m0[_2602].y * _2346) * ((_2652 * _2655) + _1010)) * _2676) * _2391);
    float _2767 = (((((_2736 * _2656) + _1011) * cbLight._m0[_2690].z) * _2755) * _2378) + ((((cbLight._m0[_2602].z * _2348) * ((_2652 * _2656) + _1011)) * _2676) * _2391);
    float _2823;
    float _2825;
    float _2827;
    if (_2431)
    {
        _2823 = _2765;
        _2825 = _2766;
        _2827 = _2767;
    }
    else
    {
        uint _2829 = _2355 + 2u;
        uint _2833 = _2355 + 10u;
        float _2847 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2829].w)) * _850) * 0.949999988079071044921875);
        float _2848 = _2847 * _2847;
        float _2849 = cbLight._m0[_2829].x + _926;
        float _2850 = cbLight._m0[_2829].y + _927;
        float _2851 = cbLight._m0[_2829].z + _928;
        float _2855 = inversesqrt(dot(vec3(_2849, _2850, _2851), vec3(_2849, _2850, _2851)));
        float _2856 = _2855 * _2849;
        float _2857 = _2855 * _2850;
        float _2858 = _2855 * _2851;
        float _2859 = dot(vec3(_847, _848, _849), vec3(cbLight._m0[_2829].xyz));
        float _4870 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
        float _2862 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
        float _2863 = dot(vec3(_847, _848, _849), vec3(_2856, _2857, _2858));
        float _4881 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
        float _2866 = isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0));
        float _2867 = dot(vec3(cbLight._m0[_2829].xyz), vec3(_2856, _2857, _2858));
        float _4892 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
        float _2871 = _2848 * _2848;
        float _2875 = ((_2866 * _2866) * (_2871 + (-1.0))) + 1.0;
        float _2882 = exp2(log2(1.0 - (isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0)))) * 5.0);
        float _2889 = 1.0 - _2848;
        float _2899 = (0.5 / (((_2631 * ((_2862 * _2889) + _2848)) + 9.9999999392252902907785028219223e-09) + (((_2631 * _2889) + _2848) * _2862))) * _2862;
        float _4903 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
        float _2901 = (isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0))) * (_2871 / ((_2875 * _2875) * 3.141590118408203125));
        float _2902 = isnan(1.0) ? _2370 : (isnan(_2370) ? 1.0 : min(_2370, 1.0));
        _2823 = (((((_2882 * _2653) + _1008) * cbLight._m0[_2833].x) * _2901) * _2902) + _2765;
        _2825 = (((((_2882 * _2655) + _1010) * cbLight._m0[_2833].y) * _2901) * _2902) + _2766;
        _2827 = (((((_2882 * _2656) + _1011) * cbLight._m0[_2833].z) * _2901) * _2902) + _2767;
    }
    float _2933;
    float _2935;
    float _2937;
    if (_2540)
    {
        _2933 = _2823;
        _2935 = _2825;
        _2937 = _2827;
    }
    else
    {
        uint _2944 = _2355 + 3u;
        uint _2948 = _2355 + 11u;
        float _2962 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2944].w)) * _850) * 0.949999988079071044921875);
        float _2963 = _2962 * _2962;
        float _2964 = cbLight._m0[_2944].x + _926;
        float _2965 = cbLight._m0[_2944].y + _927;
        float _2966 = cbLight._m0[_2944].z + _928;
        float _2970 = inversesqrt(dot(vec3(_2964, _2965, _2966), vec3(_2964, _2965, _2966)));
        float _2971 = _2970 * _2964;
        float _2972 = _2970 * _2965;
        float _2973 = _2970 * _2966;
        float _2974 = dot(vec3(_847, _848, _849), vec3(cbLight._m0[_2944].xyz));
        float _4919 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
        float _2977 = isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0));
        float _2978 = dot(vec3(_847, _848, _849), vec3(_2971, _2972, _2973));
        float _4930 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
        float _2981 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
        float _2982 = dot(vec3(cbLight._m0[_2944].xyz), vec3(_2971, _2972, _2973));
        float _4941 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
        float _2986 = _2963 * _2963;
        float _2990 = ((_2981 * _2981) * (_2986 + (-1.0))) + 1.0;
        float _2997 = exp2(log2(1.0 - (isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0)))) * 5.0);
        float _3004 = 1.0 - _2963;
        float _3014 = (0.5 / (((_2631 * ((_2977 * _3004) + _2963)) + 9.9999999392252902907785028219223e-09) + (((_2631 * _3004) + _2963) * _2977))) * _2977;
        float _4952 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
        float _3016 = (isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0))) * (_2986 / ((_2990 * _2990) * 3.141590118408203125));
        float _3017 = isnan(1.0) ? _2371 : (isnan(_2371) ? 1.0 : min(_2371, 1.0));
        _2933 = (((((_2997 * _2653) + _1008) * cbLight._m0[_2948].x) * _3016) * _3017) + _2823;
        _2935 = (((((_2997 * _2655) + _1010) * cbLight._m0[_2948].y) * _3016) * _3017) + _2825;
        _2937 = (((((_2997 * _2656) + _1011) * cbLight._m0[_2948].z) * _3016) * _3017) + _2827;
    }
    float _3083;
    float _3085;
    float _3087;
    float _3089;
    float _3091;
    float _3093;
    if (_2353.y == 0u)
    {
        uvec4 _3038 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3039 = _3038.x;
        uint _3050 = uint((float(_3038.y) * floor(float(uint(cbSceneParam._m0[85u].y * _947) / _3039))) + floor(float(uint(cbSceneParam._m0[85u].x * _946) / _3039)));
        float _3060 = (log2(_2131 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3061 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
        uint _3064 = uint(isnan(14.0) ? _3061 : (isnan(_3061) ? 14.0 : min(_3061, 14.0)));
        uvec4 _3069 = texelFetch(g_lightClusterGridBuffer, int(((_3064 << 2u) + (_3050 << 6u)) >> 2u));
        uint _3070 = _3069.x;
        uint _3071 = _3038.z;
        float _3150;
        float _3152;
        float _3154;
        float _3156;
        float _3158;
        float _3160;
        if (((((1u << ((_3071 >> 4u) & 15u)) + 4294967295u) & _3070) == 0u) || ((_3071 & 240u) == 0u))
        {
            _3150 = 0.0;
            _3152 = 0.0;
            _3154 = 0.0;
            _3156 = 0.0;
            _3158 = 0.0;
            _3160 = 0.0;
        }
        else
        {
            float _3151;
            float _3153;
            float _3155;
            float _3157;
            float _3159;
            float _3161;
            float _3302 = 0.0;
            float _3303 = 0.0;
            float _3304 = 0.0;
            float _3305 = 0.0;
            float _3306 = 0.0;
            float _3307 = 0.0;
            uint _3308 = 0u;
            uint _3317;
            bool _3318;
            for (;;)
            {
                _3317 = texelFetch(g_lightClassification, int((((_3064 << 5u) + (_3050 << 9u)) + (_3308 << 2u)) >> 2u)).x;
                _3318 = _3317 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3318)
                {
                    frontier_phi_71_pred = _3307;
                    frontier_phi_71_pred_1 = _3306;
                    frontier_phi_71_pred_2 = _3305;
                    frontier_phi_71_pred_3 = _3304;
                    frontier_phi_71_pred_4 = _3303;
                    frontier_phi_71_pred_5 = _3302;
                }
                else
                {
                    float _3447;
                    float _3448;
                    float _3449;
                    float _3450;
                    float _3451;
                    float _3452;
                    uint _3453;
                    _3447 = _3302;
                    _3448 = _3303;
                    _3449 = _3304;
                    _3450 = _3305;
                    _3451 = _3306;
                    _3452 = _3307;
                    _3453 = _3317;
                    float _3374;
                    float _3375;
                    float _3376;
                    float _3377;
                    float _3378;
                    float _3379;
                    for (;;)
                    {
                        uint _3457 = uint(findLSB(_3453)) + (_3308 << 5u);
                        uint _3454 = (_3453 + 4294967295u) & _3453;
                        uint _3459 = _3457 * 48u;
                        vec4 _3473 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3459)).x, texelFetch(g_PointLightRenderingBuffer, int(_3459 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3459 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3459 + 3u)).x));
                        uint _3479 = (_3457 * 48u) + 4u;
                        vec4 _3492 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3479)).x, texelFetch(g_PointLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3479 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3479 + 3u)).x));
                        uint _3498 = (_3457 * 48u) + 8u;
                        vec3 _3509 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3498)).x, texelFetch(g_PointLightRenderingBuffer, int(_3498 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3498 + 2u)).x));
                        float _3513 = _3473.x - _2129;
                        float _3514 = _3473.y - _2130;
                        float _3515 = _3473.z - _2131;
                        float _3516 = dot(vec3(_3513, _3514, _3515), vec3(_3513, _3514, _3515));
                        float _3519 = inversesqrt(_3516);
                        float _3520 = _3519 * _3513;
                        float _3521 = _3519 * _3514;
                        float _3522 = _3519 * _3515;
                        float _3523 = dot(vec3(_965, _968, _971), vec3(_3520, _3521, _3522));
                        float _3528 = 1.0 - (_3516 * _3473.w);
                        float _4978 = isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0));
                        float _3529 = isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0));
                        float _3530 = sqrt(_3516) * _3492.w;
                        float _3533 = 1.39999997615814208984375 / (_3530 + 1.39999997615814208984375);
                        float _3534 = _3533 * _3533;
                        float _3537 = ((1.0 - _3534) * _3523) + _3534;
                        float _3540 = _3530 * _3530;
                        float _3544 = ((isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0))) * _3529) / ((_3540 * 0.699999988079071044921875) + 1.0);
                        float _3548 = (-0.0) - _2129;
                        float _3549 = (-0.0) - _2130;
                        float _3550 = (-0.0) - _2131;
                        float _3554 = inversesqrt(dot(vec3(_3548, _3549, _3550), vec3(_3548, _3549, _3550)));
                        float _3555 = _3554 * _3548;
                        float _3556 = _3554 * _3549;
                        float _3557 = _3554 * _3550;
                        float _3564 = exp2(log2(1.0 / ((_3540 * 3.5) + 5.0)) * 0.25);
                        float _3565 = 1.0 - _1040;
                        float _3572 = sqrt(1.0 - ((1.0 - (_3565 * _3565)) * (1.0 - (_3564 * _3564))));
                        float _3573 = _3572 * _3572;
                        float _3574 = _3573 * _3573;
                        float _3575 = _3555 + _3520;
                        float _3576 = _3556 + _3521;
                        float _3577 = _3557 + _3522;
                        float _3581 = inversesqrt(dot(vec3(_3575, _3576, _3577), vec3(_3575, _3576, _3577)));
                        float _3585 = dot(vec3(_965, _968, _971), vec3(_3555, _3556, _3557));
                        float _4994 = isnan(0.0) ? _3585 : (isnan(_3585) ? 0.0 : max(_3585, 0.0));
                        float _3588 = isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0));
                        float _3589 = dot(vec3(_965, _968, _971), vec3(_3581 * _3575, _3581 * _3576, _3581 * _3577));
                        float _5005 = isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0));
                        float _3592 = isnan(1.0) ? _5005 : (isnan(_5005) ? 1.0 : min(_5005, 1.0));
                        float _3596 = ((_3592 * _3592) * (_3574 + (-1.0))) + 1.0;
                        float _3597 = _3533 * _3573;
                        float _3598 = _3597 * _3597;
                        float _3601 = ((1.0 - _3598) * _3523) + _3598;
                        float _5016 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                        float _3602 = isnan(1.0) ? _5016 : (isnan(_5016) ? 1.0 : min(_5016, 1.0));
                        float _3603 = 1.0 - _3573;
                        float _3613 = (0.5 / (((_3602 * ((_3588 * _3603) + _3573)) + 9.9999999392252902907785028219223e-09) + (((_3602 * _3603) + _3573) * _3588))) * _3602;
                        float _5027 = isnan(0.0) ? _3613 : (isnan(_3613) ? 0.0 : max(_3613, 0.0));
                        float _3624 = (((_3574 * 3.1415927410125732421875) * (isnan(1.0) ? _5027 : (isnan(_5027) ? 1.0 : min(_5027, 1.0)))) / ((_3596 * _3596) * ((_3540 * 2.1991131305694580078125) + 3.141590118408203125))) * _3529;
                        _3377 = (_3544 * _3492.x) + _3450;
                        _3378 = (_3544 * _3492.y) + _3451;
                        _3379 = (_3544 * _3492.z) + _3452;
                        _3374 = (_3624 * _3509.x) + _3447;
                        _3375 = (_3624 * _3509.y) + _3448;
                        _3376 = (_3624 * _3509.z) + _3449;
                        if (_3454 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3447 = _3374;
                            _3448 = _3375;
                            _3449 = _3376;
                            _3450 = _3377;
                            _3451 = _3378;
                            _3452 = _3379;
                            _3453 = _3454;
                        }
                    }
                    frontier_phi_71_pred = _3379;
                    frontier_phi_71_pred_1 = _3378;
                    frontier_phi_71_pred_2 = _3377;
                    frontier_phi_71_pred_3 = _3376;
                    frontier_phi_71_pred_4 = _3375;
                    frontier_phi_71_pred_5 = _3374;
                }
                _3161 = frontier_phi_71_pred;
                _3159 = frontier_phi_71_pred_1;
                _3157 = frontier_phi_71_pred_2;
                _3155 = frontier_phi_71_pred_3;
                _3153 = frontier_phi_71_pred_4;
                _3151 = frontier_phi_71_pred_5;
                uint _3309 = _3308 + 1u;
                if (_3309 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3302 = _3151;
                    _3303 = _3153;
                    _3304 = _3155;
                    _3305 = _3157;
                    _3306 = _3159;
                    _3307 = _3161;
                    _3308 = _3309;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3150 = _3151;
            _3152 = _3153;
            _3154 = _3155;
            _3156 = _3157;
            _3158 = _3159;
            _3160 = _3161;
        }
        uvec4 _3164 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3165 = _3164.z;
        uint _3167 = (_3165 >> 8u) & 15u;
        float _3270;
        float _3272;
        float _3274;
        float _3276;
        float _3278;
        float _3280;
        if (((4294967295u << _3167) & _3070) == 0u)
        {
            _3270 = _3150;
            _3272 = _3152;
            _3274 = _3154;
            _3276 = _3156;
            _3278 = _3158;
            _3280 = _3160;
        }
        else
        {
            float _3295 = inversesqrt(dot(vec3(_2129, _2130, _2131), vec3(_2129, _2130, _2131)));
            float _3296 = _3295 * _2129;
            float _3297 = _3295 * _2130;
            float _3298 = _3295 * _2131;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3167 < ((_3165 >> 12u) & 15u))
            {
                float _3271;
                float _3273;
                float _3275;
                float _3277;
                float _3279;
                float _3281;
                float _3430 = _3150;
                float _3431 = _3152;
                float _3432 = _3154;
                float _3433 = _3156;
                float _3434 = _3158;
                float _3435 = _3160;
                uint _3436 = _3167;
                uint _3445;
                bool _3446;
                for (;;)
                {
                    _3445 = texelFetch(g_lightClassification, int((((_3064 << 5u) + (_3050 << 9u)) + (_3436 << 2u)) >> 2u)).x;
                    _3446 = _3445 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3446)
                    {
                        frontier_phi_82_pred = _3435;
                        frontier_phi_82_pred_1 = _3434;
                        frontier_phi_82_pred_2 = _3433;
                        frontier_phi_82_pred_3 = _3432;
                        frontier_phi_82_pred_4 = _3431;
                        frontier_phi_82_pred_5 = _3430;
                    }
                    else
                    {
                        float _3638;
                        float _3639;
                        float _3640;
                        float _3641;
                        float _3642;
                        float _3643;
                        float _3931;
                        float _3932;
                        float _3933;
                        float _3934;
                        float _3935;
                        float _3936;
                        float _3651 = _3430;
                        float _3652 = _3431;
                        float _3653 = _3432;
                        float _3654 = _3433;
                        float _3655 = _3434;
                        float _3656 = _3435;
                        uint _3657 = _3445;
                        uint _3658;
                        vec4 _3683;
                        float _3684;
                        vec4 _3699;
                        vec3 _3711;
                        vec4 _3726;
                        vec4 _3741;
                        float _3787;
                        bool _3788;
                        for (;;)
                        {
                            uint _3668 = ((_3436 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3657));
                            _3658 = (_3657 + 4294967295u) & _3657;
                            uint _3670 = _3668 * 40u;
                            _3683 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3670)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 3u)).x));
                            _3684 = _3683.w;
                            uint _3686 = (_3668 * 40u) + 4u;
                            _3699 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3686)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 3u)).x));
                            uint _3701 = (_3668 * 40u) + 8u;
                            _3711 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3701)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 2u)).x));
                            uint _3713 = (_3668 * 40u) + 16u;
                            _3726 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3713)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 3u)).x));
                            uint _3728 = (_3668 * 40u) + 20u;
                            _3741 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3728)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 3u)).x));
                            uint _3743 = (_3668 * 40u) + 24u;
                            vec4 _3756 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3743)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 3u)).x));
                            uint _3762 = (_3668 * 40u) + 28u;
                            vec4 _3775 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3762)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 3u)).x));
                            _3787 = fma(_2131, _3775.z, fma(_2130, _3775.y, _3775.x * _2129)) + _3775.w;
                            _3788 = !((fma(_2131, _3756.z, fma(_2130, _3756.y, _3756.x * _2129)) + _3756.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3788)
                            {
                                float _3815 = _3683.x - _2129;
                                float _3816 = _3683.y - _2130;
                                float _3817 = _3683.z - _2131;
                                float _3818 = dot(vec3(_3815, _3816, _3817), vec3(_3815, _3816, _3817));
                                float _3821 = inversesqrt(_3818);
                                float _3822 = _3821 * _3815;
                                float _3823 = _3821 * _3816;
                                float _3824 = _3821 * _3817;
                                float _3828 = 1.0 - (_3818 / (_3684 * _3684));
                                float _5038 = isnan(0.0) ? _3828 : (isnan(_3828) ? 0.0 : max(_3828, 0.0));
                                float _3829 = isnan(1.0) ? _5038 : (isnan(_5038) ? 1.0 : min(_5038, 1.0));
                                float _3833 = sqrt(_3818) * _3699.w;
                                float _3835 = 1.39999997615814208984375 / (_3833 + 1.39999997615814208984375);
                                float _3836 = _3835 * _3835;
                                float _3839 = ((1.0 - _3836) * dot(vec3(_3822, _3823, _3824), vec3(_965, _968, _971))) + _3836;
                                float _3842 = _3833 * _3833;
                                float _3846 = (fma(_2131, _3726.z, fma(_2130, _3726.y, _3726.x * _2129)) + _3726.w) / _3787;
                                float _3847 = (fma(_2131, _3741.z, fma(_2130, _3741.y, _3741.x * _2129)) + _3741.w) / _3787;
                                float _3851 = 1.0 - dot(vec2(_3846, _3847), vec2(_3846, _3847));
                                float _5054 = isnan(0.0) ? _3851 : (isnan(_3851) ? 0.0 : max(_3851, 0.0));
                                float _3852 = isnan(1.0) ? _5054 : (isnan(_5054) ? 1.0 : min(_5054, 1.0));
                                float _3853 = _3852 * (((isnan(0.0) ? _3839 : (isnan(_3839) ? 0.0 : max(_3839, 0.0))) * _3829) / ((_3842 * 0.699999988079071044921875) + 1.0));
                                float _3865 = exp2(log2(1.0 / ((_3842 * 3.5) + 5.0)) * 0.25);
                                float _3866 = 1.0 - _1040;
                                float _3873 = sqrt(1.0 - ((1.0 - (_3866 * _3866)) * (1.0 - (_3865 * _3865))));
                                float _3874 = _3873 * _3873;
                                float _3875 = _3874 * _3874;
                                float _3876 = _3822 - _3296;
                                float _3877 = _3823 - _3297;
                                float _3878 = _3824 - _3298;
                                float _3882 = inversesqrt(dot(vec3(_3876, _3877, _3878), vec3(_3876, _3877, _3878)));
                                float _3886 = dot(vec3(_965, _968, _971), vec3((-0.0) - _3296, (-0.0) - _3297, (-0.0) - _3298));
                                float _5065 = isnan(0.0) ? _3886 : (isnan(_3886) ? 0.0 : max(_3886, 0.0));
                                float _3889 = isnan(1.0) ? _5065 : (isnan(_5065) ? 1.0 : min(_5065, 1.0));
                                float _3890 = dot(vec3(_965, _968, _971), vec3(_3882 * _3876, _3882 * _3877, _3882 * _3878));
                                float _5076 = isnan(0.0) ? _3890 : (isnan(_3890) ? 0.0 : max(_3890, 0.0));
                                float _3893 = isnan(1.0) ? _5076 : (isnan(_5076) ? 1.0 : min(_5076, 1.0));
                                float _3897 = ((_3893 * _3893) * (_3875 + (-1.0))) + 1.0;
                                float _3898 = _3835 * _3874;
                                float _3899 = _3898 * _3898;
                                float _3905 = ((1.0 - _3899) * dot(vec3(_965, _968, _971), vec3(_3822, _3823, _3824))) + _3899;
                                float _5087 = isnan(0.0) ? _3905 : (isnan(_3905) ? 0.0 : max(_3905, 0.0));
                                float _3906 = isnan(1.0) ? _5087 : (isnan(_5087) ? 1.0 : min(_5087, 1.0));
                                float _3907 = 1.0 - _3874;
                                float _3917 = (0.5 / (((_3906 * ((_3889 * _3907) + _3874)) + 9.9999999392252902907785028219223e-09) + (((_3906 * _3907) + _3874) * _3889))) * _3906;
                                float _5098 = isnan(0.0) ? _3917 : (isnan(_3917) ? 0.0 : max(_3917, 0.0));
                                float _3927 = (_3852 * _3829) * (((_3875 * 3.1415927410125732421875) * (isnan(1.0) ? _5098 : (isnan(_5098) ? 1.0 : min(_5098, 1.0)))) / ((_3897 * _3897) * ((_3842 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3853 * _3699.z;
                                frontier_phi_88_pred_1 = _3853 * _3699.y;
                                frontier_phi_88_pred_2 = _3853 * _3699.x;
                                frontier_phi_88_pred_3 = _3927 * _3711.z;
                                frontier_phi_88_pred_4 = _3927 * _3711.y;
                                frontier_phi_88_pred_5 = _3927 * _3711.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3936 = frontier_phi_88_pred;
                            _3935 = frontier_phi_88_pred_1;
                            _3934 = frontier_phi_88_pred_2;
                            _3933 = frontier_phi_88_pred_3;
                            _3932 = frontier_phi_88_pred_4;
                            _3931 = frontier_phi_88_pred_5;
                            _3641 = _3934 + _3654;
                            _3642 = _3935 + _3655;
                            _3643 = _3936 + _3656;
                            _3638 = _3931 + _3651;
                            _3639 = _3932 + _3652;
                            _3640 = _3933 + _3653;
                            if (_3658 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3651 = _3638;
                                _3652 = _3639;
                                _3653 = _3640;
                                _3654 = _3641;
                                _3655 = _3642;
                                _3656 = _3643;
                                _3657 = _3658;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3643;
                        frontier_phi_82_pred_1 = _3642;
                        frontier_phi_82_pred_2 = _3641;
                        frontier_phi_82_pred_3 = _3640;
                        frontier_phi_82_pred_4 = _3639;
                        frontier_phi_82_pred_5 = _3638;
                    }
                    _3281 = frontier_phi_82_pred;
                    _3279 = frontier_phi_82_pred_1;
                    _3277 = frontier_phi_82_pred_2;
                    _3275 = frontier_phi_82_pred_3;
                    _3273 = frontier_phi_82_pred_4;
                    _3271 = frontier_phi_82_pred_5;
                    uint _3437 = _3436 + 1u;
                    if (_3437 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3430 = _3271;
                        _3431 = _3273;
                        _3432 = _3275;
                        _3433 = _3277;
                        _3434 = _3279;
                        _3435 = _3281;
                        _3436 = _3437;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3277;
                frontier_phi_63_64_ladder_1 = _3281;
                frontier_phi_63_64_ladder_2 = _3279;
                frontier_phi_63_64_ladder_3 = _3275;
                frontier_phi_63_64_ladder_4 = _3273;
                frontier_phi_63_64_ladder_5 = _3271;
            }
            else
            {
                frontier_phi_63_64_ladder = _3156;
                frontier_phi_63_64_ladder_1 = _3160;
                frontier_phi_63_64_ladder_2 = _3158;
                frontier_phi_63_64_ladder_3 = _3154;
                frontier_phi_63_64_ladder_4 = _3152;
                frontier_phi_63_64_ladder_5 = _3150;
            }
            _3270 = frontier_phi_63_64_ladder_5;
            _3272 = frontier_phi_63_64_ladder_4;
            _3274 = frontier_phi_63_64_ladder_3;
            _3276 = frontier_phi_63_64_ladder;
            _3278 = frontier_phi_63_64_ladder_2;
            _3280 = frontier_phi_63_64_ladder_1;
        }
        float _3285 = isnan(1.0) ? _1024 : (isnan(_1024) ? 1.0 : min(_1024, 1.0));
        _3083 = (_3285 * _3276) + _2595;
        _3085 = (_3285 * _3278) + _2597;
        _3087 = (_3285 * _3280) + _2599;
        _3089 = ((_3270 * _1008) * _3285) + _2933;
        _3091 = ((_3272 * _1010) * _3285) + _2935;
        _3093 = ((_3274 * _1011) * _3285) + _2937;
    }
    else
    {
        _3083 = _2595;
        _3085 = _2597;
        _3087 = _2599;
        _3089 = _2933;
        _3091 = _2935;
        _3093 = _2937;
    }
    float _5114 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _5125 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _5136 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _3110 = ((isnan(1.0) ? _5114 : (isnan(_5114) ? 1.0 : min(_5114, 1.0))) * (_3083 + ((isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))) * _1024))) + ((_3089 + ((isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0))) * _1863)) * cbPerFrame._m0[3u].x);
    float _3111 = ((isnan(1.0) ? _5125 : (isnan(_5125) ? 1.0 : min(_5125, 1.0))) * (_3085 + ((isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0))) * _1024))) + ((_3091 + ((isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0))) * _1863)) * cbPerFrame._m0[3u].x);
    float _3112 = ((isnan(1.0) ? _5136 : (isnan(_5136) ? 1.0 : min(_5136, 1.0))) * (_3087 + ((isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))) * _1024))) + ((_3093 + ((isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0))) * _1863)) * cbPerFrame._m0[3u].x);
    uint _3113 = _263 + 6u;
    float _3121 = _946 / cbSceneParam._m0[86u].x;
    float _3122 = _947 / cbSceneParam._m0[86u].y;
    vec4 _3136 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3121, _3122, (log2((isnan(cbSceneParam._m0[77u].w) ? _869 : (isnan(_869) ? cbSceneParam._m0[77u].w : min(_869, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3138 = _3136.x;
    float _3139 = _3136.y;
    float _3140 = _3136.z;
    float _3141 = _3136.w;
    float _3212;
    float _3214;
    float _3216;
    float _3218;
    if (_869 > cbSceneParam._m0[78u].w)
    {
        float _3175 = isnan(_869) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _869 : min(cbSceneParam._m0[80u].w, _869));
        float _3176 = _3175 / _869;
        float _3187 = _3176 * _919;
        float _3188 = _920 * _3176;
        float _3189 = (-0.0) - _3188;
        float _3190 = _3176 * _921;
        float _3192 = (cbSceneParam._m0[77u].w * _3189) / _3175;
        float _3193 = _3192 + cbSceneParam._m0[79u].w;
        float _3194 = cbSceneParam._m0[79u].w - _3188;
        float _3200 = sqrt(((_3187 * _3187) + (_3188 * _3188)) + (_3190 * _3190));
        float _3203 = (1.0 - (cbSceneParam._m0[77u].w / _3175)) * _3200;
        float _3208 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3210 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3387;
        if (abs((_3189 - _3192) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3387 = ((((_3193 > 0.0) ? exp2(_3208 * _3193) : (2.0 - exp2(_3210 * _3193))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3203;
        }
        else
        {
            float _3331 = 1.0 / cbSceneParam._m0[80u].x;
            float _3332 = isnan(_3194) ? _3193 : (isnan(_3193) ? _3194 : max(_3193, _3194));
            float _3333 = isnan(_3194) ? _3193 : (isnan(_3193) ? _3194 : min(_3193, _3194));
            float _3342 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : min(_3332, 0.0));
            float _3343 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : min(_3333, 0.0));
            _3387 = ((abs(_3200 / _3189) * cbSceneParam._m0[80u].y) * ((((_3342 - _3343) * 2.0) - ((exp2(_3208 * (isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0)))) - exp2(_3208 * (isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0))))) * _3331)) - ((exp2(_3210 * _3342) - exp2(_3210 * _3343)) * _3331))) + (_3203 * cbSceneParam._m0[80u].z);
        }
        vec4 _3389 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3121, _3122, 1.0), 0.0);
        float _3398 = exp2((_3387 * (-1.44269502162933349609375)) * (1.0 - _3389.w));
        float _3399 = log2(_3398);
        float _3415 = log2(_3141);
        _3212 = (exp2(_3415 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3399 * cbSceneParam._m0[78u].x)) * _3389.x) / cbSceneParam._m0[78u].x)) + _3138;
        _3214 = (exp2(_3415 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3399 * cbSceneParam._m0[78u].y)) * _3389.y) / cbSceneParam._m0[78u].y)) + _3139;
        _3216 = (exp2(_3415 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3399 * cbSceneParam._m0[78u].z)) * _3389.z) / cbSceneParam._m0[78u].z)) + _3140;
        _3218 = _3398 * _3141;
    }
    else
    {
        _3212 = _3138;
        _3214 = _3139;
        _3216 = _3140;
        _3218 = _3141;
    }
    bool _3425;
    vec4 _3228;
    vec4 _3250;
    float _3252;
    float _3256;
    float _3257;
    float _3258;
    float _3259;
    bool _3269;
    for (;;)
    {
        _3228 = cbMatDynParam._m0[0u];
        float _3230 = roundEven(_3228.y);
        bool _3231 = _3230 == 3.0;
        float _3232 = log2(_3218);
        float _3239 = exp2(_3232 * cbSceneParam._m0[78u].x) * _3110;
        float _3240 = exp2(_3232 * cbSceneParam._m0[78u].y) * _3111;
        float _3241 = exp2(_3232 * cbSceneParam._m0[78u].z) * _3112;
        float _3248 = _935 + (-0.5);
        _3250 = cbMtdParam._m0[1u];
        _3252 = _3250.y * _3248;
        float _3255 = (_3230 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3256 = _3255 * (_3231 ? _3239 : (_3239 + (cbSceneParam._m0[72u].w * _3212)));
        _3257 = _3255 * (_3231 ? _3240 : (_3240 + (cbSceneParam._m0[72u].w * _3214)));
        _3258 = _3255 * (_3231 ? _3241 : (_3241 + (cbSceneParam._m0[72u].w * _3216)));
        _3259 = _3248 * 0.999000012874603271484375;
        _3269 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3269)
        {
            if ((cbInstanceData._m0[_263 + 7u].x + _3259) < 0.5)
            {
                _3425 = true;
                break;
            }
        }
        uint _3366 = _984 + uint(_3228.w);
        if ((cbInstanceData._m0[_3366].w < 1.0) && ((cbInstanceData._m0[_3366].w + _3259) < 0.5))
        {
            _3425 = true;
            break;
        }
        if ((_3252 + 1.0) < _3250.x)
        {
            _3425 = true;
            break;
        }
        _3425 = false;
        break;
    }
    float _3629;
    if (_3425)
    {
        discard_state = true;
        _3629 = 0.0;
    }
    else
    {
        _3629 = cbInstanceData._m0[_3113].w;
    }
    SV_Target.x = _3256;
    SV_Target.y = _3257;
    SV_Target.z = _3258;
    SV_Target.w = _3629;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3113].w;
    discard_exit();
}


