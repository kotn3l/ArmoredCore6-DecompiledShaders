#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1447;
float _3849;
float _3850;
float _3851;
float _3852;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _244 = _243 * _235;
    float _245 = _243 * _236;
    float _246 = _243 * _237;
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = _250 * NORMAL.x;
    float _252 = _250 * NORMAL.y;
    float _253 = _250 * NORMAL.z;
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _258 = _257 * TANGENT.x;
    float _259 = _257 * TANGENT.y;
    float _260 = _257 * TANGENT.z;
    uint _263 = uint(roundEven(NORMAL.w)) * 13u;
    uint _268 = _263 + 1u;
    uint _272 = _263 + 2u;
    float _281 = sqrt(((cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x)) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x));
    float _282 = _281 * TEXCOORD.z;
    float _283 = _281 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _309 = _303.x * cbMtdParam._m0[11u].x;
    float _310 = _303.y * cbMtdParam._m0[11u].y;
    float _311 = _303.z * cbMtdParam._m0[11u].z;
    vec4 _330 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _282) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _283) + cbTextureTilingScale._m0[5u].w));
    vec4 _368 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _370 = _368.x;
    float _382 = dot(vec4(_370, _368.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _399 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_370 - _382) * cbMtdParam._m0[24u].y) + _382) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3861 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _400 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
    float _407 = (_400 * ((_330.x * cbMtdParam._m0[12u].x) - _309)) + _309;
    float _408 = (_400 * ((_330.y * cbMtdParam._m0[12u].y) - _310)) + _310;
    float _409 = (_400 * ((_330.z * cbMtdParam._m0[12u].z) - _311)) + _311;
    vec4 _428 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _282) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _283) + cbTextureTilingScale._m0[14u].w));
    vec4 _448 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _282) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _283) + cbTextureTilingScale._m0[20u].w));
    vec4 _475 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _282) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _283) + cbTextureTilingScale._m0[4u].w));
    vec4 _492 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _494 = _492.x;
    float _495 = _492.y;
    float _496 = _492.z;
    float _505 = ((_475.z - _496) * _400) + _496;
    float _508 = ((((_475.x - _494) * _400) + _494) * 2.0) + (-1.0);
    float _509 = ((((_475.y - _495) * _400) + _495) * 2.0) + (-1.0);
    float _510 = dot(vec2(_508, _509), vec2(_508, _509));
    float _3872 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _515 = sqrt(1.0 - (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))));
    vec4 _535 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _547 = (_508 + ((((_448.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_535.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _548 = (_509 + ((((_448.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_535.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _551 = fma(_515, _251, fma(_548, _258, _547 * _244));
    float _554 = fma(_515, _252, fma(_548, _259, _547 * _245));
    float _557 = fma(_515, _253, fma(_548, _260, _547 * _246));
    float _561 = inversesqrt(dot(vec3(_551, _554, _557), vec3(_551, _554, _557)));
    vec4 _588 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _282) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _283) + cbTextureTilingScale._m0[11u].w));
    float _590 = _588.x;
    float _591 = 1.0 - _590;
    float _595 = ((_590 - _591) * cbMtdParam._m0[24u].z) + _591;
    float _597 = (cbMtdParam._m0[19u].x + dot(vec4(_561 * _551, _561 * _554, _561 * _557, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_595 * cbMtdParam._m0[21u].z);
    float _3883 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _598 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
    float _600 = (-0.0) - cbMtdParam._m0[24u].x;
    float _602 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _603 = isnan(1.0) ? _602 : (isnan(_602) ? 1.0 : min(_602, 1.0));
    float _610 = _598 - ((_598 * TEXCOORD_8.x) * _603);
    float _611 = _598 - ((_598 * TEXCOORD_8.y) * _603);
    float _612 = _598 - ((_598 * TEXCOORD_8.z) * _603);
    float _619 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _623 = ((isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : min(_619, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _631 = (_623 - (((_595 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _623))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3914 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _632 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _636 = ((_610 * ((_428.x * cbMtdParam._m0[18u].x) - _407)) * _632) + _407;
    float _637 = ((_611 * ((_428.y * cbMtdParam._m0[18u].y) - _408)) * _632) + _408;
    float _638 = ((_612 * ((_428.z * cbMtdParam._m0[18u].z) - _409)) * _632) + _409;
    vec4 _650 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _282) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _283) + cbTextureTilingScale._m0[19u].w));
    float _652 = _650.x;
    float _653 = 1.0 - _652;
    float _680 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_652 - _653) * cbMtdParam._m0[24u].w) + _653) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3925 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _681 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _689 = ((((cbMtdParam._m0[10u].x - _636) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _681) + _636;
    float _690 = ((((cbMtdParam._m0[10u].y - _637) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _681) + _637;
    float _691 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _638)) * _681) + _638;
    vec4 _717 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _719 = _717.x;
    float _737 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _282) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _283) + cbTextureTilingScale._m0[9u].w)).x - _719) * _400) + _719;
    float _741 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _737) * cbMtdParam._m0[19u].z) + _737;
    float _744 = _741 - ((_632 * _610) * _741);
    float _746 = _744 - (_744 * _681);
    float _751 = (((_448.z - _505) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _505;
    float _755 = ((_535.z - _751) * cbMtdParam._m0[19u].w) + _751;
    vec4 _769 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _282) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _283) + cbTextureTilingScale._m0[15u].w));
    float _776 = (_769.x * 2.0) + (-1.0);
    float _777 = (_769.y * 2.0) + (-1.0);
    float _778 = dot(vec2(_776, _777), vec2(_776, _777));
    float _3936 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _787 = (((_769.z - _755) * _610) * _632) + _755;
    float _790 = ((cbMtdParam._m0[23u].y - _787) * _681) + _787;
    vec4 _809 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _282) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _283) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _815 = (_809.x * 2.0) + (-1.0);
    float _816 = (_809.y * 2.0) + (-1.0);
    float _817 = dot(vec2(_815, _816), vec2(_815, _816));
    float _3947 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _837 = (((cbMtdParam._m0[21u].x * _547) + ((_776 - _547) * _610)) * _632) + _547;
    float _838 = (((cbMtdParam._m0[21u].x * _548) + ((_777 - _548) * _611)) * _632) + _548;
    float _839 = (((sqrt(1.0 - (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0)))) - _515) * _612) * _632) + _515;
    float _850 = (((_815 - _837) + (_837 * cbMtdParam._m0[22u].z)) * _681) + _837;
    float _851 = (((_816 - _838) + (_838 * cbMtdParam._m0[22u].z)) * _681) + _838;
    float _852 = ((sqrt(1.0 - (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0)))) - _839) * _681) + _839;
    float _854 = cbMtdParam._m0[22u].x + _535.w;
    float _857 = fma(_852, _251, fma(_851, _258, _850 * _244));
    float _860 = fma(_852, _252, fma(_851, _259, _850 * _245));
    float _863 = fma(_852, _253, fma(_851, _260, _850 * _246));
    float _867 = inversesqrt(dot(vec3(_857, _860, _863), vec3(_857, _860, _863)));
    float _868 = _867 * _857;
    float _869 = _867 * _860;
    float _870 = _867 * _863;
    float _3958 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _871 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _3969 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _3980 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _3991 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _4002 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _4013 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _876 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
    float _890 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _930 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _940 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _930);
    float _941 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _930);
    float _942 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _930);
    float _946 = inversesqrt(dot(vec3(_940, _941, _942), vec3(_940, _941, _942)));
    float _947 = _940 * _946;
    float _948 = _941 * _946;
    float _949 = _942 * _946;
    vec4 _954 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _956 = _954.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1128 = sqrt(((_940 * _940) + (_941 * _941)) + (_942 * _942));
        float _1134 = (cbMatDynParam._m0[5u].x * _1128) + cbMatDynParam._m0[5u].y;
        float _4024 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1139 = (cbMatDynParam._m0[5u].z * _1128) + cbMatDynParam._m0[5u].w;
        float _4035 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))) - _1135)) + _1135) < ((_956 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _967 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _968 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _986 = fma(_870, cbSceneParam._m0[5u].z, fma(_869, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _868));
    float _989 = fma(_870, cbSceneParam._m0[6u].z, fma(_869, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _868));
    float _992 = fma(_870, cbSceneParam._m0[7u].z, fma(_869, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _868));
    uint _1005 = _263 + 9u;
    uint _1006 = _1005 + uint(cbMatDynParam._m0[0u].w);
    float _1012 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0)))) * cbInstanceData._m0[_1006].x;
    float _1013 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0)))) * cbInstanceData._m0[_1006].y;
    float _1014 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) * cbInstanceData._m0[_1006].z;
    float _4046 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _1015 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _4057 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _1016 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _4068 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _1017 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _1018 = 1.0 - _876;
    float _1019 = _1015 * _1018;
    float _1020 = _1016 * _1018;
    float _1021 = _1017 * _1018;
    float _1026 = (_1015 + (-0.039999999105930328369140625)) * _876;
    float _1027 = (_1016 + (-0.039999999105930328369140625)) * _876;
    float _1028 = (_1017 + (-0.039999999105930328369140625)) * _876;
    float _1029 = _1026 + 0.039999999105930328369140625;
    float _1031 = _1027 + 0.039999999105930328369140625;
    float _1032 = _1028 + 0.039999999105930328369140625;
    vec4 _1041 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _967, cbSceneParam._m0[86u].y * _968));
    float _1045 = ((isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * TEXCOORD_5.w) * _1041.x;
    float _1046 = dot(vec3(_868, _869, _870), vec3(_947, _948, _949));
    float _1049 = _1046 * 2.0;
    float _1053 = (_1049 * _868) - _947;
    float _1054 = (_1049 * _869) - _948;
    float _1055 = (_1049 * _870) - _949;
    float _1059 = abs(dot(vec3(_947, _948, _949), vec3(_868, _869, _870)));
    float _4079 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
    float _1061 = sqrt(_871);
    float _1074 = exp2((_1061 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1061 * 3.0));
    float _1080 = (1.0 - _1074) * ((_1061 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1081 = _1074 * _1061;
    float _1109 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1113 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1117 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1446;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1171 = fma(_1117, cbModelParam._m0[26u].z, fma(_1113, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1109));
        float _1175 = fma(_1117, cbModelParam._m0[27u].z, fma(_1113, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1109));
        float _1179 = fma(_1117, cbModelParam._m0[28u].z, fma(_1113, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1109));
        float _1204 = _1109 + _868;
        float _1205 = _1113 + _869;
        float _1206 = _1117 + _870;
        float _1216 = fma(_1206, cbModelParam._m0[26u].z, fma(_1205, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1204)) - _1171;
        float _1217 = fma(_1206, cbModelParam._m0[27u].z, fma(_1205, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1204)) - _1175;
        float _1218 = fma(_1206, cbModelParam._m0[28u].z, fma(_1205, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1204)) - _1179;
        float _1222 = inversesqrt(dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218)));
        float _1235 = ((_1222 * _1216) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1171 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1236 = ((_1222 * _1217) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1175 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1237 = ((_1222 * _1218) / cbModelParam._m0[34u].z) + ((((((_1179 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1235, _1236, _1237), 0.0);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1235, _1236, _1237), 0.0);
        vec4 _1254 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1235, _1236, _1237), 0.0);
        vec4 _1261 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1235, _1236, _1237), 0.0);
        float _1274 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1275 = _1274 * (_1240.x + (-0.5));
        float _1276 = _1274 * (_1240.y + (-0.5));
        float _1277 = _1274 * (_1240.z + (-0.5));
        float _1284 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1285 = _1284 * (_1247.x + (-0.5));
        float _1286 = _1284 * (_1247.y + (-0.5));
        float _1287 = _1284 * (_1247.z + (-0.5));
        float _1294 = exp2((_1254.w + (-0.5)) * 20.0) * 2.0;
        float _1295 = _1294 * (_1254.x + (-0.5));
        float _1296 = _1294 * (_1254.y + (-0.5));
        float _1297 = _1294 * (_1254.z + (-0.5));
        float _1304 = exp2((_1261.w + (-0.5)) * 20.0) * 2.0;
        float _1305 = _1304 * (_1261.x + (-0.5));
        float _1306 = _1304 * (_1261.y + (-0.5));
        float _1307 = _1304 * (_1261.z + (-0.5));
        float _1308 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1309 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1310 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1311 = _1275 * 0.5;
        float _1312 = _1285 * 0.5;
        float _1313 = _1295 * 0.5;
        float _1314 = dot(vec3(_1311, _1312, _1313), vec3(_1311, _1312, _1313));
        float _1319 = (_1314 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1314);
        float _1328 = (dot(vec3(_868, _869, _870), vec3(_1319 * _1311, _1319 * _1312, _1319 * _1313)) + 1.0) * 0.5;
        float _4105 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1338 = sqrt(((_1312 * _1312) + (_1311 * _1311)) + (_1313 * _1313)) / (_1308 + 9.9999997473787516355514526367188e-06);
        float _4116 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1340 = _1339 * 2.0;
        float _1344 = (1.0 - _1339) / (_1339 + 1.0);
        float _4127 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1354 = ((((1.0 - _1345) * (_1340 + 2.0)) * exp2(log2(isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_1340 + 1.0))) + _1345) * _1308;
        float _1355 = _1276 * 0.5;
        float _1356 = _1286 * 0.5;
        float _1357 = _1296 * 0.5;
        float _1358 = dot(vec3(_1355, _1356, _1357), vec3(_1355, _1356, _1357));
        float _1363 = (_1358 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1358);
        float _1371 = (dot(vec3(_868, _869, _870), vec3(_1363 * _1355, _1363 * _1356, _1363 * _1357)) + 1.0) * 0.5;
        float _4138 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1380 = sqrt(((_1356 * _1356) + (_1355 * _1355)) + (_1357 * _1357)) / (_1309 + 9.9999997473787516355514526367188e-06);
        float _4149 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1382 = _1381 * 2.0;
        float _1386 = (1.0 - _1381) / (_1381 + 1.0);
        float _4160 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1396 = ((((1.0 - _1387) * (_1382 + 2.0)) * exp2(log2(isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_1382 + 1.0))) + _1387) * _1309;
        float _1397 = _1277 * 0.5;
        float _1398 = _1287 * 0.5;
        float _1399 = _1297 * 0.5;
        float _1400 = dot(vec3(_1397, _1398, _1399), vec3(_1397, _1398, _1399));
        float _1405 = (_1400 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1400);
        float _1413 = (dot(vec3(_868, _869, _870), vec3(_1405 * _1397, _1405 * _1398, _1405 * _1399)) + 1.0) * 0.5;
        float _4171 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1422 = sqrt(((_1398 * _1398) + (_1397 * _1397)) + (_1399 * _1399)) / (_1310 + 9.9999997473787516355514526367188e-06);
        float _4182 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1424 = _1423 * 2.0;
        float _1428 = (1.0 - _1423) / (_1423 + 1.0);
        float _4193 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1438 = ((((1.0 - _1429) * (_1424 + 2.0)) * exp2(log2(isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_1424 + 1.0))) + _1429) * _1310;
        _1446 = _1277;
        _1448 = _1276;
        _1449 = _1275;
        _1450 = _1287;
        _1451 = _1286;
        _1452 = _1285;
        _1453 = _1297;
        _1454 = _1296;
        _1455 = _1295;
        _1456 = _1310;
        _1457 = _1309;
        _1458 = _1308;
        _1459 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)));
        _1460 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)));
        _1461 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)));
    }
    else
    {
        _1446 = _1447;
        _1448 = _1447;
        _1449 = _1447;
        _1450 = _1447;
        _1451 = _1447;
        _1452 = _1447;
        _1453 = _1447;
        _1454 = _1447;
        _1455 = _1447;
        _1456 = _1447;
        _1457 = _1447;
        _1458 = _1447;
        _1459 = 0.0;
        _1460 = 0.0;
        _1461 = 0.0;
    }
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1489 = fma(_1117, cbModelParam._m0[30u].z, fma(_1113, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1109));
        float _1493 = fma(_1117, cbModelParam._m0[31u].z, fma(_1113, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1109));
        float _1497 = fma(_1117, cbModelParam._m0[32u].z, fma(_1113, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1109));
        float _1520 = _1109 + _868;
        float _1521 = _1113 + _869;
        float _1522 = _1117 + _870;
        float _1532 = fma(_1522, cbModelParam._m0[30u].z, fma(_1521, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1520)) - _1489;
        float _1533 = fma(_1522, cbModelParam._m0[31u].z, fma(_1521, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1520)) - _1493;
        float _1534 = fma(_1522, cbModelParam._m0[32u].z, fma(_1521, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1520)) - _1497;
        float _1538 = inversesqrt(dot(vec3(_1532, _1533, _1534), vec3(_1532, _1533, _1534)));
        float _1551 = ((_1538 * _1532) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1489 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1552 = ((_1538 * _1533) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1493 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1553 = ((_1538 * _1534) / cbModelParam._m0[35u].z) + ((((((_1497 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1555 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1551, _1552, _1553), 0.0);
        vec4 _1562 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1551, _1552, _1553), 0.0);
        vec4 _1569 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1551, _1552, _1553), 0.0);
        vec4 _1576 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1551, _1552, _1553), 0.0);
        float _1588 = exp2((_1555.w + (-0.5)) * 20.0) * 2.0;
        float _1589 = _1588 * (_1555.x + (-0.5));
        float _1590 = _1588 * (_1555.y + (-0.5));
        float _1591 = _1588 * (_1555.z + (-0.5));
        float _1598 = exp2((_1562.w + (-0.5)) * 20.0) * 2.0;
        float _1599 = _1598 * (_1562.x + (-0.5));
        float _1600 = _1598 * (_1562.y + (-0.5));
        float _1601 = _1598 * (_1562.z + (-0.5));
        float _1608 = exp2((_1569.w + (-0.5)) * 20.0) * 2.0;
        float _1609 = _1608 * (_1569.x + (-0.5));
        float _1610 = _1608 * (_1569.y + (-0.5));
        float _1611 = _1608 * (_1569.z + (-0.5));
        float _1618 = exp2((_1576.w + (-0.5)) * 20.0) * 2.0;
        float _1619 = _1618 * (_1576.x + (-0.5));
        float _1620 = _1618 * (_1576.y + (-0.5));
        float _1621 = _1618 * (_1576.z + (-0.5));
        float _1622 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1623 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1624 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1625 = _1589 * 0.5;
        float _1626 = _1599 * 0.5;
        float _1627 = _1609 * 0.5;
        float _1628 = dot(vec3(_1625, _1626, _1627), vec3(_1625, _1626, _1627));
        float _1633 = (_1628 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1628);
        float _1641 = (dot(vec3(_868, _869, _870), vec3(_1633 * _1625, _1633 * _1626, _1633 * _1627)) + 1.0) * 0.5;
        float _4234 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1650 = sqrt(((_1626 * _1626) + (_1625 * _1625)) + (_1627 * _1627)) / (_1622 + 9.9999997473787516355514526367188e-06);
        float _4245 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1652 = _1651 * 2.0;
        float _1656 = (1.0 - _1651) / (_1651 + 1.0);
        float _4256 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1666 = ((((1.0 - _1657) * (_1652 + 2.0)) * exp2(log2(isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_1652 + 1.0))) + _1657) * _1622;
        float _1667 = _1590 * 0.5;
        float _1668 = _1600 * 0.5;
        float _1669 = _1610 * 0.5;
        float _1670 = dot(vec3(_1667, _1668, _1669), vec3(_1667, _1668, _1669));
        float _1675 = (_1670 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1670);
        float _1683 = (dot(vec3(_868, _869, _870), vec3(_1675 * _1667, _1675 * _1668, _1675 * _1669)) + 1.0) * 0.5;
        float _4267 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1692 = sqrt(((_1668 * _1668) + (_1667 * _1667)) + (_1669 * _1669)) / (_1623 + 9.9999997473787516355514526367188e-06);
        float _4278 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1693 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1694 = _1693 * 2.0;
        float _1698 = (1.0 - _1693) / (_1693 + 1.0);
        float _4289 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1699 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1708 = ((((1.0 - _1699) * (_1694 + 2.0)) * exp2(log2(isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_1694 + 1.0))) + _1699) * _1623;
        float _1709 = _1591 * 0.5;
        float _1710 = _1601 * 0.5;
        float _1711 = _1611 * 0.5;
        float _1712 = dot(vec3(_1709, _1710, _1711), vec3(_1709, _1710, _1711));
        float _1717 = (_1712 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1712);
        float _1725 = (dot(vec3(_868, _869, _870), vec3(_1717 * _1709, _1717 * _1710, _1717 * _1711)) + 1.0) * 0.5;
        float _4300 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1734 = sqrt(((_1710 * _1710) + (_1709 * _1709)) + (_1711 * _1711)) / (_1624 + 9.9999997473787516355514526367188e-06);
        float _4311 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1735 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1736 = _1735 * 2.0;
        float _1740 = (1.0 - _1735) / (_1735 + 1.0);
        float _4322 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1741 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _1750 = ((((1.0 - _1741) * (_1736 + 2.0)) * exp2(log2(isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_1736 + 1.0))) + _1741) * _1624;
        _1758 = _1591;
        _1759 = _1590;
        _1760 = _1589;
        _1761 = _1601;
        _1762 = _1600;
        _1763 = _1599;
        _1764 = _1611;
        _1765 = _1610;
        _1766 = _1609;
        _1767 = _1624;
        _1768 = _1623;
        _1769 = _1622;
        _1770 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)));
        _1771 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0)));
        _1772 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)));
    }
    else
    {
        _1758 = _1447;
        _1759 = _1447;
        _1760 = _1447;
        _1761 = _1447;
        _1762 = _1447;
        _1763 = _1447;
        _1764 = _1447;
        _1765 = _1447;
        _1766 = _1447;
        _1767 = _1447;
        _1768 = _1447;
        _1769 = _1447;
        _1770 = 0.0;
        _1771 = 0.0;
        _1772 = 0.0;
    }
    float _1782 = (cbModelParam._m0[1u].x * (_1770 - _1459)) + _1459;
    float _1783 = (cbModelParam._m0[1u].x * (_1771 - _1460)) + _1460;
    float _1784 = (cbModelParam._m0[1u].x * (_1772 - _1461)) + _1461;
    float _1805 = fma(_1784, cbSceneParam._m0[89u].z, fma(_1783, cbSceneParam._m0[89u].y, _1782 * cbSceneParam._m0[89u].x));
    float _1808 = fma(_1784, cbSceneParam._m0[90u].z, fma(_1783, cbSceneParam._m0[90u].y, _1782 * cbSceneParam._m0[90u].x));
    float _1811 = fma(_1784, cbSceneParam._m0[91u].z, fma(_1783, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1782));
    float _1826 = _1053 * 0.5;
    float _1827 = _1054 * 0.5;
    float _1828 = _1055 * 0.5;
    float _1829 = dot(vec4(_1826, _1827, _1828, 1.0), vec4(_1760, _1763, _1766, _1769));
    float _1832 = dot(vec4(_1826, _1827, _1828, 1.0), vec4(_1759, _1762, _1765, _1768));
    float _1835 = dot(vec4(_1826, _1827, _1828, 1.0), vec4(_1758, _1761, _1764, _1767));
    float _1869;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1842 = dot(vec4(_1826, _1827, _1828, 1.0), vec4(_1446, _1450, _1453, _1456));
        float _1846 = dot(vec4(_1826, _1827, _1828, 1.0), vec4(_1448, _1451, _1454, _1457));
        float _1850 = dot(vec4(_1826, _1827, _1828, 1.0), vec4(_1449, _1452, _1455, _1458));
        float _1857 = dot(vec4(cbModelParam._m0[39u]), vec4(_1826, _1827, _1828, 1.0));
        _1869 = dot(vec3(isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0)), isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0)), isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1857) ? 0.0 : (isnan(0.0) ? _1857 : max(0.0, _1857))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1869 = 1.0;
    }
    float _1880;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1871 = dot(vec4(cbModelParam._m0[40u]), vec4(_1826, _1827, _1828, 1.0));
        _1880 = dot(vec3(isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0)), isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0)), isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1871) ? 0.0 : (isnan(0.0) ? _1871 : max(0.0, _1871))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1880 = 1.0;
    }
    float _1884 = (_1880 * cbModelParam._m0[1u].x) + (_1869 * (1.0 - cbModelParam._m0[1u].x));
    float _1894 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _871);
    float _1895 = isnan(_1894) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1894 : min(cbModelParam._m0[25u].z, _1894));
    float _1975;
    float _1977;
    float _1979;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1942 = fma(_1117, cbModelParam._m0[13u].z, fma(_1113, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1109)) + cbModelParam._m0[13u].w;
        float _1946 = fma(_1117, cbModelParam._m0[14u].z, fma(_1113, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1109)) + cbModelParam._m0[14u].w;
        float _1950 = fma(_1117, cbModelParam._m0[15u].z, fma(_1113, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1109)) + cbModelParam._m0[15u].w;
        float _1953 = fma(_1055, cbModelParam._m0[13u].z, fma(_1054, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1053));
        float _1956 = fma(_1055, cbModelParam._m0[14u].z, fma(_1054, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1053));
        float _1959 = fma(_1055, cbModelParam._m0[15u].z, fma(_1054, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1053));
        float _1987;
        if (_1953 > 0.0)
        {
            _1987 = abs((1.0 - _1942) / _1953);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1953 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1942 + 1.0) / _1953);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1987 = frontier_phi_17_15_ladder;
        }
        float _2210;
        if (_1956 > 0.0)
        {
            _2210 = abs((1.0 - _1946) / _1956);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1956 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1946 + 1.0) / _1956);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2210 = frontier_phi_26_22_ladder;
        }
        float _2467;
        if (_1959 > 0.0)
        {
            _2467 = abs((1.0 - _1950) / _1959);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1959 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1950 + 1.0) / _1959);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2467 = frontier_phi_38_33_ladder;
        }
        float _2469 = isnan(_2210) ? _1987 : (isnan(_1987) ? _2210 : min(_1987, _2210));
        float _2470 = isnan(_2467) ? _2469 : (isnan(_2469) ? _2467 : min(_2469, _2467));
        float _2474 = (_2470 * _1953) + _1942;
        float _2475 = (_2470 * _1956) + _1946;
        float _2476 = (_2470 * _1959) + _1950;
        float _2477 = _2470 * 9.9999997473787516355514526367188e-05;
        float _2479 = (-1.0) - _2477;
        float _2481 = _2477 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2476 > _2481) || ((_2476 < _2479) || ((_2475 > _2481) || ((_2475 < _2479) || ((_2474 < _2479) || (_2474 > _2481))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2604 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2476, cbModelParam._m0[9u].z, fma(_2475, cbModelParam._m0[9u].y, _2474 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2476, cbModelParam._m0[10u].z, fma(_2475, cbModelParam._m0[10u].y, _2474 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2476, cbModelParam._m0[11u].z, fma(_2475, cbModelParam._m0[11u].y, _2474 * cbModelParam._m0[11u].x))), _1895);
            frontier_phi_16_38_ladder = _2604.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2604.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2604.x * cbModelParam._m0[1u].y;
        }
        _1975 = frontier_phi_16_38_ladder_2;
        _1977 = frontier_phi_16_38_ladder_1;
        _1979 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1963 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1053, _1054, _1055), _1895);
        _1975 = _1963.x * cbModelParam._m0[1u].y;
        _1977 = _1963.y * cbModelParam._m0[1u].y;
        _1979 = _1963.z * cbModelParam._m0[1u].y;
    }
    float _1983 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _871);
    float _1984 = isnan(_1983) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1983 : min(cbModelParam._m0[25u].w, _1983));
    float _2073;
    float _2075;
    float _2077;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2037 = fma(_1117, cbModelParam._m0[21u].z, fma(_1113, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1109)) + cbModelParam._m0[21u].w;
        float _2041 = fma(_1117, cbModelParam._m0[22u].z, fma(_1113, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1109)) + cbModelParam._m0[22u].w;
        float _2045 = fma(_1117, cbModelParam._m0[23u].z, fma(_1113, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1109)) + cbModelParam._m0[23u].w;
        float _2048 = fma(_1055, cbModelParam._m0[21u].z, fma(_1054, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1053));
        float _2051 = fma(_1055, cbModelParam._m0[22u].z, fma(_1054, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1053));
        float _2054 = fma(_1055, cbModelParam._m0[23u].z, fma(_1054, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1053));
        float _2215;
        if (_2048 > 0.0)
        {
            _2215 = abs((1.0 - _2037) / _2048);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2048 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2037 + 1.0) / _2048);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2215 = frontier_phi_28_24_ladder;
        }
        float _2494;
        if (_2051 > 0.0)
        {
            _2494 = abs((1.0 - _2041) / _2051);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2051 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2041 + 1.0) / _2051);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2494 = frontier_phi_40_35_ladder;
        }
        float _2707;
        if (_2054 > 0.0)
        {
            _2707 = abs((1.0 - _2045) / _2054);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2054 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2045 + 1.0) / _2054);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2707 = frontier_phi_49_46_ladder;
        }
        float _2709 = isnan(_2494) ? _2215 : (isnan(_2215) ? _2494 : min(_2215, _2494));
        float _2710 = isnan(_2707) ? _2709 : (isnan(_2709) ? _2707 : min(_2709, _2707));
        float _2714 = (_2710 * _2048) + _2037;
        float _2715 = (_2710 * _2051) + _2041;
        float _2716 = (_2710 * _2054) + _2045;
        float _2717 = _2710 * 9.9999997473787516355514526367188e-05;
        float _2718 = (-1.0) - _2717;
        float _2720 = _2717 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2716 > _2720) || ((_2716 < _2718) || ((_2715 > _2720) || ((_2715 < _2718) || ((_2714 < _2718) || (_2714 > _2720))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2915 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2716, cbModelParam._m0[17u].z, fma(_2715, cbModelParam._m0[17u].y, _2714 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2716, cbModelParam._m0[18u].z, fma(_2715, cbModelParam._m0[18u].y, _2714 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2716, cbModelParam._m0[19u].z, fma(_2715, cbModelParam._m0[19u].y, _2714 * cbModelParam._m0[19u].x))), _1984);
            frontier_phi_25_49_ladder = _2915.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2915.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2915.x * cbModelParam._m0[1u].z;
        }
        _2073 = frontier_phi_25_49_ladder_2;
        _2075 = frontier_phi_25_49_ladder_1;
        _2077 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2057 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1053, _1054, _1055), _1984);
        _2073 = _2057.x * cbModelParam._m0[1u].z;
        _2075 = _2057.y * cbModelParam._m0[1u].z;
        _2077 = _2057.z * cbModelParam._m0[1u].z;
    }
    float _2090 = (((_1080 * _1029) + _1081) * _1045) * ((cbModelParam._m0[1u].w * (_2073 - _1975)) + _1975);
    float _2092 = (((_1080 * _1031) + _1081) * _1045) * ((cbModelParam._m0[1u].w * (_2075 - _1977)) + _1977);
    float _2094 = (((_1080 * _1032) + _1081) * _1045) * ((cbModelParam._m0[1u].w * (_2077 - _1979)) + _1979);
    float _2097 = fma(_2094, cbSceneParam._m0[89u].z, fma(_2092, cbSceneParam._m0[89u].y, _2090 * cbSceneParam._m0[89u].x));
    float _2100 = fma(_2094, cbSceneParam._m0[90u].z, fma(_2092, cbSceneParam._m0[90u].y, _2090 * cbSceneParam._m0[90u].x));
    float _2103 = fma(_2094, cbSceneParam._m0[91u].z, fma(_2092, cbSceneParam._m0[91u].y, _2090 * cbSceneParam._m0[91u].x));
    vec4 _2111 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_967, _968));
    float _2113 = _2111.w;
    float _2125 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2113);
    float _2126 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2113);
    float _2127 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2113);
    uvec4 _2131 = floatBitsToUint(cbInstanceData._m0[_263 + 5u]);
    uint _2133 = _2131.x * 14u;
    uint _2134 = _2133 + 13u;
    float _2141 = _1045 + (-1.0);
    float _2146 = (cbLight._m0[_2134].x * _2141) + 1.0;
    float _2147 = (cbLight._m0[_2134].y * _2141) + 1.0;
    float _2148 = (cbLight._m0[_2134].z * _2141) + 1.0;
    float _2149 = (cbLight._m0[_2134].w * _2141) + 1.0;
    uint _2150 = _2133 + 5u;
    float _2156 = isnan(1.0) ? _2147 : (isnan(_2147) ? 1.0 : min(_2147, 1.0));
    uint _2160 = _2133 + 4u;
    float _2169 = isnan(1.0) ? _2146 : (isnan(_2146) ? 1.0 : min(_2146, 1.0));
    uint _2173 = _2133 | 1u;
    float _2184 = dot(vec3(cbLight._m0[_2133].xyz), vec3(_868, _869, _870));
    float _2187 = dot(vec3(cbLight._m0[_2173].xyz), vec3(_868, _869, _870));
    float _4458 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _4469 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _2192 = (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * 0.3183098733425140380859375;
    float _2194 = (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * 0.3183098733425140380859375;
    float _2201 = ((cbLight._m0[_2150].x * _2156) * _2194) + (((cbLight._m0[_2160].x * _2125) * _2169) * _2192);
    float _2202 = ((_2156 * cbLight._m0[_2150].y) * _2194) + (((cbLight._m0[_2160].y * _2126) * _2169) * _2192);
    float _2203 = ((_2156 * cbLight._m0[_2150].z) * _2194) + (((cbLight._m0[_2160].z * _2127) * _2169) * _2192);
    uvec4 _2207 = floatBitsToUint(cbLight._m0[_2133 + 12u]);
    bool _2209 = _2207.x == 0u;
    float _2220;
    float _2222;
    float _2224;
    if (_2209)
    {
        _2220 = _2201;
        _2222 = _2202;
        _2224 = _2203;
    }
    else
    {
        uint _2228 = _2133 + 6u;
        float _2244 = (dot(vec3(cbLight._m0[_2133 + 2u].xyz), vec3(_868, _869, _870)) * 0.5) + 0.5;
        float _2245 = _2244 * _2244;
        float _4480 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        float _2246 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _2247 = isnan(1.0) ? _2148 : (isnan(_2148) ? 1.0 : min(_2148, 1.0));
        _2220 = (((cbLight._m0[_2228].x * 0.3183098733425140380859375) * _2246) * _2247) + _2201;
        _2222 = (((cbLight._m0[_2228].y * 0.3183098733425140380859375) * _2246) * _2247) + _2202;
        _2224 = (((cbLight._m0[_2228].z * 0.3183098733425140380859375) * _2246) * _2247) + _2203;
    }
    bool _2227 = _2207.y == 0u;
    float _2265;
    float _2267;
    float _2269;
    if (_2227)
    {
        _2265 = _2220;
        _2267 = _2222;
        _2269 = _2224;
    }
    else
    {
        uint _2438 = _2133 + 7u;
        float _2454 = (dot(vec3(cbLight._m0[_2133 + 3u].xyz), vec3(_868, _869, _870)) * 0.5) + 0.5;
        float _2455 = _2454 * _2454;
        float _4496 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
        float _2456 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
        float _2457 = isnan(1.0) ? _2149 : (isnan(_2149) ? 1.0 : min(_2149, 1.0));
        _2265 = (((cbLight._m0[_2438].x * 0.3183098733425140380859375) * _2456) * _2457) + _2220;
        _2267 = (((cbLight._m0[_2438].y * 0.3183098733425140380859375) * _2456) * _2457) + _2222;
        _2269 = (((cbLight._m0[_2438].z * 0.3183098733425140380859375) * _2456) * _2457) + _2224;
    }
    uint _2272 = _2133 + 8u;
    float _2285 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2133].w)) * _871) * 0.949999988079071044921875);
    float _2286 = _2285 * _2285;
    float _2287 = cbLight._m0[_2133].x + _947;
    float _2288 = cbLight._m0[_2133].y + _948;
    float _2289 = cbLight._m0[_2133].z + _949;
    float _2293 = inversesqrt(dot(vec3(_2287, _2288, _2289), vec3(_2287, _2288, _2289)));
    float _2294 = _2293 * _2287;
    float _2295 = _2293 * _2288;
    float _2296 = _2293 * _2289;
    float _2297 = dot(vec3(_868, _869, _870), vec3(cbLight._m0[_2133].xyz));
    float _4512 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
    float _2300 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
    float _4523 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
    float _2301 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
    float _2302 = dot(vec3(_868, _869, _870), vec3(_2294, _2295, _2296));
    float _4534 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _2305 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
    float _2306 = dot(vec3(cbLight._m0[_2133].xyz), vec3(_2294, _2295, _2296));
    float _4545 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
    float _2310 = _2286 * _2286;
    float _2314 = ((_2305 * _2305) * (_2310 + (-1.0))) + 1.0;
    float _2322 = exp2(log2(1.0 - (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0)))) * 5.0);
    float _2323 = 0.959999978542327880859375 - _1026;
    float _2325 = 0.959999978542327880859375 - _1027;
    float _2326 = 0.959999978542327880859375 - _1028;
    float _2333 = 1.0 - _2286;
    float _2344 = (0.5 / (((_2301 * ((_2300 * _2333) + _2286)) + 9.9999999392252902907785028219223e-09) + (((_2301 * _2333) + _2286) * _2300))) * _2300;
    float _4556 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2346 = (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (_2310 / ((_2314 * _2314) * 3.141590118408203125));
    uint _2360 = _2133 + 9u;
    float _2371 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2173].w)) * _871) * 0.949999988079071044921875);
    float _2372 = _2371 * _2371;
    float _2373 = cbLight._m0[_2173].x + _947;
    float _2374 = cbLight._m0[_2173].y + _948;
    float _2375 = cbLight._m0[_2173].z + _949;
    float _2379 = inversesqrt(dot(vec3(_2373, _2374, _2375), vec3(_2373, _2374, _2375)));
    float _2380 = _2379 * _2373;
    float _2381 = _2379 * _2374;
    float _2382 = _2379 * _2375;
    float _2383 = dot(vec3(_868, _869, _870), vec3(cbLight._m0[_2173].xyz));
    float _4567 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _2386 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
    float _2387 = dot(vec3(_868, _869, _870), vec3(_2380, _2381, _2382));
    float _4578 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    float _2390 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
    float _2391 = dot(vec3(cbLight._m0[_2173].xyz), vec3(_2380, _2381, _2382));
    float _4589 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2395 = _2372 * _2372;
    float _2399 = ((_2390 * _2390) * (_2395 + (-1.0))) + 1.0;
    float _2406 = exp2(log2(1.0 - (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0)))) * 5.0);
    float _2413 = 1.0 - _2372;
    float _2423 = (0.5 / (((_2301 * ((_2386 * _2413) + _2372)) + 9.9999999392252902907785028219223e-09) + (((_2301 * _2413) + _2372) * _2386))) * _2386;
    float _4600 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
    float _2425 = (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (_2395 / ((_2399 * _2399) * 3.141590118408203125));
    float _2435 = (((((_2406 * _2323) + _1029) * cbLight._m0[_2360].x) * _2425) * _2156) + ((((cbLight._m0[_2272].x * _2125) * ((_2322 * _2323) + _1029)) * _2346) * _2169);
    float _2436 = (((((_2406 * _2325) + _1031) * cbLight._m0[_2360].y) * _2425) * _2156) + ((((cbLight._m0[_2272].y * _2126) * ((_2322 * _2325) + _1031)) * _2346) * _2169);
    float _2437 = (((((_2406 * _2326) + _1032) * cbLight._m0[_2360].z) * _2425) * _2156) + ((((cbLight._m0[_2272].z * _2127) * ((_2322 * _2326) + _1032)) * _2346) * _2169);
    float _2499;
    float _2501;
    float _2503;
    if (_2209)
    {
        _2499 = _2435;
        _2501 = _2436;
        _2503 = _2437;
    }
    else
    {
        uint _2505 = _2133 + 2u;
        uint _2509 = _2133 + 10u;
        float _2523 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2505].w)) * _871) * 0.949999988079071044921875);
        float _2524 = _2523 * _2523;
        float _2525 = cbLight._m0[_2505].x + _947;
        float _2526 = cbLight._m0[_2505].y + _948;
        float _2527 = cbLight._m0[_2505].z + _949;
        float _2531 = inversesqrt(dot(vec3(_2525, _2526, _2527), vec3(_2525, _2526, _2527)));
        float _2532 = _2531 * _2525;
        float _2533 = _2531 * _2526;
        float _2534 = _2531 * _2527;
        float _2535 = dot(vec3(_868, _869, _870), vec3(cbLight._m0[_2505].xyz));
        float _4611 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2538 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
        float _2539 = dot(vec3(_868, _869, _870), vec3(_2532, _2533, _2534));
        float _4622 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        float _2542 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
        float _2543 = dot(vec3(cbLight._m0[_2505].xyz), vec3(_2532, _2533, _2534));
        float _4633 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2547 = _2524 * _2524;
        float _2551 = ((_2542 * _2542) * (_2547 + (-1.0))) + 1.0;
        float _2558 = exp2(log2(1.0 - (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0)))) * 5.0);
        float _2565 = 1.0 - _2524;
        float _2575 = (0.5 / (((_2301 * ((_2538 * _2565) + _2524)) + 9.9999999392252902907785028219223e-09) + (((_2301 * _2565) + _2524) * _2538))) * _2538;
        float _4644 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        float _2577 = (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * (_2547 / ((_2551 * _2551) * 3.141590118408203125));
        float _2578 = isnan(1.0) ? _2148 : (isnan(_2148) ? 1.0 : min(_2148, 1.0));
        _2499 = (((((_2558 * _2323) + _1029) * cbLight._m0[_2509].x) * _2577) * _2578) + _2435;
        _2501 = (((((_2558 * _2325) + _1031) * cbLight._m0[_2509].y) * _2577) * _2578) + _2436;
        _2503 = (((((_2558 * _2326) + _1032) * cbLight._m0[_2509].z) * _2577) * _2578) + _2437;
    }
    float _2613;
    float _2615;
    float _2617;
    if (_2227)
    {
        _2613 = _2499;
        _2615 = _2501;
        _2617 = _2503;
    }
    else
    {
        uint _2624 = _2133 + 3u;
        uint _2628 = _2133 + 11u;
        float _2642 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2624].w)) * _871) * 0.949999988079071044921875);
        float _2643 = _2642 * _2642;
        float _2644 = cbLight._m0[_2624].x + _947;
        float _2645 = cbLight._m0[_2624].y + _948;
        float _2646 = cbLight._m0[_2624].z + _949;
        float _2650 = inversesqrt(dot(vec3(_2644, _2645, _2646), vec3(_2644, _2645, _2646)));
        float _2651 = _2650 * _2644;
        float _2652 = _2650 * _2645;
        float _2653 = _2650 * _2646;
        float _2654 = dot(vec3(_868, _869, _870), vec3(cbLight._m0[_2624].xyz));
        float _4660 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2657 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
        float _2658 = dot(vec3(_868, _869, _870), vec3(_2651, _2652, _2653));
        float _4671 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        float _2661 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
        float _2662 = dot(vec3(cbLight._m0[_2624].xyz), vec3(_2651, _2652, _2653));
        float _4682 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
        float _2666 = _2643 * _2643;
        float _2670 = ((_2661 * _2661) * (_2666 + (-1.0))) + 1.0;
        float _2677 = exp2(log2(1.0 - (isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0)))) * 5.0);
        float _2684 = 1.0 - _2643;
        float _2694 = (0.5 / (((_2301 * ((_2657 * _2684) + _2643)) + 9.9999999392252902907785028219223e-09) + (((_2301 * _2684) + _2643) * _2657))) * _2657;
        float _4693 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
        float _2696 = (isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0))) * (_2666 / ((_2670 * _2670) * 3.141590118408203125));
        float _2697 = isnan(1.0) ? _2149 : (isnan(_2149) ? 1.0 : min(_2149, 1.0));
        _2613 = (((((_2677 * _2323) + _1029) * cbLight._m0[_2628].x) * _2696) * _2697) + _2499;
        _2615 = (((((_2677 * _2325) + _1031) * cbLight._m0[_2628].y) * _2696) * _2697) + _2501;
        _2617 = (((((_2677 * _2326) + _1032) * cbLight._m0[_2628].z) * _2696) * _2697) + _2503;
    }
    float _2832;
    float _2834;
    float _2836;
    float _2838;
    float _2840;
    float _2842;
    if (_2131.y == 0u)
    {
        float _2772 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2773 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2772;
        float _2774 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2772;
        float _2775 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2772;
        uvec4 _2787 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2788 = _2787.x;
        uint _2799 = uint((float(_2787.y) * floor(float(uint(cbSceneParam._m0[85u].y * _968) / _2788))) + floor(float(uint(cbSceneParam._m0[85u].x * _967) / _2788)));
        float _2809 = (log2(_2775 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2810 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
        uint _2813 = uint(isnan(14.0) ? _2810 : (isnan(_2810) ? 14.0 : min(_2810, 14.0)));
        uvec4 _2818 = texelFetch(g_lightClusterGridBuffer, int(((_2813 << 2u) + (_2799 << 6u)) >> 2u));
        uint _2819 = _2818.x;
        uint _2820 = _2787.z;
        float _2920;
        float _2922;
        float _2924;
        float _2926;
        float _2928;
        float _2930;
        if (((((1u << ((_2820 >> 4u) & 15u)) + 4294967295u) & _2819) == 0u) || ((_2820 & 240u) == 0u))
        {
            _2920 = 0.0;
            _2922 = 0.0;
            _2924 = 0.0;
            _2926 = 0.0;
            _2928 = 0.0;
            _2930 = 0.0;
        }
        else
        {
            float _2921;
            float _2923;
            float _2925;
            float _2927;
            float _2929;
            float _2931;
            float _3072 = 0.0;
            float _3073 = 0.0;
            float _3074 = 0.0;
            float _3075 = 0.0;
            float _3076 = 0.0;
            float _3077 = 0.0;
            uint _3078 = 0u;
            uint _3087;
            bool _3088;
            for (;;)
            {
                _3087 = texelFetch(g_lightClassification, int((((_2813 << 5u) + (_2799 << 9u)) + (_3078 << 2u)) >> 2u)).x;
                _3088 = _3087 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3088)
                {
                    frontier_phi_66_pred = _3072;
                    frontier_phi_66_pred_1 = _3077;
                    frontier_phi_66_pred_2 = _3076;
                    frontier_phi_66_pred_3 = _3075;
                    frontier_phi_66_pred_4 = _3074;
                    frontier_phi_66_pred_5 = _3073;
                }
                else
                {
                    float _3217;
                    float _3218;
                    float _3219;
                    float _3220;
                    float _3221;
                    float _3222;
                    uint _3223;
                    _3217 = _3072;
                    _3218 = _3073;
                    _3219 = _3074;
                    _3220 = _3075;
                    _3221 = _3076;
                    _3222 = _3077;
                    _3223 = _3087;
                    float _3144;
                    float _3145;
                    float _3146;
                    float _3147;
                    float _3148;
                    float _3149;
                    for (;;)
                    {
                        uint _3227 = uint(findLSB(_3223)) + (_3078 << 5u);
                        uint _3224 = (_3223 + 4294967295u) & _3223;
                        uint _3229 = _3227 * 48u;
                        vec4 _3243 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3229)).x, texelFetch(g_PointLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3229 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3229 + 3u)).x));
                        uint _3249 = (_3227 * 48u) + 4u;
                        vec4 _3262 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3249)).x, texelFetch(g_PointLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3249 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3249 + 3u)).x));
                        uint _3268 = (_3227 * 48u) + 8u;
                        vec3 _3279 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3268)).x, texelFetch(g_PointLightRenderingBuffer, int(_3268 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3268 + 2u)).x));
                        float _3283 = _3243.x - _2773;
                        float _3284 = _3243.y - _2774;
                        float _3285 = _3243.z - _2775;
                        float _3286 = dot(vec3(_3283, _3284, _3285), vec3(_3283, _3284, _3285));
                        float _3289 = inversesqrt(_3286);
                        float _3290 = _3289 * _3283;
                        float _3291 = _3289 * _3284;
                        float _3292 = _3289 * _3285;
                        float _3293 = dot(vec3(_986, _989, _992), vec3(_3290, _3291, _3292));
                        float _3298 = 1.0 - (_3286 * _3243.w);
                        float _4719 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                        float _3299 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                        float _3300 = sqrt(_3286) * _3262.w;
                        float _3303 = 1.39999997615814208984375 / (_3300 + 1.39999997615814208984375);
                        float _3304 = _3303 * _3303;
                        float _3307 = ((1.0 - _3304) * _3293) + _3304;
                        float _3310 = _3300 * _3300;
                        float _3314 = ((isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0))) * _3299) / ((_3310 * 0.699999988079071044921875) + 1.0);
                        float _3318 = (-0.0) - _2773;
                        float _3319 = (-0.0) - _2774;
                        float _3320 = (-0.0) - _2775;
                        float _3324 = inversesqrt(dot(vec3(_3318, _3319, _3320), vec3(_3318, _3319, _3320)));
                        float _3325 = _3324 * _3318;
                        float _3326 = _3324 * _3319;
                        float _3327 = _3324 * _3320;
                        float _3335 = exp2(log2(1.0 / ((_3310 * 3.5) + 5.0)) * 0.25);
                        float _3336 = 1.0 - _1061;
                        float _3343 = sqrt(1.0 - ((1.0 - (_3336 * _3336)) * (1.0 - (_3335 * _3335))));
                        float _3344 = _3343 * _3343;
                        float _3345 = _3344 * _3344;
                        float _3346 = _3325 + _3290;
                        float _3347 = _3326 + _3291;
                        float _3348 = _3327 + _3292;
                        float _3352 = inversesqrt(dot(vec3(_3346, _3347, _3348), vec3(_3346, _3347, _3348)));
                        float _3356 = dot(vec3(_986, _989, _992), vec3(_3325, _3326, _3327));
                        float _4735 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0));
                        float _3359 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
                        float _3360 = dot(vec3(_986, _989, _992), vec3(_3352 * _3346, _3352 * _3347, _3352 * _3348));
                        float _4746 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                        float _3363 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
                        float _3367 = ((_3363 * _3363) * (_3345 + (-1.0))) + 1.0;
                        float _3368 = _3303 * _3344;
                        float _3369 = _3368 * _3368;
                        float _3372 = ((1.0 - _3369) * _3293) + _3369;
                        float _4757 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                        float _3373 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
                        float _3374 = 1.0 - _3344;
                        float _3384 = (0.5 / (((_3373 * ((_3359 * _3374) + _3344)) + 9.9999999392252902907785028219223e-09) + (((_3373 * _3374) + _3344) * _3359))) * _3373;
                        float _4768 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0));
                        float _3395 = (((_3345 * 3.1415927410125732421875) * (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0)))) / ((_3367 * _3367) * ((_3310 * 2.1991131305694580078125) + 3.141590118408203125))) * _3299;
                        _3147 = (_3314 * _3262.x) + _3220;
                        _3148 = (_3314 * _3262.y) + _3221;
                        _3149 = (_3314 * _3262.z) + _3222;
                        _3144 = (_3395 * _3279.x) + _3217;
                        _3145 = (_3395 * _3279.y) + _3218;
                        _3146 = (_3395 * _3279.z) + _3219;
                        if (_3224 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3217 = _3144;
                            _3218 = _3145;
                            _3219 = _3146;
                            _3220 = _3147;
                            _3221 = _3148;
                            _3222 = _3149;
                            _3223 = _3224;
                        }
                    }
                    frontier_phi_66_pred = _3144;
                    frontier_phi_66_pred_1 = _3149;
                    frontier_phi_66_pred_2 = _3148;
                    frontier_phi_66_pred_3 = _3147;
                    frontier_phi_66_pred_4 = _3146;
                    frontier_phi_66_pred_5 = _3145;
                }
                _2921 = frontier_phi_66_pred;
                _2931 = frontier_phi_66_pred_1;
                _2929 = frontier_phi_66_pred_2;
                _2927 = frontier_phi_66_pred_3;
                _2925 = frontier_phi_66_pred_4;
                _2923 = frontier_phi_66_pred_5;
                uint _3079 = _3078 + 1u;
                if (_3079 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3072 = _2921;
                    _3073 = _2923;
                    _3074 = _2925;
                    _3075 = _2927;
                    _3076 = _2929;
                    _3077 = _2931;
                    _3078 = _3079;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2920 = _2921;
            _2922 = _2923;
            _2924 = _2925;
            _2926 = _2927;
            _2928 = _2929;
            _2930 = _2931;
        }
        uvec4 _2934 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2935 = _2934.z;
        uint _2937 = (_2935 >> 8u) & 15u;
        float _3040;
        float _3042;
        float _3044;
        float _3046;
        float _3048;
        float _3050;
        if (((4294967295u << _2937) & _2819) == 0u)
        {
            _3040 = _2920;
            _3042 = _2922;
            _3044 = _2924;
            _3046 = _2926;
            _3048 = _2928;
            _3050 = _2930;
        }
        else
        {
            float _3065 = inversesqrt(dot(vec3(_2773, _2774, _2775), vec3(_2773, _2774, _2775)));
            float _3066 = _3065 * _2773;
            float _3067 = _3065 * _2774;
            float _3068 = _3065 * _2775;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2937 < ((_2935 >> 12u) & 15u))
            {
                float _3041;
                float _3043;
                float _3045;
                float _3047;
                float _3049;
                float _3051;
                float _3200 = _2920;
                float _3201 = _2922;
                float _3202 = _2924;
                float _3203 = _2926;
                float _3204 = _2928;
                float _3205 = _2930;
                uint _3206 = _2937;
                uint _3215;
                bool _3216;
                for (;;)
                {
                    _3215 = texelFetch(g_lightClassification, int((((_2813 << 5u) + (_2799 << 9u)) + (_3206 << 2u)) >> 2u)).x;
                    _3216 = _3215 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3216)
                    {
                        frontier_phi_77_pred = _3205;
                        frontier_phi_77_pred_1 = _3204;
                        frontier_phi_77_pred_2 = _3203;
                        frontier_phi_77_pred_3 = _3202;
                        frontier_phi_77_pred_4 = _3201;
                        frontier_phi_77_pred_5 = _3200;
                    }
                    else
                    {
                        float _3409;
                        float _3410;
                        float _3411;
                        float _3412;
                        float _3413;
                        float _3414;
                        float _3702;
                        float _3703;
                        float _3704;
                        float _3705;
                        float _3706;
                        float _3707;
                        float _3422 = _3200;
                        float _3423 = _3201;
                        float _3424 = _3202;
                        float _3425 = _3203;
                        float _3426 = _3204;
                        float _3427 = _3205;
                        uint _3428 = _3215;
                        uint _3429;
                        vec4 _3454;
                        float _3455;
                        vec4 _3470;
                        vec3 _3482;
                        vec4 _3497;
                        vec4 _3512;
                        float _3558;
                        bool _3559;
                        for (;;)
                        {
                            uint _3439 = ((_3206 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3428));
                            _3429 = (_3428 + 4294967295u) & _3428;
                            uint _3441 = _3439 * 40u;
                            _3454 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 3u)).x));
                            _3455 = _3454.w;
                            uint _3457 = (_3439 * 40u) + 4u;
                            _3470 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3457)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 3u)).x));
                            uint _3472 = (_3439 * 40u) + 8u;
                            _3482 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3472)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 2u)).x));
                            uint _3484 = (_3439 * 40u) + 16u;
                            _3497 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 3u)).x));
                            uint _3499 = (_3439 * 40u) + 20u;
                            _3512 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3499)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 3u)).x));
                            uint _3514 = (_3439 * 40u) + 24u;
                            vec4 _3527 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3514)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 3u)).x));
                            uint _3533 = (_3439 * 40u) + 28u;
                            vec4 _3546 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3533)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 3u)).x));
                            _3558 = fma(_2775, _3546.z, fma(_2774, _3546.y, _3546.x * _2773)) + _3546.w;
                            _3559 = !((fma(_2775, _3527.z, fma(_2774, _3527.y, _3527.x * _2773)) + _3527.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3559)
                            {
                                float _3586 = _3454.x - _2773;
                                float _3587 = _3454.y - _2774;
                                float _3588 = _3454.z - _2775;
                                float _3589 = dot(vec3(_3586, _3587, _3588), vec3(_3586, _3587, _3588));
                                float _3592 = inversesqrt(_3589);
                                float _3593 = _3592 * _3586;
                                float _3594 = _3592 * _3587;
                                float _3595 = _3592 * _3588;
                                float _3599 = 1.0 - (_3589 / (_3455 * _3455));
                                float _4779 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                                float _3600 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
                                float _3604 = sqrt(_3589) * _3470.w;
                                float _3606 = 1.39999997615814208984375 / (_3604 + 1.39999997615814208984375);
                                float _3607 = _3606 * _3606;
                                float _3610 = ((1.0 - _3607) * dot(vec3(_3593, _3594, _3595), vec3(_986, _989, _992))) + _3607;
                                float _3613 = _3604 * _3604;
                                float _3617 = (fma(_2775, _3497.z, fma(_2774, _3497.y, _3497.x * _2773)) + _3497.w) / _3558;
                                float _3618 = (fma(_2775, _3512.z, fma(_2774, _3512.y, _3512.x * _2773)) + _3512.w) / _3558;
                                float _3622 = 1.0 - dot(vec2(_3617, _3618), vec2(_3617, _3618));
                                float _4795 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                                float _3623 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
                                float _3624 = _3623 * (((isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0))) * _3600) / ((_3613 * 0.699999988079071044921875) + 1.0));
                                float _3636 = exp2(log2(1.0 / ((_3613 * 3.5) + 5.0)) * 0.25);
                                float _3637 = 1.0 - _1061;
                                float _3644 = sqrt(1.0 - ((1.0 - (_3637 * _3637)) * (1.0 - (_3636 * _3636))));
                                float _3645 = _3644 * _3644;
                                float _3646 = _3645 * _3645;
                                float _3647 = _3593 - _3066;
                                float _3648 = _3594 - _3067;
                                float _3649 = _3595 - _3068;
                                float _3653 = inversesqrt(dot(vec3(_3647, _3648, _3649), vec3(_3647, _3648, _3649)));
                                float _3657 = dot(vec3(_986, _989, _992), vec3((-0.0) - _3066, (-0.0) - _3067, (-0.0) - _3068));
                                float _4806 = isnan(0.0) ? _3657 : (isnan(_3657) ? 0.0 : max(_3657, 0.0));
                                float _3660 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
                                float _3661 = dot(vec3(_986, _989, _992), vec3(_3653 * _3647, _3653 * _3648, _3653 * _3649));
                                float _4817 = isnan(0.0) ? _3661 : (isnan(_3661) ? 0.0 : max(_3661, 0.0));
                                float _3664 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
                                float _3668 = ((_3664 * _3664) * (_3646 + (-1.0))) + 1.0;
                                float _3669 = _3606 * _3645;
                                float _3670 = _3669 * _3669;
                                float _3676 = ((1.0 - _3670) * dot(vec3(_986, _989, _992), vec3(_3593, _3594, _3595))) + _3670;
                                float _4828 = isnan(0.0) ? _3676 : (isnan(_3676) ? 0.0 : max(_3676, 0.0));
                                float _3677 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
                                float _3678 = 1.0 - _3645;
                                float _3688 = (0.5 / (((_3677 * ((_3660 * _3678) + _3645)) + 9.9999999392252902907785028219223e-09) + (((_3677 * _3678) + _3645) * _3660))) * _3677;
                                float _4839 = isnan(0.0) ? _3688 : (isnan(_3688) ? 0.0 : max(_3688, 0.0));
                                float _3698 = (_3623 * _3600) * (((_3646 * 3.1415927410125732421875) * (isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0)))) / ((_3668 * _3668) * ((_3613 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3624 * _3470.y;
                                frontier_phi_83_pred_1 = _3624 * _3470.x;
                                frontier_phi_83_pred_2 = _3698 * _3482.z;
                                frontier_phi_83_pred_3 = _3698 * _3482.y;
                                frontier_phi_83_pred_4 = _3698 * _3482.x;
                                frontier_phi_83_pred_5 = _3624 * _3470.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3706 = frontier_phi_83_pred;
                            _3705 = frontier_phi_83_pred_1;
                            _3704 = frontier_phi_83_pred_2;
                            _3703 = frontier_phi_83_pred_3;
                            _3702 = frontier_phi_83_pred_4;
                            _3707 = frontier_phi_83_pred_5;
                            _3412 = _3705 + _3425;
                            _3413 = _3706 + _3426;
                            _3414 = _3707 + _3427;
                            _3409 = _3702 + _3422;
                            _3410 = _3703 + _3423;
                            _3411 = _3704 + _3424;
                            if (_3429 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3422 = _3409;
                                _3423 = _3410;
                                _3424 = _3411;
                                _3425 = _3412;
                                _3426 = _3413;
                                _3427 = _3414;
                                _3428 = _3429;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3414;
                        frontier_phi_77_pred_1 = _3413;
                        frontier_phi_77_pred_2 = _3412;
                        frontier_phi_77_pred_3 = _3411;
                        frontier_phi_77_pred_4 = _3410;
                        frontier_phi_77_pred_5 = _3409;
                    }
                    _3051 = frontier_phi_77_pred;
                    _3049 = frontier_phi_77_pred_1;
                    _3047 = frontier_phi_77_pred_2;
                    _3045 = frontier_phi_77_pred_3;
                    _3043 = frontier_phi_77_pred_4;
                    _3041 = frontier_phi_77_pred_5;
                    uint _3207 = _3206 + 1u;
                    if (_3207 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3200 = _3041;
                        _3201 = _3043;
                        _3202 = _3045;
                        _3203 = _3047;
                        _3204 = _3049;
                        _3205 = _3051;
                        _3206 = _3207;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3045;
                frontier_phi_58_59_ladder_1 = _3051;
                frontier_phi_58_59_ladder_2 = _3049;
                frontier_phi_58_59_ladder_3 = _3047;
                frontier_phi_58_59_ladder_4 = _3043;
                frontier_phi_58_59_ladder_5 = _3041;
            }
            else
            {
                frontier_phi_58_59_ladder = _2924;
                frontier_phi_58_59_ladder_1 = _2930;
                frontier_phi_58_59_ladder_2 = _2928;
                frontier_phi_58_59_ladder_3 = _2926;
                frontier_phi_58_59_ladder_4 = _2922;
                frontier_phi_58_59_ladder_5 = _2920;
            }
            _3040 = frontier_phi_58_59_ladder_5;
            _3042 = frontier_phi_58_59_ladder_4;
            _3044 = frontier_phi_58_59_ladder;
            _3046 = frontier_phi_58_59_ladder_3;
            _3048 = frontier_phi_58_59_ladder_2;
            _3050 = frontier_phi_58_59_ladder_1;
        }
        float _3055 = isnan(1.0) ? _1045 : (isnan(_1045) ? 1.0 : min(_1045, 1.0));
        _2832 = (_3055 * _3046) + _2265;
        _2834 = (_3055 * _3048) + _2267;
        _2836 = (_3055 * _3050) + _2269;
        _2838 = ((_3040 * _1029) * _3055) + _2613;
        _2840 = ((_3042 * _1031) * _3055) + _2615;
        _2842 = ((_3044 * _1032) * _3055) + _2617;
    }
    else
    {
        _2832 = _2265;
        _2834 = _2267;
        _2836 = _2269;
        _2838 = _2613;
        _2840 = _2615;
        _2842 = _2617;
    }
    float _4855 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
    float _4866 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
    float _4877 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
    float _2859 = ((isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0))) * (_2832 + ((isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0))) * _1045))) + ((_2838 + ((isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0))) * _1884)) * cbPerFrame._m0[3u].x);
    float _2860 = ((isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0))) * (_2834 + ((isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0))) * _1045))) + ((_2840 + ((isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0))) * _1884)) * cbPerFrame._m0[3u].x);
    float _2861 = ((isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0))) * (_2836 + ((isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))) * _1045))) + ((_2842 + ((isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0))) * _1884)) * cbPerFrame._m0[3u].x);
    uint _2862 = _263 + 6u;
    float _2870 = _967 / cbSceneParam._m0[86u].x;
    float _2871 = _968 / cbSceneParam._m0[86u].y;
    vec4 _2885 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2870, _2871, (log2((isnan(cbSceneParam._m0[77u].w) ? _890 : (isnan(_890) ? cbSceneParam._m0[77u].w : min(_890, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2887 = _2885.x;
    float _2888 = _2885.y;
    float _2889 = _2885.z;
    float _2890 = _2885.w;
    float _2982;
    float _2984;
    float _2986;
    float _2988;
    if (_890 > cbSceneParam._m0[78u].w)
    {
        float _2945 = isnan(_890) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _890 : min(cbSceneParam._m0[80u].w, _890));
        float _2946 = _2945 / _890;
        float _2957 = _2946 * _940;
        float _2958 = _941 * _2946;
        float _2959 = (-0.0) - _2958;
        float _2960 = _2946 * _942;
        float _2962 = (cbSceneParam._m0[77u].w * _2959) / _2945;
        float _2963 = _2962 + cbSceneParam._m0[79u].w;
        float _2964 = cbSceneParam._m0[79u].w - _2958;
        float _2970 = sqrt(((_2957 * _2957) + (_2958 * _2958)) + (_2960 * _2960));
        float _2973 = (1.0 - (cbSceneParam._m0[77u].w / _2945)) * _2970;
        float _2978 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2980 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3157;
        if (abs((_2959 - _2962) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3157 = ((((_2963 > 0.0) ? exp2(_2978 * _2963) : (2.0 - exp2(_2980 * _2963))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2973;
        }
        else
        {
            float _3101 = 1.0 / cbSceneParam._m0[80u].x;
            float _3102 = isnan(_2964) ? _2963 : (isnan(_2963) ? _2964 : max(_2963, _2964));
            float _3103 = isnan(_2964) ? _2963 : (isnan(_2963) ? _2964 : min(_2963, _2964));
            float _3112 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : min(_3102, 0.0));
            float _3113 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : min(_3103, 0.0));
            _3157 = ((abs(_2970 / _2959) * cbSceneParam._m0[80u].y) * ((((_3112 - _3113) * 2.0) - ((exp2(_2978 * (isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0)))) - exp2(_2978 * (isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0))))) * _3101)) - ((exp2(_2980 * _3112) - exp2(_2980 * _3113)) * _3101))) + (_2973 * cbSceneParam._m0[80u].z);
        }
        vec4 _3159 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2870, _2871, 1.0), 0.0);
        float _3168 = exp2((_3157 * (-1.44269502162933349609375)) * (1.0 - _3159.w));
        float _3169 = log2(_3168);
        float _3185 = log2(_2890);
        _2982 = (exp2(_3185 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3169 * cbSceneParam._m0[78u].x)) * _3159.x) / cbSceneParam._m0[78u].x)) + _2887;
        _2984 = (exp2(_3185 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3169 * cbSceneParam._m0[78u].y)) * _3159.y) / cbSceneParam._m0[78u].y)) + _2888;
        _2986 = (exp2(_3185 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3169 * cbSceneParam._m0[78u].z)) * _3159.z) / cbSceneParam._m0[78u].z)) + _2889;
        _2988 = _3168 * _2890;
    }
    else
    {
        _2982 = _2887;
        _2984 = _2888;
        _2986 = _2889;
        _2988 = _2890;
    }
    bool _3195;
    vec4 _2998;
    vec4 _3020;
    float _3022;
    float _3026;
    float _3027;
    float _3028;
    float _3029;
    bool _3039;
    for (;;)
    {
        _2998 = cbMatDynParam._m0[0u];
        float _3000 = roundEven(_2998.y);
        bool _3001 = _3000 == 3.0;
        float _3002 = log2(_2988);
        float _3009 = exp2(_3002 * cbSceneParam._m0[78u].x) * _2859;
        float _3010 = exp2(_3002 * cbSceneParam._m0[78u].y) * _2860;
        float _3011 = exp2(_3002 * cbSceneParam._m0[78u].z) * _2861;
        float _3018 = _956 + (-0.5);
        _3020 = cbMtdParam._m0[1u];
        _3022 = _3020.y * _3018;
        float _3025 = (_3000 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3026 = _3025 * (_3001 ? _3009 : (_3009 + (cbSceneParam._m0[72u].w * _2982)));
        _3027 = _3025 * (_3001 ? _3010 : (_3010 + (cbSceneParam._m0[72u].w * _2984)));
        _3028 = _3025 * (_3001 ? _3011 : (_3011 + (cbSceneParam._m0[72u].w * _2986)));
        _3029 = _3018 * 0.999000012874603271484375;
        _3039 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3039)
        {
            if ((cbInstanceData._m0[_263 + 7u].x + _3029) < 0.5)
            {
                _3195 = true;
                break;
            }
        }
        uint _3136 = _1005 + uint(_2998.w);
        if ((cbInstanceData._m0[_3136].w < 1.0) && ((cbInstanceData._m0[_3136].w + _3029) < 0.5))
        {
            _3195 = true;
            break;
        }
        if ((_3022 + 1.0) < _3020.x)
        {
            _3195 = true;
            break;
        }
        _3195 = false;
        break;
    }
    float _3400;
    if (_3195)
    {
        discard_state = true;
        _3400 = 0.0;
    }
    else
    {
        _3400 = cbInstanceData._m0[_2862].w;
    }
    SV_Target.x = _3026;
    SV_Target.y = _3027;
    SV_Target.z = _3028;
    SV_Target.w = _3400;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2862].w;
    discard_exit();
}


