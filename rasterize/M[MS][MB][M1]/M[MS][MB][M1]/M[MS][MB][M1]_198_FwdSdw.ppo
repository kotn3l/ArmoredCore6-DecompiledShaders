#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1357;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _254 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _254 + 1u;
    uint _264 = _254 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _361 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _363 = _361.x;
    float _375 = dot(vec4(_363, _361.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _392 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_363 - _375) * cbMtdParam._m0[24u].y) + _375) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3964 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _393 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _400 = (_393 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _401 = (_393 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _402 = (_393 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _419 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _274) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _275) + cbTextureTilingScale._m0[3u].w));
    vec4 _439 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _441 = _439.x;
    float _451 = dot(vec4(_441, _439.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _465 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_441 - _451) * cbMtdParam._m0[24u].y) + _451) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3975 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _466 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _473 = (_466 * ((_419.x * cbMtdParam._m0[13u].x) - _400)) + _400;
    float _474 = (_466 * ((_419.y * cbMtdParam._m0[13u].y) - _401)) + _401;
    float _475 = (_466 * ((_419.z * cbMtdParam._m0[13u].z) - _402)) + _402;
    vec4 _494 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _274) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _275) + cbTextureTilingScale._m0[14u].w));
    vec4 _513 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _274) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _275) + cbTextureTilingScale._m0[20u].w));
    vec4 _536 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _553 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _555 = _553.x;
    float _556 = _553.y;
    float _557 = _553.z;
    float _564 = ((_536.x - _555) * _393) + _555;
    float _565 = ((_536.y - _556) * _393) + _556;
    float _566 = ((_536.z - _557) * _393) + _557;
    vec4 _578 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _274) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _275) + cbTextureTilingScale._m0[2u].w));
    float _591 = ((_578.z - _566) * _466) + _566;
    float _594 = ((((_578.x - _564) * _466) + _564) * 2.0) + (-1.0);
    float _595 = ((((_578.y - _565) * _466) + _565) * 2.0) + (-1.0);
    float _596 = dot(vec2(_594, _595), vec2(_594, _595));
    float _3986 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _601 = sqrt(1.0 - (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))));
    vec4 _615 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _640 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _642 = _640.x;
    float _643 = 1.0 - _642;
    float _656 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_642 - _643) * cbMtdParam._m0[24u].z) + _643) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3997 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _657 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _664 = (_657 * ((_494.x * cbMtdParam._m0[18u].x) - _473)) + _473;
    float _665 = (_657 * ((_494.y * cbMtdParam._m0[18u].y) - _474)) + _474;
    float _666 = (_657 * ((_494.z * cbMtdParam._m0[18u].z) - _475)) + _475;
    vec4 _678 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _692 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _694 = _692.x;
    float _712 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _274) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _275) + cbTextureTilingScale._m0[9u].w)).x - _694) * _393) + _694;
    float _729 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _274) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _275) + cbTextureTilingScale._m0[21u].w)).x - _712) * _466) + _712;
    float _733 = ((_678.x - _729) * cbMtdParam._m0[19u].z) + _729;
    float _735 = _733 - (_733 * _657);
    float _740 = (((_513.z - _591) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _591;
    float _744 = ((_615.z - _740) * cbMtdParam._m0[19u].w) + _740;
    vec4 _757 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _764 = (_757.x * 2.0) + (-1.0);
    float _765 = (_757.y * 2.0) + (-1.0);
    float _766 = dot(vec2(_764, _765), vec2(_764, _765));
    float _4008 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _774 = (_657 * (_757.z - _744)) + _744;
    float _783 = (_594 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_513.x * 2.0) + (-1.0)))) + (((_615.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _784 = (_595 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_513.y * 2.0) + (-1.0)))) + (((_615.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _796 = (((_764 - _783) + (cbMtdParam._m0[21u].x * _783)) * _657) + _783;
    float _797 = (((_765 - _784) + (cbMtdParam._m0[21u].x * _784)) * _657) + _784;
    float _798 = (_657 * (sqrt(1.0 - (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) - _601)) + _601;
    float _803 = cbMtdParam._m0[22u].x + _615.w;
    float _806 = fma(_798, _241 * NORMAL.x, fma(_797, _248 * TANGENT.x, (_234 * _226) * _796));
    float _809 = fma(_798, _241 * NORMAL.y, fma(_797, _248 * TANGENT.y, (_234 * _227) * _796));
    float _812 = fma(_798, _241 * NORMAL.z, fma(_797, _248 * TANGENT.z, (_234 * _228) * _796));
    float _816 = inversesqrt(dot(vec3(_806, _809, _812), vec3(_806, _809, _812)));
    float _817 = _816 * _806;
    float _818 = _816 * _809;
    float _819 = _816 * _812;
    float _4019 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _820 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _4030 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _4041 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _4052 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _4063 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _4074 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _825 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _839 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _880 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _890 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _880);
    float _891 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _880);
    float _892 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _880);
    float _896 = inversesqrt(dot(vec3(_890, _891, _892), vec3(_890, _891, _892)));
    float _897 = _890 * _896;
    float _898 = _891 * _896;
    float _899 = _892 * _896;
    float _905 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _906 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _924 = fma(_819, cbSceneParam._m0[5u].z, fma(_818, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _817));
    float _927 = fma(_819, cbSceneParam._m0[6u].z, fma(_818, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _817));
    float _930 = fma(_819, cbSceneParam._m0[7u].z, fma(_818, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _817));
    uint _944 = (_254 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _950 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) * cbInstanceData._m0[_944].x;
    float _951 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) * cbInstanceData._m0[_944].y;
    float _952 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0)))) * cbInstanceData._m0[_944].z;
    float _4085 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _953 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _4096 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _954 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _4107 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _955 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _956 = 1.0 - _825;
    float _957 = _953 * _956;
    float _958 = _954 * _956;
    float _959 = _955 * _956;
    float _964 = (_953 + (-0.039999999105930328369140625)) * _825;
    float _965 = (_954 + (-0.039999999105930328369140625)) * _825;
    float _966 = (_955 + (-0.039999999105930328369140625)) * _825;
    float _967 = _964 + 0.039999999105930328369140625;
    float _969 = _965 + 0.039999999105930328369140625;
    float _970 = _966 + 0.039999999105930328369140625;
    vec4 _979 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _905, cbSceneParam._m0[86u].y * _906));
    float _983 = ((isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * TEXCOORD_5.w) * _979.x;
    float _984 = dot(vec3(_817, _818, _819), vec3(_897, _898, _899));
    float _987 = _984 * 2.0;
    float _991 = (_987 * _817) - _897;
    float _992 = (_987 * _818) - _898;
    float _993 = (_987 * _819) - _899;
    float _997 = abs(dot(vec3(_897, _898, _899), vec3(_817, _818, _819)));
    float _4118 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _999 = sqrt(_820);
    float _1012 = exp2((_999 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_999 * 3.0));
    float _1018 = (1.0 - _1012) * ((_999 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1019 = _1012 * _999;
    float _1047 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1051 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1055 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1356;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1081 = fma(_1055, cbModelParam._m0[26u].z, fma(_1051, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1047));
        float _1085 = fma(_1055, cbModelParam._m0[27u].z, fma(_1051, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1047));
        float _1089 = fma(_1055, cbModelParam._m0[28u].z, fma(_1051, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1047));
        float _1114 = _1047 + _817;
        float _1115 = _1051 + _818;
        float _1116 = _1055 + _819;
        float _1126 = fma(_1116, cbModelParam._m0[26u].z, fma(_1115, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1114)) - _1081;
        float _1127 = fma(_1116, cbModelParam._m0[27u].z, fma(_1115, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1114)) - _1085;
        float _1128 = fma(_1116, cbModelParam._m0[28u].z, fma(_1115, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1114)) - _1089;
        float _1132 = inversesqrt(dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128)));
        float _1145 = ((_1132 * _1126) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1081 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1146 = ((_1132 * _1127) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1085 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1147 = ((_1132 * _1128) / cbModelParam._m0[34u].z) + ((((((_1089 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1157 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1164 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        float _1184 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1150.x + (-0.5));
        float _1186 = _1184 * (_1150.y + (-0.5));
        float _1187 = _1184 * (_1150.z + (-0.5));
        float _1194 = exp2((_1157.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1157.x + (-0.5));
        float _1196 = _1194 * (_1157.y + (-0.5));
        float _1197 = _1194 * (_1157.z + (-0.5));
        float _1204 = exp2((_1164.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1164.x + (-0.5));
        float _1206 = _1204 * (_1164.y + (-0.5));
        float _1207 = _1204 * (_1164.z + (-0.5));
        float _1214 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1171.x + (-0.5));
        float _1216 = _1214 * (_1171.y + (-0.5));
        float _1217 = _1214 * (_1171.z + (-0.5));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = _1185 * 0.5;
        float _1222 = _1195 * 0.5;
        float _1223 = _1205 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1238 = (dot(vec3(_817, _818, _819), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _4144 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1248 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _4155 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _4166 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_1250 + 1.0))) + _1255) * _1218;
        float _1265 = _1186 * 0.5;
        float _1266 = _1196 * 0.5;
        float _1267 = _1206 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1281 = (dot(vec3(_817, _818, _819), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _4177 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1290 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _4188 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _4199 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1292 + 1.0))) + _1297) * _1219;
        float _1307 = _1187 * 0.5;
        float _1308 = _1197 * 0.5;
        float _1309 = _1207 * 0.5;
        float _1310 = dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309));
        float _1315 = (_1310 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1310);
        float _1323 = (dot(vec3(_817, _818, _819), vec3(_1315 * _1307, _1315 * _1308, _1315 * _1309)) + 1.0) * 0.5;
        float _4210 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1332 = sqrt(((_1308 * _1308) + (_1307 * _1307)) + (_1309 * _1309)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _4221 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1334 = _1333 * 2.0;
        float _1338 = (1.0 - _1333) / (_1333 + 1.0);
        float _4232 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1348 = ((((1.0 - _1339) * (_1334 + 2.0)) * exp2(log2(isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_1334 + 1.0))) + _1339) * _1220;
        _1356 = _1187;
        _1358 = _1186;
        _1359 = _1185;
        _1360 = _1197;
        _1361 = _1196;
        _1362 = _1195;
        _1363 = _1207;
        _1364 = _1206;
        _1365 = _1205;
        _1366 = _1220;
        _1367 = _1219;
        _1368 = _1218;
        _1369 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
        _1370 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
        _1371 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)));
    }
    else
    {
        _1356 = _1357;
        _1358 = _1357;
        _1359 = _1357;
        _1360 = _1357;
        _1361 = _1357;
        _1362 = _1357;
        _1363 = _1357;
        _1364 = _1357;
        _1365 = _1357;
        _1366 = _1357;
        _1367 = _1357;
        _1368 = _1357;
        _1369 = 0.0;
        _1370 = 0.0;
        _1371 = 0.0;
    }
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1395 = fma(_1055, cbModelParam._m0[30u].z, fma(_1051, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1047));
        float _1399 = fma(_1055, cbModelParam._m0[31u].z, fma(_1051, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1047));
        float _1403 = fma(_1055, cbModelParam._m0[32u].z, fma(_1051, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1047));
        float _1426 = _1047 + _817;
        float _1427 = _1051 + _818;
        float _1428 = _1055 + _819;
        float _1438 = fma(_1428, cbModelParam._m0[30u].z, fma(_1427, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1426)) - _1395;
        float _1439 = fma(_1428, cbModelParam._m0[31u].z, fma(_1427, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1426)) - _1399;
        float _1440 = fma(_1428, cbModelParam._m0[32u].z, fma(_1427, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1426)) - _1403;
        float _1444 = inversesqrt(dot(vec3(_1438, _1439, _1440), vec3(_1438, _1439, _1440)));
        float _1457 = ((_1444 * _1438) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1395 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1458 = ((_1444 * _1439) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1399 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1459 = ((_1444 * _1440) / cbModelParam._m0[35u].z) + ((((((_1403 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1461 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1457, _1458, _1459), 0.0);
        vec4 _1468 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1457, _1458, _1459), 0.0);
        vec4 _1475 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1457, _1458, _1459), 0.0);
        vec4 _1482 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1457, _1458, _1459), 0.0);
        float _1494 = exp2((_1461.w + (-0.5)) * 20.0) * 2.0;
        float _1495 = _1494 * (_1461.x + (-0.5));
        float _1496 = _1494 * (_1461.y + (-0.5));
        float _1497 = _1494 * (_1461.z + (-0.5));
        float _1504 = exp2((_1468.w + (-0.5)) * 20.0) * 2.0;
        float _1505 = _1504 * (_1468.x + (-0.5));
        float _1506 = _1504 * (_1468.y + (-0.5));
        float _1507 = _1504 * (_1468.z + (-0.5));
        float _1514 = exp2((_1475.w + (-0.5)) * 20.0) * 2.0;
        float _1515 = _1514 * (_1475.x + (-0.5));
        float _1516 = _1514 * (_1475.y + (-0.5));
        float _1517 = _1514 * (_1475.z + (-0.5));
        float _1524 = exp2((_1482.w + (-0.5)) * 20.0) * 2.0;
        float _1525 = _1524 * (_1482.x + (-0.5));
        float _1526 = _1524 * (_1482.y + (-0.5));
        float _1527 = _1524 * (_1482.z + (-0.5));
        float _1528 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1529 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1530 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1531 = _1495 * 0.5;
        float _1532 = _1505 * 0.5;
        float _1533 = _1515 * 0.5;
        float _1534 = dot(vec3(_1531, _1532, _1533), vec3(_1531, _1532, _1533));
        float _1539 = (_1534 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1534);
        float _1547 = (dot(vec3(_817, _818, _819), vec3(_1539 * _1531, _1539 * _1532, _1539 * _1533)) + 1.0) * 0.5;
        float _4273 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1556 = sqrt(((_1532 * _1532) + (_1531 * _1531)) + (_1533 * _1533)) / (_1528 + 9.9999997473787516355514526367188e-06);
        float _4284 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1558 = _1557 * 2.0;
        float _1562 = (1.0 - _1557) / (_1557 + 1.0);
        float _4295 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1572 = ((((1.0 - _1563) * (_1558 + 2.0)) * exp2(log2(isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_1558 + 1.0))) + _1563) * _1528;
        float _1573 = _1496 * 0.5;
        float _1574 = _1506 * 0.5;
        float _1575 = _1516 * 0.5;
        float _1576 = dot(vec3(_1573, _1574, _1575), vec3(_1573, _1574, _1575));
        float _1581 = (_1576 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1576);
        float _1589 = (dot(vec3(_817, _818, _819), vec3(_1581 * _1573, _1581 * _1574, _1581 * _1575)) + 1.0) * 0.5;
        float _4306 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1598 = sqrt(((_1574 * _1574) + (_1573 * _1573)) + (_1575 * _1575)) / (_1529 + 9.9999997473787516355514526367188e-06);
        float _4317 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1600 = _1599 * 2.0;
        float _1604 = (1.0 - _1599) / (_1599 + 1.0);
        float _4328 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1605 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1614 = ((((1.0 - _1605) * (_1600 + 2.0)) * exp2(log2(isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_1600 + 1.0))) + _1605) * _1529;
        float _1615 = _1497 * 0.5;
        float _1616 = _1507 * 0.5;
        float _1617 = _1517 * 0.5;
        float _1618 = dot(vec3(_1615, _1616, _1617), vec3(_1615, _1616, _1617));
        float _1623 = (_1618 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1618);
        float _1631 = (dot(vec3(_817, _818, _819), vec3(_1623 * _1615, _1623 * _1616, _1623 * _1617)) + 1.0) * 0.5;
        float _4339 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1640 = sqrt(((_1616 * _1616) + (_1615 * _1615)) + (_1617 * _1617)) / (_1530 + 9.9999997473787516355514526367188e-06);
        float _4350 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _1642 = _1641 * 2.0;
        float _1646 = (1.0 - _1641) / (_1641 + 1.0);
        float _4361 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1647 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1656 = ((((1.0 - _1647) * (_1642 + 2.0)) * exp2(log2(isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_1642 + 1.0))) + _1647) * _1530;
        _1664 = _1497;
        _1665 = _1496;
        _1666 = _1495;
        _1667 = _1507;
        _1668 = _1506;
        _1669 = _1505;
        _1670 = _1517;
        _1671 = _1516;
        _1672 = _1515;
        _1673 = _1530;
        _1674 = _1529;
        _1675 = _1528;
        _1676 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)));
        _1677 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)));
        _1678 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)));
    }
    else
    {
        _1664 = _1357;
        _1665 = _1357;
        _1666 = _1357;
        _1667 = _1357;
        _1668 = _1357;
        _1669 = _1357;
        _1670 = _1357;
        _1671 = _1357;
        _1672 = _1357;
        _1673 = _1357;
        _1674 = _1357;
        _1675 = _1357;
        _1676 = 0.0;
        _1677 = 0.0;
        _1678 = 0.0;
    }
    float _1688 = (cbModelParam._m0[1u].x * (_1676 - _1369)) + _1369;
    float _1689 = (cbModelParam._m0[1u].x * (_1677 - _1370)) + _1370;
    float _1690 = (cbModelParam._m0[1u].x * (_1678 - _1371)) + _1371;
    float _1711 = fma(_1690, cbSceneParam._m0[89u].z, fma(_1689, cbSceneParam._m0[89u].y, _1688 * cbSceneParam._m0[89u].x));
    float _1714 = fma(_1690, cbSceneParam._m0[90u].z, fma(_1689, cbSceneParam._m0[90u].y, _1688 * cbSceneParam._m0[90u].x));
    float _1717 = fma(_1690, cbSceneParam._m0[91u].z, fma(_1689, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1688));
    float _1732 = _991 * 0.5;
    float _1733 = _992 * 0.5;
    float _1734 = _993 * 0.5;
    float _1735 = dot(vec4(_1732, _1733, _1734, 1.0), vec4(_1666, _1669, _1672, _1675));
    float _1738 = dot(vec4(_1732, _1733, _1734, 1.0), vec4(_1665, _1668, _1671, _1674));
    float _1741 = dot(vec4(_1732, _1733, _1734, 1.0), vec4(_1664, _1667, _1670, _1673));
    float _1775;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1748 = dot(vec4(_1732, _1733, _1734, 1.0), vec4(_1356, _1360, _1363, _1366));
        float _1752 = dot(vec4(_1732, _1733, _1734, 1.0), vec4(_1358, _1361, _1364, _1367));
        float _1756 = dot(vec4(_1732, _1733, _1734, 1.0), vec4(_1359, _1362, _1365, _1368));
        float _1763 = dot(vec4(cbModelParam._m0[39u]), vec4(_1732, _1733, _1734, 1.0));
        _1775 = dot(vec3(isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0)), isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0)), isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1763) ? 0.0 : (isnan(0.0) ? _1763 : max(0.0, _1763))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1775 = 1.0;
    }
    float _1786;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1777 = dot(vec4(cbModelParam._m0[40u]), vec4(_1732, _1733, _1734, 1.0));
        _1786 = dot(vec3(isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0)), isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0)), isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1777) ? 0.0 : (isnan(0.0) ? _1777 : max(0.0, _1777))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1786 = 1.0;
    }
    float _1790 = (_1786 * cbModelParam._m0[1u].x) + (_1775 * (1.0 - cbModelParam._m0[1u].x));
    float _1800 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _820);
    float _1801 = isnan(_1800) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1800 : min(cbModelParam._m0[25u].z, _1800));
    float _1881;
    float _1883;
    float _1885;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1848 = fma(_1055, cbModelParam._m0[13u].z, fma(_1051, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1047)) + cbModelParam._m0[13u].w;
        float _1852 = fma(_1055, cbModelParam._m0[14u].z, fma(_1051, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1047)) + cbModelParam._m0[14u].w;
        float _1856 = fma(_1055, cbModelParam._m0[15u].z, fma(_1051, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1047)) + cbModelParam._m0[15u].w;
        float _1859 = fma(_993, cbModelParam._m0[13u].z, fma(_992, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _991));
        float _1862 = fma(_993, cbModelParam._m0[14u].z, fma(_992, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _991));
        float _1865 = fma(_993, cbModelParam._m0[15u].z, fma(_992, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _991));
        float _1893;
        if (_1859 > 0.0)
        {
            _1893 = abs((1.0 - _1848) / _1859);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1859 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1848 + 1.0) / _1859);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1893 = frontier_phi_14_12_ladder;
        }
        float _2064;
        if (_1862 > 0.0)
        {
            _2064 = abs((1.0 - _1852) / _1862);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1862 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1852 + 1.0) / _1862);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2064 = frontier_phi_23_19_ladder;
        }
        float _2359;
        if (_1865 > 0.0)
        {
            _2359 = abs((1.0 - _1856) / _1865);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1865 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1856 + 1.0) / _1865);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2359 = frontier_phi_35_30_ladder;
        }
        float _2361 = isnan(_2064) ? _1893 : (isnan(_1893) ? _2064 : min(_1893, _2064));
        float _2362 = isnan(_2359) ? _2361 : (isnan(_2361) ? _2359 : min(_2361, _2359));
        float _2366 = (_2362 * _1859) + _1848;
        float _2367 = (_2362 * _1862) + _1852;
        float _2368 = (_2362 * _1865) + _1856;
        float _2369 = _2362 * 9.9999997473787516355514526367188e-05;
        float _2371 = (-1.0) - _2369;
        float _2373 = _2369 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2368 > _2373) || ((_2368 < _2371) || ((_2367 > _2373) || ((_2367 < _2371) || ((_2366 < _2371) || (_2366 > _2373))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2513 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2368, cbModelParam._m0[9u].z, fma(_2367, cbModelParam._m0[9u].y, _2366 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2368, cbModelParam._m0[10u].z, fma(_2367, cbModelParam._m0[10u].y, _2366 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2368, cbModelParam._m0[11u].z, fma(_2367, cbModelParam._m0[11u].y, _2366 * cbModelParam._m0[11u].x))), _1801);
            frontier_phi_13_35_ladder = _2513.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2513.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2513.x * cbModelParam._m0[1u].y;
        }
        _1881 = frontier_phi_13_35_ladder_2;
        _1883 = frontier_phi_13_35_ladder_1;
        _1885 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1869 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_991, _992, _993), _1801);
        _1881 = _1869.x * cbModelParam._m0[1u].y;
        _1883 = _1869.y * cbModelParam._m0[1u].y;
        _1885 = _1869.z * cbModelParam._m0[1u].y;
    }
    float _1889 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _820);
    float _1890 = isnan(_1889) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1889 : min(cbModelParam._m0[25u].w, _1889));
    float _1979;
    float _1981;
    float _1983;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1943 = fma(_1055, cbModelParam._m0[21u].z, fma(_1051, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1047)) + cbModelParam._m0[21u].w;
        float _1947 = fma(_1055, cbModelParam._m0[22u].z, fma(_1051, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1047)) + cbModelParam._m0[22u].w;
        float _1951 = fma(_1055, cbModelParam._m0[23u].z, fma(_1051, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1047)) + cbModelParam._m0[23u].w;
        float _1954 = fma(_993, cbModelParam._m0[21u].z, fma(_992, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _991));
        float _1957 = fma(_993, cbModelParam._m0[22u].z, fma(_992, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _991));
        float _1960 = fma(_993, cbModelParam._m0[23u].z, fma(_992, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _991));
        float _2069;
        if (_1954 > 0.0)
        {
            _2069 = abs((1.0 - _1943) / _1954);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1954 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1943 + 1.0) / _1954);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2069 = frontier_phi_25_21_ladder;
        }
        float _2386;
        if (_1957 > 0.0)
        {
            _2386 = abs((1.0 - _1947) / _1957);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1957 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1947 + 1.0) / _1957);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2386 = frontier_phi_37_32_ladder;
        }
        float _2724;
        if (_1960 > 0.0)
        {
            _2724 = abs((1.0 - _1951) / _1960);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1960 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1951 + 1.0) / _1960);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2724 = frontier_phi_47_44_ladder;
        }
        float _2726 = isnan(_2386) ? _2069 : (isnan(_2069) ? _2386 : min(_2069, _2386));
        float _2727 = isnan(_2724) ? _2726 : (isnan(_2726) ? _2724 : min(_2726, _2724));
        float _2731 = (_2727 * _1954) + _1943;
        float _2732 = (_2727 * _1957) + _1947;
        float _2733 = (_2727 * _1960) + _1951;
        float _2734 = _2727 * 9.9999997473787516355514526367188e-05;
        float _2735 = (-1.0) - _2734;
        float _2737 = _2734 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2733 > _2737) || ((_2733 < _2735) || ((_2732 > _2737) || ((_2732 < _2735) || ((_2731 < _2735) || (_2731 > _2737))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2855 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2733, cbModelParam._m0[17u].z, fma(_2732, cbModelParam._m0[17u].y, _2731 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2733, cbModelParam._m0[18u].z, fma(_2732, cbModelParam._m0[18u].y, _2731 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2733, cbModelParam._m0[19u].z, fma(_2732, cbModelParam._m0[19u].y, _2731 * cbModelParam._m0[19u].x))), _1890);
            frontier_phi_22_47_ladder = _2855.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2855.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2855.x * cbModelParam._m0[1u].z;
        }
        _1979 = frontier_phi_22_47_ladder_2;
        _1981 = frontier_phi_22_47_ladder_1;
        _1983 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1963 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_991, _992, _993), _1890);
        _1979 = _1963.x * cbModelParam._m0[1u].z;
        _1981 = _1963.y * cbModelParam._m0[1u].z;
        _1983 = _1963.z * cbModelParam._m0[1u].z;
    }
    float _1996 = (((_1018 * _967) + _1019) * _983) * ((cbModelParam._m0[1u].w * (_1979 - _1881)) + _1881);
    float _1998 = (((_1018 * _969) + _1019) * _983) * ((cbModelParam._m0[1u].w * (_1981 - _1883)) + _1883);
    float _2000 = (((_1018 * _970) + _1019) * _983) * ((cbModelParam._m0[1u].w * (_1983 - _1885)) + _1885);
    float _2003 = fma(_2000, cbSceneParam._m0[89u].z, fma(_1998, cbSceneParam._m0[89u].y, _1996 * cbSceneParam._m0[89u].x));
    float _2006 = fma(_2000, cbSceneParam._m0[90u].z, fma(_1998, cbSceneParam._m0[90u].y, _1996 * cbSceneParam._m0[90u].x));
    float _2009 = fma(_2000, cbSceneParam._m0[91u].z, fma(_1998, cbSceneParam._m0[91u].y, _1996 * cbSceneParam._m0[91u].x));
    float _2043 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2047 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2051 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2055 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2056 = _2043 / _2055;
    float _2057 = _2047 / _2055;
    float _2058 = _2051 / _2055;
    float _2205;
    float _2206;
    float _2207;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2085 = ((uint(_2058 > cbSceneParam._m0[59u].y) + uint(_2058 > cbSceneParam._m0[59u].x)) + uint(_2058 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2086 = _2085 + 43u;
        uint _2094 = _2085 + 44u;
        uint _2102 = _2085 + 45u;
        uint _2110 = _2085 + 46u;
        float _2121 = fma(_2055, cbSceneParam._m0[_2086].w, fma(_2051, cbSceneParam._m0[_2086].z, fma(_2047, cbSceneParam._m0[_2086].y, _2043 * cbSceneParam._m0[_2086].x)));
        float _2125 = fma(_2055, cbSceneParam._m0[_2094].w, fma(_2051, cbSceneParam._m0[_2094].z, fma(_2047, cbSceneParam._m0[_2094].y, _2043 * cbSceneParam._m0[_2094].x)));
        float _2133 = fma(_2055, cbSceneParam._m0[_2110].w, fma(_2051, cbSceneParam._m0[_2110].z, fma(_2047, cbSceneParam._m0[_2110].y, _2043 * cbSceneParam._m0[_2110].x)));
        float _2138 = cbSceneParam._m0[33u].z * _2133;
        float _2140 = cbSceneParam._m0[33u].w * _2133;
        float _2143 = fma(_2055, cbSceneParam._m0[_2102].w, fma(_2051, cbSceneParam._m0[_2102].z, fma(_2047, cbSceneParam._m0[_2102].y, _2043 * cbSceneParam._m0[_2102].x))) / _2133;
        float _2191 = (cbSceneParam._m0[33u].x - sqrt(((_2057 * _2057) + (_2056 * _2056)) + (_2058 * _2058))) * cbSceneParam._m0[33u].y;
        float _4487 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        float _2198 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2138 + _2121) / _2133, (_2140 + _2125) / _2133), _2143), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2140 + _2121) / _2133, (_2125 - _2138) / _2133), _2143), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2121 - _2138) / _2133, (_2125 - _2140) / _2133), _2143), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2121 - _2140) / _2133, (_2138 + _2125) / _2133), _2143), 0.0)).x), vec4(0.25)));
        _2205 = 1.0 - (_2198 * cbSceneParam._m0[34u].x);
        _2206 = 1.0 - (_2198 * cbSceneParam._m0[34u].y);
        _2207 = 1.0 - (_2198 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2205 = 1.0;
        _2206 = 1.0;
        _2207 = 1.0;
    }
    float _2271;
    float _2273;
    float _2275;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2259 = fma(_2055, cbSceneParam._m0[63u].w, fma(_2051, cbSceneParam._m0[63u].z, fma(_2047, cbSceneParam._m0[63u].y, _2043 * cbSceneParam._m0[63u].x)));
        float _2260 = fma(_2055, cbSceneParam._m0[60u].w, fma(_2051, cbSceneParam._m0[60u].z, fma(_2047, cbSceneParam._m0[60u].y, _2043 * cbSceneParam._m0[60u].x))) / _2259;
        float _2261 = fma(_2055, cbSceneParam._m0[61u].w, fma(_2051, cbSceneParam._m0[61u].z, fma(_2047, cbSceneParam._m0[61u].y, _2043 * cbSceneParam._m0[61u].x))) / _2259;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2260 >= cbSceneParam._m0[64u].x) && (_2261 >= cbSceneParam._m0[64u].y)) && (_2260 <= cbSceneParam._m0[64u].z)) && (_2261 <= cbSceneParam._m0[64u].w))
        {
            float _2399 = fma(_2055, cbSceneParam._m0[62u].w, fma(_2051, cbSceneParam._m0[62u].z, fma(_2047, cbSceneParam._m0[62u].y, _2043 * cbSceneParam._m0[62u].x))) / _2259;
            float _2403 = isnan(cbSceneParam._m0[41u].w) ? _2399 : (isnan(_2399) ? cbSceneParam._m0[41u].w : max(_2399, cbSceneParam._m0[41u].w));
            float _2446 = (cbSceneParam._m0[33u].x - sqrt(((_2057 * _2057) + (_2056 * _2056)) + (_2058 * _2058))) * cbSceneParam._m0[33u].y;
            float _4503 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
            float _2453 = (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2260, cbSceneParam._m0[33u].w + _2261), _2403), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2260, _2261 - cbSceneParam._m0[33u].z), _2403), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2260 - cbSceneParam._m0[33u].z, _2261 - cbSceneParam._m0[33u].w), _2403), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2260 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2261), _2403), 0.0)).x), vec4(0.25)));
            float _2457 = 1.0 - (_2453 * cbSceneParam._m0[34u].x);
            float _2458 = 1.0 - (_2453 * cbSceneParam._m0[34u].y);
            float _2459 = 1.0 - (_2453 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2459) ? _2207 : (isnan(_2207) ? _2459 : min(_2207, _2459));
            frontier_phi_34_33_ladder_1 = isnan(_2458) ? _2206 : (isnan(_2206) ? _2458 : min(_2206, _2458));
            frontier_phi_34_33_ladder_2 = isnan(_2457) ? _2205 : (isnan(_2205) ? _2457 : min(_2205, _2457));
        }
        else
        {
            frontier_phi_34_33_ladder = _2207;
            frontier_phi_34_33_ladder_1 = _2206;
            frontier_phi_34_33_ladder_2 = _2205;
        }
        _2271 = frontier_phi_34_33_ladder_2;
        _2273 = frontier_phi_34_33_ladder_1;
        _2275 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2271 = _2205;
        _2273 = _2206;
        _2275 = _2207;
    }
    uvec4 _2280 = floatBitsToUint(cbInstanceData._m0[_254 + 5u]);
    uint _2282 = _2280.x * 14u;
    uint _2283 = _2282 + 13u;
    float _2290 = _983 + (-1.0);
    float _2295 = (cbLight._m0[_2283].x * _2290) + 1.0;
    float _2296 = (cbLight._m0[_2283].y * _2290) + 1.0;
    float _2297 = (cbLight._m0[_2283].z * _2290) + 1.0;
    float _2298 = (cbLight._m0[_2283].w * _2290) + 1.0;
    uint _2299 = _2282 + 5u;
    float _2305 = isnan(1.0) ? _2296 : (isnan(_2296) ? 1.0 : min(_2296, 1.0));
    uint _2309 = _2282 + 4u;
    float _2318 = isnan(1.0) ? _2295 : (isnan(_2295) ? 1.0 : min(_2295, 1.0));
    uint _2322 = _2282 | 1u;
    float _2333 = dot(vec3(cbLight._m0[_2282].xyz), vec3(_817, _818, _819));
    float _2336 = dot(vec3(cbLight._m0[_2322].xyz), vec3(_817, _818, _819));
    float _4539 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _4550 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2341 = (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * 0.3183098733425140380859375;
    float _2343 = (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * 0.3183098733425140380859375;
    float _2350 = ((cbLight._m0[_2299].x * _2305) * _2343) + (((cbLight._m0[_2309].x * _2271) * _2318) * _2341);
    float _2351 = ((_2305 * cbLight._m0[_2299].y) * _2343) + (((cbLight._m0[_2309].y * _2273) * _2318) * _2341);
    float _2352 = ((_2305 * cbLight._m0[_2299].z) * _2343) + (((cbLight._m0[_2309].z * _2275) * _2318) * _2341);
    uvec4 _2356 = floatBitsToUint(cbLight._m0[_2282 + 12u]);
    bool _2358 = _2356.x == 0u;
    float _2460;
    float _2462;
    float _2464;
    if (_2358)
    {
        _2460 = _2350;
        _2462 = _2351;
        _2464 = _2352;
    }
    else
    {
        uint _2468 = _2282 + 6u;
        float _2484 = (dot(vec3(cbLight._m0[_2282 + 2u].xyz), vec3(_817, _818, _819)) * 0.5) + 0.5;
        float _2485 = _2484 * _2484;
        float _4561 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2486 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
        float _2487 = isnan(1.0) ? _2297 : (isnan(_2297) ? 1.0 : min(_2297, 1.0));
        _2460 = (((cbLight._m0[_2468].x * 0.3183098733425140380859375) * _2486) * _2487) + _2350;
        _2462 = (((cbLight._m0[_2468].y * 0.3183098733425140380859375) * _2486) * _2487) + _2351;
        _2464 = (((cbLight._m0[_2468].z * 0.3183098733425140380859375) * _2486) * _2487) + _2352;
    }
    bool _2467 = _2356.y == 0u;
    float _2522;
    float _2524;
    float _2526;
    if (_2467)
    {
        _2522 = _2460;
        _2524 = _2462;
        _2526 = _2464;
    }
    else
    {
        uint _2695 = _2282 + 7u;
        float _2711 = (dot(vec3(cbLight._m0[_2282 + 3u].xyz), vec3(_817, _818, _819)) * 0.5) + 0.5;
        float _2712 = _2711 * _2711;
        float _4577 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
        float _2713 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
        float _2714 = isnan(1.0) ? _2298 : (isnan(_2298) ? 1.0 : min(_2298, 1.0));
        _2522 = (((cbLight._m0[_2695].x * 0.3183098733425140380859375) * _2713) * _2714) + _2460;
        _2524 = (((cbLight._m0[_2695].y * 0.3183098733425140380859375) * _2713) * _2714) + _2462;
        _2526 = (((cbLight._m0[_2695].z * 0.3183098733425140380859375) * _2713) * _2714) + _2464;
    }
    uint _2529 = _2282 + 8u;
    float _2542 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2282].w)) * _820) * 0.949999988079071044921875);
    float _2543 = _2542 * _2542;
    float _2544 = cbLight._m0[_2282].x + _897;
    float _2545 = cbLight._m0[_2282].y + _898;
    float _2546 = cbLight._m0[_2282].z + _899;
    float _2550 = inversesqrt(dot(vec3(_2544, _2545, _2546), vec3(_2544, _2545, _2546)));
    float _2551 = _2550 * _2544;
    float _2552 = _2550 * _2545;
    float _2553 = _2550 * _2546;
    float _2554 = dot(vec3(_817, _818, _819), vec3(cbLight._m0[_2282].xyz));
    float _4593 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
    float _2557 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
    float _4604 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _2558 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
    float _2559 = dot(vec3(_817, _818, _819), vec3(_2551, _2552, _2553));
    float _4615 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
    float _2562 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
    float _2563 = dot(vec3(cbLight._m0[_2282].xyz), vec3(_2551, _2552, _2553));
    float _4626 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
    float _2567 = _2543 * _2543;
    float _2571 = ((_2562 * _2562) * (_2567 + (-1.0))) + 1.0;
    float _2579 = exp2(log2(1.0 - (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0)))) * 5.0);
    float _2580 = 0.959999978542327880859375 - _964;
    float _2582 = 0.959999978542327880859375 - _965;
    float _2583 = 0.959999978542327880859375 - _966;
    float _2590 = 1.0 - _2543;
    float _2601 = (0.5 / (((_2558 * ((_2557 * _2590) + _2543)) + 9.9999999392252902907785028219223e-09) + (((_2558 * _2590) + _2543) * _2557))) * _2557;
    float _4637 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
    float _2603 = (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2567 / ((_2571 * _2571) * 3.141590118408203125));
    uint _2617 = _2282 + 9u;
    float _2628 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2322].w)) * _820) * 0.949999988079071044921875);
    float _2629 = _2628 * _2628;
    float _2630 = cbLight._m0[_2322].x + _897;
    float _2631 = cbLight._m0[_2322].y + _898;
    float _2632 = cbLight._m0[_2322].z + _899;
    float _2636 = inversesqrt(dot(vec3(_2630, _2631, _2632), vec3(_2630, _2631, _2632)));
    float _2637 = _2636 * _2630;
    float _2638 = _2636 * _2631;
    float _2639 = _2636 * _2632;
    float _2640 = dot(vec3(_817, _818, _819), vec3(cbLight._m0[_2322].xyz));
    float _4648 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
    float _2643 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
    float _2644 = dot(vec3(_817, _818, _819), vec3(_2637, _2638, _2639));
    float _4659 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
    float _2647 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
    float _2648 = dot(vec3(cbLight._m0[_2322].xyz), vec3(_2637, _2638, _2639));
    float _4670 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
    float _2652 = _2629 * _2629;
    float _2656 = ((_2647 * _2647) * (_2652 + (-1.0))) + 1.0;
    float _2663 = exp2(log2(1.0 - (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0)))) * 5.0);
    float _2670 = 1.0 - _2629;
    float _2680 = (0.5 / (((_2558 * ((_2643 * _2670) + _2629)) + 9.9999999392252902907785028219223e-09) + (((_2558 * _2670) + _2629) * _2643))) * _2643;
    float _4681 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
    float _2682 = (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0))) * (_2652 / ((_2656 * _2656) * 3.141590118408203125));
    float _2692 = (((((_2663 * _2580) + _967) * cbLight._m0[_2617].x) * _2682) * _2305) + ((((cbLight._m0[_2529].x * _2271) * ((_2579 * _2580) + _967)) * _2603) * _2318);
    float _2693 = (((((_2663 * _2582) + _969) * cbLight._m0[_2617].y) * _2682) * _2305) + ((((cbLight._m0[_2529].y * _2273) * ((_2579 * _2582) + _969)) * _2603) * _2318);
    float _2694 = (((((_2663 * _2583) + _970) * cbLight._m0[_2617].z) * _2682) * _2305) + ((((cbLight._m0[_2529].z * _2275) * ((_2579 * _2583) + _970)) * _2603) * _2318);
    float _2750;
    float _2752;
    float _2754;
    if (_2358)
    {
        _2750 = _2692;
        _2752 = _2693;
        _2754 = _2694;
    }
    else
    {
        uint _2756 = _2282 + 2u;
        uint _2760 = _2282 + 10u;
        float _2774 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2756].w)) * _820) * 0.949999988079071044921875);
        float _2775 = _2774 * _2774;
        float _2776 = cbLight._m0[_2756].x + _897;
        float _2777 = cbLight._m0[_2756].y + _898;
        float _2778 = cbLight._m0[_2756].z + _899;
        float _2782 = inversesqrt(dot(vec3(_2776, _2777, _2778), vec3(_2776, _2777, _2778)));
        float _2783 = _2782 * _2776;
        float _2784 = _2782 * _2777;
        float _2785 = _2782 * _2778;
        float _2786 = dot(vec3(_817, _818, _819), vec3(cbLight._m0[_2756].xyz));
        float _4692 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
        float _2789 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
        float _2790 = dot(vec3(_817, _818, _819), vec3(_2783, _2784, _2785));
        float _4703 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
        float _2793 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
        float _2794 = dot(vec3(cbLight._m0[_2756].xyz), vec3(_2783, _2784, _2785));
        float _4714 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
        float _2798 = _2775 * _2775;
        float _2802 = ((_2793 * _2793) * (_2798 + (-1.0))) + 1.0;
        float _2809 = exp2(log2(1.0 - (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0)))) * 5.0);
        float _2816 = 1.0 - _2775;
        float _2826 = (0.5 / (((_2558 * ((_2789 * _2816) + _2775)) + 9.9999999392252902907785028219223e-09) + (((_2558 * _2816) + _2775) * _2789))) * _2789;
        float _4725 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
        float _2828 = (isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0))) * (_2798 / ((_2802 * _2802) * 3.141590118408203125));
        float _2829 = isnan(1.0) ? _2297 : (isnan(_2297) ? 1.0 : min(_2297, 1.0));
        _2750 = (((((_2809 * _2580) + _967) * cbLight._m0[_2760].x) * _2828) * _2829) + _2692;
        _2752 = (((((_2809 * _2582) + _969) * cbLight._m0[_2760].y) * _2828) * _2829) + _2693;
        _2754 = (((((_2809 * _2583) + _970) * cbLight._m0[_2760].z) * _2828) * _2829) + _2694;
    }
    float _2860;
    float _2862;
    float _2864;
    if (_2467)
    {
        _2860 = _2750;
        _2862 = _2752;
        _2864 = _2754;
    }
    else
    {
        uint _2871 = _2282 + 3u;
        uint _2875 = _2282 + 11u;
        float _2889 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2871].w)) * _820) * 0.949999988079071044921875);
        float _2890 = _2889 * _2889;
        float _2891 = cbLight._m0[_2871].x + _897;
        float _2892 = cbLight._m0[_2871].y + _898;
        float _2893 = cbLight._m0[_2871].z + _899;
        float _2897 = inversesqrt(dot(vec3(_2891, _2892, _2893), vec3(_2891, _2892, _2893)));
        float _2898 = _2897 * _2891;
        float _2899 = _2897 * _2892;
        float _2900 = _2897 * _2893;
        float _2901 = dot(vec3(_817, _818, _819), vec3(cbLight._m0[_2871].xyz));
        float _4741 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
        float _2904 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
        float _2905 = dot(vec3(_817, _818, _819), vec3(_2898, _2899, _2900));
        float _4752 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
        float _2908 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
        float _2909 = dot(vec3(cbLight._m0[_2871].xyz), vec3(_2898, _2899, _2900));
        float _4763 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
        float _2913 = _2890 * _2890;
        float _2917 = ((_2908 * _2908) * (_2913 + (-1.0))) + 1.0;
        float _2924 = exp2(log2(1.0 - (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0)))) * 5.0);
        float _2931 = 1.0 - _2890;
        float _2941 = (0.5 / (((_2558 * ((_2904 * _2931) + _2890)) + 9.9999999392252902907785028219223e-09) + (((_2558 * _2931) + _2890) * _2904))) * _2904;
        float _4774 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
        float _2943 = (isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0))) * (_2913 / ((_2917 * _2917) * 3.141590118408203125));
        float _2944 = isnan(1.0) ? _2298 : (isnan(_2298) ? 1.0 : min(_2298, 1.0));
        _2860 = (((((_2924 * _2580) + _967) * cbLight._m0[_2875].x) * _2943) * _2944) + _2750;
        _2862 = (((((_2924 * _2582) + _969) * cbLight._m0[_2875].y) * _2943) * _2944) + _2752;
        _2864 = (((((_2924 * _2583) + _970) * cbLight._m0[_2875].z) * _2943) * _2944) + _2754;
    }
    float _3010;
    float _3012;
    float _3014;
    float _3016;
    float _3018;
    float _3020;
    if (_2280.y == 0u)
    {
        uvec4 _2965 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2966 = _2965.x;
        uint _2977 = uint((float(_2965.y) * floor(float(uint(cbSceneParam._m0[85u].y * _906) / _2966))) + floor(float(uint(cbSceneParam._m0[85u].x * _905) / _2966)));
        float _2987 = (log2(_2058 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2988 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
        uint _2991 = uint(isnan(14.0) ? _2988 : (isnan(_2988) ? 14.0 : min(_2988, 14.0)));
        uvec4 _2996 = texelFetch(g_lightClusterGridBuffer, int(((_2991 << 2u) + (_2977 << 6u)) >> 2u));
        uint _2997 = _2996.x;
        uint _2998 = _2965.z;
        float _3077;
        float _3079;
        float _3081;
        float _3083;
        float _3085;
        float _3087;
        if (((((1u << ((_2998 >> 4u) & 15u)) + 4294967295u) & _2997) == 0u) || ((_2998 & 240u) == 0u))
        {
            _3077 = 0.0;
            _3079 = 0.0;
            _3081 = 0.0;
            _3083 = 0.0;
            _3085 = 0.0;
            _3087 = 0.0;
        }
        else
        {
            float _3078;
            float _3080;
            float _3082;
            float _3084;
            float _3086;
            float _3088;
            float _3222 = 0.0;
            float _3223 = 0.0;
            float _3224 = 0.0;
            float _3225 = 0.0;
            float _3226 = 0.0;
            float _3227 = 0.0;
            uint _3228 = 0u;
            uint _3237;
            bool _3238;
            for (;;)
            {
                _3237 = texelFetch(g_lightClassification, int((((_2991 << 5u) + (_2977 << 9u)) + (_3228 << 2u)) >> 2u)).x;
                _3238 = _3237 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3238)
                {
                    frontier_phi_66_pred = _3227;
                    frontier_phi_66_pred_1 = _3226;
                    frontier_phi_66_pred_2 = _3225;
                    frontier_phi_66_pred_3 = _3224;
                    frontier_phi_66_pred_4 = _3223;
                    frontier_phi_66_pred_5 = _3222;
                }
                else
                {
                    float _3346;
                    float _3347;
                    float _3348;
                    float _3349;
                    float _3350;
                    float _3351;
                    uint _3352;
                    _3346 = _3222;
                    _3347 = _3223;
                    _3348 = _3224;
                    _3349 = _3225;
                    _3350 = _3226;
                    _3351 = _3227;
                    _3352 = _3237;
                    float _3278;
                    float _3279;
                    float _3280;
                    float _3281;
                    float _3282;
                    float _3283;
                    for (;;)
                    {
                        uint _3356 = uint(findLSB(_3352)) + (_3228 << 5u);
                        uint _3353 = (_3352 + 4294967295u) & _3352;
                        uint _3358 = _3356 * 48u;
                        vec4 _3372 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3358)).x, texelFetch(g_PointLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3358 + 3u)).x));
                        uint _3378 = (_3356 * 48u) + 4u;
                        vec4 _3391 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3378)).x, texelFetch(g_PointLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3378 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3378 + 3u)).x));
                        uint _3397 = (_3356 * 48u) + 8u;
                        vec3 _3408 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3397)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 2u)).x));
                        float _3412 = _3372.x - _2056;
                        float _3413 = _3372.y - _2057;
                        float _3414 = _3372.z - _2058;
                        float _3415 = dot(vec3(_3412, _3413, _3414), vec3(_3412, _3413, _3414));
                        float _3418 = inversesqrt(_3415);
                        float _3419 = _3418 * _3412;
                        float _3420 = _3418 * _3413;
                        float _3421 = _3418 * _3414;
                        float _3422 = dot(vec3(_924, _927, _930), vec3(_3419, _3420, _3421));
                        float _3427 = 1.0 - (_3415 * _3372.w);
                        float _4800 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                        float _3428 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                        float _3429 = sqrt(_3415) * _3391.w;
                        float _3432 = 1.39999997615814208984375 / (_3429 + 1.39999997615814208984375);
                        float _3433 = _3432 * _3432;
                        float _3436 = ((1.0 - _3433) * _3422) + _3433;
                        float _3439 = _3429 * _3429;
                        float _3443 = ((isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0))) * _3428) / ((_3439 * 0.699999988079071044921875) + 1.0);
                        float _3447 = (-0.0) - _2056;
                        float _3448 = (-0.0) - _2057;
                        float _3449 = (-0.0) - _2058;
                        float _3453 = inversesqrt(dot(vec3(_3447, _3448, _3449), vec3(_3447, _3448, _3449)));
                        float _3454 = _3453 * _3447;
                        float _3455 = _3453 * _3448;
                        float _3456 = _3453 * _3449;
                        float _3463 = exp2(log2(1.0 / ((_3439 * 3.5) + 5.0)) * 0.25);
                        float _3464 = 1.0 - _999;
                        float _3471 = sqrt(1.0 - ((1.0 - (_3464 * _3464)) * (1.0 - (_3463 * _3463))));
                        float _3472 = _3471 * _3471;
                        float _3473 = _3472 * _3472;
                        float _3474 = _3454 + _3419;
                        float _3475 = _3455 + _3420;
                        float _3476 = _3456 + _3421;
                        float _3480 = inversesqrt(dot(vec3(_3474, _3475, _3476), vec3(_3474, _3475, _3476)));
                        float _3484 = dot(vec3(_924, _927, _930), vec3(_3454, _3455, _3456));
                        float _4816 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                        float _3487 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                        float _3488 = dot(vec3(_924, _927, _930), vec3(_3480 * _3474, _3480 * _3475, _3480 * _3476));
                        float _4827 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                        float _3491 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                        float _3495 = ((_3491 * _3491) * (_3473 + (-1.0))) + 1.0;
                        float _3496 = _3432 * _3472;
                        float _3497 = _3496 * _3496;
                        float _3500 = ((1.0 - _3497) * _3422) + _3497;
                        float _4838 = isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0));
                        float _3501 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
                        float _3502 = 1.0 - _3472;
                        float _3512 = (0.5 / (((_3501 * ((_3487 * _3502) + _3472)) + 9.9999999392252902907785028219223e-09) + (((_3501 * _3502) + _3472) * _3487))) * _3501;
                        float _4849 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                        float _3523 = (((_3473 * 3.1415927410125732421875) * (isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0)))) / ((_3495 * _3495) * ((_3439 * 2.1991131305694580078125) + 3.141590118408203125))) * _3428;
                        _3281 = (_3443 * _3391.x) + _3349;
                        _3282 = (_3443 * _3391.y) + _3350;
                        _3283 = (_3443 * _3391.z) + _3351;
                        _3278 = (_3523 * _3408.x) + _3346;
                        _3279 = (_3523 * _3408.y) + _3347;
                        _3280 = (_3523 * _3408.z) + _3348;
                        if (_3353 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3346 = _3278;
                            _3347 = _3279;
                            _3348 = _3280;
                            _3349 = _3281;
                            _3350 = _3282;
                            _3351 = _3283;
                            _3352 = _3353;
                        }
                    }
                    frontier_phi_66_pred = _3283;
                    frontier_phi_66_pred_1 = _3282;
                    frontier_phi_66_pred_2 = _3281;
                    frontier_phi_66_pred_3 = _3280;
                    frontier_phi_66_pred_4 = _3279;
                    frontier_phi_66_pred_5 = _3278;
                }
                _3088 = frontier_phi_66_pred;
                _3086 = frontier_phi_66_pred_1;
                _3084 = frontier_phi_66_pred_2;
                _3082 = frontier_phi_66_pred_3;
                _3080 = frontier_phi_66_pred_4;
                _3078 = frontier_phi_66_pred_5;
                uint _3229 = _3228 + 1u;
                if (_3229 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3222 = _3078;
                    _3223 = _3080;
                    _3224 = _3082;
                    _3225 = _3084;
                    _3226 = _3086;
                    _3227 = _3088;
                    _3228 = _3229;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3077 = _3078;
            _3079 = _3080;
            _3081 = _3082;
            _3083 = _3084;
            _3085 = _3086;
            _3087 = _3088;
        }
        uvec4 _3091 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3092 = _3091.z;
        uint _3094 = (_3092 >> 8u) & 15u;
        float _3190;
        float _3192;
        float _3194;
        float _3196;
        float _3198;
        float _3200;
        if (((4294967295u << _3094) & _2997) == 0u)
        {
            _3190 = _3077;
            _3192 = _3079;
            _3194 = _3081;
            _3196 = _3083;
            _3198 = _3085;
            _3200 = _3087;
        }
        else
        {
            float _3215 = inversesqrt(dot(vec3(_2056, _2057, _2058), vec3(_2056, _2057, _2058)));
            float _3216 = _3215 * _2056;
            float _3217 = _3215 * _2057;
            float _3218 = _3215 * _2058;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3094 < ((_3092 >> 12u) & 15u))
            {
                float _3191;
                float _3193;
                float _3195;
                float _3197;
                float _3199;
                float _3201;
                float _3329 = _3077;
                float _3330 = _3079;
                float _3331 = _3081;
                float _3332 = _3083;
                float _3333 = _3085;
                float _3334 = _3087;
                uint _3335 = _3094;
                uint _3344;
                bool _3345;
                for (;;)
                {
                    _3344 = texelFetch(g_lightClassification, int((((_2991 << 5u) + (_2977 << 9u)) + (_3335 << 2u)) >> 2u)).x;
                    _3345 = _3344 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3345)
                    {
                        frontier_phi_72_pred = _3334;
                        frontier_phi_72_pred_1 = _3333;
                        frontier_phi_72_pred_2 = _3332;
                        frontier_phi_72_pred_3 = _3331;
                        frontier_phi_72_pred_4 = _3330;
                        frontier_phi_72_pred_5 = _3329;
                    }
                    else
                    {
                        float _3528;
                        float _3529;
                        float _3530;
                        float _3531;
                        float _3532;
                        float _3533;
                        float _3821;
                        float _3822;
                        float _3823;
                        float _3824;
                        float _3825;
                        float _3826;
                        float _3541 = _3329;
                        float _3542 = _3330;
                        float _3543 = _3331;
                        float _3544 = _3332;
                        float _3545 = _3333;
                        float _3546 = _3334;
                        uint _3547 = _3344;
                        uint _3548;
                        vec4 _3573;
                        float _3574;
                        vec4 _3589;
                        vec3 _3601;
                        vec4 _3616;
                        vec4 _3631;
                        float _3677;
                        bool _3678;
                        for (;;)
                        {
                            uint _3558 = ((_3335 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3547));
                            _3548 = (_3547 + 4294967295u) & _3547;
                            uint _3560 = _3558 * 40u;
                            _3573 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3560)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 3u)).x));
                            _3574 = _3573.w;
                            uint _3576 = (_3558 * 40u) + 4u;
                            _3589 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3576)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 3u)).x));
                            uint _3591 = (_3558 * 40u) + 8u;
                            _3601 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3591)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 2u)).x));
                            uint _3603 = (_3558 * 40u) + 16u;
                            _3616 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3603)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 3u)).x));
                            uint _3618 = (_3558 * 40u) + 20u;
                            _3631 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3618)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 3u)).x));
                            uint _3633 = (_3558 * 40u) + 24u;
                            vec4 _3646 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3633)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 3u)).x));
                            uint _3652 = (_3558 * 40u) + 28u;
                            vec4 _3665 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3652)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 3u)).x));
                            _3677 = fma(_2058, _3665.z, fma(_2057, _3665.y, _3665.x * _2056)) + _3665.w;
                            _3678 = !((fma(_2058, _3646.z, fma(_2057, _3646.y, _3646.x * _2056)) + _3646.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3678)
                            {
                                float _3705 = _3573.x - _2056;
                                float _3706 = _3573.y - _2057;
                                float _3707 = _3573.z - _2058;
                                float _3708 = dot(vec3(_3705, _3706, _3707), vec3(_3705, _3706, _3707));
                                float _3711 = inversesqrt(_3708);
                                float _3712 = _3711 * _3705;
                                float _3713 = _3711 * _3706;
                                float _3714 = _3711 * _3707;
                                float _3718 = 1.0 - (_3708 / (_3574 * _3574));
                                float _4860 = isnan(0.0) ? _3718 : (isnan(_3718) ? 0.0 : max(_3718, 0.0));
                                float _3719 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
                                float _3723 = sqrt(_3708) * _3589.w;
                                float _3725 = 1.39999997615814208984375 / (_3723 + 1.39999997615814208984375);
                                float _3726 = _3725 * _3725;
                                float _3729 = ((1.0 - _3726) * dot(vec3(_3712, _3713, _3714), vec3(_924, _927, _930))) + _3726;
                                float _3732 = _3723 * _3723;
                                float _3736 = (fma(_2058, _3616.z, fma(_2057, _3616.y, _3616.x * _2056)) + _3616.w) / _3677;
                                float _3737 = (fma(_2058, _3631.z, fma(_2057, _3631.y, _3631.x * _2056)) + _3631.w) / _3677;
                                float _3741 = 1.0 - dot(vec2(_3736, _3737), vec2(_3736, _3737));
                                float _4876 = isnan(0.0) ? _3741 : (isnan(_3741) ? 0.0 : max(_3741, 0.0));
                                float _3742 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
                                float _3743 = _3742 * (((isnan(0.0) ? _3729 : (isnan(_3729) ? 0.0 : max(_3729, 0.0))) * _3719) / ((_3732 * 0.699999988079071044921875) + 1.0));
                                float _3755 = exp2(log2(1.0 / ((_3732 * 3.5) + 5.0)) * 0.25);
                                float _3756 = 1.0 - _999;
                                float _3763 = sqrt(1.0 - ((1.0 - (_3756 * _3756)) * (1.0 - (_3755 * _3755))));
                                float _3764 = _3763 * _3763;
                                float _3765 = _3764 * _3764;
                                float _3766 = _3712 - _3216;
                                float _3767 = _3713 - _3217;
                                float _3768 = _3714 - _3218;
                                float _3772 = inversesqrt(dot(vec3(_3766, _3767, _3768), vec3(_3766, _3767, _3768)));
                                float _3776 = dot(vec3(_924, _927, _930), vec3((-0.0) - _3216, (-0.0) - _3217, (-0.0) - _3218));
                                float _4887 = isnan(0.0) ? _3776 : (isnan(_3776) ? 0.0 : max(_3776, 0.0));
                                float _3779 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
                                float _3780 = dot(vec3(_924, _927, _930), vec3(_3772 * _3766, _3772 * _3767, _3772 * _3768));
                                float _4898 = isnan(0.0) ? _3780 : (isnan(_3780) ? 0.0 : max(_3780, 0.0));
                                float _3783 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
                                float _3787 = ((_3783 * _3783) * (_3765 + (-1.0))) + 1.0;
                                float _3788 = _3725 * _3764;
                                float _3789 = _3788 * _3788;
                                float _3795 = ((1.0 - _3789) * dot(vec3(_924, _927, _930), vec3(_3712, _3713, _3714))) + _3789;
                                float _4909 = isnan(0.0) ? _3795 : (isnan(_3795) ? 0.0 : max(_3795, 0.0));
                                float _3796 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
                                float _3797 = 1.0 - _3764;
                                float _3807 = (0.5 / (((_3796 * ((_3779 * _3797) + _3764)) + 9.9999999392252902907785028219223e-09) + (((_3796 * _3797) + _3764) * _3779))) * _3796;
                                float _4920 = isnan(0.0) ? _3807 : (isnan(_3807) ? 0.0 : max(_3807, 0.0));
                                float _3817 = (_3742 * _3719) * (((_3765 * 3.1415927410125732421875) * (isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0)))) / ((_3787 * _3787) * ((_3732 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3743 * _3589.y;
                                frontier_phi_78_pred_1 = _3743 * _3589.x;
                                frontier_phi_78_pred_2 = _3817 * _3601.z;
                                frontier_phi_78_pred_3 = _3817 * _3601.y;
                                frontier_phi_78_pred_4 = _3817 * _3601.x;
                                frontier_phi_78_pred_5 = _3743 * _3589.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3825 = frontier_phi_78_pred;
                            _3824 = frontier_phi_78_pred_1;
                            _3823 = frontier_phi_78_pred_2;
                            _3822 = frontier_phi_78_pred_3;
                            _3821 = frontier_phi_78_pred_4;
                            _3826 = frontier_phi_78_pred_5;
                            _3531 = _3824 + _3544;
                            _3532 = _3825 + _3545;
                            _3533 = _3826 + _3546;
                            _3528 = _3821 + _3541;
                            _3529 = _3822 + _3542;
                            _3530 = _3823 + _3543;
                            if (_3548 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3541 = _3528;
                                _3542 = _3529;
                                _3543 = _3530;
                                _3544 = _3531;
                                _3545 = _3532;
                                _3546 = _3533;
                                _3547 = _3548;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3533;
                        frontier_phi_72_pred_1 = _3532;
                        frontier_phi_72_pred_2 = _3531;
                        frontier_phi_72_pred_3 = _3530;
                        frontier_phi_72_pred_4 = _3529;
                        frontier_phi_72_pred_5 = _3528;
                    }
                    _3201 = frontier_phi_72_pred;
                    _3199 = frontier_phi_72_pred_1;
                    _3197 = frontier_phi_72_pred_2;
                    _3195 = frontier_phi_72_pred_3;
                    _3193 = frontier_phi_72_pred_4;
                    _3191 = frontier_phi_72_pred_5;
                    uint _3336 = _3335 + 1u;
                    if (_3336 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3329 = _3191;
                        _3330 = _3193;
                        _3331 = _3195;
                        _3332 = _3197;
                        _3333 = _3199;
                        _3334 = _3201;
                        _3335 = _3336;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3201;
                frontier_phi_60_61_ladder_1 = _3199;
                frontier_phi_60_61_ladder_2 = _3195;
                frontier_phi_60_61_ladder_3 = _3193;
                frontier_phi_60_61_ladder_4 = _3191;
                frontier_phi_60_61_ladder_5 = _3197;
            }
            else
            {
                frontier_phi_60_61_ladder = _3087;
                frontier_phi_60_61_ladder_1 = _3085;
                frontier_phi_60_61_ladder_2 = _3081;
                frontier_phi_60_61_ladder_3 = _3079;
                frontier_phi_60_61_ladder_4 = _3077;
                frontier_phi_60_61_ladder_5 = _3083;
            }
            _3190 = frontier_phi_60_61_ladder_4;
            _3192 = frontier_phi_60_61_ladder_3;
            _3194 = frontier_phi_60_61_ladder_2;
            _3196 = frontier_phi_60_61_ladder_5;
            _3198 = frontier_phi_60_61_ladder_1;
            _3200 = frontier_phi_60_61_ladder;
        }
        float _3205 = isnan(1.0) ? _983 : (isnan(_983) ? 1.0 : min(_983, 1.0));
        _3010 = (_3205 * _3196) + _2522;
        _3012 = (_3205 * _3198) + _2524;
        _3014 = (_3205 * _3200) + _2526;
        _3016 = ((_3190 * _967) * _3205) + _2860;
        _3018 = ((_3192 * _969) * _3205) + _2862;
        _3020 = ((_3194 * _970) * _3205) + _2864;
    }
    else
    {
        _3010 = _2522;
        _3012 = _2524;
        _3014 = _2526;
        _3016 = _2860;
        _3018 = _2862;
        _3020 = _2864;
    }
    float _4936 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _4947 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _4958 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    uint _3040 = _254 + 6u;
    float _3048 = _905 / cbSceneParam._m0[86u].x;
    float _3049 = _906 / cbSceneParam._m0[86u].y;
    vec4 _3063 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3048, _3049, (log2((isnan(cbSceneParam._m0[77u].w) ? _839 : (isnan(_839) ? cbSceneParam._m0[77u].w : min(_839, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3065 = _3063.x;
    float _3066 = _3063.y;
    float _3067 = _3063.z;
    float _3068 = _3063.w;
    float _3140;
    float _3142;
    float _3144;
    float _3146;
    if (_839 > cbSceneParam._m0[78u].w)
    {
        float _3102 = isnan(_839) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _839 : min(cbSceneParam._m0[80u].w, _839));
        float _3103 = _3102 / _839;
        float _3114 = _3103 * _890;
        float _3115 = _891 * _3103;
        float _3116 = (-0.0) - _3115;
        float _3118 = _3103 * _892;
        float _3120 = (cbSceneParam._m0[77u].w * _3116) / _3102;
        float _3121 = _3120 + cbSceneParam._m0[79u].w;
        float _3122 = cbSceneParam._m0[79u].w - _3115;
        float _3128 = sqrt(((_3114 * _3114) + (_3115 * _3115)) + (_3118 * _3118));
        float _3131 = (1.0 - (cbSceneParam._m0[77u].w / _3102)) * _3128;
        float _3136 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3138 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3291;
        if (abs((_3116 - _3120) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3291 = ((((_3121 > 0.0) ? exp2(_3136 * _3121) : (2.0 - exp2(_3138 * _3121))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3131;
        }
        else
        {
            float _3251 = 1.0 / cbSceneParam._m0[80u].x;
            float _3252 = isnan(_3122) ? _3121 : (isnan(_3121) ? _3122 : max(_3121, _3122));
            float _3253 = isnan(_3122) ? _3121 : (isnan(_3121) ? _3122 : min(_3121, _3122));
            float _3262 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : min(_3252, 0.0));
            float _3263 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : min(_3253, 0.0));
            _3291 = ((abs(_3128 / _3116) * cbSceneParam._m0[80u].y) * ((((_3262 - _3263) * 2.0) - ((exp2(_3136 * (isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0)))) - exp2(_3136 * (isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0))))) * _3251)) - ((exp2(_3138 * _3262) - exp2(_3138 * _3263)) * _3251))) + (_3131 * cbSceneParam._m0[80u].z);
        }
        vec4 _3293 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3048, _3049, 1.0), 0.0);
        float _3302 = exp2((_3291 * (-1.44269502162933349609375)) * (1.0 - _3293.w));
        float _3303 = log2(_3302);
        float _3319 = log2(_3068);
        _3140 = (exp2(_3319 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3303 * cbSceneParam._m0[78u].x)) * _3293.x) / cbSceneParam._m0[78u].x)) + _3065;
        _3142 = (exp2(_3319 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3303 * cbSceneParam._m0[78u].y)) * _3293.y) / cbSceneParam._m0[78u].y)) + _3066;
        _3144 = (exp2(_3319 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3303 * cbSceneParam._m0[78u].z)) * _3293.z) / cbSceneParam._m0[78u].z)) + _3067;
        _3146 = _3302 * _3068;
    }
    else
    {
        _3140 = _3065;
        _3142 = _3066;
        _3144 = _3067;
        _3146 = _3068;
    }
    float _3158 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3159 = _3158 == 3.0;
    float _3160 = log2(_3146);
    float _3167 = exp2(_3160 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0))) * (_3010 + ((isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))) * _983))) + ((_3016 + ((isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0))) * _1790)) * cbPerFrame._m0[3u].x));
    float _3168 = exp2(_3160 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0))) * (_3012 + ((isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))) * _983))) + ((_3018 + ((isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0))) * _1790)) * cbPerFrame._m0[3u].x));
    float _3169 = exp2(_3160 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0))) * (_3014 + ((isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))) * _983))) + ((_3020 + ((isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0))) * _1790)) * cbPerFrame._m0[3u].x));
    float _3178 = (_3158 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3178 * (_3159 ? _3167 : (_3167 + (cbSceneParam._m0[72u].w * _3140)));
    SV_Target.y = _3178 * (_3159 ? _3168 : (_3168 + (cbSceneParam._m0[72u].w * _3142)));
    SV_Target.z = _3178 * (_3159 ? _3169 : (_3169 + (cbSceneParam._m0[72u].w * _3144)));
    SV_Target.w = cbInstanceData._m0[_3040].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3040].w;
}


