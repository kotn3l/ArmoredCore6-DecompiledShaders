#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1270;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _229 = _228 * _220;
    float _230 = _228 * _221;
    float _231 = _228 * _222;
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = _235 * NORMAL.x;
    float _237 = _235 * NORMAL.y;
    float _238 = _235 * NORMAL.z;
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243 = _242 * TANGENT.x;
    float _244 = _242 * TANGENT.y;
    float _245 = _242 * TANGENT.z;
    float _254 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _256 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3595 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _3606 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _3617 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    uint _267 = uint(roundEven(NORMAL.w)) * 13u;
    uint _272 = _267 + 1u;
    uint _276 = _267 + 2u;
    float _285 = sqrt(((cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x) + (cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x)) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x));
    float _286 = _285 * TEXCOORD.z;
    float _287 = _285 * TEXCOORD.w;
    vec4 _300 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _286) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _287) + cbTextureTilingScale._m0[13u].w));
    vec4 _323 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _328 = _323.x * cbMtdParam._m0[9u].x;
    float _329 = _323.y * cbMtdParam._m0[9u].y;
    float _330 = _323.z * cbMtdParam._m0[9u].z;
    float _334 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _300.x) * _328;
    float _337 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _300.y) * _329;
    float _340 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _300.z) * _330;
    float _347 = ((_328 - _334) * (isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0)))) + _334;
    float _348 = ((_329 - _337) * (isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0)))) + _337;
    float _349 = ((_330 - _340) * (isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0)))) + _340;
    vec4 _368 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _286) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _287) + cbTextureTilingScale._m0[14u].w));
    vec4 _388 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _286) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _287) + cbTextureTilingScale._m0[20u].w));
    vec4 _414 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _418 = _414.z;
    float _422 = (_414.x * 2.0) + (-1.0);
    float _423 = (_414.y * 2.0) + (-1.0);
    float _424 = dot(vec2(_422, _423), vec2(_422, _423));
    float _3628 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _429 = sqrt(1.0 - (isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))));
    float _434 = _422 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_388.x * 2.0) + (-1.0)));
    float _435 = _423 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_388.y * 2.0) + (-1.0)));
    float _438 = fma(_429, _236, fma(_435, _243, _434 * _229));
    float _441 = fma(_429, _237, fma(_435, _244, _434 * _230));
    float _444 = fma(_429, _238, fma(_435, _245, _434 * _231));
    float _448 = inversesqrt(dot(vec3(_438, _441, _444), vec3(_438, _441, _444)));
    vec4 _484 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _286) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _287) + cbTextureTilingScale._m0[11u].w));
    float _486 = _484.x;
    float _487 = 1.0 - _486;
    float _494 = ((_486 - _487) * cbMtdParam._m0[24u].z) + _487;
    float _496 = (cbMtdParam._m0[19u].x + dot(vec4(_448 * _438, _448 * _441, _448 * _444, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_494 * cbMtdParam._m0[21u].z);
    float _3639 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _497 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
    float _499 = (-0.0) - cbMtdParam._m0[24u].x;
    float _501 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _502 = isnan(1.0) ? _501 : (isnan(_501) ? 1.0 : min(_501, 1.0));
    float _509 = _497 - ((_497 * TEXCOORD_8.x) * _502);
    float _510 = _497 - ((_497 * TEXCOORD_8.y) * _502);
    float _511 = _497 - ((_497 * TEXCOORD_8.z) * _502);
    float _518 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _522 = ((isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : min(_518, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _530 = (_522 - (((_494 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _522))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3670 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _531 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
    float _535 = ((_509 * ((_368.x * cbMtdParam._m0[18u].x) - _347)) * _531) + _347;
    float _536 = ((_510 * ((_368.y * cbMtdParam._m0[18u].y) - _348)) * _531) + _348;
    float _537 = ((_511 * ((_368.z * cbMtdParam._m0[18u].z) - _349)) * _531) + _349;
    vec4 _549 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _286) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _287) + cbTextureTilingScale._m0[19u].w));
    float _551 = _549.x;
    float _552 = 1.0 - _551;
    float _579 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_551 - _552) * cbMtdParam._m0[24u].w) + _552) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3681 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _580 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
    float _588 = ((((cbMtdParam._m0[10u].x - _535) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _580) + _535;
    float _589 = ((((cbMtdParam._m0[10u].y - _536) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _580) + _536;
    float _590 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _537)) * _580) + _537;
    vec4 _603 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _605 = _603.x;
    float _608 = _605 - ((_605 * _509) * _531);
    float _610 = _608 - (_608 * _580);
    float _615 = (((_388.z - _418) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _418;
    vec4 _629 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _286) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _287) + cbTextureTilingScale._m0[15u].w));
    float _636 = (_629.x * 2.0) + (-1.0);
    float _637 = (_629.y * 2.0) + (-1.0);
    float _638 = dot(vec2(_636, _637), vec2(_636, _637));
    float _3692 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _647 = (((_629.z - _615) * _509) * _531) + _615;
    float _650 = ((cbMtdParam._m0[23u].y - _647) * _580) + _647;
    vec4 _669 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _286) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _287) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _675 = (_669.x * 2.0) + (-1.0);
    float _676 = (_669.y * 2.0) + (-1.0);
    float _677 = dot(vec2(_675, _676), vec2(_675, _676));
    float _3703 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _697 = (((cbMtdParam._m0[21u].x * _434) + ((_636 - _434) * _509)) * _531) + _434;
    float _698 = (((cbMtdParam._m0[21u].x * _435) + ((_637 - _435) * _510)) * _531) + _435;
    float _699 = (((sqrt(1.0 - (isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0)))) - _429) * _511) * _531) + _429;
    float _710 = (((_675 - _697) + (_697 * cbMtdParam._m0[22u].z)) * _580) + _697;
    float _711 = (((_676 - _698) + (_698 * cbMtdParam._m0[22u].z)) * _580) + _698;
    float _712 = ((sqrt(1.0 - (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0)))) - _699) * _580) + _699;
    float _714 = cbMtdParam._m0[22u].x + _414.w;
    float _717 = fma(_712, _236, fma(_711, _243, _710 * _229));
    float _720 = fma(_712, _237, fma(_711, _244, _710 * _230));
    float _723 = fma(_712, _238, fma(_711, _245, _710 * _231));
    float _727 = inversesqrt(dot(vec3(_717, _720, _723), vec3(_717, _720, _723)));
    float _728 = _727 * _717;
    float _729 = _727 * _720;
    float _730 = _727 * _723;
    float _3714 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _731 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    float _3725 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _3736 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _3747 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _3758 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _3769 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _736 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
    float _750 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _790 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _800 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _790);
    float _801 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _790);
    float _802 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _790);
    float _806 = inversesqrt(dot(vec3(_800, _801, _802), vec3(_800, _801, _802)));
    float _807 = _800 * _806;
    float _808 = _801 * _806;
    float _809 = _802 * _806;
    float _815 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _816 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _837 = fma(_730, cbSceneParam._m0[5u].z, fma(_729, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _728));
    float _840 = fma(_730, cbSceneParam._m0[6u].z, fma(_729, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _728));
    float _843 = fma(_730, cbSceneParam._m0[7u].z, fma(_729, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _728));
    uint _857 = (_267 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _863 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0)))) * cbInstanceData._m0[_857].x;
    float _864 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0)))) * cbInstanceData._m0[_857].y;
    float _865 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0)))) * cbInstanceData._m0[_857].z;
    float _3780 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _866 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _3791 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _867 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _3802 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _868 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _869 = 1.0 - _736;
    float _870 = _866 * _869;
    float _871 = _867 * _869;
    float _872 = _868 * _869;
    float _877 = (_866 + (-0.039999999105930328369140625)) * _736;
    float _878 = (_867 + (-0.039999999105930328369140625)) * _736;
    float _879 = (_868 + (-0.039999999105930328369140625)) * _736;
    float _880 = _877 + 0.039999999105930328369140625;
    float _882 = _878 + 0.039999999105930328369140625;
    float _883 = _879 + 0.039999999105930328369140625;
    vec4 _892 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _815, cbSceneParam._m0[86u].y * _816));
    float _896 = ((isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * TEXCOORD_5.w) * _892.x;
    float _897 = dot(vec3(_728, _729, _730), vec3(_807, _808, _809));
    float _900 = _897 * 2.0;
    float _904 = (_900 * _728) - _807;
    float _905 = (_900 * _729) - _808;
    float _906 = (_900 * _730) - _809;
    float _910 = abs(dot(vec3(_807, _808, _809), vec3(_728, _729, _730)));
    float _3813 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _912 = sqrt(_731);
    float _925 = exp2((_912 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_912 * 3.0));
    float _931 = (1.0 - _925) * ((_912 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _932 = _925 * _912;
    float _960 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _964 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _968 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1269;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _994 = fma(_968, cbModelParam._m0[26u].z, fma(_964, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _960));
        float _998 = fma(_968, cbModelParam._m0[27u].z, fma(_964, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _960));
        float _1002 = fma(_968, cbModelParam._m0[28u].z, fma(_964, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _960));
        float _1027 = _960 + _728;
        float _1028 = _964 + _729;
        float _1029 = _968 + _730;
        float _1039 = fma(_1029, cbModelParam._m0[26u].z, fma(_1028, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1027)) - _994;
        float _1040 = fma(_1029, cbModelParam._m0[27u].z, fma(_1028, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1027)) - _998;
        float _1041 = fma(_1029, cbModelParam._m0[28u].z, fma(_1028, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1027)) - _1002;
        float _1045 = inversesqrt(dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041)));
        float _1058 = ((_1045 * _1039) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_994 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1059 = ((_1045 * _1040) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_998 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1060 = ((_1045 * _1041) / cbModelParam._m0[34u].z) + ((((((_1002 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1058, _1059, _1060), 0.0);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1058, _1059, _1060), 0.0);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1058, _1059, _1060), 0.0);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1058, _1059, _1060), 0.0);
        float _1097 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1063.x + (-0.5));
        float _1099 = _1097 * (_1063.y + (-0.5));
        float _1100 = _1097 * (_1063.z + (-0.5));
        float _1107 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1070.x + (-0.5));
        float _1109 = _1107 * (_1070.y + (-0.5));
        float _1110 = _1107 * (_1070.z + (-0.5));
        float _1117 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1077.x + (-0.5));
        float _1119 = _1117 * (_1077.y + (-0.5));
        float _1120 = _1117 * (_1077.z + (-0.5));
        float _1127 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1084.x + (-0.5));
        float _1129 = _1127 * (_1084.y + (-0.5));
        float _1130 = _1127 * (_1084.z + (-0.5));
        float _1131 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1132 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1133 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1134 = _1098 * 0.5;
        float _1135 = _1108 * 0.5;
        float _1136 = _1118 * 0.5;
        float _1137 = dot(vec3(_1134, _1135, _1136), vec3(_1134, _1135, _1136));
        float _1142 = (_1137 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1137);
        float _1151 = (dot(vec3(_728, _729, _730), vec3(_1142 * _1134, _1142 * _1135, _1142 * _1136)) + 1.0) * 0.5;
        float _3839 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1161 = sqrt(((_1135 * _1135) + (_1134 * _1134)) + (_1136 * _1136)) / (_1131 + 9.9999997473787516355514526367188e-06);
        float _3850 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1163 = _1162 * 2.0;
        float _1167 = (1.0 - _1162) / (_1162 + 1.0);
        float _3861 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1177 = ((((1.0 - _1168) * (_1163 + 2.0)) * exp2(log2(isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * (_1163 + 1.0))) + _1168) * _1131;
        float _1178 = _1099 * 0.5;
        float _1179 = _1109 * 0.5;
        float _1180 = _1119 * 0.5;
        float _1181 = dot(vec3(_1178, _1179, _1180), vec3(_1178, _1179, _1180));
        float _1186 = (_1181 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1181);
        float _1194 = (dot(vec3(_728, _729, _730), vec3(_1186 * _1178, _1186 * _1179, _1186 * _1180)) + 1.0) * 0.5;
        float _3872 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1203 = sqrt(((_1179 * _1179) + (_1178 * _1178)) + (_1180 * _1180)) / (_1132 + 9.9999997473787516355514526367188e-06);
        float _3883 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1205 = _1204 * 2.0;
        float _1209 = (1.0 - _1204) / (_1204 + 1.0);
        float _3894 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1219 = ((((1.0 - _1210) * (_1205 + 2.0)) * exp2(log2(isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * (_1205 + 1.0))) + _1210) * _1132;
        float _1220 = _1100 * 0.5;
        float _1221 = _1110 * 0.5;
        float _1222 = _1120 * 0.5;
        float _1223 = dot(vec3(_1220, _1221, _1222), vec3(_1220, _1221, _1222));
        float _1228 = (_1223 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1223);
        float _1236 = (dot(vec3(_728, _729, _730), vec3(_1228 * _1220, _1228 * _1221, _1228 * _1222)) + 1.0) * 0.5;
        float _3905 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1245 = sqrt(((_1221 * _1221) + (_1220 * _1220)) + (_1222 * _1222)) / (_1133 + 9.9999997473787516355514526367188e-06);
        float _3916 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1247 = _1246 * 2.0;
        float _1251 = (1.0 - _1246) / (_1246 + 1.0);
        float _3927 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1261 = ((((1.0 - _1252) * (_1247 + 2.0)) * exp2(log2(isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * (_1247 + 1.0))) + _1252) * _1133;
        _1269 = _1100;
        _1271 = _1099;
        _1272 = _1098;
        _1273 = _1110;
        _1274 = _1109;
        _1275 = _1108;
        _1276 = _1120;
        _1277 = _1119;
        _1278 = _1118;
        _1279 = _1133;
        _1280 = _1132;
        _1281 = _1131;
        _1282 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)));
        _1283 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0)));
        _1284 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)));
    }
    else
    {
        _1269 = _1270;
        _1271 = _1270;
        _1272 = _1270;
        _1273 = _1270;
        _1274 = _1270;
        _1275 = _1270;
        _1276 = _1270;
        _1277 = _1270;
        _1278 = _1270;
        _1279 = _1270;
        _1280 = _1270;
        _1281 = _1270;
        _1282 = 0.0;
        _1283 = 0.0;
        _1284 = 0.0;
    }
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1309 = fma(_968, cbModelParam._m0[30u].z, fma(_964, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _960));
        float _1313 = fma(_968, cbModelParam._m0[31u].z, fma(_964, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _960));
        float _1317 = fma(_968, cbModelParam._m0[32u].z, fma(_964, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _960));
        float _1340 = _960 + _728;
        float _1341 = _964 + _729;
        float _1342 = _968 + _730;
        float _1352 = fma(_1342, cbModelParam._m0[30u].z, fma(_1341, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1340)) - _1309;
        float _1353 = fma(_1342, cbModelParam._m0[31u].z, fma(_1341, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1340)) - _1313;
        float _1354 = fma(_1342, cbModelParam._m0[32u].z, fma(_1341, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1340)) - _1317;
        float _1358 = inversesqrt(dot(vec3(_1352, _1353, _1354), vec3(_1352, _1353, _1354)));
        float _1371 = ((_1358 * _1352) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1309 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1372 = ((_1358 * _1353) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1313 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1373 = ((_1358 * _1354) / cbModelParam._m0[35u].z) + ((((((_1317 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1375 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1371, _1372, _1373), 0.0);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1371, _1372, _1373), 0.0);
        vec4 _1389 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1371, _1372, _1373), 0.0);
        vec4 _1396 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1371, _1372, _1373), 0.0);
        float _1408 = exp2((_1375.w + (-0.5)) * 20.0) * 2.0;
        float _1409 = _1408 * (_1375.x + (-0.5));
        float _1410 = _1408 * (_1375.y + (-0.5));
        float _1411 = _1408 * (_1375.z + (-0.5));
        float _1418 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1419 = _1418 * (_1382.x + (-0.5));
        float _1420 = _1418 * (_1382.y + (-0.5));
        float _1421 = _1418 * (_1382.z + (-0.5));
        float _1428 = exp2((_1389.w + (-0.5)) * 20.0) * 2.0;
        float _1429 = _1428 * (_1389.x + (-0.5));
        float _1430 = _1428 * (_1389.y + (-0.5));
        float _1431 = _1428 * (_1389.z + (-0.5));
        float _1438 = exp2((_1396.w + (-0.5)) * 20.0) * 2.0;
        float _1439 = _1438 * (_1396.x + (-0.5));
        float _1440 = _1438 * (_1396.y + (-0.5));
        float _1441 = _1438 * (_1396.z + (-0.5));
        float _1442 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1443 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1444 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1445 = _1409 * 0.5;
        float _1446 = _1419 * 0.5;
        float _1447 = _1429 * 0.5;
        float _1448 = dot(vec3(_1445, _1446, _1447), vec3(_1445, _1446, _1447));
        float _1453 = (_1448 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1448);
        float _1461 = (dot(vec3(_728, _729, _730), vec3(_1453 * _1445, _1453 * _1446, _1453 * _1447)) + 1.0) * 0.5;
        float _3968 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1470 = sqrt(((_1446 * _1446) + (_1445 * _1445)) + (_1447 * _1447)) / (_1442 + 9.9999997473787516355514526367188e-06);
        float _3979 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1472 = _1471 * 2.0;
        float _1476 = (1.0 - _1471) / (_1471 + 1.0);
        float _3990 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1486 = ((((1.0 - _1477) * (_1472 + 2.0)) * exp2(log2(isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * (_1472 + 1.0))) + _1477) * _1442;
        float _1487 = _1410 * 0.5;
        float _1488 = _1420 * 0.5;
        float _1489 = _1430 * 0.5;
        float _1490 = dot(vec3(_1487, _1488, _1489), vec3(_1487, _1488, _1489));
        float _1495 = (_1490 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1490);
        float _1503 = (dot(vec3(_728, _729, _730), vec3(_1495 * _1487, _1495 * _1488, _1495 * _1489)) + 1.0) * 0.5;
        float _4001 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1512 = sqrt(((_1488 * _1488) + (_1487 * _1487)) + (_1489 * _1489)) / (_1443 + 9.9999997473787516355514526367188e-06);
        float _4012 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1514 = _1513 * 2.0;
        float _1518 = (1.0 - _1513) / (_1513 + 1.0);
        float _4023 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1528 = ((((1.0 - _1519) * (_1514 + 2.0)) * exp2(log2(isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * (_1514 + 1.0))) + _1519) * _1443;
        float _1529 = _1411 * 0.5;
        float _1530 = _1421 * 0.5;
        float _1531 = _1431 * 0.5;
        float _1532 = dot(vec3(_1529, _1530, _1531), vec3(_1529, _1530, _1531));
        float _1537 = (_1532 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1532);
        float _1545 = (dot(vec3(_728, _729, _730), vec3(_1537 * _1529, _1537 * _1530, _1537 * _1531)) + 1.0) * 0.5;
        float _4034 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1554 = sqrt(((_1530 * _1530) + (_1529 * _1529)) + (_1531 * _1531)) / (_1444 + 9.9999997473787516355514526367188e-06);
        float _4045 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1556 = _1555 * 2.0;
        float _1560 = (1.0 - _1555) / (_1555 + 1.0);
        float _4056 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1570 = ((((1.0 - _1561) * (_1556 + 2.0)) * exp2(log2(isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (_1556 + 1.0))) + _1561) * _1444;
        _1578 = _1411;
        _1579 = _1410;
        _1580 = _1409;
        _1581 = _1421;
        _1582 = _1420;
        _1583 = _1419;
        _1584 = _1431;
        _1585 = _1430;
        _1586 = _1429;
        _1587 = _1444;
        _1588 = _1443;
        _1589 = _1442;
        _1590 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)));
        _1591 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)));
        _1592 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)));
    }
    else
    {
        _1578 = _1270;
        _1579 = _1270;
        _1580 = _1270;
        _1581 = _1270;
        _1582 = _1270;
        _1583 = _1270;
        _1584 = _1270;
        _1585 = _1270;
        _1586 = _1270;
        _1587 = _1270;
        _1588 = _1270;
        _1589 = _1270;
        _1590 = 0.0;
        _1591 = 0.0;
        _1592 = 0.0;
    }
    float _1602 = (cbModelParam._m0[1u].x * (_1590 - _1282)) + _1282;
    float _1603 = (cbModelParam._m0[1u].x * (_1591 - _1283)) + _1283;
    float _1604 = (cbModelParam._m0[1u].x * (_1592 - _1284)) + _1284;
    float _1625 = fma(_1604, cbSceneParam._m0[89u].z, fma(_1603, cbSceneParam._m0[89u].y, _1602 * cbSceneParam._m0[89u].x));
    float _1628 = fma(_1604, cbSceneParam._m0[90u].z, fma(_1603, cbSceneParam._m0[90u].y, _1602 * cbSceneParam._m0[90u].x));
    float _1631 = fma(_1604, cbSceneParam._m0[91u].z, fma(_1603, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1602));
    float _1646 = _904 * 0.5;
    float _1647 = _905 * 0.5;
    float _1648 = _906 * 0.5;
    float _1649 = dot(vec4(_1646, _1647, _1648, 1.0), vec4(_1580, _1583, _1586, _1589));
    float _1652 = dot(vec4(_1646, _1647, _1648, 1.0), vec4(_1579, _1582, _1585, _1588));
    float _1655 = dot(vec4(_1646, _1647, _1648, 1.0), vec4(_1578, _1581, _1584, _1587));
    float _1689;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1662 = dot(vec4(_1646, _1647, _1648, 1.0), vec4(_1269, _1273, _1276, _1279));
        float _1666 = dot(vec4(_1646, _1647, _1648, 1.0), vec4(_1271, _1274, _1277, _1280));
        float _1670 = dot(vec4(_1646, _1647, _1648, 1.0), vec4(_1272, _1275, _1278, _1281));
        float _1677 = dot(vec4(cbModelParam._m0[39u]), vec4(_1646, _1647, _1648, 1.0));
        _1689 = dot(vec3(isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)), isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)), isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1677) ? 0.0 : (isnan(0.0) ? _1677 : max(0.0, _1677))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1689 = 1.0;
    }
    float _1700;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1691 = dot(vec4(cbModelParam._m0[40u]), vec4(_1646, _1647, _1648, 1.0));
        _1700 = dot(vec3(isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0)), isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)), isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1691) ? 0.0 : (isnan(0.0) ? _1691 : max(0.0, _1691))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1700 = 1.0;
    }
    float _1704 = (_1700 * cbModelParam._m0[1u].x) + (_1689 * (1.0 - cbModelParam._m0[1u].x));
    float _1714 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _731);
    float _1715 = isnan(_1714) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1714 : min(cbModelParam._m0[25u].z, _1714));
    float _1795;
    float _1797;
    float _1799;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1762 = fma(_968, cbModelParam._m0[13u].z, fma(_964, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _960)) + cbModelParam._m0[13u].w;
        float _1766 = fma(_968, cbModelParam._m0[14u].z, fma(_964, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _960)) + cbModelParam._m0[14u].w;
        float _1770 = fma(_968, cbModelParam._m0[15u].z, fma(_964, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _960)) + cbModelParam._m0[15u].w;
        float _1773 = fma(_906, cbModelParam._m0[13u].z, fma(_905, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _904));
        float _1776 = fma(_906, cbModelParam._m0[14u].z, fma(_905, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _904));
        float _1779 = fma(_906, cbModelParam._m0[15u].z, fma(_905, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _904));
        float _1807;
        if (_1773 > 0.0)
        {
            _1807 = abs((1.0 - _1762) / _1773);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1773 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1762 + 1.0) / _1773);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1807 = frontier_phi_14_12_ladder;
        }
        float _2010;
        if (_1776 > 0.0)
        {
            _2010 = abs((1.0 - _1766) / _1776);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1776 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1766 + 1.0) / _1776);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2010 = frontier_phi_23_19_ladder;
        }
        float _2264;
        if (_1779 > 0.0)
        {
            _2264 = abs((1.0 - _1770) / _1779);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1779 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1770 + 1.0) / _1779);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2264 = frontier_phi_35_30_ladder;
        }
        float _2266 = isnan(_2010) ? _1807 : (isnan(_1807) ? _2010 : min(_1807, _2010));
        float _2267 = isnan(_2264) ? _2266 : (isnan(_2266) ? _2264 : min(_2266, _2264));
        float _2271 = (_2267 * _1773) + _1762;
        float _2272 = (_2267 * _1776) + _1766;
        float _2273 = (_2267 * _1779) + _1770;
        float _2274 = _2267 * 9.9999997473787516355514526367188e-05;
        float _2276 = (-1.0) - _2274;
        float _2278 = _2274 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2273 > _2278) || ((_2273 < _2276) || ((_2272 > _2278) || ((_2272 < _2276) || ((_2271 < _2276) || (_2271 > _2278))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2401 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2273, cbModelParam._m0[9u].z, fma(_2272, cbModelParam._m0[9u].y, _2271 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2273, cbModelParam._m0[10u].z, fma(_2272, cbModelParam._m0[10u].y, _2271 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2273, cbModelParam._m0[11u].z, fma(_2272, cbModelParam._m0[11u].y, _2271 * cbModelParam._m0[11u].x))), _1715);
            frontier_phi_13_35_ladder = _2401.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2401.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2401.x * cbModelParam._m0[1u].y;
        }
        _1795 = frontier_phi_13_35_ladder_2;
        _1797 = frontier_phi_13_35_ladder_1;
        _1799 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1783 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_904, _905, _906), _1715);
        _1795 = _1783.x * cbModelParam._m0[1u].y;
        _1797 = _1783.y * cbModelParam._m0[1u].y;
        _1799 = _1783.z * cbModelParam._m0[1u].y;
    }
    float _1803 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _731);
    float _1804 = isnan(_1803) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1803 : min(cbModelParam._m0[25u].w, _1803));
    float _1893;
    float _1895;
    float _1897;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1857 = fma(_968, cbModelParam._m0[21u].z, fma(_964, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _960)) + cbModelParam._m0[21u].w;
        float _1861 = fma(_968, cbModelParam._m0[22u].z, fma(_964, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _960)) + cbModelParam._m0[22u].w;
        float _1865 = fma(_968, cbModelParam._m0[23u].z, fma(_964, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _960)) + cbModelParam._m0[23u].w;
        float _1868 = fma(_906, cbModelParam._m0[21u].z, fma(_905, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _904));
        float _1871 = fma(_906, cbModelParam._m0[22u].z, fma(_905, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _904));
        float _1874 = fma(_906, cbModelParam._m0[23u].z, fma(_905, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _904));
        float _2015;
        if (_1868 > 0.0)
        {
            _2015 = abs((1.0 - _1857) / _1868);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1868 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1857 + 1.0) / _1868);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2015 = frontier_phi_25_21_ladder;
        }
        float _2291;
        if (_1871 > 0.0)
        {
            _2291 = abs((1.0 - _1861) / _1871);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1871 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1861 + 1.0) / _1871);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2291 = frontier_phi_37_32_ladder;
        }
        float _2504;
        if (_1874 > 0.0)
        {
            _2504 = abs((1.0 - _1865) / _1874);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1874 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1865 + 1.0) / _1874);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2504 = frontier_phi_46_43_ladder;
        }
        float _2506 = isnan(_2291) ? _2015 : (isnan(_2015) ? _2291 : min(_2015, _2291));
        float _2507 = isnan(_2504) ? _2506 : (isnan(_2506) ? _2504 : min(_2506, _2504));
        float _2511 = (_2507 * _1868) + _1857;
        float _2512 = (_2507 * _1871) + _1861;
        float _2513 = (_2507 * _1874) + _1865;
        float _2514 = _2507 * 9.9999997473787516355514526367188e-05;
        float _2515 = (-1.0) - _2514;
        float _2517 = _2514 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2513 > _2517) || ((_2513 < _2515) || ((_2512 > _2517) || ((_2512 < _2515) || ((_2511 < _2515) || (_2511 > _2517))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2712 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2513, cbModelParam._m0[17u].z, fma(_2512, cbModelParam._m0[17u].y, _2511 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2513, cbModelParam._m0[18u].z, fma(_2512, cbModelParam._m0[18u].y, _2511 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2513, cbModelParam._m0[19u].z, fma(_2512, cbModelParam._m0[19u].y, _2511 * cbModelParam._m0[19u].x))), _1804);
            frontier_phi_22_46_ladder = _2712.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2712.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2712.x * cbModelParam._m0[1u].z;
        }
        _1893 = frontier_phi_22_46_ladder_2;
        _1895 = frontier_phi_22_46_ladder_1;
        _1897 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1877 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_904, _905, _906), _1804);
        _1893 = _1877.x * cbModelParam._m0[1u].z;
        _1895 = _1877.y * cbModelParam._m0[1u].z;
        _1897 = _1877.z * cbModelParam._m0[1u].z;
    }
    float _1910 = (((_931 * _880) + _932) * _896) * ((cbModelParam._m0[1u].w * (_1893 - _1795)) + _1795);
    float _1912 = (((_931 * _882) + _932) * _896) * ((cbModelParam._m0[1u].w * (_1895 - _1797)) + _1797);
    float _1914 = (((_931 * _883) + _932) * _896) * ((cbModelParam._m0[1u].w * (_1897 - _1799)) + _1799);
    float _1917 = fma(_1914, cbSceneParam._m0[89u].z, fma(_1912, cbSceneParam._m0[89u].y, _1910 * cbSceneParam._m0[89u].x));
    float _1920 = fma(_1914, cbSceneParam._m0[90u].z, fma(_1912, cbSceneParam._m0[90u].y, _1910 * cbSceneParam._m0[90u].x));
    float _1923 = fma(_1914, cbSceneParam._m0[91u].z, fma(_1912, cbSceneParam._m0[91u].y, _1910 * cbSceneParam._m0[91u].x));
    uvec4 _1933 = floatBitsToUint(cbInstanceData._m0[_267 + 5u]);
    uint _1935 = _1933.x * 14u;
    uint _1936 = _1935 + 13u;
    float _1943 = _896 + (-1.0);
    float _1948 = (cbLight._m0[_1936].x * _1943) + 1.0;
    float _1949 = (cbLight._m0[_1936].y * _1943) + 1.0;
    float _1950 = (cbLight._m0[_1936].z * _1943) + 1.0;
    float _1951 = (cbLight._m0[_1936].w * _1943) + 1.0;
    uint _1952 = _1935 + 5u;
    float _1958 = isnan(1.0) ? _1949 : (isnan(_1949) ? 1.0 : min(_1949, 1.0));
    uint _1962 = _1935 + 4u;
    float _1969 = isnan(1.0) ? _1948 : (isnan(_1948) ? 1.0 : min(_1948, 1.0));
    uint _1973 = _1935 | 1u;
    float _1984 = dot(vec3(cbLight._m0[_1935].xyz), vec3(_728, _729, _730));
    float _1987 = dot(vec3(cbLight._m0[_1973].xyz), vec3(_728, _729, _730));
    float _4192 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _4203 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
    float _1992 = (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * 0.3183098733425140380859375;
    float _1994 = (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * 0.3183098733425140380859375;
    float _2001 = ((cbLight._m0[_1952].x * _1958) * _1994) + ((cbLight._m0[_1962].x * _1969) * _1992);
    float _2002 = ((_1958 * cbLight._m0[_1952].y) * _1994) + ((_1969 * cbLight._m0[_1962].y) * _1992);
    float _2003 = ((_1958 * cbLight._m0[_1952].z) * _1994) + ((_1969 * cbLight._m0[_1962].z) * _1992);
    uvec4 _2007 = floatBitsToUint(cbLight._m0[_1935 + 12u]);
    bool _2009 = _2007.x == 0u;
    float _2020;
    float _2022;
    float _2024;
    if (_2009)
    {
        _2020 = _2001;
        _2022 = _2002;
        _2024 = _2003;
    }
    else
    {
        uint _2028 = _1935 + 6u;
        float _2044 = (dot(vec3(cbLight._m0[_1935 + 2u].xyz), vec3(_728, _729, _730)) * 0.5) + 0.5;
        float _2045 = _2044 * _2044;
        float _4214 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
        float _2046 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _2047 = isnan(1.0) ? _1950 : (isnan(_1950) ? 1.0 : min(_1950, 1.0));
        _2020 = (((cbLight._m0[_2028].x * 0.3183098733425140380859375) * _2046) * _2047) + _2001;
        _2022 = (((cbLight._m0[_2028].y * 0.3183098733425140380859375) * _2046) * _2047) + _2002;
        _2024 = (((cbLight._m0[_2028].z * 0.3183098733425140380859375) * _2046) * _2047) + _2003;
    }
    bool _2027 = _2007.y == 0u;
    float _2065;
    float _2067;
    float _2069;
    if (_2027)
    {
        _2065 = _2020;
        _2067 = _2022;
        _2069 = _2024;
    }
    else
    {
        uint _2235 = _1935 + 7u;
        float _2251 = (dot(vec3(cbLight._m0[_1935 + 3u].xyz), vec3(_728, _729, _730)) * 0.5) + 0.5;
        float _2252 = _2251 * _2251;
        float _4230 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        float _2253 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _2254 = isnan(1.0) ? _1951 : (isnan(_1951) ? 1.0 : min(_1951, 1.0));
        _2065 = (((cbLight._m0[_2235].x * 0.3183098733425140380859375) * _2253) * _2254) + _2020;
        _2067 = (((cbLight._m0[_2235].y * 0.3183098733425140380859375) * _2253) * _2254) + _2022;
        _2069 = (((cbLight._m0[_2235].z * 0.3183098733425140380859375) * _2253) * _2254) + _2024;
    }
    uint _2072 = _1935 + 8u;
    float _2085 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1935].w)) * _731) * 0.949999988079071044921875);
    float _2086 = _2085 * _2085;
    float _2087 = cbLight._m0[_1935].x + _807;
    float _2088 = cbLight._m0[_1935].y + _808;
    float _2089 = cbLight._m0[_1935].z + _809;
    float _2093 = inversesqrt(dot(vec3(_2087, _2088, _2089), vec3(_2087, _2088, _2089)));
    float _2094 = _2093 * _2087;
    float _2095 = _2093 * _2088;
    float _2096 = _2093 * _2089;
    float _2097 = dot(vec3(_728, _729, _730), vec3(cbLight._m0[_1935].xyz));
    float _4246 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2100 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
    float _4257 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _2101 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
    float _2102 = dot(vec3(_728, _729, _730), vec3(_2094, _2095, _2096));
    float _4268 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2105 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
    float _2106 = dot(vec3(cbLight._m0[_1935].xyz), vec3(_2094, _2095, _2096));
    float _4279 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2110 = _2086 * _2086;
    float _2114 = ((_2105 * _2105) * (_2110 + (-1.0))) + 1.0;
    float _2122 = exp2(log2(1.0 - (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0)))) * 5.0);
    float _2123 = 0.959999978542327880859375 - _877;
    float _2125 = 0.959999978542327880859375 - _878;
    float _2126 = 0.959999978542327880859375 - _879;
    float _2133 = 1.0 - _2086;
    float _2144 = (0.5 / (((_2101 * ((_2100 * _2133) + _2086)) + 9.9999999392252902907785028219223e-09) + (((_2101 * _2133) + _2086) * _2100))) * _2100;
    float _4290 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2146 = (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_2110 / ((_2114 * _2114) * 3.141590118408203125));
    uint _2157 = _1935 + 9u;
    float _2168 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1973].w)) * _731) * 0.949999988079071044921875);
    float _2169 = _2168 * _2168;
    float _2170 = cbLight._m0[_1973].x + _807;
    float _2171 = cbLight._m0[_1973].y + _808;
    float _2172 = cbLight._m0[_1973].z + _809;
    float _2176 = inversesqrt(dot(vec3(_2170, _2171, _2172), vec3(_2170, _2171, _2172)));
    float _2177 = _2176 * _2170;
    float _2178 = _2176 * _2171;
    float _2179 = _2176 * _2172;
    float _2180 = dot(vec3(_728, _729, _730), vec3(cbLight._m0[_1973].xyz));
    float _4301 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2183 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
    float _2184 = dot(vec3(_728, _729, _730), vec3(_2177, _2178, _2179));
    float _4312 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2187 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
    float _2188 = dot(vec3(cbLight._m0[_1973].xyz), vec3(_2177, _2178, _2179));
    float _4323 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2192 = _2169 * _2169;
    float _2196 = ((_2187 * _2187) * (_2192 + (-1.0))) + 1.0;
    float _2203 = exp2(log2(1.0 - (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0)))) * 5.0);
    float _2210 = 1.0 - _2169;
    float _2220 = (0.5 / (((_2101 * ((_2183 * _2210) + _2169)) + 9.9999999392252902907785028219223e-09) + (((_2101 * _2210) + _2169) * _2183))) * _2183;
    float _4334 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2222 = (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_2192 / ((_2196 * _2196) * 3.141590118408203125));
    float _2232 = (((((_2203 * _2123) + _880) * cbLight._m0[_2157].x) * _2222) * _1958) + (((((_2122 * _2123) + _880) * cbLight._m0[_2072].x) * _2146) * _1969);
    float _2233 = (((((_2203 * _2125) + _882) * cbLight._m0[_2157].y) * _2222) * _1958) + (((((_2122 * _2125) + _882) * cbLight._m0[_2072].y) * _2146) * _1969);
    float _2234 = (((((_2203 * _2126) + _883) * cbLight._m0[_2157].z) * _2222) * _1958) + (((((_2122 * _2126) + _883) * cbLight._m0[_2072].z) * _2146) * _1969);
    float _2296;
    float _2298;
    float _2300;
    if (_2009)
    {
        _2296 = _2232;
        _2298 = _2233;
        _2300 = _2234;
    }
    else
    {
        uint _2302 = _1935 + 2u;
        uint _2306 = _1935 + 10u;
        float _2320 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2302].w)) * _731) * 0.949999988079071044921875);
        float _2321 = _2320 * _2320;
        float _2322 = cbLight._m0[_2302].x + _807;
        float _2323 = cbLight._m0[_2302].y + _808;
        float _2324 = cbLight._m0[_2302].z + _809;
        float _2328 = inversesqrt(dot(vec3(_2322, _2323, _2324), vec3(_2322, _2323, _2324)));
        float _2329 = _2328 * _2322;
        float _2330 = _2328 * _2323;
        float _2331 = _2328 * _2324;
        float _2332 = dot(vec3(_728, _729, _730), vec3(cbLight._m0[_2302].xyz));
        float _4345 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2335 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _2336 = dot(vec3(_728, _729, _730), vec3(_2329, _2330, _2331));
        float _4356 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
        float _2339 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _2340 = dot(vec3(cbLight._m0[_2302].xyz), vec3(_2329, _2330, _2331));
        float _4367 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        float _2344 = _2321 * _2321;
        float _2348 = ((_2339 * _2339) * (_2344 + (-1.0))) + 1.0;
        float _2355 = exp2(log2(1.0 - (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0)))) * 5.0);
        float _2362 = 1.0 - _2321;
        float _2372 = (0.5 / (((_2101 * ((_2335 * _2362) + _2321)) + 9.9999999392252902907785028219223e-09) + (((_2101 * _2362) + _2321) * _2335))) * _2335;
        float _4378 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        float _2374 = (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (_2344 / ((_2348 * _2348) * 3.141590118408203125));
        float _2375 = isnan(1.0) ? _1950 : (isnan(_1950) ? 1.0 : min(_1950, 1.0));
        _2296 = (((((_2355 * _2123) + _880) * cbLight._m0[_2306].x) * _2374) * _2375) + _2232;
        _2298 = (((((_2355 * _2125) + _882) * cbLight._m0[_2306].y) * _2374) * _2375) + _2233;
        _2300 = (((((_2355 * _2126) + _883) * cbLight._m0[_2306].z) * _2374) * _2375) + _2234;
    }
    float _2410;
    float _2412;
    float _2414;
    if (_2027)
    {
        _2410 = _2296;
        _2412 = _2298;
        _2414 = _2300;
    }
    else
    {
        uint _2421 = _1935 + 3u;
        uint _2425 = _1935 + 11u;
        float _2439 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2421].w)) * _731) * 0.949999988079071044921875);
        float _2440 = _2439 * _2439;
        float _2441 = cbLight._m0[_2421].x + _807;
        float _2442 = cbLight._m0[_2421].y + _808;
        float _2443 = cbLight._m0[_2421].z + _809;
        float _2447 = inversesqrt(dot(vec3(_2441, _2442, _2443), vec3(_2441, _2442, _2443)));
        float _2448 = _2447 * _2441;
        float _2449 = _2447 * _2442;
        float _2450 = _2447 * _2443;
        float _2451 = dot(vec3(_728, _729, _730), vec3(cbLight._m0[_2421].xyz));
        float _4394 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2454 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _2455 = dot(vec3(_728, _729, _730), vec3(_2448, _2449, _2450));
        float _4405 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
        float _2458 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _2459 = dot(vec3(cbLight._m0[_2421].xyz), vec3(_2448, _2449, _2450));
        float _4416 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        float _2463 = _2440 * _2440;
        float _2467 = ((_2458 * _2458) * (_2463 + (-1.0))) + 1.0;
        float _2474 = exp2(log2(1.0 - (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0)))) * 5.0);
        float _2481 = 1.0 - _2440;
        float _2491 = (0.5 / (((_2101 * ((_2454 * _2481) + _2440)) + 9.9999999392252902907785028219223e-09) + (((_2101 * _2481) + _2440) * _2454))) * _2454;
        float _4427 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2493 = (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_2463 / ((_2467 * _2467) * 3.141590118408203125));
        float _2494 = isnan(1.0) ? _1951 : (isnan(_1951) ? 1.0 : min(_1951, 1.0));
        _2410 = (((((_2474 * _2123) + _880) * cbLight._m0[_2425].x) * _2493) * _2494) + _2296;
        _2412 = (((((_2474 * _2125) + _882) * cbLight._m0[_2425].y) * _2493) * _2494) + _2298;
        _2414 = (((((_2474 * _2126) + _883) * cbLight._m0[_2425].z) * _2493) * _2494) + _2300;
    }
    float _2629;
    float _2631;
    float _2633;
    float _2635;
    float _2637;
    float _2639;
    if (_1933.y == 0u)
    {
        float _2569 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2570 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2569;
        float _2571 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2569;
        float _2572 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2569;
        uvec4 _2584 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2585 = _2584.x;
        uint _2596 = uint((float(_2584.y) * floor(float(uint(cbSceneParam._m0[85u].y * _816) / _2585))) + floor(float(uint(cbSceneParam._m0[85u].x * _815) / _2585)));
        float _2606 = (log2(_2572 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2607 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
        uint _2610 = uint(isnan(14.0) ? _2607 : (isnan(_2607) ? 14.0 : min(_2607, 14.0)));
        uvec4 _2615 = texelFetch(g_lightClusterGridBuffer, int(((_2610 << 2u) + (_2596 << 6u)) >> 2u));
        uint _2616 = _2615.x;
        uint _2617 = _2584.z;
        float _2717;
        float _2719;
        float _2721;
        float _2723;
        float _2725;
        float _2727;
        if (((((1u << ((_2617 >> 4u) & 15u)) + 4294967295u) & _2616) == 0u) || ((_2617 & 240u) == 0u))
        {
            _2717 = 0.0;
            _2719 = 0.0;
            _2721 = 0.0;
            _2723 = 0.0;
            _2725 = 0.0;
            _2727 = 0.0;
        }
        else
        {
            float _2718;
            float _2720;
            float _2722;
            float _2724;
            float _2726;
            float _2728;
            float _2861 = 0.0;
            float _2862 = 0.0;
            float _2863 = 0.0;
            float _2864 = 0.0;
            float _2865 = 0.0;
            float _2866 = 0.0;
            uint _2867 = 0u;
            uint _2876;
            bool _2877;
            for (;;)
            {
                _2876 = texelFetch(g_lightClassification, int((((_2610 << 5u) + (_2596 << 9u)) + (_2867 << 2u)) >> 2u)).x;
                _2877 = _2876 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2877)
                {
                    frontier_phi_61_pred = _2861;
                    frontier_phi_61_pred_1 = _2866;
                    frontier_phi_61_pred_2 = _2865;
                    frontier_phi_61_pred_3 = _2864;
                    frontier_phi_61_pred_4 = _2863;
                    frontier_phi_61_pred_5 = _2862;
                }
                else
                {
                    float _2985;
                    float _2986;
                    float _2987;
                    float _2988;
                    float _2989;
                    float _2990;
                    uint _2991;
                    _2985 = _2861;
                    _2986 = _2862;
                    _2987 = _2863;
                    _2988 = _2864;
                    _2989 = _2865;
                    _2990 = _2866;
                    _2991 = _2876;
                    float _2917;
                    float _2918;
                    float _2919;
                    float _2920;
                    float _2921;
                    float _2922;
                    for (;;)
                    {
                        uint _2995 = uint(findLSB(_2991)) + (_2867 << 5u);
                        uint _2992 = (_2991 + 4294967295u) & _2991;
                        uint _2997 = _2995 * 48u;
                        vec4 _3011 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2997)).x, texelFetch(g_PointLightRenderingBuffer, int(_2997 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2997 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2997 + 3u)).x));
                        uint _3017 = (_2995 * 48u) + 4u;
                        vec4 _3030 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3017)).x, texelFetch(g_PointLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3017 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3017 + 3u)).x));
                        uint _3036 = (_2995 * 48u) + 8u;
                        vec3 _3047 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3036)).x, texelFetch(g_PointLightRenderingBuffer, int(_3036 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3036 + 2u)).x));
                        float _3051 = _3011.x - _2570;
                        float _3052 = _3011.y - _2571;
                        float _3053 = _3011.z - _2572;
                        float _3054 = dot(vec3(_3051, _3052, _3053), vec3(_3051, _3052, _3053));
                        float _3057 = inversesqrt(_3054);
                        float _3058 = _3057 * _3051;
                        float _3059 = _3057 * _3052;
                        float _3060 = _3057 * _3053;
                        float _3061 = dot(vec3(_837, _840, _843), vec3(_3058, _3059, _3060));
                        float _3066 = 1.0 - (_3054 * _3011.w);
                        float _4453 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                        float _3067 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
                        float _3068 = sqrt(_3054) * _3030.w;
                        float _3071 = 1.39999997615814208984375 / (_3068 + 1.39999997615814208984375);
                        float _3072 = _3071 * _3071;
                        float _3075 = ((1.0 - _3072) * _3061) + _3072;
                        float _3078 = _3068 * _3068;
                        float _3082 = ((isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0))) * _3067) / ((_3078 * 0.699999988079071044921875) + 1.0);
                        float _3086 = (-0.0) - _2570;
                        float _3087 = (-0.0) - _2571;
                        float _3088 = (-0.0) - _2572;
                        float _3092 = inversesqrt(dot(vec3(_3086, _3087, _3088), vec3(_3086, _3087, _3088)));
                        float _3093 = _3092 * _3086;
                        float _3094 = _3092 * _3087;
                        float _3095 = _3092 * _3088;
                        float _3103 = exp2(log2(1.0 / ((_3078 * 3.5) + 5.0)) * 0.25);
                        float _3104 = 1.0 - _912;
                        float _3111 = sqrt(1.0 - ((1.0 - (_3104 * _3104)) * (1.0 - (_3103 * _3103))));
                        float _3112 = _3111 * _3111;
                        float _3113 = _3112 * _3112;
                        float _3114 = _3093 + _3058;
                        float _3115 = _3094 + _3059;
                        float _3116 = _3095 + _3060;
                        float _3120 = inversesqrt(dot(vec3(_3114, _3115, _3116), vec3(_3114, _3115, _3116)));
                        float _3124 = dot(vec3(_837, _840, _843), vec3(_3093, _3094, _3095));
                        float _4469 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
                        float _3127 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
                        float _3128 = dot(vec3(_837, _840, _843), vec3(_3120 * _3114, _3120 * _3115, _3120 * _3116));
                        float _4480 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                        float _3131 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
                        float _3135 = ((_3131 * _3131) * (_3113 + (-1.0))) + 1.0;
                        float _3136 = _3071 * _3112;
                        float _3137 = _3136 * _3136;
                        float _3140 = ((1.0 - _3137) * _3061) + _3137;
                        float _4491 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                        float _3141 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
                        float _3142 = 1.0 - _3112;
                        float _3152 = (0.5 / (((_3141 * ((_3127 * _3142) + _3112)) + 9.9999999392252902907785028219223e-09) + (((_3141 * _3142) + _3112) * _3127))) * _3141;
                        float _4502 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                        float _3163 = (((_3113 * 3.1415927410125732421875) * (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0)))) / ((_3135 * _3135) * ((_3078 * 2.1991131305694580078125) + 3.141590118408203125))) * _3067;
                        _2920 = (_3082 * _3030.x) + _2988;
                        _2921 = (_3082 * _3030.y) + _2989;
                        _2922 = (_3082 * _3030.z) + _2990;
                        _2917 = (_3163 * _3047.x) + _2985;
                        _2918 = (_3163 * _3047.y) + _2986;
                        _2919 = (_3163 * _3047.z) + _2987;
                        if (_2992 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2985 = _2917;
                            _2986 = _2918;
                            _2987 = _2919;
                            _2988 = _2920;
                            _2989 = _2921;
                            _2990 = _2922;
                            _2991 = _2992;
                        }
                    }
                    frontier_phi_61_pred = _2917;
                    frontier_phi_61_pred_1 = _2922;
                    frontier_phi_61_pred_2 = _2921;
                    frontier_phi_61_pred_3 = _2920;
                    frontier_phi_61_pred_4 = _2919;
                    frontier_phi_61_pred_5 = _2918;
                }
                _2718 = frontier_phi_61_pred;
                _2728 = frontier_phi_61_pred_1;
                _2726 = frontier_phi_61_pred_2;
                _2724 = frontier_phi_61_pred_3;
                _2722 = frontier_phi_61_pred_4;
                _2720 = frontier_phi_61_pred_5;
                uint _2868 = _2867 + 1u;
                if (_2868 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2861 = _2718;
                    _2862 = _2720;
                    _2863 = _2722;
                    _2864 = _2724;
                    _2865 = _2726;
                    _2866 = _2728;
                    _2867 = _2868;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2717 = _2718;
            _2719 = _2720;
            _2721 = _2722;
            _2723 = _2724;
            _2725 = _2726;
            _2727 = _2728;
        }
        uvec4 _2731 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2732 = _2731.z;
        uint _2734 = (_2732 >> 8u) & 15u;
        float _2829;
        float _2831;
        float _2833;
        float _2835;
        float _2837;
        float _2839;
        if (((4294967295u << _2734) & _2616) == 0u)
        {
            _2829 = _2717;
            _2831 = _2719;
            _2833 = _2721;
            _2835 = _2723;
            _2837 = _2725;
            _2839 = _2727;
        }
        else
        {
            float _2854 = inversesqrt(dot(vec3(_2570, _2571, _2572), vec3(_2570, _2571, _2572)));
            float _2855 = _2854 * _2570;
            float _2856 = _2854 * _2571;
            float _2857 = _2854 * _2572;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2734 < ((_2732 >> 12u) & 15u))
            {
                float _2830;
                float _2832;
                float _2834;
                float _2836;
                float _2838;
                float _2840;
                float _2968 = _2717;
                float _2969 = _2719;
                float _2970 = _2721;
                float _2971 = _2723;
                float _2972 = _2725;
                float _2973 = _2727;
                uint _2974 = _2734;
                uint _2983;
                bool _2984;
                for (;;)
                {
                    _2983 = texelFetch(g_lightClassification, int((((_2610 << 5u) + (_2596 << 9u)) + (_2974 << 2u)) >> 2u)).x;
                    _2984 = _2983 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2984)
                    {
                        frontier_phi_67_pred = _2971;
                        frontier_phi_67_pred_1 = _2972;
                        frontier_phi_67_pred_2 = _2973;
                        frontier_phi_67_pred_3 = _2970;
                        frontier_phi_67_pred_4 = _2969;
                        frontier_phi_67_pred_5 = _2968;
                    }
                    else
                    {
                        float _3168;
                        float _3169;
                        float _3170;
                        float _3171;
                        float _3172;
                        float _3173;
                        float _3461;
                        float _3462;
                        float _3463;
                        float _3464;
                        float _3465;
                        float _3466;
                        float _3181 = _2968;
                        float _3182 = _2969;
                        float _3183 = _2970;
                        float _3184 = _2971;
                        float _3185 = _2972;
                        float _3186 = _2973;
                        uint _3187 = _2983;
                        uint _3188;
                        vec4 _3213;
                        float _3214;
                        vec4 _3229;
                        vec3 _3241;
                        vec4 _3256;
                        vec4 _3271;
                        float _3317;
                        bool _3318;
                        for (;;)
                        {
                            uint _3198 = ((_2974 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3187));
                            _3188 = (_3187 + 4294967295u) & _3187;
                            uint _3200 = _3198 * 40u;
                            _3213 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3200)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 3u)).x));
                            _3214 = _3213.w;
                            uint _3216 = (_3198 * 40u) + 4u;
                            _3229 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 3u)).x));
                            uint _3231 = (_3198 * 40u) + 8u;
                            _3241 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3231)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 2u)).x));
                            uint _3243 = (_3198 * 40u) + 16u;
                            _3256 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3243)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 3u)).x));
                            uint _3258 = (_3198 * 40u) + 20u;
                            _3271 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3258)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 3u)).x));
                            uint _3273 = (_3198 * 40u) + 24u;
                            vec4 _3286 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3273)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 3u)).x));
                            uint _3292 = (_3198 * 40u) + 28u;
                            vec4 _3305 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3292)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 3u)).x));
                            _3317 = fma(_2572, _3305.z, fma(_2571, _3305.y, _3305.x * _2570)) + _3305.w;
                            _3318 = !((fma(_2572, _3286.z, fma(_2571, _3286.y, _3286.x * _2570)) + _3286.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3318)
                            {
                                float _3345 = _3213.x - _2570;
                                float _3346 = _3213.y - _2571;
                                float _3347 = _3213.z - _2572;
                                float _3348 = dot(vec3(_3345, _3346, _3347), vec3(_3345, _3346, _3347));
                                float _3351 = inversesqrt(_3348);
                                float _3352 = _3351 * _3345;
                                float _3353 = _3351 * _3346;
                                float _3354 = _3351 * _3347;
                                float _3358 = 1.0 - (_3348 / (_3214 * _3214));
                                float _4513 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                                float _3359 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
                                float _3363 = sqrt(_3348) * _3229.w;
                                float _3365 = 1.39999997615814208984375 / (_3363 + 1.39999997615814208984375);
                                float _3366 = _3365 * _3365;
                                float _3369 = ((1.0 - _3366) * dot(vec3(_3352, _3353, _3354), vec3(_837, _840, _843))) + _3366;
                                float _3372 = _3363 * _3363;
                                float _3376 = (fma(_2572, _3256.z, fma(_2571, _3256.y, _3256.x * _2570)) + _3256.w) / _3317;
                                float _3377 = (fma(_2572, _3271.z, fma(_2571, _3271.y, _3271.x * _2570)) + _3271.w) / _3317;
                                float _3381 = 1.0 - dot(vec2(_3376, _3377), vec2(_3376, _3377));
                                float _4529 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                                float _3382 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
                                float _3383 = _3382 * (((isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0))) * _3359) / ((_3372 * 0.699999988079071044921875) + 1.0));
                                float _3395 = exp2(log2(1.0 / ((_3372 * 3.5) + 5.0)) * 0.25);
                                float _3396 = 1.0 - _912;
                                float _3403 = sqrt(1.0 - ((1.0 - (_3396 * _3396)) * (1.0 - (_3395 * _3395))));
                                float _3404 = _3403 * _3403;
                                float _3405 = _3404 * _3404;
                                float _3406 = _3352 - _2855;
                                float _3407 = _3353 - _2856;
                                float _3408 = _3354 - _2857;
                                float _3412 = inversesqrt(dot(vec3(_3406, _3407, _3408), vec3(_3406, _3407, _3408)));
                                float _3416 = dot(vec3(_837, _840, _843), vec3((-0.0) - _2855, (-0.0) - _2856, (-0.0) - _2857));
                                float _4540 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                                float _3419 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
                                float _3420 = dot(vec3(_837, _840, _843), vec3(_3412 * _3406, _3412 * _3407, _3412 * _3408));
                                float _4551 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                                float _3423 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
                                float _3427 = ((_3423 * _3423) * (_3405 + (-1.0))) + 1.0;
                                float _3428 = _3365 * _3404;
                                float _3429 = _3428 * _3428;
                                float _3435 = ((1.0 - _3429) * dot(vec3(_837, _840, _843), vec3(_3352, _3353, _3354))) + _3429;
                                float _4562 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                                float _3436 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
                                float _3437 = 1.0 - _3404;
                                float _3447 = (0.5 / (((_3436 * ((_3419 * _3437) + _3404)) + 9.9999999392252902907785028219223e-09) + (((_3436 * _3437) + _3404) * _3419))) * _3436;
                                float _4573 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3457 = (_3382 * _3359) * (((_3405 * 3.1415927410125732421875) * (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0)))) / ((_3427 * _3427) * ((_3372 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3457 * _3241.x;
                                frontier_phi_73_pred_1 = _3457 * _3241.y;
                                frontier_phi_73_pred_2 = _3383 * _3229.z;
                                frontier_phi_73_pred_3 = _3383 * _3229.y;
                                frontier_phi_73_pred_4 = _3383 * _3229.x;
                                frontier_phi_73_pred_5 = _3457 * _3241.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3461 = frontier_phi_73_pred;
                            _3462 = frontier_phi_73_pred_1;
                            _3466 = frontier_phi_73_pred_2;
                            _3465 = frontier_phi_73_pred_3;
                            _3464 = frontier_phi_73_pred_4;
                            _3463 = frontier_phi_73_pred_5;
                            _3171 = _3464 + _3184;
                            _3172 = _3465 + _3185;
                            _3173 = _3466 + _3186;
                            _3168 = _3461 + _3181;
                            _3169 = _3462 + _3182;
                            _3170 = _3463 + _3183;
                            if (_3188 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3181 = _3168;
                                _3182 = _3169;
                                _3183 = _3170;
                                _3184 = _3171;
                                _3185 = _3172;
                                _3186 = _3173;
                                _3187 = _3188;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3171;
                        frontier_phi_67_pred_1 = _3172;
                        frontier_phi_67_pred_2 = _3173;
                        frontier_phi_67_pred_3 = _3170;
                        frontier_phi_67_pred_4 = _3169;
                        frontier_phi_67_pred_5 = _3168;
                    }
                    _2836 = frontier_phi_67_pred;
                    _2838 = frontier_phi_67_pred_1;
                    _2840 = frontier_phi_67_pred_2;
                    _2834 = frontier_phi_67_pred_3;
                    _2832 = frontier_phi_67_pred_4;
                    _2830 = frontier_phi_67_pred_5;
                    uint _2975 = _2974 + 1u;
                    if (_2975 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2968 = _2830;
                        _2969 = _2832;
                        _2970 = _2834;
                        _2971 = _2836;
                        _2972 = _2838;
                        _2973 = _2840;
                        _2974 = _2975;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2838;
                frontier_phi_55_56_ladder_1 = _2840;
                frontier_phi_55_56_ladder_2 = _2836;
                frontier_phi_55_56_ladder_3 = _2834;
                frontier_phi_55_56_ladder_4 = _2832;
                frontier_phi_55_56_ladder_5 = _2830;
            }
            else
            {
                frontier_phi_55_56_ladder = _2725;
                frontier_phi_55_56_ladder_1 = _2727;
                frontier_phi_55_56_ladder_2 = _2723;
                frontier_phi_55_56_ladder_3 = _2721;
                frontier_phi_55_56_ladder_4 = _2719;
                frontier_phi_55_56_ladder_5 = _2717;
            }
            _2829 = frontier_phi_55_56_ladder_5;
            _2831 = frontier_phi_55_56_ladder_4;
            _2833 = frontier_phi_55_56_ladder_3;
            _2835 = frontier_phi_55_56_ladder_2;
            _2837 = frontier_phi_55_56_ladder;
            _2839 = frontier_phi_55_56_ladder_1;
        }
        float _2844 = isnan(1.0) ? _896 : (isnan(_896) ? 1.0 : min(_896, 1.0));
        _2629 = (_2844 * _2835) + _2065;
        _2631 = (_2844 * _2837) + _2067;
        _2633 = (_2844 * _2839) + _2069;
        _2635 = ((_2829 * _880) * _2844) + _2410;
        _2637 = ((_2831 * _882) * _2844) + _2412;
        _2639 = ((_2833 * _883) * _2844) + _2414;
    }
    else
    {
        _2629 = _2065;
        _2631 = _2067;
        _2633 = _2069;
        _2635 = _2410;
        _2637 = _2412;
        _2639 = _2414;
    }
    float _4589 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _4600 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _4611 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    uint _2659 = _267 + 6u;
    float _2667 = _815 / cbSceneParam._m0[86u].x;
    float _2668 = _816 / cbSceneParam._m0[86u].y;
    vec4 _2682 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2667, _2668, (log2((isnan(cbSceneParam._m0[77u].w) ? _750 : (isnan(_750) ? cbSceneParam._m0[77u].w : min(_750, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2684 = _2682.x;
    float _2685 = _2682.y;
    float _2686 = _2682.z;
    float _2687 = _2682.w;
    float _2779;
    float _2781;
    float _2783;
    float _2785;
    if (_750 > cbSceneParam._m0[78u].w)
    {
        float _2742 = isnan(_750) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _750 : min(cbSceneParam._m0[80u].w, _750));
        float _2743 = _2742 / _750;
        float _2754 = _2743 * _800;
        float _2755 = _801 * _2743;
        float _2756 = (-0.0) - _2755;
        float _2757 = _2743 * _802;
        float _2759 = (cbSceneParam._m0[77u].w * _2756) / _2742;
        float _2760 = _2759 + cbSceneParam._m0[79u].w;
        float _2761 = cbSceneParam._m0[79u].w - _2755;
        float _2767 = sqrt(((_2754 * _2754) + (_2755 * _2755)) + (_2757 * _2757));
        float _2770 = (1.0 - (cbSceneParam._m0[77u].w / _2742)) * _2767;
        float _2775 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2777 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2930;
        if (abs((_2756 - _2759) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2930 = ((((_2760 > 0.0) ? exp2(_2775 * _2760) : (2.0 - exp2(_2777 * _2760))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2770;
        }
        else
        {
            float _2890 = 1.0 / cbSceneParam._m0[80u].x;
            float _2891 = isnan(_2761) ? _2760 : (isnan(_2760) ? _2761 : max(_2760, _2761));
            float _2892 = isnan(_2761) ? _2760 : (isnan(_2760) ? _2761 : min(_2760, _2761));
            float _2901 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : min(_2891, 0.0));
            float _2902 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : min(_2892, 0.0));
            _2930 = ((abs(_2767 / _2756) * cbSceneParam._m0[80u].y) * ((((_2901 - _2902) * 2.0) - ((exp2(_2775 * (isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0)))) - exp2(_2775 * (isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0))))) * _2890)) - ((exp2(_2777 * _2901) - exp2(_2777 * _2902)) * _2890))) + (_2770 * cbSceneParam._m0[80u].z);
        }
        vec4 _2932 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2667, _2668, 1.0), 0.0);
        float _2941 = exp2((_2930 * (-1.44269502162933349609375)) * (1.0 - _2932.w));
        float _2942 = log2(_2941);
        float _2958 = log2(_2687);
        _2779 = (exp2(_2958 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2942 * cbSceneParam._m0[78u].x)) * _2932.x) / cbSceneParam._m0[78u].x)) + _2684;
        _2781 = (exp2(_2958 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2942 * cbSceneParam._m0[78u].y)) * _2932.y) / cbSceneParam._m0[78u].y)) + _2685;
        _2783 = (exp2(_2958 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2942 * cbSceneParam._m0[78u].z)) * _2932.z) / cbSceneParam._m0[78u].z)) + _2686;
        _2785 = _2941 * _2687;
    }
    else
    {
        _2779 = _2684;
        _2781 = _2685;
        _2783 = _2686;
        _2785 = _2687;
    }
    float _2797 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2798 = _2797 == 3.0;
    float _2799 = log2(_2785);
    float _2806 = exp2(_2799 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0))) * (_2629 + ((isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))) * _896))) + ((_2635 + ((isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0))) * _1704)) * cbPerFrame._m0[3u].x));
    float _2807 = exp2(_2799 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (_2631 + ((isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) * _896))) + ((_2637 + ((isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0))) * _1704)) * cbPerFrame._m0[3u].x));
    float _2808 = exp2(_2799 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0))) * (_2633 + ((isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))) * _896))) + ((_2639 + ((isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0))) * _1704)) * cbPerFrame._m0[3u].x));
    float _2817 = (_2797 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2817 * (_2798 ? _2806 : (_2806 + (cbSceneParam._m0[72u].w * _2779)));
    SV_Target.y = _2817 * (_2798 ? _2807 : (_2807 + (cbSceneParam._m0[72u].w * _2781)));
    SV_Target.z = _2817 * (_2798 ? _2808 : (_2808 + (cbSceneParam._m0[72u].w * _2783)));
    SV_Target.w = cbInstanceData._m0[_2659].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2659].w;
}


