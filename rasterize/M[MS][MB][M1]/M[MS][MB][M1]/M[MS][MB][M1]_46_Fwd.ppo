#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1060;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _207 = _206 * _198;
    float _208 = _206 * _199;
    float _209 = _206 * _200;
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = _213 * NORMAL.x;
    float _215 = _213 * NORMAL.y;
    float _216 = _213 * NORMAL.z;
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _221 = _220 * TANGENT.x;
    float _222 = _220 * TANGENT.y;
    float _223 = _220 * TANGENT.z;
    uint _226 = uint(roundEven(NORMAL.w)) * 13u;
    uint _232 = _226 + 1u;
    uint _236 = _226 + 2u;
    float _245 = sqrt(((cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x) + (cbInstanceData._m0[_226].x * cbInstanceData._m0[_226].x)) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x));
    float _246 = _245 * TEXCOORD.z;
    float _247 = _245 * TEXCOORD.w;
    vec4 _266 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _272 = _266.x * cbMtdParam._m0[9u].x;
    float _273 = _266.y * cbMtdParam._m0[9u].y;
    float _274 = _266.z * cbMtdParam._m0[9u].z;
    vec4 _293 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _246) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _247) + cbTextureTilingScale._m0[14u].w));
    vec4 _313 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _246) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _247) + cbTextureTilingScale._m0[20u].w));
    vec4 _339 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _343 = _339.z;
    float _347 = (_339.x * 2.0) + (-1.0);
    float _348 = (_339.y * 2.0) + (-1.0);
    float _349 = dot(vec2(_347, _348), vec2(_347, _348));
    float _3387 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _355 = sqrt(1.0 - (isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0))));
    float _360 = _347 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_313.x * 2.0) + (-1.0)));
    float _361 = _348 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_313.y * 2.0) + (-1.0)));
    float _364 = fma(_355, _214, fma(_361, _221, _360 * _207));
    float _367 = fma(_355, _215, fma(_361, _222, _360 * _208));
    float _370 = fma(_355, _216, fma(_361, _223, _360 * _209));
    float _374 = inversesqrt(dot(vec3(_364, _367, _370), vec3(_364, _367, _370)));
    vec4 _410 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _246) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _247) + cbTextureTilingScale._m0[11u].w));
    float _412 = _410.x;
    float _413 = 1.0 - _412;
    float _422 = (cbMtdParam._m0[19u].x + dot(vec4(_374 * _364, _374 * _367, _374 * _370, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_412 - _413) * cbMtdParam._m0[24u].z) + _413) * cbMtdParam._m0[21u].z);
    float _3398 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _423 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
    float _430 = (_423 * ((_293.x * cbMtdParam._m0[18u].x) - _272)) + _272;
    float _431 = (_423 * ((_293.y * cbMtdParam._m0[18u].y) - _273)) + _273;
    float _432 = (_423 * ((_293.z * cbMtdParam._m0[18u].z) - _274)) + _274;
    vec4 _445 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _447 = _445.x;
    float _449 = _447 - (_447 * _423);
    float _454 = (((_313.z - _343) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _343;
    vec4 _467 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _246) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _247) + cbTextureTilingScale._m0[15u].w));
    float _474 = (_467.x * 2.0) + (-1.0);
    float _475 = (_467.y * 2.0) + (-1.0);
    float _476 = dot(vec2(_474, _475), vec2(_474, _475));
    float _3409 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _484 = ((_467.z - _454) * _423) + _454;
    float _494 = ((sqrt(1.0 - (isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0)))) - _355) * _423) + _355;
    float _497 = (((_474 - _360) * _423) + _360) + (cbMtdParam._m0[21u].x * _360);
    float _498 = (((_475 - _361) * _423) + _361) + (cbMtdParam._m0[21u].x * _361);
    float _503 = cbMtdParam._m0[22u].x + _339.w;
    float _506 = fma(_494, _214, fma(_498, _221, _497 * _207));
    float _509 = fma(_494, _215, fma(_498, _222, _497 * _208));
    float _512 = fma(_494, _216, fma(_498, _223, _497 * _209));
    float _516 = inversesqrt(dot(vec3(_506, _509, _512), vec3(_506, _509, _512)));
    float _517 = _516 * _506;
    float _518 = _516 * _509;
    float _519 = _516 * _512;
    float _3420 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _520 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
    float _3431 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _3442 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _3453 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _3464 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _3475 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _525 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
    float _539 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _580 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _590 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _580);
    float _591 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _580);
    float _592 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _580);
    float _596 = inversesqrt(dot(vec3(_590, _591, _592), vec3(_590, _591, _592)));
    float _597 = _590 * _596;
    float _598 = _591 * _596;
    float _599 = _592 * _596;
    float _605 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _606 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _627 = fma(_519, cbSceneParam._m0[5u].z, fma(_518, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _517));
    float _630 = fma(_519, cbSceneParam._m0[6u].z, fma(_518, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _517));
    float _633 = fma(_519, cbSceneParam._m0[7u].z, fma(_518, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _517));
    uint _647 = (_226 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _653 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0)))) * cbInstanceData._m0[_647].x;
    float _654 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0)))) * cbInstanceData._m0[_647].y;
    float _655 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0)))) * cbInstanceData._m0[_647].z;
    float _3486 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _656 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
    float _3497 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _657 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
    float _3508 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _658 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
    float _659 = 1.0 - _525;
    float _660 = _656 * _659;
    float _661 = _657 * _659;
    float _662 = _658 * _659;
    float _667 = (_656 + (-0.039999999105930328369140625)) * _525;
    float _668 = (_657 + (-0.039999999105930328369140625)) * _525;
    float _669 = (_658 + (-0.039999999105930328369140625)) * _525;
    float _670 = _667 + 0.039999999105930328369140625;
    float _672 = _668 + 0.039999999105930328369140625;
    float _673 = _669 + 0.039999999105930328369140625;
    vec4 _682 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _605, cbSceneParam._m0[86u].y * _606));
    float _686 = ((isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0))) * TEXCOORD_5.w) * _682.x;
    float _687 = dot(vec3(_517, _518, _519), vec3(_597, _598, _599));
    float _690 = _687 * 2.0;
    float _694 = (_690 * _517) - _597;
    float _695 = (_690 * _518) - _598;
    float _696 = (_690 * _519) - _599;
    float _700 = abs(dot(vec3(_597, _598, _599), vec3(_517, _518, _519)));
    float _3519 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _702 = sqrt(_520);
    float _715 = exp2((_702 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_702 * 3.0));
    float _721 = (1.0 - _715) * ((_702 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _722 = _715 * _702;
    float _750 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _754 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _758 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1059;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _784 = fma(_758, cbModelParam._m0[26u].z, fma(_754, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _750));
        float _788 = fma(_758, cbModelParam._m0[27u].z, fma(_754, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _750));
        float _792 = fma(_758, cbModelParam._m0[28u].z, fma(_754, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _750));
        float _817 = _750 + _517;
        float _818 = _754 + _518;
        float _819 = _758 + _519;
        float _829 = fma(_819, cbModelParam._m0[26u].z, fma(_818, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _817)) - _784;
        float _830 = fma(_819, cbModelParam._m0[27u].z, fma(_818, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _817)) - _788;
        float _831 = fma(_819, cbModelParam._m0[28u].z, fma(_818, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _817)) - _792;
        float _835 = inversesqrt(dot(vec3(_829, _830, _831), vec3(_829, _830, _831)));
        float _848 = ((_835 * _829) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_784 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _849 = ((_835 * _830) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_788 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _850 = ((_835 * _831) / cbModelParam._m0[34u].z) + ((((((_792 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _853 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_848, _849, _850), 0.0);
        vec4 _860 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_848, _849, _850), 0.0);
        vec4 _867 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_848, _849, _850), 0.0);
        vec4 _874 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_848, _849, _850), 0.0);
        float _887 = exp2((_853.w + (-0.5)) * 20.0) * 2.0;
        float _888 = _887 * (_853.x + (-0.5));
        float _889 = _887 * (_853.y + (-0.5));
        float _890 = _887 * (_853.z + (-0.5));
        float _897 = exp2((_860.w + (-0.5)) * 20.0) * 2.0;
        float _898 = _897 * (_860.x + (-0.5));
        float _899 = _897 * (_860.y + (-0.5));
        float _900 = _897 * (_860.z + (-0.5));
        float _907 = exp2((_867.w + (-0.5)) * 20.0) * 2.0;
        float _908 = _907 * (_867.x + (-0.5));
        float _909 = _907 * (_867.y + (-0.5));
        float _910 = _907 * (_867.z + (-0.5));
        float _917 = exp2((_874.w + (-0.5)) * 20.0) * 2.0;
        float _918 = _917 * (_874.x + (-0.5));
        float _919 = _917 * (_874.y + (-0.5));
        float _920 = _917 * (_874.z + (-0.5));
        float _921 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _922 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _923 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _924 = _888 * 0.5;
        float _925 = _898 * 0.5;
        float _926 = _908 * 0.5;
        float _927 = dot(vec3(_924, _925, _926), vec3(_924, _925, _926));
        float _932 = (_927 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_927);
        float _941 = (dot(vec3(_517, _518, _519), vec3(_932 * _924, _932 * _925, _932 * _926)) + 1.0) * 0.5;
        float _3545 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _951 = sqrt(((_925 * _925) + (_924 * _924)) + (_926 * _926)) / (_921 + 9.9999997473787516355514526367188e-06);
        float _3556 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
        float _953 = _952 * 2.0;
        float _957 = (1.0 - _952) / (_952 + 1.0);
        float _3567 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
        float _967 = ((((1.0 - _958) * (_953 + 2.0)) * exp2(log2(isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0))) * (_953 + 1.0))) + _958) * _921;
        float _968 = _889 * 0.5;
        float _969 = _899 * 0.5;
        float _970 = _909 * 0.5;
        float _971 = dot(vec3(_968, _969, _970), vec3(_968, _969, _970));
        float _976 = (_971 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_971);
        float _984 = (dot(vec3(_517, _518, _519), vec3(_976 * _968, _976 * _969, _976 * _970)) + 1.0) * 0.5;
        float _3578 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _993 = sqrt(((_969 * _969) + (_968 * _968)) + (_970 * _970)) / (_922 + 9.9999997473787516355514526367188e-06);
        float _3589 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
        float _995 = _994 * 2.0;
        float _999 = (1.0 - _994) / (_994 + 1.0);
        float _3600 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _1009 = ((((1.0 - _1000) * (_995 + 2.0)) * exp2(log2(isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0))) * (_995 + 1.0))) + _1000) * _922;
        float _1010 = _890 * 0.5;
        float _1011 = _900 * 0.5;
        float _1012 = _910 * 0.5;
        float _1013 = dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012));
        float _1018 = (_1013 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1013);
        float _1026 = (dot(vec3(_517, _518, _519), vec3(_1018 * _1010, _1018 * _1011, _1018 * _1012)) + 1.0) * 0.5;
        float _3611 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1035 = sqrt(((_1011 * _1011) + (_1010 * _1010)) + (_1012 * _1012)) / (_923 + 9.9999997473787516355514526367188e-06);
        float _3622 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _1037 = _1036 * 2.0;
        float _1041 = (1.0 - _1036) / (_1036 + 1.0);
        float _3633 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _1051 = ((((1.0 - _1042) * (_1037 + 2.0)) * exp2(log2(isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0))) * (_1037 + 1.0))) + _1042) * _923;
        _1059 = _890;
        _1061 = _889;
        _1062 = _888;
        _1063 = _900;
        _1064 = _899;
        _1065 = _898;
        _1066 = _910;
        _1067 = _909;
        _1068 = _908;
        _1069 = _923;
        _1070 = _922;
        _1071 = _921;
        _1072 = cbModelParam._m0[36u].z * (isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0)));
        _1073 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0)));
        _1074 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0)));
    }
    else
    {
        _1059 = _1060;
        _1061 = _1060;
        _1062 = _1060;
        _1063 = _1060;
        _1064 = _1060;
        _1065 = _1060;
        _1066 = _1060;
        _1067 = _1060;
        _1068 = _1060;
        _1069 = _1060;
        _1070 = _1060;
        _1071 = _1060;
        _1072 = 0.0;
        _1073 = 0.0;
        _1074 = 0.0;
    }
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1099 = fma(_758, cbModelParam._m0[30u].z, fma(_754, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _750));
        float _1103 = fma(_758, cbModelParam._m0[31u].z, fma(_754, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _750));
        float _1107 = fma(_758, cbModelParam._m0[32u].z, fma(_754, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _750));
        float _1130 = _750 + _517;
        float _1131 = _754 + _518;
        float _1132 = _758 + _519;
        float _1142 = fma(_1132, cbModelParam._m0[30u].z, fma(_1131, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1130)) - _1099;
        float _1143 = fma(_1132, cbModelParam._m0[31u].z, fma(_1131, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1130)) - _1103;
        float _1144 = fma(_1132, cbModelParam._m0[32u].z, fma(_1131, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1130)) - _1107;
        float _1148 = inversesqrt(dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144)));
        float _1161 = ((_1148 * _1142) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1099 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1162 = ((_1148 * _1143) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1103 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1163 = ((_1148 * _1144) / cbModelParam._m0[35u].z) + ((((((_1107 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        float _1198 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1165.x + (-0.5));
        float _1200 = _1198 * (_1165.y + (-0.5));
        float _1201 = _1198 * (_1165.z + (-0.5));
        float _1208 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1172.x + (-0.5));
        float _1210 = _1208 * (_1172.y + (-0.5));
        float _1211 = _1208 * (_1172.z + (-0.5));
        float _1218 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1179.x + (-0.5));
        float _1220 = _1218 * (_1179.y + (-0.5));
        float _1221 = _1218 * (_1179.z + (-0.5));
        float _1228 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1186.x + (-0.5));
        float _1230 = _1228 * (_1186.y + (-0.5));
        float _1231 = _1228 * (_1186.z + (-0.5));
        float _1232 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1233 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = _1199 * 0.5;
        float _1236 = _1209 * 0.5;
        float _1237 = _1219 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1251 = (dot(vec3(_517, _518, _519), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _3674 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1260 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1232 + 9.9999997473787516355514526367188e-06);
        float _3685 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _1262 = _1261 * 2.0;
        float _1266 = (1.0 - _1261) / (_1261 + 1.0);
        float _3696 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
        float _1276 = ((((1.0 - _1267) * (_1262 + 2.0)) * exp2(log2(isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0))) * (_1262 + 1.0))) + _1267) * _1232;
        float _1277 = _1200 * 0.5;
        float _1278 = _1210 * 0.5;
        float _1279 = _1220 * 0.5;
        float _1280 = dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279));
        float _1285 = (_1280 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1280);
        float _1293 = (dot(vec3(_517, _518, _519), vec3(_1285 * _1277, _1285 * _1278, _1285 * _1279)) + 1.0) * 0.5;
        float _3707 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1302 = sqrt(((_1278 * _1278) + (_1277 * _1277)) + (_1279 * _1279)) / (_1233 + 9.9999997473787516355514526367188e-06);
        float _3718 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1304 = _1303 * 2.0;
        float _1308 = (1.0 - _1303) / (_1303 + 1.0);
        float _3729 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
        float _1318 = ((((1.0 - _1309) * (_1304 + 2.0)) * exp2(log2(isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))) * (_1304 + 1.0))) + _1309) * _1233;
        float _1319 = _1201 * 0.5;
        float _1320 = _1211 * 0.5;
        float _1321 = _1221 * 0.5;
        float _1322 = dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321));
        float _1327 = (_1322 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1322);
        float _1335 = (dot(vec3(_517, _518, _519), vec3(_1327 * _1319, _1327 * _1320, _1327 * _1321)) + 1.0) * 0.5;
        float _3740 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1344 = sqrt(((_1320 * _1320) + (_1319 * _1319)) + (_1321 * _1321)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _3751 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1346 = _1345 * 2.0;
        float _1350 = (1.0 - _1345) / (_1345 + 1.0);
        float _3762 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1360 = ((((1.0 - _1351) * (_1346 + 2.0)) * exp2(log2(isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * (_1346 + 1.0))) + _1351) * _1234;
        _1368 = _1201;
        _1369 = _1200;
        _1370 = _1199;
        _1371 = _1211;
        _1372 = _1210;
        _1373 = _1209;
        _1374 = _1221;
        _1375 = _1220;
        _1376 = _1219;
        _1377 = _1234;
        _1378 = _1233;
        _1379 = _1232;
        _1380 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)));
        _1381 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)));
        _1382 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)));
    }
    else
    {
        _1368 = _1060;
        _1369 = _1060;
        _1370 = _1060;
        _1371 = _1060;
        _1372 = _1060;
        _1373 = _1060;
        _1374 = _1060;
        _1375 = _1060;
        _1376 = _1060;
        _1377 = _1060;
        _1378 = _1060;
        _1379 = _1060;
        _1380 = 0.0;
        _1381 = 0.0;
        _1382 = 0.0;
    }
    float _1392 = (cbModelParam._m0[1u].x * (_1380 - _1072)) + _1072;
    float _1393 = (cbModelParam._m0[1u].x * (_1381 - _1073)) + _1073;
    float _1394 = (cbModelParam._m0[1u].x * (_1382 - _1074)) + _1074;
    float _1415 = fma(_1394, cbSceneParam._m0[89u].z, fma(_1393, cbSceneParam._m0[89u].y, _1392 * cbSceneParam._m0[89u].x));
    float _1418 = fma(_1394, cbSceneParam._m0[90u].z, fma(_1393, cbSceneParam._m0[90u].y, _1392 * cbSceneParam._m0[90u].x));
    float _1421 = fma(_1394, cbSceneParam._m0[91u].z, fma(_1393, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1392));
    float _1436 = _694 * 0.5;
    float _1437 = _695 * 0.5;
    float _1438 = _696 * 0.5;
    float _1439 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1370, _1373, _1376, _1379));
    float _1442 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1369, _1372, _1375, _1378));
    float _1445 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1368, _1371, _1374, _1377));
    float _1479;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1452 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1059, _1063, _1066, _1069));
        float _1456 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1061, _1064, _1067, _1070));
        float _1460 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1062, _1065, _1068, _1071));
        float _1467 = dot(vec4(cbModelParam._m0[39u]), vec4(_1436, _1437, _1438, 1.0));
        _1479 = dot(vec3(isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)), isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)), isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1467) ? 0.0 : (isnan(0.0) ? _1467 : max(0.0, _1467))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1479 = 1.0;
    }
    float _1490;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1481 = dot(vec4(cbModelParam._m0[40u]), vec4(_1436, _1437, _1438, 1.0));
        _1490 = dot(vec3(isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)), isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)), isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1481) ? 0.0 : (isnan(0.0) ? _1481 : max(0.0, _1481))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1490 = 1.0;
    }
    float _1494 = (_1490 * cbModelParam._m0[1u].x) + (_1479 * (1.0 - cbModelParam._m0[1u].x));
    float _1504 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _520);
    float _1505 = isnan(_1504) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1504 : min(cbModelParam._m0[25u].z, _1504));
    float _1585;
    float _1587;
    float _1589;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1552 = fma(_758, cbModelParam._m0[13u].z, fma(_754, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _750)) + cbModelParam._m0[13u].w;
        float _1556 = fma(_758, cbModelParam._m0[14u].z, fma(_754, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _750)) + cbModelParam._m0[14u].w;
        float _1560 = fma(_758, cbModelParam._m0[15u].z, fma(_754, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _750)) + cbModelParam._m0[15u].w;
        float _1563 = fma(_696, cbModelParam._m0[13u].z, fma(_695, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _694));
        float _1566 = fma(_696, cbModelParam._m0[14u].z, fma(_695, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _694));
        float _1569 = fma(_696, cbModelParam._m0[15u].z, fma(_695, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _694));
        float _1597;
        if (_1563 > 0.0)
        {
            _1597 = abs((1.0 - _1552) / _1563);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1563 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1552 + 1.0) / _1563);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1597 = frontier_phi_14_12_ladder;
        }
        float _1800;
        if (_1566 > 0.0)
        {
            _1800 = abs((1.0 - _1556) / _1566);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1566 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1556 + 1.0) / _1566);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1800 = frontier_phi_23_19_ladder;
        }
        float _2054;
        if (_1569 > 0.0)
        {
            _2054 = abs((1.0 - _1560) / _1569);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1569 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1560 + 1.0) / _1569);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2054 = frontier_phi_35_30_ladder;
        }
        float _2056 = isnan(_1800) ? _1597 : (isnan(_1597) ? _1800 : min(_1597, _1800));
        float _2057 = isnan(_2054) ? _2056 : (isnan(_2056) ? _2054 : min(_2056, _2054));
        float _2061 = (_2057 * _1563) + _1552;
        float _2062 = (_2057 * _1566) + _1556;
        float _2063 = (_2057 * _1569) + _1560;
        float _2064 = _2057 * 9.9999997473787516355514526367188e-05;
        float _2066 = (-1.0) - _2064;
        float _2068 = _2064 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2063 > _2068) || ((_2063 < _2066) || ((_2062 > _2068) || ((_2062 < _2066) || ((_2061 < _2066) || (_2061 > _2068))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2191 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2063, cbModelParam._m0[9u].z, fma(_2062, cbModelParam._m0[9u].y, _2061 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2063, cbModelParam._m0[10u].z, fma(_2062, cbModelParam._m0[10u].y, _2061 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2063, cbModelParam._m0[11u].z, fma(_2062, cbModelParam._m0[11u].y, _2061 * cbModelParam._m0[11u].x))), _1505);
            frontier_phi_13_35_ladder = _2191.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2191.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2191.x * cbModelParam._m0[1u].y;
        }
        _1585 = frontier_phi_13_35_ladder_2;
        _1587 = frontier_phi_13_35_ladder_1;
        _1589 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1573 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_694, _695, _696), _1505);
        _1585 = _1573.x * cbModelParam._m0[1u].y;
        _1587 = _1573.y * cbModelParam._m0[1u].y;
        _1589 = _1573.z * cbModelParam._m0[1u].y;
    }
    float _1593 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _520);
    float _1594 = isnan(_1593) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1593 : min(cbModelParam._m0[25u].w, _1593));
    float _1683;
    float _1685;
    float _1687;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1647 = fma(_758, cbModelParam._m0[21u].z, fma(_754, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _750)) + cbModelParam._m0[21u].w;
        float _1651 = fma(_758, cbModelParam._m0[22u].z, fma(_754, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _750)) + cbModelParam._m0[22u].w;
        float _1655 = fma(_758, cbModelParam._m0[23u].z, fma(_754, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _750)) + cbModelParam._m0[23u].w;
        float _1658 = fma(_696, cbModelParam._m0[21u].z, fma(_695, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _694));
        float _1661 = fma(_696, cbModelParam._m0[22u].z, fma(_695, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _694));
        float _1664 = fma(_696, cbModelParam._m0[23u].z, fma(_695, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _694));
        float _1805;
        if (_1658 > 0.0)
        {
            _1805 = abs((1.0 - _1647) / _1658);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1658 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1647 + 1.0) / _1658);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1805 = frontier_phi_25_21_ladder;
        }
        float _2081;
        if (_1661 > 0.0)
        {
            _2081 = abs((1.0 - _1651) / _1661);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1661 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1651 + 1.0) / _1661);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2081 = frontier_phi_37_32_ladder;
        }
        float _2294;
        if (_1664 > 0.0)
        {
            _2294 = abs((1.0 - _1655) / _1664);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1664 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1655 + 1.0) / _1664);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2294 = frontier_phi_46_43_ladder;
        }
        float _2296 = isnan(_2081) ? _1805 : (isnan(_1805) ? _2081 : min(_1805, _2081));
        float _2297 = isnan(_2294) ? _2296 : (isnan(_2296) ? _2294 : min(_2296, _2294));
        float _2301 = (_2297 * _1658) + _1647;
        float _2302 = (_2297 * _1661) + _1651;
        float _2303 = (_2297 * _1664) + _1655;
        float _2304 = _2297 * 9.9999997473787516355514526367188e-05;
        float _2305 = (-1.0) - _2304;
        float _2307 = _2304 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2303 > _2307) || ((_2303 < _2305) || ((_2302 > _2307) || ((_2302 < _2305) || ((_2301 < _2305) || (_2301 > _2307))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2502 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2303, cbModelParam._m0[17u].z, fma(_2302, cbModelParam._m0[17u].y, _2301 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2303, cbModelParam._m0[18u].z, fma(_2302, cbModelParam._m0[18u].y, _2301 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2303, cbModelParam._m0[19u].z, fma(_2302, cbModelParam._m0[19u].y, _2301 * cbModelParam._m0[19u].x))), _1594);
            frontier_phi_22_46_ladder = _2502.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2502.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2502.x * cbModelParam._m0[1u].z;
        }
        _1683 = frontier_phi_22_46_ladder_2;
        _1685 = frontier_phi_22_46_ladder_1;
        _1687 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1667 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_694, _695, _696), _1594);
        _1683 = _1667.x * cbModelParam._m0[1u].z;
        _1685 = _1667.y * cbModelParam._m0[1u].z;
        _1687 = _1667.z * cbModelParam._m0[1u].z;
    }
    float _1700 = (((_721 * _670) + _722) * _686) * ((cbModelParam._m0[1u].w * (_1683 - _1585)) + _1585);
    float _1702 = (((_721 * _672) + _722) * _686) * ((cbModelParam._m0[1u].w * (_1685 - _1587)) + _1587);
    float _1704 = (((_721 * _673) + _722) * _686) * ((cbModelParam._m0[1u].w * (_1687 - _1589)) + _1589);
    float _1707 = fma(_1704, cbSceneParam._m0[89u].z, fma(_1702, cbSceneParam._m0[89u].y, _1700 * cbSceneParam._m0[89u].x));
    float _1710 = fma(_1704, cbSceneParam._m0[90u].z, fma(_1702, cbSceneParam._m0[90u].y, _1700 * cbSceneParam._m0[90u].x));
    float _1713 = fma(_1704, cbSceneParam._m0[91u].z, fma(_1702, cbSceneParam._m0[91u].y, _1700 * cbSceneParam._m0[91u].x));
    uvec4 _1723 = floatBitsToUint(cbInstanceData._m0[_226 + 5u]);
    uint _1725 = _1723.x * 14u;
    uint _1726 = _1725 + 13u;
    float _1733 = _686 + (-1.0);
    float _1738 = (cbLight._m0[_1726].x * _1733) + 1.0;
    float _1739 = (cbLight._m0[_1726].y * _1733) + 1.0;
    float _1740 = (cbLight._m0[_1726].z * _1733) + 1.0;
    float _1741 = (cbLight._m0[_1726].w * _1733) + 1.0;
    uint _1742 = _1725 + 5u;
    float _1748 = isnan(1.0) ? _1739 : (isnan(_1739) ? 1.0 : min(_1739, 1.0));
    uint _1752 = _1725 + 4u;
    float _1759 = isnan(1.0) ? _1738 : (isnan(_1738) ? 1.0 : min(_1738, 1.0));
    uint _1763 = _1725 | 1u;
    float _1774 = dot(vec3(cbLight._m0[_1725].xyz), vec3(_517, _518, _519));
    float _1777 = dot(vec3(cbLight._m0[_1763].xyz), vec3(_517, _518, _519));
    float _3898 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
    float _3909 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
    float _1782 = (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * 0.3183098733425140380859375;
    float _1784 = (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * 0.3183098733425140380859375;
    float _1791 = ((cbLight._m0[_1742].x * _1748) * _1784) + ((cbLight._m0[_1752].x * _1759) * _1782);
    float _1792 = ((_1748 * cbLight._m0[_1742].y) * _1784) + ((_1759 * cbLight._m0[_1752].y) * _1782);
    float _1793 = ((_1748 * cbLight._m0[_1742].z) * _1784) + ((_1759 * cbLight._m0[_1752].z) * _1782);
    uvec4 _1797 = floatBitsToUint(cbLight._m0[_1725 + 12u]);
    bool _1799 = _1797.x == 0u;
    float _1810;
    float _1812;
    float _1814;
    if (_1799)
    {
        _1810 = _1791;
        _1812 = _1792;
        _1814 = _1793;
    }
    else
    {
        uint _1818 = _1725 + 6u;
        float _1834 = (dot(vec3(cbLight._m0[_1725 + 2u].xyz), vec3(_517, _518, _519)) * 0.5) + 0.5;
        float _1835 = _1834 * _1834;
        float _3920 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
        float _1836 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1837 = isnan(1.0) ? _1740 : (isnan(_1740) ? 1.0 : min(_1740, 1.0));
        _1810 = (((cbLight._m0[_1818].x * 0.3183098733425140380859375) * _1836) * _1837) + _1791;
        _1812 = (((cbLight._m0[_1818].y * 0.3183098733425140380859375) * _1836) * _1837) + _1792;
        _1814 = (((cbLight._m0[_1818].z * 0.3183098733425140380859375) * _1836) * _1837) + _1793;
    }
    bool _1817 = _1797.y == 0u;
    float _1855;
    float _1857;
    float _1859;
    if (_1817)
    {
        _1855 = _1810;
        _1857 = _1812;
        _1859 = _1814;
    }
    else
    {
        uint _2025 = _1725 + 7u;
        float _2041 = (dot(vec3(cbLight._m0[_1725 + 3u].xyz), vec3(_517, _518, _519)) * 0.5) + 0.5;
        float _2042 = _2041 * _2041;
        float _3936 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
        float _2043 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _2044 = isnan(1.0) ? _1741 : (isnan(_1741) ? 1.0 : min(_1741, 1.0));
        _1855 = (((cbLight._m0[_2025].x * 0.3183098733425140380859375) * _2043) * _2044) + _1810;
        _1857 = (((cbLight._m0[_2025].y * 0.3183098733425140380859375) * _2043) * _2044) + _1812;
        _1859 = (((cbLight._m0[_2025].z * 0.3183098733425140380859375) * _2043) * _2044) + _1814;
    }
    uint _1862 = _1725 + 8u;
    float _1875 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1725].w)) * _520) * 0.949999988079071044921875);
    float _1876 = _1875 * _1875;
    float _1877 = cbLight._m0[_1725].x + _597;
    float _1878 = cbLight._m0[_1725].y + _598;
    float _1879 = cbLight._m0[_1725].z + _599;
    float _1883 = inversesqrt(dot(vec3(_1877, _1878, _1879), vec3(_1877, _1878, _1879)));
    float _1884 = _1883 * _1877;
    float _1885 = _1883 * _1878;
    float _1886 = _1883 * _1879;
    float _1887 = dot(vec3(_517, _518, _519), vec3(cbLight._m0[_1725].xyz));
    float _3952 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _1890 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _3963 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _1891 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _1892 = dot(vec3(_517, _518, _519), vec3(_1884, _1885, _1886));
    float _3974 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1895 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _1896 = dot(vec3(cbLight._m0[_1725].xyz), vec3(_1884, _1885, _1886));
    float _3985 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
    float _1900 = _1876 * _1876;
    float _1904 = ((_1895 * _1895) * (_1900 + (-1.0))) + 1.0;
    float _1912 = exp2(log2(1.0 - (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0)))) * 5.0);
    float _1913 = 0.959999978542327880859375 - _667;
    float _1915 = 0.959999978542327880859375 - _668;
    float _1916 = 0.959999978542327880859375 - _669;
    float _1923 = 1.0 - _1876;
    float _1934 = (0.5 / (((_1891 * ((_1890 * _1923) + _1876)) + 9.9999999392252902907785028219223e-09) + (((_1891 * _1923) + _1876) * _1890))) * _1890;
    float _3996 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
    float _1936 = (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_1900 / ((_1904 * _1904) * 3.141590118408203125));
    uint _1947 = _1725 + 9u;
    float _1958 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1763].w)) * _520) * 0.949999988079071044921875);
    float _1959 = _1958 * _1958;
    float _1960 = cbLight._m0[_1763].x + _597;
    float _1961 = cbLight._m0[_1763].y + _598;
    float _1962 = cbLight._m0[_1763].z + _599;
    float _1966 = inversesqrt(dot(vec3(_1960, _1961, _1962), vec3(_1960, _1961, _1962)));
    float _1967 = _1966 * _1960;
    float _1968 = _1966 * _1961;
    float _1969 = _1966 * _1962;
    float _1970 = dot(vec3(_517, _518, _519), vec3(cbLight._m0[_1763].xyz));
    float _4007 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1973 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _1974 = dot(vec3(_517, _518, _519), vec3(_1967, _1968, _1969));
    float _4018 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
    float _1977 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _1978 = dot(vec3(cbLight._m0[_1763].xyz), vec3(_1967, _1968, _1969));
    float _4029 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
    float _1982 = _1959 * _1959;
    float _1986 = ((_1977 * _1977) * (_1982 + (-1.0))) + 1.0;
    float _1993 = exp2(log2(1.0 - (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0)))) * 5.0);
    float _2000 = 1.0 - _1959;
    float _2010 = (0.5 / (((_1891 * ((_1973 * _2000) + _1959)) + 9.9999999392252902907785028219223e-09) + (((_1891 * _2000) + _1959) * _1973))) * _1973;
    float _4040 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _2012 = (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_1982 / ((_1986 * _1986) * 3.141590118408203125));
    float _2022 = (((((_1993 * _1913) + _670) * cbLight._m0[_1947].x) * _2012) * _1748) + (((((_1912 * _1913) + _670) * cbLight._m0[_1862].x) * _1936) * _1759);
    float _2023 = (((((_1993 * _1915) + _672) * cbLight._m0[_1947].y) * _2012) * _1748) + (((((_1912 * _1915) + _672) * cbLight._m0[_1862].y) * _1936) * _1759);
    float _2024 = (((((_1993 * _1916) + _673) * cbLight._m0[_1947].z) * _2012) * _1748) + (((((_1912 * _1916) + _673) * cbLight._m0[_1862].z) * _1936) * _1759);
    float _2086;
    float _2088;
    float _2090;
    if (_1799)
    {
        _2086 = _2022;
        _2088 = _2023;
        _2090 = _2024;
    }
    else
    {
        uint _2092 = _1725 + 2u;
        uint _2096 = _1725 + 10u;
        float _2110 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2092].w)) * _520) * 0.949999988079071044921875);
        float _2111 = _2110 * _2110;
        float _2112 = cbLight._m0[_2092].x + _597;
        float _2113 = cbLight._m0[_2092].y + _598;
        float _2114 = cbLight._m0[_2092].z + _599;
        float _2118 = inversesqrt(dot(vec3(_2112, _2113, _2114), vec3(_2112, _2113, _2114)));
        float _2119 = _2118 * _2112;
        float _2120 = _2118 * _2113;
        float _2121 = _2118 * _2114;
        float _2122 = dot(vec3(_517, _518, _519), vec3(cbLight._m0[_2092].xyz));
        float _4051 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2125 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _2126 = dot(vec3(_517, _518, _519), vec3(_2119, _2120, _2121));
        float _4062 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
        float _2129 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _2130 = dot(vec3(cbLight._m0[_2092].xyz), vec3(_2119, _2120, _2121));
        float _4073 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
        float _2134 = _2111 * _2111;
        float _2138 = ((_2129 * _2129) * (_2134 + (-1.0))) + 1.0;
        float _2145 = exp2(log2(1.0 - (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0)))) * 5.0);
        float _2152 = 1.0 - _2111;
        float _2162 = (0.5 / (((_1891 * ((_2125 * _2152) + _2111)) + 9.9999999392252902907785028219223e-09) + (((_1891 * _2152) + _2111) * _2125))) * _2125;
        float _4084 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
        float _2164 = (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_2134 / ((_2138 * _2138) * 3.141590118408203125));
        float _2165 = isnan(1.0) ? _1740 : (isnan(_1740) ? 1.0 : min(_1740, 1.0));
        _2086 = (((((_2145 * _1913) + _670) * cbLight._m0[_2096].x) * _2164) * _2165) + _2022;
        _2088 = (((((_2145 * _1915) + _672) * cbLight._m0[_2096].y) * _2164) * _2165) + _2023;
        _2090 = (((((_2145 * _1916) + _673) * cbLight._m0[_2096].z) * _2164) * _2165) + _2024;
    }
    float _2200;
    float _2202;
    float _2204;
    if (_1817)
    {
        _2200 = _2086;
        _2202 = _2088;
        _2204 = _2090;
    }
    else
    {
        uint _2211 = _1725 + 3u;
        uint _2215 = _1725 + 11u;
        float _2229 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2211].w)) * _520) * 0.949999988079071044921875);
        float _2230 = _2229 * _2229;
        float _2231 = cbLight._m0[_2211].x + _597;
        float _2232 = cbLight._m0[_2211].y + _598;
        float _2233 = cbLight._m0[_2211].z + _599;
        float _2237 = inversesqrt(dot(vec3(_2231, _2232, _2233), vec3(_2231, _2232, _2233)));
        float _2238 = _2237 * _2231;
        float _2239 = _2237 * _2232;
        float _2240 = _2237 * _2233;
        float _2241 = dot(vec3(_517, _518, _519), vec3(cbLight._m0[_2211].xyz));
        float _4100 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
        float _2244 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _2245 = dot(vec3(_517, _518, _519), vec3(_2238, _2239, _2240));
        float _4111 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        float _2248 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _2249 = dot(vec3(cbLight._m0[_2211].xyz), vec3(_2238, _2239, _2240));
        float _4122 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2253 = _2230 * _2230;
        float _2257 = ((_2248 * _2248) * (_2253 + (-1.0))) + 1.0;
        float _2264 = exp2(log2(1.0 - (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0)))) * 5.0);
        float _2271 = 1.0 - _2230;
        float _2281 = (0.5 / (((_1891 * ((_2244 * _2271) + _2230)) + 9.9999999392252902907785028219223e-09) + (((_1891 * _2271) + _2230) * _2244))) * _2244;
        float _4133 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        float _2283 = (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_2253 / ((_2257 * _2257) * 3.141590118408203125));
        float _2284 = isnan(1.0) ? _1741 : (isnan(_1741) ? 1.0 : min(_1741, 1.0));
        _2200 = (((((_2264 * _1913) + _670) * cbLight._m0[_2215].x) * _2283) * _2284) + _2086;
        _2202 = (((((_2264 * _1915) + _672) * cbLight._m0[_2215].y) * _2283) * _2284) + _2088;
        _2204 = (((((_2264 * _1916) + _673) * cbLight._m0[_2215].z) * _2283) * _2284) + _2090;
    }
    float _2419;
    float _2421;
    float _2423;
    float _2425;
    float _2427;
    float _2429;
    if (_1723.y == 0u)
    {
        float _2359 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2360 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2359;
        float _2361 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2359;
        float _2362 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2359;
        uvec4 _2374 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2375 = _2374.x;
        uint _2386 = uint((float(_2374.y) * floor(float(uint(cbSceneParam._m0[85u].y * _606) / _2375))) + floor(float(uint(cbSceneParam._m0[85u].x * _605) / _2375)));
        float _2396 = (log2(_2362 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2397 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        uint _2400 = uint(isnan(14.0) ? _2397 : (isnan(_2397) ? 14.0 : min(_2397, 14.0)));
        uvec4 _2405 = texelFetch(g_lightClusterGridBuffer, int(((_2400 << 2u) + (_2386 << 6u)) >> 2u));
        uint _2406 = _2405.x;
        uint _2407 = _2374.z;
        float _2507;
        float _2509;
        float _2511;
        float _2513;
        float _2515;
        float _2517;
        if (((((1u << ((_2407 >> 4u) & 15u)) + 4294967295u) & _2406) == 0u) || ((_2407 & 240u) == 0u))
        {
            _2507 = 0.0;
            _2509 = 0.0;
            _2511 = 0.0;
            _2513 = 0.0;
            _2515 = 0.0;
            _2517 = 0.0;
        }
        else
        {
            float _2508;
            float _2510;
            float _2512;
            float _2514;
            float _2516;
            float _2518;
            float _2652 = 0.0;
            float _2653 = 0.0;
            float _2654 = 0.0;
            float _2655 = 0.0;
            float _2656 = 0.0;
            float _2657 = 0.0;
            uint _2658 = 0u;
            uint _2667;
            bool _2668;
            for (;;)
            {
                _2667 = texelFetch(g_lightClassification, int((((_2400 << 5u) + (_2386 << 9u)) + (_2658 << 2u)) >> 2u)).x;
                _2668 = _2667 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2668)
                {
                    frontier_phi_61_pred = _2652;
                    frontier_phi_61_pred_1 = _2657;
                    frontier_phi_61_pred_2 = _2656;
                    frontier_phi_61_pred_3 = _2655;
                    frontier_phi_61_pred_4 = _2654;
                    frontier_phi_61_pred_5 = _2653;
                }
                else
                {
                    float _2776;
                    float _2777;
                    float _2778;
                    float _2779;
                    float _2780;
                    float _2781;
                    uint _2782;
                    _2776 = _2652;
                    _2777 = _2653;
                    _2778 = _2654;
                    _2779 = _2655;
                    _2780 = _2656;
                    _2781 = _2657;
                    _2782 = _2667;
                    float _2708;
                    float _2709;
                    float _2710;
                    float _2711;
                    float _2712;
                    float _2713;
                    for (;;)
                    {
                        uint _2786 = uint(findLSB(_2782)) + (_2658 << 5u);
                        uint _2783 = (_2782 + 4294967295u) & _2782;
                        uint _2788 = _2786 * 48u;
                        vec4 _2802 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2788)).x, texelFetch(g_PointLightRenderingBuffer, int(_2788 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2788 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2788 + 3u)).x));
                        uint _2808 = (_2786 * 48u) + 4u;
                        vec4 _2821 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2808)).x, texelFetch(g_PointLightRenderingBuffer, int(_2808 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2808 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2808 + 3u)).x));
                        uint _2827 = (_2786 * 48u) + 8u;
                        vec3 _2838 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2827)).x, texelFetch(g_PointLightRenderingBuffer, int(_2827 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2827 + 2u)).x));
                        float _2842 = _2802.x - _2360;
                        float _2843 = _2802.y - _2361;
                        float _2844 = _2802.z - _2362;
                        float _2845 = dot(vec3(_2842, _2843, _2844), vec3(_2842, _2843, _2844));
                        float _2848 = inversesqrt(_2845);
                        float _2849 = _2848 * _2842;
                        float _2850 = _2848 * _2843;
                        float _2851 = _2848 * _2844;
                        float _2852 = dot(vec3(_627, _630, _633), vec3(_2849, _2850, _2851));
                        float _2857 = 1.0 - (_2845 * _2802.w);
                        float _4159 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
                        float _2858 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
                        float _2859 = sqrt(_2845) * _2821.w;
                        float _2862 = 1.39999997615814208984375 / (_2859 + 1.39999997615814208984375);
                        float _2863 = _2862 * _2862;
                        float _2866 = ((1.0 - _2863) * _2852) + _2863;
                        float _2869 = _2859 * _2859;
                        float _2873 = ((isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0))) * _2858) / ((_2869 * 0.699999988079071044921875) + 1.0);
                        float _2877 = (-0.0) - _2360;
                        float _2878 = (-0.0) - _2361;
                        float _2879 = (-0.0) - _2362;
                        float _2883 = inversesqrt(dot(vec3(_2877, _2878, _2879), vec3(_2877, _2878, _2879)));
                        float _2884 = _2883 * _2877;
                        float _2885 = _2883 * _2878;
                        float _2886 = _2883 * _2879;
                        float _2894 = exp2(log2(1.0 / ((_2869 * 3.5) + 5.0)) * 0.25);
                        float _2895 = 1.0 - _702;
                        float _2902 = sqrt(1.0 - ((1.0 - (_2895 * _2895)) * (1.0 - (_2894 * _2894))));
                        float _2903 = _2902 * _2902;
                        float _2904 = _2903 * _2903;
                        float _2905 = _2884 + _2849;
                        float _2906 = _2885 + _2850;
                        float _2907 = _2886 + _2851;
                        float _2911 = inversesqrt(dot(vec3(_2905, _2906, _2907), vec3(_2905, _2906, _2907)));
                        float _2915 = dot(vec3(_627, _630, _633), vec3(_2884, _2885, _2886));
                        float _4175 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
                        float _2918 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
                        float _2919 = dot(vec3(_627, _630, _633), vec3(_2911 * _2905, _2911 * _2906, _2911 * _2907));
                        float _4186 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
                        float _2922 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
                        float _2926 = ((_2922 * _2922) * (_2904 + (-1.0))) + 1.0;
                        float _2927 = _2862 * _2903;
                        float _2928 = _2927 * _2927;
                        float _2931 = ((1.0 - _2928) * _2852) + _2928;
                        float _4197 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
                        float _2932 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
                        float _2933 = 1.0 - _2903;
                        float _2943 = (0.5 / (((_2932 * ((_2918 * _2933) + _2903)) + 9.9999999392252902907785028219223e-09) + (((_2932 * _2933) + _2903) * _2918))) * _2932;
                        float _4208 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
                        float _2954 = (((_2904 * 3.1415927410125732421875) * (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0)))) / ((_2926 * _2926) * ((_2869 * 2.1991131305694580078125) + 3.141590118408203125))) * _2858;
                        _2711 = (_2873 * _2821.x) + _2779;
                        _2712 = (_2873 * _2821.y) + _2780;
                        _2713 = (_2873 * _2821.z) + _2781;
                        _2708 = (_2954 * _2838.x) + _2776;
                        _2709 = (_2954 * _2838.y) + _2777;
                        _2710 = (_2954 * _2838.z) + _2778;
                        if (_2783 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2776 = _2708;
                            _2777 = _2709;
                            _2778 = _2710;
                            _2779 = _2711;
                            _2780 = _2712;
                            _2781 = _2713;
                            _2782 = _2783;
                        }
                    }
                    frontier_phi_61_pred = _2708;
                    frontier_phi_61_pred_1 = _2713;
                    frontier_phi_61_pred_2 = _2712;
                    frontier_phi_61_pred_3 = _2711;
                    frontier_phi_61_pred_4 = _2710;
                    frontier_phi_61_pred_5 = _2709;
                }
                _2508 = frontier_phi_61_pred;
                _2518 = frontier_phi_61_pred_1;
                _2516 = frontier_phi_61_pred_2;
                _2514 = frontier_phi_61_pred_3;
                _2512 = frontier_phi_61_pred_4;
                _2510 = frontier_phi_61_pred_5;
                uint _2659 = _2658 + 1u;
                if (_2659 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2652 = _2508;
                    _2653 = _2510;
                    _2654 = _2512;
                    _2655 = _2514;
                    _2656 = _2516;
                    _2657 = _2518;
                    _2658 = _2659;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2507 = _2508;
            _2509 = _2510;
            _2511 = _2512;
            _2513 = _2514;
            _2515 = _2516;
            _2517 = _2518;
        }
        uvec4 _2521 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2522 = _2521.z;
        uint _2524 = (_2522 >> 8u) & 15u;
        float _2620;
        float _2622;
        float _2624;
        float _2626;
        float _2628;
        float _2630;
        if (((4294967295u << _2524) & _2406) == 0u)
        {
            _2620 = _2507;
            _2622 = _2509;
            _2624 = _2511;
            _2626 = _2513;
            _2628 = _2515;
            _2630 = _2517;
        }
        else
        {
            float _2645 = inversesqrt(dot(vec3(_2360, _2361, _2362), vec3(_2360, _2361, _2362)));
            float _2646 = _2645 * _2360;
            float _2647 = _2645 * _2361;
            float _2648 = _2645 * _2362;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2524 < ((_2522 >> 12u) & 15u))
            {
                float _2621;
                float _2623;
                float _2625;
                float _2627;
                float _2629;
                float _2631;
                float _2759 = _2507;
                float _2760 = _2509;
                float _2761 = _2511;
                float _2762 = _2513;
                float _2763 = _2515;
                float _2764 = _2517;
                uint _2765 = _2524;
                uint _2774;
                bool _2775;
                for (;;)
                {
                    _2774 = texelFetch(g_lightClassification, int((((_2400 << 5u) + (_2386 << 9u)) + (_2765 << 2u)) >> 2u)).x;
                    _2775 = _2774 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2775)
                    {
                        frontier_phi_67_pred = _2762;
                        frontier_phi_67_pred_1 = _2763;
                        frontier_phi_67_pred_2 = _2764;
                        frontier_phi_67_pred_3 = _2761;
                        frontier_phi_67_pred_4 = _2760;
                        frontier_phi_67_pred_5 = _2759;
                    }
                    else
                    {
                        float _2959;
                        float _2960;
                        float _2961;
                        float _2962;
                        float _2963;
                        float _2964;
                        float _3253;
                        float _3254;
                        float _3255;
                        float _3256;
                        float _3257;
                        float _3258;
                        float _2972 = _2759;
                        float _2973 = _2760;
                        float _2974 = _2761;
                        float _2975 = _2762;
                        float _2976 = _2763;
                        float _2977 = _2764;
                        uint _2978 = _2774;
                        uint _2979;
                        vec4 _3004;
                        float _3005;
                        vec4 _3020;
                        vec3 _3032;
                        vec4 _3048;
                        vec4 _3063;
                        float _3109;
                        bool _3110;
                        for (;;)
                        {
                            uint _2989 = ((_2765 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2978));
                            _2979 = (_2978 + 4294967295u) & _2978;
                            uint _2991 = _2989 * 40u;
                            _3004 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2991)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 3u)).x));
                            _3005 = _3004.w;
                            uint _3007 = (_2989 * 40u) + 4u;
                            _3020 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3007)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 3u)).x));
                            uint _3022 = (_2989 * 40u) + 8u;
                            _3032 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3022)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 2u)).x));
                            uint _3035 = (_2989 * 40u) + 16u;
                            _3048 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3035)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 3u)).x));
                            uint _3050 = (_2989 * 40u) + 20u;
                            _3063 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3050)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 3u)).x));
                            uint _3065 = (_2989 * 40u) + 24u;
                            vec4 _3078 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3065)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 3u)).x));
                            uint _3084 = (_2989 * 40u) + 28u;
                            vec4 _3097 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3084)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 3u)).x));
                            _3109 = fma(_2362, _3097.z, fma(_2361, _3097.y, _3097.x * _2360)) + _3097.w;
                            _3110 = !((fma(_2362, _3078.z, fma(_2361, _3078.y, _3078.x * _2360)) + _3078.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3110)
                            {
                                float _3137 = _3004.x - _2360;
                                float _3138 = _3004.y - _2361;
                                float _3139 = _3004.z - _2362;
                                float _3140 = dot(vec3(_3137, _3138, _3139), vec3(_3137, _3138, _3139));
                                float _3143 = inversesqrt(_3140);
                                float _3144 = _3143 * _3137;
                                float _3145 = _3143 * _3138;
                                float _3146 = _3143 * _3139;
                                float _3150 = 1.0 - (_3140 / (_3005 * _3005));
                                float _4219 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                                float _3151 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
                                float _3155 = sqrt(_3140) * _3020.w;
                                float _3157 = 1.39999997615814208984375 / (_3155 + 1.39999997615814208984375);
                                float _3158 = _3157 * _3157;
                                float _3161 = ((1.0 - _3158) * dot(vec3(_3144, _3145, _3146), vec3(_627, _630, _633))) + _3158;
                                float _3164 = _3155 * _3155;
                                float _3168 = (fma(_2362, _3048.z, fma(_2361, _3048.y, _3048.x * _2360)) + _3048.w) / _3109;
                                float _3169 = (fma(_2362, _3063.z, fma(_2361, _3063.y, _3063.x * _2360)) + _3063.w) / _3109;
                                float _3173 = 1.0 - dot(vec2(_3168, _3169), vec2(_3168, _3169));
                                float _4235 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                                float _3174 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
                                float _3175 = _3174 * (((isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0))) * _3151) / ((_3164 * 0.699999988079071044921875) + 1.0));
                                float _3187 = exp2(log2(1.0 / ((_3164 * 3.5) + 5.0)) * 0.25);
                                float _3188 = 1.0 - _702;
                                float _3195 = sqrt(1.0 - ((1.0 - (_3188 * _3188)) * (1.0 - (_3187 * _3187))));
                                float _3196 = _3195 * _3195;
                                float _3197 = _3196 * _3196;
                                float _3198 = _3144 - _2646;
                                float _3199 = _3145 - _2647;
                                float _3200 = _3146 - _2648;
                                float _3204 = inversesqrt(dot(vec3(_3198, _3199, _3200), vec3(_3198, _3199, _3200)));
                                float _3208 = dot(vec3(_627, _630, _633), vec3((-0.0) - _2646, (-0.0) - _2647, (-0.0) - _2648));
                                float _4246 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                                float _3211 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
                                float _3212 = dot(vec3(_627, _630, _633), vec3(_3204 * _3198, _3204 * _3199, _3204 * _3200));
                                float _4257 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                                float _3215 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
                                float _3219 = ((_3215 * _3215) * (_3197 + (-1.0))) + 1.0;
                                float _3220 = _3157 * _3196;
                                float _3221 = _3220 * _3220;
                                float _3227 = ((1.0 - _3221) * dot(vec3(_627, _630, _633), vec3(_3144, _3145, _3146))) + _3221;
                                float _4268 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                                float _3228 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
                                float _3229 = 1.0 - _3196;
                                float _3239 = (0.5 / (((_3228 * ((_3211 * _3229) + _3196)) + 9.9999999392252902907785028219223e-09) + (((_3228 * _3229) + _3196) * _3211))) * _3228;
                                float _4279 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                                float _3249 = (_3174 * _3151) * (((_3197 * 3.1415927410125732421875) * (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0)))) / ((_3219 * _3219) * ((_3164 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3249 * _3032.x;
                                frontier_phi_73_pred_1 = _3249 * _3032.y;
                                frontier_phi_73_pred_2 = _3175 * _3020.z;
                                frontier_phi_73_pred_3 = _3175 * _3020.y;
                                frontier_phi_73_pred_4 = _3175 * _3020.x;
                                frontier_phi_73_pred_5 = _3249 * _3032.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3253 = frontier_phi_73_pred;
                            _3254 = frontier_phi_73_pred_1;
                            _3258 = frontier_phi_73_pred_2;
                            _3257 = frontier_phi_73_pred_3;
                            _3256 = frontier_phi_73_pred_4;
                            _3255 = frontier_phi_73_pred_5;
                            _2962 = _3256 + _2975;
                            _2963 = _3257 + _2976;
                            _2964 = _3258 + _2977;
                            _2959 = _3253 + _2972;
                            _2960 = _3254 + _2973;
                            _2961 = _3255 + _2974;
                            if (_2979 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2972 = _2959;
                                _2973 = _2960;
                                _2974 = _2961;
                                _2975 = _2962;
                                _2976 = _2963;
                                _2977 = _2964;
                                _2978 = _2979;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2962;
                        frontier_phi_67_pred_1 = _2963;
                        frontier_phi_67_pred_2 = _2964;
                        frontier_phi_67_pred_3 = _2961;
                        frontier_phi_67_pred_4 = _2960;
                        frontier_phi_67_pred_5 = _2959;
                    }
                    _2627 = frontier_phi_67_pred;
                    _2629 = frontier_phi_67_pred_1;
                    _2631 = frontier_phi_67_pred_2;
                    _2625 = frontier_phi_67_pred_3;
                    _2623 = frontier_phi_67_pred_4;
                    _2621 = frontier_phi_67_pred_5;
                    uint _2766 = _2765 + 1u;
                    if (_2766 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2759 = _2621;
                        _2760 = _2623;
                        _2761 = _2625;
                        _2762 = _2627;
                        _2763 = _2629;
                        _2764 = _2631;
                        _2765 = _2766;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2629;
                frontier_phi_55_56_ladder_1 = _2631;
                frontier_phi_55_56_ladder_2 = _2627;
                frontier_phi_55_56_ladder_3 = _2625;
                frontier_phi_55_56_ladder_4 = _2623;
                frontier_phi_55_56_ladder_5 = _2621;
            }
            else
            {
                frontier_phi_55_56_ladder = _2515;
                frontier_phi_55_56_ladder_1 = _2517;
                frontier_phi_55_56_ladder_2 = _2513;
                frontier_phi_55_56_ladder_3 = _2511;
                frontier_phi_55_56_ladder_4 = _2509;
                frontier_phi_55_56_ladder_5 = _2507;
            }
            _2620 = frontier_phi_55_56_ladder_5;
            _2622 = frontier_phi_55_56_ladder_4;
            _2624 = frontier_phi_55_56_ladder_3;
            _2626 = frontier_phi_55_56_ladder_2;
            _2628 = frontier_phi_55_56_ladder;
            _2630 = frontier_phi_55_56_ladder_1;
        }
        float _2635 = isnan(1.0) ? _686 : (isnan(_686) ? 1.0 : min(_686, 1.0));
        _2419 = (_2635 * _2626) + _1855;
        _2421 = (_2635 * _2628) + _1857;
        _2423 = (_2635 * _2630) + _1859;
        _2425 = ((_2620 * _670) * _2635) + _2200;
        _2427 = ((_2622 * _672) * _2635) + _2202;
        _2429 = ((_2624 * _673) * _2635) + _2204;
    }
    else
    {
        _2419 = _1855;
        _2421 = _1857;
        _2423 = _1859;
        _2425 = _2200;
        _2427 = _2202;
        _2429 = _2204;
    }
    float _4295 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _4306 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _4317 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    uint _2449 = _226 + 6u;
    float _2457 = _605 / cbSceneParam._m0[86u].x;
    float _2458 = _606 / cbSceneParam._m0[86u].y;
    vec4 _2472 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2457, _2458, (log2((isnan(cbSceneParam._m0[77u].w) ? _539 : (isnan(_539) ? cbSceneParam._m0[77u].w : min(_539, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2474 = _2472.x;
    float _2475 = _2472.y;
    float _2476 = _2472.z;
    float _2477 = _2472.w;
    float _2570;
    float _2572;
    float _2574;
    float _2576;
    if (_539 > cbSceneParam._m0[78u].w)
    {
        float _2532 = isnan(_539) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _539 : min(cbSceneParam._m0[80u].w, _539));
        float _2533 = _2532 / _539;
        float _2544 = _2533 * _590;
        float _2545 = _591 * _2533;
        float _2546 = (-0.0) - _2545;
        float _2548 = _2533 * _592;
        float _2550 = (cbSceneParam._m0[77u].w * _2546) / _2532;
        float _2551 = _2550 + cbSceneParam._m0[79u].w;
        float _2552 = cbSceneParam._m0[79u].w - _2545;
        float _2558 = sqrt(((_2544 * _2544) + (_2545 * _2545)) + (_2548 * _2548));
        float _2561 = (1.0 - (cbSceneParam._m0[77u].w / _2532)) * _2558;
        float _2566 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2568 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2721;
        if (abs((_2546 - _2550) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2721 = ((((_2551 > 0.0) ? exp2(_2566 * _2551) : (2.0 - exp2(_2568 * _2551))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2561;
        }
        else
        {
            float _2681 = 1.0 / cbSceneParam._m0[80u].x;
            float _2682 = isnan(_2552) ? _2551 : (isnan(_2551) ? _2552 : max(_2551, _2552));
            float _2683 = isnan(_2552) ? _2551 : (isnan(_2551) ? _2552 : min(_2551, _2552));
            float _2692 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : min(_2682, 0.0));
            float _2693 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : min(_2683, 0.0));
            _2721 = ((abs(_2558 / _2546) * cbSceneParam._m0[80u].y) * ((((_2692 - _2693) * 2.0) - ((exp2(_2566 * (isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0)))) - exp2(_2566 * (isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0))))) * _2681)) - ((exp2(_2568 * _2692) - exp2(_2568 * _2693)) * _2681))) + (_2561 * cbSceneParam._m0[80u].z);
        }
        vec4 _2723 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2457, _2458, 1.0), 0.0);
        float _2732 = exp2((_2721 * (-1.44269502162933349609375)) * (1.0 - _2723.w));
        float _2733 = log2(_2732);
        float _2749 = log2(_2477);
        _2570 = (exp2(_2749 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2733 * cbSceneParam._m0[78u].x)) * _2723.x) / cbSceneParam._m0[78u].x)) + _2474;
        _2572 = (exp2(_2749 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2733 * cbSceneParam._m0[78u].y)) * _2723.y) / cbSceneParam._m0[78u].y)) + _2475;
        _2574 = (exp2(_2749 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2733 * cbSceneParam._m0[78u].z)) * _2723.z) / cbSceneParam._m0[78u].z)) + _2476;
        _2576 = _2732 * _2477;
    }
    else
    {
        _2570 = _2474;
        _2572 = _2475;
        _2574 = _2476;
        _2576 = _2477;
    }
    float _2588 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2589 = _2588 == 3.0;
    float _2590 = log2(_2576);
    float _2597 = exp2(_2590 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_2419 + ((isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0))) * _686))) + ((_2425 + ((isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))) * _1494)) * cbPerFrame._m0[3u].x));
    float _2598 = exp2(_2590 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_2421 + ((isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0))) * _686))) + ((_2427 + ((isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))) * _1494)) * cbPerFrame._m0[3u].x));
    float _2599 = exp2(_2590 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_2423 + ((isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0))) * _686))) + ((_2429 + ((isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))) * _1494)) * cbPerFrame._m0[3u].x));
    float _2608 = (_2588 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2608 * (_2589 ? _2597 : (_2597 + (cbSceneParam._m0[72u].w * _2570)));
    SV_Target.y = _2608 * (_2589 ? _2598 : (_2598 + (cbSceneParam._m0[72u].w * _2572)));
    SV_Target.z = _2608 * (_2589 ? _2599 : (_2599 + (cbSceneParam._m0[72u].w * _2574)));
    SV_Target.w = cbInstanceData._m0[_2449].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2449].w;
}


