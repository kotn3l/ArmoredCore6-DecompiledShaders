#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1116;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _212 = _211 * _203;
    float _213 = _211 * _204;
    float _214 = _211 * _205;
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = _218 * NORMAL.x;
    float _220 = _218 * NORMAL.y;
    float _221 = _218 * NORMAL.z;
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _226 = _225 * TANGENT.x;
    float _227 = _225 * TANGENT.y;
    float _228 = _225 * TANGENT.z;
    float _239 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _241 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _242 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3442 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3453 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3464 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    uint _252 = uint(roundEven(NORMAL.w)) * 13u;
    uint _257 = _252 + 1u;
    uint _261 = _252 + 2u;
    float _270 = sqrt(((cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x)) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x));
    float _271 = _270 * TEXCOORD.z;
    float _272 = _270 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _271) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _272) + cbTextureTilingScale._m0[13u].w));
    vec4 _308 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _313 = _308.x * cbMtdParam._m0[9u].x;
    float _314 = _308.y * cbMtdParam._m0[9u].y;
    float _315 = _308.z * cbMtdParam._m0[9u].z;
    float _319 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _285.x) * _313;
    float _322 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _285.y) * _314;
    float _325 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _285.z) * _315;
    float _332 = ((_313 - _319) * (isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0)))) + _319;
    float _333 = ((_314 - _322) * (isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0)))) + _322;
    float _334 = ((_315 - _325) * (isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0)))) + _325;
    vec4 _353 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _271) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _272) + cbTextureTilingScale._m0[14u].w));
    vec4 _373 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _271) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _272) + cbTextureTilingScale._m0[20u].w));
    vec4 _399 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _403 = _399.z;
    float _407 = (_399.x * 2.0) + (-1.0);
    float _408 = (_399.y * 2.0) + (-1.0);
    float _409 = dot(vec2(_407, _408), vec2(_407, _408));
    float _3475 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _414 = sqrt(1.0 - (isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0))));
    float _419 = _407 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_373.x * 2.0) + (-1.0)));
    float _420 = _408 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_373.y * 2.0) + (-1.0)));
    float _423 = fma(_414, _219, fma(_420, _226, _419 * _212));
    float _426 = fma(_414, _220, fma(_420, _227, _419 * _213));
    float _429 = fma(_414, _221, fma(_420, _228, _419 * _214));
    float _433 = inversesqrt(dot(vec3(_423, _426, _429), vec3(_423, _426, _429)));
    vec4 _469 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _271) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _272) + cbTextureTilingScale._m0[11u].w));
    float _471 = _469.x;
    float _472 = 1.0 - _471;
    float _481 = (cbMtdParam._m0[19u].x + dot(vec4(_433 * _423, _433 * _426, _433 * _429, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_471 - _472) * cbMtdParam._m0[24u].z) + _472) * cbMtdParam._m0[21u].z);
    float _3486 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _482 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
    float _489 = (_482 * ((_353.x * cbMtdParam._m0[18u].x) - _332)) + _332;
    float _490 = (_482 * ((_353.y * cbMtdParam._m0[18u].y) - _333)) + _333;
    float _491 = (_482 * ((_353.z * cbMtdParam._m0[18u].z) - _334)) + _334;
    vec4 _504 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _506 = _504.x;
    float _508 = _506 - (_506 * _482);
    float _513 = (((_373.z - _403) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _403;
    vec4 _526 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _271) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _272) + cbTextureTilingScale._m0[15u].w));
    float _533 = (_526.x * 2.0) + (-1.0);
    float _534 = (_526.y * 2.0) + (-1.0);
    float _535 = dot(vec2(_533, _534), vec2(_533, _534));
    float _3497 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _543 = ((_526.z - _513) * _482) + _513;
    float _553 = ((sqrt(1.0 - (isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0)))) - _414) * _482) + _414;
    float _556 = (((_533 - _419) * _482) + _419) + (cbMtdParam._m0[21u].x * _419);
    float _557 = (((_534 - _420) * _482) + _420) + (cbMtdParam._m0[21u].x * _420);
    float _559 = cbMtdParam._m0[22u].x + _399.w;
    float _562 = fma(_553, _219, fma(_557, _226, _556 * _212));
    float _565 = fma(_553, _220, fma(_557, _227, _556 * _213));
    float _568 = fma(_553, _221, fma(_557, _228, _556 * _214));
    float _572 = inversesqrt(dot(vec3(_562, _565, _568), vec3(_562, _565, _568)));
    float _573 = _572 * _562;
    float _574 = _572 * _565;
    float _575 = _572 * _568;
    float _3508 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _576 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
    float _3519 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _3530 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _3541 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _3552 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _3563 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _581 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
    float _595 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _636 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _646 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _636);
    float _647 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _636);
    float _648 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _636);
    float _652 = inversesqrt(dot(vec3(_646, _647, _648), vec3(_646, _647, _648)));
    float _653 = _646 * _652;
    float _654 = _647 * _652;
    float _655 = _648 * _652;
    float _661 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _662 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _683 = fma(_575, cbSceneParam._m0[5u].z, fma(_574, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _573));
    float _686 = fma(_575, cbSceneParam._m0[6u].z, fma(_574, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _573));
    float _689 = fma(_575, cbSceneParam._m0[7u].z, fma(_574, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _573));
    uint _703 = (_252 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _709 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0)))) * cbInstanceData._m0[_703].x;
    float _710 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0)))) * cbInstanceData._m0[_703].y;
    float _711 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0)))) * cbInstanceData._m0[_703].z;
    float _3574 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _712 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
    float _3585 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _713 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
    float _3596 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _714 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
    float _715 = 1.0 - _581;
    float _716 = _712 * _715;
    float _717 = _713 * _715;
    float _718 = _714 * _715;
    float _723 = (_712 + (-0.039999999105930328369140625)) * _581;
    float _724 = (_713 + (-0.039999999105930328369140625)) * _581;
    float _725 = (_714 + (-0.039999999105930328369140625)) * _581;
    float _726 = _723 + 0.039999999105930328369140625;
    float _728 = _724 + 0.039999999105930328369140625;
    float _729 = _725 + 0.039999999105930328369140625;
    vec4 _738 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _661, cbSceneParam._m0[86u].y * _662));
    float _742 = ((isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0))) * TEXCOORD_5.w) * _738.x;
    float _743 = dot(vec3(_573, _574, _575), vec3(_653, _654, _655));
    float _746 = _743 * 2.0;
    float _750 = (_746 * _573) - _653;
    float _751 = (_746 * _574) - _654;
    float _752 = (_746 * _575) - _655;
    float _756 = abs(dot(vec3(_653, _654, _655), vec3(_573, _574, _575)));
    float _3607 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _758 = sqrt(_576);
    float _771 = exp2((_758 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_758 * 3.0));
    float _777 = (1.0 - _771) * ((_758 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _778 = _771 * _758;
    float _806 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _810 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _814 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1115;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _840 = fma(_814, cbModelParam._m0[26u].z, fma(_810, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _806));
        float _844 = fma(_814, cbModelParam._m0[27u].z, fma(_810, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _806));
        float _848 = fma(_814, cbModelParam._m0[28u].z, fma(_810, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _806));
        float _873 = _806 + _573;
        float _874 = _810 + _574;
        float _875 = _814 + _575;
        float _885 = fma(_875, cbModelParam._m0[26u].z, fma(_874, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _873)) - _840;
        float _886 = fma(_875, cbModelParam._m0[27u].z, fma(_874, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _873)) - _844;
        float _887 = fma(_875, cbModelParam._m0[28u].z, fma(_874, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _873)) - _848;
        float _891 = inversesqrt(dot(vec3(_885, _886, _887), vec3(_885, _886, _887)));
        float _904 = ((_891 * _885) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_840 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _905 = ((_891 * _886) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_844 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _906 = ((_891 * _887) / cbModelParam._m0[34u].z) + ((((((_848 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_904, _905, _906), 0.0);
        vec4 _916 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_904, _905, _906), 0.0);
        vec4 _923 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_904, _905, _906), 0.0);
        vec4 _930 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_904, _905, _906), 0.0);
        float _943 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _944 = _943 * (_909.x + (-0.5));
        float _945 = _943 * (_909.y + (-0.5));
        float _946 = _943 * (_909.z + (-0.5));
        float _953 = exp2((_916.w + (-0.5)) * 20.0) * 2.0;
        float _954 = _953 * (_916.x + (-0.5));
        float _955 = _953 * (_916.y + (-0.5));
        float _956 = _953 * (_916.z + (-0.5));
        float _963 = exp2((_923.w + (-0.5)) * 20.0) * 2.0;
        float _964 = _963 * (_923.x + (-0.5));
        float _965 = _963 * (_923.y + (-0.5));
        float _966 = _963 * (_923.z + (-0.5));
        float _973 = exp2((_930.w + (-0.5)) * 20.0) * 2.0;
        float _974 = _973 * (_930.x + (-0.5));
        float _975 = _973 * (_930.y + (-0.5));
        float _976 = _973 * (_930.z + (-0.5));
        float _977 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _978 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _979 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _980 = _944 * 0.5;
        float _981 = _954 * 0.5;
        float _982 = _964 * 0.5;
        float _983 = dot(vec3(_980, _981, _982), vec3(_980, _981, _982));
        float _988 = (_983 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_983);
        float _997 = (dot(vec3(_573, _574, _575), vec3(_988 * _980, _988 * _981, _988 * _982)) + 1.0) * 0.5;
        float _3633 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1007 = sqrt(((_981 * _981) + (_980 * _980)) + (_982 * _982)) / (_977 + 9.9999997473787516355514526367188e-06);
        float _3644 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _1009 = _1008 * 2.0;
        float _1013 = (1.0 - _1008) / (_1008 + 1.0);
        float _3655 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _1023 = ((((1.0 - _1014) * (_1009 + 2.0)) * exp2(log2(isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * (_1009 + 1.0))) + _1014) * _977;
        float _1024 = _945 * 0.5;
        float _1025 = _955 * 0.5;
        float _1026 = _965 * 0.5;
        float _1027 = dot(vec3(_1024, _1025, _1026), vec3(_1024, _1025, _1026));
        float _1032 = (_1027 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1027);
        float _1040 = (dot(vec3(_573, _574, _575), vec3(_1032 * _1024, _1032 * _1025, _1032 * _1026)) + 1.0) * 0.5;
        float _3666 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1049 = sqrt(((_1025 * _1025) + (_1024 * _1024)) + (_1026 * _1026)) / (_978 + 9.9999997473787516355514526367188e-06);
        float _3677 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _1051 = _1050 * 2.0;
        float _1055 = (1.0 - _1050) / (_1050 + 1.0);
        float _3688 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _1065 = ((((1.0 - _1056) * (_1051 + 2.0)) * exp2(log2(isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * (_1051 + 1.0))) + _1056) * _978;
        float _1066 = _946 * 0.5;
        float _1067 = _956 * 0.5;
        float _1068 = _966 * 0.5;
        float _1069 = dot(vec3(_1066, _1067, _1068), vec3(_1066, _1067, _1068));
        float _1074 = (_1069 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1069);
        float _1082 = (dot(vec3(_573, _574, _575), vec3(_1074 * _1066, _1074 * _1067, _1074 * _1068)) + 1.0) * 0.5;
        float _3699 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1091 = sqrt(((_1067 * _1067) + (_1066 * _1066)) + (_1068 * _1068)) / (_979 + 9.9999997473787516355514526367188e-06);
        float _3710 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1093 = _1092 * 2.0;
        float _1097 = (1.0 - _1092) / (_1092 + 1.0);
        float _3721 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1107 = ((((1.0 - _1098) * (_1093 + 2.0)) * exp2(log2(isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) * (_1093 + 1.0))) + _1098) * _979;
        _1115 = _946;
        _1117 = _945;
        _1118 = _944;
        _1119 = _956;
        _1120 = _955;
        _1121 = _954;
        _1122 = _966;
        _1123 = _965;
        _1124 = _964;
        _1125 = _979;
        _1126 = _978;
        _1127 = _977;
        _1128 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0)));
        _1129 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0)));
        _1130 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0)));
    }
    else
    {
        _1115 = _1116;
        _1117 = _1116;
        _1118 = _1116;
        _1119 = _1116;
        _1120 = _1116;
        _1121 = _1116;
        _1122 = _1116;
        _1123 = _1116;
        _1124 = _1116;
        _1125 = _1116;
        _1126 = _1116;
        _1127 = _1116;
        _1128 = 0.0;
        _1129 = 0.0;
        _1130 = 0.0;
    }
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1155 = fma(_814, cbModelParam._m0[30u].z, fma(_810, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _806));
        float _1159 = fma(_814, cbModelParam._m0[31u].z, fma(_810, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _806));
        float _1163 = fma(_814, cbModelParam._m0[32u].z, fma(_810, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _806));
        float _1186 = _806 + _573;
        float _1187 = _810 + _574;
        float _1188 = _814 + _575;
        float _1198 = fma(_1188, cbModelParam._m0[30u].z, fma(_1187, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1186)) - _1155;
        float _1199 = fma(_1188, cbModelParam._m0[31u].z, fma(_1187, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1186)) - _1159;
        float _1200 = fma(_1188, cbModelParam._m0[32u].z, fma(_1187, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1186)) - _1163;
        float _1204 = inversesqrt(dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200)));
        float _1217 = ((_1204 * _1198) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1155 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1218 = ((_1204 * _1199) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1159 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1219 = ((_1204 * _1200) / cbModelParam._m0[35u].z) + ((((((_1163 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        float _1254 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1221.x + (-0.5));
        float _1256 = _1254 * (_1221.y + (-0.5));
        float _1257 = _1254 * (_1221.z + (-0.5));
        float _1264 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1228.x + (-0.5));
        float _1266 = _1264 * (_1228.y + (-0.5));
        float _1267 = _1264 * (_1228.z + (-0.5));
        float _1274 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1275 = _1274 * (_1235.x + (-0.5));
        float _1276 = _1274 * (_1235.y + (-0.5));
        float _1277 = _1274 * (_1235.z + (-0.5));
        float _1284 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1285 = _1284 * (_1242.x + (-0.5));
        float _1286 = _1284 * (_1242.y + (-0.5));
        float _1287 = _1284 * (_1242.z + (-0.5));
        float _1288 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1289 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1290 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1291 = _1255 * 0.5;
        float _1292 = _1265 * 0.5;
        float _1293 = _1275 * 0.5;
        float _1294 = dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293));
        float _1299 = (_1294 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1294);
        float _1307 = (dot(vec3(_573, _574, _575), vec3(_1299 * _1291, _1299 * _1292, _1299 * _1293)) + 1.0) * 0.5;
        float _3762 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1316 = sqrt(((_1292 * _1292) + (_1291 * _1291)) + (_1293 * _1293)) / (_1288 + 9.9999997473787516355514526367188e-06);
        float _3773 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1318 = _1317 * 2.0;
        float _1322 = (1.0 - _1317) / (_1317 + 1.0);
        float _3784 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1332 = ((((1.0 - _1323) * (_1318 + 2.0)) * exp2(log2(isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_1318 + 1.0))) + _1323) * _1288;
        float _1333 = _1256 * 0.5;
        float _1334 = _1266 * 0.5;
        float _1335 = _1276 * 0.5;
        float _1336 = dot(vec3(_1333, _1334, _1335), vec3(_1333, _1334, _1335));
        float _1341 = (_1336 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1336);
        float _1349 = (dot(vec3(_573, _574, _575), vec3(_1341 * _1333, _1341 * _1334, _1341 * _1335)) + 1.0) * 0.5;
        float _3795 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1358 = sqrt(((_1334 * _1334) + (_1333 * _1333)) + (_1335 * _1335)) / (_1289 + 9.9999997473787516355514526367188e-06);
        float _3806 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1360 = _1359 * 2.0;
        float _1364 = (1.0 - _1359) / (_1359 + 1.0);
        float _3817 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1374 = ((((1.0 - _1365) * (_1360 + 2.0)) * exp2(log2(isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_1360 + 1.0))) + _1365) * _1289;
        float _1375 = _1257 * 0.5;
        float _1376 = _1267 * 0.5;
        float _1377 = _1277 * 0.5;
        float _1378 = dot(vec3(_1375, _1376, _1377), vec3(_1375, _1376, _1377));
        float _1383 = (_1378 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1378);
        float _1391 = (dot(vec3(_573, _574, _575), vec3(_1383 * _1375, _1383 * _1376, _1383 * _1377)) + 1.0) * 0.5;
        float _3828 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1400 = sqrt(((_1376 * _1376) + (_1375 * _1375)) + (_1377 * _1377)) / (_1290 + 9.9999997473787516355514526367188e-06);
        float _3839 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1402 = _1401 * 2.0;
        float _1406 = (1.0 - _1401) / (_1401 + 1.0);
        float _3850 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1416 = ((((1.0 - _1407) * (_1402 + 2.0)) * exp2(log2(isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_1402 + 1.0))) + _1407) * _1290;
        _1424 = _1257;
        _1425 = _1256;
        _1426 = _1255;
        _1427 = _1267;
        _1428 = _1266;
        _1429 = _1265;
        _1430 = _1277;
        _1431 = _1276;
        _1432 = _1275;
        _1433 = _1290;
        _1434 = _1289;
        _1435 = _1288;
        _1436 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)));
        _1437 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)));
        _1438 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)));
    }
    else
    {
        _1424 = _1116;
        _1425 = _1116;
        _1426 = _1116;
        _1427 = _1116;
        _1428 = _1116;
        _1429 = _1116;
        _1430 = _1116;
        _1431 = _1116;
        _1432 = _1116;
        _1433 = _1116;
        _1434 = _1116;
        _1435 = _1116;
        _1436 = 0.0;
        _1437 = 0.0;
        _1438 = 0.0;
    }
    float _1448 = (cbModelParam._m0[1u].x * (_1436 - _1128)) + _1128;
    float _1449 = (cbModelParam._m0[1u].x * (_1437 - _1129)) + _1129;
    float _1450 = (cbModelParam._m0[1u].x * (_1438 - _1130)) + _1130;
    float _1471 = fma(_1450, cbSceneParam._m0[89u].z, fma(_1449, cbSceneParam._m0[89u].y, _1448 * cbSceneParam._m0[89u].x));
    float _1474 = fma(_1450, cbSceneParam._m0[90u].z, fma(_1449, cbSceneParam._m0[90u].y, _1448 * cbSceneParam._m0[90u].x));
    float _1477 = fma(_1450, cbSceneParam._m0[91u].z, fma(_1449, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1448));
    float _1492 = _750 * 0.5;
    float _1493 = _751 * 0.5;
    float _1494 = _752 * 0.5;
    float _1495 = dot(vec4(_1492, _1493, _1494, 1.0), vec4(_1426, _1429, _1432, _1435));
    float _1498 = dot(vec4(_1492, _1493, _1494, 1.0), vec4(_1425, _1428, _1431, _1434));
    float _1501 = dot(vec4(_1492, _1493, _1494, 1.0), vec4(_1424, _1427, _1430, _1433));
    float _1535;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1508 = dot(vec4(_1492, _1493, _1494, 1.0), vec4(_1115, _1119, _1122, _1125));
        float _1512 = dot(vec4(_1492, _1493, _1494, 1.0), vec4(_1117, _1120, _1123, _1126));
        float _1516 = dot(vec4(_1492, _1493, _1494, 1.0), vec4(_1118, _1121, _1124, _1127));
        float _1523 = dot(vec4(cbModelParam._m0[39u]), vec4(_1492, _1493, _1494, 1.0));
        _1535 = dot(vec3(isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)), isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)), isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1523) ? 0.0 : (isnan(0.0) ? _1523 : max(0.0, _1523))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1535 = 1.0;
    }
    float _1546;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1537 = dot(vec4(cbModelParam._m0[40u]), vec4(_1492, _1493, _1494, 1.0));
        _1546 = dot(vec3(isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)), isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)), isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1537) ? 0.0 : (isnan(0.0) ? _1537 : max(0.0, _1537))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1546 = 1.0;
    }
    float _1550 = (_1546 * cbModelParam._m0[1u].x) + (_1535 * (1.0 - cbModelParam._m0[1u].x));
    float _1560 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _576);
    float _1561 = isnan(_1560) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1560 : min(cbModelParam._m0[25u].z, _1560));
    float _1641;
    float _1643;
    float _1645;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1608 = fma(_814, cbModelParam._m0[13u].z, fma(_810, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _806)) + cbModelParam._m0[13u].w;
        float _1612 = fma(_814, cbModelParam._m0[14u].z, fma(_810, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _806)) + cbModelParam._m0[14u].w;
        float _1616 = fma(_814, cbModelParam._m0[15u].z, fma(_810, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _806)) + cbModelParam._m0[15u].w;
        float _1619 = fma(_752, cbModelParam._m0[13u].z, fma(_751, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _750));
        float _1622 = fma(_752, cbModelParam._m0[14u].z, fma(_751, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _750));
        float _1625 = fma(_752, cbModelParam._m0[15u].z, fma(_751, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _750));
        float _1653;
        if (_1619 > 0.0)
        {
            _1653 = abs((1.0 - _1608) / _1619);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1619 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1608 + 1.0) / _1619);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1653 = frontier_phi_14_12_ladder;
        }
        float _1856;
        if (_1622 > 0.0)
        {
            _1856 = abs((1.0 - _1612) / _1622);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1622 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1612 + 1.0) / _1622);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1856 = frontier_phi_23_19_ladder;
        }
        float _2110;
        if (_1625 > 0.0)
        {
            _2110 = abs((1.0 - _1616) / _1625);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1625 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1616 + 1.0) / _1625);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2110 = frontier_phi_35_30_ladder;
        }
        float _2112 = isnan(_1856) ? _1653 : (isnan(_1653) ? _1856 : min(_1653, _1856));
        float _2113 = isnan(_2110) ? _2112 : (isnan(_2112) ? _2110 : min(_2112, _2110));
        float _2117 = (_2113 * _1619) + _1608;
        float _2118 = (_2113 * _1622) + _1612;
        float _2119 = (_2113 * _1625) + _1616;
        float _2120 = _2113 * 9.9999997473787516355514526367188e-05;
        float _2122 = (-1.0) - _2120;
        float _2124 = _2120 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2119 > _2124) || ((_2119 < _2122) || ((_2118 > _2124) || ((_2118 < _2122) || ((_2117 < _2122) || (_2117 > _2124))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2247 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2119, cbModelParam._m0[9u].z, fma(_2118, cbModelParam._m0[9u].y, _2117 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2119, cbModelParam._m0[10u].z, fma(_2118, cbModelParam._m0[10u].y, _2117 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2119, cbModelParam._m0[11u].z, fma(_2118, cbModelParam._m0[11u].y, _2117 * cbModelParam._m0[11u].x))), _1561);
            frontier_phi_13_35_ladder = _2247.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2247.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2247.x * cbModelParam._m0[1u].y;
        }
        _1641 = frontier_phi_13_35_ladder_2;
        _1643 = frontier_phi_13_35_ladder_1;
        _1645 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1629 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_750, _751, _752), _1561);
        _1641 = _1629.x * cbModelParam._m0[1u].y;
        _1643 = _1629.y * cbModelParam._m0[1u].y;
        _1645 = _1629.z * cbModelParam._m0[1u].y;
    }
    float _1649 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _576);
    float _1650 = isnan(_1649) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1649 : min(cbModelParam._m0[25u].w, _1649));
    float _1739;
    float _1741;
    float _1743;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1703 = fma(_814, cbModelParam._m0[21u].z, fma(_810, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _806)) + cbModelParam._m0[21u].w;
        float _1707 = fma(_814, cbModelParam._m0[22u].z, fma(_810, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _806)) + cbModelParam._m0[22u].w;
        float _1711 = fma(_814, cbModelParam._m0[23u].z, fma(_810, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _806)) + cbModelParam._m0[23u].w;
        float _1714 = fma(_752, cbModelParam._m0[21u].z, fma(_751, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _750));
        float _1717 = fma(_752, cbModelParam._m0[22u].z, fma(_751, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _750));
        float _1720 = fma(_752, cbModelParam._m0[23u].z, fma(_751, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _750));
        float _1861;
        if (_1714 > 0.0)
        {
            _1861 = abs((1.0 - _1703) / _1714);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1714 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1703 + 1.0) / _1714);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1861 = frontier_phi_25_21_ladder;
        }
        float _2137;
        if (_1717 > 0.0)
        {
            _2137 = abs((1.0 - _1707) / _1717);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1717 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1707 + 1.0) / _1717);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2137 = frontier_phi_37_32_ladder;
        }
        float _2350;
        if (_1720 > 0.0)
        {
            _2350 = abs((1.0 - _1711) / _1720);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1720 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1711 + 1.0) / _1720);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2350 = frontier_phi_46_43_ladder;
        }
        float _2352 = isnan(_2137) ? _1861 : (isnan(_1861) ? _2137 : min(_1861, _2137));
        float _2353 = isnan(_2350) ? _2352 : (isnan(_2352) ? _2350 : min(_2352, _2350));
        float _2357 = (_2353 * _1714) + _1703;
        float _2358 = (_2353 * _1717) + _1707;
        float _2359 = (_2353 * _1720) + _1711;
        float _2360 = _2353 * 9.9999997473787516355514526367188e-05;
        float _2361 = (-1.0) - _2360;
        float _2363 = _2360 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2359 > _2363) || ((_2359 < _2361) || ((_2358 > _2363) || ((_2358 < _2361) || ((_2357 < _2361) || (_2357 > _2363))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2558 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2359, cbModelParam._m0[17u].z, fma(_2358, cbModelParam._m0[17u].y, _2357 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2359, cbModelParam._m0[18u].z, fma(_2358, cbModelParam._m0[18u].y, _2357 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2359, cbModelParam._m0[19u].z, fma(_2358, cbModelParam._m0[19u].y, _2357 * cbModelParam._m0[19u].x))), _1650);
            frontier_phi_22_46_ladder = _2558.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2558.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2558.x * cbModelParam._m0[1u].z;
        }
        _1739 = frontier_phi_22_46_ladder_2;
        _1741 = frontier_phi_22_46_ladder_1;
        _1743 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1723 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_750, _751, _752), _1650);
        _1739 = _1723.x * cbModelParam._m0[1u].z;
        _1741 = _1723.y * cbModelParam._m0[1u].z;
        _1743 = _1723.z * cbModelParam._m0[1u].z;
    }
    float _1756 = (((_777 * _726) + _778) * _742) * ((cbModelParam._m0[1u].w * (_1739 - _1641)) + _1641);
    float _1758 = (((_777 * _728) + _778) * _742) * ((cbModelParam._m0[1u].w * (_1741 - _1643)) + _1643);
    float _1760 = (((_777 * _729) + _778) * _742) * ((cbModelParam._m0[1u].w * (_1743 - _1645)) + _1645);
    float _1763 = fma(_1760, cbSceneParam._m0[89u].z, fma(_1758, cbSceneParam._m0[89u].y, _1756 * cbSceneParam._m0[89u].x));
    float _1766 = fma(_1760, cbSceneParam._m0[90u].z, fma(_1758, cbSceneParam._m0[90u].y, _1756 * cbSceneParam._m0[90u].x));
    float _1769 = fma(_1760, cbSceneParam._m0[91u].z, fma(_1758, cbSceneParam._m0[91u].y, _1756 * cbSceneParam._m0[91u].x));
    uvec4 _1779 = floatBitsToUint(cbInstanceData._m0[_252 + 5u]);
    uint _1781 = _1779.x * 14u;
    uint _1782 = _1781 + 13u;
    float _1789 = _742 + (-1.0);
    float _1794 = (cbLight._m0[_1782].x * _1789) + 1.0;
    float _1795 = (cbLight._m0[_1782].y * _1789) + 1.0;
    float _1796 = (cbLight._m0[_1782].z * _1789) + 1.0;
    float _1797 = (cbLight._m0[_1782].w * _1789) + 1.0;
    uint _1798 = _1781 + 5u;
    float _1804 = isnan(1.0) ? _1795 : (isnan(_1795) ? 1.0 : min(_1795, 1.0));
    uint _1808 = _1781 + 4u;
    float _1815 = isnan(1.0) ? _1794 : (isnan(_1794) ? 1.0 : min(_1794, 1.0));
    uint _1819 = _1781 | 1u;
    float _1830 = dot(vec3(cbLight._m0[_1781].xyz), vec3(_573, _574, _575));
    float _1833 = dot(vec3(cbLight._m0[_1819].xyz), vec3(_573, _574, _575));
    float _3986 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
    float _3997 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _1838 = (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * 0.3183098733425140380859375;
    float _1840 = (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * 0.3183098733425140380859375;
    float _1847 = ((cbLight._m0[_1798].x * _1804) * _1840) + ((cbLight._m0[_1808].x * _1815) * _1838);
    float _1848 = ((_1804 * cbLight._m0[_1798].y) * _1840) + ((_1815 * cbLight._m0[_1808].y) * _1838);
    float _1849 = ((_1804 * cbLight._m0[_1798].z) * _1840) + ((_1815 * cbLight._m0[_1808].z) * _1838);
    uvec4 _1853 = floatBitsToUint(cbLight._m0[_1781 + 12u]);
    bool _1855 = _1853.x == 0u;
    float _1866;
    float _1868;
    float _1870;
    if (_1855)
    {
        _1866 = _1847;
        _1868 = _1848;
        _1870 = _1849;
    }
    else
    {
        uint _1874 = _1781 + 6u;
        float _1890 = (dot(vec3(cbLight._m0[_1781 + 2u].xyz), vec3(_573, _574, _575)) * 0.5) + 0.5;
        float _1891 = _1890 * _1890;
        float _4008 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
        float _1892 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1893 = isnan(1.0) ? _1796 : (isnan(_1796) ? 1.0 : min(_1796, 1.0));
        _1866 = (((cbLight._m0[_1874].x * 0.3183098733425140380859375) * _1892) * _1893) + _1847;
        _1868 = (((cbLight._m0[_1874].y * 0.3183098733425140380859375) * _1892) * _1893) + _1848;
        _1870 = (((cbLight._m0[_1874].z * 0.3183098733425140380859375) * _1892) * _1893) + _1849;
    }
    bool _1873 = _1853.y == 0u;
    float _1911;
    float _1913;
    float _1915;
    if (_1873)
    {
        _1911 = _1866;
        _1913 = _1868;
        _1915 = _1870;
    }
    else
    {
        uint _2081 = _1781 + 7u;
        float _2097 = (dot(vec3(cbLight._m0[_1781 + 3u].xyz), vec3(_573, _574, _575)) * 0.5) + 0.5;
        float _2098 = _2097 * _2097;
        float _4024 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
        float _2099 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _2100 = isnan(1.0) ? _1797 : (isnan(_1797) ? 1.0 : min(_1797, 1.0));
        _1911 = (((cbLight._m0[_2081].x * 0.3183098733425140380859375) * _2099) * _2100) + _1866;
        _1913 = (((cbLight._m0[_2081].y * 0.3183098733425140380859375) * _2099) * _2100) + _1868;
        _1915 = (((cbLight._m0[_2081].z * 0.3183098733425140380859375) * _2099) * _2100) + _1870;
    }
    uint _1918 = _1781 + 8u;
    float _1931 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1781].w)) * _576) * 0.949999988079071044921875);
    float _1932 = _1931 * _1931;
    float _1933 = cbLight._m0[_1781].x + _653;
    float _1934 = cbLight._m0[_1781].y + _654;
    float _1935 = cbLight._m0[_1781].z + _655;
    float _1939 = inversesqrt(dot(vec3(_1933, _1934, _1935), vec3(_1933, _1934, _1935)));
    float _1940 = _1939 * _1933;
    float _1941 = _1939 * _1934;
    float _1942 = _1939 * _1935;
    float _1943 = dot(vec3(_573, _574, _575), vec3(cbLight._m0[_1781].xyz));
    float _4040 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
    float _1946 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _4051 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _1947 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
    float _1948 = dot(vec3(_573, _574, _575), vec3(_1940, _1941, _1942));
    float _4062 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1951 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _1952 = dot(vec3(cbLight._m0[_1781].xyz), vec3(_1940, _1941, _1942));
    float _4073 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _1956 = _1932 * _1932;
    float _1960 = ((_1951 * _1951) * (_1956 + (-1.0))) + 1.0;
    float _1968 = exp2(log2(1.0 - (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0)))) * 5.0);
    float _1969 = 0.959999978542327880859375 - _723;
    float _1971 = 0.959999978542327880859375 - _724;
    float _1972 = 0.959999978542327880859375 - _725;
    float _1979 = 1.0 - _1932;
    float _1990 = (0.5 / (((_1947 * ((_1946 * _1979) + _1932)) + 9.9999999392252902907785028219223e-09) + (((_1947 * _1979) + _1932) * _1946))) * _1946;
    float _4084 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _1992 = (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_1956 / ((_1960 * _1960) * 3.141590118408203125));
    uint _2003 = _1781 + 9u;
    float _2014 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1819].w)) * _576) * 0.949999988079071044921875);
    float _2015 = _2014 * _2014;
    float _2016 = cbLight._m0[_1819].x + _653;
    float _2017 = cbLight._m0[_1819].y + _654;
    float _2018 = cbLight._m0[_1819].z + _655;
    float _2022 = inversesqrt(dot(vec3(_2016, _2017, _2018), vec3(_2016, _2017, _2018)));
    float _2023 = _2022 * _2016;
    float _2024 = _2022 * _2017;
    float _2025 = _2022 * _2018;
    float _2026 = dot(vec3(_573, _574, _575), vec3(cbLight._m0[_1819].xyz));
    float _4095 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    float _2029 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _2030 = dot(vec3(_573, _574, _575), vec3(_2023, _2024, _2025));
    float _4106 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2033 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _2034 = dot(vec3(cbLight._m0[_1819].xyz), vec3(_2023, _2024, _2025));
    float _4117 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2038 = _2015 * _2015;
    float _2042 = ((_2033 * _2033) * (_2038 + (-1.0))) + 1.0;
    float _2049 = exp2(log2(1.0 - (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0)))) * 5.0);
    float _2056 = 1.0 - _2015;
    float _2066 = (0.5 / (((_1947 * ((_2029 * _2056) + _2015)) + 9.9999999392252902907785028219223e-09) + (((_1947 * _2056) + _2015) * _2029))) * _2029;
    float _4128 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _2068 = (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_2038 / ((_2042 * _2042) * 3.141590118408203125));
    float _2078 = (((((_2049 * _1969) + _726) * cbLight._m0[_2003].x) * _2068) * _1804) + (((((_1968 * _1969) + _726) * cbLight._m0[_1918].x) * _1992) * _1815);
    float _2079 = (((((_2049 * _1971) + _728) * cbLight._m0[_2003].y) * _2068) * _1804) + (((((_1968 * _1971) + _728) * cbLight._m0[_1918].y) * _1992) * _1815);
    float _2080 = (((((_2049 * _1972) + _729) * cbLight._m0[_2003].z) * _2068) * _1804) + (((((_1968 * _1972) + _729) * cbLight._m0[_1918].z) * _1992) * _1815);
    float _2142;
    float _2144;
    float _2146;
    if (_1855)
    {
        _2142 = _2078;
        _2144 = _2079;
        _2146 = _2080;
    }
    else
    {
        uint _2148 = _1781 + 2u;
        uint _2152 = _1781 + 10u;
        float _2166 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2148].w)) * _576) * 0.949999988079071044921875);
        float _2167 = _2166 * _2166;
        float _2168 = cbLight._m0[_2148].x + _653;
        float _2169 = cbLight._m0[_2148].y + _654;
        float _2170 = cbLight._m0[_2148].z + _655;
        float _2174 = inversesqrt(dot(vec3(_2168, _2169, _2170), vec3(_2168, _2169, _2170)));
        float _2175 = _2174 * _2168;
        float _2176 = _2174 * _2169;
        float _2177 = _2174 * _2170;
        float _2178 = dot(vec3(_573, _574, _575), vec3(cbLight._m0[_2148].xyz));
        float _4139 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
        float _2181 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _2182 = dot(vec3(_573, _574, _575), vec3(_2175, _2176, _2177));
        float _4150 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        float _2185 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _2186 = dot(vec3(cbLight._m0[_2148].xyz), vec3(_2175, _2176, _2177));
        float _4161 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
        float _2190 = _2167 * _2167;
        float _2194 = ((_2185 * _2185) * (_2190 + (-1.0))) + 1.0;
        float _2201 = exp2(log2(1.0 - (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0)))) * 5.0);
        float _2208 = 1.0 - _2167;
        float _2218 = (0.5 / (((_1947 * ((_2181 * _2208) + _2167)) + 9.9999999392252902907785028219223e-09) + (((_1947 * _2208) + _2167) * _2181))) * _2181;
        float _4172 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        float _2220 = (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_2190 / ((_2194 * _2194) * 3.141590118408203125));
        float _2221 = isnan(1.0) ? _1796 : (isnan(_1796) ? 1.0 : min(_1796, 1.0));
        _2142 = (((((_2201 * _1969) + _726) * cbLight._m0[_2152].x) * _2220) * _2221) + _2078;
        _2144 = (((((_2201 * _1971) + _728) * cbLight._m0[_2152].y) * _2220) * _2221) + _2079;
        _2146 = (((((_2201 * _1972) + _729) * cbLight._m0[_2152].z) * _2220) * _2221) + _2080;
    }
    float _2256;
    float _2258;
    float _2260;
    if (_1873)
    {
        _2256 = _2142;
        _2258 = _2144;
        _2260 = _2146;
    }
    else
    {
        uint _2267 = _1781 + 3u;
        uint _2271 = _1781 + 11u;
        float _2285 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2267].w)) * _576) * 0.949999988079071044921875);
        float _2286 = _2285 * _2285;
        float _2287 = cbLight._m0[_2267].x + _653;
        float _2288 = cbLight._m0[_2267].y + _654;
        float _2289 = cbLight._m0[_2267].z + _655;
        float _2293 = inversesqrt(dot(vec3(_2287, _2288, _2289), vec3(_2287, _2288, _2289)));
        float _2294 = _2293 * _2287;
        float _2295 = _2293 * _2288;
        float _2296 = _2293 * _2289;
        float _2297 = dot(vec3(_573, _574, _575), vec3(cbLight._m0[_2267].xyz));
        float _4188 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2300 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _2301 = dot(vec3(_573, _574, _575), vec3(_2294, _2295, _2296));
        float _4199 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2304 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _2305 = dot(vec3(cbLight._m0[_2267].xyz), vec3(_2294, _2295, _2296));
        float _4210 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2309 = _2286 * _2286;
        float _2313 = ((_2304 * _2304) * (_2309 + (-1.0))) + 1.0;
        float _2320 = exp2(log2(1.0 - (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0)))) * 5.0);
        float _2327 = 1.0 - _2286;
        float _2337 = (0.5 / (((_1947 * ((_2300 * _2327) + _2286)) + 9.9999999392252902907785028219223e-09) + (((_1947 * _2327) + _2286) * _2300))) * _2300;
        float _4221 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
        float _2339 = (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_2309 / ((_2313 * _2313) * 3.141590118408203125));
        float _2340 = isnan(1.0) ? _1797 : (isnan(_1797) ? 1.0 : min(_1797, 1.0));
        _2256 = (((((_2320 * _1969) + _726) * cbLight._m0[_2271].x) * _2339) * _2340) + _2142;
        _2258 = (((((_2320 * _1971) + _728) * cbLight._m0[_2271].y) * _2339) * _2340) + _2144;
        _2260 = (((((_2320 * _1972) + _729) * cbLight._m0[_2271].z) * _2339) * _2340) + _2146;
    }
    float _2475;
    float _2477;
    float _2479;
    float _2481;
    float _2483;
    float _2485;
    if (_1779.y == 0u)
    {
        float _2415 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2416 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2415;
        float _2417 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2415;
        float _2418 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2415;
        uvec4 _2430 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2431 = _2430.x;
        uint _2442 = uint((float(_2430.y) * floor(float(uint(cbSceneParam._m0[85u].y * _662) / _2431))) + floor(float(uint(cbSceneParam._m0[85u].x * _661) / _2431)));
        float _2452 = (log2(_2418 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2453 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
        uint _2456 = uint(isnan(14.0) ? _2453 : (isnan(_2453) ? 14.0 : min(_2453, 14.0)));
        uvec4 _2461 = texelFetch(g_lightClusterGridBuffer, int(((_2456 << 2u) + (_2442 << 6u)) >> 2u));
        uint _2462 = _2461.x;
        uint _2463 = _2430.z;
        float _2563;
        float _2565;
        float _2567;
        float _2569;
        float _2571;
        float _2573;
        if (((((1u << ((_2463 >> 4u) & 15u)) + 4294967295u) & _2462) == 0u) || ((_2463 & 240u) == 0u))
        {
            _2563 = 0.0;
            _2565 = 0.0;
            _2567 = 0.0;
            _2569 = 0.0;
            _2571 = 0.0;
            _2573 = 0.0;
        }
        else
        {
            float _2564;
            float _2566;
            float _2568;
            float _2570;
            float _2572;
            float _2574;
            float _2708 = 0.0;
            float _2709 = 0.0;
            float _2710 = 0.0;
            float _2711 = 0.0;
            float _2712 = 0.0;
            float _2713 = 0.0;
            uint _2714 = 0u;
            uint _2723;
            bool _2724;
            for (;;)
            {
                _2723 = texelFetch(g_lightClassification, int((((_2456 << 5u) + (_2442 << 9u)) + (_2714 << 2u)) >> 2u)).x;
                _2724 = _2723 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2724)
                {
                    frontier_phi_61_pred = _2708;
                    frontier_phi_61_pred_1 = _2713;
                    frontier_phi_61_pred_2 = _2712;
                    frontier_phi_61_pred_3 = _2711;
                    frontier_phi_61_pred_4 = _2710;
                    frontier_phi_61_pred_5 = _2709;
                }
                else
                {
                    float _2832;
                    float _2833;
                    float _2834;
                    float _2835;
                    float _2836;
                    float _2837;
                    uint _2838;
                    _2832 = _2708;
                    _2833 = _2709;
                    _2834 = _2710;
                    _2835 = _2711;
                    _2836 = _2712;
                    _2837 = _2713;
                    _2838 = _2723;
                    float _2764;
                    float _2765;
                    float _2766;
                    float _2767;
                    float _2768;
                    float _2769;
                    for (;;)
                    {
                        uint _2842 = uint(findLSB(_2838)) + (_2714 << 5u);
                        uint _2839 = (_2838 + 4294967295u) & _2838;
                        uint _2844 = _2842 * 48u;
                        vec4 _2858 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2844)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 3u)).x));
                        uint _2864 = (_2842 * 48u) + 4u;
                        vec4 _2877 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2864)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 3u)).x));
                        uint _2883 = (_2842 * 48u) + 8u;
                        vec3 _2894 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2883)).x, texelFetch(g_PointLightRenderingBuffer, int(_2883 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2883 + 2u)).x));
                        float _2898 = _2858.x - _2416;
                        float _2899 = _2858.y - _2417;
                        float _2900 = _2858.z - _2418;
                        float _2901 = dot(vec3(_2898, _2899, _2900), vec3(_2898, _2899, _2900));
                        float _2904 = inversesqrt(_2901);
                        float _2905 = _2904 * _2898;
                        float _2906 = _2904 * _2899;
                        float _2907 = _2904 * _2900;
                        float _2908 = dot(vec3(_683, _686, _689), vec3(_2905, _2906, _2907));
                        float _2913 = 1.0 - (_2901 * _2858.w);
                        float _4247 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
                        float _2914 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
                        float _2915 = sqrt(_2901) * _2877.w;
                        float _2918 = 1.39999997615814208984375 / (_2915 + 1.39999997615814208984375);
                        float _2919 = _2918 * _2918;
                        float _2922 = ((1.0 - _2919) * _2908) + _2919;
                        float _2925 = _2915 * _2915;
                        float _2929 = ((isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0))) * _2914) / ((_2925 * 0.699999988079071044921875) + 1.0);
                        float _2933 = (-0.0) - _2416;
                        float _2934 = (-0.0) - _2417;
                        float _2935 = (-0.0) - _2418;
                        float _2939 = inversesqrt(dot(vec3(_2933, _2934, _2935), vec3(_2933, _2934, _2935)));
                        float _2940 = _2939 * _2933;
                        float _2941 = _2939 * _2934;
                        float _2942 = _2939 * _2935;
                        float _2950 = exp2(log2(1.0 / ((_2925 * 3.5) + 5.0)) * 0.25);
                        float _2951 = 1.0 - _758;
                        float _2958 = sqrt(1.0 - ((1.0 - (_2951 * _2951)) * (1.0 - (_2950 * _2950))));
                        float _2959 = _2958 * _2958;
                        float _2960 = _2959 * _2959;
                        float _2961 = _2940 + _2905;
                        float _2962 = _2941 + _2906;
                        float _2963 = _2942 + _2907;
                        float _2967 = inversesqrt(dot(vec3(_2961, _2962, _2963), vec3(_2961, _2962, _2963)));
                        float _2971 = dot(vec3(_683, _686, _689), vec3(_2940, _2941, _2942));
                        float _4263 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
                        float _2974 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
                        float _2975 = dot(vec3(_683, _686, _689), vec3(_2967 * _2961, _2967 * _2962, _2967 * _2963));
                        float _4274 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
                        float _2978 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
                        float _2982 = ((_2978 * _2978) * (_2960 + (-1.0))) + 1.0;
                        float _2983 = _2918 * _2959;
                        float _2984 = _2983 * _2983;
                        float _2987 = ((1.0 - _2984) * _2908) + _2984;
                        float _4285 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
                        float _2988 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
                        float _2989 = 1.0 - _2959;
                        float _2999 = (0.5 / (((_2988 * ((_2974 * _2989) + _2959)) + 9.9999999392252902907785028219223e-09) + (((_2988 * _2989) + _2959) * _2974))) * _2988;
                        float _4296 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
                        float _3010 = (((_2960 * 3.1415927410125732421875) * (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0)))) / ((_2982 * _2982) * ((_2925 * 2.1991131305694580078125) + 3.141590118408203125))) * _2914;
                        _2767 = (_2929 * _2877.x) + _2835;
                        _2768 = (_2929 * _2877.y) + _2836;
                        _2769 = (_2929 * _2877.z) + _2837;
                        _2764 = (_3010 * _2894.x) + _2832;
                        _2765 = (_3010 * _2894.y) + _2833;
                        _2766 = (_3010 * _2894.z) + _2834;
                        if (_2839 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2832 = _2764;
                            _2833 = _2765;
                            _2834 = _2766;
                            _2835 = _2767;
                            _2836 = _2768;
                            _2837 = _2769;
                            _2838 = _2839;
                        }
                    }
                    frontier_phi_61_pred = _2764;
                    frontier_phi_61_pred_1 = _2769;
                    frontier_phi_61_pred_2 = _2768;
                    frontier_phi_61_pred_3 = _2767;
                    frontier_phi_61_pred_4 = _2766;
                    frontier_phi_61_pred_5 = _2765;
                }
                _2564 = frontier_phi_61_pred;
                _2574 = frontier_phi_61_pred_1;
                _2572 = frontier_phi_61_pred_2;
                _2570 = frontier_phi_61_pred_3;
                _2568 = frontier_phi_61_pred_4;
                _2566 = frontier_phi_61_pred_5;
                uint _2715 = _2714 + 1u;
                if (_2715 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2708 = _2564;
                    _2709 = _2566;
                    _2710 = _2568;
                    _2711 = _2570;
                    _2712 = _2572;
                    _2713 = _2574;
                    _2714 = _2715;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2563 = _2564;
            _2565 = _2566;
            _2567 = _2568;
            _2569 = _2570;
            _2571 = _2572;
            _2573 = _2574;
        }
        uvec4 _2577 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2578 = _2577.z;
        uint _2580 = (_2578 >> 8u) & 15u;
        float _2676;
        float _2678;
        float _2680;
        float _2682;
        float _2684;
        float _2686;
        if (((4294967295u << _2580) & _2462) == 0u)
        {
            _2676 = _2563;
            _2678 = _2565;
            _2680 = _2567;
            _2682 = _2569;
            _2684 = _2571;
            _2686 = _2573;
        }
        else
        {
            float _2701 = inversesqrt(dot(vec3(_2416, _2417, _2418), vec3(_2416, _2417, _2418)));
            float _2702 = _2701 * _2416;
            float _2703 = _2701 * _2417;
            float _2704 = _2701 * _2418;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2580 < ((_2578 >> 12u) & 15u))
            {
                float _2677;
                float _2679;
                float _2681;
                float _2683;
                float _2685;
                float _2687;
                float _2815 = _2563;
                float _2816 = _2565;
                float _2817 = _2567;
                float _2818 = _2569;
                float _2819 = _2571;
                float _2820 = _2573;
                uint _2821 = _2580;
                uint _2830;
                bool _2831;
                for (;;)
                {
                    _2830 = texelFetch(g_lightClassification, int((((_2456 << 5u) + (_2442 << 9u)) + (_2821 << 2u)) >> 2u)).x;
                    _2831 = _2830 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2831)
                    {
                        frontier_phi_67_pred = _2818;
                        frontier_phi_67_pred_1 = _2819;
                        frontier_phi_67_pred_2 = _2820;
                        frontier_phi_67_pred_3 = _2817;
                        frontier_phi_67_pred_4 = _2816;
                        frontier_phi_67_pred_5 = _2815;
                    }
                    else
                    {
                        float _3015;
                        float _3016;
                        float _3017;
                        float _3018;
                        float _3019;
                        float _3020;
                        float _3308;
                        float _3309;
                        float _3310;
                        float _3311;
                        float _3312;
                        float _3313;
                        float _3028 = _2815;
                        float _3029 = _2816;
                        float _3030 = _2817;
                        float _3031 = _2818;
                        float _3032 = _2819;
                        float _3033 = _2820;
                        uint _3034 = _2830;
                        uint _3035;
                        vec4 _3060;
                        float _3061;
                        vec4 _3076;
                        vec3 _3088;
                        vec4 _3103;
                        vec4 _3118;
                        float _3164;
                        bool _3165;
                        for (;;)
                        {
                            uint _3045 = ((_2821 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3034));
                            _3035 = (_3034 + 4294967295u) & _3034;
                            uint _3047 = _3045 * 40u;
                            _3060 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3047)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 3u)).x));
                            _3061 = _3060.w;
                            uint _3063 = (_3045 * 40u) + 4u;
                            _3076 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3063)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 3u)).x));
                            uint _3078 = (_3045 * 40u) + 8u;
                            _3088 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3078)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 2u)).x));
                            uint _3090 = (_3045 * 40u) + 16u;
                            _3103 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3090)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 3u)).x));
                            uint _3105 = (_3045 * 40u) + 20u;
                            _3118 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 3u)).x));
                            uint _3120 = (_3045 * 40u) + 24u;
                            vec4 _3133 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3120)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 3u)).x));
                            uint _3139 = (_3045 * 40u) + 28u;
                            vec4 _3152 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 3u)).x));
                            _3164 = fma(_2418, _3152.z, fma(_2417, _3152.y, _3152.x * _2416)) + _3152.w;
                            _3165 = !((fma(_2418, _3133.z, fma(_2417, _3133.y, _3133.x * _2416)) + _3133.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3165)
                            {
                                float _3192 = _3060.x - _2416;
                                float _3193 = _3060.y - _2417;
                                float _3194 = _3060.z - _2418;
                                float _3195 = dot(vec3(_3192, _3193, _3194), vec3(_3192, _3193, _3194));
                                float _3198 = inversesqrt(_3195);
                                float _3199 = _3198 * _3192;
                                float _3200 = _3198 * _3193;
                                float _3201 = _3198 * _3194;
                                float _3205 = 1.0 - (_3195 / (_3061 * _3061));
                                float _4307 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                                float _3206 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
                                float _3210 = sqrt(_3195) * _3076.w;
                                float _3212 = 1.39999997615814208984375 / (_3210 + 1.39999997615814208984375);
                                float _3213 = _3212 * _3212;
                                float _3216 = ((1.0 - _3213) * dot(vec3(_3199, _3200, _3201), vec3(_683, _686, _689))) + _3213;
                                float _3219 = _3210 * _3210;
                                float _3223 = (fma(_2418, _3103.z, fma(_2417, _3103.y, _3103.x * _2416)) + _3103.w) / _3164;
                                float _3224 = (fma(_2418, _3118.z, fma(_2417, _3118.y, _3118.x * _2416)) + _3118.w) / _3164;
                                float _3228 = 1.0 - dot(vec2(_3223, _3224), vec2(_3223, _3224));
                                float _4323 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                                float _3229 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
                                float _3230 = _3229 * (((isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0))) * _3206) / ((_3219 * 0.699999988079071044921875) + 1.0));
                                float _3242 = exp2(log2(1.0 / ((_3219 * 3.5) + 5.0)) * 0.25);
                                float _3243 = 1.0 - _758;
                                float _3250 = sqrt(1.0 - ((1.0 - (_3243 * _3243)) * (1.0 - (_3242 * _3242))));
                                float _3251 = _3250 * _3250;
                                float _3252 = _3251 * _3251;
                                float _3253 = _3199 - _2702;
                                float _3254 = _3200 - _2703;
                                float _3255 = _3201 - _2704;
                                float _3259 = inversesqrt(dot(vec3(_3253, _3254, _3255), vec3(_3253, _3254, _3255)));
                                float _3263 = dot(vec3(_683, _686, _689), vec3((-0.0) - _2702, (-0.0) - _2703, (-0.0) - _2704));
                                float _4334 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                                float _3266 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
                                float _3267 = dot(vec3(_683, _686, _689), vec3(_3259 * _3253, _3259 * _3254, _3259 * _3255));
                                float _4345 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                                float _3270 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
                                float _3274 = ((_3270 * _3270) * (_3252 + (-1.0))) + 1.0;
                                float _3275 = _3212 * _3251;
                                float _3276 = _3275 * _3275;
                                float _3282 = ((1.0 - _3276) * dot(vec3(_683, _686, _689), vec3(_3199, _3200, _3201))) + _3276;
                                float _4356 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                                float _3283 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
                                float _3284 = 1.0 - _3251;
                                float _3294 = (0.5 / (((_3283 * ((_3266 * _3284) + _3251)) + 9.9999999392252902907785028219223e-09) + (((_3283 * _3284) + _3251) * _3266))) * _3283;
                                float _4367 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                                float _3304 = (_3229 * _3206) * (((_3252 * 3.1415927410125732421875) * (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0)))) / ((_3274 * _3274) * ((_3219 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3304 * _3088.x;
                                frontier_phi_73_pred_1 = _3304 * _3088.y;
                                frontier_phi_73_pred_2 = _3230 * _3076.z;
                                frontier_phi_73_pred_3 = _3230 * _3076.y;
                                frontier_phi_73_pred_4 = _3230 * _3076.x;
                                frontier_phi_73_pred_5 = _3304 * _3088.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3308 = frontier_phi_73_pred;
                            _3309 = frontier_phi_73_pred_1;
                            _3313 = frontier_phi_73_pred_2;
                            _3312 = frontier_phi_73_pred_3;
                            _3311 = frontier_phi_73_pred_4;
                            _3310 = frontier_phi_73_pred_5;
                            _3018 = _3311 + _3031;
                            _3019 = _3312 + _3032;
                            _3020 = _3313 + _3033;
                            _3015 = _3308 + _3028;
                            _3016 = _3309 + _3029;
                            _3017 = _3310 + _3030;
                            if (_3035 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3028 = _3015;
                                _3029 = _3016;
                                _3030 = _3017;
                                _3031 = _3018;
                                _3032 = _3019;
                                _3033 = _3020;
                                _3034 = _3035;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3018;
                        frontier_phi_67_pred_1 = _3019;
                        frontier_phi_67_pred_2 = _3020;
                        frontier_phi_67_pred_3 = _3017;
                        frontier_phi_67_pred_4 = _3016;
                        frontier_phi_67_pred_5 = _3015;
                    }
                    _2683 = frontier_phi_67_pred;
                    _2685 = frontier_phi_67_pred_1;
                    _2687 = frontier_phi_67_pred_2;
                    _2681 = frontier_phi_67_pred_3;
                    _2679 = frontier_phi_67_pred_4;
                    _2677 = frontier_phi_67_pred_5;
                    uint _2822 = _2821 + 1u;
                    if (_2822 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2815 = _2677;
                        _2816 = _2679;
                        _2817 = _2681;
                        _2818 = _2683;
                        _2819 = _2685;
                        _2820 = _2687;
                        _2821 = _2822;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2685;
                frontier_phi_55_56_ladder_1 = _2687;
                frontier_phi_55_56_ladder_2 = _2683;
                frontier_phi_55_56_ladder_3 = _2681;
                frontier_phi_55_56_ladder_4 = _2679;
                frontier_phi_55_56_ladder_5 = _2677;
            }
            else
            {
                frontier_phi_55_56_ladder = _2571;
                frontier_phi_55_56_ladder_1 = _2573;
                frontier_phi_55_56_ladder_2 = _2569;
                frontier_phi_55_56_ladder_3 = _2567;
                frontier_phi_55_56_ladder_4 = _2565;
                frontier_phi_55_56_ladder_5 = _2563;
            }
            _2676 = frontier_phi_55_56_ladder_5;
            _2678 = frontier_phi_55_56_ladder_4;
            _2680 = frontier_phi_55_56_ladder_3;
            _2682 = frontier_phi_55_56_ladder_2;
            _2684 = frontier_phi_55_56_ladder;
            _2686 = frontier_phi_55_56_ladder_1;
        }
        float _2691 = isnan(1.0) ? _742 : (isnan(_742) ? 1.0 : min(_742, 1.0));
        _2475 = (_2691 * _2682) + _1911;
        _2477 = (_2691 * _2684) + _1913;
        _2479 = (_2691 * _2686) + _1915;
        _2481 = ((_2676 * _726) * _2691) + _2256;
        _2483 = ((_2678 * _728) * _2691) + _2258;
        _2485 = ((_2680 * _729) * _2691) + _2260;
    }
    else
    {
        _2475 = _1911;
        _2477 = _1913;
        _2479 = _1915;
        _2481 = _2256;
        _2483 = _2258;
        _2485 = _2260;
    }
    float _4383 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _4394 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _4405 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    uint _2505 = _252 + 6u;
    float _2513 = _661 / cbSceneParam._m0[86u].x;
    float _2514 = _662 / cbSceneParam._m0[86u].y;
    vec4 _2528 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2513, _2514, (log2((isnan(cbSceneParam._m0[77u].w) ? _595 : (isnan(_595) ? cbSceneParam._m0[77u].w : min(_595, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2530 = _2528.x;
    float _2531 = _2528.y;
    float _2532 = _2528.z;
    float _2533 = _2528.w;
    float _2626;
    float _2628;
    float _2630;
    float _2632;
    if (_595 > cbSceneParam._m0[78u].w)
    {
        float _2588 = isnan(_595) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _595 : min(cbSceneParam._m0[80u].w, _595));
        float _2589 = _2588 / _595;
        float _2600 = _2589 * _646;
        float _2601 = _647 * _2589;
        float _2602 = (-0.0) - _2601;
        float _2604 = _2589 * _648;
        float _2606 = (cbSceneParam._m0[77u].w * _2602) / _2588;
        float _2607 = _2606 + cbSceneParam._m0[79u].w;
        float _2608 = cbSceneParam._m0[79u].w - _2601;
        float _2614 = sqrt(((_2600 * _2600) + (_2601 * _2601)) + (_2604 * _2604));
        float _2617 = (1.0 - (cbSceneParam._m0[77u].w / _2588)) * _2614;
        float _2622 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2624 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2777;
        if (abs((_2602 - _2606) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2777 = ((((_2607 > 0.0) ? exp2(_2622 * _2607) : (2.0 - exp2(_2624 * _2607))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2617;
        }
        else
        {
            float _2737 = 1.0 / cbSceneParam._m0[80u].x;
            float _2738 = isnan(_2608) ? _2607 : (isnan(_2607) ? _2608 : max(_2607, _2608));
            float _2739 = isnan(_2608) ? _2607 : (isnan(_2607) ? _2608 : min(_2607, _2608));
            float _2748 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : min(_2738, 0.0));
            float _2749 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : min(_2739, 0.0));
            _2777 = ((abs(_2614 / _2602) * cbSceneParam._m0[80u].y) * ((((_2748 - _2749) * 2.0) - ((exp2(_2622 * (isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0)))) - exp2(_2622 * (isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0))))) * _2737)) - ((exp2(_2624 * _2748) - exp2(_2624 * _2749)) * _2737))) + (_2617 * cbSceneParam._m0[80u].z);
        }
        vec4 _2779 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2513, _2514, 1.0), 0.0);
        float _2788 = exp2((_2777 * (-1.44269502162933349609375)) * (1.0 - _2779.w));
        float _2789 = log2(_2788);
        float _2805 = log2(_2533);
        _2626 = (exp2(_2805 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2789 * cbSceneParam._m0[78u].x)) * _2779.x) / cbSceneParam._m0[78u].x)) + _2530;
        _2628 = (exp2(_2805 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2789 * cbSceneParam._m0[78u].y)) * _2779.y) / cbSceneParam._m0[78u].y)) + _2531;
        _2630 = (exp2(_2805 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2789 * cbSceneParam._m0[78u].z)) * _2779.z) / cbSceneParam._m0[78u].z)) + _2532;
        _2632 = _2788 * _2533;
    }
    else
    {
        _2626 = _2530;
        _2628 = _2531;
        _2630 = _2532;
        _2632 = _2533;
    }
    float _2644 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2645 = _2644 == 3.0;
    float _2646 = log2(_2632);
    float _2653 = exp2(_2646 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_2475 + ((isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0))) * _742))) + ((_2481 + ((isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))) * _1550)) * cbPerFrame._m0[3u].x));
    float _2654 = exp2(_2646 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_2477 + ((isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0))) * _742))) + ((_2483 + ((isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))) * _1550)) * cbPerFrame._m0[3u].x));
    float _2655 = exp2(_2646 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * (_2479 + ((isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0))) * _742))) + ((_2485 + ((isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))) * _1550)) * cbPerFrame._m0[3u].x));
    float _2664 = (_2644 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2664 * (_2645 ? _2653 : (_2653 + (cbSceneParam._m0[72u].w * _2626)));
    SV_Target.y = _2664 * (_2645 ? _2654 : (_2654 + (cbSceneParam._m0[72u].w * _2628)));
    SV_Target.z = _2664 * (_2645 ? _2655 : (_2655 + (cbSceneParam._m0[72u].w * _2630)));
    SV_Target.w = cbInstanceData._m0[_2505].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2505].w;
}


