#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1367;
float _4029;
float _4030;
float _4031;
float _4032;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _238 = _237 * _229;
    float _239 = _237 * _230;
    float _240 = _237 * _231;
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = _244 * NORMAL.x;
    float _246 = _244 * NORMAL.y;
    float _247 = _244 * NORMAL.z;
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252 = _251 * TANGENT.x;
    float _253 = _251 * TANGENT.y;
    float _254 = _251 * TANGENT.z;
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _362 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _364 = _362.x;
    float _376 = dot(vec4(_364, _362.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _393 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_364 - _376) * cbMtdParam._m0[24u].y) + _376) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4041 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _394 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _401 = (_394 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _402 = (_394 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _403 = (_394 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _422 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _276) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _277) + cbTextureTilingScale._m0[14u].w));
    vec4 _442 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _459 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _461 = _459.x;
    float _462 = _459.y;
    float _463 = _459.z;
    float _472 = ((_442.z - _463) * _394) + _463;
    float _475 = ((((_442.x - _461) * _394) + _461) * 2.0) + (-1.0);
    float _477 = ((((_442.y - _462) * _394) + _462) * 2.0) + (-1.0);
    float _478 = dot(vec2(_475, _477), vec2(_475, _477));
    float _4052 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _483 = sqrt(1.0 - (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))));
    float _486 = fma(_483, _245, fma(_477, _252, _475 * _238));
    float _489 = fma(_483, _246, fma(_477, _253, _475 * _239));
    float _492 = fma(_483, _247, fma(_477, _254, _475 * _240));
    float _496 = inversesqrt(dot(vec3(_486, _489, _492), vec3(_486, _489, _492)));
    vec4 _512 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _538 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _540 = _538.x;
    float _541 = 1.0 - _540;
    float _547 = (cbMtdParam._m0[19u].x + dot(vec4(_496 * _486, _496 * _489, _496 * _492, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_540 - _541) * cbMtdParam._m0[24u].z) + _541) * cbMtdParam._m0[21u].z);
    float _4063 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _548 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _550 = (-0.0) - cbMtdParam._m0[24u].x;
    float _552 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _553 = isnan(1.0) ? _552 : (isnan(_552) ? 1.0 : min(_552, 1.0));
    float _560 = _548 - ((_548 * TEXCOORD_8.x) * _553);
    float _561 = _548 - ((_548 * TEXCOORD_8.y) * _553);
    float _562 = _548 - ((_548 * TEXCOORD_8.z) * _553);
    float _569 = (_560 * ((_422.x * cbMtdParam._m0[18u].x) - _401)) + _401;
    float _570 = (_561 * ((_422.y * cbMtdParam._m0[18u].y) - _402)) + _402;
    float _571 = (_562 * ((_422.z * cbMtdParam._m0[18u].z) - _403)) + _403;
    vec4 _583 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _585 = _583.x;
    float _586 = 1.0 - _585;
    float _614 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_585 - _586) * cbMtdParam._m0[24u].w) + _586) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4084 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _615 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _623 = ((((cbMtdParam._m0[10u].x - _569) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _615) + _569;
    float _624 = ((((cbMtdParam._m0[10u].y - _570) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _615) + _570;
    float _625 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _571)) * _615) + _571;
    vec4 _651 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _653 = _651.x;
    float _671 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _276) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _277) + cbTextureTilingScale._m0[9u].w)).x - _653) * _394) + _653;
    float _675 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _671) * cbMtdParam._m0[19u].z) + _671;
    float _677 = _675 - (_675 * _560);
    float _679 = _677 - (_677 * _615);
    vec4 _693 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _700 = (_693.x * 2.0) + (-1.0);
    float _701 = (_693.y * 2.0) + (-1.0);
    float _702 = dot(vec2(_700, _701), vec2(_700, _701));
    float _4095 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _710 = ((_693.z - _472) * _560) + _472;
    float _713 = ((cbMtdParam._m0[23u].y - _710) * _615) + _710;
    vec4 _732 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _738 = (_732.x * 2.0) + (-1.0);
    float _739 = (_732.y * 2.0) + (-1.0);
    float _740 = dot(vec2(_738, _739), vec2(_738, _739));
    float _4106 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _755 = ((sqrt(1.0 - (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0)))) - _483) * _562) + _483;
    float _758 = (((_700 - _475) * _560) + _475) + (cbMtdParam._m0[21u].x * _475);
    float _759 = (((_701 - _477) * _561) + _477) + (cbMtdParam._m0[21u].x * _477);
    float _770 = (((_738 - _758) + (_758 * cbMtdParam._m0[22u].z)) * _615) + _758;
    float _771 = (((_739 - _759) + (_759 * cbMtdParam._m0[22u].z)) * _615) + _759;
    float _772 = (_615 * (sqrt(1.0 - (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0)))) - _755)) + _755;
    float _774 = cbMtdParam._m0[22u].x + _512.w;
    float _777 = fma(_772, _245, fma(_771, _252, _770 * _238));
    float _780 = fma(_772, _246, fma(_771, _253, _770 * _239));
    float _783 = fma(_772, _247, fma(_771, _254, _770 * _240));
    float _787 = inversesqrt(dot(vec3(_777, _780, _783), vec3(_777, _780, _783)));
    float _788 = _787 * _777;
    float _789 = _787 * _780;
    float _790 = _787 * _783;
    float _4117 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _791 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _4128 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _4139 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _4150 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _4161 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _4172 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _796 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
    float _810 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _850 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _860 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _850);
    float _861 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _850);
    float _862 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _850);
    float _866 = inversesqrt(dot(vec3(_860, _861, _862), vec3(_860, _861, _862)));
    float _867 = _860 * _866;
    float _868 = _861 * _866;
    float _869 = _862 * _866;
    vec4 _874 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _876 = _874.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1048 = sqrt(((_860 * _860) + (_861 * _861)) + (_862 * _862));
        float _1054 = (cbMatDynParam._m0[5u].x * _1048) + cbMatDynParam._m0[5u].y;
        float _4183 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1059 = (cbMatDynParam._m0[5u].z * _1048) + cbMatDynParam._m0[5u].w;
        float _4194 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) - _1055)) + _1055) < ((_876 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _887 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _888 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _906 = fma(_790, cbSceneParam._m0[5u].z, fma(_789, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _788));
    float _909 = fma(_790, cbSceneParam._m0[6u].z, fma(_789, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _788));
    float _912 = fma(_790, cbSceneParam._m0[7u].z, fma(_789, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _788));
    uint _925 = _257 + 9u;
    uint _926 = _925 + uint(cbMatDynParam._m0[0u].w);
    float _932 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0)))) * cbInstanceData._m0[_926].x;
    float _933 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0)))) * cbInstanceData._m0[_926].y;
    float _934 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0)))) * cbInstanceData._m0[_926].z;
    float _4205 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _935 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
    float _4216 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _936 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
    float _4227 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _937 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
    float _938 = 1.0 - _796;
    float _939 = _935 * _938;
    float _940 = _936 * _938;
    float _941 = _937 * _938;
    float _946 = (_935 + (-0.039999999105930328369140625)) * _796;
    float _947 = (_936 + (-0.039999999105930328369140625)) * _796;
    float _948 = (_937 + (-0.039999999105930328369140625)) * _796;
    float _949 = _946 + 0.039999999105930328369140625;
    float _951 = _947 + 0.039999999105930328369140625;
    float _952 = _948 + 0.039999999105930328369140625;
    vec4 _961 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _887, cbSceneParam._m0[86u].y * _888));
    float _965 = ((isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * TEXCOORD_5.w) * _961.x;
    float _966 = dot(vec3(_788, _789, _790), vec3(_867, _868, _869));
    float _969 = _966 * 2.0;
    float _973 = (_969 * _788) - _867;
    float _974 = (_969 * _789) - _868;
    float _975 = (_969 * _790) - _869;
    float _979 = abs(dot(vec3(_867, _868, _869), vec3(_788, _789, _790)));
    float _4238 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _981 = sqrt(_791);
    float _994 = exp2((_981 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_981 * 3.0));
    float _1000 = (1.0 - _994) * ((_981 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1001 = _994 * _981;
    float _1029 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1033 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1037 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1366;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1091 = fma(_1037, cbModelParam._m0[26u].z, fma(_1033, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1029));
        float _1095 = fma(_1037, cbModelParam._m0[27u].z, fma(_1033, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1029));
        float _1099 = fma(_1037, cbModelParam._m0[28u].z, fma(_1033, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1029));
        float _1124 = _1029 + _788;
        float _1125 = _1033 + _789;
        float _1126 = _1037 + _790;
        float _1136 = fma(_1126, cbModelParam._m0[26u].z, fma(_1125, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1124)) - _1091;
        float _1137 = fma(_1126, cbModelParam._m0[27u].z, fma(_1125, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1124)) - _1095;
        float _1138 = fma(_1126, cbModelParam._m0[28u].z, fma(_1125, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1124)) - _1099;
        float _1142 = inversesqrt(dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138)));
        float _1155 = ((_1142 * _1136) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1091 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1156 = ((_1142 * _1137) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1095 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1157 = ((_1142 * _1138) / cbModelParam._m0[34u].z) + ((((((_1099 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        float _1194 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1160.x + (-0.5));
        float _1196 = _1194 * (_1160.y + (-0.5));
        float _1197 = _1194 * (_1160.z + (-0.5));
        float _1204 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1167.x + (-0.5));
        float _1206 = _1204 * (_1167.y + (-0.5));
        float _1207 = _1204 * (_1167.z + (-0.5));
        float _1214 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1174.x + (-0.5));
        float _1216 = _1214 * (_1174.y + (-0.5));
        float _1217 = _1214 * (_1174.z + (-0.5));
        float _1224 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1181.x + (-0.5));
        float _1226 = _1224 * (_1181.y + (-0.5));
        float _1227 = _1224 * (_1181.z + (-0.5));
        float _1228 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1231 = _1195 * 0.5;
        float _1232 = _1205 * 0.5;
        float _1233 = _1215 * 0.5;
        float _1234 = dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233));
        float _1239 = (_1234 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1234);
        float _1248 = (dot(vec3(_788, _789, _790), vec3(_1239 * _1231, _1239 * _1232, _1239 * _1233)) + 1.0) * 0.5;
        float _4264 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1258 = sqrt(((_1232 * _1232) + (_1231 * _1231)) + (_1233 * _1233)) / (_1228 + 9.9999997473787516355514526367188e-06);
        float _4275 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _1260 = _1259 * 2.0;
        float _1264 = (1.0 - _1259) / (_1259 + 1.0);
        float _4286 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1274 = ((((1.0 - _1265) * (_1260 + 2.0)) * exp2(log2(isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_1260 + 1.0))) + _1265) * _1228;
        float _1275 = _1196 * 0.5;
        float _1276 = _1206 * 0.5;
        float _1277 = _1216 * 0.5;
        float _1278 = dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277));
        float _1283 = (_1278 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1278);
        float _1291 = (dot(vec3(_788, _789, _790), vec3(_1283 * _1275, _1283 * _1276, _1283 * _1277)) + 1.0) * 0.5;
        float _4297 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1300 = sqrt(((_1276 * _1276) + (_1275 * _1275)) + (_1277 * _1277)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _4308 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _1302 = _1301 * 2.0;
        float _1306 = (1.0 - _1301) / (_1301 + 1.0);
        float _4319 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _1316 = ((((1.0 - _1307) * (_1302 + 2.0)) * exp2(log2(isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_1302 + 1.0))) + _1307) * _1229;
        float _1317 = _1197 * 0.5;
        float _1318 = _1207 * 0.5;
        float _1319 = _1217 * 0.5;
        float _1320 = dot(vec3(_1317, _1318, _1319), vec3(_1317, _1318, _1319));
        float _1325 = (_1320 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1320);
        float _1333 = (dot(vec3(_788, _789, _790), vec3(_1325 * _1317, _1325 * _1318, _1325 * _1319)) + 1.0) * 0.5;
        float _4330 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1342 = sqrt(((_1318 * _1318) + (_1317 * _1317)) + (_1319 * _1319)) / (_1230 + 9.9999997473787516355514526367188e-06);
        float _4341 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _1344 = _1343 * 2.0;
        float _1348 = (1.0 - _1343) / (_1343 + 1.0);
        float _4352 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _1358 = ((((1.0 - _1349) * (_1344 + 2.0)) * exp2(log2(isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_1344 + 1.0))) + _1349) * _1230;
        _1366 = _1197;
        _1368 = _1196;
        _1369 = _1195;
        _1370 = _1207;
        _1371 = _1206;
        _1372 = _1205;
        _1373 = _1217;
        _1374 = _1216;
        _1375 = _1215;
        _1376 = _1230;
        _1377 = _1229;
        _1378 = _1228;
        _1379 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)));
        _1380 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)));
        _1381 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)));
    }
    else
    {
        _1366 = _1367;
        _1368 = _1367;
        _1369 = _1367;
        _1370 = _1367;
        _1371 = _1367;
        _1372 = _1367;
        _1373 = _1367;
        _1374 = _1367;
        _1375 = _1367;
        _1376 = _1367;
        _1377 = _1367;
        _1378 = _1367;
        _1379 = 0.0;
        _1380 = 0.0;
        _1381 = 0.0;
    }
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1409 = fma(_1037, cbModelParam._m0[30u].z, fma(_1033, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1029));
        float _1413 = fma(_1037, cbModelParam._m0[31u].z, fma(_1033, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1029));
        float _1417 = fma(_1037, cbModelParam._m0[32u].z, fma(_1033, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1029));
        float _1440 = _1029 + _788;
        float _1441 = _1033 + _789;
        float _1442 = _1037 + _790;
        float _1452 = fma(_1442, cbModelParam._m0[30u].z, fma(_1441, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1440)) - _1409;
        float _1453 = fma(_1442, cbModelParam._m0[31u].z, fma(_1441, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1440)) - _1413;
        float _1454 = fma(_1442, cbModelParam._m0[32u].z, fma(_1441, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1440)) - _1417;
        float _1458 = inversesqrt(dot(vec3(_1452, _1453, _1454), vec3(_1452, _1453, _1454)));
        float _1471 = ((_1458 * _1452) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1409 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1472 = ((_1458 * _1453) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1413 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1473 = ((_1458 * _1454) / cbModelParam._m0[35u].z) + ((((((_1417 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1475 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1471, _1472, _1473), 0.0);
        vec4 _1482 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1471, _1472, _1473), 0.0);
        vec4 _1489 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1471, _1472, _1473), 0.0);
        vec4 _1496 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1471, _1472, _1473), 0.0);
        float _1508 = exp2((_1475.w + (-0.5)) * 20.0) * 2.0;
        float _1509 = _1508 * (_1475.x + (-0.5));
        float _1510 = _1508 * (_1475.y + (-0.5));
        float _1511 = _1508 * (_1475.z + (-0.5));
        float _1518 = exp2((_1482.w + (-0.5)) * 20.0) * 2.0;
        float _1519 = _1518 * (_1482.x + (-0.5));
        float _1520 = _1518 * (_1482.y + (-0.5));
        float _1521 = _1518 * (_1482.z + (-0.5));
        float _1528 = exp2((_1489.w + (-0.5)) * 20.0) * 2.0;
        float _1529 = _1528 * (_1489.x + (-0.5));
        float _1530 = _1528 * (_1489.y + (-0.5));
        float _1531 = _1528 * (_1489.z + (-0.5));
        float _1538 = exp2((_1496.w + (-0.5)) * 20.0) * 2.0;
        float _1539 = _1538 * (_1496.x + (-0.5));
        float _1540 = _1538 * (_1496.y + (-0.5));
        float _1541 = _1538 * (_1496.z + (-0.5));
        float _1542 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1543 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1544 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1545 = _1509 * 0.5;
        float _1546 = _1519 * 0.5;
        float _1547 = _1529 * 0.5;
        float _1548 = dot(vec3(_1545, _1546, _1547), vec3(_1545, _1546, _1547));
        float _1553 = (_1548 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1548);
        float _1561 = (dot(vec3(_788, _789, _790), vec3(_1553 * _1545, _1553 * _1546, _1553 * _1547)) + 1.0) * 0.5;
        float _4393 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1570 = sqrt(((_1546 * _1546) + (_1545 * _1545)) + (_1547 * _1547)) / (_1542 + 9.9999997473787516355514526367188e-06);
        float _4404 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _1572 = _1571 * 2.0;
        float _1576 = (1.0 - _1571) / (_1571 + 1.0);
        float _4415 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _1586 = ((((1.0 - _1577) * (_1572 + 2.0)) * exp2(log2(isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * (_1572 + 1.0))) + _1577) * _1542;
        float _1587 = _1510 * 0.5;
        float _1588 = _1520 * 0.5;
        float _1589 = _1530 * 0.5;
        float _1590 = dot(vec3(_1587, _1588, _1589), vec3(_1587, _1588, _1589));
        float _1595 = (_1590 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1590);
        float _1603 = (dot(vec3(_788, _789, _790), vec3(_1595 * _1587, _1595 * _1588, _1595 * _1589)) + 1.0) * 0.5;
        float _4426 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1612 = sqrt(((_1588 * _1588) + (_1587 * _1587)) + (_1589 * _1589)) / (_1543 + 9.9999997473787516355514526367188e-06);
        float _4437 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _1614 = _1613 * 2.0;
        float _1618 = (1.0 - _1613) / (_1613 + 1.0);
        float _4448 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _1628 = ((((1.0 - _1619) * (_1614 + 2.0)) * exp2(log2(isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0))) * (_1614 + 1.0))) + _1619) * _1543;
        float _1629 = _1511 * 0.5;
        float _1630 = _1521 * 0.5;
        float _1631 = _1531 * 0.5;
        float _1632 = dot(vec3(_1629, _1630, _1631), vec3(_1629, _1630, _1631));
        float _1637 = (_1632 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1632);
        float _1645 = (dot(vec3(_788, _789, _790), vec3(_1637 * _1629, _1637 * _1630, _1637 * _1631)) + 1.0) * 0.5;
        float _4459 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1654 = sqrt(((_1630 * _1630) + (_1629 * _1629)) + (_1631 * _1631)) / (_1544 + 9.9999997473787516355514526367188e-06);
        float _4470 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _1656 = _1655 * 2.0;
        float _1660 = (1.0 - _1655) / (_1655 + 1.0);
        float _4481 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
        float _1670 = ((((1.0 - _1661) * (_1656 + 2.0)) * exp2(log2(isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_1656 + 1.0))) + _1661) * _1544;
        _1678 = _1511;
        _1679 = _1510;
        _1680 = _1509;
        _1681 = _1521;
        _1682 = _1520;
        _1683 = _1519;
        _1684 = _1531;
        _1685 = _1530;
        _1686 = _1529;
        _1687 = _1544;
        _1688 = _1543;
        _1689 = _1542;
        _1690 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)));
        _1691 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)));
        _1692 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)));
    }
    else
    {
        _1678 = _1367;
        _1679 = _1367;
        _1680 = _1367;
        _1681 = _1367;
        _1682 = _1367;
        _1683 = _1367;
        _1684 = _1367;
        _1685 = _1367;
        _1686 = _1367;
        _1687 = _1367;
        _1688 = _1367;
        _1689 = _1367;
        _1690 = 0.0;
        _1691 = 0.0;
        _1692 = 0.0;
    }
    float _1702 = (cbModelParam._m0[1u].x * (_1690 - _1379)) + _1379;
    float _1703 = (cbModelParam._m0[1u].x * (_1691 - _1380)) + _1380;
    float _1704 = (cbModelParam._m0[1u].x * (_1692 - _1381)) + _1381;
    float _1725 = fma(_1704, cbSceneParam._m0[89u].z, fma(_1703, cbSceneParam._m0[89u].y, _1702 * cbSceneParam._m0[89u].x));
    float _1728 = fma(_1704, cbSceneParam._m0[90u].z, fma(_1703, cbSceneParam._m0[90u].y, _1702 * cbSceneParam._m0[90u].x));
    float _1731 = fma(_1704, cbSceneParam._m0[91u].z, fma(_1703, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1702));
    float _1746 = _973 * 0.5;
    float _1747 = _974 * 0.5;
    float _1748 = _975 * 0.5;
    float _1749 = dot(vec4(_1746, _1747, _1748, 1.0), vec4(_1680, _1683, _1686, _1689));
    float _1752 = dot(vec4(_1746, _1747, _1748, 1.0), vec4(_1679, _1682, _1685, _1688));
    float _1755 = dot(vec4(_1746, _1747, _1748, 1.0), vec4(_1678, _1681, _1684, _1687));
    float _1789;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1762 = dot(vec4(_1746, _1747, _1748, 1.0), vec4(_1366, _1370, _1373, _1376));
        float _1766 = dot(vec4(_1746, _1747, _1748, 1.0), vec4(_1368, _1371, _1374, _1377));
        float _1770 = dot(vec4(_1746, _1747, _1748, 1.0), vec4(_1369, _1372, _1375, _1378));
        float _1777 = dot(vec4(cbModelParam._m0[39u]), vec4(_1746, _1747, _1748, 1.0));
        _1789 = dot(vec3(isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0)), isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0)), isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1777) ? 0.0 : (isnan(0.0) ? _1777 : max(0.0, _1777))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1789 = 1.0;
    }
    float _1800;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1791 = dot(vec4(cbModelParam._m0[40u]), vec4(_1746, _1747, _1748, 1.0));
        _1800 = dot(vec3(isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)), isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0)), isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1791) ? 0.0 : (isnan(0.0) ? _1791 : max(0.0, _1791))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1800 = 1.0;
    }
    float _1804 = (_1800 * cbModelParam._m0[1u].x) + (_1789 * (1.0 - cbModelParam._m0[1u].x));
    float _1814 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _791);
    float _1815 = isnan(_1814) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1814 : min(cbModelParam._m0[25u].z, _1814));
    float _1895;
    float _1897;
    float _1899;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1862 = fma(_1037, cbModelParam._m0[13u].z, fma(_1033, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1029)) + cbModelParam._m0[13u].w;
        float _1866 = fma(_1037, cbModelParam._m0[14u].z, fma(_1033, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1029)) + cbModelParam._m0[14u].w;
        float _1870 = fma(_1037, cbModelParam._m0[15u].z, fma(_1033, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1029)) + cbModelParam._m0[15u].w;
        float _1873 = fma(_975, cbModelParam._m0[13u].z, fma(_974, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _973));
        float _1876 = fma(_975, cbModelParam._m0[14u].z, fma(_974, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _973));
        float _1879 = fma(_975, cbModelParam._m0[15u].z, fma(_974, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _973));
        float _1907;
        if (_1873 > 0.0)
        {
            _1907 = abs((1.0 - _1862) / _1873);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1862 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1907 = frontier_phi_17_15_ladder;
        }
        float _2078;
        if (_1876 > 0.0)
        {
            _2078 = abs((1.0 - _1866) / _1876);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1876 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1866 + 1.0) / _1876);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2078 = frontier_phi_26_22_ladder;
        }
        float _2373;
        if (_1879 > 0.0)
        {
            _2373 = abs((1.0 - _1870) / _1879);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1879 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1870 + 1.0) / _1879);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2373 = frontier_phi_38_33_ladder;
        }
        float _2375 = isnan(_2078) ? _1907 : (isnan(_1907) ? _2078 : min(_1907, _2078));
        float _2376 = isnan(_2373) ? _2375 : (isnan(_2375) ? _2373 : min(_2375, _2373));
        float _2380 = (_2376 * _1873) + _1862;
        float _2381 = (_2376 * _1876) + _1866;
        float _2382 = (_2376 * _1879) + _1870;
        float _2383 = _2376 * 9.9999997473787516355514526367188e-05;
        float _2385 = (-1.0) - _2383;
        float _2387 = _2383 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2382 > _2387) || ((_2382 < _2385) || ((_2381 > _2387) || ((_2381 < _2385) || ((_2380 < _2385) || (_2380 > _2387))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2527 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2382, cbModelParam._m0[9u].z, fma(_2381, cbModelParam._m0[9u].y, _2380 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2382, cbModelParam._m0[10u].z, fma(_2381, cbModelParam._m0[10u].y, _2380 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2382, cbModelParam._m0[11u].z, fma(_2381, cbModelParam._m0[11u].y, _2380 * cbModelParam._m0[11u].x))), _1815);
            frontier_phi_16_38_ladder = _2527.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2527.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2527.x * cbModelParam._m0[1u].y;
        }
        _1895 = frontier_phi_16_38_ladder_2;
        _1897 = frontier_phi_16_38_ladder_1;
        _1899 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1883 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_973, _974, _975), _1815);
        _1895 = _1883.x * cbModelParam._m0[1u].y;
        _1897 = _1883.y * cbModelParam._m0[1u].y;
        _1899 = _1883.z * cbModelParam._m0[1u].y;
    }
    float _1903 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _791);
    float _1904 = isnan(_1903) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1903 : min(cbModelParam._m0[25u].w, _1903));
    float _1993;
    float _1995;
    float _1997;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1957 = fma(_1037, cbModelParam._m0[21u].z, fma(_1033, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1029)) + cbModelParam._m0[21u].w;
        float _1961 = fma(_1037, cbModelParam._m0[22u].z, fma(_1033, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1029)) + cbModelParam._m0[22u].w;
        float _1965 = fma(_1037, cbModelParam._m0[23u].z, fma(_1033, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1029)) + cbModelParam._m0[23u].w;
        float _1968 = fma(_975, cbModelParam._m0[21u].z, fma(_974, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _973));
        float _1971 = fma(_975, cbModelParam._m0[22u].z, fma(_974, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _973));
        float _1974 = fma(_975, cbModelParam._m0[23u].z, fma(_974, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _973));
        float _2083;
        if (_1968 > 0.0)
        {
            _2083 = abs((1.0 - _1957) / _1968);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1968 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1957 + 1.0) / _1968);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2083 = frontier_phi_28_24_ladder;
        }
        float _2400;
        if (_1971 > 0.0)
        {
            _2400 = abs((1.0 - _1961) / _1971);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1971 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1961 + 1.0) / _1971);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2400 = frontier_phi_40_35_ladder;
        }
        float _2738;
        if (_1974 > 0.0)
        {
            _2738 = abs((1.0 - _1965) / _1974);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1974 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1965 + 1.0) / _1974);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2738 = frontier_phi_50_47_ladder;
        }
        float _2740 = isnan(_2400) ? _2083 : (isnan(_2083) ? _2400 : min(_2083, _2400));
        float _2741 = isnan(_2738) ? _2740 : (isnan(_2740) ? _2738 : min(_2740, _2738));
        float _2745 = (_2741 * _1968) + _1957;
        float _2746 = (_2741 * _1971) + _1961;
        float _2747 = (_2741 * _1974) + _1965;
        float _2748 = _2741 * 9.9999997473787516355514526367188e-05;
        float _2749 = (-1.0) - _2748;
        float _2751 = _2748 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2747 > _2751) || ((_2747 < _2749) || ((_2746 > _2751) || ((_2746 < _2749) || ((_2745 < _2749) || (_2745 > _2751))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2869 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2747, cbModelParam._m0[17u].z, fma(_2746, cbModelParam._m0[17u].y, _2745 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2747, cbModelParam._m0[18u].z, fma(_2746, cbModelParam._m0[18u].y, _2745 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2747, cbModelParam._m0[19u].z, fma(_2746, cbModelParam._m0[19u].y, _2745 * cbModelParam._m0[19u].x))), _1904);
            frontier_phi_25_50_ladder = _2869.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2869.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2869.x * cbModelParam._m0[1u].z;
        }
        _1993 = frontier_phi_25_50_ladder_2;
        _1995 = frontier_phi_25_50_ladder_1;
        _1997 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1977 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_973, _974, _975), _1904);
        _1993 = _1977.x * cbModelParam._m0[1u].z;
        _1995 = _1977.y * cbModelParam._m0[1u].z;
        _1997 = _1977.z * cbModelParam._m0[1u].z;
    }
    float _2010 = (((_1000 * _949) + _1001) * _965) * ((cbModelParam._m0[1u].w * (_1993 - _1895)) + _1895);
    float _2012 = (((_1000 * _951) + _1001) * _965) * ((cbModelParam._m0[1u].w * (_1995 - _1897)) + _1897);
    float _2014 = (((_1000 * _952) + _1001) * _965) * ((cbModelParam._m0[1u].w * (_1997 - _1899)) + _1899);
    float _2017 = fma(_2014, cbSceneParam._m0[89u].z, fma(_2012, cbSceneParam._m0[89u].y, _2010 * cbSceneParam._m0[89u].x));
    float _2020 = fma(_2014, cbSceneParam._m0[90u].z, fma(_2012, cbSceneParam._m0[90u].y, _2010 * cbSceneParam._m0[90u].x));
    float _2023 = fma(_2014, cbSceneParam._m0[91u].z, fma(_2012, cbSceneParam._m0[91u].y, _2010 * cbSceneParam._m0[91u].x));
    float _2057 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2061 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2065 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2069 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2070 = _2057 / _2069;
    float _2071 = _2061 / _2069;
    float _2072 = _2065 / _2069;
    float _2219;
    float _2220;
    float _2221;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2099 = ((uint(_2072 > cbSceneParam._m0[59u].y) + uint(_2072 > cbSceneParam._m0[59u].x)) + uint(_2072 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2100 = _2099 + 43u;
        uint _2108 = _2099 + 44u;
        uint _2116 = _2099 + 45u;
        uint _2124 = _2099 + 46u;
        float _2135 = fma(_2069, cbSceneParam._m0[_2100].w, fma(_2065, cbSceneParam._m0[_2100].z, fma(_2061, cbSceneParam._m0[_2100].y, _2057 * cbSceneParam._m0[_2100].x)));
        float _2139 = fma(_2069, cbSceneParam._m0[_2108].w, fma(_2065, cbSceneParam._m0[_2108].z, fma(_2061, cbSceneParam._m0[_2108].y, _2057 * cbSceneParam._m0[_2108].x)));
        float _2147 = fma(_2069, cbSceneParam._m0[_2124].w, fma(_2065, cbSceneParam._m0[_2124].z, fma(_2061, cbSceneParam._m0[_2124].y, _2057 * cbSceneParam._m0[_2124].x)));
        float _2152 = cbSceneParam._m0[33u].z * _2147;
        float _2154 = cbSceneParam._m0[33u].w * _2147;
        float _2157 = fma(_2069, cbSceneParam._m0[_2116].w, fma(_2065, cbSceneParam._m0[_2116].z, fma(_2061, cbSceneParam._m0[_2116].y, _2057 * cbSceneParam._m0[_2116].x))) / _2147;
        float _2205 = (cbSceneParam._m0[33u].x - sqrt(((_2071 * _2071) + (_2070 * _2070)) + (_2072 * _2072))) * cbSceneParam._m0[33u].y;
        float _4607 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
        float _2212 = (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2152 + _2135) / _2147, (_2154 + _2139) / _2147), _2157), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2154 + _2135) / _2147, (_2139 - _2152) / _2147), _2157), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2135 - _2152) / _2147, (_2139 - _2154) / _2147), _2157), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2135 - _2154) / _2147, (_2152 + _2139) / _2147), _2157), 0.0)).x), vec4(0.25)));
        _2219 = 1.0 - (_2212 * cbSceneParam._m0[34u].x);
        _2220 = 1.0 - (_2212 * cbSceneParam._m0[34u].y);
        _2221 = 1.0 - (_2212 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2219 = 1.0;
        _2220 = 1.0;
        _2221 = 1.0;
    }
    float _2285;
    float _2287;
    float _2289;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2273 = fma(_2069, cbSceneParam._m0[63u].w, fma(_2065, cbSceneParam._m0[63u].z, fma(_2061, cbSceneParam._m0[63u].y, _2057 * cbSceneParam._m0[63u].x)));
        float _2274 = fma(_2069, cbSceneParam._m0[60u].w, fma(_2065, cbSceneParam._m0[60u].z, fma(_2061, cbSceneParam._m0[60u].y, _2057 * cbSceneParam._m0[60u].x))) / _2273;
        float _2275 = fma(_2069, cbSceneParam._m0[61u].w, fma(_2065, cbSceneParam._m0[61u].z, fma(_2061, cbSceneParam._m0[61u].y, _2057 * cbSceneParam._m0[61u].x))) / _2273;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2274 >= cbSceneParam._m0[64u].x) && (_2275 >= cbSceneParam._m0[64u].y)) && (_2274 <= cbSceneParam._m0[64u].z)) && (_2275 <= cbSceneParam._m0[64u].w))
        {
            float _2413 = fma(_2069, cbSceneParam._m0[62u].w, fma(_2065, cbSceneParam._m0[62u].z, fma(_2061, cbSceneParam._m0[62u].y, _2057 * cbSceneParam._m0[62u].x))) / _2273;
            float _2417 = isnan(cbSceneParam._m0[41u].w) ? _2413 : (isnan(_2413) ? cbSceneParam._m0[41u].w : max(_2413, cbSceneParam._m0[41u].w));
            float _2460 = (cbSceneParam._m0[33u].x - sqrt(((_2071 * _2071) + (_2070 * _2070)) + (_2072 * _2072))) * cbSceneParam._m0[33u].y;
            float _4623 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
            float _2467 = (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2274, cbSceneParam._m0[33u].w + _2275), _2417), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2274, _2275 - cbSceneParam._m0[33u].z), _2417), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2274 - cbSceneParam._m0[33u].z, _2275 - cbSceneParam._m0[33u].w), _2417), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2274 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2275), _2417), 0.0)).x), vec4(0.25)));
            float _2471 = 1.0 - (_2467 * cbSceneParam._m0[34u].x);
            float _2472 = 1.0 - (_2467 * cbSceneParam._m0[34u].y);
            float _2473 = 1.0 - (_2467 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2473) ? _2221 : (isnan(_2221) ? _2473 : min(_2221, _2473));
            frontier_phi_37_36_ladder_1 = isnan(_2472) ? _2220 : (isnan(_2220) ? _2472 : min(_2220, _2472));
            frontier_phi_37_36_ladder_2 = isnan(_2471) ? _2219 : (isnan(_2219) ? _2471 : min(_2219, _2471));
        }
        else
        {
            frontier_phi_37_36_ladder = _2221;
            frontier_phi_37_36_ladder_1 = _2220;
            frontier_phi_37_36_ladder_2 = _2219;
        }
        _2285 = frontier_phi_37_36_ladder_2;
        _2287 = frontier_phi_37_36_ladder_1;
        _2289 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2285 = _2219;
        _2287 = _2220;
        _2289 = _2221;
    }
    uvec4 _2294 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2296 = _2294.x * 14u;
    uint _2297 = _2296 + 13u;
    float _2304 = _965 + (-1.0);
    float _2309 = (cbLight._m0[_2297].x * _2304) + 1.0;
    float _2310 = (cbLight._m0[_2297].y * _2304) + 1.0;
    float _2311 = (cbLight._m0[_2297].z * _2304) + 1.0;
    float _2312 = (cbLight._m0[_2297].w * _2304) + 1.0;
    uint _2313 = _2296 + 5u;
    float _2319 = isnan(1.0) ? _2310 : (isnan(_2310) ? 1.0 : min(_2310, 1.0));
    uint _2323 = _2296 + 4u;
    float _2332 = isnan(1.0) ? _2309 : (isnan(_2309) ? 1.0 : min(_2309, 1.0));
    uint _2336 = _2296 | 1u;
    float _2347 = dot(vec3(cbLight._m0[_2296].xyz), vec3(_788, _789, _790));
    float _2350 = dot(vec3(cbLight._m0[_2336].xyz), vec3(_788, _789, _790));
    float _4659 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _4670 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2355 = (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0))) * 0.3183098733425140380859375;
    float _2357 = (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0))) * 0.3183098733425140380859375;
    float _2364 = ((cbLight._m0[_2313].x * _2319) * _2357) + (((cbLight._m0[_2323].x * _2285) * _2332) * _2355);
    float _2365 = ((_2319 * cbLight._m0[_2313].y) * _2357) + (((cbLight._m0[_2323].y * _2287) * _2332) * _2355);
    float _2366 = ((_2319 * cbLight._m0[_2313].z) * _2357) + (((cbLight._m0[_2323].z * _2289) * _2332) * _2355);
    uvec4 _2370 = floatBitsToUint(cbLight._m0[_2296 + 12u]);
    bool _2372 = _2370.x == 0u;
    float _2474;
    float _2476;
    float _2478;
    if (_2372)
    {
        _2474 = _2364;
        _2476 = _2365;
        _2478 = _2366;
    }
    else
    {
        uint _2482 = _2296 + 6u;
        float _2498 = (dot(vec3(cbLight._m0[_2296 + 2u].xyz), vec3(_788, _789, _790)) * 0.5) + 0.5;
        float _2499 = _2498 * _2498;
        float _4681 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2500 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
        float _2501 = isnan(1.0) ? _2311 : (isnan(_2311) ? 1.0 : min(_2311, 1.0));
        _2474 = (((cbLight._m0[_2482].x * 0.3183098733425140380859375) * _2500) * _2501) + _2364;
        _2476 = (((cbLight._m0[_2482].y * 0.3183098733425140380859375) * _2500) * _2501) + _2365;
        _2478 = (((cbLight._m0[_2482].z * 0.3183098733425140380859375) * _2500) * _2501) + _2366;
    }
    bool _2481 = _2370.y == 0u;
    float _2536;
    float _2538;
    float _2540;
    if (_2481)
    {
        _2536 = _2474;
        _2538 = _2476;
        _2540 = _2478;
    }
    else
    {
        uint _2709 = _2296 + 7u;
        float _2725 = (dot(vec3(cbLight._m0[_2296 + 3u].xyz), vec3(_788, _789, _790)) * 0.5) + 0.5;
        float _2726 = _2725 * _2725;
        float _4697 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
        float _2727 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
        float _2728 = isnan(1.0) ? _2312 : (isnan(_2312) ? 1.0 : min(_2312, 1.0));
        _2536 = (((cbLight._m0[_2709].x * 0.3183098733425140380859375) * _2727) * _2728) + _2474;
        _2538 = (((cbLight._m0[_2709].y * 0.3183098733425140380859375) * _2727) * _2728) + _2476;
        _2540 = (((cbLight._m0[_2709].z * 0.3183098733425140380859375) * _2727) * _2728) + _2478;
    }
    uint _2543 = _2296 + 8u;
    float _2556 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2296].w)) * _791) * 0.949999988079071044921875);
    float _2557 = _2556 * _2556;
    float _2558 = cbLight._m0[_2296].x + _867;
    float _2559 = cbLight._m0[_2296].y + _868;
    float _2560 = cbLight._m0[_2296].z + _869;
    float _2564 = inversesqrt(dot(vec3(_2558, _2559, _2560), vec3(_2558, _2559, _2560)));
    float _2565 = _2564 * _2558;
    float _2566 = _2564 * _2559;
    float _2567 = _2564 * _2560;
    float _2568 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2296].xyz));
    float _4713 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
    float _2571 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
    float _4724 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _2572 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
    float _2573 = dot(vec3(_788, _789, _790), vec3(_2565, _2566, _2567));
    float _4735 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
    float _2576 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
    float _2577 = dot(vec3(cbLight._m0[_2296].xyz), vec3(_2565, _2566, _2567));
    float _4746 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
    float _2581 = _2557 * _2557;
    float _2585 = ((_2576 * _2576) * (_2581 + (-1.0))) + 1.0;
    float _2593 = exp2(log2(1.0 - (isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0)))) * 5.0);
    float _2594 = 0.959999978542327880859375 - _946;
    float _2596 = 0.959999978542327880859375 - _947;
    float _2597 = 0.959999978542327880859375 - _948;
    float _2604 = 1.0 - _2557;
    float _2615 = (0.5 / (((_2572 * ((_2571 * _2604) + _2557)) + 9.9999999392252902907785028219223e-09) + (((_2572 * _2604) + _2557) * _2571))) * _2571;
    float _4757 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
    float _2617 = (isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0))) * (_2581 / ((_2585 * _2585) * 3.141590118408203125));
    uint _2631 = _2296 + 9u;
    float _2642 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2336].w)) * _791) * 0.949999988079071044921875);
    float _2643 = _2642 * _2642;
    float _2644 = cbLight._m0[_2336].x + _867;
    float _2645 = cbLight._m0[_2336].y + _868;
    float _2646 = cbLight._m0[_2336].z + _869;
    float _2650 = inversesqrt(dot(vec3(_2644, _2645, _2646), vec3(_2644, _2645, _2646)));
    float _2651 = _2650 * _2644;
    float _2652 = _2650 * _2645;
    float _2653 = _2650 * _2646;
    float _2654 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2336].xyz));
    float _4768 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
    float _2657 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
    float _2658 = dot(vec3(_788, _789, _790), vec3(_2651, _2652, _2653));
    float _4779 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
    float _2661 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
    float _2662 = dot(vec3(cbLight._m0[_2336].xyz), vec3(_2651, _2652, _2653));
    float _4790 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
    float _2666 = _2643 * _2643;
    float _2670 = ((_2661 * _2661) * (_2666 + (-1.0))) + 1.0;
    float _2677 = exp2(log2(1.0 - (isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0)))) * 5.0);
    float _2684 = 1.0 - _2643;
    float _2694 = (0.5 / (((_2572 * ((_2657 * _2684) + _2643)) + 9.9999999392252902907785028219223e-09) + (((_2572 * _2684) + _2643) * _2657))) * _2657;
    float _4801 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
    float _2696 = (isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0))) * (_2666 / ((_2670 * _2670) * 3.141590118408203125));
    float _2706 = (((((_2677 * _2594) + _949) * cbLight._m0[_2631].x) * _2696) * _2319) + ((((cbLight._m0[_2543].x * _2285) * ((_2593 * _2594) + _949)) * _2617) * _2332);
    float _2707 = (((((_2677 * _2596) + _951) * cbLight._m0[_2631].y) * _2696) * _2319) + ((((cbLight._m0[_2543].y * _2287) * ((_2593 * _2596) + _951)) * _2617) * _2332);
    float _2708 = (((((_2677 * _2597) + _952) * cbLight._m0[_2631].z) * _2696) * _2319) + ((((cbLight._m0[_2543].z * _2289) * ((_2593 * _2597) + _952)) * _2617) * _2332);
    float _2764;
    float _2766;
    float _2768;
    if (_2372)
    {
        _2764 = _2706;
        _2766 = _2707;
        _2768 = _2708;
    }
    else
    {
        uint _2770 = _2296 + 2u;
        uint _2774 = _2296 + 10u;
        float _2788 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2770].w)) * _791) * 0.949999988079071044921875);
        float _2789 = _2788 * _2788;
        float _2790 = cbLight._m0[_2770].x + _867;
        float _2791 = cbLight._m0[_2770].y + _868;
        float _2792 = cbLight._m0[_2770].z + _869;
        float _2796 = inversesqrt(dot(vec3(_2790, _2791, _2792), vec3(_2790, _2791, _2792)));
        float _2797 = _2796 * _2790;
        float _2798 = _2796 * _2791;
        float _2799 = _2796 * _2792;
        float _2800 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2770].xyz));
        float _4812 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
        float _2803 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
        float _2804 = dot(vec3(_788, _789, _790), vec3(_2797, _2798, _2799));
        float _4823 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
        float _2807 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
        float _2808 = dot(vec3(cbLight._m0[_2770].xyz), vec3(_2797, _2798, _2799));
        float _4834 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
        float _2812 = _2789 * _2789;
        float _2816 = ((_2807 * _2807) * (_2812 + (-1.0))) + 1.0;
        float _2823 = exp2(log2(1.0 - (isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0)))) * 5.0);
        float _2830 = 1.0 - _2789;
        float _2840 = (0.5 / (((_2572 * ((_2803 * _2830) + _2789)) + 9.9999999392252902907785028219223e-09) + (((_2572 * _2830) + _2789) * _2803))) * _2803;
        float _4845 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
        float _2842 = (isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0))) * (_2812 / ((_2816 * _2816) * 3.141590118408203125));
        float _2843 = isnan(1.0) ? _2311 : (isnan(_2311) ? 1.0 : min(_2311, 1.0));
        _2764 = (((((_2823 * _2594) + _949) * cbLight._m0[_2774].x) * _2842) * _2843) + _2706;
        _2766 = (((((_2823 * _2596) + _951) * cbLight._m0[_2774].y) * _2842) * _2843) + _2707;
        _2768 = (((((_2823 * _2597) + _952) * cbLight._m0[_2774].z) * _2842) * _2843) + _2708;
    }
    float _2874;
    float _2876;
    float _2878;
    if (_2481)
    {
        _2874 = _2764;
        _2876 = _2766;
        _2878 = _2768;
    }
    else
    {
        uint _2885 = _2296 + 3u;
        uint _2889 = _2296 + 11u;
        float _2903 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2885].w)) * _791) * 0.949999988079071044921875);
        float _2904 = _2903 * _2903;
        float _2905 = cbLight._m0[_2885].x + _867;
        float _2906 = cbLight._m0[_2885].y + _868;
        float _2907 = cbLight._m0[_2885].z + _869;
        float _2911 = inversesqrt(dot(vec3(_2905, _2906, _2907), vec3(_2905, _2906, _2907)));
        float _2912 = _2911 * _2905;
        float _2913 = _2911 * _2906;
        float _2914 = _2911 * _2907;
        float _2915 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2885].xyz));
        float _4861 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
        float _2918 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
        float _2919 = dot(vec3(_788, _789, _790), vec3(_2912, _2913, _2914));
        float _4872 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
        float _2922 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
        float _2923 = dot(vec3(cbLight._m0[_2885].xyz), vec3(_2912, _2913, _2914));
        float _4883 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
        float _2927 = _2904 * _2904;
        float _2931 = ((_2922 * _2922) * (_2927 + (-1.0))) + 1.0;
        float _2938 = exp2(log2(1.0 - (isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0)))) * 5.0);
        float _2945 = 1.0 - _2904;
        float _2955 = (0.5 / (((_2572 * ((_2918 * _2945) + _2904)) + 9.9999999392252902907785028219223e-09) + (((_2572 * _2945) + _2904) * _2918))) * _2918;
        float _4894 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
        float _2957 = (isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0))) * (_2927 / ((_2931 * _2931) * 3.141590118408203125));
        float _2958 = isnan(1.0) ? _2312 : (isnan(_2312) ? 1.0 : min(_2312, 1.0));
        _2874 = (((((_2938 * _2594) + _949) * cbLight._m0[_2889].x) * _2957) * _2958) + _2764;
        _2876 = (((((_2938 * _2596) + _951) * cbLight._m0[_2889].y) * _2957) * _2958) + _2766;
        _2878 = (((((_2938 * _2597) + _952) * cbLight._m0[_2889].z) * _2957) * _2958) + _2768;
    }
    float _3024;
    float _3026;
    float _3028;
    float _3030;
    float _3032;
    float _3034;
    if (_2294.y == 0u)
    {
        uvec4 _2979 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2980 = _2979.x;
        uint _2991 = uint((float(_2979.y) * floor(float(uint(cbSceneParam._m0[85u].y * _888) / _2980))) + floor(float(uint(cbSceneParam._m0[85u].x * _887) / _2980)));
        float _3001 = (log2(_2072 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3002 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
        uint _3005 = uint(isnan(14.0) ? _3002 : (isnan(_3002) ? 14.0 : min(_3002, 14.0)));
        uvec4 _3010 = texelFetch(g_lightClusterGridBuffer, int(((_3005 << 2u) + (_2991 << 6u)) >> 2u));
        uint _3011 = _3010.x;
        uint _3012 = _2979.z;
        float _3091;
        float _3093;
        float _3095;
        float _3097;
        float _3099;
        float _3101;
        if (((((1u << ((_3012 >> 4u) & 15u)) + 4294967295u) & _3011) == 0u) || ((_3012 & 240u) == 0u))
        {
            _3091 = 0.0;
            _3093 = 0.0;
            _3095 = 0.0;
            _3097 = 0.0;
            _3099 = 0.0;
            _3101 = 0.0;
        }
        else
        {
            float _3092;
            float _3094;
            float _3096;
            float _3098;
            float _3100;
            float _3102;
            float _3243 = 0.0;
            float _3244 = 0.0;
            float _3245 = 0.0;
            float _3246 = 0.0;
            float _3247 = 0.0;
            float _3248 = 0.0;
            uint _3249 = 0u;
            uint _3258;
            bool _3259;
            for (;;)
            {
                _3258 = texelFetch(g_lightClassification, int((((_3005 << 5u) + (_2991 << 9u)) + (_3249 << 2u)) >> 2u)).x;
                _3259 = _3258 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3259)
                {
                    frontier_phi_71_pred = _3248;
                    frontier_phi_71_pred_1 = _3247;
                    frontier_phi_71_pred_2 = _3246;
                    frontier_phi_71_pred_3 = _3245;
                    frontier_phi_71_pred_4 = _3244;
                    frontier_phi_71_pred_5 = _3243;
                }
                else
                {
                    float _3388;
                    float _3389;
                    float _3390;
                    float _3391;
                    float _3392;
                    float _3393;
                    uint _3394;
                    _3388 = _3243;
                    _3389 = _3244;
                    _3390 = _3245;
                    _3391 = _3246;
                    _3392 = _3247;
                    _3393 = _3248;
                    _3394 = _3258;
                    float _3315;
                    float _3316;
                    float _3317;
                    float _3318;
                    float _3319;
                    float _3320;
                    for (;;)
                    {
                        uint _3398 = uint(findLSB(_3394)) + (_3249 << 5u);
                        uint _3395 = (_3394 + 4294967295u) & _3394;
                        uint _3400 = _3398 * 48u;
                        vec4 _3414 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3400)).x, texelFetch(g_PointLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3400 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3400 + 3u)).x));
                        uint _3420 = (_3398 * 48u) + 4u;
                        vec4 _3433 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3420)).x, texelFetch(g_PointLightRenderingBuffer, int(_3420 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3420 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3420 + 3u)).x));
                        uint _3439 = (_3398 * 48u) + 8u;
                        vec3 _3450 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3439)).x, texelFetch(g_PointLightRenderingBuffer, int(_3439 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3439 + 2u)).x));
                        float _3454 = _3414.x - _2070;
                        float _3455 = _3414.y - _2071;
                        float _3456 = _3414.z - _2072;
                        float _3457 = dot(vec3(_3454, _3455, _3456), vec3(_3454, _3455, _3456));
                        float _3460 = inversesqrt(_3457);
                        float _3461 = _3460 * _3454;
                        float _3462 = _3460 * _3455;
                        float _3463 = _3460 * _3456;
                        float _3464 = dot(vec3(_906, _909, _912), vec3(_3461, _3462, _3463));
                        float _3469 = 1.0 - (_3457 * _3414.w);
                        float _4920 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                        float _3470 = isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0));
                        float _3471 = sqrt(_3457) * _3433.w;
                        float _3474 = 1.39999997615814208984375 / (_3471 + 1.39999997615814208984375);
                        float _3475 = _3474 * _3474;
                        float _3478 = ((1.0 - _3475) * _3464) + _3475;
                        float _3481 = _3471 * _3471;
                        float _3485 = ((isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0))) * _3470) / ((_3481 * 0.699999988079071044921875) + 1.0);
                        float _3489 = (-0.0) - _2070;
                        float _3490 = (-0.0) - _2071;
                        float _3491 = (-0.0) - _2072;
                        float _3495 = inversesqrt(dot(vec3(_3489, _3490, _3491), vec3(_3489, _3490, _3491)));
                        float _3496 = _3495 * _3489;
                        float _3497 = _3495 * _3490;
                        float _3498 = _3495 * _3491;
                        float _3505 = exp2(log2(1.0 / ((_3481 * 3.5) + 5.0)) * 0.25);
                        float _3506 = 1.0 - _981;
                        float _3513 = sqrt(1.0 - ((1.0 - (_3506 * _3506)) * (1.0 - (_3505 * _3505))));
                        float _3514 = _3513 * _3513;
                        float _3515 = _3514 * _3514;
                        float _3516 = _3496 + _3461;
                        float _3517 = _3497 + _3462;
                        float _3518 = _3498 + _3463;
                        float _3522 = inversesqrt(dot(vec3(_3516, _3517, _3518), vec3(_3516, _3517, _3518)));
                        float _3526 = dot(vec3(_906, _909, _912), vec3(_3496, _3497, _3498));
                        float _4936 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                        float _3529 = isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0));
                        float _3530 = dot(vec3(_906, _909, _912), vec3(_3522 * _3516, _3522 * _3517, _3522 * _3518));
                        float _4947 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                        float _3533 = isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0));
                        float _3537 = ((_3533 * _3533) * (_3515 + (-1.0))) + 1.0;
                        float _3538 = _3474 * _3514;
                        float _3539 = _3538 * _3538;
                        float _3542 = ((1.0 - _3539) * _3464) + _3539;
                        float _4958 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                        float _3543 = isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0));
                        float _3544 = 1.0 - _3514;
                        float _3554 = (0.5 / (((_3543 * ((_3529 * _3544) + _3514)) + 9.9999999392252902907785028219223e-09) + (((_3543 * _3544) + _3514) * _3529))) * _3543;
                        float _4969 = isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0));
                        float _3565 = (((_3515 * 3.1415927410125732421875) * (isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0)))) / ((_3537 * _3537) * ((_3481 * 2.1991131305694580078125) + 3.141590118408203125))) * _3470;
                        _3318 = (_3485 * _3433.x) + _3391;
                        _3319 = (_3485 * _3433.y) + _3392;
                        _3320 = (_3485 * _3433.z) + _3393;
                        _3315 = (_3565 * _3450.x) + _3388;
                        _3316 = (_3565 * _3450.y) + _3389;
                        _3317 = (_3565 * _3450.z) + _3390;
                        if (_3395 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3388 = _3315;
                            _3389 = _3316;
                            _3390 = _3317;
                            _3391 = _3318;
                            _3392 = _3319;
                            _3393 = _3320;
                            _3394 = _3395;
                        }
                    }
                    frontier_phi_71_pred = _3320;
                    frontier_phi_71_pred_1 = _3319;
                    frontier_phi_71_pred_2 = _3318;
                    frontier_phi_71_pred_3 = _3317;
                    frontier_phi_71_pred_4 = _3316;
                    frontier_phi_71_pred_5 = _3315;
                }
                _3102 = frontier_phi_71_pred;
                _3100 = frontier_phi_71_pred_1;
                _3098 = frontier_phi_71_pred_2;
                _3096 = frontier_phi_71_pred_3;
                _3094 = frontier_phi_71_pred_4;
                _3092 = frontier_phi_71_pred_5;
                uint _3250 = _3249 + 1u;
                if (_3250 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3243 = _3092;
                    _3244 = _3094;
                    _3245 = _3096;
                    _3246 = _3098;
                    _3247 = _3100;
                    _3248 = _3102;
                    _3249 = _3250;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3091 = _3092;
            _3093 = _3094;
            _3095 = _3096;
            _3097 = _3098;
            _3099 = _3100;
            _3101 = _3102;
        }
        uvec4 _3105 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3106 = _3105.z;
        uint _3108 = (_3106 >> 8u) & 15u;
        float _3211;
        float _3213;
        float _3215;
        float _3217;
        float _3219;
        float _3221;
        if (((4294967295u << _3108) & _3011) == 0u)
        {
            _3211 = _3091;
            _3213 = _3093;
            _3215 = _3095;
            _3217 = _3097;
            _3219 = _3099;
            _3221 = _3101;
        }
        else
        {
            float _3236 = inversesqrt(dot(vec3(_2070, _2071, _2072), vec3(_2070, _2071, _2072)));
            float _3237 = _3236 * _2070;
            float _3238 = _3236 * _2071;
            float _3239 = _3236 * _2072;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3108 < ((_3106 >> 12u) & 15u))
            {
                float _3212;
                float _3214;
                float _3216;
                float _3218;
                float _3220;
                float _3222;
                float _3371 = _3091;
                float _3372 = _3093;
                float _3373 = _3095;
                float _3374 = _3097;
                float _3375 = _3099;
                float _3376 = _3101;
                uint _3377 = _3108;
                uint _3386;
                bool _3387;
                for (;;)
                {
                    _3386 = texelFetch(g_lightClassification, int((((_3005 << 5u) + (_2991 << 9u)) + (_3377 << 2u)) >> 2u)).x;
                    _3387 = _3386 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3387)
                    {
                        frontier_phi_82_pred = _3376;
                        frontier_phi_82_pred_1 = _3375;
                        frontier_phi_82_pred_2 = _3374;
                        frontier_phi_82_pred_3 = _3373;
                        frontier_phi_82_pred_4 = _3372;
                        frontier_phi_82_pred_5 = _3371;
                    }
                    else
                    {
                        float _3579;
                        float _3580;
                        float _3581;
                        float _3582;
                        float _3583;
                        float _3584;
                        float _3873;
                        float _3874;
                        float _3875;
                        float _3876;
                        float _3877;
                        float _3878;
                        float _3592 = _3371;
                        float _3593 = _3372;
                        float _3594 = _3373;
                        float _3595 = _3374;
                        float _3596 = _3375;
                        float _3597 = _3376;
                        uint _3598 = _3386;
                        uint _3599;
                        vec4 _3624;
                        float _3625;
                        vec4 _3640;
                        vec3 _3652;
                        vec4 _3667;
                        vec4 _3683;
                        float _3729;
                        bool _3730;
                        for (;;)
                        {
                            uint _3609 = ((_3377 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3598));
                            _3599 = (_3598 + 4294967295u) & _3598;
                            uint _3611 = _3609 * 40u;
                            _3624 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 3u)).x));
                            _3625 = _3624.w;
                            uint _3627 = (_3609 * 40u) + 4u;
                            _3640 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3627)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 3u)).x));
                            uint _3642 = (_3609 * 40u) + 8u;
                            _3652 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3642)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 2u)).x));
                            uint _3654 = (_3609 * 40u) + 16u;
                            _3667 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3654)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 3u)).x));
                            uint _3670 = (_3609 * 40u) + 20u;
                            _3683 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3670)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 3u)).x));
                            uint _3685 = (_3609 * 40u) + 24u;
                            vec4 _3698 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3685)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 3u)).x));
                            uint _3704 = (_3609 * 40u) + 28u;
                            vec4 _3717 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3704)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 3u)).x));
                            _3729 = fma(_2072, _3717.z, fma(_2071, _3717.y, _3717.x * _2070)) + _3717.w;
                            _3730 = !((fma(_2072, _3698.z, fma(_2071, _3698.y, _3698.x * _2070)) + _3698.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3730)
                            {
                                float _3757 = _3624.x - _2070;
                                float _3758 = _3624.y - _2071;
                                float _3759 = _3624.z - _2072;
                                float _3760 = dot(vec3(_3757, _3758, _3759), vec3(_3757, _3758, _3759));
                                float _3763 = inversesqrt(_3760);
                                float _3764 = _3763 * _3757;
                                float _3765 = _3763 * _3758;
                                float _3766 = _3763 * _3759;
                                float _3770 = 1.0 - (_3760 / (_3625 * _3625));
                                float _4980 = isnan(0.0) ? _3770 : (isnan(_3770) ? 0.0 : max(_3770, 0.0));
                                float _3771 = isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0));
                                float _3775 = sqrt(_3760) * _3640.w;
                                float _3777 = 1.39999997615814208984375 / (_3775 + 1.39999997615814208984375);
                                float _3778 = _3777 * _3777;
                                float _3781 = ((1.0 - _3778) * dot(vec3(_3764, _3765, _3766), vec3(_906, _909, _912))) + _3778;
                                float _3784 = _3775 * _3775;
                                float _3788 = (fma(_2072, _3667.z, fma(_2071, _3667.y, _3667.x * _2070)) + _3667.w) / _3729;
                                float _3789 = (fma(_2072, _3683.z, fma(_2071, _3683.y, _3683.x * _2070)) + _3683.w) / _3729;
                                float _3793 = 1.0 - dot(vec2(_3788, _3789), vec2(_3788, _3789));
                                float _4996 = isnan(0.0) ? _3793 : (isnan(_3793) ? 0.0 : max(_3793, 0.0));
                                float _3794 = isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0));
                                float _3795 = _3794 * (((isnan(0.0) ? _3781 : (isnan(_3781) ? 0.0 : max(_3781, 0.0))) * _3771) / ((_3784 * 0.699999988079071044921875) + 1.0));
                                float _3807 = exp2(log2(1.0 / ((_3784 * 3.5) + 5.0)) * 0.25);
                                float _3808 = 1.0 - _981;
                                float _3815 = sqrt(1.0 - ((1.0 - (_3808 * _3808)) * (1.0 - (_3807 * _3807))));
                                float _3816 = _3815 * _3815;
                                float _3817 = _3816 * _3816;
                                float _3818 = _3764 - _3237;
                                float _3819 = _3765 - _3238;
                                float _3820 = _3766 - _3239;
                                float _3824 = inversesqrt(dot(vec3(_3818, _3819, _3820), vec3(_3818, _3819, _3820)));
                                float _3828 = dot(vec3(_906, _909, _912), vec3((-0.0) - _3237, (-0.0) - _3238, (-0.0) - _3239));
                                float _5007 = isnan(0.0) ? _3828 : (isnan(_3828) ? 0.0 : max(_3828, 0.0));
                                float _3831 = isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0));
                                float _3832 = dot(vec3(_906, _909, _912), vec3(_3824 * _3818, _3824 * _3819, _3824 * _3820));
                                float _5018 = isnan(0.0) ? _3832 : (isnan(_3832) ? 0.0 : max(_3832, 0.0));
                                float _3835 = isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0));
                                float _3839 = ((_3835 * _3835) * (_3817 + (-1.0))) + 1.0;
                                float _3840 = _3777 * _3816;
                                float _3841 = _3840 * _3840;
                                float _3847 = ((1.0 - _3841) * dot(vec3(_906, _909, _912), vec3(_3764, _3765, _3766))) + _3841;
                                float _5029 = isnan(0.0) ? _3847 : (isnan(_3847) ? 0.0 : max(_3847, 0.0));
                                float _3848 = isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0));
                                float _3849 = 1.0 - _3816;
                                float _3859 = (0.5 / (((_3848 * ((_3831 * _3849) + _3816)) + 9.9999999392252902907785028219223e-09) + (((_3848 * _3849) + _3816) * _3831))) * _3848;
                                float _5040 = isnan(0.0) ? _3859 : (isnan(_3859) ? 0.0 : max(_3859, 0.0));
                                float _3869 = (_3794 * _3771) * (((_3817 * 3.1415927410125732421875) * (isnan(1.0) ? _5040 : (isnan(_5040) ? 1.0 : min(_5040, 1.0)))) / ((_3839 * _3839) * ((_3784 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3795 * _3640.z;
                                frontier_phi_88_pred_1 = _3795 * _3640.y;
                                frontier_phi_88_pred_2 = _3795 * _3640.x;
                                frontier_phi_88_pred_3 = _3869 * _3652.z;
                                frontier_phi_88_pred_4 = _3869 * _3652.y;
                                frontier_phi_88_pred_5 = _3869 * _3652.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3878 = frontier_phi_88_pred;
                            _3877 = frontier_phi_88_pred_1;
                            _3876 = frontier_phi_88_pred_2;
                            _3875 = frontier_phi_88_pred_3;
                            _3874 = frontier_phi_88_pred_4;
                            _3873 = frontier_phi_88_pred_5;
                            _3582 = _3876 + _3595;
                            _3583 = _3877 + _3596;
                            _3584 = _3878 + _3597;
                            _3579 = _3873 + _3592;
                            _3580 = _3874 + _3593;
                            _3581 = _3875 + _3594;
                            if (_3599 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3592 = _3579;
                                _3593 = _3580;
                                _3594 = _3581;
                                _3595 = _3582;
                                _3596 = _3583;
                                _3597 = _3584;
                                _3598 = _3599;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3584;
                        frontier_phi_82_pred_1 = _3583;
                        frontier_phi_82_pred_2 = _3582;
                        frontier_phi_82_pred_3 = _3581;
                        frontier_phi_82_pred_4 = _3580;
                        frontier_phi_82_pred_5 = _3579;
                    }
                    _3222 = frontier_phi_82_pred;
                    _3220 = frontier_phi_82_pred_1;
                    _3218 = frontier_phi_82_pred_2;
                    _3216 = frontier_phi_82_pred_3;
                    _3214 = frontier_phi_82_pred_4;
                    _3212 = frontier_phi_82_pred_5;
                    uint _3378 = _3377 + 1u;
                    if (_3378 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3371 = _3212;
                        _3372 = _3214;
                        _3373 = _3216;
                        _3374 = _3218;
                        _3375 = _3220;
                        _3376 = _3222;
                        _3377 = _3378;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3218;
                frontier_phi_63_64_ladder_1 = _3222;
                frontier_phi_63_64_ladder_2 = _3220;
                frontier_phi_63_64_ladder_3 = _3216;
                frontier_phi_63_64_ladder_4 = _3214;
                frontier_phi_63_64_ladder_5 = _3212;
            }
            else
            {
                frontier_phi_63_64_ladder = _3097;
                frontier_phi_63_64_ladder_1 = _3101;
                frontier_phi_63_64_ladder_2 = _3099;
                frontier_phi_63_64_ladder_3 = _3095;
                frontier_phi_63_64_ladder_4 = _3093;
                frontier_phi_63_64_ladder_5 = _3091;
            }
            _3211 = frontier_phi_63_64_ladder_5;
            _3213 = frontier_phi_63_64_ladder_4;
            _3215 = frontier_phi_63_64_ladder_3;
            _3217 = frontier_phi_63_64_ladder;
            _3219 = frontier_phi_63_64_ladder_2;
            _3221 = frontier_phi_63_64_ladder_1;
        }
        float _3226 = isnan(1.0) ? _965 : (isnan(_965) ? 1.0 : min(_965, 1.0));
        _3024 = (_3226 * _3217) + _2536;
        _3026 = (_3226 * _3219) + _2538;
        _3028 = (_3226 * _3221) + _2540;
        _3030 = ((_3211 * _949) * _3226) + _2874;
        _3032 = ((_3213 * _951) * _3226) + _2876;
        _3034 = ((_3215 * _952) * _3226) + _2878;
    }
    else
    {
        _3024 = _2536;
        _3026 = _2538;
        _3028 = _2540;
        _3030 = _2874;
        _3032 = _2876;
        _3034 = _2878;
    }
    float _5056 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _5067 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _5078 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _3051 = ((isnan(1.0) ? _5056 : (isnan(_5056) ? 1.0 : min(_5056, 1.0))) * (_3024 + ((isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))) * _965))) + ((_3030 + ((isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0))) * _1804)) * cbPerFrame._m0[3u].x);
    float _3052 = ((isnan(1.0) ? _5067 : (isnan(_5067) ? 1.0 : min(_5067, 1.0))) * (_3026 + ((isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))) * _965))) + ((_3032 + ((isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0))) * _1804)) * cbPerFrame._m0[3u].x);
    float _3053 = ((isnan(1.0) ? _5078 : (isnan(_5078) ? 1.0 : min(_5078, 1.0))) * (_3028 + ((isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))) * _965))) + ((_3034 + ((isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0))) * _1804)) * cbPerFrame._m0[3u].x);
    uint _3054 = _257 + 6u;
    float _3062 = _887 / cbSceneParam._m0[86u].x;
    float _3063 = _888 / cbSceneParam._m0[86u].y;
    vec4 _3077 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3062, _3063, (log2((isnan(cbSceneParam._m0[77u].w) ? _810 : (isnan(_810) ? cbSceneParam._m0[77u].w : min(_810, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3079 = _3077.x;
    float _3080 = _3077.y;
    float _3081 = _3077.z;
    float _3082 = _3077.w;
    float _3153;
    float _3155;
    float _3157;
    float _3159;
    if (_810 > cbSceneParam._m0[78u].w)
    {
        float _3116 = isnan(_810) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _810 : min(cbSceneParam._m0[80u].w, _810));
        float _3117 = _3116 / _810;
        float _3128 = _3117 * _860;
        float _3129 = _861 * _3117;
        float _3130 = (-0.0) - _3129;
        float _3131 = _3117 * _862;
        float _3133 = (cbSceneParam._m0[77u].w * _3130) / _3116;
        float _3134 = _3133 + cbSceneParam._m0[79u].w;
        float _3135 = cbSceneParam._m0[79u].w - _3129;
        float _3141 = sqrt(((_3128 * _3128) + (_3129 * _3129)) + (_3131 * _3131));
        float _3144 = (1.0 - (cbSceneParam._m0[77u].w / _3116)) * _3141;
        float _3149 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3151 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3328;
        if (abs((_3130 - _3133) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3328 = ((((_3134 > 0.0) ? exp2(_3149 * _3134) : (2.0 - exp2(_3151 * _3134))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3144;
        }
        else
        {
            float _3272 = 1.0 / cbSceneParam._m0[80u].x;
            float _3273 = isnan(_3135) ? _3134 : (isnan(_3134) ? _3135 : max(_3134, _3135));
            float _3274 = isnan(_3135) ? _3134 : (isnan(_3134) ? _3135 : min(_3134, _3135));
            float _3283 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : min(_3273, 0.0));
            float _3284 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : min(_3274, 0.0));
            _3328 = ((abs(_3141 / _3130) * cbSceneParam._m0[80u].y) * ((((_3283 - _3284) * 2.0) - ((exp2(_3149 * (isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0)))) - exp2(_3149 * (isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0))))) * _3272)) - ((exp2(_3151 * _3283) - exp2(_3151 * _3284)) * _3272))) + (_3144 * cbSceneParam._m0[80u].z);
        }
        vec4 _3330 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3062, _3063, 1.0), 0.0);
        float _3339 = exp2((_3328 * (-1.44269502162933349609375)) * (1.0 - _3330.w));
        float _3340 = log2(_3339);
        float _3356 = log2(_3082);
        _3153 = (exp2(_3356 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3340 * cbSceneParam._m0[78u].x)) * _3330.x) / cbSceneParam._m0[78u].x)) + _3079;
        _3155 = (exp2(_3356 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3340 * cbSceneParam._m0[78u].y)) * _3330.y) / cbSceneParam._m0[78u].y)) + _3080;
        _3157 = (exp2(_3356 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3340 * cbSceneParam._m0[78u].z)) * _3330.z) / cbSceneParam._m0[78u].z)) + _3081;
        _3159 = _3339 * _3082;
    }
    else
    {
        _3153 = _3079;
        _3155 = _3080;
        _3157 = _3081;
        _3159 = _3082;
    }
    bool _3366;
    vec4 _3169;
    vec4 _3191;
    float _3193;
    float _3197;
    float _3198;
    float _3199;
    float _3200;
    bool _3210;
    for (;;)
    {
        _3169 = cbMatDynParam._m0[0u];
        float _3171 = roundEven(_3169.y);
        bool _3172 = _3171 == 3.0;
        float _3173 = log2(_3159);
        float _3180 = exp2(_3173 * cbSceneParam._m0[78u].x) * _3051;
        float _3181 = exp2(_3173 * cbSceneParam._m0[78u].y) * _3052;
        float _3182 = exp2(_3173 * cbSceneParam._m0[78u].z) * _3053;
        float _3189 = _876 + (-0.5);
        _3191 = cbMtdParam._m0[1u];
        _3193 = _3191.y * _3189;
        float _3196 = (_3171 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3197 = _3196 * (_3172 ? _3180 : (_3180 + (cbSceneParam._m0[72u].w * _3153)));
        _3198 = _3196 * (_3172 ? _3181 : (_3181 + (cbSceneParam._m0[72u].w * _3155)));
        _3199 = _3196 * (_3172 ? _3182 : (_3182 + (cbSceneParam._m0[72u].w * _3157)));
        _3200 = _3189 * 0.999000012874603271484375;
        _3210 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3210)
        {
            if ((cbInstanceData._m0[_257 + 7u].x + _3200) < 0.5)
            {
                _3366 = true;
                break;
            }
        }
        uint _3307 = _925 + uint(_3169.w);
        if ((cbInstanceData._m0[_3307].w < 1.0) && ((cbInstanceData._m0[_3307].w + _3200) < 0.5))
        {
            _3366 = true;
            break;
        }
        if ((_3193 + 1.0) < _3191.x)
        {
            _3366 = true;
            break;
        }
        _3366 = false;
        break;
    }
    float _3570;
    if (_3366)
    {
        discard_state = true;
        _3570 = 0.0;
    }
    else
    {
        _3570 = cbInstanceData._m0[_3054].w;
    }
    SV_Target.x = _3197;
    SV_Target.y = _3198;
    SV_Target.z = _3199;
    SV_Target.w = _3570;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3054].w;
    discard_exit();
}


