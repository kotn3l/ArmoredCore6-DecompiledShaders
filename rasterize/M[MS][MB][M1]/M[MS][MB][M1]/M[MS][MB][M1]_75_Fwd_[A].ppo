#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1282;
float _3664;
float _3665;
float _3666;
float _3667;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = _236 * NORMAL.x;
    float _238 = _236 * NORMAL.y;
    float _239 = _236 * NORMAL.z;
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _249 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _249 + 1u;
    uint _258 = _249 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_249].x * cbInstanceData._m0[_249].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _295 = _289.x * cbMtdParam._m0[11u].x;
    float _296 = _289.y * cbMtdParam._m0[11u].y;
    float _297 = _289.z * cbMtdParam._m0[11u].z;
    vec4 _316 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _354 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _356 = _354.x;
    float _368 = dot(vec4(_356, _354.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _385 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_356 - _368) * cbMtdParam._m0[24u].y) + _368) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3676 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _386 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
    float _393 = (_386 * ((_316.x * cbMtdParam._m0[12u].x) - _295)) + _295;
    float _394 = (_386 * ((_316.y * cbMtdParam._m0[12u].y) - _296)) + _296;
    float _395 = (_386 * ((_316.z * cbMtdParam._m0[12u].z) - _297)) + _297;
    vec4 _408 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _425 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _427 = _425.x;
    float _428 = _425.y;
    float _429 = _425.z;
    float _438 = ((_408.z - _429) * _386) + _429;
    float _441 = ((((_408.x - _427) * _386) + _427) * 2.0) + (-1.0);
    float _443 = ((((_408.y - _428) * _386) + _428) * 2.0) + (-1.0);
    float _444 = dot(vec2(_441, _443), vec2(_441, _443));
    float _3687 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _449 = sqrt(1.0 - (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))));
    vec4 _462 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _476 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _268) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _269) + cbTextureTilingScale._m0[19u].w));
    float _478 = _476.x;
    float _479 = 1.0 - _478;
    float _507 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_478 - _479) * cbMtdParam._m0[24u].w) + _479) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3698 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _508 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
    float _516 = ((((cbMtdParam._m0[10u].x - _393) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _508) + _393;
    float _517 = ((((cbMtdParam._m0[10u].y - _394) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _508) + _394;
    float _518 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _395)) * _508) + _395;
    vec4 _530 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _544 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _546 = _544.x;
    float _564 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _268) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _269) + cbTextureTilingScale._m0[9u].w)).x - _546) * _386) + _546;
    float _568 = ((_530.x - _564) * cbMtdParam._m0[19u].z) + _564;
    float _570 = _568 - (_568 * _508);
    float _574 = ((cbMtdParam._m0[23u].y - _438) * _508) + _438;
    vec4 _593 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _268) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _269) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _595 = _593.x;
    float _596 = _593.y;
    float _600 = dot(vec4(cbMtdParam._m0[29u].yzw, 0.0), vec4(_237, _238, _239, 0.0));
    vec4 _615 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _268) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _269) + cbTextureTilingScale._m0[18u].w));
    float _617 = _615.x;
    float _622 = fract(_615.w + cbPerFrame._m0[22u].x);
    float _624 = (1.0 - _622) * _617;
    float _629 = ((_622 + (-1.0)) + _617) * 9.0;
    float _631 = ((_617 + (-1.0)) + _622) * 9.0;
    float _632 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _633 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _647 = (_624 * ((_615.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _632 : (isnan(_632) ? 3.0 : min(_632, 3.0))) * 3.1415927410125732421875);
    float _649 = (_624 * ((_615.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _633 : (isnan(_633) ? 3.0 : min(_633, 3.0))) * 3.1415927410125732421875);
    float _653 = inversesqrt(dot(vec3(_647, _649, 1.0), vec3(_647, _649, 1.0)));
    float _669 = (((((0.5 - _595) + ((_647 * 0.5) * _653)) * _600) + _595) * 2.0) + (-1.0);
    float _670 = (((((0.5 - _596) + ((_653 * 0.5) * _649)) * _600) + _596) * 2.0) + (-1.0);
    float _671 = dot(vec2(_669, _670), vec2(_669, _670));
    float _3729 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _687 = ((((cbMtdParam._m0[22u].z * _441) - _441) + _669) * _508) + _441;
    float _688 = ((((cbMtdParam._m0[22u].z * _443) - _443) + _670) * _508) + _443;
    float _689 = (_508 * (sqrt(1.0 - (isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0)))) - _449)) + _449;
    float _691 = cbMtdParam._m0[22u].x + _462.w;
    float _694 = fma(_689, _237, fma(_688, _243 * TANGENT.x, (_229 * _221) * _687));
    float _697 = fma(_689, _238, fma(_688, _243 * TANGENT.y, (_229 * _222) * _687));
    float _700 = fma(_689, _239, fma(_688, _243 * TANGENT.z, (_229 * _223) * _687));
    float _704 = inversesqrt(dot(vec3(_694, _697, _700), vec3(_694, _697, _700)));
    float _705 = _704 * _694;
    float _706 = _704 * _697;
    float _707 = _704 * _700;
    float _3740 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _708 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
    float _3751 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _3762 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _3773 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _3784 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _3795 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _713 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    float _727 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _767 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _777 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _767);
    float _778 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _767);
    float _779 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _767);
    float _783 = inversesqrt(dot(vec3(_777, _778, _779), vec3(_777, _778, _779)));
    float _784 = _777 * _783;
    float _785 = _778 * _783;
    float _786 = _779 * _783;
    vec4 _791 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _793 = _791.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _964 = sqrt(((_777 * _777) + (_778 * _778)) + (_779 * _779));
        float _970 = (cbMatDynParam._m0[5u].x * _964) + cbMatDynParam._m0[5u].y;
        float _3806 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _971 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _975 = (cbMatDynParam._m0[5u].z * _964) + cbMatDynParam._m0[5u].w;
        float _3817 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) - _971)) + _971) < ((_793 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _804 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _805 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _823 = fma(_707, cbSceneParam._m0[5u].z, fma(_706, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _705));
    float _826 = fma(_707, cbSceneParam._m0[6u].z, fma(_706, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _705));
    float _829 = fma(_707, cbSceneParam._m0[7u].z, fma(_706, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _705));
    uint _842 = _249 + 9u;
    uint _843 = _842 + uint(cbMatDynParam._m0[0u].w);
    float _849 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0)))) * cbInstanceData._m0[_843].x;
    float _850 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0)))) * cbInstanceData._m0[_843].y;
    float _851 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0)))) * cbInstanceData._m0[_843].z;
    float _3828 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _852 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    float _3839 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _853 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _3850 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _854 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _855 = 1.0 - _713;
    float _856 = _852 * _855;
    float _857 = _853 * _855;
    float _858 = _854 * _855;
    float _863 = (_852 + (-0.039999999105930328369140625)) * _713;
    float _864 = (_853 + (-0.039999999105930328369140625)) * _713;
    float _865 = (_854 + (-0.039999999105930328369140625)) * _713;
    float _866 = _863 + 0.039999999105930328369140625;
    float _868 = _864 + 0.039999999105930328369140625;
    float _869 = _865 + 0.039999999105930328369140625;
    vec4 _878 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _804, cbSceneParam._m0[86u].y * _805));
    float _882 = ((isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * TEXCOORD_5.w) * _878.x;
    float _883 = dot(vec3(_705, _706, _707), vec3(_784, _785, _786));
    float _886 = _883 * 2.0;
    float _890 = (_886 * _705) - _784;
    float _891 = (_886 * _706) - _785;
    float _892 = (_886 * _707) - _786;
    float _896 = abs(dot(vec3(_784, _785, _786), vec3(_705, _706, _707)));
    float _3861 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _898 = sqrt(_708);
    float _910 = exp2((_898 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_898 * 3.0));
    float _916 = (1.0 - _910) * ((_898 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _917 = _910 * _898;
    float _945 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _949 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _953 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1281;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1007 = fma(_953, cbModelParam._m0[26u].z, fma(_949, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _945));
        float _1011 = fma(_953, cbModelParam._m0[27u].z, fma(_949, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _945));
        float _1015 = fma(_953, cbModelParam._m0[28u].z, fma(_949, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _945));
        float _1039 = _945 + _705;
        float _1040 = _949 + _706;
        float _1041 = _953 + _707;
        float _1051 = fma(_1041, cbModelParam._m0[26u].z, fma(_1040, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1039)) - _1007;
        float _1052 = fma(_1041, cbModelParam._m0[27u].z, fma(_1040, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1039)) - _1011;
        float _1053 = fma(_1041, cbModelParam._m0[28u].z, fma(_1040, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1039)) - _1015;
        float _1057 = inversesqrt(dot(vec3(_1051, _1052, _1053), vec3(_1051, _1052, _1053)));
        float _1070 = ((_1057 * _1051) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1007 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1071 = ((_1057 * _1052) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1011 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1072 = ((_1057 * _1053) / cbModelParam._m0[34u].z) + ((((((_1015 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1075 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        vec4 _1082 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        vec4 _1089 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        vec4 _1096 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        float _1109 = exp2((_1075.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1075.x + (-0.5));
        float _1111 = _1109 * (_1075.y + (-0.5));
        float _1112 = _1109 * (_1075.z + (-0.5));
        float _1119 = exp2((_1082.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1082.x + (-0.5));
        float _1121 = _1119 * (_1082.y + (-0.5));
        float _1122 = _1119 * (_1082.z + (-0.5));
        float _1129 = exp2((_1089.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1089.x + (-0.5));
        float _1131 = _1129 * (_1089.y + (-0.5));
        float _1132 = _1129 * (_1089.z + (-0.5));
        float _1139 = exp2((_1096.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1096.x + (-0.5));
        float _1141 = _1139 * (_1096.y + (-0.5));
        float _1142 = _1139 * (_1096.z + (-0.5));
        float _1143 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1144 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1145 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1146 = _1110 * 0.5;
        float _1147 = _1120 * 0.5;
        float _1148 = _1130 * 0.5;
        float _1149 = dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148));
        float _1154 = (_1149 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1149);
        float _1163 = (dot(vec3(_705, _706, _707), vec3(_1154 * _1146, _1154 * _1147, _1154 * _1148)) + 1.0) * 0.5;
        float _3887 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1173 = sqrt(((_1147 * _1147) + (_1146 * _1146)) + (_1148 * _1148)) / (_1143 + 9.9999997473787516355514526367188e-06);
        float _3898 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1175 = _1174 * 2.0;
        float _1179 = (1.0 - _1174) / (_1174 + 1.0);
        float _3909 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1189 = ((((1.0 - _1180) * (_1175 + 2.0)) * exp2(log2(isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * (_1175 + 1.0))) + _1180) * _1143;
        float _1190 = _1111 * 0.5;
        float _1191 = _1121 * 0.5;
        float _1192 = _1131 * 0.5;
        float _1193 = dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192));
        float _1198 = (_1193 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1193);
        float _1206 = (dot(vec3(_705, _706, _707), vec3(_1198 * _1190, _1198 * _1191, _1198 * _1192)) + 1.0) * 0.5;
        float _3920 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1215 = sqrt(((_1191 * _1191) + (_1190 * _1190)) + (_1192 * _1192)) / (_1144 + 9.9999997473787516355514526367188e-06);
        float _3931 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1217 = _1216 * 2.0;
        float _1221 = (1.0 - _1216) / (_1216 + 1.0);
        float _3942 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1231 = ((((1.0 - _1222) * (_1217 + 2.0)) * exp2(log2(isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * (_1217 + 1.0))) + _1222) * _1144;
        float _1232 = _1112 * 0.5;
        float _1233 = _1122 * 0.5;
        float _1234 = _1132 * 0.5;
        float _1235 = dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234));
        float _1240 = (_1235 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1235);
        float _1248 = (dot(vec3(_705, _706, _707), vec3(_1240 * _1232, _1240 * _1233, _1240 * _1234)) + 1.0) * 0.5;
        float _3953 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1257 = sqrt(((_1233 * _1233) + (_1232 * _1232)) + (_1234 * _1234)) / (_1145 + 9.9999997473787516355514526367188e-06);
        float _3964 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1259 = _1258 * 2.0;
        float _1263 = (1.0 - _1258) / (_1258 + 1.0);
        float _3975 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1273 = ((((1.0 - _1264) * (_1259 + 2.0)) * exp2(log2(isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * (_1259 + 1.0))) + _1264) * _1145;
        _1281 = _1112;
        _1283 = _1111;
        _1284 = _1110;
        _1285 = _1122;
        _1286 = _1121;
        _1287 = _1120;
        _1288 = _1132;
        _1289 = _1131;
        _1290 = _1130;
        _1291 = _1145;
        _1292 = _1144;
        _1293 = _1143;
        _1294 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)));
        _1295 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)));
        _1296 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)));
    }
    else
    {
        _1281 = _1282;
        _1283 = _1282;
        _1284 = _1282;
        _1285 = _1282;
        _1286 = _1282;
        _1287 = _1282;
        _1288 = _1282;
        _1289 = _1282;
        _1290 = _1282;
        _1291 = _1282;
        _1292 = _1282;
        _1293 = _1282;
        _1294 = 0.0;
        _1295 = 0.0;
        _1296 = 0.0;
    }
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1324 = fma(_953, cbModelParam._m0[30u].z, fma(_949, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _945));
        float _1328 = fma(_953, cbModelParam._m0[31u].z, fma(_949, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _945));
        float _1332 = fma(_953, cbModelParam._m0[32u].z, fma(_949, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _945));
        float _1355 = _945 + _705;
        float _1356 = _949 + _706;
        float _1357 = _953 + _707;
        float _1367 = fma(_1357, cbModelParam._m0[30u].z, fma(_1356, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1355)) - _1324;
        float _1368 = fma(_1357, cbModelParam._m0[31u].z, fma(_1356, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1355)) - _1328;
        float _1369 = fma(_1357, cbModelParam._m0[32u].z, fma(_1356, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1355)) - _1332;
        float _1373 = inversesqrt(dot(vec3(_1367, _1368, _1369), vec3(_1367, _1368, _1369)));
        float _1386 = ((_1373 * _1367) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1324 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1387 = ((_1373 * _1368) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1328 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1388 = ((_1373 * _1369) / cbModelParam._m0[35u].z) + ((((((_1332 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1390 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1386, _1387, _1388), 0.0);
        vec4 _1397 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1386, _1387, _1388), 0.0);
        vec4 _1404 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1386, _1387, _1388), 0.0);
        vec4 _1411 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1386, _1387, _1388), 0.0);
        float _1423 = exp2((_1390.w + (-0.5)) * 20.0) * 2.0;
        float _1424 = _1423 * (_1390.x + (-0.5));
        float _1425 = _1423 * (_1390.y + (-0.5));
        float _1426 = _1423 * (_1390.z + (-0.5));
        float _1433 = exp2((_1397.w + (-0.5)) * 20.0) * 2.0;
        float _1434 = _1433 * (_1397.x + (-0.5));
        float _1435 = _1433 * (_1397.y + (-0.5));
        float _1436 = _1433 * (_1397.z + (-0.5));
        float _1443 = exp2((_1404.w + (-0.5)) * 20.0) * 2.0;
        float _1444 = _1443 * (_1404.x + (-0.5));
        float _1445 = _1443 * (_1404.y + (-0.5));
        float _1446 = _1443 * (_1404.z + (-0.5));
        float _1453 = exp2((_1411.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1411.x + (-0.5));
        float _1455 = _1453 * (_1411.y + (-0.5));
        float _1456 = _1453 * (_1411.z + (-0.5));
        float _1457 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1458 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1459 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1460 = _1424 * 0.5;
        float _1461 = _1434 * 0.5;
        float _1462 = _1444 * 0.5;
        float _1463 = dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462));
        float _1468 = (_1463 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1463);
        float _1476 = (dot(vec3(_705, _706, _707), vec3(_1468 * _1460, _1468 * _1461, _1468 * _1462)) + 1.0) * 0.5;
        float _4016 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1485 = sqrt(((_1461 * _1461) + (_1460 * _1460)) + (_1462 * _1462)) / (_1457 + 9.9999997473787516355514526367188e-06);
        float _4027 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1487 = _1486 * 2.0;
        float _1491 = (1.0 - _1486) / (_1486 + 1.0);
        float _4038 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1501 = ((((1.0 - _1492) * (_1487 + 2.0)) * exp2(log2(isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_1487 + 1.0))) + _1492) * _1457;
        float _1502 = _1425 * 0.5;
        float _1503 = _1435 * 0.5;
        float _1504 = _1445 * 0.5;
        float _1505 = dot(vec3(_1502, _1503, _1504), vec3(_1502, _1503, _1504));
        float _1510 = (_1505 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1505);
        float _1518 = (dot(vec3(_705, _706, _707), vec3(_1510 * _1502, _1510 * _1503, _1510 * _1504)) + 1.0) * 0.5;
        float _4049 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1527 = sqrt(((_1503 * _1503) + (_1502 * _1502)) + (_1504 * _1504)) / (_1458 + 9.9999997473787516355514526367188e-06);
        float _4060 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1529 = _1528 * 2.0;
        float _1533 = (1.0 - _1528) / (_1528 + 1.0);
        float _4071 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1543 = ((((1.0 - _1534) * (_1529 + 2.0)) * exp2(log2(isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_1529 + 1.0))) + _1534) * _1458;
        float _1544 = _1426 * 0.5;
        float _1545 = _1436 * 0.5;
        float _1546 = _1446 * 0.5;
        float _1547 = dot(vec3(_1544, _1545, _1546), vec3(_1544, _1545, _1546));
        float _1552 = (_1547 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1547);
        float _1560 = (dot(vec3(_705, _706, _707), vec3(_1552 * _1544, _1552 * _1545, _1552 * _1546)) + 1.0) * 0.5;
        float _4082 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1569 = sqrt(((_1545 * _1545) + (_1544 * _1544)) + (_1546 * _1546)) / (_1459 + 9.9999997473787516355514526367188e-06);
        float _4093 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1571 = _1570 * 2.0;
        float _1575 = (1.0 - _1570) / (_1570 + 1.0);
        float _4104 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1585 = ((((1.0 - _1576) * (_1571 + 2.0)) * exp2(log2(isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_1571 + 1.0))) + _1576) * _1459;
        _1593 = _1426;
        _1594 = _1425;
        _1595 = _1424;
        _1596 = _1436;
        _1597 = _1435;
        _1598 = _1434;
        _1599 = _1446;
        _1600 = _1445;
        _1601 = _1444;
        _1602 = _1459;
        _1603 = _1458;
        _1604 = _1457;
        _1605 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)));
        _1606 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)));
        _1607 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0)));
    }
    else
    {
        _1593 = _1282;
        _1594 = _1282;
        _1595 = _1282;
        _1596 = _1282;
        _1597 = _1282;
        _1598 = _1282;
        _1599 = _1282;
        _1600 = _1282;
        _1601 = _1282;
        _1602 = _1282;
        _1603 = _1282;
        _1604 = _1282;
        _1605 = 0.0;
        _1606 = 0.0;
        _1607 = 0.0;
    }
    float _1617 = (cbModelParam._m0[1u].x * (_1605 - _1294)) + _1294;
    float _1618 = (cbModelParam._m0[1u].x * (_1606 - _1295)) + _1295;
    float _1619 = (cbModelParam._m0[1u].x * (_1607 - _1296)) + _1296;
    float _1640 = fma(_1619, cbSceneParam._m0[89u].z, fma(_1618, cbSceneParam._m0[89u].y, _1617 * cbSceneParam._m0[89u].x));
    float _1643 = fma(_1619, cbSceneParam._m0[90u].z, fma(_1618, cbSceneParam._m0[90u].y, _1617 * cbSceneParam._m0[90u].x));
    float _1646 = fma(_1619, cbSceneParam._m0[91u].z, fma(_1618, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1617));
    float _1661 = _890 * 0.5;
    float _1662 = _891 * 0.5;
    float _1663 = _892 * 0.5;
    float _1664 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1595, _1598, _1601, _1604));
    float _1667 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1594, _1597, _1600, _1603));
    float _1670 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1593, _1596, _1599, _1602));
    float _1704;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1677 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1281, _1285, _1288, _1291));
        float _1681 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1283, _1286, _1289, _1292));
        float _1685 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1284, _1287, _1290, _1293));
        float _1692 = dot(vec4(cbModelParam._m0[39u]), vec4(_1661, _1662, _1663, 1.0));
        _1704 = dot(vec3(isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)), isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)), isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1692) ? 0.0 : (isnan(0.0) ? _1692 : max(0.0, _1692))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1704 = 1.0;
    }
    float _1715;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1706 = dot(vec4(cbModelParam._m0[40u]), vec4(_1661, _1662, _1663, 1.0));
        _1715 = dot(vec3(isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0)), isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)), isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1706) ? 0.0 : (isnan(0.0) ? _1706 : max(0.0, _1706))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1715 = 1.0;
    }
    float _1719 = (_1715 * cbModelParam._m0[1u].x) + (_1704 * (1.0 - cbModelParam._m0[1u].x));
    float _1729 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _708);
    float _1730 = isnan(_1729) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1729 : min(cbModelParam._m0[25u].z, _1729));
    float _1812;
    float _1814;
    float _1816;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1779 = fma(_953, cbModelParam._m0[13u].z, fma(_949, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _945)) + cbModelParam._m0[13u].w;
        float _1783 = fma(_953, cbModelParam._m0[14u].z, fma(_949, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _945)) + cbModelParam._m0[14u].w;
        float _1787 = fma(_953, cbModelParam._m0[15u].z, fma(_949, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _945)) + cbModelParam._m0[15u].w;
        float _1790 = fma(_892, cbModelParam._m0[13u].z, fma(_891, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _890));
        float _1793 = fma(_892, cbModelParam._m0[14u].z, fma(_891, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _890));
        float _1796 = fma(_892, cbModelParam._m0[15u].z, fma(_891, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _890));
        float _1824;
        if (_1790 > 0.0)
        {
            _1824 = abs((1.0 - _1779) / _1790);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1790 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1779 + 1.0) / _1790);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1824 = frontier_phi_17_15_ladder;
        }
        float _2027;
        if (_1793 > 0.0)
        {
            _2027 = abs((1.0 - _1783) / _1793);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1793 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1783 + 1.0) / _1793);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2027 = frontier_phi_26_22_ladder;
        }
        float _2281;
        if (_1796 > 0.0)
        {
            _2281 = abs((1.0 - _1787) / _1796);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1796 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1787 + 1.0) / _1796);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2281 = frontier_phi_38_33_ladder;
        }
        float _2283 = isnan(_2027) ? _1824 : (isnan(_1824) ? _2027 : min(_1824, _2027));
        float _2284 = isnan(_2281) ? _2283 : (isnan(_2283) ? _2281 : min(_2283, _2281));
        float _2288 = (_2284 * _1790) + _1779;
        float _2289 = (_2284 * _1793) + _1783;
        float _2290 = (_2284 * _1796) + _1787;
        float _2291 = _2284 * 9.9999997473787516355514526367188e-05;
        float _2293 = (-1.0) - _2291;
        float _2295 = _2291 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2290 > _2295) || ((_2290 < _2293) || ((_2289 > _2295) || ((_2289 < _2293) || ((_2288 < _2293) || (_2288 > _2295))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2418 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2290, cbModelParam._m0[9u].z, fma(_2289, cbModelParam._m0[9u].y, _2288 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2290, cbModelParam._m0[10u].z, fma(_2289, cbModelParam._m0[10u].y, _2288 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2290, cbModelParam._m0[11u].z, fma(_2289, cbModelParam._m0[11u].y, _2288 * cbModelParam._m0[11u].x))), _1730);
            frontier_phi_16_38_ladder = _2418.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2418.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2418.x * cbModelParam._m0[1u].y;
        }
        _1812 = frontier_phi_16_38_ladder_2;
        _1814 = frontier_phi_16_38_ladder_1;
        _1816 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1800 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_890, _891, _892), _1730);
        _1812 = _1800.x * cbModelParam._m0[1u].y;
        _1814 = _1800.y * cbModelParam._m0[1u].y;
        _1816 = _1800.z * cbModelParam._m0[1u].y;
    }
    float _1820 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _708);
    float _1821 = isnan(_1820) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1820 : min(cbModelParam._m0[25u].w, _1820));
    float _1911;
    float _1913;
    float _1915;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1875 = fma(_953, cbModelParam._m0[21u].z, fma(_949, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _945)) + cbModelParam._m0[21u].w;
        float _1879 = fma(_953, cbModelParam._m0[22u].z, fma(_949, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _945)) + cbModelParam._m0[22u].w;
        float _1883 = fma(_953, cbModelParam._m0[23u].z, fma(_949, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _945)) + cbModelParam._m0[23u].w;
        float _1886 = fma(_892, cbModelParam._m0[21u].z, fma(_891, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _890));
        float _1889 = fma(_892, cbModelParam._m0[22u].z, fma(_891, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _890));
        float _1892 = fma(_892, cbModelParam._m0[23u].z, fma(_891, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _890));
        float _2032;
        if (_1886 > 0.0)
        {
            _2032 = abs((1.0 - _1875) / _1886);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1886 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1875 + 1.0) / _1886);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2032 = frontier_phi_28_24_ladder;
        }
        float _2308;
        if (_1889 > 0.0)
        {
            _2308 = abs((1.0 - _1879) / _1889);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1889 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1879 + 1.0) / _1889);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2308 = frontier_phi_40_35_ladder;
        }
        float _2521;
        if (_1892 > 0.0)
        {
            _2521 = abs((1.0 - _1883) / _1892);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1892 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1883 + 1.0) / _1892);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2521 = frontier_phi_49_46_ladder;
        }
        float _2523 = isnan(_2308) ? _2032 : (isnan(_2032) ? _2308 : min(_2032, _2308));
        float _2524 = isnan(_2521) ? _2523 : (isnan(_2523) ? _2521 : min(_2523, _2521));
        float _2528 = (_2524 * _1886) + _1875;
        float _2529 = (_2524 * _1889) + _1879;
        float _2530 = (_2524 * _1892) + _1883;
        float _2531 = _2524 * 9.9999997473787516355514526367188e-05;
        float _2532 = (-1.0) - _2531;
        float _2534 = _2531 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2530 > _2534) || ((_2530 < _2532) || ((_2529 > _2534) || ((_2529 < _2532) || ((_2528 < _2532) || (_2528 > _2534))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2729 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2530, cbModelParam._m0[17u].z, fma(_2529, cbModelParam._m0[17u].y, _2528 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2530, cbModelParam._m0[18u].z, fma(_2529, cbModelParam._m0[18u].y, _2528 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2530, cbModelParam._m0[19u].z, fma(_2529, cbModelParam._m0[19u].y, _2528 * cbModelParam._m0[19u].x))), _1821);
            frontier_phi_25_49_ladder = _2729.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2729.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2729.x * cbModelParam._m0[1u].z;
        }
        _1911 = frontier_phi_25_49_ladder_2;
        _1913 = frontier_phi_25_49_ladder_1;
        _1915 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1895 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_890, _891, _892), _1821);
        _1911 = _1895.x * cbModelParam._m0[1u].z;
        _1913 = _1895.y * cbModelParam._m0[1u].z;
        _1915 = _1895.z * cbModelParam._m0[1u].z;
    }
    float _1928 = (((_916 * _866) + _917) * _882) * ((cbModelParam._m0[1u].w * (_1911 - _1812)) + _1812);
    float _1930 = (((_916 * _868) + _917) * _882) * ((cbModelParam._m0[1u].w * (_1913 - _1814)) + _1814);
    float _1932 = (((_916 * _869) + _917) * _882) * ((cbModelParam._m0[1u].w * (_1915 - _1816)) + _1816);
    float _1935 = fma(_1932, cbSceneParam._m0[89u].z, fma(_1930, cbSceneParam._m0[89u].y, _1928 * cbSceneParam._m0[89u].x));
    float _1938 = fma(_1932, cbSceneParam._m0[90u].z, fma(_1930, cbSceneParam._m0[90u].y, _1928 * cbSceneParam._m0[90u].x));
    float _1941 = fma(_1932, cbSceneParam._m0[91u].z, fma(_1930, cbSceneParam._m0[91u].y, _1928 * cbSceneParam._m0[91u].x));
    uvec4 _1951 = floatBitsToUint(cbInstanceData._m0[_249 + 5u]);
    uint _1953 = _1951.x * 14u;
    uint _1954 = _1953 + 13u;
    float _1961 = _882 + (-1.0);
    float _1966 = (cbLight._m0[_1954].x * _1961) + 1.0;
    float _1967 = (cbLight._m0[_1954].y * _1961) + 1.0;
    float _1968 = (cbLight._m0[_1954].z * _1961) + 1.0;
    float _1969 = (cbLight._m0[_1954].w * _1961) + 1.0;
    uint _1970 = _1953 + 5u;
    float _1976 = isnan(1.0) ? _1967 : (isnan(_1967) ? 1.0 : min(_1967, 1.0));
    uint _1980 = _1953 + 4u;
    float _1986 = isnan(1.0) ? _1966 : (isnan(_1966) ? 1.0 : min(_1966, 1.0));
    uint _1990 = _1953 | 1u;
    float _2001 = dot(vec3(cbLight._m0[_1953].xyz), vec3(_705, _706, _707));
    float _2004 = dot(vec3(cbLight._m0[_1990].xyz), vec3(_705, _706, _707));
    float _4240 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _4251 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _2009 = (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * 0.3183098733425140380859375;
    float _2011 = (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * 0.3183098733425140380859375;
    float _2018 = ((cbLight._m0[_1970].x * _1976) * _2011) + ((cbLight._m0[_1980].x * _1986) * _2009);
    float _2019 = ((_1976 * cbLight._m0[_1970].y) * _2011) + ((_1986 * cbLight._m0[_1980].y) * _2009);
    float _2020 = ((_1976 * cbLight._m0[_1970].z) * _2011) + ((_1986 * cbLight._m0[_1980].z) * _2009);
    uvec4 _2024 = floatBitsToUint(cbLight._m0[_1953 + 12u]);
    bool _2026 = _2024.x == 0u;
    float _2037;
    float _2039;
    float _2041;
    if (_2026)
    {
        _2037 = _2018;
        _2039 = _2019;
        _2041 = _2020;
    }
    else
    {
        uint _2045 = _1953 + 6u;
        float _2061 = (dot(vec3(cbLight._m0[_1953 + 2u].xyz), vec3(_705, _706, _707)) * 0.5) + 0.5;
        float _2062 = _2061 * _2061;
        float _4262 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
        float _2063 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _2064 = isnan(1.0) ? _1968 : (isnan(_1968) ? 1.0 : min(_1968, 1.0));
        _2037 = (((cbLight._m0[_2045].x * 0.3183098733425140380859375) * _2063) * _2064) + _2018;
        _2039 = (((cbLight._m0[_2045].y * 0.3183098733425140380859375) * _2063) * _2064) + _2019;
        _2041 = (((cbLight._m0[_2045].z * 0.3183098733425140380859375) * _2063) * _2064) + _2020;
    }
    bool _2044 = _2024.y == 0u;
    float _2082;
    float _2084;
    float _2086;
    if (_2044)
    {
        _2082 = _2037;
        _2084 = _2039;
        _2086 = _2041;
    }
    else
    {
        uint _2252 = _1953 + 7u;
        float _2268 = (dot(vec3(cbLight._m0[_1953 + 3u].xyz), vec3(_705, _706, _707)) * 0.5) + 0.5;
        float _2269 = _2268 * _2268;
        float _4278 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        float _2270 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _2271 = isnan(1.0) ? _1969 : (isnan(_1969) ? 1.0 : min(_1969, 1.0));
        _2082 = (((cbLight._m0[_2252].x * 0.3183098733425140380859375) * _2270) * _2271) + _2037;
        _2084 = (((cbLight._m0[_2252].y * 0.3183098733425140380859375) * _2270) * _2271) + _2039;
        _2086 = (((cbLight._m0[_2252].z * 0.3183098733425140380859375) * _2270) * _2271) + _2041;
    }
    uint _2089 = _1953 + 8u;
    float _2102 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1953].w)) * _708) * 0.949999988079071044921875);
    float _2103 = _2102 * _2102;
    float _2104 = cbLight._m0[_1953].x + _784;
    float _2105 = cbLight._m0[_1953].y + _785;
    float _2106 = cbLight._m0[_1953].z + _786;
    float _2110 = inversesqrt(dot(vec3(_2104, _2105, _2106), vec3(_2104, _2105, _2106)));
    float _2111 = _2110 * _2104;
    float _2112 = _2110 * _2105;
    float _2113 = _2110 * _2106;
    float _2114 = dot(vec3(_705, _706, _707), vec3(cbLight._m0[_1953].xyz));
    float _4294 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2117 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
    float _4305 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _2118 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
    float _2119 = dot(vec3(_705, _706, _707), vec3(_2111, _2112, _2113));
    float _4316 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _2122 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
    float _2123 = dot(vec3(cbLight._m0[_1953].xyz), vec3(_2111, _2112, _2113));
    float _4327 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2127 = _2103 * _2103;
    float _2131 = ((_2122 * _2122) * (_2127 + (-1.0))) + 1.0;
    float _2139 = exp2(log2(1.0 - (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0)))) * 5.0);
    float _2140 = 0.959999978542327880859375 - _863;
    float _2142 = 0.959999978542327880859375 - _864;
    float _2143 = 0.959999978542327880859375 - _865;
    float _2150 = 1.0 - _2103;
    float _2161 = (0.5 / (((_2118 * ((_2117 * _2150) + _2103)) + 9.9999999392252902907785028219223e-09) + (((_2118 * _2150) + _2103) * _2117))) * _2117;
    float _4338 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2163 = (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_2127 / ((_2131 * _2131) * 3.141590118408203125));
    uint _2174 = _1953 + 9u;
    float _2185 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1990].w)) * _708) * 0.949999988079071044921875);
    float _2186 = _2185 * _2185;
    float _2187 = cbLight._m0[_1990].x + _784;
    float _2188 = cbLight._m0[_1990].y + _785;
    float _2189 = cbLight._m0[_1990].z + _786;
    float _2193 = inversesqrt(dot(vec3(_2187, _2188, _2189), vec3(_2187, _2188, _2189)));
    float _2194 = _2193 * _2187;
    float _2195 = _2193 * _2188;
    float _2196 = _2193 * _2189;
    float _2197 = dot(vec3(_705, _706, _707), vec3(cbLight._m0[_1990].xyz));
    float _4349 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2200 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
    float _2201 = dot(vec3(_705, _706, _707), vec3(_2194, _2195, _2196));
    float _4360 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2204 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
    float _2205 = dot(vec3(cbLight._m0[_1990].xyz), vec3(_2194, _2195, _2196));
    float _4371 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2209 = _2186 * _2186;
    float _2213 = ((_2204 * _2204) * (_2209 + (-1.0))) + 1.0;
    float _2220 = exp2(log2(1.0 - (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0)))) * 5.0);
    float _2227 = 1.0 - _2186;
    float _2237 = (0.5 / (((_2118 * ((_2200 * _2227) + _2186)) + 9.9999999392252902907785028219223e-09) + (((_2118 * _2227) + _2186) * _2200))) * _2200;
    float _4382 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
    float _2239 = (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * (_2209 / ((_2213 * _2213) * 3.141590118408203125));
    float _2249 = (((((_2220 * _2140) + _866) * cbLight._m0[_2174].x) * _2239) * _1976) + (((((_2139 * _2140) + _866) * cbLight._m0[_2089].x) * _2163) * _1986);
    float _2250 = (((((_2220 * _2142) + _868) * cbLight._m0[_2174].y) * _2239) * _1976) + (((((_2139 * _2142) + _868) * cbLight._m0[_2089].y) * _2163) * _1986);
    float _2251 = (((((_2220 * _2143) + _869) * cbLight._m0[_2174].z) * _2239) * _1976) + (((((_2139 * _2143) + _869) * cbLight._m0[_2089].z) * _2163) * _1986);
    float _2313;
    float _2315;
    float _2317;
    if (_2026)
    {
        _2313 = _2249;
        _2315 = _2250;
        _2317 = _2251;
    }
    else
    {
        uint _2319 = _1953 + 2u;
        uint _2323 = _1953 + 10u;
        float _2337 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2319].w)) * _708) * 0.949999988079071044921875);
        float _2338 = _2337 * _2337;
        float _2339 = cbLight._m0[_2319].x + _784;
        float _2340 = cbLight._m0[_2319].y + _785;
        float _2341 = cbLight._m0[_2319].z + _786;
        float _2345 = inversesqrt(dot(vec3(_2339, _2340, _2341), vec3(_2339, _2340, _2341)));
        float _2346 = _2345 * _2339;
        float _2347 = _2345 * _2340;
        float _2348 = _2345 * _2341;
        float _2349 = dot(vec3(_705, _706, _707), vec3(cbLight._m0[_2319].xyz));
        float _4393 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2352 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _2353 = dot(vec3(_705, _706, _707), vec3(_2346, _2347, _2348));
        float _4404 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2356 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _2357 = dot(vec3(cbLight._m0[_2319].xyz), vec3(_2346, _2347, _2348));
        float _4415 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2361 = _2338 * _2338;
        float _2365 = ((_2356 * _2356) * (_2361 + (-1.0))) + 1.0;
        float _2372 = exp2(log2(1.0 - (isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0)))) * 5.0);
        float _2379 = 1.0 - _2338;
        float _2389 = (0.5 / (((_2118 * ((_2352 * _2379) + _2338)) + 9.9999999392252902907785028219223e-09) + (((_2118 * _2379) + _2338) * _2352))) * _2352;
        float _4426 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2391 = (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0))) * (_2361 / ((_2365 * _2365) * 3.141590118408203125));
        float _2392 = isnan(1.0) ? _1968 : (isnan(_1968) ? 1.0 : min(_1968, 1.0));
        _2313 = (((((_2372 * _2140) + _866) * cbLight._m0[_2323].x) * _2391) * _2392) + _2249;
        _2315 = (((((_2372 * _2142) + _868) * cbLight._m0[_2323].y) * _2391) * _2392) + _2250;
        _2317 = (((((_2372 * _2143) + _869) * cbLight._m0[_2323].z) * _2391) * _2392) + _2251;
    }
    float _2427;
    float _2429;
    float _2431;
    if (_2044)
    {
        _2427 = _2313;
        _2429 = _2315;
        _2431 = _2317;
    }
    else
    {
        uint _2438 = _1953 + 3u;
        uint _2442 = _1953 + 11u;
        float _2456 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2438].w)) * _708) * 0.949999988079071044921875);
        float _2457 = _2456 * _2456;
        float _2458 = cbLight._m0[_2438].x + _784;
        float _2459 = cbLight._m0[_2438].y + _785;
        float _2460 = cbLight._m0[_2438].z + _786;
        float _2464 = inversesqrt(dot(vec3(_2458, _2459, _2460), vec3(_2458, _2459, _2460)));
        float _2465 = _2464 * _2458;
        float _2466 = _2464 * _2459;
        float _2467 = _2464 * _2460;
        float _2468 = dot(vec3(_705, _706, _707), vec3(cbLight._m0[_2438].xyz));
        float _4442 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2471 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _2472 = dot(vec3(_705, _706, _707), vec3(_2465, _2466, _2467));
        float _4453 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2475 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _2476 = dot(vec3(cbLight._m0[_2438].xyz), vec3(_2465, _2466, _2467));
        float _4464 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2480 = _2457 * _2457;
        float _2484 = ((_2475 * _2475) * (_2480 + (-1.0))) + 1.0;
        float _2491 = exp2(log2(1.0 - (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0)))) * 5.0);
        float _2498 = 1.0 - _2457;
        float _2508 = (0.5 / (((_2118 * ((_2471 * _2498) + _2457)) + 9.9999999392252902907785028219223e-09) + (((_2118 * _2498) + _2457) * _2471))) * _2471;
        float _4475 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2510 = (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (_2480 / ((_2484 * _2484) * 3.141590118408203125));
        float _2511 = isnan(1.0) ? _1969 : (isnan(_1969) ? 1.0 : min(_1969, 1.0));
        _2427 = (((((_2491 * _2140) + _866) * cbLight._m0[_2442].x) * _2510) * _2511) + _2313;
        _2429 = (((((_2491 * _2142) + _868) * cbLight._m0[_2442].y) * _2510) * _2511) + _2315;
        _2431 = (((((_2491 * _2143) + _869) * cbLight._m0[_2442].z) * _2510) * _2511) + _2317;
    }
    float _2646;
    float _2648;
    float _2650;
    float _2652;
    float _2654;
    float _2656;
    if (_1951.y == 0u)
    {
        float _2586 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2587 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2586;
        float _2588 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2586;
        float _2589 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2586;
        uvec4 _2601 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2602 = _2601.x;
        uint _2613 = uint((float(_2601.y) * floor(float(uint(cbSceneParam._m0[85u].y * _805) / _2602))) + floor(float(uint(cbSceneParam._m0[85u].x * _804) / _2602)));
        float _2623 = (log2(_2589 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2624 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        uint _2627 = uint(isnan(14.0) ? _2624 : (isnan(_2624) ? 14.0 : min(_2624, 14.0)));
        uvec4 _2632 = texelFetch(g_lightClusterGridBuffer, int(((_2627 << 2u) + (_2613 << 6u)) >> 2u));
        uint _2633 = _2632.x;
        uint _2634 = _2601.z;
        float _2734;
        float _2736;
        float _2738;
        float _2740;
        float _2742;
        float _2744;
        if (((((1u << ((_2634 >> 4u) & 15u)) + 4294967295u) & _2633) == 0u) || ((_2634 & 240u) == 0u))
        {
            _2734 = 0.0;
            _2736 = 0.0;
            _2738 = 0.0;
            _2740 = 0.0;
            _2742 = 0.0;
            _2744 = 0.0;
        }
        else
        {
            float _2735;
            float _2737;
            float _2739;
            float _2741;
            float _2743;
            float _2745;
            float _2887 = 0.0;
            float _2888 = 0.0;
            float _2889 = 0.0;
            float _2890 = 0.0;
            float _2891 = 0.0;
            float _2892 = 0.0;
            uint _2893 = 0u;
            uint _2902;
            bool _2903;
            for (;;)
            {
                _2902 = texelFetch(g_lightClassification, int((((_2627 << 5u) + (_2613 << 9u)) + (_2893 << 2u)) >> 2u)).x;
                _2903 = _2902 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2903)
                {
                    frontier_phi_66_pred = _2887;
                    frontier_phi_66_pred_1 = _2892;
                    frontier_phi_66_pred_2 = _2891;
                    frontier_phi_66_pred_3 = _2890;
                    frontier_phi_66_pred_4 = _2889;
                    frontier_phi_66_pred_5 = _2888;
                }
                else
                {
                    float _3032;
                    float _3033;
                    float _3034;
                    float _3035;
                    float _3036;
                    float _3037;
                    uint _3038;
                    _3032 = _2887;
                    _3033 = _2888;
                    _3034 = _2889;
                    _3035 = _2890;
                    _3036 = _2891;
                    _3037 = _2892;
                    _3038 = _2902;
                    float _2959;
                    float _2960;
                    float _2961;
                    float _2962;
                    float _2963;
                    float _2964;
                    for (;;)
                    {
                        uint _3042 = uint(findLSB(_3038)) + (_2893 << 5u);
                        uint _3039 = (_3038 + 4294967295u) & _3038;
                        uint _3044 = _3042 * 48u;
                        vec4 _3058 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3044)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 3u)).x));
                        uint _3064 = (_3042 * 48u) + 4u;
                        vec4 _3077 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3064)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 3u)).x));
                        uint _3083 = (_3042 * 48u) + 8u;
                        vec3 _3094 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3083)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 2u)).x));
                        float _3098 = _3058.x - _2587;
                        float _3099 = _3058.y - _2588;
                        float _3100 = _3058.z - _2589;
                        float _3101 = dot(vec3(_3098, _3099, _3100), vec3(_3098, _3099, _3100));
                        float _3104 = inversesqrt(_3101);
                        float _3105 = _3104 * _3098;
                        float _3106 = _3104 * _3099;
                        float _3107 = _3104 * _3100;
                        float _3108 = dot(vec3(_823, _826, _829), vec3(_3105, _3106, _3107));
                        float _3113 = 1.0 - (_3101 * _3058.w);
                        float _4501 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                        float _3114 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
                        float _3115 = sqrt(_3101) * _3077.w;
                        float _3118 = 1.39999997615814208984375 / (_3115 + 1.39999997615814208984375);
                        float _3119 = _3118 * _3118;
                        float _3122 = ((1.0 - _3119) * _3108) + _3119;
                        float _3125 = _3115 * _3115;
                        float _3129 = ((isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0))) * _3114) / ((_3125 * 0.699999988079071044921875) + 1.0);
                        float _3133 = (-0.0) - _2587;
                        float _3134 = (-0.0) - _2588;
                        float _3135 = (-0.0) - _2589;
                        float _3139 = inversesqrt(dot(vec3(_3133, _3134, _3135), vec3(_3133, _3134, _3135)));
                        float _3140 = _3139 * _3133;
                        float _3141 = _3139 * _3134;
                        float _3142 = _3139 * _3135;
                        float _3150 = exp2(log2(1.0 / ((_3125 * 3.5) + 5.0)) * 0.25);
                        float _3151 = 1.0 - _898;
                        float _3158 = sqrt(1.0 - ((1.0 - (_3151 * _3151)) * (1.0 - (_3150 * _3150))));
                        float _3159 = _3158 * _3158;
                        float _3160 = _3159 * _3159;
                        float _3161 = _3140 + _3105;
                        float _3162 = _3141 + _3106;
                        float _3163 = _3142 + _3107;
                        float _3167 = inversesqrt(dot(vec3(_3161, _3162, _3163), vec3(_3161, _3162, _3163)));
                        float _3171 = dot(vec3(_823, _826, _829), vec3(_3140, _3141, _3142));
                        float _4517 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                        float _3174 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                        float _3175 = dot(vec3(_823, _826, _829), vec3(_3167 * _3161, _3167 * _3162, _3167 * _3163));
                        float _4528 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                        float _3178 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
                        float _3182 = ((_3178 * _3178) * (_3160 + (-1.0))) + 1.0;
                        float _3183 = _3118 * _3159;
                        float _3184 = _3183 * _3183;
                        float _3187 = ((1.0 - _3184) * _3108) + _3184;
                        float _4539 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                        float _3188 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                        float _3189 = 1.0 - _3159;
                        float _3199 = (0.5 / (((_3188 * ((_3174 * _3189) + _3159)) + 9.9999999392252902907785028219223e-09) + (((_3188 * _3189) + _3159) * _3174))) * _3188;
                        float _4550 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                        float _3209 = (((_3160 * 3.1415927410125732421875) * (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0)))) / ((_3182 * _3182) * ((_3125 * 2.1991131305694580078125) + 3.141590118408203125))) * _3114;
                        _2962 = (_3129 * _3077.x) + _3035;
                        _2963 = (_3129 * _3077.y) + _3036;
                        _2964 = (_3129 * _3077.z) + _3037;
                        _2959 = (_3209 * _3094.x) + _3032;
                        _2960 = (_3209 * _3094.y) + _3033;
                        _2961 = (_3209 * _3094.z) + _3034;
                        if (_3039 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3032 = _2959;
                            _3033 = _2960;
                            _3034 = _2961;
                            _3035 = _2962;
                            _3036 = _2963;
                            _3037 = _2964;
                            _3038 = _3039;
                        }
                    }
                    frontier_phi_66_pred = _2959;
                    frontier_phi_66_pred_1 = _2964;
                    frontier_phi_66_pred_2 = _2963;
                    frontier_phi_66_pred_3 = _2962;
                    frontier_phi_66_pred_4 = _2961;
                    frontier_phi_66_pred_5 = _2960;
                }
                _2735 = frontier_phi_66_pred;
                _2745 = frontier_phi_66_pred_1;
                _2743 = frontier_phi_66_pred_2;
                _2741 = frontier_phi_66_pred_3;
                _2739 = frontier_phi_66_pred_4;
                _2737 = frontier_phi_66_pred_5;
                uint _2894 = _2893 + 1u;
                if (_2894 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2887 = _2735;
                    _2888 = _2737;
                    _2889 = _2739;
                    _2890 = _2741;
                    _2891 = _2743;
                    _2892 = _2745;
                    _2893 = _2894;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2734 = _2735;
            _2736 = _2737;
            _2738 = _2739;
            _2740 = _2741;
            _2742 = _2743;
            _2744 = _2745;
        }
        uvec4 _2748 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2749 = _2748.z;
        uint _2751 = (_2749 >> 8u) & 15u;
        float _2855;
        float _2857;
        float _2859;
        float _2861;
        float _2863;
        float _2865;
        if (((4294967295u << _2751) & _2633) == 0u)
        {
            _2855 = _2734;
            _2857 = _2736;
            _2859 = _2738;
            _2861 = _2740;
            _2863 = _2742;
            _2865 = _2744;
        }
        else
        {
            float _2880 = inversesqrt(dot(vec3(_2587, _2588, _2589), vec3(_2587, _2588, _2589)));
            float _2881 = _2880 * _2587;
            float _2882 = _2880 * _2588;
            float _2883 = _2880 * _2589;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2751 < ((_2749 >> 12u) & 15u))
            {
                float _2856;
                float _2858;
                float _2860;
                float _2862;
                float _2864;
                float _2866;
                float _3015 = _2734;
                float _3016 = _2736;
                float _3017 = _2738;
                float _3018 = _2740;
                float _3019 = _2742;
                float _3020 = _2744;
                uint _3021 = _2751;
                uint _3030;
                bool _3031;
                for (;;)
                {
                    _3030 = texelFetch(g_lightClassification, int((((_2627 << 5u) + (_2613 << 9u)) + (_3021 << 2u)) >> 2u)).x;
                    _3031 = _3030 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3031)
                    {
                        frontier_phi_77_pred = _3020;
                        frontier_phi_77_pred_1 = _3019;
                        frontier_phi_77_pred_2 = _3018;
                        frontier_phi_77_pred_3 = _3017;
                        frontier_phi_77_pred_4 = _3016;
                        frontier_phi_77_pred_5 = _3015;
                    }
                    else
                    {
                        float _3223;
                        float _3224;
                        float _3225;
                        float _3226;
                        float _3227;
                        float _3228;
                        float _3517;
                        float _3518;
                        float _3519;
                        float _3520;
                        float _3521;
                        float _3522;
                        float _3236 = _3015;
                        float _3237 = _3016;
                        float _3238 = _3017;
                        float _3239 = _3018;
                        float _3240 = _3019;
                        float _3241 = _3020;
                        uint _3242 = _3030;
                        uint _3243;
                        vec4 _3268;
                        float _3269;
                        vec4 _3284;
                        vec3 _3296;
                        vec4 _3311;
                        vec4 _3327;
                        float _3373;
                        bool _3374;
                        for (;;)
                        {
                            uint _3253 = ((_3021 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3242));
                            _3243 = (_3242 + 4294967295u) & _3242;
                            uint _3255 = _3253 * 40u;
                            _3268 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3255)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 3u)).x));
                            _3269 = _3268.w;
                            uint _3271 = (_3253 * 40u) + 4u;
                            _3284 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3271)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 3u)).x));
                            uint _3286 = (_3253 * 40u) + 8u;
                            _3296 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3286)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 2u)).x));
                            uint _3298 = (_3253 * 40u) + 16u;
                            _3311 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3298)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 3u)).x));
                            uint _3314 = (_3253 * 40u) + 20u;
                            _3327 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3314)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 3u)).x));
                            uint _3329 = (_3253 * 40u) + 24u;
                            vec4 _3342 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3329)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 3u)).x));
                            uint _3348 = (_3253 * 40u) + 28u;
                            vec4 _3361 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3348)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 3u)).x));
                            _3373 = fma(_2589, _3361.z, fma(_2588, _3361.y, _3361.x * _2587)) + _3361.w;
                            _3374 = !((fma(_2589, _3342.z, fma(_2588, _3342.y, _3342.x * _2587)) + _3342.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3374)
                            {
                                float _3401 = _3268.x - _2587;
                                float _3402 = _3268.y - _2588;
                                float _3403 = _3268.z - _2589;
                                float _3404 = dot(vec3(_3401, _3402, _3403), vec3(_3401, _3402, _3403));
                                float _3407 = inversesqrt(_3404);
                                float _3408 = _3407 * _3401;
                                float _3409 = _3407 * _3402;
                                float _3410 = _3407 * _3403;
                                float _3414 = 1.0 - (_3404 / (_3269 * _3269));
                                float _4561 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                                float _3415 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
                                float _3419 = sqrt(_3404) * _3284.w;
                                float _3421 = 1.39999997615814208984375 / (_3419 + 1.39999997615814208984375);
                                float _3422 = _3421 * _3421;
                                float _3425 = ((1.0 - _3422) * dot(vec3(_3408, _3409, _3410), vec3(_823, _826, _829))) + _3422;
                                float _3428 = _3419 * _3419;
                                float _3432 = (fma(_2589, _3311.z, fma(_2588, _3311.y, _3311.x * _2587)) + _3311.w) / _3373;
                                float _3433 = (fma(_2589, _3327.z, fma(_2588, _3327.y, _3327.x * _2587)) + _3327.w) / _3373;
                                float _3437 = 1.0 - dot(vec2(_3432, _3433), vec2(_3432, _3433));
                                float _4577 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                                float _3438 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                                float _3439 = _3438 * (((isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0))) * _3415) / ((_3428 * 0.699999988079071044921875) + 1.0));
                                float _3451 = exp2(log2(1.0 / ((_3428 * 3.5) + 5.0)) * 0.25);
                                float _3452 = 1.0 - _898;
                                float _3459 = sqrt(1.0 - ((1.0 - (_3452 * _3452)) * (1.0 - (_3451 * _3451))));
                                float _3460 = _3459 * _3459;
                                float _3461 = _3460 * _3460;
                                float _3462 = _3408 - _2881;
                                float _3463 = _3409 - _2882;
                                float _3464 = _3410 - _2883;
                                float _3468 = inversesqrt(dot(vec3(_3462, _3463, _3464), vec3(_3462, _3463, _3464)));
                                float _3472 = dot(vec3(_823, _826, _829), vec3((-0.0) - _2881, (-0.0) - _2882, (-0.0) - _2883));
                                float _4588 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                                float _3475 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                                float _3476 = dot(vec3(_823, _826, _829), vec3(_3468 * _3462, _3468 * _3463, _3468 * _3464));
                                float _4599 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                                float _3479 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                                float _3483 = ((_3479 * _3479) * (_3461 + (-1.0))) + 1.0;
                                float _3484 = _3421 * _3460;
                                float _3485 = _3484 * _3484;
                                float _3491 = ((1.0 - _3485) * dot(vec3(_823, _826, _829), vec3(_3408, _3409, _3410))) + _3485;
                                float _4610 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                                float _3492 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
                                float _3493 = 1.0 - _3460;
                                float _3503 = (0.5 / (((_3492 * ((_3475 * _3493) + _3460)) + 9.9999999392252902907785028219223e-09) + (((_3492 * _3493) + _3460) * _3475))) * _3492;
                                float _4621 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                                float _3513 = (_3438 * _3415) * (((_3461 * 3.1415927410125732421875) * (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0)))) / ((_3483 * _3483) * ((_3428 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3439 * _3284.y;
                                frontier_phi_83_pred_1 = _3439 * _3284.x;
                                frontier_phi_83_pred_2 = _3513 * _3296.z;
                                frontier_phi_83_pred_3 = _3513 * _3296.y;
                                frontier_phi_83_pred_4 = _3513 * _3296.x;
                                frontier_phi_83_pred_5 = _3439 * _3284.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3521 = frontier_phi_83_pred;
                            _3520 = frontier_phi_83_pred_1;
                            _3519 = frontier_phi_83_pred_2;
                            _3518 = frontier_phi_83_pred_3;
                            _3517 = frontier_phi_83_pred_4;
                            _3522 = frontier_phi_83_pred_5;
                            _3226 = _3520 + _3239;
                            _3227 = _3521 + _3240;
                            _3228 = _3522 + _3241;
                            _3223 = _3517 + _3236;
                            _3224 = _3518 + _3237;
                            _3225 = _3519 + _3238;
                            if (_3243 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3236 = _3223;
                                _3237 = _3224;
                                _3238 = _3225;
                                _3239 = _3226;
                                _3240 = _3227;
                                _3241 = _3228;
                                _3242 = _3243;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3228;
                        frontier_phi_77_pred_1 = _3227;
                        frontier_phi_77_pred_2 = _3226;
                        frontier_phi_77_pred_3 = _3225;
                        frontier_phi_77_pred_4 = _3224;
                        frontier_phi_77_pred_5 = _3223;
                    }
                    _2866 = frontier_phi_77_pred;
                    _2864 = frontier_phi_77_pred_1;
                    _2862 = frontier_phi_77_pred_2;
                    _2860 = frontier_phi_77_pred_3;
                    _2858 = frontier_phi_77_pred_4;
                    _2856 = frontier_phi_77_pred_5;
                    uint _3022 = _3021 + 1u;
                    if (_3022 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3015 = _2856;
                        _3016 = _2858;
                        _3017 = _2860;
                        _3018 = _2862;
                        _3019 = _2864;
                        _3020 = _2866;
                        _3021 = _3022;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2860;
                frontier_phi_58_59_ladder_1 = _2866;
                frontier_phi_58_59_ladder_2 = _2864;
                frontier_phi_58_59_ladder_3 = _2862;
                frontier_phi_58_59_ladder_4 = _2858;
                frontier_phi_58_59_ladder_5 = _2856;
            }
            else
            {
                frontier_phi_58_59_ladder = _2738;
                frontier_phi_58_59_ladder_1 = _2744;
                frontier_phi_58_59_ladder_2 = _2742;
                frontier_phi_58_59_ladder_3 = _2740;
                frontier_phi_58_59_ladder_4 = _2736;
                frontier_phi_58_59_ladder_5 = _2734;
            }
            _2855 = frontier_phi_58_59_ladder_5;
            _2857 = frontier_phi_58_59_ladder_4;
            _2859 = frontier_phi_58_59_ladder;
            _2861 = frontier_phi_58_59_ladder_3;
            _2863 = frontier_phi_58_59_ladder_2;
            _2865 = frontier_phi_58_59_ladder_1;
        }
        float _2870 = isnan(1.0) ? _882 : (isnan(_882) ? 1.0 : min(_882, 1.0));
        _2646 = (_2870 * _2861) + _2082;
        _2648 = (_2870 * _2863) + _2084;
        _2650 = (_2870 * _2865) + _2086;
        _2652 = ((_2855 * _866) * _2870) + _2427;
        _2654 = ((_2857 * _868) * _2870) + _2429;
        _2656 = ((_2859 * _869) * _2870) + _2431;
    }
    else
    {
        _2646 = _2082;
        _2648 = _2084;
        _2650 = _2086;
        _2652 = _2427;
        _2654 = _2429;
        _2656 = _2431;
    }
    float _4637 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _4648 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _4659 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _2673 = ((isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2646 + ((isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))) * _882))) + ((_2652 + ((isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0))) * _1719)) * cbPerFrame._m0[3u].x);
    float _2674 = ((isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0))) * (_2648 + ((isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0))) * _882))) + ((_2654 + ((isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0))) * _1719)) * cbPerFrame._m0[3u].x);
    float _2675 = ((isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0))) * (_2650 + ((isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))) * _882))) + ((_2656 + ((isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0))) * _1719)) * cbPerFrame._m0[3u].x);
    uint _2676 = _249 + 6u;
    float _2684 = _804 / cbSceneParam._m0[86u].x;
    float _2685 = _805 / cbSceneParam._m0[86u].y;
    vec4 _2699 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2684, _2685, (log2((isnan(cbSceneParam._m0[77u].w) ? _727 : (isnan(_727) ? cbSceneParam._m0[77u].w : min(_727, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2701 = _2699.x;
    float _2702 = _2699.y;
    float _2703 = _2699.z;
    float _2704 = _2699.w;
    float _2797;
    float _2799;
    float _2801;
    float _2803;
    if (_727 > cbSceneParam._m0[78u].w)
    {
        float _2759 = isnan(_727) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _727 : min(cbSceneParam._m0[80u].w, _727));
        float _2760 = _2759 / _727;
        float _2771 = _2760 * _777;
        float _2772 = _778 * _2760;
        float _2773 = (-0.0) - _2772;
        float _2775 = _2760 * _779;
        float _2777 = (cbSceneParam._m0[77u].w * _2773) / _2759;
        float _2778 = _2777 + cbSceneParam._m0[79u].w;
        float _2779 = cbSceneParam._m0[79u].w - _2772;
        float _2785 = sqrt(((_2771 * _2771) + (_2772 * _2772)) + (_2775 * _2775));
        float _2788 = (1.0 - (cbSceneParam._m0[77u].w / _2759)) * _2785;
        float _2793 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2795 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2972;
        if (abs((_2773 - _2777) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2972 = ((((_2778 > 0.0) ? exp2(_2793 * _2778) : (2.0 - exp2(_2795 * _2778))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2788;
        }
        else
        {
            float _2916 = 1.0 / cbSceneParam._m0[80u].x;
            float _2917 = isnan(_2779) ? _2778 : (isnan(_2778) ? _2779 : max(_2778, _2779));
            float _2918 = isnan(_2779) ? _2778 : (isnan(_2778) ? _2779 : min(_2778, _2779));
            float _2927 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : min(_2917, 0.0));
            float _2928 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : min(_2918, 0.0));
            _2972 = ((abs(_2785 / _2773) * cbSceneParam._m0[80u].y) * ((((_2927 - _2928) * 2.0) - ((exp2(_2793 * (isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0)))) - exp2(_2793 * (isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0))))) * _2916)) - ((exp2(_2795 * _2927) - exp2(_2795 * _2928)) * _2916))) + (_2788 * cbSceneParam._m0[80u].z);
        }
        vec4 _2974 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2684, _2685, 1.0), 0.0);
        float _2983 = exp2((_2972 * (-1.44269502162933349609375)) * (1.0 - _2974.w));
        float _2984 = log2(_2983);
        float _3000 = log2(_2704);
        _2797 = (exp2(_3000 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2984 * cbSceneParam._m0[78u].x)) * _2974.x) / cbSceneParam._m0[78u].x)) + _2701;
        _2799 = (exp2(_3000 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2984 * cbSceneParam._m0[78u].y)) * _2974.y) / cbSceneParam._m0[78u].y)) + _2702;
        _2801 = (exp2(_3000 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2984 * cbSceneParam._m0[78u].z)) * _2974.z) / cbSceneParam._m0[78u].z)) + _2703;
        _2803 = _2983 * _2704;
    }
    else
    {
        _2797 = _2701;
        _2799 = _2702;
        _2801 = _2703;
        _2803 = _2704;
    }
    bool _3010;
    vec4 _2813;
    vec4 _2835;
    float _2837;
    float _2841;
    float _2842;
    float _2843;
    float _2844;
    bool _2854;
    for (;;)
    {
        _2813 = cbMatDynParam._m0[0u];
        float _2815 = roundEven(_2813.y);
        bool _2816 = _2815 == 3.0;
        float _2817 = log2(_2803);
        float _2824 = exp2(_2817 * cbSceneParam._m0[78u].x) * _2673;
        float _2825 = exp2(_2817 * cbSceneParam._m0[78u].y) * _2674;
        float _2826 = exp2(_2817 * cbSceneParam._m0[78u].z) * _2675;
        float _2833 = _793 + (-0.5);
        _2835 = cbMtdParam._m0[1u];
        _2837 = _2835.y * _2833;
        float _2840 = (_2815 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2841 = _2840 * (_2816 ? _2824 : (_2824 + (cbSceneParam._m0[72u].w * _2797)));
        _2842 = _2840 * (_2816 ? _2825 : (_2825 + (cbSceneParam._m0[72u].w * _2799)));
        _2843 = _2840 * (_2816 ? _2826 : (_2826 + (cbSceneParam._m0[72u].w * _2801)));
        _2844 = _2833 * 0.999000012874603271484375;
        _2854 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2854)
        {
            if ((cbInstanceData._m0[_249 + 7u].x + _2844) < 0.5)
            {
                _3010 = true;
                break;
            }
        }
        uint _2951 = _842 + uint(_2813.w);
        if ((cbInstanceData._m0[_2951].w < 1.0) && ((cbInstanceData._m0[_2951].w + _2844) < 0.5))
        {
            _3010 = true;
            break;
        }
        if ((_2837 + 1.0) < _2835.x)
        {
            _3010 = true;
            break;
        }
        _3010 = false;
        break;
    }
    float _3214;
    if (_3010)
    {
        discard_state = true;
        _3214 = 0.0;
    }
    else
    {
        _3214 = cbInstanceData._m0[_2676].w;
    }
    SV_Target.x = _2841;
    SV_Target.y = _2842;
    SV_Target.z = _2843;
    SV_Target.w = _3214;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2676].w;
    discard_exit();
}


