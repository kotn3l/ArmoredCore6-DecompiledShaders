#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1116;
float _3500;
float _3501;
float _3502;
float _3503;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _232 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _232 + 1u;
    uint _242 = _232 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _273 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _279 = _273.x * cbMtdParam._m0[11u].x;
    float _280 = _273.y * cbMtdParam._m0[11u].y;
    float _281 = _273.z * cbMtdParam._m0[11u].z;
    vec4 _300 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _252) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _253) + cbTextureTilingScale._m0[5u].w));
    vec4 _338 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _340 = _338.x;
    float _352 = dot(vec4(_340, _338.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _369 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_340 - _352) * cbMtdParam._m0[24u].y) + _352) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3512 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _370 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
    float _377 = (_370 * ((_300.x * cbMtdParam._m0[12u].x) - _279)) + _279;
    float _378 = (_370 * ((_300.y * cbMtdParam._m0[12u].y) - _280)) + _280;
    float _379 = (_370 * ((_300.z * cbMtdParam._m0[12u].z) - _281)) + _281;
    vec4 _392 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _252) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _253) + cbTextureTilingScale._m0[4u].w));
    vec4 _409 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _411 = _409.x;
    float _412 = _409.y;
    float _413 = _409.z;
    float _422 = ((_392.z - _413) * _370) + _413;
    float _425 = ((((_392.x - _411) * _370) + _411) * 2.0) + (-1.0);
    float _427 = ((((_392.y - _412) * _370) + _412) * 2.0) + (-1.0);
    float _428 = dot(vec2(_425, _427), vec2(_425, _427));
    float _3523 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _433 = sqrt(1.0 - (isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0))));
    vec4 _449 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _461 = (((_449.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _425;
    float _462 = (((_449.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _427;
    vec4 _474 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _488 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _490 = _488.x;
    float _508 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _252) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _253) + cbTextureTilingScale._m0[9u].w)).x - _490) * _370) + _490;
    float _512 = ((_474.x - _508) * cbMtdParam._m0[19u].z) + _508;
    float _516 = (cbMtdParam._m0[19u].w * (_449.z - _422)) + _422;
    float _521 = cbMtdParam._m0[22u].x + _449.w;
    float _524 = fma(_433, _219 * NORMAL.x, fma(_462, _226 * TANGENT.x, (_212 * _204) * _461));
    float _527 = fma(_433, _219 * NORMAL.y, fma(_462, _226 * TANGENT.y, (_212 * _205) * _461));
    float _530 = fma(_433, _219 * NORMAL.z, fma(_462, _226 * TANGENT.z, (_212 * _206) * _461));
    float _534 = inversesqrt(dot(vec3(_524, _527, _530), vec3(_524, _527, _530)));
    float _535 = _534 * _524;
    float _536 = _534 * _527;
    float _537 = _534 * _530;
    float _3534 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _538 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
    float _3545 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _3556 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _3567 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _3578 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _3589 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _543 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
    float _557 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _598 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _608 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _598);
    float _609 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _598);
    float _610 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _598);
    float _614 = inversesqrt(dot(vec3(_608, _609, _610), vec3(_608, _609, _610)));
    float _615 = _608 * _614;
    float _616 = _609 * _614;
    float _617 = _610 * _614;
    vec4 _622 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _624 = _622.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _796 = sqrt(((_608 * _608) + (_609 * _609)) + (_610 * _610));
        float _802 = (cbMatDynParam._m0[5u].x * _796) + cbMatDynParam._m0[5u].y;
        float _3600 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _803 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _807 = (cbMatDynParam._m0[5u].z * _796) + cbMatDynParam._m0[5u].w;
        float _3611 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0))) - _803)) + _803) < ((_624 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _635 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _636 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _654 = fma(_537, cbSceneParam._m0[5u].z, fma(_536, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _535));
    float _657 = fma(_537, cbSceneParam._m0[6u].z, fma(_536, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _535));
    float _660 = fma(_537, cbSceneParam._m0[7u].z, fma(_536, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _535));
    uint _673 = _232 + 9u;
    uint _674 = _673 + uint(cbMatDynParam._m0[0u].w);
    float _680 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0)))) * cbInstanceData._m0[_674].x;
    float _681 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0)))) * cbInstanceData._m0[_674].y;
    float _682 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0)))) * cbInstanceData._m0[_674].z;
    float _3622 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _683 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
    float _3633 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _684 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
    float _3644 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _685 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
    float _686 = 1.0 - _543;
    float _687 = _683 * _686;
    float _688 = _684 * _686;
    float _689 = _685 * _686;
    float _694 = (_683 + (-0.039999999105930328369140625)) * _543;
    float _695 = (_684 + (-0.039999999105930328369140625)) * _543;
    float _696 = (_685 + (-0.039999999105930328369140625)) * _543;
    float _697 = _694 + 0.039999999105930328369140625;
    float _699 = _695 + 0.039999999105930328369140625;
    float _700 = _696 + 0.039999999105930328369140625;
    vec4 _709 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _635, cbSceneParam._m0[86u].y * _636));
    float _713 = ((isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0))) * TEXCOORD_5.w) * _709.x;
    float _714 = dot(vec3(_535, _536, _537), vec3(_615, _616, _617));
    float _717 = _714 * 2.0;
    float _721 = (_717 * _535) - _615;
    float _722 = (_717 * _536) - _616;
    float _723 = (_717 * _537) - _617;
    float _727 = abs(dot(vec3(_615, _616, _617), vec3(_535, _536, _537)));
    float _3655 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _729 = sqrt(_538);
    float _742 = exp2((_729 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_729 * 3.0));
    float _748 = (1.0 - _742) * ((_729 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _749 = _742 * _729;
    float _777 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _781 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _785 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1115;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _840 = fma(_785, cbModelParam._m0[26u].z, fma(_781, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _777));
        float _844 = fma(_785, cbModelParam._m0[27u].z, fma(_781, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _777));
        float _848 = fma(_785, cbModelParam._m0[28u].z, fma(_781, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _777));
        float _873 = _777 + _535;
        float _874 = _781 + _536;
        float _875 = _785 + _537;
        float _885 = fma(_875, cbModelParam._m0[26u].z, fma(_874, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _873)) - _840;
        float _886 = fma(_875, cbModelParam._m0[27u].z, fma(_874, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _873)) - _844;
        float _887 = fma(_875, cbModelParam._m0[28u].z, fma(_874, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _873)) - _848;
        float _891 = inversesqrt(dot(vec3(_885, _886, _887), vec3(_885, _886, _887)));
        float _904 = ((_891 * _885) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_840 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _905 = ((_891 * _886) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_844 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _906 = ((_891 * _887) / cbModelParam._m0[34u].z) + ((((((_848 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_904, _905, _906), 0.0);
        vec4 _916 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_904, _905, _906), 0.0);
        vec4 _923 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_904, _905, _906), 0.0);
        vec4 _930 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_904, _905, _906), 0.0);
        float _943 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _944 = _943 * (_909.x + (-0.5));
        float _945 = _943 * (_909.y + (-0.5));
        float _946 = _943 * (_909.z + (-0.5));
        float _953 = exp2((_916.w + (-0.5)) * 20.0) * 2.0;
        float _954 = _953 * (_916.x + (-0.5));
        float _955 = _953 * (_916.y + (-0.5));
        float _956 = _953 * (_916.z + (-0.5));
        float _963 = exp2((_923.w + (-0.5)) * 20.0) * 2.0;
        float _964 = _963 * (_923.x + (-0.5));
        float _965 = _963 * (_923.y + (-0.5));
        float _966 = _963 * (_923.z + (-0.5));
        float _973 = exp2((_930.w + (-0.5)) * 20.0) * 2.0;
        float _974 = _973 * (_930.x + (-0.5));
        float _975 = _973 * (_930.y + (-0.5));
        float _976 = _973 * (_930.z + (-0.5));
        float _977 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _978 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _979 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _980 = _944 * 0.5;
        float _981 = _954 * 0.5;
        float _982 = _964 * 0.5;
        float _983 = dot(vec3(_980, _981, _982), vec3(_980, _981, _982));
        float _988 = (_983 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_983);
        float _997 = (dot(vec3(_535, _536, _537), vec3(_988 * _980, _988 * _981, _988 * _982)) + 1.0) * 0.5;
        float _3681 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1007 = sqrt(((_981 * _981) + (_980 * _980)) + (_982 * _982)) / (_977 + 9.9999997473787516355514526367188e-06);
        float _3692 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _1009 = _1008 * 2.0;
        float _1013 = (1.0 - _1008) / (_1008 + 1.0);
        float _3703 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _1023 = ((((1.0 - _1014) * (_1009 + 2.0)) * exp2(log2(isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))) * (_1009 + 1.0))) + _1014) * _977;
        float _1024 = _945 * 0.5;
        float _1025 = _955 * 0.5;
        float _1026 = _965 * 0.5;
        float _1027 = dot(vec3(_1024, _1025, _1026), vec3(_1024, _1025, _1026));
        float _1032 = (_1027 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1027);
        float _1040 = (dot(vec3(_535, _536, _537), vec3(_1032 * _1024, _1032 * _1025, _1032 * _1026)) + 1.0) * 0.5;
        float _3714 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1049 = sqrt(((_1025 * _1025) + (_1024 * _1024)) + (_1026 * _1026)) / (_978 + 9.9999997473787516355514526367188e-06);
        float _3725 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1051 = _1050 * 2.0;
        float _1055 = (1.0 - _1050) / (_1050 + 1.0);
        float _3736 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1065 = ((((1.0 - _1056) * (_1051 + 2.0)) * exp2(log2(isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * (_1051 + 1.0))) + _1056) * _978;
        float _1066 = _946 * 0.5;
        float _1067 = _956 * 0.5;
        float _1068 = _966 * 0.5;
        float _1069 = dot(vec3(_1066, _1067, _1068), vec3(_1066, _1067, _1068));
        float _1074 = (_1069 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1069);
        float _1082 = (dot(vec3(_535, _536, _537), vec3(_1074 * _1066, _1074 * _1067, _1074 * _1068)) + 1.0) * 0.5;
        float _3747 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1091 = sqrt(((_1067 * _1067) + (_1066 * _1066)) + (_1068 * _1068)) / (_979 + 9.9999997473787516355514526367188e-06);
        float _3758 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1093 = _1092 * 2.0;
        float _1097 = (1.0 - _1092) / (_1092 + 1.0);
        float _3769 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1107 = ((((1.0 - _1098) * (_1093 + 2.0)) * exp2(log2(isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * (_1093 + 1.0))) + _1098) * _979;
        _1115 = _946;
        _1117 = _945;
        _1118 = _944;
        _1119 = _956;
        _1120 = _955;
        _1121 = _954;
        _1122 = _966;
        _1123 = _965;
        _1124 = _964;
        _1125 = _979;
        _1126 = _978;
        _1127 = _977;
        _1128 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0)));
        _1129 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0)));
        _1130 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0)));
    }
    else
    {
        _1115 = _1116;
        _1117 = _1116;
        _1118 = _1116;
        _1119 = _1116;
        _1120 = _1116;
        _1121 = _1116;
        _1122 = _1116;
        _1123 = _1116;
        _1124 = _1116;
        _1125 = _1116;
        _1126 = _1116;
        _1127 = _1116;
        _1128 = 0.0;
        _1129 = 0.0;
        _1130 = 0.0;
    }
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1158 = fma(_785, cbModelParam._m0[30u].z, fma(_781, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _777));
        float _1162 = fma(_785, cbModelParam._m0[31u].z, fma(_781, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _777));
        float _1166 = fma(_785, cbModelParam._m0[32u].z, fma(_781, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _777));
        float _1189 = _777 + _535;
        float _1190 = _781 + _536;
        float _1191 = _785 + _537;
        float _1201 = fma(_1191, cbModelParam._m0[30u].z, fma(_1190, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1189)) - _1158;
        float _1202 = fma(_1191, cbModelParam._m0[31u].z, fma(_1190, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1189)) - _1162;
        float _1203 = fma(_1191, cbModelParam._m0[32u].z, fma(_1190, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1189)) - _1166;
        float _1207 = inversesqrt(dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203)));
        float _1220 = ((_1207 * _1201) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1158 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1221 = ((_1207 * _1202) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1162 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1222 = ((_1207 * _1203) / cbModelParam._m0[35u].z) + ((((((_1166 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        float _1257 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1224.x + (-0.5));
        float _1259 = _1257 * (_1224.y + (-0.5));
        float _1260 = _1257 * (_1224.z + (-0.5));
        float _1267 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1231.x + (-0.5));
        float _1269 = _1267 * (_1231.y + (-0.5));
        float _1270 = _1267 * (_1231.z + (-0.5));
        float _1277 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1238.x + (-0.5));
        float _1279 = _1277 * (_1238.y + (-0.5));
        float _1280 = _1277 * (_1238.z + (-0.5));
        float _1287 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1245.x + (-0.5));
        float _1289 = _1287 * (_1245.y + (-0.5));
        float _1290 = _1287 * (_1245.z + (-0.5));
        float _1291 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1292 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1293 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1294 = _1258 * 0.5;
        float _1295 = _1268 * 0.5;
        float _1296 = _1278 * 0.5;
        float _1297 = dot(vec3(_1294, _1295, _1296), vec3(_1294, _1295, _1296));
        float _1302 = (_1297 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1297);
        float _1310 = (dot(vec3(_535, _536, _537), vec3(_1302 * _1294, _1302 * _1295, _1302 * _1296)) + 1.0) * 0.5;
        float _3810 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1319 = sqrt(((_1295 * _1295) + (_1294 * _1294)) + (_1296 * _1296)) / (_1291 + 9.9999997473787516355514526367188e-06);
        float _3821 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1321 = _1320 * 2.0;
        float _1325 = (1.0 - _1320) / (_1320 + 1.0);
        float _3832 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1335 = ((((1.0 - _1326) * (_1321 + 2.0)) * exp2(log2(isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))) * (_1321 + 1.0))) + _1326) * _1291;
        float _1336 = _1259 * 0.5;
        float _1337 = _1269 * 0.5;
        float _1338 = _1279 * 0.5;
        float _1339 = dot(vec3(_1336, _1337, _1338), vec3(_1336, _1337, _1338));
        float _1344 = (_1339 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1339);
        float _1352 = (dot(vec3(_535, _536, _537), vec3(_1344 * _1336, _1344 * _1337, _1344 * _1338)) + 1.0) * 0.5;
        float _3843 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1361 = sqrt(((_1337 * _1337) + (_1336 * _1336)) + (_1338 * _1338)) / (_1292 + 9.9999997473787516355514526367188e-06);
        float _3854 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1363 = _1362 * 2.0;
        float _1367 = (1.0 - _1362) / (_1362 + 1.0);
        float _3865 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1377 = ((((1.0 - _1368) * (_1363 + 2.0)) * exp2(log2(isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * (_1363 + 1.0))) + _1368) * _1292;
        float _1378 = _1260 * 0.5;
        float _1379 = _1270 * 0.5;
        float _1380 = _1280 * 0.5;
        float _1381 = dot(vec3(_1378, _1379, _1380), vec3(_1378, _1379, _1380));
        float _1386 = (_1381 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1381);
        float _1394 = (dot(vec3(_535, _536, _537), vec3(_1386 * _1378, _1386 * _1379, _1386 * _1380)) + 1.0) * 0.5;
        float _3876 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1403 = sqrt(((_1379 * _1379) + (_1378 * _1378)) + (_1380 * _1380)) / (_1293 + 9.9999997473787516355514526367188e-06);
        float _3887 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1405 = _1404 * 2.0;
        float _1409 = (1.0 - _1404) / (_1404 + 1.0);
        float _3898 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1419 = ((((1.0 - _1410) * (_1405 + 2.0)) * exp2(log2(isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))) * (_1405 + 1.0))) + _1410) * _1293;
        _1427 = _1260;
        _1428 = _1259;
        _1429 = _1258;
        _1430 = _1270;
        _1431 = _1269;
        _1432 = _1268;
        _1433 = _1280;
        _1434 = _1279;
        _1435 = _1278;
        _1436 = _1293;
        _1437 = _1292;
        _1438 = _1291;
        _1439 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)));
        _1440 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)));
        _1441 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)));
    }
    else
    {
        _1427 = _1116;
        _1428 = _1116;
        _1429 = _1116;
        _1430 = _1116;
        _1431 = _1116;
        _1432 = _1116;
        _1433 = _1116;
        _1434 = _1116;
        _1435 = _1116;
        _1436 = _1116;
        _1437 = _1116;
        _1438 = _1116;
        _1439 = 0.0;
        _1440 = 0.0;
        _1441 = 0.0;
    }
    float _1451 = (cbModelParam._m0[1u].x * (_1439 - _1128)) + _1128;
    float _1452 = (cbModelParam._m0[1u].x * (_1440 - _1129)) + _1129;
    float _1453 = (cbModelParam._m0[1u].x * (_1441 - _1130)) + _1130;
    float _1474 = fma(_1453, cbSceneParam._m0[89u].z, fma(_1452, cbSceneParam._m0[89u].y, _1451 * cbSceneParam._m0[89u].x));
    float _1477 = fma(_1453, cbSceneParam._m0[90u].z, fma(_1452, cbSceneParam._m0[90u].y, _1451 * cbSceneParam._m0[90u].x));
    float _1480 = fma(_1453, cbSceneParam._m0[91u].z, fma(_1452, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1451));
    float _1495 = _721 * 0.5;
    float _1496 = _722 * 0.5;
    float _1497 = _723 * 0.5;
    float _1498 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1429, _1432, _1435, _1438));
    float _1501 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1428, _1431, _1434, _1437));
    float _1504 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1427, _1430, _1433, _1436));
    float _1538;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1511 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1115, _1119, _1122, _1125));
        float _1515 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1117, _1120, _1123, _1126));
        float _1519 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1118, _1121, _1124, _1127));
        float _1526 = dot(vec4(cbModelParam._m0[39u]), vec4(_1495, _1496, _1497, 1.0));
        _1538 = dot(vec3(isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)), isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)), isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1526) ? 0.0 : (isnan(0.0) ? _1526 : max(0.0, _1526))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1538 = 1.0;
    }
    float _1549;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1540 = dot(vec4(cbModelParam._m0[40u]), vec4(_1495, _1496, _1497, 1.0));
        _1549 = dot(vec3(isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)), isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)), isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1540) ? 0.0 : (isnan(0.0) ? _1540 : max(0.0, _1540))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1549 = 1.0;
    }
    float _1553 = (_1549 * cbModelParam._m0[1u].x) + (_1538 * (1.0 - cbModelParam._m0[1u].x));
    float _1563 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _538);
    float _1564 = isnan(_1563) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1563 : min(cbModelParam._m0[25u].z, _1563));
    float _1646;
    float _1648;
    float _1650;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1613 = fma(_785, cbModelParam._m0[13u].z, fma(_781, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _777)) + cbModelParam._m0[13u].w;
        float _1617 = fma(_785, cbModelParam._m0[14u].z, fma(_781, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _777)) + cbModelParam._m0[14u].w;
        float _1621 = fma(_785, cbModelParam._m0[15u].z, fma(_781, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _777)) + cbModelParam._m0[15u].w;
        float _1624 = fma(_723, cbModelParam._m0[13u].z, fma(_722, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _721));
        float _1627 = fma(_723, cbModelParam._m0[14u].z, fma(_722, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _721));
        float _1630 = fma(_723, cbModelParam._m0[15u].z, fma(_722, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _721));
        float _1658;
        if (_1624 > 0.0)
        {
            _1658 = abs((1.0 - _1613) / _1624);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1624 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1613 + 1.0) / _1624);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1658 = frontier_phi_17_15_ladder;
        }
        float _1862;
        if (_1627 > 0.0)
        {
            _1862 = abs((1.0 - _1617) / _1627);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1627 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1617 + 1.0) / _1627);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1862 = frontier_phi_26_22_ladder;
        }
        float _2116;
        if (_1630 > 0.0)
        {
            _2116 = abs((1.0 - _1621) / _1630);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1630 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1621 + 1.0) / _1630);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2116 = frontier_phi_38_33_ladder;
        }
        float _2118 = isnan(_1862) ? _1658 : (isnan(_1658) ? _1862 : min(_1658, _1862));
        float _2119 = isnan(_2116) ? _2118 : (isnan(_2118) ? _2116 : min(_2118, _2116));
        float _2123 = (_2119 * _1624) + _1613;
        float _2124 = (_2119 * _1627) + _1617;
        float _2125 = (_2119 * _1630) + _1621;
        float _2126 = _2119 * 9.9999997473787516355514526367188e-05;
        float _2128 = (-1.0) - _2126;
        float _2130 = _2126 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2125 > _2130) || ((_2125 < _2128) || ((_2124 > _2130) || ((_2124 < _2128) || ((_2123 < _2128) || (_2123 > _2130))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2253 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2125, cbModelParam._m0[9u].z, fma(_2124, cbModelParam._m0[9u].y, _2123 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2125, cbModelParam._m0[10u].z, fma(_2124, cbModelParam._m0[10u].y, _2123 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2125, cbModelParam._m0[11u].z, fma(_2124, cbModelParam._m0[11u].y, _2123 * cbModelParam._m0[11u].x))), _1564);
            frontier_phi_16_38_ladder = _2253.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2253.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2253.x * cbModelParam._m0[1u].y;
        }
        _1646 = frontier_phi_16_38_ladder_2;
        _1648 = frontier_phi_16_38_ladder_1;
        _1650 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1634 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_721, _722, _723), _1564);
        _1646 = _1634.x * cbModelParam._m0[1u].y;
        _1648 = _1634.y * cbModelParam._m0[1u].y;
        _1650 = _1634.z * cbModelParam._m0[1u].y;
    }
    float _1654 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _538);
    float _1655 = isnan(_1654) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1654 : min(cbModelParam._m0[25u].w, _1654));
    float _1746;
    float _1748;
    float _1750;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1710 = fma(_785, cbModelParam._m0[21u].z, fma(_781, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _777)) + cbModelParam._m0[21u].w;
        float _1714 = fma(_785, cbModelParam._m0[22u].z, fma(_781, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _777)) + cbModelParam._m0[22u].w;
        float _1718 = fma(_785, cbModelParam._m0[23u].z, fma(_781, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _777)) + cbModelParam._m0[23u].w;
        float _1721 = fma(_723, cbModelParam._m0[21u].z, fma(_722, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _721));
        float _1724 = fma(_723, cbModelParam._m0[22u].z, fma(_722, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _721));
        float _1727 = fma(_723, cbModelParam._m0[23u].z, fma(_722, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _721));
        float _1867;
        if (_1721 > 0.0)
        {
            _1867 = abs((1.0 - _1710) / _1721);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1721 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1710 + 1.0) / _1721);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1867 = frontier_phi_28_24_ladder;
        }
        float _2143;
        if (_1724 > 0.0)
        {
            _2143 = abs((1.0 - _1714) / _1724);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1724 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1714 + 1.0) / _1724);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2143 = frontier_phi_40_35_ladder;
        }
        float _2356;
        if (_1727 > 0.0)
        {
            _2356 = abs((1.0 - _1718) / _1727);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1718 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2356 = frontier_phi_49_46_ladder;
        }
        float _2358 = isnan(_2143) ? _1867 : (isnan(_1867) ? _2143 : min(_1867, _2143));
        float _2359 = isnan(_2356) ? _2358 : (isnan(_2358) ? _2356 : min(_2358, _2356));
        float _2363 = (_2359 * _1721) + _1710;
        float _2364 = (_2359 * _1724) + _1714;
        float _2365 = (_2359 * _1727) + _1718;
        float _2366 = _2359 * 9.9999997473787516355514526367188e-05;
        float _2367 = (-1.0) - _2366;
        float _2369 = _2366 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2365 > _2369) || ((_2365 < _2367) || ((_2364 > _2369) || ((_2364 < _2367) || ((_2363 < _2367) || (_2363 > _2369))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2564 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2365, cbModelParam._m0[17u].z, fma(_2364, cbModelParam._m0[17u].y, _2363 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2365, cbModelParam._m0[18u].z, fma(_2364, cbModelParam._m0[18u].y, _2363 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2365, cbModelParam._m0[19u].z, fma(_2364, cbModelParam._m0[19u].y, _2363 * cbModelParam._m0[19u].x))), _1655);
            frontier_phi_25_49_ladder = _2564.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2564.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2564.x * cbModelParam._m0[1u].z;
        }
        _1746 = frontier_phi_25_49_ladder_2;
        _1748 = frontier_phi_25_49_ladder_1;
        _1750 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1730 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_721, _722, _723), _1655);
        _1746 = _1730.x * cbModelParam._m0[1u].z;
        _1748 = _1730.y * cbModelParam._m0[1u].z;
        _1750 = _1730.z * cbModelParam._m0[1u].z;
    }
    float _1763 = (((_748 * _697) + _749) * _713) * ((cbModelParam._m0[1u].w * (_1746 - _1646)) + _1646);
    float _1765 = (((_748 * _699) + _749) * _713) * ((cbModelParam._m0[1u].w * (_1748 - _1648)) + _1648);
    float _1767 = (((_748 * _700) + _749) * _713) * ((cbModelParam._m0[1u].w * (_1750 - _1650)) + _1650);
    float _1770 = fma(_1767, cbSceneParam._m0[89u].z, fma(_1765, cbSceneParam._m0[89u].y, _1763 * cbSceneParam._m0[89u].x));
    float _1773 = fma(_1767, cbSceneParam._m0[90u].z, fma(_1765, cbSceneParam._m0[90u].y, _1763 * cbSceneParam._m0[90u].x));
    float _1776 = fma(_1767, cbSceneParam._m0[91u].z, fma(_1765, cbSceneParam._m0[91u].y, _1763 * cbSceneParam._m0[91u].x));
    uvec4 _1786 = floatBitsToUint(cbInstanceData._m0[_232 + 5u]);
    uint _1788 = _1786.x * 14u;
    uint _1789 = _1788 + 13u;
    float _1796 = _713 + (-1.0);
    float _1801 = (cbLight._m0[_1789].x * _1796) + 1.0;
    float _1802 = (cbLight._m0[_1789].y * _1796) + 1.0;
    float _1803 = (cbLight._m0[_1789].z * _1796) + 1.0;
    float _1804 = (cbLight._m0[_1789].w * _1796) + 1.0;
    uint _1805 = _1788 + 5u;
    float _1811 = isnan(1.0) ? _1802 : (isnan(_1802) ? 1.0 : min(_1802, 1.0));
    uint _1815 = _1788 + 4u;
    float _1821 = isnan(1.0) ? _1801 : (isnan(_1801) ? 1.0 : min(_1801, 1.0));
    uint _1825 = _1788 | 1u;
    float _1836 = dot(vec3(cbLight._m0[_1788].xyz), vec3(_535, _536, _537));
    float _1839 = dot(vec3(cbLight._m0[_1825].xyz), vec3(_535, _536, _537));
    float _4034 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _4045 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
    float _1844 = (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * 0.3183098733425140380859375;
    float _1846 = (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * 0.3183098733425140380859375;
    float _1853 = ((cbLight._m0[_1805].x * _1811) * _1846) + ((cbLight._m0[_1815].x * _1821) * _1844);
    float _1854 = ((_1811 * cbLight._m0[_1805].y) * _1846) + ((_1821 * cbLight._m0[_1815].y) * _1844);
    float _1855 = ((_1811 * cbLight._m0[_1805].z) * _1846) + ((_1821 * cbLight._m0[_1815].z) * _1844);
    uvec4 _1859 = floatBitsToUint(cbLight._m0[_1788 + 12u]);
    bool _1861 = _1859.x == 0u;
    float _1872;
    float _1874;
    float _1876;
    if (_1861)
    {
        _1872 = _1853;
        _1874 = _1854;
        _1876 = _1855;
    }
    else
    {
        uint _1880 = _1788 + 6u;
        float _1896 = (dot(vec3(cbLight._m0[_1788 + 2u].xyz), vec3(_535, _536, _537)) * 0.5) + 0.5;
        float _1897 = _1896 * _1896;
        float _4056 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
        float _1898 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1899 = isnan(1.0) ? _1803 : (isnan(_1803) ? 1.0 : min(_1803, 1.0));
        _1872 = (((cbLight._m0[_1880].x * 0.3183098733425140380859375) * _1898) * _1899) + _1853;
        _1874 = (((cbLight._m0[_1880].y * 0.3183098733425140380859375) * _1898) * _1899) + _1854;
        _1876 = (((cbLight._m0[_1880].z * 0.3183098733425140380859375) * _1898) * _1899) + _1855;
    }
    bool _1879 = _1859.y == 0u;
    float _1917;
    float _1919;
    float _1921;
    if (_1879)
    {
        _1917 = _1872;
        _1919 = _1874;
        _1921 = _1876;
    }
    else
    {
        uint _2087 = _1788 + 7u;
        float _2103 = (dot(vec3(cbLight._m0[_1788 + 3u].xyz), vec3(_535, _536, _537)) * 0.5) + 0.5;
        float _2104 = _2103 * _2103;
        float _4072 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
        float _2105 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _2106 = isnan(1.0) ? _1804 : (isnan(_1804) ? 1.0 : min(_1804, 1.0));
        _1917 = (((cbLight._m0[_2087].x * 0.3183098733425140380859375) * _2105) * _2106) + _1872;
        _1919 = (((cbLight._m0[_2087].y * 0.3183098733425140380859375) * _2105) * _2106) + _1874;
        _1921 = (((cbLight._m0[_2087].z * 0.3183098733425140380859375) * _2105) * _2106) + _1876;
    }
    uint _1924 = _1788 + 8u;
    float _1937 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1788].w)) * _538) * 0.949999988079071044921875);
    float _1938 = _1937 * _1937;
    float _1939 = cbLight._m0[_1788].x + _615;
    float _1940 = cbLight._m0[_1788].y + _616;
    float _1941 = cbLight._m0[_1788].z + _617;
    float _1945 = inversesqrt(dot(vec3(_1939, _1940, _1941), vec3(_1939, _1940, _1941)));
    float _1946 = _1945 * _1939;
    float _1947 = _1945 * _1940;
    float _1948 = _1945 * _1941;
    float _1949 = dot(vec3(_535, _536, _537), vec3(cbLight._m0[_1788].xyz));
    float _4088 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
    float _1952 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _4099 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _1953 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _1954 = dot(vec3(_535, _536, _537), vec3(_1946, _1947, _1948));
    float _4110 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1957 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _1958 = dot(vec3(cbLight._m0[_1788].xyz), vec3(_1946, _1947, _1948));
    float _4121 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _1962 = _1938 * _1938;
    float _1966 = ((_1957 * _1957) * (_1962 + (-1.0))) + 1.0;
    float _1974 = exp2(log2(1.0 - (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0)))) * 5.0);
    float _1975 = 0.959999978542327880859375 - _694;
    float _1977 = 0.959999978542327880859375 - _695;
    float _1978 = 0.959999978542327880859375 - _696;
    float _1985 = 1.0 - _1938;
    float _1996 = (0.5 / (((_1953 * ((_1952 * _1985) + _1938)) + 9.9999999392252902907785028219223e-09) + (((_1953 * _1985) + _1938) * _1952))) * _1952;
    float _4132 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _1998 = (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_1962 / ((_1966 * _1966) * 3.141590118408203125));
    uint _2009 = _1788 + 9u;
    float _2020 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1825].w)) * _538) * 0.949999988079071044921875);
    float _2021 = _2020 * _2020;
    float _2022 = cbLight._m0[_1825].x + _615;
    float _2023 = cbLight._m0[_1825].y + _616;
    float _2024 = cbLight._m0[_1825].z + _617;
    float _2028 = inversesqrt(dot(vec3(_2022, _2023, _2024), vec3(_2022, _2023, _2024)));
    float _2029 = _2028 * _2022;
    float _2030 = _2028 * _2023;
    float _2031 = _2028 * _2024;
    float _2032 = dot(vec3(_535, _536, _537), vec3(cbLight._m0[_1825].xyz));
    float _4143 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
    float _2035 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _2036 = dot(vec3(_535, _536, _537), vec3(_2029, _2030, _2031));
    float _4154 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2039 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
    float _2040 = dot(vec3(cbLight._m0[_1825].xyz), vec3(_2029, _2030, _2031));
    float _4165 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _2044 = _2021 * _2021;
    float _2048 = ((_2039 * _2039) * (_2044 + (-1.0))) + 1.0;
    float _2055 = exp2(log2(1.0 - (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0)))) * 5.0);
    float _2062 = 1.0 - _2021;
    float _2072 = (0.5 / (((_1953 * ((_2035 * _2062) + _2021)) + 9.9999999392252902907785028219223e-09) + (((_1953 * _2062) + _2021) * _2035))) * _2035;
    float _4176 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2074 = (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_2044 / ((_2048 * _2048) * 3.141590118408203125));
    float _2084 = (((((_2055 * _1975) + _697) * cbLight._m0[_2009].x) * _2074) * _1811) + (((((_1974 * _1975) + _697) * cbLight._m0[_1924].x) * _1998) * _1821);
    float _2085 = (((((_2055 * _1977) + _699) * cbLight._m0[_2009].y) * _2074) * _1811) + (((((_1974 * _1977) + _699) * cbLight._m0[_1924].y) * _1998) * _1821);
    float _2086 = (((((_2055 * _1978) + _700) * cbLight._m0[_2009].z) * _2074) * _1811) + (((((_1974 * _1978) + _700) * cbLight._m0[_1924].z) * _1998) * _1821);
    float _2148;
    float _2150;
    float _2152;
    if (_1861)
    {
        _2148 = _2084;
        _2150 = _2085;
        _2152 = _2086;
    }
    else
    {
        uint _2154 = _1788 + 2u;
        uint _2158 = _1788 + 10u;
        float _2172 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2154].w)) * _538) * 0.949999988079071044921875);
        float _2173 = _2172 * _2172;
        float _2174 = cbLight._m0[_2154].x + _615;
        float _2175 = cbLight._m0[_2154].y + _616;
        float _2176 = cbLight._m0[_2154].z + _617;
        float _2180 = inversesqrt(dot(vec3(_2174, _2175, _2176), vec3(_2174, _2175, _2176)));
        float _2181 = _2180 * _2174;
        float _2182 = _2180 * _2175;
        float _2183 = _2180 * _2176;
        float _2184 = dot(vec3(_535, _536, _537), vec3(cbLight._m0[_2154].xyz));
        float _4187 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
        float _2187 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _2188 = dot(vec3(_535, _536, _537), vec3(_2181, _2182, _2183));
        float _4198 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2191 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _2192 = dot(vec3(cbLight._m0[_2154].xyz), vec3(_2181, _2182, _2183));
        float _4209 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        float _2196 = _2173 * _2173;
        float _2200 = ((_2191 * _2191) * (_2196 + (-1.0))) + 1.0;
        float _2207 = exp2(log2(1.0 - (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0)))) * 5.0);
        float _2214 = 1.0 - _2173;
        float _2224 = (0.5 / (((_1953 * ((_2187 * _2214) + _2173)) + 9.9999999392252902907785028219223e-09) + (((_1953 * _2214) + _2173) * _2187))) * _2187;
        float _4220 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2226 = (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_2196 / ((_2200 * _2200) * 3.141590118408203125));
        float _2227 = isnan(1.0) ? _1803 : (isnan(_1803) ? 1.0 : min(_1803, 1.0));
        _2148 = (((((_2207 * _1975) + _697) * cbLight._m0[_2158].x) * _2226) * _2227) + _2084;
        _2150 = (((((_2207 * _1977) + _699) * cbLight._m0[_2158].y) * _2226) * _2227) + _2085;
        _2152 = (((((_2207 * _1978) + _700) * cbLight._m0[_2158].z) * _2226) * _2227) + _2086;
    }
    float _2262;
    float _2264;
    float _2266;
    if (_1879)
    {
        _2262 = _2148;
        _2264 = _2150;
        _2266 = _2152;
    }
    else
    {
        uint _2273 = _1788 + 3u;
        uint _2277 = _1788 + 11u;
        float _2291 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2273].w)) * _538) * 0.949999988079071044921875);
        float _2292 = _2291 * _2291;
        float _2293 = cbLight._m0[_2273].x + _615;
        float _2294 = cbLight._m0[_2273].y + _616;
        float _2295 = cbLight._m0[_2273].z + _617;
        float _2299 = inversesqrt(dot(vec3(_2293, _2294, _2295), vec3(_2293, _2294, _2295)));
        float _2300 = _2299 * _2293;
        float _2301 = _2299 * _2294;
        float _2302 = _2299 * _2295;
        float _2303 = dot(vec3(_535, _536, _537), vec3(cbLight._m0[_2273].xyz));
        float _4236 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2306 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _2307 = dot(vec3(_535, _536, _537), vec3(_2300, _2301, _2302));
        float _4247 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        float _2310 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _2311 = dot(vec3(cbLight._m0[_2273].xyz), vec3(_2300, _2301, _2302));
        float _4258 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2315 = _2292 * _2292;
        float _2319 = ((_2310 * _2310) * (_2315 + (-1.0))) + 1.0;
        float _2326 = exp2(log2(1.0 - (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0)))) * 5.0);
        float _2333 = 1.0 - _2292;
        float _2343 = (0.5 / (((_1953 * ((_2306 * _2333) + _2292)) + 9.9999999392252902907785028219223e-09) + (((_1953 * _2333) + _2292) * _2306))) * _2306;
        float _4269 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        float _2345 = (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_2315 / ((_2319 * _2319) * 3.141590118408203125));
        float _2346 = isnan(1.0) ? _1804 : (isnan(_1804) ? 1.0 : min(_1804, 1.0));
        _2262 = (((((_2326 * _1975) + _697) * cbLight._m0[_2277].x) * _2345) * _2346) + _2148;
        _2264 = (((((_2326 * _1977) + _699) * cbLight._m0[_2277].y) * _2345) * _2346) + _2150;
        _2266 = (((((_2326 * _1978) + _700) * cbLight._m0[_2277].z) * _2345) * _2346) + _2152;
    }
    float _2481;
    float _2483;
    float _2485;
    float _2487;
    float _2489;
    float _2491;
    if (_1786.y == 0u)
    {
        float _2421 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2422 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2421;
        float _2423 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2421;
        float _2424 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2421;
        uvec4 _2436 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2437 = _2436.x;
        uint _2448 = uint((float(_2436.y) * floor(float(uint(cbSceneParam._m0[85u].y * _636) / _2437))) + floor(float(uint(cbSceneParam._m0[85u].x * _635) / _2437)));
        float _2458 = (log2(_2424 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2459 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        uint _2462 = uint(isnan(14.0) ? _2459 : (isnan(_2459) ? 14.0 : min(_2459, 14.0)));
        uvec4 _2467 = texelFetch(g_lightClusterGridBuffer, int(((_2462 << 2u) + (_2448 << 6u)) >> 2u));
        uint _2468 = _2467.x;
        uint _2469 = _2436.z;
        float _2569;
        float _2571;
        float _2573;
        float _2575;
        float _2577;
        float _2579;
        if (((((1u << ((_2469 >> 4u) & 15u)) + 4294967295u) & _2468) == 0u) || ((_2469 & 240u) == 0u))
        {
            _2569 = 0.0;
            _2571 = 0.0;
            _2573 = 0.0;
            _2575 = 0.0;
            _2577 = 0.0;
            _2579 = 0.0;
        }
        else
        {
            float _2570;
            float _2572;
            float _2574;
            float _2576;
            float _2578;
            float _2580;
            float _2722 = 0.0;
            float _2723 = 0.0;
            float _2724 = 0.0;
            float _2725 = 0.0;
            float _2726 = 0.0;
            float _2727 = 0.0;
            uint _2728 = 0u;
            uint _2737;
            bool _2738;
            for (;;)
            {
                _2737 = texelFetch(g_lightClassification, int((((_2462 << 5u) + (_2448 << 9u)) + (_2728 << 2u)) >> 2u)).x;
                _2738 = _2737 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2738)
                {
                    frontier_phi_66_pred = _2722;
                    frontier_phi_66_pred_1 = _2727;
                    frontier_phi_66_pred_2 = _2726;
                    frontier_phi_66_pred_3 = _2725;
                    frontier_phi_66_pred_4 = _2724;
                    frontier_phi_66_pred_5 = _2723;
                }
                else
                {
                    float _2867;
                    float _2868;
                    float _2869;
                    float _2870;
                    float _2871;
                    float _2872;
                    uint _2873;
                    _2867 = _2722;
                    _2868 = _2723;
                    _2869 = _2724;
                    _2870 = _2725;
                    _2871 = _2726;
                    _2872 = _2727;
                    _2873 = _2737;
                    float _2794;
                    float _2795;
                    float _2796;
                    float _2797;
                    float _2798;
                    float _2799;
                    for (;;)
                    {
                        uint _2877 = uint(findLSB(_2873)) + (_2728 << 5u);
                        uint _2874 = (_2873 + 4294967295u) & _2873;
                        uint _2879 = _2877 * 48u;
                        vec4 _2893 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2879)).x, texelFetch(g_PointLightRenderingBuffer, int(_2879 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2879 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2879 + 3u)).x));
                        uint _2899 = (_2877 * 48u) + 4u;
                        vec4 _2912 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2899)).x, texelFetch(g_PointLightRenderingBuffer, int(_2899 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2899 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2899 + 3u)).x));
                        uint _2918 = (_2877 * 48u) + 8u;
                        vec3 _2929 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2918)).x, texelFetch(g_PointLightRenderingBuffer, int(_2918 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2918 + 2u)).x));
                        float _2933 = _2893.x - _2422;
                        float _2934 = _2893.y - _2423;
                        float _2935 = _2893.z - _2424;
                        float _2936 = dot(vec3(_2933, _2934, _2935), vec3(_2933, _2934, _2935));
                        float _2939 = inversesqrt(_2936);
                        float _2940 = _2939 * _2933;
                        float _2941 = _2939 * _2934;
                        float _2942 = _2939 * _2935;
                        float _2943 = dot(vec3(_654, _657, _660), vec3(_2940, _2941, _2942));
                        float _2948 = 1.0 - (_2936 * _2893.w);
                        float _4295 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
                        float _2949 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
                        float _2950 = sqrt(_2936) * _2912.w;
                        float _2953 = 1.39999997615814208984375 / (_2950 + 1.39999997615814208984375);
                        float _2954 = _2953 * _2953;
                        float _2957 = ((1.0 - _2954) * _2943) + _2954;
                        float _2960 = _2950 * _2950;
                        float _2964 = ((isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0))) * _2949) / ((_2960 * 0.699999988079071044921875) + 1.0);
                        float _2968 = (-0.0) - _2422;
                        float _2969 = (-0.0) - _2423;
                        float _2970 = (-0.0) - _2424;
                        float _2974 = inversesqrt(dot(vec3(_2968, _2969, _2970), vec3(_2968, _2969, _2970)));
                        float _2975 = _2974 * _2968;
                        float _2976 = _2974 * _2969;
                        float _2977 = _2974 * _2970;
                        float _2985 = exp2(log2(1.0 / ((_2960 * 3.5) + 5.0)) * 0.25);
                        float _2986 = 1.0 - _729;
                        float _2993 = sqrt(1.0 - ((1.0 - (_2986 * _2986)) * (1.0 - (_2985 * _2985))));
                        float _2994 = _2993 * _2993;
                        float _2995 = _2994 * _2994;
                        float _2996 = _2975 + _2940;
                        float _2997 = _2976 + _2941;
                        float _2998 = _2977 + _2942;
                        float _3002 = inversesqrt(dot(vec3(_2996, _2997, _2998), vec3(_2996, _2997, _2998)));
                        float _3006 = dot(vec3(_654, _657, _660), vec3(_2975, _2976, _2977));
                        float _4311 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
                        float _3009 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
                        float _3010 = dot(vec3(_654, _657, _660), vec3(_3002 * _2996, _3002 * _2997, _3002 * _2998));
                        float _4322 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
                        float _3013 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
                        float _3017 = ((_3013 * _3013) * (_2995 + (-1.0))) + 1.0;
                        float _3018 = _2953 * _2994;
                        float _3019 = _3018 * _3018;
                        float _3022 = ((1.0 - _3019) * _2943) + _3019;
                        float _4333 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
                        float _3023 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
                        float _3024 = 1.0 - _2994;
                        float _3034 = (0.5 / (((_3023 * ((_3009 * _3024) + _2994)) + 9.9999999392252902907785028219223e-09) + (((_3023 * _3024) + _2994) * _3009))) * _3023;
                        float _4344 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
                        float _3045 = (((_2995 * 3.1415927410125732421875) * (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0)))) / ((_3017 * _3017) * ((_2960 * 2.1991131305694580078125) + 3.141590118408203125))) * _2949;
                        _2797 = (_2964 * _2912.x) + _2870;
                        _2798 = (_2964 * _2912.y) + _2871;
                        _2799 = (_2964 * _2912.z) + _2872;
                        _2794 = (_3045 * _2929.x) + _2867;
                        _2795 = (_3045 * _2929.y) + _2868;
                        _2796 = (_3045 * _2929.z) + _2869;
                        if (_2874 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2867 = _2794;
                            _2868 = _2795;
                            _2869 = _2796;
                            _2870 = _2797;
                            _2871 = _2798;
                            _2872 = _2799;
                            _2873 = _2874;
                        }
                    }
                    frontier_phi_66_pred = _2794;
                    frontier_phi_66_pred_1 = _2799;
                    frontier_phi_66_pred_2 = _2798;
                    frontier_phi_66_pred_3 = _2797;
                    frontier_phi_66_pred_4 = _2796;
                    frontier_phi_66_pred_5 = _2795;
                }
                _2570 = frontier_phi_66_pred;
                _2580 = frontier_phi_66_pred_1;
                _2578 = frontier_phi_66_pred_2;
                _2576 = frontier_phi_66_pred_3;
                _2574 = frontier_phi_66_pred_4;
                _2572 = frontier_phi_66_pred_5;
                uint _2729 = _2728 + 1u;
                if (_2729 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2722 = _2570;
                    _2723 = _2572;
                    _2724 = _2574;
                    _2725 = _2576;
                    _2726 = _2578;
                    _2727 = _2580;
                    _2728 = _2729;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2569 = _2570;
            _2571 = _2572;
            _2573 = _2574;
            _2575 = _2576;
            _2577 = _2578;
            _2579 = _2580;
        }
        uvec4 _2583 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2584 = _2583.z;
        uint _2586 = (_2584 >> 8u) & 15u;
        float _2690;
        float _2692;
        float _2694;
        float _2696;
        float _2698;
        float _2700;
        if (((4294967295u << _2586) & _2468) == 0u)
        {
            _2690 = _2569;
            _2692 = _2571;
            _2694 = _2573;
            _2696 = _2575;
            _2698 = _2577;
            _2700 = _2579;
        }
        else
        {
            float _2715 = inversesqrt(dot(vec3(_2422, _2423, _2424), vec3(_2422, _2423, _2424)));
            float _2716 = _2715 * _2422;
            float _2717 = _2715 * _2423;
            float _2718 = _2715 * _2424;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2586 < ((_2584 >> 12u) & 15u))
            {
                float _2691;
                float _2693;
                float _2695;
                float _2697;
                float _2699;
                float _2701;
                float _2850 = _2569;
                float _2851 = _2571;
                float _2852 = _2573;
                float _2853 = _2575;
                float _2854 = _2577;
                float _2855 = _2579;
                uint _2856 = _2586;
                uint _2865;
                bool _2866;
                for (;;)
                {
                    _2865 = texelFetch(g_lightClassification, int((((_2462 << 5u) + (_2448 << 9u)) + (_2856 << 2u)) >> 2u)).x;
                    _2866 = _2865 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2866)
                    {
                        frontier_phi_77_pred = _2855;
                        frontier_phi_77_pred_1 = _2854;
                        frontier_phi_77_pred_2 = _2853;
                        frontier_phi_77_pred_3 = _2852;
                        frontier_phi_77_pred_4 = _2851;
                        frontier_phi_77_pred_5 = _2850;
                    }
                    else
                    {
                        float _3059;
                        float _3060;
                        float _3061;
                        float _3062;
                        float _3063;
                        float _3064;
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3357;
                        float _3358;
                        float _3072 = _2850;
                        float _3073 = _2851;
                        float _3074 = _2852;
                        float _3075 = _2853;
                        float _3076 = _2854;
                        float _3077 = _2855;
                        uint _3078 = _2865;
                        uint _3079;
                        vec4 _3104;
                        float _3105;
                        vec4 _3120;
                        vec3 _3132;
                        vec4 _3147;
                        vec4 _3163;
                        float _3209;
                        bool _3210;
                        for (;;)
                        {
                            uint _3089 = ((_2856 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3078));
                            _3079 = (_3078 + 4294967295u) & _3078;
                            uint _3091 = _3089 * 40u;
                            _3104 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3091)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 3u)).x));
                            _3105 = _3104.w;
                            uint _3107 = (_3089 * 40u) + 4u;
                            _3120 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3107)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 3u)).x));
                            uint _3122 = (_3089 * 40u) + 8u;
                            _3132 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3122)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 2u)).x));
                            uint _3134 = (_3089 * 40u) + 16u;
                            _3147 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 3u)).x));
                            uint _3150 = (_3089 * 40u) + 20u;
                            _3163 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3150)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 3u)).x));
                            uint _3165 = (_3089 * 40u) + 24u;
                            vec4 _3178 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 3u)).x));
                            uint _3184 = (_3089 * 40u) + 28u;
                            vec4 _3197 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3184)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 3u)).x));
                            _3209 = fma(_2424, _3197.z, fma(_2423, _3197.y, _3197.x * _2422)) + _3197.w;
                            _3210 = !((fma(_2424, _3178.z, fma(_2423, _3178.y, _3178.x * _2422)) + _3178.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3210)
                            {
                                float _3237 = _3104.x - _2422;
                                float _3238 = _3104.y - _2423;
                                float _3239 = _3104.z - _2424;
                                float _3240 = dot(vec3(_3237, _3238, _3239), vec3(_3237, _3238, _3239));
                                float _3243 = inversesqrt(_3240);
                                float _3244 = _3243 * _3237;
                                float _3245 = _3243 * _3238;
                                float _3246 = _3243 * _3239;
                                float _3250 = 1.0 - (_3240 / (_3105 * _3105));
                                float _4355 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                                float _3251 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
                                float _3255 = sqrt(_3240) * _3120.w;
                                float _3257 = 1.39999997615814208984375 / (_3255 + 1.39999997615814208984375);
                                float _3258 = _3257 * _3257;
                                float _3261 = ((1.0 - _3258) * dot(vec3(_3244, _3245, _3246), vec3(_654, _657, _660))) + _3258;
                                float _3264 = _3255 * _3255;
                                float _3268 = (fma(_2424, _3147.z, fma(_2423, _3147.y, _3147.x * _2422)) + _3147.w) / _3209;
                                float _3269 = (fma(_2424, _3163.z, fma(_2423, _3163.y, _3163.x * _2422)) + _3163.w) / _3209;
                                float _3273 = 1.0 - dot(vec2(_3268, _3269), vec2(_3268, _3269));
                                float _4371 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                                float _3274 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
                                float _3275 = _3274 * (((isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0))) * _3251) / ((_3264 * 0.699999988079071044921875) + 1.0));
                                float _3287 = exp2(log2(1.0 / ((_3264 * 3.5) + 5.0)) * 0.25);
                                float _3288 = 1.0 - _729;
                                float _3295 = sqrt(1.0 - ((1.0 - (_3288 * _3288)) * (1.0 - (_3287 * _3287))));
                                float _3296 = _3295 * _3295;
                                float _3297 = _3296 * _3296;
                                float _3298 = _3244 - _2716;
                                float _3299 = _3245 - _2717;
                                float _3300 = _3246 - _2718;
                                float _3304 = inversesqrt(dot(vec3(_3298, _3299, _3300), vec3(_3298, _3299, _3300)));
                                float _3308 = dot(vec3(_654, _657, _660), vec3((-0.0) - _2716, (-0.0) - _2717, (-0.0) - _2718));
                                float _4382 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                                float _3311 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
                                float _3312 = dot(vec3(_654, _657, _660), vec3(_3304 * _3298, _3304 * _3299, _3304 * _3300));
                                float _4393 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                                float _3315 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
                                float _3319 = ((_3315 * _3315) * (_3297 + (-1.0))) + 1.0;
                                float _3320 = _3257 * _3296;
                                float _3321 = _3320 * _3320;
                                float _3327 = ((1.0 - _3321) * dot(vec3(_654, _657, _660), vec3(_3244, _3245, _3246))) + _3321;
                                float _4404 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                                float _3328 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
                                float _3329 = 1.0 - _3296;
                                float _3339 = (0.5 / (((_3328 * ((_3311 * _3329) + _3296)) + 9.9999999392252902907785028219223e-09) + (((_3328 * _3329) + _3296) * _3311))) * _3328;
                                float _4415 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                                float _3349 = (_3274 * _3251) * (((_3297 * 3.1415927410125732421875) * (isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0)))) / ((_3319 * _3319) * ((_3264 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3275 * _3120.y;
                                frontier_phi_83_pred_1 = _3275 * _3120.x;
                                frontier_phi_83_pred_2 = _3349 * _3132.z;
                                frontier_phi_83_pred_3 = _3349 * _3132.y;
                                frontier_phi_83_pred_4 = _3349 * _3132.x;
                                frontier_phi_83_pred_5 = _3275 * _3120.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3357 = frontier_phi_83_pred;
                            _3356 = frontier_phi_83_pred_1;
                            _3355 = frontier_phi_83_pred_2;
                            _3354 = frontier_phi_83_pred_3;
                            _3353 = frontier_phi_83_pred_4;
                            _3358 = frontier_phi_83_pred_5;
                            _3062 = _3356 + _3075;
                            _3063 = _3357 + _3076;
                            _3064 = _3358 + _3077;
                            _3059 = _3353 + _3072;
                            _3060 = _3354 + _3073;
                            _3061 = _3355 + _3074;
                            if (_3079 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3072 = _3059;
                                _3073 = _3060;
                                _3074 = _3061;
                                _3075 = _3062;
                                _3076 = _3063;
                                _3077 = _3064;
                                _3078 = _3079;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3064;
                        frontier_phi_77_pred_1 = _3063;
                        frontier_phi_77_pred_2 = _3062;
                        frontier_phi_77_pred_3 = _3061;
                        frontier_phi_77_pred_4 = _3060;
                        frontier_phi_77_pred_5 = _3059;
                    }
                    _2701 = frontier_phi_77_pred;
                    _2699 = frontier_phi_77_pred_1;
                    _2697 = frontier_phi_77_pred_2;
                    _2695 = frontier_phi_77_pred_3;
                    _2693 = frontier_phi_77_pred_4;
                    _2691 = frontier_phi_77_pred_5;
                    uint _2857 = _2856 + 1u;
                    if (_2857 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2850 = _2691;
                        _2851 = _2693;
                        _2852 = _2695;
                        _2853 = _2697;
                        _2854 = _2699;
                        _2855 = _2701;
                        _2856 = _2857;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2695;
                frontier_phi_58_59_ladder_1 = _2701;
                frontier_phi_58_59_ladder_2 = _2699;
                frontier_phi_58_59_ladder_3 = _2697;
                frontier_phi_58_59_ladder_4 = _2693;
                frontier_phi_58_59_ladder_5 = _2691;
            }
            else
            {
                frontier_phi_58_59_ladder = _2573;
                frontier_phi_58_59_ladder_1 = _2579;
                frontier_phi_58_59_ladder_2 = _2577;
                frontier_phi_58_59_ladder_3 = _2575;
                frontier_phi_58_59_ladder_4 = _2571;
                frontier_phi_58_59_ladder_5 = _2569;
            }
            _2690 = frontier_phi_58_59_ladder_5;
            _2692 = frontier_phi_58_59_ladder_4;
            _2694 = frontier_phi_58_59_ladder;
            _2696 = frontier_phi_58_59_ladder_3;
            _2698 = frontier_phi_58_59_ladder_2;
            _2700 = frontier_phi_58_59_ladder_1;
        }
        float _2705 = isnan(1.0) ? _713 : (isnan(_713) ? 1.0 : min(_713, 1.0));
        _2481 = (_2705 * _2696) + _1917;
        _2483 = (_2705 * _2698) + _1919;
        _2485 = (_2705 * _2700) + _1921;
        _2487 = ((_2690 * _697) * _2705) + _2262;
        _2489 = ((_2692 * _699) * _2705) + _2264;
        _2491 = ((_2694 * _700) * _2705) + _2266;
    }
    else
    {
        _2481 = _1917;
        _2483 = _1919;
        _2485 = _1921;
        _2487 = _2262;
        _2489 = _2264;
        _2491 = _2266;
    }
    float _4431 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _4442 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _4453 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _2508 = ((isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_2481 + ((isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0))) * _713))) + ((_2487 + ((isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))) * _1553)) * cbPerFrame._m0[3u].x);
    float _2509 = ((isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (_2483 + ((isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0))) * _713))) + ((_2489 + ((isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))) * _1553)) * cbPerFrame._m0[3u].x);
    float _2510 = ((isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_2485 + ((isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))) * _713))) + ((_2491 + ((isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))) * _1553)) * cbPerFrame._m0[3u].x);
    uint _2511 = _232 + 6u;
    float _2519 = _635 / cbSceneParam._m0[86u].x;
    float _2520 = _636 / cbSceneParam._m0[86u].y;
    vec4 _2534 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2519, _2520, (log2((isnan(cbSceneParam._m0[77u].w) ? _557 : (isnan(_557) ? cbSceneParam._m0[77u].w : min(_557, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2536 = _2534.x;
    float _2537 = _2534.y;
    float _2538 = _2534.z;
    float _2539 = _2534.w;
    float _2632;
    float _2634;
    float _2636;
    float _2638;
    if (_557 > cbSceneParam._m0[78u].w)
    {
        float _2594 = isnan(_557) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _557 : min(cbSceneParam._m0[80u].w, _557));
        float _2595 = _2594 / _557;
        float _2606 = _2595 * _608;
        float _2607 = _609 * _2595;
        float _2608 = (-0.0) - _2607;
        float _2610 = _2595 * _610;
        float _2612 = (cbSceneParam._m0[77u].w * _2608) / _2594;
        float _2613 = _2612 + cbSceneParam._m0[79u].w;
        float _2614 = cbSceneParam._m0[79u].w - _2607;
        float _2620 = sqrt(((_2606 * _2606) + (_2607 * _2607)) + (_2610 * _2610));
        float _2623 = (1.0 - (cbSceneParam._m0[77u].w / _2594)) * _2620;
        float _2628 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2630 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2807;
        if (abs((_2608 - _2612) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2807 = ((((_2613 > 0.0) ? exp2(_2628 * _2613) : (2.0 - exp2(_2630 * _2613))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2623;
        }
        else
        {
            float _2751 = 1.0 / cbSceneParam._m0[80u].x;
            float _2752 = isnan(_2614) ? _2613 : (isnan(_2613) ? _2614 : max(_2613, _2614));
            float _2753 = isnan(_2614) ? _2613 : (isnan(_2613) ? _2614 : min(_2613, _2614));
            float _2762 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : min(_2752, 0.0));
            float _2763 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : min(_2753, 0.0));
            _2807 = ((abs(_2620 / _2608) * cbSceneParam._m0[80u].y) * ((((_2762 - _2763) * 2.0) - ((exp2(_2628 * (isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0)))) - exp2(_2628 * (isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0))))) * _2751)) - ((exp2(_2630 * _2762) - exp2(_2630 * _2763)) * _2751))) + (_2623 * cbSceneParam._m0[80u].z);
        }
        vec4 _2809 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2519, _2520, 1.0), 0.0);
        float _2818 = exp2((_2807 * (-1.44269502162933349609375)) * (1.0 - _2809.w));
        float _2819 = log2(_2818);
        float _2835 = log2(_2539);
        _2632 = (exp2(_2835 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2819 * cbSceneParam._m0[78u].x)) * _2809.x) / cbSceneParam._m0[78u].x)) + _2536;
        _2634 = (exp2(_2835 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2819 * cbSceneParam._m0[78u].y)) * _2809.y) / cbSceneParam._m0[78u].y)) + _2537;
        _2636 = (exp2(_2835 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2819 * cbSceneParam._m0[78u].z)) * _2809.z) / cbSceneParam._m0[78u].z)) + _2538;
        _2638 = _2818 * _2539;
    }
    else
    {
        _2632 = _2536;
        _2634 = _2537;
        _2636 = _2538;
        _2638 = _2539;
    }
    bool _2845;
    vec4 _2648;
    vec4 _2670;
    float _2672;
    float _2676;
    float _2677;
    float _2678;
    float _2679;
    bool _2689;
    for (;;)
    {
        _2648 = cbMatDynParam._m0[0u];
        float _2650 = roundEven(_2648.y);
        bool _2651 = _2650 == 3.0;
        float _2652 = log2(_2638);
        float _2659 = exp2(_2652 * cbSceneParam._m0[78u].x) * _2508;
        float _2660 = exp2(_2652 * cbSceneParam._m0[78u].y) * _2509;
        float _2661 = exp2(_2652 * cbSceneParam._m0[78u].z) * _2510;
        float _2668 = _624 + (-0.5);
        _2670 = cbMtdParam._m0[1u];
        _2672 = _2670.y * _2668;
        float _2675 = (_2650 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2676 = _2675 * (_2651 ? _2659 : (_2659 + (cbSceneParam._m0[72u].w * _2632)));
        _2677 = _2675 * (_2651 ? _2660 : (_2660 + (cbSceneParam._m0[72u].w * _2634)));
        _2678 = _2675 * (_2651 ? _2661 : (_2661 + (cbSceneParam._m0[72u].w * _2636)));
        _2679 = _2668 * 0.999000012874603271484375;
        _2689 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2689)
        {
            if ((cbInstanceData._m0[_232 + 7u].x + _2679) < 0.5)
            {
                _2845 = true;
                break;
            }
        }
        uint _2786 = _673 + uint(_2648.w);
        if ((cbInstanceData._m0[_2786].w < 1.0) && ((cbInstanceData._m0[_2786].w + _2679) < 0.5))
        {
            _2845 = true;
            break;
        }
        if ((_2672 + 1.0) < _2670.x)
        {
            _2845 = true;
            break;
        }
        _2845 = false;
        break;
    }
    float _3050;
    if (_2845)
    {
        discard_state = true;
        _3050 = 0.0;
    }
    else
    {
        _3050 = cbInstanceData._m0[_2511].w;
    }
    SV_Target.x = _2676;
    SV_Target.y = _2677;
    SV_Target.z = _2678;
    SV_Target.w = _3050;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2511].w;
    discard_exit();
}


