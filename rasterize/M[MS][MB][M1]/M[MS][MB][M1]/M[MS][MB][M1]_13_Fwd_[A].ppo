#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1018;
float _3403;
float _3404;
float _3405;
float _3406;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _224 = uint(roundEven(NORMAL.w)) * 13u;
    uint _230 = _224 + 1u;
    uint _234 = _224 + 2u;
    float _243 = sqrt(((cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x) + (cbInstanceData._m0[_224].x * cbInstanceData._m0[_224].x)) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x));
    float _244 = _243 * TEXCOORD.z;
    float _245 = _243 * TEXCOORD.w;
    vec4 _264 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _270 = _264.x * cbMtdParam._m0[9u].x;
    float _271 = _264.y * cbMtdParam._m0[9u].y;
    float _272 = _264.z * cbMtdParam._m0[9u].z;
    vec4 _290 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _294 = _290.z;
    float _299 = (_290.x * 2.0) + (-1.0);
    float _301 = (_290.y * 2.0) + (-1.0);
    float _302 = dot(vec2(_299, _301), vec2(_299, _301));
    float _3415 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _308 = sqrt(1.0 - (isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0))));
    vec4 _325 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _244) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _245) + cbTextureTilingScale._m0[11u].w));
    float _327 = _325.x;
    float _328 = 1.0 - _327;
    float _344 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_327 - _328) * cbMtdParam._m0[24u].z) + _328) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3426 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _345 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
    float _352 = (_345 * (cbMtdParam._m0[17u].x - _270)) + _270;
    float _353 = (_345 * (cbMtdParam._m0[17u].y - _271)) + _271;
    float _354 = (_345 * (cbMtdParam._m0[17u].z - _272)) + _272;
    vec4 _367 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _369 = _367.x;
    float _371 = _369 - (_369 * _345);
    vec4 _384 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _244) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _245) + cbTextureTilingScale._m0[15u].w));
    float _391 = (_384.x * 2.0) + (-1.0);
    float _392 = (_384.y * 2.0) + (-1.0);
    float _393 = dot(vec2(_391, _392), vec2(_391, _392));
    float _3437 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _401 = (_345 * (_384.z - _294)) + _294;
    float _413 = (((_391 - _299) + (cbMtdParam._m0[21u].x * _299)) * _345) + _299;
    float _414 = (((_392 - _301) + (cbMtdParam._m0[21u].x * _301)) * _345) + _301;
    float _415 = (_345 * (sqrt(1.0 - (isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0)))) - _308)) + _308;
    float _420 = cbMtdParam._m0[22u].x + _290.w;
    float _423 = fma(_415, _211 * NORMAL.x, fma(_414, _218 * TANGENT.x, (_204 * _196) * _413));
    float _426 = fma(_415, _211 * NORMAL.y, fma(_414, _218 * TANGENT.y, (_204 * _197) * _413));
    float _429 = fma(_415, _211 * NORMAL.z, fma(_414, _218 * TANGENT.z, (_204 * _198) * _413));
    float _433 = inversesqrt(dot(vec3(_423, _426, _429), vec3(_423, _426, _429)));
    float _434 = _433 * _423;
    float _435 = _433 * _426;
    float _436 = _433 * _429;
    float _3448 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _437 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
    float _3459 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _3470 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _3481 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _3492 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _3503 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _442 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
    float _456 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _497 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _507 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _497);
    float _508 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _497);
    float _509 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _497);
    float _513 = inversesqrt(dot(vec3(_507, _508, _509), vec3(_507, _508, _509)));
    float _514 = _507 * _513;
    float _515 = _508 * _513;
    float _516 = _509 * _513;
    vec4 _521 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _523 = _521.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _698 = sqrt(((_507 * _507) + (_508 * _508)) + (_509 * _509));
        float _704 = (cbMatDynParam._m0[5u].x * _698) + cbMatDynParam._m0[5u].y;
        float _3514 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _705 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
        float _709 = (cbMatDynParam._m0[5u].z * _698) + cbMatDynParam._m0[5u].w;
        float _3525 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0))) - _705)) + _705) < ((_523 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _535 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _536 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _556 = fma(_436, cbSceneParam._m0[5u].z, fma(_435, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _434));
    float _559 = fma(_436, cbSceneParam._m0[6u].z, fma(_435, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _434));
    float _562 = fma(_436, cbSceneParam._m0[7u].z, fma(_435, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _434));
    uint _575 = _224 + 9u;
    uint _576 = _575 + uint(cbMatDynParam._m0[0u].w);
    float _582 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0)))) * cbInstanceData._m0[_576].x;
    float _583 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0)))) * cbInstanceData._m0[_576].y;
    float _584 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0)))) * cbInstanceData._m0[_576].z;
    float _3536 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _585 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
    float _3547 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _586 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
    float _3558 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _587 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
    float _588 = 1.0 - _442;
    float _589 = _585 * _588;
    float _590 = _586 * _588;
    float _591 = _587 * _588;
    float _596 = (_585 + (-0.039999999105930328369140625)) * _442;
    float _597 = (_586 + (-0.039999999105930328369140625)) * _442;
    float _598 = (_587 + (-0.039999999105930328369140625)) * _442;
    float _599 = _596 + 0.039999999105930328369140625;
    float _601 = _597 + 0.039999999105930328369140625;
    float _602 = _598 + 0.039999999105930328369140625;
    vec4 _611 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _535, cbSceneParam._m0[86u].y * _536));
    float _615 = ((isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0))) * TEXCOORD_5.w) * _611.x;
    float _616 = dot(vec3(_434, _435, _436), vec3(_514, _515, _516));
    float _619 = _616 * 2.0;
    float _623 = (_619 * _434) - _514;
    float _624 = (_619 * _435) - _515;
    float _625 = (_619 * _436) - _516;
    float _629 = abs(dot(vec3(_514, _515, _516), vec3(_434, _435, _436)));
    float _3569 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _631 = sqrt(_437);
    float _644 = exp2((_631 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_631 * 3.0));
    float _650 = (1.0 - _644) * ((_631 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _651 = _644 * _631;
    float _679 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _683 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _687 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1017;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _742 = fma(_687, cbModelParam._m0[26u].z, fma(_683, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _679));
        float _746 = fma(_687, cbModelParam._m0[27u].z, fma(_683, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _679));
        float _750 = fma(_687, cbModelParam._m0[28u].z, fma(_683, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _679));
        float _775 = _679 + _434;
        float _776 = _683 + _435;
        float _777 = _687 + _436;
        float _787 = fma(_777, cbModelParam._m0[26u].z, fma(_776, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _775)) - _742;
        float _788 = fma(_777, cbModelParam._m0[27u].z, fma(_776, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _775)) - _746;
        float _789 = fma(_777, cbModelParam._m0[28u].z, fma(_776, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _775)) - _750;
        float _793 = inversesqrt(dot(vec3(_787, _788, _789), vec3(_787, _788, _789)));
        float _806 = ((_793 * _787) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_742 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _807 = ((_793 * _788) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_746 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _808 = ((_793 * _789) / cbModelParam._m0[34u].z) + ((((((_750 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _811 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        vec4 _818 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        vec4 _825 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        vec4 _832 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        float _845 = exp2((_811.w + (-0.5)) * 20.0) * 2.0;
        float _846 = _845 * (_811.x + (-0.5));
        float _847 = _845 * (_811.y + (-0.5));
        float _848 = _845 * (_811.z + (-0.5));
        float _855 = exp2((_818.w + (-0.5)) * 20.0) * 2.0;
        float _856 = _855 * (_818.x + (-0.5));
        float _857 = _855 * (_818.y + (-0.5));
        float _858 = _855 * (_818.z + (-0.5));
        float _865 = exp2((_825.w + (-0.5)) * 20.0) * 2.0;
        float _866 = _865 * (_825.x + (-0.5));
        float _867 = _865 * (_825.y + (-0.5));
        float _868 = _865 * (_825.z + (-0.5));
        float _875 = exp2((_832.w + (-0.5)) * 20.0) * 2.0;
        float _876 = _875 * (_832.x + (-0.5));
        float _877 = _875 * (_832.y + (-0.5));
        float _878 = _875 * (_832.z + (-0.5));
        float _879 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _880 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _881 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _882 = _846 * 0.5;
        float _883 = _856 * 0.5;
        float _884 = _866 * 0.5;
        float _885 = dot(vec3(_882, _883, _884), vec3(_882, _883, _884));
        float _890 = (_885 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_885);
        float _899 = (dot(vec3(_434, _435, _436), vec3(_890 * _882, _890 * _883, _890 * _884)) + 1.0) * 0.5;
        float _3595 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _909 = sqrt(((_883 * _883) + (_882 * _882)) + (_884 * _884)) / (_879 + 9.9999997473787516355514526367188e-06);
        float _3606 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _910 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _911 = _910 * 2.0;
        float _915 = (1.0 - _910) / (_910 + 1.0);
        float _3617 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _925 = ((((1.0 - _916) * (_911 + 2.0)) * exp2(log2(isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0))) * (_911 + 1.0))) + _916) * _879;
        float _926 = _847 * 0.5;
        float _927 = _857 * 0.5;
        float _928 = _867 * 0.5;
        float _929 = dot(vec3(_926, _927, _928), vec3(_926, _927, _928));
        float _934 = (_929 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_929);
        float _942 = (dot(vec3(_434, _435, _436), vec3(_934 * _926, _934 * _927, _934 * _928)) + 1.0) * 0.5;
        float _3628 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _951 = sqrt(((_927 * _927) + (_926 * _926)) + (_928 * _928)) / (_880 + 9.9999997473787516355514526367188e-06);
        float _3639 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _953 = _952 * 2.0;
        float _957 = (1.0 - _952) / (_952 + 1.0);
        float _3650 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _967 = ((((1.0 - _958) * (_953 + 2.0)) * exp2(log2(isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) * (_953 + 1.0))) + _958) * _880;
        float _968 = _848 * 0.5;
        float _969 = _858 * 0.5;
        float _970 = _868 * 0.5;
        float _971 = dot(vec3(_968, _969, _970), vec3(_968, _969, _970));
        float _976 = (_971 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_971);
        float _984 = (dot(vec3(_434, _435, _436), vec3(_976 * _968, _976 * _969, _976 * _970)) + 1.0) * 0.5;
        float _3661 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _993 = sqrt(((_969 * _969) + (_968 * _968)) + (_970 * _970)) / (_881 + 9.9999997473787516355514526367188e-06);
        float _3672 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _995 = _994 * 2.0;
        float _999 = (1.0 - _994) / (_994 + 1.0);
        float _3683 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1009 = ((((1.0 - _1000) * (_995 + 2.0)) * exp2(log2(isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * (_995 + 1.0))) + _1000) * _881;
        _1017 = _848;
        _1019 = _847;
        _1020 = _846;
        _1021 = _858;
        _1022 = _857;
        _1023 = _856;
        _1024 = _868;
        _1025 = _867;
        _1026 = _866;
        _1027 = _881;
        _1028 = _880;
        _1029 = _879;
        _1030 = cbModelParam._m0[36u].z * (isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0)));
        _1031 = cbModelParam._m0[36u].z * (isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0)));
        _1032 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0)));
    }
    else
    {
        _1017 = _1018;
        _1019 = _1018;
        _1020 = _1018;
        _1021 = _1018;
        _1022 = _1018;
        _1023 = _1018;
        _1024 = _1018;
        _1025 = _1018;
        _1026 = _1018;
        _1027 = _1018;
        _1028 = _1018;
        _1029 = _1018;
        _1030 = 0.0;
        _1031 = 0.0;
        _1032 = 0.0;
    }
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1060 = fma(_687, cbModelParam._m0[30u].z, fma(_683, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _679));
        float _1064 = fma(_687, cbModelParam._m0[31u].z, fma(_683, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _679));
        float _1068 = fma(_687, cbModelParam._m0[32u].z, fma(_683, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _679));
        float _1091 = _679 + _434;
        float _1092 = _683 + _435;
        float _1093 = _687 + _436;
        float _1103 = fma(_1093, cbModelParam._m0[30u].z, fma(_1092, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1091)) - _1060;
        float _1104 = fma(_1093, cbModelParam._m0[31u].z, fma(_1092, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1091)) - _1064;
        float _1105 = fma(_1093, cbModelParam._m0[32u].z, fma(_1092, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1091)) - _1068;
        float _1109 = inversesqrt(dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105)));
        float _1122 = ((_1109 * _1103) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1060 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1123 = ((_1109 * _1104) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1064 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1124 = ((_1109 * _1105) / cbModelParam._m0[35u].z) + ((((((_1068 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        float _1159 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1126.x + (-0.5));
        float _1161 = _1159 * (_1126.y + (-0.5));
        float _1162 = _1159 * (_1126.z + (-0.5));
        float _1169 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1133.x + (-0.5));
        float _1171 = _1169 * (_1133.y + (-0.5));
        float _1172 = _1169 * (_1133.z + (-0.5));
        float _1179 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1140.x + (-0.5));
        float _1181 = _1179 * (_1140.y + (-0.5));
        float _1182 = _1179 * (_1140.z + (-0.5));
        float _1189 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1147.x + (-0.5));
        float _1191 = _1189 * (_1147.y + (-0.5));
        float _1192 = _1189 * (_1147.z + (-0.5));
        float _1193 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = _1160 * 0.5;
        float _1197 = _1170 * 0.5;
        float _1198 = _1180 * 0.5;
        float _1199 = dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198));
        float _1204 = (_1199 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1199);
        float _1212 = (dot(vec3(_434, _435, _436), vec3(_1204 * _1196, _1204 * _1197, _1204 * _1198)) + 1.0) * 0.5;
        float _3724 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1221 = sqrt(((_1197 * _1197) + (_1196 * _1196)) + (_1198 * _1198)) / (_1193 + 9.9999997473787516355514526367188e-06);
        float _3735 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1223 = _1222 * 2.0;
        float _1227 = (1.0 - _1222) / (_1222 + 1.0);
        float _3746 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1237 = ((((1.0 - _1228) * (_1223 + 2.0)) * exp2(log2(isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * (_1223 + 1.0))) + _1228) * _1193;
        float _1238 = _1161 * 0.5;
        float _1239 = _1171 * 0.5;
        float _1240 = _1181 * 0.5;
        float _1241 = dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240));
        float _1246 = (_1241 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1241);
        float _1254 = (dot(vec3(_434, _435, _436), vec3(_1246 * _1238, _1246 * _1239, _1246 * _1240)) + 1.0) * 0.5;
        float _3757 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1263 = sqrt(((_1239 * _1239) + (_1238 * _1238)) + (_1240 * _1240)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _3768 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1265 = _1264 * 2.0;
        float _1269 = (1.0 - _1264) / (_1264 + 1.0);
        float _3779 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1279 = ((((1.0 - _1270) * (_1265 + 2.0)) * exp2(log2(isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * (_1265 + 1.0))) + _1270) * _1194;
        float _1280 = _1162 * 0.5;
        float _1281 = _1172 * 0.5;
        float _1282 = _1182 * 0.5;
        float _1283 = dot(vec3(_1280, _1281, _1282), vec3(_1280, _1281, _1282));
        float _1288 = (_1283 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1283);
        float _1296 = (dot(vec3(_434, _435, _436), vec3(_1288 * _1280, _1288 * _1281, _1288 * _1282)) + 1.0) * 0.5;
        float _3790 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1305 = sqrt(((_1281 * _1281) + (_1280 * _1280)) + (_1282 * _1282)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _3801 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1307 = _1306 * 2.0;
        float _1311 = (1.0 - _1306) / (_1306 + 1.0);
        float _3812 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1321 = ((((1.0 - _1312) * (_1307 + 2.0)) * exp2(log2(isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * (_1307 + 1.0))) + _1312) * _1195;
        _1329 = _1162;
        _1330 = _1161;
        _1331 = _1160;
        _1332 = _1172;
        _1333 = _1171;
        _1334 = _1170;
        _1335 = _1182;
        _1336 = _1181;
        _1337 = _1180;
        _1338 = _1195;
        _1339 = _1194;
        _1340 = _1193;
        _1341 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)));
        _1342 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)));
        _1343 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)));
    }
    else
    {
        _1329 = _1018;
        _1330 = _1018;
        _1331 = _1018;
        _1332 = _1018;
        _1333 = _1018;
        _1334 = _1018;
        _1335 = _1018;
        _1336 = _1018;
        _1337 = _1018;
        _1338 = _1018;
        _1339 = _1018;
        _1340 = _1018;
        _1341 = 0.0;
        _1342 = 0.0;
        _1343 = 0.0;
    }
    float _1353 = (cbModelParam._m0[1u].x * (_1341 - _1030)) + _1030;
    float _1354 = (cbModelParam._m0[1u].x * (_1342 - _1031)) + _1031;
    float _1355 = (cbModelParam._m0[1u].x * (_1343 - _1032)) + _1032;
    float _1376 = fma(_1355, cbSceneParam._m0[89u].z, fma(_1354, cbSceneParam._m0[89u].y, _1353 * cbSceneParam._m0[89u].x));
    float _1379 = fma(_1355, cbSceneParam._m0[90u].z, fma(_1354, cbSceneParam._m0[90u].y, _1353 * cbSceneParam._m0[90u].x));
    float _1382 = fma(_1355, cbSceneParam._m0[91u].z, fma(_1354, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1353));
    float _1397 = _623 * 0.5;
    float _1398 = _624 * 0.5;
    float _1399 = _625 * 0.5;
    float _1400 = dot(vec4(_1397, _1398, _1399, 1.0), vec4(_1331, _1334, _1337, _1340));
    float _1403 = dot(vec4(_1397, _1398, _1399, 1.0), vec4(_1330, _1333, _1336, _1339));
    float _1406 = dot(vec4(_1397, _1398, _1399, 1.0), vec4(_1329, _1332, _1335, _1338));
    float _1440;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1413 = dot(vec4(_1397, _1398, _1399, 1.0), vec4(_1017, _1021, _1024, _1027));
        float _1417 = dot(vec4(_1397, _1398, _1399, 1.0), vec4(_1019, _1022, _1025, _1028));
        float _1421 = dot(vec4(_1397, _1398, _1399, 1.0), vec4(_1020, _1023, _1026, _1029));
        float _1428 = dot(vec4(cbModelParam._m0[39u]), vec4(_1397, _1398, _1399, 1.0));
        _1440 = dot(vec3(isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)), isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)), isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1428) ? 0.0 : (isnan(0.0) ? _1428 : max(0.0, _1428))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1440 = 1.0;
    }
    float _1451;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1442 = dot(vec4(cbModelParam._m0[40u]), vec4(_1397, _1398, _1399, 1.0));
        _1451 = dot(vec3(isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)), isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)), isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1442) ? 0.0 : (isnan(0.0) ? _1442 : max(0.0, _1442))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1451 = 1.0;
    }
    float _1455 = (_1451 * cbModelParam._m0[1u].x) + (_1440 * (1.0 - cbModelParam._m0[1u].x));
    float _1465 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _437);
    float _1466 = isnan(_1465) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1465 : min(cbModelParam._m0[25u].z, _1465));
    float _1547;
    float _1549;
    float _1551;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1514 = fma(_687, cbModelParam._m0[13u].z, fma(_683, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _679)) + cbModelParam._m0[13u].w;
        float _1518 = fma(_687, cbModelParam._m0[14u].z, fma(_683, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _679)) + cbModelParam._m0[14u].w;
        float _1522 = fma(_687, cbModelParam._m0[15u].z, fma(_683, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _679)) + cbModelParam._m0[15u].w;
        float _1525 = fma(_625, cbModelParam._m0[13u].z, fma(_624, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _623));
        float _1528 = fma(_625, cbModelParam._m0[14u].z, fma(_624, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _623));
        float _1531 = fma(_625, cbModelParam._m0[15u].z, fma(_624, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _623));
        float _1559;
        if (_1525 > 0.0)
        {
            _1559 = abs((1.0 - _1514) / _1525);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1525 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1514 + 1.0) / _1525);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1559 = frontier_phi_17_15_ladder;
        }
        float _1764;
        if (_1528 > 0.0)
        {
            _1764 = abs((1.0 - _1518) / _1528);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1528 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1518 + 1.0) / _1528);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1764 = frontier_phi_26_22_ladder;
        }
        float _2018;
        if (_1531 > 0.0)
        {
            _2018 = abs((1.0 - _1522) / _1531);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1531 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1522 + 1.0) / _1531);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2018 = frontier_phi_38_33_ladder;
        }
        float _2020 = isnan(_1764) ? _1559 : (isnan(_1559) ? _1764 : min(_1559, _1764));
        float _2021 = isnan(_2018) ? _2020 : (isnan(_2020) ? _2018 : min(_2020, _2018));
        float _2025 = (_2021 * _1525) + _1514;
        float _2026 = (_2021 * _1528) + _1518;
        float _2027 = (_2021 * _1531) + _1522;
        float _2028 = _2021 * 9.9999997473787516355514526367188e-05;
        float _2030 = (-1.0) - _2028;
        float _2032 = _2028 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2027 > _2032) || ((_2027 < _2030) || ((_2026 > _2032) || ((_2026 < _2030) || ((_2025 < _2030) || (_2025 > _2032))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2155 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2027, cbModelParam._m0[9u].z, fma(_2026, cbModelParam._m0[9u].y, _2025 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2027, cbModelParam._m0[10u].z, fma(_2026, cbModelParam._m0[10u].y, _2025 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2027, cbModelParam._m0[11u].z, fma(_2026, cbModelParam._m0[11u].y, _2025 * cbModelParam._m0[11u].x))), _1466);
            frontier_phi_16_38_ladder = _2155.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2155.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2155.x * cbModelParam._m0[1u].y;
        }
        _1547 = frontier_phi_16_38_ladder_2;
        _1549 = frontier_phi_16_38_ladder_1;
        _1551 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1535 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_623, _624, _625), _1466);
        _1547 = _1535.x * cbModelParam._m0[1u].y;
        _1549 = _1535.y * cbModelParam._m0[1u].y;
        _1551 = _1535.z * cbModelParam._m0[1u].y;
    }
    float _1555 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _437);
    float _1556 = isnan(_1555) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1555 : min(cbModelParam._m0[25u].w, _1555));
    float _1647;
    float _1649;
    float _1651;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1611 = fma(_687, cbModelParam._m0[21u].z, fma(_683, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _679)) + cbModelParam._m0[21u].w;
        float _1615 = fma(_687, cbModelParam._m0[22u].z, fma(_683, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _679)) + cbModelParam._m0[22u].w;
        float _1619 = fma(_687, cbModelParam._m0[23u].z, fma(_683, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _679)) + cbModelParam._m0[23u].w;
        float _1622 = fma(_625, cbModelParam._m0[21u].z, fma(_624, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _623));
        float _1625 = fma(_625, cbModelParam._m0[22u].z, fma(_624, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _623));
        float _1628 = fma(_625, cbModelParam._m0[23u].z, fma(_624, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _623));
        float _1769;
        if (_1622 > 0.0)
        {
            _1769 = abs((1.0 - _1611) / _1622);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1622 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1611 + 1.0) / _1622);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1769 = frontier_phi_28_24_ladder;
        }
        float _2045;
        if (_1625 > 0.0)
        {
            _2045 = abs((1.0 - _1615) / _1625);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1625 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1615 + 1.0) / _1625);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2045 = frontier_phi_40_35_ladder;
        }
        float _2258;
        if (_1628 > 0.0)
        {
            _2258 = abs((1.0 - _1619) / _1628);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1628 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1619 + 1.0) / _1628);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2258 = frontier_phi_49_46_ladder;
        }
        float _2260 = isnan(_2045) ? _1769 : (isnan(_1769) ? _2045 : min(_1769, _2045));
        float _2261 = isnan(_2258) ? _2260 : (isnan(_2260) ? _2258 : min(_2260, _2258));
        float _2265 = (_2261 * _1622) + _1611;
        float _2266 = (_2261 * _1625) + _1615;
        float _2267 = (_2261 * _1628) + _1619;
        float _2268 = _2261 * 9.9999997473787516355514526367188e-05;
        float _2269 = (-1.0) - _2268;
        float _2271 = _2268 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2267 > _2271) || ((_2267 < _2269) || ((_2266 > _2271) || ((_2266 < _2269) || ((_2265 < _2269) || (_2265 > _2271))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2466 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2267, cbModelParam._m0[17u].z, fma(_2266, cbModelParam._m0[17u].y, _2265 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2267, cbModelParam._m0[18u].z, fma(_2266, cbModelParam._m0[18u].y, _2265 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2267, cbModelParam._m0[19u].z, fma(_2266, cbModelParam._m0[19u].y, _2265 * cbModelParam._m0[19u].x))), _1556);
            frontier_phi_25_49_ladder = _2466.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2466.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2466.x * cbModelParam._m0[1u].z;
        }
        _1647 = frontier_phi_25_49_ladder_2;
        _1649 = frontier_phi_25_49_ladder_1;
        _1651 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1631 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_623, _624, _625), _1556);
        _1647 = _1631.x * cbModelParam._m0[1u].z;
        _1649 = _1631.y * cbModelParam._m0[1u].z;
        _1651 = _1631.z * cbModelParam._m0[1u].z;
    }
    float _1664 = (((_650 * _599) + _651) * _615) * ((cbModelParam._m0[1u].w * (_1647 - _1547)) + _1547);
    float _1666 = (((_650 * _601) + _651) * _615) * ((cbModelParam._m0[1u].w * (_1649 - _1549)) + _1549);
    float _1668 = (((_650 * _602) + _651) * _615) * ((cbModelParam._m0[1u].w * (_1651 - _1551)) + _1551);
    float _1671 = fma(_1668, cbSceneParam._m0[89u].z, fma(_1666, cbSceneParam._m0[89u].y, _1664 * cbSceneParam._m0[89u].x));
    float _1674 = fma(_1668, cbSceneParam._m0[90u].z, fma(_1666, cbSceneParam._m0[90u].y, _1664 * cbSceneParam._m0[90u].x));
    float _1677 = fma(_1668, cbSceneParam._m0[91u].z, fma(_1666, cbSceneParam._m0[91u].y, _1664 * cbSceneParam._m0[91u].x));
    uvec4 _1687 = floatBitsToUint(cbInstanceData._m0[_224 + 5u]);
    uint _1689 = _1687.x * 14u;
    uint _1690 = _1689 + 13u;
    float _1697 = _615 + (-1.0);
    float _1702 = (cbLight._m0[_1690].x * _1697) + 1.0;
    float _1703 = (cbLight._m0[_1690].y * _1697) + 1.0;
    float _1704 = (cbLight._m0[_1690].z * _1697) + 1.0;
    float _1705 = (cbLight._m0[_1690].w * _1697) + 1.0;
    uint _1706 = _1689 + 5u;
    float _1712 = isnan(1.0) ? _1703 : (isnan(_1703) ? 1.0 : min(_1703, 1.0));
    uint _1716 = _1689 + 4u;
    float _1723 = isnan(1.0) ? _1702 : (isnan(_1702) ? 1.0 : min(_1702, 1.0));
    uint _1727 = _1689 | 1u;
    float _1738 = dot(vec3(cbLight._m0[_1689].xyz), vec3(_434, _435, _436));
    float _1741 = dot(vec3(cbLight._m0[_1727].xyz), vec3(_434, _435, _436));
    float _3948 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
    float _3959 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
    float _1746 = (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * 0.3183098733425140380859375;
    float _1748 = (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * 0.3183098733425140380859375;
    float _1755 = ((cbLight._m0[_1706].x * _1712) * _1748) + ((cbLight._m0[_1716].x * _1723) * _1746);
    float _1756 = ((_1712 * cbLight._m0[_1706].y) * _1748) + ((_1723 * cbLight._m0[_1716].y) * _1746);
    float _1757 = ((_1712 * cbLight._m0[_1706].z) * _1748) + ((_1723 * cbLight._m0[_1716].z) * _1746);
    uvec4 _1761 = floatBitsToUint(cbLight._m0[_1689 + 12u]);
    bool _1763 = _1761.x == 0u;
    float _1774;
    float _1776;
    float _1778;
    if (_1763)
    {
        _1774 = _1755;
        _1776 = _1756;
        _1778 = _1757;
    }
    else
    {
        uint _1782 = _1689 + 6u;
        float _1798 = (dot(vec3(cbLight._m0[_1689 + 2u].xyz), vec3(_434, _435, _436)) * 0.5) + 0.5;
        float _1799 = _1798 * _1798;
        float _3970 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
        float _1800 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1801 = isnan(1.0) ? _1704 : (isnan(_1704) ? 1.0 : min(_1704, 1.0));
        _1774 = (((cbLight._m0[_1782].x * 0.3183098733425140380859375) * _1800) * _1801) + _1755;
        _1776 = (((cbLight._m0[_1782].y * 0.3183098733425140380859375) * _1800) * _1801) + _1756;
        _1778 = (((cbLight._m0[_1782].z * 0.3183098733425140380859375) * _1800) * _1801) + _1757;
    }
    bool _1781 = _1761.y == 0u;
    float _1819;
    float _1821;
    float _1823;
    if (_1781)
    {
        _1819 = _1774;
        _1821 = _1776;
        _1823 = _1778;
    }
    else
    {
        uint _1989 = _1689 + 7u;
        float _2005 = (dot(vec3(cbLight._m0[_1689 + 3u].xyz), vec3(_434, _435, _436)) * 0.5) + 0.5;
        float _2006 = _2005 * _2005;
        float _3986 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
        float _2007 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _2008 = isnan(1.0) ? _1705 : (isnan(_1705) ? 1.0 : min(_1705, 1.0));
        _1819 = (((cbLight._m0[_1989].x * 0.3183098733425140380859375) * _2007) * _2008) + _1774;
        _1821 = (((cbLight._m0[_1989].y * 0.3183098733425140380859375) * _2007) * _2008) + _1776;
        _1823 = (((cbLight._m0[_1989].z * 0.3183098733425140380859375) * _2007) * _2008) + _1778;
    }
    uint _1826 = _1689 + 8u;
    float _1839 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1689].w)) * _437) * 0.949999988079071044921875);
    float _1840 = _1839 * _1839;
    float _1841 = cbLight._m0[_1689].x + _514;
    float _1842 = cbLight._m0[_1689].y + _515;
    float _1843 = cbLight._m0[_1689].z + _516;
    float _1847 = inversesqrt(dot(vec3(_1841, _1842, _1843), vec3(_1841, _1842, _1843)));
    float _1848 = _1847 * _1841;
    float _1849 = _1847 * _1842;
    float _1850 = _1847 * _1843;
    float _1851 = dot(vec3(_434, _435, _436), vec3(cbLight._m0[_1689].xyz));
    float _4002 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1854 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _4013 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _1855 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
    float _1856 = dot(vec3(_434, _435, _436), vec3(_1848, _1849, _1850));
    float _4024 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
    float _1859 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _1860 = dot(vec3(cbLight._m0[_1689].xyz), vec3(_1848, _1849, _1850));
    float _4035 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
    float _1864 = _1840 * _1840;
    float _1868 = ((_1859 * _1859) * (_1864 + (-1.0))) + 1.0;
    float _1876 = exp2(log2(1.0 - (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0)))) * 5.0);
    float _1877 = 0.959999978542327880859375 - _596;
    float _1879 = 0.959999978542327880859375 - _597;
    float _1880 = 0.959999978542327880859375 - _598;
    float _1887 = 1.0 - _1840;
    float _1898 = (0.5 / (((_1855 * ((_1854 * _1887) + _1840)) + 9.9999999392252902907785028219223e-09) + (((_1855 * _1887) + _1840) * _1854))) * _1854;
    float _4046 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
    float _1900 = (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * (_1864 / ((_1868 * _1868) * 3.141590118408203125));
    uint _1911 = _1689 + 9u;
    float _1922 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1727].w)) * _437) * 0.949999988079071044921875);
    float _1923 = _1922 * _1922;
    float _1924 = cbLight._m0[_1727].x + _514;
    float _1925 = cbLight._m0[_1727].y + _515;
    float _1926 = cbLight._m0[_1727].z + _516;
    float _1930 = inversesqrt(dot(vec3(_1924, _1925, _1926), vec3(_1924, _1925, _1926)));
    float _1931 = _1930 * _1924;
    float _1932 = _1930 * _1925;
    float _1933 = _1930 * _1926;
    float _1934 = dot(vec3(_434, _435, _436), vec3(cbLight._m0[_1727].xyz));
    float _4057 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
    float _1937 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _1938 = dot(vec3(_434, _435, _436), vec3(_1931, _1932, _1933));
    float _4068 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
    float _1941 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _1942 = dot(vec3(cbLight._m0[_1727].xyz), vec3(_1931, _1932, _1933));
    float _4079 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
    float _1946 = _1923 * _1923;
    float _1950 = ((_1941 * _1941) * (_1946 + (-1.0))) + 1.0;
    float _1957 = exp2(log2(1.0 - (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0)))) * 5.0);
    float _1964 = 1.0 - _1923;
    float _1974 = (0.5 / (((_1855 * ((_1937 * _1964) + _1923)) + 9.9999999392252902907785028219223e-09) + (((_1855 * _1964) + _1923) * _1937))) * _1937;
    float _4090 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
    float _1976 = (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * (_1946 / ((_1950 * _1950) * 3.141590118408203125));
    float _1986 = (((((_1957 * _1877) + _599) * cbLight._m0[_1911].x) * _1976) * _1712) + (((((_1876 * _1877) + _599) * cbLight._m0[_1826].x) * _1900) * _1723);
    float _1987 = (((((_1957 * _1879) + _601) * cbLight._m0[_1911].y) * _1976) * _1712) + (((((_1876 * _1879) + _601) * cbLight._m0[_1826].y) * _1900) * _1723);
    float _1988 = (((((_1957 * _1880) + _602) * cbLight._m0[_1911].z) * _1976) * _1712) + (((((_1876 * _1880) + _602) * cbLight._m0[_1826].z) * _1900) * _1723);
    float _2050;
    float _2052;
    float _2054;
    if (_1763)
    {
        _2050 = _1986;
        _2052 = _1987;
        _2054 = _1988;
    }
    else
    {
        uint _2056 = _1689 + 2u;
        uint _2060 = _1689 + 10u;
        float _2074 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2056].w)) * _437) * 0.949999988079071044921875);
        float _2075 = _2074 * _2074;
        float _2076 = cbLight._m0[_2056].x + _514;
        float _2077 = cbLight._m0[_2056].y + _515;
        float _2078 = cbLight._m0[_2056].z + _516;
        float _2082 = inversesqrt(dot(vec3(_2076, _2077, _2078), vec3(_2076, _2077, _2078)));
        float _2083 = _2082 * _2076;
        float _2084 = _2082 * _2077;
        float _2085 = _2082 * _2078;
        float _2086 = dot(vec3(_434, _435, _436), vec3(cbLight._m0[_2056].xyz));
        float _4101 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
        float _2089 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _2090 = dot(vec3(_434, _435, _436), vec3(_2083, _2084, _2085));
        float _4112 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
        float _2093 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _2094 = dot(vec3(cbLight._m0[_2056].xyz), vec3(_2083, _2084, _2085));
        float _4123 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
        float _2098 = _2075 * _2075;
        float _2102 = ((_2093 * _2093) * (_2098 + (-1.0))) + 1.0;
        float _2109 = exp2(log2(1.0 - (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0)))) * 5.0);
        float _2116 = 1.0 - _2075;
        float _2126 = (0.5 / (((_1855 * ((_2089 * _2116) + _2075)) + 9.9999999392252902907785028219223e-09) + (((_1855 * _2116) + _2075) * _2089))) * _2089;
        float _4134 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
        float _2128 = (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * (_2098 / ((_2102 * _2102) * 3.141590118408203125));
        float _2129 = isnan(1.0) ? _1704 : (isnan(_1704) ? 1.0 : min(_1704, 1.0));
        _2050 = (((((_2109 * _1877) + _599) * cbLight._m0[_2060].x) * _2128) * _2129) + _1986;
        _2052 = (((((_2109 * _1879) + _601) * cbLight._m0[_2060].y) * _2128) * _2129) + _1987;
        _2054 = (((((_2109 * _1880) + _602) * cbLight._m0[_2060].z) * _2128) * _2129) + _1988;
    }
    float _2164;
    float _2166;
    float _2168;
    if (_1781)
    {
        _2164 = _2050;
        _2166 = _2052;
        _2168 = _2054;
    }
    else
    {
        uint _2175 = _1689 + 3u;
        uint _2179 = _1689 + 11u;
        float _2193 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2175].w)) * _437) * 0.949999988079071044921875);
        float _2194 = _2193 * _2193;
        float _2195 = cbLight._m0[_2175].x + _514;
        float _2196 = cbLight._m0[_2175].y + _515;
        float _2197 = cbLight._m0[_2175].z + _516;
        float _2201 = inversesqrt(dot(vec3(_2195, _2196, _2197), vec3(_2195, _2196, _2197)));
        float _2202 = _2201 * _2195;
        float _2203 = _2201 * _2196;
        float _2204 = _2201 * _2197;
        float _2205 = dot(vec3(_434, _435, _436), vec3(cbLight._m0[_2175].xyz));
        float _4150 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
        float _2208 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _2209 = dot(vec3(_434, _435, _436), vec3(_2202, _2203, _2204));
        float _4161 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        float _2212 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _2213 = dot(vec3(cbLight._m0[_2175].xyz), vec3(_2202, _2203, _2204));
        float _4172 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        float _2217 = _2194 * _2194;
        float _2221 = ((_2212 * _2212) * (_2217 + (-1.0))) + 1.0;
        float _2228 = exp2(log2(1.0 - (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0)))) * 5.0);
        float _2235 = 1.0 - _2194;
        float _2245 = (0.5 / (((_1855 * ((_2208 * _2235) + _2194)) + 9.9999999392252902907785028219223e-09) + (((_1855 * _2235) + _2194) * _2208))) * _2208;
        float _4183 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        float _2247 = (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_2217 / ((_2221 * _2221) * 3.141590118408203125));
        float _2248 = isnan(1.0) ? _1705 : (isnan(_1705) ? 1.0 : min(_1705, 1.0));
        _2164 = (((((_2228 * _1877) + _599) * cbLight._m0[_2179].x) * _2247) * _2248) + _2050;
        _2166 = (((((_2228 * _1879) + _601) * cbLight._m0[_2179].y) * _2247) * _2248) + _2052;
        _2168 = (((((_2228 * _1880) + _602) * cbLight._m0[_2179].z) * _2247) * _2248) + _2054;
    }
    float _2383;
    float _2385;
    float _2387;
    float _2389;
    float _2391;
    float _2393;
    if (_1687.y == 0u)
    {
        float _2323 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2324 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2323;
        float _2325 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2323;
        float _2326 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2323;
        uvec4 _2338 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2339 = _2338.x;
        uint _2350 = uint((float(_2338.y) * floor(float(uint(cbSceneParam._m0[85u].y * _536) / _2339))) + floor(float(uint(cbSceneParam._m0[85u].x * _535) / _2339)));
        float _2360 = (log2(_2326 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2361 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        uint _2364 = uint(isnan(14.0) ? _2361 : (isnan(_2361) ? 14.0 : min(_2361, 14.0)));
        uvec4 _2369 = texelFetch(g_lightClusterGridBuffer, int(((_2364 << 2u) + (_2350 << 6u)) >> 2u));
        uint _2370 = _2369.x;
        uint _2371 = _2338.z;
        float _2471;
        float _2473;
        float _2475;
        float _2477;
        float _2479;
        float _2481;
        if (((((1u << ((_2371 >> 4u) & 15u)) + 4294967295u) & _2370) == 0u) || ((_2371 & 240u) == 0u))
        {
            _2471 = 0.0;
            _2473 = 0.0;
            _2475 = 0.0;
            _2477 = 0.0;
            _2479 = 0.0;
            _2481 = 0.0;
        }
        else
        {
            float _2472;
            float _2474;
            float _2476;
            float _2478;
            float _2480;
            float _2482;
            float _2624 = 0.0;
            float _2625 = 0.0;
            float _2626 = 0.0;
            float _2627 = 0.0;
            float _2628 = 0.0;
            float _2629 = 0.0;
            uint _2630 = 0u;
            uint _2639;
            bool _2640;
            for (;;)
            {
                _2639 = texelFetch(g_lightClassification, int((((_2364 << 5u) + (_2350 << 9u)) + (_2630 << 2u)) >> 2u)).x;
                _2640 = _2639 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2640)
                {
                    frontier_phi_66_pred = _2624;
                    frontier_phi_66_pred_1 = _2629;
                    frontier_phi_66_pred_2 = _2628;
                    frontier_phi_66_pred_3 = _2627;
                    frontier_phi_66_pred_4 = _2626;
                    frontier_phi_66_pred_5 = _2625;
                }
                else
                {
                    float _2769;
                    float _2770;
                    float _2771;
                    float _2772;
                    float _2773;
                    float _2774;
                    uint _2775;
                    _2769 = _2624;
                    _2770 = _2625;
                    _2771 = _2626;
                    _2772 = _2627;
                    _2773 = _2628;
                    _2774 = _2629;
                    _2775 = _2639;
                    float _2696;
                    float _2697;
                    float _2698;
                    float _2699;
                    float _2700;
                    float _2701;
                    for (;;)
                    {
                        uint _2779 = uint(findLSB(_2775)) + (_2630 << 5u);
                        uint _2776 = (_2775 + 4294967295u) & _2775;
                        uint _2781 = _2779 * 48u;
                        vec4 _2795 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2781)).x, texelFetch(g_PointLightRenderingBuffer, int(_2781 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2781 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2781 + 3u)).x));
                        uint _2801 = (_2779 * 48u) + 4u;
                        vec4 _2814 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2801)).x, texelFetch(g_PointLightRenderingBuffer, int(_2801 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2801 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2801 + 3u)).x));
                        uint _2820 = (_2779 * 48u) + 8u;
                        vec3 _2831 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2820)).x, texelFetch(g_PointLightRenderingBuffer, int(_2820 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2820 + 2u)).x));
                        float _2835 = _2795.x - _2324;
                        float _2836 = _2795.y - _2325;
                        float _2837 = _2795.z - _2326;
                        float _2838 = dot(vec3(_2835, _2836, _2837), vec3(_2835, _2836, _2837));
                        float _2841 = inversesqrt(_2838);
                        float _2842 = _2841 * _2835;
                        float _2843 = _2841 * _2836;
                        float _2844 = _2841 * _2837;
                        float _2845 = dot(vec3(_556, _559, _562), vec3(_2842, _2843, _2844));
                        float _2850 = 1.0 - (_2838 * _2795.w);
                        float _4209 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
                        float _2851 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
                        float _2852 = sqrt(_2838) * _2814.w;
                        float _2855 = 1.39999997615814208984375 / (_2852 + 1.39999997615814208984375);
                        float _2856 = _2855 * _2855;
                        float _2859 = ((1.0 - _2856) * _2845) + _2856;
                        float _2862 = _2852 * _2852;
                        float _2866 = ((isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0))) * _2851) / ((_2862 * 0.699999988079071044921875) + 1.0);
                        float _2870 = (-0.0) - _2324;
                        float _2871 = (-0.0) - _2325;
                        float _2872 = (-0.0) - _2326;
                        float _2876 = inversesqrt(dot(vec3(_2870, _2871, _2872), vec3(_2870, _2871, _2872)));
                        float _2877 = _2876 * _2870;
                        float _2878 = _2876 * _2871;
                        float _2879 = _2876 * _2872;
                        float _2887 = exp2(log2(1.0 / ((_2862 * 3.5) + 5.0)) * 0.25);
                        float _2888 = 1.0 - _631;
                        float _2895 = sqrt(1.0 - ((1.0 - (_2888 * _2888)) * (1.0 - (_2887 * _2887))));
                        float _2896 = _2895 * _2895;
                        float _2897 = _2896 * _2896;
                        float _2898 = _2877 + _2842;
                        float _2899 = _2878 + _2843;
                        float _2900 = _2879 + _2844;
                        float _2904 = inversesqrt(dot(vec3(_2898, _2899, _2900), vec3(_2898, _2899, _2900)));
                        float _2908 = dot(vec3(_556, _559, _562), vec3(_2877, _2878, _2879));
                        float _4225 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
                        float _2911 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
                        float _2912 = dot(vec3(_556, _559, _562), vec3(_2904 * _2898, _2904 * _2899, _2904 * _2900));
                        float _4236 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
                        float _2915 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
                        float _2919 = ((_2915 * _2915) * (_2897 + (-1.0))) + 1.0;
                        float _2920 = _2855 * _2896;
                        float _2921 = _2920 * _2920;
                        float _2924 = ((1.0 - _2921) * _2845) + _2921;
                        float _4247 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
                        float _2925 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
                        float _2926 = 1.0 - _2896;
                        float _2936 = (0.5 / (((_2925 * ((_2911 * _2926) + _2896)) + 9.9999999392252902907785028219223e-09) + (((_2925 * _2926) + _2896) * _2911))) * _2925;
                        float _4258 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
                        float _2947 = (((_2897 * 3.1415927410125732421875) * (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0)))) / ((_2919 * _2919) * ((_2862 * 2.1991131305694580078125) + 3.141590118408203125))) * _2851;
                        _2699 = (_2866 * _2814.x) + _2772;
                        _2700 = (_2866 * _2814.y) + _2773;
                        _2701 = (_2866 * _2814.z) + _2774;
                        _2696 = (_2947 * _2831.x) + _2769;
                        _2697 = (_2947 * _2831.y) + _2770;
                        _2698 = (_2947 * _2831.z) + _2771;
                        if (_2776 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2769 = _2696;
                            _2770 = _2697;
                            _2771 = _2698;
                            _2772 = _2699;
                            _2773 = _2700;
                            _2774 = _2701;
                            _2775 = _2776;
                        }
                    }
                    frontier_phi_66_pred = _2696;
                    frontier_phi_66_pred_1 = _2701;
                    frontier_phi_66_pred_2 = _2700;
                    frontier_phi_66_pred_3 = _2699;
                    frontier_phi_66_pred_4 = _2698;
                    frontier_phi_66_pred_5 = _2697;
                }
                _2472 = frontier_phi_66_pred;
                _2482 = frontier_phi_66_pred_1;
                _2480 = frontier_phi_66_pred_2;
                _2478 = frontier_phi_66_pred_3;
                _2476 = frontier_phi_66_pred_4;
                _2474 = frontier_phi_66_pred_5;
                uint _2631 = _2630 + 1u;
                if (_2631 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2624 = _2472;
                    _2625 = _2474;
                    _2626 = _2476;
                    _2627 = _2478;
                    _2628 = _2480;
                    _2629 = _2482;
                    _2630 = _2631;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2471 = _2472;
            _2473 = _2474;
            _2475 = _2476;
            _2477 = _2478;
            _2479 = _2480;
            _2481 = _2482;
        }
        uvec4 _2485 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2486 = _2485.z;
        uint _2488 = (_2486 >> 8u) & 15u;
        float _2592;
        float _2594;
        float _2596;
        float _2598;
        float _2600;
        float _2602;
        if (((4294967295u << _2488) & _2370) == 0u)
        {
            _2592 = _2471;
            _2594 = _2473;
            _2596 = _2475;
            _2598 = _2477;
            _2600 = _2479;
            _2602 = _2481;
        }
        else
        {
            float _2617 = inversesqrt(dot(vec3(_2324, _2325, _2326), vec3(_2324, _2325, _2326)));
            float _2618 = _2617 * _2324;
            float _2619 = _2617 * _2325;
            float _2620 = _2617 * _2326;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2488 < ((_2486 >> 12u) & 15u))
            {
                float _2593;
                float _2595;
                float _2597;
                float _2599;
                float _2601;
                float _2603;
                float _2752 = _2471;
                float _2753 = _2473;
                float _2754 = _2475;
                float _2755 = _2477;
                float _2756 = _2479;
                float _2757 = _2481;
                uint _2758 = _2488;
                uint _2767;
                bool _2768;
                for (;;)
                {
                    _2767 = texelFetch(g_lightClassification, int((((_2364 << 5u) + (_2350 << 9u)) + (_2758 << 2u)) >> 2u)).x;
                    _2768 = _2767 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2768)
                    {
                        frontier_phi_77_pred = _2757;
                        frontier_phi_77_pred_1 = _2756;
                        frontier_phi_77_pred_2 = _2755;
                        frontier_phi_77_pred_3 = _2754;
                        frontier_phi_77_pred_4 = _2753;
                        frontier_phi_77_pred_5 = _2752;
                    }
                    else
                    {
                        float _2961;
                        float _2962;
                        float _2963;
                        float _2964;
                        float _2965;
                        float _2966;
                        float _3256;
                        float _3257;
                        float _3258;
                        float _3259;
                        float _3260;
                        float _3261;
                        float _2974 = _2752;
                        float _2975 = _2753;
                        float _2976 = _2754;
                        float _2977 = _2755;
                        float _2978 = _2756;
                        float _2979 = _2757;
                        uint _2980 = _2767;
                        uint _2981;
                        vec4 _3006;
                        float _3007;
                        vec4 _3022;
                        vec3 _3034;
                        vec4 _3050;
                        vec4 _3066;
                        float _3112;
                        bool _3113;
                        for (;;)
                        {
                            uint _2991 = ((_2758 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2980));
                            _2981 = (_2980 + 4294967295u) & _2980;
                            uint _2993 = _2991 * 40u;
                            _3006 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2993)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 3u)).x));
                            _3007 = _3006.w;
                            uint _3009 = (_2991 * 40u) + 4u;
                            _3022 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3009)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 3u)).x));
                            uint _3024 = (_2991 * 40u) + 8u;
                            _3034 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3024)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 2u)).x));
                            uint _3037 = (_2991 * 40u) + 16u;
                            _3050 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3037)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 3u)).x));
                            uint _3053 = (_2991 * 40u) + 20u;
                            _3066 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3053)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 3u)).x));
                            uint _3068 = (_2991 * 40u) + 24u;
                            vec4 _3081 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3068)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 3u)).x));
                            uint _3087 = (_2991 * 40u) + 28u;
                            vec4 _3100 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3087)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 3u)).x));
                            _3112 = fma(_2326, _3100.z, fma(_2325, _3100.y, _3100.x * _2324)) + _3100.w;
                            _3113 = !((fma(_2326, _3081.z, fma(_2325, _3081.y, _3081.x * _2324)) + _3081.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3113)
                            {
                                float _3140 = _3006.x - _2324;
                                float _3141 = _3006.y - _2325;
                                float _3142 = _3006.z - _2326;
                                float _3143 = dot(vec3(_3140, _3141, _3142), vec3(_3140, _3141, _3142));
                                float _3146 = inversesqrt(_3143);
                                float _3147 = _3146 * _3140;
                                float _3148 = _3146 * _3141;
                                float _3149 = _3146 * _3142;
                                float _3153 = 1.0 - (_3143 / (_3007 * _3007));
                                float _4269 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                                float _3154 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
                                float _3158 = sqrt(_3143) * _3022.w;
                                float _3160 = 1.39999997615814208984375 / (_3158 + 1.39999997615814208984375);
                                float _3161 = _3160 * _3160;
                                float _3164 = ((1.0 - _3161) * dot(vec3(_3147, _3148, _3149), vec3(_556, _559, _562))) + _3161;
                                float _3167 = _3158 * _3158;
                                float _3171 = (fma(_2326, _3050.z, fma(_2325, _3050.y, _3050.x * _2324)) + _3050.w) / _3112;
                                float _3172 = (fma(_2326, _3066.z, fma(_2325, _3066.y, _3066.x * _2324)) + _3066.w) / _3112;
                                float _3176 = 1.0 - dot(vec2(_3171, _3172), vec2(_3171, _3172));
                                float _4285 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                                float _3177 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
                                float _3178 = _3177 * (((isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0))) * _3154) / ((_3167 * 0.699999988079071044921875) + 1.0));
                                float _3190 = exp2(log2(1.0 / ((_3167 * 3.5) + 5.0)) * 0.25);
                                float _3191 = 1.0 - _631;
                                float _3198 = sqrt(1.0 - ((1.0 - (_3191 * _3191)) * (1.0 - (_3190 * _3190))));
                                float _3199 = _3198 * _3198;
                                float _3200 = _3199 * _3199;
                                float _3201 = _3147 - _2618;
                                float _3202 = _3148 - _2619;
                                float _3203 = _3149 - _2620;
                                float _3207 = inversesqrt(dot(vec3(_3201, _3202, _3203), vec3(_3201, _3202, _3203)));
                                float _3211 = dot(vec3(_556, _559, _562), vec3((-0.0) - _2618, (-0.0) - _2619, (-0.0) - _2620));
                                float _4296 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                                float _3214 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
                                float _3215 = dot(vec3(_556, _559, _562), vec3(_3207 * _3201, _3207 * _3202, _3207 * _3203));
                                float _4307 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                                float _3218 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
                                float _3222 = ((_3218 * _3218) * (_3200 + (-1.0))) + 1.0;
                                float _3223 = _3160 * _3199;
                                float _3224 = _3223 * _3223;
                                float _3230 = ((1.0 - _3224) * dot(vec3(_556, _559, _562), vec3(_3147, _3148, _3149))) + _3224;
                                float _4318 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                                float _3231 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
                                float _3232 = 1.0 - _3199;
                                float _3242 = (0.5 / (((_3231 * ((_3214 * _3232) + _3199)) + 9.9999999392252902907785028219223e-09) + (((_3231 * _3232) + _3199) * _3214))) * _3231;
                                float _4329 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                                float _3252 = (_3177 * _3154) * (((_3200 * 3.1415927410125732421875) * (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0)))) / ((_3222 * _3222) * ((_3167 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3178 * _3022.y;
                                frontier_phi_83_pred_1 = _3178 * _3022.x;
                                frontier_phi_83_pred_2 = _3252 * _3034.z;
                                frontier_phi_83_pred_3 = _3252 * _3034.y;
                                frontier_phi_83_pred_4 = _3252 * _3034.x;
                                frontier_phi_83_pred_5 = _3178 * _3022.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3260 = frontier_phi_83_pred;
                            _3259 = frontier_phi_83_pred_1;
                            _3258 = frontier_phi_83_pred_2;
                            _3257 = frontier_phi_83_pred_3;
                            _3256 = frontier_phi_83_pred_4;
                            _3261 = frontier_phi_83_pred_5;
                            _2964 = _3259 + _2977;
                            _2965 = _3260 + _2978;
                            _2966 = _3261 + _2979;
                            _2961 = _3256 + _2974;
                            _2962 = _3257 + _2975;
                            _2963 = _3258 + _2976;
                            if (_2981 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2974 = _2961;
                                _2975 = _2962;
                                _2976 = _2963;
                                _2977 = _2964;
                                _2978 = _2965;
                                _2979 = _2966;
                                _2980 = _2981;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2966;
                        frontier_phi_77_pred_1 = _2965;
                        frontier_phi_77_pred_2 = _2964;
                        frontier_phi_77_pred_3 = _2963;
                        frontier_phi_77_pred_4 = _2962;
                        frontier_phi_77_pred_5 = _2961;
                    }
                    _2603 = frontier_phi_77_pred;
                    _2601 = frontier_phi_77_pred_1;
                    _2599 = frontier_phi_77_pred_2;
                    _2597 = frontier_phi_77_pred_3;
                    _2595 = frontier_phi_77_pred_4;
                    _2593 = frontier_phi_77_pred_5;
                    uint _2759 = _2758 + 1u;
                    if (_2759 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2752 = _2593;
                        _2753 = _2595;
                        _2754 = _2597;
                        _2755 = _2599;
                        _2756 = _2601;
                        _2757 = _2603;
                        _2758 = _2759;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2597;
                frontier_phi_58_59_ladder_1 = _2603;
                frontier_phi_58_59_ladder_2 = _2601;
                frontier_phi_58_59_ladder_3 = _2599;
                frontier_phi_58_59_ladder_4 = _2595;
                frontier_phi_58_59_ladder_5 = _2593;
            }
            else
            {
                frontier_phi_58_59_ladder = _2475;
                frontier_phi_58_59_ladder_1 = _2481;
                frontier_phi_58_59_ladder_2 = _2479;
                frontier_phi_58_59_ladder_3 = _2477;
                frontier_phi_58_59_ladder_4 = _2473;
                frontier_phi_58_59_ladder_5 = _2471;
            }
            _2592 = frontier_phi_58_59_ladder_5;
            _2594 = frontier_phi_58_59_ladder_4;
            _2596 = frontier_phi_58_59_ladder;
            _2598 = frontier_phi_58_59_ladder_3;
            _2600 = frontier_phi_58_59_ladder_2;
            _2602 = frontier_phi_58_59_ladder_1;
        }
        float _2607 = isnan(1.0) ? _615 : (isnan(_615) ? 1.0 : min(_615, 1.0));
        _2383 = (_2607 * _2598) + _1819;
        _2385 = (_2607 * _2600) + _1821;
        _2387 = (_2607 * _2602) + _1823;
        _2389 = ((_2592 * _599) * _2607) + _2164;
        _2391 = ((_2594 * _601) * _2607) + _2166;
        _2393 = ((_2596 * _602) * _2607) + _2168;
    }
    else
    {
        _2383 = _1819;
        _2385 = _1821;
        _2387 = _1823;
        _2389 = _2164;
        _2391 = _2166;
        _2393 = _2168;
    }
    float _4345 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _4356 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _4367 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _2410 = ((isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_2383 + ((isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0))) * _615))) + ((_2389 + ((isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))) * _1455)) * cbPerFrame._m0[3u].x);
    float _2411 = ((isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * (_2385 + ((isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0))) * _615))) + ((_2391 + ((isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))) * _1455)) * cbPerFrame._m0[3u].x);
    float _2412 = ((isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * (_2387 + ((isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0))) * _615))) + ((_2393 + ((isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))) * _1455)) * cbPerFrame._m0[3u].x);
    uint _2413 = _224 + 6u;
    float _2421 = _535 / cbSceneParam._m0[86u].x;
    float _2422 = _536 / cbSceneParam._m0[86u].y;
    vec4 _2436 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2421, _2422, (log2((isnan(cbSceneParam._m0[77u].w) ? _456 : (isnan(_456) ? cbSceneParam._m0[77u].w : min(_456, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2438 = _2436.x;
    float _2439 = _2436.y;
    float _2440 = _2436.z;
    float _2441 = _2436.w;
    float _2534;
    float _2536;
    float _2538;
    float _2540;
    if (_456 > cbSceneParam._m0[78u].w)
    {
        float _2496 = isnan(_456) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _456 : min(cbSceneParam._m0[80u].w, _456));
        float _2497 = _2496 / _456;
        float _2508 = _2497 * _507;
        float _2509 = _508 * _2497;
        float _2510 = (-0.0) - _2509;
        float _2512 = _2497 * _509;
        float _2514 = (cbSceneParam._m0[77u].w * _2510) / _2496;
        float _2515 = _2514 + cbSceneParam._m0[79u].w;
        float _2516 = cbSceneParam._m0[79u].w - _2509;
        float _2522 = sqrt(((_2508 * _2508) + (_2509 * _2509)) + (_2512 * _2512));
        float _2525 = (1.0 - (cbSceneParam._m0[77u].w / _2496)) * _2522;
        float _2530 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2532 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2709;
        if (abs((_2510 - _2514) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2709 = ((((_2515 > 0.0) ? exp2(_2530 * _2515) : (2.0 - exp2(_2532 * _2515))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2525;
        }
        else
        {
            float _2653 = 1.0 / cbSceneParam._m0[80u].x;
            float _2654 = isnan(_2516) ? _2515 : (isnan(_2515) ? _2516 : max(_2515, _2516));
            float _2655 = isnan(_2516) ? _2515 : (isnan(_2515) ? _2516 : min(_2515, _2516));
            float _2664 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : min(_2654, 0.0));
            float _2665 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : min(_2655, 0.0));
            _2709 = ((abs(_2522 / _2510) * cbSceneParam._m0[80u].y) * ((((_2664 - _2665) * 2.0) - ((exp2(_2530 * (isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0)))) - exp2(_2530 * (isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0))))) * _2653)) - ((exp2(_2532 * _2664) - exp2(_2532 * _2665)) * _2653))) + (_2525 * cbSceneParam._m0[80u].z);
        }
        vec4 _2711 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2421, _2422, 1.0), 0.0);
        float _2720 = exp2((_2709 * (-1.44269502162933349609375)) * (1.0 - _2711.w));
        float _2721 = log2(_2720);
        float _2737 = log2(_2441);
        _2534 = (exp2(_2737 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2721 * cbSceneParam._m0[78u].x)) * _2711.x) / cbSceneParam._m0[78u].x)) + _2438;
        _2536 = (exp2(_2737 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2721 * cbSceneParam._m0[78u].y)) * _2711.y) / cbSceneParam._m0[78u].y)) + _2439;
        _2538 = (exp2(_2737 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2721 * cbSceneParam._m0[78u].z)) * _2711.z) / cbSceneParam._m0[78u].z)) + _2440;
        _2540 = _2720 * _2441;
    }
    else
    {
        _2534 = _2438;
        _2536 = _2439;
        _2538 = _2440;
        _2540 = _2441;
    }
    bool _2747;
    vec4 _2550;
    vec4 _2572;
    float _2574;
    float _2578;
    float _2579;
    float _2580;
    float _2581;
    bool _2591;
    for (;;)
    {
        _2550 = cbMatDynParam._m0[0u];
        float _2552 = roundEven(_2550.y);
        bool _2553 = _2552 == 3.0;
        float _2554 = log2(_2540);
        float _2561 = exp2(_2554 * cbSceneParam._m0[78u].x) * _2410;
        float _2562 = exp2(_2554 * cbSceneParam._m0[78u].y) * _2411;
        float _2563 = exp2(_2554 * cbSceneParam._m0[78u].z) * _2412;
        float _2570 = _523 + (-0.5);
        _2572 = cbMtdParam._m0[1u];
        _2574 = _2572.y * _2570;
        float _2577 = (_2552 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2578 = _2577 * (_2553 ? _2561 : (_2561 + (cbSceneParam._m0[72u].w * _2534)));
        _2579 = _2577 * (_2553 ? _2562 : (_2562 + (cbSceneParam._m0[72u].w * _2536)));
        _2580 = _2577 * (_2553 ? _2563 : (_2563 + (cbSceneParam._m0[72u].w * _2538)));
        _2581 = _2570 * 0.999000012874603271484375;
        _2591 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2591)
        {
            if ((cbInstanceData._m0[_224 + 7u].x + _2581) < 0.5)
            {
                _2747 = true;
                break;
            }
        }
        uint _2688 = _575 + uint(_2550.w);
        if ((cbInstanceData._m0[_2688].w < 1.0) && ((cbInstanceData._m0[_2688].w + _2581) < 0.5))
        {
            _2747 = true;
            break;
        }
        if ((_2574 + 1.0) < _2572.x)
        {
            _2747 = true;
            break;
        }
        _2747 = false;
        break;
    }
    float _2952;
    if (_2747)
    {
        discard_state = true;
        _2952 = 0.0;
    }
    else
    {
        _2952 = cbInstanceData._m0[_2413].w;
    }
    SV_Target.x = _2578;
    SV_Target.y = _2579;
    SV_Target.z = _2580;
    SV_Target.w = _2952;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2413].w;
    discard_exit();
}


