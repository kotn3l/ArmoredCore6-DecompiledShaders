#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1143;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _245 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _245 + 1u;
    uint _254 = _245 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_245].x * cbInstanceData._m0[_245].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _284 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _290 = _284.x * cbMtdParam._m0[9u].x;
    float _291 = _284.y * cbMtdParam._m0[9u].y;
    float _292 = _284.z * cbMtdParam._m0[9u].z;
    vec4 _310 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _264) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _265) + cbTextureTilingScale._m0[20u].w));
    vec4 _336 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _340 = _336.z;
    float _344 = (_336.x * 2.0) + (-1.0);
    float _345 = (_336.y * 2.0) + (-1.0);
    float _346 = dot(vec2(_344, _345), vec2(_344, _345));
    float _3755 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _352 = sqrt(1.0 - (isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))));
    float _357 = _344 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_310.x * 2.0) + (-1.0)));
    float _358 = _345 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_310.y * 2.0) + (-1.0)));
    vec4 _375 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _377 = _375.x;
    float _378 = 1.0 - _377;
    float _387 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _390 = ((isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : min(_387, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _399 = (_390 - ((((((_377 - _378) * cbMtdParam._m0[24u].z) + _378) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _390))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3776 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _400 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _407 = (_400 * (cbMtdParam._m0[17u].x - _290)) + _290;
    float _408 = (_400 * (cbMtdParam._m0[17u].y - _291)) + _291;
    float _409 = (_400 * (cbMtdParam._m0[17u].z - _292)) + _292;
    vec4 _422 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _264) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _265) + cbTextureTilingScale._m0[19u].w));
    float _424 = _422.x;
    float _425 = 1.0 - _424;
    float _454 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_424 - _425) * cbMtdParam._m0[24u].w) + _425) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3787 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _455 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _463 = ((((cbMtdParam._m0[10u].x - _407) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _455) + _407;
    float _464 = ((((cbMtdParam._m0[10u].y - _408) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _455) + _408;
    float _465 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _409)) * _455) + _409;
    vec4 _478 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _480 = _478.x;
    float _482 = _480 - (_480 * _400);
    float _484 = _482 - (_482 * _455);
    float _489 = (((_310.z - _340) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _340;
    vec4 _503 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _510 = (_503.x * 2.0) + (-1.0);
    float _511 = (_503.y * 2.0) + (-1.0);
    float _512 = dot(vec2(_510, _511), vec2(_510, _511));
    float _3798 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _520 = (_400 * (_503.z - _489)) + _489;
    float _523 = ((cbMtdParam._m0[23u].y - _520) * _455) + _520;
    vec4 _545 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _264) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _265) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _551 = (_545.x * 2.0) + (-1.0);
    float _552 = (_545.y * 2.0) + (-1.0);
    float _553 = dot(vec2(_551, _552), vec2(_551, _552));
    float _3809 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _570 = (((_510 - _357) + (cbMtdParam._m0[21u].x * _357)) * _400) + _357;
    float _571 = (((_511 - _358) + (cbMtdParam._m0[21u].x * _358)) * _400) + _358;
    float _572 = (_400 * (sqrt(1.0 - (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0)))) - _352)) + _352;
    float _583 = (((_551 - _570) + (_570 * cbMtdParam._m0[22u].z)) * _455) + _570;
    float _584 = (((_552 - _571) + (_571 * cbMtdParam._m0[22u].z)) * _455) + _571;
    float _585 = ((sqrt(1.0 - (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0)))) - _572) * _455) + _572;
    float _587 = cbMtdParam._m0[22u].x + _336.w;
    float _590 = fma(_585, _232 * NORMAL.x, fma(_584, _239 * TANGENT.x, (_225 * _217) * _583));
    float _593 = fma(_585, _232 * NORMAL.y, fma(_584, _239 * TANGENT.y, (_225 * _218) * _583));
    float _596 = fma(_585, _232 * NORMAL.z, fma(_584, _239 * TANGENT.z, (_225 * _219) * _583));
    float _600 = inversesqrt(dot(vec3(_590, _593, _596), vec3(_590, _593, _596)));
    float _601 = _600 * _590;
    float _602 = _600 * _593;
    float _603 = _600 * _596;
    float _3820 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _604 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _3831 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _3842 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _3853 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _3864 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _3875 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _609 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
    float _623 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _663 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _673 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _663);
    float _674 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _663);
    float _675 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _663);
    float _679 = inversesqrt(dot(vec3(_673, _674, _675), vec3(_673, _674, _675)));
    float _680 = _673 * _679;
    float _681 = _674 * _679;
    float _682 = _675 * _679;
    float _688 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _689 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _710 = fma(_603, cbSceneParam._m0[5u].z, fma(_602, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _601));
    float _713 = fma(_603, cbSceneParam._m0[6u].z, fma(_602, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _601));
    float _716 = fma(_603, cbSceneParam._m0[7u].z, fma(_602, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _601));
    uint _730 = (_245 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _736 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0)))) * cbInstanceData._m0[_730].x;
    float _737 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0)))) * cbInstanceData._m0[_730].y;
    float _738 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0)))) * cbInstanceData._m0[_730].z;
    float _3886 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _739 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _3897 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _740 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _3908 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _741 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _742 = 1.0 - _609;
    float _743 = _739 * _742;
    float _744 = _740 * _742;
    float _745 = _741 * _742;
    float _750 = (_739 + (-0.039999999105930328369140625)) * _609;
    float _751 = (_740 + (-0.039999999105930328369140625)) * _609;
    float _752 = (_741 + (-0.039999999105930328369140625)) * _609;
    float _753 = _750 + 0.039999999105930328369140625;
    float _755 = _751 + 0.039999999105930328369140625;
    float _756 = _752 + 0.039999999105930328369140625;
    vec4 _765 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _688, cbSceneParam._m0[86u].y * _689));
    float _769 = ((isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * TEXCOORD_5.w) * _765.x;
    float _770 = dot(vec3(_601, _602, _603), vec3(_680, _681, _682));
    float _773 = _770 * 2.0;
    float _777 = (_773 * _601) - _680;
    float _778 = (_773 * _602) - _681;
    float _779 = (_773 * _603) - _682;
    float _783 = abs(dot(vec3(_680, _681, _682), vec3(_601, _602, _603)));
    float _3919 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _785 = sqrt(_604);
    float _798 = exp2((_785 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_785 * 3.0));
    float _804 = (1.0 - _798) * ((_785 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _805 = _798 * _785;
    float _833 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _837 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _841 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1142;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _867 = fma(_841, cbModelParam._m0[26u].z, fma(_837, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _833));
        float _871 = fma(_841, cbModelParam._m0[27u].z, fma(_837, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _833));
        float _875 = fma(_841, cbModelParam._m0[28u].z, fma(_837, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _833));
        float _900 = _833 + _601;
        float _901 = _837 + _602;
        float _902 = _841 + _603;
        float _912 = fma(_902, cbModelParam._m0[26u].z, fma(_901, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _900)) - _867;
        float _913 = fma(_902, cbModelParam._m0[27u].z, fma(_901, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _900)) - _871;
        float _914 = fma(_902, cbModelParam._m0[28u].z, fma(_901, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _900)) - _875;
        float _918 = inversesqrt(dot(vec3(_912, _913, _914), vec3(_912, _913, _914)));
        float _931 = ((_918 * _912) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_867 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _932 = ((_918 * _913) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_871 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _933 = ((_918 * _914) / cbModelParam._m0[34u].z) + ((((((_875 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _936 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_931, _932, _933), 0.0);
        vec4 _943 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_931, _932, _933), 0.0);
        vec4 _950 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_931, _932, _933), 0.0);
        vec4 _957 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_931, _932, _933), 0.0);
        float _970 = exp2((_936.w + (-0.5)) * 20.0) * 2.0;
        float _971 = _970 * (_936.x + (-0.5));
        float _972 = _970 * (_936.y + (-0.5));
        float _973 = _970 * (_936.z + (-0.5));
        float _980 = exp2((_943.w + (-0.5)) * 20.0) * 2.0;
        float _981 = _980 * (_943.x + (-0.5));
        float _982 = _980 * (_943.y + (-0.5));
        float _983 = _980 * (_943.z + (-0.5));
        float _990 = exp2((_950.w + (-0.5)) * 20.0) * 2.0;
        float _991 = _990 * (_950.x + (-0.5));
        float _992 = _990 * (_950.y + (-0.5));
        float _993 = _990 * (_950.z + (-0.5));
        float _1000 = exp2((_957.w + (-0.5)) * 20.0) * 2.0;
        float _1001 = _1000 * (_957.x + (-0.5));
        float _1002 = _1000 * (_957.y + (-0.5));
        float _1003 = _1000 * (_957.z + (-0.5));
        float _1004 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1005 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1006 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1007 = _971 * 0.5;
        float _1008 = _981 * 0.5;
        float _1009 = _991 * 0.5;
        float _1010 = dot(vec3(_1007, _1008, _1009), vec3(_1007, _1008, _1009));
        float _1015 = (_1010 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1010);
        float _1024 = (dot(vec3(_601, _602, _603), vec3(_1015 * _1007, _1015 * _1008, _1015 * _1009)) + 1.0) * 0.5;
        float _3945 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1034 = sqrt(((_1008 * _1008) + (_1007 * _1007)) + (_1009 * _1009)) / (_1004 + 9.9999997473787516355514526367188e-06);
        float _3956 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1036 = _1035 * 2.0;
        float _1040 = (1.0 - _1035) / (_1035 + 1.0);
        float _3967 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1050 = ((((1.0 - _1041) * (_1036 + 2.0)) * exp2(log2(isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_1036 + 1.0))) + _1041) * _1004;
        float _1051 = _972 * 0.5;
        float _1052 = _982 * 0.5;
        float _1053 = _992 * 0.5;
        float _1054 = dot(vec3(_1051, _1052, _1053), vec3(_1051, _1052, _1053));
        float _1059 = (_1054 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1054);
        float _1067 = (dot(vec3(_601, _602, _603), vec3(_1059 * _1051, _1059 * _1052, _1059 * _1053)) + 1.0) * 0.5;
        float _3978 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1076 = sqrt(((_1052 * _1052) + (_1051 * _1051)) + (_1053 * _1053)) / (_1005 + 9.9999997473787516355514526367188e-06);
        float _3989 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1077 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1078 = _1077 * 2.0;
        float _1082 = (1.0 - _1077) / (_1077 + 1.0);
        float _4000 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1092 = ((((1.0 - _1083) * (_1078 + 2.0)) * exp2(log2(isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_1078 + 1.0))) + _1083) * _1005;
        float _1093 = _973 * 0.5;
        float _1094 = _983 * 0.5;
        float _1095 = _993 * 0.5;
        float _1096 = dot(vec3(_1093, _1094, _1095), vec3(_1093, _1094, _1095));
        float _1101 = (_1096 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1096);
        float _1109 = (dot(vec3(_601, _602, _603), vec3(_1101 * _1093, _1101 * _1094, _1101 * _1095)) + 1.0) * 0.5;
        float _4011 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1118 = sqrt(((_1094 * _1094) + (_1093 * _1093)) + (_1095 * _1095)) / (_1006 + 9.9999997473787516355514526367188e-06);
        float _4022 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1120 = _1119 * 2.0;
        float _1124 = (1.0 - _1119) / (_1119 + 1.0);
        float _4033 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1134 = ((((1.0 - _1125) * (_1120 + 2.0)) * exp2(log2(isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_1120 + 1.0))) + _1125) * _1006;
        _1142 = _973;
        _1144 = _972;
        _1145 = _971;
        _1146 = _983;
        _1147 = _982;
        _1148 = _981;
        _1149 = _993;
        _1150 = _992;
        _1151 = _991;
        _1152 = _1006;
        _1153 = _1005;
        _1154 = _1004;
        _1155 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0)));
        _1156 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0)));
        _1157 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0)));
    }
    else
    {
        _1142 = _1143;
        _1144 = _1143;
        _1145 = _1143;
        _1146 = _1143;
        _1147 = _1143;
        _1148 = _1143;
        _1149 = _1143;
        _1150 = _1143;
        _1151 = _1143;
        _1152 = _1143;
        _1153 = _1143;
        _1154 = _1143;
        _1155 = 0.0;
        _1156 = 0.0;
        _1157 = 0.0;
    }
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1182 = fma(_841, cbModelParam._m0[30u].z, fma(_837, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _833));
        float _1186 = fma(_841, cbModelParam._m0[31u].z, fma(_837, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _833));
        float _1190 = fma(_841, cbModelParam._m0[32u].z, fma(_837, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _833));
        float _1213 = _833 + _601;
        float _1214 = _837 + _602;
        float _1215 = _841 + _603;
        float _1225 = fma(_1215, cbModelParam._m0[30u].z, fma(_1214, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1213)) - _1182;
        float _1226 = fma(_1215, cbModelParam._m0[31u].z, fma(_1214, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1213)) - _1186;
        float _1227 = fma(_1215, cbModelParam._m0[32u].z, fma(_1214, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1213)) - _1190;
        float _1231 = inversesqrt(dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227)));
        float _1244 = ((_1231 * _1225) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1182 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1245 = ((_1231 * _1226) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1186 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1246 = ((_1231 * _1227) / cbModelParam._m0[35u].z) + ((((((_1190 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        float _1281 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1248.x + (-0.5));
        float _1283 = _1281 * (_1248.y + (-0.5));
        float _1284 = _1281 * (_1248.z + (-0.5));
        float _1291 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1292 = _1291 * (_1255.x + (-0.5));
        float _1293 = _1291 * (_1255.y + (-0.5));
        float _1294 = _1291 * (_1255.z + (-0.5));
        float _1301 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1302 = _1301 * (_1262.x + (-0.5));
        float _1303 = _1301 * (_1262.y + (-0.5));
        float _1304 = _1301 * (_1262.z + (-0.5));
        float _1311 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1269.x + (-0.5));
        float _1313 = _1311 * (_1269.y + (-0.5));
        float _1314 = _1311 * (_1269.z + (-0.5));
        float _1315 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1316 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1317 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1318 = _1282 * 0.5;
        float _1319 = _1292 * 0.5;
        float _1320 = _1302 * 0.5;
        float _1321 = dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320));
        float _1326 = (_1321 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1321);
        float _1334 = (dot(vec3(_601, _602, _603), vec3(_1326 * _1318, _1326 * _1319, _1326 * _1320)) + 1.0) * 0.5;
        float _4074 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1343 = sqrt(((_1319 * _1319) + (_1318 * _1318)) + (_1320 * _1320)) / (_1315 + 9.9999997473787516355514526367188e-06);
        float _4085 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1345 = _1344 * 2.0;
        float _1349 = (1.0 - _1344) / (_1344 + 1.0);
        float _4096 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1359 = ((((1.0 - _1350) * (_1345 + 2.0)) * exp2(log2(isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_1345 + 1.0))) + _1350) * _1315;
        float _1360 = _1283 * 0.5;
        float _1361 = _1293 * 0.5;
        float _1362 = _1303 * 0.5;
        float _1363 = dot(vec3(_1360, _1361, _1362), vec3(_1360, _1361, _1362));
        float _1368 = (_1363 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1363);
        float _1376 = (dot(vec3(_601, _602, _603), vec3(_1368 * _1360, _1368 * _1361, _1368 * _1362)) + 1.0) * 0.5;
        float _4107 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1385 = sqrt(((_1361 * _1361) + (_1360 * _1360)) + (_1362 * _1362)) / (_1316 + 9.9999997473787516355514526367188e-06);
        float _4118 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1387 = _1386 * 2.0;
        float _1391 = (1.0 - _1386) / (_1386 + 1.0);
        float _4129 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1401 = ((((1.0 - _1392) * (_1387 + 2.0)) * exp2(log2(isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_1387 + 1.0))) + _1392) * _1316;
        float _1402 = _1284 * 0.5;
        float _1403 = _1294 * 0.5;
        float _1404 = _1304 * 0.5;
        float _1405 = dot(vec3(_1402, _1403, _1404), vec3(_1402, _1403, _1404));
        float _1410 = (_1405 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1405);
        float _1418 = (dot(vec3(_601, _602, _603), vec3(_1410 * _1402, _1410 * _1403, _1410 * _1404)) + 1.0) * 0.5;
        float _4140 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1427 = sqrt(((_1403 * _1403) + (_1402 * _1402)) + (_1404 * _1404)) / (_1317 + 9.9999997473787516355514526367188e-06);
        float _4151 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1429 = _1428 * 2.0;
        float _1433 = (1.0 - _1428) / (_1428 + 1.0);
        float _4162 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1443 = ((((1.0 - _1434) * (_1429 + 2.0)) * exp2(log2(isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_1429 + 1.0))) + _1434) * _1317;
        _1451 = _1284;
        _1452 = _1283;
        _1453 = _1282;
        _1454 = _1294;
        _1455 = _1293;
        _1456 = _1292;
        _1457 = _1304;
        _1458 = _1303;
        _1459 = _1302;
        _1460 = _1317;
        _1461 = _1316;
        _1462 = _1315;
        _1463 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)));
        _1464 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)));
        _1465 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)));
    }
    else
    {
        _1451 = _1143;
        _1452 = _1143;
        _1453 = _1143;
        _1454 = _1143;
        _1455 = _1143;
        _1456 = _1143;
        _1457 = _1143;
        _1458 = _1143;
        _1459 = _1143;
        _1460 = _1143;
        _1461 = _1143;
        _1462 = _1143;
        _1463 = 0.0;
        _1464 = 0.0;
        _1465 = 0.0;
    }
    float _1475 = (cbModelParam._m0[1u].x * (_1463 - _1155)) + _1155;
    float _1476 = (cbModelParam._m0[1u].x * (_1464 - _1156)) + _1156;
    float _1477 = (cbModelParam._m0[1u].x * (_1465 - _1157)) + _1157;
    float _1498 = fma(_1477, cbSceneParam._m0[89u].z, fma(_1476, cbSceneParam._m0[89u].y, _1475 * cbSceneParam._m0[89u].x));
    float _1501 = fma(_1477, cbSceneParam._m0[90u].z, fma(_1476, cbSceneParam._m0[90u].y, _1475 * cbSceneParam._m0[90u].x));
    float _1504 = fma(_1477, cbSceneParam._m0[91u].z, fma(_1476, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1475));
    float _1519 = _777 * 0.5;
    float _1520 = _778 * 0.5;
    float _1521 = _779 * 0.5;
    float _1522 = dot(vec4(_1519, _1520, _1521, 1.0), vec4(_1453, _1456, _1459, _1462));
    float _1525 = dot(vec4(_1519, _1520, _1521, 1.0), vec4(_1452, _1455, _1458, _1461));
    float _1528 = dot(vec4(_1519, _1520, _1521, 1.0), vec4(_1451, _1454, _1457, _1460));
    float _1562;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1535 = dot(vec4(_1519, _1520, _1521, 1.0), vec4(_1142, _1146, _1149, _1152));
        float _1539 = dot(vec4(_1519, _1520, _1521, 1.0), vec4(_1144, _1147, _1150, _1153));
        float _1543 = dot(vec4(_1519, _1520, _1521, 1.0), vec4(_1145, _1148, _1151, _1154));
        float _1550 = dot(vec4(cbModelParam._m0[39u]), vec4(_1519, _1520, _1521, 1.0));
        _1562 = dot(vec3(isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)), isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)), isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1550) ? 0.0 : (isnan(0.0) ? _1550 : max(0.0, _1550))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1562 = 1.0;
    }
    float _1573;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1564 = dot(vec4(cbModelParam._m0[40u]), vec4(_1519, _1520, _1521, 1.0));
        _1573 = dot(vec3(isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)), isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)), isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1564) ? 0.0 : (isnan(0.0) ? _1564 : max(0.0, _1564))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1573 = 1.0;
    }
    float _1577 = (_1573 * cbModelParam._m0[1u].x) + (_1562 * (1.0 - cbModelParam._m0[1u].x));
    float _1587 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _604);
    float _1588 = isnan(_1587) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1587 : min(cbModelParam._m0[25u].z, _1587));
    float _1669;
    float _1671;
    float _1673;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1636 = fma(_841, cbModelParam._m0[13u].z, fma(_837, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _833)) + cbModelParam._m0[13u].w;
        float _1640 = fma(_841, cbModelParam._m0[14u].z, fma(_837, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _833)) + cbModelParam._m0[14u].w;
        float _1644 = fma(_841, cbModelParam._m0[15u].z, fma(_837, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _833)) + cbModelParam._m0[15u].w;
        float _1647 = fma(_779, cbModelParam._m0[13u].z, fma(_778, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _777));
        float _1650 = fma(_779, cbModelParam._m0[14u].z, fma(_778, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _777));
        float _1653 = fma(_779, cbModelParam._m0[15u].z, fma(_778, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _777));
        float _1681;
        if (_1647 > 0.0)
        {
            _1681 = abs((1.0 - _1636) / _1647);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1636 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1681 = frontier_phi_14_12_ladder;
        }
        float _1853;
        if (_1650 > 0.0)
        {
            _1853 = abs((1.0 - _1640) / _1650);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1640 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1853 = frontier_phi_23_19_ladder;
        }
        float _2149;
        if (_1653 > 0.0)
        {
            _2149 = abs((1.0 - _1644) / _1653);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1644 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2149 = frontier_phi_35_30_ladder;
        }
        float _2151 = isnan(_1853) ? _1681 : (isnan(_1681) ? _1853 : min(_1681, _1853));
        float _2152 = isnan(_2149) ? _2151 : (isnan(_2151) ? _2149 : min(_2151, _2149));
        float _2156 = (_2152 * _1647) + _1636;
        float _2157 = (_2152 * _1650) + _1640;
        float _2158 = (_2152 * _1653) + _1644;
        float _2159 = _2152 * 9.9999997473787516355514526367188e-05;
        float _2161 = (-1.0) - _2159;
        float _2163 = _2159 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2158 > _2163) || ((_2158 < _2161) || ((_2157 > _2163) || ((_2157 < _2161) || ((_2156 < _2161) || (_2156 > _2163))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2303 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2158, cbModelParam._m0[9u].z, fma(_2157, cbModelParam._m0[9u].y, _2156 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2158, cbModelParam._m0[10u].z, fma(_2157, cbModelParam._m0[10u].y, _2156 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2158, cbModelParam._m0[11u].z, fma(_2157, cbModelParam._m0[11u].y, _2156 * cbModelParam._m0[11u].x))), _1588);
            frontier_phi_13_35_ladder = _2303.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2303.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2303.x * cbModelParam._m0[1u].y;
        }
        _1669 = frontier_phi_13_35_ladder_2;
        _1671 = frontier_phi_13_35_ladder_1;
        _1673 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1657 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_777, _778, _779), _1588);
        _1669 = _1657.x * cbModelParam._m0[1u].y;
        _1671 = _1657.y * cbModelParam._m0[1u].y;
        _1673 = _1657.z * cbModelParam._m0[1u].y;
    }
    float _1677 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _604);
    float _1678 = isnan(_1677) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1677 : min(cbModelParam._m0[25u].w, _1677));
    float _1768;
    float _1770;
    float _1772;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1732 = fma(_841, cbModelParam._m0[21u].z, fma(_837, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _833)) + cbModelParam._m0[21u].w;
        float _1736 = fma(_841, cbModelParam._m0[22u].z, fma(_837, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _833)) + cbModelParam._m0[22u].w;
        float _1740 = fma(_841, cbModelParam._m0[23u].z, fma(_837, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _833)) + cbModelParam._m0[23u].w;
        float _1743 = fma(_779, cbModelParam._m0[21u].z, fma(_778, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _777));
        float _1746 = fma(_779, cbModelParam._m0[22u].z, fma(_778, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _777));
        float _1749 = fma(_779, cbModelParam._m0[23u].z, fma(_778, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _777));
        float _1858;
        if (_1743 > 0.0)
        {
            _1858 = abs((1.0 - _1732) / _1743);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1743 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1732 + 1.0) / _1743);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1858 = frontier_phi_25_21_ladder;
        }
        float _2176;
        if (_1746 > 0.0)
        {
            _2176 = abs((1.0 - _1736) / _1746);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1746 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1736 + 1.0) / _1746);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2176 = frontier_phi_37_32_ladder;
        }
        float _2514;
        if (_1749 > 0.0)
        {
            _2514 = abs((1.0 - _1740) / _1749);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1749 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1740 + 1.0) / _1749);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2514 = frontier_phi_47_44_ladder;
        }
        float _2516 = isnan(_2176) ? _1858 : (isnan(_1858) ? _2176 : min(_1858, _2176));
        float _2517 = isnan(_2514) ? _2516 : (isnan(_2516) ? _2514 : min(_2516, _2514));
        float _2521 = (_2517 * _1743) + _1732;
        float _2522 = (_2517 * _1746) + _1736;
        float _2523 = (_2517 * _1749) + _1740;
        float _2524 = _2517 * 9.9999997473787516355514526367188e-05;
        float _2525 = (-1.0) - _2524;
        float _2527 = _2524 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2523 > _2527) || ((_2523 < _2525) || ((_2522 > _2527) || ((_2522 < _2525) || ((_2521 < _2525) || (_2521 > _2527))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2645 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2523, cbModelParam._m0[17u].z, fma(_2522, cbModelParam._m0[17u].y, _2521 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2523, cbModelParam._m0[18u].z, fma(_2522, cbModelParam._m0[18u].y, _2521 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2523, cbModelParam._m0[19u].z, fma(_2522, cbModelParam._m0[19u].y, _2521 * cbModelParam._m0[19u].x))), _1678);
            frontier_phi_22_47_ladder = _2645.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2645.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2645.x * cbModelParam._m0[1u].z;
        }
        _1768 = frontier_phi_22_47_ladder_2;
        _1770 = frontier_phi_22_47_ladder_1;
        _1772 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1752 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_777, _778, _779), _1678);
        _1768 = _1752.x * cbModelParam._m0[1u].z;
        _1770 = _1752.y * cbModelParam._m0[1u].z;
        _1772 = _1752.z * cbModelParam._m0[1u].z;
    }
    float _1785 = (((_804 * _753) + _805) * _769) * ((cbModelParam._m0[1u].w * (_1768 - _1669)) + _1669);
    float _1787 = (((_804 * _755) + _805) * _769) * ((cbModelParam._m0[1u].w * (_1770 - _1671)) + _1671);
    float _1789 = (((_804 * _756) + _805) * _769) * ((cbModelParam._m0[1u].w * (_1772 - _1673)) + _1673);
    float _1792 = fma(_1789, cbSceneParam._m0[89u].z, fma(_1787, cbSceneParam._m0[89u].y, _1785 * cbSceneParam._m0[89u].x));
    float _1795 = fma(_1789, cbSceneParam._m0[90u].z, fma(_1787, cbSceneParam._m0[90u].y, _1785 * cbSceneParam._m0[90u].x));
    float _1798 = fma(_1789, cbSceneParam._m0[91u].z, fma(_1787, cbSceneParam._m0[91u].y, _1785 * cbSceneParam._m0[91u].x));
    float _1832 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1836 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1840 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1844 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1845 = _1832 / _1844;
    float _1846 = _1836 / _1844;
    float _1847 = _1840 / _1844;
    float _1994;
    float _1995;
    float _1996;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1874 = ((uint(_1847 > cbSceneParam._m0[59u].y) + uint(_1847 > cbSceneParam._m0[59u].x)) + uint(_1847 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1875 = _1874 + 43u;
        uint _1883 = _1874 + 44u;
        uint _1891 = _1874 + 45u;
        uint _1899 = _1874 + 46u;
        float _1910 = fma(_1844, cbSceneParam._m0[_1875].w, fma(_1840, cbSceneParam._m0[_1875].z, fma(_1836, cbSceneParam._m0[_1875].y, _1832 * cbSceneParam._m0[_1875].x)));
        float _1914 = fma(_1844, cbSceneParam._m0[_1883].w, fma(_1840, cbSceneParam._m0[_1883].z, fma(_1836, cbSceneParam._m0[_1883].y, _1832 * cbSceneParam._m0[_1883].x)));
        float _1922 = fma(_1844, cbSceneParam._m0[_1899].w, fma(_1840, cbSceneParam._m0[_1899].z, fma(_1836, cbSceneParam._m0[_1899].y, _1832 * cbSceneParam._m0[_1899].x)));
        float _1927 = cbSceneParam._m0[33u].z * _1922;
        float _1929 = cbSceneParam._m0[33u].w * _1922;
        float _1932 = fma(_1844, cbSceneParam._m0[_1891].w, fma(_1840, cbSceneParam._m0[_1891].z, fma(_1836, cbSceneParam._m0[_1891].y, _1832 * cbSceneParam._m0[_1891].x))) / _1922;
        float _1980 = (cbSceneParam._m0[33u].x - sqrt(((_1846 * _1846) + (_1845 * _1845)) + (_1847 * _1847))) * cbSceneParam._m0[33u].y;
        float _4288 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
        float _1987 = (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1927 + _1910) / _1922, (_1929 + _1914) / _1922), _1932), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1929 + _1910) / _1922, (_1914 - _1927) / _1922), _1932), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1910 - _1927) / _1922, (_1914 - _1929) / _1922), _1932), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1910 - _1929) / _1922, (_1927 + _1914) / _1922), _1932), 0.0)).x), vec4(0.25)));
        _1994 = 1.0 - (_1987 * cbSceneParam._m0[34u].x);
        _1995 = 1.0 - (_1987 * cbSceneParam._m0[34u].y);
        _1996 = 1.0 - (_1987 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1994 = 1.0;
        _1995 = 1.0;
        _1996 = 1.0;
    }
    float _2060;
    float _2062;
    float _2064;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2048 = fma(_1844, cbSceneParam._m0[63u].w, fma(_1840, cbSceneParam._m0[63u].z, fma(_1836, cbSceneParam._m0[63u].y, _1832 * cbSceneParam._m0[63u].x)));
        float _2049 = fma(_1844, cbSceneParam._m0[60u].w, fma(_1840, cbSceneParam._m0[60u].z, fma(_1836, cbSceneParam._m0[60u].y, _1832 * cbSceneParam._m0[60u].x))) / _2048;
        float _2050 = fma(_1844, cbSceneParam._m0[61u].w, fma(_1840, cbSceneParam._m0[61u].z, fma(_1836, cbSceneParam._m0[61u].y, _1832 * cbSceneParam._m0[61u].x))) / _2048;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2049 >= cbSceneParam._m0[64u].x) && (_2050 >= cbSceneParam._m0[64u].y)) && (_2049 <= cbSceneParam._m0[64u].z)) && (_2050 <= cbSceneParam._m0[64u].w))
        {
            float _2189 = fma(_1844, cbSceneParam._m0[62u].w, fma(_1840, cbSceneParam._m0[62u].z, fma(_1836, cbSceneParam._m0[62u].y, _1832 * cbSceneParam._m0[62u].x))) / _2048;
            float _2193 = isnan(cbSceneParam._m0[41u].w) ? _2189 : (isnan(_2189) ? cbSceneParam._m0[41u].w : max(_2189, cbSceneParam._m0[41u].w));
            float _2236 = (cbSceneParam._m0[33u].x - sqrt(((_1846 * _1846) + (_1845 * _1845)) + (_1847 * _1847))) * cbSceneParam._m0[33u].y;
            float _4304 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
            float _2243 = (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2049, cbSceneParam._m0[33u].w + _2050), _2193), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2049, _2050 - cbSceneParam._m0[33u].z), _2193), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2049 - cbSceneParam._m0[33u].z, _2050 - cbSceneParam._m0[33u].w), _2193), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2049 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2050), _2193), 0.0)).x), vec4(0.25)));
            float _2247 = 1.0 - (_2243 * cbSceneParam._m0[34u].x);
            float _2248 = 1.0 - (_2243 * cbSceneParam._m0[34u].y);
            float _2249 = 1.0 - (_2243 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2249) ? _1996 : (isnan(_1996) ? _2249 : min(_1996, _2249));
            frontier_phi_34_33_ladder_1 = isnan(_2248) ? _1995 : (isnan(_1995) ? _2248 : min(_1995, _2248));
            frontier_phi_34_33_ladder_2 = isnan(_2247) ? _1994 : (isnan(_1994) ? _2247 : min(_1994, _2247));
        }
        else
        {
            frontier_phi_34_33_ladder = _1996;
            frontier_phi_34_33_ladder_1 = _1995;
            frontier_phi_34_33_ladder_2 = _1994;
        }
        _2060 = frontier_phi_34_33_ladder_2;
        _2062 = frontier_phi_34_33_ladder_1;
        _2064 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2060 = _1994;
        _2062 = _1995;
        _2064 = _1996;
    }
    uvec4 _2069 = floatBitsToUint(cbInstanceData._m0[_245 + 5u]);
    uint _2071 = _2069.x * 14u;
    uint _2072 = _2071 + 13u;
    float _2079 = _769 + (-1.0);
    float _2084 = (cbLight._m0[_2072].x * _2079) + 1.0;
    float _2085 = (cbLight._m0[_2072].y * _2079) + 1.0;
    float _2086 = (cbLight._m0[_2072].z * _2079) + 1.0;
    float _2087 = (cbLight._m0[_2072].w * _2079) + 1.0;
    uint _2088 = _2071 + 5u;
    float _2094 = isnan(1.0) ? _2085 : (isnan(_2085) ? 1.0 : min(_2085, 1.0));
    uint _2098 = _2071 + 4u;
    float _2108 = isnan(1.0) ? _2084 : (isnan(_2084) ? 1.0 : min(_2084, 1.0));
    uint _2112 = _2071 | 1u;
    float _2123 = dot(vec3(cbLight._m0[_2071].xyz), vec3(_601, _602, _603));
    float _2126 = dot(vec3(cbLight._m0[_2112].xyz), vec3(_601, _602, _603));
    float _4340 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _4351 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2131 = (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * 0.3183098733425140380859375;
    float _2133 = (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * 0.3183098733425140380859375;
    float _2140 = ((cbLight._m0[_2088].x * _2094) * _2133) + (((cbLight._m0[_2098].x * _2060) * _2108) * _2131);
    float _2141 = ((_2094 * cbLight._m0[_2088].y) * _2133) + (((cbLight._m0[_2098].y * _2062) * _2108) * _2131);
    float _2142 = ((_2094 * cbLight._m0[_2088].z) * _2133) + (((cbLight._m0[_2098].z * _2064) * _2108) * _2131);
    uvec4 _2146 = floatBitsToUint(cbLight._m0[_2071 + 12u]);
    bool _2148 = _2146.x == 0u;
    float _2250;
    float _2252;
    float _2254;
    if (_2148)
    {
        _2250 = _2140;
        _2252 = _2141;
        _2254 = _2142;
    }
    else
    {
        uint _2258 = _2071 + 6u;
        float _2274 = (dot(vec3(cbLight._m0[_2071 + 2u].xyz), vec3(_601, _602, _603)) * 0.5) + 0.5;
        float _2275 = _2274 * _2274;
        float _4362 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2276 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _2277 = isnan(1.0) ? _2086 : (isnan(_2086) ? 1.0 : min(_2086, 1.0));
        _2250 = (((cbLight._m0[_2258].x * 0.3183098733425140380859375) * _2276) * _2277) + _2140;
        _2252 = (((cbLight._m0[_2258].y * 0.3183098733425140380859375) * _2276) * _2277) + _2141;
        _2254 = (((cbLight._m0[_2258].z * 0.3183098733425140380859375) * _2276) * _2277) + _2142;
    }
    bool _2257 = _2146.y == 0u;
    float _2312;
    float _2314;
    float _2316;
    if (_2257)
    {
        _2312 = _2250;
        _2314 = _2252;
        _2316 = _2254;
    }
    else
    {
        uint _2485 = _2071 + 7u;
        float _2501 = (dot(vec3(cbLight._m0[_2071 + 3u].xyz), vec3(_601, _602, _603)) * 0.5) + 0.5;
        float _2502 = _2501 * _2501;
        float _4378 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2503 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _2504 = isnan(1.0) ? _2087 : (isnan(_2087) ? 1.0 : min(_2087, 1.0));
        _2312 = (((cbLight._m0[_2485].x * 0.3183098733425140380859375) * _2503) * _2504) + _2250;
        _2314 = (((cbLight._m0[_2485].y * 0.3183098733425140380859375) * _2503) * _2504) + _2252;
        _2316 = (((cbLight._m0[_2485].z * 0.3183098733425140380859375) * _2503) * _2504) + _2254;
    }
    uint _2319 = _2071 + 8u;
    float _2332 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2071].w)) * _604) * 0.949999988079071044921875);
    float _2333 = _2332 * _2332;
    float _2334 = cbLight._m0[_2071].x + _680;
    float _2335 = cbLight._m0[_2071].y + _681;
    float _2336 = cbLight._m0[_2071].z + _682;
    float _2340 = inversesqrt(dot(vec3(_2334, _2335, _2336), vec3(_2334, _2335, _2336)));
    float _2341 = _2340 * _2334;
    float _2342 = _2340 * _2335;
    float _2343 = _2340 * _2336;
    float _2344 = dot(vec3(_601, _602, _603), vec3(cbLight._m0[_2071].xyz));
    float _4394 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2347 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
    float _4405 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _2348 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
    float _2349 = dot(vec3(_601, _602, _603), vec3(_2341, _2342, _2343));
    float _4416 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
    float _2352 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
    float _2353 = dot(vec3(cbLight._m0[_2071].xyz), vec3(_2341, _2342, _2343));
    float _4427 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _2357 = _2333 * _2333;
    float _2361 = ((_2352 * _2352) * (_2357 + (-1.0))) + 1.0;
    float _2369 = exp2(log2(1.0 - (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0)))) * 5.0);
    float _2370 = 0.959999978542327880859375 - _750;
    float _2372 = 0.959999978542327880859375 - _751;
    float _2373 = 0.959999978542327880859375 - _752;
    float _2380 = 1.0 - _2333;
    float _2391 = (0.5 / (((_2348 * ((_2347 * _2380) + _2333)) + 9.9999999392252902907785028219223e-09) + (((_2348 * _2380) + _2333) * _2347))) * _2347;
    float _4438 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2393 = (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_2357 / ((_2361 * _2361) * 3.141590118408203125));
    uint _2407 = _2071 + 9u;
    float _2418 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2112].w)) * _604) * 0.949999988079071044921875);
    float _2419 = _2418 * _2418;
    float _2420 = cbLight._m0[_2112].x + _680;
    float _2421 = cbLight._m0[_2112].y + _681;
    float _2422 = cbLight._m0[_2112].z + _682;
    float _2426 = inversesqrt(dot(vec3(_2420, _2421, _2422), vec3(_2420, _2421, _2422)));
    float _2427 = _2426 * _2420;
    float _2428 = _2426 * _2421;
    float _2429 = _2426 * _2422;
    float _2430 = dot(vec3(_601, _602, _603), vec3(cbLight._m0[_2112].xyz));
    float _4449 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    float _2433 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
    float _2434 = dot(vec3(_601, _602, _603), vec3(_2427, _2428, _2429));
    float _4460 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    float _2437 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
    float _2438 = dot(vec3(cbLight._m0[_2112].xyz), vec3(_2427, _2428, _2429));
    float _4471 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2442 = _2419 * _2419;
    float _2446 = ((_2437 * _2437) * (_2442 + (-1.0))) + 1.0;
    float _2453 = exp2(log2(1.0 - (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0)))) * 5.0);
    float _2460 = 1.0 - _2419;
    float _2470 = (0.5 / (((_2348 * ((_2433 * _2460) + _2419)) + 9.9999999392252902907785028219223e-09) + (((_2348 * _2460) + _2419) * _2433))) * _2433;
    float _4482 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
    float _2472 = (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (_2442 / ((_2446 * _2446) * 3.141590118408203125));
    float _2482 = (((((_2453 * _2370) + _753) * cbLight._m0[_2407].x) * _2472) * _2094) + ((((cbLight._m0[_2319].x * _2060) * ((_2369 * _2370) + _753)) * _2393) * _2108);
    float _2483 = (((((_2453 * _2372) + _755) * cbLight._m0[_2407].y) * _2472) * _2094) + ((((cbLight._m0[_2319].y * _2062) * ((_2369 * _2372) + _755)) * _2393) * _2108);
    float _2484 = (((((_2453 * _2373) + _756) * cbLight._m0[_2407].z) * _2472) * _2094) + ((((cbLight._m0[_2319].z * _2064) * ((_2369 * _2373) + _756)) * _2393) * _2108);
    float _2540;
    float _2542;
    float _2544;
    if (_2148)
    {
        _2540 = _2482;
        _2542 = _2483;
        _2544 = _2484;
    }
    else
    {
        uint _2546 = _2071 + 2u;
        uint _2550 = _2071 + 10u;
        float _2564 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2546].w)) * _604) * 0.949999988079071044921875);
        float _2565 = _2564 * _2564;
        float _2566 = cbLight._m0[_2546].x + _680;
        float _2567 = cbLight._m0[_2546].y + _681;
        float _2568 = cbLight._m0[_2546].z + _682;
        float _2572 = inversesqrt(dot(vec3(_2566, _2567, _2568), vec3(_2566, _2567, _2568)));
        float _2573 = _2572 * _2566;
        float _2574 = _2572 * _2567;
        float _2575 = _2572 * _2568;
        float _2576 = dot(vec3(_601, _602, _603), vec3(cbLight._m0[_2546].xyz));
        float _4493 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2579 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _2580 = dot(vec3(_601, _602, _603), vec3(_2573, _2574, _2575));
        float _4504 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2583 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _2584 = dot(vec3(cbLight._m0[_2546].xyz), vec3(_2573, _2574, _2575));
        float _4515 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
        float _2588 = _2565 * _2565;
        float _2592 = ((_2583 * _2583) * (_2588 + (-1.0))) + 1.0;
        float _2599 = exp2(log2(1.0 - (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0)))) * 5.0);
        float _2606 = 1.0 - _2565;
        float _2616 = (0.5 / (((_2348 * ((_2579 * _2606) + _2565)) + 9.9999999392252902907785028219223e-09) + (((_2348 * _2606) + _2565) * _2579))) * _2579;
        float _4526 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        float _2618 = (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0))) * (_2588 / ((_2592 * _2592) * 3.141590118408203125));
        float _2619 = isnan(1.0) ? _2086 : (isnan(_2086) ? 1.0 : min(_2086, 1.0));
        _2540 = (((((_2599 * _2370) + _753) * cbLight._m0[_2550].x) * _2618) * _2619) + _2482;
        _2542 = (((((_2599 * _2372) + _755) * cbLight._m0[_2550].y) * _2618) * _2619) + _2483;
        _2544 = (((((_2599 * _2373) + _756) * cbLight._m0[_2550].z) * _2618) * _2619) + _2484;
    }
    float _2650;
    float _2652;
    float _2654;
    if (_2257)
    {
        _2650 = _2540;
        _2652 = _2542;
        _2654 = _2544;
    }
    else
    {
        uint _2661 = _2071 + 3u;
        uint _2665 = _2071 + 11u;
        float _2679 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2661].w)) * _604) * 0.949999988079071044921875);
        float _2680 = _2679 * _2679;
        float _2681 = cbLight._m0[_2661].x + _680;
        float _2682 = cbLight._m0[_2661].y + _681;
        float _2683 = cbLight._m0[_2661].z + _682;
        float _2687 = inversesqrt(dot(vec3(_2681, _2682, _2683), vec3(_2681, _2682, _2683)));
        float _2688 = _2687 * _2681;
        float _2689 = _2687 * _2682;
        float _2690 = _2687 * _2683;
        float _2691 = dot(vec3(_601, _602, _603), vec3(cbLight._m0[_2661].xyz));
        float _4542 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
        float _2694 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _2695 = dot(vec3(_601, _602, _603), vec3(_2688, _2689, _2690));
        float _4553 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        float _2698 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
        float _2699 = dot(vec3(cbLight._m0[_2661].xyz), vec3(_2688, _2689, _2690));
        float _4564 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
        float _2703 = _2680 * _2680;
        float _2707 = ((_2698 * _2698) * (_2703 + (-1.0))) + 1.0;
        float _2714 = exp2(log2(1.0 - (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0)))) * 5.0);
        float _2721 = 1.0 - _2680;
        float _2731 = (0.5 / (((_2348 * ((_2694 * _2721) + _2680)) + 9.9999999392252902907785028219223e-09) + (((_2348 * _2721) + _2680) * _2694))) * _2694;
        float _4575 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
        float _2733 = (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_2703 / ((_2707 * _2707) * 3.141590118408203125));
        float _2734 = isnan(1.0) ? _2087 : (isnan(_2087) ? 1.0 : min(_2087, 1.0));
        _2650 = (((((_2714 * _2370) + _753) * cbLight._m0[_2665].x) * _2733) * _2734) + _2540;
        _2652 = (((((_2714 * _2372) + _755) * cbLight._m0[_2665].y) * _2733) * _2734) + _2542;
        _2654 = (((((_2714 * _2373) + _756) * cbLight._m0[_2665].z) * _2733) * _2734) + _2544;
    }
    float _2800;
    float _2802;
    float _2804;
    float _2806;
    float _2808;
    float _2810;
    if (_2069.y == 0u)
    {
        uvec4 _2755 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2756 = _2755.x;
        uint _2767 = uint((float(_2755.y) * floor(float(uint(cbSceneParam._m0[85u].y * _689) / _2756))) + floor(float(uint(cbSceneParam._m0[85u].x * _688) / _2756)));
        float _2777 = (log2(_1847 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2778 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
        uint _2781 = uint(isnan(14.0) ? _2778 : (isnan(_2778) ? 14.0 : min(_2778, 14.0)));
        uvec4 _2786 = texelFetch(g_lightClusterGridBuffer, int(((_2781 << 2u) + (_2767 << 6u)) >> 2u));
        uint _2787 = _2786.x;
        uint _2788 = _2755.z;
        float _2867;
        float _2869;
        float _2871;
        float _2873;
        float _2875;
        float _2877;
        if (((((1u << ((_2788 >> 4u) & 15u)) + 4294967295u) & _2787) == 0u) || ((_2788 & 240u) == 0u))
        {
            _2867 = 0.0;
            _2869 = 0.0;
            _2871 = 0.0;
            _2873 = 0.0;
            _2875 = 0.0;
            _2877 = 0.0;
        }
        else
        {
            float _2868;
            float _2870;
            float _2872;
            float _2874;
            float _2876;
            float _2878;
            float _3012 = 0.0;
            float _3013 = 0.0;
            float _3014 = 0.0;
            float _3015 = 0.0;
            float _3016 = 0.0;
            float _3017 = 0.0;
            uint _3018 = 0u;
            uint _3027;
            bool _3028;
            for (;;)
            {
                _3027 = texelFetch(g_lightClassification, int((((_2781 << 5u) + (_2767 << 9u)) + (_3018 << 2u)) >> 2u)).x;
                _3028 = _3027 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3028)
                {
                    frontier_phi_66_pred = _3017;
                    frontier_phi_66_pred_1 = _3016;
                    frontier_phi_66_pred_2 = _3015;
                    frontier_phi_66_pred_3 = _3014;
                    frontier_phi_66_pred_4 = _3013;
                    frontier_phi_66_pred_5 = _3012;
                }
                else
                {
                    float _3136;
                    float _3137;
                    float _3138;
                    float _3139;
                    float _3140;
                    float _3141;
                    uint _3142;
                    _3136 = _3012;
                    _3137 = _3013;
                    _3138 = _3014;
                    _3139 = _3015;
                    _3140 = _3016;
                    _3141 = _3017;
                    _3142 = _3027;
                    float _3068;
                    float _3069;
                    float _3070;
                    float _3071;
                    float _3072;
                    float _3073;
                    for (;;)
                    {
                        uint _3146 = uint(findLSB(_3142)) + (_3018 << 5u);
                        uint _3143 = (_3142 + 4294967295u) & _3142;
                        uint _3148 = _3146 * 48u;
                        vec4 _3162 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3148)).x, texelFetch(g_PointLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3148 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3148 + 3u)).x));
                        uint _3168 = (_3146 * 48u) + 4u;
                        vec4 _3181 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3168)).x, texelFetch(g_PointLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3168 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3168 + 3u)).x));
                        uint _3187 = (_3146 * 48u) + 8u;
                        vec3 _3198 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3187)).x, texelFetch(g_PointLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3187 + 2u)).x));
                        float _3202 = _3162.x - _1845;
                        float _3203 = _3162.y - _1846;
                        float _3204 = _3162.z - _1847;
                        float _3205 = dot(vec3(_3202, _3203, _3204), vec3(_3202, _3203, _3204));
                        float _3208 = inversesqrt(_3205);
                        float _3209 = _3208 * _3202;
                        float _3210 = _3208 * _3203;
                        float _3211 = _3208 * _3204;
                        float _3212 = dot(vec3(_710, _713, _716), vec3(_3209, _3210, _3211));
                        float _3217 = 1.0 - (_3205 * _3162.w);
                        float _4601 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                        float _3218 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
                        float _3219 = sqrt(_3205) * _3181.w;
                        float _3222 = 1.39999997615814208984375 / (_3219 + 1.39999997615814208984375);
                        float _3223 = _3222 * _3222;
                        float _3226 = ((1.0 - _3223) * _3212) + _3223;
                        float _3229 = _3219 * _3219;
                        float _3233 = ((isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0))) * _3218) / ((_3229 * 0.699999988079071044921875) + 1.0);
                        float _3237 = (-0.0) - _1845;
                        float _3238 = (-0.0) - _1846;
                        float _3239 = (-0.0) - _1847;
                        float _3243 = inversesqrt(dot(vec3(_3237, _3238, _3239), vec3(_3237, _3238, _3239)));
                        float _3244 = _3243 * _3237;
                        float _3245 = _3243 * _3238;
                        float _3246 = _3243 * _3239;
                        float _3253 = exp2(log2(1.0 / ((_3229 * 3.5) + 5.0)) * 0.25);
                        float _3254 = 1.0 - _785;
                        float _3261 = sqrt(1.0 - ((1.0 - (_3254 * _3254)) * (1.0 - (_3253 * _3253))));
                        float _3262 = _3261 * _3261;
                        float _3263 = _3262 * _3262;
                        float _3264 = _3244 + _3209;
                        float _3265 = _3245 + _3210;
                        float _3266 = _3246 + _3211;
                        float _3270 = inversesqrt(dot(vec3(_3264, _3265, _3266), vec3(_3264, _3265, _3266)));
                        float _3274 = dot(vec3(_710, _713, _716), vec3(_3244, _3245, _3246));
                        float _4617 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                        float _3277 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                        float _3278 = dot(vec3(_710, _713, _716), vec3(_3270 * _3264, _3270 * _3265, _3270 * _3266));
                        float _4628 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                        float _3281 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                        float _3285 = ((_3281 * _3281) * (_3263 + (-1.0))) + 1.0;
                        float _3286 = _3222 * _3262;
                        float _3287 = _3286 * _3286;
                        float _3290 = ((1.0 - _3287) * _3212) + _3287;
                        float _4639 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                        float _3291 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
                        float _3292 = 1.0 - _3262;
                        float _3302 = (0.5 / (((_3291 * ((_3277 * _3292) + _3262)) + 9.9999999392252902907785028219223e-09) + (((_3291 * _3292) + _3262) * _3277))) * _3291;
                        float _4650 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                        float _3313 = (((_3263 * 3.1415927410125732421875) * (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0)))) / ((_3285 * _3285) * ((_3229 * 2.1991131305694580078125) + 3.141590118408203125))) * _3218;
                        _3071 = (_3233 * _3181.x) + _3139;
                        _3072 = (_3233 * _3181.y) + _3140;
                        _3073 = (_3233 * _3181.z) + _3141;
                        _3068 = (_3313 * _3198.x) + _3136;
                        _3069 = (_3313 * _3198.y) + _3137;
                        _3070 = (_3313 * _3198.z) + _3138;
                        if (_3143 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3136 = _3068;
                            _3137 = _3069;
                            _3138 = _3070;
                            _3139 = _3071;
                            _3140 = _3072;
                            _3141 = _3073;
                            _3142 = _3143;
                        }
                    }
                    frontier_phi_66_pred = _3073;
                    frontier_phi_66_pred_1 = _3072;
                    frontier_phi_66_pred_2 = _3071;
                    frontier_phi_66_pred_3 = _3070;
                    frontier_phi_66_pred_4 = _3069;
                    frontier_phi_66_pred_5 = _3068;
                }
                _2878 = frontier_phi_66_pred;
                _2876 = frontier_phi_66_pred_1;
                _2874 = frontier_phi_66_pred_2;
                _2872 = frontier_phi_66_pred_3;
                _2870 = frontier_phi_66_pred_4;
                _2868 = frontier_phi_66_pred_5;
                uint _3019 = _3018 + 1u;
                if (_3019 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3012 = _2868;
                    _3013 = _2870;
                    _3014 = _2872;
                    _3015 = _2874;
                    _3016 = _2876;
                    _3017 = _2878;
                    _3018 = _3019;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2867 = _2868;
            _2869 = _2870;
            _2871 = _2872;
            _2873 = _2874;
            _2875 = _2876;
            _2877 = _2878;
        }
        uvec4 _2881 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2882 = _2881.z;
        uint _2884 = (_2882 >> 8u) & 15u;
        float _2980;
        float _2982;
        float _2984;
        float _2986;
        float _2988;
        float _2990;
        if (((4294967295u << _2884) & _2787) == 0u)
        {
            _2980 = _2867;
            _2982 = _2869;
            _2984 = _2871;
            _2986 = _2873;
            _2988 = _2875;
            _2990 = _2877;
        }
        else
        {
            float _3005 = inversesqrt(dot(vec3(_1845, _1846, _1847), vec3(_1845, _1846, _1847)));
            float _3006 = _3005 * _1845;
            float _3007 = _3005 * _1846;
            float _3008 = _3005 * _1847;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2884 < ((_2882 >> 12u) & 15u))
            {
                float _2981;
                float _2983;
                float _2985;
                float _2987;
                float _2989;
                float _2991;
                float _3119 = _2867;
                float _3120 = _2869;
                float _3121 = _2871;
                float _3122 = _2873;
                float _3123 = _2875;
                float _3124 = _2877;
                uint _3125 = _2884;
                uint _3134;
                bool _3135;
                for (;;)
                {
                    _3134 = texelFetch(g_lightClassification, int((((_2781 << 5u) + (_2767 << 9u)) + (_3125 << 2u)) >> 2u)).x;
                    _3135 = _3134 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3135)
                    {
                        frontier_phi_72_pred = _3124;
                        frontier_phi_72_pred_1 = _3123;
                        frontier_phi_72_pred_2 = _3122;
                        frontier_phi_72_pred_3 = _3121;
                        frontier_phi_72_pred_4 = _3120;
                        frontier_phi_72_pred_5 = _3119;
                    }
                    else
                    {
                        float _3318;
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3322;
                        float _3323;
                        float _3612;
                        float _3613;
                        float _3614;
                        float _3615;
                        float _3616;
                        float _3617;
                        float _3331 = _3119;
                        float _3332 = _3120;
                        float _3333 = _3121;
                        float _3334 = _3122;
                        float _3335 = _3123;
                        float _3336 = _3124;
                        uint _3337 = _3134;
                        uint _3338;
                        vec4 _3363;
                        float _3364;
                        vec4 _3379;
                        vec3 _3391;
                        vec4 _3407;
                        vec4 _3422;
                        float _3468;
                        bool _3469;
                        for (;;)
                        {
                            uint _3348 = ((_3125 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3337));
                            _3338 = (_3337 + 4294967295u) & _3337;
                            uint _3350 = _3348 * 40u;
                            _3363 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3350)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 3u)).x));
                            _3364 = _3363.w;
                            uint _3366 = (_3348 * 40u) + 4u;
                            _3379 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3366)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 3u)).x));
                            uint _3381 = (_3348 * 40u) + 8u;
                            _3391 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3381)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 2u)).x));
                            uint _3394 = (_3348 * 40u) + 16u;
                            _3407 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3394)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 3u)).x));
                            uint _3409 = (_3348 * 40u) + 20u;
                            _3422 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3409)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 3u)).x));
                            uint _3424 = (_3348 * 40u) + 24u;
                            vec4 _3437 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3424)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 3u)).x));
                            uint _3443 = (_3348 * 40u) + 28u;
                            vec4 _3456 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3443)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 3u)).x));
                            _3468 = fma(_1847, _3456.z, fma(_1846, _3456.y, _3456.x * _1845)) + _3456.w;
                            _3469 = !((fma(_1847, _3437.z, fma(_1846, _3437.y, _3437.x * _1845)) + _3437.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3469)
                            {
                                float _3496 = _3363.x - _1845;
                                float _3497 = _3363.y - _1846;
                                float _3498 = _3363.z - _1847;
                                float _3499 = dot(vec3(_3496, _3497, _3498), vec3(_3496, _3497, _3498));
                                float _3502 = inversesqrt(_3499);
                                float _3503 = _3502 * _3496;
                                float _3504 = _3502 * _3497;
                                float _3505 = _3502 * _3498;
                                float _3509 = 1.0 - (_3499 / (_3364 * _3364));
                                float _4661 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                                float _3510 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
                                float _3514 = sqrt(_3499) * _3379.w;
                                float _3516 = 1.39999997615814208984375 / (_3514 + 1.39999997615814208984375);
                                float _3517 = _3516 * _3516;
                                float _3520 = ((1.0 - _3517) * dot(vec3(_3503, _3504, _3505), vec3(_710, _713, _716))) + _3517;
                                float _3523 = _3514 * _3514;
                                float _3527 = (fma(_1847, _3407.z, fma(_1846, _3407.y, _3407.x * _1845)) + _3407.w) / _3468;
                                float _3528 = (fma(_1847, _3422.z, fma(_1846, _3422.y, _3422.x * _1845)) + _3422.w) / _3468;
                                float _3532 = 1.0 - dot(vec2(_3527, _3528), vec2(_3527, _3528));
                                float _4677 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                                float _3533 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                                float _3534 = _3533 * (((isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0))) * _3510) / ((_3523 * 0.699999988079071044921875) + 1.0));
                                float _3546 = exp2(log2(1.0 / ((_3523 * 3.5) + 5.0)) * 0.25);
                                float _3547 = 1.0 - _785;
                                float _3554 = sqrt(1.0 - ((1.0 - (_3547 * _3547)) * (1.0 - (_3546 * _3546))));
                                float _3555 = _3554 * _3554;
                                float _3556 = _3555 * _3555;
                                float _3557 = _3503 - _3006;
                                float _3558 = _3504 - _3007;
                                float _3559 = _3505 - _3008;
                                float _3563 = inversesqrt(dot(vec3(_3557, _3558, _3559), vec3(_3557, _3558, _3559)));
                                float _3567 = dot(vec3(_710, _713, _716), vec3((-0.0) - _3006, (-0.0) - _3007, (-0.0) - _3008));
                                float _4688 = isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0));
                                float _3570 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                                float _3571 = dot(vec3(_710, _713, _716), vec3(_3563 * _3557, _3563 * _3558, _3563 * _3559));
                                float _4699 = isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0));
                                float _3574 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
                                float _3578 = ((_3574 * _3574) * (_3556 + (-1.0))) + 1.0;
                                float _3579 = _3516 * _3555;
                                float _3580 = _3579 * _3579;
                                float _3586 = ((1.0 - _3580) * dot(vec3(_710, _713, _716), vec3(_3503, _3504, _3505))) + _3580;
                                float _4710 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                                float _3587 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
                                float _3588 = 1.0 - _3555;
                                float _3598 = (0.5 / (((_3587 * ((_3570 * _3588) + _3555)) + 9.9999999392252902907785028219223e-09) + (((_3587 * _3588) + _3555) * _3570))) * _3587;
                                float _4721 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                                float _3608 = (_3533 * _3510) * (((_3556 * 3.1415927410125732421875) * (isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0)))) / ((_3578 * _3578) * ((_3523 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3534 * _3379.y;
                                frontier_phi_78_pred_1 = _3534 * _3379.x;
                                frontier_phi_78_pred_2 = _3608 * _3391.z;
                                frontier_phi_78_pred_3 = _3608 * _3391.y;
                                frontier_phi_78_pred_4 = _3608 * _3391.x;
                                frontier_phi_78_pred_5 = _3534 * _3379.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3616 = frontier_phi_78_pred;
                            _3615 = frontier_phi_78_pred_1;
                            _3614 = frontier_phi_78_pred_2;
                            _3613 = frontier_phi_78_pred_3;
                            _3612 = frontier_phi_78_pred_4;
                            _3617 = frontier_phi_78_pred_5;
                            _3321 = _3615 + _3334;
                            _3322 = _3616 + _3335;
                            _3323 = _3617 + _3336;
                            _3318 = _3612 + _3331;
                            _3319 = _3613 + _3332;
                            _3320 = _3614 + _3333;
                            if (_3338 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3331 = _3318;
                                _3332 = _3319;
                                _3333 = _3320;
                                _3334 = _3321;
                                _3335 = _3322;
                                _3336 = _3323;
                                _3337 = _3338;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3323;
                        frontier_phi_72_pred_1 = _3322;
                        frontier_phi_72_pred_2 = _3321;
                        frontier_phi_72_pred_3 = _3320;
                        frontier_phi_72_pred_4 = _3319;
                        frontier_phi_72_pred_5 = _3318;
                    }
                    _2991 = frontier_phi_72_pred;
                    _2989 = frontier_phi_72_pred_1;
                    _2987 = frontier_phi_72_pred_2;
                    _2985 = frontier_phi_72_pred_3;
                    _2983 = frontier_phi_72_pred_4;
                    _2981 = frontier_phi_72_pred_5;
                    uint _3126 = _3125 + 1u;
                    if (_3126 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3119 = _2981;
                        _3120 = _2983;
                        _3121 = _2985;
                        _3122 = _2987;
                        _3123 = _2989;
                        _3124 = _2991;
                        _3125 = _3126;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2991;
                frontier_phi_60_61_ladder_1 = _2989;
                frontier_phi_60_61_ladder_2 = _2985;
                frontier_phi_60_61_ladder_3 = _2983;
                frontier_phi_60_61_ladder_4 = _2981;
                frontier_phi_60_61_ladder_5 = _2987;
            }
            else
            {
                frontier_phi_60_61_ladder = _2877;
                frontier_phi_60_61_ladder_1 = _2875;
                frontier_phi_60_61_ladder_2 = _2871;
                frontier_phi_60_61_ladder_3 = _2869;
                frontier_phi_60_61_ladder_4 = _2867;
                frontier_phi_60_61_ladder_5 = _2873;
            }
            _2980 = frontier_phi_60_61_ladder_4;
            _2982 = frontier_phi_60_61_ladder_3;
            _2984 = frontier_phi_60_61_ladder_2;
            _2986 = frontier_phi_60_61_ladder_5;
            _2988 = frontier_phi_60_61_ladder_1;
            _2990 = frontier_phi_60_61_ladder;
        }
        float _2995 = isnan(1.0) ? _769 : (isnan(_769) ? 1.0 : min(_769, 1.0));
        _2800 = (_2995 * _2986) + _2312;
        _2802 = (_2995 * _2988) + _2314;
        _2804 = (_2995 * _2990) + _2316;
        _2806 = ((_2980 * _753) * _2995) + _2650;
        _2808 = ((_2982 * _755) * _2995) + _2652;
        _2810 = ((_2984 * _756) * _2995) + _2654;
    }
    else
    {
        _2800 = _2312;
        _2802 = _2314;
        _2804 = _2316;
        _2806 = _2650;
        _2808 = _2652;
        _2810 = _2654;
    }
    float _4737 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _4748 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _4759 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    uint _2830 = _245 + 6u;
    float _2838 = _688 / cbSceneParam._m0[86u].x;
    float _2839 = _689 / cbSceneParam._m0[86u].y;
    vec4 _2853 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2838, _2839, (log2((isnan(cbSceneParam._m0[77u].w) ? _623 : (isnan(_623) ? cbSceneParam._m0[77u].w : min(_623, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2855 = _2853.x;
    float _2856 = _2853.y;
    float _2857 = _2853.z;
    float _2858 = _2853.w;
    float _2930;
    float _2932;
    float _2934;
    float _2936;
    if (_623 > cbSceneParam._m0[78u].w)
    {
        float _2892 = isnan(_623) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _623 : min(cbSceneParam._m0[80u].w, _623));
        float _2893 = _2892 / _623;
        float _2904 = _2893 * _673;
        float _2905 = _674 * _2893;
        float _2906 = (-0.0) - _2905;
        float _2908 = _2893 * _675;
        float _2910 = (cbSceneParam._m0[77u].w * _2906) / _2892;
        float _2911 = _2910 + cbSceneParam._m0[79u].w;
        float _2912 = cbSceneParam._m0[79u].w - _2905;
        float _2918 = sqrt(((_2904 * _2904) + (_2905 * _2905)) + (_2908 * _2908));
        float _2921 = (1.0 - (cbSceneParam._m0[77u].w / _2892)) * _2918;
        float _2926 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2928 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3081;
        if (abs((_2906 - _2910) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3081 = ((((_2911 > 0.0) ? exp2(_2926 * _2911) : (2.0 - exp2(_2928 * _2911))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2921;
        }
        else
        {
            float _3041 = 1.0 / cbSceneParam._m0[80u].x;
            float _3042 = isnan(_2912) ? _2911 : (isnan(_2911) ? _2912 : max(_2911, _2912));
            float _3043 = isnan(_2912) ? _2911 : (isnan(_2911) ? _2912 : min(_2911, _2912));
            float _3052 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : min(_3042, 0.0));
            float _3053 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : min(_3043, 0.0));
            _3081 = ((abs(_2918 / _2906) * cbSceneParam._m0[80u].y) * ((((_3052 - _3053) * 2.0) - ((exp2(_2926 * (isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0)))) - exp2(_2926 * (isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0))))) * _3041)) - ((exp2(_2928 * _3052) - exp2(_2928 * _3053)) * _3041))) + (_2921 * cbSceneParam._m0[80u].z);
        }
        vec4 _3083 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2838, _2839, 1.0), 0.0);
        float _3092 = exp2((_3081 * (-1.44269502162933349609375)) * (1.0 - _3083.w));
        float _3093 = log2(_3092);
        float _3109 = log2(_2858);
        _2930 = (exp2(_3109 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3093 * cbSceneParam._m0[78u].x)) * _3083.x) / cbSceneParam._m0[78u].x)) + _2855;
        _2932 = (exp2(_3109 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3093 * cbSceneParam._m0[78u].y)) * _3083.y) / cbSceneParam._m0[78u].y)) + _2856;
        _2934 = (exp2(_3109 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3093 * cbSceneParam._m0[78u].z)) * _3083.z) / cbSceneParam._m0[78u].z)) + _2857;
        _2936 = _3092 * _2858;
    }
    else
    {
        _2930 = _2855;
        _2932 = _2856;
        _2934 = _2857;
        _2936 = _2858;
    }
    float _2948 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2949 = _2948 == 3.0;
    float _2950 = log2(_2936);
    float _2957 = exp2(_2950 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0))) * (_2800 + ((isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0))) * _769))) + ((_2806 + ((isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0))) * _1577)) * cbPerFrame._m0[3u].x));
    float _2958 = exp2(_2950 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0))) * (_2802 + ((isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))) * _769))) + ((_2808 + ((isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0))) * _1577)) * cbPerFrame._m0[3u].x));
    float _2959 = exp2(_2950 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0))) * (_2804 + ((isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))) * _769))) + ((_2810 + ((isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0))) * _1577)) * cbPerFrame._m0[3u].x));
    float _2968 = (_2948 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2968 * (_2949 ? _2957 : (_2957 + (cbSceneParam._m0[72u].w * _2930)));
    SV_Target.y = _2968 * (_2949 ? _2958 : (_2958 + (cbSceneParam._m0[72u].w * _2932)));
    SV_Target.z = _2968 * (_2949 ? _2959 : (_2959 + (cbSceneParam._m0[72u].w * _2934)));
    SV_Target.w = cbInstanceData._m0[_2830].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2830].w;
}


