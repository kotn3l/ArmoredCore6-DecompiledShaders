#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1434;
float _3839;
float _3840;
float _3841;
float _3842;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _240 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _241 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _242 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _248 = inversesqrt(dot(vec3(_240, _241, _242), vec3(_240, _241, _242)));
    float _255 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _262 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3851 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3862 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3873 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    uint _287 = uint(roundEven(NORMAL.w)) * 13u;
    uint _292 = _287 + 1u;
    uint _296 = _287 + 2u;
    float _305 = sqrt(((cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x)) + (cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x));
    float _306 = _305 * TEXCOORD.z;
    float _307 = _305 * TEXCOORD.w;
    vec4 _320 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _306) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _307) + cbTextureTilingScale._m0[13u].w));
    vec4 _344 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _349 = _344.x * cbMtdParam._m0[11u].x;
    float _350 = _344.y * cbMtdParam._m0[11u].y;
    float _351 = _344.z * cbMtdParam._m0[11u].z;
    vec4 _370 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _306) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _307) + cbTextureTilingScale._m0[5u].w));
    vec4 _407 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _409 = _407.x;
    float _421 = dot(vec4(_409, _407.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _438 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_409 - _421) * cbMtdParam._m0[24u].y) + _421) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3884 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _439 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _446 = (_439 * ((_370.x * cbMtdParam._m0[12u].x) - _349)) + _349;
    float _447 = (_439 * ((_370.y * cbMtdParam._m0[12u].y) - _350)) + _350;
    float _448 = (_439 * ((_370.z * cbMtdParam._m0[12u].z) - _351)) + _351;
    vec4 _465 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _306) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _307) + cbTextureTilingScale._m0[3u].w));
    vec4 _485 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _487 = _485.x;
    float _497 = dot(vec4(_487, _485.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _511 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_487 - _497) * cbMtdParam._m0[24u].y) + _497) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3895 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _512 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _519 = (_512 * ((_465.x * cbMtdParam._m0[13u].x) - _446)) + _446;
    float _520 = (_512 * ((_465.y * cbMtdParam._m0[13u].y) - _447)) + _447;
    float _521 = (_512 * ((_465.z * cbMtdParam._m0[13u].z) - _448)) + _448;
    float _525 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _320.x) * _519;
    float _528 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _320.y) * _520;
    float _531 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _320.z) * _521;
    float _538 = ((_519 - _525) * (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0)))) + _525;
    float _539 = ((_520 - _528) * (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0)))) + _528;
    float _540 = ((_521 - _531) * (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0)))) + _531;
    vec4 _552 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _306) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _307) + cbTextureTilingScale._m0[20u].w));
    vec4 _575 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _306) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _307) + cbTextureTilingScale._m0[4u].w));
    vec4 _592 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _594 = _592.x;
    float _595 = _592.y;
    float _596 = _592.z;
    float _603 = ((_575.x - _594) * _439) + _594;
    float _604 = ((_575.y - _595) * _439) + _595;
    float _605 = ((_575.z - _596) * _439) + _596;
    vec4 _617 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _306) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _307) + cbTextureTilingScale._m0[2u].w));
    float _630 = ((_617.z - _605) * _512) + _605;
    float _633 = ((((_617.x - _603) * _512) + _603) * 2.0) + (-1.0);
    float _634 = ((((_617.y - _604) * _512) + _604) * 2.0) + (-1.0);
    float _635 = dot(vec2(_633, _634), vec2(_633, _634));
    float _3906 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _640 = sqrt(1.0 - (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))));
    float _645 = _633 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_552.x * 2.0) + (-1.0)));
    float _646 = _634 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_552.y * 2.0) + (-1.0)));
    vec4 _659 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _673 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _306) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _307) + cbTextureTilingScale._m0[19u].w));
    float _675 = _673.x;
    float _676 = 1.0 - _675;
    float _702 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_675 - _676) * cbMtdParam._m0[24u].w) + _676) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3917 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _703 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _711 = ((((cbMtdParam._m0[10u].x - _538) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _703) + _538;
    float _712 = ((((cbMtdParam._m0[10u].y - _539) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _703) + _539;
    float _713 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _540)) * _703) + _540;
    vec4 _725 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _739 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _741 = _739.x;
    float _759 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _306) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _307) + cbTextureTilingScale._m0[9u].w)).x - _741) * _439) + _741;
    float _777 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _306) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _307) + cbTextureTilingScale._m0[21u].w)).x - _759) * _512) + _759;
    float _781 = ((_725.x - _777) * cbMtdParam._m0[19u].z) + _777;
    float _783 = _781 - (_781 * _703);
    float _788 = (((_552.z - _630) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _630;
    float _792 = ((cbMtdParam._m0[23u].y - _788) * _703) + _788;
    vec4 _811 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _306) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _307) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _817 = (_811.x * 2.0) + (-1.0);
    float _818 = (_811.y * 2.0) + (-1.0);
    float _819 = dot(vec2(_817, _818), vec2(_817, _818));
    float _3928 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _835 = (_703 * (((cbMtdParam._m0[22u].z * _645) - _645) + _817)) + _645;
    float _836 = (_703 * (((cbMtdParam._m0[22u].z * _646) - _646) + _818)) + _646;
    float _837 = (_703 * (sqrt(1.0 - (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0)))) - _640)) + _640;
    float _841 = cbMtdParam._m0[22u].x + _659.w;
    float _844 = fma(_837, _255 * NORMAL.x, fma(_836, _262 * TANGENT.x, (_248 * _240) * _835));
    float _847 = fma(_837, _255 * NORMAL.y, fma(_836, _262 * TANGENT.y, (_248 * _241) * _835));
    float _850 = fma(_837, _255 * NORMAL.z, fma(_836, _262 * TANGENT.z, (_248 * _242) * _835));
    float _854 = inversesqrt(dot(vec3(_844, _847, _850), vec3(_844, _847, _850)));
    float _855 = _854 * _844;
    float _856 = _854 * _847;
    float _857 = _854 * _850;
    float _3939 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _858 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _3950 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _3961 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _3972 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _3983 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _3994 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _863 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    float _877 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _917 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _927 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _917);
    float _928 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _917);
    float _929 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _917);
    float _933 = inversesqrt(dot(vec3(_927, _928, _929), vec3(_927, _928, _929)));
    float _934 = _927 * _933;
    float _935 = _928 * _933;
    float _936 = _929 * _933;
    vec4 _941 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _943 = _941.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1115 = sqrt(((_927 * _927) + (_928 * _928)) + (_929 * _929));
        float _1121 = (cbMatDynParam._m0[5u].x * _1115) + cbMatDynParam._m0[5u].y;
        float _4005 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1126 = (cbMatDynParam._m0[5u].z * _1115) + cbMatDynParam._m0[5u].w;
        float _4016 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) - _1122)) + _1122) < ((_943 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _954 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _955 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _973 = fma(_857, cbSceneParam._m0[5u].z, fma(_856, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _855));
    float _976 = fma(_857, cbSceneParam._m0[6u].z, fma(_856, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _855));
    float _979 = fma(_857, cbSceneParam._m0[7u].z, fma(_856, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _855));
    uint _992 = _287 + 9u;
    uint _993 = _992 + uint(cbMatDynParam._m0[0u].w);
    float _999 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0)))) * cbInstanceData._m0[_993].x;
    float _1000 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0)))) * cbInstanceData._m0[_993].y;
    float _1001 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0)))) * cbInstanceData._m0[_993].z;
    float _4027 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _1002 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _4038 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _1003 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _4049 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _1004 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _1005 = 1.0 - _863;
    float _1006 = _1002 * _1005;
    float _1007 = _1003 * _1005;
    float _1008 = _1004 * _1005;
    float _1013 = (_1002 + (-0.039999999105930328369140625)) * _863;
    float _1014 = (_1003 + (-0.039999999105930328369140625)) * _863;
    float _1015 = (_1004 + (-0.039999999105930328369140625)) * _863;
    float _1016 = _1013 + 0.039999999105930328369140625;
    float _1018 = _1014 + 0.039999999105930328369140625;
    float _1019 = _1015 + 0.039999999105930328369140625;
    vec4 _1028 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _954, cbSceneParam._m0[86u].y * _955));
    float _1032 = ((isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * TEXCOORD_5.w) * _1028.x;
    float _1033 = dot(vec3(_855, _856, _857), vec3(_934, _935, _936));
    float _1036 = _1033 * 2.0;
    float _1040 = (_1036 * _855) - _934;
    float _1041 = (_1036 * _856) - _935;
    float _1042 = (_1036 * _857) - _936;
    float _1046 = abs(dot(vec3(_934, _935, _936), vec3(_855, _856, _857)));
    float _4060 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
    float _1048 = sqrt(_858);
    float _1061 = exp2((_1048 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1048 * 3.0));
    float _1067 = (1.0 - _1061) * ((_1048 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1068 = _1061 * _1048;
    float _1096 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1100 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1104 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1433;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1158 = fma(_1104, cbModelParam._m0[26u].z, fma(_1100, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1096));
        float _1162 = fma(_1104, cbModelParam._m0[27u].z, fma(_1100, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1096));
        float _1166 = fma(_1104, cbModelParam._m0[28u].z, fma(_1100, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1096));
        float _1191 = _1096 + _855;
        float _1192 = _1100 + _856;
        float _1193 = _1104 + _857;
        float _1203 = fma(_1193, cbModelParam._m0[26u].z, fma(_1192, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1191)) - _1158;
        float _1204 = fma(_1193, cbModelParam._m0[27u].z, fma(_1192, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1191)) - _1162;
        float _1205 = fma(_1193, cbModelParam._m0[28u].z, fma(_1192, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1191)) - _1166;
        float _1209 = inversesqrt(dot(vec3(_1203, _1204, _1205), vec3(_1203, _1204, _1205)));
        float _1222 = ((_1209 * _1203) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1158 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1223 = ((_1209 * _1204) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1162 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1224 = ((_1209 * _1205) / cbModelParam._m0[34u].z) + ((((((_1166 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1227 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        vec4 _1234 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        float _1261 = exp2((_1227.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1227.x + (-0.5));
        float _1263 = _1261 * (_1227.y + (-0.5));
        float _1264 = _1261 * (_1227.z + (-0.5));
        float _1271 = exp2((_1234.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1234.x + (-0.5));
        float _1273 = _1271 * (_1234.y + (-0.5));
        float _1274 = _1271 * (_1234.z + (-0.5));
        float _1281 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1241.x + (-0.5));
        float _1283 = _1281 * (_1241.y + (-0.5));
        float _1284 = _1281 * (_1241.z + (-0.5));
        float _1291 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1292 = _1291 * (_1248.x + (-0.5));
        float _1293 = _1291 * (_1248.y + (-0.5));
        float _1294 = _1291 * (_1248.z + (-0.5));
        float _1295 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1296 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1297 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1298 = _1262 * 0.5;
        float _1299 = _1272 * 0.5;
        float _1300 = _1282 * 0.5;
        float _1301 = dot(vec3(_1298, _1299, _1300), vec3(_1298, _1299, _1300));
        float _1306 = (_1301 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1301);
        float _1315 = (dot(vec3(_855, _856, _857), vec3(_1306 * _1298, _1306 * _1299, _1306 * _1300)) + 1.0) * 0.5;
        float _4086 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1325 = sqrt(((_1299 * _1299) + (_1298 * _1298)) + (_1300 * _1300)) / (_1295 + 9.9999997473787516355514526367188e-06);
        float _4097 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1327 = _1326 * 2.0;
        float _1331 = (1.0 - _1326) / (_1326 + 1.0);
        float _4108 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1341 = ((((1.0 - _1332) * (_1327 + 2.0)) * exp2(log2(isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (_1327 + 1.0))) + _1332) * _1295;
        float _1342 = _1263 * 0.5;
        float _1343 = _1273 * 0.5;
        float _1344 = _1283 * 0.5;
        float _1345 = dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344));
        float _1350 = (_1345 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1345);
        float _1358 = (dot(vec3(_855, _856, _857), vec3(_1350 * _1342, _1350 * _1343, _1350 * _1344)) + 1.0) * 0.5;
        float _4119 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1367 = sqrt(((_1343 * _1343) + (_1342 * _1342)) + (_1344 * _1344)) / (_1296 + 9.9999997473787516355514526367188e-06);
        float _4130 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1369 = _1368 * 2.0;
        float _1373 = (1.0 - _1368) / (_1368 + 1.0);
        float _4141 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1383 = ((((1.0 - _1374) * (_1369 + 2.0)) * exp2(log2(isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_1369 + 1.0))) + _1374) * _1296;
        float _1384 = _1264 * 0.5;
        float _1385 = _1274 * 0.5;
        float _1386 = _1284 * 0.5;
        float _1387 = dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386));
        float _1392 = (_1387 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1387);
        float _1400 = (dot(vec3(_855, _856, _857), vec3(_1392 * _1384, _1392 * _1385, _1392 * _1386)) + 1.0) * 0.5;
        float _4152 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1409 = sqrt(((_1385 * _1385) + (_1384 * _1384)) + (_1386 * _1386)) / (_1297 + 9.9999997473787516355514526367188e-06);
        float _4163 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1411 = _1410 * 2.0;
        float _1415 = (1.0 - _1410) / (_1410 + 1.0);
        float _4174 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1425 = ((((1.0 - _1416) * (_1411 + 2.0)) * exp2(log2(isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_1411 + 1.0))) + _1416) * _1297;
        _1433 = _1264;
        _1435 = _1263;
        _1436 = _1262;
        _1437 = _1274;
        _1438 = _1273;
        _1439 = _1272;
        _1440 = _1284;
        _1441 = _1283;
        _1442 = _1282;
        _1443 = _1297;
        _1444 = _1296;
        _1445 = _1295;
        _1446 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)));
        _1447 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)));
        _1448 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)));
    }
    else
    {
        _1433 = _1434;
        _1435 = _1434;
        _1436 = _1434;
        _1437 = _1434;
        _1438 = _1434;
        _1439 = _1434;
        _1440 = _1434;
        _1441 = _1434;
        _1442 = _1434;
        _1443 = _1434;
        _1444 = _1434;
        _1445 = _1434;
        _1446 = 0.0;
        _1447 = 0.0;
        _1448 = 0.0;
    }
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1475 = fma(_1104, cbModelParam._m0[30u].z, fma(_1100, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1096));
        float _1479 = fma(_1104, cbModelParam._m0[31u].z, fma(_1100, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1096));
        float _1483 = fma(_1104, cbModelParam._m0[32u].z, fma(_1100, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1096));
        float _1506 = _1096 + _855;
        float _1507 = _1100 + _856;
        float _1508 = _1104 + _857;
        float _1518 = fma(_1508, cbModelParam._m0[30u].z, fma(_1507, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1506)) - _1475;
        float _1519 = fma(_1508, cbModelParam._m0[31u].z, fma(_1507, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1506)) - _1479;
        float _1520 = fma(_1508, cbModelParam._m0[32u].z, fma(_1507, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1506)) - _1483;
        float _1524 = inversesqrt(dot(vec3(_1518, _1519, _1520), vec3(_1518, _1519, _1520)));
        float _1537 = ((_1524 * _1518) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1475 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1538 = ((_1524 * _1519) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1479 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1539 = ((_1524 * _1520) / cbModelParam._m0[35u].z) + ((((((_1483 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1541 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1537, _1538, _1539), 0.0);
        vec4 _1548 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1537, _1538, _1539), 0.0);
        vec4 _1555 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1537, _1538, _1539), 0.0);
        vec4 _1562 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1537, _1538, _1539), 0.0);
        float _1574 = exp2((_1541.w + (-0.5)) * 20.0) * 2.0;
        float _1575 = _1574 * (_1541.x + (-0.5));
        float _1576 = _1574 * (_1541.y + (-0.5));
        float _1577 = _1574 * (_1541.z + (-0.5));
        float _1584 = exp2((_1548.w + (-0.5)) * 20.0) * 2.0;
        float _1585 = _1584 * (_1548.x + (-0.5));
        float _1586 = _1584 * (_1548.y + (-0.5));
        float _1587 = _1584 * (_1548.z + (-0.5));
        float _1594 = exp2((_1555.w + (-0.5)) * 20.0) * 2.0;
        float _1595 = _1594 * (_1555.x + (-0.5));
        float _1596 = _1594 * (_1555.y + (-0.5));
        float _1597 = _1594 * (_1555.z + (-0.5));
        float _1604 = exp2((_1562.w + (-0.5)) * 20.0) * 2.0;
        float _1605 = _1604 * (_1562.x + (-0.5));
        float _1606 = _1604 * (_1562.y + (-0.5));
        float _1607 = _1604 * (_1562.z + (-0.5));
        float _1608 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1609 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1610 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1611 = _1575 * 0.5;
        float _1612 = _1585 * 0.5;
        float _1613 = _1595 * 0.5;
        float _1614 = dot(vec3(_1611, _1612, _1613), vec3(_1611, _1612, _1613));
        float _1619 = (_1614 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1614);
        float _1627 = (dot(vec3(_855, _856, _857), vec3(_1619 * _1611, _1619 * _1612, _1619 * _1613)) + 1.0) * 0.5;
        float _4215 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1636 = sqrt(((_1612 * _1612) + (_1611 * _1611)) + (_1613 * _1613)) / (_1608 + 9.9999997473787516355514526367188e-06);
        float _4226 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1637 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _1638 = _1637 * 2.0;
        float _1642 = (1.0 - _1637) / (_1637 + 1.0);
        float _4237 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1643 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _1652 = ((((1.0 - _1643) * (_1638 + 2.0)) * exp2(log2(isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_1638 + 1.0))) + _1643) * _1608;
        float _1653 = _1576 * 0.5;
        float _1654 = _1586 * 0.5;
        float _1655 = _1596 * 0.5;
        float _1656 = dot(vec3(_1653, _1654, _1655), vec3(_1653, _1654, _1655));
        float _1661 = (_1656 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1656);
        float _1669 = (dot(vec3(_855, _856, _857), vec3(_1661 * _1653, _1661 * _1654, _1661 * _1655)) + 1.0) * 0.5;
        float _4248 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1678 = sqrt(((_1654 * _1654) + (_1653 * _1653)) + (_1655 * _1655)) / (_1609 + 9.9999997473787516355514526367188e-06);
        float _4259 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1679 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _1680 = _1679 * 2.0;
        float _1684 = (1.0 - _1679) / (_1679 + 1.0);
        float _4270 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1685 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _1694 = ((((1.0 - _1685) * (_1680 + 2.0)) * exp2(log2(isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (_1680 + 1.0))) + _1685) * _1609;
        float _1695 = _1577 * 0.5;
        float _1696 = _1587 * 0.5;
        float _1697 = _1597 * 0.5;
        float _1698 = dot(vec3(_1695, _1696, _1697), vec3(_1695, _1696, _1697));
        float _1703 = (_1698 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1698);
        float _1711 = (dot(vec3(_855, _856, _857), vec3(_1703 * _1695, _1703 * _1696, _1703 * _1697)) + 1.0) * 0.5;
        float _4281 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1720 = sqrt(((_1696 * _1696) + (_1695 * _1695)) + (_1697 * _1697)) / (_1610 + 9.9999997473787516355514526367188e-06);
        float _4292 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1721 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1722 = _1721 * 2.0;
        float _1726 = (1.0 - _1721) / (_1721 + 1.0);
        float _4303 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1727 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _1736 = ((((1.0 - _1727) * (_1722 + 2.0)) * exp2(log2(isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_1722 + 1.0))) + _1727) * _1610;
        _1744 = _1577;
        _1745 = _1576;
        _1746 = _1575;
        _1747 = _1587;
        _1748 = _1586;
        _1749 = _1585;
        _1750 = _1597;
        _1751 = _1596;
        _1752 = _1595;
        _1753 = _1610;
        _1754 = _1609;
        _1755 = _1608;
        _1756 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)));
        _1757 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)));
        _1758 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)));
    }
    else
    {
        _1744 = _1434;
        _1745 = _1434;
        _1746 = _1434;
        _1747 = _1434;
        _1748 = _1434;
        _1749 = _1434;
        _1750 = _1434;
        _1751 = _1434;
        _1752 = _1434;
        _1753 = _1434;
        _1754 = _1434;
        _1755 = _1434;
        _1756 = 0.0;
        _1757 = 0.0;
        _1758 = 0.0;
    }
    float _1768 = (cbModelParam._m0[1u].x * (_1756 - _1446)) + _1446;
    float _1769 = (cbModelParam._m0[1u].x * (_1757 - _1447)) + _1447;
    float _1770 = (cbModelParam._m0[1u].x * (_1758 - _1448)) + _1448;
    float _1791 = fma(_1770, cbSceneParam._m0[89u].z, fma(_1769, cbSceneParam._m0[89u].y, _1768 * cbSceneParam._m0[89u].x));
    float _1794 = fma(_1770, cbSceneParam._m0[90u].z, fma(_1769, cbSceneParam._m0[90u].y, _1768 * cbSceneParam._m0[90u].x));
    float _1797 = fma(_1770, cbSceneParam._m0[91u].z, fma(_1769, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1768));
    float _1812 = _1040 * 0.5;
    float _1813 = _1041 * 0.5;
    float _1814 = _1042 * 0.5;
    float _1815 = dot(vec4(_1812, _1813, _1814, 1.0), vec4(_1746, _1749, _1752, _1755));
    float _1818 = dot(vec4(_1812, _1813, _1814, 1.0), vec4(_1745, _1748, _1751, _1754));
    float _1821 = dot(vec4(_1812, _1813, _1814, 1.0), vec4(_1744, _1747, _1750, _1753));
    float _1855;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1828 = dot(vec4(_1812, _1813, _1814, 1.0), vec4(_1433, _1437, _1440, _1443));
        float _1832 = dot(vec4(_1812, _1813, _1814, 1.0), vec4(_1435, _1438, _1441, _1444));
        float _1836 = dot(vec4(_1812, _1813, _1814, 1.0), vec4(_1436, _1439, _1442, _1445));
        float _1843 = dot(vec4(cbModelParam._m0[39u]), vec4(_1812, _1813, _1814, 1.0));
        _1855 = dot(vec3(isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0)), isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0)), isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1843) ? 0.0 : (isnan(0.0) ? _1843 : max(0.0, _1843))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1855 = 1.0;
    }
    float _1866;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1857 = dot(vec4(cbModelParam._m0[40u]), vec4(_1812, _1813, _1814, 1.0));
        _1866 = dot(vec3(isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0)), isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0)), isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1857) ? 0.0 : (isnan(0.0) ? _1857 : max(0.0, _1857))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1866 = 1.0;
    }
    float _1870 = (_1866 * cbModelParam._m0[1u].x) + (_1855 * (1.0 - cbModelParam._m0[1u].x));
    float _1880 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _858);
    float _1881 = isnan(_1880) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1880 : min(cbModelParam._m0[25u].z, _1880));
    float _1963;
    float _1965;
    float _1967;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1930 = fma(_1104, cbModelParam._m0[13u].z, fma(_1100, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1096)) + cbModelParam._m0[13u].w;
        float _1934 = fma(_1104, cbModelParam._m0[14u].z, fma(_1100, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1096)) + cbModelParam._m0[14u].w;
        float _1938 = fma(_1104, cbModelParam._m0[15u].z, fma(_1100, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1096)) + cbModelParam._m0[15u].w;
        float _1941 = fma(_1042, cbModelParam._m0[13u].z, fma(_1041, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1040));
        float _1944 = fma(_1042, cbModelParam._m0[14u].z, fma(_1041, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1040));
        float _1947 = fma(_1042, cbModelParam._m0[15u].z, fma(_1041, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1040));
        float _1975;
        if (_1941 > 0.0)
        {
            _1975 = abs((1.0 - _1930) / _1941);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1941 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1930 + 1.0) / _1941);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1975 = frontier_phi_17_15_ladder;
        }
        float _2199;
        if (_1944 > 0.0)
        {
            _2199 = abs((1.0 - _1934) / _1944);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1944 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1934 + 1.0) / _1944);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2199 = frontier_phi_26_22_ladder;
        }
        float _2456;
        if (_1947 > 0.0)
        {
            _2456 = abs((1.0 - _1938) / _1947);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1947 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1938 + 1.0) / _1947);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2456 = frontier_phi_38_33_ladder;
        }
        float _2458 = isnan(_2199) ? _1975 : (isnan(_1975) ? _2199 : min(_1975, _2199));
        float _2459 = isnan(_2456) ? _2458 : (isnan(_2458) ? _2456 : min(_2458, _2456));
        float _2463 = (_2459 * _1941) + _1930;
        float _2464 = (_2459 * _1944) + _1934;
        float _2465 = (_2459 * _1947) + _1938;
        float _2466 = _2459 * 9.9999997473787516355514526367188e-05;
        float _2468 = (-1.0) - _2466;
        float _2470 = _2466 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2465 > _2470) || ((_2465 < _2468) || ((_2464 > _2470) || ((_2464 < _2468) || ((_2463 < _2468) || (_2463 > _2470))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2593 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2465, cbModelParam._m0[9u].z, fma(_2464, cbModelParam._m0[9u].y, _2463 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2465, cbModelParam._m0[10u].z, fma(_2464, cbModelParam._m0[10u].y, _2463 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2465, cbModelParam._m0[11u].z, fma(_2464, cbModelParam._m0[11u].y, _2463 * cbModelParam._m0[11u].x))), _1881);
            frontier_phi_16_38_ladder = _2593.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2593.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2593.x * cbModelParam._m0[1u].y;
        }
        _1963 = frontier_phi_16_38_ladder_2;
        _1965 = frontier_phi_16_38_ladder_1;
        _1967 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1951 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1040, _1041, _1042), _1881);
        _1963 = _1951.x * cbModelParam._m0[1u].y;
        _1965 = _1951.y * cbModelParam._m0[1u].y;
        _1967 = _1951.z * cbModelParam._m0[1u].y;
    }
    float _1971 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _858);
    float _1972 = isnan(_1971) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1971 : min(cbModelParam._m0[25u].w, _1971));
    float _2062;
    float _2064;
    float _2066;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2026 = fma(_1104, cbModelParam._m0[21u].z, fma(_1100, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1096)) + cbModelParam._m0[21u].w;
        float _2030 = fma(_1104, cbModelParam._m0[22u].z, fma(_1100, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1096)) + cbModelParam._m0[22u].w;
        float _2034 = fma(_1104, cbModelParam._m0[23u].z, fma(_1100, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1096)) + cbModelParam._m0[23u].w;
        float _2037 = fma(_1042, cbModelParam._m0[21u].z, fma(_1041, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1040));
        float _2040 = fma(_1042, cbModelParam._m0[22u].z, fma(_1041, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1040));
        float _2043 = fma(_1042, cbModelParam._m0[23u].z, fma(_1041, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1040));
        float _2204;
        if (_2037 > 0.0)
        {
            _2204 = abs((1.0 - _2026) / _2037);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2037 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2026 + 1.0) / _2037);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2204 = frontier_phi_28_24_ladder;
        }
        float _2483;
        if (_2040 > 0.0)
        {
            _2483 = abs((1.0 - _2030) / _2040);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2040 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2030 + 1.0) / _2040);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2483 = frontier_phi_40_35_ladder;
        }
        float _2696;
        if (_2043 > 0.0)
        {
            _2696 = abs((1.0 - _2034) / _2043);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2043 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2034 + 1.0) / _2043);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2696 = frontier_phi_49_46_ladder;
        }
        float _2698 = isnan(_2483) ? _2204 : (isnan(_2204) ? _2483 : min(_2204, _2483));
        float _2699 = isnan(_2696) ? _2698 : (isnan(_2698) ? _2696 : min(_2698, _2696));
        float _2703 = (_2699 * _2037) + _2026;
        float _2704 = (_2699 * _2040) + _2030;
        float _2705 = (_2699 * _2043) + _2034;
        float _2706 = _2699 * 9.9999997473787516355514526367188e-05;
        float _2707 = (-1.0) - _2706;
        float _2709 = _2706 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2705 > _2709) || ((_2705 < _2707) || ((_2704 > _2709) || ((_2704 < _2707) || ((_2703 < _2707) || (_2703 > _2709))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2904 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2705, cbModelParam._m0[17u].z, fma(_2704, cbModelParam._m0[17u].y, _2703 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2705, cbModelParam._m0[18u].z, fma(_2704, cbModelParam._m0[18u].y, _2703 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2705, cbModelParam._m0[19u].z, fma(_2704, cbModelParam._m0[19u].y, _2703 * cbModelParam._m0[19u].x))), _1972);
            frontier_phi_25_49_ladder = _2904.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2904.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2904.x * cbModelParam._m0[1u].z;
        }
        _2062 = frontier_phi_25_49_ladder_2;
        _2064 = frontier_phi_25_49_ladder_1;
        _2066 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2046 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1040, _1041, _1042), _1972);
        _2062 = _2046.x * cbModelParam._m0[1u].z;
        _2064 = _2046.y * cbModelParam._m0[1u].z;
        _2066 = _2046.z * cbModelParam._m0[1u].z;
    }
    float _2079 = (((_1067 * _1016) + _1068) * _1032) * ((cbModelParam._m0[1u].w * (_2062 - _1963)) + _1963);
    float _2081 = (((_1067 * _1018) + _1068) * _1032) * ((cbModelParam._m0[1u].w * (_2064 - _1965)) + _1965);
    float _2083 = (((_1067 * _1019) + _1068) * _1032) * ((cbModelParam._m0[1u].w * (_2066 - _1967)) + _1967);
    float _2086 = fma(_2083, cbSceneParam._m0[89u].z, fma(_2081, cbSceneParam._m0[89u].y, _2079 * cbSceneParam._m0[89u].x));
    float _2089 = fma(_2083, cbSceneParam._m0[90u].z, fma(_2081, cbSceneParam._m0[90u].y, _2079 * cbSceneParam._m0[90u].x));
    float _2092 = fma(_2083, cbSceneParam._m0[91u].z, fma(_2081, cbSceneParam._m0[91u].y, _2079 * cbSceneParam._m0[91u].x));
    vec4 _2100 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_954, _955));
    float _2102 = _2100.w;
    float _2114 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2102);
    float _2115 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2102);
    float _2116 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2102);
    uvec4 _2120 = floatBitsToUint(cbInstanceData._m0[_287 + 5u]);
    uint _2122 = _2120.x * 14u;
    uint _2123 = _2122 + 13u;
    float _2130 = _1032 + (-1.0);
    float _2135 = (cbLight._m0[_2123].x * _2130) + 1.0;
    float _2136 = (cbLight._m0[_2123].y * _2130) + 1.0;
    float _2137 = (cbLight._m0[_2123].z * _2130) + 1.0;
    float _2138 = (cbLight._m0[_2123].w * _2130) + 1.0;
    uint _2139 = _2122 + 5u;
    float _2145 = isnan(1.0) ? _2136 : (isnan(_2136) ? 1.0 : min(_2136, 1.0));
    uint _2149 = _2122 + 4u;
    float _2158 = isnan(1.0) ? _2135 : (isnan(_2135) ? 1.0 : min(_2135, 1.0));
    uint _2162 = _2122 | 1u;
    float _2173 = dot(vec3(cbLight._m0[_2122].xyz), vec3(_855, _856, _857));
    float _2176 = dot(vec3(cbLight._m0[_2162].xyz), vec3(_855, _856, _857));
    float _4439 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _4450 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2181 = (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * 0.3183098733425140380859375;
    float _2183 = (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * 0.3183098733425140380859375;
    float _2190 = ((cbLight._m0[_2139].x * _2145) * _2183) + (((cbLight._m0[_2149].x * _2114) * _2158) * _2181);
    float _2191 = ((_2145 * cbLight._m0[_2139].y) * _2183) + (((cbLight._m0[_2149].y * _2115) * _2158) * _2181);
    float _2192 = ((_2145 * cbLight._m0[_2139].z) * _2183) + (((cbLight._m0[_2149].z * _2116) * _2158) * _2181);
    uvec4 _2196 = floatBitsToUint(cbLight._m0[_2122 + 12u]);
    bool _2198 = _2196.x == 0u;
    float _2209;
    float _2211;
    float _2213;
    if (_2198)
    {
        _2209 = _2190;
        _2211 = _2191;
        _2213 = _2192;
    }
    else
    {
        uint _2217 = _2122 + 6u;
        float _2233 = (dot(vec3(cbLight._m0[_2122 + 2u].xyz), vec3(_855, _856, _857)) * 0.5) + 0.5;
        float _2234 = _2233 * _2233;
        float _4461 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2235 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _2236 = isnan(1.0) ? _2137 : (isnan(_2137) ? 1.0 : min(_2137, 1.0));
        _2209 = (((cbLight._m0[_2217].x * 0.3183098733425140380859375) * _2235) * _2236) + _2190;
        _2211 = (((cbLight._m0[_2217].y * 0.3183098733425140380859375) * _2235) * _2236) + _2191;
        _2213 = (((cbLight._m0[_2217].z * 0.3183098733425140380859375) * _2235) * _2236) + _2192;
    }
    bool _2216 = _2196.y == 0u;
    float _2254;
    float _2256;
    float _2258;
    if (_2216)
    {
        _2254 = _2209;
        _2256 = _2211;
        _2258 = _2213;
    }
    else
    {
        uint _2427 = _2122 + 7u;
        float _2443 = (dot(vec3(cbLight._m0[_2122 + 3u].xyz), vec3(_855, _856, _857)) * 0.5) + 0.5;
        float _2444 = _2443 * _2443;
        float _4477 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2445 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _2446 = isnan(1.0) ? _2138 : (isnan(_2138) ? 1.0 : min(_2138, 1.0));
        _2254 = (((cbLight._m0[_2427].x * 0.3183098733425140380859375) * _2445) * _2446) + _2209;
        _2256 = (((cbLight._m0[_2427].y * 0.3183098733425140380859375) * _2445) * _2446) + _2211;
        _2258 = (((cbLight._m0[_2427].z * 0.3183098733425140380859375) * _2445) * _2446) + _2213;
    }
    uint _2261 = _2122 + 8u;
    float _2274 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2122].w)) * _858) * 0.949999988079071044921875);
    float _2275 = _2274 * _2274;
    float _2276 = cbLight._m0[_2122].x + _934;
    float _2277 = cbLight._m0[_2122].y + _935;
    float _2278 = cbLight._m0[_2122].z + _936;
    float _2282 = inversesqrt(dot(vec3(_2276, _2277, _2278), vec3(_2276, _2277, _2278)));
    float _2283 = _2282 * _2276;
    float _2284 = _2282 * _2277;
    float _2285 = _2282 * _2278;
    float _2286 = dot(vec3(_855, _856, _857), vec3(cbLight._m0[_2122].xyz));
    float _4493 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2289 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
    float _4504 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _2290 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
    float _2291 = dot(vec3(_855, _856, _857), vec3(_2283, _2284, _2285));
    float _4515 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2294 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
    float _2295 = dot(vec3(cbLight._m0[_2122].xyz), vec3(_2283, _2284, _2285));
    float _4526 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2299 = _2275 * _2275;
    float _2303 = ((_2294 * _2294) * (_2299 + (-1.0))) + 1.0;
    float _2311 = exp2(log2(1.0 - (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0)))) * 5.0);
    float _2312 = 0.959999978542327880859375 - _1013;
    float _2314 = 0.959999978542327880859375 - _1014;
    float _2315 = 0.959999978542327880859375 - _1015;
    float _2322 = 1.0 - _2275;
    float _2333 = (0.5 / (((_2290 * ((_2289 * _2322) + _2275)) + 9.9999999392252902907785028219223e-09) + (((_2290 * _2322) + _2275) * _2289))) * _2289;
    float _4537 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2335 = (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0))) * (_2299 / ((_2303 * _2303) * 3.141590118408203125));
    uint _2349 = _2122 + 9u;
    float _2360 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2162].w)) * _858) * 0.949999988079071044921875);
    float _2361 = _2360 * _2360;
    float _2362 = cbLight._m0[_2162].x + _934;
    float _2363 = cbLight._m0[_2162].y + _935;
    float _2364 = cbLight._m0[_2162].z + _936;
    float _2368 = inversesqrt(dot(vec3(_2362, _2363, _2364), vec3(_2362, _2363, _2364)));
    float _2369 = _2368 * _2362;
    float _2370 = _2368 * _2363;
    float _2371 = _2368 * _2364;
    float _2372 = dot(vec3(_855, _856, _857), vec3(cbLight._m0[_2162].xyz));
    float _4548 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
    float _2375 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
    float _2376 = dot(vec3(_855, _856, _857), vec3(_2369, _2370, _2371));
    float _4559 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
    float _2379 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
    float _2380 = dot(vec3(cbLight._m0[_2162].xyz), vec3(_2369, _2370, _2371));
    float _4570 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2384 = _2361 * _2361;
    float _2388 = ((_2379 * _2379) * (_2384 + (-1.0))) + 1.0;
    float _2395 = exp2(log2(1.0 - (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0)))) * 5.0);
    float _2402 = 1.0 - _2361;
    float _2412 = (0.5 / (((_2290 * ((_2375 * _2402) + _2361)) + 9.9999999392252902907785028219223e-09) + (((_2290 * _2402) + _2361) * _2375))) * _2375;
    float _4581 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _2414 = (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * (_2384 / ((_2388 * _2388) * 3.141590118408203125));
    float _2424 = (((((_2395 * _2312) + _1016) * cbLight._m0[_2349].x) * _2414) * _2145) + ((((cbLight._m0[_2261].x * _2114) * ((_2311 * _2312) + _1016)) * _2335) * _2158);
    float _2425 = (((((_2395 * _2314) + _1018) * cbLight._m0[_2349].y) * _2414) * _2145) + ((((cbLight._m0[_2261].y * _2115) * ((_2311 * _2314) + _1018)) * _2335) * _2158);
    float _2426 = (((((_2395 * _2315) + _1019) * cbLight._m0[_2349].z) * _2414) * _2145) + ((((cbLight._m0[_2261].z * _2116) * ((_2311 * _2315) + _1019)) * _2335) * _2158);
    float _2488;
    float _2490;
    float _2492;
    if (_2198)
    {
        _2488 = _2424;
        _2490 = _2425;
        _2492 = _2426;
    }
    else
    {
        uint _2494 = _2122 + 2u;
        uint _2498 = _2122 + 10u;
        float _2512 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2494].w)) * _858) * 0.949999988079071044921875);
        float _2513 = _2512 * _2512;
        float _2514 = cbLight._m0[_2494].x + _934;
        float _2515 = cbLight._m0[_2494].y + _935;
        float _2516 = cbLight._m0[_2494].z + _936;
        float _2520 = inversesqrt(dot(vec3(_2514, _2515, _2516), vec3(_2514, _2515, _2516)));
        float _2521 = _2520 * _2514;
        float _2522 = _2520 * _2515;
        float _2523 = _2520 * _2516;
        float _2524 = dot(vec3(_855, _856, _857), vec3(cbLight._m0[_2494].xyz));
        float _4592 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2527 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
        float _2528 = dot(vec3(_855, _856, _857), vec3(_2521, _2522, _2523));
        float _4603 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        float _2531 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
        float _2532 = dot(vec3(cbLight._m0[_2494].xyz), vec3(_2521, _2522, _2523));
        float _4614 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
        float _2536 = _2513 * _2513;
        float _2540 = ((_2531 * _2531) * (_2536 + (-1.0))) + 1.0;
        float _2547 = exp2(log2(1.0 - (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0)))) * 5.0);
        float _2554 = 1.0 - _2513;
        float _2564 = (0.5 / (((_2290 * ((_2527 * _2554) + _2513)) + 9.9999999392252902907785028219223e-09) + (((_2290 * _2554) + _2513) * _2527))) * _2527;
        float _4625 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2566 = (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (_2536 / ((_2540 * _2540) * 3.141590118408203125));
        float _2567 = isnan(1.0) ? _2137 : (isnan(_2137) ? 1.0 : min(_2137, 1.0));
        _2488 = (((((_2547 * _2312) + _1016) * cbLight._m0[_2498].x) * _2566) * _2567) + _2424;
        _2490 = (((((_2547 * _2314) + _1018) * cbLight._m0[_2498].y) * _2566) * _2567) + _2425;
        _2492 = (((((_2547 * _2315) + _1019) * cbLight._m0[_2498].z) * _2566) * _2567) + _2426;
    }
    float _2602;
    float _2604;
    float _2606;
    if (_2216)
    {
        _2602 = _2488;
        _2604 = _2490;
        _2606 = _2492;
    }
    else
    {
        uint _2613 = _2122 + 3u;
        uint _2617 = _2122 + 11u;
        float _2631 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2613].w)) * _858) * 0.949999988079071044921875);
        float _2632 = _2631 * _2631;
        float _2633 = cbLight._m0[_2613].x + _934;
        float _2634 = cbLight._m0[_2613].y + _935;
        float _2635 = cbLight._m0[_2613].z + _936;
        float _2639 = inversesqrt(dot(vec3(_2633, _2634, _2635), vec3(_2633, _2634, _2635)));
        float _2640 = _2639 * _2633;
        float _2641 = _2639 * _2634;
        float _2642 = _2639 * _2635;
        float _2643 = dot(vec3(_855, _856, _857), vec3(cbLight._m0[_2613].xyz));
        float _4641 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        float _2646 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
        float _2647 = dot(vec3(_855, _856, _857), vec3(_2640, _2641, _2642));
        float _4652 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
        float _2650 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
        float _2651 = dot(vec3(cbLight._m0[_2613].xyz), vec3(_2640, _2641, _2642));
        float _4663 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
        float _2655 = _2632 * _2632;
        float _2659 = ((_2650 * _2650) * (_2655 + (-1.0))) + 1.0;
        float _2666 = exp2(log2(1.0 - (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0)))) * 5.0);
        float _2673 = 1.0 - _2632;
        float _2683 = (0.5 / (((_2290 * ((_2646 * _2673) + _2632)) + 9.9999999392252902907785028219223e-09) + (((_2290 * _2673) + _2632) * _2646))) * _2646;
        float _4674 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
        float _2685 = (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * (_2655 / ((_2659 * _2659) * 3.141590118408203125));
        float _2686 = isnan(1.0) ? _2138 : (isnan(_2138) ? 1.0 : min(_2138, 1.0));
        _2602 = (((((_2666 * _2312) + _1016) * cbLight._m0[_2617].x) * _2685) * _2686) + _2488;
        _2604 = (((((_2666 * _2314) + _1018) * cbLight._m0[_2617].y) * _2685) * _2686) + _2490;
        _2606 = (((((_2666 * _2315) + _1019) * cbLight._m0[_2617].z) * _2685) * _2686) + _2492;
    }
    float _2821;
    float _2823;
    float _2825;
    float _2827;
    float _2829;
    float _2831;
    if (_2120.y == 0u)
    {
        float _2761 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2762 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2761;
        float _2763 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2761;
        float _2764 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2761;
        uvec4 _2776 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2777 = _2776.x;
        uint _2788 = uint((float(_2776.y) * floor(float(uint(cbSceneParam._m0[85u].y * _955) / _2777))) + floor(float(uint(cbSceneParam._m0[85u].x * _954) / _2777)));
        float _2798 = (log2(_2764 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2799 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
        uint _2802 = uint(isnan(14.0) ? _2799 : (isnan(_2799) ? 14.0 : min(_2799, 14.0)));
        uvec4 _2807 = texelFetch(g_lightClusterGridBuffer, int(((_2802 << 2u) + (_2788 << 6u)) >> 2u));
        uint _2808 = _2807.x;
        uint _2809 = _2776.z;
        float _2909;
        float _2911;
        float _2913;
        float _2915;
        float _2917;
        float _2919;
        if (((((1u << ((_2809 >> 4u) & 15u)) + 4294967295u) & _2808) == 0u) || ((_2809 & 240u) == 0u))
        {
            _2909 = 0.0;
            _2911 = 0.0;
            _2913 = 0.0;
            _2915 = 0.0;
            _2917 = 0.0;
            _2919 = 0.0;
        }
        else
        {
            float _2910;
            float _2912;
            float _2914;
            float _2916;
            float _2918;
            float _2920;
            float _3062 = 0.0;
            float _3063 = 0.0;
            float _3064 = 0.0;
            float _3065 = 0.0;
            float _3066 = 0.0;
            float _3067 = 0.0;
            uint _3068 = 0u;
            uint _3077;
            bool _3078;
            for (;;)
            {
                _3077 = texelFetch(g_lightClassification, int((((_2802 << 5u) + (_2788 << 9u)) + (_3068 << 2u)) >> 2u)).x;
                _3078 = _3077 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3078)
                {
                    frontier_phi_66_pred = _3062;
                    frontier_phi_66_pred_1 = _3067;
                    frontier_phi_66_pred_2 = _3066;
                    frontier_phi_66_pred_3 = _3065;
                    frontier_phi_66_pred_4 = _3064;
                    frontier_phi_66_pred_5 = _3063;
                }
                else
                {
                    float _3207;
                    float _3208;
                    float _3209;
                    float _3210;
                    float _3211;
                    float _3212;
                    uint _3213;
                    _3207 = _3062;
                    _3208 = _3063;
                    _3209 = _3064;
                    _3210 = _3065;
                    _3211 = _3066;
                    _3212 = _3067;
                    _3213 = _3077;
                    float _3134;
                    float _3135;
                    float _3136;
                    float _3137;
                    float _3138;
                    float _3139;
                    for (;;)
                    {
                        uint _3217 = uint(findLSB(_3213)) + (_3068 << 5u);
                        uint _3214 = (_3213 + 4294967295u) & _3213;
                        uint _3219 = _3217 * 48u;
                        vec4 _3233 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3219)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 3u)).x));
                        uint _3239 = (_3217 * 48u) + 4u;
                        vec4 _3252 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3239)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 3u)).x));
                        uint _3258 = (_3217 * 48u) + 8u;
                        vec3 _3269 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3258)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 2u)).x));
                        float _3273 = _3233.x - _2762;
                        float _3274 = _3233.y - _2763;
                        float _3275 = _3233.z - _2764;
                        float _3276 = dot(vec3(_3273, _3274, _3275), vec3(_3273, _3274, _3275));
                        float _3279 = inversesqrt(_3276);
                        float _3280 = _3279 * _3273;
                        float _3281 = _3279 * _3274;
                        float _3282 = _3279 * _3275;
                        float _3283 = dot(vec3(_973, _976, _979), vec3(_3280, _3281, _3282));
                        float _3288 = 1.0 - (_3276 * _3233.w);
                        float _4700 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                        float _3289 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                        float _3290 = sqrt(_3276) * _3252.w;
                        float _3293 = 1.39999997615814208984375 / (_3290 + 1.39999997615814208984375);
                        float _3294 = _3293 * _3293;
                        float _3297 = ((1.0 - _3294) * _3283) + _3294;
                        float _3300 = _3290 * _3290;
                        float _3304 = ((isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0))) * _3289) / ((_3300 * 0.699999988079071044921875) + 1.0);
                        float _3308 = (-0.0) - _2762;
                        float _3309 = (-0.0) - _2763;
                        float _3310 = (-0.0) - _2764;
                        float _3314 = inversesqrt(dot(vec3(_3308, _3309, _3310), vec3(_3308, _3309, _3310)));
                        float _3315 = _3314 * _3308;
                        float _3316 = _3314 * _3309;
                        float _3317 = _3314 * _3310;
                        float _3325 = exp2(log2(1.0 / ((_3300 * 3.5) + 5.0)) * 0.25);
                        float _3326 = 1.0 - _1048;
                        float _3333 = sqrt(1.0 - ((1.0 - (_3326 * _3326)) * (1.0 - (_3325 * _3325))));
                        float _3334 = _3333 * _3333;
                        float _3335 = _3334 * _3334;
                        float _3336 = _3315 + _3280;
                        float _3337 = _3316 + _3281;
                        float _3338 = _3317 + _3282;
                        float _3342 = inversesqrt(dot(vec3(_3336, _3337, _3338), vec3(_3336, _3337, _3338)));
                        float _3346 = dot(vec3(_973, _976, _979), vec3(_3315, _3316, _3317));
                        float _4716 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                        float _3349 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
                        float _3350 = dot(vec3(_973, _976, _979), vec3(_3342 * _3336, _3342 * _3337, _3342 * _3338));
                        float _4727 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                        float _3353 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
                        float _3357 = ((_3353 * _3353) * (_3335 + (-1.0))) + 1.0;
                        float _3358 = _3293 * _3334;
                        float _3359 = _3358 * _3358;
                        float _3362 = ((1.0 - _3359) * _3283) + _3359;
                        float _4738 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                        float _3363 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                        float _3364 = 1.0 - _3334;
                        float _3374 = (0.5 / (((_3363 * ((_3349 * _3364) + _3334)) + 9.9999999392252902907785028219223e-09) + (((_3363 * _3364) + _3334) * _3349))) * _3363;
                        float _4749 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                        float _3385 = (((_3335 * 3.1415927410125732421875) * (isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0)))) / ((_3357 * _3357) * ((_3300 * 2.1991131305694580078125) + 3.141590118408203125))) * _3289;
                        _3137 = (_3304 * _3252.x) + _3210;
                        _3138 = (_3304 * _3252.y) + _3211;
                        _3139 = (_3304 * _3252.z) + _3212;
                        _3134 = (_3385 * _3269.x) + _3207;
                        _3135 = (_3385 * _3269.y) + _3208;
                        _3136 = (_3385 * _3269.z) + _3209;
                        if (_3214 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3207 = _3134;
                            _3208 = _3135;
                            _3209 = _3136;
                            _3210 = _3137;
                            _3211 = _3138;
                            _3212 = _3139;
                            _3213 = _3214;
                        }
                    }
                    frontier_phi_66_pred = _3134;
                    frontier_phi_66_pred_1 = _3139;
                    frontier_phi_66_pred_2 = _3138;
                    frontier_phi_66_pred_3 = _3137;
                    frontier_phi_66_pred_4 = _3136;
                    frontier_phi_66_pred_5 = _3135;
                }
                _2910 = frontier_phi_66_pred;
                _2920 = frontier_phi_66_pred_1;
                _2918 = frontier_phi_66_pred_2;
                _2916 = frontier_phi_66_pred_3;
                _2914 = frontier_phi_66_pred_4;
                _2912 = frontier_phi_66_pred_5;
                uint _3069 = _3068 + 1u;
                if (_3069 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3062 = _2910;
                    _3063 = _2912;
                    _3064 = _2914;
                    _3065 = _2916;
                    _3066 = _2918;
                    _3067 = _2920;
                    _3068 = _3069;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2909 = _2910;
            _2911 = _2912;
            _2913 = _2914;
            _2915 = _2916;
            _2917 = _2918;
            _2919 = _2920;
        }
        uvec4 _2923 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2924 = _2923.z;
        uint _2926 = (_2924 >> 8u) & 15u;
        float _3030;
        float _3032;
        float _3034;
        float _3036;
        float _3038;
        float _3040;
        if (((4294967295u << _2926) & _2808) == 0u)
        {
            _3030 = _2909;
            _3032 = _2911;
            _3034 = _2913;
            _3036 = _2915;
            _3038 = _2917;
            _3040 = _2919;
        }
        else
        {
            float _3055 = inversesqrt(dot(vec3(_2762, _2763, _2764), vec3(_2762, _2763, _2764)));
            float _3056 = _3055 * _2762;
            float _3057 = _3055 * _2763;
            float _3058 = _3055 * _2764;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2926 < ((_2924 >> 12u) & 15u))
            {
                float _3031;
                float _3033;
                float _3035;
                float _3037;
                float _3039;
                float _3041;
                float _3190 = _2909;
                float _3191 = _2911;
                float _3192 = _2913;
                float _3193 = _2915;
                float _3194 = _2917;
                float _3195 = _2919;
                uint _3196 = _2926;
                uint _3205;
                bool _3206;
                for (;;)
                {
                    _3205 = texelFetch(g_lightClassification, int((((_2802 << 5u) + (_2788 << 9u)) + (_3196 << 2u)) >> 2u)).x;
                    _3206 = _3205 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3206)
                    {
                        frontier_phi_77_pred = _3195;
                        frontier_phi_77_pred_1 = _3194;
                        frontier_phi_77_pred_2 = _3193;
                        frontier_phi_77_pred_3 = _3192;
                        frontier_phi_77_pred_4 = _3191;
                        frontier_phi_77_pred_5 = _3190;
                    }
                    else
                    {
                        float _3399;
                        float _3400;
                        float _3401;
                        float _3402;
                        float _3403;
                        float _3404;
                        float _3692;
                        float _3693;
                        float _3694;
                        float _3695;
                        float _3696;
                        float _3697;
                        float _3412 = _3190;
                        float _3413 = _3191;
                        float _3414 = _3192;
                        float _3415 = _3193;
                        float _3416 = _3194;
                        float _3417 = _3195;
                        uint _3418 = _3205;
                        uint _3419;
                        vec4 _3444;
                        float _3445;
                        vec4 _3460;
                        vec3 _3472;
                        vec4 _3487;
                        vec4 _3502;
                        float _3548;
                        bool _3549;
                        for (;;)
                        {
                            uint _3429 = ((_3196 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3418));
                            _3419 = (_3418 + 4294967295u) & _3418;
                            uint _3431 = _3429 * 40u;
                            _3444 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3431)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 3u)).x));
                            _3445 = _3444.w;
                            uint _3447 = (_3429 * 40u) + 4u;
                            _3460 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3447)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 3u)).x));
                            uint _3462 = (_3429 * 40u) + 8u;
                            _3472 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3462)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 2u)).x));
                            uint _3474 = (_3429 * 40u) + 16u;
                            _3487 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3474)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 3u)).x));
                            uint _3489 = (_3429 * 40u) + 20u;
                            _3502 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3489)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 3u)).x));
                            uint _3504 = (_3429 * 40u) + 24u;
                            vec4 _3517 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3504)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 3u)).x));
                            uint _3523 = (_3429 * 40u) + 28u;
                            vec4 _3536 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3523)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 3u)).x));
                            _3548 = fma(_2764, _3536.z, fma(_2763, _3536.y, _3536.x * _2762)) + _3536.w;
                            _3549 = !((fma(_2764, _3517.z, fma(_2763, _3517.y, _3517.x * _2762)) + _3517.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3549)
                            {
                                float _3576 = _3444.x - _2762;
                                float _3577 = _3444.y - _2763;
                                float _3578 = _3444.z - _2764;
                                float _3579 = dot(vec3(_3576, _3577, _3578), vec3(_3576, _3577, _3578));
                                float _3582 = inversesqrt(_3579);
                                float _3583 = _3582 * _3576;
                                float _3584 = _3582 * _3577;
                                float _3585 = _3582 * _3578;
                                float _3589 = 1.0 - (_3579 / (_3445 * _3445));
                                float _4760 = isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0));
                                float _3590 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                                float _3594 = sqrt(_3579) * _3460.w;
                                float _3596 = 1.39999997615814208984375 / (_3594 + 1.39999997615814208984375);
                                float _3597 = _3596 * _3596;
                                float _3600 = ((1.0 - _3597) * dot(vec3(_3583, _3584, _3585), vec3(_973, _976, _979))) + _3597;
                                float _3603 = _3594 * _3594;
                                float _3607 = (fma(_2764, _3487.z, fma(_2763, _3487.y, _3487.x * _2762)) + _3487.w) / _3548;
                                float _3608 = (fma(_2764, _3502.z, fma(_2763, _3502.y, _3502.x * _2762)) + _3502.w) / _3548;
                                float _3612 = 1.0 - dot(vec2(_3607, _3608), vec2(_3607, _3608));
                                float _4776 = isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0));
                                float _3613 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
                                float _3614 = _3613 * (((isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0))) * _3590) / ((_3603 * 0.699999988079071044921875) + 1.0));
                                float _3626 = exp2(log2(1.0 / ((_3603 * 3.5) + 5.0)) * 0.25);
                                float _3627 = 1.0 - _1048;
                                float _3634 = sqrt(1.0 - ((1.0 - (_3627 * _3627)) * (1.0 - (_3626 * _3626))));
                                float _3635 = _3634 * _3634;
                                float _3636 = _3635 * _3635;
                                float _3637 = _3583 - _3056;
                                float _3638 = _3584 - _3057;
                                float _3639 = _3585 - _3058;
                                float _3643 = inversesqrt(dot(vec3(_3637, _3638, _3639), vec3(_3637, _3638, _3639)));
                                float _3647 = dot(vec3(_973, _976, _979), vec3((-0.0) - _3056, (-0.0) - _3057, (-0.0) - _3058));
                                float _4787 = isnan(0.0) ? _3647 : (isnan(_3647) ? 0.0 : max(_3647, 0.0));
                                float _3650 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
                                float _3651 = dot(vec3(_973, _976, _979), vec3(_3643 * _3637, _3643 * _3638, _3643 * _3639));
                                float _4798 = isnan(0.0) ? _3651 : (isnan(_3651) ? 0.0 : max(_3651, 0.0));
                                float _3654 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                                float _3658 = ((_3654 * _3654) * (_3636 + (-1.0))) + 1.0;
                                float _3659 = _3596 * _3635;
                                float _3660 = _3659 * _3659;
                                float _3666 = ((1.0 - _3660) * dot(vec3(_973, _976, _979), vec3(_3583, _3584, _3585))) + _3660;
                                float _4809 = isnan(0.0) ? _3666 : (isnan(_3666) ? 0.0 : max(_3666, 0.0));
                                float _3667 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
                                float _3668 = 1.0 - _3635;
                                float _3678 = (0.5 / (((_3667 * ((_3650 * _3668) + _3635)) + 9.9999999392252902907785028219223e-09) + (((_3667 * _3668) + _3635) * _3650))) * _3667;
                                float _4820 = isnan(0.0) ? _3678 : (isnan(_3678) ? 0.0 : max(_3678, 0.0));
                                float _3688 = (_3613 * _3590) * (((_3636 * 3.1415927410125732421875) * (isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0)))) / ((_3658 * _3658) * ((_3603 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3614 * _3460.y;
                                frontier_phi_83_pred_1 = _3614 * _3460.x;
                                frontier_phi_83_pred_2 = _3688 * _3472.z;
                                frontier_phi_83_pred_3 = _3688 * _3472.y;
                                frontier_phi_83_pred_4 = _3688 * _3472.x;
                                frontier_phi_83_pred_5 = _3614 * _3460.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3696 = frontier_phi_83_pred;
                            _3695 = frontier_phi_83_pred_1;
                            _3694 = frontier_phi_83_pred_2;
                            _3693 = frontier_phi_83_pred_3;
                            _3692 = frontier_phi_83_pred_4;
                            _3697 = frontier_phi_83_pred_5;
                            _3402 = _3695 + _3415;
                            _3403 = _3696 + _3416;
                            _3404 = _3697 + _3417;
                            _3399 = _3692 + _3412;
                            _3400 = _3693 + _3413;
                            _3401 = _3694 + _3414;
                            if (_3419 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3412 = _3399;
                                _3413 = _3400;
                                _3414 = _3401;
                                _3415 = _3402;
                                _3416 = _3403;
                                _3417 = _3404;
                                _3418 = _3419;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3404;
                        frontier_phi_77_pred_1 = _3403;
                        frontier_phi_77_pred_2 = _3402;
                        frontier_phi_77_pred_3 = _3401;
                        frontier_phi_77_pred_4 = _3400;
                        frontier_phi_77_pred_5 = _3399;
                    }
                    _3041 = frontier_phi_77_pred;
                    _3039 = frontier_phi_77_pred_1;
                    _3037 = frontier_phi_77_pred_2;
                    _3035 = frontier_phi_77_pred_3;
                    _3033 = frontier_phi_77_pred_4;
                    _3031 = frontier_phi_77_pred_5;
                    uint _3197 = _3196 + 1u;
                    if (_3197 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3190 = _3031;
                        _3191 = _3033;
                        _3192 = _3035;
                        _3193 = _3037;
                        _3194 = _3039;
                        _3195 = _3041;
                        _3196 = _3197;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3035;
                frontier_phi_58_59_ladder_1 = _3041;
                frontier_phi_58_59_ladder_2 = _3039;
                frontier_phi_58_59_ladder_3 = _3037;
                frontier_phi_58_59_ladder_4 = _3033;
                frontier_phi_58_59_ladder_5 = _3031;
            }
            else
            {
                frontier_phi_58_59_ladder = _2913;
                frontier_phi_58_59_ladder_1 = _2919;
                frontier_phi_58_59_ladder_2 = _2917;
                frontier_phi_58_59_ladder_3 = _2915;
                frontier_phi_58_59_ladder_4 = _2911;
                frontier_phi_58_59_ladder_5 = _2909;
            }
            _3030 = frontier_phi_58_59_ladder_5;
            _3032 = frontier_phi_58_59_ladder_4;
            _3034 = frontier_phi_58_59_ladder;
            _3036 = frontier_phi_58_59_ladder_3;
            _3038 = frontier_phi_58_59_ladder_2;
            _3040 = frontier_phi_58_59_ladder_1;
        }
        float _3045 = isnan(1.0) ? _1032 : (isnan(_1032) ? 1.0 : min(_1032, 1.0));
        _2821 = (_3045 * _3036) + _2254;
        _2823 = (_3045 * _3038) + _2256;
        _2825 = (_3045 * _3040) + _2258;
        _2827 = ((_3030 * _1016) * _3045) + _2602;
        _2829 = ((_3032 * _1018) * _3045) + _2604;
        _2831 = ((_3034 * _1019) * _3045) + _2606;
    }
    else
    {
        _2821 = _2254;
        _2823 = _2256;
        _2825 = _2258;
        _2827 = _2602;
        _2829 = _2604;
        _2831 = _2606;
    }
    float _4836 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _4847 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _4858 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _2848 = ((isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0))) * (_2821 + ((isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))) * _1032))) + ((_2827 + ((isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0))) * _1870)) * cbPerFrame._m0[3u].x);
    float _2849 = ((isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0))) * (_2823 + ((isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0))) * _1032))) + ((_2829 + ((isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0))) * _1870)) * cbPerFrame._m0[3u].x);
    float _2850 = ((isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0))) * (_2825 + ((isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))) * _1032))) + ((_2831 + ((isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0))) * _1870)) * cbPerFrame._m0[3u].x);
    uint _2851 = _287 + 6u;
    float _2859 = _954 / cbSceneParam._m0[86u].x;
    float _2860 = _955 / cbSceneParam._m0[86u].y;
    vec4 _2874 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2859, _2860, (log2((isnan(cbSceneParam._m0[77u].w) ? _877 : (isnan(_877) ? cbSceneParam._m0[77u].w : min(_877, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2876 = _2874.x;
    float _2877 = _2874.y;
    float _2878 = _2874.z;
    float _2879 = _2874.w;
    float _2972;
    float _2974;
    float _2976;
    float _2978;
    if (_877 > cbSceneParam._m0[78u].w)
    {
        float _2934 = isnan(_877) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _877 : min(cbSceneParam._m0[80u].w, _877));
        float _2935 = _2934 / _877;
        float _2946 = _2935 * _927;
        float _2947 = _928 * _2935;
        float _2948 = (-0.0) - _2947;
        float _2950 = _2935 * _929;
        float _2952 = (cbSceneParam._m0[77u].w * _2948) / _2934;
        float _2953 = _2952 + cbSceneParam._m0[79u].w;
        float _2954 = cbSceneParam._m0[79u].w - _2947;
        float _2960 = sqrt(((_2946 * _2946) + (_2947 * _2947)) + (_2950 * _2950));
        float _2963 = (1.0 - (cbSceneParam._m0[77u].w / _2934)) * _2960;
        float _2968 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2970 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3147;
        if (abs((_2948 - _2952) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3147 = ((((_2953 > 0.0) ? exp2(_2968 * _2953) : (2.0 - exp2(_2970 * _2953))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2963;
        }
        else
        {
            float _3091 = 1.0 / cbSceneParam._m0[80u].x;
            float _3092 = isnan(_2954) ? _2953 : (isnan(_2953) ? _2954 : max(_2953, _2954));
            float _3093 = isnan(_2954) ? _2953 : (isnan(_2953) ? _2954 : min(_2953, _2954));
            float _3102 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : min(_3092, 0.0));
            float _3103 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : min(_3093, 0.0));
            _3147 = ((abs(_2960 / _2948) * cbSceneParam._m0[80u].y) * ((((_3102 - _3103) * 2.0) - ((exp2(_2968 * (isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0)))) - exp2(_2968 * (isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0))))) * _3091)) - ((exp2(_2970 * _3102) - exp2(_2970 * _3103)) * _3091))) + (_2963 * cbSceneParam._m0[80u].z);
        }
        vec4 _3149 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2859, _2860, 1.0), 0.0);
        float _3158 = exp2((_3147 * (-1.44269502162933349609375)) * (1.0 - _3149.w));
        float _3159 = log2(_3158);
        float _3175 = log2(_2879);
        _2972 = (exp2(_3175 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3159 * cbSceneParam._m0[78u].x)) * _3149.x) / cbSceneParam._m0[78u].x)) + _2876;
        _2974 = (exp2(_3175 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3159 * cbSceneParam._m0[78u].y)) * _3149.y) / cbSceneParam._m0[78u].y)) + _2877;
        _2976 = (exp2(_3175 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3159 * cbSceneParam._m0[78u].z)) * _3149.z) / cbSceneParam._m0[78u].z)) + _2878;
        _2978 = _3158 * _2879;
    }
    else
    {
        _2972 = _2876;
        _2974 = _2877;
        _2976 = _2878;
        _2978 = _2879;
    }
    bool _3185;
    vec4 _2988;
    vec4 _3010;
    float _3012;
    float _3016;
    float _3017;
    float _3018;
    float _3019;
    bool _3029;
    for (;;)
    {
        _2988 = cbMatDynParam._m0[0u];
        float _2990 = roundEven(_2988.y);
        bool _2991 = _2990 == 3.0;
        float _2992 = log2(_2978);
        float _2999 = exp2(_2992 * cbSceneParam._m0[78u].x) * _2848;
        float _3000 = exp2(_2992 * cbSceneParam._m0[78u].y) * _2849;
        float _3001 = exp2(_2992 * cbSceneParam._m0[78u].z) * _2850;
        float _3008 = _943 + (-0.5);
        _3010 = cbMtdParam._m0[1u];
        _3012 = _3010.y * _3008;
        float _3015 = (_2990 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3016 = _3015 * (_2991 ? _2999 : (_2999 + (cbSceneParam._m0[72u].w * _2972)));
        _3017 = _3015 * (_2991 ? _3000 : (_3000 + (cbSceneParam._m0[72u].w * _2974)));
        _3018 = _3015 * (_2991 ? _3001 : (_3001 + (cbSceneParam._m0[72u].w * _2976)));
        _3019 = _3008 * 0.999000012874603271484375;
        _3029 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3029)
        {
            if ((cbInstanceData._m0[_287 + 7u].x + _3019) < 0.5)
            {
                _3185 = true;
                break;
            }
        }
        uint _3126 = _992 + uint(_2988.w);
        if ((cbInstanceData._m0[_3126].w < 1.0) && ((cbInstanceData._m0[_3126].w + _3019) < 0.5))
        {
            _3185 = true;
            break;
        }
        if ((_3012 + 1.0) < _3010.x)
        {
            _3185 = true;
            break;
        }
        _3185 = false;
        break;
    }
    float _3390;
    if (_3185)
    {
        discard_state = true;
        _3390 = 0.0;
    }
    else
    {
        _3390 = cbInstanceData._m0[_2851].w;
    }
    SV_Target.x = _3016;
    SV_Target.y = _3017;
    SV_Target.z = _3018;
    SV_Target.w = _3390;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2851].w;
    discard_exit();
}


