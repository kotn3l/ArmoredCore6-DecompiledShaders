#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1437;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _239 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _240 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _241 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _247 = inversesqrt(dot(vec3(_239, _240, _241), vec3(_239, _240, _241)));
    float _254 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _261 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _267 = uint(roundEven(NORMAL.w)) * 13u;
    uint _272 = _267 + 1u;
    uint _276 = _267 + 2u;
    float _285 = sqrt(((cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x) + (cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x)) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x));
    float _286 = _285 * TEXCOORD.z;
    float _287 = _285 * TEXCOORD.w;
    vec4 _307 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _313 = _307.x * cbMtdParam._m0[11u].x;
    float _314 = _307.y * cbMtdParam._m0[11u].y;
    float _315 = _307.z * cbMtdParam._m0[11u].z;
    vec4 _334 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _286) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _287) + cbTextureTilingScale._m0[5u].w));
    vec4 _373 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _375 = _373.x;
    float _387 = dot(vec4(_375, _373.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _404 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_375 - _387) * cbMtdParam._m0[24u].y) + _387) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4046 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _405 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _412 = (_405 * ((_334.x * cbMtdParam._m0[12u].x) - _313)) + _313;
    float _413 = (_405 * ((_334.y * cbMtdParam._m0[12u].y) - _314)) + _314;
    float _414 = (_405 * ((_334.z * cbMtdParam._m0[12u].z) - _315)) + _315;
    vec4 _431 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _286) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _287) + cbTextureTilingScale._m0[3u].w));
    vec4 _451 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _453 = _451.x;
    float _463 = dot(vec4(_453, _451.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _477 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_453 - _463) * cbMtdParam._m0[24u].y) + _463) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4057 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _478 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _485 = (_478 * ((_431.x * cbMtdParam._m0[13u].x) - _412)) + _412;
    float _486 = (_478 * ((_431.y * cbMtdParam._m0[13u].y) - _413)) + _413;
    float _487 = (_478 * ((_431.z * cbMtdParam._m0[13u].z) - _414)) + _414;
    vec4 _504 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _286) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _287) + cbTextureTilingScale._m0[20u].w));
    vec4 _527 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _286) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _287) + cbTextureTilingScale._m0[4u].w));
    vec4 _544 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _546 = _544.x;
    float _547 = _544.y;
    float _548 = _544.z;
    float _555 = ((_527.x - _546) * _405) + _546;
    float _556 = ((_527.y - _547) * _405) + _547;
    float _557 = ((_527.z - _548) * _405) + _548;
    vec4 _569 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _286) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _287) + cbTextureTilingScale._m0[2u].w));
    float _582 = ((_569.z - _557) * _478) + _557;
    float _585 = ((((_569.x - _555) * _478) + _555) * 2.0) + (-1.0);
    float _586 = ((((_569.y - _556) * _478) + _556) * 2.0) + (-1.0);
    float _587 = dot(vec2(_585, _586), vec2(_585, _586));
    float _4068 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _592 = sqrt(1.0 - (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))));
    vec4 _605 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _623 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _286) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _287) + cbTextureTilingScale._m0[11u].w));
    float _625 = _623.x;
    float _626 = 1.0 - _625;
    float _632 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _635 = ((isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : min(_632, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _644 = (_635 - ((((((_625 - _626) * cbMtdParam._m0[24u].z) + _626) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _635))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4089 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _645 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _652 = (_645 * (cbMtdParam._m0[17u].x - _485)) + _485;
    float _653 = (_645 * (cbMtdParam._m0[17u].y - _486)) + _486;
    float _654 = (_645 * (cbMtdParam._m0[17u].z - _487)) + _487;
    vec4 _666 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _286) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _287) + cbTextureTilingScale._m0[19u].w));
    float _668 = _666.x;
    float _669 = 1.0 - _668;
    float _696 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_668 - _669) * cbMtdParam._m0[24u].w) + _669) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4100 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _697 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _705 = ((((cbMtdParam._m0[10u].x - _652) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _697) + _652;
    float _706 = ((((cbMtdParam._m0[10u].y - _653) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _697) + _653;
    float _707 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _654)) * _697) + _654;
    vec4 _733 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _735 = _733.x;
    float _753 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _286) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _287) + cbTextureTilingScale._m0[9u].w)).x - _735) * _405) + _735;
    float _770 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _286) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _287) + cbTextureTilingScale._m0[21u].w)).x - _753) * _478) + _753;
    float _774 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _770) * cbMtdParam._m0[19u].z) + _770;
    float _776 = _774 - (_774 * _645);
    float _778 = _776 - (_776 * _697);
    float _783 = (((_504.z - _582) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _582;
    vec4 _797 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _286) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _287) + cbTextureTilingScale._m0[15u].w));
    float _804 = (_797.x * 2.0) + (-1.0);
    float _805 = (_797.y * 2.0) + (-1.0);
    float _806 = dot(vec2(_804, _805), vec2(_804, _805));
    float _4111 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _814 = (_645 * (_797.z - _783)) + _783;
    float _817 = ((cbMtdParam._m0[23u].y - _814) * _697) + _814;
    vec4 _836 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _286) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _287) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _842 = (_836.x * 2.0) + (-1.0);
    float _843 = (_836.y * 2.0) + (-1.0);
    float _844 = dot(vec2(_842, _843), vec2(_842, _843));
    float _4122 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _854 = _585 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_504.x * 2.0) + (-1.0)));
    float _855 = _586 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_504.y * 2.0) + (-1.0)));
    float _867 = (((_804 - _854) + (cbMtdParam._m0[21u].x * _854)) * _645) + _854;
    float _868 = (((_805 - _855) + (cbMtdParam._m0[21u].x * _855)) * _645) + _855;
    float _869 = (_645 * (sqrt(1.0 - (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0)))) - _592)) + _592;
    float _880 = (((_842 - _867) + (_867 * cbMtdParam._m0[22u].z)) * _697) + _867;
    float _881 = (((_843 - _868) + (_868 * cbMtdParam._m0[22u].z)) * _697) + _868;
    float _882 = ((sqrt(1.0 - (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0)))) - _869) * _697) + _869;
    float _884 = cbMtdParam._m0[22u].x + _605.w;
    float _887 = fma(_882, _254 * NORMAL.x, fma(_881, _261 * TANGENT.x, (_247 * _239) * _880));
    float _890 = fma(_882, _254 * NORMAL.y, fma(_881, _261 * TANGENT.y, (_247 * _240) * _880));
    float _893 = fma(_882, _254 * NORMAL.z, fma(_881, _261 * TANGENT.z, (_247 * _241) * _880));
    float _897 = inversesqrt(dot(vec3(_887, _890, _893), vec3(_887, _890, _893)));
    float _898 = _897 * _887;
    float _899 = _897 * _890;
    float _900 = _897 * _893;
    float _4133 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _901 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _4144 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _4155 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _4166 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _4177 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _4188 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _906 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    float _920 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _960 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _970 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _960);
    float _971 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _960);
    float _972 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _960);
    float _976 = inversesqrt(dot(vec3(_970, _971, _972), vec3(_970, _971, _972)));
    float _977 = _970 * _976;
    float _978 = _971 * _976;
    float _979 = _972 * _976;
    float _985 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _986 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1004 = fma(_900, cbSceneParam._m0[5u].z, fma(_899, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _898));
    float _1007 = fma(_900, cbSceneParam._m0[6u].z, fma(_899, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _898));
    float _1010 = fma(_900, cbSceneParam._m0[7u].z, fma(_899, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _898));
    uint _1024 = (_267 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1030 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0)))) * cbInstanceData._m0[_1024].x;
    float _1031 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) * cbInstanceData._m0[_1024].y;
    float _1032 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0)))) * cbInstanceData._m0[_1024].z;
    float _4199 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _1033 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
    float _4210 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _1034 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _4221 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _1035 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
    float _1036 = 1.0 - _906;
    float _1037 = _1033 * _1036;
    float _1038 = _1034 * _1036;
    float _1039 = _1035 * _1036;
    float _1044 = (_1033 + (-0.039999999105930328369140625)) * _906;
    float _1045 = (_1034 + (-0.039999999105930328369140625)) * _906;
    float _1046 = (_1035 + (-0.039999999105930328369140625)) * _906;
    float _1047 = _1044 + 0.039999999105930328369140625;
    float _1049 = _1045 + 0.039999999105930328369140625;
    float _1050 = _1046 + 0.039999999105930328369140625;
    vec4 _1059 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _985, cbSceneParam._m0[86u].y * _986));
    float _1063 = ((isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * TEXCOORD_5.w) * _1059.x;
    float _1064 = dot(vec3(_898, _899, _900), vec3(_977, _978, _979));
    float _1067 = _1064 * 2.0;
    float _1071 = (_1067 * _898) - _977;
    float _1072 = (_1067 * _899) - _978;
    float _1073 = (_1067 * _900) - _979;
    float _1077 = abs(dot(vec3(_977, _978, _979), vec3(_898, _899, _900)));
    float _4232 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
    float _1079 = sqrt(_901);
    float _1092 = exp2((_1079 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1079 * 3.0));
    float _1098 = (1.0 - _1092) * ((_1079 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1099 = _1092 * _1079;
    float _1127 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1131 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1135 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1436;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1161 = fma(_1135, cbModelParam._m0[26u].z, fma(_1131, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1127));
        float _1165 = fma(_1135, cbModelParam._m0[27u].z, fma(_1131, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1127));
        float _1169 = fma(_1135, cbModelParam._m0[28u].z, fma(_1131, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1127));
        float _1194 = _1127 + _898;
        float _1195 = _1131 + _899;
        float _1196 = _1135 + _900;
        float _1206 = fma(_1196, cbModelParam._m0[26u].z, fma(_1195, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1194)) - _1161;
        float _1207 = fma(_1196, cbModelParam._m0[27u].z, fma(_1195, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1194)) - _1165;
        float _1208 = fma(_1196, cbModelParam._m0[28u].z, fma(_1195, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1194)) - _1169;
        float _1212 = inversesqrt(dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208)));
        float _1225 = ((_1212 * _1206) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1161 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1226 = ((_1212 * _1207) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1165 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1227 = ((_1212 * _1208) / cbModelParam._m0[34u].z) + ((((((_1169 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1230 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1225, _1226, _1227), 0.0);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1225, _1226, _1227), 0.0);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1225, _1226, _1227), 0.0);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1225, _1226, _1227), 0.0);
        float _1264 = exp2((_1230.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1230.x + (-0.5));
        float _1266 = _1264 * (_1230.y + (-0.5));
        float _1267 = _1264 * (_1230.z + (-0.5));
        float _1274 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1275 = _1274 * (_1237.x + (-0.5));
        float _1276 = _1274 * (_1237.y + (-0.5));
        float _1277 = _1274 * (_1237.z + (-0.5));
        float _1284 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1285 = _1284 * (_1244.x + (-0.5));
        float _1286 = _1284 * (_1244.y + (-0.5));
        float _1287 = _1284 * (_1244.z + (-0.5));
        float _1294 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1295 = _1294 * (_1251.x + (-0.5));
        float _1296 = _1294 * (_1251.y + (-0.5));
        float _1297 = _1294 * (_1251.z + (-0.5));
        float _1298 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1299 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1300 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1301 = _1265 * 0.5;
        float _1302 = _1275 * 0.5;
        float _1303 = _1285 * 0.5;
        float _1304 = dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303));
        float _1309 = (_1304 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1304);
        float _1318 = (dot(vec3(_898, _899, _900), vec3(_1309 * _1301, _1309 * _1302, _1309 * _1303)) + 1.0) * 0.5;
        float _4258 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1328 = sqrt(((_1302 * _1302) + (_1301 * _1301)) + (_1303 * _1303)) / (_1298 + 9.9999997473787516355514526367188e-06);
        float _4269 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _4280 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_1330 + 1.0))) + _1335) * _1298;
        float _1345 = _1266 * 0.5;
        float _1346 = _1276 * 0.5;
        float _1347 = _1286 * 0.5;
        float _1348 = dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347));
        float _1353 = (_1348 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1348);
        float _1361 = (dot(vec3(_898, _899, _900), vec3(_1353 * _1345, _1353 * _1346, _1353 * _1347)) + 1.0) * 0.5;
        float _4291 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1370 = sqrt(((_1346 * _1346) + (_1345 * _1345)) + (_1347 * _1347)) / (_1299 + 9.9999997473787516355514526367188e-06);
        float _4302 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1372 = _1371 * 2.0;
        float _1376 = (1.0 - _1371) / (_1371 + 1.0);
        float _4313 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1386 = ((((1.0 - _1377) * (_1372 + 2.0)) * exp2(log2(isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_1372 + 1.0))) + _1377) * _1299;
        float _1387 = _1267 * 0.5;
        float _1388 = _1277 * 0.5;
        float _1389 = _1287 * 0.5;
        float _1390 = dot(vec3(_1387, _1388, _1389), vec3(_1387, _1388, _1389));
        float _1395 = (_1390 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1390);
        float _1403 = (dot(vec3(_898, _899, _900), vec3(_1395 * _1387, _1395 * _1388, _1395 * _1389)) + 1.0) * 0.5;
        float _4324 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1412 = sqrt(((_1388 * _1388) + (_1387 * _1387)) + (_1389 * _1389)) / (_1300 + 9.9999997473787516355514526367188e-06);
        float _4335 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1414 = _1413 * 2.0;
        float _1418 = (1.0 - _1413) / (_1413 + 1.0);
        float _4346 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1428 = ((((1.0 - _1419) * (_1414 + 2.0)) * exp2(log2(isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_1414 + 1.0))) + _1419) * _1300;
        _1436 = _1267;
        _1438 = _1266;
        _1439 = _1265;
        _1440 = _1277;
        _1441 = _1276;
        _1442 = _1275;
        _1443 = _1287;
        _1444 = _1286;
        _1445 = _1285;
        _1446 = _1300;
        _1447 = _1299;
        _1448 = _1298;
        _1449 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
        _1450 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)));
        _1451 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)));
    }
    else
    {
        _1436 = _1437;
        _1438 = _1437;
        _1439 = _1437;
        _1440 = _1437;
        _1441 = _1437;
        _1442 = _1437;
        _1443 = _1437;
        _1444 = _1437;
        _1445 = _1437;
        _1446 = _1437;
        _1447 = _1437;
        _1448 = _1437;
        _1449 = 0.0;
        _1450 = 0.0;
        _1451 = 0.0;
    }
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1475 = fma(_1135, cbModelParam._m0[30u].z, fma(_1131, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1127));
        float _1479 = fma(_1135, cbModelParam._m0[31u].z, fma(_1131, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1127));
        float _1483 = fma(_1135, cbModelParam._m0[32u].z, fma(_1131, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1127));
        float _1506 = _1127 + _898;
        float _1507 = _1131 + _899;
        float _1508 = _1135 + _900;
        float _1518 = fma(_1508, cbModelParam._m0[30u].z, fma(_1507, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1506)) - _1475;
        float _1519 = fma(_1508, cbModelParam._m0[31u].z, fma(_1507, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1506)) - _1479;
        float _1520 = fma(_1508, cbModelParam._m0[32u].z, fma(_1507, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1506)) - _1483;
        float _1524 = inversesqrt(dot(vec3(_1518, _1519, _1520), vec3(_1518, _1519, _1520)));
        float _1537 = ((_1524 * _1518) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1475 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1538 = ((_1524 * _1519) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1479 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1539 = ((_1524 * _1520) / cbModelParam._m0[35u].z) + ((((((_1483 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1541 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1537, _1538, _1539), 0.0);
        vec4 _1548 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1537, _1538, _1539), 0.0);
        vec4 _1555 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1537, _1538, _1539), 0.0);
        vec4 _1562 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1537, _1538, _1539), 0.0);
        float _1574 = exp2((_1541.w + (-0.5)) * 20.0) * 2.0;
        float _1575 = _1574 * (_1541.x + (-0.5));
        float _1576 = _1574 * (_1541.y + (-0.5));
        float _1577 = _1574 * (_1541.z + (-0.5));
        float _1584 = exp2((_1548.w + (-0.5)) * 20.0) * 2.0;
        float _1585 = _1584 * (_1548.x + (-0.5));
        float _1586 = _1584 * (_1548.y + (-0.5));
        float _1587 = _1584 * (_1548.z + (-0.5));
        float _1594 = exp2((_1555.w + (-0.5)) * 20.0) * 2.0;
        float _1595 = _1594 * (_1555.x + (-0.5));
        float _1596 = _1594 * (_1555.y + (-0.5));
        float _1597 = _1594 * (_1555.z + (-0.5));
        float _1604 = exp2((_1562.w + (-0.5)) * 20.0) * 2.0;
        float _1605 = _1604 * (_1562.x + (-0.5));
        float _1606 = _1604 * (_1562.y + (-0.5));
        float _1607 = _1604 * (_1562.z + (-0.5));
        float _1608 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1609 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1610 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1611 = _1575 * 0.5;
        float _1612 = _1585 * 0.5;
        float _1613 = _1595 * 0.5;
        float _1614 = dot(vec3(_1611, _1612, _1613), vec3(_1611, _1612, _1613));
        float _1619 = (_1614 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1614);
        float _1627 = (dot(vec3(_898, _899, _900), vec3(_1619 * _1611, _1619 * _1612, _1619 * _1613)) + 1.0) * 0.5;
        float _4387 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1636 = sqrt(((_1612 * _1612) + (_1611 * _1611)) + (_1613 * _1613)) / (_1608 + 9.9999997473787516355514526367188e-06);
        float _4398 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1637 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _1638 = _1637 * 2.0;
        float _1642 = (1.0 - _1637) / (_1637 + 1.0);
        float _4409 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1643 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _1652 = ((((1.0 - _1643) * (_1638 + 2.0)) * exp2(log2(isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_1638 + 1.0))) + _1643) * _1608;
        float _1653 = _1576 * 0.5;
        float _1654 = _1586 * 0.5;
        float _1655 = _1596 * 0.5;
        float _1656 = dot(vec3(_1653, _1654, _1655), vec3(_1653, _1654, _1655));
        float _1661 = (_1656 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1656);
        float _1669 = (dot(vec3(_898, _899, _900), vec3(_1661 * _1653, _1661 * _1654, _1661 * _1655)) + 1.0) * 0.5;
        float _4420 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1678 = sqrt(((_1654 * _1654) + (_1653 * _1653)) + (_1655 * _1655)) / (_1609 + 9.9999997473787516355514526367188e-06);
        float _4431 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1679 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _1680 = _1679 * 2.0;
        float _1684 = (1.0 - _1679) / (_1679 + 1.0);
        float _4442 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1685 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _1694 = ((((1.0 - _1685) * (_1680 + 2.0)) * exp2(log2(isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_1680 + 1.0))) + _1685) * _1609;
        float _1695 = _1577 * 0.5;
        float _1696 = _1587 * 0.5;
        float _1697 = _1597 * 0.5;
        float _1698 = dot(vec3(_1695, _1696, _1697), vec3(_1695, _1696, _1697));
        float _1703 = (_1698 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1698);
        float _1711 = (dot(vec3(_898, _899, _900), vec3(_1703 * _1695, _1703 * _1696, _1703 * _1697)) + 1.0) * 0.5;
        float _4453 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1720 = sqrt(((_1696 * _1696) + (_1695 * _1695)) + (_1697 * _1697)) / (_1610 + 9.9999997473787516355514526367188e-06);
        float _4464 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1721 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _1722 = _1721 * 2.0;
        float _1726 = (1.0 - _1721) / (_1721 + 1.0);
        float _4475 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1727 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _1736 = ((((1.0 - _1727) * (_1722 + 2.0)) * exp2(log2(isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_1722 + 1.0))) + _1727) * _1610;
        _1744 = _1577;
        _1745 = _1576;
        _1746 = _1575;
        _1747 = _1587;
        _1748 = _1586;
        _1749 = _1585;
        _1750 = _1597;
        _1751 = _1596;
        _1752 = _1595;
        _1753 = _1610;
        _1754 = _1609;
        _1755 = _1608;
        _1756 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)));
        _1757 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)));
        _1758 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)));
    }
    else
    {
        _1744 = _1437;
        _1745 = _1437;
        _1746 = _1437;
        _1747 = _1437;
        _1748 = _1437;
        _1749 = _1437;
        _1750 = _1437;
        _1751 = _1437;
        _1752 = _1437;
        _1753 = _1437;
        _1754 = _1437;
        _1755 = _1437;
        _1756 = 0.0;
        _1757 = 0.0;
        _1758 = 0.0;
    }
    float _1768 = (cbModelParam._m0[1u].x * (_1756 - _1449)) + _1449;
    float _1769 = (cbModelParam._m0[1u].x * (_1757 - _1450)) + _1450;
    float _1770 = (cbModelParam._m0[1u].x * (_1758 - _1451)) + _1451;
    float _1791 = fma(_1770, cbSceneParam._m0[89u].z, fma(_1769, cbSceneParam._m0[89u].y, _1768 * cbSceneParam._m0[89u].x));
    float _1794 = fma(_1770, cbSceneParam._m0[90u].z, fma(_1769, cbSceneParam._m0[90u].y, _1768 * cbSceneParam._m0[90u].x));
    float _1797 = fma(_1770, cbSceneParam._m0[91u].z, fma(_1769, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1768));
    float _1812 = _1071 * 0.5;
    float _1813 = _1072 * 0.5;
    float _1814 = _1073 * 0.5;
    float _1815 = dot(vec4(_1812, _1813, _1814, 1.0), vec4(_1746, _1749, _1752, _1755));
    float _1818 = dot(vec4(_1812, _1813, _1814, 1.0), vec4(_1745, _1748, _1751, _1754));
    float _1821 = dot(vec4(_1812, _1813, _1814, 1.0), vec4(_1744, _1747, _1750, _1753));
    float _1855;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1828 = dot(vec4(_1812, _1813, _1814, 1.0), vec4(_1436, _1440, _1443, _1446));
        float _1832 = dot(vec4(_1812, _1813, _1814, 1.0), vec4(_1438, _1441, _1444, _1447));
        float _1836 = dot(vec4(_1812, _1813, _1814, 1.0), vec4(_1439, _1442, _1445, _1448));
        float _1843 = dot(vec4(cbModelParam._m0[39u]), vec4(_1812, _1813, _1814, 1.0));
        _1855 = dot(vec3(isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0)), isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0)), isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1843) ? 0.0 : (isnan(0.0) ? _1843 : max(0.0, _1843))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1855 = 1.0;
    }
    float _1866;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1857 = dot(vec4(cbModelParam._m0[40u]), vec4(_1812, _1813, _1814, 1.0));
        _1866 = dot(vec3(isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0)), isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0)), isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1857) ? 0.0 : (isnan(0.0) ? _1857 : max(0.0, _1857))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1866 = 1.0;
    }
    float _1870 = (_1866 * cbModelParam._m0[1u].x) + (_1855 * (1.0 - cbModelParam._m0[1u].x));
    float _1880 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _901);
    float _1881 = isnan(_1880) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1880 : min(cbModelParam._m0[25u].z, _1880));
    float _1962;
    float _1964;
    float _1966;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1929 = fma(_1135, cbModelParam._m0[13u].z, fma(_1131, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1127)) + cbModelParam._m0[13u].w;
        float _1933 = fma(_1135, cbModelParam._m0[14u].z, fma(_1131, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1127)) + cbModelParam._m0[14u].w;
        float _1937 = fma(_1135, cbModelParam._m0[15u].z, fma(_1131, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1127)) + cbModelParam._m0[15u].w;
        float _1940 = fma(_1073, cbModelParam._m0[13u].z, fma(_1072, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1071));
        float _1943 = fma(_1073, cbModelParam._m0[14u].z, fma(_1072, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1071));
        float _1946 = fma(_1073, cbModelParam._m0[15u].z, fma(_1072, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1071));
        float _1974;
        if (_1940 > 0.0)
        {
            _1974 = abs((1.0 - _1929) / _1940);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1940 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1929 + 1.0) / _1940);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1974 = frontier_phi_14_12_ladder;
        }
        float _2146;
        if (_1943 > 0.0)
        {
            _2146 = abs((1.0 - _1933) / _1943);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1943 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1933 + 1.0) / _1943);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2146 = frontier_phi_23_19_ladder;
        }
        float _2441;
        if (_1946 > 0.0)
        {
            _2441 = abs((1.0 - _1937) / _1946);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1946 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1937 + 1.0) / _1946);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2441 = frontier_phi_35_30_ladder;
        }
        float _2443 = isnan(_2146) ? _1974 : (isnan(_1974) ? _2146 : min(_1974, _2146));
        float _2444 = isnan(_2441) ? _2443 : (isnan(_2443) ? _2441 : min(_2443, _2441));
        float _2448 = (_2444 * _1940) + _1929;
        float _2449 = (_2444 * _1943) + _1933;
        float _2450 = (_2444 * _1946) + _1937;
        float _2451 = _2444 * 9.9999997473787516355514526367188e-05;
        float _2453 = (-1.0) - _2451;
        float _2455 = _2451 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2450 > _2455) || ((_2450 < _2453) || ((_2449 > _2455) || ((_2449 < _2453) || ((_2448 < _2453) || (_2448 > _2455))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2595 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2450, cbModelParam._m0[9u].z, fma(_2449, cbModelParam._m0[9u].y, _2448 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2450, cbModelParam._m0[10u].z, fma(_2449, cbModelParam._m0[10u].y, _2448 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2450, cbModelParam._m0[11u].z, fma(_2449, cbModelParam._m0[11u].y, _2448 * cbModelParam._m0[11u].x))), _1881);
            frontier_phi_13_35_ladder = _2595.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2595.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2595.x * cbModelParam._m0[1u].y;
        }
        _1962 = frontier_phi_13_35_ladder_2;
        _1964 = frontier_phi_13_35_ladder_1;
        _1966 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1950 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1071, _1072, _1073), _1881);
        _1962 = _1950.x * cbModelParam._m0[1u].y;
        _1964 = _1950.y * cbModelParam._m0[1u].y;
        _1966 = _1950.z * cbModelParam._m0[1u].y;
    }
    float _1970 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _901);
    float _1971 = isnan(_1970) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1970 : min(cbModelParam._m0[25u].w, _1970));
    float _2061;
    float _2063;
    float _2065;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2025 = fma(_1135, cbModelParam._m0[21u].z, fma(_1131, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1127)) + cbModelParam._m0[21u].w;
        float _2029 = fma(_1135, cbModelParam._m0[22u].z, fma(_1131, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1127)) + cbModelParam._m0[22u].w;
        float _2033 = fma(_1135, cbModelParam._m0[23u].z, fma(_1131, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1127)) + cbModelParam._m0[23u].w;
        float _2036 = fma(_1073, cbModelParam._m0[21u].z, fma(_1072, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1071));
        float _2039 = fma(_1073, cbModelParam._m0[22u].z, fma(_1072, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1071));
        float _2042 = fma(_1073, cbModelParam._m0[23u].z, fma(_1072, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1071));
        float _2151;
        if (_2036 > 0.0)
        {
            _2151 = abs((1.0 - _2025) / _2036);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2036 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2025 + 1.0) / _2036);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2151 = frontier_phi_25_21_ladder;
        }
        float _2468;
        if (_2039 > 0.0)
        {
            _2468 = abs((1.0 - _2029) / _2039);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2039 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2029 + 1.0) / _2039);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2468 = frontier_phi_37_32_ladder;
        }
        float _2806;
        if (_2042 > 0.0)
        {
            _2806 = abs((1.0 - _2033) / _2042);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2042 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2033 + 1.0) / _2042);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2806 = frontier_phi_47_44_ladder;
        }
        float _2808 = isnan(_2468) ? _2151 : (isnan(_2151) ? _2468 : min(_2151, _2468));
        float _2809 = isnan(_2806) ? _2808 : (isnan(_2808) ? _2806 : min(_2808, _2806));
        float _2813 = (_2809 * _2036) + _2025;
        float _2814 = (_2809 * _2039) + _2029;
        float _2815 = (_2809 * _2042) + _2033;
        float _2816 = _2809 * 9.9999997473787516355514526367188e-05;
        float _2817 = (-1.0) - _2816;
        float _2819 = _2816 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2815 > _2819) || ((_2815 < _2817) || ((_2814 > _2819) || ((_2814 < _2817) || ((_2813 < _2817) || (_2813 > _2819))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2937 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2815, cbModelParam._m0[17u].z, fma(_2814, cbModelParam._m0[17u].y, _2813 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2815, cbModelParam._m0[18u].z, fma(_2814, cbModelParam._m0[18u].y, _2813 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2815, cbModelParam._m0[19u].z, fma(_2814, cbModelParam._m0[19u].y, _2813 * cbModelParam._m0[19u].x))), _1971);
            frontier_phi_22_47_ladder = _2937.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2937.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2937.x * cbModelParam._m0[1u].z;
        }
        _2061 = frontier_phi_22_47_ladder_2;
        _2063 = frontier_phi_22_47_ladder_1;
        _2065 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2045 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1071, _1072, _1073), _1971);
        _2061 = _2045.x * cbModelParam._m0[1u].z;
        _2063 = _2045.y * cbModelParam._m0[1u].z;
        _2065 = _2045.z * cbModelParam._m0[1u].z;
    }
    float _2078 = (((_1098 * _1047) + _1099) * _1063) * ((cbModelParam._m0[1u].w * (_2061 - _1962)) + _1962);
    float _2080 = (((_1098 * _1049) + _1099) * _1063) * ((cbModelParam._m0[1u].w * (_2063 - _1964)) + _1964);
    float _2082 = (((_1098 * _1050) + _1099) * _1063) * ((cbModelParam._m0[1u].w * (_2065 - _1966)) + _1966);
    float _2085 = fma(_2082, cbSceneParam._m0[89u].z, fma(_2080, cbSceneParam._m0[89u].y, _2078 * cbSceneParam._m0[89u].x));
    float _2088 = fma(_2082, cbSceneParam._m0[90u].z, fma(_2080, cbSceneParam._m0[90u].y, _2078 * cbSceneParam._m0[90u].x));
    float _2091 = fma(_2082, cbSceneParam._m0[91u].z, fma(_2080, cbSceneParam._m0[91u].y, _2078 * cbSceneParam._m0[91u].x));
    float _2125 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2129 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2133 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2137 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2138 = _2125 / _2137;
    float _2139 = _2129 / _2137;
    float _2140 = _2133 / _2137;
    float _2287;
    float _2288;
    float _2289;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2167 = ((uint(_2140 > cbSceneParam._m0[59u].y) + uint(_2140 > cbSceneParam._m0[59u].x)) + uint(_2140 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2168 = _2167 + 43u;
        uint _2176 = _2167 + 44u;
        uint _2184 = _2167 + 45u;
        uint _2192 = _2167 + 46u;
        float _2203 = fma(_2137, cbSceneParam._m0[_2168].w, fma(_2133, cbSceneParam._m0[_2168].z, fma(_2129, cbSceneParam._m0[_2168].y, _2125 * cbSceneParam._m0[_2168].x)));
        float _2207 = fma(_2137, cbSceneParam._m0[_2176].w, fma(_2133, cbSceneParam._m0[_2176].z, fma(_2129, cbSceneParam._m0[_2176].y, _2125 * cbSceneParam._m0[_2176].x)));
        float _2215 = fma(_2137, cbSceneParam._m0[_2192].w, fma(_2133, cbSceneParam._m0[_2192].z, fma(_2129, cbSceneParam._m0[_2192].y, _2125 * cbSceneParam._m0[_2192].x)));
        float _2220 = cbSceneParam._m0[33u].z * _2215;
        float _2222 = cbSceneParam._m0[33u].w * _2215;
        float _2225 = fma(_2137, cbSceneParam._m0[_2184].w, fma(_2133, cbSceneParam._m0[_2184].z, fma(_2129, cbSceneParam._m0[_2184].y, _2125 * cbSceneParam._m0[_2184].x))) / _2215;
        float _2273 = (cbSceneParam._m0[33u].x - sqrt(((_2139 * _2139) + (_2138 * _2138)) + (_2140 * _2140))) * cbSceneParam._m0[33u].y;
        float _4601 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
        float _2280 = (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2220 + _2203) / _2215, (_2222 + _2207) / _2215), _2225), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2222 + _2203) / _2215, (_2207 - _2220) / _2215), _2225), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2203 - _2220) / _2215, (_2207 - _2222) / _2215), _2225), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2203 - _2222) / _2215, (_2220 + _2207) / _2215), _2225), 0.0)).x), vec4(0.25)));
        _2287 = 1.0 - (_2280 * cbSceneParam._m0[34u].x);
        _2288 = 1.0 - (_2280 * cbSceneParam._m0[34u].y);
        _2289 = 1.0 - (_2280 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2287 = 1.0;
        _2288 = 1.0;
        _2289 = 1.0;
    }
    float _2353;
    float _2355;
    float _2357;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2341 = fma(_2137, cbSceneParam._m0[63u].w, fma(_2133, cbSceneParam._m0[63u].z, fma(_2129, cbSceneParam._m0[63u].y, _2125 * cbSceneParam._m0[63u].x)));
        float _2342 = fma(_2137, cbSceneParam._m0[60u].w, fma(_2133, cbSceneParam._m0[60u].z, fma(_2129, cbSceneParam._m0[60u].y, _2125 * cbSceneParam._m0[60u].x))) / _2341;
        float _2343 = fma(_2137, cbSceneParam._m0[61u].w, fma(_2133, cbSceneParam._m0[61u].z, fma(_2129, cbSceneParam._m0[61u].y, _2125 * cbSceneParam._m0[61u].x))) / _2341;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2342 >= cbSceneParam._m0[64u].x) && (_2343 >= cbSceneParam._m0[64u].y)) && (_2342 <= cbSceneParam._m0[64u].z)) && (_2343 <= cbSceneParam._m0[64u].w))
        {
            float _2481 = fma(_2137, cbSceneParam._m0[62u].w, fma(_2133, cbSceneParam._m0[62u].z, fma(_2129, cbSceneParam._m0[62u].y, _2125 * cbSceneParam._m0[62u].x))) / _2341;
            float _2485 = isnan(cbSceneParam._m0[41u].w) ? _2481 : (isnan(_2481) ? cbSceneParam._m0[41u].w : max(_2481, cbSceneParam._m0[41u].w));
            float _2528 = (cbSceneParam._m0[33u].x - sqrt(((_2139 * _2139) + (_2138 * _2138)) + (_2140 * _2140))) * cbSceneParam._m0[33u].y;
            float _4617 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
            float _2535 = (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2342, cbSceneParam._m0[33u].w + _2343), _2485), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2342, _2343 - cbSceneParam._m0[33u].z), _2485), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2342 - cbSceneParam._m0[33u].z, _2343 - cbSceneParam._m0[33u].w), _2485), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2342 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2343), _2485), 0.0)).x), vec4(0.25)));
            float _2539 = 1.0 - (_2535 * cbSceneParam._m0[34u].x);
            float _2540 = 1.0 - (_2535 * cbSceneParam._m0[34u].y);
            float _2541 = 1.0 - (_2535 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2541) ? _2289 : (isnan(_2289) ? _2541 : min(_2289, _2541));
            frontier_phi_34_33_ladder_1 = isnan(_2540) ? _2288 : (isnan(_2288) ? _2540 : min(_2288, _2540));
            frontier_phi_34_33_ladder_2 = isnan(_2539) ? _2287 : (isnan(_2287) ? _2539 : min(_2287, _2539));
        }
        else
        {
            frontier_phi_34_33_ladder = _2289;
            frontier_phi_34_33_ladder_1 = _2288;
            frontier_phi_34_33_ladder_2 = _2287;
        }
        _2353 = frontier_phi_34_33_ladder_2;
        _2355 = frontier_phi_34_33_ladder_1;
        _2357 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2353 = _2287;
        _2355 = _2288;
        _2357 = _2289;
    }
    uvec4 _2362 = floatBitsToUint(cbInstanceData._m0[_267 + 5u]);
    uint _2364 = _2362.x * 14u;
    uint _2365 = _2364 + 13u;
    float _2372 = _1063 + (-1.0);
    float _2377 = (cbLight._m0[_2365].x * _2372) + 1.0;
    float _2378 = (cbLight._m0[_2365].y * _2372) + 1.0;
    float _2379 = (cbLight._m0[_2365].z * _2372) + 1.0;
    float _2380 = (cbLight._m0[_2365].w * _2372) + 1.0;
    uint _2381 = _2364 + 5u;
    float _2387 = isnan(1.0) ? _2378 : (isnan(_2378) ? 1.0 : min(_2378, 1.0));
    uint _2391 = _2364 + 4u;
    float _2400 = isnan(1.0) ? _2377 : (isnan(_2377) ? 1.0 : min(_2377, 1.0));
    uint _2404 = _2364 | 1u;
    float _2415 = dot(vec3(cbLight._m0[_2364].xyz), vec3(_898, _899, _900));
    float _2418 = dot(vec3(cbLight._m0[_2404].xyz), vec3(_898, _899, _900));
    float _4653 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
    float _4664 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _2423 = (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0))) * 0.3183098733425140380859375;
    float _2425 = (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))) * 0.3183098733425140380859375;
    float _2432 = ((cbLight._m0[_2381].x * _2387) * _2425) + (((cbLight._m0[_2391].x * _2353) * _2400) * _2423);
    float _2433 = ((_2387 * cbLight._m0[_2381].y) * _2425) + (((cbLight._m0[_2391].y * _2355) * _2400) * _2423);
    float _2434 = ((_2387 * cbLight._m0[_2381].z) * _2425) + (((cbLight._m0[_2391].z * _2357) * _2400) * _2423);
    uvec4 _2438 = floatBitsToUint(cbLight._m0[_2364 + 12u]);
    bool _2440 = _2438.x == 0u;
    float _2542;
    float _2544;
    float _2546;
    if (_2440)
    {
        _2542 = _2432;
        _2544 = _2433;
        _2546 = _2434;
    }
    else
    {
        uint _2550 = _2364 + 6u;
        float _2566 = (dot(vec3(cbLight._m0[_2364 + 2u].xyz), vec3(_898, _899, _900)) * 0.5) + 0.5;
        float _2567 = _2566 * _2566;
        float _4675 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
        float _2568 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
        float _2569 = isnan(1.0) ? _2379 : (isnan(_2379) ? 1.0 : min(_2379, 1.0));
        _2542 = (((cbLight._m0[_2550].x * 0.3183098733425140380859375) * _2568) * _2569) + _2432;
        _2544 = (((cbLight._m0[_2550].y * 0.3183098733425140380859375) * _2568) * _2569) + _2433;
        _2546 = (((cbLight._m0[_2550].z * 0.3183098733425140380859375) * _2568) * _2569) + _2434;
    }
    bool _2549 = _2438.y == 0u;
    float _2604;
    float _2606;
    float _2608;
    if (_2549)
    {
        _2604 = _2542;
        _2606 = _2544;
        _2608 = _2546;
    }
    else
    {
        uint _2777 = _2364 + 7u;
        float _2793 = (dot(vec3(cbLight._m0[_2364 + 3u].xyz), vec3(_898, _899, _900)) * 0.5) + 0.5;
        float _2794 = _2793 * _2793;
        float _4691 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
        float _2795 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
        float _2796 = isnan(1.0) ? _2380 : (isnan(_2380) ? 1.0 : min(_2380, 1.0));
        _2604 = (((cbLight._m0[_2777].x * 0.3183098733425140380859375) * _2795) * _2796) + _2542;
        _2606 = (((cbLight._m0[_2777].y * 0.3183098733425140380859375) * _2795) * _2796) + _2544;
        _2608 = (((cbLight._m0[_2777].z * 0.3183098733425140380859375) * _2795) * _2796) + _2546;
    }
    uint _2611 = _2364 + 8u;
    float _2624 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2364].w)) * _901) * 0.949999988079071044921875);
    float _2625 = _2624 * _2624;
    float _2626 = cbLight._m0[_2364].x + _977;
    float _2627 = cbLight._m0[_2364].y + _978;
    float _2628 = cbLight._m0[_2364].z + _979;
    float _2632 = inversesqrt(dot(vec3(_2626, _2627, _2628), vec3(_2626, _2627, _2628)));
    float _2633 = _2632 * _2626;
    float _2634 = _2632 * _2627;
    float _2635 = _2632 * _2628;
    float _2636 = dot(vec3(_898, _899, _900), vec3(cbLight._m0[_2364].xyz));
    float _4707 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
    float _2639 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
    float _4718 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    float _2640 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
    float _2641 = dot(vec3(_898, _899, _900), vec3(_2633, _2634, _2635));
    float _4729 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
    float _2644 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
    float _2645 = dot(vec3(cbLight._m0[_2364].xyz), vec3(_2633, _2634, _2635));
    float _4740 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
    float _2649 = _2625 * _2625;
    float _2653 = ((_2644 * _2644) * (_2649 + (-1.0))) + 1.0;
    float _2661 = exp2(log2(1.0 - (isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0)))) * 5.0);
    float _2662 = 0.959999978542327880859375 - _1044;
    float _2664 = 0.959999978542327880859375 - _1045;
    float _2665 = 0.959999978542327880859375 - _1046;
    float _2672 = 1.0 - _2625;
    float _2683 = (0.5 / (((_2640 * ((_2639 * _2672) + _2625)) + 9.9999999392252902907785028219223e-09) + (((_2640 * _2672) + _2625) * _2639))) * _2639;
    float _4751 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
    float _2685 = (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0))) * (_2649 / ((_2653 * _2653) * 3.141590118408203125));
    uint _2699 = _2364 + 9u;
    float _2710 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2404].w)) * _901) * 0.949999988079071044921875);
    float _2711 = _2710 * _2710;
    float _2712 = cbLight._m0[_2404].x + _977;
    float _2713 = cbLight._m0[_2404].y + _978;
    float _2714 = cbLight._m0[_2404].z + _979;
    float _2718 = inversesqrt(dot(vec3(_2712, _2713, _2714), vec3(_2712, _2713, _2714)));
    float _2719 = _2718 * _2712;
    float _2720 = _2718 * _2713;
    float _2721 = _2718 * _2714;
    float _2722 = dot(vec3(_898, _899, _900), vec3(cbLight._m0[_2404].xyz));
    float _4762 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
    float _2725 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
    float _2726 = dot(vec3(_898, _899, _900), vec3(_2719, _2720, _2721));
    float _4773 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
    float _2729 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
    float _2730 = dot(vec3(cbLight._m0[_2404].xyz), vec3(_2719, _2720, _2721));
    float _4784 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
    float _2734 = _2711 * _2711;
    float _2738 = ((_2729 * _2729) * (_2734 + (-1.0))) + 1.0;
    float _2745 = exp2(log2(1.0 - (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0)))) * 5.0);
    float _2752 = 1.0 - _2711;
    float _2762 = (0.5 / (((_2640 * ((_2725 * _2752) + _2711)) + 9.9999999392252902907785028219223e-09) + (((_2640 * _2752) + _2711) * _2725))) * _2725;
    float _4795 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
    float _2764 = (isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0))) * (_2734 / ((_2738 * _2738) * 3.141590118408203125));
    float _2774 = (((((_2745 * _2662) + _1047) * cbLight._m0[_2699].x) * _2764) * _2387) + ((((cbLight._m0[_2611].x * _2353) * ((_2661 * _2662) + _1047)) * _2685) * _2400);
    float _2775 = (((((_2745 * _2664) + _1049) * cbLight._m0[_2699].y) * _2764) * _2387) + ((((cbLight._m0[_2611].y * _2355) * ((_2661 * _2664) + _1049)) * _2685) * _2400);
    float _2776 = (((((_2745 * _2665) + _1050) * cbLight._m0[_2699].z) * _2764) * _2387) + ((((cbLight._m0[_2611].z * _2357) * ((_2661 * _2665) + _1050)) * _2685) * _2400);
    float _2832;
    float _2834;
    float _2836;
    if (_2440)
    {
        _2832 = _2774;
        _2834 = _2775;
        _2836 = _2776;
    }
    else
    {
        uint _2838 = _2364 + 2u;
        uint _2842 = _2364 + 10u;
        float _2856 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2838].w)) * _901) * 0.949999988079071044921875);
        float _2857 = _2856 * _2856;
        float _2858 = cbLight._m0[_2838].x + _977;
        float _2859 = cbLight._m0[_2838].y + _978;
        float _2860 = cbLight._m0[_2838].z + _979;
        float _2864 = inversesqrt(dot(vec3(_2858, _2859, _2860), vec3(_2858, _2859, _2860)));
        float _2865 = _2864 * _2858;
        float _2866 = _2864 * _2859;
        float _2867 = _2864 * _2860;
        float _2868 = dot(vec3(_898, _899, _900), vec3(cbLight._m0[_2838].xyz));
        float _4806 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
        float _2871 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
        float _2872 = dot(vec3(_898, _899, _900), vec3(_2865, _2866, _2867));
        float _4817 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
        float _2875 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
        float _2876 = dot(vec3(cbLight._m0[_2838].xyz), vec3(_2865, _2866, _2867));
        float _4828 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
        float _2880 = _2857 * _2857;
        float _2884 = ((_2875 * _2875) * (_2880 + (-1.0))) + 1.0;
        float _2891 = exp2(log2(1.0 - (isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0)))) * 5.0);
        float _2898 = 1.0 - _2857;
        float _2908 = (0.5 / (((_2640 * ((_2871 * _2898) + _2857)) + 9.9999999392252902907785028219223e-09) + (((_2640 * _2898) + _2857) * _2871))) * _2871;
        float _4839 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
        float _2910 = (isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0))) * (_2880 / ((_2884 * _2884) * 3.141590118408203125));
        float _2911 = isnan(1.0) ? _2379 : (isnan(_2379) ? 1.0 : min(_2379, 1.0));
        _2832 = (((((_2891 * _2662) + _1047) * cbLight._m0[_2842].x) * _2910) * _2911) + _2774;
        _2834 = (((((_2891 * _2664) + _1049) * cbLight._m0[_2842].y) * _2910) * _2911) + _2775;
        _2836 = (((((_2891 * _2665) + _1050) * cbLight._m0[_2842].z) * _2910) * _2911) + _2776;
    }
    float _2942;
    float _2944;
    float _2946;
    if (_2549)
    {
        _2942 = _2832;
        _2944 = _2834;
        _2946 = _2836;
    }
    else
    {
        uint _2953 = _2364 + 3u;
        uint _2957 = _2364 + 11u;
        float _2971 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2953].w)) * _901) * 0.949999988079071044921875);
        float _2972 = _2971 * _2971;
        float _2973 = cbLight._m0[_2953].x + _977;
        float _2974 = cbLight._m0[_2953].y + _978;
        float _2975 = cbLight._m0[_2953].z + _979;
        float _2979 = inversesqrt(dot(vec3(_2973, _2974, _2975), vec3(_2973, _2974, _2975)));
        float _2980 = _2979 * _2973;
        float _2981 = _2979 * _2974;
        float _2982 = _2979 * _2975;
        float _2983 = dot(vec3(_898, _899, _900), vec3(cbLight._m0[_2953].xyz));
        float _4855 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
        float _2986 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
        float _2987 = dot(vec3(_898, _899, _900), vec3(_2980, _2981, _2982));
        float _4866 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
        float _2990 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
        float _2991 = dot(vec3(cbLight._m0[_2953].xyz), vec3(_2980, _2981, _2982));
        float _4877 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
        float _2995 = _2972 * _2972;
        float _2999 = ((_2990 * _2990) * (_2995 + (-1.0))) + 1.0;
        float _3006 = exp2(log2(1.0 - (isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0)))) * 5.0);
        float _3013 = 1.0 - _2972;
        float _3023 = (0.5 / (((_2640 * ((_2986 * _3013) + _2972)) + 9.9999999392252902907785028219223e-09) + (((_2640 * _3013) + _2972) * _2986))) * _2986;
        float _4888 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
        float _3025 = (isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0))) * (_2995 / ((_2999 * _2999) * 3.141590118408203125));
        float _3026 = isnan(1.0) ? _2380 : (isnan(_2380) ? 1.0 : min(_2380, 1.0));
        _2942 = (((((_3006 * _2662) + _1047) * cbLight._m0[_2957].x) * _3025) * _3026) + _2832;
        _2944 = (((((_3006 * _2664) + _1049) * cbLight._m0[_2957].y) * _3025) * _3026) + _2834;
        _2946 = (((((_3006 * _2665) + _1050) * cbLight._m0[_2957].z) * _3025) * _3026) + _2836;
    }
    float _3092;
    float _3094;
    float _3096;
    float _3098;
    float _3100;
    float _3102;
    if (_2362.y == 0u)
    {
        uvec4 _3047 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3048 = _3047.x;
        uint _3059 = uint((float(_3047.y) * floor(float(uint(cbSceneParam._m0[85u].y * _986) / _3048))) + floor(float(uint(cbSceneParam._m0[85u].x * _985) / _3048)));
        float _3069 = (log2(_2140 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3070 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
        uint _3073 = uint(isnan(14.0) ? _3070 : (isnan(_3070) ? 14.0 : min(_3070, 14.0)));
        uvec4 _3078 = texelFetch(g_lightClusterGridBuffer, int(((_3073 << 2u) + (_3059 << 6u)) >> 2u));
        uint _3079 = _3078.x;
        uint _3080 = _3047.z;
        float _3159;
        float _3161;
        float _3163;
        float _3165;
        float _3167;
        float _3169;
        if (((((1u << ((_3080 >> 4u) & 15u)) + 4294967295u) & _3079) == 0u) || ((_3080 & 240u) == 0u))
        {
            _3159 = 0.0;
            _3161 = 0.0;
            _3163 = 0.0;
            _3165 = 0.0;
            _3167 = 0.0;
            _3169 = 0.0;
        }
        else
        {
            float _3160;
            float _3162;
            float _3164;
            float _3166;
            float _3168;
            float _3170;
            float _3304 = 0.0;
            float _3305 = 0.0;
            float _3306 = 0.0;
            float _3307 = 0.0;
            float _3308 = 0.0;
            float _3309 = 0.0;
            uint _3310 = 0u;
            uint _3319;
            bool _3320;
            for (;;)
            {
                _3319 = texelFetch(g_lightClassification, int((((_3073 << 5u) + (_3059 << 9u)) + (_3310 << 2u)) >> 2u)).x;
                _3320 = _3319 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3320)
                {
                    frontier_phi_66_pred = _3309;
                    frontier_phi_66_pred_1 = _3308;
                    frontier_phi_66_pred_2 = _3307;
                    frontier_phi_66_pred_3 = _3306;
                    frontier_phi_66_pred_4 = _3305;
                    frontier_phi_66_pred_5 = _3304;
                }
                else
                {
                    float _3428;
                    float _3429;
                    float _3430;
                    float _3431;
                    float _3432;
                    float _3433;
                    uint _3434;
                    _3428 = _3304;
                    _3429 = _3305;
                    _3430 = _3306;
                    _3431 = _3307;
                    _3432 = _3308;
                    _3433 = _3309;
                    _3434 = _3319;
                    float _3360;
                    float _3361;
                    float _3362;
                    float _3363;
                    float _3364;
                    float _3365;
                    for (;;)
                    {
                        uint _3438 = uint(findLSB(_3434)) + (_3310 << 5u);
                        uint _3435 = (_3434 + 4294967295u) & _3434;
                        uint _3440 = _3438 * 48u;
                        vec4 _3454 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3440)).x, texelFetch(g_PointLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3440 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3440 + 3u)).x));
                        uint _3460 = (_3438 * 48u) + 4u;
                        vec4 _3473 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3460)).x, texelFetch(g_PointLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3460 + 3u)).x));
                        uint _3479 = (_3438 * 48u) + 8u;
                        vec3 _3490 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3479)).x, texelFetch(g_PointLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3479 + 2u)).x));
                        float _3494 = _3454.x - _2138;
                        float _3495 = _3454.y - _2139;
                        float _3496 = _3454.z - _2140;
                        float _3497 = dot(vec3(_3494, _3495, _3496), vec3(_3494, _3495, _3496));
                        float _3500 = inversesqrt(_3497);
                        float _3501 = _3500 * _3494;
                        float _3502 = _3500 * _3495;
                        float _3503 = _3500 * _3496;
                        float _3504 = dot(vec3(_1004, _1007, _1010), vec3(_3501, _3502, _3503));
                        float _3509 = 1.0 - (_3497 * _3454.w);
                        float _4914 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                        float _3510 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
                        float _3511 = sqrt(_3497) * _3473.w;
                        float _3514 = 1.39999997615814208984375 / (_3511 + 1.39999997615814208984375);
                        float _3515 = _3514 * _3514;
                        float _3518 = ((1.0 - _3515) * _3504) + _3515;
                        float _3521 = _3511 * _3511;
                        float _3525 = ((isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0))) * _3510) / ((_3521 * 0.699999988079071044921875) + 1.0);
                        float _3529 = (-0.0) - _2138;
                        float _3530 = (-0.0) - _2139;
                        float _3531 = (-0.0) - _2140;
                        float _3535 = inversesqrt(dot(vec3(_3529, _3530, _3531), vec3(_3529, _3530, _3531)));
                        float _3536 = _3535 * _3529;
                        float _3537 = _3535 * _3530;
                        float _3538 = _3535 * _3531;
                        float _3545 = exp2(log2(1.0 / ((_3521 * 3.5) + 5.0)) * 0.25);
                        float _3546 = 1.0 - _1079;
                        float _3553 = sqrt(1.0 - ((1.0 - (_3546 * _3546)) * (1.0 - (_3545 * _3545))));
                        float _3554 = _3553 * _3553;
                        float _3555 = _3554 * _3554;
                        float _3556 = _3536 + _3501;
                        float _3557 = _3537 + _3502;
                        float _3558 = _3538 + _3503;
                        float _3562 = inversesqrt(dot(vec3(_3556, _3557, _3558), vec3(_3556, _3557, _3558)));
                        float _3566 = dot(vec3(_1004, _1007, _1010), vec3(_3536, _3537, _3538));
                        float _4930 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                        float _3569 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
                        float _3570 = dot(vec3(_1004, _1007, _1010), vec3(_3562 * _3556, _3562 * _3557, _3562 * _3558));
                        float _4941 = isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0));
                        float _3573 = isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0));
                        float _3577 = ((_3573 * _3573) * (_3555 + (-1.0))) + 1.0;
                        float _3578 = _3514 * _3554;
                        float _3579 = _3578 * _3578;
                        float _3582 = ((1.0 - _3579) * _3504) + _3579;
                        float _4952 = isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0));
                        float _3583 = isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0));
                        float _3584 = 1.0 - _3554;
                        float _3594 = (0.5 / (((_3583 * ((_3569 * _3584) + _3554)) + 9.9999999392252902907785028219223e-09) + (((_3583 * _3584) + _3554) * _3569))) * _3583;
                        float _4963 = isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0));
                        float _3605 = (((_3555 * 3.1415927410125732421875) * (isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0)))) / ((_3577 * _3577) * ((_3521 * 2.1991131305694580078125) + 3.141590118408203125))) * _3510;
                        _3363 = (_3525 * _3473.x) + _3431;
                        _3364 = (_3525 * _3473.y) + _3432;
                        _3365 = (_3525 * _3473.z) + _3433;
                        _3360 = (_3605 * _3490.x) + _3428;
                        _3361 = (_3605 * _3490.y) + _3429;
                        _3362 = (_3605 * _3490.z) + _3430;
                        if (_3435 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3428 = _3360;
                            _3429 = _3361;
                            _3430 = _3362;
                            _3431 = _3363;
                            _3432 = _3364;
                            _3433 = _3365;
                            _3434 = _3435;
                        }
                    }
                    frontier_phi_66_pred = _3365;
                    frontier_phi_66_pred_1 = _3364;
                    frontier_phi_66_pred_2 = _3363;
                    frontier_phi_66_pred_3 = _3362;
                    frontier_phi_66_pred_4 = _3361;
                    frontier_phi_66_pred_5 = _3360;
                }
                _3170 = frontier_phi_66_pred;
                _3168 = frontier_phi_66_pred_1;
                _3166 = frontier_phi_66_pred_2;
                _3164 = frontier_phi_66_pred_3;
                _3162 = frontier_phi_66_pred_4;
                _3160 = frontier_phi_66_pred_5;
                uint _3311 = _3310 + 1u;
                if (_3311 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3304 = _3160;
                    _3305 = _3162;
                    _3306 = _3164;
                    _3307 = _3166;
                    _3308 = _3168;
                    _3309 = _3170;
                    _3310 = _3311;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3159 = _3160;
            _3161 = _3162;
            _3163 = _3164;
            _3165 = _3166;
            _3167 = _3168;
            _3169 = _3170;
        }
        uvec4 _3173 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3174 = _3173.z;
        uint _3176 = (_3174 >> 8u) & 15u;
        float _3272;
        float _3274;
        float _3276;
        float _3278;
        float _3280;
        float _3282;
        if (((4294967295u << _3176) & _3079) == 0u)
        {
            _3272 = _3159;
            _3274 = _3161;
            _3276 = _3163;
            _3278 = _3165;
            _3280 = _3167;
            _3282 = _3169;
        }
        else
        {
            float _3297 = inversesqrt(dot(vec3(_2138, _2139, _2140), vec3(_2138, _2139, _2140)));
            float _3298 = _3297 * _2138;
            float _3299 = _3297 * _2139;
            float _3300 = _3297 * _2140;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3176 < ((_3174 >> 12u) & 15u))
            {
                float _3273;
                float _3275;
                float _3277;
                float _3279;
                float _3281;
                float _3283;
                float _3411 = _3159;
                float _3412 = _3161;
                float _3413 = _3163;
                float _3414 = _3165;
                float _3415 = _3167;
                float _3416 = _3169;
                uint _3417 = _3176;
                uint _3426;
                bool _3427;
                for (;;)
                {
                    _3426 = texelFetch(g_lightClassification, int((((_3073 << 5u) + (_3059 << 9u)) + (_3417 << 2u)) >> 2u)).x;
                    _3427 = _3426 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3427)
                    {
                        frontier_phi_72_pred = _3416;
                        frontier_phi_72_pred_1 = _3415;
                        frontier_phi_72_pred_2 = _3414;
                        frontier_phi_72_pred_3 = _3413;
                        frontier_phi_72_pred_4 = _3412;
                        frontier_phi_72_pred_5 = _3411;
                    }
                    else
                    {
                        float _3610;
                        float _3611;
                        float _3612;
                        float _3613;
                        float _3614;
                        float _3615;
                        float _3903;
                        float _3904;
                        float _3905;
                        float _3906;
                        float _3907;
                        float _3908;
                        float _3623 = _3411;
                        float _3624 = _3412;
                        float _3625 = _3413;
                        float _3626 = _3414;
                        float _3627 = _3415;
                        float _3628 = _3416;
                        uint _3629 = _3426;
                        uint _3630;
                        vec4 _3655;
                        float _3656;
                        vec4 _3671;
                        vec3 _3683;
                        vec4 _3698;
                        vec4 _3713;
                        float _3759;
                        bool _3760;
                        for (;;)
                        {
                            uint _3640 = ((_3417 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3629));
                            _3630 = (_3629 + 4294967295u) & _3629;
                            uint _3642 = _3640 * 40u;
                            _3655 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3642)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 3u)).x));
                            _3656 = _3655.w;
                            uint _3658 = (_3640 * 40u) + 4u;
                            _3671 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3658)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 3u)).x));
                            uint _3673 = (_3640 * 40u) + 8u;
                            _3683 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3673)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 2u)).x));
                            uint _3685 = (_3640 * 40u) + 16u;
                            _3698 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3685)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 3u)).x));
                            uint _3700 = (_3640 * 40u) + 20u;
                            _3713 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3700)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 3u)).x));
                            uint _3715 = (_3640 * 40u) + 24u;
                            vec4 _3728 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3715)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 3u)).x));
                            uint _3734 = (_3640 * 40u) + 28u;
                            vec4 _3747 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3734)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3734 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3734 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3734 + 3u)).x));
                            _3759 = fma(_2140, _3747.z, fma(_2139, _3747.y, _3747.x * _2138)) + _3747.w;
                            _3760 = !((fma(_2140, _3728.z, fma(_2139, _3728.y, _3728.x * _2138)) + _3728.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3760)
                            {
                                float _3787 = _3655.x - _2138;
                                float _3788 = _3655.y - _2139;
                                float _3789 = _3655.z - _2140;
                                float _3790 = dot(vec3(_3787, _3788, _3789), vec3(_3787, _3788, _3789));
                                float _3793 = inversesqrt(_3790);
                                float _3794 = _3793 * _3787;
                                float _3795 = _3793 * _3788;
                                float _3796 = _3793 * _3789;
                                float _3800 = 1.0 - (_3790 / (_3656 * _3656));
                                float _4974 = isnan(0.0) ? _3800 : (isnan(_3800) ? 0.0 : max(_3800, 0.0));
                                float _3801 = isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0));
                                float _3805 = sqrt(_3790) * _3671.w;
                                float _3807 = 1.39999997615814208984375 / (_3805 + 1.39999997615814208984375);
                                float _3808 = _3807 * _3807;
                                float _3811 = ((1.0 - _3808) * dot(vec3(_3794, _3795, _3796), vec3(_1004, _1007, _1010))) + _3808;
                                float _3814 = _3805 * _3805;
                                float _3818 = (fma(_2140, _3698.z, fma(_2139, _3698.y, _3698.x * _2138)) + _3698.w) / _3759;
                                float _3819 = (fma(_2140, _3713.z, fma(_2139, _3713.y, _3713.x * _2138)) + _3713.w) / _3759;
                                float _3823 = 1.0 - dot(vec2(_3818, _3819), vec2(_3818, _3819));
                                float _4990 = isnan(0.0) ? _3823 : (isnan(_3823) ? 0.0 : max(_3823, 0.0));
                                float _3824 = isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0));
                                float _3825 = _3824 * (((isnan(0.0) ? _3811 : (isnan(_3811) ? 0.0 : max(_3811, 0.0))) * _3801) / ((_3814 * 0.699999988079071044921875) + 1.0));
                                float _3837 = exp2(log2(1.0 / ((_3814 * 3.5) + 5.0)) * 0.25);
                                float _3838 = 1.0 - _1079;
                                float _3845 = sqrt(1.0 - ((1.0 - (_3838 * _3838)) * (1.0 - (_3837 * _3837))));
                                float _3846 = _3845 * _3845;
                                float _3847 = _3846 * _3846;
                                float _3848 = _3794 - _3298;
                                float _3849 = _3795 - _3299;
                                float _3850 = _3796 - _3300;
                                float _3854 = inversesqrt(dot(vec3(_3848, _3849, _3850), vec3(_3848, _3849, _3850)));
                                float _3858 = dot(vec3(_1004, _1007, _1010), vec3((-0.0) - _3298, (-0.0) - _3299, (-0.0) - _3300));
                                float _5001 = isnan(0.0) ? _3858 : (isnan(_3858) ? 0.0 : max(_3858, 0.0));
                                float _3861 = isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0));
                                float _3862 = dot(vec3(_1004, _1007, _1010), vec3(_3854 * _3848, _3854 * _3849, _3854 * _3850));
                                float _5012 = isnan(0.0) ? _3862 : (isnan(_3862) ? 0.0 : max(_3862, 0.0));
                                float _3865 = isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0));
                                float _3869 = ((_3865 * _3865) * (_3847 + (-1.0))) + 1.0;
                                float _3870 = _3807 * _3846;
                                float _3871 = _3870 * _3870;
                                float _3877 = ((1.0 - _3871) * dot(vec3(_1004, _1007, _1010), vec3(_3794, _3795, _3796))) + _3871;
                                float _5023 = isnan(0.0) ? _3877 : (isnan(_3877) ? 0.0 : max(_3877, 0.0));
                                float _3878 = isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0));
                                float _3879 = 1.0 - _3846;
                                float _3889 = (0.5 / (((_3878 * ((_3861 * _3879) + _3846)) + 9.9999999392252902907785028219223e-09) + (((_3878 * _3879) + _3846) * _3861))) * _3878;
                                float _5034 = isnan(0.0) ? _3889 : (isnan(_3889) ? 0.0 : max(_3889, 0.0));
                                float _3899 = (_3824 * _3801) * (((_3847 * 3.1415927410125732421875) * (isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0)))) / ((_3869 * _3869) * ((_3814 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3825 * _3671.y;
                                frontier_phi_78_pred_1 = _3825 * _3671.x;
                                frontier_phi_78_pred_2 = _3899 * _3683.z;
                                frontier_phi_78_pred_3 = _3899 * _3683.y;
                                frontier_phi_78_pred_4 = _3899 * _3683.x;
                                frontier_phi_78_pred_5 = _3825 * _3671.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3907 = frontier_phi_78_pred;
                            _3906 = frontier_phi_78_pred_1;
                            _3905 = frontier_phi_78_pred_2;
                            _3904 = frontier_phi_78_pred_3;
                            _3903 = frontier_phi_78_pred_4;
                            _3908 = frontier_phi_78_pred_5;
                            _3613 = _3906 + _3626;
                            _3614 = _3907 + _3627;
                            _3615 = _3908 + _3628;
                            _3610 = _3903 + _3623;
                            _3611 = _3904 + _3624;
                            _3612 = _3905 + _3625;
                            if (_3630 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3623 = _3610;
                                _3624 = _3611;
                                _3625 = _3612;
                                _3626 = _3613;
                                _3627 = _3614;
                                _3628 = _3615;
                                _3629 = _3630;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3615;
                        frontier_phi_72_pred_1 = _3614;
                        frontier_phi_72_pred_2 = _3613;
                        frontier_phi_72_pred_3 = _3612;
                        frontier_phi_72_pred_4 = _3611;
                        frontier_phi_72_pred_5 = _3610;
                    }
                    _3283 = frontier_phi_72_pred;
                    _3281 = frontier_phi_72_pred_1;
                    _3279 = frontier_phi_72_pred_2;
                    _3277 = frontier_phi_72_pred_3;
                    _3275 = frontier_phi_72_pred_4;
                    _3273 = frontier_phi_72_pred_5;
                    uint _3418 = _3417 + 1u;
                    if (_3418 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3411 = _3273;
                        _3412 = _3275;
                        _3413 = _3277;
                        _3414 = _3279;
                        _3415 = _3281;
                        _3416 = _3283;
                        _3417 = _3418;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3283;
                frontier_phi_60_61_ladder_1 = _3281;
                frontier_phi_60_61_ladder_2 = _3277;
                frontier_phi_60_61_ladder_3 = _3275;
                frontier_phi_60_61_ladder_4 = _3273;
                frontier_phi_60_61_ladder_5 = _3279;
            }
            else
            {
                frontier_phi_60_61_ladder = _3169;
                frontier_phi_60_61_ladder_1 = _3167;
                frontier_phi_60_61_ladder_2 = _3163;
                frontier_phi_60_61_ladder_3 = _3161;
                frontier_phi_60_61_ladder_4 = _3159;
                frontier_phi_60_61_ladder_5 = _3165;
            }
            _3272 = frontier_phi_60_61_ladder_4;
            _3274 = frontier_phi_60_61_ladder_3;
            _3276 = frontier_phi_60_61_ladder_2;
            _3278 = frontier_phi_60_61_ladder_5;
            _3280 = frontier_phi_60_61_ladder_1;
            _3282 = frontier_phi_60_61_ladder;
        }
        float _3287 = isnan(1.0) ? _1063 : (isnan(_1063) ? 1.0 : min(_1063, 1.0));
        _3092 = (_3287 * _3278) + _2604;
        _3094 = (_3287 * _3280) + _2606;
        _3096 = (_3287 * _3282) + _2608;
        _3098 = ((_3272 * _1047) * _3287) + _2942;
        _3100 = ((_3274 * _1049) * _3287) + _2944;
        _3102 = ((_3276 * _1050) * _3287) + _2946;
    }
    else
    {
        _3092 = _2604;
        _3094 = _2606;
        _3096 = _2608;
        _3098 = _2942;
        _3100 = _2944;
        _3102 = _2946;
    }
    float _5050 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    float _5061 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _5072 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    uint _3122 = _267 + 6u;
    float _3130 = _985 / cbSceneParam._m0[86u].x;
    float _3131 = _986 / cbSceneParam._m0[86u].y;
    vec4 _3145 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3130, _3131, (log2((isnan(cbSceneParam._m0[77u].w) ? _920 : (isnan(_920) ? cbSceneParam._m0[77u].w : min(_920, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3147 = _3145.x;
    float _3148 = _3145.y;
    float _3149 = _3145.z;
    float _3150 = _3145.w;
    float _3222;
    float _3224;
    float _3226;
    float _3228;
    if (_920 > cbSceneParam._m0[78u].w)
    {
        float _3184 = isnan(_920) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _920 : min(cbSceneParam._m0[80u].w, _920));
        float _3185 = _3184 / _920;
        float _3196 = _3185 * _970;
        float _3197 = _971 * _3185;
        float _3198 = (-0.0) - _3197;
        float _3200 = _3185 * _972;
        float _3202 = (cbSceneParam._m0[77u].w * _3198) / _3184;
        float _3203 = _3202 + cbSceneParam._m0[79u].w;
        float _3204 = cbSceneParam._m0[79u].w - _3197;
        float _3210 = sqrt(((_3196 * _3196) + (_3197 * _3197)) + (_3200 * _3200));
        float _3213 = (1.0 - (cbSceneParam._m0[77u].w / _3184)) * _3210;
        float _3218 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3220 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3373;
        if (abs((_3198 - _3202) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3373 = ((((_3203 > 0.0) ? exp2(_3218 * _3203) : (2.0 - exp2(_3220 * _3203))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3213;
        }
        else
        {
            float _3333 = 1.0 / cbSceneParam._m0[80u].x;
            float _3334 = isnan(_3204) ? _3203 : (isnan(_3203) ? _3204 : max(_3203, _3204));
            float _3335 = isnan(_3204) ? _3203 : (isnan(_3203) ? _3204 : min(_3203, _3204));
            float _3344 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : min(_3334, 0.0));
            float _3345 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : min(_3335, 0.0));
            _3373 = ((abs(_3210 / _3198) * cbSceneParam._m0[80u].y) * ((((_3344 - _3345) * 2.0) - ((exp2(_3218 * (isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0)))) - exp2(_3218 * (isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0))))) * _3333)) - ((exp2(_3220 * _3344) - exp2(_3220 * _3345)) * _3333))) + (_3213 * cbSceneParam._m0[80u].z);
        }
        vec4 _3375 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3130, _3131, 1.0), 0.0);
        float _3384 = exp2((_3373 * (-1.44269502162933349609375)) * (1.0 - _3375.w));
        float _3385 = log2(_3384);
        float _3401 = log2(_3150);
        _3222 = (exp2(_3401 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3385 * cbSceneParam._m0[78u].x)) * _3375.x) / cbSceneParam._m0[78u].x)) + _3147;
        _3224 = (exp2(_3401 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3385 * cbSceneParam._m0[78u].y)) * _3375.y) / cbSceneParam._m0[78u].y)) + _3148;
        _3226 = (exp2(_3401 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3385 * cbSceneParam._m0[78u].z)) * _3375.z) / cbSceneParam._m0[78u].z)) + _3149;
        _3228 = _3384 * _3150;
    }
    else
    {
        _3222 = _3147;
        _3224 = _3148;
        _3226 = _3149;
        _3228 = _3150;
    }
    float _3240 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3241 = _3240 == 3.0;
    float _3242 = log2(_3228);
    float _3249 = exp2(_3242 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5050 : (isnan(_5050) ? 1.0 : min(_5050, 1.0))) * (_3092 + ((isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))) * _1063))) + ((_3098 + ((isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0))) * _1870)) * cbPerFrame._m0[3u].x));
    float _3250 = exp2(_3242 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5061 : (isnan(_5061) ? 1.0 : min(_5061, 1.0))) * (_3094 + ((isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0))) * _1063))) + ((_3100 + ((isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0))) * _1870)) * cbPerFrame._m0[3u].x));
    float _3251 = exp2(_3242 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5072 : (isnan(_5072) ? 1.0 : min(_5072, 1.0))) * (_3096 + ((isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))) * _1063))) + ((_3102 + ((isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0))) * _1870)) * cbPerFrame._m0[3u].x));
    float _3260 = (_3240 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3260 * (_3241 ? _3249 : (_3249 + (cbSceneParam._m0[72u].w * _3222)));
    SV_Target.y = _3260 * (_3241 ? _3250 : (_3250 + (cbSceneParam._m0[72u].w * _3224)));
    SV_Target.z = _3260 * (_3241 ? _3251 : (_3251 + (cbSceneParam._m0[72u].w * _3226)));
    SV_Target.w = cbInstanceData._m0[_3122].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3122].w;
}


