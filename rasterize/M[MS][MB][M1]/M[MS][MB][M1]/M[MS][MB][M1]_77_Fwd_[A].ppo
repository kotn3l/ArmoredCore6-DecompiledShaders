#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1300;
float _3682;
float _3683;
float _3684;
float _3685;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = _236 * NORMAL.x;
    float _238 = _236 * NORMAL.y;
    float _239 = _236 * NORMAL.z;
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _249 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _249 + 1u;
    uint _258 = _249 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_249].x * cbInstanceData._m0[_249].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _295 = _289.x * cbMtdParam._m0[11u].x;
    float _296 = _289.y * cbMtdParam._m0[11u].y;
    float _297 = _289.z * cbMtdParam._m0[11u].z;
    vec4 _316 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _354 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _356 = _354.x;
    float _368 = dot(vec4(_356, _354.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _385 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_356 - _368) * cbMtdParam._m0[24u].y) + _368) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3694 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _386 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
    float _393 = (_386 * ((_316.x * cbMtdParam._m0[12u].x) - _295)) + _295;
    float _394 = (_386 * ((_316.y * cbMtdParam._m0[12u].y) - _296)) + _296;
    float _395 = (_386 * ((_316.z * cbMtdParam._m0[12u].z) - _297)) + _297;
    vec4 _408 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _425 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _427 = _425.x;
    float _428 = _425.y;
    float _429 = _425.z;
    float _438 = ((_408.z - _429) * _386) + _429;
    float _441 = ((((_408.x - _427) * _386) + _427) * 2.0) + (-1.0);
    float _443 = ((((_408.y - _428) * _386) + _428) * 2.0) + (-1.0);
    float _444 = dot(vec2(_441, _443), vec2(_441, _443));
    float _3705 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _449 = sqrt(1.0 - (isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))));
    vec4 _465 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _477 = (((_465.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _441;
    float _478 = (((_465.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _443;
    vec4 _490 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _268) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _269) + cbTextureTilingScale._m0[19u].w));
    float _492 = _490.x;
    float _493 = 1.0 - _492;
    float _521 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_492 - _493) * cbMtdParam._m0[24u].w) + _493) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3716 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _522 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
    float _530 = ((((cbMtdParam._m0[10u].x - _393) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _522) + _393;
    float _531 = ((((cbMtdParam._m0[10u].y - _394) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _522) + _394;
    float _532 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _395)) * _522) + _395;
    vec4 _544 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _558 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _560 = _558.x;
    float _578 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _268) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _269) + cbTextureTilingScale._m0[9u].w)).x - _560) * _386) + _560;
    float _582 = ((_544.x - _578) * cbMtdParam._m0[19u].z) + _578;
    float _584 = _582 - (_582 * _522);
    float _588 = (cbMtdParam._m0[19u].w * (_465.z - _438)) + _438;
    float _592 = ((cbMtdParam._m0[23u].y - _588) * _522) + _588;
    vec4 _611 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _268) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _269) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _613 = _611.x;
    float _614 = _611.y;
    float _618 = dot(vec4(cbMtdParam._m0[29u].yzw, 0.0), vec4(_237, _238, _239, 0.0));
    vec4 _633 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _268) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _269) + cbTextureTilingScale._m0[18u].w));
    float _635 = _633.x;
    float _640 = fract(_633.w + cbPerFrame._m0[22u].x);
    float _642 = (1.0 - _640) * _635;
    float _647 = ((_640 + (-1.0)) + _635) * 9.0;
    float _649 = ((_635 + (-1.0)) + _640) * 9.0;
    float _650 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _651 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _665 = (_642 * ((_633.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _650 : (isnan(_650) ? 3.0 : min(_650, 3.0))) * 3.1415927410125732421875);
    float _667 = (_642 * ((_633.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _651 : (isnan(_651) ? 3.0 : min(_651, 3.0))) * 3.1415927410125732421875);
    float _671 = inversesqrt(dot(vec3(_665, _667, 1.0), vec3(_665, _667, 1.0)));
    float _687 = (((((0.5 - _613) + ((_665 * 0.5) * _671)) * _618) + _613) * 2.0) + (-1.0);
    float _688 = (((((0.5 - _614) + ((_671 * 0.5) * _667)) * _618) + _614) * 2.0) + (-1.0);
    float _689 = dot(vec2(_687, _688), vec2(_687, _688));
    float _3747 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _705 = ((((cbMtdParam._m0[22u].z * _477) - _477) + _687) * _522) + _477;
    float _706 = ((((cbMtdParam._m0[22u].z * _478) - _478) + _688) * _522) + _478;
    float _707 = (_522 * (sqrt(1.0 - (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0)))) - _449)) + _449;
    float _709 = cbMtdParam._m0[22u].x + _465.w;
    float _712 = fma(_707, _237, fma(_706, _243 * TANGENT.x, (_229 * _221) * _705));
    float _715 = fma(_707, _238, fma(_706, _243 * TANGENT.y, (_229 * _222) * _705));
    float _718 = fma(_707, _239, fma(_706, _243 * TANGENT.z, (_229 * _223) * _705));
    float _722 = inversesqrt(dot(vec3(_712, _715, _718), vec3(_712, _715, _718)));
    float _723 = _722 * _712;
    float _724 = _722 * _715;
    float _725 = _722 * _718;
    float _3758 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _726 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
    float _3769 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _3780 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _3791 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _3802 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _3813 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _731 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _745 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _785 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _795 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _785);
    float _796 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _785);
    float _797 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _785);
    float _801 = inversesqrt(dot(vec3(_795, _796, _797), vec3(_795, _796, _797)));
    float _802 = _795 * _801;
    float _803 = _796 * _801;
    float _804 = _797 * _801;
    vec4 _809 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _811 = _809.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _982 = sqrt(((_795 * _795) + (_796 * _796)) + (_797 * _797));
        float _988 = (cbMatDynParam._m0[5u].x * _982) + cbMatDynParam._m0[5u].y;
        float _3824 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _993 = (cbMatDynParam._m0[5u].z * _982) + cbMatDynParam._m0[5u].w;
        float _3835 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) - _989)) + _989) < ((_811 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _822 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _823 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _841 = fma(_725, cbSceneParam._m0[5u].z, fma(_724, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _723));
    float _844 = fma(_725, cbSceneParam._m0[6u].z, fma(_724, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _723));
    float _847 = fma(_725, cbSceneParam._m0[7u].z, fma(_724, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _723));
    uint _860 = _249 + 9u;
    uint _861 = _860 + uint(cbMatDynParam._m0[0u].w);
    float _867 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0)))) * cbInstanceData._m0[_861].x;
    float _868 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0)))) * cbInstanceData._m0[_861].y;
    float _869 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0)))) * cbInstanceData._m0[_861].z;
    float _3846 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _870 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _3857 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _871 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _3868 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _872 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    float _873 = 1.0 - _731;
    float _874 = _870 * _873;
    float _875 = _871 * _873;
    float _876 = _872 * _873;
    float _881 = (_870 + (-0.039999999105930328369140625)) * _731;
    float _882 = (_871 + (-0.039999999105930328369140625)) * _731;
    float _883 = (_872 + (-0.039999999105930328369140625)) * _731;
    float _884 = _881 + 0.039999999105930328369140625;
    float _886 = _882 + 0.039999999105930328369140625;
    float _887 = _883 + 0.039999999105930328369140625;
    vec4 _896 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _822, cbSceneParam._m0[86u].y * _823));
    float _900 = ((isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * TEXCOORD_5.w) * _896.x;
    float _901 = dot(vec3(_723, _724, _725), vec3(_802, _803, _804));
    float _904 = _901 * 2.0;
    float _908 = (_904 * _723) - _802;
    float _909 = (_904 * _724) - _803;
    float _910 = (_904 * _725) - _804;
    float _914 = abs(dot(vec3(_802, _803, _804), vec3(_723, _724, _725)));
    float _3879 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _916 = sqrt(_726);
    float _928 = exp2((_916 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_916 * 3.0));
    float _934 = (1.0 - _928) * ((_916 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _935 = _928 * _916;
    float _963 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _967 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _971 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1299;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1025 = fma(_971, cbModelParam._m0[26u].z, fma(_967, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _963));
        float _1029 = fma(_971, cbModelParam._m0[27u].z, fma(_967, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _963));
        float _1033 = fma(_971, cbModelParam._m0[28u].z, fma(_967, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _963));
        float _1057 = _963 + _723;
        float _1058 = _967 + _724;
        float _1059 = _971 + _725;
        float _1069 = fma(_1059, cbModelParam._m0[26u].z, fma(_1058, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1057)) - _1025;
        float _1070 = fma(_1059, cbModelParam._m0[27u].z, fma(_1058, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1057)) - _1029;
        float _1071 = fma(_1059, cbModelParam._m0[28u].z, fma(_1058, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1057)) - _1033;
        float _1075 = inversesqrt(dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071)));
        float _1088 = ((_1075 * _1069) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1025 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1089 = ((_1075 * _1070) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1029 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1090 = ((_1075 * _1071) / cbModelParam._m0[34u].z) + ((((((_1033 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        vec4 _1114 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        float _1127 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1093.x + (-0.5));
        float _1129 = _1127 * (_1093.y + (-0.5));
        float _1130 = _1127 * (_1093.z + (-0.5));
        float _1137 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1100.x + (-0.5));
        float _1139 = _1137 * (_1100.y + (-0.5));
        float _1140 = _1137 * (_1100.z + (-0.5));
        float _1147 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1107.x + (-0.5));
        float _1149 = _1147 * (_1107.y + (-0.5));
        float _1150 = _1147 * (_1107.z + (-0.5));
        float _1157 = exp2((_1114.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1114.x + (-0.5));
        float _1159 = _1157 * (_1114.y + (-0.5));
        float _1160 = _1157 * (_1114.z + (-0.5));
        float _1161 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1162 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1163 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1164 = _1128 * 0.5;
        float _1165 = _1138 * 0.5;
        float _1166 = _1148 * 0.5;
        float _1167 = dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166));
        float _1172 = (_1167 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1167);
        float _1181 = (dot(vec3(_723, _724, _725), vec3(_1172 * _1164, _1172 * _1165, _1172 * _1166)) + 1.0) * 0.5;
        float _3905 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1191 = sqrt(((_1165 * _1165) + (_1164 * _1164)) + (_1166 * _1166)) / (_1161 + 9.9999997473787516355514526367188e-06);
        float _3916 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1193 = _1192 * 2.0;
        float _1197 = (1.0 - _1192) / (_1192 + 1.0);
        float _3927 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1207 = ((((1.0 - _1198) * (_1193 + 2.0)) * exp2(log2(isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * (_1193 + 1.0))) + _1198) * _1161;
        float _1208 = _1129 * 0.5;
        float _1209 = _1139 * 0.5;
        float _1210 = _1149 * 0.5;
        float _1211 = dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210));
        float _1216 = (_1211 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1211);
        float _1224 = (dot(vec3(_723, _724, _725), vec3(_1216 * _1208, _1216 * _1209, _1216 * _1210)) + 1.0) * 0.5;
        float _3938 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1233 = sqrt(((_1209 * _1209) + (_1208 * _1208)) + (_1210 * _1210)) / (_1162 + 9.9999997473787516355514526367188e-06);
        float _3949 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1235 = _1234 * 2.0;
        float _1239 = (1.0 - _1234) / (_1234 + 1.0);
        float _3960 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1249 = ((((1.0 - _1240) * (_1235 + 2.0)) * exp2(log2(isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (_1235 + 1.0))) + _1240) * _1162;
        float _1250 = _1130 * 0.5;
        float _1251 = _1140 * 0.5;
        float _1252 = _1150 * 0.5;
        float _1253 = dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252));
        float _1258 = (_1253 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1253);
        float _1266 = (dot(vec3(_723, _724, _725), vec3(_1258 * _1250, _1258 * _1251, _1258 * _1252)) + 1.0) * 0.5;
        float _3971 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1275 = sqrt(((_1251 * _1251) + (_1250 * _1250)) + (_1252 * _1252)) / (_1163 + 9.9999997473787516355514526367188e-06);
        float _3982 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1277 = _1276 * 2.0;
        float _1281 = (1.0 - _1276) / (_1276 + 1.0);
        float _3993 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1291 = ((((1.0 - _1282) * (_1277 + 2.0)) * exp2(log2(isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (_1277 + 1.0))) + _1282) * _1163;
        _1299 = _1130;
        _1301 = _1129;
        _1302 = _1128;
        _1303 = _1140;
        _1304 = _1139;
        _1305 = _1138;
        _1306 = _1150;
        _1307 = _1149;
        _1308 = _1148;
        _1309 = _1163;
        _1310 = _1162;
        _1311 = _1161;
        _1312 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0)));
        _1313 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)));
        _1314 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)));
    }
    else
    {
        _1299 = _1300;
        _1301 = _1300;
        _1302 = _1300;
        _1303 = _1300;
        _1304 = _1300;
        _1305 = _1300;
        _1306 = _1300;
        _1307 = _1300;
        _1308 = _1300;
        _1309 = _1300;
        _1310 = _1300;
        _1311 = _1300;
        _1312 = 0.0;
        _1313 = 0.0;
        _1314 = 0.0;
    }
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1342 = fma(_971, cbModelParam._m0[30u].z, fma(_967, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _963));
        float _1346 = fma(_971, cbModelParam._m0[31u].z, fma(_967, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _963));
        float _1350 = fma(_971, cbModelParam._m0[32u].z, fma(_967, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _963));
        float _1373 = _963 + _723;
        float _1374 = _967 + _724;
        float _1375 = _971 + _725;
        float _1385 = fma(_1375, cbModelParam._m0[30u].z, fma(_1374, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1373)) - _1342;
        float _1386 = fma(_1375, cbModelParam._m0[31u].z, fma(_1374, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1373)) - _1346;
        float _1387 = fma(_1375, cbModelParam._m0[32u].z, fma(_1374, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1373)) - _1350;
        float _1391 = inversesqrt(dot(vec3(_1385, _1386, _1387), vec3(_1385, _1386, _1387)));
        float _1404 = ((_1391 * _1385) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1342 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1405 = ((_1391 * _1386) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1346 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1406 = ((_1391 * _1387) / cbModelParam._m0[35u].z) + ((((((_1350 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1408 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        vec4 _1415 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        vec4 _1422 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        vec4 _1429 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        float _1441 = exp2((_1408.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1408.x + (-0.5));
        float _1443 = _1441 * (_1408.y + (-0.5));
        float _1444 = _1441 * (_1408.z + (-0.5));
        float _1451 = exp2((_1415.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1415.x + (-0.5));
        float _1453 = _1451 * (_1415.y + (-0.5));
        float _1454 = _1451 * (_1415.z + (-0.5));
        float _1461 = exp2((_1422.w + (-0.5)) * 20.0) * 2.0;
        float _1462 = _1461 * (_1422.x + (-0.5));
        float _1463 = _1461 * (_1422.y + (-0.5));
        float _1464 = _1461 * (_1422.z + (-0.5));
        float _1471 = exp2((_1429.w + (-0.5)) * 20.0) * 2.0;
        float _1472 = _1471 * (_1429.x + (-0.5));
        float _1473 = _1471 * (_1429.y + (-0.5));
        float _1474 = _1471 * (_1429.z + (-0.5));
        float _1475 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1476 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1477 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1478 = _1442 * 0.5;
        float _1479 = _1452 * 0.5;
        float _1480 = _1462 * 0.5;
        float _1481 = dot(vec3(_1478, _1479, _1480), vec3(_1478, _1479, _1480));
        float _1486 = (_1481 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1481);
        float _1494 = (dot(vec3(_723, _724, _725), vec3(_1486 * _1478, _1486 * _1479, _1486 * _1480)) + 1.0) * 0.5;
        float _4034 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1503 = sqrt(((_1479 * _1479) + (_1478 * _1478)) + (_1480 * _1480)) / (_1475 + 9.9999997473787516355514526367188e-06);
        float _4045 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1505 = _1504 * 2.0;
        float _1509 = (1.0 - _1504) / (_1504 + 1.0);
        float _4056 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1519 = ((((1.0 - _1510) * (_1505 + 2.0)) * exp2(log2(isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (_1505 + 1.0))) + _1510) * _1475;
        float _1520 = _1443 * 0.5;
        float _1521 = _1453 * 0.5;
        float _1522 = _1463 * 0.5;
        float _1523 = dot(vec3(_1520, _1521, _1522), vec3(_1520, _1521, _1522));
        float _1528 = (_1523 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1523);
        float _1536 = (dot(vec3(_723, _724, _725), vec3(_1528 * _1520, _1528 * _1521, _1528 * _1522)) + 1.0) * 0.5;
        float _4067 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1545 = sqrt(((_1521 * _1521) + (_1520 * _1520)) + (_1522 * _1522)) / (_1476 + 9.9999997473787516355514526367188e-06);
        float _4078 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1547 = _1546 * 2.0;
        float _1551 = (1.0 - _1546) / (_1546 + 1.0);
        float _4089 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1561 = ((((1.0 - _1552) * (_1547 + 2.0)) * exp2(log2(isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * (_1547 + 1.0))) + _1552) * _1476;
        float _1562 = _1444 * 0.5;
        float _1563 = _1454 * 0.5;
        float _1564 = _1464 * 0.5;
        float _1565 = dot(vec3(_1562, _1563, _1564), vec3(_1562, _1563, _1564));
        float _1570 = (_1565 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1565);
        float _1578 = (dot(vec3(_723, _724, _725), vec3(_1570 * _1562, _1570 * _1563, _1570 * _1564)) + 1.0) * 0.5;
        float _4100 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1587 = sqrt(((_1563 * _1563) + (_1562 * _1562)) + (_1564 * _1564)) / (_1477 + 9.9999997473787516355514526367188e-06);
        float _4111 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1589 = _1588 * 2.0;
        float _1593 = (1.0 - _1588) / (_1588 + 1.0);
        float _4122 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1603 = ((((1.0 - _1594) * (_1589 + 2.0)) * exp2(log2(isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_1589 + 1.0))) + _1594) * _1477;
        _1611 = _1444;
        _1612 = _1443;
        _1613 = _1442;
        _1614 = _1454;
        _1615 = _1453;
        _1616 = _1452;
        _1617 = _1464;
        _1618 = _1463;
        _1619 = _1462;
        _1620 = _1477;
        _1621 = _1476;
        _1622 = _1475;
        _1623 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)));
        _1624 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)));
        _1625 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)));
    }
    else
    {
        _1611 = _1300;
        _1612 = _1300;
        _1613 = _1300;
        _1614 = _1300;
        _1615 = _1300;
        _1616 = _1300;
        _1617 = _1300;
        _1618 = _1300;
        _1619 = _1300;
        _1620 = _1300;
        _1621 = _1300;
        _1622 = _1300;
        _1623 = 0.0;
        _1624 = 0.0;
        _1625 = 0.0;
    }
    float _1635 = (cbModelParam._m0[1u].x * (_1623 - _1312)) + _1312;
    float _1636 = (cbModelParam._m0[1u].x * (_1624 - _1313)) + _1313;
    float _1637 = (cbModelParam._m0[1u].x * (_1625 - _1314)) + _1314;
    float _1658 = fma(_1637, cbSceneParam._m0[89u].z, fma(_1636, cbSceneParam._m0[89u].y, _1635 * cbSceneParam._m0[89u].x));
    float _1661 = fma(_1637, cbSceneParam._m0[90u].z, fma(_1636, cbSceneParam._m0[90u].y, _1635 * cbSceneParam._m0[90u].x));
    float _1664 = fma(_1637, cbSceneParam._m0[91u].z, fma(_1636, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1635));
    float _1679 = _908 * 0.5;
    float _1680 = _909 * 0.5;
    float _1681 = _910 * 0.5;
    float _1682 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1613, _1616, _1619, _1622));
    float _1685 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1612, _1615, _1618, _1621));
    float _1688 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1611, _1614, _1617, _1620));
    float _1722;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1695 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1299, _1303, _1306, _1309));
        float _1699 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1301, _1304, _1307, _1310));
        float _1703 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1302, _1305, _1308, _1311));
        float _1710 = dot(vec4(cbModelParam._m0[39u]), vec4(_1679, _1680, _1681, 1.0));
        _1722 = dot(vec3(isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)), isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)), isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1710) ? 0.0 : (isnan(0.0) ? _1710 : max(0.0, _1710))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1722 = 1.0;
    }
    float _1733;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1724 = dot(vec4(cbModelParam._m0[40u]), vec4(_1679, _1680, _1681, 1.0));
        _1733 = dot(vec3(isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)), isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)), isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1724) ? 0.0 : (isnan(0.0) ? _1724 : max(0.0, _1724))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1733 = 1.0;
    }
    float _1737 = (_1733 * cbModelParam._m0[1u].x) + (_1722 * (1.0 - cbModelParam._m0[1u].x));
    float _1747 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _726);
    float _1748 = isnan(_1747) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1747 : min(cbModelParam._m0[25u].z, _1747));
    float _1830;
    float _1832;
    float _1834;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1797 = fma(_971, cbModelParam._m0[13u].z, fma(_967, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _963)) + cbModelParam._m0[13u].w;
        float _1801 = fma(_971, cbModelParam._m0[14u].z, fma(_967, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _963)) + cbModelParam._m0[14u].w;
        float _1805 = fma(_971, cbModelParam._m0[15u].z, fma(_967, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _963)) + cbModelParam._m0[15u].w;
        float _1808 = fma(_910, cbModelParam._m0[13u].z, fma(_909, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _908));
        float _1811 = fma(_910, cbModelParam._m0[14u].z, fma(_909, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _908));
        float _1814 = fma(_910, cbModelParam._m0[15u].z, fma(_909, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _908));
        float _1842;
        if (_1808 > 0.0)
        {
            _1842 = abs((1.0 - _1797) / _1808);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1808 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1797 + 1.0) / _1808);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1842 = frontier_phi_17_15_ladder;
        }
        float _2045;
        if (_1811 > 0.0)
        {
            _2045 = abs((1.0 - _1801) / _1811);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1811 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1801 + 1.0) / _1811);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2045 = frontier_phi_26_22_ladder;
        }
        float _2299;
        if (_1814 > 0.0)
        {
            _2299 = abs((1.0 - _1805) / _1814);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1814 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1805 + 1.0) / _1814);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2299 = frontier_phi_38_33_ladder;
        }
        float _2301 = isnan(_2045) ? _1842 : (isnan(_1842) ? _2045 : min(_1842, _2045));
        float _2302 = isnan(_2299) ? _2301 : (isnan(_2301) ? _2299 : min(_2301, _2299));
        float _2306 = (_2302 * _1808) + _1797;
        float _2307 = (_2302 * _1811) + _1801;
        float _2308 = (_2302 * _1814) + _1805;
        float _2309 = _2302 * 9.9999997473787516355514526367188e-05;
        float _2311 = (-1.0) - _2309;
        float _2313 = _2309 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2308 > _2313) || ((_2308 < _2311) || ((_2307 > _2313) || ((_2307 < _2311) || ((_2306 < _2311) || (_2306 > _2313))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2436 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2308, cbModelParam._m0[9u].z, fma(_2307, cbModelParam._m0[9u].y, _2306 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2308, cbModelParam._m0[10u].z, fma(_2307, cbModelParam._m0[10u].y, _2306 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2308, cbModelParam._m0[11u].z, fma(_2307, cbModelParam._m0[11u].y, _2306 * cbModelParam._m0[11u].x))), _1748);
            frontier_phi_16_38_ladder = _2436.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2436.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2436.x * cbModelParam._m0[1u].y;
        }
        _1830 = frontier_phi_16_38_ladder_2;
        _1832 = frontier_phi_16_38_ladder_1;
        _1834 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1818 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_908, _909, _910), _1748);
        _1830 = _1818.x * cbModelParam._m0[1u].y;
        _1832 = _1818.y * cbModelParam._m0[1u].y;
        _1834 = _1818.z * cbModelParam._m0[1u].y;
    }
    float _1838 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _726);
    float _1839 = isnan(_1838) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1838 : min(cbModelParam._m0[25u].w, _1838));
    float _1929;
    float _1931;
    float _1933;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1893 = fma(_971, cbModelParam._m0[21u].z, fma(_967, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _963)) + cbModelParam._m0[21u].w;
        float _1897 = fma(_971, cbModelParam._m0[22u].z, fma(_967, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _963)) + cbModelParam._m0[22u].w;
        float _1901 = fma(_971, cbModelParam._m0[23u].z, fma(_967, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _963)) + cbModelParam._m0[23u].w;
        float _1904 = fma(_910, cbModelParam._m0[21u].z, fma(_909, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _908));
        float _1907 = fma(_910, cbModelParam._m0[22u].z, fma(_909, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _908));
        float _1910 = fma(_910, cbModelParam._m0[23u].z, fma(_909, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _908));
        float _2050;
        if (_1904 > 0.0)
        {
            _2050 = abs((1.0 - _1893) / _1904);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1904 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1893 + 1.0) / _1904);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2050 = frontier_phi_28_24_ladder;
        }
        float _2326;
        if (_1907 > 0.0)
        {
            _2326 = abs((1.0 - _1897) / _1907);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1907 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1897 + 1.0) / _1907);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2326 = frontier_phi_40_35_ladder;
        }
        float _2539;
        if (_1910 > 0.0)
        {
            _2539 = abs((1.0 - _1901) / _1910);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1910 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1901 + 1.0) / _1910);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2539 = frontier_phi_49_46_ladder;
        }
        float _2541 = isnan(_2326) ? _2050 : (isnan(_2050) ? _2326 : min(_2050, _2326));
        float _2542 = isnan(_2539) ? _2541 : (isnan(_2541) ? _2539 : min(_2541, _2539));
        float _2546 = (_2542 * _1904) + _1893;
        float _2547 = (_2542 * _1907) + _1897;
        float _2548 = (_2542 * _1910) + _1901;
        float _2549 = _2542 * 9.9999997473787516355514526367188e-05;
        float _2550 = (-1.0) - _2549;
        float _2552 = _2549 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2548 > _2552) || ((_2548 < _2550) || ((_2547 > _2552) || ((_2547 < _2550) || ((_2546 < _2550) || (_2546 > _2552))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2747 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2548, cbModelParam._m0[17u].z, fma(_2547, cbModelParam._m0[17u].y, _2546 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2548, cbModelParam._m0[18u].z, fma(_2547, cbModelParam._m0[18u].y, _2546 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2548, cbModelParam._m0[19u].z, fma(_2547, cbModelParam._m0[19u].y, _2546 * cbModelParam._m0[19u].x))), _1839);
            frontier_phi_25_49_ladder = _2747.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2747.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2747.x * cbModelParam._m0[1u].z;
        }
        _1929 = frontier_phi_25_49_ladder_2;
        _1931 = frontier_phi_25_49_ladder_1;
        _1933 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1913 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_908, _909, _910), _1839);
        _1929 = _1913.x * cbModelParam._m0[1u].z;
        _1931 = _1913.y * cbModelParam._m0[1u].z;
        _1933 = _1913.z * cbModelParam._m0[1u].z;
    }
    float _1946 = (((_934 * _884) + _935) * _900) * ((cbModelParam._m0[1u].w * (_1929 - _1830)) + _1830);
    float _1948 = (((_934 * _886) + _935) * _900) * ((cbModelParam._m0[1u].w * (_1931 - _1832)) + _1832);
    float _1950 = (((_934 * _887) + _935) * _900) * ((cbModelParam._m0[1u].w * (_1933 - _1834)) + _1834);
    float _1953 = fma(_1950, cbSceneParam._m0[89u].z, fma(_1948, cbSceneParam._m0[89u].y, _1946 * cbSceneParam._m0[89u].x));
    float _1956 = fma(_1950, cbSceneParam._m0[90u].z, fma(_1948, cbSceneParam._m0[90u].y, _1946 * cbSceneParam._m0[90u].x));
    float _1959 = fma(_1950, cbSceneParam._m0[91u].z, fma(_1948, cbSceneParam._m0[91u].y, _1946 * cbSceneParam._m0[91u].x));
    uvec4 _1969 = floatBitsToUint(cbInstanceData._m0[_249 + 5u]);
    uint _1971 = _1969.x * 14u;
    uint _1972 = _1971 + 13u;
    float _1979 = _900 + (-1.0);
    float _1984 = (cbLight._m0[_1972].x * _1979) + 1.0;
    float _1985 = (cbLight._m0[_1972].y * _1979) + 1.0;
    float _1986 = (cbLight._m0[_1972].z * _1979) + 1.0;
    float _1987 = (cbLight._m0[_1972].w * _1979) + 1.0;
    uint _1988 = _1971 + 5u;
    float _1994 = isnan(1.0) ? _1985 : (isnan(_1985) ? 1.0 : min(_1985, 1.0));
    uint _1998 = _1971 + 4u;
    float _2004 = isnan(1.0) ? _1984 : (isnan(_1984) ? 1.0 : min(_1984, 1.0));
    uint _2008 = _1971 | 1u;
    float _2019 = dot(vec3(cbLight._m0[_1971].xyz), vec3(_723, _724, _725));
    float _2022 = dot(vec3(cbLight._m0[_2008].xyz), vec3(_723, _724, _725));
    float _4258 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
    float _4269 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2027 = (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * 0.3183098733425140380859375;
    float _2029 = (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * 0.3183098733425140380859375;
    float _2036 = ((cbLight._m0[_1988].x * _1994) * _2029) + ((cbLight._m0[_1998].x * _2004) * _2027);
    float _2037 = ((_1994 * cbLight._m0[_1988].y) * _2029) + ((_2004 * cbLight._m0[_1998].y) * _2027);
    float _2038 = ((_1994 * cbLight._m0[_1988].z) * _2029) + ((_2004 * cbLight._m0[_1998].z) * _2027);
    uvec4 _2042 = floatBitsToUint(cbLight._m0[_1971 + 12u]);
    bool _2044 = _2042.x == 0u;
    float _2055;
    float _2057;
    float _2059;
    if (_2044)
    {
        _2055 = _2036;
        _2057 = _2037;
        _2059 = _2038;
    }
    else
    {
        uint _2063 = _1971 + 6u;
        float _2079 = (dot(vec3(cbLight._m0[_1971 + 2u].xyz), vec3(_723, _724, _725)) * 0.5) + 0.5;
        float _2080 = _2079 * _2079;
        float _4280 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
        float _2081 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _2082 = isnan(1.0) ? _1986 : (isnan(_1986) ? 1.0 : min(_1986, 1.0));
        _2055 = (((cbLight._m0[_2063].x * 0.3183098733425140380859375) * _2081) * _2082) + _2036;
        _2057 = (((cbLight._m0[_2063].y * 0.3183098733425140380859375) * _2081) * _2082) + _2037;
        _2059 = (((cbLight._m0[_2063].z * 0.3183098733425140380859375) * _2081) * _2082) + _2038;
    }
    bool _2062 = _2042.y == 0u;
    float _2100;
    float _2102;
    float _2104;
    if (_2062)
    {
        _2100 = _2055;
        _2102 = _2057;
        _2104 = _2059;
    }
    else
    {
        uint _2270 = _1971 + 7u;
        float _2286 = (dot(vec3(cbLight._m0[_1971 + 3u].xyz), vec3(_723, _724, _725)) * 0.5) + 0.5;
        float _2287 = _2286 * _2286;
        float _4296 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2288 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _2289 = isnan(1.0) ? _1987 : (isnan(_1987) ? 1.0 : min(_1987, 1.0));
        _2100 = (((cbLight._m0[_2270].x * 0.3183098733425140380859375) * _2288) * _2289) + _2055;
        _2102 = (((cbLight._m0[_2270].y * 0.3183098733425140380859375) * _2288) * _2289) + _2057;
        _2104 = (((cbLight._m0[_2270].z * 0.3183098733425140380859375) * _2288) * _2289) + _2059;
    }
    uint _2107 = _1971 + 8u;
    float _2120 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1971].w)) * _726) * 0.949999988079071044921875);
    float _2121 = _2120 * _2120;
    float _2122 = cbLight._m0[_1971].x + _802;
    float _2123 = cbLight._m0[_1971].y + _803;
    float _2124 = cbLight._m0[_1971].z + _804;
    float _2128 = inversesqrt(dot(vec3(_2122, _2123, _2124), vec3(_2122, _2123, _2124)));
    float _2129 = _2128 * _2122;
    float _2130 = _2128 * _2123;
    float _2131 = _2128 * _2124;
    float _2132 = dot(vec3(_723, _724, _725), vec3(cbLight._m0[_1971].xyz));
    float _4312 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2135 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
    float _4323 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _2136 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
    float _2137 = dot(vec3(_723, _724, _725), vec3(_2129, _2130, _2131));
    float _4334 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2140 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
    float _2141 = dot(vec3(cbLight._m0[_1971].xyz), vec3(_2129, _2130, _2131));
    float _4345 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2145 = _2121 * _2121;
    float _2149 = ((_2140 * _2140) * (_2145 + (-1.0))) + 1.0;
    float _2157 = exp2(log2(1.0 - (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0)))) * 5.0);
    float _2158 = 0.959999978542327880859375 - _881;
    float _2160 = 0.959999978542327880859375 - _882;
    float _2161 = 0.959999978542327880859375 - _883;
    float _2168 = 1.0 - _2121;
    float _2179 = (0.5 / (((_2136 * ((_2135 * _2168) + _2121)) + 9.9999999392252902907785028219223e-09) + (((_2136 * _2168) + _2121) * _2135))) * _2135;
    float _4356 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2181 = (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * (_2145 / ((_2149 * _2149) * 3.141590118408203125));
    uint _2192 = _1971 + 9u;
    float _2203 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2008].w)) * _726) * 0.949999988079071044921875);
    float _2204 = _2203 * _2203;
    float _2205 = cbLight._m0[_2008].x + _802;
    float _2206 = cbLight._m0[_2008].y + _803;
    float _2207 = cbLight._m0[_2008].z + _804;
    float _2211 = inversesqrt(dot(vec3(_2205, _2206, _2207), vec3(_2205, _2206, _2207)));
    float _2212 = _2211 * _2205;
    float _2213 = _2211 * _2206;
    float _2214 = _2211 * _2207;
    float _2215 = dot(vec3(_723, _724, _725), vec3(cbLight._m0[_2008].xyz));
    float _4367 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _2218 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
    float _2219 = dot(vec3(_723, _724, _725), vec3(_2212, _2213, _2214));
    float _4378 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2222 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
    float _2223 = dot(vec3(cbLight._m0[_2008].xyz), vec3(_2212, _2213, _2214));
    float _4389 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2227 = _2204 * _2204;
    float _2231 = ((_2222 * _2222) * (_2227 + (-1.0))) + 1.0;
    float _2238 = exp2(log2(1.0 - (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0)))) * 5.0);
    float _2245 = 1.0 - _2204;
    float _2255 = (0.5 / (((_2136 * ((_2218 * _2245) + _2204)) + 9.9999999392252902907785028219223e-09) + (((_2136 * _2245) + _2204) * _2218))) * _2218;
    float _4400 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2257 = (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * (_2227 / ((_2231 * _2231) * 3.141590118408203125));
    float _2267 = (((((_2238 * _2158) + _884) * cbLight._m0[_2192].x) * _2257) * _1994) + (((((_2157 * _2158) + _884) * cbLight._m0[_2107].x) * _2181) * _2004);
    float _2268 = (((((_2238 * _2160) + _886) * cbLight._m0[_2192].y) * _2257) * _1994) + (((((_2157 * _2160) + _886) * cbLight._m0[_2107].y) * _2181) * _2004);
    float _2269 = (((((_2238 * _2161) + _887) * cbLight._m0[_2192].z) * _2257) * _1994) + (((((_2157 * _2161) + _887) * cbLight._m0[_2107].z) * _2181) * _2004);
    float _2331;
    float _2333;
    float _2335;
    if (_2044)
    {
        _2331 = _2267;
        _2333 = _2268;
        _2335 = _2269;
    }
    else
    {
        uint _2337 = _1971 + 2u;
        uint _2341 = _1971 + 10u;
        float _2355 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2337].w)) * _726) * 0.949999988079071044921875);
        float _2356 = _2355 * _2355;
        float _2357 = cbLight._m0[_2337].x + _802;
        float _2358 = cbLight._m0[_2337].y + _803;
        float _2359 = cbLight._m0[_2337].z + _804;
        float _2363 = inversesqrt(dot(vec3(_2357, _2358, _2359), vec3(_2357, _2358, _2359)));
        float _2364 = _2363 * _2357;
        float _2365 = _2363 * _2358;
        float _2366 = _2363 * _2359;
        float _2367 = dot(vec3(_723, _724, _725), vec3(cbLight._m0[_2337].xyz));
        float _4411 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
        float _2370 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _2371 = dot(vec3(_723, _724, _725), vec3(_2364, _2365, _2366));
        float _4422 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        float _2374 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _2375 = dot(vec3(cbLight._m0[_2337].xyz), vec3(_2364, _2365, _2366));
        float _4433 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        float _2379 = _2356 * _2356;
        float _2383 = ((_2374 * _2374) * (_2379 + (-1.0))) + 1.0;
        float _2390 = exp2(log2(1.0 - (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0)))) * 5.0);
        float _2397 = 1.0 - _2356;
        float _2407 = (0.5 / (((_2136 * ((_2370 * _2397) + _2356)) + 9.9999999392252902907785028219223e-09) + (((_2136 * _2397) + _2356) * _2370))) * _2370;
        float _4444 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
        float _2409 = (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_2379 / ((_2383 * _2383) * 3.141590118408203125));
        float _2410 = isnan(1.0) ? _1986 : (isnan(_1986) ? 1.0 : min(_1986, 1.0));
        _2331 = (((((_2390 * _2158) + _884) * cbLight._m0[_2341].x) * _2409) * _2410) + _2267;
        _2333 = (((((_2390 * _2160) + _886) * cbLight._m0[_2341].y) * _2409) * _2410) + _2268;
        _2335 = (((((_2390 * _2161) + _887) * cbLight._m0[_2341].z) * _2409) * _2410) + _2269;
    }
    float _2445;
    float _2447;
    float _2449;
    if (_2062)
    {
        _2445 = _2331;
        _2447 = _2333;
        _2449 = _2335;
    }
    else
    {
        uint _2456 = _1971 + 3u;
        uint _2460 = _1971 + 11u;
        float _2474 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2456].w)) * _726) * 0.949999988079071044921875);
        float _2475 = _2474 * _2474;
        float _2476 = cbLight._m0[_2456].x + _802;
        float _2477 = cbLight._m0[_2456].y + _803;
        float _2478 = cbLight._m0[_2456].z + _804;
        float _2482 = inversesqrt(dot(vec3(_2476, _2477, _2478), vec3(_2476, _2477, _2478)));
        float _2483 = _2482 * _2476;
        float _2484 = _2482 * _2477;
        float _2485 = _2482 * _2478;
        float _2486 = dot(vec3(_723, _724, _725), vec3(cbLight._m0[_2456].xyz));
        float _4460 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2489 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _2490 = dot(vec3(_723, _724, _725), vec3(_2483, _2484, _2485));
        float _4471 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2493 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _2494 = dot(vec3(cbLight._m0[_2456].xyz), vec3(_2483, _2484, _2485));
        float _4482 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2498 = _2475 * _2475;
        float _2502 = ((_2493 * _2493) * (_2498 + (-1.0))) + 1.0;
        float _2509 = exp2(log2(1.0 - (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0)))) * 5.0);
        float _2516 = 1.0 - _2475;
        float _2526 = (0.5 / (((_2136 * ((_2489 * _2516) + _2475)) + 9.9999999392252902907785028219223e-09) + (((_2136 * _2516) + _2475) * _2489))) * _2489;
        float _4493 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2528 = (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * (_2498 / ((_2502 * _2502) * 3.141590118408203125));
        float _2529 = isnan(1.0) ? _1987 : (isnan(_1987) ? 1.0 : min(_1987, 1.0));
        _2445 = (((((_2509 * _2158) + _884) * cbLight._m0[_2460].x) * _2528) * _2529) + _2331;
        _2447 = (((((_2509 * _2160) + _886) * cbLight._m0[_2460].y) * _2528) * _2529) + _2333;
        _2449 = (((((_2509 * _2161) + _887) * cbLight._m0[_2460].z) * _2528) * _2529) + _2335;
    }
    float _2664;
    float _2666;
    float _2668;
    float _2670;
    float _2672;
    float _2674;
    if (_1969.y == 0u)
    {
        float _2604 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2605 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2604;
        float _2606 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2604;
        float _2607 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2604;
        uvec4 _2619 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2620 = _2619.x;
        uint _2631 = uint((float(_2619.y) * floor(float(uint(cbSceneParam._m0[85u].y * _823) / _2620))) + floor(float(uint(cbSceneParam._m0[85u].x * _822) / _2620)));
        float _2641 = (log2(_2607 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2642 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
        uint _2645 = uint(isnan(14.0) ? _2642 : (isnan(_2642) ? 14.0 : min(_2642, 14.0)));
        uvec4 _2650 = texelFetch(g_lightClusterGridBuffer, int(((_2645 << 2u) + (_2631 << 6u)) >> 2u));
        uint _2651 = _2650.x;
        uint _2652 = _2619.z;
        float _2752;
        float _2754;
        float _2756;
        float _2758;
        float _2760;
        float _2762;
        if (((((1u << ((_2652 >> 4u) & 15u)) + 4294967295u) & _2651) == 0u) || ((_2652 & 240u) == 0u))
        {
            _2752 = 0.0;
            _2754 = 0.0;
            _2756 = 0.0;
            _2758 = 0.0;
            _2760 = 0.0;
            _2762 = 0.0;
        }
        else
        {
            float _2753;
            float _2755;
            float _2757;
            float _2759;
            float _2761;
            float _2763;
            float _2905 = 0.0;
            float _2906 = 0.0;
            float _2907 = 0.0;
            float _2908 = 0.0;
            float _2909 = 0.0;
            float _2910 = 0.0;
            uint _2911 = 0u;
            uint _2920;
            bool _2921;
            for (;;)
            {
                _2920 = texelFetch(g_lightClassification, int((((_2645 << 5u) + (_2631 << 9u)) + (_2911 << 2u)) >> 2u)).x;
                _2921 = _2920 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2921)
                {
                    frontier_phi_66_pred = _2905;
                    frontier_phi_66_pred_1 = _2910;
                    frontier_phi_66_pred_2 = _2909;
                    frontier_phi_66_pred_3 = _2908;
                    frontier_phi_66_pred_4 = _2907;
                    frontier_phi_66_pred_5 = _2906;
                }
                else
                {
                    float _3050;
                    float _3051;
                    float _3052;
                    float _3053;
                    float _3054;
                    float _3055;
                    uint _3056;
                    _3050 = _2905;
                    _3051 = _2906;
                    _3052 = _2907;
                    _3053 = _2908;
                    _3054 = _2909;
                    _3055 = _2910;
                    _3056 = _2920;
                    float _2977;
                    float _2978;
                    float _2979;
                    float _2980;
                    float _2981;
                    float _2982;
                    for (;;)
                    {
                        uint _3060 = uint(findLSB(_3056)) + (_2911 << 5u);
                        uint _3057 = (_3056 + 4294967295u) & _3056;
                        uint _3062 = _3060 * 48u;
                        vec4 _3076 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3062)).x, texelFetch(g_PointLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3062 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3062 + 3u)).x));
                        uint _3082 = (_3060 * 48u) + 4u;
                        vec4 _3095 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3082)).x, texelFetch(g_PointLightRenderingBuffer, int(_3082 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3082 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3082 + 3u)).x));
                        uint _3101 = (_3060 * 48u) + 8u;
                        vec3 _3112 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3101)).x, texelFetch(g_PointLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3101 + 2u)).x));
                        float _3116 = _3076.x - _2605;
                        float _3117 = _3076.y - _2606;
                        float _3118 = _3076.z - _2607;
                        float _3119 = dot(vec3(_3116, _3117, _3118), vec3(_3116, _3117, _3118));
                        float _3122 = inversesqrt(_3119);
                        float _3123 = _3122 * _3116;
                        float _3124 = _3122 * _3117;
                        float _3125 = _3122 * _3118;
                        float _3126 = dot(vec3(_841, _844, _847), vec3(_3123, _3124, _3125));
                        float _3131 = 1.0 - (_3119 * _3076.w);
                        float _4519 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                        float _3132 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
                        float _3133 = sqrt(_3119) * _3095.w;
                        float _3136 = 1.39999997615814208984375 / (_3133 + 1.39999997615814208984375);
                        float _3137 = _3136 * _3136;
                        float _3140 = ((1.0 - _3137) * _3126) + _3137;
                        float _3143 = _3133 * _3133;
                        float _3147 = ((isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0))) * _3132) / ((_3143 * 0.699999988079071044921875) + 1.0);
                        float _3151 = (-0.0) - _2605;
                        float _3152 = (-0.0) - _2606;
                        float _3153 = (-0.0) - _2607;
                        float _3157 = inversesqrt(dot(vec3(_3151, _3152, _3153), vec3(_3151, _3152, _3153)));
                        float _3158 = _3157 * _3151;
                        float _3159 = _3157 * _3152;
                        float _3160 = _3157 * _3153;
                        float _3168 = exp2(log2(1.0 / ((_3143 * 3.5) + 5.0)) * 0.25);
                        float _3169 = 1.0 - _916;
                        float _3176 = sqrt(1.0 - ((1.0 - (_3169 * _3169)) * (1.0 - (_3168 * _3168))));
                        float _3177 = _3176 * _3176;
                        float _3178 = _3177 * _3177;
                        float _3179 = _3158 + _3123;
                        float _3180 = _3159 + _3124;
                        float _3181 = _3160 + _3125;
                        float _3185 = inversesqrt(dot(vec3(_3179, _3180, _3181), vec3(_3179, _3180, _3181)));
                        float _3189 = dot(vec3(_841, _844, _847), vec3(_3158, _3159, _3160));
                        float _4535 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
                        float _3192 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                        float _3193 = dot(vec3(_841, _844, _847), vec3(_3185 * _3179, _3185 * _3180, _3185 * _3181));
                        float _4546 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                        float _3196 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                        float _3200 = ((_3196 * _3196) * (_3178 + (-1.0))) + 1.0;
                        float _3201 = _3136 * _3177;
                        float _3202 = _3201 * _3201;
                        float _3205 = ((1.0 - _3202) * _3126) + _3202;
                        float _4557 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                        float _3206 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                        float _3207 = 1.0 - _3177;
                        float _3217 = (0.5 / (((_3206 * ((_3192 * _3207) + _3177)) + 9.9999999392252902907785028219223e-09) + (((_3206 * _3207) + _3177) * _3192))) * _3206;
                        float _4568 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                        float _3227 = (((_3178 * 3.1415927410125732421875) * (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0)))) / ((_3200 * _3200) * ((_3143 * 2.1991131305694580078125) + 3.141590118408203125))) * _3132;
                        _2980 = (_3147 * _3095.x) + _3053;
                        _2981 = (_3147 * _3095.y) + _3054;
                        _2982 = (_3147 * _3095.z) + _3055;
                        _2977 = (_3227 * _3112.x) + _3050;
                        _2978 = (_3227 * _3112.y) + _3051;
                        _2979 = (_3227 * _3112.z) + _3052;
                        if (_3057 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3050 = _2977;
                            _3051 = _2978;
                            _3052 = _2979;
                            _3053 = _2980;
                            _3054 = _2981;
                            _3055 = _2982;
                            _3056 = _3057;
                        }
                    }
                    frontier_phi_66_pred = _2977;
                    frontier_phi_66_pred_1 = _2982;
                    frontier_phi_66_pred_2 = _2981;
                    frontier_phi_66_pred_3 = _2980;
                    frontier_phi_66_pred_4 = _2979;
                    frontier_phi_66_pred_5 = _2978;
                }
                _2753 = frontier_phi_66_pred;
                _2763 = frontier_phi_66_pred_1;
                _2761 = frontier_phi_66_pred_2;
                _2759 = frontier_phi_66_pred_3;
                _2757 = frontier_phi_66_pred_4;
                _2755 = frontier_phi_66_pred_5;
                uint _2912 = _2911 + 1u;
                if (_2912 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2905 = _2753;
                    _2906 = _2755;
                    _2907 = _2757;
                    _2908 = _2759;
                    _2909 = _2761;
                    _2910 = _2763;
                    _2911 = _2912;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2752 = _2753;
            _2754 = _2755;
            _2756 = _2757;
            _2758 = _2759;
            _2760 = _2761;
            _2762 = _2763;
        }
        uvec4 _2766 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2767 = _2766.z;
        uint _2769 = (_2767 >> 8u) & 15u;
        float _2873;
        float _2875;
        float _2877;
        float _2879;
        float _2881;
        float _2883;
        if (((4294967295u << _2769) & _2651) == 0u)
        {
            _2873 = _2752;
            _2875 = _2754;
            _2877 = _2756;
            _2879 = _2758;
            _2881 = _2760;
            _2883 = _2762;
        }
        else
        {
            float _2898 = inversesqrt(dot(vec3(_2605, _2606, _2607), vec3(_2605, _2606, _2607)));
            float _2899 = _2898 * _2605;
            float _2900 = _2898 * _2606;
            float _2901 = _2898 * _2607;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2769 < ((_2767 >> 12u) & 15u))
            {
                float _2874;
                float _2876;
                float _2878;
                float _2880;
                float _2882;
                float _2884;
                float _3033 = _2752;
                float _3034 = _2754;
                float _3035 = _2756;
                float _3036 = _2758;
                float _3037 = _2760;
                float _3038 = _2762;
                uint _3039 = _2769;
                uint _3048;
                bool _3049;
                for (;;)
                {
                    _3048 = texelFetch(g_lightClassification, int((((_2645 << 5u) + (_2631 << 9u)) + (_3039 << 2u)) >> 2u)).x;
                    _3049 = _3048 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3049)
                    {
                        frontier_phi_77_pred = _3038;
                        frontier_phi_77_pred_1 = _3037;
                        frontier_phi_77_pred_2 = _3036;
                        frontier_phi_77_pred_3 = _3035;
                        frontier_phi_77_pred_4 = _3034;
                        frontier_phi_77_pred_5 = _3033;
                    }
                    else
                    {
                        float _3241;
                        float _3242;
                        float _3243;
                        float _3244;
                        float _3245;
                        float _3246;
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3539;
                        float _3540;
                        float _3254 = _3033;
                        float _3255 = _3034;
                        float _3256 = _3035;
                        float _3257 = _3036;
                        float _3258 = _3037;
                        float _3259 = _3038;
                        uint _3260 = _3048;
                        uint _3261;
                        vec4 _3286;
                        float _3287;
                        vec4 _3302;
                        vec3 _3314;
                        vec4 _3329;
                        vec4 _3345;
                        float _3391;
                        bool _3392;
                        for (;;)
                        {
                            uint _3271 = ((_3039 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3260));
                            _3261 = (_3260 + 4294967295u) & _3260;
                            uint _3273 = _3271 * 40u;
                            _3286 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3273)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 3u)).x));
                            _3287 = _3286.w;
                            uint _3289 = (_3271 * 40u) + 4u;
                            _3302 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3289)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 3u)).x));
                            uint _3304 = (_3271 * 40u) + 8u;
                            _3314 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3304)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 2u)).x));
                            uint _3316 = (_3271 * 40u) + 16u;
                            _3329 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3316)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 3u)).x));
                            uint _3332 = (_3271 * 40u) + 20u;
                            _3345 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3332)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 3u)).x));
                            uint _3347 = (_3271 * 40u) + 24u;
                            vec4 _3360 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3347)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 3u)).x));
                            uint _3366 = (_3271 * 40u) + 28u;
                            vec4 _3379 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3366)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 3u)).x));
                            _3391 = fma(_2607, _3379.z, fma(_2606, _3379.y, _3379.x * _2605)) + _3379.w;
                            _3392 = !((fma(_2607, _3360.z, fma(_2606, _3360.y, _3360.x * _2605)) + _3360.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3392)
                            {
                                float _3419 = _3286.x - _2605;
                                float _3420 = _3286.y - _2606;
                                float _3421 = _3286.z - _2607;
                                float _3422 = dot(vec3(_3419, _3420, _3421), vec3(_3419, _3420, _3421));
                                float _3425 = inversesqrt(_3422);
                                float _3426 = _3425 * _3419;
                                float _3427 = _3425 * _3420;
                                float _3428 = _3425 * _3421;
                                float _3432 = 1.0 - (_3422 / (_3287 * _3287));
                                float _4579 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3433 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
                                float _3437 = sqrt(_3422) * _3302.w;
                                float _3439 = 1.39999997615814208984375 / (_3437 + 1.39999997615814208984375);
                                float _3440 = _3439 * _3439;
                                float _3443 = ((1.0 - _3440) * dot(vec3(_3426, _3427, _3428), vec3(_841, _844, _847))) + _3440;
                                float _3446 = _3437 * _3437;
                                float _3450 = (fma(_2607, _3329.z, fma(_2606, _3329.y, _3329.x * _2605)) + _3329.w) / _3391;
                                float _3451 = (fma(_2607, _3345.z, fma(_2606, _3345.y, _3345.x * _2605)) + _3345.w) / _3391;
                                float _3455 = 1.0 - dot(vec2(_3450, _3451), vec2(_3450, _3451));
                                float _4595 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                                float _3456 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
                                float _3457 = _3456 * (((isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0))) * _3433) / ((_3446 * 0.699999988079071044921875) + 1.0));
                                float _3469 = exp2(log2(1.0 / ((_3446 * 3.5) + 5.0)) * 0.25);
                                float _3470 = 1.0 - _916;
                                float _3477 = sqrt(1.0 - ((1.0 - (_3470 * _3470)) * (1.0 - (_3469 * _3469))));
                                float _3478 = _3477 * _3477;
                                float _3479 = _3478 * _3478;
                                float _3480 = _3426 - _2899;
                                float _3481 = _3427 - _2900;
                                float _3482 = _3428 - _2901;
                                float _3486 = inversesqrt(dot(vec3(_3480, _3481, _3482), vec3(_3480, _3481, _3482)));
                                float _3490 = dot(vec3(_841, _844, _847), vec3((-0.0) - _2899, (-0.0) - _2900, (-0.0) - _2901));
                                float _4606 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                                float _3493 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                                float _3494 = dot(vec3(_841, _844, _847), vec3(_3486 * _3480, _3486 * _3481, _3486 * _3482));
                                float _4617 = isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0));
                                float _3497 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                                float _3501 = ((_3497 * _3497) * (_3479 + (-1.0))) + 1.0;
                                float _3502 = _3439 * _3478;
                                float _3503 = _3502 * _3502;
                                float _3509 = ((1.0 - _3503) * dot(vec3(_841, _844, _847), vec3(_3426, _3427, _3428))) + _3503;
                                float _4628 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                                float _3510 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                                float _3511 = 1.0 - _3478;
                                float _3521 = (0.5 / (((_3510 * ((_3493 * _3511) + _3478)) + 9.9999999392252902907785028219223e-09) + (((_3510 * _3511) + _3478) * _3493))) * _3510;
                                float _4639 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                                float _3531 = (_3456 * _3433) * (((_3479 * 3.1415927410125732421875) * (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0)))) / ((_3501 * _3501) * ((_3446 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3457 * _3302.y;
                                frontier_phi_83_pred_1 = _3457 * _3302.x;
                                frontier_phi_83_pred_2 = _3531 * _3314.z;
                                frontier_phi_83_pred_3 = _3531 * _3314.y;
                                frontier_phi_83_pred_4 = _3531 * _3314.x;
                                frontier_phi_83_pred_5 = _3457 * _3302.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3539 = frontier_phi_83_pred;
                            _3538 = frontier_phi_83_pred_1;
                            _3537 = frontier_phi_83_pred_2;
                            _3536 = frontier_phi_83_pred_3;
                            _3535 = frontier_phi_83_pred_4;
                            _3540 = frontier_phi_83_pred_5;
                            _3244 = _3538 + _3257;
                            _3245 = _3539 + _3258;
                            _3246 = _3540 + _3259;
                            _3241 = _3535 + _3254;
                            _3242 = _3536 + _3255;
                            _3243 = _3537 + _3256;
                            if (_3261 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3254 = _3241;
                                _3255 = _3242;
                                _3256 = _3243;
                                _3257 = _3244;
                                _3258 = _3245;
                                _3259 = _3246;
                                _3260 = _3261;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3246;
                        frontier_phi_77_pred_1 = _3245;
                        frontier_phi_77_pred_2 = _3244;
                        frontier_phi_77_pred_3 = _3243;
                        frontier_phi_77_pred_4 = _3242;
                        frontier_phi_77_pred_5 = _3241;
                    }
                    _2884 = frontier_phi_77_pred;
                    _2882 = frontier_phi_77_pred_1;
                    _2880 = frontier_phi_77_pred_2;
                    _2878 = frontier_phi_77_pred_3;
                    _2876 = frontier_phi_77_pred_4;
                    _2874 = frontier_phi_77_pred_5;
                    uint _3040 = _3039 + 1u;
                    if (_3040 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3033 = _2874;
                        _3034 = _2876;
                        _3035 = _2878;
                        _3036 = _2880;
                        _3037 = _2882;
                        _3038 = _2884;
                        _3039 = _3040;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2878;
                frontier_phi_58_59_ladder_1 = _2884;
                frontier_phi_58_59_ladder_2 = _2882;
                frontier_phi_58_59_ladder_3 = _2880;
                frontier_phi_58_59_ladder_4 = _2876;
                frontier_phi_58_59_ladder_5 = _2874;
            }
            else
            {
                frontier_phi_58_59_ladder = _2756;
                frontier_phi_58_59_ladder_1 = _2762;
                frontier_phi_58_59_ladder_2 = _2760;
                frontier_phi_58_59_ladder_3 = _2758;
                frontier_phi_58_59_ladder_4 = _2754;
                frontier_phi_58_59_ladder_5 = _2752;
            }
            _2873 = frontier_phi_58_59_ladder_5;
            _2875 = frontier_phi_58_59_ladder_4;
            _2877 = frontier_phi_58_59_ladder;
            _2879 = frontier_phi_58_59_ladder_3;
            _2881 = frontier_phi_58_59_ladder_2;
            _2883 = frontier_phi_58_59_ladder_1;
        }
        float _2888 = isnan(1.0) ? _900 : (isnan(_900) ? 1.0 : min(_900, 1.0));
        _2664 = (_2888 * _2879) + _2100;
        _2666 = (_2888 * _2881) + _2102;
        _2668 = (_2888 * _2883) + _2104;
        _2670 = ((_2873 * _884) * _2888) + _2445;
        _2672 = ((_2875 * _886) * _2888) + _2447;
        _2674 = ((_2877 * _887) * _2888) + _2449;
    }
    else
    {
        _2664 = _2100;
        _2666 = _2102;
        _2668 = _2104;
        _2670 = _2445;
        _2672 = _2447;
        _2674 = _2449;
    }
    float _4655 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _4666 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _4677 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _2691 = ((isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0))) * (_2664 + ((isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))) * _900))) + ((_2670 + ((isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0))) * _1737)) * cbPerFrame._m0[3u].x);
    float _2692 = ((isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0))) * (_2666 + ((isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))) * _900))) + ((_2672 + ((isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0))) * _1737)) * cbPerFrame._m0[3u].x);
    float _2693 = ((isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0))) * (_2668 + ((isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))) * _900))) + ((_2674 + ((isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0))) * _1737)) * cbPerFrame._m0[3u].x);
    uint _2694 = _249 + 6u;
    float _2702 = _822 / cbSceneParam._m0[86u].x;
    float _2703 = _823 / cbSceneParam._m0[86u].y;
    vec4 _2717 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2702, _2703, (log2((isnan(cbSceneParam._m0[77u].w) ? _745 : (isnan(_745) ? cbSceneParam._m0[77u].w : min(_745, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2719 = _2717.x;
    float _2720 = _2717.y;
    float _2721 = _2717.z;
    float _2722 = _2717.w;
    float _2815;
    float _2817;
    float _2819;
    float _2821;
    if (_745 > cbSceneParam._m0[78u].w)
    {
        float _2777 = isnan(_745) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _745 : min(cbSceneParam._m0[80u].w, _745));
        float _2778 = _2777 / _745;
        float _2789 = _2778 * _795;
        float _2790 = _796 * _2778;
        float _2791 = (-0.0) - _2790;
        float _2793 = _2778 * _797;
        float _2795 = (cbSceneParam._m0[77u].w * _2791) / _2777;
        float _2796 = _2795 + cbSceneParam._m0[79u].w;
        float _2797 = cbSceneParam._m0[79u].w - _2790;
        float _2803 = sqrt(((_2789 * _2789) + (_2790 * _2790)) + (_2793 * _2793));
        float _2806 = (1.0 - (cbSceneParam._m0[77u].w / _2777)) * _2803;
        float _2811 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2813 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2990;
        if (abs((_2791 - _2795) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2990 = ((((_2796 > 0.0) ? exp2(_2811 * _2796) : (2.0 - exp2(_2813 * _2796))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2806;
        }
        else
        {
            float _2934 = 1.0 / cbSceneParam._m0[80u].x;
            float _2935 = isnan(_2797) ? _2796 : (isnan(_2796) ? _2797 : max(_2796, _2797));
            float _2936 = isnan(_2797) ? _2796 : (isnan(_2796) ? _2797 : min(_2796, _2797));
            float _2945 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : min(_2935, 0.0));
            float _2946 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : min(_2936, 0.0));
            _2990 = ((abs(_2803 / _2791) * cbSceneParam._m0[80u].y) * ((((_2945 - _2946) * 2.0) - ((exp2(_2811 * (isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0)))) - exp2(_2811 * (isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0))))) * _2934)) - ((exp2(_2813 * _2945) - exp2(_2813 * _2946)) * _2934))) + (_2806 * cbSceneParam._m0[80u].z);
        }
        vec4 _2992 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2702, _2703, 1.0), 0.0);
        float _3001 = exp2((_2990 * (-1.44269502162933349609375)) * (1.0 - _2992.w));
        float _3002 = log2(_3001);
        float _3018 = log2(_2722);
        _2815 = (exp2(_3018 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3002 * cbSceneParam._m0[78u].x)) * _2992.x) / cbSceneParam._m0[78u].x)) + _2719;
        _2817 = (exp2(_3018 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3002 * cbSceneParam._m0[78u].y)) * _2992.y) / cbSceneParam._m0[78u].y)) + _2720;
        _2819 = (exp2(_3018 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3002 * cbSceneParam._m0[78u].z)) * _2992.z) / cbSceneParam._m0[78u].z)) + _2721;
        _2821 = _3001 * _2722;
    }
    else
    {
        _2815 = _2719;
        _2817 = _2720;
        _2819 = _2721;
        _2821 = _2722;
    }
    bool _3028;
    vec4 _2831;
    vec4 _2853;
    float _2855;
    float _2859;
    float _2860;
    float _2861;
    float _2862;
    bool _2872;
    for (;;)
    {
        _2831 = cbMatDynParam._m0[0u];
        float _2833 = roundEven(_2831.y);
        bool _2834 = _2833 == 3.0;
        float _2835 = log2(_2821);
        float _2842 = exp2(_2835 * cbSceneParam._m0[78u].x) * _2691;
        float _2843 = exp2(_2835 * cbSceneParam._m0[78u].y) * _2692;
        float _2844 = exp2(_2835 * cbSceneParam._m0[78u].z) * _2693;
        float _2851 = _811 + (-0.5);
        _2853 = cbMtdParam._m0[1u];
        _2855 = _2853.y * _2851;
        float _2858 = (_2833 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2859 = _2858 * (_2834 ? _2842 : (_2842 + (cbSceneParam._m0[72u].w * _2815)));
        _2860 = _2858 * (_2834 ? _2843 : (_2843 + (cbSceneParam._m0[72u].w * _2817)));
        _2861 = _2858 * (_2834 ? _2844 : (_2844 + (cbSceneParam._m0[72u].w * _2819)));
        _2862 = _2851 * 0.999000012874603271484375;
        _2872 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2872)
        {
            if ((cbInstanceData._m0[_249 + 7u].x + _2862) < 0.5)
            {
                _3028 = true;
                break;
            }
        }
        uint _2969 = _860 + uint(_2831.w);
        if ((cbInstanceData._m0[_2969].w < 1.0) && ((cbInstanceData._m0[_2969].w + _2862) < 0.5))
        {
            _3028 = true;
            break;
        }
        if ((_2855 + 1.0) < _2853.x)
        {
            _3028 = true;
            break;
        }
        _3028 = false;
        break;
    }
    float _3232;
    if (_3028)
    {
        discard_state = true;
        _3232 = 0.0;
    }
    else
    {
        _3232 = cbInstanceData._m0[_2694].w;
    }
    SV_Target.x = _2859;
    SV_Target.y = _2860;
    SV_Target.z = _2861;
    SV_Target.w = _3232;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2694].w;
    discard_exit();
}


