#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1172;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _236 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _236 + 1u;
    uint _246 = _236 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _277 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _283 = _277.x * cbMtdParam._m0[11u].x;
    float _284 = _277.y * cbMtdParam._m0[11u].y;
    float _285 = _277.z * cbMtdParam._m0[11u].z;
    vec4 _304 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _256) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _257) + cbTextureTilingScale._m0[5u].w));
    vec4 _342 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _344 = _342.x;
    float _356 = dot(vec4(_344, _342.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _373 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_344 - _356) * cbMtdParam._m0[24u].y) + _356) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3524 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _374 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
    float _381 = (_374 * ((_304.x * cbMtdParam._m0[12u].x) - _283)) + _283;
    float _382 = (_374 * ((_304.y * cbMtdParam._m0[12u].y) - _284)) + _284;
    float _383 = (_374 * ((_304.z * cbMtdParam._m0[12u].z) - _285)) + _285;
    vec4 _401 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _256) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _257) + cbTextureTilingScale._m0[4u].w));
    vec4 _418 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _420 = _418.x;
    float _421 = _418.y;
    float _422 = _418.z;
    float _431 = ((_401.z - _422) * _374) + _422;
    float _434 = ((((_401.x - _420) * _374) + _420) * 2.0) + (-1.0);
    float _436 = ((((_401.y - _421) * _374) + _421) * 2.0) + (-1.0);
    float _437 = dot(vec2(_434, _436), vec2(_434, _436));
    float _3535 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _442 = sqrt(1.0 - (isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0))));
    vec4 _458 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _483 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _256) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _257) + cbTextureTilingScale._m0[11u].w));
    float _485 = _483.x;
    float _486 = 1.0 - _485;
    float _499 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_485 - _486) * cbMtdParam._m0[24u].z) + _486) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3546 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _500 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
    float _507 = (_500 * (cbMtdParam._m0[17u].x - _381)) + _381;
    float _508 = (_500 * (cbMtdParam._m0[17u].y - _382)) + _382;
    float _509 = (_500 * (cbMtdParam._m0[17u].z - _383)) + _383;
    vec4 _521 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _535 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _537 = _535.x;
    float _555 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _256) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _257) + cbTextureTilingScale._m0[9u].w)).x - _537) * _374) + _537;
    float _559 = ((_521.x - _555) * cbMtdParam._m0[19u].z) + _555;
    float _561 = _559 - (_559 * _500);
    float _565 = (cbMtdParam._m0[19u].w * (_458.z - _431)) + _431;
    vec4 _578 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _256) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _257) + cbTextureTilingScale._m0[15u].w));
    float _585 = (_578.x * 2.0) + (-1.0);
    float _586 = (_578.y * 2.0) + (-1.0);
    float _587 = dot(vec2(_585, _586), vec2(_585, _586));
    float _3557 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _595 = (_500 * (_578.z - _565)) + _565;
    float _598 = (((_458.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _434;
    float _599 = (((_458.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _436;
    float _611 = (((_585 - _598) + (cbMtdParam._m0[21u].x * _598)) * _500) + _598;
    float _612 = (((_586 - _599) + (cbMtdParam._m0[21u].x * _599)) * _500) + _599;
    float _613 = (_500 * (sqrt(1.0 - (isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0)))) - _442)) + _442;
    float _618 = cbMtdParam._m0[22u].x + _458.w;
    float _621 = fma(_613, _223 * NORMAL.x, fma(_612, _230 * TANGENT.x, (_216 * _208) * _611));
    float _624 = fma(_613, _223 * NORMAL.y, fma(_612, _230 * TANGENT.y, (_216 * _209) * _611));
    float _627 = fma(_613, _223 * NORMAL.z, fma(_612, _230 * TANGENT.z, (_216 * _210) * _611));
    float _631 = inversesqrt(dot(vec3(_621, _624, _627), vec3(_621, _624, _627)));
    float _632 = _631 * _621;
    float _633 = _631 * _624;
    float _634 = _631 * _627;
    float _3568 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _635 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
    float _3579 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _3590 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _3601 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _3612 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _3623 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _640 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
    float _654 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _695 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _705 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _695);
    float _706 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _695);
    float _707 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _695);
    float _711 = inversesqrt(dot(vec3(_705, _706, _707), vec3(_705, _706, _707)));
    float _712 = _705 * _711;
    float _713 = _706 * _711;
    float _714 = _707 * _711;
    float _720 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _721 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _739 = fma(_634, cbSceneParam._m0[5u].z, fma(_633, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _632));
    float _742 = fma(_634, cbSceneParam._m0[6u].z, fma(_633, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _632));
    float _745 = fma(_634, cbSceneParam._m0[7u].z, fma(_633, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _632));
    uint _759 = (_236 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _765 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0)))) * cbInstanceData._m0[_759].x;
    float _766 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0)))) * cbInstanceData._m0[_759].y;
    float _767 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0)))) * cbInstanceData._m0[_759].z;
    float _3634 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _768 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
    float _3645 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _769 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
    float _3656 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _770 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
    float _771 = 1.0 - _640;
    float _772 = _768 * _771;
    float _773 = _769 * _771;
    float _774 = _770 * _771;
    float _779 = (_768 + (-0.039999999105930328369140625)) * _640;
    float _780 = (_769 + (-0.039999999105930328369140625)) * _640;
    float _781 = (_770 + (-0.039999999105930328369140625)) * _640;
    float _782 = _779 + 0.039999999105930328369140625;
    float _784 = _780 + 0.039999999105930328369140625;
    float _785 = _781 + 0.039999999105930328369140625;
    vec4 _794 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _720, cbSceneParam._m0[86u].y * _721));
    float _798 = ((isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0))) * TEXCOORD_5.w) * _794.x;
    float _799 = dot(vec3(_632, _633, _634), vec3(_712, _713, _714));
    float _802 = _799 * 2.0;
    float _806 = (_802 * _632) - _712;
    float _807 = (_802 * _633) - _713;
    float _808 = (_802 * _634) - _714;
    float _812 = abs(dot(vec3(_712, _713, _714), vec3(_632, _633, _634)));
    float _3667 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _814 = sqrt(_635);
    float _827 = exp2((_814 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_814 * 3.0));
    float _833 = (1.0 - _827) * ((_814 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _834 = _827 * _814;
    float _862 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _866 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _870 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1171;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _896 = fma(_870, cbModelParam._m0[26u].z, fma(_866, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _862));
        float _900 = fma(_870, cbModelParam._m0[27u].z, fma(_866, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _862));
        float _904 = fma(_870, cbModelParam._m0[28u].z, fma(_866, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _862));
        float _929 = _862 + _632;
        float _930 = _866 + _633;
        float _931 = _870 + _634;
        float _941 = fma(_931, cbModelParam._m0[26u].z, fma(_930, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _929)) - _896;
        float _942 = fma(_931, cbModelParam._m0[27u].z, fma(_930, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _929)) - _900;
        float _943 = fma(_931, cbModelParam._m0[28u].z, fma(_930, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _929)) - _904;
        float _947 = inversesqrt(dot(vec3(_941, _942, _943), vec3(_941, _942, _943)));
        float _960 = ((_947 * _941) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_896 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _961 = ((_947 * _942) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_900 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _962 = ((_947 * _943) / cbModelParam._m0[34u].z) + ((((((_904 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _979 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _986 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        float _999 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_965.x + (-0.5));
        float _1001 = _999 * (_965.y + (-0.5));
        float _1002 = _999 * (_965.z + (-0.5));
        float _1009 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_972.x + (-0.5));
        float _1011 = _1009 * (_972.y + (-0.5));
        float _1012 = _1009 * (_972.z + (-0.5));
        float _1019 = exp2((_979.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_979.x + (-0.5));
        float _1021 = _1019 * (_979.y + (-0.5));
        float _1022 = _1019 * (_979.z + (-0.5));
        float _1029 = exp2((_986.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_986.x + (-0.5));
        float _1031 = _1029 * (_986.y + (-0.5));
        float _1032 = _1029 * (_986.z + (-0.5));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1036 = _1000 * 0.5;
        float _1037 = _1010 * 0.5;
        float _1038 = _1020 * 0.5;
        float _1039 = dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038));
        float _1044 = (_1039 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1039);
        float _1053 = (dot(vec3(_632, _633, _634), vec3(_1044 * _1036, _1044 * _1037, _1044 * _1038)) + 1.0) * 0.5;
        float _3693 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1063 = sqrt(((_1037 * _1037) + (_1036 * _1036)) + (_1038 * _1038)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _3704 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
        float _1065 = _1064 * 2.0;
        float _1069 = (1.0 - _1064) / (_1064 + 1.0);
        float _3715 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _1079 = ((((1.0 - _1070) * (_1065 + 2.0)) * exp2(log2(isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0))) * (_1065 + 1.0))) + _1070) * _1033;
        float _1080 = _1001 * 0.5;
        float _1081 = _1011 * 0.5;
        float _1082 = _1021 * 0.5;
        float _1083 = dot(vec3(_1080, _1081, _1082), vec3(_1080, _1081, _1082));
        float _1088 = (_1083 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1083);
        float _1096 = (dot(vec3(_632, _633, _634), vec3(_1088 * _1080, _1088 * _1081, _1088 * _1082)) + 1.0) * 0.5;
        float _3726 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1105 = sqrt(((_1081 * _1081) + (_1080 * _1080)) + (_1082 * _1082)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3737 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _1107 = _1106 * 2.0;
        float _1111 = (1.0 - _1106) / (_1106 + 1.0);
        float _3748 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1121 = ((((1.0 - _1112) * (_1107 + 2.0)) * exp2(log2(isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))) * (_1107 + 1.0))) + _1112) * _1034;
        float _1122 = _1002 * 0.5;
        float _1123 = _1012 * 0.5;
        float _1124 = _1022 * 0.5;
        float _1125 = dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124));
        float _1130 = (_1125 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1125);
        float _1138 = (dot(vec3(_632, _633, _634), vec3(_1130 * _1122, _1130 * _1123, _1130 * _1124)) + 1.0) * 0.5;
        float _3759 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1147 = sqrt(((_1123 * _1123) + (_1122 * _1122)) + (_1124 * _1124)) / (_1035 + 9.9999997473787516355514526367188e-06);
        float _3770 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _1149 = _1148 * 2.0;
        float _1153 = (1.0 - _1148) / (_1148 + 1.0);
        float _3781 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1163 = ((((1.0 - _1154) * (_1149 + 2.0)) * exp2(log2(isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) * (_1149 + 1.0))) + _1154) * _1035;
        _1171 = _1002;
        _1173 = _1001;
        _1174 = _1000;
        _1175 = _1012;
        _1176 = _1011;
        _1177 = _1010;
        _1178 = _1022;
        _1179 = _1021;
        _1180 = _1020;
        _1181 = _1035;
        _1182 = _1034;
        _1183 = _1033;
        _1184 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0)));
        _1185 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0)));
        _1186 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0)));
    }
    else
    {
        _1171 = _1172;
        _1173 = _1172;
        _1174 = _1172;
        _1175 = _1172;
        _1176 = _1172;
        _1177 = _1172;
        _1178 = _1172;
        _1179 = _1172;
        _1180 = _1172;
        _1181 = _1172;
        _1182 = _1172;
        _1183 = _1172;
        _1184 = 0.0;
        _1185 = 0.0;
        _1186 = 0.0;
    }
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1211 = fma(_870, cbModelParam._m0[30u].z, fma(_866, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _862));
        float _1215 = fma(_870, cbModelParam._m0[31u].z, fma(_866, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _862));
        float _1219 = fma(_870, cbModelParam._m0[32u].z, fma(_866, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _862));
        float _1242 = _862 + _632;
        float _1243 = _866 + _633;
        float _1244 = _870 + _634;
        float _1254 = fma(_1244, cbModelParam._m0[30u].z, fma(_1243, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1242)) - _1211;
        float _1255 = fma(_1244, cbModelParam._m0[31u].z, fma(_1243, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1242)) - _1215;
        float _1256 = fma(_1244, cbModelParam._m0[32u].z, fma(_1243, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1242)) - _1219;
        float _1260 = inversesqrt(dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256)));
        float _1273 = ((_1260 * _1254) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1211 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1274 = ((_1260 * _1255) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1215 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1275 = ((_1260 * _1256) / cbModelParam._m0[35u].z) + ((((((_1219 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1277 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1273, _1274, _1275), 0.0);
        vec4 _1284 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1273, _1274, _1275), 0.0);
        vec4 _1291 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1273, _1274, _1275), 0.0);
        vec4 _1298 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1273, _1274, _1275), 0.0);
        float _1310 = exp2((_1277.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1277.x + (-0.5));
        float _1312 = _1310 * (_1277.y + (-0.5));
        float _1313 = _1310 * (_1277.z + (-0.5));
        float _1320 = exp2((_1284.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1284.x + (-0.5));
        float _1322 = _1320 * (_1284.y + (-0.5));
        float _1323 = _1320 * (_1284.z + (-0.5));
        float _1330 = exp2((_1291.w + (-0.5)) * 20.0) * 2.0;
        float _1331 = _1330 * (_1291.x + (-0.5));
        float _1332 = _1330 * (_1291.y + (-0.5));
        float _1333 = _1330 * (_1291.z + (-0.5));
        float _1340 = exp2((_1298.w + (-0.5)) * 20.0) * 2.0;
        float _1341 = _1340 * (_1298.x + (-0.5));
        float _1342 = _1340 * (_1298.y + (-0.5));
        float _1343 = _1340 * (_1298.z + (-0.5));
        float _1344 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1345 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1346 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1347 = _1311 * 0.5;
        float _1348 = _1321 * 0.5;
        float _1349 = _1331 * 0.5;
        float _1350 = dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349));
        float _1355 = (_1350 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1350);
        float _1363 = (dot(vec3(_632, _633, _634), vec3(_1355 * _1347, _1355 * _1348, _1355 * _1349)) + 1.0) * 0.5;
        float _3822 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1372 = sqrt(((_1348 * _1348) + (_1347 * _1347)) + (_1349 * _1349)) / (_1344 + 9.9999997473787516355514526367188e-06);
        float _3833 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _1374 = _1373 * 2.0;
        float _1378 = (1.0 - _1373) / (_1373 + 1.0);
        float _3844 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1388 = ((((1.0 - _1379) * (_1374 + 2.0)) * exp2(log2(isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * (_1374 + 1.0))) + _1379) * _1344;
        float _1389 = _1312 * 0.5;
        float _1390 = _1322 * 0.5;
        float _1391 = _1332 * 0.5;
        float _1392 = dot(vec3(_1389, _1390, _1391), vec3(_1389, _1390, _1391));
        float _1397 = (_1392 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1392);
        float _1405 = (dot(vec3(_632, _633, _634), vec3(_1397 * _1389, _1397 * _1390, _1397 * _1391)) + 1.0) * 0.5;
        float _3855 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1414 = sqrt(((_1390 * _1390) + (_1389 * _1389)) + (_1391 * _1391)) / (_1345 + 9.9999997473787516355514526367188e-06);
        float _3866 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1416 = _1415 * 2.0;
        float _1420 = (1.0 - _1415) / (_1415 + 1.0);
        float _3877 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1430 = ((((1.0 - _1421) * (_1416 + 2.0)) * exp2(log2(isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * (_1416 + 1.0))) + _1421) * _1345;
        float _1431 = _1313 * 0.5;
        float _1432 = _1323 * 0.5;
        float _1433 = _1333 * 0.5;
        float _1434 = dot(vec3(_1431, _1432, _1433), vec3(_1431, _1432, _1433));
        float _1439 = (_1434 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1434);
        float _1447 = (dot(vec3(_632, _633, _634), vec3(_1439 * _1431, _1439 * _1432, _1439 * _1433)) + 1.0) * 0.5;
        float _3888 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1456 = sqrt(((_1432 * _1432) + (_1431 * _1431)) + (_1433 * _1433)) / (_1346 + 9.9999997473787516355514526367188e-06);
        float _3899 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1458 = _1457 * 2.0;
        float _1462 = (1.0 - _1457) / (_1457 + 1.0);
        float _3910 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1472 = ((((1.0 - _1463) * (_1458 + 2.0)) * exp2(log2(isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_1458 + 1.0))) + _1463) * _1346;
        _1480 = _1313;
        _1481 = _1312;
        _1482 = _1311;
        _1483 = _1323;
        _1484 = _1322;
        _1485 = _1321;
        _1486 = _1333;
        _1487 = _1332;
        _1488 = _1331;
        _1489 = _1346;
        _1490 = _1345;
        _1491 = _1344;
        _1492 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)));
        _1493 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)));
        _1494 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)));
    }
    else
    {
        _1480 = _1172;
        _1481 = _1172;
        _1482 = _1172;
        _1483 = _1172;
        _1484 = _1172;
        _1485 = _1172;
        _1486 = _1172;
        _1487 = _1172;
        _1488 = _1172;
        _1489 = _1172;
        _1490 = _1172;
        _1491 = _1172;
        _1492 = 0.0;
        _1493 = 0.0;
        _1494 = 0.0;
    }
    float _1504 = (cbModelParam._m0[1u].x * (_1492 - _1184)) + _1184;
    float _1505 = (cbModelParam._m0[1u].x * (_1493 - _1185)) + _1185;
    float _1506 = (cbModelParam._m0[1u].x * (_1494 - _1186)) + _1186;
    float _1527 = fma(_1506, cbSceneParam._m0[89u].z, fma(_1505, cbSceneParam._m0[89u].y, _1504 * cbSceneParam._m0[89u].x));
    float _1530 = fma(_1506, cbSceneParam._m0[90u].z, fma(_1505, cbSceneParam._m0[90u].y, _1504 * cbSceneParam._m0[90u].x));
    float _1533 = fma(_1506, cbSceneParam._m0[91u].z, fma(_1505, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1504));
    float _1548 = _806 * 0.5;
    float _1549 = _807 * 0.5;
    float _1550 = _808 * 0.5;
    float _1551 = dot(vec4(_1548, _1549, _1550, 1.0), vec4(_1482, _1485, _1488, _1491));
    float _1554 = dot(vec4(_1548, _1549, _1550, 1.0), vec4(_1481, _1484, _1487, _1490));
    float _1557 = dot(vec4(_1548, _1549, _1550, 1.0), vec4(_1480, _1483, _1486, _1489));
    float _1591;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1564 = dot(vec4(_1548, _1549, _1550, 1.0), vec4(_1171, _1175, _1178, _1181));
        float _1568 = dot(vec4(_1548, _1549, _1550, 1.0), vec4(_1173, _1176, _1179, _1182));
        float _1572 = dot(vec4(_1548, _1549, _1550, 1.0), vec4(_1174, _1177, _1180, _1183));
        float _1579 = dot(vec4(cbModelParam._m0[39u]), vec4(_1548, _1549, _1550, 1.0));
        _1591 = dot(vec3(isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)), isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)), isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1579) ? 0.0 : (isnan(0.0) ? _1579 : max(0.0, _1579))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1591 = 1.0;
    }
    float _1602;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1593 = dot(vec4(cbModelParam._m0[40u]), vec4(_1548, _1549, _1550, 1.0));
        _1602 = dot(vec3(isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)), isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)), isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1593) ? 0.0 : (isnan(0.0) ? _1593 : max(0.0, _1593))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1602 = 1.0;
    }
    float _1606 = (_1602 * cbModelParam._m0[1u].x) + (_1591 * (1.0 - cbModelParam._m0[1u].x));
    float _1616 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _635);
    float _1617 = isnan(_1616) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1616 : min(cbModelParam._m0[25u].z, _1616));
    float _1698;
    float _1700;
    float _1702;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1665 = fma(_870, cbModelParam._m0[13u].z, fma(_866, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _862)) + cbModelParam._m0[13u].w;
        float _1669 = fma(_870, cbModelParam._m0[14u].z, fma(_866, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _862)) + cbModelParam._m0[14u].w;
        float _1673 = fma(_870, cbModelParam._m0[15u].z, fma(_866, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _862)) + cbModelParam._m0[15u].w;
        float _1676 = fma(_808, cbModelParam._m0[13u].z, fma(_807, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _806));
        float _1679 = fma(_808, cbModelParam._m0[14u].z, fma(_807, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _806));
        float _1682 = fma(_808, cbModelParam._m0[15u].z, fma(_807, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _806));
        float _1710;
        if (_1676 > 0.0)
        {
            _1710 = abs((1.0 - _1665) / _1676);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1665 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1710 = frontier_phi_14_12_ladder;
        }
        float _1934;
        if (_1679 > 0.0)
        {
            _1934 = abs((1.0 - _1669) / _1679);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1669 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1934 = frontier_phi_23_19_ladder;
        }
        float _2191;
        if (_1682 > 0.0)
        {
            _2191 = abs((1.0 - _1673) / _1682);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1673 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2191 = frontier_phi_35_30_ladder;
        }
        float _2193 = isnan(_1934) ? _1710 : (isnan(_1710) ? _1934 : min(_1710, _1934));
        float _2194 = isnan(_2191) ? _2193 : (isnan(_2193) ? _2191 : min(_2193, _2191));
        float _2198 = (_2194 * _1676) + _1665;
        float _2199 = (_2194 * _1679) + _1669;
        float _2200 = (_2194 * _1682) + _1673;
        float _2201 = _2194 * 9.9999997473787516355514526367188e-05;
        float _2203 = (-1.0) - _2201;
        float _2205 = _2201 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2200 > _2205) || ((_2200 < _2203) || ((_2199 > _2205) || ((_2199 < _2203) || ((_2198 < _2203) || (_2198 > _2205))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2328 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2200, cbModelParam._m0[9u].z, fma(_2199, cbModelParam._m0[9u].y, _2198 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2200, cbModelParam._m0[10u].z, fma(_2199, cbModelParam._m0[10u].y, _2198 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2200, cbModelParam._m0[11u].z, fma(_2199, cbModelParam._m0[11u].y, _2198 * cbModelParam._m0[11u].x))), _1617);
            frontier_phi_13_35_ladder = _2328.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2328.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2328.x * cbModelParam._m0[1u].y;
        }
        _1698 = frontier_phi_13_35_ladder_2;
        _1700 = frontier_phi_13_35_ladder_1;
        _1702 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1686 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_806, _807, _808), _1617);
        _1698 = _1686.x * cbModelParam._m0[1u].y;
        _1700 = _1686.y * cbModelParam._m0[1u].y;
        _1702 = _1686.z * cbModelParam._m0[1u].y;
    }
    float _1706 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _635);
    float _1707 = isnan(_1706) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1706 : min(cbModelParam._m0[25u].w, _1706));
    float _1797;
    float _1799;
    float _1801;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1761 = fma(_870, cbModelParam._m0[21u].z, fma(_866, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _862)) + cbModelParam._m0[21u].w;
        float _1765 = fma(_870, cbModelParam._m0[22u].z, fma(_866, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _862)) + cbModelParam._m0[22u].w;
        float _1769 = fma(_870, cbModelParam._m0[23u].z, fma(_866, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _862)) + cbModelParam._m0[23u].w;
        float _1772 = fma(_808, cbModelParam._m0[21u].z, fma(_807, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _806));
        float _1775 = fma(_808, cbModelParam._m0[22u].z, fma(_807, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _806));
        float _1778 = fma(_808, cbModelParam._m0[23u].z, fma(_807, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _806));
        float _1939;
        if (_1772 > 0.0)
        {
            _1939 = abs((1.0 - _1761) / _1772);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1761 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1939 = frontier_phi_25_21_ladder;
        }
        float _2218;
        if (_1775 > 0.0)
        {
            _2218 = abs((1.0 - _1765) / _1775);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1765 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2218 = frontier_phi_37_32_ladder;
        }
        float _2431;
        if (_1778 > 0.0)
        {
            _2431 = abs((1.0 - _1769) / _1778);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1769 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2431 = frontier_phi_46_43_ladder;
        }
        float _2433 = isnan(_2218) ? _1939 : (isnan(_1939) ? _2218 : min(_1939, _2218));
        float _2434 = isnan(_2431) ? _2433 : (isnan(_2433) ? _2431 : min(_2433, _2431));
        float _2438 = (_2434 * _1772) + _1761;
        float _2439 = (_2434 * _1775) + _1765;
        float _2440 = (_2434 * _1778) + _1769;
        float _2441 = _2434 * 9.9999997473787516355514526367188e-05;
        float _2442 = (-1.0) - _2441;
        float _2444 = _2441 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2440 > _2444) || ((_2440 < _2442) || ((_2439 > _2444) || ((_2439 < _2442) || ((_2438 < _2442) || (_2438 > _2444))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2639 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2440, cbModelParam._m0[17u].z, fma(_2439, cbModelParam._m0[17u].y, _2438 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2440, cbModelParam._m0[18u].z, fma(_2439, cbModelParam._m0[18u].y, _2438 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2440, cbModelParam._m0[19u].z, fma(_2439, cbModelParam._m0[19u].y, _2438 * cbModelParam._m0[19u].x))), _1707);
            frontier_phi_22_46_ladder = _2639.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2639.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2639.x * cbModelParam._m0[1u].z;
        }
        _1797 = frontier_phi_22_46_ladder_2;
        _1799 = frontier_phi_22_46_ladder_1;
        _1801 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1781 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_806, _807, _808), _1707);
        _1797 = _1781.x * cbModelParam._m0[1u].z;
        _1799 = _1781.y * cbModelParam._m0[1u].z;
        _1801 = _1781.z * cbModelParam._m0[1u].z;
    }
    float _1814 = (((_833 * _782) + _834) * _798) * ((cbModelParam._m0[1u].w * (_1797 - _1698)) + _1698);
    float _1816 = (((_833 * _784) + _834) * _798) * ((cbModelParam._m0[1u].w * (_1799 - _1700)) + _1700);
    float _1818 = (((_833 * _785) + _834) * _798) * ((cbModelParam._m0[1u].w * (_1801 - _1702)) + _1702);
    float _1821 = fma(_1818, cbSceneParam._m0[89u].z, fma(_1816, cbSceneParam._m0[89u].y, _1814 * cbSceneParam._m0[89u].x));
    float _1824 = fma(_1818, cbSceneParam._m0[90u].z, fma(_1816, cbSceneParam._m0[90u].y, _1814 * cbSceneParam._m0[90u].x));
    float _1827 = fma(_1818, cbSceneParam._m0[91u].z, fma(_1816, cbSceneParam._m0[91u].y, _1814 * cbSceneParam._m0[91u].x));
    vec4 _1835 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_720, _721));
    float _1837 = _1835.w;
    float _1849 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1837);
    float _1850 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1837);
    float _1851 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1837);
    uvec4 _1855 = floatBitsToUint(cbInstanceData._m0[_236 + 5u]);
    uint _1857 = _1855.x * 14u;
    uint _1858 = _1857 + 13u;
    float _1865 = _798 + (-1.0);
    float _1870 = (cbLight._m0[_1858].x * _1865) + 1.0;
    float _1871 = (cbLight._m0[_1858].y * _1865) + 1.0;
    float _1872 = (cbLight._m0[_1858].z * _1865) + 1.0;
    float _1873 = (cbLight._m0[_1858].w * _1865) + 1.0;
    uint _1874 = _1857 + 5u;
    float _1880 = isnan(1.0) ? _1871 : (isnan(_1871) ? 1.0 : min(_1871, 1.0));
    uint _1884 = _1857 + 4u;
    float _1893 = isnan(1.0) ? _1870 : (isnan(_1870) ? 1.0 : min(_1870, 1.0));
    uint _1897 = _1857 | 1u;
    float _1908 = dot(vec3(cbLight._m0[_1857].xyz), vec3(_632, _633, _634));
    float _1911 = dot(vec3(cbLight._m0[_1897].xyz), vec3(_632, _633, _634));
    float _4046 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _4057 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _1916 = (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * 0.3183098733425140380859375;
    float _1918 = (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * 0.3183098733425140380859375;
    float _1925 = ((cbLight._m0[_1874].x * _1880) * _1918) + (((cbLight._m0[_1884].x * _1849) * _1893) * _1916);
    float _1926 = ((_1880 * cbLight._m0[_1874].y) * _1918) + (((cbLight._m0[_1884].y * _1850) * _1893) * _1916);
    float _1927 = ((_1880 * cbLight._m0[_1874].z) * _1918) + (((cbLight._m0[_1884].z * _1851) * _1893) * _1916);
    uvec4 _1931 = floatBitsToUint(cbLight._m0[_1857 + 12u]);
    bool _1933 = _1931.x == 0u;
    float _1944;
    float _1946;
    float _1948;
    if (_1933)
    {
        _1944 = _1925;
        _1946 = _1926;
        _1948 = _1927;
    }
    else
    {
        uint _1952 = _1857 + 6u;
        float _1968 = (dot(vec3(cbLight._m0[_1857 + 2u].xyz), vec3(_632, _633, _634)) * 0.5) + 0.5;
        float _1969 = _1968 * _1968;
        float _4068 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
        float _1970 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1971 = isnan(1.0) ? _1872 : (isnan(_1872) ? 1.0 : min(_1872, 1.0));
        _1944 = (((cbLight._m0[_1952].x * 0.3183098733425140380859375) * _1970) * _1971) + _1925;
        _1946 = (((cbLight._m0[_1952].y * 0.3183098733425140380859375) * _1970) * _1971) + _1926;
        _1948 = (((cbLight._m0[_1952].z * 0.3183098733425140380859375) * _1970) * _1971) + _1927;
    }
    bool _1951 = _1931.y == 0u;
    float _1989;
    float _1991;
    float _1993;
    if (_1951)
    {
        _1989 = _1944;
        _1991 = _1946;
        _1993 = _1948;
    }
    else
    {
        uint _2162 = _1857 + 7u;
        float _2178 = (dot(vec3(cbLight._m0[_1857 + 3u].xyz), vec3(_632, _633, _634)) * 0.5) + 0.5;
        float _2179 = _2178 * _2178;
        float _4084 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
        float _2180 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _2181 = isnan(1.0) ? _1873 : (isnan(_1873) ? 1.0 : min(_1873, 1.0));
        _1989 = (((cbLight._m0[_2162].x * 0.3183098733425140380859375) * _2180) * _2181) + _1944;
        _1991 = (((cbLight._m0[_2162].y * 0.3183098733425140380859375) * _2180) * _2181) + _1946;
        _1993 = (((cbLight._m0[_2162].z * 0.3183098733425140380859375) * _2180) * _2181) + _1948;
    }
    uint _1996 = _1857 + 8u;
    float _2009 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1857].w)) * _635) * 0.949999988079071044921875);
    float _2010 = _2009 * _2009;
    float _2011 = cbLight._m0[_1857].x + _712;
    float _2012 = cbLight._m0[_1857].y + _713;
    float _2013 = cbLight._m0[_1857].z + _714;
    float _2017 = inversesqrt(dot(vec3(_2011, _2012, _2013), vec3(_2011, _2012, _2013)));
    float _2018 = _2017 * _2011;
    float _2019 = _2017 * _2012;
    float _2020 = _2017 * _2013;
    float _2021 = dot(vec3(_632, _633, _634), vec3(cbLight._m0[_1857].xyz));
    float _4100 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2024 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _4111 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _2025 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _2026 = dot(vec3(_632, _633, _634), vec3(_2018, _2019, _2020));
    float _4122 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    float _2029 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _2030 = dot(vec3(cbLight._m0[_1857].xyz), vec3(_2018, _2019, _2020));
    float _4133 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2034 = _2010 * _2010;
    float _2038 = ((_2029 * _2029) * (_2034 + (-1.0))) + 1.0;
    float _2046 = exp2(log2(1.0 - (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0)))) * 5.0);
    float _2047 = 0.959999978542327880859375 - _779;
    float _2049 = 0.959999978542327880859375 - _780;
    float _2050 = 0.959999978542327880859375 - _781;
    float _2057 = 1.0 - _2010;
    float _2068 = (0.5 / (((_2025 * ((_2024 * _2057) + _2010)) + 9.9999999392252902907785028219223e-09) + (((_2025 * _2057) + _2010) * _2024))) * _2024;
    float _4144 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2070 = (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_2034 / ((_2038 * _2038) * 3.141590118408203125));
    uint _2084 = _1857 + 9u;
    float _2095 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1897].w)) * _635) * 0.949999988079071044921875);
    float _2096 = _2095 * _2095;
    float _2097 = cbLight._m0[_1897].x + _712;
    float _2098 = cbLight._m0[_1897].y + _713;
    float _2099 = cbLight._m0[_1897].z + _714;
    float _2103 = inversesqrt(dot(vec3(_2097, _2098, _2099), vec3(_2097, _2098, _2099)));
    float _2104 = _2103 * _2097;
    float _2105 = _2103 * _2098;
    float _2106 = _2103 * _2099;
    float _2107 = dot(vec3(_632, _633, _634), vec3(cbLight._m0[_1897].xyz));
    float _4155 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2110 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _2111 = dot(vec3(_632, _633, _634), vec3(_2104, _2105, _2106));
    float _4166 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2114 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
    float _2115 = dot(vec3(cbLight._m0[_1897].xyz), vec3(_2104, _2105, _2106));
    float _4177 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2119 = _2096 * _2096;
    float _2123 = ((_2114 * _2114) * (_2119 + (-1.0))) + 1.0;
    float _2130 = exp2(log2(1.0 - (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0)))) * 5.0);
    float _2137 = 1.0 - _2096;
    float _2147 = (0.5 / (((_2025 * ((_2110 * _2137) + _2096)) + 9.9999999392252902907785028219223e-09) + (((_2025 * _2137) + _2096) * _2110))) * _2110;
    float _4188 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2149 = (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_2119 / ((_2123 * _2123) * 3.141590118408203125));
    float _2159 = (((((_2130 * _2047) + _782) * cbLight._m0[_2084].x) * _2149) * _1880) + ((((cbLight._m0[_1996].x * _1849) * ((_2046 * _2047) + _782)) * _2070) * _1893);
    float _2160 = (((((_2130 * _2049) + _784) * cbLight._m0[_2084].y) * _2149) * _1880) + ((((cbLight._m0[_1996].y * _1850) * ((_2046 * _2049) + _784)) * _2070) * _1893);
    float _2161 = (((((_2130 * _2050) + _785) * cbLight._m0[_2084].z) * _2149) * _1880) + ((((cbLight._m0[_1996].z * _1851) * ((_2046 * _2050) + _785)) * _2070) * _1893);
    float _2223;
    float _2225;
    float _2227;
    if (_1933)
    {
        _2223 = _2159;
        _2225 = _2160;
        _2227 = _2161;
    }
    else
    {
        uint _2229 = _1857 + 2u;
        uint _2233 = _1857 + 10u;
        float _2247 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2229].w)) * _635) * 0.949999988079071044921875);
        float _2248 = _2247 * _2247;
        float _2249 = cbLight._m0[_2229].x + _712;
        float _2250 = cbLight._m0[_2229].y + _713;
        float _2251 = cbLight._m0[_2229].z + _714;
        float _2255 = inversesqrt(dot(vec3(_2249, _2250, _2251), vec3(_2249, _2250, _2251)));
        float _2256 = _2255 * _2249;
        float _2257 = _2255 * _2250;
        float _2258 = _2255 * _2251;
        float _2259 = dot(vec3(_632, _633, _634), vec3(cbLight._m0[_2229].xyz));
        float _4199 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
        float _2262 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _2263 = dot(vec3(_632, _633, _634), vec3(_2256, _2257, _2258));
        float _4210 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
        float _2266 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _2267 = dot(vec3(cbLight._m0[_2229].xyz), vec3(_2256, _2257, _2258));
        float _4221 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
        float _2271 = _2248 * _2248;
        float _2275 = ((_2266 * _2266) * (_2271 + (-1.0))) + 1.0;
        float _2282 = exp2(log2(1.0 - (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0)))) * 5.0);
        float _2289 = 1.0 - _2248;
        float _2299 = (0.5 / (((_2025 * ((_2262 * _2289) + _2248)) + 9.9999999392252902907785028219223e-09) + (((_2025 * _2289) + _2248) * _2262))) * _2262;
        float _4232 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
        float _2301 = (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_2271 / ((_2275 * _2275) * 3.141590118408203125));
        float _2302 = isnan(1.0) ? _1872 : (isnan(_1872) ? 1.0 : min(_1872, 1.0));
        _2223 = (((((_2282 * _2047) + _782) * cbLight._m0[_2233].x) * _2301) * _2302) + _2159;
        _2225 = (((((_2282 * _2049) + _784) * cbLight._m0[_2233].y) * _2301) * _2302) + _2160;
        _2227 = (((((_2282 * _2050) + _785) * cbLight._m0[_2233].z) * _2301) * _2302) + _2161;
    }
    float _2337;
    float _2339;
    float _2341;
    if (_1951)
    {
        _2337 = _2223;
        _2339 = _2225;
        _2341 = _2227;
    }
    else
    {
        uint _2348 = _1857 + 3u;
        uint _2352 = _1857 + 11u;
        float _2366 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2348].w)) * _635) * 0.949999988079071044921875);
        float _2367 = _2366 * _2366;
        float _2368 = cbLight._m0[_2348].x + _712;
        float _2369 = cbLight._m0[_2348].y + _713;
        float _2370 = cbLight._m0[_2348].z + _714;
        float _2374 = inversesqrt(dot(vec3(_2368, _2369, _2370), vec3(_2368, _2369, _2370)));
        float _2375 = _2374 * _2368;
        float _2376 = _2374 * _2369;
        float _2377 = _2374 * _2370;
        float _2378 = dot(vec3(_632, _633, _634), vec3(cbLight._m0[_2348].xyz));
        float _4248 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2381 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _2382 = dot(vec3(_632, _633, _634), vec3(_2375, _2376, _2377));
        float _4259 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        float _2385 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _2386 = dot(vec3(cbLight._m0[_2348].xyz), vec3(_2375, _2376, _2377));
        float _4270 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        float _2390 = _2367 * _2367;
        float _2394 = ((_2385 * _2385) * (_2390 + (-1.0))) + 1.0;
        float _2401 = exp2(log2(1.0 - (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0)))) * 5.0);
        float _2408 = 1.0 - _2367;
        float _2418 = (0.5 / (((_2025 * ((_2381 * _2408) + _2367)) + 9.9999999392252902907785028219223e-09) + (((_2025 * _2408) + _2367) * _2381))) * _2381;
        float _4281 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2420 = (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_2390 / ((_2394 * _2394) * 3.141590118408203125));
        float _2421 = isnan(1.0) ? _1873 : (isnan(_1873) ? 1.0 : min(_1873, 1.0));
        _2337 = (((((_2401 * _2047) + _782) * cbLight._m0[_2352].x) * _2420) * _2421) + _2223;
        _2339 = (((((_2401 * _2049) + _784) * cbLight._m0[_2352].y) * _2420) * _2421) + _2225;
        _2341 = (((((_2401 * _2050) + _785) * cbLight._m0[_2352].z) * _2420) * _2421) + _2227;
    }
    float _2556;
    float _2558;
    float _2560;
    float _2562;
    float _2564;
    float _2566;
    if (_1855.y == 0u)
    {
        float _2496 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2497 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2496;
        float _2498 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2496;
        float _2499 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2496;
        uvec4 _2511 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2512 = _2511.x;
        uint _2523 = uint((float(_2511.y) * floor(float(uint(cbSceneParam._m0[85u].y * _721) / _2512))) + floor(float(uint(cbSceneParam._m0[85u].x * _720) / _2512)));
        float _2533 = (log2(_2499 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2534 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        uint _2537 = uint(isnan(14.0) ? _2534 : (isnan(_2534) ? 14.0 : min(_2534, 14.0)));
        uvec4 _2542 = texelFetch(g_lightClusterGridBuffer, int(((_2537 << 2u) + (_2523 << 6u)) >> 2u));
        uint _2543 = _2542.x;
        uint _2544 = _2511.z;
        float _2644;
        float _2646;
        float _2648;
        float _2650;
        float _2652;
        float _2654;
        if (((((1u << ((_2544 >> 4u) & 15u)) + 4294967295u) & _2543) == 0u) || ((_2544 & 240u) == 0u))
        {
            _2644 = 0.0;
            _2646 = 0.0;
            _2648 = 0.0;
            _2650 = 0.0;
            _2652 = 0.0;
            _2654 = 0.0;
        }
        else
        {
            float _2645;
            float _2647;
            float _2649;
            float _2651;
            float _2653;
            float _2655;
            float _2789 = 0.0;
            float _2790 = 0.0;
            float _2791 = 0.0;
            float _2792 = 0.0;
            float _2793 = 0.0;
            float _2794 = 0.0;
            uint _2795 = 0u;
            uint _2804;
            bool _2805;
            for (;;)
            {
                _2804 = texelFetch(g_lightClassification, int((((_2537 << 5u) + (_2523 << 9u)) + (_2795 << 2u)) >> 2u)).x;
                _2805 = _2804 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2805)
                {
                    frontier_phi_61_pred = _2789;
                    frontier_phi_61_pred_1 = _2794;
                    frontier_phi_61_pred_2 = _2793;
                    frontier_phi_61_pred_3 = _2792;
                    frontier_phi_61_pred_4 = _2791;
                    frontier_phi_61_pred_5 = _2790;
                }
                else
                {
                    float _2913;
                    float _2914;
                    float _2915;
                    float _2916;
                    float _2917;
                    float _2918;
                    uint _2919;
                    _2913 = _2789;
                    _2914 = _2790;
                    _2915 = _2791;
                    _2916 = _2792;
                    _2917 = _2793;
                    _2918 = _2794;
                    _2919 = _2804;
                    float _2845;
                    float _2846;
                    float _2847;
                    float _2848;
                    float _2849;
                    float _2850;
                    for (;;)
                    {
                        uint _2923 = uint(findLSB(_2919)) + (_2795 << 5u);
                        uint _2920 = (_2919 + 4294967295u) & _2919;
                        uint _2925 = _2923 * 48u;
                        vec4 _2939 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2925)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 3u)).x));
                        uint _2945 = (_2923 * 48u) + 4u;
                        vec4 _2958 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2945)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 3u)).x));
                        uint _2964 = (_2923 * 48u) + 8u;
                        vec3 _2975 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2964)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 2u)).x));
                        float _2979 = _2939.x - _2497;
                        float _2980 = _2939.y - _2498;
                        float _2981 = _2939.z - _2499;
                        float _2982 = dot(vec3(_2979, _2980, _2981), vec3(_2979, _2980, _2981));
                        float _2985 = inversesqrt(_2982);
                        float _2986 = _2985 * _2979;
                        float _2987 = _2985 * _2980;
                        float _2988 = _2985 * _2981;
                        float _2989 = dot(vec3(_739, _742, _745), vec3(_2986, _2987, _2988));
                        float _2994 = 1.0 - (_2982 * _2939.w);
                        float _4307 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
                        float _2995 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
                        float _2996 = sqrt(_2982) * _2958.w;
                        float _2999 = 1.39999997615814208984375 / (_2996 + 1.39999997615814208984375);
                        float _3000 = _2999 * _2999;
                        float _3003 = ((1.0 - _3000) * _2989) + _3000;
                        float _3006 = _2996 * _2996;
                        float _3010 = ((isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0))) * _2995) / ((_3006 * 0.699999988079071044921875) + 1.0);
                        float _3014 = (-0.0) - _2497;
                        float _3015 = (-0.0) - _2498;
                        float _3016 = (-0.0) - _2499;
                        float _3020 = inversesqrt(dot(vec3(_3014, _3015, _3016), vec3(_3014, _3015, _3016)));
                        float _3021 = _3020 * _3014;
                        float _3022 = _3020 * _3015;
                        float _3023 = _3020 * _3016;
                        float _3031 = exp2(log2(1.0 / ((_3006 * 3.5) + 5.0)) * 0.25);
                        float _3032 = 1.0 - _814;
                        float _3039 = sqrt(1.0 - ((1.0 - (_3032 * _3032)) * (1.0 - (_3031 * _3031))));
                        float _3040 = _3039 * _3039;
                        float _3041 = _3040 * _3040;
                        float _3042 = _3021 + _2986;
                        float _3043 = _3022 + _2987;
                        float _3044 = _3023 + _2988;
                        float _3048 = inversesqrt(dot(vec3(_3042, _3043, _3044), vec3(_3042, _3043, _3044)));
                        float _3052 = dot(vec3(_739, _742, _745), vec3(_3021, _3022, _3023));
                        float _4323 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                        float _3055 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
                        float _3056 = dot(vec3(_739, _742, _745), vec3(_3048 * _3042, _3048 * _3043, _3048 * _3044));
                        float _4334 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                        float _3059 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
                        float _3063 = ((_3059 * _3059) * (_3041 + (-1.0))) + 1.0;
                        float _3064 = _2999 * _3040;
                        float _3065 = _3064 * _3064;
                        float _3068 = ((1.0 - _3065) * _2989) + _3065;
                        float _4345 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                        float _3069 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
                        float _3070 = 1.0 - _3040;
                        float _3080 = (0.5 / (((_3069 * ((_3055 * _3070) + _3040)) + 9.9999999392252902907785028219223e-09) + (((_3069 * _3070) + _3040) * _3055))) * _3069;
                        float _4356 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                        float _3091 = (((_3041 * 3.1415927410125732421875) * (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0)))) / ((_3063 * _3063) * ((_3006 * 2.1991131305694580078125) + 3.141590118408203125))) * _2995;
                        _2848 = (_3010 * _2958.x) + _2916;
                        _2849 = (_3010 * _2958.y) + _2917;
                        _2850 = (_3010 * _2958.z) + _2918;
                        _2845 = (_3091 * _2975.x) + _2913;
                        _2846 = (_3091 * _2975.y) + _2914;
                        _2847 = (_3091 * _2975.z) + _2915;
                        if (_2920 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2913 = _2845;
                            _2914 = _2846;
                            _2915 = _2847;
                            _2916 = _2848;
                            _2917 = _2849;
                            _2918 = _2850;
                            _2919 = _2920;
                        }
                    }
                    frontier_phi_61_pred = _2845;
                    frontier_phi_61_pred_1 = _2850;
                    frontier_phi_61_pred_2 = _2849;
                    frontier_phi_61_pred_3 = _2848;
                    frontier_phi_61_pred_4 = _2847;
                    frontier_phi_61_pred_5 = _2846;
                }
                _2645 = frontier_phi_61_pred;
                _2655 = frontier_phi_61_pred_1;
                _2653 = frontier_phi_61_pred_2;
                _2651 = frontier_phi_61_pred_3;
                _2649 = frontier_phi_61_pred_4;
                _2647 = frontier_phi_61_pred_5;
                uint _2796 = _2795 + 1u;
                if (_2796 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2789 = _2645;
                    _2790 = _2647;
                    _2791 = _2649;
                    _2792 = _2651;
                    _2793 = _2653;
                    _2794 = _2655;
                    _2795 = _2796;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2644 = _2645;
            _2646 = _2647;
            _2648 = _2649;
            _2650 = _2651;
            _2652 = _2653;
            _2654 = _2655;
        }
        uvec4 _2658 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2659 = _2658.z;
        uint _2661 = (_2659 >> 8u) & 15u;
        float _2757;
        float _2759;
        float _2761;
        float _2763;
        float _2765;
        float _2767;
        if (((4294967295u << _2661) & _2543) == 0u)
        {
            _2757 = _2644;
            _2759 = _2646;
            _2761 = _2648;
            _2763 = _2650;
            _2765 = _2652;
            _2767 = _2654;
        }
        else
        {
            float _2782 = inversesqrt(dot(vec3(_2497, _2498, _2499), vec3(_2497, _2498, _2499)));
            float _2783 = _2782 * _2497;
            float _2784 = _2782 * _2498;
            float _2785 = _2782 * _2499;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2661 < ((_2659 >> 12u) & 15u))
            {
                float _2758;
                float _2760;
                float _2762;
                float _2764;
                float _2766;
                float _2768;
                float _2896 = _2644;
                float _2897 = _2646;
                float _2898 = _2648;
                float _2899 = _2650;
                float _2900 = _2652;
                float _2901 = _2654;
                uint _2902 = _2661;
                uint _2911;
                bool _2912;
                for (;;)
                {
                    _2911 = texelFetch(g_lightClassification, int((((_2537 << 5u) + (_2523 << 9u)) + (_2902 << 2u)) >> 2u)).x;
                    _2912 = _2911 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2912)
                    {
                        frontier_phi_67_pred = _2899;
                        frontier_phi_67_pred_1 = _2900;
                        frontier_phi_67_pred_2 = _2901;
                        frontier_phi_67_pred_3 = _2898;
                        frontier_phi_67_pred_4 = _2897;
                        frontier_phi_67_pred_5 = _2896;
                    }
                    else
                    {
                        float _3096;
                        float _3097;
                        float _3098;
                        float _3099;
                        float _3100;
                        float _3101;
                        float _3390;
                        float _3391;
                        float _3392;
                        float _3393;
                        float _3394;
                        float _3395;
                        float _3109 = _2896;
                        float _3110 = _2897;
                        float _3111 = _2898;
                        float _3112 = _2899;
                        float _3113 = _2900;
                        float _3114 = _2901;
                        uint _3115 = _2911;
                        uint _3116;
                        vec4 _3141;
                        float _3142;
                        vec4 _3157;
                        vec3 _3169;
                        vec4 _3184;
                        vec4 _3200;
                        float _3246;
                        bool _3247;
                        for (;;)
                        {
                            uint _3126 = ((_2902 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3115));
                            _3116 = (_3115 + 4294967295u) & _3115;
                            uint _3128 = _3126 * 40u;
                            _3141 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3128)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 3u)).x));
                            _3142 = _3141.w;
                            uint _3144 = (_3126 * 40u) + 4u;
                            _3157 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3144)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 3u)).x));
                            uint _3159 = (_3126 * 40u) + 8u;
                            _3169 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3159)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 2u)).x));
                            uint _3171 = (_3126 * 40u) + 16u;
                            _3184 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3171)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 3u)).x));
                            uint _3187 = (_3126 * 40u) + 20u;
                            _3200 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3187)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 3u)).x));
                            uint _3202 = (_3126 * 40u) + 24u;
                            vec4 _3215 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3202)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 3u)).x));
                            uint _3221 = (_3126 * 40u) + 28u;
                            vec4 _3234 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3221)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 3u)).x));
                            _3246 = fma(_2499, _3234.z, fma(_2498, _3234.y, _3234.x * _2497)) + _3234.w;
                            _3247 = !((fma(_2499, _3215.z, fma(_2498, _3215.y, _3215.x * _2497)) + _3215.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3247)
                            {
                                float _3274 = _3141.x - _2497;
                                float _3275 = _3141.y - _2498;
                                float _3276 = _3141.z - _2499;
                                float _3277 = dot(vec3(_3274, _3275, _3276), vec3(_3274, _3275, _3276));
                                float _3280 = inversesqrt(_3277);
                                float _3281 = _3280 * _3274;
                                float _3282 = _3280 * _3275;
                                float _3283 = _3280 * _3276;
                                float _3287 = 1.0 - (_3277 / (_3142 * _3142));
                                float _4367 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                                float _3288 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
                                float _3292 = sqrt(_3277) * _3157.w;
                                float _3294 = 1.39999997615814208984375 / (_3292 + 1.39999997615814208984375);
                                float _3295 = _3294 * _3294;
                                float _3298 = ((1.0 - _3295) * dot(vec3(_3281, _3282, _3283), vec3(_739, _742, _745))) + _3295;
                                float _3301 = _3292 * _3292;
                                float _3305 = (fma(_2499, _3184.z, fma(_2498, _3184.y, _3184.x * _2497)) + _3184.w) / _3246;
                                float _3306 = (fma(_2499, _3200.z, fma(_2498, _3200.y, _3200.x * _2497)) + _3200.w) / _3246;
                                float _3310 = 1.0 - dot(vec2(_3305, _3306), vec2(_3305, _3306));
                                float _4383 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                                float _3311 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
                                float _3312 = _3311 * (((isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0))) * _3288) / ((_3301 * 0.699999988079071044921875) + 1.0));
                                float _3324 = exp2(log2(1.0 / ((_3301 * 3.5) + 5.0)) * 0.25);
                                float _3325 = 1.0 - _814;
                                float _3332 = sqrt(1.0 - ((1.0 - (_3325 * _3325)) * (1.0 - (_3324 * _3324))));
                                float _3333 = _3332 * _3332;
                                float _3334 = _3333 * _3333;
                                float _3335 = _3281 - _2783;
                                float _3336 = _3282 - _2784;
                                float _3337 = _3283 - _2785;
                                float _3341 = inversesqrt(dot(vec3(_3335, _3336, _3337), vec3(_3335, _3336, _3337)));
                                float _3345 = dot(vec3(_739, _742, _745), vec3((-0.0) - _2783, (-0.0) - _2784, (-0.0) - _2785));
                                float _4394 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                                float _3348 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
                                float _3349 = dot(vec3(_739, _742, _745), vec3(_3341 * _3335, _3341 * _3336, _3341 * _3337));
                                float _4405 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                                float _3352 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
                                float _3356 = ((_3352 * _3352) * (_3334 + (-1.0))) + 1.0;
                                float _3357 = _3294 * _3333;
                                float _3358 = _3357 * _3357;
                                float _3364 = ((1.0 - _3358) * dot(vec3(_739, _742, _745), vec3(_3281, _3282, _3283))) + _3358;
                                float _4416 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                                float _3365 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
                                float _3366 = 1.0 - _3333;
                                float _3376 = (0.5 / (((_3365 * ((_3348 * _3366) + _3333)) + 9.9999999392252902907785028219223e-09) + (((_3365 * _3366) + _3333) * _3348))) * _3365;
                                float _4427 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                                float _3386 = (_3311 * _3288) * (((_3334 * 3.1415927410125732421875) * (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0)))) / ((_3356 * _3356) * ((_3301 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3386 * _3169.x;
                                frontier_phi_73_pred_1 = _3386 * _3169.y;
                                frontier_phi_73_pred_2 = _3312 * _3157.z;
                                frontier_phi_73_pred_3 = _3312 * _3157.y;
                                frontier_phi_73_pred_4 = _3312 * _3157.x;
                                frontier_phi_73_pred_5 = _3386 * _3169.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3390 = frontier_phi_73_pred;
                            _3391 = frontier_phi_73_pred_1;
                            _3395 = frontier_phi_73_pred_2;
                            _3394 = frontier_phi_73_pred_3;
                            _3393 = frontier_phi_73_pred_4;
                            _3392 = frontier_phi_73_pred_5;
                            _3099 = _3393 + _3112;
                            _3100 = _3394 + _3113;
                            _3101 = _3395 + _3114;
                            _3096 = _3390 + _3109;
                            _3097 = _3391 + _3110;
                            _3098 = _3392 + _3111;
                            if (_3116 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3109 = _3096;
                                _3110 = _3097;
                                _3111 = _3098;
                                _3112 = _3099;
                                _3113 = _3100;
                                _3114 = _3101;
                                _3115 = _3116;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3099;
                        frontier_phi_67_pred_1 = _3100;
                        frontier_phi_67_pred_2 = _3101;
                        frontier_phi_67_pred_3 = _3098;
                        frontier_phi_67_pred_4 = _3097;
                        frontier_phi_67_pred_5 = _3096;
                    }
                    _2764 = frontier_phi_67_pred;
                    _2766 = frontier_phi_67_pred_1;
                    _2768 = frontier_phi_67_pred_2;
                    _2762 = frontier_phi_67_pred_3;
                    _2760 = frontier_phi_67_pred_4;
                    _2758 = frontier_phi_67_pred_5;
                    uint _2903 = _2902 + 1u;
                    if (_2903 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2896 = _2758;
                        _2897 = _2760;
                        _2898 = _2762;
                        _2899 = _2764;
                        _2900 = _2766;
                        _2901 = _2768;
                        _2902 = _2903;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2766;
                frontier_phi_55_56_ladder_1 = _2768;
                frontier_phi_55_56_ladder_2 = _2764;
                frontier_phi_55_56_ladder_3 = _2762;
                frontier_phi_55_56_ladder_4 = _2760;
                frontier_phi_55_56_ladder_5 = _2758;
            }
            else
            {
                frontier_phi_55_56_ladder = _2652;
                frontier_phi_55_56_ladder_1 = _2654;
                frontier_phi_55_56_ladder_2 = _2650;
                frontier_phi_55_56_ladder_3 = _2648;
                frontier_phi_55_56_ladder_4 = _2646;
                frontier_phi_55_56_ladder_5 = _2644;
            }
            _2757 = frontier_phi_55_56_ladder_5;
            _2759 = frontier_phi_55_56_ladder_4;
            _2761 = frontier_phi_55_56_ladder_3;
            _2763 = frontier_phi_55_56_ladder_2;
            _2765 = frontier_phi_55_56_ladder;
            _2767 = frontier_phi_55_56_ladder_1;
        }
        float _2772 = isnan(1.0) ? _798 : (isnan(_798) ? 1.0 : min(_798, 1.0));
        _2556 = (_2772 * _2763) + _1989;
        _2558 = (_2772 * _2765) + _1991;
        _2560 = (_2772 * _2767) + _1993;
        _2562 = ((_2757 * _782) * _2772) + _2337;
        _2564 = ((_2759 * _784) * _2772) + _2339;
        _2566 = ((_2761 * _785) * _2772) + _2341;
    }
    else
    {
        _2556 = _1989;
        _2558 = _1991;
        _2560 = _1993;
        _2562 = _2337;
        _2564 = _2339;
        _2566 = _2341;
    }
    float _4443 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _4454 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _4465 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    uint _2586 = _236 + 6u;
    float _2594 = _720 / cbSceneParam._m0[86u].x;
    float _2595 = _721 / cbSceneParam._m0[86u].y;
    vec4 _2609 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2594, _2595, (log2((isnan(cbSceneParam._m0[77u].w) ? _654 : (isnan(_654) ? cbSceneParam._m0[77u].w : min(_654, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2611 = _2609.x;
    float _2612 = _2609.y;
    float _2613 = _2609.z;
    float _2614 = _2609.w;
    float _2707;
    float _2709;
    float _2711;
    float _2713;
    if (_654 > cbSceneParam._m0[78u].w)
    {
        float _2669 = isnan(_654) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _654 : min(cbSceneParam._m0[80u].w, _654));
        float _2670 = _2669 / _654;
        float _2681 = _2670 * _705;
        float _2682 = _706 * _2670;
        float _2683 = (-0.0) - _2682;
        float _2685 = _2670 * _707;
        float _2687 = (cbSceneParam._m0[77u].w * _2683) / _2669;
        float _2688 = _2687 + cbSceneParam._m0[79u].w;
        float _2689 = cbSceneParam._m0[79u].w - _2682;
        float _2695 = sqrt(((_2681 * _2681) + (_2682 * _2682)) + (_2685 * _2685));
        float _2698 = (1.0 - (cbSceneParam._m0[77u].w / _2669)) * _2695;
        float _2703 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2705 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2858;
        if (abs((_2683 - _2687) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2858 = ((((_2688 > 0.0) ? exp2(_2703 * _2688) : (2.0 - exp2(_2705 * _2688))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2698;
        }
        else
        {
            float _2818 = 1.0 / cbSceneParam._m0[80u].x;
            float _2819 = isnan(_2689) ? _2688 : (isnan(_2688) ? _2689 : max(_2688, _2689));
            float _2820 = isnan(_2689) ? _2688 : (isnan(_2688) ? _2689 : min(_2688, _2689));
            float _2829 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : min(_2819, 0.0));
            float _2830 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : min(_2820, 0.0));
            _2858 = ((abs(_2695 / _2683) * cbSceneParam._m0[80u].y) * ((((_2829 - _2830) * 2.0) - ((exp2(_2703 * (isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0)))) - exp2(_2703 * (isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0))))) * _2818)) - ((exp2(_2705 * _2829) - exp2(_2705 * _2830)) * _2818))) + (_2698 * cbSceneParam._m0[80u].z);
        }
        vec4 _2860 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2594, _2595, 1.0), 0.0);
        float _2869 = exp2((_2858 * (-1.44269502162933349609375)) * (1.0 - _2860.w));
        float _2870 = log2(_2869);
        float _2886 = log2(_2614);
        _2707 = (exp2(_2886 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2870 * cbSceneParam._m0[78u].x)) * _2860.x) / cbSceneParam._m0[78u].x)) + _2611;
        _2709 = (exp2(_2886 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2870 * cbSceneParam._m0[78u].y)) * _2860.y) / cbSceneParam._m0[78u].y)) + _2612;
        _2711 = (exp2(_2886 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2870 * cbSceneParam._m0[78u].z)) * _2860.z) / cbSceneParam._m0[78u].z)) + _2613;
        _2713 = _2869 * _2614;
    }
    else
    {
        _2707 = _2611;
        _2709 = _2612;
        _2711 = _2613;
        _2713 = _2614;
    }
    float _2725 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2726 = _2725 == 3.0;
    float _2727 = log2(_2713);
    float _2734 = exp2(_2727 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_2556 + ((isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0))) * _798))) + ((_2562 + ((isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))) * _1606)) * cbPerFrame._m0[3u].x));
    float _2735 = exp2(_2727 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * (_2558 + ((isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))) * _798))) + ((_2564 + ((isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))) * _1606)) * cbPerFrame._m0[3u].x));
    float _2736 = exp2(_2727 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_2560 + ((isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))) * _798))) + ((_2566 + ((isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))) * _1606)) * cbPerFrame._m0[3u].x));
    float _2745 = (_2725 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2745 * (_2726 ? _2734 : (_2734 + (cbSceneParam._m0[72u].w * _2707)));
    SV_Target.y = _2745 * (_2726 ? _2735 : (_2735 + (cbSceneParam._m0[72u].w * _2709)));
    SV_Target.z = _2745 * (_2726 ? _2736 : (_2736 + (cbSceneParam._m0[72u].w * _2711)));
    SV_Target.w = cbInstanceData._m0[_2586].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2586].w;
}


