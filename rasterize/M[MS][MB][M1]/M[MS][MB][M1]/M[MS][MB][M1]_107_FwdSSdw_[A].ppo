#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1401;
float _3805;
float _3806;
float _3807;
float _3808;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _240 = _239 * _231;
    float _241 = _239 * _232;
    float _242 = _239 * _233;
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = _246 * NORMAL.x;
    float _248 = _246 * NORMAL.y;
    float _249 = _246 * NORMAL.z;
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254 = _253 * TANGENT.x;
    float _255 = _253 * TANGENT.y;
    float _256 = _253 * TANGENT.z;
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _299.x * cbMtdParam._m0[11u].x;
    float _306 = _299.y * cbMtdParam._m0[11u].y;
    float _307 = _299.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _364 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _366 = _364.x;
    float _378 = dot(vec4(_366, _364.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _395 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_366 - _378) * cbMtdParam._m0[24u].y) + _378) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3817 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _396 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _403 = (_396 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305;
    float _404 = (_396 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306;
    float _405 = (_396 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307;
    vec4 _423 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _278) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _279) + cbTextureTilingScale._m0[20u].w));
    vec4 _450 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _467 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _469 = _467.x;
    float _470 = _467.y;
    float _471 = _467.z;
    float _480 = ((_450.z - _471) * _396) + _471;
    float _483 = ((((_450.x - _469) * _396) + _469) * 2.0) + (-1.0);
    float _484 = ((((_450.y - _470) * _396) + _470) * 2.0) + (-1.0);
    float _485 = dot(vec2(_483, _484), vec2(_483, _484));
    float _3828 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _490 = sqrt(1.0 - (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))));
    vec4 _510 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _522 = (_483 + ((((_423.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_510.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _523 = (_484 + ((((_423.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_510.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _526 = fma(_490, _247, fma(_523, _254, _522 * _240));
    float _529 = fma(_490, _248, fma(_523, _255, _522 * _241));
    float _532 = fma(_490, _249, fma(_523, _256, _522 * _242));
    float _536 = inversesqrt(dot(vec3(_526, _529, _532), vec3(_526, _529, _532)));
    vec4 _563 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _565 = _563.x;
    float _566 = 1.0 - _565;
    float _572 = (cbMtdParam._m0[19u].x + dot(vec4(_536 * _526, _536 * _529, _536 * _532, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_565 - _566) * cbMtdParam._m0[24u].z) + _566) * cbMtdParam._m0[21u].z);
    float _3839 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _573 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _575 = (-0.0) - cbMtdParam._m0[24u].x;
    float _577 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _578 = isnan(1.0) ? _577 : (isnan(_577) ? 1.0 : min(_577, 1.0));
    float _585 = _573 - ((_573 * TEXCOORD_8.x) * _578);
    float _586 = _573 - ((_573 * TEXCOORD_8.y) * _578);
    float _587 = _573 - ((_573 * TEXCOORD_8.z) * _578);
    float _594 = (_585 * (cbMtdParam._m0[17u].x - _403)) + _403;
    float _595 = (_586 * (cbMtdParam._m0[17u].y - _404)) + _404;
    float _596 = (_587 * (cbMtdParam._m0[17u].z - _405)) + _405;
    vec4 _608 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _610 = _608.x;
    float _611 = 1.0 - _610;
    float _639 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_610 - _611) * cbMtdParam._m0[24u].w) + _611) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3860 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _640 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    float _648 = ((((cbMtdParam._m0[10u].x - _594) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _640) + _594;
    float _649 = ((((cbMtdParam._m0[10u].y - _595) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _640) + _595;
    float _650 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _596)) * _640) + _596;
    vec4 _676 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _678 = _676.x;
    float _696 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _278) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _279) + cbTextureTilingScale._m0[9u].w)).x - _678) * _396) + _678;
    float _700 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _696) * cbMtdParam._m0[19u].z) + _696;
    float _702 = _700 - (_700 * _585);
    float _704 = _702 - (_702 * _640);
    float _709 = (((_423.z - _480) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _480;
    float _713 = ((_510.z - _709) * cbMtdParam._m0[19u].w) + _709;
    vec4 _727 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _734 = (_727.x * 2.0) + (-1.0);
    float _735 = (_727.y * 2.0) + (-1.0);
    float _736 = dot(vec2(_734, _735), vec2(_734, _735));
    float _3871 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _744 = ((_727.z - _713) * _585) + _713;
    float _747 = ((cbMtdParam._m0[23u].y - _744) * _640) + _744;
    vec4 _766 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _772 = (_766.x * 2.0) + (-1.0);
    float _773 = (_766.y * 2.0) + (-1.0);
    float _774 = dot(vec2(_772, _773), vec2(_772, _773));
    float _3882 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _789 = ((sqrt(1.0 - (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) - _490) * _587) + _490;
    float _792 = (((_734 - _522) * _585) + _522) + (cbMtdParam._m0[21u].x * _522);
    float _793 = (((_735 - _523) * _586) + _523) + (cbMtdParam._m0[21u].x * _523);
    float _804 = (((_772 - _792) + (_792 * cbMtdParam._m0[22u].z)) * _640) + _792;
    float _805 = (((_773 - _793) + (_793 * cbMtdParam._m0[22u].z)) * _640) + _793;
    float _806 = (_640 * (sqrt(1.0 - (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) - _789)) + _789;
    float _808 = cbMtdParam._m0[22u].x + _510.w;
    float _811 = fma(_806, _247, fma(_805, _254, _804 * _240));
    float _814 = fma(_806, _248, fma(_805, _255, _804 * _241));
    float _817 = fma(_806, _249, fma(_805, _256, _804 * _242));
    float _821 = inversesqrt(dot(vec3(_811, _814, _817), vec3(_811, _814, _817)));
    float _822 = _821 * _811;
    float _823 = _821 * _814;
    float _824 = _821 * _817;
    float _3893 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _825 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _3904 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _3915 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _3926 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _3937 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _3948 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _830 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _844 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _884 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _894 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _884);
    float _895 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _884);
    float _896 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _884);
    float _900 = inversesqrt(dot(vec3(_894, _895, _896), vec3(_894, _895, _896)));
    float _901 = _894 * _900;
    float _902 = _895 * _900;
    float _903 = _896 * _900;
    vec4 _908 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _910 = _908.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1082 = sqrt(((_894 * _894) + (_895 * _895)) + (_896 * _896));
        float _1088 = (cbMatDynParam._m0[5u].x * _1082) + cbMatDynParam._m0[5u].y;
        float _3959 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1093 = (cbMatDynParam._m0[5u].z * _1082) + cbMatDynParam._m0[5u].w;
        float _3970 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) - _1089)) + _1089) < ((_910 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _921 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _922 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _940 = fma(_824, cbSceneParam._m0[5u].z, fma(_823, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _822));
    float _943 = fma(_824, cbSceneParam._m0[6u].z, fma(_823, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _822));
    float _946 = fma(_824, cbSceneParam._m0[7u].z, fma(_823, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _822));
    uint _959 = _259 + 9u;
    uint _960 = _959 + uint(cbMatDynParam._m0[0u].w);
    float _966 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0)))) * cbInstanceData._m0[_960].x;
    float _967 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0)))) * cbInstanceData._m0[_960].y;
    float _968 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0)))) * cbInstanceData._m0[_960].z;
    float _3981 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _969 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _3992 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _970 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
    float _4003 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _971 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _972 = 1.0 - _830;
    float _973 = _969 * _972;
    float _974 = _970 * _972;
    float _975 = _971 * _972;
    float _980 = (_969 + (-0.039999999105930328369140625)) * _830;
    float _981 = (_970 + (-0.039999999105930328369140625)) * _830;
    float _982 = (_971 + (-0.039999999105930328369140625)) * _830;
    float _983 = _980 + 0.039999999105930328369140625;
    float _985 = _981 + 0.039999999105930328369140625;
    float _986 = _982 + 0.039999999105930328369140625;
    vec4 _995 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _921, cbSceneParam._m0[86u].y * _922));
    float _999 = ((isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * TEXCOORD_5.w) * _995.x;
    float _1000 = dot(vec3(_822, _823, _824), vec3(_901, _902, _903));
    float _1003 = _1000 * 2.0;
    float _1007 = (_1003 * _822) - _901;
    float _1008 = (_1003 * _823) - _902;
    float _1009 = (_1003 * _824) - _903;
    float _1013 = abs(dot(vec3(_901, _902, _903), vec3(_822, _823, _824)));
    float _4014 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _1015 = sqrt(_825);
    float _1028 = exp2((_1015 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1015 * 3.0));
    float _1034 = (1.0 - _1028) * ((_1015 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1035 = _1028 * _1015;
    float _1063 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1067 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1071 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1400;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1125 = fma(_1071, cbModelParam._m0[26u].z, fma(_1067, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1063));
        float _1129 = fma(_1071, cbModelParam._m0[27u].z, fma(_1067, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1063));
        float _1133 = fma(_1071, cbModelParam._m0[28u].z, fma(_1067, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1063));
        float _1158 = _1063 + _822;
        float _1159 = _1067 + _823;
        float _1160 = _1071 + _824;
        float _1170 = fma(_1160, cbModelParam._m0[26u].z, fma(_1159, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1158)) - _1125;
        float _1171 = fma(_1160, cbModelParam._m0[27u].z, fma(_1159, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1158)) - _1129;
        float _1172 = fma(_1160, cbModelParam._m0[28u].z, fma(_1159, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1158)) - _1133;
        float _1176 = inversesqrt(dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172)));
        float _1189 = ((_1176 * _1170) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1125 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1190 = ((_1176 * _1171) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1129 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1191 = ((_1176 * _1172) / cbModelParam._m0[34u].z) + ((((((_1133 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        float _1228 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1194.x + (-0.5));
        float _1230 = _1228 * (_1194.y + (-0.5));
        float _1231 = _1228 * (_1194.z + (-0.5));
        float _1238 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1201.x + (-0.5));
        float _1240 = _1238 * (_1201.y + (-0.5));
        float _1241 = _1238 * (_1201.z + (-0.5));
        float _1248 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1208.x + (-0.5));
        float _1250 = _1248 * (_1208.y + (-0.5));
        float _1251 = _1248 * (_1208.z + (-0.5));
        float _1258 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1215.x + (-0.5));
        float _1260 = _1258 * (_1215.y + (-0.5));
        float _1261 = _1258 * (_1215.z + (-0.5));
        float _1262 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1263 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1264 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1265 = _1229 * 0.5;
        float _1266 = _1239 * 0.5;
        float _1267 = _1249 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1282 = (dot(vec3(_822, _823, _824), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _4040 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1292 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1262 + 9.9999997473787516355514526367188e-06);
        float _4051 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _4062 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_1294 + 1.0))) + _1299) * _1262;
        float _1309 = _1230 * 0.5;
        float _1310 = _1240 * 0.5;
        float _1311 = _1250 * 0.5;
        float _1312 = dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311));
        float _1317 = (_1312 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1312);
        float _1325 = (dot(vec3(_822, _823, _824), vec3(_1317 * _1309, _1317 * _1310, _1317 * _1311)) + 1.0) * 0.5;
        float _4073 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1334 = sqrt(((_1310 * _1310) + (_1309 * _1309)) + (_1311 * _1311)) / (_1263 + 9.9999997473787516355514526367188e-06);
        float _4084 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1336 = _1335 * 2.0;
        float _1340 = (1.0 - _1335) / (_1335 + 1.0);
        float _4095 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1350 = ((((1.0 - _1341) * (_1336 + 2.0)) * exp2(log2(isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_1336 + 1.0))) + _1341) * _1263;
        float _1351 = _1231 * 0.5;
        float _1352 = _1241 * 0.5;
        float _1353 = _1251 * 0.5;
        float _1354 = dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353));
        float _1359 = (_1354 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1354);
        float _1367 = (dot(vec3(_822, _823, _824), vec3(_1359 * _1351, _1359 * _1352, _1359 * _1353)) + 1.0) * 0.5;
        float _4106 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1376 = sqrt(((_1352 * _1352) + (_1351 * _1351)) + (_1353 * _1353)) / (_1264 + 9.9999997473787516355514526367188e-06);
        float _4117 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1378 = _1377 * 2.0;
        float _1382 = (1.0 - _1377) / (_1377 + 1.0);
        float _4128 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1392 = ((((1.0 - _1383) * (_1378 + 2.0)) * exp2(log2(isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_1378 + 1.0))) + _1383) * _1264;
        _1400 = _1231;
        _1402 = _1230;
        _1403 = _1229;
        _1404 = _1241;
        _1405 = _1240;
        _1406 = _1239;
        _1407 = _1251;
        _1408 = _1250;
        _1409 = _1249;
        _1410 = _1264;
        _1411 = _1263;
        _1412 = _1262;
        _1413 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
        _1414 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)));
        _1415 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)));
    }
    else
    {
        _1400 = _1401;
        _1402 = _1401;
        _1403 = _1401;
        _1404 = _1401;
        _1405 = _1401;
        _1406 = _1401;
        _1407 = _1401;
        _1408 = _1401;
        _1409 = _1401;
        _1410 = _1401;
        _1411 = _1401;
        _1412 = _1401;
        _1413 = 0.0;
        _1414 = 0.0;
        _1415 = 0.0;
    }
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1443 = fma(_1071, cbModelParam._m0[30u].z, fma(_1067, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1063));
        float _1447 = fma(_1071, cbModelParam._m0[31u].z, fma(_1067, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1063));
        float _1451 = fma(_1071, cbModelParam._m0[32u].z, fma(_1067, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1063));
        float _1474 = _1063 + _822;
        float _1475 = _1067 + _823;
        float _1476 = _1071 + _824;
        float _1486 = fma(_1476, cbModelParam._m0[30u].z, fma(_1475, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1474)) - _1443;
        float _1487 = fma(_1476, cbModelParam._m0[31u].z, fma(_1475, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1474)) - _1447;
        float _1488 = fma(_1476, cbModelParam._m0[32u].z, fma(_1475, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1474)) - _1451;
        float _1492 = inversesqrt(dot(vec3(_1486, _1487, _1488), vec3(_1486, _1487, _1488)));
        float _1505 = ((_1492 * _1486) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1443 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1506 = ((_1492 * _1487) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1447 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1507 = ((_1492 * _1488) / cbModelParam._m0[35u].z) + ((((((_1451 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1509 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1505, _1506, _1507), 0.0);
        vec4 _1516 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1505, _1506, _1507), 0.0);
        vec4 _1523 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1505, _1506, _1507), 0.0);
        vec4 _1530 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1505, _1506, _1507), 0.0);
        float _1542 = exp2((_1509.w + (-0.5)) * 20.0) * 2.0;
        float _1543 = _1542 * (_1509.x + (-0.5));
        float _1544 = _1542 * (_1509.y + (-0.5));
        float _1545 = _1542 * (_1509.z + (-0.5));
        float _1552 = exp2((_1516.w + (-0.5)) * 20.0) * 2.0;
        float _1553 = _1552 * (_1516.x + (-0.5));
        float _1554 = _1552 * (_1516.y + (-0.5));
        float _1555 = _1552 * (_1516.z + (-0.5));
        float _1562 = exp2((_1523.w + (-0.5)) * 20.0) * 2.0;
        float _1563 = _1562 * (_1523.x + (-0.5));
        float _1564 = _1562 * (_1523.y + (-0.5));
        float _1565 = _1562 * (_1523.z + (-0.5));
        float _1572 = exp2((_1530.w + (-0.5)) * 20.0) * 2.0;
        float _1573 = _1572 * (_1530.x + (-0.5));
        float _1574 = _1572 * (_1530.y + (-0.5));
        float _1575 = _1572 * (_1530.z + (-0.5));
        float _1576 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1577 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1578 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1579 = _1543 * 0.5;
        float _1580 = _1553 * 0.5;
        float _1581 = _1563 * 0.5;
        float _1582 = dot(vec3(_1579, _1580, _1581), vec3(_1579, _1580, _1581));
        float _1587 = (_1582 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1582);
        float _1595 = (dot(vec3(_822, _823, _824), vec3(_1587 * _1579, _1587 * _1580, _1587 * _1581)) + 1.0) * 0.5;
        float _4169 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1604 = sqrt(((_1580 * _1580) + (_1579 * _1579)) + (_1581 * _1581)) / (_1576 + 9.9999997473787516355514526367188e-06);
        float _4180 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1605 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1606 = _1605 * 2.0;
        float _1610 = (1.0 - _1605) / (_1605 + 1.0);
        float _4191 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1620 = ((((1.0 - _1611) * (_1606 + 2.0)) * exp2(log2(isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_1606 + 1.0))) + _1611) * _1576;
        float _1621 = _1544 * 0.5;
        float _1622 = _1554 * 0.5;
        float _1623 = _1564 * 0.5;
        float _1624 = dot(vec3(_1621, _1622, _1623), vec3(_1621, _1622, _1623));
        float _1629 = (_1624 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1624);
        float _1637 = (dot(vec3(_822, _823, _824), vec3(_1629 * _1621, _1629 * _1622, _1629 * _1623)) + 1.0) * 0.5;
        float _4202 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1646 = sqrt(((_1622 * _1622) + (_1621 * _1621)) + (_1623 * _1623)) / (_1577 + 9.9999997473787516355514526367188e-06);
        float _4213 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1647 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1648 = _1647 * 2.0;
        float _1652 = (1.0 - _1647) / (_1647 + 1.0);
        float _4224 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1662 = ((((1.0 - _1653) * (_1648 + 2.0)) * exp2(log2(isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_1648 + 1.0))) + _1653) * _1577;
        float _1663 = _1545 * 0.5;
        float _1664 = _1555 * 0.5;
        float _1665 = _1565 * 0.5;
        float _1666 = dot(vec3(_1663, _1664, _1665), vec3(_1663, _1664, _1665));
        float _1671 = (_1666 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1666);
        float _1679 = (dot(vec3(_822, _823, _824), vec3(_1671 * _1663, _1671 * _1664, _1671 * _1665)) + 1.0) * 0.5;
        float _4235 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1688 = sqrt(((_1664 * _1664) + (_1663 * _1663)) + (_1665 * _1665)) / (_1578 + 9.9999997473787516355514526367188e-06);
        float _4246 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1689 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1690 = _1689 * 2.0;
        float _1694 = (1.0 - _1689) / (_1689 + 1.0);
        float _4257 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1695 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1704 = ((((1.0 - _1695) * (_1690 + 2.0)) * exp2(log2(isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_1690 + 1.0))) + _1695) * _1578;
        _1712 = _1545;
        _1713 = _1544;
        _1714 = _1543;
        _1715 = _1555;
        _1716 = _1554;
        _1717 = _1553;
        _1718 = _1565;
        _1719 = _1564;
        _1720 = _1563;
        _1721 = _1578;
        _1722 = _1577;
        _1723 = _1576;
        _1724 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)));
        _1725 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)));
        _1726 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)));
    }
    else
    {
        _1712 = _1401;
        _1713 = _1401;
        _1714 = _1401;
        _1715 = _1401;
        _1716 = _1401;
        _1717 = _1401;
        _1718 = _1401;
        _1719 = _1401;
        _1720 = _1401;
        _1721 = _1401;
        _1722 = _1401;
        _1723 = _1401;
        _1724 = 0.0;
        _1725 = 0.0;
        _1726 = 0.0;
    }
    float _1736 = (cbModelParam._m0[1u].x * (_1724 - _1413)) + _1413;
    float _1737 = (cbModelParam._m0[1u].x * (_1725 - _1414)) + _1414;
    float _1738 = (cbModelParam._m0[1u].x * (_1726 - _1415)) + _1415;
    float _1759 = fma(_1738, cbSceneParam._m0[89u].z, fma(_1737, cbSceneParam._m0[89u].y, _1736 * cbSceneParam._m0[89u].x));
    float _1762 = fma(_1738, cbSceneParam._m0[90u].z, fma(_1737, cbSceneParam._m0[90u].y, _1736 * cbSceneParam._m0[90u].x));
    float _1765 = fma(_1738, cbSceneParam._m0[91u].z, fma(_1737, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1736));
    float _1780 = _1007 * 0.5;
    float _1781 = _1008 * 0.5;
    float _1782 = _1009 * 0.5;
    float _1783 = dot(vec4(_1780, _1781, _1782, 1.0), vec4(_1714, _1717, _1720, _1723));
    float _1786 = dot(vec4(_1780, _1781, _1782, 1.0), vec4(_1713, _1716, _1719, _1722));
    float _1789 = dot(vec4(_1780, _1781, _1782, 1.0), vec4(_1712, _1715, _1718, _1721));
    float _1823;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1796 = dot(vec4(_1780, _1781, _1782, 1.0), vec4(_1400, _1404, _1407, _1410));
        float _1800 = dot(vec4(_1780, _1781, _1782, 1.0), vec4(_1402, _1405, _1408, _1411));
        float _1804 = dot(vec4(_1780, _1781, _1782, 1.0), vec4(_1403, _1406, _1409, _1412));
        float _1811 = dot(vec4(cbModelParam._m0[39u]), vec4(_1780, _1781, _1782, 1.0));
        _1823 = dot(vec3(isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0)), isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0)), isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1811) ? 0.0 : (isnan(0.0) ? _1811 : max(0.0, _1811))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1823 = 1.0;
    }
    float _1834;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1825 = dot(vec4(cbModelParam._m0[40u]), vec4(_1780, _1781, _1782, 1.0));
        _1834 = dot(vec3(isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)), isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0)), isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1825) ? 0.0 : (isnan(0.0) ? _1825 : max(0.0, _1825))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1834 = 1.0;
    }
    float _1838 = (_1834 * cbModelParam._m0[1u].x) + (_1823 * (1.0 - cbModelParam._m0[1u].x));
    float _1848 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _825);
    float _1849 = isnan(_1848) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1848 : min(cbModelParam._m0[25u].z, _1848));
    float _1930;
    float _1932;
    float _1934;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1897 = fma(_1071, cbModelParam._m0[13u].z, fma(_1067, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1063)) + cbModelParam._m0[13u].w;
        float _1901 = fma(_1071, cbModelParam._m0[14u].z, fma(_1067, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1063)) + cbModelParam._m0[14u].w;
        float _1905 = fma(_1071, cbModelParam._m0[15u].z, fma(_1067, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1063)) + cbModelParam._m0[15u].w;
        float _1908 = fma(_1009, cbModelParam._m0[13u].z, fma(_1008, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1007));
        float _1911 = fma(_1009, cbModelParam._m0[14u].z, fma(_1008, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1007));
        float _1914 = fma(_1009, cbModelParam._m0[15u].z, fma(_1008, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1007));
        float _1942;
        if (_1908 > 0.0)
        {
            _1942 = abs((1.0 - _1897) / _1908);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1908 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1897 + 1.0) / _1908);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1942 = frontier_phi_17_15_ladder;
        }
        float _2166;
        if (_1911 > 0.0)
        {
            _2166 = abs((1.0 - _1901) / _1911);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1911 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1901 + 1.0) / _1911);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2166 = frontier_phi_26_22_ladder;
        }
        float _2423;
        if (_1914 > 0.0)
        {
            _2423 = abs((1.0 - _1905) / _1914);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1914 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1905 + 1.0) / _1914);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2423 = frontier_phi_38_33_ladder;
        }
        float _2425 = isnan(_2166) ? _1942 : (isnan(_1942) ? _2166 : min(_1942, _2166));
        float _2426 = isnan(_2423) ? _2425 : (isnan(_2425) ? _2423 : min(_2425, _2423));
        float _2430 = (_2426 * _1908) + _1897;
        float _2431 = (_2426 * _1911) + _1901;
        float _2432 = (_2426 * _1914) + _1905;
        float _2433 = _2426 * 9.9999997473787516355514526367188e-05;
        float _2435 = (-1.0) - _2433;
        float _2437 = _2433 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2432 > _2437) || ((_2432 < _2435) || ((_2431 > _2437) || ((_2431 < _2435) || ((_2430 < _2435) || (_2430 > _2437))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2560 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2432, cbModelParam._m0[9u].z, fma(_2431, cbModelParam._m0[9u].y, _2430 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2432, cbModelParam._m0[10u].z, fma(_2431, cbModelParam._m0[10u].y, _2430 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2432, cbModelParam._m0[11u].z, fma(_2431, cbModelParam._m0[11u].y, _2430 * cbModelParam._m0[11u].x))), _1849);
            frontier_phi_16_38_ladder = _2560.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2560.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2560.x * cbModelParam._m0[1u].y;
        }
        _1930 = frontier_phi_16_38_ladder_2;
        _1932 = frontier_phi_16_38_ladder_1;
        _1934 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1918 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1007, _1008, _1009), _1849);
        _1930 = _1918.x * cbModelParam._m0[1u].y;
        _1932 = _1918.y * cbModelParam._m0[1u].y;
        _1934 = _1918.z * cbModelParam._m0[1u].y;
    }
    float _1938 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _825);
    float _1939 = isnan(_1938) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1938 : min(cbModelParam._m0[25u].w, _1938));
    float _2029;
    float _2031;
    float _2033;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1993 = fma(_1071, cbModelParam._m0[21u].z, fma(_1067, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1063)) + cbModelParam._m0[21u].w;
        float _1997 = fma(_1071, cbModelParam._m0[22u].z, fma(_1067, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1063)) + cbModelParam._m0[22u].w;
        float _2001 = fma(_1071, cbModelParam._m0[23u].z, fma(_1067, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1063)) + cbModelParam._m0[23u].w;
        float _2004 = fma(_1009, cbModelParam._m0[21u].z, fma(_1008, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1007));
        float _2007 = fma(_1009, cbModelParam._m0[22u].z, fma(_1008, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1007));
        float _2010 = fma(_1009, cbModelParam._m0[23u].z, fma(_1008, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1007));
        float _2171;
        if (_2004 > 0.0)
        {
            _2171 = abs((1.0 - _1993) / _2004);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2004 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1993 + 1.0) / _2004);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2171 = frontier_phi_28_24_ladder;
        }
        float _2450;
        if (_2007 > 0.0)
        {
            _2450 = abs((1.0 - _1997) / _2007);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2007 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1997 + 1.0) / _2007);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2450 = frontier_phi_40_35_ladder;
        }
        float _2663;
        if (_2010 > 0.0)
        {
            _2663 = abs((1.0 - _2001) / _2010);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2010 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2001 + 1.0) / _2010);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2663 = frontier_phi_49_46_ladder;
        }
        float _2665 = isnan(_2450) ? _2171 : (isnan(_2171) ? _2450 : min(_2171, _2450));
        float _2666 = isnan(_2663) ? _2665 : (isnan(_2665) ? _2663 : min(_2665, _2663));
        float _2670 = (_2666 * _2004) + _1993;
        float _2671 = (_2666 * _2007) + _1997;
        float _2672 = (_2666 * _2010) + _2001;
        float _2673 = _2666 * 9.9999997473787516355514526367188e-05;
        float _2674 = (-1.0) - _2673;
        float _2676 = _2673 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2672 > _2676) || ((_2672 < _2674) || ((_2671 > _2676) || ((_2671 < _2674) || ((_2670 < _2674) || (_2670 > _2676))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2871 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2672, cbModelParam._m0[17u].z, fma(_2671, cbModelParam._m0[17u].y, _2670 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2672, cbModelParam._m0[18u].z, fma(_2671, cbModelParam._m0[18u].y, _2670 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2672, cbModelParam._m0[19u].z, fma(_2671, cbModelParam._m0[19u].y, _2670 * cbModelParam._m0[19u].x))), _1939);
            frontier_phi_25_49_ladder = _2871.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2871.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2871.x * cbModelParam._m0[1u].z;
        }
        _2029 = frontier_phi_25_49_ladder_2;
        _2031 = frontier_phi_25_49_ladder_1;
        _2033 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2013 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1007, _1008, _1009), _1939);
        _2029 = _2013.x * cbModelParam._m0[1u].z;
        _2031 = _2013.y * cbModelParam._m0[1u].z;
        _2033 = _2013.z * cbModelParam._m0[1u].z;
    }
    float _2046 = (((_1034 * _983) + _1035) * _999) * ((cbModelParam._m0[1u].w * (_2029 - _1930)) + _1930);
    float _2048 = (((_1034 * _985) + _1035) * _999) * ((cbModelParam._m0[1u].w * (_2031 - _1932)) + _1932);
    float _2050 = (((_1034 * _986) + _1035) * _999) * ((cbModelParam._m0[1u].w * (_2033 - _1934)) + _1934);
    float _2053 = fma(_2050, cbSceneParam._m0[89u].z, fma(_2048, cbSceneParam._m0[89u].y, _2046 * cbSceneParam._m0[89u].x));
    float _2056 = fma(_2050, cbSceneParam._m0[90u].z, fma(_2048, cbSceneParam._m0[90u].y, _2046 * cbSceneParam._m0[90u].x));
    float _2059 = fma(_2050, cbSceneParam._m0[91u].z, fma(_2048, cbSceneParam._m0[91u].y, _2046 * cbSceneParam._m0[91u].x));
    vec4 _2067 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_921, _922));
    float _2069 = _2067.w;
    float _2081 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2069);
    float _2082 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2069);
    float _2083 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2069);
    uvec4 _2087 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _2089 = _2087.x * 14u;
    uint _2090 = _2089 + 13u;
    float _2097 = _999 + (-1.0);
    float _2102 = (cbLight._m0[_2090].x * _2097) + 1.0;
    float _2103 = (cbLight._m0[_2090].y * _2097) + 1.0;
    float _2104 = (cbLight._m0[_2090].z * _2097) + 1.0;
    float _2105 = (cbLight._m0[_2090].w * _2097) + 1.0;
    uint _2106 = _2089 + 5u;
    float _2112 = isnan(1.0) ? _2103 : (isnan(_2103) ? 1.0 : min(_2103, 1.0));
    uint _2116 = _2089 + 4u;
    float _2125 = isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0));
    uint _2129 = _2089 | 1u;
    float _2140 = dot(vec3(cbLight._m0[_2089].xyz), vec3(_822, _823, _824));
    float _2143 = dot(vec3(cbLight._m0[_2129].xyz), vec3(_822, _823, _824));
    float _4393 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _4404 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2148 = (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * 0.3183098733425140380859375;
    float _2150 = (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * 0.3183098733425140380859375;
    float _2157 = ((cbLight._m0[_2106].x * _2112) * _2150) + (((cbLight._m0[_2116].x * _2081) * _2125) * _2148);
    float _2158 = ((_2112 * cbLight._m0[_2106].y) * _2150) + (((cbLight._m0[_2116].y * _2082) * _2125) * _2148);
    float _2159 = ((_2112 * cbLight._m0[_2106].z) * _2150) + (((cbLight._m0[_2116].z * _2083) * _2125) * _2148);
    uvec4 _2163 = floatBitsToUint(cbLight._m0[_2089 + 12u]);
    bool _2165 = _2163.x == 0u;
    float _2176;
    float _2178;
    float _2180;
    if (_2165)
    {
        _2176 = _2157;
        _2178 = _2158;
        _2180 = _2159;
    }
    else
    {
        uint _2184 = _2089 + 6u;
        float _2200 = (dot(vec3(cbLight._m0[_2089 + 2u].xyz), vec3(_822, _823, _824)) * 0.5) + 0.5;
        float _2201 = _2200 * _2200;
        float _4415 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
        float _2202 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _2203 = isnan(1.0) ? _2104 : (isnan(_2104) ? 1.0 : min(_2104, 1.0));
        _2176 = (((cbLight._m0[_2184].x * 0.3183098733425140380859375) * _2202) * _2203) + _2157;
        _2178 = (((cbLight._m0[_2184].y * 0.3183098733425140380859375) * _2202) * _2203) + _2158;
        _2180 = (((cbLight._m0[_2184].z * 0.3183098733425140380859375) * _2202) * _2203) + _2159;
    }
    bool _2183 = _2163.y == 0u;
    float _2221;
    float _2223;
    float _2225;
    if (_2183)
    {
        _2221 = _2176;
        _2223 = _2178;
        _2225 = _2180;
    }
    else
    {
        uint _2394 = _2089 + 7u;
        float _2410 = (dot(vec3(cbLight._m0[_2089 + 3u].xyz), vec3(_822, _823, _824)) * 0.5) + 0.5;
        float _2411 = _2410 * _2410;
        float _4431 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
        float _2412 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _2413 = isnan(1.0) ? _2105 : (isnan(_2105) ? 1.0 : min(_2105, 1.0));
        _2221 = (((cbLight._m0[_2394].x * 0.3183098733425140380859375) * _2412) * _2413) + _2176;
        _2223 = (((cbLight._m0[_2394].y * 0.3183098733425140380859375) * _2412) * _2413) + _2178;
        _2225 = (((cbLight._m0[_2394].z * 0.3183098733425140380859375) * _2412) * _2413) + _2180;
    }
    uint _2228 = _2089 + 8u;
    float _2241 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2089].w)) * _825) * 0.949999988079071044921875);
    float _2242 = _2241 * _2241;
    float _2243 = cbLight._m0[_2089].x + _901;
    float _2244 = cbLight._m0[_2089].y + _902;
    float _2245 = cbLight._m0[_2089].z + _903;
    float _2249 = inversesqrt(dot(vec3(_2243, _2244, _2245), vec3(_2243, _2244, _2245)));
    float _2250 = _2249 * _2243;
    float _2251 = _2249 * _2244;
    float _2252 = _2249 * _2245;
    float _2253 = dot(vec3(_822, _823, _824), vec3(cbLight._m0[_2089].xyz));
    float _4447 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
    float _2256 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
    float _4458 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _2257 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
    float _2258 = dot(vec3(_822, _823, _824), vec3(_2250, _2251, _2252));
    float _4469 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2261 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
    float _2262 = dot(vec3(cbLight._m0[_2089].xyz), vec3(_2250, _2251, _2252));
    float _4480 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2266 = _2242 * _2242;
    float _2270 = ((_2261 * _2261) * (_2266 + (-1.0))) + 1.0;
    float _2278 = exp2(log2(1.0 - (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0)))) * 5.0);
    float _2279 = 0.959999978542327880859375 - _980;
    float _2281 = 0.959999978542327880859375 - _981;
    float _2282 = 0.959999978542327880859375 - _982;
    float _2289 = 1.0 - _2242;
    float _2300 = (0.5 / (((_2257 * ((_2256 * _2289) + _2242)) + 9.9999999392252902907785028219223e-09) + (((_2257 * _2289) + _2242) * _2256))) * _2256;
    float _4491 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
    float _2302 = (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * (_2266 / ((_2270 * _2270) * 3.141590118408203125));
    uint _2316 = _2089 + 9u;
    float _2327 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2129].w)) * _825) * 0.949999988079071044921875);
    float _2328 = _2327 * _2327;
    float _2329 = cbLight._m0[_2129].x + _901;
    float _2330 = cbLight._m0[_2129].y + _902;
    float _2331 = cbLight._m0[_2129].z + _903;
    float _2335 = inversesqrt(dot(vec3(_2329, _2330, _2331), vec3(_2329, _2330, _2331)));
    float _2336 = _2335 * _2329;
    float _2337 = _2335 * _2330;
    float _2338 = _2335 * _2331;
    float _2339 = dot(vec3(_822, _823, _824), vec3(cbLight._m0[_2129].xyz));
    float _4502 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2342 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
    float _2343 = dot(vec3(_822, _823, _824), vec3(_2336, _2337, _2338));
    float _4513 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2346 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
    float _2347 = dot(vec3(cbLight._m0[_2129].xyz), vec3(_2336, _2337, _2338));
    float _4524 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _2351 = _2328 * _2328;
    float _2355 = ((_2346 * _2346) * (_2351 + (-1.0))) + 1.0;
    float _2362 = exp2(log2(1.0 - (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0)))) * 5.0);
    float _2369 = 1.0 - _2328;
    float _2379 = (0.5 / (((_2257 * ((_2342 * _2369) + _2328)) + 9.9999999392252902907785028219223e-09) + (((_2257 * _2369) + _2328) * _2342))) * _2342;
    float _4535 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
    float _2381 = (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (_2351 / ((_2355 * _2355) * 3.141590118408203125));
    float _2391 = (((((_2362 * _2279) + _983) * cbLight._m0[_2316].x) * _2381) * _2112) + ((((cbLight._m0[_2228].x * _2081) * ((_2278 * _2279) + _983)) * _2302) * _2125);
    float _2392 = (((((_2362 * _2281) + _985) * cbLight._m0[_2316].y) * _2381) * _2112) + ((((cbLight._m0[_2228].y * _2082) * ((_2278 * _2281) + _985)) * _2302) * _2125);
    float _2393 = (((((_2362 * _2282) + _986) * cbLight._m0[_2316].z) * _2381) * _2112) + ((((cbLight._m0[_2228].z * _2083) * ((_2278 * _2282) + _986)) * _2302) * _2125);
    float _2455;
    float _2457;
    float _2459;
    if (_2165)
    {
        _2455 = _2391;
        _2457 = _2392;
        _2459 = _2393;
    }
    else
    {
        uint _2461 = _2089 + 2u;
        uint _2465 = _2089 + 10u;
        float _2479 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2461].w)) * _825) * 0.949999988079071044921875);
        float _2480 = _2479 * _2479;
        float _2481 = cbLight._m0[_2461].x + _901;
        float _2482 = cbLight._m0[_2461].y + _902;
        float _2483 = cbLight._m0[_2461].z + _903;
        float _2487 = inversesqrt(dot(vec3(_2481, _2482, _2483), vec3(_2481, _2482, _2483)));
        float _2488 = _2487 * _2481;
        float _2489 = _2487 * _2482;
        float _2490 = _2487 * _2483;
        float _2491 = dot(vec3(_822, _823, _824), vec3(cbLight._m0[_2461].xyz));
        float _4546 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2494 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
        float _2495 = dot(vec3(_822, _823, _824), vec3(_2488, _2489, _2490));
        float _4557 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2498 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
        float _2499 = dot(vec3(cbLight._m0[_2461].xyz), vec3(_2488, _2489, _2490));
        float _4568 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2503 = _2480 * _2480;
        float _2507 = ((_2498 * _2498) * (_2503 + (-1.0))) + 1.0;
        float _2514 = exp2(log2(1.0 - (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0)))) * 5.0);
        float _2521 = 1.0 - _2480;
        float _2531 = (0.5 / (((_2257 * ((_2494 * _2521) + _2480)) + 9.9999999392252902907785028219223e-09) + (((_2257 * _2521) + _2480) * _2494))) * _2494;
        float _4579 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        float _2533 = (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * (_2503 / ((_2507 * _2507) * 3.141590118408203125));
        float _2534 = isnan(1.0) ? _2104 : (isnan(_2104) ? 1.0 : min(_2104, 1.0));
        _2455 = (((((_2514 * _2279) + _983) * cbLight._m0[_2465].x) * _2533) * _2534) + _2391;
        _2457 = (((((_2514 * _2281) + _985) * cbLight._m0[_2465].y) * _2533) * _2534) + _2392;
        _2459 = (((((_2514 * _2282) + _986) * cbLight._m0[_2465].z) * _2533) * _2534) + _2393;
    }
    float _2569;
    float _2571;
    float _2573;
    if (_2183)
    {
        _2569 = _2455;
        _2571 = _2457;
        _2573 = _2459;
    }
    else
    {
        uint _2580 = _2089 + 3u;
        uint _2584 = _2089 + 11u;
        float _2598 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2580].w)) * _825) * 0.949999988079071044921875);
        float _2599 = _2598 * _2598;
        float _2600 = cbLight._m0[_2580].x + _901;
        float _2601 = cbLight._m0[_2580].y + _902;
        float _2602 = cbLight._m0[_2580].z + _903;
        float _2606 = inversesqrt(dot(vec3(_2600, _2601, _2602), vec3(_2600, _2601, _2602)));
        float _2607 = _2606 * _2600;
        float _2608 = _2606 * _2601;
        float _2609 = _2606 * _2602;
        float _2610 = dot(vec3(_822, _823, _824), vec3(cbLight._m0[_2580].xyz));
        float _4595 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
        float _2613 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
        float _2614 = dot(vec3(_822, _823, _824), vec3(_2607, _2608, _2609));
        float _4606 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
        float _2617 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
        float _2618 = dot(vec3(cbLight._m0[_2580].xyz), vec3(_2607, _2608, _2609));
        float _4617 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        float _2622 = _2599 * _2599;
        float _2626 = ((_2617 * _2617) * (_2622 + (-1.0))) + 1.0;
        float _2633 = exp2(log2(1.0 - (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0)))) * 5.0);
        float _2640 = 1.0 - _2599;
        float _2650 = (0.5 / (((_2257 * ((_2613 * _2640) + _2599)) + 9.9999999392252902907785028219223e-09) + (((_2257 * _2640) + _2599) * _2613))) * _2613;
        float _4628 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        float _2652 = (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * (_2622 / ((_2626 * _2626) * 3.141590118408203125));
        float _2653 = isnan(1.0) ? _2105 : (isnan(_2105) ? 1.0 : min(_2105, 1.0));
        _2569 = (((((_2633 * _2279) + _983) * cbLight._m0[_2584].x) * _2652) * _2653) + _2455;
        _2571 = (((((_2633 * _2281) + _985) * cbLight._m0[_2584].y) * _2652) * _2653) + _2457;
        _2573 = (((((_2633 * _2282) + _986) * cbLight._m0[_2584].z) * _2652) * _2653) + _2459;
    }
    float _2788;
    float _2790;
    float _2792;
    float _2794;
    float _2796;
    float _2798;
    if (_2087.y == 0u)
    {
        float _2728 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2729 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2728;
        float _2730 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2728;
        float _2731 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2728;
        uvec4 _2743 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2744 = _2743.x;
        uint _2755 = uint((float(_2743.y) * floor(float(uint(cbSceneParam._m0[85u].y * _922) / _2744))) + floor(float(uint(cbSceneParam._m0[85u].x * _921) / _2744)));
        float _2765 = (log2(_2731 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2766 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
        uint _2769 = uint(isnan(14.0) ? _2766 : (isnan(_2766) ? 14.0 : min(_2766, 14.0)));
        uvec4 _2774 = texelFetch(g_lightClusterGridBuffer, int(((_2769 << 2u) + (_2755 << 6u)) >> 2u));
        uint _2775 = _2774.x;
        uint _2776 = _2743.z;
        float _2876;
        float _2878;
        float _2880;
        float _2882;
        float _2884;
        float _2886;
        if (((((1u << ((_2776 >> 4u) & 15u)) + 4294967295u) & _2775) == 0u) || ((_2776 & 240u) == 0u))
        {
            _2876 = 0.0;
            _2878 = 0.0;
            _2880 = 0.0;
            _2882 = 0.0;
            _2884 = 0.0;
            _2886 = 0.0;
        }
        else
        {
            float _2877;
            float _2879;
            float _2881;
            float _2883;
            float _2885;
            float _2887;
            float _3028 = 0.0;
            float _3029 = 0.0;
            float _3030 = 0.0;
            float _3031 = 0.0;
            float _3032 = 0.0;
            float _3033 = 0.0;
            uint _3034 = 0u;
            uint _3043;
            bool _3044;
            for (;;)
            {
                _3043 = texelFetch(g_lightClassification, int((((_2769 << 5u) + (_2755 << 9u)) + (_3034 << 2u)) >> 2u)).x;
                _3044 = _3043 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3044)
                {
                    frontier_phi_66_pred = _3028;
                    frontier_phi_66_pred_1 = _3033;
                    frontier_phi_66_pred_2 = _3032;
                    frontier_phi_66_pred_3 = _3031;
                    frontier_phi_66_pred_4 = _3030;
                    frontier_phi_66_pred_5 = _3029;
                }
                else
                {
                    float _3173;
                    float _3174;
                    float _3175;
                    float _3176;
                    float _3177;
                    float _3178;
                    uint _3179;
                    _3173 = _3028;
                    _3174 = _3029;
                    _3175 = _3030;
                    _3176 = _3031;
                    _3177 = _3032;
                    _3178 = _3033;
                    _3179 = _3043;
                    float _3100;
                    float _3101;
                    float _3102;
                    float _3103;
                    float _3104;
                    float _3105;
                    for (;;)
                    {
                        uint _3183 = uint(findLSB(_3179)) + (_3034 << 5u);
                        uint _3180 = (_3179 + 4294967295u) & _3179;
                        uint _3185 = _3183 * 48u;
                        vec4 _3199 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3185)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 3u)).x));
                        uint _3205 = (_3183 * 48u) + 4u;
                        vec4 _3218 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3205)).x, texelFetch(g_PointLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3205 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3205 + 3u)).x));
                        uint _3224 = (_3183 * 48u) + 8u;
                        vec3 _3235 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3224)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 2u)).x));
                        float _3239 = _3199.x - _2729;
                        float _3240 = _3199.y - _2730;
                        float _3241 = _3199.z - _2731;
                        float _3242 = dot(vec3(_3239, _3240, _3241), vec3(_3239, _3240, _3241));
                        float _3245 = inversesqrt(_3242);
                        float _3246 = _3245 * _3239;
                        float _3247 = _3245 * _3240;
                        float _3248 = _3245 * _3241;
                        float _3249 = dot(vec3(_940, _943, _946), vec3(_3246, _3247, _3248));
                        float _3254 = 1.0 - (_3242 * _3199.w);
                        float _4654 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                        float _3255 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
                        float _3256 = sqrt(_3242) * _3218.w;
                        float _3259 = 1.39999997615814208984375 / (_3256 + 1.39999997615814208984375);
                        float _3260 = _3259 * _3259;
                        float _3263 = ((1.0 - _3260) * _3249) + _3260;
                        float _3266 = _3256 * _3256;
                        float _3270 = ((isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0))) * _3255) / ((_3266 * 0.699999988079071044921875) + 1.0);
                        float _3274 = (-0.0) - _2729;
                        float _3275 = (-0.0) - _2730;
                        float _3276 = (-0.0) - _2731;
                        float _3280 = inversesqrt(dot(vec3(_3274, _3275, _3276), vec3(_3274, _3275, _3276)));
                        float _3281 = _3280 * _3274;
                        float _3282 = _3280 * _3275;
                        float _3283 = _3280 * _3276;
                        float _3291 = exp2(log2(1.0 / ((_3266 * 3.5) + 5.0)) * 0.25);
                        float _3292 = 1.0 - _1015;
                        float _3299 = sqrt(1.0 - ((1.0 - (_3292 * _3292)) * (1.0 - (_3291 * _3291))));
                        float _3300 = _3299 * _3299;
                        float _3301 = _3300 * _3300;
                        float _3302 = _3281 + _3246;
                        float _3303 = _3282 + _3247;
                        float _3304 = _3283 + _3248;
                        float _3308 = inversesqrt(dot(vec3(_3302, _3303, _3304), vec3(_3302, _3303, _3304)));
                        float _3312 = dot(vec3(_940, _943, _946), vec3(_3281, _3282, _3283));
                        float _4670 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                        float _3315 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
                        float _3316 = dot(vec3(_940, _943, _946), vec3(_3308 * _3302, _3308 * _3303, _3308 * _3304));
                        float _4681 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                        float _3319 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
                        float _3323 = ((_3319 * _3319) * (_3301 + (-1.0))) + 1.0;
                        float _3324 = _3259 * _3300;
                        float _3325 = _3324 * _3324;
                        float _3328 = ((1.0 - _3325) * _3249) + _3325;
                        float _4692 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                        float _3329 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
                        float _3330 = 1.0 - _3300;
                        float _3340 = (0.5 / (((_3329 * ((_3315 * _3330) + _3300)) + 9.9999999392252902907785028219223e-09) + (((_3329 * _3330) + _3300) * _3315))) * _3329;
                        float _4703 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                        float _3351 = (((_3301 * 3.1415927410125732421875) * (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0)))) / ((_3323 * _3323) * ((_3266 * 2.1991131305694580078125) + 3.141590118408203125))) * _3255;
                        _3103 = (_3270 * _3218.x) + _3176;
                        _3104 = (_3270 * _3218.y) + _3177;
                        _3105 = (_3270 * _3218.z) + _3178;
                        _3100 = (_3351 * _3235.x) + _3173;
                        _3101 = (_3351 * _3235.y) + _3174;
                        _3102 = (_3351 * _3235.z) + _3175;
                        if (_3180 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3173 = _3100;
                            _3174 = _3101;
                            _3175 = _3102;
                            _3176 = _3103;
                            _3177 = _3104;
                            _3178 = _3105;
                            _3179 = _3180;
                        }
                    }
                    frontier_phi_66_pred = _3100;
                    frontier_phi_66_pred_1 = _3105;
                    frontier_phi_66_pred_2 = _3104;
                    frontier_phi_66_pred_3 = _3103;
                    frontier_phi_66_pred_4 = _3102;
                    frontier_phi_66_pred_5 = _3101;
                }
                _2877 = frontier_phi_66_pred;
                _2887 = frontier_phi_66_pred_1;
                _2885 = frontier_phi_66_pred_2;
                _2883 = frontier_phi_66_pred_3;
                _2881 = frontier_phi_66_pred_4;
                _2879 = frontier_phi_66_pred_5;
                uint _3035 = _3034 + 1u;
                if (_3035 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3028 = _2877;
                    _3029 = _2879;
                    _3030 = _2881;
                    _3031 = _2883;
                    _3032 = _2885;
                    _3033 = _2887;
                    _3034 = _3035;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2876 = _2877;
            _2878 = _2879;
            _2880 = _2881;
            _2882 = _2883;
            _2884 = _2885;
            _2886 = _2887;
        }
        uvec4 _2890 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2891 = _2890.z;
        uint _2893 = (_2891 >> 8u) & 15u;
        float _2996;
        float _2998;
        float _3000;
        float _3002;
        float _3004;
        float _3006;
        if (((4294967295u << _2893) & _2775) == 0u)
        {
            _2996 = _2876;
            _2998 = _2878;
            _3000 = _2880;
            _3002 = _2882;
            _3004 = _2884;
            _3006 = _2886;
        }
        else
        {
            float _3021 = inversesqrt(dot(vec3(_2729, _2730, _2731), vec3(_2729, _2730, _2731)));
            float _3022 = _3021 * _2729;
            float _3023 = _3021 * _2730;
            float _3024 = _3021 * _2731;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2893 < ((_2891 >> 12u) & 15u))
            {
                float _2997;
                float _2999;
                float _3001;
                float _3003;
                float _3005;
                float _3007;
                float _3156 = _2876;
                float _3157 = _2878;
                float _3158 = _2880;
                float _3159 = _2882;
                float _3160 = _2884;
                float _3161 = _2886;
                uint _3162 = _2893;
                uint _3171;
                bool _3172;
                for (;;)
                {
                    _3171 = texelFetch(g_lightClassification, int((((_2769 << 5u) + (_2755 << 9u)) + (_3162 << 2u)) >> 2u)).x;
                    _3172 = _3171 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3172)
                    {
                        frontier_phi_77_pred = _3161;
                        frontier_phi_77_pred_1 = _3160;
                        frontier_phi_77_pred_2 = _3159;
                        frontier_phi_77_pred_3 = _3158;
                        frontier_phi_77_pred_4 = _3157;
                        frontier_phi_77_pred_5 = _3156;
                    }
                    else
                    {
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3370;
                        float _3658;
                        float _3659;
                        float _3660;
                        float _3661;
                        float _3662;
                        float _3663;
                        float _3378 = _3156;
                        float _3379 = _3157;
                        float _3380 = _3158;
                        float _3381 = _3159;
                        float _3382 = _3160;
                        float _3383 = _3161;
                        uint _3384 = _3171;
                        uint _3385;
                        vec4 _3410;
                        float _3411;
                        vec4 _3426;
                        vec3 _3438;
                        vec4 _3453;
                        vec4 _3468;
                        float _3514;
                        bool _3515;
                        for (;;)
                        {
                            uint _3395 = ((_3162 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3384));
                            _3385 = (_3384 + 4294967295u) & _3384;
                            uint _3397 = _3395 * 40u;
                            _3410 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3397)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 3u)).x));
                            _3411 = _3410.w;
                            uint _3413 = (_3395 * 40u) + 4u;
                            _3426 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3413)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 3u)).x));
                            uint _3428 = (_3395 * 40u) + 8u;
                            _3438 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3428)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 2u)).x));
                            uint _3440 = (_3395 * 40u) + 16u;
                            _3453 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3440)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 3u)).x));
                            uint _3455 = (_3395 * 40u) + 20u;
                            _3468 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3455)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 3u)).x));
                            uint _3470 = (_3395 * 40u) + 24u;
                            vec4 _3483 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3470)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 3u)).x));
                            uint _3489 = (_3395 * 40u) + 28u;
                            vec4 _3502 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3489)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 3u)).x));
                            _3514 = fma(_2731, _3502.z, fma(_2730, _3502.y, _3502.x * _2729)) + _3502.w;
                            _3515 = !((fma(_2731, _3483.z, fma(_2730, _3483.y, _3483.x * _2729)) + _3483.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3515)
                            {
                                float _3542 = _3410.x - _2729;
                                float _3543 = _3410.y - _2730;
                                float _3544 = _3410.z - _2731;
                                float _3545 = dot(vec3(_3542, _3543, _3544), vec3(_3542, _3543, _3544));
                                float _3548 = inversesqrt(_3545);
                                float _3549 = _3548 * _3542;
                                float _3550 = _3548 * _3543;
                                float _3551 = _3548 * _3544;
                                float _3555 = 1.0 - (_3545 / (_3411 * _3411));
                                float _4714 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                                float _3556 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
                                float _3560 = sqrt(_3545) * _3426.w;
                                float _3562 = 1.39999997615814208984375 / (_3560 + 1.39999997615814208984375);
                                float _3563 = _3562 * _3562;
                                float _3566 = ((1.0 - _3563) * dot(vec3(_3549, _3550, _3551), vec3(_940, _943, _946))) + _3563;
                                float _3569 = _3560 * _3560;
                                float _3573 = (fma(_2731, _3453.z, fma(_2730, _3453.y, _3453.x * _2729)) + _3453.w) / _3514;
                                float _3574 = (fma(_2731, _3468.z, fma(_2730, _3468.y, _3468.x * _2729)) + _3468.w) / _3514;
                                float _3578 = 1.0 - dot(vec2(_3573, _3574), vec2(_3573, _3574));
                                float _4730 = isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0));
                                float _3579 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                                float _3580 = _3579 * (((isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0))) * _3556) / ((_3569 * 0.699999988079071044921875) + 1.0));
                                float _3592 = exp2(log2(1.0 / ((_3569 * 3.5) + 5.0)) * 0.25);
                                float _3593 = 1.0 - _1015;
                                float _3600 = sqrt(1.0 - ((1.0 - (_3593 * _3593)) * (1.0 - (_3592 * _3592))));
                                float _3601 = _3600 * _3600;
                                float _3602 = _3601 * _3601;
                                float _3603 = _3549 - _3022;
                                float _3604 = _3550 - _3023;
                                float _3605 = _3551 - _3024;
                                float _3609 = inversesqrt(dot(vec3(_3603, _3604, _3605), vec3(_3603, _3604, _3605)));
                                float _3613 = dot(vec3(_940, _943, _946), vec3((-0.0) - _3022, (-0.0) - _3023, (-0.0) - _3024));
                                float _4741 = isnan(0.0) ? _3613 : (isnan(_3613) ? 0.0 : max(_3613, 0.0));
                                float _3616 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                                float _3617 = dot(vec3(_940, _943, _946), vec3(_3609 * _3603, _3609 * _3604, _3609 * _3605));
                                float _4752 = isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0));
                                float _3620 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
                                float _3624 = ((_3620 * _3620) * (_3602 + (-1.0))) + 1.0;
                                float _3625 = _3562 * _3601;
                                float _3626 = _3625 * _3625;
                                float _3632 = ((1.0 - _3626) * dot(vec3(_940, _943, _946), vec3(_3549, _3550, _3551))) + _3626;
                                float _4763 = isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0));
                                float _3633 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
                                float _3634 = 1.0 - _3601;
                                float _3644 = (0.5 / (((_3633 * ((_3616 * _3634) + _3601)) + 9.9999999392252902907785028219223e-09) + (((_3633 * _3634) + _3601) * _3616))) * _3633;
                                float _4774 = isnan(0.0) ? _3644 : (isnan(_3644) ? 0.0 : max(_3644, 0.0));
                                float _3654 = (_3579 * _3556) * (((_3602 * 3.1415927410125732421875) * (isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0)))) / ((_3624 * _3624) * ((_3569 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3580 * _3426.y;
                                frontier_phi_83_pred_1 = _3580 * _3426.x;
                                frontier_phi_83_pred_2 = _3654 * _3438.z;
                                frontier_phi_83_pred_3 = _3654 * _3438.y;
                                frontier_phi_83_pred_4 = _3654 * _3438.x;
                                frontier_phi_83_pred_5 = _3580 * _3426.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3662 = frontier_phi_83_pred;
                            _3661 = frontier_phi_83_pred_1;
                            _3660 = frontier_phi_83_pred_2;
                            _3659 = frontier_phi_83_pred_3;
                            _3658 = frontier_phi_83_pred_4;
                            _3663 = frontier_phi_83_pred_5;
                            _3368 = _3661 + _3381;
                            _3369 = _3662 + _3382;
                            _3370 = _3663 + _3383;
                            _3365 = _3658 + _3378;
                            _3366 = _3659 + _3379;
                            _3367 = _3660 + _3380;
                            if (_3385 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3378 = _3365;
                                _3379 = _3366;
                                _3380 = _3367;
                                _3381 = _3368;
                                _3382 = _3369;
                                _3383 = _3370;
                                _3384 = _3385;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3370;
                        frontier_phi_77_pred_1 = _3369;
                        frontier_phi_77_pred_2 = _3368;
                        frontier_phi_77_pred_3 = _3367;
                        frontier_phi_77_pred_4 = _3366;
                        frontier_phi_77_pred_5 = _3365;
                    }
                    _3007 = frontier_phi_77_pred;
                    _3005 = frontier_phi_77_pred_1;
                    _3003 = frontier_phi_77_pred_2;
                    _3001 = frontier_phi_77_pred_3;
                    _2999 = frontier_phi_77_pred_4;
                    _2997 = frontier_phi_77_pred_5;
                    uint _3163 = _3162 + 1u;
                    if (_3163 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3156 = _2997;
                        _3157 = _2999;
                        _3158 = _3001;
                        _3159 = _3003;
                        _3160 = _3005;
                        _3161 = _3007;
                        _3162 = _3163;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3001;
                frontier_phi_58_59_ladder_1 = _3007;
                frontier_phi_58_59_ladder_2 = _3005;
                frontier_phi_58_59_ladder_3 = _3003;
                frontier_phi_58_59_ladder_4 = _2999;
                frontier_phi_58_59_ladder_5 = _2997;
            }
            else
            {
                frontier_phi_58_59_ladder = _2880;
                frontier_phi_58_59_ladder_1 = _2886;
                frontier_phi_58_59_ladder_2 = _2884;
                frontier_phi_58_59_ladder_3 = _2882;
                frontier_phi_58_59_ladder_4 = _2878;
                frontier_phi_58_59_ladder_5 = _2876;
            }
            _2996 = frontier_phi_58_59_ladder_5;
            _2998 = frontier_phi_58_59_ladder_4;
            _3000 = frontier_phi_58_59_ladder;
            _3002 = frontier_phi_58_59_ladder_3;
            _3004 = frontier_phi_58_59_ladder_2;
            _3006 = frontier_phi_58_59_ladder_1;
        }
        float _3011 = isnan(1.0) ? _999 : (isnan(_999) ? 1.0 : min(_999, 1.0));
        _2788 = (_3011 * _3002) + _2221;
        _2790 = (_3011 * _3004) + _2223;
        _2792 = (_3011 * _3006) + _2225;
        _2794 = ((_2996 * _983) * _3011) + _2569;
        _2796 = ((_2998 * _985) * _3011) + _2571;
        _2798 = ((_3000 * _986) * _3011) + _2573;
    }
    else
    {
        _2788 = _2221;
        _2790 = _2223;
        _2792 = _2225;
        _2794 = _2569;
        _2796 = _2571;
        _2798 = _2573;
    }
    float _4790 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _4801 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _4812 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _2815 = ((isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0))) * (_2788 + ((isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))) * _999))) + ((_2794 + ((isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0))) * _1838)) * cbPerFrame._m0[3u].x);
    float _2816 = ((isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0))) * (_2790 + ((isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))) * _999))) + ((_2796 + ((isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0))) * _1838)) * cbPerFrame._m0[3u].x);
    float _2817 = ((isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0))) * (_2792 + ((isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))) * _999))) + ((_2798 + ((isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0))) * _1838)) * cbPerFrame._m0[3u].x);
    uint _2818 = _259 + 6u;
    float _2826 = _921 / cbSceneParam._m0[86u].x;
    float _2827 = _922 / cbSceneParam._m0[86u].y;
    vec4 _2841 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2826, _2827, (log2((isnan(cbSceneParam._m0[77u].w) ? _844 : (isnan(_844) ? cbSceneParam._m0[77u].w : min(_844, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2843 = _2841.x;
    float _2844 = _2841.y;
    float _2845 = _2841.z;
    float _2846 = _2841.w;
    float _2938;
    float _2940;
    float _2942;
    float _2944;
    if (_844 > cbSceneParam._m0[78u].w)
    {
        float _2901 = isnan(_844) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _844 : min(cbSceneParam._m0[80u].w, _844));
        float _2902 = _2901 / _844;
        float _2913 = _2902 * _894;
        float _2914 = _895 * _2902;
        float _2915 = (-0.0) - _2914;
        float _2916 = _2902 * _896;
        float _2918 = (cbSceneParam._m0[77u].w * _2915) / _2901;
        float _2919 = _2918 + cbSceneParam._m0[79u].w;
        float _2920 = cbSceneParam._m0[79u].w - _2914;
        float _2926 = sqrt(((_2913 * _2913) + (_2914 * _2914)) + (_2916 * _2916));
        float _2929 = (1.0 - (cbSceneParam._m0[77u].w / _2901)) * _2926;
        float _2934 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2936 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3113;
        if (abs((_2915 - _2918) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3113 = ((((_2919 > 0.0) ? exp2(_2934 * _2919) : (2.0 - exp2(_2936 * _2919))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2929;
        }
        else
        {
            float _3057 = 1.0 / cbSceneParam._m0[80u].x;
            float _3058 = isnan(_2920) ? _2919 : (isnan(_2919) ? _2920 : max(_2919, _2920));
            float _3059 = isnan(_2920) ? _2919 : (isnan(_2919) ? _2920 : min(_2919, _2920));
            float _3068 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : min(_3058, 0.0));
            float _3069 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : min(_3059, 0.0));
            _3113 = ((abs(_2926 / _2915) * cbSceneParam._m0[80u].y) * ((((_3068 - _3069) * 2.0) - ((exp2(_2934 * (isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0)))) - exp2(_2934 * (isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0))))) * _3057)) - ((exp2(_2936 * _3068) - exp2(_2936 * _3069)) * _3057))) + (_2929 * cbSceneParam._m0[80u].z);
        }
        vec4 _3115 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2826, _2827, 1.0), 0.0);
        float _3124 = exp2((_3113 * (-1.44269502162933349609375)) * (1.0 - _3115.w));
        float _3125 = log2(_3124);
        float _3141 = log2(_2846);
        _2938 = (exp2(_3141 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3125 * cbSceneParam._m0[78u].x)) * _3115.x) / cbSceneParam._m0[78u].x)) + _2843;
        _2940 = (exp2(_3141 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3125 * cbSceneParam._m0[78u].y)) * _3115.y) / cbSceneParam._m0[78u].y)) + _2844;
        _2942 = (exp2(_3141 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3125 * cbSceneParam._m0[78u].z)) * _3115.z) / cbSceneParam._m0[78u].z)) + _2845;
        _2944 = _3124 * _2846;
    }
    else
    {
        _2938 = _2843;
        _2940 = _2844;
        _2942 = _2845;
        _2944 = _2846;
    }
    bool _3151;
    vec4 _2954;
    vec4 _2976;
    float _2978;
    float _2982;
    float _2983;
    float _2984;
    float _2985;
    bool _2995;
    for (;;)
    {
        _2954 = cbMatDynParam._m0[0u];
        float _2956 = roundEven(_2954.y);
        bool _2957 = _2956 == 3.0;
        float _2958 = log2(_2944);
        float _2965 = exp2(_2958 * cbSceneParam._m0[78u].x) * _2815;
        float _2966 = exp2(_2958 * cbSceneParam._m0[78u].y) * _2816;
        float _2967 = exp2(_2958 * cbSceneParam._m0[78u].z) * _2817;
        float _2974 = _910 + (-0.5);
        _2976 = cbMtdParam._m0[1u];
        _2978 = _2976.y * _2974;
        float _2981 = (_2956 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2982 = _2981 * (_2957 ? _2965 : (_2965 + (cbSceneParam._m0[72u].w * _2938)));
        _2983 = _2981 * (_2957 ? _2966 : (_2966 + (cbSceneParam._m0[72u].w * _2940)));
        _2984 = _2981 * (_2957 ? _2967 : (_2967 + (cbSceneParam._m0[72u].w * _2942)));
        _2985 = _2974 * 0.999000012874603271484375;
        _2995 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2995)
        {
            if ((cbInstanceData._m0[_259 + 7u].x + _2985) < 0.5)
            {
                _3151 = true;
                break;
            }
        }
        uint _3092 = _959 + uint(_2954.w);
        if ((cbInstanceData._m0[_3092].w < 1.0) && ((cbInstanceData._m0[_3092].w + _2985) < 0.5))
        {
            _3151 = true;
            break;
        }
        if ((_2978 + 1.0) < _2976.x)
        {
            _3151 = true;
            break;
        }
        _3151 = false;
        break;
    }
    float _3356;
    if (_3151)
    {
        discard_state = true;
        _3356 = 0.0;
    }
    else
    {
        _3356 = cbInstanceData._m0[_2818].w;
    }
    SV_Target.x = _2982;
    SV_Target.y = _2983;
    SV_Target.z = _2984;
    SV_Target.w = _3356;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2818].w;
    discard_exit();
}


