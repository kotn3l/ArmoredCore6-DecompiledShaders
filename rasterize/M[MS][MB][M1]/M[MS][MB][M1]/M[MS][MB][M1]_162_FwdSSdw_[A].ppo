#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1486;
float _3888;
float _3889;
float _3890;
float _3891;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _240 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _241 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _242 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _248 = inversesqrt(dot(vec3(_240, _241, _242), vec3(_240, _241, _242)));
    float _249 = _248 * _240;
    float _250 = _248 * _241;
    float _251 = _248 * _242;
    float _255 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _256 = _255 * NORMAL.x;
    float _257 = _255 * NORMAL.y;
    float _258 = _255 * NORMAL.z;
    float _262 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _263 = _262 * TANGENT.x;
    float _264 = _262 * TANGENT.y;
    float _265 = _262 * TANGENT.z;
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3900 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3911 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3922 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    uint _287 = uint(roundEven(NORMAL.w)) * 13u;
    uint _292 = _287 + 1u;
    uint _296 = _287 + 2u;
    float _305 = sqrt(((cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x)) + (cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x));
    float _306 = _305 * TEXCOORD.z;
    float _307 = _305 * TEXCOORD.w;
    vec4 _320 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _306) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _307) + cbTextureTilingScale._m0[13u].w));
    vec4 _344 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _349 = _344.x * cbMtdParam._m0[11u].x;
    float _350 = _344.y * cbMtdParam._m0[11u].y;
    float _351 = _344.z * cbMtdParam._m0[11u].z;
    vec4 _370 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _306) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _307) + cbTextureTilingScale._m0[5u].w));
    vec4 _406 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _408 = _406.x;
    float _420 = dot(vec4(_408, _406.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _437 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_408 - _420) * cbMtdParam._m0[24u].y) + _420) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3933 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _438 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _445 = (_438 * ((_370.x * cbMtdParam._m0[12u].x) - _349)) + _349;
    float _446 = (_438 * ((_370.y * cbMtdParam._m0[12u].y) - _350)) + _350;
    float _447 = (_438 * ((_370.z * cbMtdParam._m0[12u].z) - _351)) + _351;
    float _451 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _320.x) * _445;
    float _454 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _320.y) * _446;
    float _457 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _320.z) * _447;
    float _464 = ((_445 - _451) * (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) + _451;
    float _465 = ((_446 - _454) * (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0)))) + _454;
    float _466 = ((_447 - _457) * (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) + _457;
    vec4 _485 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _306) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _307) + cbTextureTilingScale._m0[14u].w));
    vec4 _505 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _306) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _307) + cbTextureTilingScale._m0[20u].w));
    vec4 _532 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _306) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _307) + cbTextureTilingScale._m0[4u].w));
    vec4 _549 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _551 = _549.x;
    float _552 = _549.y;
    float _553 = _549.z;
    float _562 = ((_532.z - _553) * _438) + _553;
    float _565 = ((((_532.x - _551) * _438) + _551) * 2.0) + (-1.0);
    float _566 = ((((_532.y - _552) * _438) + _552) * 2.0) + (-1.0);
    float _567 = dot(vec2(_565, _566), vec2(_565, _566));
    float _3944 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _572 = sqrt(1.0 - (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))));
    float _575 = _565 + ((((_505.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _576 = _566 + ((((_505.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _579 = fma(_572, _256, fma(_576, _263, _575 * _249));
    float _582 = fma(_572, _257, fma(_576, _264, _575 * _250));
    float _585 = fma(_572, _258, fma(_576, _265, _575 * _251));
    float _589 = inversesqrt(dot(vec3(_579, _582, _585), vec3(_579, _582, _585)));
    vec4 _605 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _631 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _306) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _307) + cbTextureTilingScale._m0[11u].w));
    float _633 = _631.x;
    float _634 = 1.0 - _633;
    float _638 = ((_633 - _634) * cbMtdParam._m0[24u].z) + _634;
    float _640 = (cbMtdParam._m0[19u].x + dot(vec4(_589 * _579, _589 * _582, _589 * _585, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_638 * cbMtdParam._m0[21u].z);
    float _3955 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _641 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _643 = (-0.0) - cbMtdParam._m0[24u].x;
    float _645 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _646 = isnan(1.0) ? _645 : (isnan(_645) ? 1.0 : min(_645, 1.0));
    float _653 = _641 - ((_641 * TEXCOORD_8.x) * _646);
    float _654 = _641 - ((_641 * TEXCOORD_8.y) * _646);
    float _655 = _641 - ((_641 * TEXCOORD_8.z) * _646);
    float _662 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _666 = ((isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : min(_662, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _674 = (_666 - (((_638 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _666))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3986 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _675 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _679 = ((_653 * ((_485.x * cbMtdParam._m0[18u].x) - _464)) * _675) + _464;
    float _680 = ((_654 * ((_485.y * cbMtdParam._m0[18u].y) - _465)) * _675) + _465;
    float _681 = ((_655 * ((_485.z * cbMtdParam._m0[18u].z) - _466)) * _675) + _466;
    vec4 _693 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _306) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _307) + cbTextureTilingScale._m0[19u].w));
    float _695 = _693.x;
    float _696 = 1.0 - _695;
    float _721 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_695 - _696) * cbMtdParam._m0[24u].w) + _696) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3997 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _722 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _730 = ((((cbMtdParam._m0[10u].x - _679) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _722) + _679;
    float _731 = ((((cbMtdParam._m0[10u].y - _680) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _722) + _680;
    float _732 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _681)) * _722) + _681;
    vec4 _758 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _760 = _758.x;
    float _778 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _306) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _307) + cbTextureTilingScale._m0[9u].w)).x - _760) * _438) + _760;
    float _782 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _778) * cbMtdParam._m0[19u].z) + _778;
    float _785 = _782 - ((_675 * _653) * _782);
    float _787 = _785 - (_785 * _722);
    float _792 = (((_505.z - _562) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _562;
    vec4 _806 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _306) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _307) + cbTextureTilingScale._m0[15u].w));
    float _813 = (_806.x * 2.0) + (-1.0);
    float _814 = (_806.y * 2.0) + (-1.0);
    float _815 = dot(vec2(_813, _814), vec2(_813, _814));
    float _4008 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _824 = (((_806.z - _792) * _653) * _675) + _792;
    float _827 = ((cbMtdParam._m0[23u].y - _824) * _722) + _824;
    vec4 _846 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _306) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _307) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _852 = (_846.x * 2.0) + (-1.0);
    float _853 = (_846.y * 2.0) + (-1.0);
    float _854 = dot(vec2(_852, _853), vec2(_852, _853));
    float _4019 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _874 = (((cbMtdParam._m0[21u].x * _575) + ((_813 - _575) * _653)) * _675) + _575;
    float _875 = (((cbMtdParam._m0[21u].x * _576) + ((_814 - _576) * _654)) * _675) + _576;
    float _876 = (((sqrt(1.0 - (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) - _572) * _655) * _675) + _572;
    float _887 = (((_852 - _874) + (_874 * cbMtdParam._m0[22u].z)) * _722) + _874;
    float _888 = (((_853 - _875) + (_875 * cbMtdParam._m0[22u].z)) * _722) + _875;
    float _889 = ((sqrt(1.0 - (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) - _876) * _722) + _876;
    float _893 = cbMtdParam._m0[22u].x + _605.w;
    float _896 = fma(_889, _256, fma(_888, _263, _887 * _249));
    float _899 = fma(_889, _257, fma(_888, _264, _887 * _250));
    float _902 = fma(_889, _258, fma(_888, _265, _887 * _251));
    float _906 = inversesqrt(dot(vec3(_896, _899, _902), vec3(_896, _899, _902)));
    float _907 = _906 * _896;
    float _908 = _906 * _899;
    float _909 = _906 * _902;
    float _4030 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _910 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _4041 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _4052 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _4063 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _4074 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _4085 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _915 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _929 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _969 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _979 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _969);
    float _980 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _969);
    float _981 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _969);
    float _985 = inversesqrt(dot(vec3(_979, _980, _981), vec3(_979, _980, _981)));
    float _986 = _979 * _985;
    float _987 = _980 * _985;
    float _988 = _981 * _985;
    vec4 _993 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _995 = _993.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1167 = sqrt(((_979 * _979) + (_980 * _980)) + (_981 * _981));
        float _1173 = (cbMatDynParam._m0[5u].x * _1167) + cbMatDynParam._m0[5u].y;
        float _4096 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1178 = (cbMatDynParam._m0[5u].z * _1167) + cbMatDynParam._m0[5u].w;
        float _4107 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) - _1174)) + _1174) < ((_995 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1006 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1007 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1025 = fma(_909, cbSceneParam._m0[5u].z, fma(_908, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _907));
    float _1028 = fma(_909, cbSceneParam._m0[6u].z, fma(_908, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _907));
    float _1031 = fma(_909, cbSceneParam._m0[7u].z, fma(_908, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _907));
    uint _1044 = _287 + 9u;
    uint _1045 = _1044 + uint(cbMatDynParam._m0[0u].w);
    float _1051 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) * cbInstanceData._m0[_1045].x;
    float _1052 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0)))) * cbInstanceData._m0[_1045].y;
    float _1053 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0)))) * cbInstanceData._m0[_1045].z;
    float _4118 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
    float _1054 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _4129 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _1055 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _4140 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
    float _1056 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _1057 = 1.0 - _915;
    float _1058 = _1054 * _1057;
    float _1059 = _1055 * _1057;
    float _1060 = _1056 * _1057;
    float _1065 = (_1054 + (-0.039999999105930328369140625)) * _915;
    float _1066 = (_1055 + (-0.039999999105930328369140625)) * _915;
    float _1067 = (_1056 + (-0.039999999105930328369140625)) * _915;
    float _1068 = _1065 + 0.039999999105930328369140625;
    float _1070 = _1066 + 0.039999999105930328369140625;
    float _1071 = _1067 + 0.039999999105930328369140625;
    vec4 _1080 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1006, cbSceneParam._m0[86u].y * _1007));
    float _1084 = ((isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * TEXCOORD_5.w) * _1080.x;
    float _1085 = dot(vec3(_907, _908, _909), vec3(_986, _987, _988));
    float _1088 = _1085 * 2.0;
    float _1092 = (_1088 * _907) - _986;
    float _1093 = (_1088 * _908) - _987;
    float _1094 = (_1088 * _909) - _988;
    float _1098 = abs(dot(vec3(_986, _987, _988), vec3(_907, _908, _909)));
    float _4151 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
    float _1100 = sqrt(_910);
    float _1113 = exp2((_1100 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1100 * 3.0));
    float _1119 = (1.0 - _1113) * ((_1100 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1120 = _1113 * _1100;
    float _1148 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1152 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1156 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1485;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1210 = fma(_1156, cbModelParam._m0[26u].z, fma(_1152, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1148));
        float _1214 = fma(_1156, cbModelParam._m0[27u].z, fma(_1152, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1148));
        float _1218 = fma(_1156, cbModelParam._m0[28u].z, fma(_1152, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1148));
        float _1243 = _1148 + _907;
        float _1244 = _1152 + _908;
        float _1245 = _1156 + _909;
        float _1255 = fma(_1245, cbModelParam._m0[26u].z, fma(_1244, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1243)) - _1210;
        float _1256 = fma(_1245, cbModelParam._m0[27u].z, fma(_1244, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1243)) - _1214;
        float _1257 = fma(_1245, cbModelParam._m0[28u].z, fma(_1244, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1243)) - _1218;
        float _1261 = inversesqrt(dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257)));
        float _1274 = ((_1261 * _1255) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1210 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1275 = ((_1261 * _1256) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1214 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1276 = ((_1261 * _1257) / cbModelParam._m0[34u].z) + ((((((_1218 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1279 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        vec4 _1286 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        vec4 _1300 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        float _1313 = exp2((_1279.w + (-0.5)) * 20.0) * 2.0;
        float _1314 = _1313 * (_1279.x + (-0.5));
        float _1315 = _1313 * (_1279.y + (-0.5));
        float _1316 = _1313 * (_1279.z + (-0.5));
        float _1323 = exp2((_1286.w + (-0.5)) * 20.0) * 2.0;
        float _1324 = _1323 * (_1286.x + (-0.5));
        float _1325 = _1323 * (_1286.y + (-0.5));
        float _1326 = _1323 * (_1286.z + (-0.5));
        float _1333 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1334 = _1333 * (_1293.x + (-0.5));
        float _1335 = _1333 * (_1293.y + (-0.5));
        float _1336 = _1333 * (_1293.z + (-0.5));
        float _1343 = exp2((_1300.w + (-0.5)) * 20.0) * 2.0;
        float _1344 = _1343 * (_1300.x + (-0.5));
        float _1345 = _1343 * (_1300.y + (-0.5));
        float _1346 = _1343 * (_1300.z + (-0.5));
        float _1347 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1348 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1349 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1350 = _1314 * 0.5;
        float _1351 = _1324 * 0.5;
        float _1352 = _1334 * 0.5;
        float _1353 = dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352));
        float _1358 = (_1353 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1353);
        float _1367 = (dot(vec3(_907, _908, _909), vec3(_1358 * _1350, _1358 * _1351, _1358 * _1352)) + 1.0) * 0.5;
        float _4177 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1377 = sqrt(((_1351 * _1351) + (_1350 * _1350)) + (_1352 * _1352)) / (_1347 + 9.9999997473787516355514526367188e-06);
        float _4188 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1379 = _1378 * 2.0;
        float _1383 = (1.0 - _1378) / (_1378 + 1.0);
        float _4199 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1393 = ((((1.0 - _1384) * (_1379 + 2.0)) * exp2(log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1379 + 1.0))) + _1384) * _1347;
        float _1394 = _1315 * 0.5;
        float _1395 = _1325 * 0.5;
        float _1396 = _1335 * 0.5;
        float _1397 = dot(vec3(_1394, _1395, _1396), vec3(_1394, _1395, _1396));
        float _1402 = (_1397 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1397);
        float _1410 = (dot(vec3(_907, _908, _909), vec3(_1402 * _1394, _1402 * _1395, _1402 * _1396)) + 1.0) * 0.5;
        float _4210 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1419 = sqrt(((_1395 * _1395) + (_1394 * _1394)) + (_1396 * _1396)) / (_1348 + 9.9999997473787516355514526367188e-06);
        float _4221 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1421 = _1420 * 2.0;
        float _1425 = (1.0 - _1420) / (_1420 + 1.0);
        float _4232 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1435 = ((((1.0 - _1426) * (_1421 + 2.0)) * exp2(log2(isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_1421 + 1.0))) + _1426) * _1348;
        float _1436 = _1316 * 0.5;
        float _1437 = _1326 * 0.5;
        float _1438 = _1336 * 0.5;
        float _1439 = dot(vec3(_1436, _1437, _1438), vec3(_1436, _1437, _1438));
        float _1444 = (_1439 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1439);
        float _1452 = (dot(vec3(_907, _908, _909), vec3(_1444 * _1436, _1444 * _1437, _1444 * _1438)) + 1.0) * 0.5;
        float _4243 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1461 = sqrt(((_1437 * _1437) + (_1436 * _1436)) + (_1438 * _1438)) / (_1349 + 9.9999997473787516355514526367188e-06);
        float _4254 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1463 = _1462 * 2.0;
        float _1467 = (1.0 - _1462) / (_1462 + 1.0);
        float _4265 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1477 = ((((1.0 - _1468) * (_1463 + 2.0)) * exp2(log2(isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (_1463 + 1.0))) + _1468) * _1349;
        _1485 = _1316;
        _1487 = _1315;
        _1488 = _1314;
        _1489 = _1326;
        _1490 = _1325;
        _1491 = _1324;
        _1492 = _1336;
        _1493 = _1335;
        _1494 = _1334;
        _1495 = _1349;
        _1496 = _1348;
        _1497 = _1347;
        _1498 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)));
        _1499 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)));
        _1500 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)));
    }
    else
    {
        _1485 = _1486;
        _1487 = _1486;
        _1488 = _1486;
        _1489 = _1486;
        _1490 = _1486;
        _1491 = _1486;
        _1492 = _1486;
        _1493 = _1486;
        _1494 = _1486;
        _1495 = _1486;
        _1496 = _1486;
        _1497 = _1486;
        _1498 = 0.0;
        _1499 = 0.0;
        _1500 = 0.0;
    }
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    float _1810;
    float _1811;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1528 = fma(_1156, cbModelParam._m0[30u].z, fma(_1152, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1148));
        float _1532 = fma(_1156, cbModelParam._m0[31u].z, fma(_1152, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1148));
        float _1536 = fma(_1156, cbModelParam._m0[32u].z, fma(_1152, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1148));
        float _1559 = _1148 + _907;
        float _1560 = _1152 + _908;
        float _1561 = _1156 + _909;
        float _1571 = fma(_1561, cbModelParam._m0[30u].z, fma(_1560, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1559)) - _1528;
        float _1572 = fma(_1561, cbModelParam._m0[31u].z, fma(_1560, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1559)) - _1532;
        float _1573 = fma(_1561, cbModelParam._m0[32u].z, fma(_1560, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1559)) - _1536;
        float _1577 = inversesqrt(dot(vec3(_1571, _1572, _1573), vec3(_1571, _1572, _1573)));
        float _1590 = ((_1577 * _1571) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1528 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1591 = ((_1577 * _1572) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1532 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1592 = ((_1577 * _1573) / cbModelParam._m0[35u].z) + ((((((_1536 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1594 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1590, _1591, _1592), 0.0);
        vec4 _1601 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1590, _1591, _1592), 0.0);
        vec4 _1608 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1590, _1591, _1592), 0.0);
        vec4 _1615 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1590, _1591, _1592), 0.0);
        float _1627 = exp2((_1594.w + (-0.5)) * 20.0) * 2.0;
        float _1628 = _1627 * (_1594.x + (-0.5));
        float _1629 = _1627 * (_1594.y + (-0.5));
        float _1630 = _1627 * (_1594.z + (-0.5));
        float _1637 = exp2((_1601.w + (-0.5)) * 20.0) * 2.0;
        float _1638 = _1637 * (_1601.x + (-0.5));
        float _1639 = _1637 * (_1601.y + (-0.5));
        float _1640 = _1637 * (_1601.z + (-0.5));
        float _1647 = exp2((_1608.w + (-0.5)) * 20.0) * 2.0;
        float _1648 = _1647 * (_1608.x + (-0.5));
        float _1649 = _1647 * (_1608.y + (-0.5));
        float _1650 = _1647 * (_1608.z + (-0.5));
        float _1657 = exp2((_1615.w + (-0.5)) * 20.0) * 2.0;
        float _1658 = _1657 * (_1615.x + (-0.5));
        float _1659 = _1657 * (_1615.y + (-0.5));
        float _1660 = _1657 * (_1615.z + (-0.5));
        float _1661 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1662 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1663 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1664 = _1628 * 0.5;
        float _1665 = _1638 * 0.5;
        float _1666 = _1648 * 0.5;
        float _1667 = dot(vec3(_1664, _1665, _1666), vec3(_1664, _1665, _1666));
        float _1672 = (_1667 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1667);
        float _1680 = (dot(vec3(_907, _908, _909), vec3(_1672 * _1664, _1672 * _1665, _1672 * _1666)) + 1.0) * 0.5;
        float _4306 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1689 = sqrt(((_1665 * _1665) + (_1664 * _1664)) + (_1666 * _1666)) / (_1661 + 9.9999997473787516355514526367188e-06);
        float _4317 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1691 = _1690 * 2.0;
        float _1695 = (1.0 - _1690) / (_1690 + 1.0);
        float _4328 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1696 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1705 = ((((1.0 - _1696) * (_1691 + 2.0)) * exp2(log2(isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_1691 + 1.0))) + _1696) * _1661;
        float _1706 = _1629 * 0.5;
        float _1707 = _1639 * 0.5;
        float _1708 = _1649 * 0.5;
        float _1709 = dot(vec3(_1706, _1707, _1708), vec3(_1706, _1707, _1708));
        float _1714 = (_1709 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1709);
        float _1722 = (dot(vec3(_907, _908, _909), vec3(_1714 * _1706, _1714 * _1707, _1714 * _1708)) + 1.0) * 0.5;
        float _4339 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1731 = sqrt(((_1707 * _1707) + (_1706 * _1706)) + (_1708 * _1708)) / (_1662 + 9.9999997473787516355514526367188e-06);
        float _4350 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1732 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _1733 = _1732 * 2.0;
        float _1737 = (1.0 - _1732) / (_1732 + 1.0);
        float _4361 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1738 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1747 = ((((1.0 - _1738) * (_1733 + 2.0)) * exp2(log2(isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_1733 + 1.0))) + _1738) * _1662;
        float _1748 = _1630 * 0.5;
        float _1749 = _1640 * 0.5;
        float _1750 = _1650 * 0.5;
        float _1751 = dot(vec3(_1748, _1749, _1750), vec3(_1748, _1749, _1750));
        float _1756 = (_1751 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1751);
        float _1764 = (dot(vec3(_907, _908, _909), vec3(_1756 * _1748, _1756 * _1749, _1756 * _1750)) + 1.0) * 0.5;
        float _4372 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1773 = sqrt(((_1749 * _1749) + (_1748 * _1748)) + (_1750 * _1750)) / (_1663 + 9.9999997473787516355514526367188e-06);
        float _4383 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1774 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _1775 = _1774 * 2.0;
        float _1779 = (1.0 - _1774) / (_1774 + 1.0);
        float _4394 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
        float _1780 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _1789 = ((((1.0 - _1780) * (_1775 + 2.0)) * exp2(log2(isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (_1775 + 1.0))) + _1780) * _1663;
        _1797 = _1630;
        _1798 = _1629;
        _1799 = _1628;
        _1800 = _1640;
        _1801 = _1639;
        _1802 = _1638;
        _1803 = _1650;
        _1804 = _1649;
        _1805 = _1648;
        _1806 = _1663;
        _1807 = _1662;
        _1808 = _1661;
        _1809 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)));
        _1810 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0)));
        _1811 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0)));
    }
    else
    {
        _1797 = _1486;
        _1798 = _1486;
        _1799 = _1486;
        _1800 = _1486;
        _1801 = _1486;
        _1802 = _1486;
        _1803 = _1486;
        _1804 = _1486;
        _1805 = _1486;
        _1806 = _1486;
        _1807 = _1486;
        _1808 = _1486;
        _1809 = 0.0;
        _1810 = 0.0;
        _1811 = 0.0;
    }
    float _1821 = (cbModelParam._m0[1u].x * (_1809 - _1498)) + _1498;
    float _1822 = (cbModelParam._m0[1u].x * (_1810 - _1499)) + _1499;
    float _1823 = (cbModelParam._m0[1u].x * (_1811 - _1500)) + _1500;
    float _1844 = fma(_1823, cbSceneParam._m0[89u].z, fma(_1822, cbSceneParam._m0[89u].y, _1821 * cbSceneParam._m0[89u].x));
    float _1847 = fma(_1823, cbSceneParam._m0[90u].z, fma(_1822, cbSceneParam._m0[90u].y, _1821 * cbSceneParam._m0[90u].x));
    float _1850 = fma(_1823, cbSceneParam._m0[91u].z, fma(_1822, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1821));
    float _1865 = _1092 * 0.5;
    float _1866 = _1093 * 0.5;
    float _1867 = _1094 * 0.5;
    float _1868 = dot(vec4(_1865, _1866, _1867, 1.0), vec4(_1799, _1802, _1805, _1808));
    float _1871 = dot(vec4(_1865, _1866, _1867, 1.0), vec4(_1798, _1801, _1804, _1807));
    float _1874 = dot(vec4(_1865, _1866, _1867, 1.0), vec4(_1797, _1800, _1803, _1806));
    float _1908;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1881 = dot(vec4(_1865, _1866, _1867, 1.0), vec4(_1485, _1489, _1492, _1495));
        float _1885 = dot(vec4(_1865, _1866, _1867, 1.0), vec4(_1487, _1490, _1493, _1496));
        float _1889 = dot(vec4(_1865, _1866, _1867, 1.0), vec4(_1488, _1491, _1494, _1497));
        float _1896 = dot(vec4(cbModelParam._m0[39u]), vec4(_1865, _1866, _1867, 1.0));
        _1908 = dot(vec3(isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0)), isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0)), isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1896) ? 0.0 : (isnan(0.0) ? _1896 : max(0.0, _1896))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1908 = 1.0;
    }
    float _1919;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1910 = dot(vec4(cbModelParam._m0[40u]), vec4(_1865, _1866, _1867, 1.0));
        _1919 = dot(vec3(isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0)), isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0)), isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1910) ? 0.0 : (isnan(0.0) ? _1910 : max(0.0, _1910))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1919 = 1.0;
    }
    float _1923 = (_1919 * cbModelParam._m0[1u].x) + (_1908 * (1.0 - cbModelParam._m0[1u].x));
    float _1933 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _910);
    float _1934 = isnan(_1933) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1933 : min(cbModelParam._m0[25u].z, _1933));
    float _2014;
    float _2016;
    float _2018;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1981 = fma(_1156, cbModelParam._m0[13u].z, fma(_1152, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1148)) + cbModelParam._m0[13u].w;
        float _1985 = fma(_1156, cbModelParam._m0[14u].z, fma(_1152, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1148)) + cbModelParam._m0[14u].w;
        float _1989 = fma(_1156, cbModelParam._m0[15u].z, fma(_1152, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1148)) + cbModelParam._m0[15u].w;
        float _1992 = fma(_1094, cbModelParam._m0[13u].z, fma(_1093, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1092));
        float _1995 = fma(_1094, cbModelParam._m0[14u].z, fma(_1093, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1092));
        float _1998 = fma(_1094, cbModelParam._m0[15u].z, fma(_1093, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1092));
        float _2026;
        if (_1992 > 0.0)
        {
            _2026 = abs((1.0 - _1981) / _1992);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1992 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1981 + 1.0) / _1992);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2026 = frontier_phi_17_15_ladder;
        }
        float _2249;
        if (_1995 > 0.0)
        {
            _2249 = abs((1.0 - _1985) / _1995);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1995 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1985 + 1.0) / _1995);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2249 = frontier_phi_26_22_ladder;
        }
        float _2506;
        if (_1998 > 0.0)
        {
            _2506 = abs((1.0 - _1989) / _1998);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1998 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1989 + 1.0) / _1998);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2506 = frontier_phi_38_33_ladder;
        }
        float _2508 = isnan(_2249) ? _2026 : (isnan(_2026) ? _2249 : min(_2026, _2249));
        float _2509 = isnan(_2506) ? _2508 : (isnan(_2508) ? _2506 : min(_2508, _2506));
        float _2513 = (_2509 * _1992) + _1981;
        float _2514 = (_2509 * _1995) + _1985;
        float _2515 = (_2509 * _1998) + _1989;
        float _2516 = _2509 * 9.9999997473787516355514526367188e-05;
        float _2518 = (-1.0) - _2516;
        float _2520 = _2516 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2515 > _2520) || ((_2515 < _2518) || ((_2514 > _2520) || ((_2514 < _2518) || ((_2513 < _2518) || (_2513 > _2520))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2643 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2515, cbModelParam._m0[9u].z, fma(_2514, cbModelParam._m0[9u].y, _2513 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2515, cbModelParam._m0[10u].z, fma(_2514, cbModelParam._m0[10u].y, _2513 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2515, cbModelParam._m0[11u].z, fma(_2514, cbModelParam._m0[11u].y, _2513 * cbModelParam._m0[11u].x))), _1934);
            frontier_phi_16_38_ladder = _2643.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2643.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2643.x * cbModelParam._m0[1u].y;
        }
        _2014 = frontier_phi_16_38_ladder_2;
        _2016 = frontier_phi_16_38_ladder_1;
        _2018 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2002 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1092, _1093, _1094), _1934);
        _2014 = _2002.x * cbModelParam._m0[1u].y;
        _2016 = _2002.y * cbModelParam._m0[1u].y;
        _2018 = _2002.z * cbModelParam._m0[1u].y;
    }
    float _2022 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _910);
    float _2023 = isnan(_2022) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2022 : min(cbModelParam._m0[25u].w, _2022));
    float _2112;
    float _2114;
    float _2116;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2076 = fma(_1156, cbModelParam._m0[21u].z, fma(_1152, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1148)) + cbModelParam._m0[21u].w;
        float _2080 = fma(_1156, cbModelParam._m0[22u].z, fma(_1152, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1148)) + cbModelParam._m0[22u].w;
        float _2084 = fma(_1156, cbModelParam._m0[23u].z, fma(_1152, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1148)) + cbModelParam._m0[23u].w;
        float _2087 = fma(_1094, cbModelParam._m0[21u].z, fma(_1093, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1092));
        float _2090 = fma(_1094, cbModelParam._m0[22u].z, fma(_1093, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1092));
        float _2093 = fma(_1094, cbModelParam._m0[23u].z, fma(_1093, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1092));
        float _2254;
        if (_2087 > 0.0)
        {
            _2254 = abs((1.0 - _2076) / _2087);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2087 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2076 + 1.0) / _2087);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2254 = frontier_phi_28_24_ladder;
        }
        float _2533;
        if (_2090 > 0.0)
        {
            _2533 = abs((1.0 - _2080) / _2090);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2090 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2080 + 1.0) / _2090);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2533 = frontier_phi_40_35_ladder;
        }
        float _2746;
        if (_2093 > 0.0)
        {
            _2746 = abs((1.0 - _2084) / _2093);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2093 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2084 + 1.0) / _2093);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2746 = frontier_phi_49_46_ladder;
        }
        float _2748 = isnan(_2533) ? _2254 : (isnan(_2254) ? _2533 : min(_2254, _2533));
        float _2749 = isnan(_2746) ? _2748 : (isnan(_2748) ? _2746 : min(_2748, _2746));
        float _2753 = (_2749 * _2087) + _2076;
        float _2754 = (_2749 * _2090) + _2080;
        float _2755 = (_2749 * _2093) + _2084;
        float _2756 = _2749 * 9.9999997473787516355514526367188e-05;
        float _2757 = (-1.0) - _2756;
        float _2759 = _2756 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2755 > _2759) || ((_2755 < _2757) || ((_2754 > _2759) || ((_2754 < _2757) || ((_2753 < _2757) || (_2753 > _2759))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2954 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2755, cbModelParam._m0[17u].z, fma(_2754, cbModelParam._m0[17u].y, _2753 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2755, cbModelParam._m0[18u].z, fma(_2754, cbModelParam._m0[18u].y, _2753 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2755, cbModelParam._m0[19u].z, fma(_2754, cbModelParam._m0[19u].y, _2753 * cbModelParam._m0[19u].x))), _2023);
            frontier_phi_25_49_ladder = _2954.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2954.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2954.x * cbModelParam._m0[1u].z;
        }
        _2112 = frontier_phi_25_49_ladder_2;
        _2114 = frontier_phi_25_49_ladder_1;
        _2116 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2096 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1092, _1093, _1094), _2023);
        _2112 = _2096.x * cbModelParam._m0[1u].z;
        _2114 = _2096.y * cbModelParam._m0[1u].z;
        _2116 = _2096.z * cbModelParam._m0[1u].z;
    }
    float _2129 = (((_1119 * _1068) + _1120) * _1084) * ((cbModelParam._m0[1u].w * (_2112 - _2014)) + _2014);
    float _2131 = (((_1119 * _1070) + _1120) * _1084) * ((cbModelParam._m0[1u].w * (_2114 - _2016)) + _2016);
    float _2133 = (((_1119 * _1071) + _1120) * _1084) * ((cbModelParam._m0[1u].w * (_2116 - _2018)) + _2018);
    float _2136 = fma(_2133, cbSceneParam._m0[89u].z, fma(_2131, cbSceneParam._m0[89u].y, _2129 * cbSceneParam._m0[89u].x));
    float _2139 = fma(_2133, cbSceneParam._m0[90u].z, fma(_2131, cbSceneParam._m0[90u].y, _2129 * cbSceneParam._m0[90u].x));
    float _2142 = fma(_2133, cbSceneParam._m0[91u].z, fma(_2131, cbSceneParam._m0[91u].y, _2129 * cbSceneParam._m0[91u].x));
    vec4 _2150 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1006, _1007));
    float _2152 = _2150.w;
    float _2164 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2152);
    float _2165 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2152);
    float _2166 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2152);
    uvec4 _2170 = floatBitsToUint(cbInstanceData._m0[_287 + 5u]);
    uint _2172 = _2170.x * 14u;
    uint _2173 = _2172 + 13u;
    float _2180 = _1084 + (-1.0);
    float _2185 = (cbLight._m0[_2173].x * _2180) + 1.0;
    float _2186 = (cbLight._m0[_2173].y * _2180) + 1.0;
    float _2187 = (cbLight._m0[_2173].z * _2180) + 1.0;
    float _2188 = (cbLight._m0[_2173].w * _2180) + 1.0;
    uint _2189 = _2172 + 5u;
    float _2195 = isnan(1.0) ? _2186 : (isnan(_2186) ? 1.0 : min(_2186, 1.0));
    uint _2199 = _2172 + 4u;
    float _2208 = isnan(1.0) ? _2185 : (isnan(_2185) ? 1.0 : min(_2185, 1.0));
    uint _2212 = _2172 | 1u;
    float _2223 = dot(vec3(cbLight._m0[_2172].xyz), vec3(_907, _908, _909));
    float _2226 = dot(vec3(cbLight._m0[_2212].xyz), vec3(_907, _908, _909));
    float _4530 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _4541 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2231 = (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * 0.3183098733425140380859375;
    float _2233 = (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * 0.3183098733425140380859375;
    float _2240 = ((cbLight._m0[_2189].x * _2195) * _2233) + (((cbLight._m0[_2199].x * _2164) * _2208) * _2231);
    float _2241 = ((_2195 * cbLight._m0[_2189].y) * _2233) + (((cbLight._m0[_2199].y * _2165) * _2208) * _2231);
    float _2242 = ((_2195 * cbLight._m0[_2189].z) * _2233) + (((cbLight._m0[_2199].z * _2166) * _2208) * _2231);
    uvec4 _2246 = floatBitsToUint(cbLight._m0[_2172 + 12u]);
    bool _2248 = _2246.x == 0u;
    float _2259;
    float _2261;
    float _2263;
    if (_2248)
    {
        _2259 = _2240;
        _2261 = _2241;
        _2263 = _2242;
    }
    else
    {
        uint _2267 = _2172 + 6u;
        float _2283 = (dot(vec3(cbLight._m0[_2172 + 2u].xyz), vec3(_907, _908, _909)) * 0.5) + 0.5;
        float _2284 = _2283 * _2283;
        float _4552 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
        float _2285 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _2286 = isnan(1.0) ? _2187 : (isnan(_2187) ? 1.0 : min(_2187, 1.0));
        _2259 = (((cbLight._m0[_2267].x * 0.3183098733425140380859375) * _2285) * _2286) + _2240;
        _2261 = (((cbLight._m0[_2267].y * 0.3183098733425140380859375) * _2285) * _2286) + _2241;
        _2263 = (((cbLight._m0[_2267].z * 0.3183098733425140380859375) * _2285) * _2286) + _2242;
    }
    bool _2266 = _2246.y == 0u;
    float _2304;
    float _2306;
    float _2308;
    if (_2266)
    {
        _2304 = _2259;
        _2306 = _2261;
        _2308 = _2263;
    }
    else
    {
        uint _2477 = _2172 + 7u;
        float _2493 = (dot(vec3(cbLight._m0[_2172 + 3u].xyz), vec3(_907, _908, _909)) * 0.5) + 0.5;
        float _2494 = _2493 * _2493;
        float _4568 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2495 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
        float _2496 = isnan(1.0) ? _2188 : (isnan(_2188) ? 1.0 : min(_2188, 1.0));
        _2304 = (((cbLight._m0[_2477].x * 0.3183098733425140380859375) * _2495) * _2496) + _2259;
        _2306 = (((cbLight._m0[_2477].y * 0.3183098733425140380859375) * _2495) * _2496) + _2261;
        _2308 = (((cbLight._m0[_2477].z * 0.3183098733425140380859375) * _2495) * _2496) + _2263;
    }
    uint _2311 = _2172 + 8u;
    float _2324 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2172].w)) * _910) * 0.949999988079071044921875);
    float _2325 = _2324 * _2324;
    float _2326 = cbLight._m0[_2172].x + _986;
    float _2327 = cbLight._m0[_2172].y + _987;
    float _2328 = cbLight._m0[_2172].z + _988;
    float _2332 = inversesqrt(dot(vec3(_2326, _2327, _2328), vec3(_2326, _2327, _2328)));
    float _2333 = _2332 * _2326;
    float _2334 = _2332 * _2327;
    float _2335 = _2332 * _2328;
    float _2336 = dot(vec3(_907, _908, _909), vec3(cbLight._m0[_2172].xyz));
    float _4584 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2339 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
    float _4595 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
    float _2340 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
    float _2341 = dot(vec3(_907, _908, _909), vec3(_2333, _2334, _2335));
    float _4606 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _2344 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
    float _2345 = dot(vec3(cbLight._m0[_2172].xyz), vec3(_2333, _2334, _2335));
    float _4617 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2349 = _2325 * _2325;
    float _2353 = ((_2344 * _2344) * (_2349 + (-1.0))) + 1.0;
    float _2361 = exp2(log2(1.0 - (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0)))) * 5.0);
    float _2362 = 0.959999978542327880859375 - _1065;
    float _2364 = 0.959999978542327880859375 - _1066;
    float _2365 = 0.959999978542327880859375 - _1067;
    float _2372 = 1.0 - _2325;
    float _2383 = (0.5 / (((_2340 * ((_2339 * _2372) + _2325)) + 9.9999999392252902907785028219223e-09) + (((_2340 * _2372) + _2325) * _2339))) * _2339;
    float _4628 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _2385 = (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * (_2349 / ((_2353 * _2353) * 3.141590118408203125));
    uint _2399 = _2172 + 9u;
    float _2410 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2212].w)) * _910) * 0.949999988079071044921875);
    float _2411 = _2410 * _2410;
    float _2412 = cbLight._m0[_2212].x + _986;
    float _2413 = cbLight._m0[_2212].y + _987;
    float _2414 = cbLight._m0[_2212].z + _988;
    float _2418 = inversesqrt(dot(vec3(_2412, _2413, _2414), vec3(_2412, _2413, _2414)));
    float _2419 = _2418 * _2412;
    float _2420 = _2418 * _2413;
    float _2421 = _2418 * _2414;
    float _2422 = dot(vec3(_907, _908, _909), vec3(cbLight._m0[_2212].xyz));
    float _4639 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
    float _2425 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
    float _2426 = dot(vec3(_907, _908, _909), vec3(_2419, _2420, _2421));
    float _4650 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
    float _2429 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
    float _2430 = dot(vec3(cbLight._m0[_2212].xyz), vec3(_2419, _2420, _2421));
    float _4661 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    float _2434 = _2411 * _2411;
    float _2438 = ((_2429 * _2429) * (_2434 + (-1.0))) + 1.0;
    float _2445 = exp2(log2(1.0 - (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0)))) * 5.0);
    float _2452 = 1.0 - _2411;
    float _2462 = (0.5 / (((_2340 * ((_2425 * _2452) + _2411)) + 9.9999999392252902907785028219223e-09) + (((_2340 * _2452) + _2411) * _2425))) * _2425;
    float _4672 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
    float _2464 = (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0))) * (_2434 / ((_2438 * _2438) * 3.141590118408203125));
    float _2474 = (((((_2445 * _2362) + _1068) * cbLight._m0[_2399].x) * _2464) * _2195) + ((((cbLight._m0[_2311].x * _2164) * ((_2361 * _2362) + _1068)) * _2385) * _2208);
    float _2475 = (((((_2445 * _2364) + _1070) * cbLight._m0[_2399].y) * _2464) * _2195) + ((((cbLight._m0[_2311].y * _2165) * ((_2361 * _2364) + _1070)) * _2385) * _2208);
    float _2476 = (((((_2445 * _2365) + _1071) * cbLight._m0[_2399].z) * _2464) * _2195) + ((((cbLight._m0[_2311].z * _2166) * ((_2361 * _2365) + _1071)) * _2385) * _2208);
    float _2538;
    float _2540;
    float _2542;
    if (_2248)
    {
        _2538 = _2474;
        _2540 = _2475;
        _2542 = _2476;
    }
    else
    {
        uint _2544 = _2172 + 2u;
        uint _2548 = _2172 + 10u;
        float _2562 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2544].w)) * _910) * 0.949999988079071044921875);
        float _2563 = _2562 * _2562;
        float _2564 = cbLight._m0[_2544].x + _986;
        float _2565 = cbLight._m0[_2544].y + _987;
        float _2566 = cbLight._m0[_2544].z + _988;
        float _2570 = inversesqrt(dot(vec3(_2564, _2565, _2566), vec3(_2564, _2565, _2566)));
        float _2571 = _2570 * _2564;
        float _2572 = _2570 * _2565;
        float _2573 = _2570 * _2566;
        float _2574 = dot(vec3(_907, _908, _909), vec3(cbLight._m0[_2544].xyz));
        float _4683 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
        float _2577 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
        float _2578 = dot(vec3(_907, _908, _909), vec3(_2571, _2572, _2573));
        float _4694 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
        float _2581 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
        float _2582 = dot(vec3(cbLight._m0[_2544].xyz), vec3(_2571, _2572, _2573));
        float _4705 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        float _2586 = _2563 * _2563;
        float _2590 = ((_2581 * _2581) * (_2586 + (-1.0))) + 1.0;
        float _2597 = exp2(log2(1.0 - (isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0)))) * 5.0);
        float _2604 = 1.0 - _2563;
        float _2614 = (0.5 / (((_2340 * ((_2577 * _2604) + _2563)) + 9.9999999392252902907785028219223e-09) + (((_2340 * _2604) + _2563) * _2577))) * _2577;
        float _4716 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
        float _2616 = (isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0))) * (_2586 / ((_2590 * _2590) * 3.141590118408203125));
        float _2617 = isnan(1.0) ? _2187 : (isnan(_2187) ? 1.0 : min(_2187, 1.0));
        _2538 = (((((_2597 * _2362) + _1068) * cbLight._m0[_2548].x) * _2616) * _2617) + _2474;
        _2540 = (((((_2597 * _2364) + _1070) * cbLight._m0[_2548].y) * _2616) * _2617) + _2475;
        _2542 = (((((_2597 * _2365) + _1071) * cbLight._m0[_2548].z) * _2616) * _2617) + _2476;
    }
    float _2652;
    float _2654;
    float _2656;
    if (_2266)
    {
        _2652 = _2538;
        _2654 = _2540;
        _2656 = _2542;
    }
    else
    {
        uint _2663 = _2172 + 3u;
        uint _2667 = _2172 + 11u;
        float _2681 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2663].w)) * _910) * 0.949999988079071044921875);
        float _2682 = _2681 * _2681;
        float _2683 = cbLight._m0[_2663].x + _986;
        float _2684 = cbLight._m0[_2663].y + _987;
        float _2685 = cbLight._m0[_2663].z + _988;
        float _2689 = inversesqrt(dot(vec3(_2683, _2684, _2685), vec3(_2683, _2684, _2685)));
        float _2690 = _2689 * _2683;
        float _2691 = _2689 * _2684;
        float _2692 = _2689 * _2685;
        float _2693 = dot(vec3(_907, _908, _909), vec3(cbLight._m0[_2663].xyz));
        float _4732 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
        float _2696 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
        float _2697 = dot(vec3(_907, _908, _909), vec3(_2690, _2691, _2692));
        float _4743 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
        float _2700 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
        float _2701 = dot(vec3(cbLight._m0[_2663].xyz), vec3(_2690, _2691, _2692));
        float _4754 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        float _2705 = _2682 * _2682;
        float _2709 = ((_2700 * _2700) * (_2705 + (-1.0))) + 1.0;
        float _2716 = exp2(log2(1.0 - (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0)))) * 5.0);
        float _2723 = 1.0 - _2682;
        float _2733 = (0.5 / (((_2340 * ((_2696 * _2723) + _2682)) + 9.9999999392252902907785028219223e-09) + (((_2340 * _2723) + _2682) * _2696))) * _2696;
        float _4765 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        float _2735 = (isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0))) * (_2705 / ((_2709 * _2709) * 3.141590118408203125));
        float _2736 = isnan(1.0) ? _2188 : (isnan(_2188) ? 1.0 : min(_2188, 1.0));
        _2652 = (((((_2716 * _2362) + _1068) * cbLight._m0[_2667].x) * _2735) * _2736) + _2538;
        _2654 = (((((_2716 * _2364) + _1070) * cbLight._m0[_2667].y) * _2735) * _2736) + _2540;
        _2656 = (((((_2716 * _2365) + _1071) * cbLight._m0[_2667].z) * _2735) * _2736) + _2542;
    }
    float _2871;
    float _2873;
    float _2875;
    float _2877;
    float _2879;
    float _2881;
    if (_2170.y == 0u)
    {
        float _2811 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2812 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2811;
        float _2813 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2811;
        float _2814 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2811;
        uvec4 _2826 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2827 = _2826.x;
        uint _2838 = uint((float(_2826.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1007) / _2827))) + floor(float(uint(cbSceneParam._m0[85u].x * _1006) / _2827)));
        float _2848 = (log2(_2814 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2849 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
        uint _2852 = uint(isnan(14.0) ? _2849 : (isnan(_2849) ? 14.0 : min(_2849, 14.0)));
        uvec4 _2857 = texelFetch(g_lightClusterGridBuffer, int(((_2852 << 2u) + (_2838 << 6u)) >> 2u));
        uint _2858 = _2857.x;
        uint _2859 = _2826.z;
        float _2959;
        float _2961;
        float _2963;
        float _2965;
        float _2967;
        float _2969;
        if (((((1u << ((_2859 >> 4u) & 15u)) + 4294967295u) & _2858) == 0u) || ((_2859 & 240u) == 0u))
        {
            _2959 = 0.0;
            _2961 = 0.0;
            _2963 = 0.0;
            _2965 = 0.0;
            _2967 = 0.0;
            _2969 = 0.0;
        }
        else
        {
            float _2960;
            float _2962;
            float _2964;
            float _2966;
            float _2968;
            float _2970;
            float _3111 = 0.0;
            float _3112 = 0.0;
            float _3113 = 0.0;
            float _3114 = 0.0;
            float _3115 = 0.0;
            float _3116 = 0.0;
            uint _3117 = 0u;
            uint _3126;
            bool _3127;
            for (;;)
            {
                _3126 = texelFetch(g_lightClassification, int((((_2852 << 5u) + (_2838 << 9u)) + (_3117 << 2u)) >> 2u)).x;
                _3127 = _3126 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3127)
                {
                    frontier_phi_66_pred = _3111;
                    frontier_phi_66_pred_1 = _3116;
                    frontier_phi_66_pred_2 = _3115;
                    frontier_phi_66_pred_3 = _3114;
                    frontier_phi_66_pred_4 = _3113;
                    frontier_phi_66_pred_5 = _3112;
                }
                else
                {
                    float _3256;
                    float _3257;
                    float _3258;
                    float _3259;
                    float _3260;
                    float _3261;
                    uint _3262;
                    _3256 = _3111;
                    _3257 = _3112;
                    _3258 = _3113;
                    _3259 = _3114;
                    _3260 = _3115;
                    _3261 = _3116;
                    _3262 = _3126;
                    float _3183;
                    float _3184;
                    float _3185;
                    float _3186;
                    float _3187;
                    float _3188;
                    for (;;)
                    {
                        uint _3266 = uint(findLSB(_3262)) + (_3117 << 5u);
                        uint _3263 = (_3262 + 4294967295u) & _3262;
                        uint _3268 = _3266 * 48u;
                        vec4 _3282 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3268)).x, texelFetch(g_PointLightRenderingBuffer, int(_3268 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3268 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3268 + 3u)).x));
                        uint _3288 = (_3266 * 48u) + 4u;
                        vec4 _3301 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3288)).x, texelFetch(g_PointLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3288 + 3u)).x));
                        uint _3307 = (_3266 * 48u) + 8u;
                        vec3 _3318 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3307)).x, texelFetch(g_PointLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3307 + 2u)).x));
                        float _3322 = _3282.x - _2812;
                        float _3323 = _3282.y - _2813;
                        float _3324 = _3282.z - _2814;
                        float _3325 = dot(vec3(_3322, _3323, _3324), vec3(_3322, _3323, _3324));
                        float _3328 = inversesqrt(_3325);
                        float _3329 = _3328 * _3322;
                        float _3330 = _3328 * _3323;
                        float _3331 = _3328 * _3324;
                        float _3332 = dot(vec3(_1025, _1028, _1031), vec3(_3329, _3330, _3331));
                        float _3337 = 1.0 - (_3325 * _3282.w);
                        float _4791 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                        float _3338 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
                        float _3339 = sqrt(_3325) * _3301.w;
                        float _3342 = 1.39999997615814208984375 / (_3339 + 1.39999997615814208984375);
                        float _3343 = _3342 * _3342;
                        float _3346 = ((1.0 - _3343) * _3332) + _3343;
                        float _3349 = _3339 * _3339;
                        float _3353 = ((isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0))) * _3338) / ((_3349 * 0.699999988079071044921875) + 1.0);
                        float _3357 = (-0.0) - _2812;
                        float _3358 = (-0.0) - _2813;
                        float _3359 = (-0.0) - _2814;
                        float _3363 = inversesqrt(dot(vec3(_3357, _3358, _3359), vec3(_3357, _3358, _3359)));
                        float _3364 = _3363 * _3357;
                        float _3365 = _3363 * _3358;
                        float _3366 = _3363 * _3359;
                        float _3374 = exp2(log2(1.0 / ((_3349 * 3.5) + 5.0)) * 0.25);
                        float _3375 = 1.0 - _1100;
                        float _3382 = sqrt(1.0 - ((1.0 - (_3375 * _3375)) * (1.0 - (_3374 * _3374))));
                        float _3383 = _3382 * _3382;
                        float _3384 = _3383 * _3383;
                        float _3385 = _3364 + _3329;
                        float _3386 = _3365 + _3330;
                        float _3387 = _3366 + _3331;
                        float _3391 = inversesqrt(dot(vec3(_3385, _3386, _3387), vec3(_3385, _3386, _3387)));
                        float _3395 = dot(vec3(_1025, _1028, _1031), vec3(_3364, _3365, _3366));
                        float _4807 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                        float _3398 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
                        float _3399 = dot(vec3(_1025, _1028, _1031), vec3(_3391 * _3385, _3391 * _3386, _3391 * _3387));
                        float _4818 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                        float _3402 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
                        float _3406 = ((_3402 * _3402) * (_3384 + (-1.0))) + 1.0;
                        float _3407 = _3342 * _3383;
                        float _3408 = _3407 * _3407;
                        float _3411 = ((1.0 - _3408) * _3332) + _3408;
                        float _4829 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                        float _3412 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
                        float _3413 = 1.0 - _3383;
                        float _3423 = (0.5 / (((_3412 * ((_3398 * _3413) + _3383)) + 9.9999999392252902907785028219223e-09) + (((_3412 * _3413) + _3383) * _3398))) * _3412;
                        float _4840 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                        float _3434 = (((_3384 * 3.1415927410125732421875) * (isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0)))) / ((_3406 * _3406) * ((_3349 * 2.1991131305694580078125) + 3.141590118408203125))) * _3338;
                        _3186 = (_3353 * _3301.x) + _3259;
                        _3187 = (_3353 * _3301.y) + _3260;
                        _3188 = (_3353 * _3301.z) + _3261;
                        _3183 = (_3434 * _3318.x) + _3256;
                        _3184 = (_3434 * _3318.y) + _3257;
                        _3185 = (_3434 * _3318.z) + _3258;
                        if (_3263 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3256 = _3183;
                            _3257 = _3184;
                            _3258 = _3185;
                            _3259 = _3186;
                            _3260 = _3187;
                            _3261 = _3188;
                            _3262 = _3263;
                        }
                    }
                    frontier_phi_66_pred = _3183;
                    frontier_phi_66_pred_1 = _3188;
                    frontier_phi_66_pred_2 = _3187;
                    frontier_phi_66_pred_3 = _3186;
                    frontier_phi_66_pred_4 = _3185;
                    frontier_phi_66_pred_5 = _3184;
                }
                _2960 = frontier_phi_66_pred;
                _2970 = frontier_phi_66_pred_1;
                _2968 = frontier_phi_66_pred_2;
                _2966 = frontier_phi_66_pred_3;
                _2964 = frontier_phi_66_pred_4;
                _2962 = frontier_phi_66_pred_5;
                uint _3118 = _3117 + 1u;
                if (_3118 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3111 = _2960;
                    _3112 = _2962;
                    _3113 = _2964;
                    _3114 = _2966;
                    _3115 = _2968;
                    _3116 = _2970;
                    _3117 = _3118;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2959 = _2960;
            _2961 = _2962;
            _2963 = _2964;
            _2965 = _2966;
            _2967 = _2968;
            _2969 = _2970;
        }
        uvec4 _2973 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2974 = _2973.z;
        uint _2976 = (_2974 >> 8u) & 15u;
        float _3079;
        float _3081;
        float _3083;
        float _3085;
        float _3087;
        float _3089;
        if (((4294967295u << _2976) & _2858) == 0u)
        {
            _3079 = _2959;
            _3081 = _2961;
            _3083 = _2963;
            _3085 = _2965;
            _3087 = _2967;
            _3089 = _2969;
        }
        else
        {
            float _3104 = inversesqrt(dot(vec3(_2812, _2813, _2814), vec3(_2812, _2813, _2814)));
            float _3105 = _3104 * _2812;
            float _3106 = _3104 * _2813;
            float _3107 = _3104 * _2814;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2976 < ((_2974 >> 12u) & 15u))
            {
                float _3080;
                float _3082;
                float _3084;
                float _3086;
                float _3088;
                float _3090;
                float _3239 = _2959;
                float _3240 = _2961;
                float _3241 = _2963;
                float _3242 = _2965;
                float _3243 = _2967;
                float _3244 = _2969;
                uint _3245 = _2976;
                uint _3254;
                bool _3255;
                for (;;)
                {
                    _3254 = texelFetch(g_lightClassification, int((((_2852 << 5u) + (_2838 << 9u)) + (_3245 << 2u)) >> 2u)).x;
                    _3255 = _3254 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3255)
                    {
                        frontier_phi_77_pred = _3244;
                        frontier_phi_77_pred_1 = _3243;
                        frontier_phi_77_pred_2 = _3242;
                        frontier_phi_77_pred_3 = _3241;
                        frontier_phi_77_pred_4 = _3240;
                        frontier_phi_77_pred_5 = _3239;
                    }
                    else
                    {
                        float _3448;
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3452;
                        float _3453;
                        float _3741;
                        float _3742;
                        float _3743;
                        float _3744;
                        float _3745;
                        float _3746;
                        float _3461 = _3239;
                        float _3462 = _3240;
                        float _3463 = _3241;
                        float _3464 = _3242;
                        float _3465 = _3243;
                        float _3466 = _3244;
                        uint _3467 = _3254;
                        uint _3468;
                        vec4 _3493;
                        float _3494;
                        vec4 _3509;
                        vec3 _3521;
                        vec4 _3536;
                        vec4 _3551;
                        float _3597;
                        bool _3598;
                        for (;;)
                        {
                            uint _3478 = ((_3245 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3467));
                            _3468 = (_3467 + 4294967295u) & _3467;
                            uint _3480 = _3478 * 40u;
                            _3493 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3480)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 3u)).x));
                            _3494 = _3493.w;
                            uint _3496 = (_3478 * 40u) + 4u;
                            _3509 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3496)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 3u)).x));
                            uint _3511 = (_3478 * 40u) + 8u;
                            _3521 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3511)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 2u)).x));
                            uint _3523 = (_3478 * 40u) + 16u;
                            _3536 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3523)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 3u)).x));
                            uint _3538 = (_3478 * 40u) + 20u;
                            _3551 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3538)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 3u)).x));
                            uint _3553 = (_3478 * 40u) + 24u;
                            vec4 _3566 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3553)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 3u)).x));
                            uint _3572 = (_3478 * 40u) + 28u;
                            vec4 _3585 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3572)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 3u)).x));
                            _3597 = fma(_2814, _3585.z, fma(_2813, _3585.y, _3585.x * _2812)) + _3585.w;
                            _3598 = !((fma(_2814, _3566.z, fma(_2813, _3566.y, _3566.x * _2812)) + _3566.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3598)
                            {
                                float _3625 = _3493.x - _2812;
                                float _3626 = _3493.y - _2813;
                                float _3627 = _3493.z - _2814;
                                float _3628 = dot(vec3(_3625, _3626, _3627), vec3(_3625, _3626, _3627));
                                float _3631 = inversesqrt(_3628);
                                float _3632 = _3631 * _3625;
                                float _3633 = _3631 * _3626;
                                float _3634 = _3631 * _3627;
                                float _3638 = 1.0 - (_3628 / (_3494 * _3494));
                                float _4851 = isnan(0.0) ? _3638 : (isnan(_3638) ? 0.0 : max(_3638, 0.0));
                                float _3639 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
                                float _3643 = sqrt(_3628) * _3509.w;
                                float _3645 = 1.39999997615814208984375 / (_3643 + 1.39999997615814208984375);
                                float _3646 = _3645 * _3645;
                                float _3649 = ((1.0 - _3646) * dot(vec3(_3632, _3633, _3634), vec3(_1025, _1028, _1031))) + _3646;
                                float _3652 = _3643 * _3643;
                                float _3656 = (fma(_2814, _3536.z, fma(_2813, _3536.y, _3536.x * _2812)) + _3536.w) / _3597;
                                float _3657 = (fma(_2814, _3551.z, fma(_2813, _3551.y, _3551.x * _2812)) + _3551.w) / _3597;
                                float _3661 = 1.0 - dot(vec2(_3656, _3657), vec2(_3656, _3657));
                                float _4867 = isnan(0.0) ? _3661 : (isnan(_3661) ? 0.0 : max(_3661, 0.0));
                                float _3662 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
                                float _3663 = _3662 * (((isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0))) * _3639) / ((_3652 * 0.699999988079071044921875) + 1.0));
                                float _3675 = exp2(log2(1.0 / ((_3652 * 3.5) + 5.0)) * 0.25);
                                float _3676 = 1.0 - _1100;
                                float _3683 = sqrt(1.0 - ((1.0 - (_3676 * _3676)) * (1.0 - (_3675 * _3675))));
                                float _3684 = _3683 * _3683;
                                float _3685 = _3684 * _3684;
                                float _3686 = _3632 - _3105;
                                float _3687 = _3633 - _3106;
                                float _3688 = _3634 - _3107;
                                float _3692 = inversesqrt(dot(vec3(_3686, _3687, _3688), vec3(_3686, _3687, _3688)));
                                float _3696 = dot(vec3(_1025, _1028, _1031), vec3((-0.0) - _3105, (-0.0) - _3106, (-0.0) - _3107));
                                float _4878 = isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0));
                                float _3699 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
                                float _3700 = dot(vec3(_1025, _1028, _1031), vec3(_3692 * _3686, _3692 * _3687, _3692 * _3688));
                                float _4889 = isnan(0.0) ? _3700 : (isnan(_3700) ? 0.0 : max(_3700, 0.0));
                                float _3703 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
                                float _3707 = ((_3703 * _3703) * (_3685 + (-1.0))) + 1.0;
                                float _3708 = _3645 * _3684;
                                float _3709 = _3708 * _3708;
                                float _3715 = ((1.0 - _3709) * dot(vec3(_1025, _1028, _1031), vec3(_3632, _3633, _3634))) + _3709;
                                float _4900 = isnan(0.0) ? _3715 : (isnan(_3715) ? 0.0 : max(_3715, 0.0));
                                float _3716 = isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0));
                                float _3717 = 1.0 - _3684;
                                float _3727 = (0.5 / (((_3716 * ((_3699 * _3717) + _3684)) + 9.9999999392252902907785028219223e-09) + (((_3716 * _3717) + _3684) * _3699))) * _3716;
                                float _4911 = isnan(0.0) ? _3727 : (isnan(_3727) ? 0.0 : max(_3727, 0.0));
                                float _3737 = (_3662 * _3639) * (((_3685 * 3.1415927410125732421875) * (isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0)))) / ((_3707 * _3707) * ((_3652 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3663 * _3509.y;
                                frontier_phi_83_pred_1 = _3663 * _3509.x;
                                frontier_phi_83_pred_2 = _3737 * _3521.z;
                                frontier_phi_83_pred_3 = _3737 * _3521.y;
                                frontier_phi_83_pred_4 = _3737 * _3521.x;
                                frontier_phi_83_pred_5 = _3663 * _3509.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3745 = frontier_phi_83_pred;
                            _3744 = frontier_phi_83_pred_1;
                            _3743 = frontier_phi_83_pred_2;
                            _3742 = frontier_phi_83_pred_3;
                            _3741 = frontier_phi_83_pred_4;
                            _3746 = frontier_phi_83_pred_5;
                            _3451 = _3744 + _3464;
                            _3452 = _3745 + _3465;
                            _3453 = _3746 + _3466;
                            _3448 = _3741 + _3461;
                            _3449 = _3742 + _3462;
                            _3450 = _3743 + _3463;
                            if (_3468 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3461 = _3448;
                                _3462 = _3449;
                                _3463 = _3450;
                                _3464 = _3451;
                                _3465 = _3452;
                                _3466 = _3453;
                                _3467 = _3468;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3453;
                        frontier_phi_77_pred_1 = _3452;
                        frontier_phi_77_pred_2 = _3451;
                        frontier_phi_77_pred_3 = _3450;
                        frontier_phi_77_pred_4 = _3449;
                        frontier_phi_77_pred_5 = _3448;
                    }
                    _3090 = frontier_phi_77_pred;
                    _3088 = frontier_phi_77_pred_1;
                    _3086 = frontier_phi_77_pred_2;
                    _3084 = frontier_phi_77_pred_3;
                    _3082 = frontier_phi_77_pred_4;
                    _3080 = frontier_phi_77_pred_5;
                    uint _3246 = _3245 + 1u;
                    if (_3246 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3239 = _3080;
                        _3240 = _3082;
                        _3241 = _3084;
                        _3242 = _3086;
                        _3243 = _3088;
                        _3244 = _3090;
                        _3245 = _3246;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3084;
                frontier_phi_58_59_ladder_1 = _3090;
                frontier_phi_58_59_ladder_2 = _3088;
                frontier_phi_58_59_ladder_3 = _3086;
                frontier_phi_58_59_ladder_4 = _3082;
                frontier_phi_58_59_ladder_5 = _3080;
            }
            else
            {
                frontier_phi_58_59_ladder = _2963;
                frontier_phi_58_59_ladder_1 = _2969;
                frontier_phi_58_59_ladder_2 = _2967;
                frontier_phi_58_59_ladder_3 = _2965;
                frontier_phi_58_59_ladder_4 = _2961;
                frontier_phi_58_59_ladder_5 = _2959;
            }
            _3079 = frontier_phi_58_59_ladder_5;
            _3081 = frontier_phi_58_59_ladder_4;
            _3083 = frontier_phi_58_59_ladder;
            _3085 = frontier_phi_58_59_ladder_3;
            _3087 = frontier_phi_58_59_ladder_2;
            _3089 = frontier_phi_58_59_ladder_1;
        }
        float _3094 = isnan(1.0) ? _1084 : (isnan(_1084) ? 1.0 : min(_1084, 1.0));
        _2871 = (_3094 * _3085) + _2304;
        _2873 = (_3094 * _3087) + _2306;
        _2875 = (_3094 * _3089) + _2308;
        _2877 = ((_3079 * _1068) * _3094) + _2652;
        _2879 = ((_3081 * _1070) * _3094) + _2654;
        _2881 = ((_3083 * _1071) * _3094) + _2656;
    }
    else
    {
        _2871 = _2304;
        _2873 = _2306;
        _2875 = _2308;
        _2877 = _2652;
        _2879 = _2654;
        _2881 = _2656;
    }
    float _4927 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
    float _4938 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
    float _4949 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    float _2898 = ((isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0))) * (_2871 + ((isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0))) * _1084))) + ((_2877 + ((isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0))) * _1923)) * cbPerFrame._m0[3u].x);
    float _2899 = ((isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0))) * (_2873 + ((isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0))) * _1084))) + ((_2879 + ((isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0))) * _1923)) * cbPerFrame._m0[3u].x);
    float _2900 = ((isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0))) * (_2875 + ((isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0))) * _1084))) + ((_2881 + ((isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0))) * _1923)) * cbPerFrame._m0[3u].x);
    uint _2901 = _287 + 6u;
    float _2909 = _1006 / cbSceneParam._m0[86u].x;
    float _2910 = _1007 / cbSceneParam._m0[86u].y;
    vec4 _2924 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2909, _2910, (log2((isnan(cbSceneParam._m0[77u].w) ? _929 : (isnan(_929) ? cbSceneParam._m0[77u].w : min(_929, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2926 = _2924.x;
    float _2927 = _2924.y;
    float _2928 = _2924.z;
    float _2929 = _2924.w;
    float _3021;
    float _3023;
    float _3025;
    float _3027;
    if (_929 > cbSceneParam._m0[78u].w)
    {
        float _2984 = isnan(_929) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _929 : min(cbSceneParam._m0[80u].w, _929));
        float _2985 = _2984 / _929;
        float _2996 = _2985 * _979;
        float _2997 = _980 * _2985;
        float _2998 = (-0.0) - _2997;
        float _2999 = _2985 * _981;
        float _3001 = (cbSceneParam._m0[77u].w * _2998) / _2984;
        float _3002 = _3001 + cbSceneParam._m0[79u].w;
        float _3003 = cbSceneParam._m0[79u].w - _2997;
        float _3009 = sqrt(((_2996 * _2996) + (_2997 * _2997)) + (_2999 * _2999));
        float _3012 = (1.0 - (cbSceneParam._m0[77u].w / _2984)) * _3009;
        float _3017 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3019 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3196;
        if (abs((_2998 - _3001) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3196 = ((((_3002 > 0.0) ? exp2(_3017 * _3002) : (2.0 - exp2(_3019 * _3002))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3012;
        }
        else
        {
            float _3140 = 1.0 / cbSceneParam._m0[80u].x;
            float _3141 = isnan(_3003) ? _3002 : (isnan(_3002) ? _3003 : max(_3002, _3003));
            float _3142 = isnan(_3003) ? _3002 : (isnan(_3002) ? _3003 : min(_3002, _3003));
            float _3151 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : min(_3141, 0.0));
            float _3152 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : min(_3142, 0.0));
            _3196 = ((abs(_3009 / _2998) * cbSceneParam._m0[80u].y) * ((((_3151 - _3152) * 2.0) - ((exp2(_3017 * (isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0)))) - exp2(_3017 * (isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0))))) * _3140)) - ((exp2(_3019 * _3151) - exp2(_3019 * _3152)) * _3140))) + (_3012 * cbSceneParam._m0[80u].z);
        }
        vec4 _3198 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2909, _2910, 1.0), 0.0);
        float _3207 = exp2((_3196 * (-1.44269502162933349609375)) * (1.0 - _3198.w));
        float _3208 = log2(_3207);
        float _3224 = log2(_2929);
        _3021 = (exp2(_3224 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3208 * cbSceneParam._m0[78u].x)) * _3198.x) / cbSceneParam._m0[78u].x)) + _2926;
        _3023 = (exp2(_3224 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3208 * cbSceneParam._m0[78u].y)) * _3198.y) / cbSceneParam._m0[78u].y)) + _2927;
        _3025 = (exp2(_3224 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3208 * cbSceneParam._m0[78u].z)) * _3198.z) / cbSceneParam._m0[78u].z)) + _2928;
        _3027 = _3207 * _2929;
    }
    else
    {
        _3021 = _2926;
        _3023 = _2927;
        _3025 = _2928;
        _3027 = _2929;
    }
    bool _3234;
    vec4 _3037;
    vec4 _3059;
    float _3061;
    float _3065;
    float _3066;
    float _3067;
    float _3068;
    bool _3078;
    for (;;)
    {
        _3037 = cbMatDynParam._m0[0u];
        float _3039 = roundEven(_3037.y);
        bool _3040 = _3039 == 3.0;
        float _3041 = log2(_3027);
        float _3048 = exp2(_3041 * cbSceneParam._m0[78u].x) * _2898;
        float _3049 = exp2(_3041 * cbSceneParam._m0[78u].y) * _2899;
        float _3050 = exp2(_3041 * cbSceneParam._m0[78u].z) * _2900;
        float _3057 = _995 + (-0.5);
        _3059 = cbMtdParam._m0[1u];
        _3061 = _3059.y * _3057;
        float _3064 = (_3039 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3065 = _3064 * (_3040 ? _3048 : (_3048 + (cbSceneParam._m0[72u].w * _3021)));
        _3066 = _3064 * (_3040 ? _3049 : (_3049 + (cbSceneParam._m0[72u].w * _3023)));
        _3067 = _3064 * (_3040 ? _3050 : (_3050 + (cbSceneParam._m0[72u].w * _3025)));
        _3068 = _3057 * 0.999000012874603271484375;
        _3078 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3078)
        {
            if ((cbInstanceData._m0[_287 + 7u].x + _3068) < 0.5)
            {
                _3234 = true;
                break;
            }
        }
        uint _3175 = _1044 + uint(_3037.w);
        if ((cbInstanceData._m0[_3175].w < 1.0) && ((cbInstanceData._m0[_3175].w + _3068) < 0.5))
        {
            _3234 = true;
            break;
        }
        if ((_3061 + 1.0) < _3059.x)
        {
            _3234 = true;
            break;
        }
        _3234 = false;
        break;
    }
    float _3439;
    if (_3234)
    {
        discard_state = true;
        _3439 = 0.0;
    }
    else
    {
        _3439 = cbInstanceData._m0[_2901].w;
    }
    SV_Target.x = _3065;
    SV_Target.y = _3066;
    SV_Target.z = _3067;
    SV_Target.w = _3439;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2901].w;
    discard_exit();
}


