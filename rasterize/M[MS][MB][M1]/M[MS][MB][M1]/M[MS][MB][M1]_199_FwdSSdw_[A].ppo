#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1456;
float _3858;
float _3859;
float _3860;
float _3861;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3870 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _3881 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _3892 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    uint _282 = uint(roundEven(NORMAL.w)) * 13u;
    uint _287 = _282 + 1u;
    uint _291 = _282 + 2u;
    float _300 = sqrt(((cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x)) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x));
    float _301 = _300 * TEXCOORD.z;
    float _302 = _300 * TEXCOORD.w;
    vec4 _315 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _301) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _302) + cbTextureTilingScale._m0[13u].w));
    vec4 _339 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _344 = _339.x * cbMtdParam._m0[11u].x;
    float _345 = _339.y * cbMtdParam._m0[11u].y;
    float _346 = _339.z * cbMtdParam._m0[11u].z;
    vec4 _365 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _301) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _302) + cbTextureTilingScale._m0[5u].w));
    vec4 _402 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _404 = _402.x;
    float _416 = dot(vec4(_404, _402.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _433 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_404 - _416) * cbMtdParam._m0[24u].y) + _416) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3903 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _434 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _441 = (_434 * ((_365.x * cbMtdParam._m0[12u].x) - _344)) + _344;
    float _442 = (_434 * ((_365.y * cbMtdParam._m0[12u].y) - _345)) + _345;
    float _443 = (_434 * ((_365.z * cbMtdParam._m0[12u].z) - _346)) + _346;
    vec4 _460 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _301) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _302) + cbTextureTilingScale._m0[3u].w));
    vec4 _480 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _482 = _480.x;
    float _492 = dot(vec4(_482, _480.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _506 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_482 - _492) * cbMtdParam._m0[24u].y) + _492) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3914 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _507 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _514 = (_507 * ((_460.x * cbMtdParam._m0[13u].x) - _441)) + _441;
    float _515 = (_507 * ((_460.y * cbMtdParam._m0[13u].y) - _442)) + _442;
    float _516 = (_507 * ((_460.z * cbMtdParam._m0[13u].z) - _443)) + _443;
    float _520 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _315.x) * _514;
    float _523 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _315.y) * _515;
    float _526 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _315.z) * _516;
    float _533 = ((_514 - _520) * (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0)))) + _520;
    float _534 = ((_515 - _523) * (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0)))) + _523;
    float _535 = ((_516 - _526) * (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0)))) + _526;
    vec4 _554 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _301) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _302) + cbTextureTilingScale._m0[14u].w));
    vec4 _573 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _301) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _302) + cbTextureTilingScale._m0[20u].w));
    vec4 _596 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _301) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _302) + cbTextureTilingScale._m0[4u].w));
    vec4 _613 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _615 = _613.x;
    float _616 = _613.y;
    float _617 = _613.z;
    float _624 = ((_596.x - _615) * _434) + _615;
    float _625 = ((_596.y - _616) * _434) + _616;
    float _626 = ((_596.z - _617) * _434) + _617;
    vec4 _638 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _301) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _302) + cbTextureTilingScale._m0[2u].w));
    float _651 = ((_638.z - _626) * _507) + _626;
    float _654 = ((((_638.x - _624) * _507) + _624) * 2.0) + (-1.0);
    float _655 = ((((_638.y - _625) * _507) + _625) * 2.0) + (-1.0);
    float _656 = dot(vec2(_654, _655), vec2(_654, _655));
    float _3925 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _661 = sqrt(1.0 - (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))));
    vec4 _675 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _700 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _301) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _302) + cbTextureTilingScale._m0[11u].w));
    float _702 = _700.x;
    float _703 = 1.0 - _702;
    float _716 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_702 - _703) * cbMtdParam._m0[24u].z) + _703) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3936 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _717 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _724 = (_717 * ((_554.x * cbMtdParam._m0[18u].x) - _533)) + _533;
    float _725 = (_717 * ((_554.y * cbMtdParam._m0[18u].y) - _534)) + _534;
    float _726 = (_717 * ((_554.z * cbMtdParam._m0[18u].z) - _535)) + _535;
    vec4 _738 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _752 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _754 = _752.x;
    float _772 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _301) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _302) + cbTextureTilingScale._m0[9u].w)).x - _754) * _434) + _754;
    float _789 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _301) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _302) + cbTextureTilingScale._m0[21u].w)).x - _772) * _507) + _772;
    float _793 = ((_738.x - _789) * cbMtdParam._m0[19u].z) + _789;
    float _795 = _793 - (_793 * _717);
    float _800 = (((_573.z - _651) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _651;
    float _804 = ((_675.z - _800) * cbMtdParam._m0[19u].w) + _800;
    vec4 _817 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _301) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _302) + cbTextureTilingScale._m0[15u].w));
    float _824 = (_817.x * 2.0) + (-1.0);
    float _825 = (_817.y * 2.0) + (-1.0);
    float _826 = dot(vec2(_824, _825), vec2(_824, _825));
    float _3947 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _834 = (_717 * (_817.z - _804)) + _804;
    float _843 = (_654 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_573.x * 2.0) + (-1.0)))) + (((_675.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _844 = (_655 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_573.y * 2.0) + (-1.0)))) + (((_675.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _856 = (((_824 - _843) + (cbMtdParam._m0[21u].x * _843)) * _717) + _843;
    float _857 = (((_825 - _844) + (cbMtdParam._m0[21u].x * _844)) * _717) + _844;
    float _858 = (_717 * (sqrt(1.0 - (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0)))) - _661)) + _661;
    float _862 = cbMtdParam._m0[22u].x + _675.w;
    float _865 = fma(_858, _248 * NORMAL.x, fma(_857, _255 * TANGENT.x, (_241 * _233) * _856));
    float _868 = fma(_858, _248 * NORMAL.y, fma(_857, _255 * TANGENT.y, (_241 * _234) * _856));
    float _871 = fma(_858, _248 * NORMAL.z, fma(_857, _255 * TANGENT.z, (_241 * _235) * _856));
    float _875 = inversesqrt(dot(vec3(_865, _868, _871), vec3(_865, _868, _871)));
    float _876 = _875 * _865;
    float _877 = _875 * _868;
    float _878 = _875 * _871;
    float _3958 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _879 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _3969 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _3980 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _3991 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _4002 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _4013 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _884 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
    float _898 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _939 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _949 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _939);
    float _950 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _939);
    float _951 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _939);
    float _955 = inversesqrt(dot(vec3(_949, _950, _951), vec3(_949, _950, _951)));
    float _956 = _949 * _955;
    float _957 = _950 * _955;
    float _958 = _951 * _955;
    vec4 _963 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _965 = _963.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1137 = sqrt(((_949 * _949) + (_950 * _950)) + (_951 * _951));
        float _1143 = (cbMatDynParam._m0[5u].x * _1137) + cbMatDynParam._m0[5u].y;
        float _4024 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1148 = (cbMatDynParam._m0[5u].z * _1137) + cbMatDynParam._m0[5u].w;
        float _4035 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))) - _1144)) + _1144) < ((_965 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _976 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _977 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _995 = fma(_878, cbSceneParam._m0[5u].z, fma(_877, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _876));
    float _998 = fma(_878, cbSceneParam._m0[6u].z, fma(_877, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _876));
    float _1001 = fma(_878, cbSceneParam._m0[7u].z, fma(_877, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _876));
    uint _1014 = _282 + 9u;
    uint _1015 = _1014 + uint(cbMatDynParam._m0[0u].w);
    float _1021 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0)))) * cbInstanceData._m0[_1015].x;
    float _1022 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0)))) * cbInstanceData._m0[_1015].y;
    float _1023 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) * cbInstanceData._m0[_1015].z;
    float _4046 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
    float _1024 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _4057 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _1025 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _4068 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    float _1026 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _1027 = 1.0 - _884;
    float _1028 = _1024 * _1027;
    float _1029 = _1025 * _1027;
    float _1030 = _1026 * _1027;
    float _1035 = (_1024 + (-0.039999999105930328369140625)) * _884;
    float _1036 = (_1025 + (-0.039999999105930328369140625)) * _884;
    float _1037 = (_1026 + (-0.039999999105930328369140625)) * _884;
    float _1038 = _1035 + 0.039999999105930328369140625;
    float _1040 = _1036 + 0.039999999105930328369140625;
    float _1041 = _1037 + 0.039999999105930328369140625;
    vec4 _1050 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _976, cbSceneParam._m0[86u].y * _977));
    float _1054 = ((isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * TEXCOORD_5.w) * _1050.x;
    float _1055 = dot(vec3(_876, _877, _878), vec3(_956, _957, _958));
    float _1058 = _1055 * 2.0;
    float _1062 = (_1058 * _876) - _956;
    float _1063 = (_1058 * _877) - _957;
    float _1064 = (_1058 * _878) - _958;
    float _1068 = abs(dot(vec3(_956, _957, _958), vec3(_876, _877, _878)));
    float _4079 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _1070 = sqrt(_879);
    float _1083 = exp2((_1070 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1070 * 3.0));
    float _1089 = (1.0 - _1083) * ((_1070 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1090 = _1083 * _1070;
    float _1118 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1122 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1126 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1455;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1180 = fma(_1126, cbModelParam._m0[26u].z, fma(_1122, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1118));
        float _1184 = fma(_1126, cbModelParam._m0[27u].z, fma(_1122, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1118));
        float _1188 = fma(_1126, cbModelParam._m0[28u].z, fma(_1122, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1118));
        float _1213 = _1118 + _876;
        float _1214 = _1122 + _877;
        float _1215 = _1126 + _878;
        float _1225 = fma(_1215, cbModelParam._m0[26u].z, fma(_1214, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1213)) - _1180;
        float _1226 = fma(_1215, cbModelParam._m0[27u].z, fma(_1214, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1213)) - _1184;
        float _1227 = fma(_1215, cbModelParam._m0[28u].z, fma(_1214, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1213)) - _1188;
        float _1231 = inversesqrt(dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227)));
        float _1244 = ((_1231 * _1225) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1180 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1245 = ((_1231 * _1226) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1184 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1246 = ((_1231 * _1227) / cbModelParam._m0[34u].z) + ((((((_1188 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        vec4 _1263 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        vec4 _1270 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        float _1283 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1284 = _1283 * (_1249.x + (-0.5));
        float _1285 = _1283 * (_1249.y + (-0.5));
        float _1286 = _1283 * (_1249.z + (-0.5));
        float _1293 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1294 = _1293 * (_1256.x + (-0.5));
        float _1295 = _1293 * (_1256.y + (-0.5));
        float _1296 = _1293 * (_1256.z + (-0.5));
        float _1303 = exp2((_1263.w + (-0.5)) * 20.0) * 2.0;
        float _1304 = _1303 * (_1263.x + (-0.5));
        float _1305 = _1303 * (_1263.y + (-0.5));
        float _1306 = _1303 * (_1263.z + (-0.5));
        float _1313 = exp2((_1270.w + (-0.5)) * 20.0) * 2.0;
        float _1314 = _1313 * (_1270.x + (-0.5));
        float _1315 = _1313 * (_1270.y + (-0.5));
        float _1316 = _1313 * (_1270.z + (-0.5));
        float _1317 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1318 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1319 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1320 = _1284 * 0.5;
        float _1321 = _1294 * 0.5;
        float _1322 = _1304 * 0.5;
        float _1323 = dot(vec3(_1320, _1321, _1322), vec3(_1320, _1321, _1322));
        float _1328 = (_1323 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1323);
        float _1337 = (dot(vec3(_876, _877, _878), vec3(_1328 * _1320, _1328 * _1321, _1328 * _1322)) + 1.0) * 0.5;
        float _4105 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1347 = sqrt(((_1321 * _1321) + (_1320 * _1320)) + (_1322 * _1322)) / (_1317 + 9.9999997473787516355514526367188e-06);
        float _4116 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1349 = _1348 * 2.0;
        float _1353 = (1.0 - _1348) / (_1348 + 1.0);
        float _4127 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1363 = ((((1.0 - _1354) * (_1349 + 2.0)) * exp2(log2(isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_1349 + 1.0))) + _1354) * _1317;
        float _1364 = _1285 * 0.5;
        float _1365 = _1295 * 0.5;
        float _1366 = _1305 * 0.5;
        float _1367 = dot(vec3(_1364, _1365, _1366), vec3(_1364, _1365, _1366));
        float _1372 = (_1367 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1367);
        float _1380 = (dot(vec3(_876, _877, _878), vec3(_1372 * _1364, _1372 * _1365, _1372 * _1366)) + 1.0) * 0.5;
        float _4138 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1389 = sqrt(((_1365 * _1365) + (_1364 * _1364)) + (_1366 * _1366)) / (_1318 + 9.9999997473787516355514526367188e-06);
        float _4149 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1391 = _1390 * 2.0;
        float _1395 = (1.0 - _1390) / (_1390 + 1.0);
        float _4160 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1405 = ((((1.0 - _1396) * (_1391 + 2.0)) * exp2(log2(isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_1391 + 1.0))) + _1396) * _1318;
        float _1406 = _1286 * 0.5;
        float _1407 = _1296 * 0.5;
        float _1408 = _1306 * 0.5;
        float _1409 = dot(vec3(_1406, _1407, _1408), vec3(_1406, _1407, _1408));
        float _1414 = (_1409 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1409);
        float _1422 = (dot(vec3(_876, _877, _878), vec3(_1414 * _1406, _1414 * _1407, _1414 * _1408)) + 1.0) * 0.5;
        float _4171 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1431 = sqrt(((_1407 * _1407) + (_1406 * _1406)) + (_1408 * _1408)) / (_1319 + 9.9999997473787516355514526367188e-06);
        float _4182 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1433 = _1432 * 2.0;
        float _1437 = (1.0 - _1432) / (_1432 + 1.0);
        float _4193 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1447 = ((((1.0 - _1438) * (_1433 + 2.0)) * exp2(log2(isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_1433 + 1.0))) + _1438) * _1319;
        _1455 = _1286;
        _1457 = _1285;
        _1458 = _1284;
        _1459 = _1296;
        _1460 = _1295;
        _1461 = _1294;
        _1462 = _1306;
        _1463 = _1305;
        _1464 = _1304;
        _1465 = _1319;
        _1466 = _1318;
        _1467 = _1317;
        _1468 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)));
        _1469 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)));
        _1470 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)));
    }
    else
    {
        _1455 = _1456;
        _1457 = _1456;
        _1458 = _1456;
        _1459 = _1456;
        _1460 = _1456;
        _1461 = _1456;
        _1462 = _1456;
        _1463 = _1456;
        _1464 = _1456;
        _1465 = _1456;
        _1466 = _1456;
        _1467 = _1456;
        _1468 = 0.0;
        _1469 = 0.0;
        _1470 = 0.0;
    }
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1497 = fma(_1126, cbModelParam._m0[30u].z, fma(_1122, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1118));
        float _1501 = fma(_1126, cbModelParam._m0[31u].z, fma(_1122, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1118));
        float _1505 = fma(_1126, cbModelParam._m0[32u].z, fma(_1122, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1118));
        float _1528 = _1118 + _876;
        float _1529 = _1122 + _877;
        float _1530 = _1126 + _878;
        float _1540 = fma(_1530, cbModelParam._m0[30u].z, fma(_1529, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1528)) - _1497;
        float _1541 = fma(_1530, cbModelParam._m0[31u].z, fma(_1529, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1528)) - _1501;
        float _1542 = fma(_1530, cbModelParam._m0[32u].z, fma(_1529, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1528)) - _1505;
        float _1546 = inversesqrt(dot(vec3(_1540, _1541, _1542), vec3(_1540, _1541, _1542)));
        float _1559 = ((_1546 * _1540) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1497 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1560 = ((_1546 * _1541) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1501 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1561 = ((_1546 * _1542) / cbModelParam._m0[35u].z) + ((((((_1505 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1563 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1559, _1560, _1561), 0.0);
        vec4 _1570 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1559, _1560, _1561), 0.0);
        vec4 _1577 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1559, _1560, _1561), 0.0);
        vec4 _1584 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1559, _1560, _1561), 0.0);
        float _1596 = exp2((_1563.w + (-0.5)) * 20.0) * 2.0;
        float _1597 = _1596 * (_1563.x + (-0.5));
        float _1598 = _1596 * (_1563.y + (-0.5));
        float _1599 = _1596 * (_1563.z + (-0.5));
        float _1606 = exp2((_1570.w + (-0.5)) * 20.0) * 2.0;
        float _1607 = _1606 * (_1570.x + (-0.5));
        float _1608 = _1606 * (_1570.y + (-0.5));
        float _1609 = _1606 * (_1570.z + (-0.5));
        float _1616 = exp2((_1577.w + (-0.5)) * 20.0) * 2.0;
        float _1617 = _1616 * (_1577.x + (-0.5));
        float _1618 = _1616 * (_1577.y + (-0.5));
        float _1619 = _1616 * (_1577.z + (-0.5));
        float _1626 = exp2((_1584.w + (-0.5)) * 20.0) * 2.0;
        float _1627 = _1626 * (_1584.x + (-0.5));
        float _1628 = _1626 * (_1584.y + (-0.5));
        float _1629 = _1626 * (_1584.z + (-0.5));
        float _1630 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1631 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1632 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1633 = _1597 * 0.5;
        float _1634 = _1607 * 0.5;
        float _1635 = _1617 * 0.5;
        float _1636 = dot(vec3(_1633, _1634, _1635), vec3(_1633, _1634, _1635));
        float _1641 = (_1636 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1636);
        float _1649 = (dot(vec3(_876, _877, _878), vec3(_1641 * _1633, _1641 * _1634, _1641 * _1635)) + 1.0) * 0.5;
        float _4234 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1658 = sqrt(((_1634 * _1634) + (_1633 * _1633)) + (_1635 * _1635)) / (_1630 + 9.9999997473787516355514526367188e-06);
        float _4245 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1660 = _1659 * 2.0;
        float _1664 = (1.0 - _1659) / (_1659 + 1.0);
        float _4256 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1674 = ((((1.0 - _1665) * (_1660 + 2.0)) * exp2(log2(isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_1660 + 1.0))) + _1665) * _1630;
        float _1675 = _1598 * 0.5;
        float _1676 = _1608 * 0.5;
        float _1677 = _1618 * 0.5;
        float _1678 = dot(vec3(_1675, _1676, _1677), vec3(_1675, _1676, _1677));
        float _1683 = (_1678 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1678);
        float _1691 = (dot(vec3(_876, _877, _878), vec3(_1683 * _1675, _1683 * _1676, _1683 * _1677)) + 1.0) * 0.5;
        float _4267 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1700 = sqrt(((_1676 * _1676) + (_1675 * _1675)) + (_1677 * _1677)) / (_1631 + 9.9999997473787516355514526367188e-06);
        float _4278 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1701 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1702 = _1701 * 2.0;
        float _1706 = (1.0 - _1701) / (_1701 + 1.0);
        float _4289 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1707 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1716 = ((((1.0 - _1707) * (_1702 + 2.0)) * exp2(log2(isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_1702 + 1.0))) + _1707) * _1631;
        float _1717 = _1599 * 0.5;
        float _1718 = _1609 * 0.5;
        float _1719 = _1619 * 0.5;
        float _1720 = dot(vec3(_1717, _1718, _1719), vec3(_1717, _1718, _1719));
        float _1725 = (_1720 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1720);
        float _1733 = (dot(vec3(_876, _877, _878), vec3(_1725 * _1717, _1725 * _1718, _1725 * _1719)) + 1.0) * 0.5;
        float _4300 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1742 = sqrt(((_1718 * _1718) + (_1717 * _1717)) + (_1719 * _1719)) / (_1632 + 9.9999997473787516355514526367188e-06);
        float _4311 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1743 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1744 = _1743 * 2.0;
        float _1748 = (1.0 - _1743) / (_1743 + 1.0);
        float _4322 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
        float _1749 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _1758 = ((((1.0 - _1749) * (_1744 + 2.0)) * exp2(log2(isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_1744 + 1.0))) + _1749) * _1632;
        _1766 = _1599;
        _1767 = _1598;
        _1768 = _1597;
        _1769 = _1609;
        _1770 = _1608;
        _1771 = _1607;
        _1772 = _1619;
        _1773 = _1618;
        _1774 = _1617;
        _1775 = _1632;
        _1776 = _1631;
        _1777 = _1630;
        _1778 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0)));
        _1779 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0)));
        _1780 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0)));
    }
    else
    {
        _1766 = _1456;
        _1767 = _1456;
        _1768 = _1456;
        _1769 = _1456;
        _1770 = _1456;
        _1771 = _1456;
        _1772 = _1456;
        _1773 = _1456;
        _1774 = _1456;
        _1775 = _1456;
        _1776 = _1456;
        _1777 = _1456;
        _1778 = 0.0;
        _1779 = 0.0;
        _1780 = 0.0;
    }
    float _1790 = (cbModelParam._m0[1u].x * (_1778 - _1468)) + _1468;
    float _1791 = (cbModelParam._m0[1u].x * (_1779 - _1469)) + _1469;
    float _1792 = (cbModelParam._m0[1u].x * (_1780 - _1470)) + _1470;
    float _1813 = fma(_1792, cbSceneParam._m0[89u].z, fma(_1791, cbSceneParam._m0[89u].y, _1790 * cbSceneParam._m0[89u].x));
    float _1816 = fma(_1792, cbSceneParam._m0[90u].z, fma(_1791, cbSceneParam._m0[90u].y, _1790 * cbSceneParam._m0[90u].x));
    float _1819 = fma(_1792, cbSceneParam._m0[91u].z, fma(_1791, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1790));
    float _1834 = _1062 * 0.5;
    float _1835 = _1063 * 0.5;
    float _1836 = _1064 * 0.5;
    float _1837 = dot(vec4(_1834, _1835, _1836, 1.0), vec4(_1768, _1771, _1774, _1777));
    float _1840 = dot(vec4(_1834, _1835, _1836, 1.0), vec4(_1767, _1770, _1773, _1776));
    float _1843 = dot(vec4(_1834, _1835, _1836, 1.0), vec4(_1766, _1769, _1772, _1775));
    float _1877;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1850 = dot(vec4(_1834, _1835, _1836, 1.0), vec4(_1455, _1459, _1462, _1465));
        float _1854 = dot(vec4(_1834, _1835, _1836, 1.0), vec4(_1457, _1460, _1463, _1466));
        float _1858 = dot(vec4(_1834, _1835, _1836, 1.0), vec4(_1458, _1461, _1464, _1467));
        float _1865 = dot(vec4(cbModelParam._m0[39u]), vec4(_1834, _1835, _1836, 1.0));
        _1877 = dot(vec3(isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0)), isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0)), isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1865) ? 0.0 : (isnan(0.0) ? _1865 : max(0.0, _1865))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1877 = 1.0;
    }
    float _1888;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1879 = dot(vec4(cbModelParam._m0[40u]), vec4(_1834, _1835, _1836, 1.0));
        _1888 = dot(vec3(isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0)), isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0)), isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1879) ? 0.0 : (isnan(0.0) ? _1879 : max(0.0, _1879))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1888 = 1.0;
    }
    float _1892 = (_1888 * cbModelParam._m0[1u].x) + (_1877 * (1.0 - cbModelParam._m0[1u].x));
    float _1902 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _879);
    float _1903 = isnan(_1902) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1902 : min(cbModelParam._m0[25u].z, _1902));
    float _1983;
    float _1985;
    float _1987;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1950 = fma(_1126, cbModelParam._m0[13u].z, fma(_1122, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1118)) + cbModelParam._m0[13u].w;
        float _1954 = fma(_1126, cbModelParam._m0[14u].z, fma(_1122, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1118)) + cbModelParam._m0[14u].w;
        float _1958 = fma(_1126, cbModelParam._m0[15u].z, fma(_1122, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1118)) + cbModelParam._m0[15u].w;
        float _1961 = fma(_1064, cbModelParam._m0[13u].z, fma(_1063, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1062));
        float _1964 = fma(_1064, cbModelParam._m0[14u].z, fma(_1063, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1062));
        float _1967 = fma(_1064, cbModelParam._m0[15u].z, fma(_1063, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1062));
        float _1995;
        if (_1961 > 0.0)
        {
            _1995 = abs((1.0 - _1950) / _1961);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1961 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1950 + 1.0) / _1961);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1995 = frontier_phi_17_15_ladder;
        }
        float _2218;
        if (_1964 > 0.0)
        {
            _2218 = abs((1.0 - _1954) / _1964);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1964 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1954 + 1.0) / _1964);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2218 = frontier_phi_26_22_ladder;
        }
        float _2475;
        if (_1967 > 0.0)
        {
            _2475 = abs((1.0 - _1958) / _1967);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1958 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2475 = frontier_phi_38_33_ladder;
        }
        float _2477 = isnan(_2218) ? _1995 : (isnan(_1995) ? _2218 : min(_1995, _2218));
        float _2478 = isnan(_2475) ? _2477 : (isnan(_2477) ? _2475 : min(_2477, _2475));
        float _2482 = (_2478 * _1961) + _1950;
        float _2483 = (_2478 * _1964) + _1954;
        float _2484 = (_2478 * _1967) + _1958;
        float _2485 = _2478 * 9.9999997473787516355514526367188e-05;
        float _2487 = (-1.0) - _2485;
        float _2489 = _2485 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2484 > _2489) || ((_2484 < _2487) || ((_2483 > _2489) || ((_2483 < _2487) || ((_2482 < _2487) || (_2482 > _2489))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2612 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2484, cbModelParam._m0[9u].z, fma(_2483, cbModelParam._m0[9u].y, _2482 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2484, cbModelParam._m0[10u].z, fma(_2483, cbModelParam._m0[10u].y, _2482 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2484, cbModelParam._m0[11u].z, fma(_2483, cbModelParam._m0[11u].y, _2482 * cbModelParam._m0[11u].x))), _1903);
            frontier_phi_16_38_ladder = _2612.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2612.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2612.x * cbModelParam._m0[1u].y;
        }
        _1983 = frontier_phi_16_38_ladder_2;
        _1985 = frontier_phi_16_38_ladder_1;
        _1987 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1971 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1062, _1063, _1064), _1903);
        _1983 = _1971.x * cbModelParam._m0[1u].y;
        _1985 = _1971.y * cbModelParam._m0[1u].y;
        _1987 = _1971.z * cbModelParam._m0[1u].y;
    }
    float _1991 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _879);
    float _1992 = isnan(_1991) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1991 : min(cbModelParam._m0[25u].w, _1991));
    float _2081;
    float _2083;
    float _2085;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2045 = fma(_1126, cbModelParam._m0[21u].z, fma(_1122, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1118)) + cbModelParam._m0[21u].w;
        float _2049 = fma(_1126, cbModelParam._m0[22u].z, fma(_1122, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1118)) + cbModelParam._m0[22u].w;
        float _2053 = fma(_1126, cbModelParam._m0[23u].z, fma(_1122, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1118)) + cbModelParam._m0[23u].w;
        float _2056 = fma(_1064, cbModelParam._m0[21u].z, fma(_1063, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1062));
        float _2059 = fma(_1064, cbModelParam._m0[22u].z, fma(_1063, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1062));
        float _2062 = fma(_1064, cbModelParam._m0[23u].z, fma(_1063, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1062));
        float _2223;
        if (_2056 > 0.0)
        {
            _2223 = abs((1.0 - _2045) / _2056);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2056 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2045 + 1.0) / _2056);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2223 = frontier_phi_28_24_ladder;
        }
        float _2502;
        if (_2059 > 0.0)
        {
            _2502 = abs((1.0 - _2049) / _2059);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2059 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2049 + 1.0) / _2059);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2502 = frontier_phi_40_35_ladder;
        }
        float _2715;
        if (_2062 > 0.0)
        {
            _2715 = abs((1.0 - _2053) / _2062);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2062 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2053 + 1.0) / _2062);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2715 = frontier_phi_49_46_ladder;
        }
        float _2717 = isnan(_2502) ? _2223 : (isnan(_2223) ? _2502 : min(_2223, _2502));
        float _2718 = isnan(_2715) ? _2717 : (isnan(_2717) ? _2715 : min(_2717, _2715));
        float _2722 = (_2718 * _2056) + _2045;
        float _2723 = (_2718 * _2059) + _2049;
        float _2724 = (_2718 * _2062) + _2053;
        float _2725 = _2718 * 9.9999997473787516355514526367188e-05;
        float _2726 = (-1.0) - _2725;
        float _2728 = _2725 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2724 > _2728) || ((_2724 < _2726) || ((_2723 > _2728) || ((_2723 < _2726) || ((_2722 < _2726) || (_2722 > _2728))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2923 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2724, cbModelParam._m0[17u].z, fma(_2723, cbModelParam._m0[17u].y, _2722 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2724, cbModelParam._m0[18u].z, fma(_2723, cbModelParam._m0[18u].y, _2722 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2724, cbModelParam._m0[19u].z, fma(_2723, cbModelParam._m0[19u].y, _2722 * cbModelParam._m0[19u].x))), _1992);
            frontier_phi_25_49_ladder = _2923.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2923.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2923.x * cbModelParam._m0[1u].z;
        }
        _2081 = frontier_phi_25_49_ladder_2;
        _2083 = frontier_phi_25_49_ladder_1;
        _2085 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2065 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1062, _1063, _1064), _1992);
        _2081 = _2065.x * cbModelParam._m0[1u].z;
        _2083 = _2065.y * cbModelParam._m0[1u].z;
        _2085 = _2065.z * cbModelParam._m0[1u].z;
    }
    float _2098 = (((_1089 * _1038) + _1090) * _1054) * ((cbModelParam._m0[1u].w * (_2081 - _1983)) + _1983);
    float _2100 = (((_1089 * _1040) + _1090) * _1054) * ((cbModelParam._m0[1u].w * (_2083 - _1985)) + _1985);
    float _2102 = (((_1089 * _1041) + _1090) * _1054) * ((cbModelParam._m0[1u].w * (_2085 - _1987)) + _1987);
    float _2105 = fma(_2102, cbSceneParam._m0[89u].z, fma(_2100, cbSceneParam._m0[89u].y, _2098 * cbSceneParam._m0[89u].x));
    float _2108 = fma(_2102, cbSceneParam._m0[90u].z, fma(_2100, cbSceneParam._m0[90u].y, _2098 * cbSceneParam._m0[90u].x));
    float _2111 = fma(_2102, cbSceneParam._m0[91u].z, fma(_2100, cbSceneParam._m0[91u].y, _2098 * cbSceneParam._m0[91u].x));
    vec4 _2119 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_976, _977));
    float _2121 = _2119.w;
    float _2133 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2121);
    float _2134 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2121);
    float _2135 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2121);
    uvec4 _2139 = floatBitsToUint(cbInstanceData._m0[_282 + 5u]);
    uint _2141 = _2139.x * 14u;
    uint _2142 = _2141 + 13u;
    float _2149 = _1054 + (-1.0);
    float _2154 = (cbLight._m0[_2142].x * _2149) + 1.0;
    float _2155 = (cbLight._m0[_2142].y * _2149) + 1.0;
    float _2156 = (cbLight._m0[_2142].z * _2149) + 1.0;
    float _2157 = (cbLight._m0[_2142].w * _2149) + 1.0;
    uint _2158 = _2141 + 5u;
    float _2164 = isnan(1.0) ? _2155 : (isnan(_2155) ? 1.0 : min(_2155, 1.0));
    uint _2168 = _2141 + 4u;
    float _2177 = isnan(1.0) ? _2154 : (isnan(_2154) ? 1.0 : min(_2154, 1.0));
    uint _2181 = _2141 | 1u;
    float _2192 = dot(vec3(cbLight._m0[_2141].xyz), vec3(_876, _877, _878));
    float _2195 = dot(vec3(cbLight._m0[_2181].xyz), vec3(_876, _877, _878));
    float _4458 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _4469 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2200 = (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * 0.3183098733425140380859375;
    float _2202 = (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * 0.3183098733425140380859375;
    float _2209 = ((cbLight._m0[_2158].x * _2164) * _2202) + (((cbLight._m0[_2168].x * _2133) * _2177) * _2200);
    float _2210 = ((_2164 * cbLight._m0[_2158].y) * _2202) + (((cbLight._m0[_2168].y * _2134) * _2177) * _2200);
    float _2211 = ((_2164 * cbLight._m0[_2158].z) * _2202) + (((cbLight._m0[_2168].z * _2135) * _2177) * _2200);
    uvec4 _2215 = floatBitsToUint(cbLight._m0[_2141 + 12u]);
    bool _2217 = _2215.x == 0u;
    float _2228;
    float _2230;
    float _2232;
    if (_2217)
    {
        _2228 = _2209;
        _2230 = _2210;
        _2232 = _2211;
    }
    else
    {
        uint _2236 = _2141 + 6u;
        float _2252 = (dot(vec3(cbLight._m0[_2141 + 2u].xyz), vec3(_876, _877, _878)) * 0.5) + 0.5;
        float _2253 = _2252 * _2252;
        float _4480 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
        float _2254 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _2255 = isnan(1.0) ? _2156 : (isnan(_2156) ? 1.0 : min(_2156, 1.0));
        _2228 = (((cbLight._m0[_2236].x * 0.3183098733425140380859375) * _2254) * _2255) + _2209;
        _2230 = (((cbLight._m0[_2236].y * 0.3183098733425140380859375) * _2254) * _2255) + _2210;
        _2232 = (((cbLight._m0[_2236].z * 0.3183098733425140380859375) * _2254) * _2255) + _2211;
    }
    bool _2235 = _2215.y == 0u;
    float _2273;
    float _2275;
    float _2277;
    if (_2235)
    {
        _2273 = _2228;
        _2275 = _2230;
        _2277 = _2232;
    }
    else
    {
        uint _2446 = _2141 + 7u;
        float _2462 = (dot(vec3(cbLight._m0[_2141 + 3u].xyz), vec3(_876, _877, _878)) * 0.5) + 0.5;
        float _2463 = _2462 * _2462;
        float _4496 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        float _2464 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
        float _2465 = isnan(1.0) ? _2157 : (isnan(_2157) ? 1.0 : min(_2157, 1.0));
        _2273 = (((cbLight._m0[_2446].x * 0.3183098733425140380859375) * _2464) * _2465) + _2228;
        _2275 = (((cbLight._m0[_2446].y * 0.3183098733425140380859375) * _2464) * _2465) + _2230;
        _2277 = (((cbLight._m0[_2446].z * 0.3183098733425140380859375) * _2464) * _2465) + _2232;
    }
    uint _2280 = _2141 + 8u;
    float _2293 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2141].w)) * _879) * 0.949999988079071044921875);
    float _2294 = _2293 * _2293;
    float _2295 = cbLight._m0[_2141].x + _956;
    float _2296 = cbLight._m0[_2141].y + _957;
    float _2297 = cbLight._m0[_2141].z + _958;
    float _2301 = inversesqrt(dot(vec3(_2295, _2296, _2297), vec3(_2295, _2296, _2297)));
    float _2302 = _2301 * _2295;
    float _2303 = _2301 * _2296;
    float _2304 = _2301 * _2297;
    float _2305 = dot(vec3(_876, _877, _878), vec3(cbLight._m0[_2141].xyz));
    float _4512 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2308 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
    float _4523 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
    float _2309 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
    float _2310 = dot(vec3(_876, _877, _878), vec3(_2302, _2303, _2304));
    float _4534 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2313 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
    float _2314 = dot(vec3(cbLight._m0[_2141].xyz), vec3(_2302, _2303, _2304));
    float _4545 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _2318 = _2294 * _2294;
    float _2322 = ((_2313 * _2313) * (_2318 + (-1.0))) + 1.0;
    float _2330 = exp2(log2(1.0 - (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0)))) * 5.0);
    float _2331 = 0.959999978542327880859375 - _1035;
    float _2333 = 0.959999978542327880859375 - _1036;
    float _2334 = 0.959999978542327880859375 - _1037;
    float _2341 = 1.0 - _2294;
    float _2352 = (0.5 / (((_2309 * ((_2308 * _2341) + _2294)) + 9.9999999392252902907785028219223e-09) + (((_2309 * _2341) + _2294) * _2308))) * _2308;
    float _4556 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2354 = (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (_2318 / ((_2322 * _2322) * 3.141590118408203125));
    uint _2368 = _2141 + 9u;
    float _2379 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2181].w)) * _879) * 0.949999988079071044921875);
    float _2380 = _2379 * _2379;
    float _2381 = cbLight._m0[_2181].x + _956;
    float _2382 = cbLight._m0[_2181].y + _957;
    float _2383 = cbLight._m0[_2181].z + _958;
    float _2387 = inversesqrt(dot(vec3(_2381, _2382, _2383), vec3(_2381, _2382, _2383)));
    float _2388 = _2387 * _2381;
    float _2389 = _2387 * _2382;
    float _2390 = _2387 * _2383;
    float _2391 = dot(vec3(_876, _877, _878), vec3(cbLight._m0[_2181].xyz));
    float _4567 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2394 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
    float _2395 = dot(vec3(_876, _877, _878), vec3(_2388, _2389, _2390));
    float _4578 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
    float _2398 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
    float _2399 = dot(vec3(cbLight._m0[_2181].xyz), vec3(_2388, _2389, _2390));
    float _4589 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
    float _2403 = _2380 * _2380;
    float _2407 = ((_2398 * _2398) * (_2403 + (-1.0))) + 1.0;
    float _2414 = exp2(log2(1.0 - (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0)))) * 5.0);
    float _2421 = 1.0 - _2380;
    float _2431 = (0.5 / (((_2309 * ((_2394 * _2421) + _2380)) + 9.9999999392252902907785028219223e-09) + (((_2309 * _2421) + _2380) * _2394))) * _2394;
    float _4600 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
    float _2433 = (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (_2403 / ((_2407 * _2407) * 3.141590118408203125));
    float _2443 = (((((_2414 * _2331) + _1038) * cbLight._m0[_2368].x) * _2433) * _2164) + ((((cbLight._m0[_2280].x * _2133) * ((_2330 * _2331) + _1038)) * _2354) * _2177);
    float _2444 = (((((_2414 * _2333) + _1040) * cbLight._m0[_2368].y) * _2433) * _2164) + ((((cbLight._m0[_2280].y * _2134) * ((_2330 * _2333) + _1040)) * _2354) * _2177);
    float _2445 = (((((_2414 * _2334) + _1041) * cbLight._m0[_2368].z) * _2433) * _2164) + ((((cbLight._m0[_2280].z * _2135) * ((_2330 * _2334) + _1041)) * _2354) * _2177);
    float _2507;
    float _2509;
    float _2511;
    if (_2217)
    {
        _2507 = _2443;
        _2509 = _2444;
        _2511 = _2445;
    }
    else
    {
        uint _2513 = _2141 + 2u;
        uint _2517 = _2141 + 10u;
        float _2531 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2513].w)) * _879) * 0.949999988079071044921875);
        float _2532 = _2531 * _2531;
        float _2533 = cbLight._m0[_2513].x + _956;
        float _2534 = cbLight._m0[_2513].y + _957;
        float _2535 = cbLight._m0[_2513].z + _958;
        float _2539 = inversesqrt(dot(vec3(_2533, _2534, _2535), vec3(_2533, _2534, _2535)));
        float _2540 = _2539 * _2533;
        float _2541 = _2539 * _2534;
        float _2542 = _2539 * _2535;
        float _2543 = dot(vec3(_876, _877, _878), vec3(cbLight._m0[_2513].xyz));
        float _4611 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2546 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
        float _2547 = dot(vec3(_876, _877, _878), vec3(_2540, _2541, _2542));
        float _4622 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2550 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
        float _2551 = dot(vec3(cbLight._m0[_2513].xyz), vec3(_2540, _2541, _2542));
        float _4633 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
        float _2555 = _2532 * _2532;
        float _2559 = ((_2550 * _2550) * (_2555 + (-1.0))) + 1.0;
        float _2566 = exp2(log2(1.0 - (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0)))) * 5.0);
        float _2573 = 1.0 - _2532;
        float _2583 = (0.5 / (((_2309 * ((_2546 * _2573) + _2532)) + 9.9999999392252902907785028219223e-09) + (((_2309 * _2573) + _2532) * _2546))) * _2546;
        float _4644 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
        float _2585 = (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * (_2555 / ((_2559 * _2559) * 3.141590118408203125));
        float _2586 = isnan(1.0) ? _2156 : (isnan(_2156) ? 1.0 : min(_2156, 1.0));
        _2507 = (((((_2566 * _2331) + _1038) * cbLight._m0[_2517].x) * _2585) * _2586) + _2443;
        _2509 = (((((_2566 * _2333) + _1040) * cbLight._m0[_2517].y) * _2585) * _2586) + _2444;
        _2511 = (((((_2566 * _2334) + _1041) * cbLight._m0[_2517].z) * _2585) * _2586) + _2445;
    }
    float _2621;
    float _2623;
    float _2625;
    if (_2235)
    {
        _2621 = _2507;
        _2623 = _2509;
        _2625 = _2511;
    }
    else
    {
        uint _2632 = _2141 + 3u;
        uint _2636 = _2141 + 11u;
        float _2650 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2632].w)) * _879) * 0.949999988079071044921875);
        float _2651 = _2650 * _2650;
        float _2652 = cbLight._m0[_2632].x + _956;
        float _2653 = cbLight._m0[_2632].y + _957;
        float _2654 = cbLight._m0[_2632].z + _958;
        float _2658 = inversesqrt(dot(vec3(_2652, _2653, _2654), vec3(_2652, _2653, _2654)));
        float _2659 = _2658 * _2652;
        float _2660 = _2658 * _2653;
        float _2661 = _2658 * _2654;
        float _2662 = dot(vec3(_876, _877, _878), vec3(cbLight._m0[_2632].xyz));
        float _4660 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
        float _2665 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
        float _2666 = dot(vec3(_876, _877, _878), vec3(_2659, _2660, _2661));
        float _4671 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
        float _2669 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
        float _2670 = dot(vec3(cbLight._m0[_2632].xyz), vec3(_2659, _2660, _2661));
        float _4682 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        float _2674 = _2651 * _2651;
        float _2678 = ((_2669 * _2669) * (_2674 + (-1.0))) + 1.0;
        float _2685 = exp2(log2(1.0 - (isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0)))) * 5.0);
        float _2692 = 1.0 - _2651;
        float _2702 = (0.5 / (((_2309 * ((_2665 * _2692) + _2651)) + 9.9999999392252902907785028219223e-09) + (((_2309 * _2692) + _2651) * _2665))) * _2665;
        float _4693 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
        float _2704 = (isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0))) * (_2674 / ((_2678 * _2678) * 3.141590118408203125));
        float _2705 = isnan(1.0) ? _2157 : (isnan(_2157) ? 1.0 : min(_2157, 1.0));
        _2621 = (((((_2685 * _2331) + _1038) * cbLight._m0[_2636].x) * _2704) * _2705) + _2507;
        _2623 = (((((_2685 * _2333) + _1040) * cbLight._m0[_2636].y) * _2704) * _2705) + _2509;
        _2625 = (((((_2685 * _2334) + _1041) * cbLight._m0[_2636].z) * _2704) * _2705) + _2511;
    }
    float _2840;
    float _2842;
    float _2844;
    float _2846;
    float _2848;
    float _2850;
    if (_2139.y == 0u)
    {
        float _2780 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2781 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2780;
        float _2782 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2780;
        float _2783 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2780;
        uvec4 _2795 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2796 = _2795.x;
        uint _2807 = uint((float(_2795.y) * floor(float(uint(cbSceneParam._m0[85u].y * _977) / _2796))) + floor(float(uint(cbSceneParam._m0[85u].x * _976) / _2796)));
        float _2817 = (log2(_2783 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2818 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
        uint _2821 = uint(isnan(14.0) ? _2818 : (isnan(_2818) ? 14.0 : min(_2818, 14.0)));
        uvec4 _2826 = texelFetch(g_lightClusterGridBuffer, int(((_2821 << 2u) + (_2807 << 6u)) >> 2u));
        uint _2827 = _2826.x;
        uint _2828 = _2795.z;
        float _2928;
        float _2930;
        float _2932;
        float _2934;
        float _2936;
        float _2938;
        if (((((1u << ((_2828 >> 4u) & 15u)) + 4294967295u) & _2827) == 0u) || ((_2828 & 240u) == 0u))
        {
            _2928 = 0.0;
            _2930 = 0.0;
            _2932 = 0.0;
            _2934 = 0.0;
            _2936 = 0.0;
            _2938 = 0.0;
        }
        else
        {
            float _2929;
            float _2931;
            float _2933;
            float _2935;
            float _2937;
            float _2939;
            float _3081 = 0.0;
            float _3082 = 0.0;
            float _3083 = 0.0;
            float _3084 = 0.0;
            float _3085 = 0.0;
            float _3086 = 0.0;
            uint _3087 = 0u;
            uint _3096;
            bool _3097;
            for (;;)
            {
                _3096 = texelFetch(g_lightClassification, int((((_2821 << 5u) + (_2807 << 9u)) + (_3087 << 2u)) >> 2u)).x;
                _3097 = _3096 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3097)
                {
                    frontier_phi_66_pred = _3081;
                    frontier_phi_66_pred_1 = _3086;
                    frontier_phi_66_pred_2 = _3085;
                    frontier_phi_66_pred_3 = _3084;
                    frontier_phi_66_pred_4 = _3083;
                    frontier_phi_66_pred_5 = _3082;
                }
                else
                {
                    float _3226;
                    float _3227;
                    float _3228;
                    float _3229;
                    float _3230;
                    float _3231;
                    uint _3232;
                    _3226 = _3081;
                    _3227 = _3082;
                    _3228 = _3083;
                    _3229 = _3084;
                    _3230 = _3085;
                    _3231 = _3086;
                    _3232 = _3096;
                    float _3153;
                    float _3154;
                    float _3155;
                    float _3156;
                    float _3157;
                    float _3158;
                    for (;;)
                    {
                        uint _3236 = uint(findLSB(_3232)) + (_3087 << 5u);
                        uint _3233 = (_3232 + 4294967295u) & _3232;
                        uint _3238 = _3236 * 48u;
                        vec4 _3252 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3238)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 3u)).x));
                        uint _3258 = (_3236 * 48u) + 4u;
                        vec4 _3271 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3258)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 3u)).x));
                        uint _3277 = (_3236 * 48u) + 8u;
                        vec3 _3288 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3277)).x, texelFetch(g_PointLightRenderingBuffer, int(_3277 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3277 + 2u)).x));
                        float _3292 = _3252.x - _2781;
                        float _3293 = _3252.y - _2782;
                        float _3294 = _3252.z - _2783;
                        float _3295 = dot(vec3(_3292, _3293, _3294), vec3(_3292, _3293, _3294));
                        float _3298 = inversesqrt(_3295);
                        float _3299 = _3298 * _3292;
                        float _3300 = _3298 * _3293;
                        float _3301 = _3298 * _3294;
                        float _3302 = dot(vec3(_995, _998, _1001), vec3(_3299, _3300, _3301));
                        float _3307 = 1.0 - (_3295 * _3252.w);
                        float _4719 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                        float _3308 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                        float _3309 = sqrt(_3295) * _3271.w;
                        float _3312 = 1.39999997615814208984375 / (_3309 + 1.39999997615814208984375);
                        float _3313 = _3312 * _3312;
                        float _3316 = ((1.0 - _3313) * _3302) + _3313;
                        float _3319 = _3309 * _3309;
                        float _3323 = ((isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0))) * _3308) / ((_3319 * 0.699999988079071044921875) + 1.0);
                        float _3327 = (-0.0) - _2781;
                        float _3328 = (-0.0) - _2782;
                        float _3329 = (-0.0) - _2783;
                        float _3333 = inversesqrt(dot(vec3(_3327, _3328, _3329), vec3(_3327, _3328, _3329)));
                        float _3334 = _3333 * _3327;
                        float _3335 = _3333 * _3328;
                        float _3336 = _3333 * _3329;
                        float _3344 = exp2(log2(1.0 / ((_3319 * 3.5) + 5.0)) * 0.25);
                        float _3345 = 1.0 - _1070;
                        float _3352 = sqrt(1.0 - ((1.0 - (_3345 * _3345)) * (1.0 - (_3344 * _3344))));
                        float _3353 = _3352 * _3352;
                        float _3354 = _3353 * _3353;
                        float _3355 = _3334 + _3299;
                        float _3356 = _3335 + _3300;
                        float _3357 = _3336 + _3301;
                        float _3361 = inversesqrt(dot(vec3(_3355, _3356, _3357), vec3(_3355, _3356, _3357)));
                        float _3365 = dot(vec3(_995, _998, _1001), vec3(_3334, _3335, _3336));
                        float _4735 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                        float _3368 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
                        float _3369 = dot(vec3(_995, _998, _1001), vec3(_3361 * _3355, _3361 * _3356, _3361 * _3357));
                        float _4746 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                        float _3372 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
                        float _3376 = ((_3372 * _3372) * (_3354 + (-1.0))) + 1.0;
                        float _3377 = _3312 * _3353;
                        float _3378 = _3377 * _3377;
                        float _3381 = ((1.0 - _3378) * _3302) + _3378;
                        float _4757 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                        float _3382 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
                        float _3383 = 1.0 - _3353;
                        float _3393 = (0.5 / (((_3382 * ((_3368 * _3383) + _3353)) + 9.9999999392252902907785028219223e-09) + (((_3382 * _3383) + _3353) * _3368))) * _3382;
                        float _4768 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                        float _3404 = (((_3354 * 3.1415927410125732421875) * (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0)))) / ((_3376 * _3376) * ((_3319 * 2.1991131305694580078125) + 3.141590118408203125))) * _3308;
                        _3156 = (_3323 * _3271.x) + _3229;
                        _3157 = (_3323 * _3271.y) + _3230;
                        _3158 = (_3323 * _3271.z) + _3231;
                        _3153 = (_3404 * _3288.x) + _3226;
                        _3154 = (_3404 * _3288.y) + _3227;
                        _3155 = (_3404 * _3288.z) + _3228;
                        if (_3233 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3226 = _3153;
                            _3227 = _3154;
                            _3228 = _3155;
                            _3229 = _3156;
                            _3230 = _3157;
                            _3231 = _3158;
                            _3232 = _3233;
                        }
                    }
                    frontier_phi_66_pred = _3153;
                    frontier_phi_66_pred_1 = _3158;
                    frontier_phi_66_pred_2 = _3157;
                    frontier_phi_66_pred_3 = _3156;
                    frontier_phi_66_pred_4 = _3155;
                    frontier_phi_66_pred_5 = _3154;
                }
                _2929 = frontier_phi_66_pred;
                _2939 = frontier_phi_66_pred_1;
                _2937 = frontier_phi_66_pred_2;
                _2935 = frontier_phi_66_pred_3;
                _2933 = frontier_phi_66_pred_4;
                _2931 = frontier_phi_66_pred_5;
                uint _3088 = _3087 + 1u;
                if (_3088 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3081 = _2929;
                    _3082 = _2931;
                    _3083 = _2933;
                    _3084 = _2935;
                    _3085 = _2937;
                    _3086 = _2939;
                    _3087 = _3088;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2928 = _2929;
            _2930 = _2931;
            _2932 = _2933;
            _2934 = _2935;
            _2936 = _2937;
            _2938 = _2939;
        }
        uvec4 _2942 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2943 = _2942.z;
        uint _2945 = (_2943 >> 8u) & 15u;
        float _3049;
        float _3051;
        float _3053;
        float _3055;
        float _3057;
        float _3059;
        if (((4294967295u << _2945) & _2827) == 0u)
        {
            _3049 = _2928;
            _3051 = _2930;
            _3053 = _2932;
            _3055 = _2934;
            _3057 = _2936;
            _3059 = _2938;
        }
        else
        {
            float _3074 = inversesqrt(dot(vec3(_2781, _2782, _2783), vec3(_2781, _2782, _2783)));
            float _3075 = _3074 * _2781;
            float _3076 = _3074 * _2782;
            float _3077 = _3074 * _2783;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2945 < ((_2943 >> 12u) & 15u))
            {
                float _3050;
                float _3052;
                float _3054;
                float _3056;
                float _3058;
                float _3060;
                float _3209 = _2928;
                float _3210 = _2930;
                float _3211 = _2932;
                float _3212 = _2934;
                float _3213 = _2936;
                float _3214 = _2938;
                uint _3215 = _2945;
                uint _3224;
                bool _3225;
                for (;;)
                {
                    _3224 = texelFetch(g_lightClassification, int((((_2821 << 5u) + (_2807 << 9u)) + (_3215 << 2u)) >> 2u)).x;
                    _3225 = _3224 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3225)
                    {
                        frontier_phi_77_pred = _3214;
                        frontier_phi_77_pred_1 = _3213;
                        frontier_phi_77_pred_2 = _3212;
                        frontier_phi_77_pred_3 = _3211;
                        frontier_phi_77_pred_4 = _3210;
                        frontier_phi_77_pred_5 = _3209;
                    }
                    else
                    {
                        float _3418;
                        float _3419;
                        float _3420;
                        float _3421;
                        float _3422;
                        float _3423;
                        float _3711;
                        float _3712;
                        float _3713;
                        float _3714;
                        float _3715;
                        float _3716;
                        float _3431 = _3209;
                        float _3432 = _3210;
                        float _3433 = _3211;
                        float _3434 = _3212;
                        float _3435 = _3213;
                        float _3436 = _3214;
                        uint _3437 = _3224;
                        uint _3438;
                        vec4 _3463;
                        float _3464;
                        vec4 _3479;
                        vec3 _3491;
                        vec4 _3506;
                        vec4 _3521;
                        float _3567;
                        bool _3568;
                        for (;;)
                        {
                            uint _3448 = ((_3215 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3437));
                            _3438 = (_3437 + 4294967295u) & _3437;
                            uint _3450 = _3448 * 40u;
                            _3463 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3450)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 3u)).x));
                            _3464 = _3463.w;
                            uint _3466 = (_3448 * 40u) + 4u;
                            _3479 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3466)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 3u)).x));
                            uint _3481 = (_3448 * 40u) + 8u;
                            _3491 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3481)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 2u)).x));
                            uint _3493 = (_3448 * 40u) + 16u;
                            _3506 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3493)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 3u)).x));
                            uint _3508 = (_3448 * 40u) + 20u;
                            _3521 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3508)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 3u)).x));
                            uint _3523 = (_3448 * 40u) + 24u;
                            vec4 _3536 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3523)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 3u)).x));
                            uint _3542 = (_3448 * 40u) + 28u;
                            vec4 _3555 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3542)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 3u)).x));
                            _3567 = fma(_2783, _3555.z, fma(_2782, _3555.y, _3555.x * _2781)) + _3555.w;
                            _3568 = !((fma(_2783, _3536.z, fma(_2782, _3536.y, _3536.x * _2781)) + _3536.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3568)
                            {
                                float _3595 = _3463.x - _2781;
                                float _3596 = _3463.y - _2782;
                                float _3597 = _3463.z - _2783;
                                float _3598 = dot(vec3(_3595, _3596, _3597), vec3(_3595, _3596, _3597));
                                float _3601 = inversesqrt(_3598);
                                float _3602 = _3601 * _3595;
                                float _3603 = _3601 * _3596;
                                float _3604 = _3601 * _3597;
                                float _3608 = 1.0 - (_3598 / (_3464 * _3464));
                                float _4779 = isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0));
                                float _3609 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
                                float _3613 = sqrt(_3598) * _3479.w;
                                float _3615 = 1.39999997615814208984375 / (_3613 + 1.39999997615814208984375);
                                float _3616 = _3615 * _3615;
                                float _3619 = ((1.0 - _3616) * dot(vec3(_3602, _3603, _3604), vec3(_995, _998, _1001))) + _3616;
                                float _3622 = _3613 * _3613;
                                float _3626 = (fma(_2783, _3506.z, fma(_2782, _3506.y, _3506.x * _2781)) + _3506.w) / _3567;
                                float _3627 = (fma(_2783, _3521.z, fma(_2782, _3521.y, _3521.x * _2781)) + _3521.w) / _3567;
                                float _3631 = 1.0 - dot(vec2(_3626, _3627), vec2(_3626, _3627));
                                float _4795 = isnan(0.0) ? _3631 : (isnan(_3631) ? 0.0 : max(_3631, 0.0));
                                float _3632 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
                                float _3633 = _3632 * (((isnan(0.0) ? _3619 : (isnan(_3619) ? 0.0 : max(_3619, 0.0))) * _3609) / ((_3622 * 0.699999988079071044921875) + 1.0));
                                float _3645 = exp2(log2(1.0 / ((_3622 * 3.5) + 5.0)) * 0.25);
                                float _3646 = 1.0 - _1070;
                                float _3653 = sqrt(1.0 - ((1.0 - (_3646 * _3646)) * (1.0 - (_3645 * _3645))));
                                float _3654 = _3653 * _3653;
                                float _3655 = _3654 * _3654;
                                float _3656 = _3602 - _3075;
                                float _3657 = _3603 - _3076;
                                float _3658 = _3604 - _3077;
                                float _3662 = inversesqrt(dot(vec3(_3656, _3657, _3658), vec3(_3656, _3657, _3658)));
                                float _3666 = dot(vec3(_995, _998, _1001), vec3((-0.0) - _3075, (-0.0) - _3076, (-0.0) - _3077));
                                float _4806 = isnan(0.0) ? _3666 : (isnan(_3666) ? 0.0 : max(_3666, 0.0));
                                float _3669 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
                                float _3670 = dot(vec3(_995, _998, _1001), vec3(_3662 * _3656, _3662 * _3657, _3662 * _3658));
                                float _4817 = isnan(0.0) ? _3670 : (isnan(_3670) ? 0.0 : max(_3670, 0.0));
                                float _3673 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
                                float _3677 = ((_3673 * _3673) * (_3655 + (-1.0))) + 1.0;
                                float _3678 = _3615 * _3654;
                                float _3679 = _3678 * _3678;
                                float _3685 = ((1.0 - _3679) * dot(vec3(_995, _998, _1001), vec3(_3602, _3603, _3604))) + _3679;
                                float _4828 = isnan(0.0) ? _3685 : (isnan(_3685) ? 0.0 : max(_3685, 0.0));
                                float _3686 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
                                float _3687 = 1.0 - _3654;
                                float _3697 = (0.5 / (((_3686 * ((_3669 * _3687) + _3654)) + 9.9999999392252902907785028219223e-09) + (((_3686 * _3687) + _3654) * _3669))) * _3686;
                                float _4839 = isnan(0.0) ? _3697 : (isnan(_3697) ? 0.0 : max(_3697, 0.0));
                                float _3707 = (_3632 * _3609) * (((_3655 * 3.1415927410125732421875) * (isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0)))) / ((_3677 * _3677) * ((_3622 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3633 * _3479.y;
                                frontier_phi_83_pred_1 = _3633 * _3479.x;
                                frontier_phi_83_pred_2 = _3707 * _3491.z;
                                frontier_phi_83_pred_3 = _3707 * _3491.y;
                                frontier_phi_83_pred_4 = _3707 * _3491.x;
                                frontier_phi_83_pred_5 = _3633 * _3479.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3715 = frontier_phi_83_pred;
                            _3714 = frontier_phi_83_pred_1;
                            _3713 = frontier_phi_83_pred_2;
                            _3712 = frontier_phi_83_pred_3;
                            _3711 = frontier_phi_83_pred_4;
                            _3716 = frontier_phi_83_pred_5;
                            _3421 = _3714 + _3434;
                            _3422 = _3715 + _3435;
                            _3423 = _3716 + _3436;
                            _3418 = _3711 + _3431;
                            _3419 = _3712 + _3432;
                            _3420 = _3713 + _3433;
                            if (_3438 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3431 = _3418;
                                _3432 = _3419;
                                _3433 = _3420;
                                _3434 = _3421;
                                _3435 = _3422;
                                _3436 = _3423;
                                _3437 = _3438;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3423;
                        frontier_phi_77_pred_1 = _3422;
                        frontier_phi_77_pred_2 = _3421;
                        frontier_phi_77_pred_3 = _3420;
                        frontier_phi_77_pred_4 = _3419;
                        frontier_phi_77_pred_5 = _3418;
                    }
                    _3060 = frontier_phi_77_pred;
                    _3058 = frontier_phi_77_pred_1;
                    _3056 = frontier_phi_77_pred_2;
                    _3054 = frontier_phi_77_pred_3;
                    _3052 = frontier_phi_77_pred_4;
                    _3050 = frontier_phi_77_pred_5;
                    uint _3216 = _3215 + 1u;
                    if (_3216 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3209 = _3050;
                        _3210 = _3052;
                        _3211 = _3054;
                        _3212 = _3056;
                        _3213 = _3058;
                        _3214 = _3060;
                        _3215 = _3216;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3054;
                frontier_phi_58_59_ladder_1 = _3060;
                frontier_phi_58_59_ladder_2 = _3058;
                frontier_phi_58_59_ladder_3 = _3056;
                frontier_phi_58_59_ladder_4 = _3052;
                frontier_phi_58_59_ladder_5 = _3050;
            }
            else
            {
                frontier_phi_58_59_ladder = _2932;
                frontier_phi_58_59_ladder_1 = _2938;
                frontier_phi_58_59_ladder_2 = _2936;
                frontier_phi_58_59_ladder_3 = _2934;
                frontier_phi_58_59_ladder_4 = _2930;
                frontier_phi_58_59_ladder_5 = _2928;
            }
            _3049 = frontier_phi_58_59_ladder_5;
            _3051 = frontier_phi_58_59_ladder_4;
            _3053 = frontier_phi_58_59_ladder;
            _3055 = frontier_phi_58_59_ladder_3;
            _3057 = frontier_phi_58_59_ladder_2;
            _3059 = frontier_phi_58_59_ladder_1;
        }
        float _3064 = isnan(1.0) ? _1054 : (isnan(_1054) ? 1.0 : min(_1054, 1.0));
        _2840 = (_3064 * _3055) + _2273;
        _2842 = (_3064 * _3057) + _2275;
        _2844 = (_3064 * _3059) + _2277;
        _2846 = ((_3049 * _1038) * _3064) + _2621;
        _2848 = ((_3051 * _1040) * _3064) + _2623;
        _2850 = ((_3053 * _1041) * _3064) + _2625;
    }
    else
    {
        _2840 = _2273;
        _2842 = _2275;
        _2844 = _2277;
        _2846 = _2621;
        _2848 = _2623;
        _2850 = _2625;
    }
    float _4855 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
    float _4866 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _4877 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _2867 = ((isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0))) * (_2840 + ((isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))) * _1054))) + ((_2846 + ((isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0))) * _1892)) * cbPerFrame._m0[3u].x);
    float _2868 = ((isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0))) * (_2842 + ((isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))) * _1054))) + ((_2848 + ((isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0))) * _1892)) * cbPerFrame._m0[3u].x);
    float _2869 = ((isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0))) * (_2844 + ((isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))) * _1054))) + ((_2850 + ((isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0))) * _1892)) * cbPerFrame._m0[3u].x);
    uint _2870 = _282 + 6u;
    float _2878 = _976 / cbSceneParam._m0[86u].x;
    float _2879 = _977 / cbSceneParam._m0[86u].y;
    vec4 _2893 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2878, _2879, (log2((isnan(cbSceneParam._m0[77u].w) ? _898 : (isnan(_898) ? cbSceneParam._m0[77u].w : min(_898, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2895 = _2893.x;
    float _2896 = _2893.y;
    float _2897 = _2893.z;
    float _2898 = _2893.w;
    float _2991;
    float _2993;
    float _2995;
    float _2997;
    if (_898 > cbSceneParam._m0[78u].w)
    {
        float _2953 = isnan(_898) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _898 : min(cbSceneParam._m0[80u].w, _898));
        float _2954 = _2953 / _898;
        float _2965 = _2954 * _949;
        float _2966 = _950 * _2954;
        float _2967 = (-0.0) - _2966;
        float _2969 = _2954 * _951;
        float _2971 = (cbSceneParam._m0[77u].w * _2967) / _2953;
        float _2972 = _2971 + cbSceneParam._m0[79u].w;
        float _2973 = cbSceneParam._m0[79u].w - _2966;
        float _2979 = sqrt(((_2965 * _2965) + (_2966 * _2966)) + (_2969 * _2969));
        float _2982 = (1.0 - (cbSceneParam._m0[77u].w / _2953)) * _2979;
        float _2987 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2989 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3166;
        if (abs((_2967 - _2971) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3166 = ((((_2972 > 0.0) ? exp2(_2987 * _2972) : (2.0 - exp2(_2989 * _2972))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2982;
        }
        else
        {
            float _3110 = 1.0 / cbSceneParam._m0[80u].x;
            float _3111 = isnan(_2973) ? _2972 : (isnan(_2972) ? _2973 : max(_2972, _2973));
            float _3112 = isnan(_2973) ? _2972 : (isnan(_2972) ? _2973 : min(_2972, _2973));
            float _3121 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : min(_3111, 0.0));
            float _3122 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : min(_3112, 0.0));
            _3166 = ((abs(_2979 / _2967) * cbSceneParam._m0[80u].y) * ((((_3121 - _3122) * 2.0) - ((exp2(_2987 * (isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0)))) - exp2(_2987 * (isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0))))) * _3110)) - ((exp2(_2989 * _3121) - exp2(_2989 * _3122)) * _3110))) + (_2982 * cbSceneParam._m0[80u].z);
        }
        vec4 _3168 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2878, _2879, 1.0), 0.0);
        float _3177 = exp2((_3166 * (-1.44269502162933349609375)) * (1.0 - _3168.w));
        float _3178 = log2(_3177);
        float _3194 = log2(_2898);
        _2991 = (exp2(_3194 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3178 * cbSceneParam._m0[78u].x)) * _3168.x) / cbSceneParam._m0[78u].x)) + _2895;
        _2993 = (exp2(_3194 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3178 * cbSceneParam._m0[78u].y)) * _3168.y) / cbSceneParam._m0[78u].y)) + _2896;
        _2995 = (exp2(_3194 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3178 * cbSceneParam._m0[78u].z)) * _3168.z) / cbSceneParam._m0[78u].z)) + _2897;
        _2997 = _3177 * _2898;
    }
    else
    {
        _2991 = _2895;
        _2993 = _2896;
        _2995 = _2897;
        _2997 = _2898;
    }
    bool _3204;
    vec4 _3007;
    vec4 _3029;
    float _3031;
    float _3035;
    float _3036;
    float _3037;
    float _3038;
    bool _3048;
    for (;;)
    {
        _3007 = cbMatDynParam._m0[0u];
        float _3009 = roundEven(_3007.y);
        bool _3010 = _3009 == 3.0;
        float _3011 = log2(_2997);
        float _3018 = exp2(_3011 * cbSceneParam._m0[78u].x) * _2867;
        float _3019 = exp2(_3011 * cbSceneParam._m0[78u].y) * _2868;
        float _3020 = exp2(_3011 * cbSceneParam._m0[78u].z) * _2869;
        float _3027 = _965 + (-0.5);
        _3029 = cbMtdParam._m0[1u];
        _3031 = _3029.y * _3027;
        float _3034 = (_3009 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3035 = _3034 * (_3010 ? _3018 : (_3018 + (cbSceneParam._m0[72u].w * _2991)));
        _3036 = _3034 * (_3010 ? _3019 : (_3019 + (cbSceneParam._m0[72u].w * _2993)));
        _3037 = _3034 * (_3010 ? _3020 : (_3020 + (cbSceneParam._m0[72u].w * _2995)));
        _3038 = _3027 * 0.999000012874603271484375;
        _3048 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3048)
        {
            if ((cbInstanceData._m0[_282 + 7u].x + _3038) < 0.5)
            {
                _3204 = true;
                break;
            }
        }
        uint _3145 = _1014 + uint(_3007.w);
        if ((cbInstanceData._m0[_3145].w < 1.0) && ((cbInstanceData._m0[_3145].w + _3038) < 0.5))
        {
            _3204 = true;
            break;
        }
        if ((_3031 + 1.0) < _3029.x)
        {
            _3204 = true;
            break;
        }
        _3204 = false;
        break;
    }
    float _3409;
    if (_3204)
    {
        discard_state = true;
        _3409 = 0.0;
    }
    else
    {
        _3409 = cbInstanceData._m0[_2870].w;
    }
    SV_Target.x = _3035;
    SV_Target.y = _3036;
    SV_Target.z = _3037;
    SV_Target.w = _3409;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2870].w;
    discard_exit();
}


