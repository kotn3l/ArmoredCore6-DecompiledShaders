#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1397;
float _3776;
float _3777;
float _3778;
float _3779;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _261 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _261 + 1u;
    uint _270 = _261 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _307 = _301.x * cbMtdParam._m0[11u].x;
    float _308 = _301.y * cbMtdParam._m0[11u].y;
    float _309 = _301.z * cbMtdParam._m0[11u].z;
    vec4 _328 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _280) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    vec4 _366 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _368 = _366.x;
    float _380 = dot(vec4(_368, _366.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _397 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_368 - _380) * cbMtdParam._m0[24u].y) + _380) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3788 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _398 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    float _405 = (_398 * ((_328.x * cbMtdParam._m0[12u].x) - _307)) + _307;
    float _406 = (_398 * ((_328.y * cbMtdParam._m0[12u].y) - _308)) + _308;
    float _407 = (_398 * ((_328.z * cbMtdParam._m0[12u].z) - _309)) + _309;
    vec4 _426 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _280) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _281) + cbTextureTilingScale._m0[14u].w));
    vec4 _446 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _280) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _281) + cbTextureTilingScale._m0[20u].w));
    vec4 _471 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    vec4 _488 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _490 = _488.x;
    float _491 = _488.y;
    float _492 = _488.z;
    float _501 = ((_471.z - _492) * _398) + _492;
    float _504 = ((((_471.x - _490) * _398) + _490) * 2.0) + (-1.0);
    float _505 = ((((_471.y - _491) * _398) + _491) * 2.0) + (-1.0);
    float _506 = dot(vec2(_504, _505), vec2(_504, _505));
    float _3799 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _511 = sqrt(1.0 - (isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))));
    vec4 _527 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _552 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _280) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _281) + cbTextureTilingScale._m0[11u].w));
    float _554 = _552.x;
    float _555 = 1.0 - _554;
    float _561 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _564 = ((isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : min(_561, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _573 = (_564 - ((((((_554 - _555) * cbMtdParam._m0[24u].z) + _555) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _564))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3820 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _574 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _581 = (_574 * ((_426.x * cbMtdParam._m0[18u].x) - _405)) + _405;
    float _582 = (_574 * ((_426.y * cbMtdParam._m0[18u].y) - _406)) + _406;
    float _583 = (_574 * ((_426.z * cbMtdParam._m0[18u].z) - _407)) + _407;
    vec4 _595 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _280) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _281) + cbTextureTilingScale._m0[19u].w));
    float _597 = _595.x;
    float _598 = 1.0 - _597;
    float _625 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_597 - _598) * cbMtdParam._m0[24u].w) + _598) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3831 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _626 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _634 = ((((cbMtdParam._m0[10u].x - _581) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _626) + _581;
    float _635 = ((((cbMtdParam._m0[10u].y - _582) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _626) + _582;
    float _636 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _583)) * _626) + _583;
    vec4 _648 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _662 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _664 = _662.x;
    float _682 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _280) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _281) + cbTextureTilingScale._m0[9u].w)).x - _664) * _398) + _664;
    float _686 = ((_648.x - _682) * cbMtdParam._m0[19u].z) + _682;
    float _688 = _686 - (_686 * _574);
    float _690 = _688 - (_688 * _626);
    float _695 = (((_446.z - _501) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _501;
    float _699 = ((_527.z - _695) * cbMtdParam._m0[19u].w) + _695;
    vec4 _713 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _280) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _281) + cbTextureTilingScale._m0[15u].w));
    float _720 = (_713.x * 2.0) + (-1.0);
    float _721 = (_713.y * 2.0) + (-1.0);
    float _722 = dot(vec2(_720, _721), vec2(_720, _721));
    float _3842 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _730 = (_574 * (_713.z - _699)) + _699;
    float _733 = ((cbMtdParam._m0[23u].y - _730) * _626) + _730;
    vec4 _752 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _280) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _281) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _758 = (_752.x * 2.0) + (-1.0);
    float _759 = (_752.y * 2.0) + (-1.0);
    float _760 = dot(vec2(_758, _759), vec2(_758, _759));
    float _3853 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _774 = (_504 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_446.x * 2.0) + (-1.0)))) + (((_527.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _775 = (_505 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_446.y * 2.0) + (-1.0)))) + (((_527.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _787 = (((_720 - _774) + (cbMtdParam._m0[21u].x * _774)) * _574) + _774;
    float _788 = (((_721 - _775) + (cbMtdParam._m0[21u].x * _775)) * _574) + _775;
    float _789 = (_574 * (sqrt(1.0 - (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0)))) - _511)) + _511;
    float _800 = (((_758 - _787) + (_787 * cbMtdParam._m0[22u].z)) * _626) + _787;
    float _801 = (((_759 - _788) + (_788 * cbMtdParam._m0[22u].z)) * _626) + _788;
    float _802 = ((sqrt(1.0 - (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0)))) - _789) * _626) + _789;
    float _804 = cbMtdParam._m0[22u].x + _527.w;
    float _807 = fma(_802, _248 * NORMAL.x, fma(_801, _255 * TANGENT.x, (_241 * _233) * _800));
    float _810 = fma(_802, _248 * NORMAL.y, fma(_801, _255 * TANGENT.y, (_241 * _234) * _800));
    float _813 = fma(_802, _248 * NORMAL.z, fma(_801, _255 * TANGENT.z, (_241 * _235) * _800));
    float _817 = inversesqrt(dot(vec3(_807, _810, _813), vec3(_807, _810, _813)));
    float _818 = _817 * _807;
    float _819 = _817 * _810;
    float _820 = _817 * _813;
    float _3864 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _821 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
    float _3875 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _3886 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _3897 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _3908 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _3919 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _826 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _840 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _880 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _890 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _880);
    float _891 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _880);
    float _892 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _880);
    float _896 = inversesqrt(dot(vec3(_890, _891, _892), vec3(_890, _891, _892)));
    float _897 = _890 * _896;
    float _898 = _891 * _896;
    float _899 = _892 * _896;
    vec4 _904 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _906 = _904.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1078 = sqrt(((_890 * _890) + (_891 * _891)) + (_892 * _892));
        float _1084 = (cbMatDynParam._m0[5u].x * _1078) + cbMatDynParam._m0[5u].y;
        float _3930 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1089 = (cbMatDynParam._m0[5u].z * _1078) + cbMatDynParam._m0[5u].w;
        float _3941 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) - _1085)) + _1085) < ((_906 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _917 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _918 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _936 = fma(_820, cbSceneParam._m0[5u].z, fma(_819, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _818));
    float _939 = fma(_820, cbSceneParam._m0[6u].z, fma(_819, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _818));
    float _942 = fma(_820, cbSceneParam._m0[7u].z, fma(_819, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _818));
    uint _955 = _261 + 9u;
    uint _956 = _955 + uint(cbMatDynParam._m0[0u].w);
    float _962 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0)))) * cbInstanceData._m0[_956].x;
    float _963 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0)))) * cbInstanceData._m0[_956].y;
    float _964 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0)))) * cbInstanceData._m0[_956].z;
    float _3952 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _965 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _3963 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _966 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _3974 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _967 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _968 = 1.0 - _826;
    float _969 = _965 * _968;
    float _970 = _966 * _968;
    float _971 = _967 * _968;
    float _976 = (_965 + (-0.039999999105930328369140625)) * _826;
    float _977 = (_966 + (-0.039999999105930328369140625)) * _826;
    float _978 = (_967 + (-0.039999999105930328369140625)) * _826;
    float _979 = _976 + 0.039999999105930328369140625;
    float _981 = _977 + 0.039999999105930328369140625;
    float _982 = _978 + 0.039999999105930328369140625;
    vec4 _991 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _917, cbSceneParam._m0[86u].y * _918));
    float _995 = ((isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * TEXCOORD_5.w) * _991.x;
    float _996 = dot(vec3(_818, _819, _820), vec3(_897, _898, _899));
    float _999 = _996 * 2.0;
    float _1003 = (_999 * _818) - _897;
    float _1004 = (_999 * _819) - _898;
    float _1005 = (_999 * _820) - _899;
    float _1009 = abs(dot(vec3(_897, _898, _899), vec3(_818, _819, _820)));
    float _3985 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _1011 = sqrt(_821);
    float _1024 = exp2((_1011 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1011 * 3.0));
    float _1030 = (1.0 - _1024) * ((_1011 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1031 = _1024 * _1011;
    float _1059 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1063 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1067 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1396;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1121 = fma(_1067, cbModelParam._m0[26u].z, fma(_1063, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1059));
        float _1125 = fma(_1067, cbModelParam._m0[27u].z, fma(_1063, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1059));
        float _1129 = fma(_1067, cbModelParam._m0[28u].z, fma(_1063, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1059));
        float _1154 = _1059 + _818;
        float _1155 = _1063 + _819;
        float _1156 = _1067 + _820;
        float _1166 = fma(_1156, cbModelParam._m0[26u].z, fma(_1155, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1154)) - _1121;
        float _1167 = fma(_1156, cbModelParam._m0[27u].z, fma(_1155, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1154)) - _1125;
        float _1168 = fma(_1156, cbModelParam._m0[28u].z, fma(_1155, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1154)) - _1129;
        float _1172 = inversesqrt(dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168)));
        float _1185 = ((_1172 * _1166) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1121 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1186 = ((_1172 * _1167) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1125 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1187 = ((_1172 * _1168) / cbModelParam._m0[34u].z) + ((((((_1129 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        float _1224 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1190.x + (-0.5));
        float _1226 = _1224 * (_1190.y + (-0.5));
        float _1227 = _1224 * (_1190.z + (-0.5));
        float _1234 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1197.x + (-0.5));
        float _1236 = _1234 * (_1197.y + (-0.5));
        float _1237 = _1234 * (_1197.z + (-0.5));
        float _1244 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1204.x + (-0.5));
        float _1246 = _1244 * (_1204.y + (-0.5));
        float _1247 = _1244 * (_1204.z + (-0.5));
        float _1254 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1211.x + (-0.5));
        float _1256 = _1254 * (_1211.y + (-0.5));
        float _1257 = _1254 * (_1211.z + (-0.5));
        float _1258 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1259 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1260 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1261 = _1225 * 0.5;
        float _1262 = _1235 * 0.5;
        float _1263 = _1245 * 0.5;
        float _1264 = dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263));
        float _1269 = (_1264 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1264);
        float _1278 = (dot(vec3(_818, _819, _820), vec3(_1269 * _1261, _1269 * _1262, _1269 * _1263)) + 1.0) * 0.5;
        float _4011 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1288 = sqrt(((_1262 * _1262) + (_1261 * _1261)) + (_1263 * _1263)) / (_1258 + 9.9999997473787516355514526367188e-06);
        float _4022 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1290 = _1289 * 2.0;
        float _1294 = (1.0 - _1289) / (_1289 + 1.0);
        float _4033 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1304 = ((((1.0 - _1295) * (_1290 + 2.0)) * exp2(log2(isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_1290 + 1.0))) + _1295) * _1258;
        float _1305 = _1226 * 0.5;
        float _1306 = _1236 * 0.5;
        float _1307 = _1246 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1321 = (dot(vec3(_818, _819, _820), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _4044 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1330 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1259 + 9.9999997473787516355514526367188e-06);
        float _4055 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _4066 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_1332 + 1.0))) + _1337) * _1259;
        float _1347 = _1227 * 0.5;
        float _1348 = _1237 * 0.5;
        float _1349 = _1247 * 0.5;
        float _1350 = dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349));
        float _1355 = (_1350 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1350);
        float _1363 = (dot(vec3(_818, _819, _820), vec3(_1355 * _1347, _1355 * _1348, _1355 * _1349)) + 1.0) * 0.5;
        float _4077 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1372 = sqrt(((_1348 * _1348) + (_1347 * _1347)) + (_1349 * _1349)) / (_1260 + 9.9999997473787516355514526367188e-06);
        float _4088 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1374 = _1373 * 2.0;
        float _1378 = (1.0 - _1373) / (_1373 + 1.0);
        float _4099 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1388 = ((((1.0 - _1379) * (_1374 + 2.0)) * exp2(log2(isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_1374 + 1.0))) + _1379) * _1260;
        _1396 = _1227;
        _1398 = _1226;
        _1399 = _1225;
        _1400 = _1237;
        _1401 = _1236;
        _1402 = _1235;
        _1403 = _1247;
        _1404 = _1246;
        _1405 = _1245;
        _1406 = _1260;
        _1407 = _1259;
        _1408 = _1258;
        _1409 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)));
        _1410 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
        _1411 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)));
    }
    else
    {
        _1396 = _1397;
        _1398 = _1397;
        _1399 = _1397;
        _1400 = _1397;
        _1401 = _1397;
        _1402 = _1397;
        _1403 = _1397;
        _1404 = _1397;
        _1405 = _1397;
        _1406 = _1397;
        _1407 = _1397;
        _1408 = _1397;
        _1409 = 0.0;
        _1410 = 0.0;
        _1411 = 0.0;
    }
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1439 = fma(_1067, cbModelParam._m0[30u].z, fma(_1063, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1059));
        float _1443 = fma(_1067, cbModelParam._m0[31u].z, fma(_1063, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1059));
        float _1447 = fma(_1067, cbModelParam._m0[32u].z, fma(_1063, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1059));
        float _1470 = _1059 + _818;
        float _1471 = _1063 + _819;
        float _1472 = _1067 + _820;
        float _1482 = fma(_1472, cbModelParam._m0[30u].z, fma(_1471, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1470)) - _1439;
        float _1483 = fma(_1472, cbModelParam._m0[31u].z, fma(_1471, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1470)) - _1443;
        float _1484 = fma(_1472, cbModelParam._m0[32u].z, fma(_1471, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1470)) - _1447;
        float _1488 = inversesqrt(dot(vec3(_1482, _1483, _1484), vec3(_1482, _1483, _1484)));
        float _1501 = ((_1488 * _1482) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1439 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1502 = ((_1488 * _1483) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1443 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1503 = ((_1488 * _1484) / cbModelParam._m0[35u].z) + ((((((_1447 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1505 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1501, _1502, _1503), 0.0);
        vec4 _1512 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1501, _1502, _1503), 0.0);
        vec4 _1519 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1501, _1502, _1503), 0.0);
        vec4 _1526 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1501, _1502, _1503), 0.0);
        float _1538 = exp2((_1505.w + (-0.5)) * 20.0) * 2.0;
        float _1539 = _1538 * (_1505.x + (-0.5));
        float _1540 = _1538 * (_1505.y + (-0.5));
        float _1541 = _1538 * (_1505.z + (-0.5));
        float _1548 = exp2((_1512.w + (-0.5)) * 20.0) * 2.0;
        float _1549 = _1548 * (_1512.x + (-0.5));
        float _1550 = _1548 * (_1512.y + (-0.5));
        float _1551 = _1548 * (_1512.z + (-0.5));
        float _1558 = exp2((_1519.w + (-0.5)) * 20.0) * 2.0;
        float _1559 = _1558 * (_1519.x + (-0.5));
        float _1560 = _1558 * (_1519.y + (-0.5));
        float _1561 = _1558 * (_1519.z + (-0.5));
        float _1568 = exp2((_1526.w + (-0.5)) * 20.0) * 2.0;
        float _1569 = _1568 * (_1526.x + (-0.5));
        float _1570 = _1568 * (_1526.y + (-0.5));
        float _1571 = _1568 * (_1526.z + (-0.5));
        float _1572 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1573 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1574 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1575 = _1539 * 0.5;
        float _1576 = _1549 * 0.5;
        float _1577 = _1559 * 0.5;
        float _1578 = dot(vec3(_1575, _1576, _1577), vec3(_1575, _1576, _1577));
        float _1583 = (_1578 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1578);
        float _1591 = (dot(vec3(_818, _819, _820), vec3(_1583 * _1575, _1583 * _1576, _1583 * _1577)) + 1.0) * 0.5;
        float _4140 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1600 = sqrt(((_1576 * _1576) + (_1575 * _1575)) + (_1577 * _1577)) / (_1572 + 9.9999997473787516355514526367188e-06);
        float _4151 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1601 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1602 = _1601 * 2.0;
        float _1606 = (1.0 - _1601) / (_1601 + 1.0);
        float _4162 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1607 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1616 = ((((1.0 - _1607) * (_1602 + 2.0)) * exp2(log2(isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_1602 + 1.0))) + _1607) * _1572;
        float _1617 = _1540 * 0.5;
        float _1618 = _1550 * 0.5;
        float _1619 = _1560 * 0.5;
        float _1620 = dot(vec3(_1617, _1618, _1619), vec3(_1617, _1618, _1619));
        float _1625 = (_1620 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1620);
        float _1633 = (dot(vec3(_818, _819, _820), vec3(_1625 * _1617, _1625 * _1618, _1625 * _1619)) + 1.0) * 0.5;
        float _4173 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1642 = sqrt(((_1618 * _1618) + (_1617 * _1617)) + (_1619 * _1619)) / (_1573 + 9.9999997473787516355514526367188e-06);
        float _4184 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1643 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1644 = _1643 * 2.0;
        float _1648 = (1.0 - _1643) / (_1643 + 1.0);
        float _4195 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1649 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1658 = ((((1.0 - _1649) * (_1644 + 2.0)) * exp2(log2(isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_1644 + 1.0))) + _1649) * _1573;
        float _1659 = _1541 * 0.5;
        float _1660 = _1551 * 0.5;
        float _1661 = _1561 * 0.5;
        float _1662 = dot(vec3(_1659, _1660, _1661), vec3(_1659, _1660, _1661));
        float _1667 = (_1662 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1662);
        float _1675 = (dot(vec3(_818, _819, _820), vec3(_1667 * _1659, _1667 * _1660, _1667 * _1661)) + 1.0) * 0.5;
        float _4206 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1684 = sqrt(((_1660 * _1660) + (_1659 * _1659)) + (_1661 * _1661)) / (_1574 + 9.9999997473787516355514526367188e-06);
        float _4217 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1685 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1686 = _1685 * 2.0;
        float _1690 = (1.0 - _1685) / (_1685 + 1.0);
        float _4228 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1691 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1700 = ((((1.0 - _1691) * (_1686 + 2.0)) * exp2(log2(isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_1686 + 1.0))) + _1691) * _1574;
        _1708 = _1541;
        _1709 = _1540;
        _1710 = _1539;
        _1711 = _1551;
        _1712 = _1550;
        _1713 = _1549;
        _1714 = _1561;
        _1715 = _1560;
        _1716 = _1559;
        _1717 = _1574;
        _1718 = _1573;
        _1719 = _1572;
        _1720 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0)));
        _1721 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)));
        _1722 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0)));
    }
    else
    {
        _1708 = _1397;
        _1709 = _1397;
        _1710 = _1397;
        _1711 = _1397;
        _1712 = _1397;
        _1713 = _1397;
        _1714 = _1397;
        _1715 = _1397;
        _1716 = _1397;
        _1717 = _1397;
        _1718 = _1397;
        _1719 = _1397;
        _1720 = 0.0;
        _1721 = 0.0;
        _1722 = 0.0;
    }
    float _1732 = (cbModelParam._m0[1u].x * (_1720 - _1409)) + _1409;
    float _1733 = (cbModelParam._m0[1u].x * (_1721 - _1410)) + _1410;
    float _1734 = (cbModelParam._m0[1u].x * (_1722 - _1411)) + _1411;
    float _1755 = fma(_1734, cbSceneParam._m0[89u].z, fma(_1733, cbSceneParam._m0[89u].y, _1732 * cbSceneParam._m0[89u].x));
    float _1758 = fma(_1734, cbSceneParam._m0[90u].z, fma(_1733, cbSceneParam._m0[90u].y, _1732 * cbSceneParam._m0[90u].x));
    float _1761 = fma(_1734, cbSceneParam._m0[91u].z, fma(_1733, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1732));
    float _1776 = _1003 * 0.5;
    float _1777 = _1004 * 0.5;
    float _1778 = _1005 * 0.5;
    float _1779 = dot(vec4(_1776, _1777, _1778, 1.0), vec4(_1710, _1713, _1716, _1719));
    float _1782 = dot(vec4(_1776, _1777, _1778, 1.0), vec4(_1709, _1712, _1715, _1718));
    float _1785 = dot(vec4(_1776, _1777, _1778, 1.0), vec4(_1708, _1711, _1714, _1717));
    float _1819;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1792 = dot(vec4(_1776, _1777, _1778, 1.0), vec4(_1396, _1400, _1403, _1406));
        float _1796 = dot(vec4(_1776, _1777, _1778, 1.0), vec4(_1398, _1401, _1404, _1407));
        float _1800 = dot(vec4(_1776, _1777, _1778, 1.0), vec4(_1399, _1402, _1405, _1408));
        float _1807 = dot(vec4(cbModelParam._m0[39u]), vec4(_1776, _1777, _1778, 1.0));
        _1819 = dot(vec3(isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0)), isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0)), isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1807) ? 0.0 : (isnan(0.0) ? _1807 : max(0.0, _1807))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1819 = 1.0;
    }
    float _1830;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1821 = dot(vec4(cbModelParam._m0[40u]), vec4(_1776, _1777, _1778, 1.0));
        _1830 = dot(vec3(isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0)), isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0)), isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1821) ? 0.0 : (isnan(0.0) ? _1821 : max(0.0, _1821))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1830 = 1.0;
    }
    float _1834 = (_1830 * cbModelParam._m0[1u].x) + (_1819 * (1.0 - cbModelParam._m0[1u].x));
    float _1844 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _821);
    float _1845 = isnan(_1844) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1844 : min(cbModelParam._m0[25u].z, _1844));
    float _1925;
    float _1927;
    float _1929;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1892 = fma(_1067, cbModelParam._m0[13u].z, fma(_1063, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1059)) + cbModelParam._m0[13u].w;
        float _1896 = fma(_1067, cbModelParam._m0[14u].z, fma(_1063, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1059)) + cbModelParam._m0[14u].w;
        float _1900 = fma(_1067, cbModelParam._m0[15u].z, fma(_1063, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1059)) + cbModelParam._m0[15u].w;
        float _1903 = fma(_1005, cbModelParam._m0[13u].z, fma(_1004, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1003));
        float _1906 = fma(_1005, cbModelParam._m0[14u].z, fma(_1004, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1003));
        float _1909 = fma(_1005, cbModelParam._m0[15u].z, fma(_1004, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1003));
        float _1937;
        if (_1903 > 0.0)
        {
            _1937 = abs((1.0 - _1892) / _1903);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1903 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1892 + 1.0) / _1903);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1937 = frontier_phi_17_15_ladder;
        }
        float _2139;
        if (_1906 > 0.0)
        {
            _2139 = abs((1.0 - _1896) / _1906);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1906 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1896 + 1.0) / _1906);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2139 = frontier_phi_26_22_ladder;
        }
        float _2393;
        if (_1909 > 0.0)
        {
            _2393 = abs((1.0 - _1900) / _1909);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1909 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1900 + 1.0) / _1909);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2393 = frontier_phi_38_33_ladder;
        }
        float _2395 = isnan(_2139) ? _1937 : (isnan(_1937) ? _2139 : min(_1937, _2139));
        float _2396 = isnan(_2393) ? _2395 : (isnan(_2395) ? _2393 : min(_2395, _2393));
        float _2400 = (_2396 * _1903) + _1892;
        float _2401 = (_2396 * _1906) + _1896;
        float _2402 = (_2396 * _1909) + _1900;
        float _2403 = _2396 * 9.9999997473787516355514526367188e-05;
        float _2405 = (-1.0) - _2403;
        float _2407 = _2403 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2402 > _2407) || ((_2402 < _2405) || ((_2401 > _2407) || ((_2401 < _2405) || ((_2400 < _2405) || (_2400 > _2407))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2530 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2402, cbModelParam._m0[9u].z, fma(_2401, cbModelParam._m0[9u].y, _2400 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2402, cbModelParam._m0[10u].z, fma(_2401, cbModelParam._m0[10u].y, _2400 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2402, cbModelParam._m0[11u].z, fma(_2401, cbModelParam._m0[11u].y, _2400 * cbModelParam._m0[11u].x))), _1845);
            frontier_phi_16_38_ladder = _2530.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2530.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2530.x * cbModelParam._m0[1u].y;
        }
        _1925 = frontier_phi_16_38_ladder_2;
        _1927 = frontier_phi_16_38_ladder_1;
        _1929 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1913 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1003, _1004, _1005), _1845);
        _1925 = _1913.x * cbModelParam._m0[1u].y;
        _1927 = _1913.y * cbModelParam._m0[1u].y;
        _1929 = _1913.z * cbModelParam._m0[1u].y;
    }
    float _1933 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _821);
    float _1934 = isnan(_1933) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1933 : min(cbModelParam._m0[25u].w, _1933));
    float _2023;
    float _2025;
    float _2027;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1987 = fma(_1067, cbModelParam._m0[21u].z, fma(_1063, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1059)) + cbModelParam._m0[21u].w;
        float _1991 = fma(_1067, cbModelParam._m0[22u].z, fma(_1063, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1059)) + cbModelParam._m0[22u].w;
        float _1995 = fma(_1067, cbModelParam._m0[23u].z, fma(_1063, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1059)) + cbModelParam._m0[23u].w;
        float _1998 = fma(_1005, cbModelParam._m0[21u].z, fma(_1004, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1003));
        float _2001 = fma(_1005, cbModelParam._m0[22u].z, fma(_1004, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1003));
        float _2004 = fma(_1005, cbModelParam._m0[23u].z, fma(_1004, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1003));
        float _2144;
        if (_1998 > 0.0)
        {
            _2144 = abs((1.0 - _1987) / _1998);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1998 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1987 + 1.0) / _1998);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2144 = frontier_phi_28_24_ladder;
        }
        float _2420;
        if (_2001 > 0.0)
        {
            _2420 = abs((1.0 - _1991) / _2001);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2001 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1991 + 1.0) / _2001);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2420 = frontier_phi_40_35_ladder;
        }
        float _2633;
        if (_2004 > 0.0)
        {
            _2633 = abs((1.0 - _1995) / _2004);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2004 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1995 + 1.0) / _2004);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2633 = frontier_phi_49_46_ladder;
        }
        float _2635 = isnan(_2420) ? _2144 : (isnan(_2144) ? _2420 : min(_2144, _2420));
        float _2636 = isnan(_2633) ? _2635 : (isnan(_2635) ? _2633 : min(_2635, _2633));
        float _2640 = (_2636 * _1998) + _1987;
        float _2641 = (_2636 * _2001) + _1991;
        float _2642 = (_2636 * _2004) + _1995;
        float _2643 = _2636 * 9.9999997473787516355514526367188e-05;
        float _2644 = (-1.0) - _2643;
        float _2646 = _2643 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2642 > _2646) || ((_2642 < _2644) || ((_2641 > _2646) || ((_2641 < _2644) || ((_2640 < _2644) || (_2640 > _2646))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2841 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2642, cbModelParam._m0[17u].z, fma(_2641, cbModelParam._m0[17u].y, _2640 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2642, cbModelParam._m0[18u].z, fma(_2641, cbModelParam._m0[18u].y, _2640 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2642, cbModelParam._m0[19u].z, fma(_2641, cbModelParam._m0[19u].y, _2640 * cbModelParam._m0[19u].x))), _1934);
            frontier_phi_25_49_ladder = _2841.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2841.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2841.x * cbModelParam._m0[1u].z;
        }
        _2023 = frontier_phi_25_49_ladder_2;
        _2025 = frontier_phi_25_49_ladder_1;
        _2027 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2007 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1003, _1004, _1005), _1934);
        _2023 = _2007.x * cbModelParam._m0[1u].z;
        _2025 = _2007.y * cbModelParam._m0[1u].z;
        _2027 = _2007.z * cbModelParam._m0[1u].z;
    }
    float _2040 = (((_1030 * _979) + _1031) * _995) * ((cbModelParam._m0[1u].w * (_2023 - _1925)) + _1925);
    float _2042 = (((_1030 * _981) + _1031) * _995) * ((cbModelParam._m0[1u].w * (_2025 - _1927)) + _1927);
    float _2044 = (((_1030 * _982) + _1031) * _995) * ((cbModelParam._m0[1u].w * (_2027 - _1929)) + _1929);
    float _2047 = fma(_2044, cbSceneParam._m0[89u].z, fma(_2042, cbSceneParam._m0[89u].y, _2040 * cbSceneParam._m0[89u].x));
    float _2050 = fma(_2044, cbSceneParam._m0[90u].z, fma(_2042, cbSceneParam._m0[90u].y, _2040 * cbSceneParam._m0[90u].x));
    float _2053 = fma(_2044, cbSceneParam._m0[91u].z, fma(_2042, cbSceneParam._m0[91u].y, _2040 * cbSceneParam._m0[91u].x));
    uvec4 _2063 = floatBitsToUint(cbInstanceData._m0[_261 + 5u]);
    uint _2065 = _2063.x * 14u;
    uint _2066 = _2065 + 13u;
    float _2073 = _995 + (-1.0);
    float _2078 = (cbLight._m0[_2066].x * _2073) + 1.0;
    float _2079 = (cbLight._m0[_2066].y * _2073) + 1.0;
    float _2080 = (cbLight._m0[_2066].z * _2073) + 1.0;
    float _2081 = (cbLight._m0[_2066].w * _2073) + 1.0;
    uint _2082 = _2065 + 5u;
    float _2088 = isnan(1.0) ? _2079 : (isnan(_2079) ? 1.0 : min(_2079, 1.0));
    uint _2092 = _2065 + 4u;
    float _2098 = isnan(1.0) ? _2078 : (isnan(_2078) ? 1.0 : min(_2078, 1.0));
    uint _2102 = _2065 | 1u;
    float _2113 = dot(vec3(cbLight._m0[_2065].xyz), vec3(_818, _819, _820));
    float _2116 = dot(vec3(cbLight._m0[_2102].xyz), vec3(_818, _819, _820));
    float _4364 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _4375 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
    float _2121 = (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * 0.3183098733425140380859375;
    float _2123 = (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * 0.3183098733425140380859375;
    float _2130 = ((cbLight._m0[_2082].x * _2088) * _2123) + ((cbLight._m0[_2092].x * _2098) * _2121);
    float _2131 = ((_2088 * cbLight._m0[_2082].y) * _2123) + ((_2098 * cbLight._m0[_2092].y) * _2121);
    float _2132 = ((_2088 * cbLight._m0[_2082].z) * _2123) + ((_2098 * cbLight._m0[_2092].z) * _2121);
    uvec4 _2136 = floatBitsToUint(cbLight._m0[_2065 + 12u]);
    bool _2138 = _2136.x == 0u;
    float _2149;
    float _2151;
    float _2153;
    if (_2138)
    {
        _2149 = _2130;
        _2151 = _2131;
        _2153 = _2132;
    }
    else
    {
        uint _2157 = _2065 + 6u;
        float _2173 = (dot(vec3(cbLight._m0[_2065 + 2u].xyz), vec3(_818, _819, _820)) * 0.5) + 0.5;
        float _2174 = _2173 * _2173;
        float _4386 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2175 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _2176 = isnan(1.0) ? _2080 : (isnan(_2080) ? 1.0 : min(_2080, 1.0));
        _2149 = (((cbLight._m0[_2157].x * 0.3183098733425140380859375) * _2175) * _2176) + _2130;
        _2151 = (((cbLight._m0[_2157].y * 0.3183098733425140380859375) * _2175) * _2176) + _2131;
        _2153 = (((cbLight._m0[_2157].z * 0.3183098733425140380859375) * _2175) * _2176) + _2132;
    }
    bool _2156 = _2136.y == 0u;
    float _2194;
    float _2196;
    float _2198;
    if (_2156)
    {
        _2194 = _2149;
        _2196 = _2151;
        _2198 = _2153;
    }
    else
    {
        uint _2364 = _2065 + 7u;
        float _2380 = (dot(vec3(cbLight._m0[_2065 + 3u].xyz), vec3(_818, _819, _820)) * 0.5) + 0.5;
        float _2381 = _2380 * _2380;
        float _4402 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
        float _2382 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
        float _2383 = isnan(1.0) ? _2081 : (isnan(_2081) ? 1.0 : min(_2081, 1.0));
        _2194 = (((cbLight._m0[_2364].x * 0.3183098733425140380859375) * _2382) * _2383) + _2149;
        _2196 = (((cbLight._m0[_2364].y * 0.3183098733425140380859375) * _2382) * _2383) + _2151;
        _2198 = (((cbLight._m0[_2364].z * 0.3183098733425140380859375) * _2382) * _2383) + _2153;
    }
    uint _2201 = _2065 + 8u;
    float _2214 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2065].w)) * _821) * 0.949999988079071044921875);
    float _2215 = _2214 * _2214;
    float _2216 = cbLight._m0[_2065].x + _897;
    float _2217 = cbLight._m0[_2065].y + _898;
    float _2218 = cbLight._m0[_2065].z + _899;
    float _2222 = inversesqrt(dot(vec3(_2216, _2217, _2218), vec3(_2216, _2217, _2218)));
    float _2223 = _2222 * _2216;
    float _2224 = _2222 * _2217;
    float _2225 = _2222 * _2218;
    float _2226 = dot(vec3(_818, _819, _820), vec3(cbLight._m0[_2065].xyz));
    float _4418 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2229 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
    float _4429 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _2230 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
    float _2231 = dot(vec3(_818, _819, _820), vec3(_2223, _2224, _2225));
    float _4440 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2234 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
    float _2235 = dot(vec3(cbLight._m0[_2065].xyz), vec3(_2223, _2224, _2225));
    float _4451 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2239 = _2215 * _2215;
    float _2243 = ((_2234 * _2234) * (_2239 + (-1.0))) + 1.0;
    float _2251 = exp2(log2(1.0 - (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0)))) * 5.0);
    float _2252 = 0.959999978542327880859375 - _976;
    float _2254 = 0.959999978542327880859375 - _977;
    float _2255 = 0.959999978542327880859375 - _978;
    float _2262 = 1.0 - _2215;
    float _2273 = (0.5 / (((_2230 * ((_2229 * _2262) + _2215)) + 9.9999999392252902907785028219223e-09) + (((_2230 * _2262) + _2215) * _2229))) * _2229;
    float _4462 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2275 = (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (_2239 / ((_2243 * _2243) * 3.141590118408203125));
    uint _2286 = _2065 + 9u;
    float _2297 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2102].w)) * _821) * 0.949999988079071044921875);
    float _2298 = _2297 * _2297;
    float _2299 = cbLight._m0[_2102].x + _897;
    float _2300 = cbLight._m0[_2102].y + _898;
    float _2301 = cbLight._m0[_2102].z + _899;
    float _2305 = inversesqrt(dot(vec3(_2299, _2300, _2301), vec3(_2299, _2300, _2301)));
    float _2306 = _2305 * _2299;
    float _2307 = _2305 * _2300;
    float _2308 = _2305 * _2301;
    float _2309 = dot(vec3(_818, _819, _820), vec3(cbLight._m0[_2102].xyz));
    float _4473 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2312 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
    float _2313 = dot(vec3(_818, _819, _820), vec3(_2306, _2307, _2308));
    float _4484 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2316 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
    float _2317 = dot(vec3(cbLight._m0[_2102].xyz), vec3(_2306, _2307, _2308));
    float _4495 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2321 = _2298 * _2298;
    float _2325 = ((_2316 * _2316) * (_2321 + (-1.0))) + 1.0;
    float _2332 = exp2(log2(1.0 - (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0)))) * 5.0);
    float _2339 = 1.0 - _2298;
    float _2349 = (0.5 / (((_2230 * ((_2312 * _2339) + _2298)) + 9.9999999392252902907785028219223e-09) + (((_2230 * _2339) + _2298) * _2312))) * _2312;
    float _4506 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
    float _2351 = (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * (_2321 / ((_2325 * _2325) * 3.141590118408203125));
    float _2361 = (((((_2332 * _2252) + _979) * cbLight._m0[_2286].x) * _2351) * _2088) + (((((_2251 * _2252) + _979) * cbLight._m0[_2201].x) * _2275) * _2098);
    float _2362 = (((((_2332 * _2254) + _981) * cbLight._m0[_2286].y) * _2351) * _2088) + (((((_2251 * _2254) + _981) * cbLight._m0[_2201].y) * _2275) * _2098);
    float _2363 = (((((_2332 * _2255) + _982) * cbLight._m0[_2286].z) * _2351) * _2088) + (((((_2251 * _2255) + _982) * cbLight._m0[_2201].z) * _2275) * _2098);
    float _2425;
    float _2427;
    float _2429;
    if (_2138)
    {
        _2425 = _2361;
        _2427 = _2362;
        _2429 = _2363;
    }
    else
    {
        uint _2431 = _2065 + 2u;
        uint _2435 = _2065 + 10u;
        float _2449 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2431].w)) * _821) * 0.949999988079071044921875);
        float _2450 = _2449 * _2449;
        float _2451 = cbLight._m0[_2431].x + _897;
        float _2452 = cbLight._m0[_2431].y + _898;
        float _2453 = cbLight._m0[_2431].z + _899;
        float _2457 = inversesqrt(dot(vec3(_2451, _2452, _2453), vec3(_2451, _2452, _2453)));
        float _2458 = _2457 * _2451;
        float _2459 = _2457 * _2452;
        float _2460 = _2457 * _2453;
        float _2461 = dot(vec3(_818, _819, _820), vec3(cbLight._m0[_2431].xyz));
        float _4517 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2464 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _2465 = dot(vec3(_818, _819, _820), vec3(_2458, _2459, _2460));
        float _4528 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2468 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
        float _2469 = dot(vec3(cbLight._m0[_2431].xyz), vec3(_2458, _2459, _2460));
        float _4539 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
        float _2473 = _2450 * _2450;
        float _2477 = ((_2468 * _2468) * (_2473 + (-1.0))) + 1.0;
        float _2484 = exp2(log2(1.0 - (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0)))) * 5.0);
        float _2491 = 1.0 - _2450;
        float _2501 = (0.5 / (((_2230 * ((_2464 * _2491) + _2450)) + 9.9999999392252902907785028219223e-09) + (((_2230 * _2491) + _2450) * _2464))) * _2464;
        float _4550 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2503 = (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * (_2473 / ((_2477 * _2477) * 3.141590118408203125));
        float _2504 = isnan(1.0) ? _2080 : (isnan(_2080) ? 1.0 : min(_2080, 1.0));
        _2425 = (((((_2484 * _2252) + _979) * cbLight._m0[_2435].x) * _2503) * _2504) + _2361;
        _2427 = (((((_2484 * _2254) + _981) * cbLight._m0[_2435].y) * _2503) * _2504) + _2362;
        _2429 = (((((_2484 * _2255) + _982) * cbLight._m0[_2435].z) * _2503) * _2504) + _2363;
    }
    float _2539;
    float _2541;
    float _2543;
    if (_2156)
    {
        _2539 = _2425;
        _2541 = _2427;
        _2543 = _2429;
    }
    else
    {
        uint _2550 = _2065 + 3u;
        uint _2554 = _2065 + 11u;
        float _2568 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2550].w)) * _821) * 0.949999988079071044921875);
        float _2569 = _2568 * _2568;
        float _2570 = cbLight._m0[_2550].x + _897;
        float _2571 = cbLight._m0[_2550].y + _898;
        float _2572 = cbLight._m0[_2550].z + _899;
        float _2576 = inversesqrt(dot(vec3(_2570, _2571, _2572), vec3(_2570, _2571, _2572)));
        float _2577 = _2576 * _2570;
        float _2578 = _2576 * _2571;
        float _2579 = _2576 * _2572;
        float _2580 = dot(vec3(_818, _819, _820), vec3(cbLight._m0[_2550].xyz));
        float _4566 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2583 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
        float _2584 = dot(vec3(_818, _819, _820), vec3(_2577, _2578, _2579));
        float _4577 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
        float _2587 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
        float _2588 = dot(vec3(cbLight._m0[_2550].xyz), vec3(_2577, _2578, _2579));
        float _4588 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        float _2592 = _2569 * _2569;
        float _2596 = ((_2587 * _2587) * (_2592 + (-1.0))) + 1.0;
        float _2603 = exp2(log2(1.0 - (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0)))) * 5.0);
        float _2610 = 1.0 - _2569;
        float _2620 = (0.5 / (((_2230 * ((_2583 * _2610) + _2569)) + 9.9999999392252902907785028219223e-09) + (((_2230 * _2610) + _2569) * _2583))) * _2583;
        float _4599 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
        float _2622 = (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0))) * (_2592 / ((_2596 * _2596) * 3.141590118408203125));
        float _2623 = isnan(1.0) ? _2081 : (isnan(_2081) ? 1.0 : min(_2081, 1.0));
        _2539 = (((((_2603 * _2252) + _979) * cbLight._m0[_2554].x) * _2622) * _2623) + _2425;
        _2541 = (((((_2603 * _2254) + _981) * cbLight._m0[_2554].y) * _2622) * _2623) + _2427;
        _2543 = (((((_2603 * _2255) + _982) * cbLight._m0[_2554].z) * _2622) * _2623) + _2429;
    }
    float _2758;
    float _2760;
    float _2762;
    float _2764;
    float _2766;
    float _2768;
    if (_2063.y == 0u)
    {
        float _2698 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2699 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2698;
        float _2700 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2698;
        float _2701 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2698;
        uvec4 _2713 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2714 = _2713.x;
        uint _2725 = uint((float(_2713.y) * floor(float(uint(cbSceneParam._m0[85u].y * _918) / _2714))) + floor(float(uint(cbSceneParam._m0[85u].x * _917) / _2714)));
        float _2735 = (log2(_2701 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2736 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
        uint _2739 = uint(isnan(14.0) ? _2736 : (isnan(_2736) ? 14.0 : min(_2736, 14.0)));
        uvec4 _2744 = texelFetch(g_lightClusterGridBuffer, int(((_2739 << 2u) + (_2725 << 6u)) >> 2u));
        uint _2745 = _2744.x;
        uint _2746 = _2713.z;
        float _2846;
        float _2848;
        float _2850;
        float _2852;
        float _2854;
        float _2856;
        if (((((1u << ((_2746 >> 4u) & 15u)) + 4294967295u) & _2745) == 0u) || ((_2746 & 240u) == 0u))
        {
            _2846 = 0.0;
            _2848 = 0.0;
            _2850 = 0.0;
            _2852 = 0.0;
            _2854 = 0.0;
            _2856 = 0.0;
        }
        else
        {
            float _2847;
            float _2849;
            float _2851;
            float _2853;
            float _2855;
            float _2857;
            float _2999 = 0.0;
            float _3000 = 0.0;
            float _3001 = 0.0;
            float _3002 = 0.0;
            float _3003 = 0.0;
            float _3004 = 0.0;
            uint _3005 = 0u;
            uint _3014;
            bool _3015;
            for (;;)
            {
                _3014 = texelFetch(g_lightClassification, int((((_2739 << 5u) + (_2725 << 9u)) + (_3005 << 2u)) >> 2u)).x;
                _3015 = _3014 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3015)
                {
                    frontier_phi_66_pred = _2999;
                    frontier_phi_66_pred_1 = _3004;
                    frontier_phi_66_pred_2 = _3003;
                    frontier_phi_66_pred_3 = _3002;
                    frontier_phi_66_pred_4 = _3001;
                    frontier_phi_66_pred_5 = _3000;
                }
                else
                {
                    float _3144;
                    float _3145;
                    float _3146;
                    float _3147;
                    float _3148;
                    float _3149;
                    uint _3150;
                    _3144 = _2999;
                    _3145 = _3000;
                    _3146 = _3001;
                    _3147 = _3002;
                    _3148 = _3003;
                    _3149 = _3004;
                    _3150 = _3014;
                    float _3071;
                    float _3072;
                    float _3073;
                    float _3074;
                    float _3075;
                    float _3076;
                    for (;;)
                    {
                        uint _3154 = uint(findLSB(_3150)) + (_3005 << 5u);
                        uint _3151 = (_3150 + 4294967295u) & _3150;
                        uint _3156 = _3154 * 48u;
                        vec4 _3170 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3156)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 3u)).x));
                        uint _3176 = (_3154 * 48u) + 4u;
                        vec4 _3189 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3176)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 3u)).x));
                        uint _3195 = (_3154 * 48u) + 8u;
                        vec3 _3206 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3195)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 2u)).x));
                        float _3210 = _3170.x - _2699;
                        float _3211 = _3170.y - _2700;
                        float _3212 = _3170.z - _2701;
                        float _3213 = dot(vec3(_3210, _3211, _3212), vec3(_3210, _3211, _3212));
                        float _3216 = inversesqrt(_3213);
                        float _3217 = _3216 * _3210;
                        float _3218 = _3216 * _3211;
                        float _3219 = _3216 * _3212;
                        float _3220 = dot(vec3(_936, _939, _942), vec3(_3217, _3218, _3219));
                        float _3225 = 1.0 - (_3213 * _3170.w);
                        float _4625 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                        float _3226 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                        float _3227 = sqrt(_3213) * _3189.w;
                        float _3230 = 1.39999997615814208984375 / (_3227 + 1.39999997615814208984375);
                        float _3231 = _3230 * _3230;
                        float _3234 = ((1.0 - _3231) * _3220) + _3231;
                        float _3237 = _3227 * _3227;
                        float _3241 = ((isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0))) * _3226) / ((_3237 * 0.699999988079071044921875) + 1.0);
                        float _3245 = (-0.0) - _2699;
                        float _3246 = (-0.0) - _2700;
                        float _3247 = (-0.0) - _2701;
                        float _3251 = inversesqrt(dot(vec3(_3245, _3246, _3247), vec3(_3245, _3246, _3247)));
                        float _3252 = _3251 * _3245;
                        float _3253 = _3251 * _3246;
                        float _3254 = _3251 * _3247;
                        float _3262 = exp2(log2(1.0 / ((_3237 * 3.5) + 5.0)) * 0.25);
                        float _3263 = 1.0 - _1011;
                        float _3270 = sqrt(1.0 - ((1.0 - (_3263 * _3263)) * (1.0 - (_3262 * _3262))));
                        float _3271 = _3270 * _3270;
                        float _3272 = _3271 * _3271;
                        float _3273 = _3252 + _3217;
                        float _3274 = _3253 + _3218;
                        float _3275 = _3254 + _3219;
                        float _3279 = inversesqrt(dot(vec3(_3273, _3274, _3275), vec3(_3273, _3274, _3275)));
                        float _3283 = dot(vec3(_936, _939, _942), vec3(_3252, _3253, _3254));
                        float _4641 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                        float _3286 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
                        float _3287 = dot(vec3(_936, _939, _942), vec3(_3279 * _3273, _3279 * _3274, _3279 * _3275));
                        float _4652 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                        float _3290 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
                        float _3294 = ((_3290 * _3290) * (_3272 + (-1.0))) + 1.0;
                        float _3295 = _3230 * _3271;
                        float _3296 = _3295 * _3295;
                        float _3299 = ((1.0 - _3296) * _3220) + _3296;
                        float _4663 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                        float _3300 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
                        float _3301 = 1.0 - _3271;
                        float _3311 = (0.5 / (((_3300 * ((_3286 * _3301) + _3271)) + 9.9999999392252902907785028219223e-09) + (((_3300 * _3301) + _3271) * _3286))) * _3300;
                        float _4674 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                        float _3322 = (((_3272 * 3.1415927410125732421875) * (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0)))) / ((_3294 * _3294) * ((_3237 * 2.1991131305694580078125) + 3.141590118408203125))) * _3226;
                        _3074 = (_3241 * _3189.x) + _3147;
                        _3075 = (_3241 * _3189.y) + _3148;
                        _3076 = (_3241 * _3189.z) + _3149;
                        _3071 = (_3322 * _3206.x) + _3144;
                        _3072 = (_3322 * _3206.y) + _3145;
                        _3073 = (_3322 * _3206.z) + _3146;
                        if (_3151 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3144 = _3071;
                            _3145 = _3072;
                            _3146 = _3073;
                            _3147 = _3074;
                            _3148 = _3075;
                            _3149 = _3076;
                            _3150 = _3151;
                        }
                    }
                    frontier_phi_66_pred = _3071;
                    frontier_phi_66_pred_1 = _3076;
                    frontier_phi_66_pred_2 = _3075;
                    frontier_phi_66_pred_3 = _3074;
                    frontier_phi_66_pred_4 = _3073;
                    frontier_phi_66_pred_5 = _3072;
                }
                _2847 = frontier_phi_66_pred;
                _2857 = frontier_phi_66_pred_1;
                _2855 = frontier_phi_66_pred_2;
                _2853 = frontier_phi_66_pred_3;
                _2851 = frontier_phi_66_pred_4;
                _2849 = frontier_phi_66_pred_5;
                uint _3006 = _3005 + 1u;
                if (_3006 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2999 = _2847;
                    _3000 = _2849;
                    _3001 = _2851;
                    _3002 = _2853;
                    _3003 = _2855;
                    _3004 = _2857;
                    _3005 = _3006;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2846 = _2847;
            _2848 = _2849;
            _2850 = _2851;
            _2852 = _2853;
            _2854 = _2855;
            _2856 = _2857;
        }
        uvec4 _2860 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2861 = _2860.z;
        uint _2863 = (_2861 >> 8u) & 15u;
        float _2967;
        float _2969;
        float _2971;
        float _2973;
        float _2975;
        float _2977;
        if (((4294967295u << _2863) & _2745) == 0u)
        {
            _2967 = _2846;
            _2969 = _2848;
            _2971 = _2850;
            _2973 = _2852;
            _2975 = _2854;
            _2977 = _2856;
        }
        else
        {
            float _2992 = inversesqrt(dot(vec3(_2699, _2700, _2701), vec3(_2699, _2700, _2701)));
            float _2993 = _2992 * _2699;
            float _2994 = _2992 * _2700;
            float _2995 = _2992 * _2701;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2863 < ((_2861 >> 12u) & 15u))
            {
                float _2968;
                float _2970;
                float _2972;
                float _2974;
                float _2976;
                float _2978;
                float _3127 = _2846;
                float _3128 = _2848;
                float _3129 = _2850;
                float _3130 = _2852;
                float _3131 = _2854;
                float _3132 = _2856;
                uint _3133 = _2863;
                uint _3142;
                bool _3143;
                for (;;)
                {
                    _3142 = texelFetch(g_lightClassification, int((((_2739 << 5u) + (_2725 << 9u)) + (_3133 << 2u)) >> 2u)).x;
                    _3143 = _3142 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3143)
                    {
                        frontier_phi_77_pred = _3132;
                        frontier_phi_77_pred_1 = _3131;
                        frontier_phi_77_pred_2 = _3130;
                        frontier_phi_77_pred_3 = _3129;
                        frontier_phi_77_pred_4 = _3128;
                        frontier_phi_77_pred_5 = _3127;
                    }
                    else
                    {
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3629;
                        float _3630;
                        float _3631;
                        float _3632;
                        float _3633;
                        float _3634;
                        float _3349 = _3127;
                        float _3350 = _3128;
                        float _3351 = _3129;
                        float _3352 = _3130;
                        float _3353 = _3131;
                        float _3354 = _3132;
                        uint _3355 = _3142;
                        uint _3356;
                        vec4 _3381;
                        float _3382;
                        vec4 _3397;
                        vec3 _3409;
                        vec4 _3424;
                        vec4 _3439;
                        float _3485;
                        bool _3486;
                        for (;;)
                        {
                            uint _3366 = ((_3133 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3355));
                            _3356 = (_3355 + 4294967295u) & _3355;
                            uint _3368 = _3366 * 40u;
                            _3381 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 3u)).x));
                            _3382 = _3381.w;
                            uint _3384 = (_3366 * 40u) + 4u;
                            _3397 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3384)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 3u)).x));
                            uint _3399 = (_3366 * 40u) + 8u;
                            _3409 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3399)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 2u)).x));
                            uint _3411 = (_3366 * 40u) + 16u;
                            _3424 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3411)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 3u)).x));
                            uint _3426 = (_3366 * 40u) + 20u;
                            _3439 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3426)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 3u)).x));
                            uint _3441 = (_3366 * 40u) + 24u;
                            vec4 _3454 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 3u)).x));
                            uint _3460 = (_3366 * 40u) + 28u;
                            vec4 _3473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 3u)).x));
                            _3485 = fma(_2701, _3473.z, fma(_2700, _3473.y, _3473.x * _2699)) + _3473.w;
                            _3486 = !((fma(_2701, _3454.z, fma(_2700, _3454.y, _3454.x * _2699)) + _3454.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3486)
                            {
                                float _3513 = _3381.x - _2699;
                                float _3514 = _3381.y - _2700;
                                float _3515 = _3381.z - _2701;
                                float _3516 = dot(vec3(_3513, _3514, _3515), vec3(_3513, _3514, _3515));
                                float _3519 = inversesqrt(_3516);
                                float _3520 = _3519 * _3513;
                                float _3521 = _3519 * _3514;
                                float _3522 = _3519 * _3515;
                                float _3526 = 1.0 - (_3516 / (_3382 * _3382));
                                float _4685 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                                float _3527 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
                                float _3531 = sqrt(_3516) * _3397.w;
                                float _3533 = 1.39999997615814208984375 / (_3531 + 1.39999997615814208984375);
                                float _3534 = _3533 * _3533;
                                float _3537 = ((1.0 - _3534) * dot(vec3(_3520, _3521, _3522), vec3(_936, _939, _942))) + _3534;
                                float _3540 = _3531 * _3531;
                                float _3544 = (fma(_2701, _3424.z, fma(_2700, _3424.y, _3424.x * _2699)) + _3424.w) / _3485;
                                float _3545 = (fma(_2701, _3439.z, fma(_2700, _3439.y, _3439.x * _2699)) + _3439.w) / _3485;
                                float _3549 = 1.0 - dot(vec2(_3544, _3545), vec2(_3544, _3545));
                                float _4701 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                                float _3550 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
                                float _3551 = _3550 * (((isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0))) * _3527) / ((_3540 * 0.699999988079071044921875) + 1.0));
                                float _3563 = exp2(log2(1.0 / ((_3540 * 3.5) + 5.0)) * 0.25);
                                float _3564 = 1.0 - _1011;
                                float _3571 = sqrt(1.0 - ((1.0 - (_3564 * _3564)) * (1.0 - (_3563 * _3563))));
                                float _3572 = _3571 * _3571;
                                float _3573 = _3572 * _3572;
                                float _3574 = _3520 - _2993;
                                float _3575 = _3521 - _2994;
                                float _3576 = _3522 - _2995;
                                float _3580 = inversesqrt(dot(vec3(_3574, _3575, _3576), vec3(_3574, _3575, _3576)));
                                float _3584 = dot(vec3(_936, _939, _942), vec3((-0.0) - _2993, (-0.0) - _2994, (-0.0) - _2995));
                                float _4712 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                                float _3587 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
                                float _3588 = dot(vec3(_936, _939, _942), vec3(_3580 * _3574, _3580 * _3575, _3580 * _3576));
                                float _4723 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                                float _3591 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
                                float _3595 = ((_3591 * _3591) * (_3573 + (-1.0))) + 1.0;
                                float _3596 = _3533 * _3572;
                                float _3597 = _3596 * _3596;
                                float _3603 = ((1.0 - _3597) * dot(vec3(_936, _939, _942), vec3(_3520, _3521, _3522))) + _3597;
                                float _4734 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                                float _3604 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
                                float _3605 = 1.0 - _3572;
                                float _3615 = (0.5 / (((_3604 * ((_3587 * _3605) + _3572)) + 9.9999999392252902907785028219223e-09) + (((_3604 * _3605) + _3572) * _3587))) * _3604;
                                float _4745 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                                float _3625 = (_3550 * _3527) * (((_3573 * 3.1415927410125732421875) * (isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0)))) / ((_3595 * _3595) * ((_3540 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3551 * _3397.y;
                                frontier_phi_83_pred_1 = _3551 * _3397.x;
                                frontier_phi_83_pred_2 = _3625 * _3409.z;
                                frontier_phi_83_pred_3 = _3625 * _3409.y;
                                frontier_phi_83_pred_4 = _3625 * _3409.x;
                                frontier_phi_83_pred_5 = _3551 * _3397.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3633 = frontier_phi_83_pred;
                            _3632 = frontier_phi_83_pred_1;
                            _3631 = frontier_phi_83_pred_2;
                            _3630 = frontier_phi_83_pred_3;
                            _3629 = frontier_phi_83_pred_4;
                            _3634 = frontier_phi_83_pred_5;
                            _3339 = _3632 + _3352;
                            _3340 = _3633 + _3353;
                            _3341 = _3634 + _3354;
                            _3336 = _3629 + _3349;
                            _3337 = _3630 + _3350;
                            _3338 = _3631 + _3351;
                            if (_3356 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3349 = _3336;
                                _3350 = _3337;
                                _3351 = _3338;
                                _3352 = _3339;
                                _3353 = _3340;
                                _3354 = _3341;
                                _3355 = _3356;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3341;
                        frontier_phi_77_pred_1 = _3340;
                        frontier_phi_77_pred_2 = _3339;
                        frontier_phi_77_pred_3 = _3338;
                        frontier_phi_77_pred_4 = _3337;
                        frontier_phi_77_pred_5 = _3336;
                    }
                    _2978 = frontier_phi_77_pred;
                    _2976 = frontier_phi_77_pred_1;
                    _2974 = frontier_phi_77_pred_2;
                    _2972 = frontier_phi_77_pred_3;
                    _2970 = frontier_phi_77_pred_4;
                    _2968 = frontier_phi_77_pred_5;
                    uint _3134 = _3133 + 1u;
                    if (_3134 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3127 = _2968;
                        _3128 = _2970;
                        _3129 = _2972;
                        _3130 = _2974;
                        _3131 = _2976;
                        _3132 = _2978;
                        _3133 = _3134;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2972;
                frontier_phi_58_59_ladder_1 = _2978;
                frontier_phi_58_59_ladder_2 = _2976;
                frontier_phi_58_59_ladder_3 = _2974;
                frontier_phi_58_59_ladder_4 = _2970;
                frontier_phi_58_59_ladder_5 = _2968;
            }
            else
            {
                frontier_phi_58_59_ladder = _2850;
                frontier_phi_58_59_ladder_1 = _2856;
                frontier_phi_58_59_ladder_2 = _2854;
                frontier_phi_58_59_ladder_3 = _2852;
                frontier_phi_58_59_ladder_4 = _2848;
                frontier_phi_58_59_ladder_5 = _2846;
            }
            _2967 = frontier_phi_58_59_ladder_5;
            _2969 = frontier_phi_58_59_ladder_4;
            _2971 = frontier_phi_58_59_ladder;
            _2973 = frontier_phi_58_59_ladder_3;
            _2975 = frontier_phi_58_59_ladder_2;
            _2977 = frontier_phi_58_59_ladder_1;
        }
        float _2982 = isnan(1.0) ? _995 : (isnan(_995) ? 1.0 : min(_995, 1.0));
        _2758 = (_2982 * _2973) + _2194;
        _2760 = (_2982 * _2975) + _2196;
        _2762 = (_2982 * _2977) + _2198;
        _2764 = ((_2967 * _979) * _2982) + _2539;
        _2766 = ((_2969 * _981) * _2982) + _2541;
        _2768 = ((_2971 * _982) * _2982) + _2543;
    }
    else
    {
        _2758 = _2194;
        _2760 = _2196;
        _2762 = _2198;
        _2764 = _2539;
        _2766 = _2541;
        _2768 = _2543;
    }
    float _4761 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _4772 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _4783 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _2785 = ((isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0))) * (_2758 + ((isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))) * _995))) + ((_2764 + ((isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0))) * _1834)) * cbPerFrame._m0[3u].x);
    float _2786 = ((isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0))) * (_2760 + ((isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))) * _995))) + ((_2766 + ((isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0))) * _1834)) * cbPerFrame._m0[3u].x);
    float _2787 = ((isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0))) * (_2762 + ((isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))) * _995))) + ((_2768 + ((isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0))) * _1834)) * cbPerFrame._m0[3u].x);
    uint _2788 = _261 + 6u;
    float _2796 = _917 / cbSceneParam._m0[86u].x;
    float _2797 = _918 / cbSceneParam._m0[86u].y;
    vec4 _2811 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2796, _2797, (log2((isnan(cbSceneParam._m0[77u].w) ? _840 : (isnan(_840) ? cbSceneParam._m0[77u].w : min(_840, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2813 = _2811.x;
    float _2814 = _2811.y;
    float _2815 = _2811.z;
    float _2816 = _2811.w;
    float _2909;
    float _2911;
    float _2913;
    float _2915;
    if (_840 > cbSceneParam._m0[78u].w)
    {
        float _2871 = isnan(_840) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _840 : min(cbSceneParam._m0[80u].w, _840));
        float _2872 = _2871 / _840;
        float _2883 = _2872 * _890;
        float _2884 = _891 * _2872;
        float _2885 = (-0.0) - _2884;
        float _2887 = _2872 * _892;
        float _2889 = (cbSceneParam._m0[77u].w * _2885) / _2871;
        float _2890 = _2889 + cbSceneParam._m0[79u].w;
        float _2891 = cbSceneParam._m0[79u].w - _2884;
        float _2897 = sqrt(((_2883 * _2883) + (_2884 * _2884)) + (_2887 * _2887));
        float _2900 = (1.0 - (cbSceneParam._m0[77u].w / _2871)) * _2897;
        float _2905 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2907 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3084;
        if (abs((_2885 - _2889) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3084 = ((((_2890 > 0.0) ? exp2(_2905 * _2890) : (2.0 - exp2(_2907 * _2890))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2900;
        }
        else
        {
            float _3028 = 1.0 / cbSceneParam._m0[80u].x;
            float _3029 = isnan(_2891) ? _2890 : (isnan(_2890) ? _2891 : max(_2890, _2891));
            float _3030 = isnan(_2891) ? _2890 : (isnan(_2890) ? _2891 : min(_2890, _2891));
            float _3039 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : min(_3029, 0.0));
            float _3040 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : min(_3030, 0.0));
            _3084 = ((abs(_2897 / _2885) * cbSceneParam._m0[80u].y) * ((((_3039 - _3040) * 2.0) - ((exp2(_2905 * (isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0)))) - exp2(_2905 * (isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0))))) * _3028)) - ((exp2(_2907 * _3039) - exp2(_2907 * _3040)) * _3028))) + (_2900 * cbSceneParam._m0[80u].z);
        }
        vec4 _3086 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2796, _2797, 1.0), 0.0);
        float _3095 = exp2((_3084 * (-1.44269502162933349609375)) * (1.0 - _3086.w));
        float _3096 = log2(_3095);
        float _3112 = log2(_2816);
        _2909 = (exp2(_3112 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3096 * cbSceneParam._m0[78u].x)) * _3086.x) / cbSceneParam._m0[78u].x)) + _2813;
        _2911 = (exp2(_3112 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3096 * cbSceneParam._m0[78u].y)) * _3086.y) / cbSceneParam._m0[78u].y)) + _2814;
        _2913 = (exp2(_3112 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3096 * cbSceneParam._m0[78u].z)) * _3086.z) / cbSceneParam._m0[78u].z)) + _2815;
        _2915 = _3095 * _2816;
    }
    else
    {
        _2909 = _2813;
        _2911 = _2814;
        _2913 = _2815;
        _2915 = _2816;
    }
    bool _3122;
    vec4 _2925;
    vec4 _2947;
    float _2949;
    float _2953;
    float _2954;
    float _2955;
    float _2956;
    bool _2966;
    for (;;)
    {
        _2925 = cbMatDynParam._m0[0u];
        float _2927 = roundEven(_2925.y);
        bool _2928 = _2927 == 3.0;
        float _2929 = log2(_2915);
        float _2936 = exp2(_2929 * cbSceneParam._m0[78u].x) * _2785;
        float _2937 = exp2(_2929 * cbSceneParam._m0[78u].y) * _2786;
        float _2938 = exp2(_2929 * cbSceneParam._m0[78u].z) * _2787;
        float _2945 = _906 + (-0.5);
        _2947 = cbMtdParam._m0[1u];
        _2949 = _2947.y * _2945;
        float _2952 = (_2927 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2953 = _2952 * (_2928 ? _2936 : (_2936 + (cbSceneParam._m0[72u].w * _2909)));
        _2954 = _2952 * (_2928 ? _2937 : (_2937 + (cbSceneParam._m0[72u].w * _2911)));
        _2955 = _2952 * (_2928 ? _2938 : (_2938 + (cbSceneParam._m0[72u].w * _2913)));
        _2956 = _2945 * 0.999000012874603271484375;
        _2966 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2966)
        {
            if ((cbInstanceData._m0[_261 + 7u].x + _2956) < 0.5)
            {
                _3122 = true;
                break;
            }
        }
        uint _3063 = _955 + uint(_2925.w);
        if ((cbInstanceData._m0[_3063].w < 1.0) && ((cbInstanceData._m0[_3063].w + _2956) < 0.5))
        {
            _3122 = true;
            break;
        }
        if ((_2949 + 1.0) < _2947.x)
        {
            _3122 = true;
            break;
        }
        _3122 = false;
        break;
    }
    float _3327;
    if (_3122)
    {
        discard_state = true;
        _3327 = 0.0;
    }
    else
    {
        _3327 = cbInstanceData._m0[_2788].w;
    }
    SV_Target.x = _2953;
    SV_Target.y = _2954;
    SV_Target.z = _2955;
    SV_Target.w = _3327;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2788].w;
    discard_exit();
}


