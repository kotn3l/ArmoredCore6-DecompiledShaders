#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1419;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _243 = _242 * _234;
    float _244 = _242 * _235;
    float _245 = _242 * _236;
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = _249 * NORMAL.x;
    float _251 = _249 * NORMAL.y;
    float _252 = _249 * NORMAL.z;
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = _256 * TANGENT.x;
    float _258 = _256 * TANGENT.y;
    float _259 = _256 * TANGENT.z;
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3769 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3780 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3791 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    uint _281 = uint(roundEven(NORMAL.w)) * 13u;
    uint _286 = _281 + 1u;
    uint _290 = _281 + 2u;
    float _299 = sqrt(((cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x)) + (cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x));
    float _300 = _299 * TEXCOORD.z;
    float _301 = _299 * TEXCOORD.w;
    vec4 _314 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _300) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _301) + cbTextureTilingScale._m0[13u].w));
    vec4 _338 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _343 = _338.x * cbMtdParam._m0[11u].x;
    float _344 = _338.y * cbMtdParam._m0[11u].y;
    float _345 = _338.z * cbMtdParam._m0[11u].z;
    vec4 _364 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _300) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _301) + cbTextureTilingScale._m0[5u].w));
    vec4 _400 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _402 = _400.x;
    float _414 = dot(vec4(_402, _400.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _431 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_402 - _414) * cbMtdParam._m0[24u].y) + _414) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3802 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _432 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _439 = (_432 * ((_364.x * cbMtdParam._m0[12u].x) - _343)) + _343;
    float _440 = (_432 * ((_364.y * cbMtdParam._m0[12u].y) - _344)) + _344;
    float _441 = (_432 * ((_364.z * cbMtdParam._m0[12u].z) - _345)) + _345;
    float _445 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _314.x) * _439;
    float _448 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _314.y) * _440;
    float _451 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _314.z) * _441;
    float _458 = ((_439 - _445) * (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0)))) + _445;
    float _459 = ((_440 - _448) * (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0)))) + _448;
    float _460 = ((_441 - _451) * (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0)))) + _451;
    vec4 _478 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _300) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _301) + cbTextureTilingScale._m0[20u].w));
    vec4 _505 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _300) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _301) + cbTextureTilingScale._m0[4u].w));
    vec4 _522 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _524 = _522.x;
    float _525 = _522.y;
    float _526 = _522.z;
    float _535 = ((_505.z - _526) * _432) + _526;
    float _538 = ((((_505.x - _524) * _432) + _524) * 2.0) + (-1.0);
    float _539 = ((((_505.y - _525) * _432) + _525) * 2.0) + (-1.0);
    float _540 = dot(vec2(_538, _539), vec2(_538, _539));
    float _3813 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _545 = sqrt(1.0 - (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))));
    float _548 = _538 + ((((_478.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _549 = _539 + ((((_478.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _552 = fma(_545, _250, fma(_549, _257, _548 * _243));
    float _555 = fma(_545, _251, fma(_549, _258, _548 * _244));
    float _558 = fma(_545, _252, fma(_549, _259, _548 * _245));
    float _562 = inversesqrt(dot(vec3(_552, _555, _558), vec3(_552, _555, _558)));
    vec4 _578 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _604 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _300) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _301) + cbTextureTilingScale._m0[11u].w));
    float _606 = _604.x;
    float _607 = 1.0 - _606;
    float _611 = ((_606 - _607) * cbMtdParam._m0[24u].z) + _607;
    float _613 = (cbMtdParam._m0[19u].x + dot(vec4(_562 * _552, _562 * _555, _562 * _558, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_611 * cbMtdParam._m0[21u].z);
    float _3824 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _614 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _616 = (-0.0) - cbMtdParam._m0[24u].x;
    float _618 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _619 = isnan(1.0) ? _618 : (isnan(_618) ? 1.0 : min(_618, 1.0));
    float _626 = _614 - ((_614 * TEXCOORD_8.x) * _619);
    float _627 = _614 - ((_614 * TEXCOORD_8.y) * _619);
    float _628 = _614 - ((_614 * TEXCOORD_8.z) * _619);
    float _635 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _639 = ((isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : min(_635, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _647 = (_639 - (((_611 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _639))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3855 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _648 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
    float _652 = ((_626 * (cbMtdParam._m0[17u].x - _458)) * _648) + _458;
    float _653 = ((_627 * (cbMtdParam._m0[17u].y - _459)) * _648) + _459;
    float _654 = ((_628 * (cbMtdParam._m0[17u].z - _460)) * _648) + _460;
    vec4 _666 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _300) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _301) + cbTextureTilingScale._m0[19u].w));
    float _668 = _666.x;
    float _669 = 1.0 - _668;
    float _694 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_668 - _669) * cbMtdParam._m0[24u].w) + _669) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3866 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _695 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _703 = ((((cbMtdParam._m0[10u].x - _652) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _695) + _652;
    float _704 = ((((cbMtdParam._m0[10u].y - _653) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _695) + _653;
    float _705 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _654)) * _695) + _654;
    vec4 _731 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _733 = _731.x;
    float _751 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _300) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _301) + cbTextureTilingScale._m0[9u].w)).x - _733) * _432) + _733;
    float _755 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _751) * cbMtdParam._m0[19u].z) + _751;
    float _758 = _755 - ((_648 * _626) * _755);
    float _760 = _758 - (_758 * _695);
    float _765 = (((_478.z - _535) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _535;
    vec4 _779 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _300) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _301) + cbTextureTilingScale._m0[15u].w));
    float _786 = (_779.x * 2.0) + (-1.0);
    float _787 = (_779.y * 2.0) + (-1.0);
    float _788 = dot(vec2(_786, _787), vec2(_786, _787));
    float _3877 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _797 = (((_779.z - _765) * _626) * _648) + _765;
    float _800 = ((cbMtdParam._m0[23u].y - _797) * _695) + _797;
    vec4 _819 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _300) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _301) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _825 = (_819.x * 2.0) + (-1.0);
    float _826 = (_819.y * 2.0) + (-1.0);
    float _827 = dot(vec2(_825, _826), vec2(_825, _826));
    float _3888 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _847 = (((cbMtdParam._m0[21u].x * _548) + ((_786 - _548) * _626)) * _648) + _548;
    float _848 = (((cbMtdParam._m0[21u].x * _549) + ((_787 - _549) * _627)) * _648) + _549;
    float _849 = (((sqrt(1.0 - (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0)))) - _545) * _628) * _648) + _545;
    float _860 = (((_825 - _847) + (_847 * cbMtdParam._m0[22u].z)) * _695) + _847;
    float _861 = (((_826 - _848) + (_848 * cbMtdParam._m0[22u].z)) * _695) + _848;
    float _862 = ((sqrt(1.0 - (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0)))) - _849) * _695) + _849;
    float _866 = cbMtdParam._m0[22u].x + _578.w;
    float _869 = fma(_862, _250, fma(_861, _257, _860 * _243));
    float _872 = fma(_862, _251, fma(_861, _258, _860 * _244));
    float _875 = fma(_862, _252, fma(_861, _259, _860 * _245));
    float _879 = inversesqrt(dot(vec3(_869, _872, _875), vec3(_869, _872, _875)));
    float _880 = _879 * _869;
    float _881 = _879 * _872;
    float _882 = _879 * _875;
    float _3899 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _883 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _3910 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _3921 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _3932 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _3943 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _3954 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _888 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _902 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _942 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _952 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _942);
    float _953 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _942);
    float _954 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _942);
    float _958 = inversesqrt(dot(vec3(_952, _953, _954), vec3(_952, _953, _954)));
    float _959 = _952 * _958;
    float _960 = _953 * _958;
    float _961 = _954 * _958;
    float _967 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _968 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _986 = fma(_882, cbSceneParam._m0[5u].z, fma(_881, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _880));
    float _989 = fma(_882, cbSceneParam._m0[6u].z, fma(_881, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _880));
    float _992 = fma(_882, cbSceneParam._m0[7u].z, fma(_881, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _880));
    uint _1006 = (_281 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1012 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0)))) * cbInstanceData._m0[_1006].x;
    float _1013 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0)))) * cbInstanceData._m0[_1006].y;
    float _1014 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0)))) * cbInstanceData._m0[_1006].z;
    float _3965 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _1015 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _3976 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _1016 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _3987 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _1017 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
    float _1018 = 1.0 - _888;
    float _1019 = _1015 * _1018;
    float _1020 = _1016 * _1018;
    float _1021 = _1017 * _1018;
    float _1026 = (_1015 + (-0.039999999105930328369140625)) * _888;
    float _1027 = (_1016 + (-0.039999999105930328369140625)) * _888;
    float _1028 = (_1017 + (-0.039999999105930328369140625)) * _888;
    float _1029 = _1026 + 0.039999999105930328369140625;
    float _1031 = _1027 + 0.039999999105930328369140625;
    float _1032 = _1028 + 0.039999999105930328369140625;
    vec4 _1041 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _967, cbSceneParam._m0[86u].y * _968));
    float _1045 = ((isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * TEXCOORD_5.w) * _1041.x;
    float _1046 = dot(vec3(_880, _881, _882), vec3(_959, _960, _961));
    float _1049 = _1046 * 2.0;
    float _1053 = (_1049 * _880) - _959;
    float _1054 = (_1049 * _881) - _960;
    float _1055 = (_1049 * _882) - _961;
    float _1059 = abs(dot(vec3(_959, _960, _961), vec3(_880, _881, _882)));
    float _3998 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
    float _1061 = sqrt(_883);
    float _1074 = exp2((_1061 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1061 * 3.0));
    float _1080 = (1.0 - _1074) * ((_1061 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1081 = _1074 * _1061;
    float _1109 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1113 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1117 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1418;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1143 = fma(_1117, cbModelParam._m0[26u].z, fma(_1113, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1109));
        float _1147 = fma(_1117, cbModelParam._m0[27u].z, fma(_1113, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1109));
        float _1151 = fma(_1117, cbModelParam._m0[28u].z, fma(_1113, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1109));
        float _1176 = _1109 + _880;
        float _1177 = _1113 + _881;
        float _1178 = _1117 + _882;
        float _1188 = fma(_1178, cbModelParam._m0[26u].z, fma(_1177, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1176)) - _1143;
        float _1189 = fma(_1178, cbModelParam._m0[27u].z, fma(_1177, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1176)) - _1147;
        float _1190 = fma(_1178, cbModelParam._m0[28u].z, fma(_1177, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1176)) - _1151;
        float _1194 = inversesqrt(dot(vec3(_1188, _1189, _1190), vec3(_1188, _1189, _1190)));
        float _1207 = ((_1194 * _1188) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1143 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1208 = ((_1194 * _1189) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1147 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1209 = ((_1194 * _1190) / cbModelParam._m0[34u].z) + ((((((_1151 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1207, _1208, _1209), 0.0);
        vec4 _1219 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1207, _1208, _1209), 0.0);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1207, _1208, _1209), 0.0);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1207, _1208, _1209), 0.0);
        float _1246 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1247 = _1246 * (_1212.x + (-0.5));
        float _1248 = _1246 * (_1212.y + (-0.5));
        float _1249 = _1246 * (_1212.z + (-0.5));
        float _1256 = exp2((_1219.w + (-0.5)) * 20.0) * 2.0;
        float _1257 = _1256 * (_1219.x + (-0.5));
        float _1258 = _1256 * (_1219.y + (-0.5));
        float _1259 = _1256 * (_1219.z + (-0.5));
        float _1266 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1267 = _1266 * (_1226.x + (-0.5));
        float _1268 = _1266 * (_1226.y + (-0.5));
        float _1269 = _1266 * (_1226.z + (-0.5));
        float _1276 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1233.x + (-0.5));
        float _1278 = _1276 * (_1233.y + (-0.5));
        float _1279 = _1276 * (_1233.z + (-0.5));
        float _1280 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1281 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1282 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1283 = _1247 * 0.5;
        float _1284 = _1257 * 0.5;
        float _1285 = _1267 * 0.5;
        float _1286 = dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285));
        float _1291 = (_1286 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1286);
        float _1300 = (dot(vec3(_880, _881, _882), vec3(_1291 * _1283, _1291 * _1284, _1291 * _1285)) + 1.0) * 0.5;
        float _4024 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1310 = sqrt(((_1284 * _1284) + (_1283 * _1283)) + (_1285 * _1285)) / (_1280 + 9.9999997473787516355514526367188e-06);
        float _4035 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1312 = _1311 * 2.0;
        float _1316 = (1.0 - _1311) / (_1311 + 1.0);
        float _4046 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1326 = ((((1.0 - _1317) * (_1312 + 2.0)) * exp2(log2(isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_1312 + 1.0))) + _1317) * _1280;
        float _1327 = _1248 * 0.5;
        float _1328 = _1258 * 0.5;
        float _1329 = _1268 * 0.5;
        float _1330 = dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329));
        float _1335 = (_1330 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1330);
        float _1343 = (dot(vec3(_880, _881, _882), vec3(_1335 * _1327, _1335 * _1328, _1335 * _1329)) + 1.0) * 0.5;
        float _4057 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1352 = sqrt(((_1328 * _1328) + (_1327 * _1327)) + (_1329 * _1329)) / (_1281 + 9.9999997473787516355514526367188e-06);
        float _4068 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1354 = _1353 * 2.0;
        float _1358 = (1.0 - _1353) / (_1353 + 1.0);
        float _4079 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _1368 = ((((1.0 - _1359) * (_1354 + 2.0)) * exp2(log2(isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * (_1354 + 1.0))) + _1359) * _1281;
        float _1369 = _1249 * 0.5;
        float _1370 = _1259 * 0.5;
        float _1371 = _1269 * 0.5;
        float _1372 = dot(vec3(_1369, _1370, _1371), vec3(_1369, _1370, _1371));
        float _1377 = (_1372 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1372);
        float _1385 = (dot(vec3(_880, _881, _882), vec3(_1377 * _1369, _1377 * _1370, _1377 * _1371)) + 1.0) * 0.5;
        float _4090 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1394 = sqrt(((_1370 * _1370) + (_1369 * _1369)) + (_1371 * _1371)) / (_1282 + 9.9999997473787516355514526367188e-06);
        float _4101 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1396 = _1395 * 2.0;
        float _1400 = (1.0 - _1395) / (_1395 + 1.0);
        float _4112 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _1410 = ((((1.0 - _1401) * (_1396 + 2.0)) * exp2(log2(isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * (_1396 + 1.0))) + _1401) * _1282;
        _1418 = _1249;
        _1420 = _1248;
        _1421 = _1247;
        _1422 = _1259;
        _1423 = _1258;
        _1424 = _1257;
        _1425 = _1269;
        _1426 = _1268;
        _1427 = _1267;
        _1428 = _1282;
        _1429 = _1281;
        _1430 = _1280;
        _1431 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)));
        _1432 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)));
        _1433 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)));
    }
    else
    {
        _1418 = _1419;
        _1420 = _1419;
        _1421 = _1419;
        _1422 = _1419;
        _1423 = _1419;
        _1424 = _1419;
        _1425 = _1419;
        _1426 = _1419;
        _1427 = _1419;
        _1428 = _1419;
        _1429 = _1419;
        _1430 = _1419;
        _1431 = 0.0;
        _1432 = 0.0;
        _1433 = 0.0;
    }
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1458 = fma(_1117, cbModelParam._m0[30u].z, fma(_1113, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1109));
        float _1462 = fma(_1117, cbModelParam._m0[31u].z, fma(_1113, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1109));
        float _1466 = fma(_1117, cbModelParam._m0[32u].z, fma(_1113, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1109));
        float _1489 = _1109 + _880;
        float _1490 = _1113 + _881;
        float _1491 = _1117 + _882;
        float _1501 = fma(_1491, cbModelParam._m0[30u].z, fma(_1490, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1489)) - _1458;
        float _1502 = fma(_1491, cbModelParam._m0[31u].z, fma(_1490, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1489)) - _1462;
        float _1503 = fma(_1491, cbModelParam._m0[32u].z, fma(_1490, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1489)) - _1466;
        float _1507 = inversesqrt(dot(vec3(_1501, _1502, _1503), vec3(_1501, _1502, _1503)));
        float _1520 = ((_1507 * _1501) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1458 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1521 = ((_1507 * _1502) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1462 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1522 = ((_1507 * _1503) / cbModelParam._m0[35u].z) + ((((((_1466 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1524 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1520, _1521, _1522), 0.0);
        vec4 _1531 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1520, _1521, _1522), 0.0);
        vec4 _1538 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1520, _1521, _1522), 0.0);
        vec4 _1545 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1520, _1521, _1522), 0.0);
        float _1557 = exp2((_1524.w + (-0.5)) * 20.0) * 2.0;
        float _1558 = _1557 * (_1524.x + (-0.5));
        float _1559 = _1557 * (_1524.y + (-0.5));
        float _1560 = _1557 * (_1524.z + (-0.5));
        float _1567 = exp2((_1531.w + (-0.5)) * 20.0) * 2.0;
        float _1568 = _1567 * (_1531.x + (-0.5));
        float _1569 = _1567 * (_1531.y + (-0.5));
        float _1570 = _1567 * (_1531.z + (-0.5));
        float _1577 = exp2((_1538.w + (-0.5)) * 20.0) * 2.0;
        float _1578 = _1577 * (_1538.x + (-0.5));
        float _1579 = _1577 * (_1538.y + (-0.5));
        float _1580 = _1577 * (_1538.z + (-0.5));
        float _1587 = exp2((_1545.w + (-0.5)) * 20.0) * 2.0;
        float _1588 = _1587 * (_1545.x + (-0.5));
        float _1589 = _1587 * (_1545.y + (-0.5));
        float _1590 = _1587 * (_1545.z + (-0.5));
        float _1591 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1592 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1593 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1594 = _1558 * 0.5;
        float _1595 = _1568 * 0.5;
        float _1596 = _1578 * 0.5;
        float _1597 = dot(vec3(_1594, _1595, _1596), vec3(_1594, _1595, _1596));
        float _1602 = (_1597 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1597);
        float _1610 = (dot(vec3(_880, _881, _882), vec3(_1602 * _1594, _1602 * _1595, _1602 * _1596)) + 1.0) * 0.5;
        float _4153 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1619 = sqrt(((_1595 * _1595) + (_1594 * _1594)) + (_1596 * _1596)) / (_1591 + 9.9999997473787516355514526367188e-06);
        float _4164 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1621 = _1620 * 2.0;
        float _1625 = (1.0 - _1620) / (_1620 + 1.0);
        float _4175 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1635 = ((((1.0 - _1626) * (_1621 + 2.0)) * exp2(log2(isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_1621 + 1.0))) + _1626) * _1591;
        float _1636 = _1559 * 0.5;
        float _1637 = _1569 * 0.5;
        float _1638 = _1579 * 0.5;
        float _1639 = dot(vec3(_1636, _1637, _1638), vec3(_1636, _1637, _1638));
        float _1644 = (_1639 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1639);
        float _1652 = (dot(vec3(_880, _881, _882), vec3(_1644 * _1636, _1644 * _1637, _1644 * _1638)) + 1.0) * 0.5;
        float _4186 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1661 = sqrt(((_1637 * _1637) + (_1636 * _1636)) + (_1638 * _1638)) / (_1592 + 9.9999997473787516355514526367188e-06);
        float _4197 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1663 = _1662 * 2.0;
        float _1667 = (1.0 - _1662) / (_1662 + 1.0);
        float _4208 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1668 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _1677 = ((((1.0 - _1668) * (_1663 + 2.0)) * exp2(log2(isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (_1663 + 1.0))) + _1668) * _1592;
        float _1678 = _1560 * 0.5;
        float _1679 = _1570 * 0.5;
        float _1680 = _1580 * 0.5;
        float _1681 = dot(vec3(_1678, _1679, _1680), vec3(_1678, _1679, _1680));
        float _1686 = (_1681 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1681);
        float _1694 = (dot(vec3(_880, _881, _882), vec3(_1686 * _1678, _1686 * _1679, _1686 * _1680)) + 1.0) * 0.5;
        float _4219 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1703 = sqrt(((_1679 * _1679) + (_1678 * _1678)) + (_1680 * _1680)) / (_1593 + 9.9999997473787516355514526367188e-06);
        float _4230 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1704 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1705 = _1704 * 2.0;
        float _1709 = (1.0 - _1704) / (_1704 + 1.0);
        float _4241 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1710 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _1719 = ((((1.0 - _1710) * (_1705 + 2.0)) * exp2(log2(isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * (_1705 + 1.0))) + _1710) * _1593;
        _1727 = _1560;
        _1728 = _1559;
        _1729 = _1558;
        _1730 = _1570;
        _1731 = _1569;
        _1732 = _1568;
        _1733 = _1580;
        _1734 = _1579;
        _1735 = _1578;
        _1736 = _1593;
        _1737 = _1592;
        _1738 = _1591;
        _1739 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)));
        _1740 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)));
        _1741 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)));
    }
    else
    {
        _1727 = _1419;
        _1728 = _1419;
        _1729 = _1419;
        _1730 = _1419;
        _1731 = _1419;
        _1732 = _1419;
        _1733 = _1419;
        _1734 = _1419;
        _1735 = _1419;
        _1736 = _1419;
        _1737 = _1419;
        _1738 = _1419;
        _1739 = 0.0;
        _1740 = 0.0;
        _1741 = 0.0;
    }
    float _1751 = (cbModelParam._m0[1u].x * (_1739 - _1431)) + _1431;
    float _1752 = (cbModelParam._m0[1u].x * (_1740 - _1432)) + _1432;
    float _1753 = (cbModelParam._m0[1u].x * (_1741 - _1433)) + _1433;
    float _1774 = fma(_1753, cbSceneParam._m0[89u].z, fma(_1752, cbSceneParam._m0[89u].y, _1751 * cbSceneParam._m0[89u].x));
    float _1777 = fma(_1753, cbSceneParam._m0[90u].z, fma(_1752, cbSceneParam._m0[90u].y, _1751 * cbSceneParam._m0[90u].x));
    float _1780 = fma(_1753, cbSceneParam._m0[91u].z, fma(_1752, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1751));
    float _1795 = _1053 * 0.5;
    float _1796 = _1054 * 0.5;
    float _1797 = _1055 * 0.5;
    float _1798 = dot(vec4(_1795, _1796, _1797, 1.0), vec4(_1729, _1732, _1735, _1738));
    float _1801 = dot(vec4(_1795, _1796, _1797, 1.0), vec4(_1728, _1731, _1734, _1737));
    float _1804 = dot(vec4(_1795, _1796, _1797, 1.0), vec4(_1727, _1730, _1733, _1736));
    float _1838;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1811 = dot(vec4(_1795, _1796, _1797, 1.0), vec4(_1418, _1422, _1425, _1428));
        float _1815 = dot(vec4(_1795, _1796, _1797, 1.0), vec4(_1420, _1423, _1426, _1429));
        float _1819 = dot(vec4(_1795, _1796, _1797, 1.0), vec4(_1421, _1424, _1427, _1430));
        float _1826 = dot(vec4(cbModelParam._m0[39u]), vec4(_1795, _1796, _1797, 1.0));
        _1838 = dot(vec3(isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0)), isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0)), isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1826) ? 0.0 : (isnan(0.0) ? _1826 : max(0.0, _1826))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1838 = 1.0;
    }
    float _1849;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1840 = dot(vec4(cbModelParam._m0[40u]), vec4(_1795, _1796, _1797, 1.0));
        _1849 = dot(vec3(isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0)), isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0)), isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1840) ? 0.0 : (isnan(0.0) ? _1840 : max(0.0, _1840))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1849 = 1.0;
    }
    float _1853 = (_1849 * cbModelParam._m0[1u].x) + (_1838 * (1.0 - cbModelParam._m0[1u].x));
    float _1863 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _883);
    float _1864 = isnan(_1863) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1863 : min(cbModelParam._m0[25u].z, _1863));
    float _1945;
    float _1947;
    float _1949;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1912 = fma(_1117, cbModelParam._m0[13u].z, fma(_1113, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1109)) + cbModelParam._m0[13u].w;
        float _1916 = fma(_1117, cbModelParam._m0[14u].z, fma(_1113, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1109)) + cbModelParam._m0[14u].w;
        float _1920 = fma(_1117, cbModelParam._m0[15u].z, fma(_1113, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1109)) + cbModelParam._m0[15u].w;
        float _1923 = fma(_1055, cbModelParam._m0[13u].z, fma(_1054, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1053));
        float _1926 = fma(_1055, cbModelParam._m0[14u].z, fma(_1054, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1053));
        float _1929 = fma(_1055, cbModelParam._m0[15u].z, fma(_1054, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1053));
        float _1957;
        if (_1923 > 0.0)
        {
            _1957 = abs((1.0 - _1912) / _1923);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1923 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1912 + 1.0) / _1923);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1957 = frontier_phi_14_12_ladder;
        }
        float _2181;
        if (_1926 > 0.0)
        {
            _2181 = abs((1.0 - _1916) / _1926);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1926 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1916 + 1.0) / _1926);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2181 = frontier_phi_23_19_ladder;
        }
        float _2438;
        if (_1929 > 0.0)
        {
            _2438 = abs((1.0 - _1920) / _1929);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1929 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1920 + 1.0) / _1929);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2438 = frontier_phi_35_30_ladder;
        }
        float _2440 = isnan(_2181) ? _1957 : (isnan(_1957) ? _2181 : min(_1957, _2181));
        float _2441 = isnan(_2438) ? _2440 : (isnan(_2440) ? _2438 : min(_2440, _2438));
        float _2445 = (_2441 * _1923) + _1912;
        float _2446 = (_2441 * _1926) + _1916;
        float _2447 = (_2441 * _1929) + _1920;
        float _2448 = _2441 * 9.9999997473787516355514526367188e-05;
        float _2450 = (-1.0) - _2448;
        float _2452 = _2448 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2447 > _2452) || ((_2447 < _2450) || ((_2446 > _2452) || ((_2446 < _2450) || ((_2445 < _2450) || (_2445 > _2452))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2575 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2447, cbModelParam._m0[9u].z, fma(_2446, cbModelParam._m0[9u].y, _2445 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2447, cbModelParam._m0[10u].z, fma(_2446, cbModelParam._m0[10u].y, _2445 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2447, cbModelParam._m0[11u].z, fma(_2446, cbModelParam._m0[11u].y, _2445 * cbModelParam._m0[11u].x))), _1864);
            frontier_phi_13_35_ladder = _2575.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2575.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2575.x * cbModelParam._m0[1u].y;
        }
        _1945 = frontier_phi_13_35_ladder_2;
        _1947 = frontier_phi_13_35_ladder_1;
        _1949 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1933 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1053, _1054, _1055), _1864);
        _1945 = _1933.x * cbModelParam._m0[1u].y;
        _1947 = _1933.y * cbModelParam._m0[1u].y;
        _1949 = _1933.z * cbModelParam._m0[1u].y;
    }
    float _1953 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _883);
    float _1954 = isnan(_1953) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1953 : min(cbModelParam._m0[25u].w, _1953));
    float _2044;
    float _2046;
    float _2048;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2008 = fma(_1117, cbModelParam._m0[21u].z, fma(_1113, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1109)) + cbModelParam._m0[21u].w;
        float _2012 = fma(_1117, cbModelParam._m0[22u].z, fma(_1113, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1109)) + cbModelParam._m0[22u].w;
        float _2016 = fma(_1117, cbModelParam._m0[23u].z, fma(_1113, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1109)) + cbModelParam._m0[23u].w;
        float _2019 = fma(_1055, cbModelParam._m0[21u].z, fma(_1054, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1053));
        float _2022 = fma(_1055, cbModelParam._m0[22u].z, fma(_1054, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1053));
        float _2025 = fma(_1055, cbModelParam._m0[23u].z, fma(_1054, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1053));
        float _2186;
        if (_2019 > 0.0)
        {
            _2186 = abs((1.0 - _2008) / _2019);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2019 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2008 + 1.0) / _2019);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2186 = frontier_phi_25_21_ladder;
        }
        float _2465;
        if (_2022 > 0.0)
        {
            _2465 = abs((1.0 - _2012) / _2022);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2022 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2012 + 1.0) / _2022);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2465 = frontier_phi_37_32_ladder;
        }
        float _2678;
        if (_2025 > 0.0)
        {
            _2678 = abs((1.0 - _2016) / _2025);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2025 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2016 + 1.0) / _2025);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2678 = frontier_phi_46_43_ladder;
        }
        float _2680 = isnan(_2465) ? _2186 : (isnan(_2186) ? _2465 : min(_2186, _2465));
        float _2681 = isnan(_2678) ? _2680 : (isnan(_2680) ? _2678 : min(_2680, _2678));
        float _2685 = (_2681 * _2019) + _2008;
        float _2686 = (_2681 * _2022) + _2012;
        float _2687 = (_2681 * _2025) + _2016;
        float _2688 = _2681 * 9.9999997473787516355514526367188e-05;
        float _2689 = (-1.0) - _2688;
        float _2691 = _2688 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2687 > _2691) || ((_2687 < _2689) || ((_2686 > _2691) || ((_2686 < _2689) || ((_2685 < _2689) || (_2685 > _2691))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2886 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2687, cbModelParam._m0[17u].z, fma(_2686, cbModelParam._m0[17u].y, _2685 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2687, cbModelParam._m0[18u].z, fma(_2686, cbModelParam._m0[18u].y, _2685 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2687, cbModelParam._m0[19u].z, fma(_2686, cbModelParam._m0[19u].y, _2685 * cbModelParam._m0[19u].x))), _1954);
            frontier_phi_22_46_ladder = _2886.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2886.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2886.x * cbModelParam._m0[1u].z;
        }
        _2044 = frontier_phi_22_46_ladder_2;
        _2046 = frontier_phi_22_46_ladder_1;
        _2048 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2028 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1053, _1054, _1055), _1954);
        _2044 = _2028.x * cbModelParam._m0[1u].z;
        _2046 = _2028.y * cbModelParam._m0[1u].z;
        _2048 = _2028.z * cbModelParam._m0[1u].z;
    }
    float _2061 = (((_1080 * _1029) + _1081) * _1045) * ((cbModelParam._m0[1u].w * (_2044 - _1945)) + _1945);
    float _2063 = (((_1080 * _1031) + _1081) * _1045) * ((cbModelParam._m0[1u].w * (_2046 - _1947)) + _1947);
    float _2065 = (((_1080 * _1032) + _1081) * _1045) * ((cbModelParam._m0[1u].w * (_2048 - _1949)) + _1949);
    float _2068 = fma(_2065, cbSceneParam._m0[89u].z, fma(_2063, cbSceneParam._m0[89u].y, _2061 * cbSceneParam._m0[89u].x));
    float _2071 = fma(_2065, cbSceneParam._m0[90u].z, fma(_2063, cbSceneParam._m0[90u].y, _2061 * cbSceneParam._m0[90u].x));
    float _2074 = fma(_2065, cbSceneParam._m0[91u].z, fma(_2063, cbSceneParam._m0[91u].y, _2061 * cbSceneParam._m0[91u].x));
    vec4 _2082 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_967, _968));
    float _2084 = _2082.w;
    float _2096 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2084);
    float _2097 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2084);
    float _2098 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2084);
    uvec4 _2102 = floatBitsToUint(cbInstanceData._m0[_281 + 5u]);
    uint _2104 = _2102.x * 14u;
    uint _2105 = _2104 + 13u;
    float _2112 = _1045 + (-1.0);
    float _2117 = (cbLight._m0[_2105].x * _2112) + 1.0;
    float _2118 = (cbLight._m0[_2105].y * _2112) + 1.0;
    float _2119 = (cbLight._m0[_2105].z * _2112) + 1.0;
    float _2120 = (cbLight._m0[_2105].w * _2112) + 1.0;
    uint _2121 = _2104 + 5u;
    float _2127 = isnan(1.0) ? _2118 : (isnan(_2118) ? 1.0 : min(_2118, 1.0));
    uint _2131 = _2104 + 4u;
    float _2140 = isnan(1.0) ? _2117 : (isnan(_2117) ? 1.0 : min(_2117, 1.0));
    uint _2144 = _2104 | 1u;
    float _2155 = dot(vec3(cbLight._m0[_2104].xyz), vec3(_880, _881, _882));
    float _2158 = dot(vec3(cbLight._m0[_2144].xyz), vec3(_880, _881, _882));
    float _4377 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _4388 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2163 = (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * 0.3183098733425140380859375;
    float _2165 = (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * 0.3183098733425140380859375;
    float _2172 = ((cbLight._m0[_2121].x * _2127) * _2165) + (((cbLight._m0[_2131].x * _2096) * _2140) * _2163);
    float _2173 = ((_2127 * cbLight._m0[_2121].y) * _2165) + (((cbLight._m0[_2131].y * _2097) * _2140) * _2163);
    float _2174 = ((_2127 * cbLight._m0[_2121].z) * _2165) + (((cbLight._m0[_2131].z * _2098) * _2140) * _2163);
    uvec4 _2178 = floatBitsToUint(cbLight._m0[_2104 + 12u]);
    bool _2180 = _2178.x == 0u;
    float _2191;
    float _2193;
    float _2195;
    if (_2180)
    {
        _2191 = _2172;
        _2193 = _2173;
        _2195 = _2174;
    }
    else
    {
        uint _2199 = _2104 + 6u;
        float _2215 = (dot(vec3(cbLight._m0[_2104 + 2u].xyz), vec3(_880, _881, _882)) * 0.5) + 0.5;
        float _2216 = _2215 * _2215;
        float _4399 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        float _2217 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _2218 = isnan(1.0) ? _2119 : (isnan(_2119) ? 1.0 : min(_2119, 1.0));
        _2191 = (((cbLight._m0[_2199].x * 0.3183098733425140380859375) * _2217) * _2218) + _2172;
        _2193 = (((cbLight._m0[_2199].y * 0.3183098733425140380859375) * _2217) * _2218) + _2173;
        _2195 = (((cbLight._m0[_2199].z * 0.3183098733425140380859375) * _2217) * _2218) + _2174;
    }
    bool _2198 = _2178.y == 0u;
    float _2236;
    float _2238;
    float _2240;
    if (_2198)
    {
        _2236 = _2191;
        _2238 = _2193;
        _2240 = _2195;
    }
    else
    {
        uint _2409 = _2104 + 7u;
        float _2425 = (dot(vec3(cbLight._m0[_2104 + 3u].xyz), vec3(_880, _881, _882)) * 0.5) + 0.5;
        float _2426 = _2425 * _2425;
        float _4415 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2427 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _2428 = isnan(1.0) ? _2120 : (isnan(_2120) ? 1.0 : min(_2120, 1.0));
        _2236 = (((cbLight._m0[_2409].x * 0.3183098733425140380859375) * _2427) * _2428) + _2191;
        _2238 = (((cbLight._m0[_2409].y * 0.3183098733425140380859375) * _2427) * _2428) + _2193;
        _2240 = (((cbLight._m0[_2409].z * 0.3183098733425140380859375) * _2427) * _2428) + _2195;
    }
    uint _2243 = _2104 + 8u;
    float _2256 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2104].w)) * _883) * 0.949999988079071044921875);
    float _2257 = _2256 * _2256;
    float _2258 = cbLight._m0[_2104].x + _959;
    float _2259 = cbLight._m0[_2104].y + _960;
    float _2260 = cbLight._m0[_2104].z + _961;
    float _2264 = inversesqrt(dot(vec3(_2258, _2259, _2260), vec3(_2258, _2259, _2260)));
    float _2265 = _2264 * _2258;
    float _2266 = _2264 * _2259;
    float _2267 = _2264 * _2260;
    float _2268 = dot(vec3(_880, _881, _882), vec3(cbLight._m0[_2104].xyz));
    float _4431 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2271 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
    float _4442 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
    float _2272 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
    float _2273 = dot(vec3(_880, _881, _882), vec3(_2265, _2266, _2267));
    float _4453 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2276 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
    float _2277 = dot(vec3(cbLight._m0[_2104].xyz), vec3(_2265, _2266, _2267));
    float _4464 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2281 = _2257 * _2257;
    float _2285 = ((_2276 * _2276) * (_2281 + (-1.0))) + 1.0;
    float _2293 = exp2(log2(1.0 - (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0)))) * 5.0);
    float _2294 = 0.959999978542327880859375 - _1026;
    float _2296 = 0.959999978542327880859375 - _1027;
    float _2297 = 0.959999978542327880859375 - _1028;
    float _2304 = 1.0 - _2257;
    float _2315 = (0.5 / (((_2272 * ((_2271 * _2304) + _2257)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2304) + _2257) * _2271))) * _2271;
    float _4475 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2317 = (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (_2281 / ((_2285 * _2285) * 3.141590118408203125));
    uint _2331 = _2104 + 9u;
    float _2342 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2144].w)) * _883) * 0.949999988079071044921875);
    float _2343 = _2342 * _2342;
    float _2344 = cbLight._m0[_2144].x + _959;
    float _2345 = cbLight._m0[_2144].y + _960;
    float _2346 = cbLight._m0[_2144].z + _961;
    float _2350 = inversesqrt(dot(vec3(_2344, _2345, _2346), vec3(_2344, _2345, _2346)));
    float _2351 = _2350 * _2344;
    float _2352 = _2350 * _2345;
    float _2353 = _2350 * _2346;
    float _2354 = dot(vec3(_880, _881, _882), vec3(cbLight._m0[_2144].xyz));
    float _4486 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2357 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
    float _2358 = dot(vec3(_880, _881, _882), vec3(_2351, _2352, _2353));
    float _4497 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _2361 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
    float _2362 = dot(vec3(cbLight._m0[_2144].xyz), vec3(_2351, _2352, _2353));
    float _4508 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2366 = _2343 * _2343;
    float _2370 = ((_2361 * _2361) * (_2366 + (-1.0))) + 1.0;
    float _2377 = exp2(log2(1.0 - (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0)))) * 5.0);
    float _2384 = 1.0 - _2343;
    float _2394 = (0.5 / (((_2272 * ((_2357 * _2384) + _2343)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2384) + _2343) * _2357))) * _2357;
    float _4519 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2396 = (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0))) * (_2366 / ((_2370 * _2370) * 3.141590118408203125));
    float _2406 = (((((_2377 * _2294) + _1029) * cbLight._m0[_2331].x) * _2396) * _2127) + ((((cbLight._m0[_2243].x * _2096) * ((_2293 * _2294) + _1029)) * _2317) * _2140);
    float _2407 = (((((_2377 * _2296) + _1031) * cbLight._m0[_2331].y) * _2396) * _2127) + ((((cbLight._m0[_2243].y * _2097) * ((_2293 * _2296) + _1031)) * _2317) * _2140);
    float _2408 = (((((_2377 * _2297) + _1032) * cbLight._m0[_2331].z) * _2396) * _2127) + ((((cbLight._m0[_2243].z * _2098) * ((_2293 * _2297) + _1032)) * _2317) * _2140);
    float _2470;
    float _2472;
    float _2474;
    if (_2180)
    {
        _2470 = _2406;
        _2472 = _2407;
        _2474 = _2408;
    }
    else
    {
        uint _2476 = _2104 + 2u;
        uint _2480 = _2104 + 10u;
        float _2494 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2476].w)) * _883) * 0.949999988079071044921875);
        float _2495 = _2494 * _2494;
        float _2496 = cbLight._m0[_2476].x + _959;
        float _2497 = cbLight._m0[_2476].y + _960;
        float _2498 = cbLight._m0[_2476].z + _961;
        float _2502 = inversesqrt(dot(vec3(_2496, _2497, _2498), vec3(_2496, _2497, _2498)));
        float _2503 = _2502 * _2496;
        float _2504 = _2502 * _2497;
        float _2505 = _2502 * _2498;
        float _2506 = dot(vec3(_880, _881, _882), vec3(cbLight._m0[_2476].xyz));
        float _4530 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2509 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
        float _2510 = dot(vec3(_880, _881, _882), vec3(_2503, _2504, _2505));
        float _4541 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
        float _2513 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
        float _2514 = dot(vec3(cbLight._m0[_2476].xyz), vec3(_2503, _2504, _2505));
        float _4552 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2518 = _2495 * _2495;
        float _2522 = ((_2513 * _2513) * (_2518 + (-1.0))) + 1.0;
        float _2529 = exp2(log2(1.0 - (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0)))) * 5.0);
        float _2536 = 1.0 - _2495;
        float _2546 = (0.5 / (((_2272 * ((_2509 * _2536) + _2495)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2536) + _2495) * _2509))) * _2509;
        float _4563 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
        float _2548 = (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0))) * (_2518 / ((_2522 * _2522) * 3.141590118408203125));
        float _2549 = isnan(1.0) ? _2119 : (isnan(_2119) ? 1.0 : min(_2119, 1.0));
        _2470 = (((((_2529 * _2294) + _1029) * cbLight._m0[_2480].x) * _2548) * _2549) + _2406;
        _2472 = (((((_2529 * _2296) + _1031) * cbLight._m0[_2480].y) * _2548) * _2549) + _2407;
        _2474 = (((((_2529 * _2297) + _1032) * cbLight._m0[_2480].z) * _2548) * _2549) + _2408;
    }
    float _2584;
    float _2586;
    float _2588;
    if (_2198)
    {
        _2584 = _2470;
        _2586 = _2472;
        _2588 = _2474;
    }
    else
    {
        uint _2595 = _2104 + 3u;
        uint _2599 = _2104 + 11u;
        float _2613 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2595].w)) * _883) * 0.949999988079071044921875);
        float _2614 = _2613 * _2613;
        float _2615 = cbLight._m0[_2595].x + _959;
        float _2616 = cbLight._m0[_2595].y + _960;
        float _2617 = cbLight._m0[_2595].z + _961;
        float _2621 = inversesqrt(dot(vec3(_2615, _2616, _2617), vec3(_2615, _2616, _2617)));
        float _2622 = _2621 * _2615;
        float _2623 = _2621 * _2616;
        float _2624 = _2621 * _2617;
        float _2625 = dot(vec3(_880, _881, _882), vec3(cbLight._m0[_2595].xyz));
        float _4579 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
        float _2628 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
        float _2629 = dot(vec3(_880, _881, _882), vec3(_2622, _2623, _2624));
        float _4590 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
        float _2632 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
        float _2633 = dot(vec3(cbLight._m0[_2595].xyz), vec3(_2622, _2623, _2624));
        float _4601 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
        float _2637 = _2614 * _2614;
        float _2641 = ((_2632 * _2632) * (_2637 + (-1.0))) + 1.0;
        float _2648 = exp2(log2(1.0 - (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0)))) * 5.0);
        float _2655 = 1.0 - _2614;
        float _2665 = (0.5 / (((_2272 * ((_2628 * _2655) + _2614)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2655) + _2614) * _2628))) * _2628;
        float _4612 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
        float _2667 = (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0))) * (_2637 / ((_2641 * _2641) * 3.141590118408203125));
        float _2668 = isnan(1.0) ? _2120 : (isnan(_2120) ? 1.0 : min(_2120, 1.0));
        _2584 = (((((_2648 * _2294) + _1029) * cbLight._m0[_2599].x) * _2667) * _2668) + _2470;
        _2586 = (((((_2648 * _2296) + _1031) * cbLight._m0[_2599].y) * _2667) * _2668) + _2472;
        _2588 = (((((_2648 * _2297) + _1032) * cbLight._m0[_2599].z) * _2667) * _2668) + _2474;
    }
    float _2803;
    float _2805;
    float _2807;
    float _2809;
    float _2811;
    float _2813;
    if (_2102.y == 0u)
    {
        float _2743 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2744 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2743;
        float _2745 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2743;
        float _2746 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2743;
        uvec4 _2758 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2759 = _2758.x;
        uint _2770 = uint((float(_2758.y) * floor(float(uint(cbSceneParam._m0[85u].y * _968) / _2759))) + floor(float(uint(cbSceneParam._m0[85u].x * _967) / _2759)));
        float _2780 = (log2(_2746 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2781 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
        uint _2784 = uint(isnan(14.0) ? _2781 : (isnan(_2781) ? 14.0 : min(_2781, 14.0)));
        uvec4 _2789 = texelFetch(g_lightClusterGridBuffer, int(((_2784 << 2u) + (_2770 << 6u)) >> 2u));
        uint _2790 = _2789.x;
        uint _2791 = _2758.z;
        float _2891;
        float _2893;
        float _2895;
        float _2897;
        float _2899;
        float _2901;
        if (((((1u << ((_2791 >> 4u) & 15u)) + 4294967295u) & _2790) == 0u) || ((_2791 & 240u) == 0u))
        {
            _2891 = 0.0;
            _2893 = 0.0;
            _2895 = 0.0;
            _2897 = 0.0;
            _2899 = 0.0;
            _2901 = 0.0;
        }
        else
        {
            float _2892;
            float _2894;
            float _2896;
            float _2898;
            float _2900;
            float _2902;
            float _3035 = 0.0;
            float _3036 = 0.0;
            float _3037 = 0.0;
            float _3038 = 0.0;
            float _3039 = 0.0;
            float _3040 = 0.0;
            uint _3041 = 0u;
            uint _3050;
            bool _3051;
            for (;;)
            {
                _3050 = texelFetch(g_lightClassification, int((((_2784 << 5u) + (_2770 << 9u)) + (_3041 << 2u)) >> 2u)).x;
                _3051 = _3050 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3051)
                {
                    frontier_phi_61_pred = _3035;
                    frontier_phi_61_pred_1 = _3040;
                    frontier_phi_61_pred_2 = _3039;
                    frontier_phi_61_pred_3 = _3038;
                    frontier_phi_61_pred_4 = _3037;
                    frontier_phi_61_pred_5 = _3036;
                }
                else
                {
                    float _3159;
                    float _3160;
                    float _3161;
                    float _3162;
                    float _3163;
                    float _3164;
                    uint _3165;
                    _3159 = _3035;
                    _3160 = _3036;
                    _3161 = _3037;
                    _3162 = _3038;
                    _3163 = _3039;
                    _3164 = _3040;
                    _3165 = _3050;
                    float _3091;
                    float _3092;
                    float _3093;
                    float _3094;
                    float _3095;
                    float _3096;
                    for (;;)
                    {
                        uint _3169 = uint(findLSB(_3165)) + (_3041 << 5u);
                        uint _3166 = (_3165 + 4294967295u) & _3165;
                        uint _3171 = _3169 * 48u;
                        vec4 _3185 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3171)).x, texelFetch(g_PointLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3171 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3171 + 3u)).x));
                        uint _3191 = (_3169 * 48u) + 4u;
                        vec4 _3204 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3191)).x, texelFetch(g_PointLightRenderingBuffer, int(_3191 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3191 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3191 + 3u)).x));
                        uint _3210 = (_3169 * 48u) + 8u;
                        vec3 _3221 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3210)).x, texelFetch(g_PointLightRenderingBuffer, int(_3210 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3210 + 2u)).x));
                        float _3225 = _3185.x - _2744;
                        float _3226 = _3185.y - _2745;
                        float _3227 = _3185.z - _2746;
                        float _3228 = dot(vec3(_3225, _3226, _3227), vec3(_3225, _3226, _3227));
                        float _3231 = inversesqrt(_3228);
                        float _3232 = _3231 * _3225;
                        float _3233 = _3231 * _3226;
                        float _3234 = _3231 * _3227;
                        float _3235 = dot(vec3(_986, _989, _992), vec3(_3232, _3233, _3234));
                        float _3240 = 1.0 - (_3228 * _3185.w);
                        float _4638 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                        float _3241 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
                        float _3242 = sqrt(_3228) * _3204.w;
                        float _3245 = 1.39999997615814208984375 / (_3242 + 1.39999997615814208984375);
                        float _3246 = _3245 * _3245;
                        float _3249 = ((1.0 - _3246) * _3235) + _3246;
                        float _3252 = _3242 * _3242;
                        float _3256 = ((isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0))) * _3241) / ((_3252 * 0.699999988079071044921875) + 1.0);
                        float _3260 = (-0.0) - _2744;
                        float _3261 = (-0.0) - _2745;
                        float _3262 = (-0.0) - _2746;
                        float _3266 = inversesqrt(dot(vec3(_3260, _3261, _3262), vec3(_3260, _3261, _3262)));
                        float _3267 = _3266 * _3260;
                        float _3268 = _3266 * _3261;
                        float _3269 = _3266 * _3262;
                        float _3277 = exp2(log2(1.0 / ((_3252 * 3.5) + 5.0)) * 0.25);
                        float _3278 = 1.0 - _1061;
                        float _3285 = sqrt(1.0 - ((1.0 - (_3278 * _3278)) * (1.0 - (_3277 * _3277))));
                        float _3286 = _3285 * _3285;
                        float _3287 = _3286 * _3286;
                        float _3288 = _3267 + _3232;
                        float _3289 = _3268 + _3233;
                        float _3290 = _3269 + _3234;
                        float _3294 = inversesqrt(dot(vec3(_3288, _3289, _3290), vec3(_3288, _3289, _3290)));
                        float _3298 = dot(vec3(_986, _989, _992), vec3(_3267, _3268, _3269));
                        float _4654 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                        float _3301 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
                        float _3302 = dot(vec3(_986, _989, _992), vec3(_3294 * _3288, _3294 * _3289, _3294 * _3290));
                        float _4665 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                        float _3305 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
                        float _3309 = ((_3305 * _3305) * (_3287 + (-1.0))) + 1.0;
                        float _3310 = _3245 * _3286;
                        float _3311 = _3310 * _3310;
                        float _3314 = ((1.0 - _3311) * _3235) + _3311;
                        float _4676 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                        float _3315 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
                        float _3316 = 1.0 - _3286;
                        float _3326 = (0.5 / (((_3315 * ((_3301 * _3316) + _3286)) + 9.9999999392252902907785028219223e-09) + (((_3315 * _3316) + _3286) * _3301))) * _3315;
                        float _4687 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                        float _3337 = (((_3287 * 3.1415927410125732421875) * (isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0)))) / ((_3309 * _3309) * ((_3252 * 2.1991131305694580078125) + 3.141590118408203125))) * _3241;
                        _3094 = (_3256 * _3204.x) + _3162;
                        _3095 = (_3256 * _3204.y) + _3163;
                        _3096 = (_3256 * _3204.z) + _3164;
                        _3091 = (_3337 * _3221.x) + _3159;
                        _3092 = (_3337 * _3221.y) + _3160;
                        _3093 = (_3337 * _3221.z) + _3161;
                        if (_3166 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3159 = _3091;
                            _3160 = _3092;
                            _3161 = _3093;
                            _3162 = _3094;
                            _3163 = _3095;
                            _3164 = _3096;
                            _3165 = _3166;
                        }
                    }
                    frontier_phi_61_pred = _3091;
                    frontier_phi_61_pred_1 = _3096;
                    frontier_phi_61_pred_2 = _3095;
                    frontier_phi_61_pred_3 = _3094;
                    frontier_phi_61_pred_4 = _3093;
                    frontier_phi_61_pred_5 = _3092;
                }
                _2892 = frontier_phi_61_pred;
                _2902 = frontier_phi_61_pred_1;
                _2900 = frontier_phi_61_pred_2;
                _2898 = frontier_phi_61_pred_3;
                _2896 = frontier_phi_61_pred_4;
                _2894 = frontier_phi_61_pred_5;
                uint _3042 = _3041 + 1u;
                if (_3042 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3035 = _2892;
                    _3036 = _2894;
                    _3037 = _2896;
                    _3038 = _2898;
                    _3039 = _2900;
                    _3040 = _2902;
                    _3041 = _3042;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2891 = _2892;
            _2893 = _2894;
            _2895 = _2896;
            _2897 = _2898;
            _2899 = _2900;
            _2901 = _2902;
        }
        uvec4 _2905 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2906 = _2905.z;
        uint _2908 = (_2906 >> 8u) & 15u;
        float _3003;
        float _3005;
        float _3007;
        float _3009;
        float _3011;
        float _3013;
        if (((4294967295u << _2908) & _2790) == 0u)
        {
            _3003 = _2891;
            _3005 = _2893;
            _3007 = _2895;
            _3009 = _2897;
            _3011 = _2899;
            _3013 = _2901;
        }
        else
        {
            float _3028 = inversesqrt(dot(vec3(_2744, _2745, _2746), vec3(_2744, _2745, _2746)));
            float _3029 = _3028 * _2744;
            float _3030 = _3028 * _2745;
            float _3031 = _3028 * _2746;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2908 < ((_2906 >> 12u) & 15u))
            {
                float _3004;
                float _3006;
                float _3008;
                float _3010;
                float _3012;
                float _3014;
                float _3142 = _2891;
                float _3143 = _2893;
                float _3144 = _2895;
                float _3145 = _2897;
                float _3146 = _2899;
                float _3147 = _2901;
                uint _3148 = _2908;
                uint _3157;
                bool _3158;
                for (;;)
                {
                    _3157 = texelFetch(g_lightClassification, int((((_2784 << 5u) + (_2770 << 9u)) + (_3148 << 2u)) >> 2u)).x;
                    _3158 = _3157 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3158)
                    {
                        frontier_phi_67_pred = _3145;
                        frontier_phi_67_pred_1 = _3146;
                        frontier_phi_67_pred_2 = _3147;
                        frontier_phi_67_pred_3 = _3144;
                        frontier_phi_67_pred_4 = _3143;
                        frontier_phi_67_pred_5 = _3142;
                    }
                    else
                    {
                        float _3342;
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3635;
                        float _3636;
                        float _3637;
                        float _3638;
                        float _3639;
                        float _3640;
                        float _3355 = _3142;
                        float _3356 = _3143;
                        float _3357 = _3144;
                        float _3358 = _3145;
                        float _3359 = _3146;
                        float _3360 = _3147;
                        uint _3361 = _3157;
                        uint _3362;
                        vec4 _3387;
                        float _3388;
                        vec4 _3403;
                        vec3 _3415;
                        vec4 _3430;
                        vec4 _3445;
                        float _3491;
                        bool _3492;
                        for (;;)
                        {
                            uint _3372 = ((_3148 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3361));
                            _3362 = (_3361 + 4294967295u) & _3361;
                            uint _3374 = _3372 * 40u;
                            _3387 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3374)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 3u)).x));
                            _3388 = _3387.w;
                            uint _3390 = (_3372 * 40u) + 4u;
                            _3403 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3390)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 3u)).x));
                            uint _3405 = (_3372 * 40u) + 8u;
                            _3415 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3405)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 2u)).x));
                            uint _3417 = (_3372 * 40u) + 16u;
                            _3430 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3417)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 3u)).x));
                            uint _3432 = (_3372 * 40u) + 20u;
                            _3445 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3432)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 3u)).x));
                            uint _3447 = (_3372 * 40u) + 24u;
                            vec4 _3460 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3447)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 3u)).x));
                            uint _3466 = (_3372 * 40u) + 28u;
                            vec4 _3479 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3466)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 3u)).x));
                            _3491 = fma(_2746, _3479.z, fma(_2745, _3479.y, _3479.x * _2744)) + _3479.w;
                            _3492 = !((fma(_2746, _3460.z, fma(_2745, _3460.y, _3460.x * _2744)) + _3460.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3492)
                            {
                                float _3519 = _3387.x - _2744;
                                float _3520 = _3387.y - _2745;
                                float _3521 = _3387.z - _2746;
                                float _3522 = dot(vec3(_3519, _3520, _3521), vec3(_3519, _3520, _3521));
                                float _3525 = inversesqrt(_3522);
                                float _3526 = _3525 * _3519;
                                float _3527 = _3525 * _3520;
                                float _3528 = _3525 * _3521;
                                float _3532 = 1.0 - (_3522 / (_3388 * _3388));
                                float _4698 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                                float _3533 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
                                float _3537 = sqrt(_3522) * _3403.w;
                                float _3539 = 1.39999997615814208984375 / (_3537 + 1.39999997615814208984375);
                                float _3540 = _3539 * _3539;
                                float _3543 = ((1.0 - _3540) * dot(vec3(_3526, _3527, _3528), vec3(_986, _989, _992))) + _3540;
                                float _3546 = _3537 * _3537;
                                float _3550 = (fma(_2746, _3430.z, fma(_2745, _3430.y, _3430.x * _2744)) + _3430.w) / _3491;
                                float _3551 = (fma(_2746, _3445.z, fma(_2745, _3445.y, _3445.x * _2744)) + _3445.w) / _3491;
                                float _3555 = 1.0 - dot(vec2(_3550, _3551), vec2(_3550, _3551));
                                float _4714 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                                float _3556 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
                                float _3557 = _3556 * (((isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0))) * _3533) / ((_3546 * 0.699999988079071044921875) + 1.0));
                                float _3569 = exp2(log2(1.0 / ((_3546 * 3.5) + 5.0)) * 0.25);
                                float _3570 = 1.0 - _1061;
                                float _3577 = sqrt(1.0 - ((1.0 - (_3570 * _3570)) * (1.0 - (_3569 * _3569))));
                                float _3578 = _3577 * _3577;
                                float _3579 = _3578 * _3578;
                                float _3580 = _3526 - _3029;
                                float _3581 = _3527 - _3030;
                                float _3582 = _3528 - _3031;
                                float _3586 = inversesqrt(dot(vec3(_3580, _3581, _3582), vec3(_3580, _3581, _3582)));
                                float _3590 = dot(vec3(_986, _989, _992), vec3((-0.0) - _3029, (-0.0) - _3030, (-0.0) - _3031));
                                float _4725 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                                float _3593 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
                                float _3594 = dot(vec3(_986, _989, _992), vec3(_3586 * _3580, _3586 * _3581, _3586 * _3582));
                                float _4736 = isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0));
                                float _3597 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
                                float _3601 = ((_3597 * _3597) * (_3579 + (-1.0))) + 1.0;
                                float _3602 = _3539 * _3578;
                                float _3603 = _3602 * _3602;
                                float _3609 = ((1.0 - _3603) * dot(vec3(_986, _989, _992), vec3(_3526, _3527, _3528))) + _3603;
                                float _4747 = isnan(0.0) ? _3609 : (isnan(_3609) ? 0.0 : max(_3609, 0.0));
                                float _3610 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
                                float _3611 = 1.0 - _3578;
                                float _3621 = (0.5 / (((_3610 * ((_3593 * _3611) + _3578)) + 9.9999999392252902907785028219223e-09) + (((_3610 * _3611) + _3578) * _3593))) * _3610;
                                float _4758 = isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0));
                                float _3631 = (_3556 * _3533) * (((_3579 * 3.1415927410125732421875) * (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0)))) / ((_3601 * _3601) * ((_3546 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3631 * _3415.x;
                                frontier_phi_73_pred_1 = _3631 * _3415.y;
                                frontier_phi_73_pred_2 = _3557 * _3403.z;
                                frontier_phi_73_pred_3 = _3557 * _3403.y;
                                frontier_phi_73_pred_4 = _3557 * _3403.x;
                                frontier_phi_73_pred_5 = _3631 * _3415.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3635 = frontier_phi_73_pred;
                            _3636 = frontier_phi_73_pred_1;
                            _3640 = frontier_phi_73_pred_2;
                            _3639 = frontier_phi_73_pred_3;
                            _3638 = frontier_phi_73_pred_4;
                            _3637 = frontier_phi_73_pred_5;
                            _3345 = _3638 + _3358;
                            _3346 = _3639 + _3359;
                            _3347 = _3640 + _3360;
                            _3342 = _3635 + _3355;
                            _3343 = _3636 + _3356;
                            _3344 = _3637 + _3357;
                            if (_3362 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3355 = _3342;
                                _3356 = _3343;
                                _3357 = _3344;
                                _3358 = _3345;
                                _3359 = _3346;
                                _3360 = _3347;
                                _3361 = _3362;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3345;
                        frontier_phi_67_pred_1 = _3346;
                        frontier_phi_67_pred_2 = _3347;
                        frontier_phi_67_pred_3 = _3344;
                        frontier_phi_67_pred_4 = _3343;
                        frontier_phi_67_pred_5 = _3342;
                    }
                    _3010 = frontier_phi_67_pred;
                    _3012 = frontier_phi_67_pred_1;
                    _3014 = frontier_phi_67_pred_2;
                    _3008 = frontier_phi_67_pred_3;
                    _3006 = frontier_phi_67_pred_4;
                    _3004 = frontier_phi_67_pred_5;
                    uint _3149 = _3148 + 1u;
                    if (_3149 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3142 = _3004;
                        _3143 = _3006;
                        _3144 = _3008;
                        _3145 = _3010;
                        _3146 = _3012;
                        _3147 = _3014;
                        _3148 = _3149;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3012;
                frontier_phi_55_56_ladder_1 = _3014;
                frontier_phi_55_56_ladder_2 = _3010;
                frontier_phi_55_56_ladder_3 = _3008;
                frontier_phi_55_56_ladder_4 = _3006;
                frontier_phi_55_56_ladder_5 = _3004;
            }
            else
            {
                frontier_phi_55_56_ladder = _2899;
                frontier_phi_55_56_ladder_1 = _2901;
                frontier_phi_55_56_ladder_2 = _2897;
                frontier_phi_55_56_ladder_3 = _2895;
                frontier_phi_55_56_ladder_4 = _2893;
                frontier_phi_55_56_ladder_5 = _2891;
            }
            _3003 = frontier_phi_55_56_ladder_5;
            _3005 = frontier_phi_55_56_ladder_4;
            _3007 = frontier_phi_55_56_ladder_3;
            _3009 = frontier_phi_55_56_ladder_2;
            _3011 = frontier_phi_55_56_ladder;
            _3013 = frontier_phi_55_56_ladder_1;
        }
        float _3018 = isnan(1.0) ? _1045 : (isnan(_1045) ? 1.0 : min(_1045, 1.0));
        _2803 = (_3018 * _3009) + _2236;
        _2805 = (_3018 * _3011) + _2238;
        _2807 = (_3018 * _3013) + _2240;
        _2809 = ((_3003 * _1029) * _3018) + _2584;
        _2811 = ((_3005 * _1031) * _3018) + _2586;
        _2813 = ((_3007 * _1032) * _3018) + _2588;
    }
    else
    {
        _2803 = _2236;
        _2805 = _2238;
        _2807 = _2240;
        _2809 = _2584;
        _2811 = _2586;
        _2813 = _2588;
    }
    float _4774 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
    float _4785 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
    float _4796 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
    uint _2833 = _281 + 6u;
    float _2841 = _967 / cbSceneParam._m0[86u].x;
    float _2842 = _968 / cbSceneParam._m0[86u].y;
    vec4 _2856 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2841, _2842, (log2((isnan(cbSceneParam._m0[77u].w) ? _902 : (isnan(_902) ? cbSceneParam._m0[77u].w : min(_902, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2858 = _2856.x;
    float _2859 = _2856.y;
    float _2860 = _2856.z;
    float _2861 = _2856.w;
    float _2953;
    float _2955;
    float _2957;
    float _2959;
    if (_902 > cbSceneParam._m0[78u].w)
    {
        float _2916 = isnan(_902) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _902 : min(cbSceneParam._m0[80u].w, _902));
        float _2917 = _2916 / _902;
        float _2928 = _2917 * _952;
        float _2929 = _953 * _2917;
        float _2930 = (-0.0) - _2929;
        float _2931 = _2917 * _954;
        float _2933 = (cbSceneParam._m0[77u].w * _2930) / _2916;
        float _2934 = _2933 + cbSceneParam._m0[79u].w;
        float _2935 = cbSceneParam._m0[79u].w - _2929;
        float _2941 = sqrt(((_2928 * _2928) + (_2929 * _2929)) + (_2931 * _2931));
        float _2944 = (1.0 - (cbSceneParam._m0[77u].w / _2916)) * _2941;
        float _2949 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2951 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3104;
        if (abs((_2930 - _2933) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3104 = ((((_2934 > 0.0) ? exp2(_2949 * _2934) : (2.0 - exp2(_2951 * _2934))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2944;
        }
        else
        {
            float _3064 = 1.0 / cbSceneParam._m0[80u].x;
            float _3065 = isnan(_2935) ? _2934 : (isnan(_2934) ? _2935 : max(_2934, _2935));
            float _3066 = isnan(_2935) ? _2934 : (isnan(_2934) ? _2935 : min(_2934, _2935));
            float _3075 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : min(_3065, 0.0));
            float _3076 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : min(_3066, 0.0));
            _3104 = ((abs(_2941 / _2930) * cbSceneParam._m0[80u].y) * ((((_3075 - _3076) * 2.0) - ((exp2(_2949 * (isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0)))) - exp2(_2949 * (isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0))))) * _3064)) - ((exp2(_2951 * _3075) - exp2(_2951 * _3076)) * _3064))) + (_2944 * cbSceneParam._m0[80u].z);
        }
        vec4 _3106 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2841, _2842, 1.0), 0.0);
        float _3115 = exp2((_3104 * (-1.44269502162933349609375)) * (1.0 - _3106.w));
        float _3116 = log2(_3115);
        float _3132 = log2(_2861);
        _2953 = (exp2(_3132 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3116 * cbSceneParam._m0[78u].x)) * _3106.x) / cbSceneParam._m0[78u].x)) + _2858;
        _2955 = (exp2(_3132 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3116 * cbSceneParam._m0[78u].y)) * _3106.y) / cbSceneParam._m0[78u].y)) + _2859;
        _2957 = (exp2(_3132 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3116 * cbSceneParam._m0[78u].z)) * _3106.z) / cbSceneParam._m0[78u].z)) + _2860;
        _2959 = _3115 * _2861;
    }
    else
    {
        _2953 = _2858;
        _2955 = _2859;
        _2957 = _2860;
        _2959 = _2861;
    }
    float _2971 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2972 = _2971 == 3.0;
    float _2973 = log2(_2959);
    float _2980 = exp2(_2973 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0))) * (_2803 + ((isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))) * _1045))) + ((_2809 + ((isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0))) * _1853)) * cbPerFrame._m0[3u].x));
    float _2981 = exp2(_2973 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0))) * (_2805 + ((isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))) * _1045))) + ((_2811 + ((isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0))) * _1853)) * cbPerFrame._m0[3u].x));
    float _2982 = exp2(_2973 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0))) * (_2807 + ((isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))) * _1045))) + ((_2813 + ((isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0))) * _1853)) * cbPerFrame._m0[3u].x));
    float _2991 = (_2971 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2991 * (_2972 ? _2980 : (_2980 + (cbSceneParam._m0[72u].w * _2953)));
    SV_Target.y = _2991 * (_2972 ? _2981 : (_2981 + (cbSceneParam._m0[72u].w * _2955)));
    SV_Target.z = _2991 * (_2972 ? _2982 : (_2982 + (cbSceneParam._m0[72u].w * _2957)));
    SV_Target.w = cbInstanceData._m0[_2833].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2833].w;
}


