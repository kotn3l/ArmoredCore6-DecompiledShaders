#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1371;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3981 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3992 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _4003 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _345 = _340.x * cbMtdParam._m0[11u].x;
    float _346 = _340.y * cbMtdParam._m0[11u].y;
    float _347 = _340.z * cbMtdParam._m0[11u].z;
    vec4 _366 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _402 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _404 = _402.x;
    float _416 = dot(vec4(_404, _402.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _433 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_404 - _416) * cbMtdParam._m0[24u].y) + _416) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4014 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _434 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
    float _441 = (_434 * ((_366.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _442 = (_434 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _443 = (_434 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    float _447 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _441;
    float _450 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _442;
    float _453 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _443;
    float _460 = ((_441 - _447) * (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0)))) + _447;
    float _461 = ((_442 - _450) * (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0)))) + _450;
    float _462 = ((_443 - _453) * (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0)))) + _453;
    vec4 _480 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _505 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _522 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _524 = _522.x;
    float _525 = _522.y;
    float _526 = _522.z;
    float _535 = ((_505.z - _526) * _434) + _526;
    float _538 = ((((_505.x - _524) * _434) + _524) * 2.0) + (-1.0);
    float _539 = ((((_505.y - _525) * _434) + _525) * 2.0) + (-1.0);
    float _540 = dot(vec2(_538, _539), vec2(_538, _539));
    float _4025 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _545 = sqrt(1.0 - (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))));
    vec4 _558 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _576 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _302) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _303) + cbTextureTilingScale._m0[11u].w));
    float _578 = _576.x;
    float _579 = 1.0 - _578;
    float _585 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _588 = ((isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : min(_585, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _597 = (_588 - ((((((_578 - _579) * cbMtdParam._m0[24u].z) + _579) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _588))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4046 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _598 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _605 = (_598 * (cbMtdParam._m0[17u].x - _460)) + _460;
    float _606 = (_598 * (cbMtdParam._m0[17u].y - _461)) + _461;
    float _607 = (_598 * (cbMtdParam._m0[17u].z - _462)) + _462;
    vec4 _619 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _621 = _619.x;
    float _622 = 1.0 - _621;
    float _647 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_621 - _622) * cbMtdParam._m0[24u].w) + _622) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4057 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _648 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _656 = ((((cbMtdParam._m0[10u].x - _605) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _648) + _605;
    float _657 = ((((cbMtdParam._m0[10u].y - _606) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _648) + _606;
    float _658 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _607)) * _648) + _607;
    vec4 _684 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _686 = _684.x;
    float _704 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _302) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _303) + cbTextureTilingScale._m0[9u].w)).x - _686) * _434) + _686;
    float _708 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _704) * cbMtdParam._m0[19u].z) + _704;
    float _710 = _708 - (_708 * _598);
    float _712 = _710 - (_710 * _648);
    float _717 = (((_480.z - _535) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _535;
    vec4 _731 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _302) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _303) + cbTextureTilingScale._m0[15u].w));
    float _738 = (_731.x * 2.0) + (-1.0);
    float _739 = (_731.y * 2.0) + (-1.0);
    float _740 = dot(vec2(_738, _739), vec2(_738, _739));
    float _4068 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _748 = (_598 * (_731.z - _717)) + _717;
    float _751 = ((cbMtdParam._m0[23u].y - _748) * _648) + _748;
    vec4 _770 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _776 = (_770.x * 2.0) + (-1.0);
    float _777 = (_770.y * 2.0) + (-1.0);
    float _778 = dot(vec2(_776, _777), vec2(_776, _777));
    float _4079 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _788 = _538 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_480.x * 2.0) + (-1.0)));
    float _789 = _539 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_480.y * 2.0) + (-1.0)));
    float _801 = (((_738 - _788) + (cbMtdParam._m0[21u].x * _788)) * _598) + _788;
    float _802 = (((_739 - _789) + (cbMtdParam._m0[21u].x * _789)) * _598) + _789;
    float _803 = (_598 * (sqrt(1.0 - (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0)))) - _545)) + _545;
    float _814 = (((_776 - _801) + (_801 * cbMtdParam._m0[22u].z)) * _648) + _801;
    float _815 = (((_777 - _802) + (_802 * cbMtdParam._m0[22u].z)) * _648) + _802;
    float _816 = ((sqrt(1.0 - (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0)))) - _803) * _648) + _803;
    float _818 = cbMtdParam._m0[22u].x + _558.w;
    float _821 = fma(_816, _251 * NORMAL.x, fma(_815, _258 * TANGENT.x, (_244 * _236) * _814));
    float _824 = fma(_816, _251 * NORMAL.y, fma(_815, _258 * TANGENT.y, (_244 * _237) * _814));
    float _827 = fma(_816, _251 * NORMAL.z, fma(_815, _258 * TANGENT.z, (_244 * _238) * _814));
    float _831 = inversesqrt(dot(vec3(_821, _824, _827), vec3(_821, _824, _827)));
    float _832 = _831 * _821;
    float _833 = _831 * _824;
    float _834 = _831 * _827;
    float _4090 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _835 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _4101 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _4112 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _4123 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _4134 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _4145 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _840 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
    float _854 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _894 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _904 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _894);
    float _905 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _894);
    float _906 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _894);
    float _910 = inversesqrt(dot(vec3(_904, _905, _906), vec3(_904, _905, _906)));
    float _911 = _904 * _910;
    float _912 = _905 * _910;
    float _913 = _906 * _910;
    float _919 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _920 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _938 = fma(_834, cbSceneParam._m0[5u].z, fma(_833, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _832));
    float _941 = fma(_834, cbSceneParam._m0[6u].z, fma(_833, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _832));
    float _944 = fma(_834, cbSceneParam._m0[7u].z, fma(_833, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _832));
    uint _958 = (_283 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _964 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0)))) * cbInstanceData._m0[_958].x;
    float _965 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0)))) * cbInstanceData._m0[_958].y;
    float _966 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0)))) * cbInstanceData._m0[_958].z;
    float _4156 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _967 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
    float _4167 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _968 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
    float _4178 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _969 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _970 = 1.0 - _840;
    float _971 = _967 * _970;
    float _972 = _968 * _970;
    float _973 = _969 * _970;
    float _978 = (_967 + (-0.039999999105930328369140625)) * _840;
    float _979 = (_968 + (-0.039999999105930328369140625)) * _840;
    float _980 = (_969 + (-0.039999999105930328369140625)) * _840;
    float _981 = _978 + 0.039999999105930328369140625;
    float _983 = _979 + 0.039999999105930328369140625;
    float _984 = _980 + 0.039999999105930328369140625;
    vec4 _993 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _919, cbSceneParam._m0[86u].y * _920));
    float _997 = ((isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * TEXCOORD_5.w) * _993.x;
    float _998 = dot(vec3(_832, _833, _834), vec3(_911, _912, _913));
    float _1001 = _998 * 2.0;
    float _1005 = (_1001 * _832) - _911;
    float _1006 = (_1001 * _833) - _912;
    float _1007 = (_1001 * _834) - _913;
    float _1011 = abs(dot(vec3(_911, _912, _913), vec3(_832, _833, _834)));
    float _4189 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _1013 = sqrt(_835);
    float _1026 = exp2((_1013 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1013 * 3.0));
    float _1032 = (1.0 - _1026) * ((_1013 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1033 = _1026 * _1013;
    float _1061 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1065 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1069 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1370;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1095 = fma(_1069, cbModelParam._m0[26u].z, fma(_1065, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1061));
        float _1099 = fma(_1069, cbModelParam._m0[27u].z, fma(_1065, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1061));
        float _1103 = fma(_1069, cbModelParam._m0[28u].z, fma(_1065, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1061));
        float _1128 = _1061 + _832;
        float _1129 = _1065 + _833;
        float _1130 = _1069 + _834;
        float _1140 = fma(_1130, cbModelParam._m0[26u].z, fma(_1129, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1128)) - _1095;
        float _1141 = fma(_1130, cbModelParam._m0[27u].z, fma(_1129, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1128)) - _1099;
        float _1142 = fma(_1130, cbModelParam._m0[28u].z, fma(_1129, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1128)) - _1103;
        float _1146 = inversesqrt(dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142)));
        float _1159 = ((_1146 * _1140) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1095 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1160 = ((_1146 * _1141) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1099 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1161 = ((_1146 * _1142) / cbModelParam._m0[34u].z) + ((((((_1103 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1164 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        float _1198 = exp2((_1164.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1164.x + (-0.5));
        float _1200 = _1198 * (_1164.y + (-0.5));
        float _1201 = _1198 * (_1164.z + (-0.5));
        float _1208 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1171.x + (-0.5));
        float _1210 = _1208 * (_1171.y + (-0.5));
        float _1211 = _1208 * (_1171.z + (-0.5));
        float _1218 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1178.x + (-0.5));
        float _1220 = _1218 * (_1178.y + (-0.5));
        float _1221 = _1218 * (_1178.z + (-0.5));
        float _1228 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1185.x + (-0.5));
        float _1230 = _1228 * (_1185.y + (-0.5));
        float _1231 = _1228 * (_1185.z + (-0.5));
        float _1232 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1233 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = _1199 * 0.5;
        float _1236 = _1209 * 0.5;
        float _1237 = _1219 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1252 = (dot(vec3(_832, _833, _834), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _4215 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1262 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1232 + 9.9999997473787516355514526367188e-06);
        float _4226 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _1264 = _1263 * 2.0;
        float _1268 = (1.0 - _1263) / (_1263 + 1.0);
        float _4237 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _1278 = ((((1.0 - _1269) * (_1264 + 2.0)) * exp2(log2(isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_1264 + 1.0))) + _1269) * _1232;
        float _1279 = _1200 * 0.5;
        float _1280 = _1210 * 0.5;
        float _1281 = _1220 * 0.5;
        float _1282 = dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281));
        float _1287 = (_1282 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1282);
        float _1295 = (dot(vec3(_832, _833, _834), vec3(_1287 * _1279, _1287 * _1280, _1287 * _1281)) + 1.0) * 0.5;
        float _4248 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1304 = sqrt(((_1280 * _1280) + (_1279 * _1279)) + (_1281 * _1281)) / (_1233 + 9.9999997473787516355514526367188e-06);
        float _4259 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _1306 = _1305 * 2.0;
        float _1310 = (1.0 - _1305) / (_1305 + 1.0);
        float _4270 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _1320 = ((((1.0 - _1311) * (_1306 + 2.0)) * exp2(log2(isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (_1306 + 1.0))) + _1311) * _1233;
        float _1321 = _1201 * 0.5;
        float _1322 = _1211 * 0.5;
        float _1323 = _1221 * 0.5;
        float _1324 = dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323));
        float _1329 = (_1324 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1324);
        float _1337 = (dot(vec3(_832, _833, _834), vec3(_1329 * _1321, _1329 * _1322, _1329 * _1323)) + 1.0) * 0.5;
        float _4281 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1346 = sqrt(((_1322 * _1322) + (_1321 * _1321)) + (_1323 * _1323)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _4292 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1348 = _1347 * 2.0;
        float _1352 = (1.0 - _1347) / (_1347 + 1.0);
        float _4303 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _1362 = ((((1.0 - _1353) * (_1348 + 2.0)) * exp2(log2(isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_1348 + 1.0))) + _1353) * _1234;
        _1370 = _1201;
        _1372 = _1200;
        _1373 = _1199;
        _1374 = _1211;
        _1375 = _1210;
        _1376 = _1209;
        _1377 = _1221;
        _1378 = _1220;
        _1379 = _1219;
        _1380 = _1234;
        _1381 = _1233;
        _1382 = _1232;
        _1383 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)));
        _1384 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)));
        _1385 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)));
    }
    else
    {
        _1370 = _1371;
        _1372 = _1371;
        _1373 = _1371;
        _1374 = _1371;
        _1375 = _1371;
        _1376 = _1371;
        _1377 = _1371;
        _1378 = _1371;
        _1379 = _1371;
        _1380 = _1371;
        _1381 = _1371;
        _1382 = _1371;
        _1383 = 0.0;
        _1384 = 0.0;
        _1385 = 0.0;
    }
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1410 = fma(_1069, cbModelParam._m0[30u].z, fma(_1065, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1061));
        float _1414 = fma(_1069, cbModelParam._m0[31u].z, fma(_1065, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1061));
        float _1418 = fma(_1069, cbModelParam._m0[32u].z, fma(_1065, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1061));
        float _1441 = _1061 + _832;
        float _1442 = _1065 + _833;
        float _1443 = _1069 + _834;
        float _1453 = fma(_1443, cbModelParam._m0[30u].z, fma(_1442, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1441)) - _1410;
        float _1454 = fma(_1443, cbModelParam._m0[31u].z, fma(_1442, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1441)) - _1414;
        float _1455 = fma(_1443, cbModelParam._m0[32u].z, fma(_1442, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1441)) - _1418;
        float _1459 = inversesqrt(dot(vec3(_1453, _1454, _1455), vec3(_1453, _1454, _1455)));
        float _1472 = ((_1459 * _1453) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1410 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1473 = ((_1459 * _1454) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1414 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1474 = ((_1459 * _1455) / cbModelParam._m0[35u].z) + ((((((_1418 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1476 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1472, _1473, _1474), 0.0);
        vec4 _1483 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1472, _1473, _1474), 0.0);
        vec4 _1490 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1472, _1473, _1474), 0.0);
        vec4 _1497 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1472, _1473, _1474), 0.0);
        float _1509 = exp2((_1476.w + (-0.5)) * 20.0) * 2.0;
        float _1510 = _1509 * (_1476.x + (-0.5));
        float _1511 = _1509 * (_1476.y + (-0.5));
        float _1512 = _1509 * (_1476.z + (-0.5));
        float _1519 = exp2((_1483.w + (-0.5)) * 20.0) * 2.0;
        float _1520 = _1519 * (_1483.x + (-0.5));
        float _1521 = _1519 * (_1483.y + (-0.5));
        float _1522 = _1519 * (_1483.z + (-0.5));
        float _1529 = exp2((_1490.w + (-0.5)) * 20.0) * 2.0;
        float _1530 = _1529 * (_1490.x + (-0.5));
        float _1531 = _1529 * (_1490.y + (-0.5));
        float _1532 = _1529 * (_1490.z + (-0.5));
        float _1539 = exp2((_1497.w + (-0.5)) * 20.0) * 2.0;
        float _1540 = _1539 * (_1497.x + (-0.5));
        float _1541 = _1539 * (_1497.y + (-0.5));
        float _1542 = _1539 * (_1497.z + (-0.5));
        float _1543 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1544 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1545 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1546 = _1510 * 0.5;
        float _1547 = _1520 * 0.5;
        float _1548 = _1530 * 0.5;
        float _1549 = dot(vec3(_1546, _1547, _1548), vec3(_1546, _1547, _1548));
        float _1554 = (_1549 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1549);
        float _1562 = (dot(vec3(_832, _833, _834), vec3(_1554 * _1546, _1554 * _1547, _1554 * _1548)) + 1.0) * 0.5;
        float _4344 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1571 = sqrt(((_1547 * _1547) + (_1546 * _1546)) + (_1548 * _1548)) / (_1543 + 9.9999997473787516355514526367188e-06);
        float _4355 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _1573 = _1572 * 2.0;
        float _1577 = (1.0 - _1572) / (_1572 + 1.0);
        float _4366 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _1587 = ((((1.0 - _1578) * (_1573 + 2.0)) * exp2(log2(isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (_1573 + 1.0))) + _1578) * _1543;
        float _1588 = _1511 * 0.5;
        float _1589 = _1521 * 0.5;
        float _1590 = _1531 * 0.5;
        float _1591 = dot(vec3(_1588, _1589, _1590), vec3(_1588, _1589, _1590));
        float _1596 = (_1591 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1591);
        float _1604 = (dot(vec3(_832, _833, _834), vec3(_1596 * _1588, _1596 * _1589, _1596 * _1590)) + 1.0) * 0.5;
        float _4377 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1613 = sqrt(((_1589 * _1589) + (_1588 * _1588)) + (_1590 * _1590)) / (_1544 + 9.9999997473787516355514526367188e-06);
        float _4388 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1614 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _1615 = _1614 * 2.0;
        float _1619 = (1.0 - _1614) / (_1614 + 1.0);
        float _4399 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _1629 = ((((1.0 - _1620) * (_1615 + 2.0)) * exp2(log2(isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * (_1615 + 1.0))) + _1620) * _1544;
        float _1630 = _1512 * 0.5;
        float _1631 = _1522 * 0.5;
        float _1632 = _1532 * 0.5;
        float _1633 = dot(vec3(_1630, _1631, _1632), vec3(_1630, _1631, _1632));
        float _1638 = (_1633 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1633);
        float _1646 = (dot(vec3(_832, _833, _834), vec3(_1638 * _1630, _1638 * _1631, _1638 * _1632)) + 1.0) * 0.5;
        float _4410 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1655 = sqrt(((_1631 * _1631) + (_1630 * _1630)) + (_1632 * _1632)) / (_1545 + 9.9999997473787516355514526367188e-06);
        float _4421 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1656 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _1657 = _1656 * 2.0;
        float _1661 = (1.0 - _1656) / (_1656 + 1.0);
        float _4432 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _1671 = ((((1.0 - _1662) * (_1657 + 2.0)) * exp2(log2(isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * (_1657 + 1.0))) + _1662) * _1545;
        _1679 = _1512;
        _1680 = _1511;
        _1681 = _1510;
        _1682 = _1522;
        _1683 = _1521;
        _1684 = _1520;
        _1685 = _1532;
        _1686 = _1531;
        _1687 = _1530;
        _1688 = _1545;
        _1689 = _1544;
        _1690 = _1543;
        _1691 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)));
        _1692 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)));
        _1693 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0)));
    }
    else
    {
        _1679 = _1371;
        _1680 = _1371;
        _1681 = _1371;
        _1682 = _1371;
        _1683 = _1371;
        _1684 = _1371;
        _1685 = _1371;
        _1686 = _1371;
        _1687 = _1371;
        _1688 = _1371;
        _1689 = _1371;
        _1690 = _1371;
        _1691 = 0.0;
        _1692 = 0.0;
        _1693 = 0.0;
    }
    float _1703 = (cbModelParam._m0[1u].x * (_1691 - _1383)) + _1383;
    float _1704 = (cbModelParam._m0[1u].x * (_1692 - _1384)) + _1384;
    float _1705 = (cbModelParam._m0[1u].x * (_1693 - _1385)) + _1385;
    float _1726 = fma(_1705, cbSceneParam._m0[89u].z, fma(_1704, cbSceneParam._m0[89u].y, _1703 * cbSceneParam._m0[89u].x));
    float _1729 = fma(_1705, cbSceneParam._m0[90u].z, fma(_1704, cbSceneParam._m0[90u].y, _1703 * cbSceneParam._m0[90u].x));
    float _1732 = fma(_1705, cbSceneParam._m0[91u].z, fma(_1704, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1703));
    float _1747 = _1005 * 0.5;
    float _1748 = _1006 * 0.5;
    float _1749 = _1007 * 0.5;
    float _1750 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1681, _1684, _1687, _1690));
    float _1753 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1680, _1683, _1686, _1689));
    float _1756 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1679, _1682, _1685, _1688));
    float _1790;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1763 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1370, _1374, _1377, _1380));
        float _1767 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1372, _1375, _1378, _1381));
        float _1771 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1373, _1376, _1379, _1382));
        float _1778 = dot(vec4(cbModelParam._m0[39u]), vec4(_1747, _1748, _1749, 1.0));
        _1790 = dot(vec3(isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0)), isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0)), isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1778) ? 0.0 : (isnan(0.0) ? _1778 : max(0.0, _1778))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1790 = 1.0;
    }
    float _1801;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1792 = dot(vec4(cbModelParam._m0[40u]), vec4(_1747, _1748, _1749, 1.0));
        _1801 = dot(vec3(isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)), isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0)), isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1792) ? 0.0 : (isnan(0.0) ? _1792 : max(0.0, _1792))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1801 = 1.0;
    }
    float _1805 = (_1801 * cbModelParam._m0[1u].x) + (_1790 * (1.0 - cbModelParam._m0[1u].x));
    float _1815 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _835);
    float _1816 = isnan(_1815) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1815 : min(cbModelParam._m0[25u].z, _1815));
    float _1897;
    float _1899;
    float _1901;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1864 = fma(_1069, cbModelParam._m0[13u].z, fma(_1065, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1061)) + cbModelParam._m0[13u].w;
        float _1868 = fma(_1069, cbModelParam._m0[14u].z, fma(_1065, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1061)) + cbModelParam._m0[14u].w;
        float _1872 = fma(_1069, cbModelParam._m0[15u].z, fma(_1065, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1061)) + cbModelParam._m0[15u].w;
        float _1875 = fma(_1007, cbModelParam._m0[13u].z, fma(_1006, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1005));
        float _1878 = fma(_1007, cbModelParam._m0[14u].z, fma(_1006, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1005));
        float _1881 = fma(_1007, cbModelParam._m0[15u].z, fma(_1006, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1005));
        float _1909;
        if (_1875 > 0.0)
        {
            _1909 = abs((1.0 - _1864) / _1875);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1875 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1864 + 1.0) / _1875);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1909 = frontier_phi_14_12_ladder;
        }
        float _2081;
        if (_1878 > 0.0)
        {
            _2081 = abs((1.0 - _1868) / _1878);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1878 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1868 + 1.0) / _1878);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2081 = frontier_phi_23_19_ladder;
        }
        float _2376;
        if (_1881 > 0.0)
        {
            _2376 = abs((1.0 - _1872) / _1881);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1881 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1872 + 1.0) / _1881);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2376 = frontier_phi_35_30_ladder;
        }
        float _2378 = isnan(_2081) ? _1909 : (isnan(_1909) ? _2081 : min(_1909, _2081));
        float _2379 = isnan(_2376) ? _2378 : (isnan(_2378) ? _2376 : min(_2378, _2376));
        float _2383 = (_2379 * _1875) + _1864;
        float _2384 = (_2379 * _1878) + _1868;
        float _2385 = (_2379 * _1881) + _1872;
        float _2386 = _2379 * 9.9999997473787516355514526367188e-05;
        float _2388 = (-1.0) - _2386;
        float _2390 = _2386 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2385 > _2390) || ((_2385 < _2388) || ((_2384 > _2390) || ((_2384 < _2388) || ((_2383 < _2388) || (_2383 > _2390))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2530 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2385, cbModelParam._m0[9u].z, fma(_2384, cbModelParam._m0[9u].y, _2383 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2385, cbModelParam._m0[10u].z, fma(_2384, cbModelParam._m0[10u].y, _2383 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2385, cbModelParam._m0[11u].z, fma(_2384, cbModelParam._m0[11u].y, _2383 * cbModelParam._m0[11u].x))), _1816);
            frontier_phi_13_35_ladder = _2530.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2530.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2530.x * cbModelParam._m0[1u].y;
        }
        _1897 = frontier_phi_13_35_ladder_2;
        _1899 = frontier_phi_13_35_ladder_1;
        _1901 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1885 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1005, _1006, _1007), _1816);
        _1897 = _1885.x * cbModelParam._m0[1u].y;
        _1899 = _1885.y * cbModelParam._m0[1u].y;
        _1901 = _1885.z * cbModelParam._m0[1u].y;
    }
    float _1905 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _835);
    float _1906 = isnan(_1905) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1905 : min(cbModelParam._m0[25u].w, _1905));
    float _1996;
    float _1998;
    float _2000;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1960 = fma(_1069, cbModelParam._m0[21u].z, fma(_1065, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1061)) + cbModelParam._m0[21u].w;
        float _1964 = fma(_1069, cbModelParam._m0[22u].z, fma(_1065, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1061)) + cbModelParam._m0[22u].w;
        float _1968 = fma(_1069, cbModelParam._m0[23u].z, fma(_1065, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1061)) + cbModelParam._m0[23u].w;
        float _1971 = fma(_1007, cbModelParam._m0[21u].z, fma(_1006, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1005));
        float _1974 = fma(_1007, cbModelParam._m0[22u].z, fma(_1006, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1005));
        float _1977 = fma(_1007, cbModelParam._m0[23u].z, fma(_1006, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1005));
        float _2086;
        if (_1971 > 0.0)
        {
            _2086 = abs((1.0 - _1960) / _1971);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1971 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1960 + 1.0) / _1971);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2086 = frontier_phi_25_21_ladder;
        }
        float _2403;
        if (_1974 > 0.0)
        {
            _2403 = abs((1.0 - _1964) / _1974);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1974 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1964 + 1.0) / _1974);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2403 = frontier_phi_37_32_ladder;
        }
        float _2741;
        if (_1977 > 0.0)
        {
            _2741 = abs((1.0 - _1968) / _1977);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1977 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1968 + 1.0) / _1977);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2741 = frontier_phi_47_44_ladder;
        }
        float _2743 = isnan(_2403) ? _2086 : (isnan(_2086) ? _2403 : min(_2086, _2403));
        float _2744 = isnan(_2741) ? _2743 : (isnan(_2743) ? _2741 : min(_2743, _2741));
        float _2748 = (_2744 * _1971) + _1960;
        float _2749 = (_2744 * _1974) + _1964;
        float _2750 = (_2744 * _1977) + _1968;
        float _2751 = _2744 * 9.9999997473787516355514526367188e-05;
        float _2752 = (-1.0) - _2751;
        float _2754 = _2751 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2750 > _2754) || ((_2750 < _2752) || ((_2749 > _2754) || ((_2749 < _2752) || ((_2748 < _2752) || (_2748 > _2754))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2872 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2750, cbModelParam._m0[17u].z, fma(_2749, cbModelParam._m0[17u].y, _2748 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2750, cbModelParam._m0[18u].z, fma(_2749, cbModelParam._m0[18u].y, _2748 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2750, cbModelParam._m0[19u].z, fma(_2749, cbModelParam._m0[19u].y, _2748 * cbModelParam._m0[19u].x))), _1906);
            frontier_phi_22_47_ladder = _2872.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2872.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2872.x * cbModelParam._m0[1u].z;
        }
        _1996 = frontier_phi_22_47_ladder_2;
        _1998 = frontier_phi_22_47_ladder_1;
        _2000 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1980 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1005, _1006, _1007), _1906);
        _1996 = _1980.x * cbModelParam._m0[1u].z;
        _1998 = _1980.y * cbModelParam._m0[1u].z;
        _2000 = _1980.z * cbModelParam._m0[1u].z;
    }
    float _2013 = (((_1032 * _981) + _1033) * _997) * ((cbModelParam._m0[1u].w * (_1996 - _1897)) + _1897);
    float _2015 = (((_1032 * _983) + _1033) * _997) * ((cbModelParam._m0[1u].w * (_1998 - _1899)) + _1899);
    float _2017 = (((_1032 * _984) + _1033) * _997) * ((cbModelParam._m0[1u].w * (_2000 - _1901)) + _1901);
    float _2020 = fma(_2017, cbSceneParam._m0[89u].z, fma(_2015, cbSceneParam._m0[89u].y, _2013 * cbSceneParam._m0[89u].x));
    float _2023 = fma(_2017, cbSceneParam._m0[90u].z, fma(_2015, cbSceneParam._m0[90u].y, _2013 * cbSceneParam._m0[90u].x));
    float _2026 = fma(_2017, cbSceneParam._m0[91u].z, fma(_2015, cbSceneParam._m0[91u].y, _2013 * cbSceneParam._m0[91u].x));
    float _2060 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2064 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2068 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2072 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2073 = _2060 / _2072;
    float _2074 = _2064 / _2072;
    float _2075 = _2068 / _2072;
    float _2222;
    float _2223;
    float _2224;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2102 = ((uint(_2075 > cbSceneParam._m0[59u].y) + uint(_2075 > cbSceneParam._m0[59u].x)) + uint(_2075 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2103 = _2102 + 43u;
        uint _2111 = _2102 + 44u;
        uint _2119 = _2102 + 45u;
        uint _2127 = _2102 + 46u;
        float _2138 = fma(_2072, cbSceneParam._m0[_2103].w, fma(_2068, cbSceneParam._m0[_2103].z, fma(_2064, cbSceneParam._m0[_2103].y, _2060 * cbSceneParam._m0[_2103].x)));
        float _2142 = fma(_2072, cbSceneParam._m0[_2111].w, fma(_2068, cbSceneParam._m0[_2111].z, fma(_2064, cbSceneParam._m0[_2111].y, _2060 * cbSceneParam._m0[_2111].x)));
        float _2150 = fma(_2072, cbSceneParam._m0[_2127].w, fma(_2068, cbSceneParam._m0[_2127].z, fma(_2064, cbSceneParam._m0[_2127].y, _2060 * cbSceneParam._m0[_2127].x)));
        float _2155 = cbSceneParam._m0[33u].z * _2150;
        float _2157 = cbSceneParam._m0[33u].w * _2150;
        float _2160 = fma(_2072, cbSceneParam._m0[_2119].w, fma(_2068, cbSceneParam._m0[_2119].z, fma(_2064, cbSceneParam._m0[_2119].y, _2060 * cbSceneParam._m0[_2119].x))) / _2150;
        float _2208 = (cbSceneParam._m0[33u].x - sqrt(((_2074 * _2074) + (_2073 * _2073)) + (_2075 * _2075))) * cbSceneParam._m0[33u].y;
        float _4558 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2215 = (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2155 + _2138) / _2150, (_2157 + _2142) / _2150), _2160), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2157 + _2138) / _2150, (_2142 - _2155) / _2150), _2160), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2138 - _2155) / _2150, (_2142 - _2157) / _2150), _2160), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2138 - _2157) / _2150, (_2155 + _2142) / _2150), _2160), 0.0)).x), vec4(0.25)));
        _2222 = 1.0 - (_2215 * cbSceneParam._m0[34u].x);
        _2223 = 1.0 - (_2215 * cbSceneParam._m0[34u].y);
        _2224 = 1.0 - (_2215 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2222 = 1.0;
        _2223 = 1.0;
        _2224 = 1.0;
    }
    float _2288;
    float _2290;
    float _2292;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2276 = fma(_2072, cbSceneParam._m0[63u].w, fma(_2068, cbSceneParam._m0[63u].z, fma(_2064, cbSceneParam._m0[63u].y, _2060 * cbSceneParam._m0[63u].x)));
        float _2277 = fma(_2072, cbSceneParam._m0[60u].w, fma(_2068, cbSceneParam._m0[60u].z, fma(_2064, cbSceneParam._m0[60u].y, _2060 * cbSceneParam._m0[60u].x))) / _2276;
        float _2278 = fma(_2072, cbSceneParam._m0[61u].w, fma(_2068, cbSceneParam._m0[61u].z, fma(_2064, cbSceneParam._m0[61u].y, _2060 * cbSceneParam._m0[61u].x))) / _2276;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2277 >= cbSceneParam._m0[64u].x) && (_2278 >= cbSceneParam._m0[64u].y)) && (_2277 <= cbSceneParam._m0[64u].z)) && (_2278 <= cbSceneParam._m0[64u].w))
        {
            float _2416 = fma(_2072, cbSceneParam._m0[62u].w, fma(_2068, cbSceneParam._m0[62u].z, fma(_2064, cbSceneParam._m0[62u].y, _2060 * cbSceneParam._m0[62u].x))) / _2276;
            float _2420 = isnan(cbSceneParam._m0[41u].w) ? _2416 : (isnan(_2416) ? cbSceneParam._m0[41u].w : max(_2416, cbSceneParam._m0[41u].w));
            float _2463 = (cbSceneParam._m0[33u].x - sqrt(((_2074 * _2074) + (_2073 * _2073)) + (_2075 * _2075))) * cbSceneParam._m0[33u].y;
            float _4574 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
            float _2470 = (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2277, cbSceneParam._m0[33u].w + _2278), _2420), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2277, _2278 - cbSceneParam._m0[33u].z), _2420), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2277 - cbSceneParam._m0[33u].z, _2278 - cbSceneParam._m0[33u].w), _2420), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2277 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2278), _2420), 0.0)).x), vec4(0.25)));
            float _2474 = 1.0 - (_2470 * cbSceneParam._m0[34u].x);
            float _2475 = 1.0 - (_2470 * cbSceneParam._m0[34u].y);
            float _2476 = 1.0 - (_2470 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2476) ? _2224 : (isnan(_2224) ? _2476 : min(_2224, _2476));
            frontier_phi_34_33_ladder_1 = isnan(_2475) ? _2223 : (isnan(_2223) ? _2475 : min(_2223, _2475));
            frontier_phi_34_33_ladder_2 = isnan(_2474) ? _2222 : (isnan(_2222) ? _2474 : min(_2222, _2474));
        }
        else
        {
            frontier_phi_34_33_ladder = _2224;
            frontier_phi_34_33_ladder_1 = _2223;
            frontier_phi_34_33_ladder_2 = _2222;
        }
        _2288 = frontier_phi_34_33_ladder_2;
        _2290 = frontier_phi_34_33_ladder_1;
        _2292 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2288 = _2222;
        _2290 = _2223;
        _2292 = _2224;
    }
    uvec4 _2297 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2299 = _2297.x * 14u;
    uint _2300 = _2299 + 13u;
    float _2307 = _997 + (-1.0);
    float _2312 = (cbLight._m0[_2300].x * _2307) + 1.0;
    float _2313 = (cbLight._m0[_2300].y * _2307) + 1.0;
    float _2314 = (cbLight._m0[_2300].z * _2307) + 1.0;
    float _2315 = (cbLight._m0[_2300].w * _2307) + 1.0;
    uint _2316 = _2299 + 5u;
    float _2322 = isnan(1.0) ? _2313 : (isnan(_2313) ? 1.0 : min(_2313, 1.0));
    uint _2326 = _2299 + 4u;
    float _2335 = isnan(1.0) ? _2312 : (isnan(_2312) ? 1.0 : min(_2312, 1.0));
    uint _2339 = _2299 | 1u;
    float _2350 = dot(vec3(cbLight._m0[_2299].xyz), vec3(_832, _833, _834));
    float _2353 = dot(vec3(cbLight._m0[_2339].xyz), vec3(_832, _833, _834));
    float _4610 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _4621 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _2358 = (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0))) * 0.3183098733425140380859375;
    float _2360 = (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * 0.3183098733425140380859375;
    float _2367 = ((cbLight._m0[_2316].x * _2322) * _2360) + (((cbLight._m0[_2326].x * _2288) * _2335) * _2358);
    float _2368 = ((_2322 * cbLight._m0[_2316].y) * _2360) + (((cbLight._m0[_2326].y * _2290) * _2335) * _2358);
    float _2369 = ((_2322 * cbLight._m0[_2316].z) * _2360) + (((cbLight._m0[_2326].z * _2292) * _2335) * _2358);
    uvec4 _2373 = floatBitsToUint(cbLight._m0[_2299 + 12u]);
    bool _2375 = _2373.x == 0u;
    float _2477;
    float _2479;
    float _2481;
    if (_2375)
    {
        _2477 = _2367;
        _2479 = _2368;
        _2481 = _2369;
    }
    else
    {
        uint _2485 = _2299 + 6u;
        float _2501 = (dot(vec3(cbLight._m0[_2299 + 2u].xyz), vec3(_832, _833, _834)) * 0.5) + 0.5;
        float _2502 = _2501 * _2501;
        float _4632 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2503 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
        float _2504 = isnan(1.0) ? _2314 : (isnan(_2314) ? 1.0 : min(_2314, 1.0));
        _2477 = (((cbLight._m0[_2485].x * 0.3183098733425140380859375) * _2503) * _2504) + _2367;
        _2479 = (((cbLight._m0[_2485].y * 0.3183098733425140380859375) * _2503) * _2504) + _2368;
        _2481 = (((cbLight._m0[_2485].z * 0.3183098733425140380859375) * _2503) * _2504) + _2369;
    }
    bool _2484 = _2373.y == 0u;
    float _2539;
    float _2541;
    float _2543;
    if (_2484)
    {
        _2539 = _2477;
        _2541 = _2479;
        _2543 = _2481;
    }
    else
    {
        uint _2712 = _2299 + 7u;
        float _2728 = (dot(vec3(cbLight._m0[_2299 + 3u].xyz), vec3(_832, _833, _834)) * 0.5) + 0.5;
        float _2729 = _2728 * _2728;
        float _4648 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        float _2730 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
        float _2731 = isnan(1.0) ? _2315 : (isnan(_2315) ? 1.0 : min(_2315, 1.0));
        _2539 = (((cbLight._m0[_2712].x * 0.3183098733425140380859375) * _2730) * _2731) + _2477;
        _2541 = (((cbLight._m0[_2712].y * 0.3183098733425140380859375) * _2730) * _2731) + _2479;
        _2543 = (((cbLight._m0[_2712].z * 0.3183098733425140380859375) * _2730) * _2731) + _2481;
    }
    uint _2546 = _2299 + 8u;
    float _2559 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2299].w)) * _835) * 0.949999988079071044921875);
    float _2560 = _2559 * _2559;
    float _2561 = cbLight._m0[_2299].x + _911;
    float _2562 = cbLight._m0[_2299].y + _912;
    float _2563 = cbLight._m0[_2299].z + _913;
    float _2567 = inversesqrt(dot(vec3(_2561, _2562, _2563), vec3(_2561, _2562, _2563)));
    float _2568 = _2567 * _2561;
    float _2569 = _2567 * _2562;
    float _2570 = _2567 * _2563;
    float _2571 = dot(vec3(_832, _833, _834), vec3(cbLight._m0[_2299].xyz));
    float _4664 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
    float _2574 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
    float _4675 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _2575 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
    float _2576 = dot(vec3(_832, _833, _834), vec3(_2568, _2569, _2570));
    float _4686 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
    float _2579 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
    float _2580 = dot(vec3(cbLight._m0[_2299].xyz), vec3(_2568, _2569, _2570));
    float _4697 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
    float _2584 = _2560 * _2560;
    float _2588 = ((_2579 * _2579) * (_2584 + (-1.0))) + 1.0;
    float _2596 = exp2(log2(1.0 - (isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0)))) * 5.0);
    float _2597 = 0.959999978542327880859375 - _978;
    float _2599 = 0.959999978542327880859375 - _979;
    float _2600 = 0.959999978542327880859375 - _980;
    float _2607 = 1.0 - _2560;
    float _2618 = (0.5 / (((_2575 * ((_2574 * _2607) + _2560)) + 9.9999999392252902907785028219223e-09) + (((_2575 * _2607) + _2560) * _2574))) * _2574;
    float _4708 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
    float _2620 = (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0))) * (_2584 / ((_2588 * _2588) * 3.141590118408203125));
    uint _2634 = _2299 + 9u;
    float _2645 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2339].w)) * _835) * 0.949999988079071044921875);
    float _2646 = _2645 * _2645;
    float _2647 = cbLight._m0[_2339].x + _911;
    float _2648 = cbLight._m0[_2339].y + _912;
    float _2649 = cbLight._m0[_2339].z + _913;
    float _2653 = inversesqrt(dot(vec3(_2647, _2648, _2649), vec3(_2647, _2648, _2649)));
    float _2654 = _2653 * _2647;
    float _2655 = _2653 * _2648;
    float _2656 = _2653 * _2649;
    float _2657 = dot(vec3(_832, _833, _834), vec3(cbLight._m0[_2339].xyz));
    float _4719 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
    float _2660 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
    float _2661 = dot(vec3(_832, _833, _834), vec3(_2654, _2655, _2656));
    float _4730 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
    float _2664 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
    float _2665 = dot(vec3(cbLight._m0[_2339].xyz), vec3(_2654, _2655, _2656));
    float _4741 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
    float _2669 = _2646 * _2646;
    float _2673 = ((_2664 * _2664) * (_2669 + (-1.0))) + 1.0;
    float _2680 = exp2(log2(1.0 - (isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0)))) * 5.0);
    float _2687 = 1.0 - _2646;
    float _2697 = (0.5 / (((_2575 * ((_2660 * _2687) + _2646)) + 9.9999999392252902907785028219223e-09) + (((_2575 * _2687) + _2646) * _2660))) * _2660;
    float _4752 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
    float _2699 = (isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0))) * (_2669 / ((_2673 * _2673) * 3.141590118408203125));
    float _2709 = (((((_2680 * _2597) + _981) * cbLight._m0[_2634].x) * _2699) * _2322) + ((((cbLight._m0[_2546].x * _2288) * ((_2596 * _2597) + _981)) * _2620) * _2335);
    float _2710 = (((((_2680 * _2599) + _983) * cbLight._m0[_2634].y) * _2699) * _2322) + ((((cbLight._m0[_2546].y * _2290) * ((_2596 * _2599) + _983)) * _2620) * _2335);
    float _2711 = (((((_2680 * _2600) + _984) * cbLight._m0[_2634].z) * _2699) * _2322) + ((((cbLight._m0[_2546].z * _2292) * ((_2596 * _2600) + _984)) * _2620) * _2335);
    float _2767;
    float _2769;
    float _2771;
    if (_2375)
    {
        _2767 = _2709;
        _2769 = _2710;
        _2771 = _2711;
    }
    else
    {
        uint _2773 = _2299 + 2u;
        uint _2777 = _2299 + 10u;
        float _2791 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2773].w)) * _835) * 0.949999988079071044921875);
        float _2792 = _2791 * _2791;
        float _2793 = cbLight._m0[_2773].x + _911;
        float _2794 = cbLight._m0[_2773].y + _912;
        float _2795 = cbLight._m0[_2773].z + _913;
        float _2799 = inversesqrt(dot(vec3(_2793, _2794, _2795), vec3(_2793, _2794, _2795)));
        float _2800 = _2799 * _2793;
        float _2801 = _2799 * _2794;
        float _2802 = _2799 * _2795;
        float _2803 = dot(vec3(_832, _833, _834), vec3(cbLight._m0[_2773].xyz));
        float _4763 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
        float _2806 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
        float _2807 = dot(vec3(_832, _833, _834), vec3(_2800, _2801, _2802));
        float _4774 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
        float _2810 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
        float _2811 = dot(vec3(cbLight._m0[_2773].xyz), vec3(_2800, _2801, _2802));
        float _4785 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
        float _2815 = _2792 * _2792;
        float _2819 = ((_2810 * _2810) * (_2815 + (-1.0))) + 1.0;
        float _2826 = exp2(log2(1.0 - (isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0)))) * 5.0);
        float _2833 = 1.0 - _2792;
        float _2843 = (0.5 / (((_2575 * ((_2806 * _2833) + _2792)) + 9.9999999392252902907785028219223e-09) + (((_2575 * _2833) + _2792) * _2806))) * _2806;
        float _4796 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
        float _2845 = (isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0))) * (_2815 / ((_2819 * _2819) * 3.141590118408203125));
        float _2846 = isnan(1.0) ? _2314 : (isnan(_2314) ? 1.0 : min(_2314, 1.0));
        _2767 = (((((_2826 * _2597) + _981) * cbLight._m0[_2777].x) * _2845) * _2846) + _2709;
        _2769 = (((((_2826 * _2599) + _983) * cbLight._m0[_2777].y) * _2845) * _2846) + _2710;
        _2771 = (((((_2826 * _2600) + _984) * cbLight._m0[_2777].z) * _2845) * _2846) + _2711;
    }
    float _2877;
    float _2879;
    float _2881;
    if (_2484)
    {
        _2877 = _2767;
        _2879 = _2769;
        _2881 = _2771;
    }
    else
    {
        uint _2888 = _2299 + 3u;
        uint _2892 = _2299 + 11u;
        float _2906 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2888].w)) * _835) * 0.949999988079071044921875);
        float _2907 = _2906 * _2906;
        float _2908 = cbLight._m0[_2888].x + _911;
        float _2909 = cbLight._m0[_2888].y + _912;
        float _2910 = cbLight._m0[_2888].z + _913;
        float _2914 = inversesqrt(dot(vec3(_2908, _2909, _2910), vec3(_2908, _2909, _2910)));
        float _2915 = _2914 * _2908;
        float _2916 = _2914 * _2909;
        float _2917 = _2914 * _2910;
        float _2918 = dot(vec3(_832, _833, _834), vec3(cbLight._m0[_2888].xyz));
        float _4812 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
        float _2921 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
        float _2922 = dot(vec3(_832, _833, _834), vec3(_2915, _2916, _2917));
        float _4823 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
        float _2925 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
        float _2926 = dot(vec3(cbLight._m0[_2888].xyz), vec3(_2915, _2916, _2917));
        float _4834 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
        float _2930 = _2907 * _2907;
        float _2934 = ((_2925 * _2925) * (_2930 + (-1.0))) + 1.0;
        float _2941 = exp2(log2(1.0 - (isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0)))) * 5.0);
        float _2948 = 1.0 - _2907;
        float _2958 = (0.5 / (((_2575 * ((_2921 * _2948) + _2907)) + 9.9999999392252902907785028219223e-09) + (((_2575 * _2948) + _2907) * _2921))) * _2921;
        float _4845 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
        float _2960 = (isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0))) * (_2930 / ((_2934 * _2934) * 3.141590118408203125));
        float _2961 = isnan(1.0) ? _2315 : (isnan(_2315) ? 1.0 : min(_2315, 1.0));
        _2877 = (((((_2941 * _2597) + _981) * cbLight._m0[_2892].x) * _2960) * _2961) + _2767;
        _2879 = (((((_2941 * _2599) + _983) * cbLight._m0[_2892].y) * _2960) * _2961) + _2769;
        _2881 = (((((_2941 * _2600) + _984) * cbLight._m0[_2892].z) * _2960) * _2961) + _2771;
    }
    float _3027;
    float _3029;
    float _3031;
    float _3033;
    float _3035;
    float _3037;
    if (_2297.y == 0u)
    {
        uvec4 _2982 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2983 = _2982.x;
        uint _2994 = uint((float(_2982.y) * floor(float(uint(cbSceneParam._m0[85u].y * _920) / _2983))) + floor(float(uint(cbSceneParam._m0[85u].x * _919) / _2983)));
        float _3004 = (log2(_2075 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3005 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
        uint _3008 = uint(isnan(14.0) ? _3005 : (isnan(_3005) ? 14.0 : min(_3005, 14.0)));
        uvec4 _3013 = texelFetch(g_lightClusterGridBuffer, int(((_3008 << 2u) + (_2994 << 6u)) >> 2u));
        uint _3014 = _3013.x;
        uint _3015 = _2982.z;
        float _3094;
        float _3096;
        float _3098;
        float _3100;
        float _3102;
        float _3104;
        if (((((1u << ((_3015 >> 4u) & 15u)) + 4294967295u) & _3014) == 0u) || ((_3015 & 240u) == 0u))
        {
            _3094 = 0.0;
            _3096 = 0.0;
            _3098 = 0.0;
            _3100 = 0.0;
            _3102 = 0.0;
            _3104 = 0.0;
        }
        else
        {
            float _3095;
            float _3097;
            float _3099;
            float _3101;
            float _3103;
            float _3105;
            float _3239 = 0.0;
            float _3240 = 0.0;
            float _3241 = 0.0;
            float _3242 = 0.0;
            float _3243 = 0.0;
            float _3244 = 0.0;
            uint _3245 = 0u;
            uint _3254;
            bool _3255;
            for (;;)
            {
                _3254 = texelFetch(g_lightClassification, int((((_3008 << 5u) + (_2994 << 9u)) + (_3245 << 2u)) >> 2u)).x;
                _3255 = _3254 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3255)
                {
                    frontier_phi_66_pred = _3244;
                    frontier_phi_66_pred_1 = _3243;
                    frontier_phi_66_pred_2 = _3242;
                    frontier_phi_66_pred_3 = _3241;
                    frontier_phi_66_pred_4 = _3240;
                    frontier_phi_66_pred_5 = _3239;
                }
                else
                {
                    float _3363;
                    float _3364;
                    float _3365;
                    float _3366;
                    float _3367;
                    float _3368;
                    uint _3369;
                    _3363 = _3239;
                    _3364 = _3240;
                    _3365 = _3241;
                    _3366 = _3242;
                    _3367 = _3243;
                    _3368 = _3244;
                    _3369 = _3254;
                    float _3295;
                    float _3296;
                    float _3297;
                    float _3298;
                    float _3299;
                    float _3300;
                    for (;;)
                    {
                        uint _3373 = uint(findLSB(_3369)) + (_3245 << 5u);
                        uint _3370 = (_3369 + 4294967295u) & _3369;
                        uint _3375 = _3373 * 48u;
                        vec4 _3389 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3375)).x, texelFetch(g_PointLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3375 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3375 + 3u)).x));
                        uint _3395 = (_3373 * 48u) + 4u;
                        vec4 _3408 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3395)).x, texelFetch(g_PointLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3395 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3395 + 3u)).x));
                        uint _3414 = (_3373 * 48u) + 8u;
                        vec3 _3425 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3414)).x, texelFetch(g_PointLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3414 + 2u)).x));
                        float _3429 = _3389.x - _2073;
                        float _3430 = _3389.y - _2074;
                        float _3431 = _3389.z - _2075;
                        float _3432 = dot(vec3(_3429, _3430, _3431), vec3(_3429, _3430, _3431));
                        float _3435 = inversesqrt(_3432);
                        float _3436 = _3435 * _3429;
                        float _3437 = _3435 * _3430;
                        float _3438 = _3435 * _3431;
                        float _3439 = dot(vec3(_938, _941, _944), vec3(_3436, _3437, _3438));
                        float _3444 = 1.0 - (_3432 * _3389.w);
                        float _4871 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                        float _3445 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
                        float _3446 = sqrt(_3432) * _3408.w;
                        float _3449 = 1.39999997615814208984375 / (_3446 + 1.39999997615814208984375);
                        float _3450 = _3449 * _3449;
                        float _3453 = ((1.0 - _3450) * _3439) + _3450;
                        float _3456 = _3446 * _3446;
                        float _3460 = ((isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0))) * _3445) / ((_3456 * 0.699999988079071044921875) + 1.0);
                        float _3464 = (-0.0) - _2073;
                        float _3465 = (-0.0) - _2074;
                        float _3466 = (-0.0) - _2075;
                        float _3470 = inversesqrt(dot(vec3(_3464, _3465, _3466), vec3(_3464, _3465, _3466)));
                        float _3471 = _3470 * _3464;
                        float _3472 = _3470 * _3465;
                        float _3473 = _3470 * _3466;
                        float _3480 = exp2(log2(1.0 / ((_3456 * 3.5) + 5.0)) * 0.25);
                        float _3481 = 1.0 - _1013;
                        float _3488 = sqrt(1.0 - ((1.0 - (_3481 * _3481)) * (1.0 - (_3480 * _3480))));
                        float _3489 = _3488 * _3488;
                        float _3490 = _3489 * _3489;
                        float _3491 = _3471 + _3436;
                        float _3492 = _3472 + _3437;
                        float _3493 = _3473 + _3438;
                        float _3497 = inversesqrt(dot(vec3(_3491, _3492, _3493), vec3(_3491, _3492, _3493)));
                        float _3501 = dot(vec3(_938, _941, _944), vec3(_3471, _3472, _3473));
                        float _4887 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                        float _3504 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
                        float _3505 = dot(vec3(_938, _941, _944), vec3(_3497 * _3491, _3497 * _3492, _3497 * _3493));
                        float _4898 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                        float _3508 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
                        float _3512 = ((_3508 * _3508) * (_3490 + (-1.0))) + 1.0;
                        float _3513 = _3449 * _3489;
                        float _3514 = _3513 * _3513;
                        float _3517 = ((1.0 - _3514) * _3439) + _3514;
                        float _4909 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                        float _3518 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
                        float _3519 = 1.0 - _3489;
                        float _3529 = (0.5 / (((_3518 * ((_3504 * _3519) + _3489)) + 9.9999999392252902907785028219223e-09) + (((_3518 * _3519) + _3489) * _3504))) * _3518;
                        float _4920 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                        float _3540 = (((_3490 * 3.1415927410125732421875) * (isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0)))) / ((_3512 * _3512) * ((_3456 * 2.1991131305694580078125) + 3.141590118408203125))) * _3445;
                        _3298 = (_3460 * _3408.x) + _3366;
                        _3299 = (_3460 * _3408.y) + _3367;
                        _3300 = (_3460 * _3408.z) + _3368;
                        _3295 = (_3540 * _3425.x) + _3363;
                        _3296 = (_3540 * _3425.y) + _3364;
                        _3297 = (_3540 * _3425.z) + _3365;
                        if (_3370 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3363 = _3295;
                            _3364 = _3296;
                            _3365 = _3297;
                            _3366 = _3298;
                            _3367 = _3299;
                            _3368 = _3300;
                            _3369 = _3370;
                        }
                    }
                    frontier_phi_66_pred = _3300;
                    frontier_phi_66_pred_1 = _3299;
                    frontier_phi_66_pred_2 = _3298;
                    frontier_phi_66_pred_3 = _3297;
                    frontier_phi_66_pred_4 = _3296;
                    frontier_phi_66_pred_5 = _3295;
                }
                _3105 = frontier_phi_66_pred;
                _3103 = frontier_phi_66_pred_1;
                _3101 = frontier_phi_66_pred_2;
                _3099 = frontier_phi_66_pred_3;
                _3097 = frontier_phi_66_pred_4;
                _3095 = frontier_phi_66_pred_5;
                uint _3246 = _3245 + 1u;
                if (_3246 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3239 = _3095;
                    _3240 = _3097;
                    _3241 = _3099;
                    _3242 = _3101;
                    _3243 = _3103;
                    _3244 = _3105;
                    _3245 = _3246;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3094 = _3095;
            _3096 = _3097;
            _3098 = _3099;
            _3100 = _3101;
            _3102 = _3103;
            _3104 = _3105;
        }
        uvec4 _3108 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3109 = _3108.z;
        uint _3111 = (_3109 >> 8u) & 15u;
        float _3207;
        float _3209;
        float _3211;
        float _3213;
        float _3215;
        float _3217;
        if (((4294967295u << _3111) & _3014) == 0u)
        {
            _3207 = _3094;
            _3209 = _3096;
            _3211 = _3098;
            _3213 = _3100;
            _3215 = _3102;
            _3217 = _3104;
        }
        else
        {
            float _3232 = inversesqrt(dot(vec3(_2073, _2074, _2075), vec3(_2073, _2074, _2075)));
            float _3233 = _3232 * _2073;
            float _3234 = _3232 * _2074;
            float _3235 = _3232 * _2075;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3111 < ((_3109 >> 12u) & 15u))
            {
                float _3208;
                float _3210;
                float _3212;
                float _3214;
                float _3216;
                float _3218;
                float _3346 = _3094;
                float _3347 = _3096;
                float _3348 = _3098;
                float _3349 = _3100;
                float _3350 = _3102;
                float _3351 = _3104;
                uint _3352 = _3111;
                uint _3361;
                bool _3362;
                for (;;)
                {
                    _3361 = texelFetch(g_lightClassification, int((((_3008 << 5u) + (_2994 << 9u)) + (_3352 << 2u)) >> 2u)).x;
                    _3362 = _3361 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3362)
                    {
                        frontier_phi_72_pred = _3351;
                        frontier_phi_72_pred_1 = _3350;
                        frontier_phi_72_pred_2 = _3349;
                        frontier_phi_72_pred_3 = _3348;
                        frontier_phi_72_pred_4 = _3347;
                        frontier_phi_72_pred_5 = _3346;
                    }
                    else
                    {
                        float _3545;
                        float _3546;
                        float _3547;
                        float _3548;
                        float _3549;
                        float _3550;
                        float _3838;
                        float _3839;
                        float _3840;
                        float _3841;
                        float _3842;
                        float _3843;
                        float _3558 = _3346;
                        float _3559 = _3347;
                        float _3560 = _3348;
                        float _3561 = _3349;
                        float _3562 = _3350;
                        float _3563 = _3351;
                        uint _3564 = _3361;
                        uint _3565;
                        vec4 _3590;
                        float _3591;
                        vec4 _3606;
                        vec3 _3618;
                        vec4 _3633;
                        vec4 _3648;
                        float _3694;
                        bool _3695;
                        for (;;)
                        {
                            uint _3575 = ((_3352 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3564));
                            _3565 = (_3564 + 4294967295u) & _3564;
                            uint _3577 = _3575 * 40u;
                            _3590 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3577)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 3u)).x));
                            _3591 = _3590.w;
                            uint _3593 = (_3575 * 40u) + 4u;
                            _3606 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3593)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 3u)).x));
                            uint _3608 = (_3575 * 40u) + 8u;
                            _3618 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3608)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 2u)).x));
                            uint _3620 = (_3575 * 40u) + 16u;
                            _3633 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3620)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 3u)).x));
                            uint _3635 = (_3575 * 40u) + 20u;
                            _3648 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3635)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 3u)).x));
                            uint _3650 = (_3575 * 40u) + 24u;
                            vec4 _3663 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3650)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 3u)).x));
                            uint _3669 = (_3575 * 40u) + 28u;
                            vec4 _3682 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3669)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 3u)).x));
                            _3694 = fma(_2075, _3682.z, fma(_2074, _3682.y, _3682.x * _2073)) + _3682.w;
                            _3695 = !((fma(_2075, _3663.z, fma(_2074, _3663.y, _3663.x * _2073)) + _3663.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3695)
                            {
                                float _3722 = _3590.x - _2073;
                                float _3723 = _3590.y - _2074;
                                float _3724 = _3590.z - _2075;
                                float _3725 = dot(vec3(_3722, _3723, _3724), vec3(_3722, _3723, _3724));
                                float _3728 = inversesqrt(_3725);
                                float _3729 = _3728 * _3722;
                                float _3730 = _3728 * _3723;
                                float _3731 = _3728 * _3724;
                                float _3735 = 1.0 - (_3725 / (_3591 * _3591));
                                float _4931 = isnan(0.0) ? _3735 : (isnan(_3735) ? 0.0 : max(_3735, 0.0));
                                float _3736 = isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0));
                                float _3740 = sqrt(_3725) * _3606.w;
                                float _3742 = 1.39999997615814208984375 / (_3740 + 1.39999997615814208984375);
                                float _3743 = _3742 * _3742;
                                float _3746 = ((1.0 - _3743) * dot(vec3(_3729, _3730, _3731), vec3(_938, _941, _944))) + _3743;
                                float _3749 = _3740 * _3740;
                                float _3753 = (fma(_2075, _3633.z, fma(_2074, _3633.y, _3633.x * _2073)) + _3633.w) / _3694;
                                float _3754 = (fma(_2075, _3648.z, fma(_2074, _3648.y, _3648.x * _2073)) + _3648.w) / _3694;
                                float _3758 = 1.0 - dot(vec2(_3753, _3754), vec2(_3753, _3754));
                                float _4947 = isnan(0.0) ? _3758 : (isnan(_3758) ? 0.0 : max(_3758, 0.0));
                                float _3759 = isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0));
                                float _3760 = _3759 * (((isnan(0.0) ? _3746 : (isnan(_3746) ? 0.0 : max(_3746, 0.0))) * _3736) / ((_3749 * 0.699999988079071044921875) + 1.0));
                                float _3772 = exp2(log2(1.0 / ((_3749 * 3.5) + 5.0)) * 0.25);
                                float _3773 = 1.0 - _1013;
                                float _3780 = sqrt(1.0 - ((1.0 - (_3773 * _3773)) * (1.0 - (_3772 * _3772))));
                                float _3781 = _3780 * _3780;
                                float _3782 = _3781 * _3781;
                                float _3783 = _3729 - _3233;
                                float _3784 = _3730 - _3234;
                                float _3785 = _3731 - _3235;
                                float _3789 = inversesqrt(dot(vec3(_3783, _3784, _3785), vec3(_3783, _3784, _3785)));
                                float _3793 = dot(vec3(_938, _941, _944), vec3((-0.0) - _3233, (-0.0) - _3234, (-0.0) - _3235));
                                float _4958 = isnan(0.0) ? _3793 : (isnan(_3793) ? 0.0 : max(_3793, 0.0));
                                float _3796 = isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0));
                                float _3797 = dot(vec3(_938, _941, _944), vec3(_3789 * _3783, _3789 * _3784, _3789 * _3785));
                                float _4969 = isnan(0.0) ? _3797 : (isnan(_3797) ? 0.0 : max(_3797, 0.0));
                                float _3800 = isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0));
                                float _3804 = ((_3800 * _3800) * (_3782 + (-1.0))) + 1.0;
                                float _3805 = _3742 * _3781;
                                float _3806 = _3805 * _3805;
                                float _3812 = ((1.0 - _3806) * dot(vec3(_938, _941, _944), vec3(_3729, _3730, _3731))) + _3806;
                                float _4980 = isnan(0.0) ? _3812 : (isnan(_3812) ? 0.0 : max(_3812, 0.0));
                                float _3813 = isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0));
                                float _3814 = 1.0 - _3781;
                                float _3824 = (0.5 / (((_3813 * ((_3796 * _3814) + _3781)) + 9.9999999392252902907785028219223e-09) + (((_3813 * _3814) + _3781) * _3796))) * _3813;
                                float _4991 = isnan(0.0) ? _3824 : (isnan(_3824) ? 0.0 : max(_3824, 0.0));
                                float _3834 = (_3759 * _3736) * (((_3782 * 3.1415927410125732421875) * (isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0)))) / ((_3804 * _3804) * ((_3749 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3760 * _3606.y;
                                frontier_phi_78_pred_1 = _3760 * _3606.x;
                                frontier_phi_78_pred_2 = _3834 * _3618.z;
                                frontier_phi_78_pred_3 = _3834 * _3618.y;
                                frontier_phi_78_pred_4 = _3834 * _3618.x;
                                frontier_phi_78_pred_5 = _3760 * _3606.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3842 = frontier_phi_78_pred;
                            _3841 = frontier_phi_78_pred_1;
                            _3840 = frontier_phi_78_pred_2;
                            _3839 = frontier_phi_78_pred_3;
                            _3838 = frontier_phi_78_pred_4;
                            _3843 = frontier_phi_78_pred_5;
                            _3548 = _3841 + _3561;
                            _3549 = _3842 + _3562;
                            _3550 = _3843 + _3563;
                            _3545 = _3838 + _3558;
                            _3546 = _3839 + _3559;
                            _3547 = _3840 + _3560;
                            if (_3565 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3558 = _3545;
                                _3559 = _3546;
                                _3560 = _3547;
                                _3561 = _3548;
                                _3562 = _3549;
                                _3563 = _3550;
                                _3564 = _3565;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3550;
                        frontier_phi_72_pred_1 = _3549;
                        frontier_phi_72_pred_2 = _3548;
                        frontier_phi_72_pred_3 = _3547;
                        frontier_phi_72_pred_4 = _3546;
                        frontier_phi_72_pred_5 = _3545;
                    }
                    _3218 = frontier_phi_72_pred;
                    _3216 = frontier_phi_72_pred_1;
                    _3214 = frontier_phi_72_pred_2;
                    _3212 = frontier_phi_72_pred_3;
                    _3210 = frontier_phi_72_pred_4;
                    _3208 = frontier_phi_72_pred_5;
                    uint _3353 = _3352 + 1u;
                    if (_3353 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3346 = _3208;
                        _3347 = _3210;
                        _3348 = _3212;
                        _3349 = _3214;
                        _3350 = _3216;
                        _3351 = _3218;
                        _3352 = _3353;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3218;
                frontier_phi_60_61_ladder_1 = _3216;
                frontier_phi_60_61_ladder_2 = _3212;
                frontier_phi_60_61_ladder_3 = _3210;
                frontier_phi_60_61_ladder_4 = _3208;
                frontier_phi_60_61_ladder_5 = _3214;
            }
            else
            {
                frontier_phi_60_61_ladder = _3104;
                frontier_phi_60_61_ladder_1 = _3102;
                frontier_phi_60_61_ladder_2 = _3098;
                frontier_phi_60_61_ladder_3 = _3096;
                frontier_phi_60_61_ladder_4 = _3094;
                frontier_phi_60_61_ladder_5 = _3100;
            }
            _3207 = frontier_phi_60_61_ladder_4;
            _3209 = frontier_phi_60_61_ladder_3;
            _3211 = frontier_phi_60_61_ladder_2;
            _3213 = frontier_phi_60_61_ladder_5;
            _3215 = frontier_phi_60_61_ladder_1;
            _3217 = frontier_phi_60_61_ladder;
        }
        float _3222 = isnan(1.0) ? _997 : (isnan(_997) ? 1.0 : min(_997, 1.0));
        _3027 = (_3222 * _3213) + _2539;
        _3029 = (_3222 * _3215) + _2541;
        _3031 = (_3222 * _3217) + _2543;
        _3033 = ((_3207 * _981) * _3222) + _2877;
        _3035 = ((_3209 * _983) * _3222) + _2879;
        _3037 = ((_3211 * _984) * _3222) + _2881;
    }
    else
    {
        _3027 = _2539;
        _3029 = _2541;
        _3031 = _2543;
        _3033 = _2877;
        _3035 = _2879;
        _3037 = _2881;
    }
    float _5007 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _5018 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _5029 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    uint _3057 = _283 + 6u;
    float _3065 = _919 / cbSceneParam._m0[86u].x;
    float _3066 = _920 / cbSceneParam._m0[86u].y;
    vec4 _3080 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3065, _3066, (log2((isnan(cbSceneParam._m0[77u].w) ? _854 : (isnan(_854) ? cbSceneParam._m0[77u].w : min(_854, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3082 = _3080.x;
    float _3083 = _3080.y;
    float _3084 = _3080.z;
    float _3085 = _3080.w;
    float _3157;
    float _3159;
    float _3161;
    float _3163;
    if (_854 > cbSceneParam._m0[78u].w)
    {
        float _3119 = isnan(_854) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _854 : min(cbSceneParam._m0[80u].w, _854));
        float _3120 = _3119 / _854;
        float _3131 = _3120 * _904;
        float _3132 = _905 * _3120;
        float _3133 = (-0.0) - _3132;
        float _3135 = _3120 * _906;
        float _3137 = (cbSceneParam._m0[77u].w * _3133) / _3119;
        float _3138 = _3137 + cbSceneParam._m0[79u].w;
        float _3139 = cbSceneParam._m0[79u].w - _3132;
        float _3145 = sqrt(((_3131 * _3131) + (_3132 * _3132)) + (_3135 * _3135));
        float _3148 = (1.0 - (cbSceneParam._m0[77u].w / _3119)) * _3145;
        float _3153 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3155 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3308;
        if (abs((_3133 - _3137) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3308 = ((((_3138 > 0.0) ? exp2(_3153 * _3138) : (2.0 - exp2(_3155 * _3138))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3148;
        }
        else
        {
            float _3268 = 1.0 / cbSceneParam._m0[80u].x;
            float _3269 = isnan(_3139) ? _3138 : (isnan(_3138) ? _3139 : max(_3138, _3139));
            float _3270 = isnan(_3139) ? _3138 : (isnan(_3138) ? _3139 : min(_3138, _3139));
            float _3279 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : min(_3269, 0.0));
            float _3280 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : min(_3270, 0.0));
            _3308 = ((abs(_3145 / _3133) * cbSceneParam._m0[80u].y) * ((((_3279 - _3280) * 2.0) - ((exp2(_3153 * (isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0)))) - exp2(_3153 * (isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0))))) * _3268)) - ((exp2(_3155 * _3279) - exp2(_3155 * _3280)) * _3268))) + (_3148 * cbSceneParam._m0[80u].z);
        }
        vec4 _3310 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3065, _3066, 1.0), 0.0);
        float _3319 = exp2((_3308 * (-1.44269502162933349609375)) * (1.0 - _3310.w));
        float _3320 = log2(_3319);
        float _3336 = log2(_3085);
        _3157 = (exp2(_3336 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3320 * cbSceneParam._m0[78u].x)) * _3310.x) / cbSceneParam._m0[78u].x)) + _3082;
        _3159 = (exp2(_3336 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3320 * cbSceneParam._m0[78u].y)) * _3310.y) / cbSceneParam._m0[78u].y)) + _3083;
        _3161 = (exp2(_3336 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3320 * cbSceneParam._m0[78u].z)) * _3310.z) / cbSceneParam._m0[78u].z)) + _3084;
        _3163 = _3319 * _3085;
    }
    else
    {
        _3157 = _3082;
        _3159 = _3083;
        _3161 = _3084;
        _3163 = _3085;
    }
    float _3175 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3176 = _3175 == 3.0;
    float _3177 = log2(_3163);
    float _3184 = exp2(_3177 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0))) * (_3027 + ((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _997))) + ((_3033 + ((isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0))) * _1805)) * cbPerFrame._m0[3u].x));
    float _3185 = exp2(_3177 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0))) * (_3029 + ((isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))) * _997))) + ((_3035 + ((isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0))) * _1805)) * cbPerFrame._m0[3u].x));
    float _3186 = exp2(_3177 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0))) * (_3031 + ((isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))) * _997))) + ((_3037 + ((isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0))) * _1805)) * cbPerFrame._m0[3u].x));
    float _3195 = (_3175 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3195 * (_3176 ? _3184 : (_3184 + (cbSceneParam._m0[72u].w * _3157)));
    SV_Target.y = _3195 * (_3176 ? _3185 : (_3185 + (cbSceneParam._m0[72u].w * _3159)));
    SV_Target.z = _3195 * (_3176 ? _3186 : (_3186 + (cbSceneParam._m0[72u].w * _3161)));
    SV_Target.w = cbInstanceData._m0[_3057].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3057].w;
}


