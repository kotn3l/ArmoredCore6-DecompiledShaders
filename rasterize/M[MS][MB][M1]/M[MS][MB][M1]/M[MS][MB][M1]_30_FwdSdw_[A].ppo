#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1105;
float _3771;
float _3772;
float _3773;
float _3774;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _215 = _214 * _206;
    float _216 = _214 * _207;
    float _217 = _214 * _208;
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = _221 * NORMAL.x;
    float _223 = _221 * NORMAL.y;
    float _224 = _221 * NORMAL.z;
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _229 = _228 * TANGENT.x;
    float _230 = _228 * TANGENT.y;
    float _231 = _228 * TANGENT.z;
    uint _234 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _234 + 1u;
    uint _244 = _234 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _274 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _280 = _274.x * cbMtdParam._m0[9u].x;
    float _281 = _274.y * cbMtdParam._m0[9u].y;
    float _282 = _274.z * cbMtdParam._m0[9u].z;
    vec4 _300 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _254) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _255) + cbTextureTilingScale._m0[20u].w));
    vec4 _326 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _330 = _326.z;
    float _334 = (_326.x * 2.0) + (-1.0);
    float _335 = (_326.y * 2.0) + (-1.0);
    float _336 = dot(vec2(_334, _335), vec2(_334, _335));
    float _3783 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _342 = sqrt(1.0 - (isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))));
    float _347 = _334 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_300.x * 2.0) + (-1.0)));
    float _348 = _335 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_300.y * 2.0) + (-1.0)));
    float _351 = fma(_342, _222, fma(_348, _229, _347 * _215));
    float _354 = fma(_342, _223, fma(_348, _230, _347 * _216));
    float _357 = fma(_342, _224, fma(_348, _231, _347 * _217));
    float _361 = inversesqrt(dot(vec3(_351, _354, _357), vec3(_351, _354, _357)));
    vec4 _397 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _254) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _255) + cbTextureTilingScale._m0[11u].w));
    float _399 = _397.x;
    float _400 = 1.0 - _399;
    float _407 = ((_399 - _400) * cbMtdParam._m0[24u].z) + _400;
    float _409 = (cbMtdParam._m0[19u].x + dot(vec4(_361 * _351, _361 * _354, _361 * _357, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_407 * cbMtdParam._m0[21u].z);
    float _3794 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _410 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _425 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_407 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3805 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _426 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _430 = ((_410 * (cbMtdParam._m0[17u].x - _280)) * _426) + _280;
    float _431 = ((_410 * (cbMtdParam._m0[17u].y - _281)) * _426) + _281;
    float _432 = ((_410 * (cbMtdParam._m0[17u].z - _282)) * _426) + _282;
    vec4 _445 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _447 = _445.x;
    float _450 = _447 - ((_447 * _410) * _426);
    float _455 = (((_300.z - _330) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _330;
    vec4 _468 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _254) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _255) + cbTextureTilingScale._m0[15u].w));
    float _475 = (_468.x * 2.0) + (-1.0);
    float _476 = (_468.y * 2.0) + (-1.0);
    float _477 = dot(vec2(_475, _476), vec2(_475, _476));
    float _3816 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _486 = (((_468.z - _455) * _410) * _426) + _455;
    float _501 = (((cbMtdParam._m0[21u].x * _347) + ((_475 - _347) * _410)) * _426) + _347;
    float _502 = (((cbMtdParam._m0[21u].x * _348) + ((_476 - _348) * _410)) * _426) + _348;
    float _503 = (((sqrt(1.0 - (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0)))) - _342) * _410) * _426) + _342;
    float _508 = cbMtdParam._m0[22u].x + _326.w;
    float _511 = fma(_503, _222, fma(_502, _229, _501 * _215));
    float _514 = fma(_503, _223, fma(_502, _230, _501 * _216));
    float _517 = fma(_503, _224, fma(_502, _231, _501 * _217));
    float _521 = inversesqrt(dot(vec3(_511, _514, _517), vec3(_511, _514, _517)));
    float _522 = _521 * _511;
    float _523 = _521 * _514;
    float _524 = _521 * _517;
    float _3827 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _525 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    float _3838 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _3849 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _3860 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _3871 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _3882 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _530 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _544 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _585 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _595 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _585);
    float _596 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _585);
    float _597 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _585);
    float _601 = inversesqrt(dot(vec3(_595, _596, _597), vec3(_595, _596, _597)));
    float _602 = _595 * _601;
    float _603 = _596 * _601;
    float _604 = _597 * _601;
    vec4 _609 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _611 = _609.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _786 = sqrt(((_595 * _595) + (_596 * _596)) + (_597 * _597));
        float _792 = (cbMatDynParam._m0[5u].x * _786) + cbMatDynParam._m0[5u].y;
        float _3893 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _793 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _797 = (cbMatDynParam._m0[5u].z * _786) + cbMatDynParam._m0[5u].w;
        float _3904 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) - _793)) + _793) < ((_611 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _623 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _624 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _644 = fma(_524, cbSceneParam._m0[5u].z, fma(_523, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _522));
    float _647 = fma(_524, cbSceneParam._m0[6u].z, fma(_523, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _522));
    float _650 = fma(_524, cbSceneParam._m0[7u].z, fma(_523, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _522));
    uint _663 = _234 + 9u;
    uint _664 = _663 + uint(cbMatDynParam._m0[0u].w);
    float _670 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0)))) * cbInstanceData._m0[_664].x;
    float _671 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0)))) * cbInstanceData._m0[_664].y;
    float _672 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) * cbInstanceData._m0[_664].z;
    float _3915 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _673 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _3926 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _674 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _3937 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _675 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _676 = 1.0 - _530;
    float _677 = _673 * _676;
    float _678 = _674 * _676;
    float _679 = _675 * _676;
    float _684 = (_673 + (-0.039999999105930328369140625)) * _530;
    float _685 = (_674 + (-0.039999999105930328369140625)) * _530;
    float _686 = (_675 + (-0.039999999105930328369140625)) * _530;
    float _687 = _684 + 0.039999999105930328369140625;
    float _689 = _685 + 0.039999999105930328369140625;
    float _690 = _686 + 0.039999999105930328369140625;
    vec4 _699 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _623, cbSceneParam._m0[86u].y * _624));
    float _703 = ((isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * TEXCOORD_5.w) * _699.x;
    float _704 = dot(vec3(_522, _523, _524), vec3(_602, _603, _604));
    float _707 = _704 * 2.0;
    float _711 = (_707 * _522) - _602;
    float _712 = (_707 * _523) - _603;
    float _713 = (_707 * _524) - _604;
    float _717 = abs(dot(vec3(_602, _603, _604), vec3(_522, _523, _524)));
    float _3948 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _719 = sqrt(_525);
    float _732 = exp2((_719 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_719 * 3.0));
    float _738 = (1.0 - _732) * ((_719 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _739 = _732 * _719;
    float _767 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _771 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _775 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1104;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _829 = fma(_775, cbModelParam._m0[26u].z, fma(_771, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _767));
        float _833 = fma(_775, cbModelParam._m0[27u].z, fma(_771, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _767));
        float _837 = fma(_775, cbModelParam._m0[28u].z, fma(_771, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _767));
        float _862 = _767 + _522;
        float _863 = _771 + _523;
        float _864 = _775 + _524;
        float _874 = fma(_864, cbModelParam._m0[26u].z, fma(_863, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _862)) - _829;
        float _875 = fma(_864, cbModelParam._m0[27u].z, fma(_863, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _862)) - _833;
        float _876 = fma(_864, cbModelParam._m0[28u].z, fma(_863, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _862)) - _837;
        float _880 = inversesqrt(dot(vec3(_874, _875, _876), vec3(_874, _875, _876)));
        float _893 = ((_880 * _874) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_829 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _894 = ((_880 * _875) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_833 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _895 = ((_880 * _876) / cbModelParam._m0[34u].z) + ((((((_837 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _898 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_893, _894, _895), 0.0);
        vec4 _905 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_893, _894, _895), 0.0);
        vec4 _912 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_893, _894, _895), 0.0);
        vec4 _919 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_893, _894, _895), 0.0);
        float _932 = exp2((_898.w + (-0.5)) * 20.0) * 2.0;
        float _933 = _932 * (_898.x + (-0.5));
        float _934 = _932 * (_898.y + (-0.5));
        float _935 = _932 * (_898.z + (-0.5));
        float _942 = exp2((_905.w + (-0.5)) * 20.0) * 2.0;
        float _943 = _942 * (_905.x + (-0.5));
        float _944 = _942 * (_905.y + (-0.5));
        float _945 = _942 * (_905.z + (-0.5));
        float _952 = exp2((_912.w + (-0.5)) * 20.0) * 2.0;
        float _953 = _952 * (_912.x + (-0.5));
        float _954 = _952 * (_912.y + (-0.5));
        float _955 = _952 * (_912.z + (-0.5));
        float _962 = exp2((_919.w + (-0.5)) * 20.0) * 2.0;
        float _963 = _962 * (_919.x + (-0.5));
        float _964 = _962 * (_919.y + (-0.5));
        float _965 = _962 * (_919.z + (-0.5));
        float _966 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _967 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _968 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _969 = _933 * 0.5;
        float _970 = _943 * 0.5;
        float _971 = _953 * 0.5;
        float _972 = dot(vec3(_969, _970, _971), vec3(_969, _970, _971));
        float _977 = (_972 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_972);
        float _986 = (dot(vec3(_522, _523, _524), vec3(_977 * _969, _977 * _970, _977 * _971)) + 1.0) * 0.5;
        float _3974 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _996 = sqrt(((_970 * _970) + (_969 * _969)) + (_971 * _971)) / (_966 + 9.9999997473787516355514526367188e-06);
        float _3985 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _997 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _998 = _997 * 2.0;
        float _1002 = (1.0 - _997) / (_997 + 1.0);
        float _3996 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1012 = ((((1.0 - _1003) * (_998 + 2.0)) * exp2(log2(isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * (_998 + 1.0))) + _1003) * _966;
        float _1013 = _934 * 0.5;
        float _1014 = _944 * 0.5;
        float _1015 = _954 * 0.5;
        float _1016 = dot(vec3(_1013, _1014, _1015), vec3(_1013, _1014, _1015));
        float _1021 = (_1016 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1016);
        float _1029 = (dot(vec3(_522, _523, _524), vec3(_1021 * _1013, _1021 * _1014, _1021 * _1015)) + 1.0) * 0.5;
        float _4007 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1038 = sqrt(((_1014 * _1014) + (_1013 * _1013)) + (_1015 * _1015)) / (_967 + 9.9999997473787516355514526367188e-06);
        float _4018 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1039 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1040 = _1039 * 2.0;
        float _1044 = (1.0 - _1039) / (_1039 + 1.0);
        float _4029 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1054 = ((((1.0 - _1045) * (_1040 + 2.0)) * exp2(log2(isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_1040 + 1.0))) + _1045) * _967;
        float _1055 = _935 * 0.5;
        float _1056 = _945 * 0.5;
        float _1057 = _955 * 0.5;
        float _1058 = dot(vec3(_1055, _1056, _1057), vec3(_1055, _1056, _1057));
        float _1063 = (_1058 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1058);
        float _1071 = (dot(vec3(_522, _523, _524), vec3(_1063 * _1055, _1063 * _1056, _1063 * _1057)) + 1.0) * 0.5;
        float _4040 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1080 = sqrt(((_1056 * _1056) + (_1055 * _1055)) + (_1057 * _1057)) / (_968 + 9.9999997473787516355514526367188e-06);
        float _4051 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1081 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1082 = _1081 * 2.0;
        float _1086 = (1.0 - _1081) / (_1081 + 1.0);
        float _4062 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1096 = ((((1.0 - _1087) * (_1082 + 2.0)) * exp2(log2(isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_1082 + 1.0))) + _1087) * _968;
        _1104 = _935;
        _1106 = _934;
        _1107 = _933;
        _1108 = _945;
        _1109 = _944;
        _1110 = _943;
        _1111 = _955;
        _1112 = _954;
        _1113 = _953;
        _1114 = _968;
        _1115 = _967;
        _1116 = _966;
        _1117 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0)));
        _1118 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0)));
        _1119 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0)));
    }
    else
    {
        _1104 = _1105;
        _1106 = _1105;
        _1107 = _1105;
        _1108 = _1105;
        _1109 = _1105;
        _1110 = _1105;
        _1111 = _1105;
        _1112 = _1105;
        _1113 = _1105;
        _1114 = _1105;
        _1115 = _1105;
        _1116 = _1105;
        _1117 = 0.0;
        _1118 = 0.0;
        _1119 = 0.0;
    }
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1147 = fma(_775, cbModelParam._m0[30u].z, fma(_771, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _767));
        float _1151 = fma(_775, cbModelParam._m0[31u].z, fma(_771, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _767));
        float _1155 = fma(_775, cbModelParam._m0[32u].z, fma(_771, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _767));
        float _1178 = _767 + _522;
        float _1179 = _771 + _523;
        float _1180 = _775 + _524;
        float _1190 = fma(_1180, cbModelParam._m0[30u].z, fma(_1179, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1178)) - _1147;
        float _1191 = fma(_1180, cbModelParam._m0[31u].z, fma(_1179, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1178)) - _1151;
        float _1192 = fma(_1180, cbModelParam._m0[32u].z, fma(_1179, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1178)) - _1155;
        float _1196 = inversesqrt(dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192)));
        float _1209 = ((_1196 * _1190) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1147 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1210 = ((_1196 * _1191) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1151 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1211 = ((_1196 * _1192) / cbModelParam._m0[35u].z) + ((((((_1155 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1213 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1209, _1210, _1211), 0.0);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1209, _1210, _1211), 0.0);
        vec4 _1227 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1209, _1210, _1211), 0.0);
        vec4 _1234 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1209, _1210, _1211), 0.0);
        float _1246 = exp2((_1213.w + (-0.5)) * 20.0) * 2.0;
        float _1247 = _1246 * (_1213.x + (-0.5));
        float _1248 = _1246 * (_1213.y + (-0.5));
        float _1249 = _1246 * (_1213.z + (-0.5));
        float _1256 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1257 = _1256 * (_1220.x + (-0.5));
        float _1258 = _1256 * (_1220.y + (-0.5));
        float _1259 = _1256 * (_1220.z + (-0.5));
        float _1266 = exp2((_1227.w + (-0.5)) * 20.0) * 2.0;
        float _1267 = _1266 * (_1227.x + (-0.5));
        float _1268 = _1266 * (_1227.y + (-0.5));
        float _1269 = _1266 * (_1227.z + (-0.5));
        float _1276 = exp2((_1234.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1234.x + (-0.5));
        float _1278 = _1276 * (_1234.y + (-0.5));
        float _1279 = _1276 * (_1234.z + (-0.5));
        float _1280 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1281 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1282 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1283 = _1247 * 0.5;
        float _1284 = _1257 * 0.5;
        float _1285 = _1267 * 0.5;
        float _1286 = dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285));
        float _1291 = (_1286 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1286);
        float _1299 = (dot(vec3(_522, _523, _524), vec3(_1291 * _1283, _1291 * _1284, _1291 * _1285)) + 1.0) * 0.5;
        float _4103 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1308 = sqrt(((_1284 * _1284) + (_1283 * _1283)) + (_1285 * _1285)) / (_1280 + 9.9999997473787516355514526367188e-06);
        float _4114 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1310 = _1309 * 2.0;
        float _1314 = (1.0 - _1309) / (_1309 + 1.0);
        float _4125 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1324 = ((((1.0 - _1315) * (_1310 + 2.0)) * exp2(log2(isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (_1310 + 1.0))) + _1315) * _1280;
        float _1325 = _1248 * 0.5;
        float _1326 = _1258 * 0.5;
        float _1327 = _1268 * 0.5;
        float _1328 = dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327));
        float _1333 = (_1328 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1328);
        float _1341 = (dot(vec3(_522, _523, _524), vec3(_1333 * _1325, _1333 * _1326, _1333 * _1327)) + 1.0) * 0.5;
        float _4136 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1350 = sqrt(((_1326 * _1326) + (_1325 * _1325)) + (_1327 * _1327)) / (_1281 + 9.9999997473787516355514526367188e-06);
        float _4147 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1352 = _1351 * 2.0;
        float _1356 = (1.0 - _1351) / (_1351 + 1.0);
        float _4158 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1366 = ((((1.0 - _1357) * (_1352 + 2.0)) * exp2(log2(isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_1352 + 1.0))) + _1357) * _1281;
        float _1367 = _1249 * 0.5;
        float _1368 = _1259 * 0.5;
        float _1369 = _1269 * 0.5;
        float _1370 = dot(vec3(_1367, _1368, _1369), vec3(_1367, _1368, _1369));
        float _1375 = (_1370 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1370);
        float _1383 = (dot(vec3(_522, _523, _524), vec3(_1375 * _1367, _1375 * _1368, _1375 * _1369)) + 1.0) * 0.5;
        float _4169 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1392 = sqrt(((_1368 * _1368) + (_1367 * _1367)) + (_1369 * _1369)) / (_1282 + 9.9999997473787516355514526367188e-06);
        float _4180 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1394 = _1393 * 2.0;
        float _1398 = (1.0 - _1393) / (_1393 + 1.0);
        float _4191 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1408 = ((((1.0 - _1399) * (_1394 + 2.0)) * exp2(log2(isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_1394 + 1.0))) + _1399) * _1282;
        _1416 = _1249;
        _1417 = _1248;
        _1418 = _1247;
        _1419 = _1259;
        _1420 = _1258;
        _1421 = _1257;
        _1422 = _1269;
        _1423 = _1268;
        _1424 = _1267;
        _1425 = _1282;
        _1426 = _1281;
        _1427 = _1280;
        _1428 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)));
        _1429 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)));
        _1430 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)));
    }
    else
    {
        _1416 = _1105;
        _1417 = _1105;
        _1418 = _1105;
        _1419 = _1105;
        _1420 = _1105;
        _1421 = _1105;
        _1422 = _1105;
        _1423 = _1105;
        _1424 = _1105;
        _1425 = _1105;
        _1426 = _1105;
        _1427 = _1105;
        _1428 = 0.0;
        _1429 = 0.0;
        _1430 = 0.0;
    }
    float _1440 = (cbModelParam._m0[1u].x * (_1428 - _1117)) + _1117;
    float _1441 = (cbModelParam._m0[1u].x * (_1429 - _1118)) + _1118;
    float _1442 = (cbModelParam._m0[1u].x * (_1430 - _1119)) + _1119;
    float _1463 = fma(_1442, cbSceneParam._m0[89u].z, fma(_1441, cbSceneParam._m0[89u].y, _1440 * cbSceneParam._m0[89u].x));
    float _1466 = fma(_1442, cbSceneParam._m0[90u].z, fma(_1441, cbSceneParam._m0[90u].y, _1440 * cbSceneParam._m0[90u].x));
    float _1469 = fma(_1442, cbSceneParam._m0[91u].z, fma(_1441, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1440));
    float _1484 = _711 * 0.5;
    float _1485 = _712 * 0.5;
    float _1486 = _713 * 0.5;
    float _1487 = dot(vec4(_1484, _1485, _1486, 1.0), vec4(_1418, _1421, _1424, _1427));
    float _1490 = dot(vec4(_1484, _1485, _1486, 1.0), vec4(_1417, _1420, _1423, _1426));
    float _1493 = dot(vec4(_1484, _1485, _1486, 1.0), vec4(_1416, _1419, _1422, _1425));
    float _1527;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1500 = dot(vec4(_1484, _1485, _1486, 1.0), vec4(_1104, _1108, _1111, _1114));
        float _1504 = dot(vec4(_1484, _1485, _1486, 1.0), vec4(_1106, _1109, _1112, _1115));
        float _1508 = dot(vec4(_1484, _1485, _1486, 1.0), vec4(_1107, _1110, _1113, _1116));
        float _1515 = dot(vec4(cbModelParam._m0[39u]), vec4(_1484, _1485, _1486, 1.0));
        _1527 = dot(vec3(isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)), isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0)), isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1515) ? 0.0 : (isnan(0.0) ? _1515 : max(0.0, _1515))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1527 = 1.0;
    }
    float _1538;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1529 = dot(vec4(cbModelParam._m0[40u]), vec4(_1484, _1485, _1486, 1.0));
        _1538 = dot(vec3(isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)), isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)), isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1529) ? 0.0 : (isnan(0.0) ? _1529 : max(0.0, _1529))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1538 = 1.0;
    }
    float _1542 = (_1538 * cbModelParam._m0[1u].x) + (_1527 * (1.0 - cbModelParam._m0[1u].x));
    float _1552 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _525);
    float _1553 = isnan(_1552) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1552 : min(cbModelParam._m0[25u].z, _1552));
    float _1634;
    float _1636;
    float _1638;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1601 = fma(_775, cbModelParam._m0[13u].z, fma(_771, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _767)) + cbModelParam._m0[13u].w;
        float _1605 = fma(_775, cbModelParam._m0[14u].z, fma(_771, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _767)) + cbModelParam._m0[14u].w;
        float _1609 = fma(_775, cbModelParam._m0[15u].z, fma(_771, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _767)) + cbModelParam._m0[15u].w;
        float _1612 = fma(_713, cbModelParam._m0[13u].z, fma(_712, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _711));
        float _1615 = fma(_713, cbModelParam._m0[14u].z, fma(_712, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _711));
        float _1618 = fma(_713, cbModelParam._m0[15u].z, fma(_712, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _711));
        float _1646;
        if (_1612 > 0.0)
        {
            _1646 = abs((1.0 - _1601) / _1612);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1612 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1601 + 1.0) / _1612);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1646 = frontier_phi_17_15_ladder;
        }
        float _1818;
        if (_1615 > 0.0)
        {
            _1818 = abs((1.0 - _1605) / _1615);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1615 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1605 + 1.0) / _1615);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1818 = frontier_phi_26_22_ladder;
        }
        float _2114;
        if (_1618 > 0.0)
        {
            _2114 = abs((1.0 - _1609) / _1618);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1618 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1609 + 1.0) / _1618);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2114 = frontier_phi_38_33_ladder;
        }
        float _2116 = isnan(_1818) ? _1646 : (isnan(_1646) ? _1818 : min(_1646, _1818));
        float _2117 = isnan(_2114) ? _2116 : (isnan(_2116) ? _2114 : min(_2116, _2114));
        float _2121 = (_2117 * _1612) + _1601;
        float _2122 = (_2117 * _1615) + _1605;
        float _2123 = (_2117 * _1618) + _1609;
        float _2124 = _2117 * 9.9999997473787516355514526367188e-05;
        float _2126 = (-1.0) - _2124;
        float _2128 = _2124 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2123 > _2128) || ((_2123 < _2126) || ((_2122 > _2128) || ((_2122 < _2126) || ((_2121 < _2126) || (_2121 > _2128))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2268 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2123, cbModelParam._m0[9u].z, fma(_2122, cbModelParam._m0[9u].y, _2121 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2123, cbModelParam._m0[10u].z, fma(_2122, cbModelParam._m0[10u].y, _2121 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2123, cbModelParam._m0[11u].z, fma(_2122, cbModelParam._m0[11u].y, _2121 * cbModelParam._m0[11u].x))), _1553);
            frontier_phi_16_38_ladder = _2268.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2268.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2268.x * cbModelParam._m0[1u].y;
        }
        _1634 = frontier_phi_16_38_ladder_2;
        _1636 = frontier_phi_16_38_ladder_1;
        _1638 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1622 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_711, _712, _713), _1553);
        _1634 = _1622.x * cbModelParam._m0[1u].y;
        _1636 = _1622.y * cbModelParam._m0[1u].y;
        _1638 = _1622.z * cbModelParam._m0[1u].y;
    }
    float _1642 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _525);
    float _1643 = isnan(_1642) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1642 : min(cbModelParam._m0[25u].w, _1642));
    float _1733;
    float _1735;
    float _1737;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1697 = fma(_775, cbModelParam._m0[21u].z, fma(_771, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _767)) + cbModelParam._m0[21u].w;
        float _1701 = fma(_775, cbModelParam._m0[22u].z, fma(_771, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _767)) + cbModelParam._m0[22u].w;
        float _1705 = fma(_775, cbModelParam._m0[23u].z, fma(_771, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _767)) + cbModelParam._m0[23u].w;
        float _1708 = fma(_713, cbModelParam._m0[21u].z, fma(_712, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _711));
        float _1711 = fma(_713, cbModelParam._m0[22u].z, fma(_712, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _711));
        float _1714 = fma(_713, cbModelParam._m0[23u].z, fma(_712, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _711));
        float _1823;
        if (_1708 > 0.0)
        {
            _1823 = abs((1.0 - _1697) / _1708);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1708 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1697 + 1.0) / _1708);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1823 = frontier_phi_28_24_ladder;
        }
        float _2141;
        if (_1711 > 0.0)
        {
            _2141 = abs((1.0 - _1701) / _1711);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1711 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1701 + 1.0) / _1711);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2141 = frontier_phi_40_35_ladder;
        }
        float _2479;
        if (_1714 > 0.0)
        {
            _2479 = abs((1.0 - _1705) / _1714);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1714 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1705 + 1.0) / _1714);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2479 = frontier_phi_50_47_ladder;
        }
        float _2481 = isnan(_2141) ? _1823 : (isnan(_1823) ? _2141 : min(_1823, _2141));
        float _2482 = isnan(_2479) ? _2481 : (isnan(_2481) ? _2479 : min(_2481, _2479));
        float _2486 = (_2482 * _1708) + _1697;
        float _2487 = (_2482 * _1711) + _1701;
        float _2488 = (_2482 * _1714) + _1705;
        float _2489 = _2482 * 9.9999997473787516355514526367188e-05;
        float _2490 = (-1.0) - _2489;
        float _2492 = _2489 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2488 > _2492) || ((_2488 < _2490) || ((_2487 > _2492) || ((_2487 < _2490) || ((_2486 < _2490) || (_2486 > _2492))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2610 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2488, cbModelParam._m0[17u].z, fma(_2487, cbModelParam._m0[17u].y, _2486 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2488, cbModelParam._m0[18u].z, fma(_2487, cbModelParam._m0[18u].y, _2486 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2488, cbModelParam._m0[19u].z, fma(_2487, cbModelParam._m0[19u].y, _2486 * cbModelParam._m0[19u].x))), _1643);
            frontier_phi_25_50_ladder = _2610.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2610.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2610.x * cbModelParam._m0[1u].z;
        }
        _1733 = frontier_phi_25_50_ladder_2;
        _1735 = frontier_phi_25_50_ladder_1;
        _1737 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1717 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_711, _712, _713), _1643);
        _1733 = _1717.x * cbModelParam._m0[1u].z;
        _1735 = _1717.y * cbModelParam._m0[1u].z;
        _1737 = _1717.z * cbModelParam._m0[1u].z;
    }
    float _1750 = (((_738 * _687) + _739) * _703) * ((cbModelParam._m0[1u].w * (_1733 - _1634)) + _1634);
    float _1752 = (((_738 * _689) + _739) * _703) * ((cbModelParam._m0[1u].w * (_1735 - _1636)) + _1636);
    float _1754 = (((_738 * _690) + _739) * _703) * ((cbModelParam._m0[1u].w * (_1737 - _1638)) + _1638);
    float _1757 = fma(_1754, cbSceneParam._m0[89u].z, fma(_1752, cbSceneParam._m0[89u].y, _1750 * cbSceneParam._m0[89u].x));
    float _1760 = fma(_1754, cbSceneParam._m0[90u].z, fma(_1752, cbSceneParam._m0[90u].y, _1750 * cbSceneParam._m0[90u].x));
    float _1763 = fma(_1754, cbSceneParam._m0[91u].z, fma(_1752, cbSceneParam._m0[91u].y, _1750 * cbSceneParam._m0[91u].x));
    float _1797 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1801 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1805 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1809 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1810 = _1797 / _1809;
    float _1811 = _1801 / _1809;
    float _1812 = _1805 / _1809;
    float _1959;
    float _1960;
    float _1961;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1839 = ((uint(_1812 > cbSceneParam._m0[59u].y) + uint(_1812 > cbSceneParam._m0[59u].x)) + uint(_1812 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1840 = _1839 + 43u;
        uint _1848 = _1839 + 44u;
        uint _1856 = _1839 + 45u;
        uint _1864 = _1839 + 46u;
        float _1875 = fma(_1809, cbSceneParam._m0[_1840].w, fma(_1805, cbSceneParam._m0[_1840].z, fma(_1801, cbSceneParam._m0[_1840].y, _1797 * cbSceneParam._m0[_1840].x)));
        float _1879 = fma(_1809, cbSceneParam._m0[_1848].w, fma(_1805, cbSceneParam._m0[_1848].z, fma(_1801, cbSceneParam._m0[_1848].y, _1797 * cbSceneParam._m0[_1848].x)));
        float _1887 = fma(_1809, cbSceneParam._m0[_1864].w, fma(_1805, cbSceneParam._m0[_1864].z, fma(_1801, cbSceneParam._m0[_1864].y, _1797 * cbSceneParam._m0[_1864].x)));
        float _1892 = cbSceneParam._m0[33u].z * _1887;
        float _1894 = cbSceneParam._m0[33u].w * _1887;
        float _1897 = fma(_1809, cbSceneParam._m0[_1856].w, fma(_1805, cbSceneParam._m0[_1856].z, fma(_1801, cbSceneParam._m0[_1856].y, _1797 * cbSceneParam._m0[_1856].x))) / _1887;
        float _1945 = (cbSceneParam._m0[33u].x - sqrt(((_1811 * _1811) + (_1810 * _1810)) + (_1812 * _1812))) * cbSceneParam._m0[33u].y;
        float _4317 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
        float _1952 = (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1892 + _1875) / _1887, (_1894 + _1879) / _1887), _1897), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1894 + _1875) / _1887, (_1879 - _1892) / _1887), _1897), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1875 - _1892) / _1887, (_1879 - _1894) / _1887), _1897), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1875 - _1894) / _1887, (_1892 + _1879) / _1887), _1897), 0.0)).x), vec4(0.25)));
        _1959 = 1.0 - (_1952 * cbSceneParam._m0[34u].x);
        _1960 = 1.0 - (_1952 * cbSceneParam._m0[34u].y);
        _1961 = 1.0 - (_1952 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1959 = 1.0;
        _1960 = 1.0;
        _1961 = 1.0;
    }
    float _2025;
    float _2027;
    float _2029;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2013 = fma(_1809, cbSceneParam._m0[63u].w, fma(_1805, cbSceneParam._m0[63u].z, fma(_1801, cbSceneParam._m0[63u].y, _1797 * cbSceneParam._m0[63u].x)));
        float _2014 = fma(_1809, cbSceneParam._m0[60u].w, fma(_1805, cbSceneParam._m0[60u].z, fma(_1801, cbSceneParam._m0[60u].y, _1797 * cbSceneParam._m0[60u].x))) / _2013;
        float _2015 = fma(_1809, cbSceneParam._m0[61u].w, fma(_1805, cbSceneParam._m0[61u].z, fma(_1801, cbSceneParam._m0[61u].y, _1797 * cbSceneParam._m0[61u].x))) / _2013;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2014 >= cbSceneParam._m0[64u].x) && (_2015 >= cbSceneParam._m0[64u].y)) && (_2014 <= cbSceneParam._m0[64u].z)) && (_2015 <= cbSceneParam._m0[64u].w))
        {
            float _2154 = fma(_1809, cbSceneParam._m0[62u].w, fma(_1805, cbSceneParam._m0[62u].z, fma(_1801, cbSceneParam._m0[62u].y, _1797 * cbSceneParam._m0[62u].x))) / _2013;
            float _2158 = isnan(cbSceneParam._m0[41u].w) ? _2154 : (isnan(_2154) ? cbSceneParam._m0[41u].w : max(_2154, cbSceneParam._m0[41u].w));
            float _2201 = (cbSceneParam._m0[33u].x - sqrt(((_1811 * _1811) + (_1810 * _1810)) + (_1812 * _1812))) * cbSceneParam._m0[33u].y;
            float _4333 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
            float _2208 = (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2014, cbSceneParam._m0[33u].w + _2015), _2158), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2014, _2015 - cbSceneParam._m0[33u].z), _2158), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2014 - cbSceneParam._m0[33u].z, _2015 - cbSceneParam._m0[33u].w), _2158), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2014 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2015), _2158), 0.0)).x), vec4(0.25)));
            float _2212 = 1.0 - (_2208 * cbSceneParam._m0[34u].x);
            float _2213 = 1.0 - (_2208 * cbSceneParam._m0[34u].y);
            float _2214 = 1.0 - (_2208 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2214) ? _1961 : (isnan(_1961) ? _2214 : min(_1961, _2214));
            frontier_phi_37_36_ladder_1 = isnan(_2213) ? _1960 : (isnan(_1960) ? _2213 : min(_1960, _2213));
            frontier_phi_37_36_ladder_2 = isnan(_2212) ? _1959 : (isnan(_1959) ? _2212 : min(_1959, _2212));
        }
        else
        {
            frontier_phi_37_36_ladder = _1961;
            frontier_phi_37_36_ladder_1 = _1960;
            frontier_phi_37_36_ladder_2 = _1959;
        }
        _2025 = frontier_phi_37_36_ladder_2;
        _2027 = frontier_phi_37_36_ladder_1;
        _2029 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2025 = _1959;
        _2027 = _1960;
        _2029 = _1961;
    }
    uvec4 _2034 = floatBitsToUint(cbInstanceData._m0[_234 + 5u]);
    uint _2036 = _2034.x * 14u;
    uint _2037 = _2036 + 13u;
    float _2044 = _703 + (-1.0);
    float _2049 = (cbLight._m0[_2037].x * _2044) + 1.0;
    float _2050 = (cbLight._m0[_2037].y * _2044) + 1.0;
    float _2051 = (cbLight._m0[_2037].z * _2044) + 1.0;
    float _2052 = (cbLight._m0[_2037].w * _2044) + 1.0;
    uint _2053 = _2036 + 5u;
    float _2059 = isnan(1.0) ? _2050 : (isnan(_2050) ? 1.0 : min(_2050, 1.0));
    uint _2063 = _2036 + 4u;
    float _2073 = isnan(1.0) ? _2049 : (isnan(_2049) ? 1.0 : min(_2049, 1.0));
    uint _2077 = _2036 | 1u;
    float _2088 = dot(vec3(cbLight._m0[_2036].xyz), vec3(_522, _523, _524));
    float _2091 = dot(vec3(cbLight._m0[_2077].xyz), vec3(_522, _523, _524));
    float _4369 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _4380 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2096 = (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * 0.3183098733425140380859375;
    float _2098 = (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * 0.3183098733425140380859375;
    float _2105 = ((cbLight._m0[_2053].x * _2059) * _2098) + (((cbLight._m0[_2063].x * _2025) * _2073) * _2096);
    float _2106 = ((_2059 * cbLight._m0[_2053].y) * _2098) + (((cbLight._m0[_2063].y * _2027) * _2073) * _2096);
    float _2107 = ((_2059 * cbLight._m0[_2053].z) * _2098) + (((cbLight._m0[_2063].z * _2029) * _2073) * _2096);
    uvec4 _2111 = floatBitsToUint(cbLight._m0[_2036 + 12u]);
    bool _2113 = _2111.x == 0u;
    float _2215;
    float _2217;
    float _2219;
    if (_2113)
    {
        _2215 = _2105;
        _2217 = _2106;
        _2219 = _2107;
    }
    else
    {
        uint _2223 = _2036 + 6u;
        float _2239 = (dot(vec3(cbLight._m0[_2036 + 2u].xyz), vec3(_522, _523, _524)) * 0.5) + 0.5;
        float _2240 = _2239 * _2239;
        float _4391 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2241 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _2242 = isnan(1.0) ? _2051 : (isnan(_2051) ? 1.0 : min(_2051, 1.0));
        _2215 = (((cbLight._m0[_2223].x * 0.3183098733425140380859375) * _2241) * _2242) + _2105;
        _2217 = (((cbLight._m0[_2223].y * 0.3183098733425140380859375) * _2241) * _2242) + _2106;
        _2219 = (((cbLight._m0[_2223].z * 0.3183098733425140380859375) * _2241) * _2242) + _2107;
    }
    bool _2222 = _2111.y == 0u;
    float _2277;
    float _2279;
    float _2281;
    if (_2222)
    {
        _2277 = _2215;
        _2279 = _2217;
        _2281 = _2219;
    }
    else
    {
        uint _2450 = _2036 + 7u;
        float _2466 = (dot(vec3(cbLight._m0[_2036 + 3u].xyz), vec3(_522, _523, _524)) * 0.5) + 0.5;
        float _2467 = _2466 * _2466;
        float _4407 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2468 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _2469 = isnan(1.0) ? _2052 : (isnan(_2052) ? 1.0 : min(_2052, 1.0));
        _2277 = (((cbLight._m0[_2450].x * 0.3183098733425140380859375) * _2468) * _2469) + _2215;
        _2279 = (((cbLight._m0[_2450].y * 0.3183098733425140380859375) * _2468) * _2469) + _2217;
        _2281 = (((cbLight._m0[_2450].z * 0.3183098733425140380859375) * _2468) * _2469) + _2219;
    }
    uint _2284 = _2036 + 8u;
    float _2297 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2036].w)) * _525) * 0.949999988079071044921875);
    float _2298 = _2297 * _2297;
    float _2299 = cbLight._m0[_2036].x + _602;
    float _2300 = cbLight._m0[_2036].y + _603;
    float _2301 = cbLight._m0[_2036].z + _604;
    float _2305 = inversesqrt(dot(vec3(_2299, _2300, _2301), vec3(_2299, _2300, _2301)));
    float _2306 = _2305 * _2299;
    float _2307 = _2305 * _2300;
    float _2308 = _2305 * _2301;
    float _2309 = dot(vec3(_522, _523, _524), vec3(cbLight._m0[_2036].xyz));
    float _4423 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2312 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
    float _4434 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _2313 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
    float _2314 = dot(vec3(_522, _523, _524), vec3(_2306, _2307, _2308));
    float _4445 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _2317 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
    float _2318 = dot(vec3(cbLight._m0[_2036].xyz), vec3(_2306, _2307, _2308));
    float _4456 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2322 = _2298 * _2298;
    float _2326 = ((_2317 * _2317) * (_2322 + (-1.0))) + 1.0;
    float _2334 = exp2(log2(1.0 - (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0)))) * 5.0);
    float _2335 = 0.959999978542327880859375 - _684;
    float _2337 = 0.959999978542327880859375 - _685;
    float _2338 = 0.959999978542327880859375 - _686;
    float _2345 = 1.0 - _2298;
    float _2356 = (0.5 / (((_2313 * ((_2312 * _2345) + _2298)) + 9.9999999392252902907785028219223e-09) + (((_2313 * _2345) + _2298) * _2312))) * _2312;
    float _4467 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2358 = (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_2322 / ((_2326 * _2326) * 3.141590118408203125));
    uint _2372 = _2036 + 9u;
    float _2383 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2077].w)) * _525) * 0.949999988079071044921875);
    float _2384 = _2383 * _2383;
    float _2385 = cbLight._m0[_2077].x + _602;
    float _2386 = cbLight._m0[_2077].y + _603;
    float _2387 = cbLight._m0[_2077].z + _604;
    float _2391 = inversesqrt(dot(vec3(_2385, _2386, _2387), vec3(_2385, _2386, _2387)));
    float _2392 = _2391 * _2385;
    float _2393 = _2391 * _2386;
    float _2394 = _2391 * _2387;
    float _2395 = dot(vec3(_522, _523, _524), vec3(cbLight._m0[_2077].xyz));
    float _4478 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
    float _2398 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
    float _2399 = dot(vec3(_522, _523, _524), vec3(_2392, _2393, _2394));
    float _4489 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
    float _2402 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
    float _2403 = dot(vec3(cbLight._m0[_2077].xyz), vec3(_2392, _2393, _2394));
    float _4500 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2407 = _2384 * _2384;
    float _2411 = ((_2402 * _2402) * (_2407 + (-1.0))) + 1.0;
    float _2418 = exp2(log2(1.0 - (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0)))) * 5.0);
    float _2425 = 1.0 - _2384;
    float _2435 = (0.5 / (((_2313 * ((_2398 * _2425) + _2384)) + 9.9999999392252902907785028219223e-09) + (((_2313 * _2425) + _2384) * _2398))) * _2398;
    float _4511 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
    float _2437 = (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0))) * (_2407 / ((_2411 * _2411) * 3.141590118408203125));
    float _2447 = (((((_2418 * _2335) + _687) * cbLight._m0[_2372].x) * _2437) * _2059) + ((((cbLight._m0[_2284].x * _2025) * ((_2334 * _2335) + _687)) * _2358) * _2073);
    float _2448 = (((((_2418 * _2337) + _689) * cbLight._m0[_2372].y) * _2437) * _2059) + ((((cbLight._m0[_2284].y * _2027) * ((_2334 * _2337) + _689)) * _2358) * _2073);
    float _2449 = (((((_2418 * _2338) + _690) * cbLight._m0[_2372].z) * _2437) * _2059) + ((((cbLight._m0[_2284].z * _2029) * ((_2334 * _2338) + _690)) * _2358) * _2073);
    float _2505;
    float _2507;
    float _2509;
    if (_2113)
    {
        _2505 = _2447;
        _2507 = _2448;
        _2509 = _2449;
    }
    else
    {
        uint _2511 = _2036 + 2u;
        uint _2515 = _2036 + 10u;
        float _2529 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2511].w)) * _525) * 0.949999988079071044921875);
        float _2530 = _2529 * _2529;
        float _2531 = cbLight._m0[_2511].x + _602;
        float _2532 = cbLight._m0[_2511].y + _603;
        float _2533 = cbLight._m0[_2511].z + _604;
        float _2537 = inversesqrt(dot(vec3(_2531, _2532, _2533), vec3(_2531, _2532, _2533)));
        float _2538 = _2537 * _2531;
        float _2539 = _2537 * _2532;
        float _2540 = _2537 * _2533;
        float _2541 = dot(vec3(_522, _523, _524), vec3(cbLight._m0[_2511].xyz));
        float _4522 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2544 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _2545 = dot(vec3(_522, _523, _524), vec3(_2538, _2539, _2540));
        float _4533 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2548 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _2549 = dot(vec3(cbLight._m0[_2511].xyz), vec3(_2538, _2539, _2540));
        float _4544 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2553 = _2530 * _2530;
        float _2557 = ((_2548 * _2548) * (_2553 + (-1.0))) + 1.0;
        float _2564 = exp2(log2(1.0 - (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0)))) * 5.0);
        float _2571 = 1.0 - _2530;
        float _2581 = (0.5 / (((_2313 * ((_2544 * _2571) + _2530)) + 9.9999999392252902907785028219223e-09) + (((_2313 * _2571) + _2530) * _2544))) * _2544;
        float _4555 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2583 = (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (_2553 / ((_2557 * _2557) * 3.141590118408203125));
        float _2584 = isnan(1.0) ? _2051 : (isnan(_2051) ? 1.0 : min(_2051, 1.0));
        _2505 = (((((_2564 * _2335) + _687) * cbLight._m0[_2515].x) * _2583) * _2584) + _2447;
        _2507 = (((((_2564 * _2337) + _689) * cbLight._m0[_2515].y) * _2583) * _2584) + _2448;
        _2509 = (((((_2564 * _2338) + _690) * cbLight._m0[_2515].z) * _2583) * _2584) + _2449;
    }
    float _2615;
    float _2617;
    float _2619;
    if (_2222)
    {
        _2615 = _2505;
        _2617 = _2507;
        _2619 = _2509;
    }
    else
    {
        uint _2626 = _2036 + 3u;
        uint _2630 = _2036 + 11u;
        float _2644 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2626].w)) * _525) * 0.949999988079071044921875);
        float _2645 = _2644 * _2644;
        float _2646 = cbLight._m0[_2626].x + _602;
        float _2647 = cbLight._m0[_2626].y + _603;
        float _2648 = cbLight._m0[_2626].z + _604;
        float _2652 = inversesqrt(dot(vec3(_2646, _2647, _2648), vec3(_2646, _2647, _2648)));
        float _2653 = _2652 * _2646;
        float _2654 = _2652 * _2647;
        float _2655 = _2652 * _2648;
        float _2656 = dot(vec3(_522, _523, _524), vec3(cbLight._m0[_2626].xyz));
        float _4571 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        float _2659 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _2660 = dot(vec3(_522, _523, _524), vec3(_2653, _2654, _2655));
        float _4582 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2663 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
        float _2664 = dot(vec3(cbLight._m0[_2626].xyz), vec3(_2653, _2654, _2655));
        float _4593 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
        float _2668 = _2645 * _2645;
        float _2672 = ((_2663 * _2663) * (_2668 + (-1.0))) + 1.0;
        float _2679 = exp2(log2(1.0 - (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0)))) * 5.0);
        float _2686 = 1.0 - _2645;
        float _2696 = (0.5 / (((_2313 * ((_2659 * _2686) + _2645)) + 9.9999999392252902907785028219223e-09) + (((_2313 * _2686) + _2645) * _2659))) * _2659;
        float _4604 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        float _2698 = (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * (_2668 / ((_2672 * _2672) * 3.141590118408203125));
        float _2699 = isnan(1.0) ? _2052 : (isnan(_2052) ? 1.0 : min(_2052, 1.0));
        _2615 = (((((_2679 * _2335) + _687) * cbLight._m0[_2630].x) * _2698) * _2699) + _2505;
        _2617 = (((((_2679 * _2337) + _689) * cbLight._m0[_2630].y) * _2698) * _2699) + _2507;
        _2619 = (((((_2679 * _2338) + _690) * cbLight._m0[_2630].z) * _2698) * _2699) + _2509;
    }
    float _2765;
    float _2767;
    float _2769;
    float _2771;
    float _2773;
    float _2775;
    if (_2034.y == 0u)
    {
        uvec4 _2720 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2721 = _2720.x;
        uint _2732 = uint((float(_2720.y) * floor(float(uint(cbSceneParam._m0[85u].y * _624) / _2721))) + floor(float(uint(cbSceneParam._m0[85u].x * _623) / _2721)));
        float _2742 = (log2(_1812 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2743 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
        uint _2746 = uint(isnan(14.0) ? _2743 : (isnan(_2743) ? 14.0 : min(_2743, 14.0)));
        uvec4 _2751 = texelFetch(g_lightClusterGridBuffer, int(((_2746 << 2u) + (_2732 << 6u)) >> 2u));
        uint _2752 = _2751.x;
        uint _2753 = _2720.z;
        float _2832;
        float _2834;
        float _2836;
        float _2838;
        float _2840;
        float _2842;
        if (((((1u << ((_2753 >> 4u) & 15u)) + 4294967295u) & _2752) == 0u) || ((_2753 & 240u) == 0u))
        {
            _2832 = 0.0;
            _2834 = 0.0;
            _2836 = 0.0;
            _2838 = 0.0;
            _2840 = 0.0;
            _2842 = 0.0;
        }
        else
        {
            float _2833;
            float _2835;
            float _2837;
            float _2839;
            float _2841;
            float _2843;
            float _2985 = 0.0;
            float _2986 = 0.0;
            float _2987 = 0.0;
            float _2988 = 0.0;
            float _2989 = 0.0;
            float _2990 = 0.0;
            uint _2991 = 0u;
            uint _3000;
            bool _3001;
            for (;;)
            {
                _3000 = texelFetch(g_lightClassification, int((((_2746 << 5u) + (_2732 << 9u)) + (_2991 << 2u)) >> 2u)).x;
                _3001 = _3000 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3001)
                {
                    frontier_phi_71_pred = _2990;
                    frontier_phi_71_pred_1 = _2989;
                    frontier_phi_71_pred_2 = _2988;
                    frontier_phi_71_pred_3 = _2987;
                    frontier_phi_71_pred_4 = _2986;
                    frontier_phi_71_pred_5 = _2985;
                }
                else
                {
                    float _3130;
                    float _3131;
                    float _3132;
                    float _3133;
                    float _3134;
                    float _3135;
                    uint _3136;
                    _3130 = _2985;
                    _3131 = _2986;
                    _3132 = _2987;
                    _3133 = _2988;
                    _3134 = _2989;
                    _3135 = _2990;
                    _3136 = _3000;
                    float _3057;
                    float _3058;
                    float _3059;
                    float _3060;
                    float _3061;
                    float _3062;
                    for (;;)
                    {
                        uint _3140 = uint(findLSB(_3136)) + (_2991 << 5u);
                        uint _3137 = (_3136 + 4294967295u) & _3136;
                        uint _3142 = _3140 * 48u;
                        vec4 _3156 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3142)).x, texelFetch(g_PointLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3142 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3142 + 3u)).x));
                        uint _3162 = (_3140 * 48u) + 4u;
                        vec4 _3175 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3162)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 3u)).x));
                        uint _3181 = (_3140 * 48u) + 8u;
                        vec3 _3192 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3181)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 2u)).x));
                        float _3196 = _3156.x - _1810;
                        float _3197 = _3156.y - _1811;
                        float _3198 = _3156.z - _1812;
                        float _3199 = dot(vec3(_3196, _3197, _3198), vec3(_3196, _3197, _3198));
                        float _3202 = inversesqrt(_3199);
                        float _3203 = _3202 * _3196;
                        float _3204 = _3202 * _3197;
                        float _3205 = _3202 * _3198;
                        float _3206 = dot(vec3(_644, _647, _650), vec3(_3203, _3204, _3205));
                        float _3211 = 1.0 - (_3199 * _3156.w);
                        float _4630 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                        float _3212 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                        float _3213 = sqrt(_3199) * _3175.w;
                        float _3216 = 1.39999997615814208984375 / (_3213 + 1.39999997615814208984375);
                        float _3217 = _3216 * _3216;
                        float _3220 = ((1.0 - _3217) * _3206) + _3217;
                        float _3223 = _3213 * _3213;
                        float _3227 = ((isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0))) * _3212) / ((_3223 * 0.699999988079071044921875) + 1.0);
                        float _3231 = (-0.0) - _1810;
                        float _3232 = (-0.0) - _1811;
                        float _3233 = (-0.0) - _1812;
                        float _3237 = inversesqrt(dot(vec3(_3231, _3232, _3233), vec3(_3231, _3232, _3233)));
                        float _3238 = _3237 * _3231;
                        float _3239 = _3237 * _3232;
                        float _3240 = _3237 * _3233;
                        float _3247 = exp2(log2(1.0 / ((_3223 * 3.5) + 5.0)) * 0.25);
                        float _3248 = 1.0 - _719;
                        float _3255 = sqrt(1.0 - ((1.0 - (_3248 * _3248)) * (1.0 - (_3247 * _3247))));
                        float _3256 = _3255 * _3255;
                        float _3257 = _3256 * _3256;
                        float _3258 = _3238 + _3203;
                        float _3259 = _3239 + _3204;
                        float _3260 = _3240 + _3205;
                        float _3264 = inversesqrt(dot(vec3(_3258, _3259, _3260), vec3(_3258, _3259, _3260)));
                        float _3268 = dot(vec3(_644, _647, _650), vec3(_3238, _3239, _3240));
                        float _4646 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                        float _3271 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                        float _3272 = dot(vec3(_644, _647, _650), vec3(_3264 * _3258, _3264 * _3259, _3264 * _3260));
                        float _4657 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                        float _3275 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                        float _3279 = ((_3275 * _3275) * (_3257 + (-1.0))) + 1.0;
                        float _3280 = _3216 * _3256;
                        float _3281 = _3280 * _3280;
                        float _3284 = ((1.0 - _3281) * _3206) + _3281;
                        float _4668 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                        float _3285 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                        float _3286 = 1.0 - _3256;
                        float _3296 = (0.5 / (((_3285 * ((_3271 * _3286) + _3256)) + 9.9999999392252902907785028219223e-09) + (((_3285 * _3286) + _3256) * _3271))) * _3285;
                        float _4679 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                        float _3307 = (((_3257 * 3.1415927410125732421875) * (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0)))) / ((_3279 * _3279) * ((_3223 * 2.1991131305694580078125) + 3.141590118408203125))) * _3212;
                        _3060 = (_3227 * _3175.x) + _3133;
                        _3061 = (_3227 * _3175.y) + _3134;
                        _3062 = (_3227 * _3175.z) + _3135;
                        _3057 = (_3307 * _3192.x) + _3130;
                        _3058 = (_3307 * _3192.y) + _3131;
                        _3059 = (_3307 * _3192.z) + _3132;
                        if (_3137 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3130 = _3057;
                            _3131 = _3058;
                            _3132 = _3059;
                            _3133 = _3060;
                            _3134 = _3061;
                            _3135 = _3062;
                            _3136 = _3137;
                        }
                    }
                    frontier_phi_71_pred = _3062;
                    frontier_phi_71_pred_1 = _3061;
                    frontier_phi_71_pred_2 = _3060;
                    frontier_phi_71_pred_3 = _3059;
                    frontier_phi_71_pred_4 = _3058;
                    frontier_phi_71_pred_5 = _3057;
                }
                _2843 = frontier_phi_71_pred;
                _2841 = frontier_phi_71_pred_1;
                _2839 = frontier_phi_71_pred_2;
                _2837 = frontier_phi_71_pred_3;
                _2835 = frontier_phi_71_pred_4;
                _2833 = frontier_phi_71_pred_5;
                uint _2992 = _2991 + 1u;
                if (_2992 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2985 = _2833;
                    _2986 = _2835;
                    _2987 = _2837;
                    _2988 = _2839;
                    _2989 = _2841;
                    _2990 = _2843;
                    _2991 = _2992;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2832 = _2833;
            _2834 = _2835;
            _2836 = _2837;
            _2838 = _2839;
            _2840 = _2841;
            _2842 = _2843;
        }
        uvec4 _2846 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2847 = _2846.z;
        uint _2849 = (_2847 >> 8u) & 15u;
        float _2953;
        float _2955;
        float _2957;
        float _2959;
        float _2961;
        float _2963;
        if (((4294967295u << _2849) & _2752) == 0u)
        {
            _2953 = _2832;
            _2955 = _2834;
            _2957 = _2836;
            _2959 = _2838;
            _2961 = _2840;
            _2963 = _2842;
        }
        else
        {
            float _2978 = inversesqrt(dot(vec3(_1810, _1811, _1812), vec3(_1810, _1811, _1812)));
            float _2979 = _2978 * _1810;
            float _2980 = _2978 * _1811;
            float _2981 = _2978 * _1812;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2849 < ((_2847 >> 12u) & 15u))
            {
                float _2954;
                float _2956;
                float _2958;
                float _2960;
                float _2962;
                float _2964;
                float _3113 = _2832;
                float _3114 = _2834;
                float _3115 = _2836;
                float _3116 = _2838;
                float _3117 = _2840;
                float _3118 = _2842;
                uint _3119 = _2849;
                uint _3128;
                bool _3129;
                for (;;)
                {
                    _3128 = texelFetch(g_lightClassification, int((((_2746 << 5u) + (_2732 << 9u)) + (_3119 << 2u)) >> 2u)).x;
                    _3129 = _3128 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3129)
                    {
                        frontier_phi_82_pred = _3118;
                        frontier_phi_82_pred_1 = _3117;
                        frontier_phi_82_pred_2 = _3116;
                        frontier_phi_82_pred_3 = _3115;
                        frontier_phi_82_pred_4 = _3114;
                        frontier_phi_82_pred_5 = _3113;
                    }
                    else
                    {
                        float _3321;
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3325;
                        float _3326;
                        float _3615;
                        float _3616;
                        float _3617;
                        float _3618;
                        float _3619;
                        float _3620;
                        float _3334 = _3113;
                        float _3335 = _3114;
                        float _3336 = _3115;
                        float _3337 = _3116;
                        float _3338 = _3117;
                        float _3339 = _3118;
                        uint _3340 = _3128;
                        uint _3341;
                        vec4 _3366;
                        float _3367;
                        vec4 _3382;
                        vec3 _3394;
                        vec4 _3410;
                        vec4 _3425;
                        float _3471;
                        bool _3472;
                        for (;;)
                        {
                            uint _3351 = ((_3119 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3340));
                            _3341 = (_3340 + 4294967295u) & _3340;
                            uint _3353 = _3351 * 40u;
                            _3366 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3353)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 3u)).x));
                            _3367 = _3366.w;
                            uint _3369 = (_3351 * 40u) + 4u;
                            _3382 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3369)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 3u)).x));
                            uint _3384 = (_3351 * 40u) + 8u;
                            _3394 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3384)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 2u)).x));
                            uint _3397 = (_3351 * 40u) + 16u;
                            _3410 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3397)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 3u)).x));
                            uint _3412 = (_3351 * 40u) + 20u;
                            _3425 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 3u)).x));
                            uint _3427 = (_3351 * 40u) + 24u;
                            vec4 _3440 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3427)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 3u)).x));
                            uint _3446 = (_3351 * 40u) + 28u;
                            vec4 _3459 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3446)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 3u)).x));
                            _3471 = fma(_1812, _3459.z, fma(_1811, _3459.y, _3459.x * _1810)) + _3459.w;
                            _3472 = !((fma(_1812, _3440.z, fma(_1811, _3440.y, _3440.x * _1810)) + _3440.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3472)
                            {
                                float _3499 = _3366.x - _1810;
                                float _3500 = _3366.y - _1811;
                                float _3501 = _3366.z - _1812;
                                float _3502 = dot(vec3(_3499, _3500, _3501), vec3(_3499, _3500, _3501));
                                float _3505 = inversesqrt(_3502);
                                float _3506 = _3505 * _3499;
                                float _3507 = _3505 * _3500;
                                float _3508 = _3505 * _3501;
                                float _3512 = 1.0 - (_3502 / (_3367 * _3367));
                                float _4690 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                                float _3513 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
                                float _3517 = sqrt(_3502) * _3382.w;
                                float _3519 = 1.39999997615814208984375 / (_3517 + 1.39999997615814208984375);
                                float _3520 = _3519 * _3519;
                                float _3523 = ((1.0 - _3520) * dot(vec3(_3506, _3507, _3508), vec3(_644, _647, _650))) + _3520;
                                float _3526 = _3517 * _3517;
                                float _3530 = (fma(_1812, _3410.z, fma(_1811, _3410.y, _3410.x * _1810)) + _3410.w) / _3471;
                                float _3531 = (fma(_1812, _3425.z, fma(_1811, _3425.y, _3425.x * _1810)) + _3425.w) / _3471;
                                float _3535 = 1.0 - dot(vec2(_3530, _3531), vec2(_3530, _3531));
                                float _4706 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                                float _3536 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
                                float _3537 = _3536 * (((isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0))) * _3513) / ((_3526 * 0.699999988079071044921875) + 1.0));
                                float _3549 = exp2(log2(1.0 / ((_3526 * 3.5) + 5.0)) * 0.25);
                                float _3550 = 1.0 - _719;
                                float _3557 = sqrt(1.0 - ((1.0 - (_3550 * _3550)) * (1.0 - (_3549 * _3549))));
                                float _3558 = _3557 * _3557;
                                float _3559 = _3558 * _3558;
                                float _3560 = _3506 - _2979;
                                float _3561 = _3507 - _2980;
                                float _3562 = _3508 - _2981;
                                float _3566 = inversesqrt(dot(vec3(_3560, _3561, _3562), vec3(_3560, _3561, _3562)));
                                float _3570 = dot(vec3(_644, _647, _650), vec3((-0.0) - _2979, (-0.0) - _2980, (-0.0) - _2981));
                                float _4717 = isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0));
                                float _3573 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                                float _3574 = dot(vec3(_644, _647, _650), vec3(_3566 * _3560, _3566 * _3561, _3566 * _3562));
                                float _4728 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                                float _3577 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
                                float _3581 = ((_3577 * _3577) * (_3559 + (-1.0))) + 1.0;
                                float _3582 = _3519 * _3558;
                                float _3583 = _3582 * _3582;
                                float _3589 = ((1.0 - _3583) * dot(vec3(_644, _647, _650), vec3(_3506, _3507, _3508))) + _3583;
                                float _4739 = isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0));
                                float _3590 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                                float _3591 = 1.0 - _3558;
                                float _3601 = (0.5 / (((_3590 * ((_3573 * _3591) + _3558)) + 9.9999999392252902907785028219223e-09) + (((_3590 * _3591) + _3558) * _3573))) * _3590;
                                float _4750 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                                float _3611 = (_3536 * _3513) * (((_3559 * 3.1415927410125732421875) * (isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0)))) / ((_3581 * _3581) * ((_3526 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3537 * _3382.z;
                                frontier_phi_88_pred_1 = _3537 * _3382.y;
                                frontier_phi_88_pred_2 = _3537 * _3382.x;
                                frontier_phi_88_pred_3 = _3611 * _3394.z;
                                frontier_phi_88_pred_4 = _3611 * _3394.y;
                                frontier_phi_88_pred_5 = _3611 * _3394.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3620 = frontier_phi_88_pred;
                            _3619 = frontier_phi_88_pred_1;
                            _3618 = frontier_phi_88_pred_2;
                            _3617 = frontier_phi_88_pred_3;
                            _3616 = frontier_phi_88_pred_4;
                            _3615 = frontier_phi_88_pred_5;
                            _3324 = _3618 + _3337;
                            _3325 = _3619 + _3338;
                            _3326 = _3620 + _3339;
                            _3321 = _3615 + _3334;
                            _3322 = _3616 + _3335;
                            _3323 = _3617 + _3336;
                            if (_3341 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3334 = _3321;
                                _3335 = _3322;
                                _3336 = _3323;
                                _3337 = _3324;
                                _3338 = _3325;
                                _3339 = _3326;
                                _3340 = _3341;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3326;
                        frontier_phi_82_pred_1 = _3325;
                        frontier_phi_82_pred_2 = _3324;
                        frontier_phi_82_pred_3 = _3323;
                        frontier_phi_82_pred_4 = _3322;
                        frontier_phi_82_pred_5 = _3321;
                    }
                    _2964 = frontier_phi_82_pred;
                    _2962 = frontier_phi_82_pred_1;
                    _2960 = frontier_phi_82_pred_2;
                    _2958 = frontier_phi_82_pred_3;
                    _2956 = frontier_phi_82_pred_4;
                    _2954 = frontier_phi_82_pred_5;
                    uint _3120 = _3119 + 1u;
                    if (_3120 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3113 = _2954;
                        _3114 = _2956;
                        _3115 = _2958;
                        _3116 = _2960;
                        _3117 = _2962;
                        _3118 = _2964;
                        _3119 = _3120;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2960;
                frontier_phi_63_64_ladder_1 = _2964;
                frontier_phi_63_64_ladder_2 = _2962;
                frontier_phi_63_64_ladder_3 = _2958;
                frontier_phi_63_64_ladder_4 = _2956;
                frontier_phi_63_64_ladder_5 = _2954;
            }
            else
            {
                frontier_phi_63_64_ladder = _2838;
                frontier_phi_63_64_ladder_1 = _2842;
                frontier_phi_63_64_ladder_2 = _2840;
                frontier_phi_63_64_ladder_3 = _2836;
                frontier_phi_63_64_ladder_4 = _2834;
                frontier_phi_63_64_ladder_5 = _2832;
            }
            _2953 = frontier_phi_63_64_ladder_5;
            _2955 = frontier_phi_63_64_ladder_4;
            _2957 = frontier_phi_63_64_ladder_3;
            _2959 = frontier_phi_63_64_ladder;
            _2961 = frontier_phi_63_64_ladder_2;
            _2963 = frontier_phi_63_64_ladder_1;
        }
        float _2968 = isnan(1.0) ? _703 : (isnan(_703) ? 1.0 : min(_703, 1.0));
        _2765 = (_2968 * _2959) + _2277;
        _2767 = (_2968 * _2961) + _2279;
        _2769 = (_2968 * _2963) + _2281;
        _2771 = ((_2953 * _687) * _2968) + _2615;
        _2773 = ((_2955 * _689) * _2968) + _2617;
        _2775 = ((_2957 * _690) * _2968) + _2619;
    }
    else
    {
        _2765 = _2277;
        _2767 = _2279;
        _2769 = _2281;
        _2771 = _2615;
        _2773 = _2617;
        _2775 = _2619;
    }
    float _4766 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _4777 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _4788 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _2792 = ((isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0))) * (_2765 + ((isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0))) * _703))) + ((_2771 + ((isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0))) * _1542)) * cbPerFrame._m0[3u].x);
    float _2793 = ((isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0))) * (_2767 + ((isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0))) * _703))) + ((_2773 + ((isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))) * _1542)) * cbPerFrame._m0[3u].x);
    float _2794 = ((isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0))) * (_2769 + ((isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0))) * _703))) + ((_2775 + ((isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))) * _1542)) * cbPerFrame._m0[3u].x);
    uint _2795 = _234 + 6u;
    float _2803 = _623 / cbSceneParam._m0[86u].x;
    float _2804 = _624 / cbSceneParam._m0[86u].y;
    vec4 _2818 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2803, _2804, (log2((isnan(cbSceneParam._m0[77u].w) ? _544 : (isnan(_544) ? cbSceneParam._m0[77u].w : min(_544, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2820 = _2818.x;
    float _2821 = _2818.y;
    float _2822 = _2818.z;
    float _2823 = _2818.w;
    float _2895;
    float _2897;
    float _2899;
    float _2901;
    if (_544 > cbSceneParam._m0[78u].w)
    {
        float _2857 = isnan(_544) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _544 : min(cbSceneParam._m0[80u].w, _544));
        float _2858 = _2857 / _544;
        float _2869 = _2858 * _595;
        float _2870 = _596 * _2858;
        float _2871 = (-0.0) - _2870;
        float _2873 = _2858 * _597;
        float _2875 = (cbSceneParam._m0[77u].w * _2871) / _2857;
        float _2876 = _2875 + cbSceneParam._m0[79u].w;
        float _2877 = cbSceneParam._m0[79u].w - _2870;
        float _2883 = sqrt(((_2869 * _2869) + (_2870 * _2870)) + (_2873 * _2873));
        float _2886 = (1.0 - (cbSceneParam._m0[77u].w / _2857)) * _2883;
        float _2891 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2893 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3070;
        if (abs((_2871 - _2875) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3070 = ((((_2876 > 0.0) ? exp2(_2891 * _2876) : (2.0 - exp2(_2893 * _2876))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2886;
        }
        else
        {
            float _3014 = 1.0 / cbSceneParam._m0[80u].x;
            float _3015 = isnan(_2877) ? _2876 : (isnan(_2876) ? _2877 : max(_2876, _2877));
            float _3016 = isnan(_2877) ? _2876 : (isnan(_2876) ? _2877 : min(_2876, _2877));
            float _3025 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : min(_3015, 0.0));
            float _3026 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : min(_3016, 0.0));
            _3070 = ((abs(_2883 / _2871) * cbSceneParam._m0[80u].y) * ((((_3025 - _3026) * 2.0) - ((exp2(_2891 * (isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0)))) - exp2(_2891 * (isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0))))) * _3014)) - ((exp2(_2893 * _3025) - exp2(_2893 * _3026)) * _3014))) + (_2886 * cbSceneParam._m0[80u].z);
        }
        vec4 _3072 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2803, _2804, 1.0), 0.0);
        float _3081 = exp2((_3070 * (-1.44269502162933349609375)) * (1.0 - _3072.w));
        float _3082 = log2(_3081);
        float _3098 = log2(_2823);
        _2895 = (exp2(_3098 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3082 * cbSceneParam._m0[78u].x)) * _3072.x) / cbSceneParam._m0[78u].x)) + _2820;
        _2897 = (exp2(_3098 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3082 * cbSceneParam._m0[78u].y)) * _3072.y) / cbSceneParam._m0[78u].y)) + _2821;
        _2899 = (exp2(_3098 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3082 * cbSceneParam._m0[78u].z)) * _3072.z) / cbSceneParam._m0[78u].z)) + _2822;
        _2901 = _3081 * _2823;
    }
    else
    {
        _2895 = _2820;
        _2897 = _2821;
        _2899 = _2822;
        _2901 = _2823;
    }
    bool _3108;
    vec4 _2911;
    vec4 _2933;
    float _2935;
    float _2939;
    float _2940;
    float _2941;
    float _2942;
    bool _2952;
    for (;;)
    {
        _2911 = cbMatDynParam._m0[0u];
        float _2913 = roundEven(_2911.y);
        bool _2914 = _2913 == 3.0;
        float _2915 = log2(_2901);
        float _2922 = exp2(_2915 * cbSceneParam._m0[78u].x) * _2792;
        float _2923 = exp2(_2915 * cbSceneParam._m0[78u].y) * _2793;
        float _2924 = exp2(_2915 * cbSceneParam._m0[78u].z) * _2794;
        float _2931 = _611 + (-0.5);
        _2933 = cbMtdParam._m0[1u];
        _2935 = _2933.y * _2931;
        float _2938 = (_2913 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2939 = _2938 * (_2914 ? _2922 : (_2922 + (cbSceneParam._m0[72u].w * _2895)));
        _2940 = _2938 * (_2914 ? _2923 : (_2923 + (cbSceneParam._m0[72u].w * _2897)));
        _2941 = _2938 * (_2914 ? _2924 : (_2924 + (cbSceneParam._m0[72u].w * _2899)));
        _2942 = _2931 * 0.999000012874603271484375;
        _2952 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2952)
        {
            if ((cbInstanceData._m0[_234 + 7u].x + _2942) < 0.5)
            {
                _3108 = true;
                break;
            }
        }
        uint _3049 = _663 + uint(_2911.w);
        if ((cbInstanceData._m0[_3049].w < 1.0) && ((cbInstanceData._m0[_3049].w + _2942) < 0.5))
        {
            _3108 = true;
            break;
        }
        if ((_2935 + 1.0) < _2933.x)
        {
            _3108 = true;
            break;
        }
        _3108 = false;
        break;
    }
    float _3312;
    if (_3108)
    {
        discard_state = true;
        _3312 = 0.0;
    }
    else
    {
        _3312 = cbInstanceData._m0[_2795].w;
    }
    SV_Target.x = _2939;
    SV_Target.y = _2940;
    SV_Target.z = _2941;
    SV_Target.w = _3312;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2795].w;
    discard_exit();
}


