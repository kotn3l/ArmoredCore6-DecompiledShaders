#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1117;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _216 = _215 * _207;
    float _217 = _215 * _208;
    float _218 = _215 * _209;
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230 = _229 * TANGENT.x;
    float _231 = _229 * TANGENT.y;
    float _232 = _229 * TANGENT.z;
    float _243 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _245 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _246 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3728 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3739 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3750 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    uint _256 = uint(roundEven(NORMAL.w)) * 13u;
    uint _261 = _256 + 1u;
    uint _265 = _256 + 2u;
    float _274 = sqrt(((cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x)) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x));
    float _275 = _274 * TEXCOORD.z;
    float _276 = _274 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _275) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _276) + cbTextureTilingScale._m0[13u].w));
    vec4 _312 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _317 = _312.x * cbMtdParam._m0[9u].x;
    float _318 = _312.y * cbMtdParam._m0[9u].y;
    float _319 = _312.z * cbMtdParam._m0[9u].z;
    float _323 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _289.x) * _317;
    float _326 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _289.y) * _318;
    float _329 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _289.z) * _319;
    float _336 = ((_317 - _323) * (isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0)))) + _323;
    float _337 = ((_318 - _326) * (isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0)))) + _326;
    float _338 = ((_319 - _329) * (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0)))) + _329;
    vec4 _356 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _275) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _276) + cbTextureTilingScale._m0[20u].w));
    vec4 _382 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _386 = _382.z;
    float _390 = (_382.x * 2.0) + (-1.0);
    float _391 = (_382.y * 2.0) + (-1.0);
    float _392 = dot(vec2(_390, _391), vec2(_390, _391));
    float _3761 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _397 = sqrt(1.0 - (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))));
    float _402 = _390 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_356.x * 2.0) + (-1.0)));
    float _403 = _391 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_356.y * 2.0) + (-1.0)));
    float _406 = fma(_397, _223, fma(_403, _230, _402 * _216));
    float _409 = fma(_397, _224, fma(_403, _231, _402 * _217));
    float _412 = fma(_397, _225, fma(_403, _232, _402 * _218));
    float _416 = inversesqrt(dot(vec3(_406, _409, _412), vec3(_406, _409, _412)));
    vec4 _452 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _275) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _276) + cbTextureTilingScale._m0[11u].w));
    float _454 = _452.x;
    float _455 = 1.0 - _454;
    float _462 = ((_454 - _455) * cbMtdParam._m0[24u].z) + _455;
    float _464 = (cbMtdParam._m0[19u].x + dot(vec4(_416 * _406, _416 * _409, _416 * _412, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_462 * cbMtdParam._m0[21u].z);
    float _3772 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _465 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    float _480 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_462 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3783 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _481 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _485 = ((_465 * (cbMtdParam._m0[17u].x - _336)) * _481) + _336;
    float _486 = ((_465 * (cbMtdParam._m0[17u].y - _337)) * _481) + _337;
    float _487 = ((_465 * (cbMtdParam._m0[17u].z - _338)) * _481) + _338;
    vec4 _500 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _502 = _500.x;
    float _505 = _502 - ((_502 * _465) * _481);
    float _510 = (((_356.z - _386) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _386;
    vec4 _523 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _275) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _276) + cbTextureTilingScale._m0[15u].w));
    float _530 = (_523.x * 2.0) + (-1.0);
    float _531 = (_523.y * 2.0) + (-1.0);
    float _532 = dot(vec2(_530, _531), vec2(_530, _531));
    float _3794 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _541 = (((_523.z - _510) * _465) * _481) + _510;
    float _556 = (((cbMtdParam._m0[21u].x * _402) + ((_530 - _402) * _465)) * _481) + _402;
    float _557 = (((cbMtdParam._m0[21u].x * _403) + ((_531 - _403) * _465)) * _481) + _403;
    float _558 = (((sqrt(1.0 - (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0)))) - _397) * _465) * _481) + _397;
    float _560 = cbMtdParam._m0[22u].x + _382.w;
    float _563 = fma(_558, _223, fma(_557, _230, _556 * _216));
    float _566 = fma(_558, _224, fma(_557, _231, _556 * _217));
    float _569 = fma(_558, _225, fma(_557, _232, _556 * _218));
    float _573 = inversesqrt(dot(vec3(_563, _566, _569), vec3(_563, _566, _569)));
    float _574 = _573 * _563;
    float _575 = _573 * _566;
    float _576 = _573 * _569;
    float _3805 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _577 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _3816 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _3827 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _3838 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _3849 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _3860 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _582 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    float _596 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _637 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _647 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _637);
    float _648 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _637);
    float _649 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _637);
    float _653 = inversesqrt(dot(vec3(_647, _648, _649), vec3(_647, _648, _649)));
    float _654 = _647 * _653;
    float _655 = _648 * _653;
    float _656 = _649 * _653;
    float _662 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _663 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _684 = fma(_576, cbSceneParam._m0[5u].z, fma(_575, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _574));
    float _687 = fma(_576, cbSceneParam._m0[6u].z, fma(_575, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _574));
    float _690 = fma(_576, cbSceneParam._m0[7u].z, fma(_575, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _574));
    uint _704 = (_256 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _710 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0)))) * cbInstanceData._m0[_704].x;
    float _711 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0)))) * cbInstanceData._m0[_704].y;
    float _712 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0)))) * cbInstanceData._m0[_704].z;
    float _3871 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _713 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _3882 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _714 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _3893 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _715 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _716 = 1.0 - _582;
    float _717 = _713 * _716;
    float _718 = _714 * _716;
    float _719 = _715 * _716;
    float _724 = (_713 + (-0.039999999105930328369140625)) * _582;
    float _725 = (_714 + (-0.039999999105930328369140625)) * _582;
    float _726 = (_715 + (-0.039999999105930328369140625)) * _582;
    float _727 = _724 + 0.039999999105930328369140625;
    float _729 = _725 + 0.039999999105930328369140625;
    float _730 = _726 + 0.039999999105930328369140625;
    vec4 _739 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _662, cbSceneParam._m0[86u].y * _663));
    float _743 = ((isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * TEXCOORD_5.w) * _739.x;
    float _744 = dot(vec3(_574, _575, _576), vec3(_654, _655, _656));
    float _747 = _744 * 2.0;
    float _751 = (_747 * _574) - _654;
    float _752 = (_747 * _575) - _655;
    float _753 = (_747 * _576) - _656;
    float _757 = abs(dot(vec3(_654, _655, _656), vec3(_574, _575, _576)));
    float _3904 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _759 = sqrt(_577);
    float _772 = exp2((_759 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_759 * 3.0));
    float _778 = (1.0 - _772) * ((_759 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _779 = _772 * _759;
    float _807 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _811 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _815 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1116;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _841 = fma(_815, cbModelParam._m0[26u].z, fma(_811, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _807));
        float _845 = fma(_815, cbModelParam._m0[27u].z, fma(_811, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _807));
        float _849 = fma(_815, cbModelParam._m0[28u].z, fma(_811, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _807));
        float _874 = _807 + _574;
        float _875 = _811 + _575;
        float _876 = _815 + _576;
        float _886 = fma(_876, cbModelParam._m0[26u].z, fma(_875, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _874)) - _841;
        float _887 = fma(_876, cbModelParam._m0[27u].z, fma(_875, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _874)) - _845;
        float _888 = fma(_876, cbModelParam._m0[28u].z, fma(_875, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _874)) - _849;
        float _892 = inversesqrt(dot(vec3(_886, _887, _888), vec3(_886, _887, _888)));
        float _905 = ((_892 * _886) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_841 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _906 = ((_892 * _887) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_845 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _907 = ((_892 * _888) / cbModelParam._m0[34u].z) + ((((((_849 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _910 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        vec4 _917 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        vec4 _924 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        vec4 _931 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        float _944 = exp2((_910.w + (-0.5)) * 20.0) * 2.0;
        float _945 = _944 * (_910.x + (-0.5));
        float _946 = _944 * (_910.y + (-0.5));
        float _947 = _944 * (_910.z + (-0.5));
        float _954 = exp2((_917.w + (-0.5)) * 20.0) * 2.0;
        float _955 = _954 * (_917.x + (-0.5));
        float _956 = _954 * (_917.y + (-0.5));
        float _957 = _954 * (_917.z + (-0.5));
        float _964 = exp2((_924.w + (-0.5)) * 20.0) * 2.0;
        float _965 = _964 * (_924.x + (-0.5));
        float _966 = _964 * (_924.y + (-0.5));
        float _967 = _964 * (_924.z + (-0.5));
        float _974 = exp2((_931.w + (-0.5)) * 20.0) * 2.0;
        float _975 = _974 * (_931.x + (-0.5));
        float _976 = _974 * (_931.y + (-0.5));
        float _977 = _974 * (_931.z + (-0.5));
        float _978 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _979 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _980 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _981 = _945 * 0.5;
        float _982 = _955 * 0.5;
        float _983 = _965 * 0.5;
        float _984 = dot(vec3(_981, _982, _983), vec3(_981, _982, _983));
        float _989 = (_984 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_984);
        float _998 = (dot(vec3(_574, _575, _576), vec3(_989 * _981, _989 * _982, _989 * _983)) + 1.0) * 0.5;
        float _3930 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1008 = sqrt(((_982 * _982) + (_981 * _981)) + (_983 * _983)) / (_978 + 9.9999997473787516355514526367188e-06);
        float _3941 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1010 = _1009 * 2.0;
        float _1014 = (1.0 - _1009) / (_1009 + 1.0);
        float _3952 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1024 = ((((1.0 - _1015) * (_1010 + 2.0)) * exp2(log2(isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * (_1010 + 1.0))) + _1015) * _978;
        float _1025 = _946 * 0.5;
        float _1026 = _956 * 0.5;
        float _1027 = _966 * 0.5;
        float _1028 = dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027));
        float _1033 = (_1028 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1028);
        float _1041 = (dot(vec3(_574, _575, _576), vec3(_1033 * _1025, _1033 * _1026, _1033 * _1027)) + 1.0) * 0.5;
        float _3963 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1050 = sqrt(((_1026 * _1026) + (_1025 * _1025)) + (_1027 * _1027)) / (_979 + 9.9999997473787516355514526367188e-06);
        float _3974 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1052 = _1051 * 2.0;
        float _1056 = (1.0 - _1051) / (_1051 + 1.0);
        float _3985 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1066 = ((((1.0 - _1057) * (_1052 + 2.0)) * exp2(log2(isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * (_1052 + 1.0))) + _1057) * _979;
        float _1067 = _947 * 0.5;
        float _1068 = _957 * 0.5;
        float _1069 = _967 * 0.5;
        float _1070 = dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069));
        float _1075 = (_1070 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1070);
        float _1083 = (dot(vec3(_574, _575, _576), vec3(_1075 * _1067, _1075 * _1068, _1075 * _1069)) + 1.0) * 0.5;
        float _3996 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1092 = sqrt(((_1068 * _1068) + (_1067 * _1067)) + (_1069 * _1069)) / (_980 + 9.9999997473787516355514526367188e-06);
        float _4007 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1094 = _1093 * 2.0;
        float _1098 = (1.0 - _1093) / (_1093 + 1.0);
        float _4018 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1108 = ((((1.0 - _1099) * (_1094 + 2.0)) * exp2(log2(isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_1094 + 1.0))) + _1099) * _980;
        _1116 = _947;
        _1118 = _946;
        _1119 = _945;
        _1120 = _957;
        _1121 = _956;
        _1122 = _955;
        _1123 = _967;
        _1124 = _966;
        _1125 = _965;
        _1126 = _980;
        _1127 = _979;
        _1128 = _978;
        _1129 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0)));
        _1130 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0)));
        _1131 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0)));
    }
    else
    {
        _1116 = _1117;
        _1118 = _1117;
        _1119 = _1117;
        _1120 = _1117;
        _1121 = _1117;
        _1122 = _1117;
        _1123 = _1117;
        _1124 = _1117;
        _1125 = _1117;
        _1126 = _1117;
        _1127 = _1117;
        _1128 = _1117;
        _1129 = 0.0;
        _1130 = 0.0;
        _1131 = 0.0;
    }
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1156 = fma(_815, cbModelParam._m0[30u].z, fma(_811, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _807));
        float _1160 = fma(_815, cbModelParam._m0[31u].z, fma(_811, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _807));
        float _1164 = fma(_815, cbModelParam._m0[32u].z, fma(_811, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _807));
        float _1187 = _807 + _574;
        float _1188 = _811 + _575;
        float _1189 = _815 + _576;
        float _1199 = fma(_1189, cbModelParam._m0[30u].z, fma(_1188, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1187)) - _1156;
        float _1200 = fma(_1189, cbModelParam._m0[31u].z, fma(_1188, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1187)) - _1160;
        float _1201 = fma(_1189, cbModelParam._m0[32u].z, fma(_1188, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1187)) - _1164;
        float _1205 = inversesqrt(dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201)));
        float _1218 = ((_1205 * _1199) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1156 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1219 = ((_1205 * _1200) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1160 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1220 = ((_1205 * _1201) / cbModelParam._m0[35u].z) + ((((((_1164 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1222 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1218, _1219, _1220), 0.0);
        vec4 _1229 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1218, _1219, _1220), 0.0);
        vec4 _1236 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1218, _1219, _1220), 0.0);
        vec4 _1243 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1218, _1219, _1220), 0.0);
        float _1255 = exp2((_1222.w + (-0.5)) * 20.0) * 2.0;
        float _1256 = _1255 * (_1222.x + (-0.5));
        float _1257 = _1255 * (_1222.y + (-0.5));
        float _1258 = _1255 * (_1222.z + (-0.5));
        float _1265 = exp2((_1229.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1229.x + (-0.5));
        float _1267 = _1265 * (_1229.y + (-0.5));
        float _1268 = _1265 * (_1229.z + (-0.5));
        float _1275 = exp2((_1236.w + (-0.5)) * 20.0) * 2.0;
        float _1276 = _1275 * (_1236.x + (-0.5));
        float _1277 = _1275 * (_1236.y + (-0.5));
        float _1278 = _1275 * (_1236.z + (-0.5));
        float _1285 = exp2((_1243.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1243.x + (-0.5));
        float _1287 = _1285 * (_1243.y + (-0.5));
        float _1288 = _1285 * (_1243.z + (-0.5));
        float _1289 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1290 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1291 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1292 = _1256 * 0.5;
        float _1293 = _1266 * 0.5;
        float _1294 = _1276 * 0.5;
        float _1295 = dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294));
        float _1300 = (_1295 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1295);
        float _1308 = (dot(vec3(_574, _575, _576), vec3(_1300 * _1292, _1300 * _1293, _1300 * _1294)) + 1.0) * 0.5;
        float _4059 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1317 = sqrt(((_1293 * _1293) + (_1292 * _1292)) + (_1294 * _1294)) / (_1289 + 9.9999997473787516355514526367188e-06);
        float _4070 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1319 = _1318 * 2.0;
        float _1323 = (1.0 - _1318) / (_1318 + 1.0);
        float _4081 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1333 = ((((1.0 - _1324) * (_1319 + 2.0)) * exp2(log2(isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_1319 + 1.0))) + _1324) * _1289;
        float _1334 = _1257 * 0.5;
        float _1335 = _1267 * 0.5;
        float _1336 = _1277 * 0.5;
        float _1337 = dot(vec3(_1334, _1335, _1336), vec3(_1334, _1335, _1336));
        float _1342 = (_1337 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1337);
        float _1350 = (dot(vec3(_574, _575, _576), vec3(_1342 * _1334, _1342 * _1335, _1342 * _1336)) + 1.0) * 0.5;
        float _4092 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1359 = sqrt(((_1335 * _1335) + (_1334 * _1334)) + (_1336 * _1336)) / (_1290 + 9.9999997473787516355514526367188e-06);
        float _4103 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1361 = _1360 * 2.0;
        float _1365 = (1.0 - _1360) / (_1360 + 1.0);
        float _4114 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1375 = ((((1.0 - _1366) * (_1361 + 2.0)) * exp2(log2(isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * (_1361 + 1.0))) + _1366) * _1290;
        float _1376 = _1258 * 0.5;
        float _1377 = _1268 * 0.5;
        float _1378 = _1278 * 0.5;
        float _1379 = dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378));
        float _1384 = (_1379 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1379);
        float _1392 = (dot(vec3(_574, _575, _576), vec3(_1384 * _1376, _1384 * _1377, _1384 * _1378)) + 1.0) * 0.5;
        float _4125 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1401 = sqrt(((_1377 * _1377) + (_1376 * _1376)) + (_1378 * _1378)) / (_1291 + 9.9999997473787516355514526367188e-06);
        float _4136 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1403 = _1402 * 2.0;
        float _1407 = (1.0 - _1402) / (_1402 + 1.0);
        float _4147 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1417 = ((((1.0 - _1408) * (_1403 + 2.0)) * exp2(log2(isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_1403 + 1.0))) + _1408) * _1291;
        _1425 = _1258;
        _1426 = _1257;
        _1427 = _1256;
        _1428 = _1268;
        _1429 = _1267;
        _1430 = _1266;
        _1431 = _1278;
        _1432 = _1277;
        _1433 = _1276;
        _1434 = _1291;
        _1435 = _1290;
        _1436 = _1289;
        _1437 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)));
        _1438 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)));
        _1439 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)));
    }
    else
    {
        _1425 = _1117;
        _1426 = _1117;
        _1427 = _1117;
        _1428 = _1117;
        _1429 = _1117;
        _1430 = _1117;
        _1431 = _1117;
        _1432 = _1117;
        _1433 = _1117;
        _1434 = _1117;
        _1435 = _1117;
        _1436 = _1117;
        _1437 = 0.0;
        _1438 = 0.0;
        _1439 = 0.0;
    }
    float _1449 = (cbModelParam._m0[1u].x * (_1437 - _1129)) + _1129;
    float _1450 = (cbModelParam._m0[1u].x * (_1438 - _1130)) + _1130;
    float _1451 = (cbModelParam._m0[1u].x * (_1439 - _1131)) + _1131;
    float _1472 = fma(_1451, cbSceneParam._m0[89u].z, fma(_1450, cbSceneParam._m0[89u].y, _1449 * cbSceneParam._m0[89u].x));
    float _1475 = fma(_1451, cbSceneParam._m0[90u].z, fma(_1450, cbSceneParam._m0[90u].y, _1449 * cbSceneParam._m0[90u].x));
    float _1478 = fma(_1451, cbSceneParam._m0[91u].z, fma(_1450, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1449));
    float _1493 = _751 * 0.5;
    float _1494 = _752 * 0.5;
    float _1495 = _753 * 0.5;
    float _1496 = dot(vec4(_1493, _1494, _1495, 1.0), vec4(_1427, _1430, _1433, _1436));
    float _1499 = dot(vec4(_1493, _1494, _1495, 1.0), vec4(_1426, _1429, _1432, _1435));
    float _1502 = dot(vec4(_1493, _1494, _1495, 1.0), vec4(_1425, _1428, _1431, _1434));
    float _1536;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1509 = dot(vec4(_1493, _1494, _1495, 1.0), vec4(_1116, _1120, _1123, _1126));
        float _1513 = dot(vec4(_1493, _1494, _1495, 1.0), vec4(_1118, _1121, _1124, _1127));
        float _1517 = dot(vec4(_1493, _1494, _1495, 1.0), vec4(_1119, _1122, _1125, _1128));
        float _1524 = dot(vec4(cbModelParam._m0[39u]), vec4(_1493, _1494, _1495, 1.0));
        _1536 = dot(vec3(isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)), isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)), isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1524) ? 0.0 : (isnan(0.0) ? _1524 : max(0.0, _1524))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1536 = 1.0;
    }
    float _1547;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1538 = dot(vec4(cbModelParam._m0[40u]), vec4(_1493, _1494, _1495, 1.0));
        _1547 = dot(vec3(isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)), isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)), isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1538) ? 0.0 : (isnan(0.0) ? _1538 : max(0.0, _1538))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1547 = 1.0;
    }
    float _1551 = (_1547 * cbModelParam._m0[1u].x) + (_1536 * (1.0 - cbModelParam._m0[1u].x));
    float _1561 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _577);
    float _1562 = isnan(_1561) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1561 : min(cbModelParam._m0[25u].z, _1561));
    float _1643;
    float _1645;
    float _1647;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1610 = fma(_815, cbModelParam._m0[13u].z, fma(_811, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _807)) + cbModelParam._m0[13u].w;
        float _1614 = fma(_815, cbModelParam._m0[14u].z, fma(_811, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _807)) + cbModelParam._m0[14u].w;
        float _1618 = fma(_815, cbModelParam._m0[15u].z, fma(_811, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _807)) + cbModelParam._m0[15u].w;
        float _1621 = fma(_753, cbModelParam._m0[13u].z, fma(_752, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _751));
        float _1624 = fma(_753, cbModelParam._m0[14u].z, fma(_752, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _751));
        float _1627 = fma(_753, cbModelParam._m0[15u].z, fma(_752, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _751));
        float _1655;
        if (_1621 > 0.0)
        {
            _1655 = abs((1.0 - _1610) / _1621);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1621 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1610 + 1.0) / _1621);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1655 = frontier_phi_14_12_ladder;
        }
        float _1827;
        if (_1624 > 0.0)
        {
            _1827 = abs((1.0 - _1614) / _1624);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1624 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1614 + 1.0) / _1624);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1827 = frontier_phi_23_19_ladder;
        }
        float _2123;
        if (_1627 > 0.0)
        {
            _2123 = abs((1.0 - _1618) / _1627);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1627 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1618 + 1.0) / _1627);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2123 = frontier_phi_35_30_ladder;
        }
        float _2125 = isnan(_1827) ? _1655 : (isnan(_1655) ? _1827 : min(_1655, _1827));
        float _2126 = isnan(_2123) ? _2125 : (isnan(_2125) ? _2123 : min(_2125, _2123));
        float _2130 = (_2126 * _1621) + _1610;
        float _2131 = (_2126 * _1624) + _1614;
        float _2132 = (_2126 * _1627) + _1618;
        float _2133 = _2126 * 9.9999997473787516355514526367188e-05;
        float _2135 = (-1.0) - _2133;
        float _2137 = _2133 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2132 > _2137) || ((_2132 < _2135) || ((_2131 > _2137) || ((_2131 < _2135) || ((_2130 < _2135) || (_2130 > _2137))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2277 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2132, cbModelParam._m0[9u].z, fma(_2131, cbModelParam._m0[9u].y, _2130 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2132, cbModelParam._m0[10u].z, fma(_2131, cbModelParam._m0[10u].y, _2130 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2132, cbModelParam._m0[11u].z, fma(_2131, cbModelParam._m0[11u].y, _2130 * cbModelParam._m0[11u].x))), _1562);
            frontier_phi_13_35_ladder = _2277.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2277.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2277.x * cbModelParam._m0[1u].y;
        }
        _1643 = frontier_phi_13_35_ladder_2;
        _1645 = frontier_phi_13_35_ladder_1;
        _1647 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1631 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_751, _752, _753), _1562);
        _1643 = _1631.x * cbModelParam._m0[1u].y;
        _1645 = _1631.y * cbModelParam._m0[1u].y;
        _1647 = _1631.z * cbModelParam._m0[1u].y;
    }
    float _1651 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _577);
    float _1652 = isnan(_1651) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1651 : min(cbModelParam._m0[25u].w, _1651));
    float _1742;
    float _1744;
    float _1746;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1706 = fma(_815, cbModelParam._m0[21u].z, fma(_811, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _807)) + cbModelParam._m0[21u].w;
        float _1710 = fma(_815, cbModelParam._m0[22u].z, fma(_811, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _807)) + cbModelParam._m0[22u].w;
        float _1714 = fma(_815, cbModelParam._m0[23u].z, fma(_811, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _807)) + cbModelParam._m0[23u].w;
        float _1717 = fma(_753, cbModelParam._m0[21u].z, fma(_752, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _751));
        float _1720 = fma(_753, cbModelParam._m0[22u].z, fma(_752, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _751));
        float _1723 = fma(_753, cbModelParam._m0[23u].z, fma(_752, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _751));
        float _1832;
        if (_1717 > 0.0)
        {
            _1832 = abs((1.0 - _1706) / _1717);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1717 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1706 + 1.0) / _1717);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1832 = frontier_phi_25_21_ladder;
        }
        float _2150;
        if (_1720 > 0.0)
        {
            _2150 = abs((1.0 - _1710) / _1720);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1720 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1710 + 1.0) / _1720);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2150 = frontier_phi_37_32_ladder;
        }
        float _2488;
        if (_1723 > 0.0)
        {
            _2488 = abs((1.0 - _1714) / _1723);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1723 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1714 + 1.0) / _1723);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2488 = frontier_phi_47_44_ladder;
        }
        float _2490 = isnan(_2150) ? _1832 : (isnan(_1832) ? _2150 : min(_1832, _2150));
        float _2491 = isnan(_2488) ? _2490 : (isnan(_2490) ? _2488 : min(_2490, _2488));
        float _2495 = (_2491 * _1717) + _1706;
        float _2496 = (_2491 * _1720) + _1710;
        float _2497 = (_2491 * _1723) + _1714;
        float _2498 = _2491 * 9.9999997473787516355514526367188e-05;
        float _2499 = (-1.0) - _2498;
        float _2501 = _2498 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2497 > _2501) || ((_2497 < _2499) || ((_2496 > _2501) || ((_2496 < _2499) || ((_2495 < _2499) || (_2495 > _2501))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2619 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2497, cbModelParam._m0[17u].z, fma(_2496, cbModelParam._m0[17u].y, _2495 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2497, cbModelParam._m0[18u].z, fma(_2496, cbModelParam._m0[18u].y, _2495 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2497, cbModelParam._m0[19u].z, fma(_2496, cbModelParam._m0[19u].y, _2495 * cbModelParam._m0[19u].x))), _1652);
            frontier_phi_22_47_ladder = _2619.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2619.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2619.x * cbModelParam._m0[1u].z;
        }
        _1742 = frontier_phi_22_47_ladder_2;
        _1744 = frontier_phi_22_47_ladder_1;
        _1746 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1726 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_751, _752, _753), _1652);
        _1742 = _1726.x * cbModelParam._m0[1u].z;
        _1744 = _1726.y * cbModelParam._m0[1u].z;
        _1746 = _1726.z * cbModelParam._m0[1u].z;
    }
    float _1759 = (((_778 * _727) + _779) * _743) * ((cbModelParam._m0[1u].w * (_1742 - _1643)) + _1643);
    float _1761 = (((_778 * _729) + _779) * _743) * ((cbModelParam._m0[1u].w * (_1744 - _1645)) + _1645);
    float _1763 = (((_778 * _730) + _779) * _743) * ((cbModelParam._m0[1u].w * (_1746 - _1647)) + _1647);
    float _1766 = fma(_1763, cbSceneParam._m0[89u].z, fma(_1761, cbSceneParam._m0[89u].y, _1759 * cbSceneParam._m0[89u].x));
    float _1769 = fma(_1763, cbSceneParam._m0[90u].z, fma(_1761, cbSceneParam._m0[90u].y, _1759 * cbSceneParam._m0[90u].x));
    float _1772 = fma(_1763, cbSceneParam._m0[91u].z, fma(_1761, cbSceneParam._m0[91u].y, _1759 * cbSceneParam._m0[91u].x));
    float _1806 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1810 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1814 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1818 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1819 = _1806 / _1818;
    float _1820 = _1810 / _1818;
    float _1821 = _1814 / _1818;
    float _1968;
    float _1969;
    float _1970;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1848 = ((uint(_1821 > cbSceneParam._m0[59u].y) + uint(_1821 > cbSceneParam._m0[59u].x)) + uint(_1821 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1849 = _1848 + 43u;
        uint _1857 = _1848 + 44u;
        uint _1865 = _1848 + 45u;
        uint _1873 = _1848 + 46u;
        float _1884 = fma(_1818, cbSceneParam._m0[_1849].w, fma(_1814, cbSceneParam._m0[_1849].z, fma(_1810, cbSceneParam._m0[_1849].y, _1806 * cbSceneParam._m0[_1849].x)));
        float _1888 = fma(_1818, cbSceneParam._m0[_1857].w, fma(_1814, cbSceneParam._m0[_1857].z, fma(_1810, cbSceneParam._m0[_1857].y, _1806 * cbSceneParam._m0[_1857].x)));
        float _1896 = fma(_1818, cbSceneParam._m0[_1873].w, fma(_1814, cbSceneParam._m0[_1873].z, fma(_1810, cbSceneParam._m0[_1873].y, _1806 * cbSceneParam._m0[_1873].x)));
        float _1901 = cbSceneParam._m0[33u].z * _1896;
        float _1903 = cbSceneParam._m0[33u].w * _1896;
        float _1906 = fma(_1818, cbSceneParam._m0[_1865].w, fma(_1814, cbSceneParam._m0[_1865].z, fma(_1810, cbSceneParam._m0[_1865].y, _1806 * cbSceneParam._m0[_1865].x))) / _1896;
        float _1954 = (cbSceneParam._m0[33u].x - sqrt(((_1820 * _1820) + (_1819 * _1819)) + (_1821 * _1821))) * cbSceneParam._m0[33u].y;
        float _4273 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
        float _1961 = (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1901 + _1884) / _1896, (_1903 + _1888) / _1896), _1906), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1903 + _1884) / _1896, (_1888 - _1901) / _1896), _1906), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1884 - _1901) / _1896, (_1888 - _1903) / _1896), _1906), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1884 - _1903) / _1896, (_1901 + _1888) / _1896), _1906), 0.0)).x), vec4(0.25)));
        _1968 = 1.0 - (_1961 * cbSceneParam._m0[34u].x);
        _1969 = 1.0 - (_1961 * cbSceneParam._m0[34u].y);
        _1970 = 1.0 - (_1961 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1968 = 1.0;
        _1969 = 1.0;
        _1970 = 1.0;
    }
    float _2034;
    float _2036;
    float _2038;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2022 = fma(_1818, cbSceneParam._m0[63u].w, fma(_1814, cbSceneParam._m0[63u].z, fma(_1810, cbSceneParam._m0[63u].y, _1806 * cbSceneParam._m0[63u].x)));
        float _2023 = fma(_1818, cbSceneParam._m0[60u].w, fma(_1814, cbSceneParam._m0[60u].z, fma(_1810, cbSceneParam._m0[60u].y, _1806 * cbSceneParam._m0[60u].x))) / _2022;
        float _2024 = fma(_1818, cbSceneParam._m0[61u].w, fma(_1814, cbSceneParam._m0[61u].z, fma(_1810, cbSceneParam._m0[61u].y, _1806 * cbSceneParam._m0[61u].x))) / _2022;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2023 >= cbSceneParam._m0[64u].x) && (_2024 >= cbSceneParam._m0[64u].y)) && (_2023 <= cbSceneParam._m0[64u].z)) && (_2024 <= cbSceneParam._m0[64u].w))
        {
            float _2163 = fma(_1818, cbSceneParam._m0[62u].w, fma(_1814, cbSceneParam._m0[62u].z, fma(_1810, cbSceneParam._m0[62u].y, _1806 * cbSceneParam._m0[62u].x))) / _2022;
            float _2167 = isnan(cbSceneParam._m0[41u].w) ? _2163 : (isnan(_2163) ? cbSceneParam._m0[41u].w : max(_2163, cbSceneParam._m0[41u].w));
            float _2210 = (cbSceneParam._m0[33u].x - sqrt(((_1820 * _1820) + (_1819 * _1819)) + (_1821 * _1821))) * cbSceneParam._m0[33u].y;
            float _4289 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
            float _2217 = (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2023, cbSceneParam._m0[33u].w + _2024), _2167), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2023, _2024 - cbSceneParam._m0[33u].z), _2167), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2023 - cbSceneParam._m0[33u].z, _2024 - cbSceneParam._m0[33u].w), _2167), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2023 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2024), _2167), 0.0)).x), vec4(0.25)));
            float _2221 = 1.0 - (_2217 * cbSceneParam._m0[34u].x);
            float _2222 = 1.0 - (_2217 * cbSceneParam._m0[34u].y);
            float _2223 = 1.0 - (_2217 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2223) ? _1970 : (isnan(_1970) ? _2223 : min(_1970, _2223));
            frontier_phi_34_33_ladder_1 = isnan(_2222) ? _1969 : (isnan(_1969) ? _2222 : min(_1969, _2222));
            frontier_phi_34_33_ladder_2 = isnan(_2221) ? _1968 : (isnan(_1968) ? _2221 : min(_1968, _2221));
        }
        else
        {
            frontier_phi_34_33_ladder = _1970;
            frontier_phi_34_33_ladder_1 = _1969;
            frontier_phi_34_33_ladder_2 = _1968;
        }
        _2034 = frontier_phi_34_33_ladder_2;
        _2036 = frontier_phi_34_33_ladder_1;
        _2038 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2034 = _1968;
        _2036 = _1969;
        _2038 = _1970;
    }
    uvec4 _2043 = floatBitsToUint(cbInstanceData._m0[_256 + 5u]);
    uint _2045 = _2043.x * 14u;
    uint _2046 = _2045 + 13u;
    float _2053 = _743 + (-1.0);
    float _2058 = (cbLight._m0[_2046].x * _2053) + 1.0;
    float _2059 = (cbLight._m0[_2046].y * _2053) + 1.0;
    float _2060 = (cbLight._m0[_2046].z * _2053) + 1.0;
    float _2061 = (cbLight._m0[_2046].w * _2053) + 1.0;
    uint _2062 = _2045 + 5u;
    float _2068 = isnan(1.0) ? _2059 : (isnan(_2059) ? 1.0 : min(_2059, 1.0));
    uint _2072 = _2045 + 4u;
    float _2082 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
    uint _2086 = _2045 | 1u;
    float _2097 = dot(vec3(cbLight._m0[_2045].xyz), vec3(_574, _575, _576));
    float _2100 = dot(vec3(cbLight._m0[_2086].xyz), vec3(_574, _575, _576));
    float _4325 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _4336 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2105 = (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * 0.3183098733425140380859375;
    float _2107 = (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * 0.3183098733425140380859375;
    float _2114 = ((cbLight._m0[_2062].x * _2068) * _2107) + (((cbLight._m0[_2072].x * _2034) * _2082) * _2105);
    float _2115 = ((_2068 * cbLight._m0[_2062].y) * _2107) + (((cbLight._m0[_2072].y * _2036) * _2082) * _2105);
    float _2116 = ((_2068 * cbLight._m0[_2062].z) * _2107) + (((cbLight._m0[_2072].z * _2038) * _2082) * _2105);
    uvec4 _2120 = floatBitsToUint(cbLight._m0[_2045 + 12u]);
    bool _2122 = _2120.x == 0u;
    float _2224;
    float _2226;
    float _2228;
    if (_2122)
    {
        _2224 = _2114;
        _2226 = _2115;
        _2228 = _2116;
    }
    else
    {
        uint _2232 = _2045 + 6u;
        float _2248 = (dot(vec3(cbLight._m0[_2045 + 2u].xyz), vec3(_574, _575, _576)) * 0.5) + 0.5;
        float _2249 = _2248 * _2248;
        float _4347 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2250 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _2251 = isnan(1.0) ? _2060 : (isnan(_2060) ? 1.0 : min(_2060, 1.0));
        _2224 = (((cbLight._m0[_2232].x * 0.3183098733425140380859375) * _2250) * _2251) + _2114;
        _2226 = (((cbLight._m0[_2232].y * 0.3183098733425140380859375) * _2250) * _2251) + _2115;
        _2228 = (((cbLight._m0[_2232].z * 0.3183098733425140380859375) * _2250) * _2251) + _2116;
    }
    bool _2231 = _2120.y == 0u;
    float _2286;
    float _2288;
    float _2290;
    if (_2231)
    {
        _2286 = _2224;
        _2288 = _2226;
        _2290 = _2228;
    }
    else
    {
        uint _2459 = _2045 + 7u;
        float _2475 = (dot(vec3(cbLight._m0[_2045 + 3u].xyz), vec3(_574, _575, _576)) * 0.5) + 0.5;
        float _2476 = _2475 * _2475;
        float _4363 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2477 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _2478 = isnan(1.0) ? _2061 : (isnan(_2061) ? 1.0 : min(_2061, 1.0));
        _2286 = (((cbLight._m0[_2459].x * 0.3183098733425140380859375) * _2477) * _2478) + _2224;
        _2288 = (((cbLight._m0[_2459].y * 0.3183098733425140380859375) * _2477) * _2478) + _2226;
        _2290 = (((cbLight._m0[_2459].z * 0.3183098733425140380859375) * _2477) * _2478) + _2228;
    }
    uint _2293 = _2045 + 8u;
    float _2306 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2045].w)) * _577) * 0.949999988079071044921875);
    float _2307 = _2306 * _2306;
    float _2308 = cbLight._m0[_2045].x + _654;
    float _2309 = cbLight._m0[_2045].y + _655;
    float _2310 = cbLight._m0[_2045].z + _656;
    float _2314 = inversesqrt(dot(vec3(_2308, _2309, _2310), vec3(_2308, _2309, _2310)));
    float _2315 = _2314 * _2308;
    float _2316 = _2314 * _2309;
    float _2317 = _2314 * _2310;
    float _2318 = dot(vec3(_574, _575, _576), vec3(cbLight._m0[_2045].xyz));
    float _4379 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2321 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
    float _4390 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _2322 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
    float _2323 = dot(vec3(_574, _575, _576), vec3(_2315, _2316, _2317));
    float _4401 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
    float _2326 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
    float _2327 = dot(vec3(cbLight._m0[_2045].xyz), vec3(_2315, _2316, _2317));
    float _4412 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
    float _2331 = _2307 * _2307;
    float _2335 = ((_2326 * _2326) * (_2331 + (-1.0))) + 1.0;
    float _2343 = exp2(log2(1.0 - (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0)))) * 5.0);
    float _2344 = 0.959999978542327880859375 - _724;
    float _2346 = 0.959999978542327880859375 - _725;
    float _2347 = 0.959999978542327880859375 - _726;
    float _2354 = 1.0 - _2307;
    float _2365 = (0.5 / (((_2322 * ((_2321 * _2354) + _2307)) + 9.9999999392252902907785028219223e-09) + (((_2322 * _2354) + _2307) * _2321))) * _2321;
    float _4423 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2367 = (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_2331 / ((_2335 * _2335) * 3.141590118408203125));
    uint _2381 = _2045 + 9u;
    float _2392 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2086].w)) * _577) * 0.949999988079071044921875);
    float _2393 = _2392 * _2392;
    float _2394 = cbLight._m0[_2086].x + _654;
    float _2395 = cbLight._m0[_2086].y + _655;
    float _2396 = cbLight._m0[_2086].z + _656;
    float _2400 = inversesqrt(dot(vec3(_2394, _2395, _2396), vec3(_2394, _2395, _2396)));
    float _2401 = _2400 * _2394;
    float _2402 = _2400 * _2395;
    float _2403 = _2400 * _2396;
    float _2404 = dot(vec3(_574, _575, _576), vec3(cbLight._m0[_2086].xyz));
    float _4434 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
    float _2407 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
    float _2408 = dot(vec3(_574, _575, _576), vec3(_2401, _2402, _2403));
    float _4445 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
    float _2411 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
    float _2412 = dot(vec3(cbLight._m0[_2086].xyz), vec3(_2401, _2402, _2403));
    float _4456 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _2416 = _2393 * _2393;
    float _2420 = ((_2411 * _2411) * (_2416 + (-1.0))) + 1.0;
    float _2427 = exp2(log2(1.0 - (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0)))) * 5.0);
    float _2434 = 1.0 - _2393;
    float _2444 = (0.5 / (((_2322 * ((_2407 * _2434) + _2393)) + 9.9999999392252902907785028219223e-09) + (((_2322 * _2434) + _2393) * _2407))) * _2407;
    float _4467 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
    float _2446 = (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_2416 / ((_2420 * _2420) * 3.141590118408203125));
    float _2456 = (((((_2427 * _2344) + _727) * cbLight._m0[_2381].x) * _2446) * _2068) + ((((cbLight._m0[_2293].x * _2034) * ((_2343 * _2344) + _727)) * _2367) * _2082);
    float _2457 = (((((_2427 * _2346) + _729) * cbLight._m0[_2381].y) * _2446) * _2068) + ((((cbLight._m0[_2293].y * _2036) * ((_2343 * _2346) + _729)) * _2367) * _2082);
    float _2458 = (((((_2427 * _2347) + _730) * cbLight._m0[_2381].z) * _2446) * _2068) + ((((cbLight._m0[_2293].z * _2038) * ((_2343 * _2347) + _730)) * _2367) * _2082);
    float _2514;
    float _2516;
    float _2518;
    if (_2122)
    {
        _2514 = _2456;
        _2516 = _2457;
        _2518 = _2458;
    }
    else
    {
        uint _2520 = _2045 + 2u;
        uint _2524 = _2045 + 10u;
        float _2538 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2520].w)) * _577) * 0.949999988079071044921875);
        float _2539 = _2538 * _2538;
        float _2540 = cbLight._m0[_2520].x + _654;
        float _2541 = cbLight._m0[_2520].y + _655;
        float _2542 = cbLight._m0[_2520].z + _656;
        float _2546 = inversesqrt(dot(vec3(_2540, _2541, _2542), vec3(_2540, _2541, _2542)));
        float _2547 = _2546 * _2540;
        float _2548 = _2546 * _2541;
        float _2549 = _2546 * _2542;
        float _2550 = dot(vec3(_574, _575, _576), vec3(cbLight._m0[_2520].xyz));
        float _4478 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        float _2553 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _2554 = dot(vec3(_574, _575, _576), vec3(_2547, _2548, _2549));
        float _4489 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        float _2557 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
        float _2558 = dot(vec3(cbLight._m0[_2520].xyz), vec3(_2547, _2548, _2549));
        float _4500 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2562 = _2539 * _2539;
        float _2566 = ((_2557 * _2557) * (_2562 + (-1.0))) + 1.0;
        float _2573 = exp2(log2(1.0 - (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0)))) * 5.0);
        float _2580 = 1.0 - _2539;
        float _2590 = (0.5 / (((_2322 * ((_2553 * _2580) + _2539)) + 9.9999999392252902907785028219223e-09) + (((_2322 * _2580) + _2539) * _2553))) * _2553;
        float _4511 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
        float _2592 = (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0))) * (_2562 / ((_2566 * _2566) * 3.141590118408203125));
        float _2593 = isnan(1.0) ? _2060 : (isnan(_2060) ? 1.0 : min(_2060, 1.0));
        _2514 = (((((_2573 * _2344) + _727) * cbLight._m0[_2524].x) * _2592) * _2593) + _2456;
        _2516 = (((((_2573 * _2346) + _729) * cbLight._m0[_2524].y) * _2592) * _2593) + _2457;
        _2518 = (((((_2573 * _2347) + _730) * cbLight._m0[_2524].z) * _2592) * _2593) + _2458;
    }
    float _2624;
    float _2626;
    float _2628;
    if (_2231)
    {
        _2624 = _2514;
        _2626 = _2516;
        _2628 = _2518;
    }
    else
    {
        uint _2635 = _2045 + 3u;
        uint _2639 = _2045 + 11u;
        float _2653 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2635].w)) * _577) * 0.949999988079071044921875);
        float _2654 = _2653 * _2653;
        float _2655 = cbLight._m0[_2635].x + _654;
        float _2656 = cbLight._m0[_2635].y + _655;
        float _2657 = cbLight._m0[_2635].z + _656;
        float _2661 = inversesqrt(dot(vec3(_2655, _2656, _2657), vec3(_2655, _2656, _2657)));
        float _2662 = _2661 * _2655;
        float _2663 = _2661 * _2656;
        float _2664 = _2661 * _2657;
        float _2665 = dot(vec3(_574, _575, _576), vec3(cbLight._m0[_2635].xyz));
        float _4527 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
        float _2668 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
        float _2669 = dot(vec3(_574, _575, _576), vec3(_2662, _2663, _2664));
        float _4538 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
        float _2672 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _2673 = dot(vec3(cbLight._m0[_2635].xyz), vec3(_2662, _2663, _2664));
        float _4549 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
        float _2677 = _2654 * _2654;
        float _2681 = ((_2672 * _2672) * (_2677 + (-1.0))) + 1.0;
        float _2688 = exp2(log2(1.0 - (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0)))) * 5.0);
        float _2695 = 1.0 - _2654;
        float _2705 = (0.5 / (((_2322 * ((_2668 * _2695) + _2654)) + 9.9999999392252902907785028219223e-09) + (((_2322 * _2695) + _2654) * _2668))) * _2668;
        float _4560 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        float _2707 = (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * (_2677 / ((_2681 * _2681) * 3.141590118408203125));
        float _2708 = isnan(1.0) ? _2061 : (isnan(_2061) ? 1.0 : min(_2061, 1.0));
        _2624 = (((((_2688 * _2344) + _727) * cbLight._m0[_2639].x) * _2707) * _2708) + _2514;
        _2626 = (((((_2688 * _2346) + _729) * cbLight._m0[_2639].y) * _2707) * _2708) + _2516;
        _2628 = (((((_2688 * _2347) + _730) * cbLight._m0[_2639].z) * _2707) * _2708) + _2518;
    }
    float _2774;
    float _2776;
    float _2778;
    float _2780;
    float _2782;
    float _2784;
    if (_2043.y == 0u)
    {
        uvec4 _2729 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2730 = _2729.x;
        uint _2741 = uint((float(_2729.y) * floor(float(uint(cbSceneParam._m0[85u].y * _663) / _2730))) + floor(float(uint(cbSceneParam._m0[85u].x * _662) / _2730)));
        float _2751 = (log2(_1821 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2752 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
        uint _2755 = uint(isnan(14.0) ? _2752 : (isnan(_2752) ? 14.0 : min(_2752, 14.0)));
        uvec4 _2760 = texelFetch(g_lightClusterGridBuffer, int(((_2755 << 2u) + (_2741 << 6u)) >> 2u));
        uint _2761 = _2760.x;
        uint _2762 = _2729.z;
        float _2841;
        float _2843;
        float _2845;
        float _2847;
        float _2849;
        float _2851;
        if (((((1u << ((_2762 >> 4u) & 15u)) + 4294967295u) & _2761) == 0u) || ((_2762 & 240u) == 0u))
        {
            _2841 = 0.0;
            _2843 = 0.0;
            _2845 = 0.0;
            _2847 = 0.0;
            _2849 = 0.0;
            _2851 = 0.0;
        }
        else
        {
            float _2842;
            float _2844;
            float _2846;
            float _2848;
            float _2850;
            float _2852;
            float _2986 = 0.0;
            float _2987 = 0.0;
            float _2988 = 0.0;
            float _2989 = 0.0;
            float _2990 = 0.0;
            float _2991 = 0.0;
            uint _2992 = 0u;
            uint _3001;
            bool _3002;
            for (;;)
            {
                _3001 = texelFetch(g_lightClassification, int((((_2755 << 5u) + (_2741 << 9u)) + (_2992 << 2u)) >> 2u)).x;
                _3002 = _3001 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3002)
                {
                    frontier_phi_66_pred = _2991;
                    frontier_phi_66_pred_1 = _2990;
                    frontier_phi_66_pred_2 = _2989;
                    frontier_phi_66_pred_3 = _2988;
                    frontier_phi_66_pred_4 = _2987;
                    frontier_phi_66_pred_5 = _2986;
                }
                else
                {
                    float _3110;
                    float _3111;
                    float _3112;
                    float _3113;
                    float _3114;
                    float _3115;
                    uint _3116;
                    _3110 = _2986;
                    _3111 = _2987;
                    _3112 = _2988;
                    _3113 = _2989;
                    _3114 = _2990;
                    _3115 = _2991;
                    _3116 = _3001;
                    float _3042;
                    float _3043;
                    float _3044;
                    float _3045;
                    float _3046;
                    float _3047;
                    for (;;)
                    {
                        uint _3120 = uint(findLSB(_3116)) + (_2992 << 5u);
                        uint _3117 = (_3116 + 4294967295u) & _3116;
                        uint _3122 = _3120 * 48u;
                        vec4 _3136 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3122)).x, texelFetch(g_PointLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3122 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3122 + 3u)).x));
                        uint _3142 = (_3120 * 48u) + 4u;
                        vec4 _3155 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3142)).x, texelFetch(g_PointLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3142 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3142 + 3u)).x));
                        uint _3161 = (_3120 * 48u) + 8u;
                        vec3 _3172 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3161)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 2u)).x));
                        float _3176 = _3136.x - _1819;
                        float _3177 = _3136.y - _1820;
                        float _3178 = _3136.z - _1821;
                        float _3179 = dot(vec3(_3176, _3177, _3178), vec3(_3176, _3177, _3178));
                        float _3182 = inversesqrt(_3179);
                        float _3183 = _3182 * _3176;
                        float _3184 = _3182 * _3177;
                        float _3185 = _3182 * _3178;
                        float _3186 = dot(vec3(_684, _687, _690), vec3(_3183, _3184, _3185));
                        float _3191 = 1.0 - (_3179 * _3136.w);
                        float _4586 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                        float _3192 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
                        float _3193 = sqrt(_3179) * _3155.w;
                        float _3196 = 1.39999997615814208984375 / (_3193 + 1.39999997615814208984375);
                        float _3197 = _3196 * _3196;
                        float _3200 = ((1.0 - _3197) * _3186) + _3197;
                        float _3203 = _3193 * _3193;
                        float _3207 = ((isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0))) * _3192) / ((_3203 * 0.699999988079071044921875) + 1.0);
                        float _3211 = (-0.0) - _1819;
                        float _3212 = (-0.0) - _1820;
                        float _3213 = (-0.0) - _1821;
                        float _3217 = inversesqrt(dot(vec3(_3211, _3212, _3213), vec3(_3211, _3212, _3213)));
                        float _3218 = _3217 * _3211;
                        float _3219 = _3217 * _3212;
                        float _3220 = _3217 * _3213;
                        float _3227 = exp2(log2(1.0 / ((_3203 * 3.5) + 5.0)) * 0.25);
                        float _3228 = 1.0 - _759;
                        float _3235 = sqrt(1.0 - ((1.0 - (_3228 * _3228)) * (1.0 - (_3227 * _3227))));
                        float _3236 = _3235 * _3235;
                        float _3237 = _3236 * _3236;
                        float _3238 = _3218 + _3183;
                        float _3239 = _3219 + _3184;
                        float _3240 = _3220 + _3185;
                        float _3244 = inversesqrt(dot(vec3(_3238, _3239, _3240), vec3(_3238, _3239, _3240)));
                        float _3248 = dot(vec3(_684, _687, _690), vec3(_3218, _3219, _3220));
                        float _4602 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                        float _3251 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
                        float _3252 = dot(vec3(_684, _687, _690), vec3(_3244 * _3238, _3244 * _3239, _3244 * _3240));
                        float _4613 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                        float _3255 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
                        float _3259 = ((_3255 * _3255) * (_3237 + (-1.0))) + 1.0;
                        float _3260 = _3196 * _3236;
                        float _3261 = _3260 * _3260;
                        float _3264 = ((1.0 - _3261) * _3186) + _3261;
                        float _4624 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                        float _3265 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
                        float _3266 = 1.0 - _3236;
                        float _3276 = (0.5 / (((_3265 * ((_3251 * _3266) + _3236)) + 9.9999999392252902907785028219223e-09) + (((_3265 * _3266) + _3236) * _3251))) * _3265;
                        float _4635 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0));
                        float _3287 = (((_3237 * 3.1415927410125732421875) * (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0)))) / ((_3259 * _3259) * ((_3203 * 2.1991131305694580078125) + 3.141590118408203125))) * _3192;
                        _3045 = (_3207 * _3155.x) + _3113;
                        _3046 = (_3207 * _3155.y) + _3114;
                        _3047 = (_3207 * _3155.z) + _3115;
                        _3042 = (_3287 * _3172.x) + _3110;
                        _3043 = (_3287 * _3172.y) + _3111;
                        _3044 = (_3287 * _3172.z) + _3112;
                        if (_3117 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3110 = _3042;
                            _3111 = _3043;
                            _3112 = _3044;
                            _3113 = _3045;
                            _3114 = _3046;
                            _3115 = _3047;
                            _3116 = _3117;
                        }
                    }
                    frontier_phi_66_pred = _3047;
                    frontier_phi_66_pred_1 = _3046;
                    frontier_phi_66_pred_2 = _3045;
                    frontier_phi_66_pred_3 = _3044;
                    frontier_phi_66_pred_4 = _3043;
                    frontier_phi_66_pred_5 = _3042;
                }
                _2852 = frontier_phi_66_pred;
                _2850 = frontier_phi_66_pred_1;
                _2848 = frontier_phi_66_pred_2;
                _2846 = frontier_phi_66_pred_3;
                _2844 = frontier_phi_66_pred_4;
                _2842 = frontier_phi_66_pred_5;
                uint _2993 = _2992 + 1u;
                if (_2993 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2986 = _2842;
                    _2987 = _2844;
                    _2988 = _2846;
                    _2989 = _2848;
                    _2990 = _2850;
                    _2991 = _2852;
                    _2992 = _2993;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2841 = _2842;
            _2843 = _2844;
            _2845 = _2846;
            _2847 = _2848;
            _2849 = _2850;
            _2851 = _2852;
        }
        uvec4 _2855 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2856 = _2855.z;
        uint _2858 = (_2856 >> 8u) & 15u;
        float _2954;
        float _2956;
        float _2958;
        float _2960;
        float _2962;
        float _2964;
        if (((4294967295u << _2858) & _2761) == 0u)
        {
            _2954 = _2841;
            _2956 = _2843;
            _2958 = _2845;
            _2960 = _2847;
            _2962 = _2849;
            _2964 = _2851;
        }
        else
        {
            float _2979 = inversesqrt(dot(vec3(_1819, _1820, _1821), vec3(_1819, _1820, _1821)));
            float _2980 = _2979 * _1819;
            float _2981 = _2979 * _1820;
            float _2982 = _2979 * _1821;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2858 < ((_2856 >> 12u) & 15u))
            {
                float _2955;
                float _2957;
                float _2959;
                float _2961;
                float _2963;
                float _2965;
                float _3093 = _2841;
                float _3094 = _2843;
                float _3095 = _2845;
                float _3096 = _2847;
                float _3097 = _2849;
                float _3098 = _2851;
                uint _3099 = _2858;
                uint _3108;
                bool _3109;
                for (;;)
                {
                    _3108 = texelFetch(g_lightClassification, int((((_2755 << 5u) + (_2741 << 9u)) + (_3099 << 2u)) >> 2u)).x;
                    _3109 = _3108 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3109)
                    {
                        frontier_phi_72_pred = _3098;
                        frontier_phi_72_pred_1 = _3097;
                        frontier_phi_72_pred_2 = _3096;
                        frontier_phi_72_pred_3 = _3095;
                        frontier_phi_72_pred_4 = _3094;
                        frontier_phi_72_pred_5 = _3093;
                    }
                    else
                    {
                        float _3292;
                        float _3293;
                        float _3294;
                        float _3295;
                        float _3296;
                        float _3297;
                        float _3585;
                        float _3586;
                        float _3587;
                        float _3588;
                        float _3589;
                        float _3590;
                        float _3305 = _3093;
                        float _3306 = _3094;
                        float _3307 = _3095;
                        float _3308 = _3096;
                        float _3309 = _3097;
                        float _3310 = _3098;
                        uint _3311 = _3108;
                        uint _3312;
                        vec4 _3337;
                        float _3338;
                        vec4 _3353;
                        vec3 _3365;
                        vec4 _3380;
                        vec4 _3395;
                        float _3441;
                        bool _3442;
                        for (;;)
                        {
                            uint _3322 = ((_3099 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3311));
                            _3312 = (_3311 + 4294967295u) & _3311;
                            uint _3324 = _3322 * 40u;
                            _3337 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3324)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 3u)).x));
                            _3338 = _3337.w;
                            uint _3340 = (_3322 * 40u) + 4u;
                            _3353 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3340)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 3u)).x));
                            uint _3355 = (_3322 * 40u) + 8u;
                            _3365 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3355)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 2u)).x));
                            uint _3367 = (_3322 * 40u) + 16u;
                            _3380 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3367)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 3u)).x));
                            uint _3382 = (_3322 * 40u) + 20u;
                            _3395 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3382)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 3u)).x));
                            uint _3397 = (_3322 * 40u) + 24u;
                            vec4 _3410 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3397)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 3u)).x));
                            uint _3416 = (_3322 * 40u) + 28u;
                            vec4 _3429 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3416)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 3u)).x));
                            _3441 = fma(_1821, _3429.z, fma(_1820, _3429.y, _3429.x * _1819)) + _3429.w;
                            _3442 = !((fma(_1821, _3410.z, fma(_1820, _3410.y, _3410.x * _1819)) + _3410.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3442)
                            {
                                float _3469 = _3337.x - _1819;
                                float _3470 = _3337.y - _1820;
                                float _3471 = _3337.z - _1821;
                                float _3472 = dot(vec3(_3469, _3470, _3471), vec3(_3469, _3470, _3471));
                                float _3475 = inversesqrt(_3472);
                                float _3476 = _3475 * _3469;
                                float _3477 = _3475 * _3470;
                                float _3478 = _3475 * _3471;
                                float _3482 = 1.0 - (_3472 / (_3338 * _3338));
                                float _4646 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
                                float _3483 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                                float _3487 = sqrt(_3472) * _3353.w;
                                float _3489 = 1.39999997615814208984375 / (_3487 + 1.39999997615814208984375);
                                float _3490 = _3489 * _3489;
                                float _3493 = ((1.0 - _3490) * dot(vec3(_3476, _3477, _3478), vec3(_684, _687, _690))) + _3490;
                                float _3496 = _3487 * _3487;
                                float _3500 = (fma(_1821, _3380.z, fma(_1820, _3380.y, _3380.x * _1819)) + _3380.w) / _3441;
                                float _3501 = (fma(_1821, _3395.z, fma(_1820, _3395.y, _3395.x * _1819)) + _3395.w) / _3441;
                                float _3505 = 1.0 - dot(vec2(_3500, _3501), vec2(_3500, _3501));
                                float _4662 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                                float _3506 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
                                float _3507 = _3506 * (((isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0))) * _3483) / ((_3496 * 0.699999988079071044921875) + 1.0));
                                float _3519 = exp2(log2(1.0 / ((_3496 * 3.5) + 5.0)) * 0.25);
                                float _3520 = 1.0 - _759;
                                float _3527 = sqrt(1.0 - ((1.0 - (_3520 * _3520)) * (1.0 - (_3519 * _3519))));
                                float _3528 = _3527 * _3527;
                                float _3529 = _3528 * _3528;
                                float _3530 = _3476 - _2980;
                                float _3531 = _3477 - _2981;
                                float _3532 = _3478 - _2982;
                                float _3536 = inversesqrt(dot(vec3(_3530, _3531, _3532), vec3(_3530, _3531, _3532)));
                                float _3540 = dot(vec3(_684, _687, _690), vec3((-0.0) - _2980, (-0.0) - _2981, (-0.0) - _2982));
                                float _4673 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                                float _3543 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
                                float _3544 = dot(vec3(_684, _687, _690), vec3(_3536 * _3530, _3536 * _3531, _3536 * _3532));
                                float _4684 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                                float _3547 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
                                float _3551 = ((_3547 * _3547) * (_3529 + (-1.0))) + 1.0;
                                float _3552 = _3489 * _3528;
                                float _3553 = _3552 * _3552;
                                float _3559 = ((1.0 - _3553) * dot(vec3(_684, _687, _690), vec3(_3476, _3477, _3478))) + _3553;
                                float _4695 = isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0));
                                float _3560 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
                                float _3561 = 1.0 - _3528;
                                float _3571 = (0.5 / (((_3560 * ((_3543 * _3561) + _3528)) + 9.9999999392252902907785028219223e-09) + (((_3560 * _3561) + _3528) * _3543))) * _3560;
                                float _4706 = isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0));
                                float _3581 = (_3506 * _3483) * (((_3529 * 3.1415927410125732421875) * (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0)))) / ((_3551 * _3551) * ((_3496 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3507 * _3353.y;
                                frontier_phi_78_pred_1 = _3507 * _3353.x;
                                frontier_phi_78_pred_2 = _3581 * _3365.z;
                                frontier_phi_78_pred_3 = _3581 * _3365.y;
                                frontier_phi_78_pred_4 = _3581 * _3365.x;
                                frontier_phi_78_pred_5 = _3507 * _3353.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3589 = frontier_phi_78_pred;
                            _3588 = frontier_phi_78_pred_1;
                            _3587 = frontier_phi_78_pred_2;
                            _3586 = frontier_phi_78_pred_3;
                            _3585 = frontier_phi_78_pred_4;
                            _3590 = frontier_phi_78_pred_5;
                            _3295 = _3588 + _3308;
                            _3296 = _3589 + _3309;
                            _3297 = _3590 + _3310;
                            _3292 = _3585 + _3305;
                            _3293 = _3586 + _3306;
                            _3294 = _3587 + _3307;
                            if (_3312 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3305 = _3292;
                                _3306 = _3293;
                                _3307 = _3294;
                                _3308 = _3295;
                                _3309 = _3296;
                                _3310 = _3297;
                                _3311 = _3312;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3297;
                        frontier_phi_72_pred_1 = _3296;
                        frontier_phi_72_pred_2 = _3295;
                        frontier_phi_72_pred_3 = _3294;
                        frontier_phi_72_pred_4 = _3293;
                        frontier_phi_72_pred_5 = _3292;
                    }
                    _2965 = frontier_phi_72_pred;
                    _2963 = frontier_phi_72_pred_1;
                    _2961 = frontier_phi_72_pred_2;
                    _2959 = frontier_phi_72_pred_3;
                    _2957 = frontier_phi_72_pred_4;
                    _2955 = frontier_phi_72_pred_5;
                    uint _3100 = _3099 + 1u;
                    if (_3100 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3093 = _2955;
                        _3094 = _2957;
                        _3095 = _2959;
                        _3096 = _2961;
                        _3097 = _2963;
                        _3098 = _2965;
                        _3099 = _3100;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2965;
                frontier_phi_60_61_ladder_1 = _2963;
                frontier_phi_60_61_ladder_2 = _2959;
                frontier_phi_60_61_ladder_3 = _2957;
                frontier_phi_60_61_ladder_4 = _2955;
                frontier_phi_60_61_ladder_5 = _2961;
            }
            else
            {
                frontier_phi_60_61_ladder = _2851;
                frontier_phi_60_61_ladder_1 = _2849;
                frontier_phi_60_61_ladder_2 = _2845;
                frontier_phi_60_61_ladder_3 = _2843;
                frontier_phi_60_61_ladder_4 = _2841;
                frontier_phi_60_61_ladder_5 = _2847;
            }
            _2954 = frontier_phi_60_61_ladder_4;
            _2956 = frontier_phi_60_61_ladder_3;
            _2958 = frontier_phi_60_61_ladder_2;
            _2960 = frontier_phi_60_61_ladder_5;
            _2962 = frontier_phi_60_61_ladder_1;
            _2964 = frontier_phi_60_61_ladder;
        }
        float _2969 = isnan(1.0) ? _743 : (isnan(_743) ? 1.0 : min(_743, 1.0));
        _2774 = (_2969 * _2960) + _2286;
        _2776 = (_2969 * _2962) + _2288;
        _2778 = (_2969 * _2964) + _2290;
        _2780 = ((_2954 * _727) * _2969) + _2624;
        _2782 = ((_2956 * _729) * _2969) + _2626;
        _2784 = ((_2958 * _730) * _2969) + _2628;
    }
    else
    {
        _2774 = _2286;
        _2776 = _2288;
        _2778 = _2290;
        _2780 = _2624;
        _2782 = _2626;
        _2784 = _2628;
    }
    float _4722 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _4733 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _4744 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    uint _2804 = _256 + 6u;
    float _2812 = _662 / cbSceneParam._m0[86u].x;
    float _2813 = _663 / cbSceneParam._m0[86u].y;
    vec4 _2827 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2812, _2813, (log2((isnan(cbSceneParam._m0[77u].w) ? _596 : (isnan(_596) ? cbSceneParam._m0[77u].w : min(_596, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2829 = _2827.x;
    float _2830 = _2827.y;
    float _2831 = _2827.z;
    float _2832 = _2827.w;
    float _2904;
    float _2906;
    float _2908;
    float _2910;
    if (_596 > cbSceneParam._m0[78u].w)
    {
        float _2866 = isnan(_596) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _596 : min(cbSceneParam._m0[80u].w, _596));
        float _2867 = _2866 / _596;
        float _2878 = _2867 * _647;
        float _2879 = _648 * _2867;
        float _2880 = (-0.0) - _2879;
        float _2882 = _2867 * _649;
        float _2884 = (cbSceneParam._m0[77u].w * _2880) / _2866;
        float _2885 = _2884 + cbSceneParam._m0[79u].w;
        float _2886 = cbSceneParam._m0[79u].w - _2879;
        float _2892 = sqrt(((_2878 * _2878) + (_2879 * _2879)) + (_2882 * _2882));
        float _2895 = (1.0 - (cbSceneParam._m0[77u].w / _2866)) * _2892;
        float _2900 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2902 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3055;
        if (abs((_2880 - _2884) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3055 = ((((_2885 > 0.0) ? exp2(_2900 * _2885) : (2.0 - exp2(_2902 * _2885))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2895;
        }
        else
        {
            float _3015 = 1.0 / cbSceneParam._m0[80u].x;
            float _3016 = isnan(_2886) ? _2885 : (isnan(_2885) ? _2886 : max(_2885, _2886));
            float _3017 = isnan(_2886) ? _2885 : (isnan(_2885) ? _2886 : min(_2885, _2886));
            float _3026 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : min(_3016, 0.0));
            float _3027 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : min(_3017, 0.0));
            _3055 = ((abs(_2892 / _2880) * cbSceneParam._m0[80u].y) * ((((_3026 - _3027) * 2.0) - ((exp2(_2900 * (isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0)))) - exp2(_2900 * (isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0))))) * _3015)) - ((exp2(_2902 * _3026) - exp2(_2902 * _3027)) * _3015))) + (_2895 * cbSceneParam._m0[80u].z);
        }
        vec4 _3057 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2812, _2813, 1.0), 0.0);
        float _3066 = exp2((_3055 * (-1.44269502162933349609375)) * (1.0 - _3057.w));
        float _3067 = log2(_3066);
        float _3083 = log2(_2832);
        _2904 = (exp2(_3083 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3067 * cbSceneParam._m0[78u].x)) * _3057.x) / cbSceneParam._m0[78u].x)) + _2829;
        _2906 = (exp2(_3083 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3067 * cbSceneParam._m0[78u].y)) * _3057.y) / cbSceneParam._m0[78u].y)) + _2830;
        _2908 = (exp2(_3083 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3067 * cbSceneParam._m0[78u].z)) * _3057.z) / cbSceneParam._m0[78u].z)) + _2831;
        _2910 = _3066 * _2832;
    }
    else
    {
        _2904 = _2829;
        _2906 = _2830;
        _2908 = _2831;
        _2910 = _2832;
    }
    float _2922 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2923 = _2922 == 3.0;
    float _2924 = log2(_2910);
    float _2931 = exp2(_2924 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0))) * (_2774 + ((isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0))) * _743))) + ((_2780 + ((isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))) * _1551)) * cbPerFrame._m0[3u].x));
    float _2932 = exp2(_2924 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0))) * (_2776 + ((isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0))) * _743))) + ((_2782 + ((isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))) * _1551)) * cbPerFrame._m0[3u].x));
    float _2933 = exp2(_2924 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0))) * (_2778 + ((isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0))) * _743))) + ((_2784 + ((isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))) * _1551)) * cbPerFrame._m0[3u].x));
    float _2942 = (_2922 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2942 * (_2923 ? _2931 : (_2931 + (cbSceneParam._m0[72u].w * _2904)));
    SV_Target.y = _2942 * (_2923 ? _2932 : (_2932 + (cbSceneParam._m0[72u].w * _2906)));
    SV_Target.z = _2942 * (_2923 ? _2933 : (_2933 + (cbSceneParam._m0[72u].w * _2908)));
    SV_Target.w = cbInstanceData._m0[_2804].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2804].w;
}


