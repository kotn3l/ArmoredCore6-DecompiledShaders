#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1345;
float _3726;
float _3727;
float _3728;
float _3729;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _230 = _229 * _221;
    float _231 = _229 * _222;
    float _232 = _229 * _223;
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = _236 * NORMAL.x;
    float _238 = _236 * NORMAL.y;
    float _239 = _236 * NORMAL.z;
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _244 = _243 * TANGENT.x;
    float _245 = _243 * TANGENT.y;
    float _246 = _243 * TANGENT.z;
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3738 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3749 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3760 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    uint _270 = uint(roundEven(NORMAL.w)) * 13u;
    uint _275 = _270 + 1u;
    uint _279 = _270 + 2u;
    float _288 = sqrt(((cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x)) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x));
    float _289 = _288 * TEXCOORD.z;
    float _290 = _288 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _289) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _290) + cbTextureTilingScale._m0[13u].w));
    vec4 _327 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _332 = _327.x * cbMtdParam._m0[11u].x;
    float _333 = _327.y * cbMtdParam._m0[11u].y;
    float _334 = _327.z * cbMtdParam._m0[11u].z;
    vec4 _353 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _289) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _290) + cbTextureTilingScale._m0[5u].w));
    vec4 _389 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _391 = _389.x;
    float _403 = dot(vec4(_391, _389.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _420 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_391 - _403) * cbMtdParam._m0[24u].y) + _403) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3771 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _421 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
    float _428 = (_421 * ((_353.x * cbMtdParam._m0[12u].x) - _332)) + _332;
    float _429 = (_421 * ((_353.y * cbMtdParam._m0[12u].y) - _333)) + _333;
    float _430 = (_421 * ((_353.z * cbMtdParam._m0[12u].z) - _334)) + _334;
    float _434 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _303.x) * _428;
    float _437 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _303.y) * _429;
    float _440 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _303.z) * _430;
    float _447 = ((_428 - _434) * (isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0)))) + _434;
    float _448 = ((_429 - _437) * (isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0)))) + _437;
    float _449 = ((_430 - _440) * (isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0)))) + _440;
    vec4 _467 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _289) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _290) + cbTextureTilingScale._m0[20u].w));
    vec4 _494 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _289) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _290) + cbTextureTilingScale._m0[4u].w));
    vec4 _511 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _513 = _511.x;
    float _514 = _511.y;
    float _515 = _511.z;
    float _524 = ((_494.z - _515) * _421) + _515;
    float _527 = ((((_494.x - _513) * _421) + _513) * 2.0) + (-1.0);
    float _528 = ((((_494.y - _514) * _421) + _514) * 2.0) + (-1.0);
    float _529 = dot(vec2(_527, _528), vec2(_527, _528));
    float _3782 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _534 = sqrt(1.0 - (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))));
    vec4 _554 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _566 = (_527 + ((((_467.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_554.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _567 = (_528 + ((((_467.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_554.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _570 = fma(_534, _237, fma(_567, _244, _566 * _230));
    float _573 = fma(_534, _238, fma(_567, _245, _566 * _231));
    float _576 = fma(_534, _239, fma(_567, _246, _566 * _232));
    float _580 = inversesqrt(dot(vec3(_570, _573, _576), vec3(_570, _573, _576)));
    vec4 _607 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _289) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _290) + cbTextureTilingScale._m0[11u].w));
    float _609 = _607.x;
    float _610 = 1.0 - _609;
    float _614 = ((_609 - _610) * cbMtdParam._m0[24u].z) + _610;
    float _616 = (cbMtdParam._m0[19u].x + dot(vec4(_580 * _570, _580 * _573, _580 * _576, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_614 * cbMtdParam._m0[21u].z);
    float _3793 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _617 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    float _632 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_614 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3804 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _633 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _637 = ((_617 * (cbMtdParam._m0[17u].x - _447)) * _633) + _447;
    float _638 = ((_617 * (cbMtdParam._m0[17u].y - _448)) * _633) + _448;
    float _639 = ((_617 * (cbMtdParam._m0[17u].z - _449)) * _633) + _449;
    vec4 _651 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _665 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _667 = _665.x;
    float _685 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _289) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _290) + cbTextureTilingScale._m0[9u].w)).x - _667) * _421) + _667;
    float _689 = ((_651.x - _685) * cbMtdParam._m0[19u].z) + _685;
    float _692 = _689 - ((_633 * _617) * _689);
    float _697 = (((_467.z - _524) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _524;
    float _701 = ((_554.z - _697) * cbMtdParam._m0[19u].w) + _697;
    vec4 _714 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _289) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _290) + cbTextureTilingScale._m0[15u].w));
    float _721 = (_714.x * 2.0) + (-1.0);
    float _722 = (_714.y * 2.0) + (-1.0);
    float _723 = dot(vec2(_721, _722), vec2(_721, _722));
    float _3815 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _732 = (((_714.z - _701) * _617) * _633) + _701;
    float _747 = (((cbMtdParam._m0[21u].x * _566) + ((_721 - _566) * _617)) * _633) + _566;
    float _748 = (((cbMtdParam._m0[21u].x * _567) + ((_722 - _567) * _617)) * _633) + _567;
    float _749 = (((sqrt(1.0 - (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0)))) - _534) * _617) * _633) + _534;
    float _751 = cbMtdParam._m0[22u].x + _554.w;
    float _754 = fma(_749, _237, fma(_748, _244, _747 * _230));
    float _757 = fma(_749, _238, fma(_748, _245, _747 * _231));
    float _760 = fma(_749, _239, fma(_748, _246, _747 * _232));
    float _764 = inversesqrt(dot(vec3(_754, _757, _760), vec3(_754, _757, _760)));
    float _765 = _764 * _754;
    float _766 = _764 * _757;
    float _767 = _764 * _760;
    float _3826 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _768 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _3837 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _3848 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _3859 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _3870 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _3881 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _773 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _787 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _828 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _838 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _828);
    float _839 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _828);
    float _840 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _828);
    float _844 = inversesqrt(dot(vec3(_838, _839, _840), vec3(_838, _839, _840)));
    float _845 = _838 * _844;
    float _846 = _839 * _844;
    float _847 = _840 * _844;
    vec4 _852 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _854 = _852.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1026 = sqrt(((_838 * _838) + (_839 * _839)) + (_840 * _840));
        float _1032 = (cbMatDynParam._m0[5u].x * _1026) + cbMatDynParam._m0[5u].y;
        float _3892 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1033 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1037 = (cbMatDynParam._m0[5u].z * _1026) + cbMatDynParam._m0[5u].w;
        float _3903 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) - _1033)) + _1033) < ((_854 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _865 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _866 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _884 = fma(_767, cbSceneParam._m0[5u].z, fma(_766, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _765));
    float _887 = fma(_767, cbSceneParam._m0[6u].z, fma(_766, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _765));
    float _890 = fma(_767, cbSceneParam._m0[7u].z, fma(_766, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _765));
    uint _903 = _270 + 9u;
    uint _904 = _903 + uint(cbMatDynParam._m0[0u].w);
    float _910 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0)))) * cbInstanceData._m0[_904].x;
    float _911 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0)))) * cbInstanceData._m0[_904].y;
    float _912 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0)))) * cbInstanceData._m0[_904].z;
    float _3914 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _913 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _3925 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _914 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _3936 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _915 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _916 = 1.0 - _773;
    float _917 = _913 * _916;
    float _918 = _914 * _916;
    float _919 = _915 * _916;
    float _924 = (_913 + (-0.039999999105930328369140625)) * _773;
    float _925 = (_914 + (-0.039999999105930328369140625)) * _773;
    float _926 = (_915 + (-0.039999999105930328369140625)) * _773;
    float _927 = _924 + 0.039999999105930328369140625;
    float _929 = _925 + 0.039999999105930328369140625;
    float _930 = _926 + 0.039999999105930328369140625;
    vec4 _939 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _865, cbSceneParam._m0[86u].y * _866));
    float _943 = ((isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * TEXCOORD_5.w) * _939.x;
    float _944 = dot(vec3(_765, _766, _767), vec3(_845, _846, _847));
    float _947 = _944 * 2.0;
    float _951 = (_947 * _765) - _845;
    float _952 = (_947 * _766) - _846;
    float _953 = (_947 * _767) - _847;
    float _957 = abs(dot(vec3(_845, _846, _847), vec3(_765, _766, _767)));
    float _3947 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _959 = sqrt(_768);
    float _972 = exp2((_959 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_959 * 3.0));
    float _978 = (1.0 - _972) * ((_959 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _979 = _972 * _959;
    float _1007 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1011 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1015 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1344;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1069 = fma(_1015, cbModelParam._m0[26u].z, fma(_1011, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1007));
        float _1073 = fma(_1015, cbModelParam._m0[27u].z, fma(_1011, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1007));
        float _1077 = fma(_1015, cbModelParam._m0[28u].z, fma(_1011, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1007));
        float _1102 = _1007 + _765;
        float _1103 = _1011 + _766;
        float _1104 = _1015 + _767;
        float _1114 = fma(_1104, cbModelParam._m0[26u].z, fma(_1103, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1102)) - _1069;
        float _1115 = fma(_1104, cbModelParam._m0[27u].z, fma(_1103, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1102)) - _1073;
        float _1116 = fma(_1104, cbModelParam._m0[28u].z, fma(_1103, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1102)) - _1077;
        float _1120 = inversesqrt(dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116)));
        float _1133 = ((_1120 * _1114) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1069 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1134 = ((_1120 * _1115) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1073 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1135 = ((_1120 * _1116) / cbModelParam._m0[34u].z) + ((((((_1077 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1138 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1133, _1134, _1135), 0.0);
        vec4 _1145 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1133, _1134, _1135), 0.0);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1133, _1134, _1135), 0.0);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1133, _1134, _1135), 0.0);
        float _1172 = exp2((_1138.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1138.x + (-0.5));
        float _1174 = _1172 * (_1138.y + (-0.5));
        float _1175 = _1172 * (_1138.z + (-0.5));
        float _1182 = exp2((_1145.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1145.x + (-0.5));
        float _1184 = _1182 * (_1145.y + (-0.5));
        float _1185 = _1182 * (_1145.z + (-0.5));
        float _1192 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1152.x + (-0.5));
        float _1194 = _1192 * (_1152.y + (-0.5));
        float _1195 = _1192 * (_1152.z + (-0.5));
        float _1202 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1159.x + (-0.5));
        float _1204 = _1202 * (_1159.y + (-0.5));
        float _1205 = _1202 * (_1159.z + (-0.5));
        float _1206 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1207 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1208 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1209 = _1173 * 0.5;
        float _1210 = _1183 * 0.5;
        float _1211 = _1193 * 0.5;
        float _1212 = dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211));
        float _1217 = (_1212 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1212);
        float _1226 = (dot(vec3(_765, _766, _767), vec3(_1217 * _1209, _1217 * _1210, _1217 * _1211)) + 1.0) * 0.5;
        float _3973 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1236 = sqrt(((_1210 * _1210) + (_1209 * _1209)) + (_1211 * _1211)) / (_1206 + 9.9999997473787516355514526367188e-06);
        float _3984 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1238 = _1237 * 2.0;
        float _1242 = (1.0 - _1237) / (_1237 + 1.0);
        float _3995 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1252 = ((((1.0 - _1243) * (_1238 + 2.0)) * exp2(log2(isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_1238 + 1.0))) + _1243) * _1206;
        float _1253 = _1174 * 0.5;
        float _1254 = _1184 * 0.5;
        float _1255 = _1194 * 0.5;
        float _1256 = dot(vec3(_1253, _1254, _1255), vec3(_1253, _1254, _1255));
        float _1261 = (_1256 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1256);
        float _1269 = (dot(vec3(_765, _766, _767), vec3(_1261 * _1253, _1261 * _1254, _1261 * _1255)) + 1.0) * 0.5;
        float _4006 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1278 = sqrt(((_1254 * _1254) + (_1253 * _1253)) + (_1255 * _1255)) / (_1207 + 9.9999997473787516355514526367188e-06);
        float _4017 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1280 = _1279 * 2.0;
        float _1284 = (1.0 - _1279) / (_1279 + 1.0);
        float _4028 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1294 = ((((1.0 - _1285) * (_1280 + 2.0)) * exp2(log2(isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_1280 + 1.0))) + _1285) * _1207;
        float _1295 = _1175 * 0.5;
        float _1296 = _1185 * 0.5;
        float _1297 = _1195 * 0.5;
        float _1298 = dot(vec3(_1295, _1296, _1297), vec3(_1295, _1296, _1297));
        float _1303 = (_1298 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1298);
        float _1311 = (dot(vec3(_765, _766, _767), vec3(_1303 * _1295, _1303 * _1296, _1303 * _1297)) + 1.0) * 0.5;
        float _4039 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1320 = sqrt(((_1296 * _1296) + (_1295 * _1295)) + (_1297 * _1297)) / (_1208 + 9.9999997473787516355514526367188e-06);
        float _4050 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1322 = _1321 * 2.0;
        float _1326 = (1.0 - _1321) / (_1321 + 1.0);
        float _4061 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1336 = ((((1.0 - _1327) * (_1322 + 2.0)) * exp2(log2(isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_1322 + 1.0))) + _1327) * _1208;
        _1344 = _1175;
        _1346 = _1174;
        _1347 = _1173;
        _1348 = _1185;
        _1349 = _1184;
        _1350 = _1183;
        _1351 = _1195;
        _1352 = _1194;
        _1353 = _1193;
        _1354 = _1208;
        _1355 = _1207;
        _1356 = _1206;
        _1357 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)));
        _1358 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)));
        _1359 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)));
    }
    else
    {
        _1344 = _1345;
        _1346 = _1345;
        _1347 = _1345;
        _1348 = _1345;
        _1349 = _1345;
        _1350 = _1345;
        _1351 = _1345;
        _1352 = _1345;
        _1353 = _1345;
        _1354 = _1345;
        _1355 = _1345;
        _1356 = _1345;
        _1357 = 0.0;
        _1358 = 0.0;
        _1359 = 0.0;
    }
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1387 = fma(_1015, cbModelParam._m0[30u].z, fma(_1011, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1007));
        float _1391 = fma(_1015, cbModelParam._m0[31u].z, fma(_1011, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1007));
        float _1395 = fma(_1015, cbModelParam._m0[32u].z, fma(_1011, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1007));
        float _1418 = _1007 + _765;
        float _1419 = _1011 + _766;
        float _1420 = _1015 + _767;
        float _1430 = fma(_1420, cbModelParam._m0[30u].z, fma(_1419, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1418)) - _1387;
        float _1431 = fma(_1420, cbModelParam._m0[31u].z, fma(_1419, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1418)) - _1391;
        float _1432 = fma(_1420, cbModelParam._m0[32u].z, fma(_1419, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1418)) - _1395;
        float _1436 = inversesqrt(dot(vec3(_1430, _1431, _1432), vec3(_1430, _1431, _1432)));
        float _1449 = ((_1436 * _1430) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1387 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1450 = ((_1436 * _1431) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1391 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1451 = ((_1436 * _1432) / cbModelParam._m0[35u].z) + ((((((_1395 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1453 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1449, _1450, _1451), 0.0);
        vec4 _1460 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1449, _1450, _1451), 0.0);
        vec4 _1467 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1449, _1450, _1451), 0.0);
        vec4 _1474 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1449, _1450, _1451), 0.0);
        float _1486 = exp2((_1453.w + (-0.5)) * 20.0) * 2.0;
        float _1487 = _1486 * (_1453.x + (-0.5));
        float _1488 = _1486 * (_1453.y + (-0.5));
        float _1489 = _1486 * (_1453.z + (-0.5));
        float _1496 = exp2((_1460.w + (-0.5)) * 20.0) * 2.0;
        float _1497 = _1496 * (_1460.x + (-0.5));
        float _1498 = _1496 * (_1460.y + (-0.5));
        float _1499 = _1496 * (_1460.z + (-0.5));
        float _1506 = exp2((_1467.w + (-0.5)) * 20.0) * 2.0;
        float _1507 = _1506 * (_1467.x + (-0.5));
        float _1508 = _1506 * (_1467.y + (-0.5));
        float _1509 = _1506 * (_1467.z + (-0.5));
        float _1516 = exp2((_1474.w + (-0.5)) * 20.0) * 2.0;
        float _1517 = _1516 * (_1474.x + (-0.5));
        float _1518 = _1516 * (_1474.y + (-0.5));
        float _1519 = _1516 * (_1474.z + (-0.5));
        float _1520 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1521 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1522 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1523 = _1487 * 0.5;
        float _1524 = _1497 * 0.5;
        float _1525 = _1507 * 0.5;
        float _1526 = dot(vec3(_1523, _1524, _1525), vec3(_1523, _1524, _1525));
        float _1531 = (_1526 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1526);
        float _1539 = (dot(vec3(_765, _766, _767), vec3(_1531 * _1523, _1531 * _1524, _1531 * _1525)) + 1.0) * 0.5;
        float _4102 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1548 = sqrt(((_1524 * _1524) + (_1523 * _1523)) + (_1525 * _1525)) / (_1520 + 9.9999997473787516355514526367188e-06);
        float _4113 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1550 = _1549 * 2.0;
        float _1554 = (1.0 - _1549) / (_1549 + 1.0);
        float _4124 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1564 = ((((1.0 - _1555) * (_1550 + 2.0)) * exp2(log2(isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (_1550 + 1.0))) + _1555) * _1520;
        float _1565 = _1488 * 0.5;
        float _1566 = _1498 * 0.5;
        float _1567 = _1508 * 0.5;
        float _1568 = dot(vec3(_1565, _1566, _1567), vec3(_1565, _1566, _1567));
        float _1573 = (_1568 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1568);
        float _1581 = (dot(vec3(_765, _766, _767), vec3(_1573 * _1565, _1573 * _1566, _1573 * _1567)) + 1.0) * 0.5;
        float _4135 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1590 = sqrt(((_1566 * _1566) + (_1565 * _1565)) + (_1567 * _1567)) / (_1521 + 9.9999997473787516355514526367188e-06);
        float _4146 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1592 = _1591 * 2.0;
        float _1596 = (1.0 - _1591) / (_1591 + 1.0);
        float _4157 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1606 = ((((1.0 - _1597) * (_1592 + 2.0)) * exp2(log2(isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_1592 + 1.0))) + _1597) * _1521;
        float _1607 = _1489 * 0.5;
        float _1608 = _1499 * 0.5;
        float _1609 = _1509 * 0.5;
        float _1610 = dot(vec3(_1607, _1608, _1609), vec3(_1607, _1608, _1609));
        float _1615 = (_1610 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1610);
        float _1623 = (dot(vec3(_765, _766, _767), vec3(_1615 * _1607, _1615 * _1608, _1615 * _1609)) + 1.0) * 0.5;
        float _4168 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1632 = sqrt(((_1608 * _1608) + (_1607 * _1607)) + (_1609 * _1609)) / (_1522 + 9.9999997473787516355514526367188e-06);
        float _4179 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1634 = _1633 * 2.0;
        float _1638 = (1.0 - _1633) / (_1633 + 1.0);
        float _4190 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _1648 = ((((1.0 - _1639) * (_1634 + 2.0)) * exp2(log2(isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * (_1634 + 1.0))) + _1639) * _1522;
        _1656 = _1489;
        _1657 = _1488;
        _1658 = _1487;
        _1659 = _1499;
        _1660 = _1498;
        _1661 = _1497;
        _1662 = _1509;
        _1663 = _1508;
        _1664 = _1507;
        _1665 = _1522;
        _1666 = _1521;
        _1667 = _1520;
        _1668 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)));
        _1669 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)));
        _1670 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0)));
    }
    else
    {
        _1656 = _1345;
        _1657 = _1345;
        _1658 = _1345;
        _1659 = _1345;
        _1660 = _1345;
        _1661 = _1345;
        _1662 = _1345;
        _1663 = _1345;
        _1664 = _1345;
        _1665 = _1345;
        _1666 = _1345;
        _1667 = _1345;
        _1668 = 0.0;
        _1669 = 0.0;
        _1670 = 0.0;
    }
    float _1680 = (cbModelParam._m0[1u].x * (_1668 - _1357)) + _1357;
    float _1681 = (cbModelParam._m0[1u].x * (_1669 - _1358)) + _1358;
    float _1682 = (cbModelParam._m0[1u].x * (_1670 - _1359)) + _1359;
    float _1703 = fma(_1682, cbSceneParam._m0[89u].z, fma(_1681, cbSceneParam._m0[89u].y, _1680 * cbSceneParam._m0[89u].x));
    float _1706 = fma(_1682, cbSceneParam._m0[90u].z, fma(_1681, cbSceneParam._m0[90u].y, _1680 * cbSceneParam._m0[90u].x));
    float _1709 = fma(_1682, cbSceneParam._m0[91u].z, fma(_1681, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1680));
    float _1724 = _951 * 0.5;
    float _1725 = _952 * 0.5;
    float _1726 = _953 * 0.5;
    float _1727 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1658, _1661, _1664, _1667));
    float _1730 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1657, _1660, _1663, _1666));
    float _1733 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1656, _1659, _1662, _1665));
    float _1767;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1740 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1344, _1348, _1351, _1354));
        float _1744 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1346, _1349, _1352, _1355));
        float _1748 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1347, _1350, _1353, _1356));
        float _1755 = dot(vec4(cbModelParam._m0[39u]), vec4(_1724, _1725, _1726, 1.0));
        _1767 = dot(vec3(isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0)), isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)), isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1755) ? 0.0 : (isnan(0.0) ? _1755 : max(0.0, _1755))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1767 = 1.0;
    }
    float _1778;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1769 = dot(vec4(cbModelParam._m0[40u]), vec4(_1724, _1725, _1726, 1.0));
        _1778 = dot(vec3(isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)), isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0)), isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1769) ? 0.0 : (isnan(0.0) ? _1769 : max(0.0, _1769))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1778 = 1.0;
    }
    float _1782 = (_1778 * cbModelParam._m0[1u].x) + (_1767 * (1.0 - cbModelParam._m0[1u].x));
    float _1792 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _768);
    float _1793 = isnan(_1792) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1792 : min(cbModelParam._m0[25u].z, _1792));
    float _1874;
    float _1876;
    float _1878;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1841 = fma(_1015, cbModelParam._m0[13u].z, fma(_1011, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1007)) + cbModelParam._m0[13u].w;
        float _1845 = fma(_1015, cbModelParam._m0[14u].z, fma(_1011, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1007)) + cbModelParam._m0[14u].w;
        float _1849 = fma(_1015, cbModelParam._m0[15u].z, fma(_1011, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1007)) + cbModelParam._m0[15u].w;
        float _1852 = fma(_953, cbModelParam._m0[13u].z, fma(_952, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _951));
        float _1855 = fma(_953, cbModelParam._m0[14u].z, fma(_952, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _951));
        float _1858 = fma(_953, cbModelParam._m0[15u].z, fma(_952, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _951));
        float _1886;
        if (_1852 > 0.0)
        {
            _1886 = abs((1.0 - _1841) / _1852);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1852 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1841 + 1.0) / _1852);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1886 = frontier_phi_17_15_ladder;
        }
        float _2089;
        if (_1855 > 0.0)
        {
            _2089 = abs((1.0 - _1845) / _1855);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1855 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1845 + 1.0) / _1855);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2089 = frontier_phi_26_22_ladder;
        }
        float _2343;
        if (_1858 > 0.0)
        {
            _2343 = abs((1.0 - _1849) / _1858);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1858 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1849 + 1.0) / _1858);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2343 = frontier_phi_38_33_ladder;
        }
        float _2345 = isnan(_2089) ? _1886 : (isnan(_1886) ? _2089 : min(_1886, _2089));
        float _2346 = isnan(_2343) ? _2345 : (isnan(_2345) ? _2343 : min(_2345, _2343));
        float _2350 = (_2346 * _1852) + _1841;
        float _2351 = (_2346 * _1855) + _1845;
        float _2352 = (_2346 * _1858) + _1849;
        float _2353 = _2346 * 9.9999997473787516355514526367188e-05;
        float _2355 = (-1.0) - _2353;
        float _2357 = _2353 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2352 > _2357) || ((_2352 < _2355) || ((_2351 > _2357) || ((_2351 < _2355) || ((_2350 < _2355) || (_2350 > _2357))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2480 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2352, cbModelParam._m0[9u].z, fma(_2351, cbModelParam._m0[9u].y, _2350 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2352, cbModelParam._m0[10u].z, fma(_2351, cbModelParam._m0[10u].y, _2350 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2352, cbModelParam._m0[11u].z, fma(_2351, cbModelParam._m0[11u].y, _2350 * cbModelParam._m0[11u].x))), _1793);
            frontier_phi_16_38_ladder = _2480.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2480.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2480.x * cbModelParam._m0[1u].y;
        }
        _1874 = frontier_phi_16_38_ladder_2;
        _1876 = frontier_phi_16_38_ladder_1;
        _1878 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1862 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_951, _952, _953), _1793);
        _1874 = _1862.x * cbModelParam._m0[1u].y;
        _1876 = _1862.y * cbModelParam._m0[1u].y;
        _1878 = _1862.z * cbModelParam._m0[1u].y;
    }
    float _1882 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _768);
    float _1883 = isnan(_1882) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1882 : min(cbModelParam._m0[25u].w, _1882));
    float _1973;
    float _1975;
    float _1977;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1937 = fma(_1015, cbModelParam._m0[21u].z, fma(_1011, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1007)) + cbModelParam._m0[21u].w;
        float _1941 = fma(_1015, cbModelParam._m0[22u].z, fma(_1011, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1007)) + cbModelParam._m0[22u].w;
        float _1945 = fma(_1015, cbModelParam._m0[23u].z, fma(_1011, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1007)) + cbModelParam._m0[23u].w;
        float _1948 = fma(_953, cbModelParam._m0[21u].z, fma(_952, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _951));
        float _1951 = fma(_953, cbModelParam._m0[22u].z, fma(_952, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _951));
        float _1954 = fma(_953, cbModelParam._m0[23u].z, fma(_952, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _951));
        float _2094;
        if (_1948 > 0.0)
        {
            _2094 = abs((1.0 - _1937) / _1948);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1948 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1937 + 1.0) / _1948);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2094 = frontier_phi_28_24_ladder;
        }
        float _2370;
        if (_1951 > 0.0)
        {
            _2370 = abs((1.0 - _1941) / _1951);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1951 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1941 + 1.0) / _1951);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2370 = frontier_phi_40_35_ladder;
        }
        float _2583;
        if (_1954 > 0.0)
        {
            _2583 = abs((1.0 - _1945) / _1954);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1954 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1945 + 1.0) / _1954);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2583 = frontier_phi_49_46_ladder;
        }
        float _2585 = isnan(_2370) ? _2094 : (isnan(_2094) ? _2370 : min(_2094, _2370));
        float _2586 = isnan(_2583) ? _2585 : (isnan(_2585) ? _2583 : min(_2585, _2583));
        float _2590 = (_2586 * _1948) + _1937;
        float _2591 = (_2586 * _1951) + _1941;
        float _2592 = (_2586 * _1954) + _1945;
        float _2593 = _2586 * 9.9999997473787516355514526367188e-05;
        float _2594 = (-1.0) - _2593;
        float _2596 = _2593 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2592 > _2596) || ((_2592 < _2594) || ((_2591 > _2596) || ((_2591 < _2594) || ((_2590 < _2594) || (_2590 > _2596))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2791 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2592, cbModelParam._m0[17u].z, fma(_2591, cbModelParam._m0[17u].y, _2590 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2592, cbModelParam._m0[18u].z, fma(_2591, cbModelParam._m0[18u].y, _2590 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2592, cbModelParam._m0[19u].z, fma(_2591, cbModelParam._m0[19u].y, _2590 * cbModelParam._m0[19u].x))), _1883);
            frontier_phi_25_49_ladder = _2791.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2791.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2791.x * cbModelParam._m0[1u].z;
        }
        _1973 = frontier_phi_25_49_ladder_2;
        _1975 = frontier_phi_25_49_ladder_1;
        _1977 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1957 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_951, _952, _953), _1883);
        _1973 = _1957.x * cbModelParam._m0[1u].z;
        _1975 = _1957.y * cbModelParam._m0[1u].z;
        _1977 = _1957.z * cbModelParam._m0[1u].z;
    }
    float _1990 = (((_978 * _927) + _979) * _943) * ((cbModelParam._m0[1u].w * (_1973 - _1874)) + _1874);
    float _1992 = (((_978 * _929) + _979) * _943) * ((cbModelParam._m0[1u].w * (_1975 - _1876)) + _1876);
    float _1994 = (((_978 * _930) + _979) * _943) * ((cbModelParam._m0[1u].w * (_1977 - _1878)) + _1878);
    float _1997 = fma(_1994, cbSceneParam._m0[89u].z, fma(_1992, cbSceneParam._m0[89u].y, _1990 * cbSceneParam._m0[89u].x));
    float _2000 = fma(_1994, cbSceneParam._m0[90u].z, fma(_1992, cbSceneParam._m0[90u].y, _1990 * cbSceneParam._m0[90u].x));
    float _2003 = fma(_1994, cbSceneParam._m0[91u].z, fma(_1992, cbSceneParam._m0[91u].y, _1990 * cbSceneParam._m0[91u].x));
    uvec4 _2013 = floatBitsToUint(cbInstanceData._m0[_270 + 5u]);
    uint _2015 = _2013.x * 14u;
    uint _2016 = _2015 + 13u;
    float _2023 = _943 + (-1.0);
    float _2028 = (cbLight._m0[_2016].x * _2023) + 1.0;
    float _2029 = (cbLight._m0[_2016].y * _2023) + 1.0;
    float _2030 = (cbLight._m0[_2016].z * _2023) + 1.0;
    float _2031 = (cbLight._m0[_2016].w * _2023) + 1.0;
    uint _2032 = _2015 + 5u;
    float _2038 = isnan(1.0) ? _2029 : (isnan(_2029) ? 1.0 : min(_2029, 1.0));
    uint _2042 = _2015 + 4u;
    float _2048 = isnan(1.0) ? _2028 : (isnan(_2028) ? 1.0 : min(_2028, 1.0));
    uint _2052 = _2015 | 1u;
    float _2063 = dot(vec3(cbLight._m0[_2015].xyz), vec3(_765, _766, _767));
    float _2066 = dot(vec3(cbLight._m0[_2052].xyz), vec3(_765, _766, _767));
    float _4326 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _4337 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _2071 = (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * 0.3183098733425140380859375;
    float _2073 = (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * 0.3183098733425140380859375;
    float _2080 = ((cbLight._m0[_2032].x * _2038) * _2073) + ((cbLight._m0[_2042].x * _2048) * _2071);
    float _2081 = ((_2038 * cbLight._m0[_2032].y) * _2073) + ((_2048 * cbLight._m0[_2042].y) * _2071);
    float _2082 = ((_2038 * cbLight._m0[_2032].z) * _2073) + ((_2048 * cbLight._m0[_2042].z) * _2071);
    uvec4 _2086 = floatBitsToUint(cbLight._m0[_2015 + 12u]);
    bool _2088 = _2086.x == 0u;
    float _2099;
    float _2101;
    float _2103;
    if (_2088)
    {
        _2099 = _2080;
        _2101 = _2081;
        _2103 = _2082;
    }
    else
    {
        uint _2107 = _2015 + 6u;
        float _2123 = (dot(vec3(cbLight._m0[_2015 + 2u].xyz), vec3(_765, _766, _767)) * 0.5) + 0.5;
        float _2124 = _2123 * _2123;
        float _4348 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
        float _2125 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _2126 = isnan(1.0) ? _2030 : (isnan(_2030) ? 1.0 : min(_2030, 1.0));
        _2099 = (((cbLight._m0[_2107].x * 0.3183098733425140380859375) * _2125) * _2126) + _2080;
        _2101 = (((cbLight._m0[_2107].y * 0.3183098733425140380859375) * _2125) * _2126) + _2081;
        _2103 = (((cbLight._m0[_2107].z * 0.3183098733425140380859375) * _2125) * _2126) + _2082;
    }
    bool _2106 = _2086.y == 0u;
    float _2144;
    float _2146;
    float _2148;
    if (_2106)
    {
        _2144 = _2099;
        _2146 = _2101;
        _2148 = _2103;
    }
    else
    {
        uint _2314 = _2015 + 7u;
        float _2330 = (dot(vec3(cbLight._m0[_2015 + 3u].xyz), vec3(_765, _766, _767)) * 0.5) + 0.5;
        float _2331 = _2330 * _2330;
        float _4364 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2332 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _2333 = isnan(1.0) ? _2031 : (isnan(_2031) ? 1.0 : min(_2031, 1.0));
        _2144 = (((cbLight._m0[_2314].x * 0.3183098733425140380859375) * _2332) * _2333) + _2099;
        _2146 = (((cbLight._m0[_2314].y * 0.3183098733425140380859375) * _2332) * _2333) + _2101;
        _2148 = (((cbLight._m0[_2314].z * 0.3183098733425140380859375) * _2332) * _2333) + _2103;
    }
    uint _2151 = _2015 + 8u;
    float _2164 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2015].w)) * _768) * 0.949999988079071044921875);
    float _2165 = _2164 * _2164;
    float _2166 = cbLight._m0[_2015].x + _845;
    float _2167 = cbLight._m0[_2015].y + _846;
    float _2168 = cbLight._m0[_2015].z + _847;
    float _2172 = inversesqrt(dot(vec3(_2166, _2167, _2168), vec3(_2166, _2167, _2168)));
    float _2173 = _2172 * _2166;
    float _2174 = _2172 * _2167;
    float _2175 = _2172 * _2168;
    float _2176 = dot(vec3(_765, _766, _767), vec3(cbLight._m0[_2015].xyz));
    float _4380 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2179 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
    float _4391 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _2180 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
    float _2181 = dot(vec3(_765, _766, _767), vec3(_2173, _2174, _2175));
    float _4402 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2184 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
    float _2185 = dot(vec3(cbLight._m0[_2015].xyz), vec3(_2173, _2174, _2175));
    float _4413 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _2189 = _2165 * _2165;
    float _2193 = ((_2184 * _2184) * (_2189 + (-1.0))) + 1.0;
    float _2201 = exp2(log2(1.0 - (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0)))) * 5.0);
    float _2202 = 0.959999978542327880859375 - _924;
    float _2204 = 0.959999978542327880859375 - _925;
    float _2205 = 0.959999978542327880859375 - _926;
    float _2212 = 1.0 - _2165;
    float _2223 = (0.5 / (((_2180 * ((_2179 * _2212) + _2165)) + 9.9999999392252902907785028219223e-09) + (((_2180 * _2212) + _2165) * _2179))) * _2179;
    float _4424 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2225 = (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * (_2189 / ((_2193 * _2193) * 3.141590118408203125));
    uint _2236 = _2015 + 9u;
    float _2247 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2052].w)) * _768) * 0.949999988079071044921875);
    float _2248 = _2247 * _2247;
    float _2249 = cbLight._m0[_2052].x + _845;
    float _2250 = cbLight._m0[_2052].y + _846;
    float _2251 = cbLight._m0[_2052].z + _847;
    float _2255 = inversesqrt(dot(vec3(_2249, _2250, _2251), vec3(_2249, _2250, _2251)));
    float _2256 = _2255 * _2249;
    float _2257 = _2255 * _2250;
    float _2258 = _2255 * _2251;
    float _2259 = dot(vec3(_765, _766, _767), vec3(cbLight._m0[_2052].xyz));
    float _4435 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2262 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
    float _2263 = dot(vec3(_765, _766, _767), vec3(_2256, _2257, _2258));
    float _4446 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2266 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
    float _2267 = dot(vec3(cbLight._m0[_2052].xyz), vec3(_2256, _2257, _2258));
    float _4457 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2271 = _2248 * _2248;
    float _2275 = ((_2266 * _2266) * (_2271 + (-1.0))) + 1.0;
    float _2282 = exp2(log2(1.0 - (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0)))) * 5.0);
    float _2289 = 1.0 - _2248;
    float _2299 = (0.5 / (((_2180 * ((_2262 * _2289) + _2248)) + 9.9999999392252902907785028219223e-09) + (((_2180 * _2289) + _2248) * _2262))) * _2262;
    float _4468 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2301 = (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2271 / ((_2275 * _2275) * 3.141590118408203125));
    float _2311 = (((((_2282 * _2202) + _927) * cbLight._m0[_2236].x) * _2301) * _2038) + (((((_2201 * _2202) + _927) * cbLight._m0[_2151].x) * _2225) * _2048);
    float _2312 = (((((_2282 * _2204) + _929) * cbLight._m0[_2236].y) * _2301) * _2038) + (((((_2201 * _2204) + _929) * cbLight._m0[_2151].y) * _2225) * _2048);
    float _2313 = (((((_2282 * _2205) + _930) * cbLight._m0[_2236].z) * _2301) * _2038) + (((((_2201 * _2205) + _930) * cbLight._m0[_2151].z) * _2225) * _2048);
    float _2375;
    float _2377;
    float _2379;
    if (_2088)
    {
        _2375 = _2311;
        _2377 = _2312;
        _2379 = _2313;
    }
    else
    {
        uint _2381 = _2015 + 2u;
        uint _2385 = _2015 + 10u;
        float _2399 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2381].w)) * _768) * 0.949999988079071044921875);
        float _2400 = _2399 * _2399;
        float _2401 = cbLight._m0[_2381].x + _845;
        float _2402 = cbLight._m0[_2381].y + _846;
        float _2403 = cbLight._m0[_2381].z + _847;
        float _2407 = inversesqrt(dot(vec3(_2401, _2402, _2403), vec3(_2401, _2402, _2403)));
        float _2408 = _2407 * _2401;
        float _2409 = _2407 * _2402;
        float _2410 = _2407 * _2403;
        float _2411 = dot(vec3(_765, _766, _767), vec3(cbLight._m0[_2381].xyz));
        float _4479 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
        float _2414 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _2415 = dot(vec3(_765, _766, _767), vec3(_2408, _2409, _2410));
        float _4490 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        float _2418 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _2419 = dot(vec3(cbLight._m0[_2381].xyz), vec3(_2408, _2409, _2410));
        float _4501 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2423 = _2400 * _2400;
        float _2427 = ((_2418 * _2418) * (_2423 + (-1.0))) + 1.0;
        float _2434 = exp2(log2(1.0 - (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0)))) * 5.0);
        float _2441 = 1.0 - _2400;
        float _2451 = (0.5 / (((_2180 * ((_2414 * _2441) + _2400)) + 9.9999999392252902907785028219223e-09) + (((_2180 * _2441) + _2400) * _2414))) * _2414;
        float _4512 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2453 = (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (_2423 / ((_2427 * _2427) * 3.141590118408203125));
        float _2454 = isnan(1.0) ? _2030 : (isnan(_2030) ? 1.0 : min(_2030, 1.0));
        _2375 = (((((_2434 * _2202) + _927) * cbLight._m0[_2385].x) * _2453) * _2454) + _2311;
        _2377 = (((((_2434 * _2204) + _929) * cbLight._m0[_2385].y) * _2453) * _2454) + _2312;
        _2379 = (((((_2434 * _2205) + _930) * cbLight._m0[_2385].z) * _2453) * _2454) + _2313;
    }
    float _2489;
    float _2491;
    float _2493;
    if (_2106)
    {
        _2489 = _2375;
        _2491 = _2377;
        _2493 = _2379;
    }
    else
    {
        uint _2500 = _2015 + 3u;
        uint _2504 = _2015 + 11u;
        float _2518 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2500].w)) * _768) * 0.949999988079071044921875);
        float _2519 = _2518 * _2518;
        float _2520 = cbLight._m0[_2500].x + _845;
        float _2521 = cbLight._m0[_2500].y + _846;
        float _2522 = cbLight._m0[_2500].z + _847;
        float _2526 = inversesqrt(dot(vec3(_2520, _2521, _2522), vec3(_2520, _2521, _2522)));
        float _2527 = _2526 * _2520;
        float _2528 = _2526 * _2521;
        float _2529 = _2526 * _2522;
        float _2530 = dot(vec3(_765, _766, _767), vec3(cbLight._m0[_2500].xyz));
        float _4528 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        float _2533 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
        float _2534 = dot(vec3(_765, _766, _767), vec3(_2527, _2528, _2529));
        float _4539 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2537 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
        float _2538 = dot(vec3(cbLight._m0[_2500].xyz), vec3(_2527, _2528, _2529));
        float _4550 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2542 = _2519 * _2519;
        float _2546 = ((_2537 * _2537) * (_2542 + (-1.0))) + 1.0;
        float _2553 = exp2(log2(1.0 - (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0)))) * 5.0);
        float _2560 = 1.0 - _2519;
        float _2570 = (0.5 / (((_2180 * ((_2533 * _2560) + _2519)) + 9.9999999392252902907785028219223e-09) + (((_2180 * _2560) + _2519) * _2533))) * _2533;
        float _4561 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2572 = (isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * (_2542 / ((_2546 * _2546) * 3.141590118408203125));
        float _2573 = isnan(1.0) ? _2031 : (isnan(_2031) ? 1.0 : min(_2031, 1.0));
        _2489 = (((((_2553 * _2202) + _927) * cbLight._m0[_2504].x) * _2572) * _2573) + _2375;
        _2491 = (((((_2553 * _2204) + _929) * cbLight._m0[_2504].y) * _2572) * _2573) + _2377;
        _2493 = (((((_2553 * _2205) + _930) * cbLight._m0[_2504].z) * _2572) * _2573) + _2379;
    }
    float _2708;
    float _2710;
    float _2712;
    float _2714;
    float _2716;
    float _2718;
    if (_2013.y == 0u)
    {
        float _2648 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2649 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2648;
        float _2650 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2648;
        float _2651 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2648;
        uvec4 _2663 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2664 = _2663.x;
        uint _2675 = uint((float(_2663.y) * floor(float(uint(cbSceneParam._m0[85u].y * _866) / _2664))) + floor(float(uint(cbSceneParam._m0[85u].x * _865) / _2664)));
        float _2685 = (log2(_2651 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2686 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
        uint _2689 = uint(isnan(14.0) ? _2686 : (isnan(_2686) ? 14.0 : min(_2686, 14.0)));
        uvec4 _2694 = texelFetch(g_lightClusterGridBuffer, int(((_2689 << 2u) + (_2675 << 6u)) >> 2u));
        uint _2695 = _2694.x;
        uint _2696 = _2663.z;
        float _2796;
        float _2798;
        float _2800;
        float _2802;
        float _2804;
        float _2806;
        if (((((1u << ((_2696 >> 4u) & 15u)) + 4294967295u) & _2695) == 0u) || ((_2696 & 240u) == 0u))
        {
            _2796 = 0.0;
            _2798 = 0.0;
            _2800 = 0.0;
            _2802 = 0.0;
            _2804 = 0.0;
            _2806 = 0.0;
        }
        else
        {
            float _2797;
            float _2799;
            float _2801;
            float _2803;
            float _2805;
            float _2807;
            float _2949 = 0.0;
            float _2950 = 0.0;
            float _2951 = 0.0;
            float _2952 = 0.0;
            float _2953 = 0.0;
            float _2954 = 0.0;
            uint _2955 = 0u;
            uint _2964;
            bool _2965;
            for (;;)
            {
                _2964 = texelFetch(g_lightClassification, int((((_2689 << 5u) + (_2675 << 9u)) + (_2955 << 2u)) >> 2u)).x;
                _2965 = _2964 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2965)
                {
                    frontier_phi_66_pred = _2949;
                    frontier_phi_66_pred_1 = _2954;
                    frontier_phi_66_pred_2 = _2953;
                    frontier_phi_66_pred_3 = _2952;
                    frontier_phi_66_pred_4 = _2951;
                    frontier_phi_66_pred_5 = _2950;
                }
                else
                {
                    float _3094;
                    float _3095;
                    float _3096;
                    float _3097;
                    float _3098;
                    float _3099;
                    uint _3100;
                    _3094 = _2949;
                    _3095 = _2950;
                    _3096 = _2951;
                    _3097 = _2952;
                    _3098 = _2953;
                    _3099 = _2954;
                    _3100 = _2964;
                    float _3021;
                    float _3022;
                    float _3023;
                    float _3024;
                    float _3025;
                    float _3026;
                    for (;;)
                    {
                        uint _3104 = uint(findLSB(_3100)) + (_2955 << 5u);
                        uint _3101 = (_3100 + 4294967295u) & _3100;
                        uint _3106 = _3104 * 48u;
                        vec4 _3120 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3106)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 3u)).x));
                        uint _3126 = (_3104 * 48u) + 4u;
                        vec4 _3139 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3126)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 3u)).x));
                        uint _3145 = (_3104 * 48u) + 8u;
                        vec3 _3156 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3145)).x, texelFetch(g_PointLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3145 + 2u)).x));
                        float _3160 = _3120.x - _2649;
                        float _3161 = _3120.y - _2650;
                        float _3162 = _3120.z - _2651;
                        float _3163 = dot(vec3(_3160, _3161, _3162), vec3(_3160, _3161, _3162));
                        float _3166 = inversesqrt(_3163);
                        float _3167 = _3166 * _3160;
                        float _3168 = _3166 * _3161;
                        float _3169 = _3166 * _3162;
                        float _3170 = dot(vec3(_884, _887, _890), vec3(_3167, _3168, _3169));
                        float _3175 = 1.0 - (_3163 * _3120.w);
                        float _4587 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                        float _3176 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
                        float _3177 = sqrt(_3163) * _3139.w;
                        float _3180 = 1.39999997615814208984375 / (_3177 + 1.39999997615814208984375);
                        float _3181 = _3180 * _3180;
                        float _3184 = ((1.0 - _3181) * _3170) + _3181;
                        float _3187 = _3177 * _3177;
                        float _3191 = ((isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0))) * _3176) / ((_3187 * 0.699999988079071044921875) + 1.0);
                        float _3195 = (-0.0) - _2649;
                        float _3196 = (-0.0) - _2650;
                        float _3197 = (-0.0) - _2651;
                        float _3201 = inversesqrt(dot(vec3(_3195, _3196, _3197), vec3(_3195, _3196, _3197)));
                        float _3202 = _3201 * _3195;
                        float _3203 = _3201 * _3196;
                        float _3204 = _3201 * _3197;
                        float _3212 = exp2(log2(1.0 / ((_3187 * 3.5) + 5.0)) * 0.25);
                        float _3213 = 1.0 - _959;
                        float _3220 = sqrt(1.0 - ((1.0 - (_3213 * _3213)) * (1.0 - (_3212 * _3212))));
                        float _3221 = _3220 * _3220;
                        float _3222 = _3221 * _3221;
                        float _3223 = _3202 + _3167;
                        float _3224 = _3203 + _3168;
                        float _3225 = _3204 + _3169;
                        float _3229 = inversesqrt(dot(vec3(_3223, _3224, _3225), vec3(_3223, _3224, _3225)));
                        float _3233 = dot(vec3(_884, _887, _890), vec3(_3202, _3203, _3204));
                        float _4603 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                        float _3236 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                        float _3237 = dot(vec3(_884, _887, _890), vec3(_3229 * _3223, _3229 * _3224, _3229 * _3225));
                        float _4614 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                        float _3240 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
                        float _3244 = ((_3240 * _3240) * (_3222 + (-1.0))) + 1.0;
                        float _3245 = _3180 * _3221;
                        float _3246 = _3245 * _3245;
                        float _3249 = ((1.0 - _3246) * _3170) + _3246;
                        float _4625 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                        float _3250 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                        float _3251 = 1.0 - _3221;
                        float _3261 = (0.5 / (((_3250 * ((_3236 * _3251) + _3221)) + 9.9999999392252902907785028219223e-09) + (((_3250 * _3251) + _3221) * _3236))) * _3250;
                        float _4636 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                        float _3272 = (((_3222 * 3.1415927410125732421875) * (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0)))) / ((_3244 * _3244) * ((_3187 * 2.1991131305694580078125) + 3.141590118408203125))) * _3176;
                        _3024 = (_3191 * _3139.x) + _3097;
                        _3025 = (_3191 * _3139.y) + _3098;
                        _3026 = (_3191 * _3139.z) + _3099;
                        _3021 = (_3272 * _3156.x) + _3094;
                        _3022 = (_3272 * _3156.y) + _3095;
                        _3023 = (_3272 * _3156.z) + _3096;
                        if (_3101 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3094 = _3021;
                            _3095 = _3022;
                            _3096 = _3023;
                            _3097 = _3024;
                            _3098 = _3025;
                            _3099 = _3026;
                            _3100 = _3101;
                        }
                    }
                    frontier_phi_66_pred = _3021;
                    frontier_phi_66_pred_1 = _3026;
                    frontier_phi_66_pred_2 = _3025;
                    frontier_phi_66_pred_3 = _3024;
                    frontier_phi_66_pred_4 = _3023;
                    frontier_phi_66_pred_5 = _3022;
                }
                _2797 = frontier_phi_66_pred;
                _2807 = frontier_phi_66_pred_1;
                _2805 = frontier_phi_66_pred_2;
                _2803 = frontier_phi_66_pred_3;
                _2801 = frontier_phi_66_pred_4;
                _2799 = frontier_phi_66_pred_5;
                uint _2956 = _2955 + 1u;
                if (_2956 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2949 = _2797;
                    _2950 = _2799;
                    _2951 = _2801;
                    _2952 = _2803;
                    _2953 = _2805;
                    _2954 = _2807;
                    _2955 = _2956;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2796 = _2797;
            _2798 = _2799;
            _2800 = _2801;
            _2802 = _2803;
            _2804 = _2805;
            _2806 = _2807;
        }
        uvec4 _2810 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2811 = _2810.z;
        uint _2813 = (_2811 >> 8u) & 15u;
        float _2917;
        float _2919;
        float _2921;
        float _2923;
        float _2925;
        float _2927;
        if (((4294967295u << _2813) & _2695) == 0u)
        {
            _2917 = _2796;
            _2919 = _2798;
            _2921 = _2800;
            _2923 = _2802;
            _2925 = _2804;
            _2927 = _2806;
        }
        else
        {
            float _2942 = inversesqrt(dot(vec3(_2649, _2650, _2651), vec3(_2649, _2650, _2651)));
            float _2943 = _2942 * _2649;
            float _2944 = _2942 * _2650;
            float _2945 = _2942 * _2651;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2813 < ((_2811 >> 12u) & 15u))
            {
                float _2918;
                float _2920;
                float _2922;
                float _2924;
                float _2926;
                float _2928;
                float _3077 = _2796;
                float _3078 = _2798;
                float _3079 = _2800;
                float _3080 = _2802;
                float _3081 = _2804;
                float _3082 = _2806;
                uint _3083 = _2813;
                uint _3092;
                bool _3093;
                for (;;)
                {
                    _3092 = texelFetch(g_lightClassification, int((((_2689 << 5u) + (_2675 << 9u)) + (_3083 << 2u)) >> 2u)).x;
                    _3093 = _3092 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3093)
                    {
                        frontier_phi_77_pred = _3082;
                        frontier_phi_77_pred_1 = _3081;
                        frontier_phi_77_pred_2 = _3080;
                        frontier_phi_77_pred_3 = _3079;
                        frontier_phi_77_pred_4 = _3078;
                        frontier_phi_77_pred_5 = _3077;
                    }
                    else
                    {
                        float _3286;
                        float _3287;
                        float _3288;
                        float _3289;
                        float _3290;
                        float _3291;
                        float _3579;
                        float _3580;
                        float _3581;
                        float _3582;
                        float _3583;
                        float _3584;
                        float _3299 = _3077;
                        float _3300 = _3078;
                        float _3301 = _3079;
                        float _3302 = _3080;
                        float _3303 = _3081;
                        float _3304 = _3082;
                        uint _3305 = _3092;
                        uint _3306;
                        vec4 _3331;
                        float _3332;
                        vec4 _3347;
                        vec3 _3359;
                        vec4 _3374;
                        vec4 _3389;
                        float _3435;
                        bool _3436;
                        for (;;)
                        {
                            uint _3316 = ((_3083 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3305));
                            _3306 = (_3305 + 4294967295u) & _3305;
                            uint _3318 = _3316 * 40u;
                            _3331 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3318)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 3u)).x));
                            _3332 = _3331.w;
                            uint _3334 = (_3316 * 40u) + 4u;
                            _3347 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3334)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 3u)).x));
                            uint _3349 = (_3316 * 40u) + 8u;
                            _3359 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3349)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 2u)).x));
                            uint _3361 = (_3316 * 40u) + 16u;
                            _3374 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3361)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 3u)).x));
                            uint _3376 = (_3316 * 40u) + 20u;
                            _3389 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3376)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 3u)).x));
                            uint _3391 = (_3316 * 40u) + 24u;
                            vec4 _3404 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3391)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 3u)).x));
                            uint _3410 = (_3316 * 40u) + 28u;
                            vec4 _3423 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3410)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 3u)).x));
                            _3435 = fma(_2651, _3423.z, fma(_2650, _3423.y, _3423.x * _2649)) + _3423.w;
                            _3436 = !((fma(_2651, _3404.z, fma(_2650, _3404.y, _3404.x * _2649)) + _3404.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3436)
                            {
                                float _3463 = _3331.x - _2649;
                                float _3464 = _3331.y - _2650;
                                float _3465 = _3331.z - _2651;
                                float _3466 = dot(vec3(_3463, _3464, _3465), vec3(_3463, _3464, _3465));
                                float _3469 = inversesqrt(_3466);
                                float _3470 = _3469 * _3463;
                                float _3471 = _3469 * _3464;
                                float _3472 = _3469 * _3465;
                                float _3476 = 1.0 - (_3466 / (_3332 * _3332));
                                float _4647 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                                float _3477 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
                                float _3481 = sqrt(_3466) * _3347.w;
                                float _3483 = 1.39999997615814208984375 / (_3481 + 1.39999997615814208984375);
                                float _3484 = _3483 * _3483;
                                float _3487 = ((1.0 - _3484) * dot(vec3(_3470, _3471, _3472), vec3(_884, _887, _890))) + _3484;
                                float _3490 = _3481 * _3481;
                                float _3494 = (fma(_2651, _3374.z, fma(_2650, _3374.y, _3374.x * _2649)) + _3374.w) / _3435;
                                float _3495 = (fma(_2651, _3389.z, fma(_2650, _3389.y, _3389.x * _2649)) + _3389.w) / _3435;
                                float _3499 = 1.0 - dot(vec2(_3494, _3495), vec2(_3494, _3495));
                                float _4663 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                                float _3500 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
                                float _3501 = _3500 * (((isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0))) * _3477) / ((_3490 * 0.699999988079071044921875) + 1.0));
                                float _3513 = exp2(log2(1.0 / ((_3490 * 3.5) + 5.0)) * 0.25);
                                float _3514 = 1.0 - _959;
                                float _3521 = sqrt(1.0 - ((1.0 - (_3514 * _3514)) * (1.0 - (_3513 * _3513))));
                                float _3522 = _3521 * _3521;
                                float _3523 = _3522 * _3522;
                                float _3524 = _3470 - _2943;
                                float _3525 = _3471 - _2944;
                                float _3526 = _3472 - _2945;
                                float _3530 = inversesqrt(dot(vec3(_3524, _3525, _3526), vec3(_3524, _3525, _3526)));
                                float _3534 = dot(vec3(_884, _887, _890), vec3((-0.0) - _2943, (-0.0) - _2944, (-0.0) - _2945));
                                float _4674 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0));
                                float _3537 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
                                float _3538 = dot(vec3(_884, _887, _890), vec3(_3530 * _3524, _3530 * _3525, _3530 * _3526));
                                float _4685 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                                float _3541 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
                                float _3545 = ((_3541 * _3541) * (_3523 + (-1.0))) + 1.0;
                                float _3546 = _3483 * _3522;
                                float _3547 = _3546 * _3546;
                                float _3553 = ((1.0 - _3547) * dot(vec3(_884, _887, _890), vec3(_3470, _3471, _3472))) + _3547;
                                float _4696 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                                float _3554 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
                                float _3555 = 1.0 - _3522;
                                float _3565 = (0.5 / (((_3554 * ((_3537 * _3555) + _3522)) + 9.9999999392252902907785028219223e-09) + (((_3554 * _3555) + _3522) * _3537))) * _3554;
                                float _4707 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                                float _3575 = (_3500 * _3477) * (((_3523 * 3.1415927410125732421875) * (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0)))) / ((_3545 * _3545) * ((_3490 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3501 * _3347.y;
                                frontier_phi_83_pred_1 = _3501 * _3347.x;
                                frontier_phi_83_pred_2 = _3575 * _3359.z;
                                frontier_phi_83_pred_3 = _3575 * _3359.y;
                                frontier_phi_83_pred_4 = _3575 * _3359.x;
                                frontier_phi_83_pred_5 = _3501 * _3347.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3583 = frontier_phi_83_pred;
                            _3582 = frontier_phi_83_pred_1;
                            _3581 = frontier_phi_83_pred_2;
                            _3580 = frontier_phi_83_pred_3;
                            _3579 = frontier_phi_83_pred_4;
                            _3584 = frontier_phi_83_pred_5;
                            _3289 = _3582 + _3302;
                            _3290 = _3583 + _3303;
                            _3291 = _3584 + _3304;
                            _3286 = _3579 + _3299;
                            _3287 = _3580 + _3300;
                            _3288 = _3581 + _3301;
                            if (_3306 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3299 = _3286;
                                _3300 = _3287;
                                _3301 = _3288;
                                _3302 = _3289;
                                _3303 = _3290;
                                _3304 = _3291;
                                _3305 = _3306;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3291;
                        frontier_phi_77_pred_1 = _3290;
                        frontier_phi_77_pred_2 = _3289;
                        frontier_phi_77_pred_3 = _3288;
                        frontier_phi_77_pred_4 = _3287;
                        frontier_phi_77_pred_5 = _3286;
                    }
                    _2928 = frontier_phi_77_pred;
                    _2926 = frontier_phi_77_pred_1;
                    _2924 = frontier_phi_77_pred_2;
                    _2922 = frontier_phi_77_pred_3;
                    _2920 = frontier_phi_77_pred_4;
                    _2918 = frontier_phi_77_pred_5;
                    uint _3084 = _3083 + 1u;
                    if (_3084 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3077 = _2918;
                        _3078 = _2920;
                        _3079 = _2922;
                        _3080 = _2924;
                        _3081 = _2926;
                        _3082 = _2928;
                        _3083 = _3084;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2922;
                frontier_phi_58_59_ladder_1 = _2928;
                frontier_phi_58_59_ladder_2 = _2926;
                frontier_phi_58_59_ladder_3 = _2924;
                frontier_phi_58_59_ladder_4 = _2920;
                frontier_phi_58_59_ladder_5 = _2918;
            }
            else
            {
                frontier_phi_58_59_ladder = _2800;
                frontier_phi_58_59_ladder_1 = _2806;
                frontier_phi_58_59_ladder_2 = _2804;
                frontier_phi_58_59_ladder_3 = _2802;
                frontier_phi_58_59_ladder_4 = _2798;
                frontier_phi_58_59_ladder_5 = _2796;
            }
            _2917 = frontier_phi_58_59_ladder_5;
            _2919 = frontier_phi_58_59_ladder_4;
            _2921 = frontier_phi_58_59_ladder;
            _2923 = frontier_phi_58_59_ladder_3;
            _2925 = frontier_phi_58_59_ladder_2;
            _2927 = frontier_phi_58_59_ladder_1;
        }
        float _2932 = isnan(1.0) ? _943 : (isnan(_943) ? 1.0 : min(_943, 1.0));
        _2708 = (_2932 * _2923) + _2144;
        _2710 = (_2932 * _2925) + _2146;
        _2712 = (_2932 * _2927) + _2148;
        _2714 = ((_2917 * _927) * _2932) + _2489;
        _2716 = ((_2919 * _929) * _2932) + _2491;
        _2718 = ((_2921 * _930) * _2932) + _2493;
    }
    else
    {
        _2708 = _2144;
        _2710 = _2146;
        _2712 = _2148;
        _2714 = _2489;
        _2716 = _2491;
        _2718 = _2493;
    }
    float _4723 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _4734 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _4745 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _2735 = ((isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0))) * (_2708 + ((isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))) * _943))) + ((_2714 + ((isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0))) * _1782)) * cbPerFrame._m0[3u].x);
    float _2736 = ((isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0))) * (_2710 + ((isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))) * _943))) + ((_2716 + ((isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0))) * _1782)) * cbPerFrame._m0[3u].x);
    float _2737 = ((isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0))) * (_2712 + ((isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))) * _943))) + ((_2718 + ((isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0))) * _1782)) * cbPerFrame._m0[3u].x);
    uint _2738 = _270 + 6u;
    float _2746 = _865 / cbSceneParam._m0[86u].x;
    float _2747 = _866 / cbSceneParam._m0[86u].y;
    vec4 _2761 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2746, _2747, (log2((isnan(cbSceneParam._m0[77u].w) ? _787 : (isnan(_787) ? cbSceneParam._m0[77u].w : min(_787, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2763 = _2761.x;
    float _2764 = _2761.y;
    float _2765 = _2761.z;
    float _2766 = _2761.w;
    float _2859;
    float _2861;
    float _2863;
    float _2865;
    if (_787 > cbSceneParam._m0[78u].w)
    {
        float _2821 = isnan(_787) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _787 : min(cbSceneParam._m0[80u].w, _787));
        float _2822 = _2821 / _787;
        float _2833 = _2822 * _838;
        float _2834 = _839 * _2822;
        float _2835 = (-0.0) - _2834;
        float _2837 = _2822 * _840;
        float _2839 = (cbSceneParam._m0[77u].w * _2835) / _2821;
        float _2840 = _2839 + cbSceneParam._m0[79u].w;
        float _2841 = cbSceneParam._m0[79u].w - _2834;
        float _2847 = sqrt(((_2833 * _2833) + (_2834 * _2834)) + (_2837 * _2837));
        float _2850 = (1.0 - (cbSceneParam._m0[77u].w / _2821)) * _2847;
        float _2855 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2857 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3034;
        if (abs((_2835 - _2839) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3034 = ((((_2840 > 0.0) ? exp2(_2855 * _2840) : (2.0 - exp2(_2857 * _2840))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2850;
        }
        else
        {
            float _2978 = 1.0 / cbSceneParam._m0[80u].x;
            float _2979 = isnan(_2841) ? _2840 : (isnan(_2840) ? _2841 : max(_2840, _2841));
            float _2980 = isnan(_2841) ? _2840 : (isnan(_2840) ? _2841 : min(_2840, _2841));
            float _2989 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : min(_2979, 0.0));
            float _2990 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : min(_2980, 0.0));
            _3034 = ((abs(_2847 / _2835) * cbSceneParam._m0[80u].y) * ((((_2989 - _2990) * 2.0) - ((exp2(_2855 * (isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0)))) - exp2(_2855 * (isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0))))) * _2978)) - ((exp2(_2857 * _2989) - exp2(_2857 * _2990)) * _2978))) + (_2850 * cbSceneParam._m0[80u].z);
        }
        vec4 _3036 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2746, _2747, 1.0), 0.0);
        float _3045 = exp2((_3034 * (-1.44269502162933349609375)) * (1.0 - _3036.w));
        float _3046 = log2(_3045);
        float _3062 = log2(_2766);
        _2859 = (exp2(_3062 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3046 * cbSceneParam._m0[78u].x)) * _3036.x) / cbSceneParam._m0[78u].x)) + _2763;
        _2861 = (exp2(_3062 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3046 * cbSceneParam._m0[78u].y)) * _3036.y) / cbSceneParam._m0[78u].y)) + _2764;
        _2863 = (exp2(_3062 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3046 * cbSceneParam._m0[78u].z)) * _3036.z) / cbSceneParam._m0[78u].z)) + _2765;
        _2865 = _3045 * _2766;
    }
    else
    {
        _2859 = _2763;
        _2861 = _2764;
        _2863 = _2765;
        _2865 = _2766;
    }
    bool _3072;
    vec4 _2875;
    vec4 _2897;
    float _2899;
    float _2903;
    float _2904;
    float _2905;
    float _2906;
    bool _2916;
    for (;;)
    {
        _2875 = cbMatDynParam._m0[0u];
        float _2877 = roundEven(_2875.y);
        bool _2878 = _2877 == 3.0;
        float _2879 = log2(_2865);
        float _2886 = exp2(_2879 * cbSceneParam._m0[78u].x) * _2735;
        float _2887 = exp2(_2879 * cbSceneParam._m0[78u].y) * _2736;
        float _2888 = exp2(_2879 * cbSceneParam._m0[78u].z) * _2737;
        float _2895 = _854 + (-0.5);
        _2897 = cbMtdParam._m0[1u];
        _2899 = _2897.y * _2895;
        float _2902 = (_2877 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2903 = _2902 * (_2878 ? _2886 : (_2886 + (cbSceneParam._m0[72u].w * _2859)));
        _2904 = _2902 * (_2878 ? _2887 : (_2887 + (cbSceneParam._m0[72u].w * _2861)));
        _2905 = _2902 * (_2878 ? _2888 : (_2888 + (cbSceneParam._m0[72u].w * _2863)));
        _2906 = _2895 * 0.999000012874603271484375;
        _2916 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2916)
        {
            if ((cbInstanceData._m0[_270 + 7u].x + _2906) < 0.5)
            {
                _3072 = true;
                break;
            }
        }
        uint _3013 = _903 + uint(_2875.w);
        if ((cbInstanceData._m0[_3013].w < 1.0) && ((cbInstanceData._m0[_3013].w + _2906) < 0.5))
        {
            _3072 = true;
            break;
        }
        if ((_2899 + 1.0) < _2897.x)
        {
            _3072 = true;
            break;
        }
        _3072 = false;
        break;
    }
    float _3277;
    if (_3072)
    {
        discard_state = true;
        _3277 = 0.0;
    }
    else
    {
        _3277 = cbInstanceData._m0[_2738].w;
    }
    SV_Target.x = _2903;
    SV_Target.y = _2904;
    SV_Target.z = _2905;
    SV_Target.w = _3277;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2738].w;
    discard_exit();
}


