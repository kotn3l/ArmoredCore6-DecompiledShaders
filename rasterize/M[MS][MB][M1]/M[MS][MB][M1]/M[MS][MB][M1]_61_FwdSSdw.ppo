#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1055;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _230 = uint(roundEven(NORMAL.w)) * 13u;
    uint _236 = _230 + 1u;
    uint _240 = _230 + 2u;
    float _249 = sqrt(((cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x)) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x));
    float _250 = _249 * TEXCOORD.z;
    float _251 = _249 * TEXCOORD.w;
    vec4 _271 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _277 = _271.x * cbMtdParam._m0[11u].x;
    float _278 = _271.y * cbMtdParam._m0[11u].y;
    float _279 = _271.z * cbMtdParam._m0[11u].z;
    vec4 _298 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _250) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _251) + cbTextureTilingScale._m0[5u].w));
    vec4 _336 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _338 = _336.x;
    float _350 = dot(vec4(_338, _336.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _367 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_338 - _350) * cbMtdParam._m0[24u].y) + _350) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3409 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _368 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
    float _375 = (_368 * ((_298.x * cbMtdParam._m0[12u].x) - _277)) + _277;
    float _376 = (_368 * ((_298.y * cbMtdParam._m0[12u].y) - _278)) + _278;
    float _377 = (_368 * ((_298.z * cbMtdParam._m0[12u].z) - _279)) + _279;
    vec4 _390 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _250) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _251) + cbTextureTilingScale._m0[4u].w));
    vec4 _407 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _409 = _407.x;
    float _410 = _407.y;
    float _411 = _407.z;
    float _420 = ((_390.z - _411) * _368) + _411;
    float _423 = ((((_390.x - _409) * _368) + _409) * 2.0) + (-1.0);
    float _425 = ((((_390.y - _410) * _368) + _410) * 2.0) + (-1.0);
    float _426 = dot(vec2(_423, _425), vec2(_423, _425));
    float _3420 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _431 = sqrt(1.0 - (isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0))));
    vec4 _444 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _458 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _472 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _474 = _472.x;
    float _492 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _250) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _251) + cbTextureTilingScale._m0[9u].w)).x - _474) * _368) + _474;
    float _496 = ((_458.x - _492) * cbMtdParam._m0[19u].z) + _492;
    float _501 = cbMtdParam._m0[22u].x + _444.w;
    float _504 = fma(_431, _217 * NORMAL.x, fma(_425, _224 * TANGENT.x, (_210 * _202) * _423));
    float _507 = fma(_431, _217 * NORMAL.y, fma(_425, _224 * TANGENT.y, (_210 * _203) * _423));
    float _510 = fma(_431, _217 * NORMAL.z, fma(_425, _224 * TANGENT.z, (_210 * _204) * _423));
    float _514 = inversesqrt(dot(vec3(_504, _507, _510), vec3(_504, _507, _510)));
    float _515 = _514 * _504;
    float _516 = _514 * _507;
    float _517 = _514 * _510;
    float _3431 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _518 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
    float _3442 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _3453 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _3464 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _3475 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _3486 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _523 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
    float _537 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _578 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _588 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _578);
    float _589 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _578);
    float _590 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _578);
    float _594 = inversesqrt(dot(vec3(_588, _589, _590), vec3(_588, _589, _590)));
    float _595 = _588 * _594;
    float _596 = _589 * _594;
    float _597 = _590 * _594;
    float _603 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _604 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _622 = fma(_517, cbSceneParam._m0[5u].z, fma(_516, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _515));
    float _625 = fma(_517, cbSceneParam._m0[6u].z, fma(_516, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _515));
    float _628 = fma(_517, cbSceneParam._m0[7u].z, fma(_516, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _515));
    uint _642 = (_230 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _648 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0)))) * cbInstanceData._m0[_642].x;
    float _649 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0)))) * cbInstanceData._m0[_642].y;
    float _650 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0)))) * cbInstanceData._m0[_642].z;
    float _3497 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _651 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
    float _3508 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _652 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
    float _3519 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _653 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
    float _654 = 1.0 - _523;
    float _655 = _651 * _654;
    float _656 = _652 * _654;
    float _657 = _653 * _654;
    float _662 = (_651 + (-0.039999999105930328369140625)) * _523;
    float _663 = (_652 + (-0.039999999105930328369140625)) * _523;
    float _664 = (_653 + (-0.039999999105930328369140625)) * _523;
    float _665 = _662 + 0.039999999105930328369140625;
    float _667 = _663 + 0.039999999105930328369140625;
    float _668 = _664 + 0.039999999105930328369140625;
    vec4 _677 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _603, cbSceneParam._m0[86u].y * _604));
    float _681 = ((isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0))) * TEXCOORD_5.w) * _677.x;
    float _682 = dot(vec3(_515, _516, _517), vec3(_595, _596, _597));
    float _685 = _682 * 2.0;
    float _689 = (_685 * _515) - _595;
    float _690 = (_685 * _516) - _596;
    float _691 = (_685 * _517) - _597;
    float _695 = abs(dot(vec3(_595, _596, _597), vec3(_515, _516, _517)));
    float _3530 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _697 = sqrt(_518);
    float _710 = exp2((_697 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_697 * 3.0));
    float _716 = (1.0 - _710) * ((_697 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _717 = _710 * _697;
    float _745 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _749 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _753 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1054;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _779 = fma(_753, cbModelParam._m0[26u].z, fma(_749, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _745));
        float _783 = fma(_753, cbModelParam._m0[27u].z, fma(_749, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _745));
        float _787 = fma(_753, cbModelParam._m0[28u].z, fma(_749, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _745));
        float _812 = _745 + _515;
        float _813 = _749 + _516;
        float _814 = _753 + _517;
        float _824 = fma(_814, cbModelParam._m0[26u].z, fma(_813, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _812)) - _779;
        float _825 = fma(_814, cbModelParam._m0[27u].z, fma(_813, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _812)) - _783;
        float _826 = fma(_814, cbModelParam._m0[28u].z, fma(_813, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _812)) - _787;
        float _830 = inversesqrt(dot(vec3(_824, _825, _826), vec3(_824, _825, _826)));
        float _843 = ((_830 * _824) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_779 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _844 = ((_830 * _825) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_783 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _845 = ((_830 * _826) / cbModelParam._m0[34u].z) + ((((((_787 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _848 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_843, _844, _845), 0.0);
        vec4 _855 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_843, _844, _845), 0.0);
        vec4 _862 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_843, _844, _845), 0.0);
        vec4 _869 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_843, _844, _845), 0.0);
        float _882 = exp2((_848.w + (-0.5)) * 20.0) * 2.0;
        float _883 = _882 * (_848.x + (-0.5));
        float _884 = _882 * (_848.y + (-0.5));
        float _885 = _882 * (_848.z + (-0.5));
        float _892 = exp2((_855.w + (-0.5)) * 20.0) * 2.0;
        float _893 = _892 * (_855.x + (-0.5));
        float _894 = _892 * (_855.y + (-0.5));
        float _895 = _892 * (_855.z + (-0.5));
        float _902 = exp2((_862.w + (-0.5)) * 20.0) * 2.0;
        float _903 = _902 * (_862.x + (-0.5));
        float _904 = _902 * (_862.y + (-0.5));
        float _905 = _902 * (_862.z + (-0.5));
        float _912 = exp2((_869.w + (-0.5)) * 20.0) * 2.0;
        float _913 = _912 * (_869.x + (-0.5));
        float _914 = _912 * (_869.y + (-0.5));
        float _915 = _912 * (_869.z + (-0.5));
        float _916 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _917 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _918 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _919 = _883 * 0.5;
        float _920 = _893 * 0.5;
        float _921 = _903 * 0.5;
        float _922 = dot(vec3(_919, _920, _921), vec3(_919, _920, _921));
        float _927 = (_922 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_922);
        float _936 = (dot(vec3(_515, _516, _517), vec3(_927 * _919, _927 * _920, _927 * _921)) + 1.0) * 0.5;
        float _3556 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _946 = sqrt(((_920 * _920) + (_919 * _919)) + (_921 * _921)) / (_916 + 9.9999997473787516355514526367188e-06);
        float _3567 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _947 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
        float _948 = _947 * 2.0;
        float _952 = (1.0 - _947) / (_947 + 1.0);
        float _3578 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _953 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _962 = ((((1.0 - _953) * (_948 + 2.0)) * exp2(log2(isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))) * (_948 + 1.0))) + _953) * _916;
        float _963 = _884 * 0.5;
        float _964 = _894 * 0.5;
        float _965 = _904 * 0.5;
        float _966 = dot(vec3(_963, _964, _965), vec3(_963, _964, _965));
        float _971 = (_966 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_966);
        float _979 = (dot(vec3(_515, _516, _517), vec3(_971 * _963, _971 * _964, _971 * _965)) + 1.0) * 0.5;
        float _3589 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _988 = sqrt(((_964 * _964) + (_963 * _963)) + (_965 * _965)) / (_917 + 9.9999997473787516355514526367188e-06);
        float _3600 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _990 = _989 * 2.0;
        float _994 = (1.0 - _989) / (_989 + 1.0);
        float _3611 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _995 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _1004 = ((((1.0 - _995) * (_990 + 2.0)) * exp2(log2(isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) * (_990 + 1.0))) + _995) * _917;
        float _1005 = _885 * 0.5;
        float _1006 = _895 * 0.5;
        float _1007 = _905 * 0.5;
        float _1008 = dot(vec3(_1005, _1006, _1007), vec3(_1005, _1006, _1007));
        float _1013 = (_1008 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1008);
        float _1021 = (dot(vec3(_515, _516, _517), vec3(_1013 * _1005, _1013 * _1006, _1013 * _1007)) + 1.0) * 0.5;
        float _3622 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1030 = sqrt(((_1006 * _1006) + (_1005 * _1005)) + (_1007 * _1007)) / (_918 + 9.9999997473787516355514526367188e-06);
        float _3633 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _1032 = _1031 * 2.0;
        float _1036 = (1.0 - _1031) / (_1031 + 1.0);
        float _3644 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _1046 = ((((1.0 - _1037) * (_1032 + 2.0)) * exp2(log2(isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) * (_1032 + 1.0))) + _1037) * _918;
        _1054 = _885;
        _1056 = _884;
        _1057 = _883;
        _1058 = _895;
        _1059 = _894;
        _1060 = _893;
        _1061 = _905;
        _1062 = _904;
        _1063 = _903;
        _1064 = _918;
        _1065 = _917;
        _1066 = _916;
        _1067 = cbModelParam._m0[36u].z * (isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0)));
        _1068 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0)));
        _1069 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0)));
    }
    else
    {
        _1054 = _1055;
        _1056 = _1055;
        _1057 = _1055;
        _1058 = _1055;
        _1059 = _1055;
        _1060 = _1055;
        _1061 = _1055;
        _1062 = _1055;
        _1063 = _1055;
        _1064 = _1055;
        _1065 = _1055;
        _1066 = _1055;
        _1067 = 0.0;
        _1068 = 0.0;
        _1069 = 0.0;
    }
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1094 = fma(_753, cbModelParam._m0[30u].z, fma(_749, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _745));
        float _1098 = fma(_753, cbModelParam._m0[31u].z, fma(_749, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _745));
        float _1102 = fma(_753, cbModelParam._m0[32u].z, fma(_749, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _745));
        float _1125 = _745 + _515;
        float _1126 = _749 + _516;
        float _1127 = _753 + _517;
        float _1137 = fma(_1127, cbModelParam._m0[30u].z, fma(_1126, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1125)) - _1094;
        float _1138 = fma(_1127, cbModelParam._m0[31u].z, fma(_1126, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1125)) - _1098;
        float _1139 = fma(_1127, cbModelParam._m0[32u].z, fma(_1126, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1125)) - _1102;
        float _1143 = inversesqrt(dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139)));
        float _1156 = ((_1143 * _1137) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1094 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1157 = ((_1143 * _1138) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1098 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1158 = ((_1143 * _1139) / cbModelParam._m0[35u].z) + ((((((_1102 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        float _1193 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1160.x + (-0.5));
        float _1195 = _1193 * (_1160.y + (-0.5));
        float _1196 = _1193 * (_1160.z + (-0.5));
        float _1203 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1167.x + (-0.5));
        float _1205 = _1203 * (_1167.y + (-0.5));
        float _1206 = _1203 * (_1167.z + (-0.5));
        float _1213 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1174.x + (-0.5));
        float _1215 = _1213 * (_1174.y + (-0.5));
        float _1216 = _1213 * (_1174.z + (-0.5));
        float _1223 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1181.x + (-0.5));
        float _1225 = _1223 * (_1181.y + (-0.5));
        float _1226 = _1223 * (_1181.z + (-0.5));
        float _1227 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1228 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = _1194 * 0.5;
        float _1231 = _1204 * 0.5;
        float _1232 = _1214 * 0.5;
        float _1233 = dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232));
        float _1238 = (_1233 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1233);
        float _1246 = (dot(vec3(_515, _516, _517), vec3(_1238 * _1230, _1238 * _1231, _1238 * _1232)) + 1.0) * 0.5;
        float _3685 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1255 = sqrt(((_1231 * _1231) + (_1230 * _1230)) + (_1232 * _1232)) / (_1227 + 9.9999997473787516355514526367188e-06);
        float _3696 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
        float _1257 = _1256 * 2.0;
        float _1261 = (1.0 - _1256) / (_1256 + 1.0);
        float _3707 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _1271 = ((((1.0 - _1262) * (_1257 + 2.0)) * exp2(log2(isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0))) * (_1257 + 1.0))) + _1262) * _1227;
        float _1272 = _1195 * 0.5;
        float _1273 = _1205 * 0.5;
        float _1274 = _1215 * 0.5;
        float _1275 = dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274));
        float _1280 = (_1275 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1275);
        float _1288 = (dot(vec3(_515, _516, _517), vec3(_1280 * _1272, _1280 * _1273, _1280 * _1274)) + 1.0) * 0.5;
        float _3718 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1297 = sqrt(((_1273 * _1273) + (_1272 * _1272)) + (_1274 * _1274)) / (_1228 + 9.9999997473787516355514526367188e-06);
        float _3729 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
        float _1299 = _1298 * 2.0;
        float _1303 = (1.0 - _1298) / (_1298 + 1.0);
        float _3740 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1313 = ((((1.0 - _1304) * (_1299 + 2.0)) * exp2(log2(isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) * (_1299 + 1.0))) + _1304) * _1228;
        float _1314 = _1196 * 0.5;
        float _1315 = _1206 * 0.5;
        float _1316 = _1216 * 0.5;
        float _1317 = dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316));
        float _1322 = (_1317 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1317);
        float _1330 = (dot(vec3(_515, _516, _517), vec3(_1322 * _1314, _1322 * _1315, _1322 * _1316)) + 1.0) * 0.5;
        float _3751 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1339 = sqrt(((_1315 * _1315) + (_1314 * _1314)) + (_1316 * _1316)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _3762 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1341 = _1340 * 2.0;
        float _1345 = (1.0 - _1340) / (_1340 + 1.0);
        float _3773 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1355 = ((((1.0 - _1346) * (_1341 + 2.0)) * exp2(log2(isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * (_1341 + 1.0))) + _1346) * _1229;
        _1363 = _1196;
        _1364 = _1195;
        _1365 = _1194;
        _1366 = _1206;
        _1367 = _1205;
        _1368 = _1204;
        _1369 = _1216;
        _1370 = _1215;
        _1371 = _1214;
        _1372 = _1229;
        _1373 = _1228;
        _1374 = _1227;
        _1375 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)));
        _1376 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)));
        _1377 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)));
    }
    else
    {
        _1363 = _1055;
        _1364 = _1055;
        _1365 = _1055;
        _1366 = _1055;
        _1367 = _1055;
        _1368 = _1055;
        _1369 = _1055;
        _1370 = _1055;
        _1371 = _1055;
        _1372 = _1055;
        _1373 = _1055;
        _1374 = _1055;
        _1375 = 0.0;
        _1376 = 0.0;
        _1377 = 0.0;
    }
    float _1387 = (cbModelParam._m0[1u].x * (_1375 - _1067)) + _1067;
    float _1388 = (cbModelParam._m0[1u].x * (_1376 - _1068)) + _1068;
    float _1389 = (cbModelParam._m0[1u].x * (_1377 - _1069)) + _1069;
    float _1410 = fma(_1389, cbSceneParam._m0[89u].z, fma(_1388, cbSceneParam._m0[89u].y, _1387 * cbSceneParam._m0[89u].x));
    float _1413 = fma(_1389, cbSceneParam._m0[90u].z, fma(_1388, cbSceneParam._m0[90u].y, _1387 * cbSceneParam._m0[90u].x));
    float _1416 = fma(_1389, cbSceneParam._m0[91u].z, fma(_1388, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1387));
    float _1431 = _689 * 0.5;
    float _1432 = _690 * 0.5;
    float _1433 = _691 * 0.5;
    float _1434 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1365, _1368, _1371, _1374));
    float _1437 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1364, _1367, _1370, _1373));
    float _1440 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1363, _1366, _1369, _1372));
    float _1474;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1447 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1054, _1058, _1061, _1064));
        float _1451 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1056, _1059, _1062, _1065));
        float _1455 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1057, _1060, _1063, _1066));
        float _1462 = dot(vec4(cbModelParam._m0[39u]), vec4(_1431, _1432, _1433, 1.0));
        _1474 = dot(vec3(isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)), isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)), isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1462) ? 0.0 : (isnan(0.0) ? _1462 : max(0.0, _1462))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1474 = 1.0;
    }
    float _1485;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1476 = dot(vec4(cbModelParam._m0[40u]), vec4(_1431, _1432, _1433, 1.0));
        _1485 = dot(vec3(isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)), isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)), isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1476) ? 0.0 : (isnan(0.0) ? _1476 : max(0.0, _1476))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1485 = 1.0;
    }
    float _1489 = (_1485 * cbModelParam._m0[1u].x) + (_1474 * (1.0 - cbModelParam._m0[1u].x));
    float _1499 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _518);
    float _1500 = isnan(_1499) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1499 : min(cbModelParam._m0[25u].z, _1499));
    float _1582;
    float _1584;
    float _1586;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1549 = fma(_753, cbModelParam._m0[13u].z, fma(_749, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _745)) + cbModelParam._m0[13u].w;
        float _1553 = fma(_753, cbModelParam._m0[14u].z, fma(_749, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _745)) + cbModelParam._m0[14u].w;
        float _1557 = fma(_753, cbModelParam._m0[15u].z, fma(_749, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _745)) + cbModelParam._m0[15u].w;
        float _1560 = fma(_691, cbModelParam._m0[13u].z, fma(_690, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _689));
        float _1563 = fma(_691, cbModelParam._m0[14u].z, fma(_690, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _689));
        float _1566 = fma(_691, cbModelParam._m0[15u].z, fma(_690, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _689));
        float _1594;
        if (_1560 > 0.0)
        {
            _1594 = abs((1.0 - _1549) / _1560);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1560 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1549 + 1.0) / _1560);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1594 = frontier_phi_14_12_ladder;
        }
        float _1819;
        if (_1563 > 0.0)
        {
            _1819 = abs((1.0 - _1553) / _1563);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1563 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1553 + 1.0) / _1563);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1819 = frontier_phi_23_19_ladder;
        }
        float _2076;
        if (_1566 > 0.0)
        {
            _2076 = abs((1.0 - _1557) / _1566);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1566 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1557 + 1.0) / _1566);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2076 = frontier_phi_35_30_ladder;
        }
        float _2078 = isnan(_1819) ? _1594 : (isnan(_1594) ? _1819 : min(_1594, _1819));
        float _2079 = isnan(_2076) ? _2078 : (isnan(_2078) ? _2076 : min(_2078, _2076));
        float _2083 = (_2079 * _1560) + _1549;
        float _2084 = (_2079 * _1563) + _1553;
        float _2085 = (_2079 * _1566) + _1557;
        float _2086 = _2079 * 9.9999997473787516355514526367188e-05;
        float _2088 = (-1.0) - _2086;
        float _2090 = _2086 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2085 > _2090) || ((_2085 < _2088) || ((_2084 > _2090) || ((_2084 < _2088) || ((_2083 < _2088) || (_2083 > _2090))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2213 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2085, cbModelParam._m0[9u].z, fma(_2084, cbModelParam._m0[9u].y, _2083 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2085, cbModelParam._m0[10u].z, fma(_2084, cbModelParam._m0[10u].y, _2083 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2085, cbModelParam._m0[11u].z, fma(_2084, cbModelParam._m0[11u].y, _2083 * cbModelParam._m0[11u].x))), _1500);
            frontier_phi_13_35_ladder = _2213.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2213.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2213.x * cbModelParam._m0[1u].y;
        }
        _1582 = frontier_phi_13_35_ladder_2;
        _1584 = frontier_phi_13_35_ladder_1;
        _1586 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1570 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_689, _690, _691), _1500);
        _1582 = _1570.x * cbModelParam._m0[1u].y;
        _1584 = _1570.y * cbModelParam._m0[1u].y;
        _1586 = _1570.z * cbModelParam._m0[1u].y;
    }
    float _1590 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _518);
    float _1591 = isnan(_1590) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1590 : min(cbModelParam._m0[25u].w, _1590));
    float _1682;
    float _1684;
    float _1686;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1646 = fma(_753, cbModelParam._m0[21u].z, fma(_749, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _745)) + cbModelParam._m0[21u].w;
        float _1650 = fma(_753, cbModelParam._m0[22u].z, fma(_749, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _745)) + cbModelParam._m0[22u].w;
        float _1654 = fma(_753, cbModelParam._m0[23u].z, fma(_749, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _745)) + cbModelParam._m0[23u].w;
        float _1657 = fma(_691, cbModelParam._m0[21u].z, fma(_690, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _689));
        float _1660 = fma(_691, cbModelParam._m0[22u].z, fma(_690, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _689));
        float _1663 = fma(_691, cbModelParam._m0[23u].z, fma(_690, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _689));
        float _1824;
        if (_1657 > 0.0)
        {
            _1824 = abs((1.0 - _1646) / _1657);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1657 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1646 + 1.0) / _1657);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1824 = frontier_phi_25_21_ladder;
        }
        float _2103;
        if (_1660 > 0.0)
        {
            _2103 = abs((1.0 - _1650) / _1660);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1660 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1650 + 1.0) / _1660);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2103 = frontier_phi_37_32_ladder;
        }
        float _2316;
        if (_1663 > 0.0)
        {
            _2316 = abs((1.0 - _1654) / _1663);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1663 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1654 + 1.0) / _1663);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2316 = frontier_phi_46_43_ladder;
        }
        float _2318 = isnan(_2103) ? _1824 : (isnan(_1824) ? _2103 : min(_1824, _2103));
        float _2319 = isnan(_2316) ? _2318 : (isnan(_2318) ? _2316 : min(_2318, _2316));
        float _2323 = (_2319 * _1657) + _1646;
        float _2324 = (_2319 * _1660) + _1650;
        float _2325 = (_2319 * _1663) + _1654;
        float _2326 = _2319 * 9.9999997473787516355514526367188e-05;
        float _2327 = (-1.0) - _2326;
        float _2329 = _2326 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2325 > _2329) || ((_2325 < _2327) || ((_2324 > _2329) || ((_2324 < _2327) || ((_2323 < _2327) || (_2323 > _2329))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2524 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2325, cbModelParam._m0[17u].z, fma(_2324, cbModelParam._m0[17u].y, _2323 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2325, cbModelParam._m0[18u].z, fma(_2324, cbModelParam._m0[18u].y, _2323 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2325, cbModelParam._m0[19u].z, fma(_2324, cbModelParam._m0[19u].y, _2323 * cbModelParam._m0[19u].x))), _1591);
            frontier_phi_22_46_ladder = _2524.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2524.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2524.x * cbModelParam._m0[1u].z;
        }
        _1682 = frontier_phi_22_46_ladder_2;
        _1684 = frontier_phi_22_46_ladder_1;
        _1686 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1666 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_689, _690, _691), _1591);
        _1682 = _1666.x * cbModelParam._m0[1u].z;
        _1684 = _1666.y * cbModelParam._m0[1u].z;
        _1686 = _1666.z * cbModelParam._m0[1u].z;
    }
    float _1699 = (((_716 * _665) + _717) * _681) * ((cbModelParam._m0[1u].w * (_1682 - _1582)) + _1582);
    float _1701 = (((_716 * _667) + _717) * _681) * ((cbModelParam._m0[1u].w * (_1684 - _1584)) + _1584);
    float _1703 = (((_716 * _668) + _717) * _681) * ((cbModelParam._m0[1u].w * (_1686 - _1586)) + _1586);
    float _1706 = fma(_1703, cbSceneParam._m0[89u].z, fma(_1701, cbSceneParam._m0[89u].y, _1699 * cbSceneParam._m0[89u].x));
    float _1709 = fma(_1703, cbSceneParam._m0[90u].z, fma(_1701, cbSceneParam._m0[90u].y, _1699 * cbSceneParam._m0[90u].x));
    float _1712 = fma(_1703, cbSceneParam._m0[91u].z, fma(_1701, cbSceneParam._m0[91u].y, _1699 * cbSceneParam._m0[91u].x));
    vec4 _1720 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_603, _604));
    float _1722 = _1720.w;
    float _1734 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1722);
    float _1735 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1722);
    float _1736 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1722);
    uvec4 _1740 = floatBitsToUint(cbInstanceData._m0[_230 + 5u]);
    uint _1742 = _1740.x * 14u;
    uint _1743 = _1742 + 13u;
    float _1750 = _681 + (-1.0);
    float _1755 = (cbLight._m0[_1743].x * _1750) + 1.0;
    float _1756 = (cbLight._m0[_1743].y * _1750) + 1.0;
    float _1757 = (cbLight._m0[_1743].z * _1750) + 1.0;
    float _1758 = (cbLight._m0[_1743].w * _1750) + 1.0;
    uint _1759 = _1742 + 5u;
    float _1765 = isnan(1.0) ? _1756 : (isnan(_1756) ? 1.0 : min(_1756, 1.0));
    uint _1769 = _1742 + 4u;
    float _1778 = isnan(1.0) ? _1755 : (isnan(_1755) ? 1.0 : min(_1755, 1.0));
    uint _1782 = _1742 | 1u;
    float _1793 = dot(vec3(cbLight._m0[_1742].xyz), vec3(_515, _516, _517));
    float _1796 = dot(vec3(cbLight._m0[_1782].xyz), vec3(_515, _516, _517));
    float _3909 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
    float _3920 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _1801 = (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * 0.3183098733425140380859375;
    float _1803 = (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * 0.3183098733425140380859375;
    float _1810 = ((cbLight._m0[_1759].x * _1765) * _1803) + (((cbLight._m0[_1769].x * _1734) * _1778) * _1801);
    float _1811 = ((_1765 * cbLight._m0[_1759].y) * _1803) + (((cbLight._m0[_1769].y * _1735) * _1778) * _1801);
    float _1812 = ((_1765 * cbLight._m0[_1759].z) * _1803) + (((cbLight._m0[_1769].z * _1736) * _1778) * _1801);
    uvec4 _1816 = floatBitsToUint(cbLight._m0[_1742 + 12u]);
    bool _1818 = _1816.x == 0u;
    float _1829;
    float _1831;
    float _1833;
    if (_1818)
    {
        _1829 = _1810;
        _1831 = _1811;
        _1833 = _1812;
    }
    else
    {
        uint _1837 = _1742 + 6u;
        float _1853 = (dot(vec3(cbLight._m0[_1742 + 2u].xyz), vec3(_515, _516, _517)) * 0.5) + 0.5;
        float _1854 = _1853 * _1853;
        float _3931 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
        float _1855 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1856 = isnan(1.0) ? _1757 : (isnan(_1757) ? 1.0 : min(_1757, 1.0));
        _1829 = (((cbLight._m0[_1837].x * 0.3183098733425140380859375) * _1855) * _1856) + _1810;
        _1831 = (((cbLight._m0[_1837].y * 0.3183098733425140380859375) * _1855) * _1856) + _1811;
        _1833 = (((cbLight._m0[_1837].z * 0.3183098733425140380859375) * _1855) * _1856) + _1812;
    }
    bool _1836 = _1816.y == 0u;
    float _1874;
    float _1876;
    float _1878;
    if (_1836)
    {
        _1874 = _1829;
        _1876 = _1831;
        _1878 = _1833;
    }
    else
    {
        uint _2047 = _1742 + 7u;
        float _2063 = (dot(vec3(cbLight._m0[_1742 + 3u].xyz), vec3(_515, _516, _517)) * 0.5) + 0.5;
        float _2064 = _2063 * _2063;
        float _3947 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
        float _2065 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _2066 = isnan(1.0) ? _1758 : (isnan(_1758) ? 1.0 : min(_1758, 1.0));
        _1874 = (((cbLight._m0[_2047].x * 0.3183098733425140380859375) * _2065) * _2066) + _1829;
        _1876 = (((cbLight._m0[_2047].y * 0.3183098733425140380859375) * _2065) * _2066) + _1831;
        _1878 = (((cbLight._m0[_2047].z * 0.3183098733425140380859375) * _2065) * _2066) + _1833;
    }
    uint _1881 = _1742 + 8u;
    float _1894 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1742].w)) * _518) * 0.949999988079071044921875);
    float _1895 = _1894 * _1894;
    float _1896 = cbLight._m0[_1742].x + _595;
    float _1897 = cbLight._m0[_1742].y + _596;
    float _1898 = cbLight._m0[_1742].z + _597;
    float _1902 = inversesqrt(dot(vec3(_1896, _1897, _1898), vec3(_1896, _1897, _1898)));
    float _1903 = _1902 * _1896;
    float _1904 = _1902 * _1897;
    float _1905 = _1902 * _1898;
    float _1906 = dot(vec3(_515, _516, _517), vec3(cbLight._m0[_1742].xyz));
    float _3963 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
    float _1909 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _3974 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _1910 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _1911 = dot(vec3(_515, _516, _517), vec3(_1903, _1904, _1905));
    float _3985 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _1914 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _1915 = dot(vec3(cbLight._m0[_1742].xyz), vec3(_1903, _1904, _1905));
    float _3996 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _1919 = _1895 * _1895;
    float _1923 = ((_1914 * _1914) * (_1919 + (-1.0))) + 1.0;
    float _1931 = exp2(log2(1.0 - (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0)))) * 5.0);
    float _1932 = 0.959999978542327880859375 - _662;
    float _1934 = 0.959999978542327880859375 - _663;
    float _1935 = 0.959999978542327880859375 - _664;
    float _1942 = 1.0 - _1895;
    float _1953 = (0.5 / (((_1910 * ((_1909 * _1942) + _1895)) + 9.9999999392252902907785028219223e-09) + (((_1910 * _1942) + _1895) * _1909))) * _1909;
    float _4007 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _1955 = (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_1919 / ((_1923 * _1923) * 3.141590118408203125));
    uint _1969 = _1742 + 9u;
    float _1980 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1782].w)) * _518) * 0.949999988079071044921875);
    float _1981 = _1980 * _1980;
    float _1982 = cbLight._m0[_1782].x + _595;
    float _1983 = cbLight._m0[_1782].y + _596;
    float _1984 = cbLight._m0[_1782].z + _597;
    float _1988 = inversesqrt(dot(vec3(_1982, _1983, _1984), vec3(_1982, _1983, _1984)));
    float _1989 = _1988 * _1982;
    float _1990 = _1988 * _1983;
    float _1991 = _1988 * _1984;
    float _1992 = dot(vec3(_515, _516, _517), vec3(cbLight._m0[_1782].xyz));
    float _4018 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
    float _1995 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _1996 = dot(vec3(_515, _516, _517), vec3(_1989, _1990, _1991));
    float _4029 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _1999 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _2000 = dot(vec3(cbLight._m0[_1782].xyz), vec3(_1989, _1990, _1991));
    float _4040 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2004 = _1981 * _1981;
    float _2008 = ((_1999 * _1999) * (_2004 + (-1.0))) + 1.0;
    float _2015 = exp2(log2(1.0 - (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) * 5.0);
    float _2022 = 1.0 - _1981;
    float _2032 = (0.5 / (((_1910 * ((_1995 * _2022) + _1981)) + 9.9999999392252902907785028219223e-09) + (((_1910 * _2022) + _1981) * _1995))) * _1995;
    float _4051 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
    float _2034 = (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_2004 / ((_2008 * _2008) * 3.141590118408203125));
    float _2044 = (((((_2015 * _1932) + _665) * cbLight._m0[_1969].x) * _2034) * _1765) + ((((cbLight._m0[_1881].x * _1734) * ((_1931 * _1932) + _665)) * _1955) * _1778);
    float _2045 = (((((_2015 * _1934) + _667) * cbLight._m0[_1969].y) * _2034) * _1765) + ((((cbLight._m0[_1881].y * _1735) * ((_1931 * _1934) + _667)) * _1955) * _1778);
    float _2046 = (((((_2015 * _1935) + _668) * cbLight._m0[_1969].z) * _2034) * _1765) + ((((cbLight._m0[_1881].z * _1736) * ((_1931 * _1935) + _668)) * _1955) * _1778);
    float _2108;
    float _2110;
    float _2112;
    if (_1818)
    {
        _2108 = _2044;
        _2110 = _2045;
        _2112 = _2046;
    }
    else
    {
        uint _2114 = _1742 + 2u;
        uint _2118 = _1742 + 10u;
        float _2132 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2114].w)) * _518) * 0.949999988079071044921875);
        float _2133 = _2132 * _2132;
        float _2134 = cbLight._m0[_2114].x + _595;
        float _2135 = cbLight._m0[_2114].y + _596;
        float _2136 = cbLight._m0[_2114].z + _597;
        float _2140 = inversesqrt(dot(vec3(_2134, _2135, _2136), vec3(_2134, _2135, _2136)));
        float _2141 = _2140 * _2134;
        float _2142 = _2140 * _2135;
        float _2143 = _2140 * _2136;
        float _2144 = dot(vec3(_515, _516, _517), vec3(cbLight._m0[_2114].xyz));
        float _4062 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2147 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _2148 = dot(vec3(_515, _516, _517), vec3(_2141, _2142, _2143));
        float _4073 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
        float _2151 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _2152 = dot(vec3(cbLight._m0[_2114].xyz), vec3(_2141, _2142, _2143));
        float _4084 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
        float _2156 = _2133 * _2133;
        float _2160 = ((_2151 * _2151) * (_2156 + (-1.0))) + 1.0;
        float _2167 = exp2(log2(1.0 - (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) * 5.0);
        float _2174 = 1.0 - _2133;
        float _2184 = (0.5 / (((_1910 * ((_2147 * _2174) + _2133)) + 9.9999999392252902907785028219223e-09) + (((_1910 * _2174) + _2133) * _2147))) * _2147;
        float _4095 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
        float _2186 = (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_2156 / ((_2160 * _2160) * 3.141590118408203125));
        float _2187 = isnan(1.0) ? _1757 : (isnan(_1757) ? 1.0 : min(_1757, 1.0));
        _2108 = (((((_2167 * _1932) + _665) * cbLight._m0[_2118].x) * _2186) * _2187) + _2044;
        _2110 = (((((_2167 * _1934) + _667) * cbLight._m0[_2118].y) * _2186) * _2187) + _2045;
        _2112 = (((((_2167 * _1935) + _668) * cbLight._m0[_2118].z) * _2186) * _2187) + _2046;
    }
    float _2222;
    float _2224;
    float _2226;
    if (_1836)
    {
        _2222 = _2108;
        _2224 = _2110;
        _2226 = _2112;
    }
    else
    {
        uint _2233 = _1742 + 3u;
        uint _2237 = _1742 + 11u;
        float _2251 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2233].w)) * _518) * 0.949999988079071044921875);
        float _2252 = _2251 * _2251;
        float _2253 = cbLight._m0[_2233].x + _595;
        float _2254 = cbLight._m0[_2233].y + _596;
        float _2255 = cbLight._m0[_2233].z + _597;
        float _2259 = inversesqrt(dot(vec3(_2253, _2254, _2255), vec3(_2253, _2254, _2255)));
        float _2260 = _2259 * _2253;
        float _2261 = _2259 * _2254;
        float _2262 = _2259 * _2255;
        float _2263 = dot(vec3(_515, _516, _517), vec3(cbLight._m0[_2233].xyz));
        float _4111 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
        float _2266 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _2267 = dot(vec3(_515, _516, _517), vec3(_2260, _2261, _2262));
        float _4122 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
        float _2270 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _2271 = dot(vec3(cbLight._m0[_2233].xyz), vec3(_2260, _2261, _2262));
        float _4133 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        float _2275 = _2252 * _2252;
        float _2279 = ((_2270 * _2270) * (_2275 + (-1.0))) + 1.0;
        float _2286 = exp2(log2(1.0 - (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0)))) * 5.0);
        float _2293 = 1.0 - _2252;
        float _2303 = (0.5 / (((_1910 * ((_2266 * _2293) + _2252)) + 9.9999999392252902907785028219223e-09) + (((_1910 * _2293) + _2252) * _2266))) * _2266;
        float _4144 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2305 = (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_2275 / ((_2279 * _2279) * 3.141590118408203125));
        float _2306 = isnan(1.0) ? _1758 : (isnan(_1758) ? 1.0 : min(_1758, 1.0));
        _2222 = (((((_2286 * _1932) + _665) * cbLight._m0[_2237].x) * _2305) * _2306) + _2108;
        _2224 = (((((_2286 * _1934) + _667) * cbLight._m0[_2237].y) * _2305) * _2306) + _2110;
        _2226 = (((((_2286 * _1935) + _668) * cbLight._m0[_2237].z) * _2305) * _2306) + _2112;
    }
    float _2441;
    float _2443;
    float _2445;
    float _2447;
    float _2449;
    float _2451;
    if (_1740.y == 0u)
    {
        float _2381 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2382 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2381;
        float _2383 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2381;
        float _2384 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2381;
        uvec4 _2396 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2397 = _2396.x;
        uint _2408 = uint((float(_2396.y) * floor(float(uint(cbSceneParam._m0[85u].y * _604) / _2397))) + floor(float(uint(cbSceneParam._m0[85u].x * _603) / _2397)));
        float _2418 = (log2(_2384 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2419 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        uint _2422 = uint(isnan(14.0) ? _2419 : (isnan(_2419) ? 14.0 : min(_2419, 14.0)));
        uvec4 _2427 = texelFetch(g_lightClusterGridBuffer, int(((_2422 << 2u) + (_2408 << 6u)) >> 2u));
        uint _2428 = _2427.x;
        uint _2429 = _2396.z;
        float _2529;
        float _2531;
        float _2533;
        float _2535;
        float _2537;
        float _2539;
        if (((((1u << ((_2429 >> 4u) & 15u)) + 4294967295u) & _2428) == 0u) || ((_2429 & 240u) == 0u))
        {
            _2529 = 0.0;
            _2531 = 0.0;
            _2533 = 0.0;
            _2535 = 0.0;
            _2537 = 0.0;
            _2539 = 0.0;
        }
        else
        {
            float _2530;
            float _2532;
            float _2534;
            float _2536;
            float _2538;
            float _2540;
            float _2674 = 0.0;
            float _2675 = 0.0;
            float _2676 = 0.0;
            float _2677 = 0.0;
            float _2678 = 0.0;
            float _2679 = 0.0;
            uint _2680 = 0u;
            uint _2689;
            bool _2690;
            for (;;)
            {
                _2689 = texelFetch(g_lightClassification, int((((_2422 << 5u) + (_2408 << 9u)) + (_2680 << 2u)) >> 2u)).x;
                _2690 = _2689 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2690)
                {
                    frontier_phi_61_pred = _2674;
                    frontier_phi_61_pred_1 = _2679;
                    frontier_phi_61_pred_2 = _2678;
                    frontier_phi_61_pred_3 = _2677;
                    frontier_phi_61_pred_4 = _2676;
                    frontier_phi_61_pred_5 = _2675;
                }
                else
                {
                    float _2798;
                    float _2799;
                    float _2800;
                    float _2801;
                    float _2802;
                    float _2803;
                    uint _2804;
                    _2798 = _2674;
                    _2799 = _2675;
                    _2800 = _2676;
                    _2801 = _2677;
                    _2802 = _2678;
                    _2803 = _2679;
                    _2804 = _2689;
                    float _2730;
                    float _2731;
                    float _2732;
                    float _2733;
                    float _2734;
                    float _2735;
                    for (;;)
                    {
                        uint _2808 = uint(findLSB(_2804)) + (_2680 << 5u);
                        uint _2805 = (_2804 + 4294967295u) & _2804;
                        uint _2810 = _2808 * 48u;
                        vec4 _2824 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2810)).x, texelFetch(g_PointLightRenderingBuffer, int(_2810 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2810 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2810 + 3u)).x));
                        uint _2830 = (_2808 * 48u) + 4u;
                        vec4 _2843 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2830)).x, texelFetch(g_PointLightRenderingBuffer, int(_2830 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2830 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2830 + 3u)).x));
                        uint _2849 = (_2808 * 48u) + 8u;
                        vec3 _2860 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2849)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 2u)).x));
                        float _2864 = _2824.x - _2382;
                        float _2865 = _2824.y - _2383;
                        float _2866 = _2824.z - _2384;
                        float _2867 = dot(vec3(_2864, _2865, _2866), vec3(_2864, _2865, _2866));
                        float _2870 = inversesqrt(_2867);
                        float _2871 = _2870 * _2864;
                        float _2872 = _2870 * _2865;
                        float _2873 = _2870 * _2866;
                        float _2874 = dot(vec3(_622, _625, _628), vec3(_2871, _2872, _2873));
                        float _2879 = 1.0 - (_2867 * _2824.w);
                        float _4170 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
                        float _2880 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
                        float _2881 = sqrt(_2867) * _2843.w;
                        float _2884 = 1.39999997615814208984375 / (_2881 + 1.39999997615814208984375);
                        float _2885 = _2884 * _2884;
                        float _2888 = ((1.0 - _2885) * _2874) + _2885;
                        float _2891 = _2881 * _2881;
                        float _2895 = ((isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0))) * _2880) / ((_2891 * 0.699999988079071044921875) + 1.0);
                        float _2899 = (-0.0) - _2382;
                        float _2900 = (-0.0) - _2383;
                        float _2901 = (-0.0) - _2384;
                        float _2905 = inversesqrt(dot(vec3(_2899, _2900, _2901), vec3(_2899, _2900, _2901)));
                        float _2906 = _2905 * _2899;
                        float _2907 = _2905 * _2900;
                        float _2908 = _2905 * _2901;
                        float _2916 = exp2(log2(1.0 / ((_2891 * 3.5) + 5.0)) * 0.25);
                        float _2917 = 1.0 - _697;
                        float _2924 = sqrt(1.0 - ((1.0 - (_2917 * _2917)) * (1.0 - (_2916 * _2916))));
                        float _2925 = _2924 * _2924;
                        float _2926 = _2925 * _2925;
                        float _2927 = _2906 + _2871;
                        float _2928 = _2907 + _2872;
                        float _2929 = _2908 + _2873;
                        float _2933 = inversesqrt(dot(vec3(_2927, _2928, _2929), vec3(_2927, _2928, _2929)));
                        float _2937 = dot(vec3(_622, _625, _628), vec3(_2906, _2907, _2908));
                        float _4186 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
                        float _2940 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
                        float _2941 = dot(vec3(_622, _625, _628), vec3(_2933 * _2927, _2933 * _2928, _2933 * _2929));
                        float _4197 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
                        float _2944 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
                        float _2948 = ((_2944 * _2944) * (_2926 + (-1.0))) + 1.0;
                        float _2949 = _2884 * _2925;
                        float _2950 = _2949 * _2949;
                        float _2953 = ((1.0 - _2950) * _2874) + _2950;
                        float _4208 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
                        float _2954 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
                        float _2955 = 1.0 - _2925;
                        float _2965 = (0.5 / (((_2954 * ((_2940 * _2955) + _2925)) + 9.9999999392252902907785028219223e-09) + (((_2954 * _2955) + _2925) * _2940))) * _2954;
                        float _4219 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
                        float _2976 = (((_2926 * 3.1415927410125732421875) * (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0)))) / ((_2948 * _2948) * ((_2891 * 2.1991131305694580078125) + 3.141590118408203125))) * _2880;
                        _2733 = (_2895 * _2843.x) + _2801;
                        _2734 = (_2895 * _2843.y) + _2802;
                        _2735 = (_2895 * _2843.z) + _2803;
                        _2730 = (_2976 * _2860.x) + _2798;
                        _2731 = (_2976 * _2860.y) + _2799;
                        _2732 = (_2976 * _2860.z) + _2800;
                        if (_2805 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2798 = _2730;
                            _2799 = _2731;
                            _2800 = _2732;
                            _2801 = _2733;
                            _2802 = _2734;
                            _2803 = _2735;
                            _2804 = _2805;
                        }
                    }
                    frontier_phi_61_pred = _2730;
                    frontier_phi_61_pred_1 = _2735;
                    frontier_phi_61_pred_2 = _2734;
                    frontier_phi_61_pred_3 = _2733;
                    frontier_phi_61_pred_4 = _2732;
                    frontier_phi_61_pred_5 = _2731;
                }
                _2530 = frontier_phi_61_pred;
                _2540 = frontier_phi_61_pred_1;
                _2538 = frontier_phi_61_pred_2;
                _2536 = frontier_phi_61_pred_3;
                _2534 = frontier_phi_61_pred_4;
                _2532 = frontier_phi_61_pred_5;
                uint _2681 = _2680 + 1u;
                if (_2681 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2674 = _2530;
                    _2675 = _2532;
                    _2676 = _2534;
                    _2677 = _2536;
                    _2678 = _2538;
                    _2679 = _2540;
                    _2680 = _2681;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2529 = _2530;
            _2531 = _2532;
            _2533 = _2534;
            _2535 = _2536;
            _2537 = _2538;
            _2539 = _2540;
        }
        uvec4 _2543 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2544 = _2543.z;
        uint _2546 = (_2544 >> 8u) & 15u;
        float _2642;
        float _2644;
        float _2646;
        float _2648;
        float _2650;
        float _2652;
        if (((4294967295u << _2546) & _2428) == 0u)
        {
            _2642 = _2529;
            _2644 = _2531;
            _2646 = _2533;
            _2648 = _2535;
            _2650 = _2537;
            _2652 = _2539;
        }
        else
        {
            float _2667 = inversesqrt(dot(vec3(_2382, _2383, _2384), vec3(_2382, _2383, _2384)));
            float _2668 = _2667 * _2382;
            float _2669 = _2667 * _2383;
            float _2670 = _2667 * _2384;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2546 < ((_2544 >> 12u) & 15u))
            {
                float _2643;
                float _2645;
                float _2647;
                float _2649;
                float _2651;
                float _2653;
                float _2781 = _2529;
                float _2782 = _2531;
                float _2783 = _2533;
                float _2784 = _2535;
                float _2785 = _2537;
                float _2786 = _2539;
                uint _2787 = _2546;
                uint _2796;
                bool _2797;
                for (;;)
                {
                    _2796 = texelFetch(g_lightClassification, int((((_2422 << 5u) + (_2408 << 9u)) + (_2787 << 2u)) >> 2u)).x;
                    _2797 = _2796 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2797)
                    {
                        frontier_phi_67_pred = _2784;
                        frontier_phi_67_pred_1 = _2785;
                        frontier_phi_67_pred_2 = _2786;
                        frontier_phi_67_pred_3 = _2783;
                        frontier_phi_67_pred_4 = _2782;
                        frontier_phi_67_pred_5 = _2781;
                    }
                    else
                    {
                        float _2981;
                        float _2982;
                        float _2983;
                        float _2984;
                        float _2985;
                        float _2986;
                        float _3275;
                        float _3276;
                        float _3277;
                        float _3278;
                        float _3279;
                        float _3280;
                        float _2994 = _2781;
                        float _2995 = _2782;
                        float _2996 = _2783;
                        float _2997 = _2784;
                        float _2998 = _2785;
                        float _2999 = _2786;
                        uint _3000 = _2796;
                        uint _3001;
                        vec4 _3026;
                        float _3027;
                        vec4 _3042;
                        vec3 _3054;
                        vec4 _3069;
                        vec4 _3085;
                        float _3131;
                        bool _3132;
                        for (;;)
                        {
                            uint _3011 = ((_2787 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3000));
                            _3001 = (_3000 + 4294967295u) & _3000;
                            uint _3013 = _3011 * 40u;
                            _3026 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3013)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 3u)).x));
                            _3027 = _3026.w;
                            uint _3029 = (_3011 * 40u) + 4u;
                            _3042 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3029)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 3u)).x));
                            uint _3044 = (_3011 * 40u) + 8u;
                            _3054 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3044)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 2u)).x));
                            uint _3056 = (_3011 * 40u) + 16u;
                            _3069 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3056)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 3u)).x));
                            uint _3072 = (_3011 * 40u) + 20u;
                            _3085 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3072)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 3u)).x));
                            uint _3087 = (_3011 * 40u) + 24u;
                            vec4 _3100 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3087)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 3u)).x));
                            uint _3106 = (_3011 * 40u) + 28u;
                            vec4 _3119 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3106)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 3u)).x));
                            _3131 = fma(_2384, _3119.z, fma(_2383, _3119.y, _3119.x * _2382)) + _3119.w;
                            _3132 = !((fma(_2384, _3100.z, fma(_2383, _3100.y, _3100.x * _2382)) + _3100.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3132)
                            {
                                float _3159 = _3026.x - _2382;
                                float _3160 = _3026.y - _2383;
                                float _3161 = _3026.z - _2384;
                                float _3162 = dot(vec3(_3159, _3160, _3161), vec3(_3159, _3160, _3161));
                                float _3165 = inversesqrt(_3162);
                                float _3166 = _3165 * _3159;
                                float _3167 = _3165 * _3160;
                                float _3168 = _3165 * _3161;
                                float _3172 = 1.0 - (_3162 / (_3027 * _3027));
                                float _4230 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                                float _3173 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
                                float _3177 = sqrt(_3162) * _3042.w;
                                float _3179 = 1.39999997615814208984375 / (_3177 + 1.39999997615814208984375);
                                float _3180 = _3179 * _3179;
                                float _3183 = ((1.0 - _3180) * dot(vec3(_3166, _3167, _3168), vec3(_622, _625, _628))) + _3180;
                                float _3186 = _3177 * _3177;
                                float _3190 = (fma(_2384, _3069.z, fma(_2383, _3069.y, _3069.x * _2382)) + _3069.w) / _3131;
                                float _3191 = (fma(_2384, _3085.z, fma(_2383, _3085.y, _3085.x * _2382)) + _3085.w) / _3131;
                                float _3195 = 1.0 - dot(vec2(_3190, _3191), vec2(_3190, _3191));
                                float _4246 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                                float _3196 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
                                float _3197 = _3196 * (((isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0))) * _3173) / ((_3186 * 0.699999988079071044921875) + 1.0));
                                float _3209 = exp2(log2(1.0 / ((_3186 * 3.5) + 5.0)) * 0.25);
                                float _3210 = 1.0 - _697;
                                float _3217 = sqrt(1.0 - ((1.0 - (_3210 * _3210)) * (1.0 - (_3209 * _3209))));
                                float _3218 = _3217 * _3217;
                                float _3219 = _3218 * _3218;
                                float _3220 = _3166 - _2668;
                                float _3221 = _3167 - _2669;
                                float _3222 = _3168 - _2670;
                                float _3226 = inversesqrt(dot(vec3(_3220, _3221, _3222), vec3(_3220, _3221, _3222)));
                                float _3230 = dot(vec3(_622, _625, _628), vec3((-0.0) - _2668, (-0.0) - _2669, (-0.0) - _2670));
                                float _4257 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                                float _3233 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
                                float _3234 = dot(vec3(_622, _625, _628), vec3(_3226 * _3220, _3226 * _3221, _3226 * _3222));
                                float _4268 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                                float _3237 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
                                float _3241 = ((_3237 * _3237) * (_3219 + (-1.0))) + 1.0;
                                float _3242 = _3179 * _3218;
                                float _3243 = _3242 * _3242;
                                float _3249 = ((1.0 - _3243) * dot(vec3(_622, _625, _628), vec3(_3166, _3167, _3168))) + _3243;
                                float _4279 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                                float _3250 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
                                float _3251 = 1.0 - _3218;
                                float _3261 = (0.5 / (((_3250 * ((_3233 * _3251) + _3218)) + 9.9999999392252902907785028219223e-09) + (((_3250 * _3251) + _3218) * _3233))) * _3250;
                                float _4290 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                                float _3271 = (_3196 * _3173) * (((_3219 * 3.1415927410125732421875) * (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0)))) / ((_3241 * _3241) * ((_3186 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3271 * _3054.x;
                                frontier_phi_73_pred_1 = _3271 * _3054.y;
                                frontier_phi_73_pred_2 = _3197 * _3042.z;
                                frontier_phi_73_pred_3 = _3197 * _3042.y;
                                frontier_phi_73_pred_4 = _3197 * _3042.x;
                                frontier_phi_73_pred_5 = _3271 * _3054.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3275 = frontier_phi_73_pred;
                            _3276 = frontier_phi_73_pred_1;
                            _3280 = frontier_phi_73_pred_2;
                            _3279 = frontier_phi_73_pred_3;
                            _3278 = frontier_phi_73_pred_4;
                            _3277 = frontier_phi_73_pred_5;
                            _2984 = _3278 + _2997;
                            _2985 = _3279 + _2998;
                            _2986 = _3280 + _2999;
                            _2981 = _3275 + _2994;
                            _2982 = _3276 + _2995;
                            _2983 = _3277 + _2996;
                            if (_3001 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2994 = _2981;
                                _2995 = _2982;
                                _2996 = _2983;
                                _2997 = _2984;
                                _2998 = _2985;
                                _2999 = _2986;
                                _3000 = _3001;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2984;
                        frontier_phi_67_pred_1 = _2985;
                        frontier_phi_67_pred_2 = _2986;
                        frontier_phi_67_pred_3 = _2983;
                        frontier_phi_67_pred_4 = _2982;
                        frontier_phi_67_pred_5 = _2981;
                    }
                    _2649 = frontier_phi_67_pred;
                    _2651 = frontier_phi_67_pred_1;
                    _2653 = frontier_phi_67_pred_2;
                    _2647 = frontier_phi_67_pred_3;
                    _2645 = frontier_phi_67_pred_4;
                    _2643 = frontier_phi_67_pred_5;
                    uint _2788 = _2787 + 1u;
                    if (_2788 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2781 = _2643;
                        _2782 = _2645;
                        _2783 = _2647;
                        _2784 = _2649;
                        _2785 = _2651;
                        _2786 = _2653;
                        _2787 = _2788;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2651;
                frontier_phi_55_56_ladder_1 = _2653;
                frontier_phi_55_56_ladder_2 = _2649;
                frontier_phi_55_56_ladder_3 = _2647;
                frontier_phi_55_56_ladder_4 = _2645;
                frontier_phi_55_56_ladder_5 = _2643;
            }
            else
            {
                frontier_phi_55_56_ladder = _2537;
                frontier_phi_55_56_ladder_1 = _2539;
                frontier_phi_55_56_ladder_2 = _2535;
                frontier_phi_55_56_ladder_3 = _2533;
                frontier_phi_55_56_ladder_4 = _2531;
                frontier_phi_55_56_ladder_5 = _2529;
            }
            _2642 = frontier_phi_55_56_ladder_5;
            _2644 = frontier_phi_55_56_ladder_4;
            _2646 = frontier_phi_55_56_ladder_3;
            _2648 = frontier_phi_55_56_ladder_2;
            _2650 = frontier_phi_55_56_ladder;
            _2652 = frontier_phi_55_56_ladder_1;
        }
        float _2657 = isnan(1.0) ? _681 : (isnan(_681) ? 1.0 : min(_681, 1.0));
        _2441 = (_2657 * _2648) + _1874;
        _2443 = (_2657 * _2650) + _1876;
        _2445 = (_2657 * _2652) + _1878;
        _2447 = ((_2642 * _665) * _2657) + _2222;
        _2449 = ((_2644 * _667) * _2657) + _2224;
        _2451 = ((_2646 * _668) * _2657) + _2226;
    }
    else
    {
        _2441 = _1874;
        _2443 = _1876;
        _2445 = _1878;
        _2447 = _2222;
        _2449 = _2224;
        _2451 = _2226;
    }
    float _4306 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _4317 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _4328 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    uint _2471 = _230 + 6u;
    float _2479 = _603 / cbSceneParam._m0[86u].x;
    float _2480 = _604 / cbSceneParam._m0[86u].y;
    vec4 _2494 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2479, _2480, (log2((isnan(cbSceneParam._m0[77u].w) ? _537 : (isnan(_537) ? cbSceneParam._m0[77u].w : min(_537, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2496 = _2494.x;
    float _2497 = _2494.y;
    float _2498 = _2494.z;
    float _2499 = _2494.w;
    float _2592;
    float _2594;
    float _2596;
    float _2598;
    if (_537 > cbSceneParam._m0[78u].w)
    {
        float _2554 = isnan(_537) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _537 : min(cbSceneParam._m0[80u].w, _537));
        float _2555 = _2554 / _537;
        float _2566 = _2555 * _588;
        float _2567 = _589 * _2555;
        float _2568 = (-0.0) - _2567;
        float _2570 = _2555 * _590;
        float _2572 = (cbSceneParam._m0[77u].w * _2568) / _2554;
        float _2573 = _2572 + cbSceneParam._m0[79u].w;
        float _2574 = cbSceneParam._m0[79u].w - _2567;
        float _2580 = sqrt(((_2566 * _2566) + (_2567 * _2567)) + (_2570 * _2570));
        float _2583 = (1.0 - (cbSceneParam._m0[77u].w / _2554)) * _2580;
        float _2588 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2590 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2743;
        if (abs((_2568 - _2572) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2743 = ((((_2573 > 0.0) ? exp2(_2588 * _2573) : (2.0 - exp2(_2590 * _2573))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2583;
        }
        else
        {
            float _2703 = 1.0 / cbSceneParam._m0[80u].x;
            float _2704 = isnan(_2574) ? _2573 : (isnan(_2573) ? _2574 : max(_2573, _2574));
            float _2705 = isnan(_2574) ? _2573 : (isnan(_2573) ? _2574 : min(_2573, _2574));
            float _2714 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : min(_2704, 0.0));
            float _2715 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : min(_2705, 0.0));
            _2743 = ((abs(_2580 / _2568) * cbSceneParam._m0[80u].y) * ((((_2714 - _2715) * 2.0) - ((exp2(_2588 * (isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0)))) - exp2(_2588 * (isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0))))) * _2703)) - ((exp2(_2590 * _2714) - exp2(_2590 * _2715)) * _2703))) + (_2583 * cbSceneParam._m0[80u].z);
        }
        vec4 _2745 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2479, _2480, 1.0), 0.0);
        float _2754 = exp2((_2743 * (-1.44269502162933349609375)) * (1.0 - _2745.w));
        float _2755 = log2(_2754);
        float _2771 = log2(_2499);
        _2592 = (exp2(_2771 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2755 * cbSceneParam._m0[78u].x)) * _2745.x) / cbSceneParam._m0[78u].x)) + _2496;
        _2594 = (exp2(_2771 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2755 * cbSceneParam._m0[78u].y)) * _2745.y) / cbSceneParam._m0[78u].y)) + _2497;
        _2596 = (exp2(_2771 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2755 * cbSceneParam._m0[78u].z)) * _2745.z) / cbSceneParam._m0[78u].z)) + _2498;
        _2598 = _2754 * _2499;
    }
    else
    {
        _2592 = _2496;
        _2594 = _2497;
        _2596 = _2498;
        _2598 = _2499;
    }
    float _2610 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2611 = _2610 == 3.0;
    float _2612 = log2(_2598);
    float _2619 = exp2(_2612 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_2441 + ((isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0))) * _681))) + ((_2447 + ((isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))) * _1489)) * cbPerFrame._m0[3u].x));
    float _2620 = exp2(_2612 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_2443 + ((isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0))) * _681))) + ((_2449 + ((isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))) * _1489)) * cbPerFrame._m0[3u].x));
    float _2621 = exp2(_2612 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (_2445 + ((isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0))) * _681))) + ((_2451 + ((isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))) * _1489)) * cbPerFrame._m0[3u].x));
    float _2630 = (_2610 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2630 * (_2611 ? _2619 : (_2619 + (cbSceneParam._m0[72u].w * _2592)));
    SV_Target.y = _2630 * (_2611 ? _2620 : (_2620 + (cbSceneParam._m0[72u].w * _2594)));
    SV_Target.z = _2630 * (_2611 ? _2621 : (_2621 + (cbSceneParam._m0[72u].w * _2596)));
    SV_Target.w = cbInstanceData._m0[_2471].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2471].w;
}


