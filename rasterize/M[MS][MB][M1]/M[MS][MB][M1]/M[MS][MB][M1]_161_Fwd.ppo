#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1360;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _232 = _231 * _223;
    float _233 = _231 * _224;
    float _234 = _231 * _225;
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = _238 * NORMAL.x;
    float _240 = _238 * NORMAL.y;
    float _241 = _238 * NORMAL.z;
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = _245 * TANGENT.x;
    float _247 = _245 * TANGENT.y;
    float _248 = _245 * TANGENT.z;
    uint _251 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _251 + 1u;
    uint _260 = _251 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_251].x * cbInstanceData._m0[_251].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _356 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _358 = _356.x;
    float _370 = dot(vec4(_358, _356.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _387 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_358 - _370) * cbMtdParam._m0[24u].y) + _370) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3685 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _388 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    float _395 = (_388 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _396 = (_388 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _397 = (_388 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _416 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _270) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _271) + cbTextureTilingScale._m0[14u].w));
    vec4 _436 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _453 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _455 = _453.x;
    float _456 = _453.y;
    float _457 = _453.z;
    float _466 = ((_436.z - _457) * _388) + _457;
    float _469 = ((((_436.x - _455) * _388) + _455) * 2.0) + (-1.0);
    float _471 = ((((_436.y - _456) * _388) + _456) * 2.0) + (-1.0);
    float _472 = dot(vec2(_469, _471), vec2(_469, _471));
    float _3696 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _477 = sqrt(1.0 - (isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))));
    vec4 _493 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _505 = (((_493.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _469;
    float _506 = (((_493.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _471;
    float _509 = fma(_477, _239, fma(_506, _246, _505 * _232));
    float _512 = fma(_477, _240, fma(_506, _247, _505 * _233));
    float _515 = fma(_477, _241, fma(_506, _248, _505 * _234));
    float _519 = inversesqrt(dot(vec3(_509, _512, _515), vec3(_509, _512, _515)));
    vec4 _546 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _548 = _546.x;
    float _549 = 1.0 - _548;
    float _553 = ((_548 - _549) * cbMtdParam._m0[24u].z) + _549;
    float _555 = (cbMtdParam._m0[19u].x + dot(vec4(_519 * _509, _519 * _512, _519 * _515, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_553 * cbMtdParam._m0[21u].z);
    float _3707 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _556 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
    float _558 = (-0.0) - cbMtdParam._m0[24u].x;
    float _560 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _561 = isnan(1.0) ? _560 : (isnan(_560) ? 1.0 : min(_560, 1.0));
    float _568 = _556 - ((_556 * TEXCOORD_8.x) * _561);
    float _569 = _556 - ((_556 * TEXCOORD_8.y) * _561);
    float _570 = _556 - ((_556 * TEXCOORD_8.z) * _561);
    float _577 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _581 = ((isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : min(_577, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _589 = (_581 - (((_553 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _581))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3738 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _590 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
    float _594 = ((_568 * ((_416.x * cbMtdParam._m0[18u].x) - _395)) * _590) + _395;
    float _595 = ((_569 * ((_416.y * cbMtdParam._m0[18u].y) - _396)) * _590) + _396;
    float _596 = ((_570 * ((_416.z * cbMtdParam._m0[18u].z) - _397)) * _590) + _397;
    vec4 _608 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _270) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _271) + cbTextureTilingScale._m0[19u].w));
    float _610 = _608.x;
    float _611 = 1.0 - _610;
    float _638 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_610 - _611) * cbMtdParam._m0[24u].w) + _611) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3749 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _639 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
    float _647 = ((((cbMtdParam._m0[10u].x - _594) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _639) + _594;
    float _648 = ((((cbMtdParam._m0[10u].y - _595) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _639) + _595;
    float _649 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _596)) * _639) + _596;
    vec4 _675 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _677 = _675.x;
    float _695 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _270) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _271) + cbTextureTilingScale._m0[9u].w)).x - _677) * _388) + _677;
    float _699 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _695) * cbMtdParam._m0[19u].z) + _695;
    float _702 = _699 - ((_590 * _568) * _699);
    float _704 = _702 - (_702 * _639);
    float _708 = (cbMtdParam._m0[19u].w * (_493.z - _466)) + _466;
    vec4 _722 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _729 = (_722.x * 2.0) + (-1.0);
    float _730 = (_722.y * 2.0) + (-1.0);
    float _731 = dot(vec2(_729, _730), vec2(_729, _730));
    float _3760 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _740 = (((_722.z - _708) * _568) * _590) + _708;
    float _743 = ((cbMtdParam._m0[23u].y - _740) * _639) + _740;
    vec4 _762 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _270) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _271) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _768 = (_762.x * 2.0) + (-1.0);
    float _769 = (_762.y * 2.0) + (-1.0);
    float _770 = dot(vec2(_768, _769), vec2(_768, _769));
    float _3771 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _790 = (((cbMtdParam._m0[21u].x * _505) + ((_729 - _505) * _568)) * _590) + _505;
    float _791 = (((cbMtdParam._m0[21u].x * _506) + ((_730 - _506) * _569)) * _590) + _506;
    float _792 = (((sqrt(1.0 - (isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0)))) - _477) * _570) * _590) + _477;
    float _803 = (((_768 - _790) + (_790 * cbMtdParam._m0[22u].z)) * _639) + _790;
    float _804 = (((_769 - _791) + (_791 * cbMtdParam._m0[22u].z)) * _639) + _791;
    float _805 = ((sqrt(1.0 - (isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0)))) - _792) * _639) + _792;
    float _807 = cbMtdParam._m0[22u].x + _493.w;
    float _810 = fma(_805, _239, fma(_804, _246, _803 * _232));
    float _813 = fma(_805, _240, fma(_804, _247, _803 * _233));
    float _816 = fma(_805, _241, fma(_804, _248, _803 * _234));
    float _820 = inversesqrt(dot(vec3(_810, _813, _816), vec3(_810, _813, _816)));
    float _821 = _820 * _810;
    float _822 = _820 * _813;
    float _823 = _820 * _816;
    float _3782 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _824 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
    float _3793 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _3804 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _3815 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _3826 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _3837 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _829 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _843 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _883 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _893 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _883);
    float _894 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _883);
    float _895 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _883);
    float _899 = inversesqrt(dot(vec3(_893, _894, _895), vec3(_893, _894, _895)));
    float _900 = _893 * _899;
    float _901 = _894 * _899;
    float _902 = _895 * _899;
    float _908 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _909 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _927 = fma(_823, cbSceneParam._m0[5u].z, fma(_822, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _821));
    float _930 = fma(_823, cbSceneParam._m0[6u].z, fma(_822, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _821));
    float _933 = fma(_823, cbSceneParam._m0[7u].z, fma(_822, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _821));
    uint _947 = (_251 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _953 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0)))) * cbInstanceData._m0[_947].x;
    float _954 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0)))) * cbInstanceData._m0[_947].y;
    float _955 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0)))) * cbInstanceData._m0[_947].z;
    float _3848 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _956 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _3859 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _957 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _3870 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _958 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _959 = 1.0 - _829;
    float _960 = _956 * _959;
    float _961 = _957 * _959;
    float _962 = _958 * _959;
    float _967 = (_956 + (-0.039999999105930328369140625)) * _829;
    float _968 = (_957 + (-0.039999999105930328369140625)) * _829;
    float _969 = (_958 + (-0.039999999105930328369140625)) * _829;
    float _970 = _967 + 0.039999999105930328369140625;
    float _972 = _968 + 0.039999999105930328369140625;
    float _973 = _969 + 0.039999999105930328369140625;
    vec4 _982 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _908, cbSceneParam._m0[86u].y * _909));
    float _986 = ((isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * TEXCOORD_5.w) * _982.x;
    float _987 = dot(vec3(_821, _822, _823), vec3(_900, _901, _902));
    float _990 = _987 * 2.0;
    float _994 = (_990 * _821) - _900;
    float _995 = (_990 * _822) - _901;
    float _996 = (_990 * _823) - _902;
    float _1000 = abs(dot(vec3(_900, _901, _902), vec3(_821, _822, _823)));
    float _3881 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _1002 = sqrt(_824);
    float _1015 = exp2((_1002 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1002 * 3.0));
    float _1021 = (1.0 - _1015) * ((_1002 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1022 = _1015 * _1002;
    float _1050 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1054 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1058 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1359;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1084 = fma(_1058, cbModelParam._m0[26u].z, fma(_1054, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1050));
        float _1088 = fma(_1058, cbModelParam._m0[27u].z, fma(_1054, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1050));
        float _1092 = fma(_1058, cbModelParam._m0[28u].z, fma(_1054, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1050));
        float _1117 = _1050 + _821;
        float _1118 = _1054 + _822;
        float _1119 = _1058 + _823;
        float _1129 = fma(_1119, cbModelParam._m0[26u].z, fma(_1118, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1117)) - _1084;
        float _1130 = fma(_1119, cbModelParam._m0[27u].z, fma(_1118, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1117)) - _1088;
        float _1131 = fma(_1119, cbModelParam._m0[28u].z, fma(_1118, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1117)) - _1092;
        float _1135 = inversesqrt(dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131)));
        float _1148 = ((_1135 * _1129) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1084 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1149 = ((_1135 * _1130) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1088 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1150 = ((_1135 * _1131) / cbModelParam._m0[34u].z) + ((((((_1092 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        float _1187 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1153.x + (-0.5));
        float _1189 = _1187 * (_1153.y + (-0.5));
        float _1190 = _1187 * (_1153.z + (-0.5));
        float _1197 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1160.x + (-0.5));
        float _1199 = _1197 * (_1160.y + (-0.5));
        float _1200 = _1197 * (_1160.z + (-0.5));
        float _1207 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1167.x + (-0.5));
        float _1209 = _1207 * (_1167.y + (-0.5));
        float _1210 = _1207 * (_1167.z + (-0.5));
        float _1217 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1174.x + (-0.5));
        float _1219 = _1217 * (_1174.y + (-0.5));
        float _1220 = _1217 * (_1174.z + (-0.5));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1223 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1224 = _1188 * 0.5;
        float _1225 = _1198 * 0.5;
        float _1226 = _1208 * 0.5;
        float _1227 = dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226));
        float _1232 = (_1227 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1227);
        float _1241 = (dot(vec3(_821, _822, _823), vec3(_1232 * _1224, _1232 * _1225, _1232 * _1226)) + 1.0) * 0.5;
        float _3907 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1251 = sqrt(((_1225 * _1225) + (_1224 * _1224)) + (_1226 * _1226)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _3918 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1253 = _1252 * 2.0;
        float _1257 = (1.0 - _1252) / (_1252 + 1.0);
        float _3929 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1267 = ((((1.0 - _1258) * (_1253 + 2.0)) * exp2(log2(isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * (_1253 + 1.0))) + _1258) * _1221;
        float _1268 = _1189 * 0.5;
        float _1269 = _1199 * 0.5;
        float _1270 = _1209 * 0.5;
        float _1271 = dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270));
        float _1276 = (_1271 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1271);
        float _1284 = (dot(vec3(_821, _822, _823), vec3(_1276 * _1268, _1276 * _1269, _1276 * _1270)) + 1.0) * 0.5;
        float _3940 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1293 = sqrt(((_1269 * _1269) + (_1268 * _1268)) + (_1270 * _1270)) / (_1222 + 9.9999997473787516355514526367188e-06);
        float _3951 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1295 = _1294 * 2.0;
        float _1299 = (1.0 - _1294) / (_1294 + 1.0);
        float _3962 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1309 = ((((1.0 - _1300) * (_1295 + 2.0)) * exp2(log2(isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * (_1295 + 1.0))) + _1300) * _1222;
        float _1310 = _1190 * 0.5;
        float _1311 = _1200 * 0.5;
        float _1312 = _1210 * 0.5;
        float _1313 = dot(vec3(_1310, _1311, _1312), vec3(_1310, _1311, _1312));
        float _1318 = (_1313 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1313);
        float _1326 = (dot(vec3(_821, _822, _823), vec3(_1318 * _1310, _1318 * _1311, _1318 * _1312)) + 1.0) * 0.5;
        float _3973 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1335 = sqrt(((_1311 * _1311) + (_1310 * _1310)) + (_1312 * _1312)) / (_1223 + 9.9999997473787516355514526367188e-06);
        float _3984 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1337 = _1336 * 2.0;
        float _1341 = (1.0 - _1336) / (_1336 + 1.0);
        float _3995 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1351 = ((((1.0 - _1342) * (_1337 + 2.0)) * exp2(log2(isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_1337 + 1.0))) + _1342) * _1223;
        _1359 = _1190;
        _1361 = _1189;
        _1362 = _1188;
        _1363 = _1200;
        _1364 = _1199;
        _1365 = _1198;
        _1366 = _1210;
        _1367 = _1209;
        _1368 = _1208;
        _1369 = _1223;
        _1370 = _1222;
        _1371 = _1221;
        _1372 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)));
        _1373 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)));
        _1374 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)));
    }
    else
    {
        _1359 = _1360;
        _1361 = _1360;
        _1362 = _1360;
        _1363 = _1360;
        _1364 = _1360;
        _1365 = _1360;
        _1366 = _1360;
        _1367 = _1360;
        _1368 = _1360;
        _1369 = _1360;
        _1370 = _1360;
        _1371 = _1360;
        _1372 = 0.0;
        _1373 = 0.0;
        _1374 = 0.0;
    }
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1399 = fma(_1058, cbModelParam._m0[30u].z, fma(_1054, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1050));
        float _1403 = fma(_1058, cbModelParam._m0[31u].z, fma(_1054, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1050));
        float _1407 = fma(_1058, cbModelParam._m0[32u].z, fma(_1054, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1050));
        float _1430 = _1050 + _821;
        float _1431 = _1054 + _822;
        float _1432 = _1058 + _823;
        float _1442 = fma(_1432, cbModelParam._m0[30u].z, fma(_1431, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1430)) - _1399;
        float _1443 = fma(_1432, cbModelParam._m0[31u].z, fma(_1431, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1430)) - _1403;
        float _1444 = fma(_1432, cbModelParam._m0[32u].z, fma(_1431, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1430)) - _1407;
        float _1448 = inversesqrt(dot(vec3(_1442, _1443, _1444), vec3(_1442, _1443, _1444)));
        float _1461 = ((_1448 * _1442) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1399 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1462 = ((_1448 * _1443) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1403 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1463 = ((_1448 * _1444) / cbModelParam._m0[35u].z) + ((((((_1407 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1465 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1461, _1462, _1463), 0.0);
        vec4 _1472 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1461, _1462, _1463), 0.0);
        vec4 _1479 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1461, _1462, _1463), 0.0);
        vec4 _1486 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1461, _1462, _1463), 0.0);
        float _1498 = exp2((_1465.w + (-0.5)) * 20.0) * 2.0;
        float _1499 = _1498 * (_1465.x + (-0.5));
        float _1500 = _1498 * (_1465.y + (-0.5));
        float _1501 = _1498 * (_1465.z + (-0.5));
        float _1508 = exp2((_1472.w + (-0.5)) * 20.0) * 2.0;
        float _1509 = _1508 * (_1472.x + (-0.5));
        float _1510 = _1508 * (_1472.y + (-0.5));
        float _1511 = _1508 * (_1472.z + (-0.5));
        float _1518 = exp2((_1479.w + (-0.5)) * 20.0) * 2.0;
        float _1519 = _1518 * (_1479.x + (-0.5));
        float _1520 = _1518 * (_1479.y + (-0.5));
        float _1521 = _1518 * (_1479.z + (-0.5));
        float _1528 = exp2((_1486.w + (-0.5)) * 20.0) * 2.0;
        float _1529 = _1528 * (_1486.x + (-0.5));
        float _1530 = _1528 * (_1486.y + (-0.5));
        float _1531 = _1528 * (_1486.z + (-0.5));
        float _1532 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1533 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1534 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1535 = _1499 * 0.5;
        float _1536 = _1509 * 0.5;
        float _1537 = _1519 * 0.5;
        float _1538 = dot(vec3(_1535, _1536, _1537), vec3(_1535, _1536, _1537));
        float _1543 = (_1538 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1538);
        float _1551 = (dot(vec3(_821, _822, _823), vec3(_1543 * _1535, _1543 * _1536, _1543 * _1537)) + 1.0) * 0.5;
        float _4036 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1560 = sqrt(((_1536 * _1536) + (_1535 * _1535)) + (_1537 * _1537)) / (_1532 + 9.9999997473787516355514526367188e-06);
        float _4047 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1562 = _1561 * 2.0;
        float _1566 = (1.0 - _1561) / (_1561 + 1.0);
        float _4058 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1576 = ((((1.0 - _1567) * (_1562 + 2.0)) * exp2(log2(isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * (_1562 + 1.0))) + _1567) * _1532;
        float _1577 = _1500 * 0.5;
        float _1578 = _1510 * 0.5;
        float _1579 = _1520 * 0.5;
        float _1580 = dot(vec3(_1577, _1578, _1579), vec3(_1577, _1578, _1579));
        float _1585 = (_1580 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1580);
        float _1593 = (dot(vec3(_821, _822, _823), vec3(_1585 * _1577, _1585 * _1578, _1585 * _1579)) + 1.0) * 0.5;
        float _4069 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1602 = sqrt(((_1578 * _1578) + (_1577 * _1577)) + (_1579 * _1579)) / (_1533 + 9.9999997473787516355514526367188e-06);
        float _4080 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1604 = _1603 * 2.0;
        float _1608 = (1.0 - _1603) / (_1603 + 1.0);
        float _4091 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1618 = ((((1.0 - _1609) * (_1604 + 2.0)) * exp2(log2(isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_1604 + 1.0))) + _1609) * _1533;
        float _1619 = _1501 * 0.5;
        float _1620 = _1511 * 0.5;
        float _1621 = _1521 * 0.5;
        float _1622 = dot(vec3(_1619, _1620, _1621), vec3(_1619, _1620, _1621));
        float _1627 = (_1622 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1622);
        float _1635 = (dot(vec3(_821, _822, _823), vec3(_1627 * _1619, _1627 * _1620, _1627 * _1621)) + 1.0) * 0.5;
        float _4102 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1644 = sqrt(((_1620 * _1620) + (_1619 * _1619)) + (_1621 * _1621)) / (_1534 + 9.9999997473787516355514526367188e-06);
        float _4113 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1645 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1646 = _1645 * 2.0;
        float _1650 = (1.0 - _1645) / (_1645 + 1.0);
        float _4124 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1660 = ((((1.0 - _1651) * (_1646 + 2.0)) * exp2(log2(isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (_1646 + 1.0))) + _1651) * _1534;
        _1668 = _1501;
        _1669 = _1500;
        _1670 = _1499;
        _1671 = _1511;
        _1672 = _1510;
        _1673 = _1509;
        _1674 = _1521;
        _1675 = _1520;
        _1676 = _1519;
        _1677 = _1534;
        _1678 = _1533;
        _1679 = _1532;
        _1680 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)));
        _1681 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0)));
        _1682 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)));
    }
    else
    {
        _1668 = _1360;
        _1669 = _1360;
        _1670 = _1360;
        _1671 = _1360;
        _1672 = _1360;
        _1673 = _1360;
        _1674 = _1360;
        _1675 = _1360;
        _1676 = _1360;
        _1677 = _1360;
        _1678 = _1360;
        _1679 = _1360;
        _1680 = 0.0;
        _1681 = 0.0;
        _1682 = 0.0;
    }
    float _1692 = (cbModelParam._m0[1u].x * (_1680 - _1372)) + _1372;
    float _1693 = (cbModelParam._m0[1u].x * (_1681 - _1373)) + _1373;
    float _1694 = (cbModelParam._m0[1u].x * (_1682 - _1374)) + _1374;
    float _1715 = fma(_1694, cbSceneParam._m0[89u].z, fma(_1693, cbSceneParam._m0[89u].y, _1692 * cbSceneParam._m0[89u].x));
    float _1718 = fma(_1694, cbSceneParam._m0[90u].z, fma(_1693, cbSceneParam._m0[90u].y, _1692 * cbSceneParam._m0[90u].x));
    float _1721 = fma(_1694, cbSceneParam._m0[91u].z, fma(_1693, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1692));
    float _1736 = _994 * 0.5;
    float _1737 = _995 * 0.5;
    float _1738 = _996 * 0.5;
    float _1739 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1670, _1673, _1676, _1679));
    float _1742 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1669, _1672, _1675, _1678));
    float _1745 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1668, _1671, _1674, _1677));
    float _1779;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1752 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1359, _1363, _1366, _1369));
        float _1756 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1361, _1364, _1367, _1370));
        float _1760 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1362, _1365, _1368, _1371));
        float _1767 = dot(vec4(cbModelParam._m0[39u]), vec4(_1736, _1737, _1738, 1.0));
        _1779 = dot(vec3(isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0)), isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0)), isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1767) ? 0.0 : (isnan(0.0) ? _1767 : max(0.0, _1767))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1779 = 1.0;
    }
    float _1790;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1781 = dot(vec4(cbModelParam._m0[40u]), vec4(_1736, _1737, _1738, 1.0));
        _1790 = dot(vec3(isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0)), isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0)), isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1781) ? 0.0 : (isnan(0.0) ? _1781 : max(0.0, _1781))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1790 = 1.0;
    }
    float _1794 = (_1790 * cbModelParam._m0[1u].x) + (_1779 * (1.0 - cbModelParam._m0[1u].x));
    float _1804 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _824);
    float _1805 = isnan(_1804) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1804 : min(cbModelParam._m0[25u].z, _1804));
    float _1885;
    float _1887;
    float _1889;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1852 = fma(_1058, cbModelParam._m0[13u].z, fma(_1054, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1050)) + cbModelParam._m0[13u].w;
        float _1856 = fma(_1058, cbModelParam._m0[14u].z, fma(_1054, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1050)) + cbModelParam._m0[14u].w;
        float _1860 = fma(_1058, cbModelParam._m0[15u].z, fma(_1054, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1050)) + cbModelParam._m0[15u].w;
        float _1863 = fma(_996, cbModelParam._m0[13u].z, fma(_995, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _994));
        float _1866 = fma(_996, cbModelParam._m0[14u].z, fma(_995, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _994));
        float _1869 = fma(_996, cbModelParam._m0[15u].z, fma(_995, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _994));
        float _1897;
        if (_1863 > 0.0)
        {
            _1897 = abs((1.0 - _1852) / _1863);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1852 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1897 = frontier_phi_14_12_ladder;
        }
        float _2099;
        if (_1866 > 0.0)
        {
            _2099 = abs((1.0 - _1856) / _1866);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1856 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2099 = frontier_phi_23_19_ladder;
        }
        float _2353;
        if (_1869 > 0.0)
        {
            _2353 = abs((1.0 - _1860) / _1869);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1860 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2353 = frontier_phi_35_30_ladder;
        }
        float _2355 = isnan(_2099) ? _1897 : (isnan(_1897) ? _2099 : min(_1897, _2099));
        float _2356 = isnan(_2353) ? _2355 : (isnan(_2355) ? _2353 : min(_2355, _2353));
        float _2360 = (_2356 * _1863) + _1852;
        float _2361 = (_2356 * _1866) + _1856;
        float _2362 = (_2356 * _1869) + _1860;
        float _2363 = _2356 * 9.9999997473787516355514526367188e-05;
        float _2365 = (-1.0) - _2363;
        float _2367 = _2363 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2362 > _2367) || ((_2362 < _2365) || ((_2361 > _2367) || ((_2361 < _2365) || ((_2360 < _2365) || (_2360 > _2367))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2490 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2362, cbModelParam._m0[9u].z, fma(_2361, cbModelParam._m0[9u].y, _2360 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2362, cbModelParam._m0[10u].z, fma(_2361, cbModelParam._m0[10u].y, _2360 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2362, cbModelParam._m0[11u].z, fma(_2361, cbModelParam._m0[11u].y, _2360 * cbModelParam._m0[11u].x))), _1805);
            frontier_phi_13_35_ladder = _2490.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2490.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2490.x * cbModelParam._m0[1u].y;
        }
        _1885 = frontier_phi_13_35_ladder_2;
        _1887 = frontier_phi_13_35_ladder_1;
        _1889 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1873 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_994, _995, _996), _1805);
        _1885 = _1873.x * cbModelParam._m0[1u].y;
        _1887 = _1873.y * cbModelParam._m0[1u].y;
        _1889 = _1873.z * cbModelParam._m0[1u].y;
    }
    float _1893 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _824);
    float _1894 = isnan(_1893) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1893 : min(cbModelParam._m0[25u].w, _1893));
    float _1983;
    float _1985;
    float _1987;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1947 = fma(_1058, cbModelParam._m0[21u].z, fma(_1054, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1050)) + cbModelParam._m0[21u].w;
        float _1951 = fma(_1058, cbModelParam._m0[22u].z, fma(_1054, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1050)) + cbModelParam._m0[22u].w;
        float _1955 = fma(_1058, cbModelParam._m0[23u].z, fma(_1054, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1050)) + cbModelParam._m0[23u].w;
        float _1958 = fma(_996, cbModelParam._m0[21u].z, fma(_995, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _994));
        float _1961 = fma(_996, cbModelParam._m0[22u].z, fma(_995, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _994));
        float _1964 = fma(_996, cbModelParam._m0[23u].z, fma(_995, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _994));
        float _2104;
        if (_1958 > 0.0)
        {
            _2104 = abs((1.0 - _1947) / _1958);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1958 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1947 + 1.0) / _1958);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2104 = frontier_phi_25_21_ladder;
        }
        float _2380;
        if (_1961 > 0.0)
        {
            _2380 = abs((1.0 - _1951) / _1961);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1961 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1951 + 1.0) / _1961);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2380 = frontier_phi_37_32_ladder;
        }
        float _2593;
        if (_1964 > 0.0)
        {
            _2593 = abs((1.0 - _1955) / _1964);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1964 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1955 + 1.0) / _1964);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2593 = frontier_phi_46_43_ladder;
        }
        float _2595 = isnan(_2380) ? _2104 : (isnan(_2104) ? _2380 : min(_2104, _2380));
        float _2596 = isnan(_2593) ? _2595 : (isnan(_2595) ? _2593 : min(_2595, _2593));
        float _2600 = (_2596 * _1958) + _1947;
        float _2601 = (_2596 * _1961) + _1951;
        float _2602 = (_2596 * _1964) + _1955;
        float _2603 = _2596 * 9.9999997473787516355514526367188e-05;
        float _2604 = (-1.0) - _2603;
        float _2606 = _2603 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2602 > _2606) || ((_2602 < _2604) || ((_2601 > _2606) || ((_2601 < _2604) || ((_2600 < _2604) || (_2600 > _2606))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2801 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2602, cbModelParam._m0[17u].z, fma(_2601, cbModelParam._m0[17u].y, _2600 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2602, cbModelParam._m0[18u].z, fma(_2601, cbModelParam._m0[18u].y, _2600 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2602, cbModelParam._m0[19u].z, fma(_2601, cbModelParam._m0[19u].y, _2600 * cbModelParam._m0[19u].x))), _1894);
            frontier_phi_22_46_ladder = _2801.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2801.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2801.x * cbModelParam._m0[1u].z;
        }
        _1983 = frontier_phi_22_46_ladder_2;
        _1985 = frontier_phi_22_46_ladder_1;
        _1987 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1967 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_994, _995, _996), _1894);
        _1983 = _1967.x * cbModelParam._m0[1u].z;
        _1985 = _1967.y * cbModelParam._m0[1u].z;
        _1987 = _1967.z * cbModelParam._m0[1u].z;
    }
    float _2000 = (((_1021 * _970) + _1022) * _986) * ((cbModelParam._m0[1u].w * (_1983 - _1885)) + _1885);
    float _2002 = (((_1021 * _972) + _1022) * _986) * ((cbModelParam._m0[1u].w * (_1985 - _1887)) + _1887);
    float _2004 = (((_1021 * _973) + _1022) * _986) * ((cbModelParam._m0[1u].w * (_1987 - _1889)) + _1889);
    float _2007 = fma(_2004, cbSceneParam._m0[89u].z, fma(_2002, cbSceneParam._m0[89u].y, _2000 * cbSceneParam._m0[89u].x));
    float _2010 = fma(_2004, cbSceneParam._m0[90u].z, fma(_2002, cbSceneParam._m0[90u].y, _2000 * cbSceneParam._m0[90u].x));
    float _2013 = fma(_2004, cbSceneParam._m0[91u].z, fma(_2002, cbSceneParam._m0[91u].y, _2000 * cbSceneParam._m0[91u].x));
    uvec4 _2023 = floatBitsToUint(cbInstanceData._m0[_251 + 5u]);
    uint _2025 = _2023.x * 14u;
    uint _2026 = _2025 + 13u;
    float _2033 = _986 + (-1.0);
    float _2038 = (cbLight._m0[_2026].x * _2033) + 1.0;
    float _2039 = (cbLight._m0[_2026].y * _2033) + 1.0;
    float _2040 = (cbLight._m0[_2026].z * _2033) + 1.0;
    float _2041 = (cbLight._m0[_2026].w * _2033) + 1.0;
    uint _2042 = _2025 + 5u;
    float _2048 = isnan(1.0) ? _2039 : (isnan(_2039) ? 1.0 : min(_2039, 1.0));
    uint _2052 = _2025 + 4u;
    float _2058 = isnan(1.0) ? _2038 : (isnan(_2038) ? 1.0 : min(_2038, 1.0));
    uint _2062 = _2025 | 1u;
    float _2073 = dot(vec3(cbLight._m0[_2025].xyz), vec3(_821, _822, _823));
    float _2076 = dot(vec3(cbLight._m0[_2062].xyz), vec3(_821, _822, _823));
    float _4260 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _4271 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2081 = (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * 0.3183098733425140380859375;
    float _2083 = (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * 0.3183098733425140380859375;
    float _2090 = ((cbLight._m0[_2042].x * _2048) * _2083) + ((cbLight._m0[_2052].x * _2058) * _2081);
    float _2091 = ((_2048 * cbLight._m0[_2042].y) * _2083) + ((_2058 * cbLight._m0[_2052].y) * _2081);
    float _2092 = ((_2048 * cbLight._m0[_2042].z) * _2083) + ((_2058 * cbLight._m0[_2052].z) * _2081);
    uvec4 _2096 = floatBitsToUint(cbLight._m0[_2025 + 12u]);
    bool _2098 = _2096.x == 0u;
    float _2109;
    float _2111;
    float _2113;
    if (_2098)
    {
        _2109 = _2090;
        _2111 = _2091;
        _2113 = _2092;
    }
    else
    {
        uint _2117 = _2025 + 6u;
        float _2133 = (dot(vec3(cbLight._m0[_2025 + 2u].xyz), vec3(_821, _822, _823)) * 0.5) + 0.5;
        float _2134 = _2133 * _2133;
        float _4282 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
        float _2135 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _2136 = isnan(1.0) ? _2040 : (isnan(_2040) ? 1.0 : min(_2040, 1.0));
        _2109 = (((cbLight._m0[_2117].x * 0.3183098733425140380859375) * _2135) * _2136) + _2090;
        _2111 = (((cbLight._m0[_2117].y * 0.3183098733425140380859375) * _2135) * _2136) + _2091;
        _2113 = (((cbLight._m0[_2117].z * 0.3183098733425140380859375) * _2135) * _2136) + _2092;
    }
    bool _2116 = _2096.y == 0u;
    float _2154;
    float _2156;
    float _2158;
    if (_2116)
    {
        _2154 = _2109;
        _2156 = _2111;
        _2158 = _2113;
    }
    else
    {
        uint _2324 = _2025 + 7u;
        float _2340 = (dot(vec3(cbLight._m0[_2025 + 3u].xyz), vec3(_821, _822, _823)) * 0.5) + 0.5;
        float _2341 = _2340 * _2340;
        float _4298 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2342 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _2343 = isnan(1.0) ? _2041 : (isnan(_2041) ? 1.0 : min(_2041, 1.0));
        _2154 = (((cbLight._m0[_2324].x * 0.3183098733425140380859375) * _2342) * _2343) + _2109;
        _2156 = (((cbLight._m0[_2324].y * 0.3183098733425140380859375) * _2342) * _2343) + _2111;
        _2158 = (((cbLight._m0[_2324].z * 0.3183098733425140380859375) * _2342) * _2343) + _2113;
    }
    uint _2161 = _2025 + 8u;
    float _2174 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2025].w)) * _824) * 0.949999988079071044921875);
    float _2175 = _2174 * _2174;
    float _2176 = cbLight._m0[_2025].x + _900;
    float _2177 = cbLight._m0[_2025].y + _901;
    float _2178 = cbLight._m0[_2025].z + _902;
    float _2182 = inversesqrt(dot(vec3(_2176, _2177, _2178), vec3(_2176, _2177, _2178)));
    float _2183 = _2182 * _2176;
    float _2184 = _2182 * _2177;
    float _2185 = _2182 * _2178;
    float _2186 = dot(vec3(_821, _822, _823), vec3(cbLight._m0[_2025].xyz));
    float _4314 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2189 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
    float _4325 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _2190 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
    float _2191 = dot(vec3(_821, _822, _823), vec3(_2183, _2184, _2185));
    float _4336 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2194 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
    float _2195 = dot(vec3(cbLight._m0[_2025].xyz), vec3(_2183, _2184, _2185));
    float _4347 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2199 = _2175 * _2175;
    float _2203 = ((_2194 * _2194) * (_2199 + (-1.0))) + 1.0;
    float _2211 = exp2(log2(1.0 - (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0)))) * 5.0);
    float _2212 = 0.959999978542327880859375 - _967;
    float _2214 = 0.959999978542327880859375 - _968;
    float _2215 = 0.959999978542327880859375 - _969;
    float _2222 = 1.0 - _2175;
    float _2233 = (0.5 / (((_2190 * ((_2189 * _2222) + _2175)) + 9.9999999392252902907785028219223e-09) + (((_2190 * _2222) + _2175) * _2189))) * _2189;
    float _4358 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2235 = (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (_2199 / ((_2203 * _2203) * 3.141590118408203125));
    uint _2246 = _2025 + 9u;
    float _2257 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2062].w)) * _824) * 0.949999988079071044921875);
    float _2258 = _2257 * _2257;
    float _2259 = cbLight._m0[_2062].x + _900;
    float _2260 = cbLight._m0[_2062].y + _901;
    float _2261 = cbLight._m0[_2062].z + _902;
    float _2265 = inversesqrt(dot(vec3(_2259, _2260, _2261), vec3(_2259, _2260, _2261)));
    float _2266 = _2265 * _2259;
    float _2267 = _2265 * _2260;
    float _2268 = _2265 * _2261;
    float _2269 = dot(vec3(_821, _822, _823), vec3(cbLight._m0[_2062].xyz));
    float _4369 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _2272 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
    float _2273 = dot(vec3(_821, _822, _823), vec3(_2266, _2267, _2268));
    float _4380 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2276 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
    float _2277 = dot(vec3(cbLight._m0[_2062].xyz), vec3(_2266, _2267, _2268));
    float _4391 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2281 = _2258 * _2258;
    float _2285 = ((_2276 * _2276) * (_2281 + (-1.0))) + 1.0;
    float _2292 = exp2(log2(1.0 - (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0)))) * 5.0);
    float _2299 = 1.0 - _2258;
    float _2309 = (0.5 / (((_2190 * ((_2272 * _2299) + _2258)) + 9.9999999392252902907785028219223e-09) + (((_2190 * _2299) + _2258) * _2272))) * _2272;
    float _4402 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2311 = (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * (_2281 / ((_2285 * _2285) * 3.141590118408203125));
    float _2321 = (((((_2292 * _2212) + _970) * cbLight._m0[_2246].x) * _2311) * _2048) + (((((_2211 * _2212) + _970) * cbLight._m0[_2161].x) * _2235) * _2058);
    float _2322 = (((((_2292 * _2214) + _972) * cbLight._m0[_2246].y) * _2311) * _2048) + (((((_2211 * _2214) + _972) * cbLight._m0[_2161].y) * _2235) * _2058);
    float _2323 = (((((_2292 * _2215) + _973) * cbLight._m0[_2246].z) * _2311) * _2048) + (((((_2211 * _2215) + _973) * cbLight._m0[_2161].z) * _2235) * _2058);
    float _2385;
    float _2387;
    float _2389;
    if (_2098)
    {
        _2385 = _2321;
        _2387 = _2322;
        _2389 = _2323;
    }
    else
    {
        uint _2391 = _2025 + 2u;
        uint _2395 = _2025 + 10u;
        float _2409 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2391].w)) * _824) * 0.949999988079071044921875);
        float _2410 = _2409 * _2409;
        float _2411 = cbLight._m0[_2391].x + _900;
        float _2412 = cbLight._m0[_2391].y + _901;
        float _2413 = cbLight._m0[_2391].z + _902;
        float _2417 = inversesqrt(dot(vec3(_2411, _2412, _2413), vec3(_2411, _2412, _2413)));
        float _2418 = _2417 * _2411;
        float _2419 = _2417 * _2412;
        float _2420 = _2417 * _2413;
        float _2421 = dot(vec3(_821, _822, _823), vec3(cbLight._m0[_2391].xyz));
        float _4413 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        float _2424 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _2425 = dot(vec3(_821, _822, _823), vec3(_2418, _2419, _2420));
        float _4424 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2428 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _2429 = dot(vec3(cbLight._m0[_2391].xyz), vec3(_2418, _2419, _2420));
        float _4435 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2433 = _2410 * _2410;
        float _2437 = ((_2428 * _2428) * (_2433 + (-1.0))) + 1.0;
        float _2444 = exp2(log2(1.0 - (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0)))) * 5.0);
        float _2451 = 1.0 - _2410;
        float _2461 = (0.5 / (((_2190 * ((_2424 * _2451) + _2410)) + 9.9999999392252902907785028219223e-09) + (((_2190 * _2451) + _2410) * _2424))) * _2424;
        float _4446 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2463 = (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_2433 / ((_2437 * _2437) * 3.141590118408203125));
        float _2464 = isnan(1.0) ? _2040 : (isnan(_2040) ? 1.0 : min(_2040, 1.0));
        _2385 = (((((_2444 * _2212) + _970) * cbLight._m0[_2395].x) * _2463) * _2464) + _2321;
        _2387 = (((((_2444 * _2214) + _972) * cbLight._m0[_2395].y) * _2463) * _2464) + _2322;
        _2389 = (((((_2444 * _2215) + _973) * cbLight._m0[_2395].z) * _2463) * _2464) + _2323;
    }
    float _2499;
    float _2501;
    float _2503;
    if (_2116)
    {
        _2499 = _2385;
        _2501 = _2387;
        _2503 = _2389;
    }
    else
    {
        uint _2510 = _2025 + 3u;
        uint _2514 = _2025 + 11u;
        float _2528 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2510].w)) * _824) * 0.949999988079071044921875);
        float _2529 = _2528 * _2528;
        float _2530 = cbLight._m0[_2510].x + _900;
        float _2531 = cbLight._m0[_2510].y + _901;
        float _2532 = cbLight._m0[_2510].z + _902;
        float _2536 = inversesqrt(dot(vec3(_2530, _2531, _2532), vec3(_2530, _2531, _2532)));
        float _2537 = _2536 * _2530;
        float _2538 = _2536 * _2531;
        float _2539 = _2536 * _2532;
        float _2540 = dot(vec3(_821, _822, _823), vec3(cbLight._m0[_2510].xyz));
        float _4462 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2543 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _2544 = dot(vec3(_821, _822, _823), vec3(_2537, _2538, _2539));
        float _4473 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2547 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
        float _2548 = dot(vec3(cbLight._m0[_2510].xyz), vec3(_2537, _2538, _2539));
        float _4484 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2552 = _2529 * _2529;
        float _2556 = ((_2547 * _2547) * (_2552 + (-1.0))) + 1.0;
        float _2563 = exp2(log2(1.0 - (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0)))) * 5.0);
        float _2570 = 1.0 - _2529;
        float _2580 = (0.5 / (((_2190 * ((_2543 * _2570) + _2529)) + 9.9999999392252902907785028219223e-09) + (((_2190 * _2570) + _2529) * _2543))) * _2543;
        float _4495 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2582 = (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_2552 / ((_2556 * _2556) * 3.141590118408203125));
        float _2583 = isnan(1.0) ? _2041 : (isnan(_2041) ? 1.0 : min(_2041, 1.0));
        _2499 = (((((_2563 * _2212) + _970) * cbLight._m0[_2514].x) * _2582) * _2583) + _2385;
        _2501 = (((((_2563 * _2214) + _972) * cbLight._m0[_2514].y) * _2582) * _2583) + _2387;
        _2503 = (((((_2563 * _2215) + _973) * cbLight._m0[_2514].z) * _2582) * _2583) + _2389;
    }
    float _2718;
    float _2720;
    float _2722;
    float _2724;
    float _2726;
    float _2728;
    if (_2023.y == 0u)
    {
        float _2658 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2659 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2658;
        float _2660 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2658;
        float _2661 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2658;
        uvec4 _2673 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2674 = _2673.x;
        uint _2685 = uint((float(_2673.y) * floor(float(uint(cbSceneParam._m0[85u].y * _909) / _2674))) + floor(float(uint(cbSceneParam._m0[85u].x * _908) / _2674)));
        float _2695 = (log2(_2661 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2696 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        uint _2699 = uint(isnan(14.0) ? _2696 : (isnan(_2696) ? 14.0 : min(_2696, 14.0)));
        uvec4 _2704 = texelFetch(g_lightClusterGridBuffer, int(((_2699 << 2u) + (_2685 << 6u)) >> 2u));
        uint _2705 = _2704.x;
        uint _2706 = _2673.z;
        float _2806;
        float _2808;
        float _2810;
        float _2812;
        float _2814;
        float _2816;
        if (((((1u << ((_2706 >> 4u) & 15u)) + 4294967295u) & _2705) == 0u) || ((_2706 & 240u) == 0u))
        {
            _2806 = 0.0;
            _2808 = 0.0;
            _2810 = 0.0;
            _2812 = 0.0;
            _2814 = 0.0;
            _2816 = 0.0;
        }
        else
        {
            float _2807;
            float _2809;
            float _2811;
            float _2813;
            float _2815;
            float _2817;
            float _2950 = 0.0;
            float _2951 = 0.0;
            float _2952 = 0.0;
            float _2953 = 0.0;
            float _2954 = 0.0;
            float _2955 = 0.0;
            uint _2956 = 0u;
            uint _2965;
            bool _2966;
            for (;;)
            {
                _2965 = texelFetch(g_lightClassification, int((((_2699 << 5u) + (_2685 << 9u)) + (_2956 << 2u)) >> 2u)).x;
                _2966 = _2965 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2966)
                {
                    frontier_phi_61_pred = _2950;
                    frontier_phi_61_pred_1 = _2955;
                    frontier_phi_61_pred_2 = _2954;
                    frontier_phi_61_pred_3 = _2953;
                    frontier_phi_61_pred_4 = _2952;
                    frontier_phi_61_pred_5 = _2951;
                }
                else
                {
                    float _3074;
                    float _3075;
                    float _3076;
                    float _3077;
                    float _3078;
                    float _3079;
                    uint _3080;
                    _3074 = _2950;
                    _3075 = _2951;
                    _3076 = _2952;
                    _3077 = _2953;
                    _3078 = _2954;
                    _3079 = _2955;
                    _3080 = _2965;
                    float _3006;
                    float _3007;
                    float _3008;
                    float _3009;
                    float _3010;
                    float _3011;
                    for (;;)
                    {
                        uint _3084 = uint(findLSB(_3080)) + (_2956 << 5u);
                        uint _3081 = (_3080 + 4294967295u) & _3080;
                        uint _3086 = _3084 * 48u;
                        vec4 _3100 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3086)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 3u)).x));
                        uint _3106 = (_3084 * 48u) + 4u;
                        vec4 _3119 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3106)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 3u)).x));
                        uint _3125 = (_3084 * 48u) + 8u;
                        vec3 _3136 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3125)).x, texelFetch(g_PointLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3125 + 2u)).x));
                        float _3140 = _3100.x - _2659;
                        float _3141 = _3100.y - _2660;
                        float _3142 = _3100.z - _2661;
                        float _3143 = dot(vec3(_3140, _3141, _3142), vec3(_3140, _3141, _3142));
                        float _3146 = inversesqrt(_3143);
                        float _3147 = _3146 * _3140;
                        float _3148 = _3146 * _3141;
                        float _3149 = _3146 * _3142;
                        float _3150 = dot(vec3(_927, _930, _933), vec3(_3147, _3148, _3149));
                        float _3155 = 1.0 - (_3143 * _3100.w);
                        float _4521 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                        float _3156 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
                        float _3157 = sqrt(_3143) * _3119.w;
                        float _3160 = 1.39999997615814208984375 / (_3157 + 1.39999997615814208984375);
                        float _3161 = _3160 * _3160;
                        float _3164 = ((1.0 - _3161) * _3150) + _3161;
                        float _3167 = _3157 * _3157;
                        float _3171 = ((isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0))) * _3156) / ((_3167 * 0.699999988079071044921875) + 1.0);
                        float _3175 = (-0.0) - _2659;
                        float _3176 = (-0.0) - _2660;
                        float _3177 = (-0.0) - _2661;
                        float _3181 = inversesqrt(dot(vec3(_3175, _3176, _3177), vec3(_3175, _3176, _3177)));
                        float _3182 = _3181 * _3175;
                        float _3183 = _3181 * _3176;
                        float _3184 = _3181 * _3177;
                        float _3192 = exp2(log2(1.0 / ((_3167 * 3.5) + 5.0)) * 0.25);
                        float _3193 = 1.0 - _1002;
                        float _3200 = sqrt(1.0 - ((1.0 - (_3193 * _3193)) * (1.0 - (_3192 * _3192))));
                        float _3201 = _3200 * _3200;
                        float _3202 = _3201 * _3201;
                        float _3203 = _3182 + _3147;
                        float _3204 = _3183 + _3148;
                        float _3205 = _3184 + _3149;
                        float _3209 = inversesqrt(dot(vec3(_3203, _3204, _3205), vec3(_3203, _3204, _3205)));
                        float _3213 = dot(vec3(_927, _930, _933), vec3(_3182, _3183, _3184));
                        float _4537 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                        float _3216 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
                        float _3217 = dot(vec3(_927, _930, _933), vec3(_3209 * _3203, _3209 * _3204, _3209 * _3205));
                        float _4548 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                        float _3220 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
                        float _3224 = ((_3220 * _3220) * (_3202 + (-1.0))) + 1.0;
                        float _3225 = _3160 * _3201;
                        float _3226 = _3225 * _3225;
                        float _3229 = ((1.0 - _3226) * _3150) + _3226;
                        float _4559 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                        float _3230 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
                        float _3231 = 1.0 - _3201;
                        float _3241 = (0.5 / (((_3230 * ((_3216 * _3231) + _3201)) + 9.9999999392252902907785028219223e-09) + (((_3230 * _3231) + _3201) * _3216))) * _3230;
                        float _4570 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                        float _3252 = (((_3202 * 3.1415927410125732421875) * (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0)))) / ((_3224 * _3224) * ((_3167 * 2.1991131305694580078125) + 3.141590118408203125))) * _3156;
                        _3009 = (_3171 * _3119.x) + _3077;
                        _3010 = (_3171 * _3119.y) + _3078;
                        _3011 = (_3171 * _3119.z) + _3079;
                        _3006 = (_3252 * _3136.x) + _3074;
                        _3007 = (_3252 * _3136.y) + _3075;
                        _3008 = (_3252 * _3136.z) + _3076;
                        if (_3081 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3074 = _3006;
                            _3075 = _3007;
                            _3076 = _3008;
                            _3077 = _3009;
                            _3078 = _3010;
                            _3079 = _3011;
                            _3080 = _3081;
                        }
                    }
                    frontier_phi_61_pred = _3006;
                    frontier_phi_61_pred_1 = _3011;
                    frontier_phi_61_pred_2 = _3010;
                    frontier_phi_61_pred_3 = _3009;
                    frontier_phi_61_pred_4 = _3008;
                    frontier_phi_61_pred_5 = _3007;
                }
                _2807 = frontier_phi_61_pred;
                _2817 = frontier_phi_61_pred_1;
                _2815 = frontier_phi_61_pred_2;
                _2813 = frontier_phi_61_pred_3;
                _2811 = frontier_phi_61_pred_4;
                _2809 = frontier_phi_61_pred_5;
                uint _2957 = _2956 + 1u;
                if (_2957 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2950 = _2807;
                    _2951 = _2809;
                    _2952 = _2811;
                    _2953 = _2813;
                    _2954 = _2815;
                    _2955 = _2817;
                    _2956 = _2957;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2806 = _2807;
            _2808 = _2809;
            _2810 = _2811;
            _2812 = _2813;
            _2814 = _2815;
            _2816 = _2817;
        }
        uvec4 _2820 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2821 = _2820.z;
        uint _2823 = (_2821 >> 8u) & 15u;
        float _2918;
        float _2920;
        float _2922;
        float _2924;
        float _2926;
        float _2928;
        if (((4294967295u << _2823) & _2705) == 0u)
        {
            _2918 = _2806;
            _2920 = _2808;
            _2922 = _2810;
            _2924 = _2812;
            _2926 = _2814;
            _2928 = _2816;
        }
        else
        {
            float _2943 = inversesqrt(dot(vec3(_2659, _2660, _2661), vec3(_2659, _2660, _2661)));
            float _2944 = _2943 * _2659;
            float _2945 = _2943 * _2660;
            float _2946 = _2943 * _2661;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2823 < ((_2821 >> 12u) & 15u))
            {
                float _2919;
                float _2921;
                float _2923;
                float _2925;
                float _2927;
                float _2929;
                float _3057 = _2806;
                float _3058 = _2808;
                float _3059 = _2810;
                float _3060 = _2812;
                float _3061 = _2814;
                float _3062 = _2816;
                uint _3063 = _2823;
                uint _3072;
                bool _3073;
                for (;;)
                {
                    _3072 = texelFetch(g_lightClassification, int((((_2699 << 5u) + (_2685 << 9u)) + (_3063 << 2u)) >> 2u)).x;
                    _3073 = _3072 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3073)
                    {
                        frontier_phi_67_pred = _3060;
                        frontier_phi_67_pred_1 = _3061;
                        frontier_phi_67_pred_2 = _3062;
                        frontier_phi_67_pred_3 = _3059;
                        frontier_phi_67_pred_4 = _3058;
                        frontier_phi_67_pred_5 = _3057;
                    }
                    else
                    {
                        float _3257;
                        float _3258;
                        float _3259;
                        float _3260;
                        float _3261;
                        float _3262;
                        float _3551;
                        float _3552;
                        float _3553;
                        float _3554;
                        float _3555;
                        float _3556;
                        float _3270 = _3057;
                        float _3271 = _3058;
                        float _3272 = _3059;
                        float _3273 = _3060;
                        float _3274 = _3061;
                        float _3275 = _3062;
                        uint _3276 = _3072;
                        uint _3277;
                        vec4 _3302;
                        float _3303;
                        vec4 _3318;
                        vec3 _3330;
                        vec4 _3345;
                        vec4 _3361;
                        float _3407;
                        bool _3408;
                        for (;;)
                        {
                            uint _3287 = ((_3063 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3276));
                            _3277 = (_3276 + 4294967295u) & _3276;
                            uint _3289 = _3287 * 40u;
                            _3302 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3289)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 3u)).x));
                            _3303 = _3302.w;
                            uint _3305 = (_3287 * 40u) + 4u;
                            _3318 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3305)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 3u)).x));
                            uint _3320 = (_3287 * 40u) + 8u;
                            _3330 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3320)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 2u)).x));
                            uint _3332 = (_3287 * 40u) + 16u;
                            _3345 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3332)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 3u)).x));
                            uint _3348 = (_3287 * 40u) + 20u;
                            _3361 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3348)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 3u)).x));
                            uint _3363 = (_3287 * 40u) + 24u;
                            vec4 _3376 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3363)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 3u)).x));
                            uint _3382 = (_3287 * 40u) + 28u;
                            vec4 _3395 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3382)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 3u)).x));
                            _3407 = fma(_2661, _3395.z, fma(_2660, _3395.y, _3395.x * _2659)) + _3395.w;
                            _3408 = !((fma(_2661, _3376.z, fma(_2660, _3376.y, _3376.x * _2659)) + _3376.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3408)
                            {
                                float _3435 = _3302.x - _2659;
                                float _3436 = _3302.y - _2660;
                                float _3437 = _3302.z - _2661;
                                float _3438 = dot(vec3(_3435, _3436, _3437), vec3(_3435, _3436, _3437));
                                float _3441 = inversesqrt(_3438);
                                float _3442 = _3441 * _3435;
                                float _3443 = _3441 * _3436;
                                float _3444 = _3441 * _3437;
                                float _3448 = 1.0 - (_3438 / (_3303 * _3303));
                                float _4581 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                                float _3449 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                                float _3453 = sqrt(_3438) * _3318.w;
                                float _3455 = 1.39999997615814208984375 / (_3453 + 1.39999997615814208984375);
                                float _3456 = _3455 * _3455;
                                float _3459 = ((1.0 - _3456) * dot(vec3(_3442, _3443, _3444), vec3(_927, _930, _933))) + _3456;
                                float _3462 = _3453 * _3453;
                                float _3466 = (fma(_2661, _3345.z, fma(_2660, _3345.y, _3345.x * _2659)) + _3345.w) / _3407;
                                float _3467 = (fma(_2661, _3361.z, fma(_2660, _3361.y, _3361.x * _2659)) + _3361.w) / _3407;
                                float _3471 = 1.0 - dot(vec2(_3466, _3467), vec2(_3466, _3467));
                                float _4597 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3472 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
                                float _3473 = _3472 * (((isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0))) * _3449) / ((_3462 * 0.699999988079071044921875) + 1.0));
                                float _3485 = exp2(log2(1.0 / ((_3462 * 3.5) + 5.0)) * 0.25);
                                float _3486 = 1.0 - _1002;
                                float _3493 = sqrt(1.0 - ((1.0 - (_3486 * _3486)) * (1.0 - (_3485 * _3485))));
                                float _3494 = _3493 * _3493;
                                float _3495 = _3494 * _3494;
                                float _3496 = _3442 - _2944;
                                float _3497 = _3443 - _2945;
                                float _3498 = _3444 - _2946;
                                float _3502 = inversesqrt(dot(vec3(_3496, _3497, _3498), vec3(_3496, _3497, _3498)));
                                float _3506 = dot(vec3(_927, _930, _933), vec3((-0.0) - _2944, (-0.0) - _2945, (-0.0) - _2946));
                                float _4608 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                                float _3509 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
                                float _3510 = dot(vec3(_927, _930, _933), vec3(_3502 * _3496, _3502 * _3497, _3502 * _3498));
                                float _4619 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                                float _3513 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                                float _3517 = ((_3513 * _3513) * (_3495 + (-1.0))) + 1.0;
                                float _3518 = _3455 * _3494;
                                float _3519 = _3518 * _3518;
                                float _3525 = ((1.0 - _3519) * dot(vec3(_927, _930, _933), vec3(_3442, _3443, _3444))) + _3519;
                                float _4630 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                                float _3526 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                                float _3527 = 1.0 - _3494;
                                float _3537 = (0.5 / (((_3526 * ((_3509 * _3527) + _3494)) + 9.9999999392252902907785028219223e-09) + (((_3526 * _3527) + _3494) * _3509))) * _3526;
                                float _4641 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                                float _3547 = (_3472 * _3449) * (((_3495 * 3.1415927410125732421875) * (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0)))) / ((_3517 * _3517) * ((_3462 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3547 * _3330.x;
                                frontier_phi_73_pred_1 = _3547 * _3330.y;
                                frontier_phi_73_pred_2 = _3473 * _3318.z;
                                frontier_phi_73_pred_3 = _3473 * _3318.y;
                                frontier_phi_73_pred_4 = _3473 * _3318.x;
                                frontier_phi_73_pred_5 = _3547 * _3330.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3551 = frontier_phi_73_pred;
                            _3552 = frontier_phi_73_pred_1;
                            _3556 = frontier_phi_73_pred_2;
                            _3555 = frontier_phi_73_pred_3;
                            _3554 = frontier_phi_73_pred_4;
                            _3553 = frontier_phi_73_pred_5;
                            _3260 = _3554 + _3273;
                            _3261 = _3555 + _3274;
                            _3262 = _3556 + _3275;
                            _3257 = _3551 + _3270;
                            _3258 = _3552 + _3271;
                            _3259 = _3553 + _3272;
                            if (_3277 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3270 = _3257;
                                _3271 = _3258;
                                _3272 = _3259;
                                _3273 = _3260;
                                _3274 = _3261;
                                _3275 = _3262;
                                _3276 = _3277;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3260;
                        frontier_phi_67_pred_1 = _3261;
                        frontier_phi_67_pred_2 = _3262;
                        frontier_phi_67_pred_3 = _3259;
                        frontier_phi_67_pred_4 = _3258;
                        frontier_phi_67_pred_5 = _3257;
                    }
                    _2925 = frontier_phi_67_pred;
                    _2927 = frontier_phi_67_pred_1;
                    _2929 = frontier_phi_67_pred_2;
                    _2923 = frontier_phi_67_pred_3;
                    _2921 = frontier_phi_67_pred_4;
                    _2919 = frontier_phi_67_pred_5;
                    uint _3064 = _3063 + 1u;
                    if (_3064 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3057 = _2919;
                        _3058 = _2921;
                        _3059 = _2923;
                        _3060 = _2925;
                        _3061 = _2927;
                        _3062 = _2929;
                        _3063 = _3064;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2927;
                frontier_phi_55_56_ladder_1 = _2929;
                frontier_phi_55_56_ladder_2 = _2925;
                frontier_phi_55_56_ladder_3 = _2923;
                frontier_phi_55_56_ladder_4 = _2921;
                frontier_phi_55_56_ladder_5 = _2919;
            }
            else
            {
                frontier_phi_55_56_ladder = _2814;
                frontier_phi_55_56_ladder_1 = _2816;
                frontier_phi_55_56_ladder_2 = _2812;
                frontier_phi_55_56_ladder_3 = _2810;
                frontier_phi_55_56_ladder_4 = _2808;
                frontier_phi_55_56_ladder_5 = _2806;
            }
            _2918 = frontier_phi_55_56_ladder_5;
            _2920 = frontier_phi_55_56_ladder_4;
            _2922 = frontier_phi_55_56_ladder_3;
            _2924 = frontier_phi_55_56_ladder_2;
            _2926 = frontier_phi_55_56_ladder;
            _2928 = frontier_phi_55_56_ladder_1;
        }
        float _2933 = isnan(1.0) ? _986 : (isnan(_986) ? 1.0 : min(_986, 1.0));
        _2718 = (_2933 * _2924) + _2154;
        _2720 = (_2933 * _2926) + _2156;
        _2722 = (_2933 * _2928) + _2158;
        _2724 = ((_2918 * _970) * _2933) + _2499;
        _2726 = ((_2920 * _972) * _2933) + _2501;
        _2728 = ((_2922 * _973) * _2933) + _2503;
    }
    else
    {
        _2718 = _2154;
        _2720 = _2156;
        _2722 = _2158;
        _2724 = _2499;
        _2726 = _2501;
        _2728 = _2503;
    }
    float _4657 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _4668 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _4679 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    uint _2748 = _251 + 6u;
    float _2756 = _908 / cbSceneParam._m0[86u].x;
    float _2757 = _909 / cbSceneParam._m0[86u].y;
    vec4 _2771 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2756, _2757, (log2((isnan(cbSceneParam._m0[77u].w) ? _843 : (isnan(_843) ? cbSceneParam._m0[77u].w : min(_843, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2773 = _2771.x;
    float _2774 = _2771.y;
    float _2775 = _2771.z;
    float _2776 = _2771.w;
    float _2868;
    float _2870;
    float _2872;
    float _2874;
    if (_843 > cbSceneParam._m0[78u].w)
    {
        float _2831 = isnan(_843) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _843 : min(cbSceneParam._m0[80u].w, _843));
        float _2832 = _2831 / _843;
        float _2843 = _2832 * _893;
        float _2844 = _894 * _2832;
        float _2845 = (-0.0) - _2844;
        float _2846 = _2832 * _895;
        float _2848 = (cbSceneParam._m0[77u].w * _2845) / _2831;
        float _2849 = _2848 + cbSceneParam._m0[79u].w;
        float _2850 = cbSceneParam._m0[79u].w - _2844;
        float _2856 = sqrt(((_2843 * _2843) + (_2844 * _2844)) + (_2846 * _2846));
        float _2859 = (1.0 - (cbSceneParam._m0[77u].w / _2831)) * _2856;
        float _2864 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2866 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3019;
        if (abs((_2845 - _2848) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3019 = ((((_2849 > 0.0) ? exp2(_2864 * _2849) : (2.0 - exp2(_2866 * _2849))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2859;
        }
        else
        {
            float _2979 = 1.0 / cbSceneParam._m0[80u].x;
            float _2980 = isnan(_2850) ? _2849 : (isnan(_2849) ? _2850 : max(_2849, _2850));
            float _2981 = isnan(_2850) ? _2849 : (isnan(_2849) ? _2850 : min(_2849, _2850));
            float _2990 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : min(_2980, 0.0));
            float _2991 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : min(_2981, 0.0));
            _3019 = ((abs(_2856 / _2845) * cbSceneParam._m0[80u].y) * ((((_2990 - _2991) * 2.0) - ((exp2(_2864 * (isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0)))) - exp2(_2864 * (isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0))))) * _2979)) - ((exp2(_2866 * _2990) - exp2(_2866 * _2991)) * _2979))) + (_2859 * cbSceneParam._m0[80u].z);
        }
        vec4 _3021 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2756, _2757, 1.0), 0.0);
        float _3030 = exp2((_3019 * (-1.44269502162933349609375)) * (1.0 - _3021.w));
        float _3031 = log2(_3030);
        float _3047 = log2(_2776);
        _2868 = (exp2(_3047 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3031 * cbSceneParam._m0[78u].x)) * _3021.x) / cbSceneParam._m0[78u].x)) + _2773;
        _2870 = (exp2(_3047 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3031 * cbSceneParam._m0[78u].y)) * _3021.y) / cbSceneParam._m0[78u].y)) + _2774;
        _2872 = (exp2(_3047 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3031 * cbSceneParam._m0[78u].z)) * _3021.z) / cbSceneParam._m0[78u].z)) + _2775;
        _2874 = _3030 * _2776;
    }
    else
    {
        _2868 = _2773;
        _2870 = _2774;
        _2872 = _2775;
        _2874 = _2776;
    }
    float _2886 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2887 = _2886 == 3.0;
    float _2888 = log2(_2874);
    float _2895 = exp2(_2888 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0))) * (_2718 + ((isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))) * _986))) + ((_2724 + ((isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0))) * _1794)) * cbPerFrame._m0[3u].x));
    float _2896 = exp2(_2888 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * (_2720 + ((isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))) * _986))) + ((_2726 + ((isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0))) * _1794)) * cbPerFrame._m0[3u].x));
    float _2897 = exp2(_2888 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0))) * (_2722 + ((isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))) * _986))) + ((_2728 + ((isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0))) * _1794)) * cbPerFrame._m0[3u].x));
    float _2906 = (_2886 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2906 * (_2887 ? _2895 : (_2895 + (cbSceneParam._m0[72u].w * _2868)));
    SV_Target.y = _2906 * (_2887 ? _2896 : (_2896 + (cbSceneParam._m0[72u].w * _2870)));
    SV_Target.z = _2906 * (_2887 ? _2897 : (_2897 + (cbSceneParam._m0[72u].w * _2872)));
    SV_Target.w = cbInstanceData._m0[_2748].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2748].w;
}


