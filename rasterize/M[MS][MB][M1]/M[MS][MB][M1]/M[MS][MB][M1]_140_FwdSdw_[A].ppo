#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1257;
float _3920;
float _3921;
float _3922;
float _3923;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _223 = _222 * _214;
    float _224 = _222 * _215;
    float _225 = _222 * _216;
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = _229 * NORMAL.x;
    float _231 = _229 * NORMAL.y;
    float _232 = _229 * NORMAL.z;
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _237 = _236 * TANGENT.x;
    float _238 = _236 * TANGENT.y;
    float _239 = _236 * TANGENT.z;
    uint _242 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _242 + 1u;
    uint _252 = _242 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _283 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _289 = _283.x * cbMtdParam._m0[11u].x;
    float _290 = _283.y * cbMtdParam._m0[11u].y;
    float _291 = _283.z * cbMtdParam._m0[11u].z;
    vec4 _310 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _348 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _350 = _348.x;
    float _362 = dot(vec4(_350, _348.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _379 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_350 - _362) * cbMtdParam._m0[24u].y) + _362) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3932 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _380 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _387 = (_380 * ((_310.x * cbMtdParam._m0[12u].x) - _289)) + _289;
    float _388 = (_380 * ((_310.y * cbMtdParam._m0[12u].y) - _290)) + _290;
    float _389 = (_380 * ((_310.z * cbMtdParam._m0[12u].z) - _291)) + _291;
    vec4 _408 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _262) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _263) + cbTextureTilingScale._m0[14u].w));
    vec4 _428 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _445 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _447 = _445.x;
    float _448 = _445.y;
    float _449 = _445.z;
    float _458 = ((_428.z - _449) * _380) + _449;
    float _461 = ((((_428.x - _447) * _380) + _447) * 2.0) + (-1.0);
    float _463 = ((((_428.y - _448) * _380) + _448) * 2.0) + (-1.0);
    float _464 = dot(vec2(_461, _463), vec2(_461, _463));
    float _3943 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _469 = sqrt(1.0 - (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))));
    vec4 _485 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _497 = (((_485.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _461;
    float _498 = (((_485.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _463;
    float _501 = fma(_469, _230, fma(_498, _237, _497 * _223));
    float _504 = fma(_469, _231, fma(_498, _238, _497 * _224));
    float _507 = fma(_469, _232, fma(_498, _239, _497 * _225));
    float _511 = inversesqrt(dot(vec3(_501, _504, _507), vec3(_501, _504, _507)));
    vec4 _538 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _540 = _538.x;
    float _541 = 1.0 - _540;
    float _547 = (cbMtdParam._m0[19u].x + dot(vec4(_511 * _501, _511 * _504, _511 * _507, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_540 - _541) * cbMtdParam._m0[24u].z) + _541) * cbMtdParam._m0[21u].z);
    float _3954 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _548 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _555 = (_548 * ((_408.x * cbMtdParam._m0[18u].x) - _387)) + _387;
    float _556 = (_548 * ((_408.y * cbMtdParam._m0[18u].y) - _388)) + _388;
    float _557 = (_548 * ((_408.z * cbMtdParam._m0[18u].z) - _389)) + _389;
    vec4 _569 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _583 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _585 = _583.x;
    float _603 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _262) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _263) + cbTextureTilingScale._m0[9u].w)).x - _585) * _380) + _585;
    float _607 = ((_569.x - _603) * cbMtdParam._m0[19u].z) + _603;
    float _609 = _607 - (_607 * _548);
    float _613 = (cbMtdParam._m0[19u].w * (_485.z - _458)) + _458;
    vec4 _626 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _633 = (_626.x * 2.0) + (-1.0);
    float _634 = (_626.y * 2.0) + (-1.0);
    float _635 = dot(vec2(_633, _634), vec2(_633, _634));
    float _3965 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _643 = ((_626.z - _613) * _548) + _613;
    float _653 = ((sqrt(1.0 - (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0)))) - _469) * _548) + _469;
    float _656 = (((_633 - _497) * _548) + _497) + (cbMtdParam._m0[21u].x * _497);
    float _657 = (((_634 - _498) * _548) + _498) + (cbMtdParam._m0[21u].x * _498);
    float _662 = cbMtdParam._m0[22u].x + _485.w;
    float _665 = fma(_653, _230, fma(_657, _237, _656 * _223));
    float _668 = fma(_653, _231, fma(_657, _238, _656 * _224));
    float _671 = fma(_653, _232, fma(_657, _239, _656 * _225));
    float _675 = inversesqrt(dot(vec3(_665, _668, _671), vec3(_665, _668, _671)));
    float _676 = _675 * _665;
    float _677 = _675 * _668;
    float _678 = _675 * _671;
    float _3976 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _679 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _3987 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _3998 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _4009 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _4020 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _4031 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _684 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _698 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _739 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _749 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _739);
    float _750 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _739);
    float _751 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _739);
    float _755 = inversesqrt(dot(vec3(_749, _750, _751), vec3(_749, _750, _751)));
    float _756 = _749 * _755;
    float _757 = _750 * _755;
    float _758 = _751 * _755;
    vec4 _763 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _765 = _763.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _937 = sqrt(((_749 * _749) + (_750 * _750)) + (_751 * _751));
        float _943 = (cbMatDynParam._m0[5u].x * _937) + cbMatDynParam._m0[5u].y;
        float _4042 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _944 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _948 = (cbMatDynParam._m0[5u].z * _937) + cbMatDynParam._m0[5u].w;
        float _4053 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) - _944)) + _944) < ((_765 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _776 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _777 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _795 = fma(_678, cbSceneParam._m0[5u].z, fma(_677, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _676));
    float _798 = fma(_678, cbSceneParam._m0[6u].z, fma(_677, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _676));
    float _801 = fma(_678, cbSceneParam._m0[7u].z, fma(_677, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _676));
    uint _814 = _242 + 9u;
    uint _815 = _814 + uint(cbMatDynParam._m0[0u].w);
    float _821 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0)))) * cbInstanceData._m0[_815].x;
    float _822 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0)))) * cbInstanceData._m0[_815].y;
    float _823 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0)))) * cbInstanceData._m0[_815].z;
    float _4064 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _824 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _4075 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _825 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _4086 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _826 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _827 = 1.0 - _684;
    float _828 = _824 * _827;
    float _829 = _825 * _827;
    float _830 = _826 * _827;
    float _835 = (_824 + (-0.039999999105930328369140625)) * _684;
    float _836 = (_825 + (-0.039999999105930328369140625)) * _684;
    float _837 = (_826 + (-0.039999999105930328369140625)) * _684;
    float _838 = _835 + 0.039999999105930328369140625;
    float _840 = _836 + 0.039999999105930328369140625;
    float _841 = _837 + 0.039999999105930328369140625;
    vec4 _850 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _776, cbSceneParam._m0[86u].y * _777));
    float _854 = ((isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * TEXCOORD_5.w) * _850.x;
    float _855 = dot(vec3(_676, _677, _678), vec3(_756, _757, _758));
    float _858 = _855 * 2.0;
    float _862 = (_858 * _676) - _756;
    float _863 = (_858 * _677) - _757;
    float _864 = (_858 * _678) - _758;
    float _868 = abs(dot(vec3(_756, _757, _758), vec3(_676, _677, _678)));
    float _4097 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _870 = sqrt(_679);
    float _883 = exp2((_870 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_870 * 3.0));
    float _889 = (1.0 - _883) * ((_870 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _890 = _883 * _870;
    float _918 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _922 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _926 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1256;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _981 = fma(_926, cbModelParam._m0[26u].z, fma(_922, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _918));
        float _985 = fma(_926, cbModelParam._m0[27u].z, fma(_922, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _918));
        float _989 = fma(_926, cbModelParam._m0[28u].z, fma(_922, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _918));
        float _1014 = _918 + _676;
        float _1015 = _922 + _677;
        float _1016 = _926 + _678;
        float _1026 = fma(_1016, cbModelParam._m0[26u].z, fma(_1015, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1014)) - _981;
        float _1027 = fma(_1016, cbModelParam._m0[27u].z, fma(_1015, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1014)) - _985;
        float _1028 = fma(_1016, cbModelParam._m0[28u].z, fma(_1015, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1014)) - _989;
        float _1032 = inversesqrt(dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028)));
        float _1045 = ((_1032 * _1026) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_981 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1046 = ((_1032 * _1027) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_985 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1047 = ((_1032 * _1028) / cbModelParam._m0[34u].z) + ((((((_989 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        vec4 _1071 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        float _1084 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1050.x + (-0.5));
        float _1086 = _1084 * (_1050.y + (-0.5));
        float _1087 = _1084 * (_1050.z + (-0.5));
        float _1094 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1057.x + (-0.5));
        float _1096 = _1094 * (_1057.y + (-0.5));
        float _1097 = _1094 * (_1057.z + (-0.5));
        float _1104 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1064.x + (-0.5));
        float _1106 = _1104 * (_1064.y + (-0.5));
        float _1107 = _1104 * (_1064.z + (-0.5));
        float _1114 = exp2((_1071.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = _1114 * (_1071.x + (-0.5));
        float _1116 = _1114 * (_1071.y + (-0.5));
        float _1117 = _1114 * (_1071.z + (-0.5));
        float _1118 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1119 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1120 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1121 = _1085 * 0.5;
        float _1122 = _1095 * 0.5;
        float _1123 = _1105 * 0.5;
        float _1124 = dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123));
        float _1129 = (_1124 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1124);
        float _1138 = (dot(vec3(_676, _677, _678), vec3(_1129 * _1121, _1129 * _1122, _1129 * _1123)) + 1.0) * 0.5;
        float _4123 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1148 = sqrt(((_1122 * _1122) + (_1121 * _1121)) + (_1123 * _1123)) / (_1118 + 9.9999997473787516355514526367188e-06);
        float _4134 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1150 = _1149 * 2.0;
        float _1154 = (1.0 - _1149) / (_1149 + 1.0);
        float _4145 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1164 = ((((1.0 - _1155) * (_1150 + 2.0)) * exp2(log2(isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * (_1150 + 1.0))) + _1155) * _1118;
        float _1165 = _1086 * 0.5;
        float _1166 = _1096 * 0.5;
        float _1167 = _1106 * 0.5;
        float _1168 = dot(vec3(_1165, _1166, _1167), vec3(_1165, _1166, _1167));
        float _1173 = (_1168 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1168);
        float _1181 = (dot(vec3(_676, _677, _678), vec3(_1173 * _1165, _1173 * _1166, _1173 * _1167)) + 1.0) * 0.5;
        float _4156 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1190 = sqrt(((_1166 * _1166) + (_1165 * _1165)) + (_1167 * _1167)) / (_1119 + 9.9999997473787516355514526367188e-06);
        float _4167 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1192 = _1191 * 2.0;
        float _1196 = (1.0 - _1191) / (_1191 + 1.0);
        float _4178 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1206 = ((((1.0 - _1197) * (_1192 + 2.0)) * exp2(log2(isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_1192 + 1.0))) + _1197) * _1119;
        float _1207 = _1087 * 0.5;
        float _1208 = _1097 * 0.5;
        float _1209 = _1107 * 0.5;
        float _1210 = dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209));
        float _1215 = (_1210 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1210);
        float _1223 = (dot(vec3(_676, _677, _678), vec3(_1215 * _1207, _1215 * _1208, _1215 * _1209)) + 1.0) * 0.5;
        float _4189 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1232 = sqrt(((_1208 * _1208) + (_1207 * _1207)) + (_1209 * _1209)) / (_1120 + 9.9999997473787516355514526367188e-06);
        float _4200 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1234 = _1233 * 2.0;
        float _1238 = (1.0 - _1233) / (_1233 + 1.0);
        float _4211 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _1248 = ((((1.0 - _1239) * (_1234 + 2.0)) * exp2(log2(isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_1234 + 1.0))) + _1239) * _1120;
        _1256 = _1087;
        _1258 = _1086;
        _1259 = _1085;
        _1260 = _1097;
        _1261 = _1096;
        _1262 = _1095;
        _1263 = _1107;
        _1264 = _1106;
        _1265 = _1105;
        _1266 = _1120;
        _1267 = _1119;
        _1268 = _1118;
        _1269 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)));
        _1270 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)));
        _1271 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)));
    }
    else
    {
        _1256 = _1257;
        _1258 = _1257;
        _1259 = _1257;
        _1260 = _1257;
        _1261 = _1257;
        _1262 = _1257;
        _1263 = _1257;
        _1264 = _1257;
        _1265 = _1257;
        _1266 = _1257;
        _1267 = _1257;
        _1268 = _1257;
        _1269 = 0.0;
        _1270 = 0.0;
        _1271 = 0.0;
    }
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1299 = fma(_926, cbModelParam._m0[30u].z, fma(_922, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _918));
        float _1303 = fma(_926, cbModelParam._m0[31u].z, fma(_922, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _918));
        float _1307 = fma(_926, cbModelParam._m0[32u].z, fma(_922, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _918));
        float _1330 = _918 + _676;
        float _1331 = _922 + _677;
        float _1332 = _926 + _678;
        float _1342 = fma(_1332, cbModelParam._m0[30u].z, fma(_1331, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1330)) - _1299;
        float _1343 = fma(_1332, cbModelParam._m0[31u].z, fma(_1331, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1330)) - _1303;
        float _1344 = fma(_1332, cbModelParam._m0[32u].z, fma(_1331, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1330)) - _1307;
        float _1348 = inversesqrt(dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344)));
        float _1361 = ((_1348 * _1342) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1299 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1362 = ((_1348 * _1343) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1303 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1363 = ((_1348 * _1344) / cbModelParam._m0[35u].z) + ((((((_1307 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1365 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        vec4 _1372 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        vec4 _1379 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        vec4 _1386 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        float _1398 = exp2((_1365.w + (-0.5)) * 20.0) * 2.0;
        float _1399 = _1398 * (_1365.x + (-0.5));
        float _1400 = _1398 * (_1365.y + (-0.5));
        float _1401 = _1398 * (_1365.z + (-0.5));
        float _1408 = exp2((_1372.w + (-0.5)) * 20.0) * 2.0;
        float _1409 = _1408 * (_1372.x + (-0.5));
        float _1410 = _1408 * (_1372.y + (-0.5));
        float _1411 = _1408 * (_1372.z + (-0.5));
        float _1418 = exp2((_1379.w + (-0.5)) * 20.0) * 2.0;
        float _1419 = _1418 * (_1379.x + (-0.5));
        float _1420 = _1418 * (_1379.y + (-0.5));
        float _1421 = _1418 * (_1379.z + (-0.5));
        float _1428 = exp2((_1386.w + (-0.5)) * 20.0) * 2.0;
        float _1429 = _1428 * (_1386.x + (-0.5));
        float _1430 = _1428 * (_1386.y + (-0.5));
        float _1431 = _1428 * (_1386.z + (-0.5));
        float _1432 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1433 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1434 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1435 = _1399 * 0.5;
        float _1436 = _1409 * 0.5;
        float _1437 = _1419 * 0.5;
        float _1438 = dot(vec3(_1435, _1436, _1437), vec3(_1435, _1436, _1437));
        float _1443 = (_1438 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1438);
        float _1451 = (dot(vec3(_676, _677, _678), vec3(_1443 * _1435, _1443 * _1436, _1443 * _1437)) + 1.0) * 0.5;
        float _4252 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1460 = sqrt(((_1436 * _1436) + (_1435 * _1435)) + (_1437 * _1437)) / (_1432 + 9.9999997473787516355514526367188e-06);
        float _4263 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1462 = _1461 * 2.0;
        float _1466 = (1.0 - _1461) / (_1461 + 1.0);
        float _4274 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _1476 = ((((1.0 - _1467) * (_1462 + 2.0)) * exp2(log2(isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_1462 + 1.0))) + _1467) * _1432;
        float _1477 = _1400 * 0.5;
        float _1478 = _1410 * 0.5;
        float _1479 = _1420 * 0.5;
        float _1480 = dot(vec3(_1477, _1478, _1479), vec3(_1477, _1478, _1479));
        float _1485 = (_1480 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1480);
        float _1493 = (dot(vec3(_676, _677, _678), vec3(_1485 * _1477, _1485 * _1478, _1485 * _1479)) + 1.0) * 0.5;
        float _4285 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1502 = sqrt(((_1478 * _1478) + (_1477 * _1477)) + (_1479 * _1479)) / (_1433 + 9.9999997473787516355514526367188e-06);
        float _4296 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1504 = _1503 * 2.0;
        float _1508 = (1.0 - _1503) / (_1503 + 1.0);
        float _4307 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _1518 = ((((1.0 - _1509) * (_1504 + 2.0)) * exp2(log2(isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_1504 + 1.0))) + _1509) * _1433;
        float _1519 = _1401 * 0.5;
        float _1520 = _1411 * 0.5;
        float _1521 = _1421 * 0.5;
        float _1522 = dot(vec3(_1519, _1520, _1521), vec3(_1519, _1520, _1521));
        float _1527 = (_1522 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1522);
        float _1535 = (dot(vec3(_676, _677, _678), vec3(_1527 * _1519, _1527 * _1520, _1527 * _1521)) + 1.0) * 0.5;
        float _4318 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1544 = sqrt(((_1520 * _1520) + (_1519 * _1519)) + (_1521 * _1521)) / (_1434 + 9.9999997473787516355514526367188e-06);
        float _4329 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _1546 = _1545 * 2.0;
        float _1550 = (1.0 - _1545) / (_1545 + 1.0);
        float _4340 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _1560 = ((((1.0 - _1551) * (_1546 + 2.0)) * exp2(log2(isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_1546 + 1.0))) + _1551) * _1434;
        _1568 = _1401;
        _1569 = _1400;
        _1570 = _1399;
        _1571 = _1411;
        _1572 = _1410;
        _1573 = _1409;
        _1574 = _1421;
        _1575 = _1420;
        _1576 = _1419;
        _1577 = _1434;
        _1578 = _1433;
        _1579 = _1432;
        _1580 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)));
        _1581 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)));
        _1582 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)));
    }
    else
    {
        _1568 = _1257;
        _1569 = _1257;
        _1570 = _1257;
        _1571 = _1257;
        _1572 = _1257;
        _1573 = _1257;
        _1574 = _1257;
        _1575 = _1257;
        _1576 = _1257;
        _1577 = _1257;
        _1578 = _1257;
        _1579 = _1257;
        _1580 = 0.0;
        _1581 = 0.0;
        _1582 = 0.0;
    }
    float _1592 = (cbModelParam._m0[1u].x * (_1580 - _1269)) + _1269;
    float _1593 = (cbModelParam._m0[1u].x * (_1581 - _1270)) + _1270;
    float _1594 = (cbModelParam._m0[1u].x * (_1582 - _1271)) + _1271;
    float _1615 = fma(_1594, cbSceneParam._m0[89u].z, fma(_1593, cbSceneParam._m0[89u].y, _1592 * cbSceneParam._m0[89u].x));
    float _1618 = fma(_1594, cbSceneParam._m0[90u].z, fma(_1593, cbSceneParam._m0[90u].y, _1592 * cbSceneParam._m0[90u].x));
    float _1621 = fma(_1594, cbSceneParam._m0[91u].z, fma(_1593, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1592));
    float _1636 = _862 * 0.5;
    float _1637 = _863 * 0.5;
    float _1638 = _864 * 0.5;
    float _1639 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1570, _1573, _1576, _1579));
    float _1642 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1569, _1572, _1575, _1578));
    float _1645 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1568, _1571, _1574, _1577));
    float _1679;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1652 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1256, _1260, _1263, _1266));
        float _1656 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1258, _1261, _1264, _1267));
        float _1660 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1259, _1262, _1265, _1268));
        float _1667 = dot(vec4(cbModelParam._m0[39u]), vec4(_1636, _1637, _1638, 1.0));
        _1679 = dot(vec3(isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)), isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)), isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1667) ? 0.0 : (isnan(0.0) ? _1667 : max(0.0, _1667))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1679 = 1.0;
    }
    float _1690;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1681 = dot(vec4(cbModelParam._m0[40u]), vec4(_1636, _1637, _1638, 1.0));
        _1690 = dot(vec3(isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)), isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)), isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1681) ? 0.0 : (isnan(0.0) ? _1681 : max(0.0, _1681))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1690 = 1.0;
    }
    float _1694 = (_1690 * cbModelParam._m0[1u].x) + (_1679 * (1.0 - cbModelParam._m0[1u].x));
    float _1704 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _679);
    float _1705 = isnan(_1704) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1704 : min(cbModelParam._m0[25u].z, _1704));
    float _1785;
    float _1787;
    float _1789;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1752 = fma(_926, cbModelParam._m0[13u].z, fma(_922, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _918)) + cbModelParam._m0[13u].w;
        float _1756 = fma(_926, cbModelParam._m0[14u].z, fma(_922, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _918)) + cbModelParam._m0[14u].w;
        float _1760 = fma(_926, cbModelParam._m0[15u].z, fma(_922, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _918)) + cbModelParam._m0[15u].w;
        float _1763 = fma(_864, cbModelParam._m0[13u].z, fma(_863, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _862));
        float _1766 = fma(_864, cbModelParam._m0[14u].z, fma(_863, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _862));
        float _1769 = fma(_864, cbModelParam._m0[15u].z, fma(_863, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _862));
        float _1797;
        if (_1763 > 0.0)
        {
            _1797 = abs((1.0 - _1752) / _1763);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1763 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1752 + 1.0) / _1763);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1797 = frontier_phi_17_15_ladder;
        }
        float _1968;
        if (_1766 > 0.0)
        {
            _1968 = abs((1.0 - _1756) / _1766);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1756 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1968 = frontier_phi_26_22_ladder;
        }
        float _2263;
        if (_1769 > 0.0)
        {
            _2263 = abs((1.0 - _1760) / _1769);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1769 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1760 + 1.0) / _1769);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2263 = frontier_phi_38_33_ladder;
        }
        float _2265 = isnan(_1968) ? _1797 : (isnan(_1797) ? _1968 : min(_1797, _1968));
        float _2266 = isnan(_2263) ? _2265 : (isnan(_2265) ? _2263 : min(_2265, _2263));
        float _2270 = (_2266 * _1763) + _1752;
        float _2271 = (_2266 * _1766) + _1756;
        float _2272 = (_2266 * _1769) + _1760;
        float _2273 = _2266 * 9.9999997473787516355514526367188e-05;
        float _2275 = (-1.0) - _2273;
        float _2277 = _2273 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2272 > _2277) || ((_2272 < _2275) || ((_2271 > _2277) || ((_2271 < _2275) || ((_2270 < _2275) || (_2270 > _2277))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2417 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2272, cbModelParam._m0[9u].z, fma(_2271, cbModelParam._m0[9u].y, _2270 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2272, cbModelParam._m0[10u].z, fma(_2271, cbModelParam._m0[10u].y, _2270 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2272, cbModelParam._m0[11u].z, fma(_2271, cbModelParam._m0[11u].y, _2270 * cbModelParam._m0[11u].x))), _1705);
            frontier_phi_16_38_ladder = _2417.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2417.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2417.x * cbModelParam._m0[1u].y;
        }
        _1785 = frontier_phi_16_38_ladder_2;
        _1787 = frontier_phi_16_38_ladder_1;
        _1789 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1773 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_862, _863, _864), _1705);
        _1785 = _1773.x * cbModelParam._m0[1u].y;
        _1787 = _1773.y * cbModelParam._m0[1u].y;
        _1789 = _1773.z * cbModelParam._m0[1u].y;
    }
    float _1793 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _679);
    float _1794 = isnan(_1793) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1793 : min(cbModelParam._m0[25u].w, _1793));
    float _1883;
    float _1885;
    float _1887;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1847 = fma(_926, cbModelParam._m0[21u].z, fma(_922, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _918)) + cbModelParam._m0[21u].w;
        float _1851 = fma(_926, cbModelParam._m0[22u].z, fma(_922, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _918)) + cbModelParam._m0[22u].w;
        float _1855 = fma(_926, cbModelParam._m0[23u].z, fma(_922, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _918)) + cbModelParam._m0[23u].w;
        float _1858 = fma(_864, cbModelParam._m0[21u].z, fma(_863, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _862));
        float _1861 = fma(_864, cbModelParam._m0[22u].z, fma(_863, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _862));
        float _1864 = fma(_864, cbModelParam._m0[23u].z, fma(_863, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _862));
        float _1973;
        if (_1858 > 0.0)
        {
            _1973 = abs((1.0 - _1847) / _1858);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1858 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1847 + 1.0) / _1858);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1973 = frontier_phi_28_24_ladder;
        }
        float _2290;
        if (_1861 > 0.0)
        {
            _2290 = abs((1.0 - _1851) / _1861);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1851 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2290 = frontier_phi_40_35_ladder;
        }
        float _2628;
        if (_1864 > 0.0)
        {
            _2628 = abs((1.0 - _1855) / _1864);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1864 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1855 + 1.0) / _1864);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2628 = frontier_phi_50_47_ladder;
        }
        float _2630 = isnan(_2290) ? _1973 : (isnan(_1973) ? _2290 : min(_1973, _2290));
        float _2631 = isnan(_2628) ? _2630 : (isnan(_2630) ? _2628 : min(_2630, _2628));
        float _2635 = (_2631 * _1858) + _1847;
        float _2636 = (_2631 * _1861) + _1851;
        float _2637 = (_2631 * _1864) + _1855;
        float _2638 = _2631 * 9.9999997473787516355514526367188e-05;
        float _2639 = (-1.0) - _2638;
        float _2641 = _2638 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2637 > _2641) || ((_2637 < _2639) || ((_2636 > _2641) || ((_2636 < _2639) || ((_2635 < _2639) || (_2635 > _2641))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2759 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2637, cbModelParam._m0[17u].z, fma(_2636, cbModelParam._m0[17u].y, _2635 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2637, cbModelParam._m0[18u].z, fma(_2636, cbModelParam._m0[18u].y, _2635 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2637, cbModelParam._m0[19u].z, fma(_2636, cbModelParam._m0[19u].y, _2635 * cbModelParam._m0[19u].x))), _1794);
            frontier_phi_25_50_ladder = _2759.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2759.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2759.x * cbModelParam._m0[1u].z;
        }
        _1883 = frontier_phi_25_50_ladder_2;
        _1885 = frontier_phi_25_50_ladder_1;
        _1887 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1867 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_862, _863, _864), _1794);
        _1883 = _1867.x * cbModelParam._m0[1u].z;
        _1885 = _1867.y * cbModelParam._m0[1u].z;
        _1887 = _1867.z * cbModelParam._m0[1u].z;
    }
    float _1900 = (((_889 * _838) + _890) * _854) * ((cbModelParam._m0[1u].w * (_1883 - _1785)) + _1785);
    float _1902 = (((_889 * _840) + _890) * _854) * ((cbModelParam._m0[1u].w * (_1885 - _1787)) + _1787);
    float _1904 = (((_889 * _841) + _890) * _854) * ((cbModelParam._m0[1u].w * (_1887 - _1789)) + _1789);
    float _1907 = fma(_1904, cbSceneParam._m0[89u].z, fma(_1902, cbSceneParam._m0[89u].y, _1900 * cbSceneParam._m0[89u].x));
    float _1910 = fma(_1904, cbSceneParam._m0[90u].z, fma(_1902, cbSceneParam._m0[90u].y, _1900 * cbSceneParam._m0[90u].x));
    float _1913 = fma(_1904, cbSceneParam._m0[91u].z, fma(_1902, cbSceneParam._m0[91u].y, _1900 * cbSceneParam._m0[91u].x));
    float _1947 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1951 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1955 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1959 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1960 = _1947 / _1959;
    float _1961 = _1951 / _1959;
    float _1962 = _1955 / _1959;
    float _2109;
    float _2110;
    float _2111;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1989 = ((uint(_1962 > cbSceneParam._m0[59u].y) + uint(_1962 > cbSceneParam._m0[59u].x)) + uint(_1962 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1990 = _1989 + 43u;
        uint _1998 = _1989 + 44u;
        uint _2006 = _1989 + 45u;
        uint _2014 = _1989 + 46u;
        float _2025 = fma(_1959, cbSceneParam._m0[_1990].w, fma(_1955, cbSceneParam._m0[_1990].z, fma(_1951, cbSceneParam._m0[_1990].y, _1947 * cbSceneParam._m0[_1990].x)));
        float _2029 = fma(_1959, cbSceneParam._m0[_1998].w, fma(_1955, cbSceneParam._m0[_1998].z, fma(_1951, cbSceneParam._m0[_1998].y, _1947 * cbSceneParam._m0[_1998].x)));
        float _2037 = fma(_1959, cbSceneParam._m0[_2014].w, fma(_1955, cbSceneParam._m0[_2014].z, fma(_1951, cbSceneParam._m0[_2014].y, _1947 * cbSceneParam._m0[_2014].x)));
        float _2042 = cbSceneParam._m0[33u].z * _2037;
        float _2044 = cbSceneParam._m0[33u].w * _2037;
        float _2047 = fma(_1959, cbSceneParam._m0[_2006].w, fma(_1955, cbSceneParam._m0[_2006].z, fma(_1951, cbSceneParam._m0[_2006].y, _1947 * cbSceneParam._m0[_2006].x))) / _2037;
        float _2095 = (cbSceneParam._m0[33u].x - sqrt(((_1961 * _1961) + (_1960 * _1960)) + (_1962 * _1962))) * cbSceneParam._m0[33u].y;
        float _4466 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
        float _2102 = (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2042 + _2025) / _2037, (_2044 + _2029) / _2037), _2047), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2044 + _2025) / _2037, (_2029 - _2042) / _2037), _2047), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2025 - _2042) / _2037, (_2029 - _2044) / _2037), _2047), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2025 - _2044) / _2037, (_2042 + _2029) / _2037), _2047), 0.0)).x), vec4(0.25)));
        _2109 = 1.0 - (_2102 * cbSceneParam._m0[34u].x);
        _2110 = 1.0 - (_2102 * cbSceneParam._m0[34u].y);
        _2111 = 1.0 - (_2102 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2109 = 1.0;
        _2110 = 1.0;
        _2111 = 1.0;
    }
    float _2175;
    float _2177;
    float _2179;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2163 = fma(_1959, cbSceneParam._m0[63u].w, fma(_1955, cbSceneParam._m0[63u].z, fma(_1951, cbSceneParam._m0[63u].y, _1947 * cbSceneParam._m0[63u].x)));
        float _2164 = fma(_1959, cbSceneParam._m0[60u].w, fma(_1955, cbSceneParam._m0[60u].z, fma(_1951, cbSceneParam._m0[60u].y, _1947 * cbSceneParam._m0[60u].x))) / _2163;
        float _2165 = fma(_1959, cbSceneParam._m0[61u].w, fma(_1955, cbSceneParam._m0[61u].z, fma(_1951, cbSceneParam._m0[61u].y, _1947 * cbSceneParam._m0[61u].x))) / _2163;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2164 >= cbSceneParam._m0[64u].x) && (_2165 >= cbSceneParam._m0[64u].y)) && (_2164 <= cbSceneParam._m0[64u].z)) && (_2165 <= cbSceneParam._m0[64u].w))
        {
            float _2303 = fma(_1959, cbSceneParam._m0[62u].w, fma(_1955, cbSceneParam._m0[62u].z, fma(_1951, cbSceneParam._m0[62u].y, _1947 * cbSceneParam._m0[62u].x))) / _2163;
            float _2307 = isnan(cbSceneParam._m0[41u].w) ? _2303 : (isnan(_2303) ? cbSceneParam._m0[41u].w : max(_2303, cbSceneParam._m0[41u].w));
            float _2350 = (cbSceneParam._m0[33u].x - sqrt(((_1961 * _1961) + (_1960 * _1960)) + (_1962 * _1962))) * cbSceneParam._m0[33u].y;
            float _4482 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
            float _2357 = (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2164, cbSceneParam._m0[33u].w + _2165), _2307), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2164, _2165 - cbSceneParam._m0[33u].z), _2307), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2164 - cbSceneParam._m0[33u].z, _2165 - cbSceneParam._m0[33u].w), _2307), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2164 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2165), _2307), 0.0)).x), vec4(0.25)));
            float _2361 = 1.0 - (_2357 * cbSceneParam._m0[34u].x);
            float _2362 = 1.0 - (_2357 * cbSceneParam._m0[34u].y);
            float _2363 = 1.0 - (_2357 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2363) ? _2111 : (isnan(_2111) ? _2363 : min(_2111, _2363));
            frontier_phi_37_36_ladder_1 = isnan(_2362) ? _2110 : (isnan(_2110) ? _2362 : min(_2110, _2362));
            frontier_phi_37_36_ladder_2 = isnan(_2361) ? _2109 : (isnan(_2109) ? _2361 : min(_2109, _2361));
        }
        else
        {
            frontier_phi_37_36_ladder = _2111;
            frontier_phi_37_36_ladder_1 = _2110;
            frontier_phi_37_36_ladder_2 = _2109;
        }
        _2175 = frontier_phi_37_36_ladder_2;
        _2177 = frontier_phi_37_36_ladder_1;
        _2179 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2175 = _2109;
        _2177 = _2110;
        _2179 = _2111;
    }
    uvec4 _2184 = floatBitsToUint(cbInstanceData._m0[_242 + 5u]);
    uint _2186 = _2184.x * 14u;
    uint _2187 = _2186 + 13u;
    float _2194 = _854 + (-1.0);
    float _2199 = (cbLight._m0[_2187].x * _2194) + 1.0;
    float _2200 = (cbLight._m0[_2187].y * _2194) + 1.0;
    float _2201 = (cbLight._m0[_2187].z * _2194) + 1.0;
    float _2202 = (cbLight._m0[_2187].w * _2194) + 1.0;
    uint _2203 = _2186 + 5u;
    float _2209 = isnan(1.0) ? _2200 : (isnan(_2200) ? 1.0 : min(_2200, 1.0));
    uint _2213 = _2186 + 4u;
    float _2222 = isnan(1.0) ? _2199 : (isnan(_2199) ? 1.0 : min(_2199, 1.0));
    uint _2226 = _2186 | 1u;
    float _2237 = dot(vec3(cbLight._m0[_2186].xyz), vec3(_676, _677, _678));
    float _2240 = dot(vec3(cbLight._m0[_2226].xyz), vec3(_676, _677, _678));
    float _4518 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
    float _4529 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2245 = (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0))) * 0.3183098733425140380859375;
    float _2247 = (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * 0.3183098733425140380859375;
    float _2254 = ((cbLight._m0[_2203].x * _2209) * _2247) + (((cbLight._m0[_2213].x * _2175) * _2222) * _2245);
    float _2255 = ((_2209 * cbLight._m0[_2203].y) * _2247) + (((cbLight._m0[_2213].y * _2177) * _2222) * _2245);
    float _2256 = ((_2209 * cbLight._m0[_2203].z) * _2247) + (((cbLight._m0[_2213].z * _2179) * _2222) * _2245);
    uvec4 _2260 = floatBitsToUint(cbLight._m0[_2186 + 12u]);
    bool _2262 = _2260.x == 0u;
    float _2364;
    float _2366;
    float _2368;
    if (_2262)
    {
        _2364 = _2254;
        _2366 = _2255;
        _2368 = _2256;
    }
    else
    {
        uint _2372 = _2186 + 6u;
        float _2388 = (dot(vec3(cbLight._m0[_2186 + 2u].xyz), vec3(_676, _677, _678)) * 0.5) + 0.5;
        float _2389 = _2388 * _2388;
        float _4540 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2390 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
        float _2391 = isnan(1.0) ? _2201 : (isnan(_2201) ? 1.0 : min(_2201, 1.0));
        _2364 = (((cbLight._m0[_2372].x * 0.3183098733425140380859375) * _2390) * _2391) + _2254;
        _2366 = (((cbLight._m0[_2372].y * 0.3183098733425140380859375) * _2390) * _2391) + _2255;
        _2368 = (((cbLight._m0[_2372].z * 0.3183098733425140380859375) * _2390) * _2391) + _2256;
    }
    bool _2371 = _2260.y == 0u;
    float _2426;
    float _2428;
    float _2430;
    if (_2371)
    {
        _2426 = _2364;
        _2428 = _2366;
        _2430 = _2368;
    }
    else
    {
        uint _2599 = _2186 + 7u;
        float _2615 = (dot(vec3(cbLight._m0[_2186 + 3u].xyz), vec3(_676, _677, _678)) * 0.5) + 0.5;
        float _2616 = _2615 * _2615;
        float _4556 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        float _2617 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
        float _2618 = isnan(1.0) ? _2202 : (isnan(_2202) ? 1.0 : min(_2202, 1.0));
        _2426 = (((cbLight._m0[_2599].x * 0.3183098733425140380859375) * _2617) * _2618) + _2364;
        _2428 = (((cbLight._m0[_2599].y * 0.3183098733425140380859375) * _2617) * _2618) + _2366;
        _2430 = (((cbLight._m0[_2599].z * 0.3183098733425140380859375) * _2617) * _2618) + _2368;
    }
    uint _2433 = _2186 + 8u;
    float _2446 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2186].w)) * _679) * 0.949999988079071044921875);
    float _2447 = _2446 * _2446;
    float _2448 = cbLight._m0[_2186].x + _756;
    float _2449 = cbLight._m0[_2186].y + _757;
    float _2450 = cbLight._m0[_2186].z + _758;
    float _2454 = inversesqrt(dot(vec3(_2448, _2449, _2450), vec3(_2448, _2449, _2450)));
    float _2455 = _2454 * _2448;
    float _2456 = _2454 * _2449;
    float _2457 = _2454 * _2450;
    float _2458 = dot(vec3(_676, _677, _678), vec3(cbLight._m0[_2186].xyz));
    float _4572 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
    float _2461 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
    float _4583 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _2462 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
    float _2463 = dot(vec3(_676, _677, _678), vec3(_2455, _2456, _2457));
    float _4594 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
    float _2466 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
    float _2467 = dot(vec3(cbLight._m0[_2186].xyz), vec3(_2455, _2456, _2457));
    float _4605 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
    float _2471 = _2447 * _2447;
    float _2475 = ((_2466 * _2466) * (_2471 + (-1.0))) + 1.0;
    float _2483 = exp2(log2(1.0 - (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0)))) * 5.0);
    float _2484 = 0.959999978542327880859375 - _835;
    float _2486 = 0.959999978542327880859375 - _836;
    float _2487 = 0.959999978542327880859375 - _837;
    float _2494 = 1.0 - _2447;
    float _2505 = (0.5 / (((_2462 * ((_2461 * _2494) + _2447)) + 9.9999999392252902907785028219223e-09) + (((_2462 * _2494) + _2447) * _2461))) * _2461;
    float _4616 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
    float _2507 = (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * (_2471 / ((_2475 * _2475) * 3.141590118408203125));
    uint _2521 = _2186 + 9u;
    float _2532 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2226].w)) * _679) * 0.949999988079071044921875);
    float _2533 = _2532 * _2532;
    float _2534 = cbLight._m0[_2226].x + _756;
    float _2535 = cbLight._m0[_2226].y + _757;
    float _2536 = cbLight._m0[_2226].z + _758;
    float _2540 = inversesqrt(dot(vec3(_2534, _2535, _2536), vec3(_2534, _2535, _2536)));
    float _2541 = _2540 * _2534;
    float _2542 = _2540 * _2535;
    float _2543 = _2540 * _2536;
    float _2544 = dot(vec3(_676, _677, _678), vec3(cbLight._m0[_2226].xyz));
    float _4627 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
    float _2547 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
    float _2548 = dot(vec3(_676, _677, _678), vec3(_2541, _2542, _2543));
    float _4638 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
    float _2551 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
    float _2552 = dot(vec3(cbLight._m0[_2226].xyz), vec3(_2541, _2542, _2543));
    float _4649 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
    float _2556 = _2533 * _2533;
    float _2560 = ((_2551 * _2551) * (_2556 + (-1.0))) + 1.0;
    float _2567 = exp2(log2(1.0 - (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0)))) * 5.0);
    float _2574 = 1.0 - _2533;
    float _2584 = (0.5 / (((_2462 * ((_2547 * _2574) + _2533)) + 9.9999999392252902907785028219223e-09) + (((_2462 * _2574) + _2533) * _2547))) * _2547;
    float _4660 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
    float _2586 = (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0))) * (_2556 / ((_2560 * _2560) * 3.141590118408203125));
    float _2596 = (((((_2567 * _2484) + _838) * cbLight._m0[_2521].x) * _2586) * _2209) + ((((cbLight._m0[_2433].x * _2175) * ((_2483 * _2484) + _838)) * _2507) * _2222);
    float _2597 = (((((_2567 * _2486) + _840) * cbLight._m0[_2521].y) * _2586) * _2209) + ((((cbLight._m0[_2433].y * _2177) * ((_2483 * _2486) + _840)) * _2507) * _2222);
    float _2598 = (((((_2567 * _2487) + _841) * cbLight._m0[_2521].z) * _2586) * _2209) + ((((cbLight._m0[_2433].z * _2179) * ((_2483 * _2487) + _841)) * _2507) * _2222);
    float _2654;
    float _2656;
    float _2658;
    if (_2262)
    {
        _2654 = _2596;
        _2656 = _2597;
        _2658 = _2598;
    }
    else
    {
        uint _2660 = _2186 + 2u;
        uint _2664 = _2186 + 10u;
        float _2678 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2660].w)) * _679) * 0.949999988079071044921875);
        float _2679 = _2678 * _2678;
        float _2680 = cbLight._m0[_2660].x + _756;
        float _2681 = cbLight._m0[_2660].y + _757;
        float _2682 = cbLight._m0[_2660].z + _758;
        float _2686 = inversesqrt(dot(vec3(_2680, _2681, _2682), vec3(_2680, _2681, _2682)));
        float _2687 = _2686 * _2680;
        float _2688 = _2686 * _2681;
        float _2689 = _2686 * _2682;
        float _2690 = dot(vec3(_676, _677, _678), vec3(cbLight._m0[_2660].xyz));
        float _4671 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
        float _2693 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
        float _2694 = dot(vec3(_676, _677, _678), vec3(_2687, _2688, _2689));
        float _4682 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
        float _2697 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
        float _2698 = dot(vec3(cbLight._m0[_2660].xyz), vec3(_2687, _2688, _2689));
        float _4693 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
        float _2702 = _2679 * _2679;
        float _2706 = ((_2697 * _2697) * (_2702 + (-1.0))) + 1.0;
        float _2713 = exp2(log2(1.0 - (isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0)))) * 5.0);
        float _2720 = 1.0 - _2679;
        float _2730 = (0.5 / (((_2462 * ((_2693 * _2720) + _2679)) + 9.9999999392252902907785028219223e-09) + (((_2462 * _2720) + _2679) * _2693))) * _2693;
        float _4704 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
        float _2732 = (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0))) * (_2702 / ((_2706 * _2706) * 3.141590118408203125));
        float _2733 = isnan(1.0) ? _2201 : (isnan(_2201) ? 1.0 : min(_2201, 1.0));
        _2654 = (((((_2713 * _2484) + _838) * cbLight._m0[_2664].x) * _2732) * _2733) + _2596;
        _2656 = (((((_2713 * _2486) + _840) * cbLight._m0[_2664].y) * _2732) * _2733) + _2597;
        _2658 = (((((_2713 * _2487) + _841) * cbLight._m0[_2664].z) * _2732) * _2733) + _2598;
    }
    float _2764;
    float _2766;
    float _2768;
    if (_2371)
    {
        _2764 = _2654;
        _2766 = _2656;
        _2768 = _2658;
    }
    else
    {
        uint _2775 = _2186 + 3u;
        uint _2779 = _2186 + 11u;
        float _2793 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2775].w)) * _679) * 0.949999988079071044921875);
        float _2794 = _2793 * _2793;
        float _2795 = cbLight._m0[_2775].x + _756;
        float _2796 = cbLight._m0[_2775].y + _757;
        float _2797 = cbLight._m0[_2775].z + _758;
        float _2801 = inversesqrt(dot(vec3(_2795, _2796, _2797), vec3(_2795, _2796, _2797)));
        float _2802 = _2801 * _2795;
        float _2803 = _2801 * _2796;
        float _2804 = _2801 * _2797;
        float _2805 = dot(vec3(_676, _677, _678), vec3(cbLight._m0[_2775].xyz));
        float _4720 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
        float _2808 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
        float _2809 = dot(vec3(_676, _677, _678), vec3(_2802, _2803, _2804));
        float _4731 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
        float _2812 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
        float _2813 = dot(vec3(cbLight._m0[_2775].xyz), vec3(_2802, _2803, _2804));
        float _4742 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
        float _2817 = _2794 * _2794;
        float _2821 = ((_2812 * _2812) * (_2817 + (-1.0))) + 1.0;
        float _2828 = exp2(log2(1.0 - (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0)))) * 5.0);
        float _2835 = 1.0 - _2794;
        float _2845 = (0.5 / (((_2462 * ((_2808 * _2835) + _2794)) + 9.9999999392252902907785028219223e-09) + (((_2462 * _2835) + _2794) * _2808))) * _2808;
        float _4753 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
        float _2847 = (isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * (_2817 / ((_2821 * _2821) * 3.141590118408203125));
        float _2848 = isnan(1.0) ? _2202 : (isnan(_2202) ? 1.0 : min(_2202, 1.0));
        _2764 = (((((_2828 * _2484) + _838) * cbLight._m0[_2779].x) * _2847) * _2848) + _2654;
        _2766 = (((((_2828 * _2486) + _840) * cbLight._m0[_2779].y) * _2847) * _2848) + _2656;
        _2768 = (((((_2828 * _2487) + _841) * cbLight._m0[_2779].z) * _2847) * _2848) + _2658;
    }
    float _2914;
    float _2916;
    float _2918;
    float _2920;
    float _2922;
    float _2924;
    if (_2184.y == 0u)
    {
        uvec4 _2869 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2870 = _2869.x;
        uint _2881 = uint((float(_2869.y) * floor(float(uint(cbSceneParam._m0[85u].y * _777) / _2870))) + floor(float(uint(cbSceneParam._m0[85u].x * _776) / _2870)));
        float _2891 = (log2(_1962 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2892 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
        uint _2895 = uint(isnan(14.0) ? _2892 : (isnan(_2892) ? 14.0 : min(_2892, 14.0)));
        uvec4 _2900 = texelFetch(g_lightClusterGridBuffer, int(((_2895 << 2u) + (_2881 << 6u)) >> 2u));
        uint _2901 = _2900.x;
        uint _2902 = _2869.z;
        float _2981;
        float _2983;
        float _2985;
        float _2987;
        float _2989;
        float _2991;
        if (((((1u << ((_2902 >> 4u) & 15u)) + 4294967295u) & _2901) == 0u) || ((_2902 & 240u) == 0u))
        {
            _2981 = 0.0;
            _2983 = 0.0;
            _2985 = 0.0;
            _2987 = 0.0;
            _2989 = 0.0;
            _2991 = 0.0;
        }
        else
        {
            float _2982;
            float _2984;
            float _2986;
            float _2988;
            float _2990;
            float _2992;
            float _3134 = 0.0;
            float _3135 = 0.0;
            float _3136 = 0.0;
            float _3137 = 0.0;
            float _3138 = 0.0;
            float _3139 = 0.0;
            uint _3140 = 0u;
            uint _3149;
            bool _3150;
            for (;;)
            {
                _3149 = texelFetch(g_lightClassification, int((((_2895 << 5u) + (_2881 << 9u)) + (_3140 << 2u)) >> 2u)).x;
                _3150 = _3149 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3150)
                {
                    frontier_phi_71_pred = _3139;
                    frontier_phi_71_pred_1 = _3138;
                    frontier_phi_71_pred_2 = _3137;
                    frontier_phi_71_pred_3 = _3136;
                    frontier_phi_71_pred_4 = _3135;
                    frontier_phi_71_pred_5 = _3134;
                }
                else
                {
                    float _3279;
                    float _3280;
                    float _3281;
                    float _3282;
                    float _3283;
                    float _3284;
                    uint _3285;
                    _3279 = _3134;
                    _3280 = _3135;
                    _3281 = _3136;
                    _3282 = _3137;
                    _3283 = _3138;
                    _3284 = _3139;
                    _3285 = _3149;
                    float _3206;
                    float _3207;
                    float _3208;
                    float _3209;
                    float _3210;
                    float _3211;
                    for (;;)
                    {
                        uint _3289 = uint(findLSB(_3285)) + (_3140 << 5u);
                        uint _3286 = (_3285 + 4294967295u) & _3285;
                        uint _3291 = _3289 * 48u;
                        vec4 _3305 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3291)).x, texelFetch(g_PointLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3291 + 3u)).x));
                        uint _3311 = (_3289 * 48u) + 4u;
                        vec4 _3324 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3311)).x, texelFetch(g_PointLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3311 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3311 + 3u)).x));
                        uint _3330 = (_3289 * 48u) + 8u;
                        vec3 _3341 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3330)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 2u)).x));
                        float _3345 = _3305.x - _1960;
                        float _3346 = _3305.y - _1961;
                        float _3347 = _3305.z - _1962;
                        float _3348 = dot(vec3(_3345, _3346, _3347), vec3(_3345, _3346, _3347));
                        float _3351 = inversesqrt(_3348);
                        float _3352 = _3351 * _3345;
                        float _3353 = _3351 * _3346;
                        float _3354 = _3351 * _3347;
                        float _3355 = dot(vec3(_795, _798, _801), vec3(_3352, _3353, _3354));
                        float _3360 = 1.0 - (_3348 * _3305.w);
                        float _4779 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                        float _3361 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
                        float _3362 = sqrt(_3348) * _3324.w;
                        float _3365 = 1.39999997615814208984375 / (_3362 + 1.39999997615814208984375);
                        float _3366 = _3365 * _3365;
                        float _3369 = ((1.0 - _3366) * _3355) + _3366;
                        float _3372 = _3362 * _3362;
                        float _3376 = ((isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0))) * _3361) / ((_3372 * 0.699999988079071044921875) + 1.0);
                        float _3380 = (-0.0) - _1960;
                        float _3381 = (-0.0) - _1961;
                        float _3382 = (-0.0) - _1962;
                        float _3386 = inversesqrt(dot(vec3(_3380, _3381, _3382), vec3(_3380, _3381, _3382)));
                        float _3387 = _3386 * _3380;
                        float _3388 = _3386 * _3381;
                        float _3389 = _3386 * _3382;
                        float _3396 = exp2(log2(1.0 / ((_3372 * 3.5) + 5.0)) * 0.25);
                        float _3397 = 1.0 - _870;
                        float _3404 = sqrt(1.0 - ((1.0 - (_3397 * _3397)) * (1.0 - (_3396 * _3396))));
                        float _3405 = _3404 * _3404;
                        float _3406 = _3405 * _3405;
                        float _3407 = _3387 + _3352;
                        float _3408 = _3388 + _3353;
                        float _3409 = _3389 + _3354;
                        float _3413 = inversesqrt(dot(vec3(_3407, _3408, _3409), vec3(_3407, _3408, _3409)));
                        float _3417 = dot(vec3(_795, _798, _801), vec3(_3387, _3388, _3389));
                        float _4795 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                        float _3420 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
                        float _3421 = dot(vec3(_795, _798, _801), vec3(_3413 * _3407, _3413 * _3408, _3413 * _3409));
                        float _4806 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                        float _3424 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
                        float _3428 = ((_3424 * _3424) * (_3406 + (-1.0))) + 1.0;
                        float _3429 = _3365 * _3405;
                        float _3430 = _3429 * _3429;
                        float _3433 = ((1.0 - _3430) * _3355) + _3430;
                        float _4817 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                        float _3434 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
                        float _3435 = 1.0 - _3405;
                        float _3445 = (0.5 / (((_3434 * ((_3420 * _3435) + _3405)) + 9.9999999392252902907785028219223e-09) + (((_3434 * _3435) + _3405) * _3420))) * _3434;
                        float _4828 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                        float _3456 = (((_3406 * 3.1415927410125732421875) * (isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0)))) / ((_3428 * _3428) * ((_3372 * 2.1991131305694580078125) + 3.141590118408203125))) * _3361;
                        _3209 = (_3376 * _3324.x) + _3282;
                        _3210 = (_3376 * _3324.y) + _3283;
                        _3211 = (_3376 * _3324.z) + _3284;
                        _3206 = (_3456 * _3341.x) + _3279;
                        _3207 = (_3456 * _3341.y) + _3280;
                        _3208 = (_3456 * _3341.z) + _3281;
                        if (_3286 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3279 = _3206;
                            _3280 = _3207;
                            _3281 = _3208;
                            _3282 = _3209;
                            _3283 = _3210;
                            _3284 = _3211;
                            _3285 = _3286;
                        }
                    }
                    frontier_phi_71_pred = _3211;
                    frontier_phi_71_pred_1 = _3210;
                    frontier_phi_71_pred_2 = _3209;
                    frontier_phi_71_pred_3 = _3208;
                    frontier_phi_71_pred_4 = _3207;
                    frontier_phi_71_pred_5 = _3206;
                }
                _2992 = frontier_phi_71_pred;
                _2990 = frontier_phi_71_pred_1;
                _2988 = frontier_phi_71_pred_2;
                _2986 = frontier_phi_71_pred_3;
                _2984 = frontier_phi_71_pred_4;
                _2982 = frontier_phi_71_pred_5;
                uint _3141 = _3140 + 1u;
                if (_3141 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3134 = _2982;
                    _3135 = _2984;
                    _3136 = _2986;
                    _3137 = _2988;
                    _3138 = _2990;
                    _3139 = _2992;
                    _3140 = _3141;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2981 = _2982;
            _2983 = _2984;
            _2985 = _2986;
            _2987 = _2988;
            _2989 = _2990;
            _2991 = _2992;
        }
        uvec4 _2995 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2996 = _2995.z;
        uint _2998 = (_2996 >> 8u) & 15u;
        float _3102;
        float _3104;
        float _3106;
        float _3108;
        float _3110;
        float _3112;
        if (((4294967295u << _2998) & _2901) == 0u)
        {
            _3102 = _2981;
            _3104 = _2983;
            _3106 = _2985;
            _3108 = _2987;
            _3110 = _2989;
            _3112 = _2991;
        }
        else
        {
            float _3127 = inversesqrt(dot(vec3(_1960, _1961, _1962), vec3(_1960, _1961, _1962)));
            float _3128 = _3127 * _1960;
            float _3129 = _3127 * _1961;
            float _3130 = _3127 * _1962;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2998 < ((_2996 >> 12u) & 15u))
            {
                float _3103;
                float _3105;
                float _3107;
                float _3109;
                float _3111;
                float _3113;
                float _3262 = _2981;
                float _3263 = _2983;
                float _3264 = _2985;
                float _3265 = _2987;
                float _3266 = _2989;
                float _3267 = _2991;
                uint _3268 = _2998;
                uint _3277;
                bool _3278;
                for (;;)
                {
                    _3277 = texelFetch(g_lightClassification, int((((_2895 << 5u) + (_2881 << 9u)) + (_3268 << 2u)) >> 2u)).x;
                    _3278 = _3277 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3278)
                    {
                        frontier_phi_82_pred = _3267;
                        frontier_phi_82_pred_1 = _3266;
                        frontier_phi_82_pred_2 = _3265;
                        frontier_phi_82_pred_3 = _3264;
                        frontier_phi_82_pred_4 = _3263;
                        frontier_phi_82_pred_5 = _3262;
                    }
                    else
                    {
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3764;
                        float _3765;
                        float _3766;
                        float _3767;
                        float _3768;
                        float _3769;
                        float _3483 = _3262;
                        float _3484 = _3263;
                        float _3485 = _3264;
                        float _3486 = _3265;
                        float _3487 = _3266;
                        float _3488 = _3267;
                        uint _3489 = _3277;
                        uint _3490;
                        vec4 _3515;
                        float _3516;
                        vec4 _3531;
                        vec3 _3543;
                        vec4 _3558;
                        vec4 _3574;
                        float _3620;
                        bool _3621;
                        for (;;)
                        {
                            uint _3500 = ((_3268 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3489));
                            _3490 = (_3489 + 4294967295u) & _3489;
                            uint _3502 = _3500 * 40u;
                            _3515 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3502)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 3u)).x));
                            _3516 = _3515.w;
                            uint _3518 = (_3500 * 40u) + 4u;
                            _3531 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3518)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 3u)).x));
                            uint _3533 = (_3500 * 40u) + 8u;
                            _3543 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3533)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 2u)).x));
                            uint _3545 = (_3500 * 40u) + 16u;
                            _3558 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3545)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 3u)).x));
                            uint _3561 = (_3500 * 40u) + 20u;
                            _3574 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3561)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 3u)).x));
                            uint _3576 = (_3500 * 40u) + 24u;
                            vec4 _3589 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3576)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 3u)).x));
                            uint _3595 = (_3500 * 40u) + 28u;
                            vec4 _3608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 3u)).x));
                            _3620 = fma(_1962, _3608.z, fma(_1961, _3608.y, _3608.x * _1960)) + _3608.w;
                            _3621 = !((fma(_1962, _3589.z, fma(_1961, _3589.y, _3589.x * _1960)) + _3589.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3621)
                            {
                                float _3648 = _3515.x - _1960;
                                float _3649 = _3515.y - _1961;
                                float _3650 = _3515.z - _1962;
                                float _3651 = dot(vec3(_3648, _3649, _3650), vec3(_3648, _3649, _3650));
                                float _3654 = inversesqrt(_3651);
                                float _3655 = _3654 * _3648;
                                float _3656 = _3654 * _3649;
                                float _3657 = _3654 * _3650;
                                float _3661 = 1.0 - (_3651 / (_3516 * _3516));
                                float _4839 = isnan(0.0) ? _3661 : (isnan(_3661) ? 0.0 : max(_3661, 0.0));
                                float _3662 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
                                float _3666 = sqrt(_3651) * _3531.w;
                                float _3668 = 1.39999997615814208984375 / (_3666 + 1.39999997615814208984375);
                                float _3669 = _3668 * _3668;
                                float _3672 = ((1.0 - _3669) * dot(vec3(_3655, _3656, _3657), vec3(_795, _798, _801))) + _3669;
                                float _3675 = _3666 * _3666;
                                float _3679 = (fma(_1962, _3558.z, fma(_1961, _3558.y, _3558.x * _1960)) + _3558.w) / _3620;
                                float _3680 = (fma(_1962, _3574.z, fma(_1961, _3574.y, _3574.x * _1960)) + _3574.w) / _3620;
                                float _3684 = 1.0 - dot(vec2(_3679, _3680), vec2(_3679, _3680));
                                float _4855 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                                float _3685 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
                                float _3686 = _3685 * (((isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0))) * _3662) / ((_3675 * 0.699999988079071044921875) + 1.0));
                                float _3698 = exp2(log2(1.0 / ((_3675 * 3.5) + 5.0)) * 0.25);
                                float _3699 = 1.0 - _870;
                                float _3706 = sqrt(1.0 - ((1.0 - (_3699 * _3699)) * (1.0 - (_3698 * _3698))));
                                float _3707 = _3706 * _3706;
                                float _3708 = _3707 * _3707;
                                float _3709 = _3655 - _3128;
                                float _3710 = _3656 - _3129;
                                float _3711 = _3657 - _3130;
                                float _3715 = inversesqrt(dot(vec3(_3709, _3710, _3711), vec3(_3709, _3710, _3711)));
                                float _3719 = dot(vec3(_795, _798, _801), vec3((-0.0) - _3128, (-0.0) - _3129, (-0.0) - _3130));
                                float _4866 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                                float _3722 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
                                float _3723 = dot(vec3(_795, _798, _801), vec3(_3715 * _3709, _3715 * _3710, _3715 * _3711));
                                float _4877 = isnan(0.0) ? _3723 : (isnan(_3723) ? 0.0 : max(_3723, 0.0));
                                float _3726 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
                                float _3730 = ((_3726 * _3726) * (_3708 + (-1.0))) + 1.0;
                                float _3731 = _3668 * _3707;
                                float _3732 = _3731 * _3731;
                                float _3738 = ((1.0 - _3732) * dot(vec3(_795, _798, _801), vec3(_3655, _3656, _3657))) + _3732;
                                float _4888 = isnan(0.0) ? _3738 : (isnan(_3738) ? 0.0 : max(_3738, 0.0));
                                float _3739 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
                                float _3740 = 1.0 - _3707;
                                float _3750 = (0.5 / (((_3739 * ((_3722 * _3740) + _3707)) + 9.9999999392252902907785028219223e-09) + (((_3739 * _3740) + _3707) * _3722))) * _3739;
                                float _4899 = isnan(0.0) ? _3750 : (isnan(_3750) ? 0.0 : max(_3750, 0.0));
                                float _3760 = (_3685 * _3662) * (((_3708 * 3.1415927410125732421875) * (isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0)))) / ((_3730 * _3730) * ((_3675 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3686 * _3531.z;
                                frontier_phi_88_pred_1 = _3686 * _3531.y;
                                frontier_phi_88_pred_2 = _3686 * _3531.x;
                                frontier_phi_88_pred_3 = _3760 * _3543.z;
                                frontier_phi_88_pred_4 = _3760 * _3543.y;
                                frontier_phi_88_pred_5 = _3760 * _3543.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3769 = frontier_phi_88_pred;
                            _3768 = frontier_phi_88_pred_1;
                            _3767 = frontier_phi_88_pred_2;
                            _3766 = frontier_phi_88_pred_3;
                            _3765 = frontier_phi_88_pred_4;
                            _3764 = frontier_phi_88_pred_5;
                            _3473 = _3767 + _3486;
                            _3474 = _3768 + _3487;
                            _3475 = _3769 + _3488;
                            _3470 = _3764 + _3483;
                            _3471 = _3765 + _3484;
                            _3472 = _3766 + _3485;
                            if (_3490 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3483 = _3470;
                                _3484 = _3471;
                                _3485 = _3472;
                                _3486 = _3473;
                                _3487 = _3474;
                                _3488 = _3475;
                                _3489 = _3490;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3475;
                        frontier_phi_82_pred_1 = _3474;
                        frontier_phi_82_pred_2 = _3473;
                        frontier_phi_82_pred_3 = _3472;
                        frontier_phi_82_pred_4 = _3471;
                        frontier_phi_82_pred_5 = _3470;
                    }
                    _3113 = frontier_phi_82_pred;
                    _3111 = frontier_phi_82_pred_1;
                    _3109 = frontier_phi_82_pred_2;
                    _3107 = frontier_phi_82_pred_3;
                    _3105 = frontier_phi_82_pred_4;
                    _3103 = frontier_phi_82_pred_5;
                    uint _3269 = _3268 + 1u;
                    if (_3269 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3262 = _3103;
                        _3263 = _3105;
                        _3264 = _3107;
                        _3265 = _3109;
                        _3266 = _3111;
                        _3267 = _3113;
                        _3268 = _3269;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3109;
                frontier_phi_63_64_ladder_1 = _3113;
                frontier_phi_63_64_ladder_2 = _3111;
                frontier_phi_63_64_ladder_3 = _3107;
                frontier_phi_63_64_ladder_4 = _3105;
                frontier_phi_63_64_ladder_5 = _3103;
            }
            else
            {
                frontier_phi_63_64_ladder = _2987;
                frontier_phi_63_64_ladder_1 = _2991;
                frontier_phi_63_64_ladder_2 = _2989;
                frontier_phi_63_64_ladder_3 = _2985;
                frontier_phi_63_64_ladder_4 = _2983;
                frontier_phi_63_64_ladder_5 = _2981;
            }
            _3102 = frontier_phi_63_64_ladder_5;
            _3104 = frontier_phi_63_64_ladder_4;
            _3106 = frontier_phi_63_64_ladder_3;
            _3108 = frontier_phi_63_64_ladder;
            _3110 = frontier_phi_63_64_ladder_2;
            _3112 = frontier_phi_63_64_ladder_1;
        }
        float _3117 = isnan(1.0) ? _854 : (isnan(_854) ? 1.0 : min(_854, 1.0));
        _2914 = (_3117 * _3108) + _2426;
        _2916 = (_3117 * _3110) + _2428;
        _2918 = (_3117 * _3112) + _2430;
        _2920 = ((_3102 * _838) * _3117) + _2764;
        _2922 = ((_3104 * _840) * _3117) + _2766;
        _2924 = ((_3106 * _841) * _3117) + _2768;
    }
    else
    {
        _2914 = _2426;
        _2916 = _2428;
        _2918 = _2430;
        _2920 = _2764;
        _2922 = _2766;
        _2924 = _2768;
    }
    float _4915 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _4926 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _4937 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _2941 = ((isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0))) * (_2914 + ((isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))) * _854))) + ((_2920 + ((isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0))) * _1694)) * cbPerFrame._m0[3u].x);
    float _2942 = ((isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0))) * (_2916 + ((isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))) * _854))) + ((_2922 + ((isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0))) * _1694)) * cbPerFrame._m0[3u].x);
    float _2943 = ((isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0))) * (_2918 + ((isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0))) * _854))) + ((_2924 + ((isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0))) * _1694)) * cbPerFrame._m0[3u].x);
    uint _2944 = _242 + 6u;
    float _2952 = _776 / cbSceneParam._m0[86u].x;
    float _2953 = _777 / cbSceneParam._m0[86u].y;
    vec4 _2967 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2952, _2953, (log2((isnan(cbSceneParam._m0[77u].w) ? _698 : (isnan(_698) ? cbSceneParam._m0[77u].w : min(_698, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2969 = _2967.x;
    float _2970 = _2967.y;
    float _2971 = _2967.z;
    float _2972 = _2967.w;
    float _3044;
    float _3046;
    float _3048;
    float _3050;
    if (_698 > cbSceneParam._m0[78u].w)
    {
        float _3006 = isnan(_698) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _698 : min(cbSceneParam._m0[80u].w, _698));
        float _3007 = _3006 / _698;
        float _3018 = _3007 * _749;
        float _3019 = _750 * _3007;
        float _3020 = (-0.0) - _3019;
        float _3022 = _3007 * _751;
        float _3024 = (cbSceneParam._m0[77u].w * _3020) / _3006;
        float _3025 = _3024 + cbSceneParam._m0[79u].w;
        float _3026 = cbSceneParam._m0[79u].w - _3019;
        float _3032 = sqrt(((_3018 * _3018) + (_3019 * _3019)) + (_3022 * _3022));
        float _3035 = (1.0 - (cbSceneParam._m0[77u].w / _3006)) * _3032;
        float _3040 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3042 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3219;
        if (abs((_3020 - _3024) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3219 = ((((_3025 > 0.0) ? exp2(_3040 * _3025) : (2.0 - exp2(_3042 * _3025))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3035;
        }
        else
        {
            float _3163 = 1.0 / cbSceneParam._m0[80u].x;
            float _3164 = isnan(_3026) ? _3025 : (isnan(_3025) ? _3026 : max(_3025, _3026));
            float _3165 = isnan(_3026) ? _3025 : (isnan(_3025) ? _3026 : min(_3025, _3026));
            float _3174 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : min(_3164, 0.0));
            float _3175 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : min(_3165, 0.0));
            _3219 = ((abs(_3032 / _3020) * cbSceneParam._m0[80u].y) * ((((_3174 - _3175) * 2.0) - ((exp2(_3040 * (isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0)))) - exp2(_3040 * (isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0))))) * _3163)) - ((exp2(_3042 * _3174) - exp2(_3042 * _3175)) * _3163))) + (_3035 * cbSceneParam._m0[80u].z);
        }
        vec4 _3221 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2952, _2953, 1.0), 0.0);
        float _3230 = exp2((_3219 * (-1.44269502162933349609375)) * (1.0 - _3221.w));
        float _3231 = log2(_3230);
        float _3247 = log2(_2972);
        _3044 = (exp2(_3247 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3231 * cbSceneParam._m0[78u].x)) * _3221.x) / cbSceneParam._m0[78u].x)) + _2969;
        _3046 = (exp2(_3247 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3231 * cbSceneParam._m0[78u].y)) * _3221.y) / cbSceneParam._m0[78u].y)) + _2970;
        _3048 = (exp2(_3247 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3231 * cbSceneParam._m0[78u].z)) * _3221.z) / cbSceneParam._m0[78u].z)) + _2971;
        _3050 = _3230 * _2972;
    }
    else
    {
        _3044 = _2969;
        _3046 = _2970;
        _3048 = _2971;
        _3050 = _2972;
    }
    bool _3257;
    vec4 _3060;
    vec4 _3082;
    float _3084;
    float _3088;
    float _3089;
    float _3090;
    float _3091;
    bool _3101;
    for (;;)
    {
        _3060 = cbMatDynParam._m0[0u];
        float _3062 = roundEven(_3060.y);
        bool _3063 = _3062 == 3.0;
        float _3064 = log2(_3050);
        float _3071 = exp2(_3064 * cbSceneParam._m0[78u].x) * _2941;
        float _3072 = exp2(_3064 * cbSceneParam._m0[78u].y) * _2942;
        float _3073 = exp2(_3064 * cbSceneParam._m0[78u].z) * _2943;
        float _3080 = _765 + (-0.5);
        _3082 = cbMtdParam._m0[1u];
        _3084 = _3082.y * _3080;
        float _3087 = (_3062 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3088 = _3087 * (_3063 ? _3071 : (_3071 + (cbSceneParam._m0[72u].w * _3044)));
        _3089 = _3087 * (_3063 ? _3072 : (_3072 + (cbSceneParam._m0[72u].w * _3046)));
        _3090 = _3087 * (_3063 ? _3073 : (_3073 + (cbSceneParam._m0[72u].w * _3048)));
        _3091 = _3080 * 0.999000012874603271484375;
        _3101 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3101)
        {
            if ((cbInstanceData._m0[_242 + 7u].x + _3091) < 0.5)
            {
                _3257 = true;
                break;
            }
        }
        uint _3198 = _814 + uint(_3060.w);
        if ((cbInstanceData._m0[_3198].w < 1.0) && ((cbInstanceData._m0[_3198].w + _3091) < 0.5))
        {
            _3257 = true;
            break;
        }
        if ((_3084 + 1.0) < _3082.x)
        {
            _3257 = true;
            break;
        }
        _3257 = false;
        break;
    }
    float _3461;
    if (_3257)
    {
        discard_state = true;
        _3461 = 0.0;
    }
    else
    {
        _3461 = cbInstanceData._m0[_2944].w;
    }
    SV_Target.x = _3088;
    SV_Target.y = _3089;
    SV_Target.z = _3090;
    SV_Target.w = _3461;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2944].w;
    discard_exit();
}


