#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1283;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = _242 * NORMAL.x;
    float _244 = _242 * NORMAL.y;
    float _245 = _242 * NORMAL.z;
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _360 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _362 = _360.x;
    float _374 = dot(vec4(_362, _360.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _391 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_362 - _374) * cbMtdParam._m0[24u].y) + _374) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3893 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _392 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _399 = (_392 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _400 = (_392 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _401 = (_392 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _414 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _274) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _275) + cbTextureTilingScale._m0[20u].w));
    vec4 _439 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _456 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _458 = _456.x;
    float _459 = _456.y;
    float _460 = _456.z;
    float _469 = ((_439.z - _460) * _392) + _460;
    float _472 = ((((_439.x - _458) * _392) + _458) * 2.0) + (-1.0);
    float _473 = ((((_439.y - _459) * _392) + _459) * 2.0) + (-1.0);
    float _474 = dot(vec2(_472, _473), vec2(_472, _473));
    float _3904 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _479 = sqrt(1.0 - (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))));
    float _484 = _472 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_414.x * 2.0) + (-1.0)));
    float _485 = _473 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_414.y * 2.0) + (-1.0)));
    vec4 _498 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _512 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _514 = _512.x;
    float _515 = 1.0 - _514;
    float _543 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_514 - _515) * cbMtdParam._m0[24u].w) + _515) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3915 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _544 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _552 = ((((cbMtdParam._m0[10u].x - _399) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _544) + _399;
    float _553 = ((((cbMtdParam._m0[10u].y - _400) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _544) + _400;
    float _554 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _401)) * _544) + _401;
    vec4 _566 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _580 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _582 = _580.x;
    float _600 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _274) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _275) + cbTextureTilingScale._m0[9u].w)).x - _582) * _392) + _582;
    float _604 = ((_566.x - _600) * cbMtdParam._m0[19u].z) + _600;
    float _606 = _604 - (_604 * _544);
    float _611 = (((_414.z - _469) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _469;
    float _615 = ((cbMtdParam._m0[23u].y - _611) * _544) + _611;
    vec4 _634 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _636 = _634.x;
    float _637 = _634.y;
    float _641 = dot(vec4(cbMtdParam._m0[29u].yzw, 0.0), vec4(_243, _244, _245, 0.0));
    vec4 _656 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _274) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _275) + cbTextureTilingScale._m0[18u].w));
    float _658 = _656.x;
    float _663 = fract(_656.w + cbPerFrame._m0[22u].x);
    float _665 = (1.0 - _663) * _658;
    float _670 = ((_663 + (-1.0)) + _658) * 9.0;
    float _672 = ((_658 + (-1.0)) + _663) * 9.0;
    float _673 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _674 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _688 = (_665 * ((_656.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _673 : (isnan(_673) ? 3.0 : min(_673, 3.0))) * 3.1415927410125732421875);
    float _690 = (_665 * ((_656.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _674 : (isnan(_674) ? 3.0 : min(_674, 3.0))) * 3.1415927410125732421875);
    float _694 = inversesqrt(dot(vec3(_688, _690, 1.0), vec3(_688, _690, 1.0)));
    float _710 = (((((0.5 - _636) + ((_688 * 0.5) * _694)) * _641) + _636) * 2.0) + (-1.0);
    float _711 = (((((0.5 - _637) + ((_694 * 0.5) * _690)) * _641) + _637) * 2.0) + (-1.0);
    float _712 = dot(vec2(_710, _711), vec2(_710, _711));
    float _3946 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _728 = ((((cbMtdParam._m0[22u].z * _484) - _484) + _710) * _544) + _484;
    float _729 = ((((cbMtdParam._m0[22u].z * _485) - _485) + _711) * _544) + _485;
    float _730 = (_544 * (sqrt(1.0 - (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0)))) - _479)) + _479;
    float _732 = cbMtdParam._m0[22u].x + _498.w;
    float _735 = fma(_730, _243, fma(_729, _249 * TANGENT.x, (_235 * _227) * _728));
    float _738 = fma(_730, _244, fma(_729, _249 * TANGENT.y, (_235 * _228) * _728));
    float _741 = fma(_730, _245, fma(_729, _249 * TANGENT.z, (_235 * _229) * _728));
    float _745 = inversesqrt(dot(vec3(_735, _738, _741), vec3(_735, _738, _741)));
    float _746 = _745 * _735;
    float _747 = _745 * _738;
    float _748 = _745 * _741;
    float _3957 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _749 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _3968 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _3979 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _3990 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _4001 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _4012 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _754 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    float _768 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _808 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _818 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _808);
    float _819 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _808);
    float _820 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _808);
    float _824 = inversesqrt(dot(vec3(_818, _819, _820), vec3(_818, _819, _820)));
    float _825 = _818 * _824;
    float _826 = _819 * _824;
    float _827 = _820 * _824;
    float _833 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _834 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _852 = fma(_748, cbSceneParam._m0[5u].z, fma(_747, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _746));
    float _855 = fma(_748, cbSceneParam._m0[6u].z, fma(_747, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _746));
    float _858 = fma(_748, cbSceneParam._m0[7u].z, fma(_747, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _746));
    uint _872 = (_255 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _878 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0)))) * cbInstanceData._m0[_872].x;
    float _879 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0)))) * cbInstanceData._m0[_872].y;
    float _880 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0)))) * cbInstanceData._m0[_872].z;
    float _4023 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _881 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
    float _4034 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _882 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _4045 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _883 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _884 = 1.0 - _754;
    float _885 = _881 * _884;
    float _886 = _882 * _884;
    float _887 = _883 * _884;
    float _892 = (_881 + (-0.039999999105930328369140625)) * _754;
    float _893 = (_882 + (-0.039999999105930328369140625)) * _754;
    float _894 = (_883 + (-0.039999999105930328369140625)) * _754;
    float _895 = _892 + 0.039999999105930328369140625;
    float _897 = _893 + 0.039999999105930328369140625;
    float _898 = _894 + 0.039999999105930328369140625;
    vec4 _907 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _833, cbSceneParam._m0[86u].y * _834));
    float _911 = ((isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * TEXCOORD_5.w) * _907.x;
    float _912 = dot(vec3(_746, _747, _748), vec3(_825, _826, _827));
    float _915 = _912 * 2.0;
    float _919 = (_915 * _746) - _825;
    float _920 = (_915 * _747) - _826;
    float _921 = (_915 * _748) - _827;
    float _925 = abs(dot(vec3(_825, _826, _827), vec3(_746, _747, _748)));
    float _4056 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _927 = sqrt(_749);
    float _939 = exp2((_927 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_927 * 3.0));
    float _945 = (1.0 - _939) * ((_927 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _946 = _939 * _927;
    float _974 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _978 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _982 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1282;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1008 = fma(_982, cbModelParam._m0[26u].z, fma(_978, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _974));
        float _1012 = fma(_982, cbModelParam._m0[27u].z, fma(_978, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _974));
        float _1016 = fma(_982, cbModelParam._m0[28u].z, fma(_978, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _974));
        float _1040 = _974 + _746;
        float _1041 = _978 + _747;
        float _1042 = _982 + _748;
        float _1052 = fma(_1042, cbModelParam._m0[26u].z, fma(_1041, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1040)) - _1008;
        float _1053 = fma(_1042, cbModelParam._m0[27u].z, fma(_1041, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1040)) - _1012;
        float _1054 = fma(_1042, cbModelParam._m0[28u].z, fma(_1041, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1040)) - _1016;
        float _1058 = inversesqrt(dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054)));
        float _1071 = ((_1058 * _1052) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1008 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1072 = ((_1058 * _1053) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1012 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1073 = ((_1058 * _1054) / cbModelParam._m0[34u].z) + ((((((_1016 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        float _1110 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1076.x + (-0.5));
        float _1112 = _1110 * (_1076.y + (-0.5));
        float _1113 = _1110 * (_1076.z + (-0.5));
        float _1120 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1083.x + (-0.5));
        float _1122 = _1120 * (_1083.y + (-0.5));
        float _1123 = _1120 * (_1083.z + (-0.5));
        float _1130 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1090.x + (-0.5));
        float _1132 = _1130 * (_1090.y + (-0.5));
        float _1133 = _1130 * (_1090.z + (-0.5));
        float _1140 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1141 = _1140 * (_1097.x + (-0.5));
        float _1142 = _1140 * (_1097.y + (-0.5));
        float _1143 = _1140 * (_1097.z + (-0.5));
        float _1144 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1145 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1146 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1147 = _1111 * 0.5;
        float _1148 = _1121 * 0.5;
        float _1149 = _1131 * 0.5;
        float _1150 = dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149));
        float _1155 = (_1150 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1150);
        float _1164 = (dot(vec3(_746, _747, _748), vec3(_1155 * _1147, _1155 * _1148, _1155 * _1149)) + 1.0) * 0.5;
        float _4082 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1174 = sqrt(((_1148 * _1148) + (_1147 * _1147)) + (_1149 * _1149)) / (_1144 + 9.9999997473787516355514526367188e-06);
        float _4093 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1176 = _1175 * 2.0;
        float _1180 = (1.0 - _1175) / (_1175 + 1.0);
        float _4104 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1190 = ((((1.0 - _1181) * (_1176 + 2.0)) * exp2(log2(isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_1176 + 1.0))) + _1181) * _1144;
        float _1191 = _1112 * 0.5;
        float _1192 = _1122 * 0.5;
        float _1193 = _1132 * 0.5;
        float _1194 = dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193));
        float _1199 = (_1194 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1194);
        float _1207 = (dot(vec3(_746, _747, _748), vec3(_1199 * _1191, _1199 * _1192, _1199 * _1193)) + 1.0) * 0.5;
        float _4115 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1216 = sqrt(((_1192 * _1192) + (_1191 * _1191)) + (_1193 * _1193)) / (_1145 + 9.9999997473787516355514526367188e-06);
        float _4126 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1218 = _1217 * 2.0;
        float _1222 = (1.0 - _1217) / (_1217 + 1.0);
        float _4137 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1232 = ((((1.0 - _1223) * (_1218 + 2.0)) * exp2(log2(isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * (_1218 + 1.0))) + _1223) * _1145;
        float _1233 = _1113 * 0.5;
        float _1234 = _1123 * 0.5;
        float _1235 = _1133 * 0.5;
        float _1236 = dot(vec3(_1233, _1234, _1235), vec3(_1233, _1234, _1235));
        float _1241 = (_1236 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1236);
        float _1249 = (dot(vec3(_746, _747, _748), vec3(_1241 * _1233, _1241 * _1234, _1241 * _1235)) + 1.0) * 0.5;
        float _4148 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1258 = sqrt(((_1234 * _1234) + (_1233 * _1233)) + (_1235 * _1235)) / (_1146 + 9.9999997473787516355514526367188e-06);
        float _4159 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1260 = _1259 * 2.0;
        float _1264 = (1.0 - _1259) / (_1259 + 1.0);
        float _4170 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1274 = ((((1.0 - _1265) * (_1260 + 2.0)) * exp2(log2(isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_1260 + 1.0))) + _1265) * _1146;
        _1282 = _1113;
        _1284 = _1112;
        _1285 = _1111;
        _1286 = _1123;
        _1287 = _1122;
        _1288 = _1121;
        _1289 = _1133;
        _1290 = _1132;
        _1291 = _1131;
        _1292 = _1146;
        _1293 = _1145;
        _1294 = _1144;
        _1295 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)));
        _1296 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)));
        _1297 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)));
    }
    else
    {
        _1282 = _1283;
        _1284 = _1283;
        _1285 = _1283;
        _1286 = _1283;
        _1287 = _1283;
        _1288 = _1283;
        _1289 = _1283;
        _1290 = _1283;
        _1291 = _1283;
        _1292 = _1283;
        _1293 = _1283;
        _1294 = _1283;
        _1295 = 0.0;
        _1296 = 0.0;
        _1297 = 0.0;
    }
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1322 = fma(_982, cbModelParam._m0[30u].z, fma(_978, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _974));
        float _1326 = fma(_982, cbModelParam._m0[31u].z, fma(_978, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _974));
        float _1330 = fma(_982, cbModelParam._m0[32u].z, fma(_978, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _974));
        float _1353 = _974 + _746;
        float _1354 = _978 + _747;
        float _1355 = _982 + _748;
        float _1365 = fma(_1355, cbModelParam._m0[30u].z, fma(_1354, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1353)) - _1322;
        float _1366 = fma(_1355, cbModelParam._m0[31u].z, fma(_1354, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1353)) - _1326;
        float _1367 = fma(_1355, cbModelParam._m0[32u].z, fma(_1354, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1353)) - _1330;
        float _1371 = inversesqrt(dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367)));
        float _1384 = ((_1371 * _1365) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1322 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1385 = ((_1371 * _1366) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1326 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1386 = ((_1371 * _1367) / cbModelParam._m0[35u].z) + ((((((_1330 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1388 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        vec4 _1395 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        vec4 _1402 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        vec4 _1409 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        float _1421 = exp2((_1388.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1388.x + (-0.5));
        float _1423 = _1421 * (_1388.y + (-0.5));
        float _1424 = _1421 * (_1388.z + (-0.5));
        float _1431 = exp2((_1395.w + (-0.5)) * 20.0) * 2.0;
        float _1432 = _1431 * (_1395.x + (-0.5));
        float _1433 = _1431 * (_1395.y + (-0.5));
        float _1434 = _1431 * (_1395.z + (-0.5));
        float _1441 = exp2((_1402.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1402.x + (-0.5));
        float _1443 = _1441 * (_1402.y + (-0.5));
        float _1444 = _1441 * (_1402.z + (-0.5));
        float _1451 = exp2((_1409.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1409.x + (-0.5));
        float _1453 = _1451 * (_1409.y + (-0.5));
        float _1454 = _1451 * (_1409.z + (-0.5));
        float _1455 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1456 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1457 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1458 = _1422 * 0.5;
        float _1459 = _1432 * 0.5;
        float _1460 = _1442 * 0.5;
        float _1461 = dot(vec3(_1458, _1459, _1460), vec3(_1458, _1459, _1460));
        float _1466 = (_1461 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1461);
        float _1474 = (dot(vec3(_746, _747, _748), vec3(_1466 * _1458, _1466 * _1459, _1466 * _1460)) + 1.0) * 0.5;
        float _4211 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1483 = sqrt(((_1459 * _1459) + (_1458 * _1458)) + (_1460 * _1460)) / (_1455 + 9.9999997473787516355514526367188e-06);
        float _4222 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1485 = _1484 * 2.0;
        float _1489 = (1.0 - _1484) / (_1484 + 1.0);
        float _4233 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1499 = ((((1.0 - _1490) * (_1485 + 2.0)) * exp2(log2(isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_1485 + 1.0))) + _1490) * _1455;
        float _1500 = _1423 * 0.5;
        float _1501 = _1433 * 0.5;
        float _1502 = _1443 * 0.5;
        float _1503 = dot(vec3(_1500, _1501, _1502), vec3(_1500, _1501, _1502));
        float _1508 = (_1503 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1503);
        float _1516 = (dot(vec3(_746, _747, _748), vec3(_1508 * _1500, _1508 * _1501, _1508 * _1502)) + 1.0) * 0.5;
        float _4244 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1525 = sqrt(((_1501 * _1501) + (_1500 * _1500)) + (_1502 * _1502)) / (_1456 + 9.9999997473787516355514526367188e-06);
        float _4255 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1527 = _1526 * 2.0;
        float _1531 = (1.0 - _1526) / (_1526 + 1.0);
        float _4266 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1541 = ((((1.0 - _1532) * (_1527 + 2.0)) * exp2(log2(isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_1527 + 1.0))) + _1532) * _1456;
        float _1542 = _1424 * 0.5;
        float _1543 = _1434 * 0.5;
        float _1544 = _1444 * 0.5;
        float _1545 = dot(vec3(_1542, _1543, _1544), vec3(_1542, _1543, _1544));
        float _1550 = (_1545 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1545);
        float _1558 = (dot(vec3(_746, _747, _748), vec3(_1550 * _1542, _1550 * _1543, _1550 * _1544)) + 1.0) * 0.5;
        float _4277 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1567 = sqrt(((_1543 * _1543) + (_1542 * _1542)) + (_1544 * _1544)) / (_1457 + 9.9999997473787516355514526367188e-06);
        float _4288 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _1569 = _1568 * 2.0;
        float _1573 = (1.0 - _1568) / (_1568 + 1.0);
        float _4299 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1583 = ((((1.0 - _1574) * (_1569 + 2.0)) * exp2(log2(isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_1569 + 1.0))) + _1574) * _1457;
        _1591 = _1424;
        _1592 = _1423;
        _1593 = _1422;
        _1594 = _1434;
        _1595 = _1433;
        _1596 = _1432;
        _1597 = _1444;
        _1598 = _1443;
        _1599 = _1442;
        _1600 = _1457;
        _1601 = _1456;
        _1602 = _1455;
        _1603 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)));
        _1604 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)));
        _1605 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)));
    }
    else
    {
        _1591 = _1283;
        _1592 = _1283;
        _1593 = _1283;
        _1594 = _1283;
        _1595 = _1283;
        _1596 = _1283;
        _1597 = _1283;
        _1598 = _1283;
        _1599 = _1283;
        _1600 = _1283;
        _1601 = _1283;
        _1602 = _1283;
        _1603 = 0.0;
        _1604 = 0.0;
        _1605 = 0.0;
    }
    float _1615 = (cbModelParam._m0[1u].x * (_1603 - _1295)) + _1295;
    float _1616 = (cbModelParam._m0[1u].x * (_1604 - _1296)) + _1296;
    float _1617 = (cbModelParam._m0[1u].x * (_1605 - _1297)) + _1297;
    float _1638 = fma(_1617, cbSceneParam._m0[89u].z, fma(_1616, cbSceneParam._m0[89u].y, _1615 * cbSceneParam._m0[89u].x));
    float _1641 = fma(_1617, cbSceneParam._m0[90u].z, fma(_1616, cbSceneParam._m0[90u].y, _1615 * cbSceneParam._m0[90u].x));
    float _1644 = fma(_1617, cbSceneParam._m0[91u].z, fma(_1616, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1615));
    float _1659 = _919 * 0.5;
    float _1660 = _920 * 0.5;
    float _1661 = _921 * 0.5;
    float _1662 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1593, _1596, _1599, _1602));
    float _1665 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1592, _1595, _1598, _1601));
    float _1668 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1591, _1594, _1597, _1600));
    float _1702;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1675 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1282, _1286, _1289, _1292));
        float _1679 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1284, _1287, _1290, _1293));
        float _1683 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1285, _1288, _1291, _1294));
        float _1690 = dot(vec4(cbModelParam._m0[39u]), vec4(_1659, _1660, _1661, 1.0));
        _1702 = dot(vec3(isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)), isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)), isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1690) ? 0.0 : (isnan(0.0) ? _1690 : max(0.0, _1690))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1702 = 1.0;
    }
    float _1713;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1704 = dot(vec4(cbModelParam._m0[40u]), vec4(_1659, _1660, _1661, 1.0));
        _1713 = dot(vec3(isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)), isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)), isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1704) ? 0.0 : (isnan(0.0) ? _1704 : max(0.0, _1704))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1713 = 1.0;
    }
    float _1717 = (_1713 * cbModelParam._m0[1u].x) + (_1702 * (1.0 - cbModelParam._m0[1u].x));
    float _1727 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _749);
    float _1728 = isnan(_1727) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1727 : min(cbModelParam._m0[25u].z, _1727));
    float _1810;
    float _1812;
    float _1814;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1777 = fma(_982, cbModelParam._m0[13u].z, fma(_978, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _974)) + cbModelParam._m0[13u].w;
        float _1781 = fma(_982, cbModelParam._m0[14u].z, fma(_978, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _974)) + cbModelParam._m0[14u].w;
        float _1785 = fma(_982, cbModelParam._m0[15u].z, fma(_978, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _974)) + cbModelParam._m0[15u].w;
        float _1788 = fma(_921, cbModelParam._m0[13u].z, fma(_920, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _919));
        float _1791 = fma(_921, cbModelParam._m0[14u].z, fma(_920, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _919));
        float _1794 = fma(_921, cbModelParam._m0[15u].z, fma(_920, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _919));
        float _1822;
        if (_1788 > 0.0)
        {
            _1822 = abs((1.0 - _1777) / _1788);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1788 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1777 + 1.0) / _1788);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1822 = frontier_phi_14_12_ladder;
        }
        float _1994;
        if (_1791 > 0.0)
        {
            _1994 = abs((1.0 - _1781) / _1791);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1791 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1781 + 1.0) / _1791);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1994 = frontier_phi_23_19_ladder;
        }
        float _2289;
        if (_1794 > 0.0)
        {
            _2289 = abs((1.0 - _1785) / _1794);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1794 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1785 + 1.0) / _1794);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2289 = frontier_phi_35_30_ladder;
        }
        float _2291 = isnan(_1994) ? _1822 : (isnan(_1822) ? _1994 : min(_1822, _1994));
        float _2292 = isnan(_2289) ? _2291 : (isnan(_2291) ? _2289 : min(_2291, _2289));
        float _2296 = (_2292 * _1788) + _1777;
        float _2297 = (_2292 * _1791) + _1781;
        float _2298 = (_2292 * _1794) + _1785;
        float _2299 = _2292 * 9.9999997473787516355514526367188e-05;
        float _2301 = (-1.0) - _2299;
        float _2303 = _2299 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2298 > _2303) || ((_2298 < _2301) || ((_2297 > _2303) || ((_2297 < _2301) || ((_2296 < _2301) || (_2296 > _2303))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2443 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2298, cbModelParam._m0[9u].z, fma(_2297, cbModelParam._m0[9u].y, _2296 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2298, cbModelParam._m0[10u].z, fma(_2297, cbModelParam._m0[10u].y, _2296 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2298, cbModelParam._m0[11u].z, fma(_2297, cbModelParam._m0[11u].y, _2296 * cbModelParam._m0[11u].x))), _1728);
            frontier_phi_13_35_ladder = _2443.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2443.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2443.x * cbModelParam._m0[1u].y;
        }
        _1810 = frontier_phi_13_35_ladder_2;
        _1812 = frontier_phi_13_35_ladder_1;
        _1814 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1798 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_919, _920, _921), _1728);
        _1810 = _1798.x * cbModelParam._m0[1u].y;
        _1812 = _1798.y * cbModelParam._m0[1u].y;
        _1814 = _1798.z * cbModelParam._m0[1u].y;
    }
    float _1818 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _749);
    float _1819 = isnan(_1818) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1818 : min(cbModelParam._m0[25u].w, _1818));
    float _1909;
    float _1911;
    float _1913;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1873 = fma(_982, cbModelParam._m0[21u].z, fma(_978, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _974)) + cbModelParam._m0[21u].w;
        float _1877 = fma(_982, cbModelParam._m0[22u].z, fma(_978, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _974)) + cbModelParam._m0[22u].w;
        float _1881 = fma(_982, cbModelParam._m0[23u].z, fma(_978, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _974)) + cbModelParam._m0[23u].w;
        float _1884 = fma(_921, cbModelParam._m0[21u].z, fma(_920, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _919));
        float _1887 = fma(_921, cbModelParam._m0[22u].z, fma(_920, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _919));
        float _1890 = fma(_921, cbModelParam._m0[23u].z, fma(_920, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _919));
        float _1999;
        if (_1884 > 0.0)
        {
            _1999 = abs((1.0 - _1873) / _1884);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1873 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1999 = frontier_phi_25_21_ladder;
        }
        float _2316;
        if (_1887 > 0.0)
        {
            _2316 = abs((1.0 - _1877) / _1887);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1877 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2316 = frontier_phi_37_32_ladder;
        }
        float _2654;
        if (_1890 > 0.0)
        {
            _2654 = abs((1.0 - _1881) / _1890);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1890 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1881 + 1.0) / _1890);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2654 = frontier_phi_47_44_ladder;
        }
        float _2656 = isnan(_2316) ? _1999 : (isnan(_1999) ? _2316 : min(_1999, _2316));
        float _2657 = isnan(_2654) ? _2656 : (isnan(_2656) ? _2654 : min(_2656, _2654));
        float _2661 = (_2657 * _1884) + _1873;
        float _2662 = (_2657 * _1887) + _1877;
        float _2663 = (_2657 * _1890) + _1881;
        float _2664 = _2657 * 9.9999997473787516355514526367188e-05;
        float _2665 = (-1.0) - _2664;
        float _2667 = _2664 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2663 > _2667) || ((_2663 < _2665) || ((_2662 > _2667) || ((_2662 < _2665) || ((_2661 < _2665) || (_2661 > _2667))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2785 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2663, cbModelParam._m0[17u].z, fma(_2662, cbModelParam._m0[17u].y, _2661 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2663, cbModelParam._m0[18u].z, fma(_2662, cbModelParam._m0[18u].y, _2661 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2663, cbModelParam._m0[19u].z, fma(_2662, cbModelParam._m0[19u].y, _2661 * cbModelParam._m0[19u].x))), _1819);
            frontier_phi_22_47_ladder = _2785.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2785.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2785.x * cbModelParam._m0[1u].z;
        }
        _1909 = frontier_phi_22_47_ladder_2;
        _1911 = frontier_phi_22_47_ladder_1;
        _1913 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1893 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_919, _920, _921), _1819);
        _1909 = _1893.x * cbModelParam._m0[1u].z;
        _1911 = _1893.y * cbModelParam._m0[1u].z;
        _1913 = _1893.z * cbModelParam._m0[1u].z;
    }
    float _1926 = (((_945 * _895) + _946) * _911) * ((cbModelParam._m0[1u].w * (_1909 - _1810)) + _1810);
    float _1928 = (((_945 * _897) + _946) * _911) * ((cbModelParam._m0[1u].w * (_1911 - _1812)) + _1812);
    float _1930 = (((_945 * _898) + _946) * _911) * ((cbModelParam._m0[1u].w * (_1913 - _1814)) + _1814);
    float _1933 = fma(_1930, cbSceneParam._m0[89u].z, fma(_1928, cbSceneParam._m0[89u].y, _1926 * cbSceneParam._m0[89u].x));
    float _1936 = fma(_1930, cbSceneParam._m0[90u].z, fma(_1928, cbSceneParam._m0[90u].y, _1926 * cbSceneParam._m0[90u].x));
    float _1939 = fma(_1930, cbSceneParam._m0[91u].z, fma(_1928, cbSceneParam._m0[91u].y, _1926 * cbSceneParam._m0[91u].x));
    float _1973 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1977 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1981 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1985 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1986 = _1973 / _1985;
    float _1987 = _1977 / _1985;
    float _1988 = _1981 / _1985;
    float _2135;
    float _2136;
    float _2137;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2015 = ((uint(_1988 > cbSceneParam._m0[59u].y) + uint(_1988 > cbSceneParam._m0[59u].x)) + uint(_1988 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2016 = _2015 + 43u;
        uint _2024 = _2015 + 44u;
        uint _2032 = _2015 + 45u;
        uint _2040 = _2015 + 46u;
        float _2051 = fma(_1985, cbSceneParam._m0[_2016].w, fma(_1981, cbSceneParam._m0[_2016].z, fma(_1977, cbSceneParam._m0[_2016].y, _1973 * cbSceneParam._m0[_2016].x)));
        float _2055 = fma(_1985, cbSceneParam._m0[_2024].w, fma(_1981, cbSceneParam._m0[_2024].z, fma(_1977, cbSceneParam._m0[_2024].y, _1973 * cbSceneParam._m0[_2024].x)));
        float _2063 = fma(_1985, cbSceneParam._m0[_2040].w, fma(_1981, cbSceneParam._m0[_2040].z, fma(_1977, cbSceneParam._m0[_2040].y, _1973 * cbSceneParam._m0[_2040].x)));
        float _2068 = cbSceneParam._m0[33u].z * _2063;
        float _2070 = cbSceneParam._m0[33u].w * _2063;
        float _2073 = fma(_1985, cbSceneParam._m0[_2032].w, fma(_1981, cbSceneParam._m0[_2032].z, fma(_1977, cbSceneParam._m0[_2032].y, _1973 * cbSceneParam._m0[_2032].x))) / _2063;
        float _2121 = (cbSceneParam._m0[33u].x - sqrt(((_1987 * _1987) + (_1986 * _1986)) + (_1988 * _1988))) * cbSceneParam._m0[33u].y;
        float _4425 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        float _2128 = (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2068 + _2051) / _2063, (_2070 + _2055) / _2063), _2073), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2070 + _2051) / _2063, (_2055 - _2068) / _2063), _2073), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2051 - _2068) / _2063, (_2055 - _2070) / _2063), _2073), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2051 - _2070) / _2063, (_2068 + _2055) / _2063), _2073), 0.0)).x), vec4(0.25)));
        _2135 = 1.0 - (_2128 * cbSceneParam._m0[34u].x);
        _2136 = 1.0 - (_2128 * cbSceneParam._m0[34u].y);
        _2137 = 1.0 - (_2128 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2135 = 1.0;
        _2136 = 1.0;
        _2137 = 1.0;
    }
    float _2201;
    float _2203;
    float _2205;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2189 = fma(_1985, cbSceneParam._m0[63u].w, fma(_1981, cbSceneParam._m0[63u].z, fma(_1977, cbSceneParam._m0[63u].y, _1973 * cbSceneParam._m0[63u].x)));
        float _2190 = fma(_1985, cbSceneParam._m0[60u].w, fma(_1981, cbSceneParam._m0[60u].z, fma(_1977, cbSceneParam._m0[60u].y, _1973 * cbSceneParam._m0[60u].x))) / _2189;
        float _2191 = fma(_1985, cbSceneParam._m0[61u].w, fma(_1981, cbSceneParam._m0[61u].z, fma(_1977, cbSceneParam._m0[61u].y, _1973 * cbSceneParam._m0[61u].x))) / _2189;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2190 >= cbSceneParam._m0[64u].x) && (_2191 >= cbSceneParam._m0[64u].y)) && (_2190 <= cbSceneParam._m0[64u].z)) && (_2191 <= cbSceneParam._m0[64u].w))
        {
            float _2329 = fma(_1985, cbSceneParam._m0[62u].w, fma(_1981, cbSceneParam._m0[62u].z, fma(_1977, cbSceneParam._m0[62u].y, _1973 * cbSceneParam._m0[62u].x))) / _2189;
            float _2333 = isnan(cbSceneParam._m0[41u].w) ? _2329 : (isnan(_2329) ? cbSceneParam._m0[41u].w : max(_2329, cbSceneParam._m0[41u].w));
            float _2376 = (cbSceneParam._m0[33u].x - sqrt(((_1987 * _1987) + (_1986 * _1986)) + (_1988 * _1988))) * cbSceneParam._m0[33u].y;
            float _4441 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
            float _2383 = (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2190, cbSceneParam._m0[33u].w + _2191), _2333), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2190, _2191 - cbSceneParam._m0[33u].z), _2333), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2190 - cbSceneParam._m0[33u].z, _2191 - cbSceneParam._m0[33u].w), _2333), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2190 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2191), _2333), 0.0)).x), vec4(0.25)));
            float _2387 = 1.0 - (_2383 * cbSceneParam._m0[34u].x);
            float _2388 = 1.0 - (_2383 * cbSceneParam._m0[34u].y);
            float _2389 = 1.0 - (_2383 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2389) ? _2137 : (isnan(_2137) ? _2389 : min(_2137, _2389));
            frontier_phi_34_33_ladder_1 = isnan(_2388) ? _2136 : (isnan(_2136) ? _2388 : min(_2136, _2388));
            frontier_phi_34_33_ladder_2 = isnan(_2387) ? _2135 : (isnan(_2135) ? _2387 : min(_2135, _2387));
        }
        else
        {
            frontier_phi_34_33_ladder = _2137;
            frontier_phi_34_33_ladder_1 = _2136;
            frontier_phi_34_33_ladder_2 = _2135;
        }
        _2201 = frontier_phi_34_33_ladder_2;
        _2203 = frontier_phi_34_33_ladder_1;
        _2205 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2201 = _2135;
        _2203 = _2136;
        _2205 = _2137;
    }
    uvec4 _2210 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _2212 = _2210.x * 14u;
    uint _2213 = _2212 + 13u;
    float _2220 = _911 + (-1.0);
    float _2225 = (cbLight._m0[_2213].x * _2220) + 1.0;
    float _2226 = (cbLight._m0[_2213].y * _2220) + 1.0;
    float _2227 = (cbLight._m0[_2213].z * _2220) + 1.0;
    float _2228 = (cbLight._m0[_2213].w * _2220) + 1.0;
    uint _2229 = _2212 + 5u;
    float _2235 = isnan(1.0) ? _2226 : (isnan(_2226) ? 1.0 : min(_2226, 1.0));
    uint _2239 = _2212 + 4u;
    float _2248 = isnan(1.0) ? _2225 : (isnan(_2225) ? 1.0 : min(_2225, 1.0));
    uint _2252 = _2212 | 1u;
    float _2263 = dot(vec3(cbLight._m0[_2212].xyz), vec3(_746, _747, _748));
    float _2266 = dot(vec3(cbLight._m0[_2252].xyz), vec3(_746, _747, _748));
    float _4477 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _4488 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _2271 = (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * 0.3183098733425140380859375;
    float _2273 = (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * 0.3183098733425140380859375;
    float _2280 = ((cbLight._m0[_2229].x * _2235) * _2273) + (((cbLight._m0[_2239].x * _2201) * _2248) * _2271);
    float _2281 = ((_2235 * cbLight._m0[_2229].y) * _2273) + (((cbLight._m0[_2239].y * _2203) * _2248) * _2271);
    float _2282 = ((_2235 * cbLight._m0[_2229].z) * _2273) + (((cbLight._m0[_2239].z * _2205) * _2248) * _2271);
    uvec4 _2286 = floatBitsToUint(cbLight._m0[_2212 + 12u]);
    bool _2288 = _2286.x == 0u;
    float _2390;
    float _2392;
    float _2394;
    if (_2288)
    {
        _2390 = _2280;
        _2392 = _2281;
        _2394 = _2282;
    }
    else
    {
        uint _2398 = _2212 + 6u;
        float _2414 = (dot(vec3(cbLight._m0[_2212 + 2u].xyz), vec3(_746, _747, _748)) * 0.5) + 0.5;
        float _2415 = _2414 * _2414;
        float _4499 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        float _2416 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _2417 = isnan(1.0) ? _2227 : (isnan(_2227) ? 1.0 : min(_2227, 1.0));
        _2390 = (((cbLight._m0[_2398].x * 0.3183098733425140380859375) * _2416) * _2417) + _2280;
        _2392 = (((cbLight._m0[_2398].y * 0.3183098733425140380859375) * _2416) * _2417) + _2281;
        _2394 = (((cbLight._m0[_2398].z * 0.3183098733425140380859375) * _2416) * _2417) + _2282;
    }
    bool _2397 = _2286.y == 0u;
    float _2452;
    float _2454;
    float _2456;
    if (_2397)
    {
        _2452 = _2390;
        _2454 = _2392;
        _2456 = _2394;
    }
    else
    {
        uint _2625 = _2212 + 7u;
        float _2641 = (dot(vec3(cbLight._m0[_2212 + 3u].xyz), vec3(_746, _747, _748)) * 0.5) + 0.5;
        float _2642 = _2641 * _2641;
        float _4515 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
        float _2643 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _2644 = isnan(1.0) ? _2228 : (isnan(_2228) ? 1.0 : min(_2228, 1.0));
        _2452 = (((cbLight._m0[_2625].x * 0.3183098733425140380859375) * _2643) * _2644) + _2390;
        _2454 = (((cbLight._m0[_2625].y * 0.3183098733425140380859375) * _2643) * _2644) + _2392;
        _2456 = (((cbLight._m0[_2625].z * 0.3183098733425140380859375) * _2643) * _2644) + _2394;
    }
    uint _2459 = _2212 + 8u;
    float _2472 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2212].w)) * _749) * 0.949999988079071044921875);
    float _2473 = _2472 * _2472;
    float _2474 = cbLight._m0[_2212].x + _825;
    float _2475 = cbLight._m0[_2212].y + _826;
    float _2476 = cbLight._m0[_2212].z + _827;
    float _2480 = inversesqrt(dot(vec3(_2474, _2475, _2476), vec3(_2474, _2475, _2476)));
    float _2481 = _2480 * _2474;
    float _2482 = _2480 * _2475;
    float _2483 = _2480 * _2476;
    float _2484 = dot(vec3(_746, _747, _748), vec3(cbLight._m0[_2212].xyz));
    float _4531 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
    float _2487 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
    float _4542 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _2488 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
    float _2489 = dot(vec3(_746, _747, _748), vec3(_2481, _2482, _2483));
    float _4553 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
    float _2492 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
    float _2493 = dot(vec3(cbLight._m0[_2212].xyz), vec3(_2481, _2482, _2483));
    float _4564 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
    float _2497 = _2473 * _2473;
    float _2501 = ((_2492 * _2492) * (_2497 + (-1.0))) + 1.0;
    float _2509 = exp2(log2(1.0 - (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0)))) * 5.0);
    float _2510 = 0.959999978542327880859375 - _892;
    float _2512 = 0.959999978542327880859375 - _893;
    float _2513 = 0.959999978542327880859375 - _894;
    float _2520 = 1.0 - _2473;
    float _2531 = (0.5 / (((_2488 * ((_2487 * _2520) + _2473)) + 9.9999999392252902907785028219223e-09) + (((_2488 * _2520) + _2473) * _2487))) * _2487;
    float _4575 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
    float _2533 = (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_2497 / ((_2501 * _2501) * 3.141590118408203125));
    uint _2547 = _2212 + 9u;
    float _2558 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2252].w)) * _749) * 0.949999988079071044921875);
    float _2559 = _2558 * _2558;
    float _2560 = cbLight._m0[_2252].x + _825;
    float _2561 = cbLight._m0[_2252].y + _826;
    float _2562 = cbLight._m0[_2252].z + _827;
    float _2566 = inversesqrt(dot(vec3(_2560, _2561, _2562), vec3(_2560, _2561, _2562)));
    float _2567 = _2566 * _2560;
    float _2568 = _2566 * _2561;
    float _2569 = _2566 * _2562;
    float _2570 = dot(vec3(_746, _747, _748), vec3(cbLight._m0[_2252].xyz));
    float _4586 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
    float _2573 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
    float _2574 = dot(vec3(_746, _747, _748), vec3(_2567, _2568, _2569));
    float _4597 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
    float _2577 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
    float _2578 = dot(vec3(cbLight._m0[_2252].xyz), vec3(_2567, _2568, _2569));
    float _4608 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
    float _2582 = _2559 * _2559;
    float _2586 = ((_2577 * _2577) * (_2582 + (-1.0))) + 1.0;
    float _2593 = exp2(log2(1.0 - (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0)))) * 5.0);
    float _2600 = 1.0 - _2559;
    float _2610 = (0.5 / (((_2488 * ((_2573 * _2600) + _2559)) + 9.9999999392252902907785028219223e-09) + (((_2488 * _2600) + _2559) * _2573))) * _2573;
    float _4619 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
    float _2612 = (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (_2582 / ((_2586 * _2586) * 3.141590118408203125));
    float _2622 = (((((_2593 * _2510) + _895) * cbLight._m0[_2547].x) * _2612) * _2235) + ((((cbLight._m0[_2459].x * _2201) * ((_2509 * _2510) + _895)) * _2533) * _2248);
    float _2623 = (((((_2593 * _2512) + _897) * cbLight._m0[_2547].y) * _2612) * _2235) + ((((cbLight._m0[_2459].y * _2203) * ((_2509 * _2512) + _897)) * _2533) * _2248);
    float _2624 = (((((_2593 * _2513) + _898) * cbLight._m0[_2547].z) * _2612) * _2235) + ((((cbLight._m0[_2459].z * _2205) * ((_2509 * _2513) + _898)) * _2533) * _2248);
    float _2680;
    float _2682;
    float _2684;
    if (_2288)
    {
        _2680 = _2622;
        _2682 = _2623;
        _2684 = _2624;
    }
    else
    {
        uint _2686 = _2212 + 2u;
        uint _2690 = _2212 + 10u;
        float _2704 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2686].w)) * _749) * 0.949999988079071044921875);
        float _2705 = _2704 * _2704;
        float _2706 = cbLight._m0[_2686].x + _825;
        float _2707 = cbLight._m0[_2686].y + _826;
        float _2708 = cbLight._m0[_2686].z + _827;
        float _2712 = inversesqrt(dot(vec3(_2706, _2707, _2708), vec3(_2706, _2707, _2708)));
        float _2713 = _2712 * _2706;
        float _2714 = _2712 * _2707;
        float _2715 = _2712 * _2708;
        float _2716 = dot(vec3(_746, _747, _748), vec3(cbLight._m0[_2686].xyz));
        float _4630 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
        float _2719 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
        float _2720 = dot(vec3(_746, _747, _748), vec3(_2713, _2714, _2715));
        float _4641 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
        float _2723 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
        float _2724 = dot(vec3(cbLight._m0[_2686].xyz), vec3(_2713, _2714, _2715));
        float _4652 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
        float _2728 = _2705 * _2705;
        float _2732 = ((_2723 * _2723) * (_2728 + (-1.0))) + 1.0;
        float _2739 = exp2(log2(1.0 - (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0)))) * 5.0);
        float _2746 = 1.0 - _2705;
        float _2756 = (0.5 / (((_2488 * ((_2719 * _2746) + _2705)) + 9.9999999392252902907785028219223e-09) + (((_2488 * _2746) + _2705) * _2719))) * _2719;
        float _4663 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
        float _2758 = (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * (_2728 / ((_2732 * _2732) * 3.141590118408203125));
        float _2759 = isnan(1.0) ? _2227 : (isnan(_2227) ? 1.0 : min(_2227, 1.0));
        _2680 = (((((_2739 * _2510) + _895) * cbLight._m0[_2690].x) * _2758) * _2759) + _2622;
        _2682 = (((((_2739 * _2512) + _897) * cbLight._m0[_2690].y) * _2758) * _2759) + _2623;
        _2684 = (((((_2739 * _2513) + _898) * cbLight._m0[_2690].z) * _2758) * _2759) + _2624;
    }
    float _2790;
    float _2792;
    float _2794;
    if (_2397)
    {
        _2790 = _2680;
        _2792 = _2682;
        _2794 = _2684;
    }
    else
    {
        uint _2801 = _2212 + 3u;
        uint _2805 = _2212 + 11u;
        float _2819 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2801].w)) * _749) * 0.949999988079071044921875);
        float _2820 = _2819 * _2819;
        float _2821 = cbLight._m0[_2801].x + _825;
        float _2822 = cbLight._m0[_2801].y + _826;
        float _2823 = cbLight._m0[_2801].z + _827;
        float _2827 = inversesqrt(dot(vec3(_2821, _2822, _2823), vec3(_2821, _2822, _2823)));
        float _2828 = _2827 * _2821;
        float _2829 = _2827 * _2822;
        float _2830 = _2827 * _2823;
        float _2831 = dot(vec3(_746, _747, _748), vec3(cbLight._m0[_2801].xyz));
        float _4679 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
        float _2834 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
        float _2835 = dot(vec3(_746, _747, _748), vec3(_2828, _2829, _2830));
        float _4690 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
        float _2838 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
        float _2839 = dot(vec3(cbLight._m0[_2801].xyz), vec3(_2828, _2829, _2830));
        float _4701 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
        float _2843 = _2820 * _2820;
        float _2847 = ((_2838 * _2838) * (_2843 + (-1.0))) + 1.0;
        float _2854 = exp2(log2(1.0 - (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0)))) * 5.0);
        float _2861 = 1.0 - _2820;
        float _2871 = (0.5 / (((_2488 * ((_2834 * _2861) + _2820)) + 9.9999999392252902907785028219223e-09) + (((_2488 * _2861) + _2820) * _2834))) * _2834;
        float _4712 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
        float _2873 = (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0))) * (_2843 / ((_2847 * _2847) * 3.141590118408203125));
        float _2874 = isnan(1.0) ? _2228 : (isnan(_2228) ? 1.0 : min(_2228, 1.0));
        _2790 = (((((_2854 * _2510) + _895) * cbLight._m0[_2805].x) * _2873) * _2874) + _2680;
        _2792 = (((((_2854 * _2512) + _897) * cbLight._m0[_2805].y) * _2873) * _2874) + _2682;
        _2794 = (((((_2854 * _2513) + _898) * cbLight._m0[_2805].z) * _2873) * _2874) + _2684;
    }
    float _2940;
    float _2942;
    float _2944;
    float _2946;
    float _2948;
    float _2950;
    if (_2210.y == 0u)
    {
        uvec4 _2895 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2896 = _2895.x;
        uint _2907 = uint((float(_2895.y) * floor(float(uint(cbSceneParam._m0[85u].y * _834) / _2896))) + floor(float(uint(cbSceneParam._m0[85u].x * _833) / _2896)));
        float _2917 = (log2(_1988 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2918 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
        uint _2921 = uint(isnan(14.0) ? _2918 : (isnan(_2918) ? 14.0 : min(_2918, 14.0)));
        uvec4 _2926 = texelFetch(g_lightClusterGridBuffer, int(((_2921 << 2u) + (_2907 << 6u)) >> 2u));
        uint _2927 = _2926.x;
        uint _2928 = _2895.z;
        float _3007;
        float _3009;
        float _3011;
        float _3013;
        float _3015;
        float _3017;
        if (((((1u << ((_2928 >> 4u) & 15u)) + 4294967295u) & _2927) == 0u) || ((_2928 & 240u) == 0u))
        {
            _3007 = 0.0;
            _3009 = 0.0;
            _3011 = 0.0;
            _3013 = 0.0;
            _3015 = 0.0;
            _3017 = 0.0;
        }
        else
        {
            float _3008;
            float _3010;
            float _3012;
            float _3014;
            float _3016;
            float _3018;
            float _3152 = 0.0;
            float _3153 = 0.0;
            float _3154 = 0.0;
            float _3155 = 0.0;
            float _3156 = 0.0;
            float _3157 = 0.0;
            uint _3158 = 0u;
            uint _3167;
            bool _3168;
            for (;;)
            {
                _3167 = texelFetch(g_lightClassification, int((((_2921 << 5u) + (_2907 << 9u)) + (_3158 << 2u)) >> 2u)).x;
                _3168 = _3167 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3168)
                {
                    frontier_phi_66_pred = _3157;
                    frontier_phi_66_pred_1 = _3156;
                    frontier_phi_66_pred_2 = _3155;
                    frontier_phi_66_pred_3 = _3154;
                    frontier_phi_66_pred_4 = _3153;
                    frontier_phi_66_pred_5 = _3152;
                }
                else
                {
                    float _3276;
                    float _3277;
                    float _3278;
                    float _3279;
                    float _3280;
                    float _3281;
                    uint _3282;
                    _3276 = _3152;
                    _3277 = _3153;
                    _3278 = _3154;
                    _3279 = _3155;
                    _3280 = _3156;
                    _3281 = _3157;
                    _3282 = _3167;
                    float _3208;
                    float _3209;
                    float _3210;
                    float _3211;
                    float _3212;
                    float _3213;
                    for (;;)
                    {
                        uint _3286 = uint(findLSB(_3282)) + (_3158 << 5u);
                        uint _3283 = (_3282 + 4294967295u) & _3282;
                        uint _3288 = _3286 * 48u;
                        vec4 _3302 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3288)).x, texelFetch(g_PointLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3288 + 3u)).x));
                        uint _3308 = (_3286 * 48u) + 4u;
                        vec4 _3321 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3308)).x, texelFetch(g_PointLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3308 + 3u)).x));
                        uint _3327 = (_3286 * 48u) + 8u;
                        vec3 _3338 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3327)).x, texelFetch(g_PointLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3327 + 2u)).x));
                        float _3342 = _3302.x - _1986;
                        float _3343 = _3302.y - _1987;
                        float _3344 = _3302.z - _1988;
                        float _3345 = dot(vec3(_3342, _3343, _3344), vec3(_3342, _3343, _3344));
                        float _3348 = inversesqrt(_3345);
                        float _3349 = _3348 * _3342;
                        float _3350 = _3348 * _3343;
                        float _3351 = _3348 * _3344;
                        float _3352 = dot(vec3(_852, _855, _858), vec3(_3349, _3350, _3351));
                        float _3357 = 1.0 - (_3345 * _3302.w);
                        float _4738 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                        float _3358 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                        float _3359 = sqrt(_3345) * _3321.w;
                        float _3362 = 1.39999997615814208984375 / (_3359 + 1.39999997615814208984375);
                        float _3363 = _3362 * _3362;
                        float _3366 = ((1.0 - _3363) * _3352) + _3363;
                        float _3369 = _3359 * _3359;
                        float _3373 = ((isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0))) * _3358) / ((_3369 * 0.699999988079071044921875) + 1.0);
                        float _3377 = (-0.0) - _1986;
                        float _3378 = (-0.0) - _1987;
                        float _3379 = (-0.0) - _1988;
                        float _3383 = inversesqrt(dot(vec3(_3377, _3378, _3379), vec3(_3377, _3378, _3379)));
                        float _3384 = _3383 * _3377;
                        float _3385 = _3383 * _3378;
                        float _3386 = _3383 * _3379;
                        float _3393 = exp2(log2(1.0 / ((_3369 * 3.5) + 5.0)) * 0.25);
                        float _3394 = 1.0 - _927;
                        float _3401 = sqrt(1.0 - ((1.0 - (_3394 * _3394)) * (1.0 - (_3393 * _3393))));
                        float _3402 = _3401 * _3401;
                        float _3403 = _3402 * _3402;
                        float _3404 = _3384 + _3349;
                        float _3405 = _3385 + _3350;
                        float _3406 = _3386 + _3351;
                        float _3410 = inversesqrt(dot(vec3(_3404, _3405, _3406), vec3(_3404, _3405, _3406)));
                        float _3414 = dot(vec3(_852, _855, _858), vec3(_3384, _3385, _3386));
                        float _4754 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                        float _3417 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
                        float _3418 = dot(vec3(_852, _855, _858), vec3(_3410 * _3404, _3410 * _3405, _3410 * _3406));
                        float _4765 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0));
                        float _3421 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
                        float _3425 = ((_3421 * _3421) * (_3403 + (-1.0))) + 1.0;
                        float _3426 = _3362 * _3402;
                        float _3427 = _3426 * _3426;
                        float _3430 = ((1.0 - _3427) * _3352) + _3427;
                        float _4776 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                        float _3431 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
                        float _3432 = 1.0 - _3402;
                        float _3442 = (0.5 / (((_3431 * ((_3417 * _3432) + _3402)) + 9.9999999392252902907785028219223e-09) + (((_3431 * _3432) + _3402) * _3417))) * _3431;
                        float _4787 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                        float _3452 = (((_3403 * 3.1415927410125732421875) * (isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0)))) / ((_3425 * _3425) * ((_3369 * 2.1991131305694580078125) + 3.141590118408203125))) * _3358;
                        _3211 = (_3373 * _3321.x) + _3279;
                        _3212 = (_3373 * _3321.y) + _3280;
                        _3213 = (_3373 * _3321.z) + _3281;
                        _3208 = (_3452 * _3338.x) + _3276;
                        _3209 = (_3452 * _3338.y) + _3277;
                        _3210 = (_3452 * _3338.z) + _3278;
                        if (_3283 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3276 = _3208;
                            _3277 = _3209;
                            _3278 = _3210;
                            _3279 = _3211;
                            _3280 = _3212;
                            _3281 = _3213;
                            _3282 = _3283;
                        }
                    }
                    frontier_phi_66_pred = _3213;
                    frontier_phi_66_pred_1 = _3212;
                    frontier_phi_66_pred_2 = _3211;
                    frontier_phi_66_pred_3 = _3210;
                    frontier_phi_66_pred_4 = _3209;
                    frontier_phi_66_pred_5 = _3208;
                }
                _3018 = frontier_phi_66_pred;
                _3016 = frontier_phi_66_pred_1;
                _3014 = frontier_phi_66_pred_2;
                _3012 = frontier_phi_66_pred_3;
                _3010 = frontier_phi_66_pred_4;
                _3008 = frontier_phi_66_pred_5;
                uint _3159 = _3158 + 1u;
                if (_3159 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3152 = _3008;
                    _3153 = _3010;
                    _3154 = _3012;
                    _3155 = _3014;
                    _3156 = _3016;
                    _3157 = _3018;
                    _3158 = _3159;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3007 = _3008;
            _3009 = _3010;
            _3011 = _3012;
            _3013 = _3014;
            _3015 = _3016;
            _3017 = _3018;
        }
        uvec4 _3021 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3022 = _3021.z;
        uint _3024 = (_3022 >> 8u) & 15u;
        float _3120;
        float _3122;
        float _3124;
        float _3126;
        float _3128;
        float _3130;
        if (((4294967295u << _3024) & _2927) == 0u)
        {
            _3120 = _3007;
            _3122 = _3009;
            _3124 = _3011;
            _3126 = _3013;
            _3128 = _3015;
            _3130 = _3017;
        }
        else
        {
            float _3145 = inversesqrt(dot(vec3(_1986, _1987, _1988), vec3(_1986, _1987, _1988)));
            float _3146 = _3145 * _1986;
            float _3147 = _3145 * _1987;
            float _3148 = _3145 * _1988;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3024 < ((_3022 >> 12u) & 15u))
            {
                float _3121;
                float _3123;
                float _3125;
                float _3127;
                float _3129;
                float _3131;
                float _3259 = _3007;
                float _3260 = _3009;
                float _3261 = _3011;
                float _3262 = _3013;
                float _3263 = _3015;
                float _3264 = _3017;
                uint _3265 = _3024;
                uint _3274;
                bool _3275;
                for (;;)
                {
                    _3274 = texelFetch(g_lightClassification, int((((_2921 << 5u) + (_2907 << 9u)) + (_3265 << 2u)) >> 2u)).x;
                    _3275 = _3274 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3275)
                    {
                        frontier_phi_72_pred = _3264;
                        frontier_phi_72_pred_1 = _3263;
                        frontier_phi_72_pred_2 = _3262;
                        frontier_phi_72_pred_3 = _3261;
                        frontier_phi_72_pred_4 = _3260;
                        frontier_phi_72_pred_5 = _3259;
                    }
                    else
                    {
                        float _3457;
                        float _3458;
                        float _3459;
                        float _3460;
                        float _3461;
                        float _3462;
                        float _3750;
                        float _3751;
                        float _3752;
                        float _3753;
                        float _3754;
                        float _3755;
                        float _3470 = _3259;
                        float _3471 = _3260;
                        float _3472 = _3261;
                        float _3473 = _3262;
                        float _3474 = _3263;
                        float _3475 = _3264;
                        uint _3476 = _3274;
                        uint _3477;
                        vec4 _3502;
                        float _3503;
                        vec4 _3518;
                        vec3 _3530;
                        vec4 _3545;
                        vec4 _3560;
                        float _3606;
                        bool _3607;
                        for (;;)
                        {
                            uint _3487 = ((_3265 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3476));
                            _3477 = (_3476 + 4294967295u) & _3476;
                            uint _3489 = _3487 * 40u;
                            _3502 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3489)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 3u)).x));
                            _3503 = _3502.w;
                            uint _3505 = (_3487 * 40u) + 4u;
                            _3518 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3505)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 3u)).x));
                            uint _3520 = (_3487 * 40u) + 8u;
                            _3530 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3520)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 2u)).x));
                            uint _3532 = (_3487 * 40u) + 16u;
                            _3545 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3532)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 3u)).x));
                            uint _3547 = (_3487 * 40u) + 20u;
                            _3560 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3547)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 3u)).x));
                            uint _3562 = (_3487 * 40u) + 24u;
                            vec4 _3575 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3562)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 3u)).x));
                            uint _3581 = (_3487 * 40u) + 28u;
                            vec4 _3594 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3581)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 3u)).x));
                            _3606 = fma(_1988, _3594.z, fma(_1987, _3594.y, _3594.x * _1986)) + _3594.w;
                            _3607 = !((fma(_1988, _3575.z, fma(_1987, _3575.y, _3575.x * _1986)) + _3575.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3607)
                            {
                                float _3634 = _3502.x - _1986;
                                float _3635 = _3502.y - _1987;
                                float _3636 = _3502.z - _1988;
                                float _3637 = dot(vec3(_3634, _3635, _3636), vec3(_3634, _3635, _3636));
                                float _3640 = inversesqrt(_3637);
                                float _3641 = _3640 * _3634;
                                float _3642 = _3640 * _3635;
                                float _3643 = _3640 * _3636;
                                float _3647 = 1.0 - (_3637 / (_3503 * _3503));
                                float _4798 = isnan(0.0) ? _3647 : (isnan(_3647) ? 0.0 : max(_3647, 0.0));
                                float _3648 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                                float _3652 = sqrt(_3637) * _3518.w;
                                float _3654 = 1.39999997615814208984375 / (_3652 + 1.39999997615814208984375);
                                float _3655 = _3654 * _3654;
                                float _3658 = ((1.0 - _3655) * dot(vec3(_3641, _3642, _3643), vec3(_852, _855, _858))) + _3655;
                                float _3661 = _3652 * _3652;
                                float _3665 = (fma(_1988, _3545.z, fma(_1987, _3545.y, _3545.x * _1986)) + _3545.w) / _3606;
                                float _3666 = (fma(_1988, _3560.z, fma(_1987, _3560.y, _3560.x * _1986)) + _3560.w) / _3606;
                                float _3670 = 1.0 - dot(vec2(_3665, _3666), vec2(_3665, _3666));
                                float _4814 = isnan(0.0) ? _3670 : (isnan(_3670) ? 0.0 : max(_3670, 0.0));
                                float _3671 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
                                float _3672 = _3671 * (((isnan(0.0) ? _3658 : (isnan(_3658) ? 0.0 : max(_3658, 0.0))) * _3648) / ((_3661 * 0.699999988079071044921875) + 1.0));
                                float _3684 = exp2(log2(1.0 / ((_3661 * 3.5) + 5.0)) * 0.25);
                                float _3685 = 1.0 - _927;
                                float _3692 = sqrt(1.0 - ((1.0 - (_3685 * _3685)) * (1.0 - (_3684 * _3684))));
                                float _3693 = _3692 * _3692;
                                float _3694 = _3693 * _3693;
                                float _3695 = _3641 - _3146;
                                float _3696 = _3642 - _3147;
                                float _3697 = _3643 - _3148;
                                float _3701 = inversesqrt(dot(vec3(_3695, _3696, _3697), vec3(_3695, _3696, _3697)));
                                float _3705 = dot(vec3(_852, _855, _858), vec3((-0.0) - _3146, (-0.0) - _3147, (-0.0) - _3148));
                                float _4825 = isnan(0.0) ? _3705 : (isnan(_3705) ? 0.0 : max(_3705, 0.0));
                                float _3708 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
                                float _3709 = dot(vec3(_852, _855, _858), vec3(_3701 * _3695, _3701 * _3696, _3701 * _3697));
                                float _4836 = isnan(0.0) ? _3709 : (isnan(_3709) ? 0.0 : max(_3709, 0.0));
                                float _3712 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
                                float _3716 = ((_3712 * _3712) * (_3694 + (-1.0))) + 1.0;
                                float _3717 = _3654 * _3693;
                                float _3718 = _3717 * _3717;
                                float _3724 = ((1.0 - _3718) * dot(vec3(_852, _855, _858), vec3(_3641, _3642, _3643))) + _3718;
                                float _4847 = isnan(0.0) ? _3724 : (isnan(_3724) ? 0.0 : max(_3724, 0.0));
                                float _3725 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
                                float _3726 = 1.0 - _3693;
                                float _3736 = (0.5 / (((_3725 * ((_3708 * _3726) + _3693)) + 9.9999999392252902907785028219223e-09) + (((_3725 * _3726) + _3693) * _3708))) * _3725;
                                float _4858 = isnan(0.0) ? _3736 : (isnan(_3736) ? 0.0 : max(_3736, 0.0));
                                float _3746 = (_3671 * _3648) * (((_3694 * 3.1415927410125732421875) * (isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0)))) / ((_3716 * _3716) * ((_3661 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3672 * _3518.y;
                                frontier_phi_78_pred_1 = _3672 * _3518.x;
                                frontier_phi_78_pred_2 = _3746 * _3530.z;
                                frontier_phi_78_pred_3 = _3746 * _3530.y;
                                frontier_phi_78_pred_4 = _3746 * _3530.x;
                                frontier_phi_78_pred_5 = _3672 * _3518.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3754 = frontier_phi_78_pred;
                            _3753 = frontier_phi_78_pred_1;
                            _3752 = frontier_phi_78_pred_2;
                            _3751 = frontier_phi_78_pred_3;
                            _3750 = frontier_phi_78_pred_4;
                            _3755 = frontier_phi_78_pred_5;
                            _3460 = _3753 + _3473;
                            _3461 = _3754 + _3474;
                            _3462 = _3755 + _3475;
                            _3457 = _3750 + _3470;
                            _3458 = _3751 + _3471;
                            _3459 = _3752 + _3472;
                            if (_3477 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3470 = _3457;
                                _3471 = _3458;
                                _3472 = _3459;
                                _3473 = _3460;
                                _3474 = _3461;
                                _3475 = _3462;
                                _3476 = _3477;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3462;
                        frontier_phi_72_pred_1 = _3461;
                        frontier_phi_72_pred_2 = _3460;
                        frontier_phi_72_pred_3 = _3459;
                        frontier_phi_72_pred_4 = _3458;
                        frontier_phi_72_pred_5 = _3457;
                    }
                    _3131 = frontier_phi_72_pred;
                    _3129 = frontier_phi_72_pred_1;
                    _3127 = frontier_phi_72_pred_2;
                    _3125 = frontier_phi_72_pred_3;
                    _3123 = frontier_phi_72_pred_4;
                    _3121 = frontier_phi_72_pred_5;
                    uint _3266 = _3265 + 1u;
                    if (_3266 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3259 = _3121;
                        _3260 = _3123;
                        _3261 = _3125;
                        _3262 = _3127;
                        _3263 = _3129;
                        _3264 = _3131;
                        _3265 = _3266;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3131;
                frontier_phi_60_61_ladder_1 = _3129;
                frontier_phi_60_61_ladder_2 = _3125;
                frontier_phi_60_61_ladder_3 = _3123;
                frontier_phi_60_61_ladder_4 = _3121;
                frontier_phi_60_61_ladder_5 = _3127;
            }
            else
            {
                frontier_phi_60_61_ladder = _3017;
                frontier_phi_60_61_ladder_1 = _3015;
                frontier_phi_60_61_ladder_2 = _3011;
                frontier_phi_60_61_ladder_3 = _3009;
                frontier_phi_60_61_ladder_4 = _3007;
                frontier_phi_60_61_ladder_5 = _3013;
            }
            _3120 = frontier_phi_60_61_ladder_4;
            _3122 = frontier_phi_60_61_ladder_3;
            _3124 = frontier_phi_60_61_ladder_2;
            _3126 = frontier_phi_60_61_ladder_5;
            _3128 = frontier_phi_60_61_ladder_1;
            _3130 = frontier_phi_60_61_ladder;
        }
        float _3135 = isnan(1.0) ? _911 : (isnan(_911) ? 1.0 : min(_911, 1.0));
        _2940 = (_3135 * _3126) + _2452;
        _2942 = (_3135 * _3128) + _2454;
        _2944 = (_3135 * _3130) + _2456;
        _2946 = ((_3120 * _895) * _3135) + _2790;
        _2948 = ((_3122 * _897) * _3135) + _2792;
        _2950 = ((_3124 * _898) * _3135) + _2794;
    }
    else
    {
        _2940 = _2452;
        _2942 = _2454;
        _2944 = _2456;
        _2946 = _2790;
        _2948 = _2792;
        _2950 = _2794;
    }
    float _4874 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _4885 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _4896 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    uint _2970 = _255 + 6u;
    float _2978 = _833 / cbSceneParam._m0[86u].x;
    float _2979 = _834 / cbSceneParam._m0[86u].y;
    vec4 _2993 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2978, _2979, (log2((isnan(cbSceneParam._m0[77u].w) ? _768 : (isnan(_768) ? cbSceneParam._m0[77u].w : min(_768, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2995 = _2993.x;
    float _2996 = _2993.y;
    float _2997 = _2993.z;
    float _2998 = _2993.w;
    float _3070;
    float _3072;
    float _3074;
    float _3076;
    if (_768 > cbSceneParam._m0[78u].w)
    {
        float _3032 = isnan(_768) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _768 : min(cbSceneParam._m0[80u].w, _768));
        float _3033 = _3032 / _768;
        float _3044 = _3033 * _818;
        float _3045 = _819 * _3033;
        float _3046 = (-0.0) - _3045;
        float _3048 = _3033 * _820;
        float _3050 = (cbSceneParam._m0[77u].w * _3046) / _3032;
        float _3051 = _3050 + cbSceneParam._m0[79u].w;
        float _3052 = cbSceneParam._m0[79u].w - _3045;
        float _3058 = sqrt(((_3044 * _3044) + (_3045 * _3045)) + (_3048 * _3048));
        float _3061 = (1.0 - (cbSceneParam._m0[77u].w / _3032)) * _3058;
        float _3066 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3068 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3221;
        if (abs((_3046 - _3050) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3221 = ((((_3051 > 0.0) ? exp2(_3066 * _3051) : (2.0 - exp2(_3068 * _3051))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3061;
        }
        else
        {
            float _3181 = 1.0 / cbSceneParam._m0[80u].x;
            float _3182 = isnan(_3052) ? _3051 : (isnan(_3051) ? _3052 : max(_3051, _3052));
            float _3183 = isnan(_3052) ? _3051 : (isnan(_3051) ? _3052 : min(_3051, _3052));
            float _3192 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : min(_3182, 0.0));
            float _3193 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : min(_3183, 0.0));
            _3221 = ((abs(_3058 / _3046) * cbSceneParam._m0[80u].y) * ((((_3192 - _3193) * 2.0) - ((exp2(_3066 * (isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0)))) - exp2(_3066 * (isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0))))) * _3181)) - ((exp2(_3068 * _3192) - exp2(_3068 * _3193)) * _3181))) + (_3061 * cbSceneParam._m0[80u].z);
        }
        vec4 _3223 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2978, _2979, 1.0), 0.0);
        float _3232 = exp2((_3221 * (-1.44269502162933349609375)) * (1.0 - _3223.w));
        float _3233 = log2(_3232);
        float _3249 = log2(_2998);
        _3070 = (exp2(_3249 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3233 * cbSceneParam._m0[78u].x)) * _3223.x) / cbSceneParam._m0[78u].x)) + _2995;
        _3072 = (exp2(_3249 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3233 * cbSceneParam._m0[78u].y)) * _3223.y) / cbSceneParam._m0[78u].y)) + _2996;
        _3074 = (exp2(_3249 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3233 * cbSceneParam._m0[78u].z)) * _3223.z) / cbSceneParam._m0[78u].z)) + _2997;
        _3076 = _3232 * _2998;
    }
    else
    {
        _3070 = _2995;
        _3072 = _2996;
        _3074 = _2997;
        _3076 = _2998;
    }
    float _3088 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3089 = _3088 == 3.0;
    float _3090 = log2(_3076);
    float _3097 = exp2(_3090 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0))) * (_2940 + ((isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))) * _911))) + ((_2946 + ((isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0))) * _1717)) * cbPerFrame._m0[3u].x));
    float _3098 = exp2(_3090 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0))) * (_2942 + ((isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))) * _911))) + ((_2948 + ((isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0))) * _1717)) * cbPerFrame._m0[3u].x));
    float _3099 = exp2(_3090 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0))) * (_2944 + ((isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))) * _911))) + ((_2950 + ((isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0))) * _1717)) * cbPerFrame._m0[3u].x));
    float _3108 = (_3088 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3108 * (_3089 ? _3097 : (_3097 + (cbSceneParam._m0[72u].w * _3070)));
    SV_Target.y = _3108 * (_3089 ? _3098 : (_3098 + (cbSceneParam._m0[72u].w * _3072)));
    SV_Target.z = _3108 * (_3089 ? _3099 : (_3099 + (cbSceneParam._m0[72u].w * _3074)));
    SV_Target.w = cbInstanceData._m0[_2970].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2970].w;
}


