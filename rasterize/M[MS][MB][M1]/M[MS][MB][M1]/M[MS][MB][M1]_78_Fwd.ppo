#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1334;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = _243 * NORMAL.x;
    float _245 = _243 * NORMAL.y;
    float _246 = _243 * NORMAL.z;
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3661 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _3672 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3683 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    uint _275 = uint(roundEven(NORMAL.w)) * 13u;
    uint _280 = _275 + 1u;
    uint _284 = _275 + 2u;
    float _293 = sqrt(((cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x) + (cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x)) + (cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x));
    float _294 = _293 * TEXCOORD.z;
    float _295 = _293 * TEXCOORD.w;
    vec4 _308 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _294) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _295) + cbTextureTilingScale._m0[13u].w));
    vec4 _332 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _337 = _332.x * cbMtdParam._m0[11u].x;
    float _338 = _332.y * cbMtdParam._m0[11u].y;
    float _339 = _332.z * cbMtdParam._m0[11u].z;
    vec4 _358 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _294) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _295) + cbTextureTilingScale._m0[5u].w));
    vec4 _394 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _396 = _394.x;
    float _408 = dot(vec4(_396, _394.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _425 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_396 - _408) * cbMtdParam._m0[24u].y) + _408) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3694 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _426 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
    float _433 = (_426 * ((_358.x * cbMtdParam._m0[12u].x) - _337)) + _337;
    float _434 = (_426 * ((_358.y * cbMtdParam._m0[12u].y) - _338)) + _338;
    float _435 = (_426 * ((_358.z * cbMtdParam._m0[12u].z) - _339)) + _339;
    float _439 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _308.x) * _433;
    float _442 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _308.y) * _434;
    float _445 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _308.z) * _435;
    float _452 = ((_433 - _439) * (isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0)))) + _439;
    float _453 = ((_434 - _442) * (isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0)))) + _442;
    float _454 = ((_435 - _445) * (isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0)))) + _445;
    vec4 _467 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _294) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _295) + cbTextureTilingScale._m0[20u].w));
    vec4 _492 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _294) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _295) + cbTextureTilingScale._m0[4u].w));
    vec4 _509 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _511 = _509.x;
    float _512 = _509.y;
    float _513 = _509.z;
    float _522 = ((_492.z - _513) * _426) + _513;
    float _525 = ((((_492.x - _511) * _426) + _511) * 2.0) + (-1.0);
    float _526 = ((((_492.y - _512) * _426) + _512) * 2.0) + (-1.0);
    float _527 = dot(vec2(_525, _526), vec2(_525, _526));
    float _3705 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _532 = sqrt(1.0 - (isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))));
    float _537 = _525 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_467.x * 2.0) + (-1.0)));
    float _538 = _526 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_467.y * 2.0) + (-1.0)));
    vec4 _551 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _565 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _294) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _295) + cbTextureTilingScale._m0[19u].w));
    float _567 = _565.x;
    float _568 = 1.0 - _567;
    float _594 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_567 - _568) * cbMtdParam._m0[24u].w) + _568) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3716 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _595 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
    float _603 = ((((cbMtdParam._m0[10u].x - _452) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _595) + _452;
    float _604 = ((((cbMtdParam._m0[10u].y - _453) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _595) + _453;
    float _605 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _454)) * _595) + _454;
    vec4 _617 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _631 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _633 = _631.x;
    float _651 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _294) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _295) + cbTextureTilingScale._m0[9u].w)).x - _633) * _426) + _633;
    float _655 = ((_617.x - _651) * cbMtdParam._m0[19u].z) + _651;
    float _657 = _655 - (_655 * _595);
    float _662 = (((_467.z - _522) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _522;
    float _666 = ((cbMtdParam._m0[23u].y - _662) * _595) + _662;
    vec4 _685 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _294) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _295) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _687 = _685.x;
    float _688 = _685.y;
    float _692 = dot(vec4(cbMtdParam._m0[29u].yzw, 0.0), vec4(_244, _245, _246, 0.0));
    vec4 _707 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _294) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _295) + cbTextureTilingScale._m0[18u].w));
    float _709 = _707.x;
    float _714 = fract(_707.w + cbPerFrame._m0[22u].x);
    float _716 = (1.0 - _714) * _709;
    float _721 = ((_714 + (-1.0)) + _709) * 9.0;
    float _723 = ((_709 + (-1.0)) + _714) * 9.0;
    float _724 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _725 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _739 = (_716 * ((_707.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _724 : (isnan(_724) ? 3.0 : min(_724, 3.0))) * 3.1415927410125732421875);
    float _741 = (_716 * ((_707.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _725 : (isnan(_725) ? 3.0 : min(_725, 3.0))) * 3.1415927410125732421875);
    float _745 = inversesqrt(dot(vec3(_739, _741, 1.0), vec3(_739, _741, 1.0)));
    float _761 = (((((0.5 - _687) + ((_739 * 0.5) * _745)) * _692) + _687) * 2.0) + (-1.0);
    float _762 = (((((0.5 - _688) + ((_745 * 0.5) * _741)) * _692) + _688) * 2.0) + (-1.0);
    float _763 = dot(vec2(_761, _762), vec2(_761, _762));
    float _3747 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _779 = ((((cbMtdParam._m0[22u].z * _537) - _537) + _761) * _595) + _537;
    float _780 = ((((cbMtdParam._m0[22u].z * _538) - _538) + _762) * _595) + _538;
    float _781 = (_595 * (sqrt(1.0 - (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0)))) - _532)) + _532;
    float _783 = cbMtdParam._m0[22u].x + _551.w;
    float _786 = fma(_781, _244, fma(_780, _250 * TANGENT.x, (_236 * _228) * _779));
    float _789 = fma(_781, _245, fma(_780, _250 * TANGENT.y, (_236 * _229) * _779));
    float _792 = fma(_781, _246, fma(_780, _250 * TANGENT.z, (_236 * _230) * _779));
    float _796 = inversesqrt(dot(vec3(_786, _789, _792), vec3(_786, _789, _792)));
    float _797 = _796 * _786;
    float _798 = _796 * _789;
    float _799 = _796 * _792;
    float _3758 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _800 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
    float _3769 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _3780 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _3791 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _3802 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _3813 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _805 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _819 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _859 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _869 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _859);
    float _870 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _859);
    float _871 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _859);
    float _875 = inversesqrt(dot(vec3(_869, _870, _871), vec3(_869, _870, _871)));
    float _876 = _869 * _875;
    float _877 = _870 * _875;
    float _878 = _871 * _875;
    float _884 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _885 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _903 = fma(_799, cbSceneParam._m0[5u].z, fma(_798, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _797));
    float _906 = fma(_799, cbSceneParam._m0[6u].z, fma(_798, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _797));
    float _909 = fma(_799, cbSceneParam._m0[7u].z, fma(_798, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _797));
    uint _923 = (_275 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _929 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0)))) * cbInstanceData._m0[_923].x;
    float _930 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0)))) * cbInstanceData._m0[_923].y;
    float _931 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0)))) * cbInstanceData._m0[_923].z;
    float _3824 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _932 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _3835 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _933 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _3846 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _934 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _935 = 1.0 - _805;
    float _936 = _932 * _935;
    float _937 = _933 * _935;
    float _938 = _934 * _935;
    float _943 = (_932 + (-0.039999999105930328369140625)) * _805;
    float _944 = (_933 + (-0.039999999105930328369140625)) * _805;
    float _945 = (_934 + (-0.039999999105930328369140625)) * _805;
    float _946 = _943 + 0.039999999105930328369140625;
    float _948 = _944 + 0.039999999105930328369140625;
    float _949 = _945 + 0.039999999105930328369140625;
    vec4 _958 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _884, cbSceneParam._m0[86u].y * _885));
    float _962 = ((isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * TEXCOORD_5.w) * _958.x;
    float _963 = dot(vec3(_797, _798, _799), vec3(_876, _877, _878));
    float _966 = _963 * 2.0;
    float _970 = (_966 * _797) - _876;
    float _971 = (_966 * _798) - _877;
    float _972 = (_966 * _799) - _878;
    float _976 = abs(dot(vec3(_876, _877, _878), vec3(_797, _798, _799)));
    float _3857 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _978 = sqrt(_800);
    float _990 = exp2((_978 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_978 * 3.0));
    float _996 = (1.0 - _990) * ((_978 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _997 = _990 * _978;
    float _1025 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1029 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1033 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1333;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1059 = fma(_1033, cbModelParam._m0[26u].z, fma(_1029, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1025));
        float _1063 = fma(_1033, cbModelParam._m0[27u].z, fma(_1029, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1025));
        float _1067 = fma(_1033, cbModelParam._m0[28u].z, fma(_1029, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1025));
        float _1091 = _1025 + _797;
        float _1092 = _1029 + _798;
        float _1093 = _1033 + _799;
        float _1103 = fma(_1093, cbModelParam._m0[26u].z, fma(_1092, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1091)) - _1059;
        float _1104 = fma(_1093, cbModelParam._m0[27u].z, fma(_1092, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1091)) - _1063;
        float _1105 = fma(_1093, cbModelParam._m0[28u].z, fma(_1092, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1091)) - _1067;
        float _1109 = inversesqrt(dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105)));
        float _1122 = ((_1109 * _1103) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1059 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1123 = ((_1109 * _1104) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1063 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1124 = ((_1109 * _1105) / cbModelParam._m0[34u].z) + ((((((_1067 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        float _1161 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1127.x + (-0.5));
        float _1163 = _1161 * (_1127.y + (-0.5));
        float _1164 = _1161 * (_1127.z + (-0.5));
        float _1171 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1134.x + (-0.5));
        float _1173 = _1171 * (_1134.y + (-0.5));
        float _1174 = _1171 * (_1134.z + (-0.5));
        float _1181 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1141.x + (-0.5));
        float _1183 = _1181 * (_1141.y + (-0.5));
        float _1184 = _1181 * (_1141.z + (-0.5));
        float _1191 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1148.x + (-0.5));
        float _1193 = _1191 * (_1148.y + (-0.5));
        float _1194 = _1191 * (_1148.z + (-0.5));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1197 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1198 = _1162 * 0.5;
        float _1199 = _1172 * 0.5;
        float _1200 = _1182 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1215 = (dot(vec3(_797, _798, _799), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _3883 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1225 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _3894 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1227 = _1226 * 2.0;
        float _1231 = (1.0 - _1226) / (_1226 + 1.0);
        float _3905 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1241 = ((((1.0 - _1232) * (_1227 + 2.0)) * exp2(log2(isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_1227 + 1.0))) + _1232) * _1195;
        float _1242 = _1163 * 0.5;
        float _1243 = _1173 * 0.5;
        float _1244 = _1183 * 0.5;
        float _1245 = dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244));
        float _1250 = (_1245 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1245);
        float _1258 = (dot(vec3(_797, _798, _799), vec3(_1250 * _1242, _1250 * _1243, _1250 * _1244)) + 1.0) * 0.5;
        float _3916 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1267 = sqrt(((_1243 * _1243) + (_1242 * _1242)) + (_1244 * _1244)) / (_1196 + 9.9999997473787516355514526367188e-06);
        float _3927 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1269 = _1268 * 2.0;
        float _1273 = (1.0 - _1268) / (_1268 + 1.0);
        float _3938 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1283 = ((((1.0 - _1274) * (_1269 + 2.0)) * exp2(log2(isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1269 + 1.0))) + _1274) * _1196;
        float _1284 = _1164 * 0.5;
        float _1285 = _1174 * 0.5;
        float _1286 = _1184 * 0.5;
        float _1287 = dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286));
        float _1292 = (_1287 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1287);
        float _1300 = (dot(vec3(_797, _798, _799), vec3(_1292 * _1284, _1292 * _1285, _1292 * _1286)) + 1.0) * 0.5;
        float _3949 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1309 = sqrt(((_1285 * _1285) + (_1284 * _1284)) + (_1286 * _1286)) / (_1197 + 9.9999997473787516355514526367188e-06);
        float _3960 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1311 = _1310 * 2.0;
        float _1315 = (1.0 - _1310) / (_1310 + 1.0);
        float _3971 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1325 = ((((1.0 - _1316) * (_1311 + 2.0)) * exp2(log2(isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (_1311 + 1.0))) + _1316) * _1197;
        _1333 = _1164;
        _1335 = _1163;
        _1336 = _1162;
        _1337 = _1174;
        _1338 = _1173;
        _1339 = _1172;
        _1340 = _1184;
        _1341 = _1183;
        _1342 = _1182;
        _1343 = _1197;
        _1344 = _1196;
        _1345 = _1195;
        _1346 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)));
        _1347 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)));
        _1348 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
    }
    else
    {
        _1333 = _1334;
        _1335 = _1334;
        _1336 = _1334;
        _1337 = _1334;
        _1338 = _1334;
        _1339 = _1334;
        _1340 = _1334;
        _1341 = _1334;
        _1342 = _1334;
        _1343 = _1334;
        _1344 = _1334;
        _1345 = _1334;
        _1346 = 0.0;
        _1347 = 0.0;
        _1348 = 0.0;
    }
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1373 = fma(_1033, cbModelParam._m0[30u].z, fma(_1029, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1025));
        float _1377 = fma(_1033, cbModelParam._m0[31u].z, fma(_1029, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1025));
        float _1381 = fma(_1033, cbModelParam._m0[32u].z, fma(_1029, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1025));
        float _1404 = _1025 + _797;
        float _1405 = _1029 + _798;
        float _1406 = _1033 + _799;
        float _1416 = fma(_1406, cbModelParam._m0[30u].z, fma(_1405, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1404)) - _1373;
        float _1417 = fma(_1406, cbModelParam._m0[31u].z, fma(_1405, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1404)) - _1377;
        float _1418 = fma(_1406, cbModelParam._m0[32u].z, fma(_1405, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1404)) - _1381;
        float _1422 = inversesqrt(dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418)));
        float _1435 = ((_1422 * _1416) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1373 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1436 = ((_1422 * _1417) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1377 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1437 = ((_1422 * _1418) / cbModelParam._m0[35u].z) + ((((((_1381 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1439 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1435, _1436, _1437), 0.0);
        vec4 _1446 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1435, _1436, _1437), 0.0);
        vec4 _1453 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1435, _1436, _1437), 0.0);
        vec4 _1460 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1435, _1436, _1437), 0.0);
        float _1472 = exp2((_1439.w + (-0.5)) * 20.0) * 2.0;
        float _1473 = _1472 * (_1439.x + (-0.5));
        float _1474 = _1472 * (_1439.y + (-0.5));
        float _1475 = _1472 * (_1439.z + (-0.5));
        float _1482 = exp2((_1446.w + (-0.5)) * 20.0) * 2.0;
        float _1483 = _1482 * (_1446.x + (-0.5));
        float _1484 = _1482 * (_1446.y + (-0.5));
        float _1485 = _1482 * (_1446.z + (-0.5));
        float _1492 = exp2((_1453.w + (-0.5)) * 20.0) * 2.0;
        float _1493 = _1492 * (_1453.x + (-0.5));
        float _1494 = _1492 * (_1453.y + (-0.5));
        float _1495 = _1492 * (_1453.z + (-0.5));
        float _1502 = exp2((_1460.w + (-0.5)) * 20.0) * 2.0;
        float _1503 = _1502 * (_1460.x + (-0.5));
        float _1504 = _1502 * (_1460.y + (-0.5));
        float _1505 = _1502 * (_1460.z + (-0.5));
        float _1506 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1507 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1508 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1509 = _1473 * 0.5;
        float _1510 = _1483 * 0.5;
        float _1511 = _1493 * 0.5;
        float _1512 = dot(vec3(_1509, _1510, _1511), vec3(_1509, _1510, _1511));
        float _1517 = (_1512 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1512);
        float _1525 = (dot(vec3(_797, _798, _799), vec3(_1517 * _1509, _1517 * _1510, _1517 * _1511)) + 1.0) * 0.5;
        float _4012 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1534 = sqrt(((_1510 * _1510) + (_1509 * _1509)) + (_1511 * _1511)) / (_1506 + 9.9999997473787516355514526367188e-06);
        float _4023 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1536 = _1535 * 2.0;
        float _1540 = (1.0 - _1535) / (_1535 + 1.0);
        float _4034 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1550 = ((((1.0 - _1541) * (_1536 + 2.0)) * exp2(log2(isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_1536 + 1.0))) + _1541) * _1506;
        float _1551 = _1474 * 0.5;
        float _1552 = _1484 * 0.5;
        float _1553 = _1494 * 0.5;
        float _1554 = dot(vec3(_1551, _1552, _1553), vec3(_1551, _1552, _1553));
        float _1559 = (_1554 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1554);
        float _1567 = (dot(vec3(_797, _798, _799), vec3(_1559 * _1551, _1559 * _1552, _1559 * _1553)) + 1.0) * 0.5;
        float _4045 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1576 = sqrt(((_1552 * _1552) + (_1551 * _1551)) + (_1553 * _1553)) / (_1507 + 9.9999997473787516355514526367188e-06);
        float _4056 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1578 = _1577 * 2.0;
        float _1582 = (1.0 - _1577) / (_1577 + 1.0);
        float _4067 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1592 = ((((1.0 - _1583) * (_1578 + 2.0)) * exp2(log2(isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1578 + 1.0))) + _1583) * _1507;
        float _1593 = _1475 * 0.5;
        float _1594 = _1485 * 0.5;
        float _1595 = _1495 * 0.5;
        float _1596 = dot(vec3(_1593, _1594, _1595), vec3(_1593, _1594, _1595));
        float _1601 = (_1596 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1596);
        float _1609 = (dot(vec3(_797, _798, _799), vec3(_1601 * _1593, _1601 * _1594, _1601 * _1595)) + 1.0) * 0.5;
        float _4078 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1618 = sqrt(((_1594 * _1594) + (_1593 * _1593)) + (_1595 * _1595)) / (_1508 + 9.9999997473787516355514526367188e-06);
        float _4089 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1620 = _1619 * 2.0;
        float _1624 = (1.0 - _1619) / (_1619 + 1.0);
        float _4100 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1634 = ((((1.0 - _1625) * (_1620 + 2.0)) * exp2(log2(isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_1620 + 1.0))) + _1625) * _1508;
        _1642 = _1475;
        _1643 = _1474;
        _1644 = _1473;
        _1645 = _1485;
        _1646 = _1484;
        _1647 = _1483;
        _1648 = _1495;
        _1649 = _1494;
        _1650 = _1493;
        _1651 = _1508;
        _1652 = _1507;
        _1653 = _1506;
        _1654 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)));
        _1655 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0)));
        _1656 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0)));
    }
    else
    {
        _1642 = _1334;
        _1643 = _1334;
        _1644 = _1334;
        _1645 = _1334;
        _1646 = _1334;
        _1647 = _1334;
        _1648 = _1334;
        _1649 = _1334;
        _1650 = _1334;
        _1651 = _1334;
        _1652 = _1334;
        _1653 = _1334;
        _1654 = 0.0;
        _1655 = 0.0;
        _1656 = 0.0;
    }
    float _1666 = (cbModelParam._m0[1u].x * (_1654 - _1346)) + _1346;
    float _1667 = (cbModelParam._m0[1u].x * (_1655 - _1347)) + _1347;
    float _1668 = (cbModelParam._m0[1u].x * (_1656 - _1348)) + _1348;
    float _1689 = fma(_1668, cbSceneParam._m0[89u].z, fma(_1667, cbSceneParam._m0[89u].y, _1666 * cbSceneParam._m0[89u].x));
    float _1692 = fma(_1668, cbSceneParam._m0[90u].z, fma(_1667, cbSceneParam._m0[90u].y, _1666 * cbSceneParam._m0[90u].x));
    float _1695 = fma(_1668, cbSceneParam._m0[91u].z, fma(_1667, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1666));
    float _1710 = _970 * 0.5;
    float _1711 = _971 * 0.5;
    float _1712 = _972 * 0.5;
    float _1713 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1644, _1647, _1650, _1653));
    float _1716 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1643, _1646, _1649, _1652));
    float _1719 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1642, _1645, _1648, _1651));
    float _1753;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1726 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1333, _1337, _1340, _1343));
        float _1730 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1335, _1338, _1341, _1344));
        float _1734 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1336, _1339, _1342, _1345));
        float _1741 = dot(vec4(cbModelParam._m0[39u]), vec4(_1710, _1711, _1712, 1.0));
        _1753 = dot(vec3(isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0)), isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0)), isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1741) ? 0.0 : (isnan(0.0) ? _1741 : max(0.0, _1741))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1753 = 1.0;
    }
    float _1764;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1755 = dot(vec4(cbModelParam._m0[40u]), vec4(_1710, _1711, _1712, 1.0));
        _1764 = dot(vec3(isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0)), isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0)), isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1755) ? 0.0 : (isnan(0.0) ? _1755 : max(0.0, _1755))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1764 = 1.0;
    }
    float _1768 = (_1764 * cbModelParam._m0[1u].x) + (_1753 * (1.0 - cbModelParam._m0[1u].x));
    float _1778 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _800);
    float _1779 = isnan(_1778) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1778 : min(cbModelParam._m0[25u].z, _1778));
    float _1861;
    float _1863;
    float _1865;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1828 = fma(_1033, cbModelParam._m0[13u].z, fma(_1029, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1025)) + cbModelParam._m0[13u].w;
        float _1832 = fma(_1033, cbModelParam._m0[14u].z, fma(_1029, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1025)) + cbModelParam._m0[14u].w;
        float _1836 = fma(_1033, cbModelParam._m0[15u].z, fma(_1029, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1025)) + cbModelParam._m0[15u].w;
        float _1839 = fma(_972, cbModelParam._m0[13u].z, fma(_971, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _970));
        float _1842 = fma(_972, cbModelParam._m0[14u].z, fma(_971, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _970));
        float _1845 = fma(_972, cbModelParam._m0[15u].z, fma(_971, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _970));
        float _1873;
        if (_1839 > 0.0)
        {
            _1873 = abs((1.0 - _1828) / _1839);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1839 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1828 + 1.0) / _1839);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1873 = frontier_phi_14_12_ladder;
        }
        float _2076;
        if (_1842 > 0.0)
        {
            _2076 = abs((1.0 - _1832) / _1842);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1832 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2076 = frontier_phi_23_19_ladder;
        }
        float _2330;
        if (_1845 > 0.0)
        {
            _2330 = abs((1.0 - _1836) / _1845);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1836 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2330 = frontier_phi_35_30_ladder;
        }
        float _2332 = isnan(_2076) ? _1873 : (isnan(_1873) ? _2076 : min(_1873, _2076));
        float _2333 = isnan(_2330) ? _2332 : (isnan(_2332) ? _2330 : min(_2332, _2330));
        float _2337 = (_2333 * _1839) + _1828;
        float _2338 = (_2333 * _1842) + _1832;
        float _2339 = (_2333 * _1845) + _1836;
        float _2340 = _2333 * 9.9999997473787516355514526367188e-05;
        float _2342 = (-1.0) - _2340;
        float _2344 = _2340 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2339 > _2344) || ((_2339 < _2342) || ((_2338 > _2344) || ((_2338 < _2342) || ((_2337 < _2342) || (_2337 > _2344))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2467 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2339, cbModelParam._m0[9u].z, fma(_2338, cbModelParam._m0[9u].y, _2337 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2339, cbModelParam._m0[10u].z, fma(_2338, cbModelParam._m0[10u].y, _2337 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2339, cbModelParam._m0[11u].z, fma(_2338, cbModelParam._m0[11u].y, _2337 * cbModelParam._m0[11u].x))), _1779);
            frontier_phi_13_35_ladder = _2467.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2467.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2467.x * cbModelParam._m0[1u].y;
        }
        _1861 = frontier_phi_13_35_ladder_2;
        _1863 = frontier_phi_13_35_ladder_1;
        _1865 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1849 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_970, _971, _972), _1779);
        _1861 = _1849.x * cbModelParam._m0[1u].y;
        _1863 = _1849.y * cbModelParam._m0[1u].y;
        _1865 = _1849.z * cbModelParam._m0[1u].y;
    }
    float _1869 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _800);
    float _1870 = isnan(_1869) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1869 : min(cbModelParam._m0[25u].w, _1869));
    float _1960;
    float _1962;
    float _1964;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1924 = fma(_1033, cbModelParam._m0[21u].z, fma(_1029, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1025)) + cbModelParam._m0[21u].w;
        float _1928 = fma(_1033, cbModelParam._m0[22u].z, fma(_1029, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1025)) + cbModelParam._m0[22u].w;
        float _1932 = fma(_1033, cbModelParam._m0[23u].z, fma(_1029, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1025)) + cbModelParam._m0[23u].w;
        float _1935 = fma(_972, cbModelParam._m0[21u].z, fma(_971, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _970));
        float _1938 = fma(_972, cbModelParam._m0[22u].z, fma(_971, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _970));
        float _1941 = fma(_972, cbModelParam._m0[23u].z, fma(_971, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _970));
        float _2081;
        if (_1935 > 0.0)
        {
            _2081 = abs((1.0 - _1924) / _1935);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1935 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1924 + 1.0) / _1935);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2081 = frontier_phi_25_21_ladder;
        }
        float _2357;
        if (_1938 > 0.0)
        {
            _2357 = abs((1.0 - _1928) / _1938);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1938 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1928 + 1.0) / _1938);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2357 = frontier_phi_37_32_ladder;
        }
        float _2570;
        if (_1941 > 0.0)
        {
            _2570 = abs((1.0 - _1932) / _1941);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1941 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1932 + 1.0) / _1941);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2570 = frontier_phi_46_43_ladder;
        }
        float _2572 = isnan(_2357) ? _2081 : (isnan(_2081) ? _2357 : min(_2081, _2357));
        float _2573 = isnan(_2570) ? _2572 : (isnan(_2572) ? _2570 : min(_2572, _2570));
        float _2577 = (_2573 * _1935) + _1924;
        float _2578 = (_2573 * _1938) + _1928;
        float _2579 = (_2573 * _1941) + _1932;
        float _2580 = _2573 * 9.9999997473787516355514526367188e-05;
        float _2581 = (-1.0) - _2580;
        float _2583 = _2580 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2579 > _2583) || ((_2579 < _2581) || ((_2578 > _2583) || ((_2578 < _2581) || ((_2577 < _2581) || (_2577 > _2583))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2778 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2579, cbModelParam._m0[17u].z, fma(_2578, cbModelParam._m0[17u].y, _2577 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2579, cbModelParam._m0[18u].z, fma(_2578, cbModelParam._m0[18u].y, _2577 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2579, cbModelParam._m0[19u].z, fma(_2578, cbModelParam._m0[19u].y, _2577 * cbModelParam._m0[19u].x))), _1870);
            frontier_phi_22_46_ladder = _2778.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2778.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2778.x * cbModelParam._m0[1u].z;
        }
        _1960 = frontier_phi_22_46_ladder_2;
        _1962 = frontier_phi_22_46_ladder_1;
        _1964 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1944 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_970, _971, _972), _1870);
        _1960 = _1944.x * cbModelParam._m0[1u].z;
        _1962 = _1944.y * cbModelParam._m0[1u].z;
        _1964 = _1944.z * cbModelParam._m0[1u].z;
    }
    float _1977 = (((_996 * _946) + _997) * _962) * ((cbModelParam._m0[1u].w * (_1960 - _1861)) + _1861);
    float _1979 = (((_996 * _948) + _997) * _962) * ((cbModelParam._m0[1u].w * (_1962 - _1863)) + _1863);
    float _1981 = (((_996 * _949) + _997) * _962) * ((cbModelParam._m0[1u].w * (_1964 - _1865)) + _1865);
    float _1984 = fma(_1981, cbSceneParam._m0[89u].z, fma(_1979, cbSceneParam._m0[89u].y, _1977 * cbSceneParam._m0[89u].x));
    float _1987 = fma(_1981, cbSceneParam._m0[90u].z, fma(_1979, cbSceneParam._m0[90u].y, _1977 * cbSceneParam._m0[90u].x));
    float _1990 = fma(_1981, cbSceneParam._m0[91u].z, fma(_1979, cbSceneParam._m0[91u].y, _1977 * cbSceneParam._m0[91u].x));
    uvec4 _2000 = floatBitsToUint(cbInstanceData._m0[_275 + 5u]);
    uint _2002 = _2000.x * 14u;
    uint _2003 = _2002 + 13u;
    float _2010 = _962 + (-1.0);
    float _2015 = (cbLight._m0[_2003].x * _2010) + 1.0;
    float _2016 = (cbLight._m0[_2003].y * _2010) + 1.0;
    float _2017 = (cbLight._m0[_2003].z * _2010) + 1.0;
    float _2018 = (cbLight._m0[_2003].w * _2010) + 1.0;
    uint _2019 = _2002 + 5u;
    float _2025 = isnan(1.0) ? _2016 : (isnan(_2016) ? 1.0 : min(_2016, 1.0));
    uint _2029 = _2002 + 4u;
    float _2035 = isnan(1.0) ? _2015 : (isnan(_2015) ? 1.0 : min(_2015, 1.0));
    uint _2039 = _2002 | 1u;
    float _2050 = dot(vec3(cbLight._m0[_2002].xyz), vec3(_797, _798, _799));
    float _2053 = dot(vec3(cbLight._m0[_2039].xyz), vec3(_797, _798, _799));
    float _4236 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _4247 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _2058 = (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * 0.3183098733425140380859375;
    float _2060 = (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * 0.3183098733425140380859375;
    float _2067 = ((cbLight._m0[_2019].x * _2025) * _2060) + ((cbLight._m0[_2029].x * _2035) * _2058);
    float _2068 = ((_2025 * cbLight._m0[_2019].y) * _2060) + ((_2035 * cbLight._m0[_2029].y) * _2058);
    float _2069 = ((_2025 * cbLight._m0[_2019].z) * _2060) + ((_2035 * cbLight._m0[_2029].z) * _2058);
    uvec4 _2073 = floatBitsToUint(cbLight._m0[_2002 + 12u]);
    bool _2075 = _2073.x == 0u;
    float _2086;
    float _2088;
    float _2090;
    if (_2075)
    {
        _2086 = _2067;
        _2088 = _2068;
        _2090 = _2069;
    }
    else
    {
        uint _2094 = _2002 + 6u;
        float _2110 = (dot(vec3(cbLight._m0[_2002 + 2u].xyz), vec3(_797, _798, _799)) * 0.5) + 0.5;
        float _2111 = _2110 * _2110;
        float _4258 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
        float _2112 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _2113 = isnan(1.0) ? _2017 : (isnan(_2017) ? 1.0 : min(_2017, 1.0));
        _2086 = (((cbLight._m0[_2094].x * 0.3183098733425140380859375) * _2112) * _2113) + _2067;
        _2088 = (((cbLight._m0[_2094].y * 0.3183098733425140380859375) * _2112) * _2113) + _2068;
        _2090 = (((cbLight._m0[_2094].z * 0.3183098733425140380859375) * _2112) * _2113) + _2069;
    }
    bool _2093 = _2073.y == 0u;
    float _2131;
    float _2133;
    float _2135;
    if (_2093)
    {
        _2131 = _2086;
        _2133 = _2088;
        _2135 = _2090;
    }
    else
    {
        uint _2301 = _2002 + 7u;
        float _2317 = (dot(vec3(cbLight._m0[_2002 + 3u].xyz), vec3(_797, _798, _799)) * 0.5) + 0.5;
        float _2318 = _2317 * _2317;
        float _4274 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        float _2319 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _2320 = isnan(1.0) ? _2018 : (isnan(_2018) ? 1.0 : min(_2018, 1.0));
        _2131 = (((cbLight._m0[_2301].x * 0.3183098733425140380859375) * _2319) * _2320) + _2086;
        _2133 = (((cbLight._m0[_2301].y * 0.3183098733425140380859375) * _2319) * _2320) + _2088;
        _2135 = (((cbLight._m0[_2301].z * 0.3183098733425140380859375) * _2319) * _2320) + _2090;
    }
    uint _2138 = _2002 + 8u;
    float _2151 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2002].w)) * _800) * 0.949999988079071044921875);
    float _2152 = _2151 * _2151;
    float _2153 = cbLight._m0[_2002].x + _876;
    float _2154 = cbLight._m0[_2002].y + _877;
    float _2155 = cbLight._m0[_2002].z + _878;
    float _2159 = inversesqrt(dot(vec3(_2153, _2154, _2155), vec3(_2153, _2154, _2155)));
    float _2160 = _2159 * _2153;
    float _2161 = _2159 * _2154;
    float _2162 = _2159 * _2155;
    float _2163 = dot(vec3(_797, _798, _799), vec3(cbLight._m0[_2002].xyz));
    float _4290 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2166 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
    float _4301 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _2167 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
    float _2168 = dot(vec3(_797, _798, _799), vec3(_2160, _2161, _2162));
    float _4312 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2171 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
    float _2172 = dot(vec3(cbLight._m0[_2002].xyz), vec3(_2160, _2161, _2162));
    float _4323 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2176 = _2152 * _2152;
    float _2180 = ((_2171 * _2171) * (_2176 + (-1.0))) + 1.0;
    float _2188 = exp2(log2(1.0 - (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0)))) * 5.0);
    float _2189 = 0.959999978542327880859375 - _943;
    float _2191 = 0.959999978542327880859375 - _944;
    float _2192 = 0.959999978542327880859375 - _945;
    float _2199 = 1.0 - _2152;
    float _2210 = (0.5 / (((_2167 * ((_2166 * _2199) + _2152)) + 9.9999999392252902907785028219223e-09) + (((_2167 * _2199) + _2152) * _2166))) * _2166;
    float _4334 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2212 = (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_2176 / ((_2180 * _2180) * 3.141590118408203125));
    uint _2223 = _2002 + 9u;
    float _2234 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2039].w)) * _800) * 0.949999988079071044921875);
    float _2235 = _2234 * _2234;
    float _2236 = cbLight._m0[_2039].x + _876;
    float _2237 = cbLight._m0[_2039].y + _877;
    float _2238 = cbLight._m0[_2039].z + _878;
    float _2242 = inversesqrt(dot(vec3(_2236, _2237, _2238), vec3(_2236, _2237, _2238)));
    float _2243 = _2242 * _2236;
    float _2244 = _2242 * _2237;
    float _2245 = _2242 * _2238;
    float _2246 = dot(vec3(_797, _798, _799), vec3(cbLight._m0[_2039].xyz));
    float _4345 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
    float _2249 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
    float _2250 = dot(vec3(_797, _798, _799), vec3(_2243, _2244, _2245));
    float _4356 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2253 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
    float _2254 = dot(vec3(cbLight._m0[_2039].xyz), vec3(_2243, _2244, _2245));
    float _4367 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2258 = _2235 * _2235;
    float _2262 = ((_2253 * _2253) * (_2258 + (-1.0))) + 1.0;
    float _2269 = exp2(log2(1.0 - (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0)))) * 5.0);
    float _2276 = 1.0 - _2235;
    float _2286 = (0.5 / (((_2167 * ((_2249 * _2276) + _2235)) + 9.9999999392252902907785028219223e-09) + (((_2167 * _2276) + _2235) * _2249))) * _2249;
    float _4378 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2288 = (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (_2258 / ((_2262 * _2262) * 3.141590118408203125));
    float _2298 = (((((_2269 * _2189) + _946) * cbLight._m0[_2223].x) * _2288) * _2025) + (((((_2188 * _2189) + _946) * cbLight._m0[_2138].x) * _2212) * _2035);
    float _2299 = (((((_2269 * _2191) + _948) * cbLight._m0[_2223].y) * _2288) * _2025) + (((((_2188 * _2191) + _948) * cbLight._m0[_2138].y) * _2212) * _2035);
    float _2300 = (((((_2269 * _2192) + _949) * cbLight._m0[_2223].z) * _2288) * _2025) + (((((_2188 * _2192) + _949) * cbLight._m0[_2138].z) * _2212) * _2035);
    float _2362;
    float _2364;
    float _2366;
    if (_2075)
    {
        _2362 = _2298;
        _2364 = _2299;
        _2366 = _2300;
    }
    else
    {
        uint _2368 = _2002 + 2u;
        uint _2372 = _2002 + 10u;
        float _2386 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2368].w)) * _800) * 0.949999988079071044921875);
        float _2387 = _2386 * _2386;
        float _2388 = cbLight._m0[_2368].x + _876;
        float _2389 = cbLight._m0[_2368].y + _877;
        float _2390 = cbLight._m0[_2368].z + _878;
        float _2394 = inversesqrt(dot(vec3(_2388, _2389, _2390), vec3(_2388, _2389, _2390)));
        float _2395 = _2394 * _2388;
        float _2396 = _2394 * _2389;
        float _2397 = _2394 * _2390;
        float _2398 = dot(vec3(_797, _798, _799), vec3(cbLight._m0[_2368].xyz));
        float _4389 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2401 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _2402 = dot(vec3(_797, _798, _799), vec3(_2395, _2396, _2397));
        float _4400 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2405 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _2406 = dot(vec3(cbLight._m0[_2368].xyz), vec3(_2395, _2396, _2397));
        float _4411 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2410 = _2387 * _2387;
        float _2414 = ((_2405 * _2405) * (_2410 + (-1.0))) + 1.0;
        float _2421 = exp2(log2(1.0 - (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0)))) * 5.0);
        float _2428 = 1.0 - _2387;
        float _2438 = (0.5 / (((_2167 * ((_2401 * _2428) + _2387)) + 9.9999999392252902907785028219223e-09) + (((_2167 * _2428) + _2387) * _2401))) * _2401;
        float _4422 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2440 = (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_2410 / ((_2414 * _2414) * 3.141590118408203125));
        float _2441 = isnan(1.0) ? _2017 : (isnan(_2017) ? 1.0 : min(_2017, 1.0));
        _2362 = (((((_2421 * _2189) + _946) * cbLight._m0[_2372].x) * _2440) * _2441) + _2298;
        _2364 = (((((_2421 * _2191) + _948) * cbLight._m0[_2372].y) * _2440) * _2441) + _2299;
        _2366 = (((((_2421 * _2192) + _949) * cbLight._m0[_2372].z) * _2440) * _2441) + _2300;
    }
    float _2476;
    float _2478;
    float _2480;
    if (_2093)
    {
        _2476 = _2362;
        _2478 = _2364;
        _2480 = _2366;
    }
    else
    {
        uint _2487 = _2002 + 3u;
        uint _2491 = _2002 + 11u;
        float _2505 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2487].w)) * _800) * 0.949999988079071044921875);
        float _2506 = _2505 * _2505;
        float _2507 = cbLight._m0[_2487].x + _876;
        float _2508 = cbLight._m0[_2487].y + _877;
        float _2509 = cbLight._m0[_2487].z + _878;
        float _2513 = inversesqrt(dot(vec3(_2507, _2508, _2509), vec3(_2507, _2508, _2509)));
        float _2514 = _2513 * _2507;
        float _2515 = _2513 * _2508;
        float _2516 = _2513 * _2509;
        float _2517 = dot(vec3(_797, _798, _799), vec3(cbLight._m0[_2487].xyz));
        float _4438 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2520 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _2521 = dot(vec3(_797, _798, _799), vec3(_2514, _2515, _2516));
        float _4449 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        float _2524 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _2525 = dot(vec3(cbLight._m0[_2487].xyz), vec3(_2514, _2515, _2516));
        float _4460 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        float _2529 = _2506 * _2506;
        float _2533 = ((_2524 * _2524) * (_2529 + (-1.0))) + 1.0;
        float _2540 = exp2(log2(1.0 - (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0)))) * 5.0);
        float _2547 = 1.0 - _2506;
        float _2557 = (0.5 / (((_2167 * ((_2520 * _2547) + _2506)) + 9.9999999392252902907785028219223e-09) + (((_2167 * _2547) + _2506) * _2520))) * _2520;
        float _4471 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
        float _2559 = (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_2529 / ((_2533 * _2533) * 3.141590118408203125));
        float _2560 = isnan(1.0) ? _2018 : (isnan(_2018) ? 1.0 : min(_2018, 1.0));
        _2476 = (((((_2540 * _2189) + _946) * cbLight._m0[_2491].x) * _2559) * _2560) + _2362;
        _2478 = (((((_2540 * _2191) + _948) * cbLight._m0[_2491].y) * _2559) * _2560) + _2364;
        _2480 = (((((_2540 * _2192) + _949) * cbLight._m0[_2491].z) * _2559) * _2560) + _2366;
    }
    float _2695;
    float _2697;
    float _2699;
    float _2701;
    float _2703;
    float _2705;
    if (_2000.y == 0u)
    {
        float _2635 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2636 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2635;
        float _2637 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2635;
        float _2638 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2635;
        uvec4 _2650 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2651 = _2650.x;
        uint _2662 = uint((float(_2650.y) * floor(float(uint(cbSceneParam._m0[85u].y * _885) / _2651))) + floor(float(uint(cbSceneParam._m0[85u].x * _884) / _2651)));
        float _2672 = (log2(_2638 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2673 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
        uint _2676 = uint(isnan(14.0) ? _2673 : (isnan(_2673) ? 14.0 : min(_2673, 14.0)));
        uvec4 _2681 = texelFetch(g_lightClusterGridBuffer, int(((_2676 << 2u) + (_2662 << 6u)) >> 2u));
        uint _2682 = _2681.x;
        uint _2683 = _2650.z;
        float _2783;
        float _2785;
        float _2787;
        float _2789;
        float _2791;
        float _2793;
        if (((((1u << ((_2683 >> 4u) & 15u)) + 4294967295u) & _2682) == 0u) || ((_2683 & 240u) == 0u))
        {
            _2783 = 0.0;
            _2785 = 0.0;
            _2787 = 0.0;
            _2789 = 0.0;
            _2791 = 0.0;
            _2793 = 0.0;
        }
        else
        {
            float _2784;
            float _2786;
            float _2788;
            float _2790;
            float _2792;
            float _2794;
            float _2928 = 0.0;
            float _2929 = 0.0;
            float _2930 = 0.0;
            float _2931 = 0.0;
            float _2932 = 0.0;
            float _2933 = 0.0;
            uint _2934 = 0u;
            uint _2943;
            bool _2944;
            for (;;)
            {
                _2943 = texelFetch(g_lightClassification, int((((_2676 << 5u) + (_2662 << 9u)) + (_2934 << 2u)) >> 2u)).x;
                _2944 = _2943 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2944)
                {
                    frontier_phi_61_pred = _2928;
                    frontier_phi_61_pred_1 = _2933;
                    frontier_phi_61_pred_2 = _2932;
                    frontier_phi_61_pred_3 = _2931;
                    frontier_phi_61_pred_4 = _2930;
                    frontier_phi_61_pred_5 = _2929;
                }
                else
                {
                    float _3052;
                    float _3053;
                    float _3054;
                    float _3055;
                    float _3056;
                    float _3057;
                    uint _3058;
                    _3052 = _2928;
                    _3053 = _2929;
                    _3054 = _2930;
                    _3055 = _2931;
                    _3056 = _2932;
                    _3057 = _2933;
                    _3058 = _2943;
                    float _2984;
                    float _2985;
                    float _2986;
                    float _2987;
                    float _2988;
                    float _2989;
                    for (;;)
                    {
                        uint _3062 = uint(findLSB(_3058)) + (_2934 << 5u);
                        uint _3059 = (_3058 + 4294967295u) & _3058;
                        uint _3064 = _3062 * 48u;
                        vec4 _3078 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3064)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 3u)).x));
                        uint _3084 = (_3062 * 48u) + 4u;
                        vec4 _3097 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3084)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 3u)).x));
                        uint _3103 = (_3062 * 48u) + 8u;
                        vec3 _3114 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3103)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 2u)).x));
                        float _3118 = _3078.x - _2636;
                        float _3119 = _3078.y - _2637;
                        float _3120 = _3078.z - _2638;
                        float _3121 = dot(vec3(_3118, _3119, _3120), vec3(_3118, _3119, _3120));
                        float _3124 = inversesqrt(_3121);
                        float _3125 = _3124 * _3118;
                        float _3126 = _3124 * _3119;
                        float _3127 = _3124 * _3120;
                        float _3128 = dot(vec3(_903, _906, _909), vec3(_3125, _3126, _3127));
                        float _3133 = 1.0 - (_3121 * _3078.w);
                        float _4497 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                        float _3134 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                        float _3135 = sqrt(_3121) * _3097.w;
                        float _3138 = 1.39999997615814208984375 / (_3135 + 1.39999997615814208984375);
                        float _3139 = _3138 * _3138;
                        float _3142 = ((1.0 - _3139) * _3128) + _3139;
                        float _3145 = _3135 * _3135;
                        float _3149 = ((isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0))) * _3134) / ((_3145 * 0.699999988079071044921875) + 1.0);
                        float _3153 = (-0.0) - _2636;
                        float _3154 = (-0.0) - _2637;
                        float _3155 = (-0.0) - _2638;
                        float _3159 = inversesqrt(dot(vec3(_3153, _3154, _3155), vec3(_3153, _3154, _3155)));
                        float _3160 = _3159 * _3153;
                        float _3161 = _3159 * _3154;
                        float _3162 = _3159 * _3155;
                        float _3170 = exp2(log2(1.0 / ((_3145 * 3.5) + 5.0)) * 0.25);
                        float _3171 = 1.0 - _978;
                        float _3178 = sqrt(1.0 - ((1.0 - (_3171 * _3171)) * (1.0 - (_3170 * _3170))));
                        float _3179 = _3178 * _3178;
                        float _3180 = _3179 * _3179;
                        float _3181 = _3160 + _3125;
                        float _3182 = _3161 + _3126;
                        float _3183 = _3162 + _3127;
                        float _3187 = inversesqrt(dot(vec3(_3181, _3182, _3183), vec3(_3181, _3182, _3183)));
                        float _3191 = dot(vec3(_903, _906, _909), vec3(_3160, _3161, _3162));
                        float _4513 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                        float _3194 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
                        float _3195 = dot(vec3(_903, _906, _909), vec3(_3187 * _3181, _3187 * _3182, _3187 * _3183));
                        float _4524 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                        float _3198 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                        float _3202 = ((_3198 * _3198) * (_3180 + (-1.0))) + 1.0;
                        float _3203 = _3138 * _3179;
                        float _3204 = _3203 * _3203;
                        float _3207 = ((1.0 - _3204) * _3128) + _3204;
                        float _4535 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                        float _3208 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                        float _3209 = 1.0 - _3179;
                        float _3219 = (0.5 / (((_3208 * ((_3194 * _3209) + _3179)) + 9.9999999392252902907785028219223e-09) + (((_3208 * _3209) + _3179) * _3194))) * _3208;
                        float _4546 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                        float _3229 = (((_3180 * 3.1415927410125732421875) * (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0)))) / ((_3202 * _3202) * ((_3145 * 2.1991131305694580078125) + 3.141590118408203125))) * _3134;
                        _2987 = (_3149 * _3097.x) + _3055;
                        _2988 = (_3149 * _3097.y) + _3056;
                        _2989 = (_3149 * _3097.z) + _3057;
                        _2984 = (_3229 * _3114.x) + _3052;
                        _2985 = (_3229 * _3114.y) + _3053;
                        _2986 = (_3229 * _3114.z) + _3054;
                        if (_3059 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3052 = _2984;
                            _3053 = _2985;
                            _3054 = _2986;
                            _3055 = _2987;
                            _3056 = _2988;
                            _3057 = _2989;
                            _3058 = _3059;
                        }
                    }
                    frontier_phi_61_pred = _2984;
                    frontier_phi_61_pred_1 = _2989;
                    frontier_phi_61_pred_2 = _2988;
                    frontier_phi_61_pred_3 = _2987;
                    frontier_phi_61_pred_4 = _2986;
                    frontier_phi_61_pred_5 = _2985;
                }
                _2784 = frontier_phi_61_pred;
                _2794 = frontier_phi_61_pred_1;
                _2792 = frontier_phi_61_pred_2;
                _2790 = frontier_phi_61_pred_3;
                _2788 = frontier_phi_61_pred_4;
                _2786 = frontier_phi_61_pred_5;
                uint _2935 = _2934 + 1u;
                if (_2935 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2928 = _2784;
                    _2929 = _2786;
                    _2930 = _2788;
                    _2931 = _2790;
                    _2932 = _2792;
                    _2933 = _2794;
                    _2934 = _2935;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2783 = _2784;
            _2785 = _2786;
            _2787 = _2788;
            _2789 = _2790;
            _2791 = _2792;
            _2793 = _2794;
        }
        uvec4 _2797 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2798 = _2797.z;
        uint _2800 = (_2798 >> 8u) & 15u;
        float _2896;
        float _2898;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        if (((4294967295u << _2800) & _2682) == 0u)
        {
            _2896 = _2783;
            _2898 = _2785;
            _2900 = _2787;
            _2902 = _2789;
            _2904 = _2791;
            _2906 = _2793;
        }
        else
        {
            float _2921 = inversesqrt(dot(vec3(_2636, _2637, _2638), vec3(_2636, _2637, _2638)));
            float _2922 = _2921 * _2636;
            float _2923 = _2921 * _2637;
            float _2924 = _2921 * _2638;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2800 < ((_2798 >> 12u) & 15u))
            {
                float _2897;
                float _2899;
                float _2901;
                float _2903;
                float _2905;
                float _2907;
                float _3035 = _2783;
                float _3036 = _2785;
                float _3037 = _2787;
                float _3038 = _2789;
                float _3039 = _2791;
                float _3040 = _2793;
                uint _3041 = _2800;
                uint _3050;
                bool _3051;
                for (;;)
                {
                    _3050 = texelFetch(g_lightClassification, int((((_2676 << 5u) + (_2662 << 9u)) + (_3041 << 2u)) >> 2u)).x;
                    _3051 = _3050 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3051)
                    {
                        frontier_phi_67_pred = _3038;
                        frontier_phi_67_pred_1 = _3039;
                        frontier_phi_67_pred_2 = _3040;
                        frontier_phi_67_pred_3 = _3037;
                        frontier_phi_67_pred_4 = _3036;
                        frontier_phi_67_pred_5 = _3035;
                    }
                    else
                    {
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3237;
                        float _3238;
                        float _3239;
                        float _3527;
                        float _3528;
                        float _3529;
                        float _3530;
                        float _3531;
                        float _3532;
                        float _3247 = _3035;
                        float _3248 = _3036;
                        float _3249 = _3037;
                        float _3250 = _3038;
                        float _3251 = _3039;
                        float _3252 = _3040;
                        uint _3253 = _3050;
                        uint _3254;
                        vec4 _3279;
                        float _3280;
                        vec4 _3295;
                        vec3 _3307;
                        vec4 _3322;
                        vec4 _3337;
                        float _3383;
                        bool _3384;
                        for (;;)
                        {
                            uint _3264 = ((_3041 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3253));
                            _3254 = (_3253 + 4294967295u) & _3253;
                            uint _3266 = _3264 * 40u;
                            _3279 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3266)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 3u)).x));
                            _3280 = _3279.w;
                            uint _3282 = (_3264 * 40u) + 4u;
                            _3295 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3282)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 3u)).x));
                            uint _3297 = (_3264 * 40u) + 8u;
                            _3307 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x));
                            uint _3309 = (_3264 * 40u) + 16u;
                            _3322 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3309)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 3u)).x));
                            uint _3324 = (_3264 * 40u) + 20u;
                            _3337 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3324)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 3u)).x));
                            uint _3339 = (_3264 * 40u) + 24u;
                            vec4 _3352 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3339)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 3u)).x));
                            uint _3358 = (_3264 * 40u) + 28u;
                            vec4 _3371 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3358)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 3u)).x));
                            _3383 = fma(_2638, _3371.z, fma(_2637, _3371.y, _3371.x * _2636)) + _3371.w;
                            _3384 = !((fma(_2638, _3352.z, fma(_2637, _3352.y, _3352.x * _2636)) + _3352.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3384)
                            {
                                float _3411 = _3279.x - _2636;
                                float _3412 = _3279.y - _2637;
                                float _3413 = _3279.z - _2638;
                                float _3414 = dot(vec3(_3411, _3412, _3413), vec3(_3411, _3412, _3413));
                                float _3417 = inversesqrt(_3414);
                                float _3418 = _3417 * _3411;
                                float _3419 = _3417 * _3412;
                                float _3420 = _3417 * _3413;
                                float _3424 = 1.0 - (_3414 / (_3280 * _3280));
                                float _4557 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                                float _3425 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                                float _3429 = sqrt(_3414) * _3295.w;
                                float _3431 = 1.39999997615814208984375 / (_3429 + 1.39999997615814208984375);
                                float _3432 = _3431 * _3431;
                                float _3435 = ((1.0 - _3432) * dot(vec3(_3418, _3419, _3420), vec3(_903, _906, _909))) + _3432;
                                float _3438 = _3429 * _3429;
                                float _3442 = (fma(_2638, _3322.z, fma(_2637, _3322.y, _3322.x * _2636)) + _3322.w) / _3383;
                                float _3443 = (fma(_2638, _3337.z, fma(_2637, _3337.y, _3337.x * _2636)) + _3337.w) / _3383;
                                float _3447 = 1.0 - dot(vec2(_3442, _3443), vec2(_3442, _3443));
                                float _4573 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3448 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
                                float _3449 = _3448 * (((isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0))) * _3425) / ((_3438 * 0.699999988079071044921875) + 1.0));
                                float _3461 = exp2(log2(1.0 / ((_3438 * 3.5) + 5.0)) * 0.25);
                                float _3462 = 1.0 - _978;
                                float _3469 = sqrt(1.0 - ((1.0 - (_3462 * _3462)) * (1.0 - (_3461 * _3461))));
                                float _3470 = _3469 * _3469;
                                float _3471 = _3470 * _3470;
                                float _3472 = _3418 - _2922;
                                float _3473 = _3419 - _2923;
                                float _3474 = _3420 - _2924;
                                float _3478 = inversesqrt(dot(vec3(_3472, _3473, _3474), vec3(_3472, _3473, _3474)));
                                float _3482 = dot(vec3(_903, _906, _909), vec3((-0.0) - _2922, (-0.0) - _2923, (-0.0) - _2924));
                                float _4584 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
                                float _3485 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
                                float _3486 = dot(vec3(_903, _906, _909), vec3(_3478 * _3472, _3478 * _3473, _3478 * _3474));
                                float _4595 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                                float _3489 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
                                float _3493 = ((_3489 * _3489) * (_3471 + (-1.0))) + 1.0;
                                float _3494 = _3431 * _3470;
                                float _3495 = _3494 * _3494;
                                float _3501 = ((1.0 - _3495) * dot(vec3(_903, _906, _909), vec3(_3418, _3419, _3420))) + _3495;
                                float _4606 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                                float _3502 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                                float _3503 = 1.0 - _3470;
                                float _3513 = (0.5 / (((_3502 * ((_3485 * _3503) + _3470)) + 9.9999999392252902907785028219223e-09) + (((_3502 * _3503) + _3470) * _3485))) * _3502;
                                float _4617 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                                float _3523 = (_3448 * _3425) * (((_3471 * 3.1415927410125732421875) * (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0)))) / ((_3493 * _3493) * ((_3438 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3523 * _3307.x;
                                frontier_phi_73_pred_1 = _3523 * _3307.y;
                                frontier_phi_73_pred_2 = _3449 * _3295.z;
                                frontier_phi_73_pred_3 = _3449 * _3295.y;
                                frontier_phi_73_pred_4 = _3449 * _3295.x;
                                frontier_phi_73_pred_5 = _3523 * _3307.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3527 = frontier_phi_73_pred;
                            _3528 = frontier_phi_73_pred_1;
                            _3532 = frontier_phi_73_pred_2;
                            _3531 = frontier_phi_73_pred_3;
                            _3530 = frontier_phi_73_pred_4;
                            _3529 = frontier_phi_73_pred_5;
                            _3237 = _3530 + _3250;
                            _3238 = _3531 + _3251;
                            _3239 = _3532 + _3252;
                            _3234 = _3527 + _3247;
                            _3235 = _3528 + _3248;
                            _3236 = _3529 + _3249;
                            if (_3254 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3247 = _3234;
                                _3248 = _3235;
                                _3249 = _3236;
                                _3250 = _3237;
                                _3251 = _3238;
                                _3252 = _3239;
                                _3253 = _3254;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3237;
                        frontier_phi_67_pred_1 = _3238;
                        frontier_phi_67_pred_2 = _3239;
                        frontier_phi_67_pred_3 = _3236;
                        frontier_phi_67_pred_4 = _3235;
                        frontier_phi_67_pred_5 = _3234;
                    }
                    _2903 = frontier_phi_67_pred;
                    _2905 = frontier_phi_67_pred_1;
                    _2907 = frontier_phi_67_pred_2;
                    _2901 = frontier_phi_67_pred_3;
                    _2899 = frontier_phi_67_pred_4;
                    _2897 = frontier_phi_67_pred_5;
                    uint _3042 = _3041 + 1u;
                    if (_3042 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3035 = _2897;
                        _3036 = _2899;
                        _3037 = _2901;
                        _3038 = _2903;
                        _3039 = _2905;
                        _3040 = _2907;
                        _3041 = _3042;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2905;
                frontier_phi_55_56_ladder_1 = _2907;
                frontier_phi_55_56_ladder_2 = _2903;
                frontier_phi_55_56_ladder_3 = _2901;
                frontier_phi_55_56_ladder_4 = _2899;
                frontier_phi_55_56_ladder_5 = _2897;
            }
            else
            {
                frontier_phi_55_56_ladder = _2791;
                frontier_phi_55_56_ladder_1 = _2793;
                frontier_phi_55_56_ladder_2 = _2789;
                frontier_phi_55_56_ladder_3 = _2787;
                frontier_phi_55_56_ladder_4 = _2785;
                frontier_phi_55_56_ladder_5 = _2783;
            }
            _2896 = frontier_phi_55_56_ladder_5;
            _2898 = frontier_phi_55_56_ladder_4;
            _2900 = frontier_phi_55_56_ladder_3;
            _2902 = frontier_phi_55_56_ladder_2;
            _2904 = frontier_phi_55_56_ladder;
            _2906 = frontier_phi_55_56_ladder_1;
        }
        float _2911 = isnan(1.0) ? _962 : (isnan(_962) ? 1.0 : min(_962, 1.0));
        _2695 = (_2911 * _2902) + _2131;
        _2697 = (_2911 * _2904) + _2133;
        _2699 = (_2911 * _2906) + _2135;
        _2701 = ((_2896 * _946) * _2911) + _2476;
        _2703 = ((_2898 * _948) * _2911) + _2478;
        _2705 = ((_2900 * _949) * _2911) + _2480;
    }
    else
    {
        _2695 = _2131;
        _2697 = _2133;
        _2699 = _2135;
        _2701 = _2476;
        _2703 = _2478;
        _2705 = _2480;
    }
    float _4633 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _4644 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _4655 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    uint _2725 = _275 + 6u;
    float _2733 = _884 / cbSceneParam._m0[86u].x;
    float _2734 = _885 / cbSceneParam._m0[86u].y;
    vec4 _2748 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2733, _2734, (log2((isnan(cbSceneParam._m0[77u].w) ? _819 : (isnan(_819) ? cbSceneParam._m0[77u].w : min(_819, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2750 = _2748.x;
    float _2751 = _2748.y;
    float _2752 = _2748.z;
    float _2753 = _2748.w;
    float _2846;
    float _2848;
    float _2850;
    float _2852;
    if (_819 > cbSceneParam._m0[78u].w)
    {
        float _2808 = isnan(_819) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _819 : min(cbSceneParam._m0[80u].w, _819));
        float _2809 = _2808 / _819;
        float _2820 = _2809 * _869;
        float _2821 = _870 * _2809;
        float _2822 = (-0.0) - _2821;
        float _2824 = _2809 * _871;
        float _2826 = (cbSceneParam._m0[77u].w * _2822) / _2808;
        float _2827 = _2826 + cbSceneParam._m0[79u].w;
        float _2828 = cbSceneParam._m0[79u].w - _2821;
        float _2834 = sqrt(((_2820 * _2820) + (_2821 * _2821)) + (_2824 * _2824));
        float _2837 = (1.0 - (cbSceneParam._m0[77u].w / _2808)) * _2834;
        float _2842 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2844 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2997;
        if (abs((_2822 - _2826) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2997 = ((((_2827 > 0.0) ? exp2(_2842 * _2827) : (2.0 - exp2(_2844 * _2827))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2837;
        }
        else
        {
            float _2957 = 1.0 / cbSceneParam._m0[80u].x;
            float _2958 = isnan(_2828) ? _2827 : (isnan(_2827) ? _2828 : max(_2827, _2828));
            float _2959 = isnan(_2828) ? _2827 : (isnan(_2827) ? _2828 : min(_2827, _2828));
            float _2968 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : min(_2958, 0.0));
            float _2969 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : min(_2959, 0.0));
            _2997 = ((abs(_2834 / _2822) * cbSceneParam._m0[80u].y) * ((((_2968 - _2969) * 2.0) - ((exp2(_2842 * (isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0)))) - exp2(_2842 * (isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0))))) * _2957)) - ((exp2(_2844 * _2968) - exp2(_2844 * _2969)) * _2957))) + (_2837 * cbSceneParam._m0[80u].z);
        }
        vec4 _2999 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2733, _2734, 1.0), 0.0);
        float _3008 = exp2((_2997 * (-1.44269502162933349609375)) * (1.0 - _2999.w));
        float _3009 = log2(_3008);
        float _3025 = log2(_2753);
        _2846 = (exp2(_3025 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3009 * cbSceneParam._m0[78u].x)) * _2999.x) / cbSceneParam._m0[78u].x)) + _2750;
        _2848 = (exp2(_3025 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3009 * cbSceneParam._m0[78u].y)) * _2999.y) / cbSceneParam._m0[78u].y)) + _2751;
        _2850 = (exp2(_3025 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3009 * cbSceneParam._m0[78u].z)) * _2999.z) / cbSceneParam._m0[78u].z)) + _2752;
        _2852 = _3008 * _2753;
    }
    else
    {
        _2846 = _2750;
        _2848 = _2751;
        _2850 = _2752;
        _2852 = _2753;
    }
    float _2864 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2865 = _2864 == 3.0;
    float _2866 = log2(_2852);
    float _2873 = exp2(_2866 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * (_2695 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _962))) + ((_2701 + ((isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0))) * _1768)) * cbPerFrame._m0[3u].x));
    float _2874 = exp2(_2866 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * (_2697 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _962))) + ((_2703 + ((isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0))) * _1768)) * cbPerFrame._m0[3u].x));
    float _2875 = exp2(_2866 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0))) * (_2699 + ((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _962))) + ((_2705 + ((isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0))) * _1768)) * cbPerFrame._m0[3u].x));
    float _2884 = (_2864 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2884 * (_2865 ? _2873 : (_2873 + (cbSceneParam._m0[72u].w * _2846)));
    SV_Target.y = _2884 * (_2865 ? _2874 : (_2874 + (cbSceneParam._m0[72u].w * _2848)));
    SV_Target.z = _2884 * (_2865 ? _2875 : (_2875 + (cbSceneParam._m0[72u].w * _2850)));
    SV_Target.w = cbInstanceData._m0[_2725].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2725].w;
}


