#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1336;
float _3716;
float _3717;
float _3718;
float _3719;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _246 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _246 + 1u;
    uint _256 = _246 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _293 = _287.x * cbMtdParam._m0[11u].x;
    float _294 = _287.y * cbMtdParam._m0[11u].y;
    float _295 = _287.z * cbMtdParam._m0[11u].z;
    vec4 _314 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _353 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _355 = _353.x;
    float _367 = dot(vec4(_355, _353.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _384 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_355 - _367) * cbMtdParam._m0[24u].y) + _367) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3728 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _385 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _392 = (_385 * ((_314.x * cbMtdParam._m0[12u].x) - _293)) + _293;
    float _393 = (_385 * ((_314.y * cbMtdParam._m0[12u].y) - _294)) + _294;
    float _394 = (_385 * ((_314.z * cbMtdParam._m0[12u].z) - _295)) + _295;
    vec4 _411 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _266) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _267) + cbTextureTilingScale._m0[3u].w));
    vec4 _431 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _433 = _431.x;
    float _443 = dot(vec4(_433, _431.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _457 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_433 - _443) * cbMtdParam._m0[24u].y) + _443) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3739 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _458 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _465 = (_458 * ((_411.x * cbMtdParam._m0[13u].x) - _392)) + _392;
    float _466 = (_458 * ((_411.y * cbMtdParam._m0[13u].y) - _393)) + _393;
    float _467 = (_458 * ((_411.z * cbMtdParam._m0[13u].z) - _394)) + _394;
    vec4 _485 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _502 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _504 = _502.x;
    float _505 = _502.y;
    float _506 = _502.z;
    float _513 = ((_485.x - _504) * _385) + _504;
    float _514 = ((_485.y - _505) * _385) + _505;
    float _515 = ((_485.z - _506) * _385) + _506;
    vec4 _527 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _266) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _267) + cbTextureTilingScale._m0[2u].w));
    float _540 = ((_527.z - _515) * _458) + _515;
    float _543 = ((((_527.x - _513) * _458) + _513) * 2.0) + (-1.0);
    float _545 = ((((_527.y - _514) * _458) + _514) * 2.0) + (-1.0);
    float _546 = dot(vec2(_543, _545), vec2(_543, _545));
    float _3750 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _551 = sqrt(1.0 - (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))));
    vec4 _565 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _590 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _592 = _590.x;
    float _593 = 1.0 - _592;
    float _606 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_592 - _593) * cbMtdParam._m0[24u].z) + _593) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3761 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _607 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
    float _614 = (_607 * (cbMtdParam._m0[17u].x - _465)) + _465;
    float _615 = (_607 * (cbMtdParam._m0[17u].y - _466)) + _466;
    float _616 = (_607 * (cbMtdParam._m0[17u].z - _467)) + _467;
    vec4 _628 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _642 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _644 = _642.x;
    float _662 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _266) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _267) + cbTextureTilingScale._m0[9u].w)).x - _644) * _385) + _644;
    float _679 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _266) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _267) + cbTextureTilingScale._m0[21u].w)).x - _662) * _458) + _662;
    float _683 = ((_628.x - _679) * cbMtdParam._m0[19u].z) + _679;
    float _685 = _683 - (_683 * _607);
    float _689 = (cbMtdParam._m0[19u].w * (_565.z - _540)) + _540;
    vec4 _702 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _709 = (_702.x * 2.0) + (-1.0);
    float _710 = (_702.y * 2.0) + (-1.0);
    float _711 = dot(vec2(_709, _710), vec2(_709, _710));
    float _3772 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _719 = (_607 * (_702.z - _689)) + _689;
    float _722 = (((_565.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _543;
    float _723 = (((_565.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _545;
    float _735 = (((_709 - _722) + (cbMtdParam._m0[21u].x * _722)) * _607) + _722;
    float _736 = (((_710 - _723) + (cbMtdParam._m0[21u].x * _723)) * _607) + _723;
    float _737 = (_607 * (sqrt(1.0 - (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0)))) - _551)) + _551;
    float _742 = cbMtdParam._m0[22u].x + _565.w;
    float _745 = fma(_737, _233 * NORMAL.x, fma(_736, _240 * TANGENT.x, (_226 * _218) * _735));
    float _748 = fma(_737, _233 * NORMAL.y, fma(_736, _240 * TANGENT.y, (_226 * _219) * _735));
    float _751 = fma(_737, _233 * NORMAL.z, fma(_736, _240 * TANGENT.z, (_226 * _220) * _735));
    float _755 = inversesqrt(dot(vec3(_745, _748, _751), vec3(_745, _748, _751)));
    float _756 = _755 * _745;
    float _757 = _755 * _748;
    float _758 = _755 * _751;
    float _3783 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _759 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _3794 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _3805 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _3816 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _3827 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _3838 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _764 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _778 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _819 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _829 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _819);
    float _830 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _819);
    float _831 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _819);
    float _835 = inversesqrt(dot(vec3(_829, _830, _831), vec3(_829, _830, _831)));
    float _836 = _829 * _835;
    float _837 = _830 * _835;
    float _838 = _831 * _835;
    vec4 _843 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _845 = _843.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1017 = sqrt(((_829 * _829) + (_830 * _830)) + (_831 * _831));
        float _1023 = (cbMatDynParam._m0[5u].x * _1017) + cbMatDynParam._m0[5u].y;
        float _3849 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1028 = (cbMatDynParam._m0[5u].z * _1017) + cbMatDynParam._m0[5u].w;
        float _3860 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) - _1024)) + _1024) < ((_845 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _856 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _857 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _875 = fma(_758, cbSceneParam._m0[5u].z, fma(_757, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _756));
    float _878 = fma(_758, cbSceneParam._m0[6u].z, fma(_757, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _756));
    float _881 = fma(_758, cbSceneParam._m0[7u].z, fma(_757, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _756));
    uint _894 = _246 + 9u;
    uint _895 = _894 + uint(cbMatDynParam._m0[0u].w);
    float _901 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0)))) * cbInstanceData._m0[_895].x;
    float _902 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0)))) * cbInstanceData._m0[_895].y;
    float _903 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0)))) * cbInstanceData._m0[_895].z;
    float _3871 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _904 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _3882 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _905 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _3893 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _906 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _907 = 1.0 - _764;
    float _908 = _904 * _907;
    float _909 = _905 * _907;
    float _910 = _906 * _907;
    float _915 = (_904 + (-0.039999999105930328369140625)) * _764;
    float _916 = (_905 + (-0.039999999105930328369140625)) * _764;
    float _917 = (_906 + (-0.039999999105930328369140625)) * _764;
    float _918 = _915 + 0.039999999105930328369140625;
    float _920 = _916 + 0.039999999105930328369140625;
    float _921 = _917 + 0.039999999105930328369140625;
    vec4 _930 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _856, cbSceneParam._m0[86u].y * _857));
    float _934 = ((isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * TEXCOORD_5.w) * _930.x;
    float _935 = dot(vec3(_756, _757, _758), vec3(_836, _837, _838));
    float _938 = _935 * 2.0;
    float _942 = (_938 * _756) - _836;
    float _943 = (_938 * _757) - _837;
    float _944 = (_938 * _758) - _838;
    float _948 = abs(dot(vec3(_836, _837, _838), vec3(_756, _757, _758)));
    float _3904 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _950 = sqrt(_759);
    float _963 = exp2((_950 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_950 * 3.0));
    float _969 = (1.0 - _963) * ((_950 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _970 = _963 * _950;
    float _998 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1002 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1006 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1335;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1060 = fma(_1006, cbModelParam._m0[26u].z, fma(_1002, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _998));
        float _1064 = fma(_1006, cbModelParam._m0[27u].z, fma(_1002, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _998));
        float _1068 = fma(_1006, cbModelParam._m0[28u].z, fma(_1002, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _998));
        float _1093 = _998 + _756;
        float _1094 = _1002 + _757;
        float _1095 = _1006 + _758;
        float _1105 = fma(_1095, cbModelParam._m0[26u].z, fma(_1094, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1093)) - _1060;
        float _1106 = fma(_1095, cbModelParam._m0[27u].z, fma(_1094, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1093)) - _1064;
        float _1107 = fma(_1095, cbModelParam._m0[28u].z, fma(_1094, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1093)) - _1068;
        float _1111 = inversesqrt(dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107)));
        float _1124 = ((_1111 * _1105) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1060 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1125 = ((_1111 * _1106) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1064 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1126 = ((_1111 * _1107) / cbModelParam._m0[34u].z) + ((((((_1068 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        vec4 _1136 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        vec4 _1143 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        float _1163 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1129.x + (-0.5));
        float _1165 = _1163 * (_1129.y + (-0.5));
        float _1166 = _1163 * (_1129.z + (-0.5));
        float _1173 = exp2((_1136.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1136.x + (-0.5));
        float _1175 = _1173 * (_1136.y + (-0.5));
        float _1176 = _1173 * (_1136.z + (-0.5));
        float _1183 = exp2((_1143.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1143.x + (-0.5));
        float _1185 = _1183 * (_1143.y + (-0.5));
        float _1186 = _1183 * (_1143.z + (-0.5));
        float _1193 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1150.x + (-0.5));
        float _1195 = _1193 * (_1150.y + (-0.5));
        float _1196 = _1193 * (_1150.z + (-0.5));
        float _1197 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1198 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1199 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1200 = _1164 * 0.5;
        float _1201 = _1174 * 0.5;
        float _1202 = _1184 * 0.5;
        float _1203 = dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202));
        float _1208 = (_1203 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1203);
        float _1217 = (dot(vec3(_756, _757, _758), vec3(_1208 * _1200, _1208 * _1201, _1208 * _1202)) + 1.0) * 0.5;
        float _3930 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1227 = sqrt(((_1201 * _1201) + (_1200 * _1200)) + (_1202 * _1202)) / (_1197 + 9.9999997473787516355514526367188e-06);
        float _3941 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1229 = _1228 * 2.0;
        float _1233 = (1.0 - _1228) / (_1228 + 1.0);
        float _3952 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1243 = ((((1.0 - _1234) * (_1229 + 2.0)) * exp2(log2(isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * (_1229 + 1.0))) + _1234) * _1197;
        float _1244 = _1165 * 0.5;
        float _1245 = _1175 * 0.5;
        float _1246 = _1185 * 0.5;
        float _1247 = dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246));
        float _1252 = (_1247 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1247);
        float _1260 = (dot(vec3(_756, _757, _758), vec3(_1252 * _1244, _1252 * _1245, _1252 * _1246)) + 1.0) * 0.5;
        float _3963 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1269 = sqrt(((_1245 * _1245) + (_1244 * _1244)) + (_1246 * _1246)) / (_1198 + 9.9999997473787516355514526367188e-06);
        float _3974 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1271 = _1270 * 2.0;
        float _1275 = (1.0 - _1270) / (_1270 + 1.0);
        float _3985 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1285 = ((((1.0 - _1276) * (_1271 + 2.0)) * exp2(log2(isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * (_1271 + 1.0))) + _1276) * _1198;
        float _1286 = _1166 * 0.5;
        float _1287 = _1176 * 0.5;
        float _1288 = _1186 * 0.5;
        float _1289 = dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288));
        float _1294 = (_1289 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1289);
        float _1302 = (dot(vec3(_756, _757, _758), vec3(_1294 * _1286, _1294 * _1287, _1294 * _1288)) + 1.0) * 0.5;
        float _3996 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1311 = sqrt(((_1287 * _1287) + (_1286 * _1286)) + (_1288 * _1288)) / (_1199 + 9.9999997473787516355514526367188e-06);
        float _4007 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1313 = _1312 * 2.0;
        float _1317 = (1.0 - _1312) / (_1312 + 1.0);
        float _4018 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1327 = ((((1.0 - _1318) * (_1313 + 2.0)) * exp2(log2(isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_1313 + 1.0))) + _1318) * _1199;
        _1335 = _1166;
        _1337 = _1165;
        _1338 = _1164;
        _1339 = _1176;
        _1340 = _1175;
        _1341 = _1174;
        _1342 = _1186;
        _1343 = _1185;
        _1344 = _1184;
        _1345 = _1199;
        _1346 = _1198;
        _1347 = _1197;
        _1348 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)));
        _1349 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)));
        _1350 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)));
    }
    else
    {
        _1335 = _1336;
        _1337 = _1336;
        _1338 = _1336;
        _1339 = _1336;
        _1340 = _1336;
        _1341 = _1336;
        _1342 = _1336;
        _1343 = _1336;
        _1344 = _1336;
        _1345 = _1336;
        _1346 = _1336;
        _1347 = _1336;
        _1348 = 0.0;
        _1349 = 0.0;
        _1350 = 0.0;
    }
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1377 = fma(_1006, cbModelParam._m0[30u].z, fma(_1002, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _998));
        float _1381 = fma(_1006, cbModelParam._m0[31u].z, fma(_1002, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _998));
        float _1385 = fma(_1006, cbModelParam._m0[32u].z, fma(_1002, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _998));
        float _1408 = _998 + _756;
        float _1409 = _1002 + _757;
        float _1410 = _1006 + _758;
        float _1420 = fma(_1410, cbModelParam._m0[30u].z, fma(_1409, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1408)) - _1377;
        float _1421 = fma(_1410, cbModelParam._m0[31u].z, fma(_1409, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1408)) - _1381;
        float _1422 = fma(_1410, cbModelParam._m0[32u].z, fma(_1409, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1408)) - _1385;
        float _1426 = inversesqrt(dot(vec3(_1420, _1421, _1422), vec3(_1420, _1421, _1422)));
        float _1439 = ((_1426 * _1420) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1377 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1440 = ((_1426 * _1421) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1381 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1441 = ((_1426 * _1422) / cbModelParam._m0[35u].z) + ((((((_1385 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1443 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        vec4 _1450 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        vec4 _1457 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        vec4 _1464 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        float _1476 = exp2((_1443.w + (-0.5)) * 20.0) * 2.0;
        float _1477 = _1476 * (_1443.x + (-0.5));
        float _1478 = _1476 * (_1443.y + (-0.5));
        float _1479 = _1476 * (_1443.z + (-0.5));
        float _1486 = exp2((_1450.w + (-0.5)) * 20.0) * 2.0;
        float _1487 = _1486 * (_1450.x + (-0.5));
        float _1488 = _1486 * (_1450.y + (-0.5));
        float _1489 = _1486 * (_1450.z + (-0.5));
        float _1496 = exp2((_1457.w + (-0.5)) * 20.0) * 2.0;
        float _1497 = _1496 * (_1457.x + (-0.5));
        float _1498 = _1496 * (_1457.y + (-0.5));
        float _1499 = _1496 * (_1457.z + (-0.5));
        float _1506 = exp2((_1464.w + (-0.5)) * 20.0) * 2.0;
        float _1507 = _1506 * (_1464.x + (-0.5));
        float _1508 = _1506 * (_1464.y + (-0.5));
        float _1509 = _1506 * (_1464.z + (-0.5));
        float _1510 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1511 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1512 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1513 = _1477 * 0.5;
        float _1514 = _1487 * 0.5;
        float _1515 = _1497 * 0.5;
        float _1516 = dot(vec3(_1513, _1514, _1515), vec3(_1513, _1514, _1515));
        float _1521 = (_1516 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1516);
        float _1529 = (dot(vec3(_756, _757, _758), vec3(_1521 * _1513, _1521 * _1514, _1521 * _1515)) + 1.0) * 0.5;
        float _4059 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1538 = sqrt(((_1514 * _1514) + (_1513 * _1513)) + (_1515 * _1515)) / (_1510 + 9.9999997473787516355514526367188e-06);
        float _4070 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1540 = _1539 * 2.0;
        float _1544 = (1.0 - _1539) / (_1539 + 1.0);
        float _4081 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1554 = ((((1.0 - _1545) * (_1540 + 2.0)) * exp2(log2(isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_1540 + 1.0))) + _1545) * _1510;
        float _1555 = _1478 * 0.5;
        float _1556 = _1488 * 0.5;
        float _1557 = _1498 * 0.5;
        float _1558 = dot(vec3(_1555, _1556, _1557), vec3(_1555, _1556, _1557));
        float _1563 = (_1558 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1558);
        float _1571 = (dot(vec3(_756, _757, _758), vec3(_1563 * _1555, _1563 * _1556, _1563 * _1557)) + 1.0) * 0.5;
        float _4092 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1580 = sqrt(((_1556 * _1556) + (_1555 * _1555)) + (_1557 * _1557)) / (_1511 + 9.9999997473787516355514526367188e-06);
        float _4103 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1582 = _1581 * 2.0;
        float _1586 = (1.0 - _1581) / (_1581 + 1.0);
        float _4114 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1596 = ((((1.0 - _1587) * (_1582 + 2.0)) * exp2(log2(isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * (_1582 + 1.0))) + _1587) * _1511;
        float _1597 = _1479 * 0.5;
        float _1598 = _1489 * 0.5;
        float _1599 = _1499 * 0.5;
        float _1600 = dot(vec3(_1597, _1598, _1599), vec3(_1597, _1598, _1599));
        float _1605 = (_1600 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1600);
        float _1613 = (dot(vec3(_756, _757, _758), vec3(_1605 * _1597, _1605 * _1598, _1605 * _1599)) + 1.0) * 0.5;
        float _4125 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1622 = sqrt(((_1598 * _1598) + (_1597 * _1597)) + (_1599 * _1599)) / (_1512 + 9.9999997473787516355514526367188e-06);
        float _4136 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1623 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1624 = _1623 * 2.0;
        float _1628 = (1.0 - _1623) / (_1623 + 1.0);
        float _4147 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1638 = ((((1.0 - _1629) * (_1624 + 2.0)) * exp2(log2(isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_1624 + 1.0))) + _1629) * _1512;
        _1646 = _1479;
        _1647 = _1478;
        _1648 = _1477;
        _1649 = _1489;
        _1650 = _1488;
        _1651 = _1487;
        _1652 = _1499;
        _1653 = _1498;
        _1654 = _1497;
        _1655 = _1512;
        _1656 = _1511;
        _1657 = _1510;
        _1658 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)));
        _1659 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)));
        _1660 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)));
    }
    else
    {
        _1646 = _1336;
        _1647 = _1336;
        _1648 = _1336;
        _1649 = _1336;
        _1650 = _1336;
        _1651 = _1336;
        _1652 = _1336;
        _1653 = _1336;
        _1654 = _1336;
        _1655 = _1336;
        _1656 = _1336;
        _1657 = _1336;
        _1658 = 0.0;
        _1659 = 0.0;
        _1660 = 0.0;
    }
    float _1670 = (cbModelParam._m0[1u].x * (_1658 - _1348)) + _1348;
    float _1671 = (cbModelParam._m0[1u].x * (_1659 - _1349)) + _1349;
    float _1672 = (cbModelParam._m0[1u].x * (_1660 - _1350)) + _1350;
    float _1693 = fma(_1672, cbSceneParam._m0[89u].z, fma(_1671, cbSceneParam._m0[89u].y, _1670 * cbSceneParam._m0[89u].x));
    float _1696 = fma(_1672, cbSceneParam._m0[90u].z, fma(_1671, cbSceneParam._m0[90u].y, _1670 * cbSceneParam._m0[90u].x));
    float _1699 = fma(_1672, cbSceneParam._m0[91u].z, fma(_1671, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1670));
    float _1714 = _942 * 0.5;
    float _1715 = _943 * 0.5;
    float _1716 = _944 * 0.5;
    float _1717 = dot(vec4(_1714, _1715, _1716, 1.0), vec4(_1648, _1651, _1654, _1657));
    float _1720 = dot(vec4(_1714, _1715, _1716, 1.0), vec4(_1647, _1650, _1653, _1656));
    float _1723 = dot(vec4(_1714, _1715, _1716, 1.0), vec4(_1646, _1649, _1652, _1655));
    float _1757;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1730 = dot(vec4(_1714, _1715, _1716, 1.0), vec4(_1335, _1339, _1342, _1345));
        float _1734 = dot(vec4(_1714, _1715, _1716, 1.0), vec4(_1337, _1340, _1343, _1346));
        float _1738 = dot(vec4(_1714, _1715, _1716, 1.0), vec4(_1338, _1341, _1344, _1347));
        float _1745 = dot(vec4(cbModelParam._m0[39u]), vec4(_1714, _1715, _1716, 1.0));
        _1757 = dot(vec3(isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0)), isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0)), isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1745) ? 0.0 : (isnan(0.0) ? _1745 : max(0.0, _1745))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1757 = 1.0;
    }
    float _1768;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1759 = dot(vec4(cbModelParam._m0[40u]), vec4(_1714, _1715, _1716, 1.0));
        _1768 = dot(vec3(isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0)), isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0)), isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1759) ? 0.0 : (isnan(0.0) ? _1759 : max(0.0, _1759))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1768 = 1.0;
    }
    float _1772 = (_1768 * cbModelParam._m0[1u].x) + (_1757 * (1.0 - cbModelParam._m0[1u].x));
    float _1782 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _759);
    float _1783 = isnan(_1782) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1782 : min(cbModelParam._m0[25u].z, _1782));
    float _1864;
    float _1866;
    float _1868;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1831 = fma(_1006, cbModelParam._m0[13u].z, fma(_1002, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _998)) + cbModelParam._m0[13u].w;
        float _1835 = fma(_1006, cbModelParam._m0[14u].z, fma(_1002, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _998)) + cbModelParam._m0[14u].w;
        float _1839 = fma(_1006, cbModelParam._m0[15u].z, fma(_1002, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _998)) + cbModelParam._m0[15u].w;
        float _1842 = fma(_944, cbModelParam._m0[13u].z, fma(_943, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _942));
        float _1845 = fma(_944, cbModelParam._m0[14u].z, fma(_943, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _942));
        float _1848 = fma(_944, cbModelParam._m0[15u].z, fma(_943, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _942));
        float _1876;
        if (_1842 > 0.0)
        {
            _1876 = abs((1.0 - _1831) / _1842);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1831 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1876 = frontier_phi_17_15_ladder;
        }
        float _2079;
        if (_1845 > 0.0)
        {
            _2079 = abs((1.0 - _1835) / _1845);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1835 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2079 = frontier_phi_26_22_ladder;
        }
        float _2333;
        if (_1848 > 0.0)
        {
            _2333 = abs((1.0 - _1839) / _1848);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1839 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2333 = frontier_phi_38_33_ladder;
        }
        float _2335 = isnan(_2079) ? _1876 : (isnan(_1876) ? _2079 : min(_1876, _2079));
        float _2336 = isnan(_2333) ? _2335 : (isnan(_2335) ? _2333 : min(_2335, _2333));
        float _2340 = (_2336 * _1842) + _1831;
        float _2341 = (_2336 * _1845) + _1835;
        float _2342 = (_2336 * _1848) + _1839;
        float _2343 = _2336 * 9.9999997473787516355514526367188e-05;
        float _2345 = (-1.0) - _2343;
        float _2347 = _2343 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2342 > _2347) || ((_2342 < _2345) || ((_2341 > _2347) || ((_2341 < _2345) || ((_2340 < _2345) || (_2340 > _2347))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2470 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2342, cbModelParam._m0[9u].z, fma(_2341, cbModelParam._m0[9u].y, _2340 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2342, cbModelParam._m0[10u].z, fma(_2341, cbModelParam._m0[10u].y, _2340 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2342, cbModelParam._m0[11u].z, fma(_2341, cbModelParam._m0[11u].y, _2340 * cbModelParam._m0[11u].x))), _1783);
            frontier_phi_16_38_ladder = _2470.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2470.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2470.x * cbModelParam._m0[1u].y;
        }
        _1864 = frontier_phi_16_38_ladder_2;
        _1866 = frontier_phi_16_38_ladder_1;
        _1868 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1852 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_942, _943, _944), _1783);
        _1864 = _1852.x * cbModelParam._m0[1u].y;
        _1866 = _1852.y * cbModelParam._m0[1u].y;
        _1868 = _1852.z * cbModelParam._m0[1u].y;
    }
    float _1872 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _759);
    float _1873 = isnan(_1872) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1872 : min(cbModelParam._m0[25u].w, _1872));
    float _1963;
    float _1965;
    float _1967;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1927 = fma(_1006, cbModelParam._m0[21u].z, fma(_1002, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _998)) + cbModelParam._m0[21u].w;
        float _1931 = fma(_1006, cbModelParam._m0[22u].z, fma(_1002, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _998)) + cbModelParam._m0[22u].w;
        float _1935 = fma(_1006, cbModelParam._m0[23u].z, fma(_1002, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _998)) + cbModelParam._m0[23u].w;
        float _1938 = fma(_944, cbModelParam._m0[21u].z, fma(_943, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _942));
        float _1941 = fma(_944, cbModelParam._m0[22u].z, fma(_943, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _942));
        float _1944 = fma(_944, cbModelParam._m0[23u].z, fma(_943, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _942));
        float _2084;
        if (_1938 > 0.0)
        {
            _2084 = abs((1.0 - _1927) / _1938);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1938 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1927 + 1.0) / _1938);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2084 = frontier_phi_28_24_ladder;
        }
        float _2360;
        if (_1941 > 0.0)
        {
            _2360 = abs((1.0 - _1931) / _1941);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1941 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1931 + 1.0) / _1941);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2360 = frontier_phi_40_35_ladder;
        }
        float _2573;
        if (_1944 > 0.0)
        {
            _2573 = abs((1.0 - _1935) / _1944);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1944 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1935 + 1.0) / _1944);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2573 = frontier_phi_49_46_ladder;
        }
        float _2575 = isnan(_2360) ? _2084 : (isnan(_2084) ? _2360 : min(_2084, _2360));
        float _2576 = isnan(_2573) ? _2575 : (isnan(_2575) ? _2573 : min(_2575, _2573));
        float _2580 = (_2576 * _1938) + _1927;
        float _2581 = (_2576 * _1941) + _1931;
        float _2582 = (_2576 * _1944) + _1935;
        float _2583 = _2576 * 9.9999997473787516355514526367188e-05;
        float _2584 = (-1.0) - _2583;
        float _2586 = _2583 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2582 > _2586) || ((_2582 < _2584) || ((_2581 > _2586) || ((_2581 < _2584) || ((_2580 < _2584) || (_2580 > _2586))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2781 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2582, cbModelParam._m0[17u].z, fma(_2581, cbModelParam._m0[17u].y, _2580 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2582, cbModelParam._m0[18u].z, fma(_2581, cbModelParam._m0[18u].y, _2580 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2582, cbModelParam._m0[19u].z, fma(_2581, cbModelParam._m0[19u].y, _2580 * cbModelParam._m0[19u].x))), _1873);
            frontier_phi_25_49_ladder = _2781.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2781.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2781.x * cbModelParam._m0[1u].z;
        }
        _1963 = frontier_phi_25_49_ladder_2;
        _1965 = frontier_phi_25_49_ladder_1;
        _1967 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1947 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_942, _943, _944), _1873);
        _1963 = _1947.x * cbModelParam._m0[1u].z;
        _1965 = _1947.y * cbModelParam._m0[1u].z;
        _1967 = _1947.z * cbModelParam._m0[1u].z;
    }
    float _1980 = (((_969 * _918) + _970) * _934) * ((cbModelParam._m0[1u].w * (_1963 - _1864)) + _1864);
    float _1982 = (((_969 * _920) + _970) * _934) * ((cbModelParam._m0[1u].w * (_1965 - _1866)) + _1866);
    float _1984 = (((_969 * _921) + _970) * _934) * ((cbModelParam._m0[1u].w * (_1967 - _1868)) + _1868);
    float _1987 = fma(_1984, cbSceneParam._m0[89u].z, fma(_1982, cbSceneParam._m0[89u].y, _1980 * cbSceneParam._m0[89u].x));
    float _1990 = fma(_1984, cbSceneParam._m0[90u].z, fma(_1982, cbSceneParam._m0[90u].y, _1980 * cbSceneParam._m0[90u].x));
    float _1993 = fma(_1984, cbSceneParam._m0[91u].z, fma(_1982, cbSceneParam._m0[91u].y, _1980 * cbSceneParam._m0[91u].x));
    uvec4 _2003 = floatBitsToUint(cbInstanceData._m0[_246 + 5u]);
    uint _2005 = _2003.x * 14u;
    uint _2006 = _2005 + 13u;
    float _2013 = _934 + (-1.0);
    float _2018 = (cbLight._m0[_2006].x * _2013) + 1.0;
    float _2019 = (cbLight._m0[_2006].y * _2013) + 1.0;
    float _2020 = (cbLight._m0[_2006].z * _2013) + 1.0;
    float _2021 = (cbLight._m0[_2006].w * _2013) + 1.0;
    uint _2022 = _2005 + 5u;
    float _2028 = isnan(1.0) ? _2019 : (isnan(_2019) ? 1.0 : min(_2019, 1.0));
    uint _2032 = _2005 + 4u;
    float _2038 = isnan(1.0) ? _2018 : (isnan(_2018) ? 1.0 : min(_2018, 1.0));
    uint _2042 = _2005 | 1u;
    float _2053 = dot(vec3(cbLight._m0[_2005].xyz), vec3(_756, _757, _758));
    float _2056 = dot(vec3(cbLight._m0[_2042].xyz), vec3(_756, _757, _758));
    float _4283 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _4294 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _2061 = (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * 0.3183098733425140380859375;
    float _2063 = (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * 0.3183098733425140380859375;
    float _2070 = ((cbLight._m0[_2022].x * _2028) * _2063) + ((cbLight._m0[_2032].x * _2038) * _2061);
    float _2071 = ((_2028 * cbLight._m0[_2022].y) * _2063) + ((_2038 * cbLight._m0[_2032].y) * _2061);
    float _2072 = ((_2028 * cbLight._m0[_2022].z) * _2063) + ((_2038 * cbLight._m0[_2032].z) * _2061);
    uvec4 _2076 = floatBitsToUint(cbLight._m0[_2005 + 12u]);
    bool _2078 = _2076.x == 0u;
    float _2089;
    float _2091;
    float _2093;
    if (_2078)
    {
        _2089 = _2070;
        _2091 = _2071;
        _2093 = _2072;
    }
    else
    {
        uint _2097 = _2005 + 6u;
        float _2113 = (dot(vec3(cbLight._m0[_2005 + 2u].xyz), vec3(_756, _757, _758)) * 0.5) + 0.5;
        float _2114 = _2113 * _2113;
        float _4305 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2115 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _2116 = isnan(1.0) ? _2020 : (isnan(_2020) ? 1.0 : min(_2020, 1.0));
        _2089 = (((cbLight._m0[_2097].x * 0.3183098733425140380859375) * _2115) * _2116) + _2070;
        _2091 = (((cbLight._m0[_2097].y * 0.3183098733425140380859375) * _2115) * _2116) + _2071;
        _2093 = (((cbLight._m0[_2097].z * 0.3183098733425140380859375) * _2115) * _2116) + _2072;
    }
    bool _2096 = _2076.y == 0u;
    float _2134;
    float _2136;
    float _2138;
    if (_2096)
    {
        _2134 = _2089;
        _2136 = _2091;
        _2138 = _2093;
    }
    else
    {
        uint _2304 = _2005 + 7u;
        float _2320 = (dot(vec3(cbLight._m0[_2005 + 3u].xyz), vec3(_756, _757, _758)) * 0.5) + 0.5;
        float _2321 = _2320 * _2320;
        float _4321 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        float _2322 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _2323 = isnan(1.0) ? _2021 : (isnan(_2021) ? 1.0 : min(_2021, 1.0));
        _2134 = (((cbLight._m0[_2304].x * 0.3183098733425140380859375) * _2322) * _2323) + _2089;
        _2136 = (((cbLight._m0[_2304].y * 0.3183098733425140380859375) * _2322) * _2323) + _2091;
        _2138 = (((cbLight._m0[_2304].z * 0.3183098733425140380859375) * _2322) * _2323) + _2093;
    }
    uint _2141 = _2005 + 8u;
    float _2154 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2005].w)) * _759) * 0.949999988079071044921875);
    float _2155 = _2154 * _2154;
    float _2156 = cbLight._m0[_2005].x + _836;
    float _2157 = cbLight._m0[_2005].y + _837;
    float _2158 = cbLight._m0[_2005].z + _838;
    float _2162 = inversesqrt(dot(vec3(_2156, _2157, _2158), vec3(_2156, _2157, _2158)));
    float _2163 = _2162 * _2156;
    float _2164 = _2162 * _2157;
    float _2165 = _2162 * _2158;
    float _2166 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_2005].xyz));
    float _4337 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2169 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
    float _4348 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _2170 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
    float _2171 = dot(vec3(_756, _757, _758), vec3(_2163, _2164, _2165));
    float _4359 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2174 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
    float _2175 = dot(vec3(cbLight._m0[_2005].xyz), vec3(_2163, _2164, _2165));
    float _4370 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _2179 = _2155 * _2155;
    float _2183 = ((_2174 * _2174) * (_2179 + (-1.0))) + 1.0;
    float _2191 = exp2(log2(1.0 - (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0)))) * 5.0);
    float _2192 = 0.959999978542327880859375 - _915;
    float _2194 = 0.959999978542327880859375 - _916;
    float _2195 = 0.959999978542327880859375 - _917;
    float _2202 = 1.0 - _2155;
    float _2213 = (0.5 / (((_2170 * ((_2169 * _2202) + _2155)) + 9.9999999392252902907785028219223e-09) + (((_2170 * _2202) + _2155) * _2169))) * _2169;
    float _4381 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2215 = (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_2179 / ((_2183 * _2183) * 3.141590118408203125));
    uint _2226 = _2005 + 9u;
    float _2237 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2042].w)) * _759) * 0.949999988079071044921875);
    float _2238 = _2237 * _2237;
    float _2239 = cbLight._m0[_2042].x + _836;
    float _2240 = cbLight._m0[_2042].y + _837;
    float _2241 = cbLight._m0[_2042].z + _838;
    float _2245 = inversesqrt(dot(vec3(_2239, _2240, _2241), vec3(_2239, _2240, _2241)));
    float _2246 = _2245 * _2239;
    float _2247 = _2245 * _2240;
    float _2248 = _2245 * _2241;
    float _2249 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_2042].xyz));
    float _4392 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _2252 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
    float _2253 = dot(vec3(_756, _757, _758), vec3(_2246, _2247, _2248));
    float _4403 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
    float _2256 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
    float _2257 = dot(vec3(cbLight._m0[_2042].xyz), vec3(_2246, _2247, _2248));
    float _4414 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
    float _2261 = _2238 * _2238;
    float _2265 = ((_2256 * _2256) * (_2261 + (-1.0))) + 1.0;
    float _2272 = exp2(log2(1.0 - (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0)))) * 5.0);
    float _2279 = 1.0 - _2238;
    float _2289 = (0.5 / (((_2170 * ((_2252 * _2279) + _2238)) + 9.9999999392252902907785028219223e-09) + (((_2170 * _2279) + _2238) * _2252))) * _2252;
    float _4425 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2291 = (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * (_2261 / ((_2265 * _2265) * 3.141590118408203125));
    float _2301 = (((((_2272 * _2192) + _918) * cbLight._m0[_2226].x) * _2291) * _2028) + (((((_2191 * _2192) + _918) * cbLight._m0[_2141].x) * _2215) * _2038);
    float _2302 = (((((_2272 * _2194) + _920) * cbLight._m0[_2226].y) * _2291) * _2028) + (((((_2191 * _2194) + _920) * cbLight._m0[_2141].y) * _2215) * _2038);
    float _2303 = (((((_2272 * _2195) + _921) * cbLight._m0[_2226].z) * _2291) * _2028) + (((((_2191 * _2195) + _921) * cbLight._m0[_2141].z) * _2215) * _2038);
    float _2365;
    float _2367;
    float _2369;
    if (_2078)
    {
        _2365 = _2301;
        _2367 = _2302;
        _2369 = _2303;
    }
    else
    {
        uint _2371 = _2005 + 2u;
        uint _2375 = _2005 + 10u;
        float _2389 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2371].w)) * _759) * 0.949999988079071044921875);
        float _2390 = _2389 * _2389;
        float _2391 = cbLight._m0[_2371].x + _836;
        float _2392 = cbLight._m0[_2371].y + _837;
        float _2393 = cbLight._m0[_2371].z + _838;
        float _2397 = inversesqrt(dot(vec3(_2391, _2392, _2393), vec3(_2391, _2392, _2393)));
        float _2398 = _2397 * _2391;
        float _2399 = _2397 * _2392;
        float _2400 = _2397 * _2393;
        float _2401 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_2371].xyz));
        float _4436 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        float _2404 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _2405 = dot(vec3(_756, _757, _758), vec3(_2398, _2399, _2400));
        float _4447 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        float _2408 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
        float _2409 = dot(vec3(cbLight._m0[_2371].xyz), vec3(_2398, _2399, _2400));
        float _4458 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2413 = _2390 * _2390;
        float _2417 = ((_2408 * _2408) * (_2413 + (-1.0))) + 1.0;
        float _2424 = exp2(log2(1.0 - (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0)))) * 5.0);
        float _2431 = 1.0 - _2390;
        float _2441 = (0.5 / (((_2170 * ((_2404 * _2431) + _2390)) + 9.9999999392252902907785028219223e-09) + (((_2170 * _2431) + _2390) * _2404))) * _2404;
        float _4469 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2443 = (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_2413 / ((_2417 * _2417) * 3.141590118408203125));
        float _2444 = isnan(1.0) ? _2020 : (isnan(_2020) ? 1.0 : min(_2020, 1.0));
        _2365 = (((((_2424 * _2192) + _918) * cbLight._m0[_2375].x) * _2443) * _2444) + _2301;
        _2367 = (((((_2424 * _2194) + _920) * cbLight._m0[_2375].y) * _2443) * _2444) + _2302;
        _2369 = (((((_2424 * _2195) + _921) * cbLight._m0[_2375].z) * _2443) * _2444) + _2303;
    }
    float _2479;
    float _2481;
    float _2483;
    if (_2096)
    {
        _2479 = _2365;
        _2481 = _2367;
        _2483 = _2369;
    }
    else
    {
        uint _2490 = _2005 + 3u;
        uint _2494 = _2005 + 11u;
        float _2508 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2490].w)) * _759) * 0.949999988079071044921875);
        float _2509 = _2508 * _2508;
        float _2510 = cbLight._m0[_2490].x + _836;
        float _2511 = cbLight._m0[_2490].y + _837;
        float _2512 = cbLight._m0[_2490].z + _838;
        float _2516 = inversesqrt(dot(vec3(_2510, _2511, _2512), vec3(_2510, _2511, _2512)));
        float _2517 = _2516 * _2510;
        float _2518 = _2516 * _2511;
        float _2519 = _2516 * _2512;
        float _2520 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_2490].xyz));
        float _4485 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        float _2523 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _2524 = dot(vec3(_756, _757, _758), vec3(_2517, _2518, _2519));
        float _4496 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2527 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
        float _2528 = dot(vec3(cbLight._m0[_2490].xyz), vec3(_2517, _2518, _2519));
        float _4507 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        float _2532 = _2509 * _2509;
        float _2536 = ((_2527 * _2527) * (_2532 + (-1.0))) + 1.0;
        float _2543 = exp2(log2(1.0 - (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0)))) * 5.0);
        float _2550 = 1.0 - _2509;
        float _2560 = (0.5 / (((_2170 * ((_2523 * _2550) + _2509)) + 9.9999999392252902907785028219223e-09) + (((_2170 * _2550) + _2509) * _2523))) * _2523;
        float _4518 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        float _2562 = (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0))) * (_2532 / ((_2536 * _2536) * 3.141590118408203125));
        float _2563 = isnan(1.0) ? _2021 : (isnan(_2021) ? 1.0 : min(_2021, 1.0));
        _2479 = (((((_2543 * _2192) + _918) * cbLight._m0[_2494].x) * _2562) * _2563) + _2365;
        _2481 = (((((_2543 * _2194) + _920) * cbLight._m0[_2494].y) * _2562) * _2563) + _2367;
        _2483 = (((((_2543 * _2195) + _921) * cbLight._m0[_2494].z) * _2562) * _2563) + _2369;
    }
    float _2698;
    float _2700;
    float _2702;
    float _2704;
    float _2706;
    float _2708;
    if (_2003.y == 0u)
    {
        float _2638 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2639 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2638;
        float _2640 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2638;
        float _2641 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2638;
        uvec4 _2653 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2654 = _2653.x;
        uint _2665 = uint((float(_2653.y) * floor(float(uint(cbSceneParam._m0[85u].y * _857) / _2654))) + floor(float(uint(cbSceneParam._m0[85u].x * _856) / _2654)));
        float _2675 = (log2(_2641 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2676 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        uint _2679 = uint(isnan(14.0) ? _2676 : (isnan(_2676) ? 14.0 : min(_2676, 14.0)));
        uvec4 _2684 = texelFetch(g_lightClusterGridBuffer, int(((_2679 << 2u) + (_2665 << 6u)) >> 2u));
        uint _2685 = _2684.x;
        uint _2686 = _2653.z;
        float _2786;
        float _2788;
        float _2790;
        float _2792;
        float _2794;
        float _2796;
        if (((((1u << ((_2686 >> 4u) & 15u)) + 4294967295u) & _2685) == 0u) || ((_2686 & 240u) == 0u))
        {
            _2786 = 0.0;
            _2788 = 0.0;
            _2790 = 0.0;
            _2792 = 0.0;
            _2794 = 0.0;
            _2796 = 0.0;
        }
        else
        {
            float _2787;
            float _2789;
            float _2791;
            float _2793;
            float _2795;
            float _2797;
            float _2939 = 0.0;
            float _2940 = 0.0;
            float _2941 = 0.0;
            float _2942 = 0.0;
            float _2943 = 0.0;
            float _2944 = 0.0;
            uint _2945 = 0u;
            uint _2954;
            bool _2955;
            for (;;)
            {
                _2954 = texelFetch(g_lightClassification, int((((_2679 << 5u) + (_2665 << 9u)) + (_2945 << 2u)) >> 2u)).x;
                _2955 = _2954 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2955)
                {
                    frontier_phi_66_pred = _2939;
                    frontier_phi_66_pred_1 = _2944;
                    frontier_phi_66_pred_2 = _2943;
                    frontier_phi_66_pred_3 = _2942;
                    frontier_phi_66_pred_4 = _2941;
                    frontier_phi_66_pred_5 = _2940;
                }
                else
                {
                    float _3084;
                    float _3085;
                    float _3086;
                    float _3087;
                    float _3088;
                    float _3089;
                    uint _3090;
                    _3084 = _2939;
                    _3085 = _2940;
                    _3086 = _2941;
                    _3087 = _2942;
                    _3088 = _2943;
                    _3089 = _2944;
                    _3090 = _2954;
                    float _3011;
                    float _3012;
                    float _3013;
                    float _3014;
                    float _3015;
                    float _3016;
                    for (;;)
                    {
                        uint _3094 = uint(findLSB(_3090)) + (_2945 << 5u);
                        uint _3091 = (_3090 + 4294967295u) & _3090;
                        uint _3096 = _3094 * 48u;
                        vec4 _3110 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3096)).x, texelFetch(g_PointLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3096 + 3u)).x));
                        uint _3116 = (_3094 * 48u) + 4u;
                        vec4 _3129 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3116)).x, texelFetch(g_PointLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3116 + 3u)).x));
                        uint _3135 = (_3094 * 48u) + 8u;
                        vec3 _3146 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3135)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 2u)).x));
                        float _3150 = _3110.x - _2639;
                        float _3151 = _3110.y - _2640;
                        float _3152 = _3110.z - _2641;
                        float _3153 = dot(vec3(_3150, _3151, _3152), vec3(_3150, _3151, _3152));
                        float _3156 = inversesqrt(_3153);
                        float _3157 = _3156 * _3150;
                        float _3158 = _3156 * _3151;
                        float _3159 = _3156 * _3152;
                        float _3160 = dot(vec3(_875, _878, _881), vec3(_3157, _3158, _3159));
                        float _3165 = 1.0 - (_3153 * _3110.w);
                        float _4544 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                        float _3166 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
                        float _3167 = sqrt(_3153) * _3129.w;
                        float _3170 = 1.39999997615814208984375 / (_3167 + 1.39999997615814208984375);
                        float _3171 = _3170 * _3170;
                        float _3174 = ((1.0 - _3171) * _3160) + _3171;
                        float _3177 = _3167 * _3167;
                        float _3181 = ((isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0))) * _3166) / ((_3177 * 0.699999988079071044921875) + 1.0);
                        float _3185 = (-0.0) - _2639;
                        float _3186 = (-0.0) - _2640;
                        float _3187 = (-0.0) - _2641;
                        float _3191 = inversesqrt(dot(vec3(_3185, _3186, _3187), vec3(_3185, _3186, _3187)));
                        float _3192 = _3191 * _3185;
                        float _3193 = _3191 * _3186;
                        float _3194 = _3191 * _3187;
                        float _3202 = exp2(log2(1.0 / ((_3177 * 3.5) + 5.0)) * 0.25);
                        float _3203 = 1.0 - _950;
                        float _3210 = sqrt(1.0 - ((1.0 - (_3203 * _3203)) * (1.0 - (_3202 * _3202))));
                        float _3211 = _3210 * _3210;
                        float _3212 = _3211 * _3211;
                        float _3213 = _3192 + _3157;
                        float _3214 = _3193 + _3158;
                        float _3215 = _3194 + _3159;
                        float _3219 = inversesqrt(dot(vec3(_3213, _3214, _3215), vec3(_3213, _3214, _3215)));
                        float _3223 = dot(vec3(_875, _878, _881), vec3(_3192, _3193, _3194));
                        float _4560 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                        float _3226 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
                        float _3227 = dot(vec3(_875, _878, _881), vec3(_3219 * _3213, _3219 * _3214, _3219 * _3215));
                        float _4571 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                        float _3230 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
                        float _3234 = ((_3230 * _3230) * (_3212 + (-1.0))) + 1.0;
                        float _3235 = _3170 * _3211;
                        float _3236 = _3235 * _3235;
                        float _3239 = ((1.0 - _3236) * _3160) + _3236;
                        float _4582 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                        float _3240 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
                        float _3241 = 1.0 - _3211;
                        float _3251 = (0.5 / (((_3240 * ((_3226 * _3241) + _3211)) + 9.9999999392252902907785028219223e-09) + (((_3240 * _3241) + _3211) * _3226))) * _3240;
                        float _4593 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0));
                        float _3262 = (((_3212 * 3.1415927410125732421875) * (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0)))) / ((_3234 * _3234) * ((_3177 * 2.1991131305694580078125) + 3.141590118408203125))) * _3166;
                        _3014 = (_3181 * _3129.x) + _3087;
                        _3015 = (_3181 * _3129.y) + _3088;
                        _3016 = (_3181 * _3129.z) + _3089;
                        _3011 = (_3262 * _3146.x) + _3084;
                        _3012 = (_3262 * _3146.y) + _3085;
                        _3013 = (_3262 * _3146.z) + _3086;
                        if (_3091 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3084 = _3011;
                            _3085 = _3012;
                            _3086 = _3013;
                            _3087 = _3014;
                            _3088 = _3015;
                            _3089 = _3016;
                            _3090 = _3091;
                        }
                    }
                    frontier_phi_66_pred = _3011;
                    frontier_phi_66_pred_1 = _3016;
                    frontier_phi_66_pred_2 = _3015;
                    frontier_phi_66_pred_3 = _3014;
                    frontier_phi_66_pred_4 = _3013;
                    frontier_phi_66_pred_5 = _3012;
                }
                _2787 = frontier_phi_66_pred;
                _2797 = frontier_phi_66_pred_1;
                _2795 = frontier_phi_66_pred_2;
                _2793 = frontier_phi_66_pred_3;
                _2791 = frontier_phi_66_pred_4;
                _2789 = frontier_phi_66_pred_5;
                uint _2946 = _2945 + 1u;
                if (_2946 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2939 = _2787;
                    _2940 = _2789;
                    _2941 = _2791;
                    _2942 = _2793;
                    _2943 = _2795;
                    _2944 = _2797;
                    _2945 = _2946;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2786 = _2787;
            _2788 = _2789;
            _2790 = _2791;
            _2792 = _2793;
            _2794 = _2795;
            _2796 = _2797;
        }
        uvec4 _2800 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2801 = _2800.z;
        uint _2803 = (_2801 >> 8u) & 15u;
        float _2907;
        float _2909;
        float _2911;
        float _2913;
        float _2915;
        float _2917;
        if (((4294967295u << _2803) & _2685) == 0u)
        {
            _2907 = _2786;
            _2909 = _2788;
            _2911 = _2790;
            _2913 = _2792;
            _2915 = _2794;
            _2917 = _2796;
        }
        else
        {
            float _2932 = inversesqrt(dot(vec3(_2639, _2640, _2641), vec3(_2639, _2640, _2641)));
            float _2933 = _2932 * _2639;
            float _2934 = _2932 * _2640;
            float _2935 = _2932 * _2641;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2803 < ((_2801 >> 12u) & 15u))
            {
                float _2908;
                float _2910;
                float _2912;
                float _2914;
                float _2916;
                float _2918;
                float _3067 = _2786;
                float _3068 = _2788;
                float _3069 = _2790;
                float _3070 = _2792;
                float _3071 = _2794;
                float _3072 = _2796;
                uint _3073 = _2803;
                uint _3082;
                bool _3083;
                for (;;)
                {
                    _3082 = texelFetch(g_lightClassification, int((((_2679 << 5u) + (_2665 << 9u)) + (_3073 << 2u)) >> 2u)).x;
                    _3083 = _3082 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3083)
                    {
                        frontier_phi_77_pred = _3072;
                        frontier_phi_77_pred_1 = _3071;
                        frontier_phi_77_pred_2 = _3070;
                        frontier_phi_77_pred_3 = _3069;
                        frontier_phi_77_pred_4 = _3068;
                        frontier_phi_77_pred_5 = _3067;
                    }
                    else
                    {
                        float _3276;
                        float _3277;
                        float _3278;
                        float _3279;
                        float _3280;
                        float _3281;
                        float _3569;
                        float _3570;
                        float _3571;
                        float _3572;
                        float _3573;
                        float _3574;
                        float _3289 = _3067;
                        float _3290 = _3068;
                        float _3291 = _3069;
                        float _3292 = _3070;
                        float _3293 = _3071;
                        float _3294 = _3072;
                        uint _3295 = _3082;
                        uint _3296;
                        vec4 _3321;
                        float _3322;
                        vec4 _3337;
                        vec3 _3349;
                        vec4 _3364;
                        vec4 _3379;
                        float _3425;
                        bool _3426;
                        for (;;)
                        {
                            uint _3306 = ((_3073 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3295));
                            _3296 = (_3295 + 4294967295u) & _3295;
                            uint _3308 = _3306 * 40u;
                            _3321 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3308)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 3u)).x));
                            _3322 = _3321.w;
                            uint _3324 = (_3306 * 40u) + 4u;
                            _3337 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3324)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 3u)).x));
                            uint _3339 = (_3306 * 40u) + 8u;
                            _3349 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3339)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 2u)).x));
                            uint _3351 = (_3306 * 40u) + 16u;
                            _3364 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3351)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 3u)).x));
                            uint _3366 = (_3306 * 40u) + 20u;
                            _3379 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3366)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 3u)).x));
                            uint _3381 = (_3306 * 40u) + 24u;
                            vec4 _3394 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3381)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 3u)).x));
                            uint _3400 = (_3306 * 40u) + 28u;
                            vec4 _3413 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3400)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 3u)).x));
                            _3425 = fma(_2641, _3413.z, fma(_2640, _3413.y, _3413.x * _2639)) + _3413.w;
                            _3426 = !((fma(_2641, _3394.z, fma(_2640, _3394.y, _3394.x * _2639)) + _3394.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3426)
                            {
                                float _3453 = _3321.x - _2639;
                                float _3454 = _3321.y - _2640;
                                float _3455 = _3321.z - _2641;
                                float _3456 = dot(vec3(_3453, _3454, _3455), vec3(_3453, _3454, _3455));
                                float _3459 = inversesqrt(_3456);
                                float _3460 = _3459 * _3453;
                                float _3461 = _3459 * _3454;
                                float _3462 = _3459 * _3455;
                                float _3466 = 1.0 - (_3456 / (_3322 * _3322));
                                float _4604 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                                float _3467 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
                                float _3471 = sqrt(_3456) * _3337.w;
                                float _3473 = 1.39999997615814208984375 / (_3471 + 1.39999997615814208984375);
                                float _3474 = _3473 * _3473;
                                float _3477 = ((1.0 - _3474) * dot(vec3(_3460, _3461, _3462), vec3(_875, _878, _881))) + _3474;
                                float _3480 = _3471 * _3471;
                                float _3484 = (fma(_2641, _3364.z, fma(_2640, _3364.y, _3364.x * _2639)) + _3364.w) / _3425;
                                float _3485 = (fma(_2641, _3379.z, fma(_2640, _3379.y, _3379.x * _2639)) + _3379.w) / _3425;
                                float _3489 = 1.0 - dot(vec2(_3484, _3485), vec2(_3484, _3485));
                                float _4620 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                                float _3490 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
                                float _3491 = _3490 * (((isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0))) * _3467) / ((_3480 * 0.699999988079071044921875) + 1.0));
                                float _3503 = exp2(log2(1.0 / ((_3480 * 3.5) + 5.0)) * 0.25);
                                float _3504 = 1.0 - _950;
                                float _3511 = sqrt(1.0 - ((1.0 - (_3504 * _3504)) * (1.0 - (_3503 * _3503))));
                                float _3512 = _3511 * _3511;
                                float _3513 = _3512 * _3512;
                                float _3514 = _3460 - _2933;
                                float _3515 = _3461 - _2934;
                                float _3516 = _3462 - _2935;
                                float _3520 = inversesqrt(dot(vec3(_3514, _3515, _3516), vec3(_3514, _3515, _3516)));
                                float _3524 = dot(vec3(_875, _878, _881), vec3((-0.0) - _2933, (-0.0) - _2934, (-0.0) - _2935));
                                float _4631 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                                float _3527 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
                                float _3528 = dot(vec3(_875, _878, _881), vec3(_3520 * _3514, _3520 * _3515, _3520 * _3516));
                                float _4642 = isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0));
                                float _3531 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
                                float _3535 = ((_3531 * _3531) * (_3513 + (-1.0))) + 1.0;
                                float _3536 = _3473 * _3512;
                                float _3537 = _3536 * _3536;
                                float _3543 = ((1.0 - _3537) * dot(vec3(_875, _878, _881), vec3(_3460, _3461, _3462))) + _3537;
                                float _4653 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                                float _3544 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
                                float _3545 = 1.0 - _3512;
                                float _3555 = (0.5 / (((_3544 * ((_3527 * _3545) + _3512)) + 9.9999999392252902907785028219223e-09) + (((_3544 * _3545) + _3512) * _3527))) * _3544;
                                float _4664 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                                float _3565 = (_3490 * _3467) * (((_3513 * 3.1415927410125732421875) * (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0)))) / ((_3535 * _3535) * ((_3480 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3491 * _3337.y;
                                frontier_phi_83_pred_1 = _3491 * _3337.x;
                                frontier_phi_83_pred_2 = _3565 * _3349.z;
                                frontier_phi_83_pred_3 = _3565 * _3349.y;
                                frontier_phi_83_pred_4 = _3565 * _3349.x;
                                frontier_phi_83_pred_5 = _3491 * _3337.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3573 = frontier_phi_83_pred;
                            _3572 = frontier_phi_83_pred_1;
                            _3571 = frontier_phi_83_pred_2;
                            _3570 = frontier_phi_83_pred_3;
                            _3569 = frontier_phi_83_pred_4;
                            _3574 = frontier_phi_83_pred_5;
                            _3279 = _3572 + _3292;
                            _3280 = _3573 + _3293;
                            _3281 = _3574 + _3294;
                            _3276 = _3569 + _3289;
                            _3277 = _3570 + _3290;
                            _3278 = _3571 + _3291;
                            if (_3296 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3289 = _3276;
                                _3290 = _3277;
                                _3291 = _3278;
                                _3292 = _3279;
                                _3293 = _3280;
                                _3294 = _3281;
                                _3295 = _3296;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3281;
                        frontier_phi_77_pred_1 = _3280;
                        frontier_phi_77_pred_2 = _3279;
                        frontier_phi_77_pred_3 = _3278;
                        frontier_phi_77_pred_4 = _3277;
                        frontier_phi_77_pred_5 = _3276;
                    }
                    _2918 = frontier_phi_77_pred;
                    _2916 = frontier_phi_77_pred_1;
                    _2914 = frontier_phi_77_pred_2;
                    _2912 = frontier_phi_77_pred_3;
                    _2910 = frontier_phi_77_pred_4;
                    _2908 = frontier_phi_77_pred_5;
                    uint _3074 = _3073 + 1u;
                    if (_3074 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3067 = _2908;
                        _3068 = _2910;
                        _3069 = _2912;
                        _3070 = _2914;
                        _3071 = _2916;
                        _3072 = _2918;
                        _3073 = _3074;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2912;
                frontier_phi_58_59_ladder_1 = _2918;
                frontier_phi_58_59_ladder_2 = _2916;
                frontier_phi_58_59_ladder_3 = _2914;
                frontier_phi_58_59_ladder_4 = _2910;
                frontier_phi_58_59_ladder_5 = _2908;
            }
            else
            {
                frontier_phi_58_59_ladder = _2790;
                frontier_phi_58_59_ladder_1 = _2796;
                frontier_phi_58_59_ladder_2 = _2794;
                frontier_phi_58_59_ladder_3 = _2792;
                frontier_phi_58_59_ladder_4 = _2788;
                frontier_phi_58_59_ladder_5 = _2786;
            }
            _2907 = frontier_phi_58_59_ladder_5;
            _2909 = frontier_phi_58_59_ladder_4;
            _2911 = frontier_phi_58_59_ladder;
            _2913 = frontier_phi_58_59_ladder_3;
            _2915 = frontier_phi_58_59_ladder_2;
            _2917 = frontier_phi_58_59_ladder_1;
        }
        float _2922 = isnan(1.0) ? _934 : (isnan(_934) ? 1.0 : min(_934, 1.0));
        _2698 = (_2922 * _2913) + _2134;
        _2700 = (_2922 * _2915) + _2136;
        _2702 = (_2922 * _2917) + _2138;
        _2704 = ((_2907 * _918) * _2922) + _2479;
        _2706 = ((_2909 * _920) * _2922) + _2481;
        _2708 = ((_2911 * _921) * _2922) + _2483;
    }
    else
    {
        _2698 = _2134;
        _2700 = _2136;
        _2702 = _2138;
        _2704 = _2479;
        _2706 = _2481;
        _2708 = _2483;
    }
    float _4680 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _4691 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _4702 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _2725 = ((isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0))) * (_2698 + ((isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))) * _934))) + ((_2704 + ((isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0))) * _1772)) * cbPerFrame._m0[3u].x);
    float _2726 = ((isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0))) * (_2700 + ((isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))) * _934))) + ((_2706 + ((isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0))) * _1772)) * cbPerFrame._m0[3u].x);
    float _2727 = ((isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0))) * (_2702 + ((isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))) * _934))) + ((_2708 + ((isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0))) * _1772)) * cbPerFrame._m0[3u].x);
    uint _2728 = _246 + 6u;
    float _2736 = _856 / cbSceneParam._m0[86u].x;
    float _2737 = _857 / cbSceneParam._m0[86u].y;
    vec4 _2751 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2736, _2737, (log2((isnan(cbSceneParam._m0[77u].w) ? _778 : (isnan(_778) ? cbSceneParam._m0[77u].w : min(_778, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2753 = _2751.x;
    float _2754 = _2751.y;
    float _2755 = _2751.z;
    float _2756 = _2751.w;
    float _2849;
    float _2851;
    float _2853;
    float _2855;
    if (_778 > cbSceneParam._m0[78u].w)
    {
        float _2811 = isnan(_778) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _778 : min(cbSceneParam._m0[80u].w, _778));
        float _2812 = _2811 / _778;
        float _2823 = _2812 * _829;
        float _2824 = _830 * _2812;
        float _2825 = (-0.0) - _2824;
        float _2827 = _2812 * _831;
        float _2829 = (cbSceneParam._m0[77u].w * _2825) / _2811;
        float _2830 = _2829 + cbSceneParam._m0[79u].w;
        float _2831 = cbSceneParam._m0[79u].w - _2824;
        float _2837 = sqrt(((_2823 * _2823) + (_2824 * _2824)) + (_2827 * _2827));
        float _2840 = (1.0 - (cbSceneParam._m0[77u].w / _2811)) * _2837;
        float _2845 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2847 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3024;
        if (abs((_2825 - _2829) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3024 = ((((_2830 > 0.0) ? exp2(_2845 * _2830) : (2.0 - exp2(_2847 * _2830))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2840;
        }
        else
        {
            float _2968 = 1.0 / cbSceneParam._m0[80u].x;
            float _2969 = isnan(_2831) ? _2830 : (isnan(_2830) ? _2831 : max(_2830, _2831));
            float _2970 = isnan(_2831) ? _2830 : (isnan(_2830) ? _2831 : min(_2830, _2831));
            float _2979 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : min(_2969, 0.0));
            float _2980 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : min(_2970, 0.0));
            _3024 = ((abs(_2837 / _2825) * cbSceneParam._m0[80u].y) * ((((_2979 - _2980) * 2.0) - ((exp2(_2845 * (isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0)))) - exp2(_2845 * (isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0))))) * _2968)) - ((exp2(_2847 * _2979) - exp2(_2847 * _2980)) * _2968))) + (_2840 * cbSceneParam._m0[80u].z);
        }
        vec4 _3026 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2736, _2737, 1.0), 0.0);
        float _3035 = exp2((_3024 * (-1.44269502162933349609375)) * (1.0 - _3026.w));
        float _3036 = log2(_3035);
        float _3052 = log2(_2756);
        _2849 = (exp2(_3052 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3036 * cbSceneParam._m0[78u].x)) * _3026.x) / cbSceneParam._m0[78u].x)) + _2753;
        _2851 = (exp2(_3052 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3036 * cbSceneParam._m0[78u].y)) * _3026.y) / cbSceneParam._m0[78u].y)) + _2754;
        _2853 = (exp2(_3052 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3036 * cbSceneParam._m0[78u].z)) * _3026.z) / cbSceneParam._m0[78u].z)) + _2755;
        _2855 = _3035 * _2756;
    }
    else
    {
        _2849 = _2753;
        _2851 = _2754;
        _2853 = _2755;
        _2855 = _2756;
    }
    bool _3062;
    vec4 _2865;
    vec4 _2887;
    float _2889;
    float _2893;
    float _2894;
    float _2895;
    float _2896;
    bool _2906;
    for (;;)
    {
        _2865 = cbMatDynParam._m0[0u];
        float _2867 = roundEven(_2865.y);
        bool _2868 = _2867 == 3.0;
        float _2869 = log2(_2855);
        float _2876 = exp2(_2869 * cbSceneParam._m0[78u].x) * _2725;
        float _2877 = exp2(_2869 * cbSceneParam._m0[78u].y) * _2726;
        float _2878 = exp2(_2869 * cbSceneParam._m0[78u].z) * _2727;
        float _2885 = _845 + (-0.5);
        _2887 = cbMtdParam._m0[1u];
        _2889 = _2887.y * _2885;
        float _2892 = (_2867 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2893 = _2892 * (_2868 ? _2876 : (_2876 + (cbSceneParam._m0[72u].w * _2849)));
        _2894 = _2892 * (_2868 ? _2877 : (_2877 + (cbSceneParam._m0[72u].w * _2851)));
        _2895 = _2892 * (_2868 ? _2878 : (_2878 + (cbSceneParam._m0[72u].w * _2853)));
        _2896 = _2885 * 0.999000012874603271484375;
        _2906 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2906)
        {
            if ((cbInstanceData._m0[_246 + 7u].x + _2896) < 0.5)
            {
                _3062 = true;
                break;
            }
        }
        uint _3003 = _894 + uint(_2865.w);
        if ((cbInstanceData._m0[_3003].w < 1.0) && ((cbInstanceData._m0[_3003].w + _2896) < 0.5))
        {
            _3062 = true;
            break;
        }
        if ((_2889 + 1.0) < _2887.x)
        {
            _3062 = true;
            break;
        }
        _3062 = false;
        break;
    }
    float _3267;
    if (_3062)
    {
        discard_state = true;
        _3267 = 0.0;
    }
    else
    {
        _3267 = cbInstanceData._m0[_2728].w;
    }
    SV_Target.x = _2893;
    SV_Target.y = _2894;
    SV_Target.z = _2895;
    SV_Target.w = _3267;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2728].w;
    discard_exit();
}


