#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1259;
float _3923;
float _3924;
float _3925;
float _3926;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _248 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _248 + 1u;
    uint _258 = _248 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _295 = _289.x * cbMtdParam._m0[11u].x;
    float _296 = _289.y * cbMtdParam._m0[11u].y;
    float _297 = _289.z * cbMtdParam._m0[11u].z;
    vec4 _316 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _354 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _356 = _354.x;
    float _368 = dot(vec4(_356, _354.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _385 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_356 - _368) * cbMtdParam._m0[24u].y) + _368) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3935 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _386 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    float _393 = (_386 * ((_316.x * cbMtdParam._m0[12u].x) - _295)) + _295;
    float _394 = (_386 * ((_316.y * cbMtdParam._m0[12u].y) - _296)) + _296;
    float _395 = (_386 * ((_316.z * cbMtdParam._m0[12u].z) - _297)) + _297;
    vec4 _413 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _268) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _269) + cbTextureTilingScale._m0[20u].w));
    vec4 _438 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _455 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _457 = _455.x;
    float _458 = _455.y;
    float _459 = _455.z;
    float _468 = ((_438.z - _459) * _386) + _459;
    float _471 = ((((_438.x - _457) * _386) + _457) * 2.0) + (-1.0);
    float _472 = ((((_438.y - _458) * _386) + _458) * 2.0) + (-1.0);
    float _473 = dot(vec2(_471, _472), vec2(_471, _472));
    float _3946 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _478 = sqrt(1.0 - (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))));
    vec4 _494 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _519 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _268) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _521 = _519.x;
    float _522 = 1.0 - _521;
    float _535 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_521 - _522) * cbMtdParam._m0[24u].z) + _522) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3957 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _536 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _543 = (_536 * (cbMtdParam._m0[17u].x - _393)) + _393;
    float _544 = (_536 * (cbMtdParam._m0[17u].y - _394)) + _394;
    float _545 = (_536 * (cbMtdParam._m0[17u].z - _395)) + _395;
    vec4 _557 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _571 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _573 = _571.x;
    float _591 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _268) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _269) + cbTextureTilingScale._m0[9u].w)).x - _573) * _386) + _573;
    float _595 = ((_557.x - _591) * cbMtdParam._m0[19u].z) + _591;
    float _597 = _595 - (_595 * _536);
    float _602 = (((_413.z - _468) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _468;
    float _606 = ((_494.z - _602) * cbMtdParam._m0[19u].w) + _602;
    vec4 _619 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _268) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _269) + cbTextureTilingScale._m0[15u].w));
    float _626 = (_619.x * 2.0) + (-1.0);
    float _627 = (_619.y * 2.0) + (-1.0);
    float _628 = dot(vec2(_626, _627), vec2(_626, _627));
    float _3968 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _636 = (_536 * (_619.z - _606)) + _606;
    float _645 = (_471 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_413.x * 2.0) + (-1.0)))) + (((_494.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _646 = (_472 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_413.y * 2.0) + (-1.0)))) + (((_494.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _658 = (((_626 - _645) + (cbMtdParam._m0[21u].x * _645)) * _536) + _645;
    float _659 = (((_627 - _646) + (cbMtdParam._m0[21u].x * _646)) * _536) + _646;
    float _660 = (_536 * (sqrt(1.0 - (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0)))) - _478)) + _478;
    float _665 = cbMtdParam._m0[22u].x + _494.w;
    float _668 = fma(_660, _235 * NORMAL.x, fma(_659, _242 * TANGENT.x, (_228 * _220) * _658));
    float _671 = fma(_660, _235 * NORMAL.y, fma(_659, _242 * TANGENT.y, (_228 * _221) * _658));
    float _674 = fma(_660, _235 * NORMAL.z, fma(_659, _242 * TANGENT.z, (_228 * _222) * _658));
    float _678 = inversesqrt(dot(vec3(_668, _671, _674), vec3(_668, _671, _674)));
    float _679 = _678 * _668;
    float _680 = _678 * _671;
    float _681 = _678 * _674;
    float _3979 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _682 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _3990 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _4001 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _4012 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _4023 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _4034 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _687 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _701 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _742 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _752 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _742);
    float _753 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _742);
    float _754 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _742);
    float _758 = inversesqrt(dot(vec3(_752, _753, _754), vec3(_752, _753, _754)));
    float _759 = _752 * _758;
    float _760 = _753 * _758;
    float _761 = _754 * _758;
    vec4 _766 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _768 = _766.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _940 = sqrt(((_752 * _752) + (_753 * _753)) + (_754 * _754));
        float _946 = (cbMatDynParam._m0[5u].x * _940) + cbMatDynParam._m0[5u].y;
        float _4045 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _947 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _951 = (cbMatDynParam._m0[5u].z * _940) + cbMatDynParam._m0[5u].w;
        float _4056 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) - _947)) + _947) < ((_768 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _779 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _780 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _798 = fma(_681, cbSceneParam._m0[5u].z, fma(_680, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _679));
    float _801 = fma(_681, cbSceneParam._m0[6u].z, fma(_680, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _679));
    float _804 = fma(_681, cbSceneParam._m0[7u].z, fma(_680, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _679));
    uint _817 = _248 + 9u;
    uint _818 = _817 + uint(cbMatDynParam._m0[0u].w);
    float _824 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0)))) * cbInstanceData._m0[_818].x;
    float _825 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) * cbInstanceData._m0[_818].y;
    float _826 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) * cbInstanceData._m0[_818].z;
    float _4067 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _827 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _4078 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _828 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _4089 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _829 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _830 = 1.0 - _687;
    float _831 = _827 * _830;
    float _832 = _828 * _830;
    float _833 = _829 * _830;
    float _838 = (_827 + (-0.039999999105930328369140625)) * _687;
    float _839 = (_828 + (-0.039999999105930328369140625)) * _687;
    float _840 = (_829 + (-0.039999999105930328369140625)) * _687;
    float _841 = _838 + 0.039999999105930328369140625;
    float _843 = _839 + 0.039999999105930328369140625;
    float _844 = _840 + 0.039999999105930328369140625;
    vec4 _853 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _779, cbSceneParam._m0[86u].y * _780));
    float _857 = ((isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * TEXCOORD_5.w) * _853.x;
    float _858 = dot(vec3(_679, _680, _681), vec3(_759, _760, _761));
    float _861 = _858 * 2.0;
    float _865 = (_861 * _679) - _759;
    float _866 = (_861 * _680) - _760;
    float _867 = (_861 * _681) - _761;
    float _871 = abs(dot(vec3(_759, _760, _761), vec3(_679, _680, _681)));
    float _4100 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _873 = sqrt(_682);
    float _886 = exp2((_873 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_873 * 3.0));
    float _892 = (1.0 - _886) * ((_873 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _893 = _886 * _873;
    float _921 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _925 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _929 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1258;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _983 = fma(_929, cbModelParam._m0[26u].z, fma(_925, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _921));
        float _987 = fma(_929, cbModelParam._m0[27u].z, fma(_925, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _921));
        float _991 = fma(_929, cbModelParam._m0[28u].z, fma(_925, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _921));
        float _1016 = _921 + _679;
        float _1017 = _925 + _680;
        float _1018 = _929 + _681;
        float _1028 = fma(_1018, cbModelParam._m0[26u].z, fma(_1017, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1016)) - _983;
        float _1029 = fma(_1018, cbModelParam._m0[27u].z, fma(_1017, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1016)) - _987;
        float _1030 = fma(_1018, cbModelParam._m0[28u].z, fma(_1017, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1016)) - _991;
        float _1034 = inversesqrt(dot(vec3(_1028, _1029, _1030), vec3(_1028, _1029, _1030)));
        float _1047 = ((_1034 * _1028) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_983 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1048 = ((_1034 * _1029) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_987 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1049 = ((_1034 * _1030) / cbModelParam._m0[34u].z) + ((((((_991 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1052 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1047, _1048, _1049), 0.0);
        vec4 _1059 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1047, _1048, _1049), 0.0);
        vec4 _1066 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1047, _1048, _1049), 0.0);
        vec4 _1073 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1047, _1048, _1049), 0.0);
        float _1086 = exp2((_1052.w + (-0.5)) * 20.0) * 2.0;
        float _1087 = _1086 * (_1052.x + (-0.5));
        float _1088 = _1086 * (_1052.y + (-0.5));
        float _1089 = _1086 * (_1052.z + (-0.5));
        float _1096 = exp2((_1059.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1059.x + (-0.5));
        float _1098 = _1096 * (_1059.y + (-0.5));
        float _1099 = _1096 * (_1059.z + (-0.5));
        float _1106 = exp2((_1066.w + (-0.5)) * 20.0) * 2.0;
        float _1107 = _1106 * (_1066.x + (-0.5));
        float _1108 = _1106 * (_1066.y + (-0.5));
        float _1109 = _1106 * (_1066.z + (-0.5));
        float _1116 = exp2((_1073.w + (-0.5)) * 20.0) * 2.0;
        float _1117 = _1116 * (_1073.x + (-0.5));
        float _1118 = _1116 * (_1073.y + (-0.5));
        float _1119 = _1116 * (_1073.z + (-0.5));
        float _1120 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1121 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1122 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1123 = _1087 * 0.5;
        float _1124 = _1097 * 0.5;
        float _1125 = _1107 * 0.5;
        float _1126 = dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125));
        float _1131 = (_1126 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1126);
        float _1140 = (dot(vec3(_679, _680, _681), vec3(_1131 * _1123, _1131 * _1124, _1131 * _1125)) + 1.0) * 0.5;
        float _4126 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1150 = sqrt(((_1124 * _1124) + (_1123 * _1123)) + (_1125 * _1125)) / (_1120 + 9.9999997473787516355514526367188e-06);
        float _4137 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _4148 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_1152 + 1.0))) + _1157) * _1120;
        float _1167 = _1088 * 0.5;
        float _1168 = _1098 * 0.5;
        float _1169 = _1108 * 0.5;
        float _1170 = dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169));
        float _1175 = (_1170 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1170);
        float _1183 = (dot(vec3(_679, _680, _681), vec3(_1175 * _1167, _1175 * _1168, _1175 * _1169)) + 1.0) * 0.5;
        float _4159 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1192 = sqrt(((_1168 * _1168) + (_1167 * _1167)) + (_1169 * _1169)) / (_1121 + 9.9999997473787516355514526367188e-06);
        float _4170 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1194 = _1193 * 2.0;
        float _1198 = (1.0 - _1193) / (_1193 + 1.0);
        float _4181 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1208 = ((((1.0 - _1199) * (_1194 + 2.0)) * exp2(log2(isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_1194 + 1.0))) + _1199) * _1121;
        float _1209 = _1089 * 0.5;
        float _1210 = _1099 * 0.5;
        float _1211 = _1109 * 0.5;
        float _1212 = dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211));
        float _1217 = (_1212 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1212);
        float _1225 = (dot(vec3(_679, _680, _681), vec3(_1217 * _1209, _1217 * _1210, _1217 * _1211)) + 1.0) * 0.5;
        float _4192 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1234 = sqrt(((_1210 * _1210) + (_1209 * _1209)) + (_1211 * _1211)) / (_1122 + 9.9999997473787516355514526367188e-06);
        float _4203 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1236 = _1235 * 2.0;
        float _1240 = (1.0 - _1235) / (_1235 + 1.0);
        float _4214 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1250 = ((((1.0 - _1241) * (_1236 + 2.0)) * exp2(log2(isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_1236 + 1.0))) + _1241) * _1122;
        _1258 = _1089;
        _1260 = _1088;
        _1261 = _1087;
        _1262 = _1099;
        _1263 = _1098;
        _1264 = _1097;
        _1265 = _1109;
        _1266 = _1108;
        _1267 = _1107;
        _1268 = _1122;
        _1269 = _1121;
        _1270 = _1120;
        _1271 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
        _1272 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)));
        _1273 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)));
    }
    else
    {
        _1258 = _1259;
        _1260 = _1259;
        _1261 = _1259;
        _1262 = _1259;
        _1263 = _1259;
        _1264 = _1259;
        _1265 = _1259;
        _1266 = _1259;
        _1267 = _1259;
        _1268 = _1259;
        _1269 = _1259;
        _1270 = _1259;
        _1271 = 0.0;
        _1272 = 0.0;
        _1273 = 0.0;
    }
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1301 = fma(_929, cbModelParam._m0[30u].z, fma(_925, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _921));
        float _1305 = fma(_929, cbModelParam._m0[31u].z, fma(_925, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _921));
        float _1309 = fma(_929, cbModelParam._m0[32u].z, fma(_925, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _921));
        float _1332 = _921 + _679;
        float _1333 = _925 + _680;
        float _1334 = _929 + _681;
        float _1344 = fma(_1334, cbModelParam._m0[30u].z, fma(_1333, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1332)) - _1301;
        float _1345 = fma(_1334, cbModelParam._m0[31u].z, fma(_1333, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1332)) - _1305;
        float _1346 = fma(_1334, cbModelParam._m0[32u].z, fma(_1333, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1332)) - _1309;
        float _1350 = inversesqrt(dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346)));
        float _1363 = ((_1350 * _1344) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1301 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1364 = ((_1350 * _1345) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1305 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1365 = ((_1350 * _1346) / cbModelParam._m0[35u].z) + ((((((_1309 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1367 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1363, _1364, _1365), 0.0);
        vec4 _1374 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1363, _1364, _1365), 0.0);
        vec4 _1381 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1363, _1364, _1365), 0.0);
        vec4 _1388 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1363, _1364, _1365), 0.0);
        float _1400 = exp2((_1367.w + (-0.5)) * 20.0) * 2.0;
        float _1401 = _1400 * (_1367.x + (-0.5));
        float _1402 = _1400 * (_1367.y + (-0.5));
        float _1403 = _1400 * (_1367.z + (-0.5));
        float _1410 = exp2((_1374.w + (-0.5)) * 20.0) * 2.0;
        float _1411 = _1410 * (_1374.x + (-0.5));
        float _1412 = _1410 * (_1374.y + (-0.5));
        float _1413 = _1410 * (_1374.z + (-0.5));
        float _1420 = exp2((_1381.w + (-0.5)) * 20.0) * 2.0;
        float _1421 = _1420 * (_1381.x + (-0.5));
        float _1422 = _1420 * (_1381.y + (-0.5));
        float _1423 = _1420 * (_1381.z + (-0.5));
        float _1430 = exp2((_1388.w + (-0.5)) * 20.0) * 2.0;
        float _1431 = _1430 * (_1388.x + (-0.5));
        float _1432 = _1430 * (_1388.y + (-0.5));
        float _1433 = _1430 * (_1388.z + (-0.5));
        float _1434 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1435 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1436 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1437 = _1401 * 0.5;
        float _1438 = _1411 * 0.5;
        float _1439 = _1421 * 0.5;
        float _1440 = dot(vec3(_1437, _1438, _1439), vec3(_1437, _1438, _1439));
        float _1445 = (_1440 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1440);
        float _1453 = (dot(vec3(_679, _680, _681), vec3(_1445 * _1437, _1445 * _1438, _1445 * _1439)) + 1.0) * 0.5;
        float _4255 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1462 = sqrt(((_1438 * _1438) + (_1437 * _1437)) + (_1439 * _1439)) / (_1434 + 9.9999997473787516355514526367188e-06);
        float _4266 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1464 = _1463 * 2.0;
        float _1468 = (1.0 - _1463) / (_1463 + 1.0);
        float _4277 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1478 = ((((1.0 - _1469) * (_1464 + 2.0)) * exp2(log2(isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_1464 + 1.0))) + _1469) * _1434;
        float _1479 = _1402 * 0.5;
        float _1480 = _1412 * 0.5;
        float _1481 = _1422 * 0.5;
        float _1482 = dot(vec3(_1479, _1480, _1481), vec3(_1479, _1480, _1481));
        float _1487 = (_1482 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1482);
        float _1495 = (dot(vec3(_679, _680, _681), vec3(_1487 * _1479, _1487 * _1480, _1487 * _1481)) + 1.0) * 0.5;
        float _4288 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1504 = sqrt(((_1480 * _1480) + (_1479 * _1479)) + (_1481 * _1481)) / (_1435 + 9.9999997473787516355514526367188e-06);
        float _4299 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1506 = _1505 * 2.0;
        float _1510 = (1.0 - _1505) / (_1505 + 1.0);
        float _4310 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1520 = ((((1.0 - _1511) * (_1506 + 2.0)) * exp2(log2(isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_1506 + 1.0))) + _1511) * _1435;
        float _1521 = _1403 * 0.5;
        float _1522 = _1413 * 0.5;
        float _1523 = _1423 * 0.5;
        float _1524 = dot(vec3(_1521, _1522, _1523), vec3(_1521, _1522, _1523));
        float _1529 = (_1524 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1524);
        float _1537 = (dot(vec3(_679, _680, _681), vec3(_1529 * _1521, _1529 * _1522, _1529 * _1523)) + 1.0) * 0.5;
        float _4321 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1546 = sqrt(((_1522 * _1522) + (_1521 * _1521)) + (_1523 * _1523)) / (_1436 + 9.9999997473787516355514526367188e-06);
        float _4332 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1548 = _1547 * 2.0;
        float _1552 = (1.0 - _1547) / (_1547 + 1.0);
        float _4343 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1562 = ((((1.0 - _1553) * (_1548 + 2.0)) * exp2(log2(isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_1548 + 1.0))) + _1553) * _1436;
        _1570 = _1403;
        _1571 = _1402;
        _1572 = _1401;
        _1573 = _1413;
        _1574 = _1412;
        _1575 = _1411;
        _1576 = _1423;
        _1577 = _1422;
        _1578 = _1421;
        _1579 = _1436;
        _1580 = _1435;
        _1581 = _1434;
        _1582 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)));
        _1583 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)));
        _1584 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)));
    }
    else
    {
        _1570 = _1259;
        _1571 = _1259;
        _1572 = _1259;
        _1573 = _1259;
        _1574 = _1259;
        _1575 = _1259;
        _1576 = _1259;
        _1577 = _1259;
        _1578 = _1259;
        _1579 = _1259;
        _1580 = _1259;
        _1581 = _1259;
        _1582 = 0.0;
        _1583 = 0.0;
        _1584 = 0.0;
    }
    float _1594 = (cbModelParam._m0[1u].x * (_1582 - _1271)) + _1271;
    float _1595 = (cbModelParam._m0[1u].x * (_1583 - _1272)) + _1272;
    float _1596 = (cbModelParam._m0[1u].x * (_1584 - _1273)) + _1273;
    float _1617 = fma(_1596, cbSceneParam._m0[89u].z, fma(_1595, cbSceneParam._m0[89u].y, _1594 * cbSceneParam._m0[89u].x));
    float _1620 = fma(_1596, cbSceneParam._m0[90u].z, fma(_1595, cbSceneParam._m0[90u].y, _1594 * cbSceneParam._m0[90u].x));
    float _1623 = fma(_1596, cbSceneParam._m0[91u].z, fma(_1595, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1594));
    float _1638 = _865 * 0.5;
    float _1639 = _866 * 0.5;
    float _1640 = _867 * 0.5;
    float _1641 = dot(vec4(_1638, _1639, _1640, 1.0), vec4(_1572, _1575, _1578, _1581));
    float _1644 = dot(vec4(_1638, _1639, _1640, 1.0), vec4(_1571, _1574, _1577, _1580));
    float _1647 = dot(vec4(_1638, _1639, _1640, 1.0), vec4(_1570, _1573, _1576, _1579));
    float _1681;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1654 = dot(vec4(_1638, _1639, _1640, 1.0), vec4(_1258, _1262, _1265, _1268));
        float _1658 = dot(vec4(_1638, _1639, _1640, 1.0), vec4(_1260, _1263, _1266, _1269));
        float _1662 = dot(vec4(_1638, _1639, _1640, 1.0), vec4(_1261, _1264, _1267, _1270));
        float _1669 = dot(vec4(cbModelParam._m0[39u]), vec4(_1638, _1639, _1640, 1.0));
        _1681 = dot(vec3(isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)), isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)), isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1669) ? 0.0 : (isnan(0.0) ? _1669 : max(0.0, _1669))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1681 = 1.0;
    }
    float _1692;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1683 = dot(vec4(cbModelParam._m0[40u]), vec4(_1638, _1639, _1640, 1.0));
        _1692 = dot(vec3(isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)), isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)), isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1683) ? 0.0 : (isnan(0.0) ? _1683 : max(0.0, _1683))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1692 = 1.0;
    }
    float _1696 = (_1692 * cbModelParam._m0[1u].x) + (_1681 * (1.0 - cbModelParam._m0[1u].x));
    float _1706 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _682);
    float _1707 = isnan(_1706) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1706 : min(cbModelParam._m0[25u].z, _1706));
    float _1788;
    float _1790;
    float _1792;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1755 = fma(_929, cbModelParam._m0[13u].z, fma(_925, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _921)) + cbModelParam._m0[13u].w;
        float _1759 = fma(_929, cbModelParam._m0[14u].z, fma(_925, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _921)) + cbModelParam._m0[14u].w;
        float _1763 = fma(_929, cbModelParam._m0[15u].z, fma(_925, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _921)) + cbModelParam._m0[15u].w;
        float _1766 = fma(_867, cbModelParam._m0[13u].z, fma(_866, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _865));
        float _1769 = fma(_867, cbModelParam._m0[14u].z, fma(_866, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _865));
        float _1772 = fma(_867, cbModelParam._m0[15u].z, fma(_866, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _865));
        float _1800;
        if (_1766 > 0.0)
        {
            _1800 = abs((1.0 - _1755) / _1766);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1755 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1800 = frontier_phi_17_15_ladder;
        }
        float _1972;
        if (_1769 > 0.0)
        {
            _1972 = abs((1.0 - _1759) / _1769);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1769 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1759 + 1.0) / _1769);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1972 = frontier_phi_26_22_ladder;
        }
        float _2267;
        if (_1772 > 0.0)
        {
            _2267 = abs((1.0 - _1763) / _1772);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1763 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2267 = frontier_phi_38_33_ladder;
        }
        float _2269 = isnan(_1972) ? _1800 : (isnan(_1800) ? _1972 : min(_1800, _1972));
        float _2270 = isnan(_2267) ? _2269 : (isnan(_2269) ? _2267 : min(_2269, _2267));
        float _2274 = (_2270 * _1766) + _1755;
        float _2275 = (_2270 * _1769) + _1759;
        float _2276 = (_2270 * _1772) + _1763;
        float _2277 = _2270 * 9.9999997473787516355514526367188e-05;
        float _2279 = (-1.0) - _2277;
        float _2281 = _2277 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2276 > _2281) || ((_2276 < _2279) || ((_2275 > _2281) || ((_2275 < _2279) || ((_2274 < _2279) || (_2274 > _2281))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2421 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2276, cbModelParam._m0[9u].z, fma(_2275, cbModelParam._m0[9u].y, _2274 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2276, cbModelParam._m0[10u].z, fma(_2275, cbModelParam._m0[10u].y, _2274 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2276, cbModelParam._m0[11u].z, fma(_2275, cbModelParam._m0[11u].y, _2274 * cbModelParam._m0[11u].x))), _1707);
            frontier_phi_16_38_ladder = _2421.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2421.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2421.x * cbModelParam._m0[1u].y;
        }
        _1788 = frontier_phi_16_38_ladder_2;
        _1790 = frontier_phi_16_38_ladder_1;
        _1792 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1776 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_865, _866, _867), _1707);
        _1788 = _1776.x * cbModelParam._m0[1u].y;
        _1790 = _1776.y * cbModelParam._m0[1u].y;
        _1792 = _1776.z * cbModelParam._m0[1u].y;
    }
    float _1796 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _682);
    float _1797 = isnan(_1796) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1796 : min(cbModelParam._m0[25u].w, _1796));
    float _1887;
    float _1889;
    float _1891;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1851 = fma(_929, cbModelParam._m0[21u].z, fma(_925, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _921)) + cbModelParam._m0[21u].w;
        float _1855 = fma(_929, cbModelParam._m0[22u].z, fma(_925, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _921)) + cbModelParam._m0[22u].w;
        float _1859 = fma(_929, cbModelParam._m0[23u].z, fma(_925, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _921)) + cbModelParam._m0[23u].w;
        float _1862 = fma(_867, cbModelParam._m0[21u].z, fma(_866, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _865));
        float _1865 = fma(_867, cbModelParam._m0[22u].z, fma(_866, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _865));
        float _1868 = fma(_867, cbModelParam._m0[23u].z, fma(_866, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _865));
        float _1977;
        if (_1862 > 0.0)
        {
            _1977 = abs((1.0 - _1851) / _1862);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1862 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1851 + 1.0) / _1862);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1977 = frontier_phi_28_24_ladder;
        }
        float _2294;
        if (_1865 > 0.0)
        {
            _2294 = abs((1.0 - _1855) / _1865);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1865 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1855 + 1.0) / _1865);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2294 = frontier_phi_40_35_ladder;
        }
        float _2632;
        if (_1868 > 0.0)
        {
            _2632 = abs((1.0 - _1859) / _1868);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1868 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1859 + 1.0) / _1868);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2632 = frontier_phi_50_47_ladder;
        }
        float _2634 = isnan(_2294) ? _1977 : (isnan(_1977) ? _2294 : min(_1977, _2294));
        float _2635 = isnan(_2632) ? _2634 : (isnan(_2634) ? _2632 : min(_2634, _2632));
        float _2639 = (_2635 * _1862) + _1851;
        float _2640 = (_2635 * _1865) + _1855;
        float _2641 = (_2635 * _1868) + _1859;
        float _2642 = _2635 * 9.9999997473787516355514526367188e-05;
        float _2643 = (-1.0) - _2642;
        float _2645 = _2642 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2641 > _2645) || ((_2641 < _2643) || ((_2640 > _2645) || ((_2640 < _2643) || ((_2639 < _2643) || (_2639 > _2645))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2763 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2641, cbModelParam._m0[17u].z, fma(_2640, cbModelParam._m0[17u].y, _2639 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2641, cbModelParam._m0[18u].z, fma(_2640, cbModelParam._m0[18u].y, _2639 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2641, cbModelParam._m0[19u].z, fma(_2640, cbModelParam._m0[19u].y, _2639 * cbModelParam._m0[19u].x))), _1797);
            frontier_phi_25_50_ladder = _2763.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2763.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2763.x * cbModelParam._m0[1u].z;
        }
        _1887 = frontier_phi_25_50_ladder_2;
        _1889 = frontier_phi_25_50_ladder_1;
        _1891 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1871 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_865, _866, _867), _1797);
        _1887 = _1871.x * cbModelParam._m0[1u].z;
        _1889 = _1871.y * cbModelParam._m0[1u].z;
        _1891 = _1871.z * cbModelParam._m0[1u].z;
    }
    float _1904 = (((_892 * _841) + _893) * _857) * ((cbModelParam._m0[1u].w * (_1887 - _1788)) + _1788);
    float _1906 = (((_892 * _843) + _893) * _857) * ((cbModelParam._m0[1u].w * (_1889 - _1790)) + _1790);
    float _1908 = (((_892 * _844) + _893) * _857) * ((cbModelParam._m0[1u].w * (_1891 - _1792)) + _1792);
    float _1911 = fma(_1908, cbSceneParam._m0[89u].z, fma(_1906, cbSceneParam._m0[89u].y, _1904 * cbSceneParam._m0[89u].x));
    float _1914 = fma(_1908, cbSceneParam._m0[90u].z, fma(_1906, cbSceneParam._m0[90u].y, _1904 * cbSceneParam._m0[90u].x));
    float _1917 = fma(_1908, cbSceneParam._m0[91u].z, fma(_1906, cbSceneParam._m0[91u].y, _1904 * cbSceneParam._m0[91u].x));
    float _1951 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1955 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1959 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1963 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1964 = _1951 / _1963;
    float _1965 = _1955 / _1963;
    float _1966 = _1959 / _1963;
    float _2113;
    float _2114;
    float _2115;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1993 = ((uint(_1966 > cbSceneParam._m0[59u].y) + uint(_1966 > cbSceneParam._m0[59u].x)) + uint(_1966 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1994 = _1993 + 43u;
        uint _2002 = _1993 + 44u;
        uint _2010 = _1993 + 45u;
        uint _2018 = _1993 + 46u;
        float _2029 = fma(_1963, cbSceneParam._m0[_1994].w, fma(_1959, cbSceneParam._m0[_1994].z, fma(_1955, cbSceneParam._m0[_1994].y, _1951 * cbSceneParam._m0[_1994].x)));
        float _2033 = fma(_1963, cbSceneParam._m0[_2002].w, fma(_1959, cbSceneParam._m0[_2002].z, fma(_1955, cbSceneParam._m0[_2002].y, _1951 * cbSceneParam._m0[_2002].x)));
        float _2041 = fma(_1963, cbSceneParam._m0[_2018].w, fma(_1959, cbSceneParam._m0[_2018].z, fma(_1955, cbSceneParam._m0[_2018].y, _1951 * cbSceneParam._m0[_2018].x)));
        float _2046 = cbSceneParam._m0[33u].z * _2041;
        float _2048 = cbSceneParam._m0[33u].w * _2041;
        float _2051 = fma(_1963, cbSceneParam._m0[_2010].w, fma(_1959, cbSceneParam._m0[_2010].z, fma(_1955, cbSceneParam._m0[_2010].y, _1951 * cbSceneParam._m0[_2010].x))) / _2041;
        float _2099 = (cbSceneParam._m0[33u].x - sqrt(((_1965 * _1965) + (_1964 * _1964)) + (_1966 * _1966))) * cbSceneParam._m0[33u].y;
        float _4469 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
        float _2106 = (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2046 + _2029) / _2041, (_2048 + _2033) / _2041), _2051), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2048 + _2029) / _2041, (_2033 - _2046) / _2041), _2051), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2029 - _2046) / _2041, (_2033 - _2048) / _2041), _2051), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2029 - _2048) / _2041, (_2046 + _2033) / _2041), _2051), 0.0)).x), vec4(0.25)));
        _2113 = 1.0 - (_2106 * cbSceneParam._m0[34u].x);
        _2114 = 1.0 - (_2106 * cbSceneParam._m0[34u].y);
        _2115 = 1.0 - (_2106 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2113 = 1.0;
        _2114 = 1.0;
        _2115 = 1.0;
    }
    float _2179;
    float _2181;
    float _2183;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2167 = fma(_1963, cbSceneParam._m0[63u].w, fma(_1959, cbSceneParam._m0[63u].z, fma(_1955, cbSceneParam._m0[63u].y, _1951 * cbSceneParam._m0[63u].x)));
        float _2168 = fma(_1963, cbSceneParam._m0[60u].w, fma(_1959, cbSceneParam._m0[60u].z, fma(_1955, cbSceneParam._m0[60u].y, _1951 * cbSceneParam._m0[60u].x))) / _2167;
        float _2169 = fma(_1963, cbSceneParam._m0[61u].w, fma(_1959, cbSceneParam._m0[61u].z, fma(_1955, cbSceneParam._m0[61u].y, _1951 * cbSceneParam._m0[61u].x))) / _2167;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2168 >= cbSceneParam._m0[64u].x) && (_2169 >= cbSceneParam._m0[64u].y)) && (_2168 <= cbSceneParam._m0[64u].z)) && (_2169 <= cbSceneParam._m0[64u].w))
        {
            float _2307 = fma(_1963, cbSceneParam._m0[62u].w, fma(_1959, cbSceneParam._m0[62u].z, fma(_1955, cbSceneParam._m0[62u].y, _1951 * cbSceneParam._m0[62u].x))) / _2167;
            float _2311 = isnan(cbSceneParam._m0[41u].w) ? _2307 : (isnan(_2307) ? cbSceneParam._m0[41u].w : max(_2307, cbSceneParam._m0[41u].w));
            float _2354 = (cbSceneParam._m0[33u].x - sqrt(((_1965 * _1965) + (_1964 * _1964)) + (_1966 * _1966))) * cbSceneParam._m0[33u].y;
            float _4485 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
            float _2361 = (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2168, cbSceneParam._m0[33u].w + _2169), _2311), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2168, _2169 - cbSceneParam._m0[33u].z), _2311), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2168 - cbSceneParam._m0[33u].z, _2169 - cbSceneParam._m0[33u].w), _2311), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2168 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2169), _2311), 0.0)).x), vec4(0.25)));
            float _2365 = 1.0 - (_2361 * cbSceneParam._m0[34u].x);
            float _2366 = 1.0 - (_2361 * cbSceneParam._m0[34u].y);
            float _2367 = 1.0 - (_2361 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2367) ? _2115 : (isnan(_2115) ? _2367 : min(_2115, _2367));
            frontier_phi_37_36_ladder_1 = isnan(_2366) ? _2114 : (isnan(_2114) ? _2366 : min(_2114, _2366));
            frontier_phi_37_36_ladder_2 = isnan(_2365) ? _2113 : (isnan(_2113) ? _2365 : min(_2113, _2365));
        }
        else
        {
            frontier_phi_37_36_ladder = _2115;
            frontier_phi_37_36_ladder_1 = _2114;
            frontier_phi_37_36_ladder_2 = _2113;
        }
        _2179 = frontier_phi_37_36_ladder_2;
        _2181 = frontier_phi_37_36_ladder_1;
        _2183 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2179 = _2113;
        _2181 = _2114;
        _2183 = _2115;
    }
    uvec4 _2188 = floatBitsToUint(cbInstanceData._m0[_248 + 5u]);
    uint _2190 = _2188.x * 14u;
    uint _2191 = _2190 + 13u;
    float _2198 = _857 + (-1.0);
    float _2203 = (cbLight._m0[_2191].x * _2198) + 1.0;
    float _2204 = (cbLight._m0[_2191].y * _2198) + 1.0;
    float _2205 = (cbLight._m0[_2191].z * _2198) + 1.0;
    float _2206 = (cbLight._m0[_2191].w * _2198) + 1.0;
    uint _2207 = _2190 + 5u;
    float _2213 = isnan(1.0) ? _2204 : (isnan(_2204) ? 1.0 : min(_2204, 1.0));
    uint _2217 = _2190 + 4u;
    float _2226 = isnan(1.0) ? _2203 : (isnan(_2203) ? 1.0 : min(_2203, 1.0));
    uint _2230 = _2190 | 1u;
    float _2241 = dot(vec3(cbLight._m0[_2190].xyz), vec3(_679, _680, _681));
    float _2244 = dot(vec3(cbLight._m0[_2230].xyz), vec3(_679, _680, _681));
    float _4521 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _4532 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2249 = (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * 0.3183098733425140380859375;
    float _2251 = (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * 0.3183098733425140380859375;
    float _2258 = ((cbLight._m0[_2207].x * _2213) * _2251) + (((cbLight._m0[_2217].x * _2179) * _2226) * _2249);
    float _2259 = ((_2213 * cbLight._m0[_2207].y) * _2251) + (((cbLight._m0[_2217].y * _2181) * _2226) * _2249);
    float _2260 = ((_2213 * cbLight._m0[_2207].z) * _2251) + (((cbLight._m0[_2217].z * _2183) * _2226) * _2249);
    uvec4 _2264 = floatBitsToUint(cbLight._m0[_2190 + 12u]);
    bool _2266 = _2264.x == 0u;
    float _2368;
    float _2370;
    float _2372;
    if (_2266)
    {
        _2368 = _2258;
        _2370 = _2259;
        _2372 = _2260;
    }
    else
    {
        uint _2376 = _2190 + 6u;
        float _2392 = (dot(vec3(cbLight._m0[_2190 + 2u].xyz), vec3(_679, _680, _681)) * 0.5) + 0.5;
        float _2393 = _2392 * _2392;
        float _4543 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
        float _2394 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
        float _2395 = isnan(1.0) ? _2205 : (isnan(_2205) ? 1.0 : min(_2205, 1.0));
        _2368 = (((cbLight._m0[_2376].x * 0.3183098733425140380859375) * _2394) * _2395) + _2258;
        _2370 = (((cbLight._m0[_2376].y * 0.3183098733425140380859375) * _2394) * _2395) + _2259;
        _2372 = (((cbLight._m0[_2376].z * 0.3183098733425140380859375) * _2394) * _2395) + _2260;
    }
    bool _2375 = _2264.y == 0u;
    float _2430;
    float _2432;
    float _2434;
    if (_2375)
    {
        _2430 = _2368;
        _2432 = _2370;
        _2434 = _2372;
    }
    else
    {
        uint _2603 = _2190 + 7u;
        float _2619 = (dot(vec3(cbLight._m0[_2190 + 3u].xyz), vec3(_679, _680, _681)) * 0.5) + 0.5;
        float _2620 = _2619 * _2619;
        float _4559 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
        float _2621 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
        float _2622 = isnan(1.0) ? _2206 : (isnan(_2206) ? 1.0 : min(_2206, 1.0));
        _2430 = (((cbLight._m0[_2603].x * 0.3183098733425140380859375) * _2621) * _2622) + _2368;
        _2432 = (((cbLight._m0[_2603].y * 0.3183098733425140380859375) * _2621) * _2622) + _2370;
        _2434 = (((cbLight._m0[_2603].z * 0.3183098733425140380859375) * _2621) * _2622) + _2372;
    }
    uint _2437 = _2190 + 8u;
    float _2450 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2190].w)) * _682) * 0.949999988079071044921875);
    float _2451 = _2450 * _2450;
    float _2452 = cbLight._m0[_2190].x + _759;
    float _2453 = cbLight._m0[_2190].y + _760;
    float _2454 = cbLight._m0[_2190].z + _761;
    float _2458 = inversesqrt(dot(vec3(_2452, _2453, _2454), vec3(_2452, _2453, _2454)));
    float _2459 = _2458 * _2452;
    float _2460 = _2458 * _2453;
    float _2461 = _2458 * _2454;
    float _2462 = dot(vec3(_679, _680, _681), vec3(cbLight._m0[_2190].xyz));
    float _4575 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
    float _2465 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
    float _4586 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _2466 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
    float _2467 = dot(vec3(_679, _680, _681), vec3(_2459, _2460, _2461));
    float _4597 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
    float _2470 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
    float _2471 = dot(vec3(cbLight._m0[_2190].xyz), vec3(_2459, _2460, _2461));
    float _4608 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
    float _2475 = _2451 * _2451;
    float _2479 = ((_2470 * _2470) * (_2475 + (-1.0))) + 1.0;
    float _2487 = exp2(log2(1.0 - (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0)))) * 5.0);
    float _2488 = 0.959999978542327880859375 - _838;
    float _2490 = 0.959999978542327880859375 - _839;
    float _2491 = 0.959999978542327880859375 - _840;
    float _2498 = 1.0 - _2451;
    float _2509 = (0.5 / (((_2466 * ((_2465 * _2498) + _2451)) + 9.9999999392252902907785028219223e-09) + (((_2466 * _2498) + _2451) * _2465))) * _2465;
    float _4619 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
    float _2511 = (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (_2475 / ((_2479 * _2479) * 3.141590118408203125));
    uint _2525 = _2190 + 9u;
    float _2536 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2230].w)) * _682) * 0.949999988079071044921875);
    float _2537 = _2536 * _2536;
    float _2538 = cbLight._m0[_2230].x + _759;
    float _2539 = cbLight._m0[_2230].y + _760;
    float _2540 = cbLight._m0[_2230].z + _761;
    float _2544 = inversesqrt(dot(vec3(_2538, _2539, _2540), vec3(_2538, _2539, _2540)));
    float _2545 = _2544 * _2538;
    float _2546 = _2544 * _2539;
    float _2547 = _2544 * _2540;
    float _2548 = dot(vec3(_679, _680, _681), vec3(cbLight._m0[_2230].xyz));
    float _4630 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
    float _2551 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
    float _2552 = dot(vec3(_679, _680, _681), vec3(_2545, _2546, _2547));
    float _4641 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
    float _2555 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
    float _2556 = dot(vec3(cbLight._m0[_2230].xyz), vec3(_2545, _2546, _2547));
    float _4652 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
    float _2560 = _2537 * _2537;
    float _2564 = ((_2555 * _2555) * (_2560 + (-1.0))) + 1.0;
    float _2571 = exp2(log2(1.0 - (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0)))) * 5.0);
    float _2578 = 1.0 - _2537;
    float _2588 = (0.5 / (((_2466 * ((_2551 * _2578) + _2537)) + 9.9999999392252902907785028219223e-09) + (((_2466 * _2578) + _2537) * _2551))) * _2551;
    float _4663 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
    float _2590 = (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * (_2560 / ((_2564 * _2564) * 3.141590118408203125));
    float _2600 = (((((_2571 * _2488) + _841) * cbLight._m0[_2525].x) * _2590) * _2213) + ((((cbLight._m0[_2437].x * _2179) * ((_2487 * _2488) + _841)) * _2511) * _2226);
    float _2601 = (((((_2571 * _2490) + _843) * cbLight._m0[_2525].y) * _2590) * _2213) + ((((cbLight._m0[_2437].y * _2181) * ((_2487 * _2490) + _843)) * _2511) * _2226);
    float _2602 = (((((_2571 * _2491) + _844) * cbLight._m0[_2525].z) * _2590) * _2213) + ((((cbLight._m0[_2437].z * _2183) * ((_2487 * _2491) + _844)) * _2511) * _2226);
    float _2658;
    float _2660;
    float _2662;
    if (_2266)
    {
        _2658 = _2600;
        _2660 = _2601;
        _2662 = _2602;
    }
    else
    {
        uint _2664 = _2190 + 2u;
        uint _2668 = _2190 + 10u;
        float _2682 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2664].w)) * _682) * 0.949999988079071044921875);
        float _2683 = _2682 * _2682;
        float _2684 = cbLight._m0[_2664].x + _759;
        float _2685 = cbLight._m0[_2664].y + _760;
        float _2686 = cbLight._m0[_2664].z + _761;
        float _2690 = inversesqrt(dot(vec3(_2684, _2685, _2686), vec3(_2684, _2685, _2686)));
        float _2691 = _2690 * _2684;
        float _2692 = _2690 * _2685;
        float _2693 = _2690 * _2686;
        float _2694 = dot(vec3(_679, _680, _681), vec3(cbLight._m0[_2664].xyz));
        float _4674 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
        float _2697 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
        float _2698 = dot(vec3(_679, _680, _681), vec3(_2691, _2692, _2693));
        float _4685 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
        float _2701 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
        float _2702 = dot(vec3(cbLight._m0[_2664].xyz), vec3(_2691, _2692, _2693));
        float _4696 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
        float _2706 = _2683 * _2683;
        float _2710 = ((_2701 * _2701) * (_2706 + (-1.0))) + 1.0;
        float _2717 = exp2(log2(1.0 - (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0)))) * 5.0);
        float _2724 = 1.0 - _2683;
        float _2734 = (0.5 / (((_2466 * ((_2697 * _2724) + _2683)) + 9.9999999392252902907785028219223e-09) + (((_2466 * _2724) + _2683) * _2697))) * _2697;
        float _4707 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
        float _2736 = (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0))) * (_2706 / ((_2710 * _2710) * 3.141590118408203125));
        float _2737 = isnan(1.0) ? _2205 : (isnan(_2205) ? 1.0 : min(_2205, 1.0));
        _2658 = (((((_2717 * _2488) + _841) * cbLight._m0[_2668].x) * _2736) * _2737) + _2600;
        _2660 = (((((_2717 * _2490) + _843) * cbLight._m0[_2668].y) * _2736) * _2737) + _2601;
        _2662 = (((((_2717 * _2491) + _844) * cbLight._m0[_2668].z) * _2736) * _2737) + _2602;
    }
    float _2768;
    float _2770;
    float _2772;
    if (_2375)
    {
        _2768 = _2658;
        _2770 = _2660;
        _2772 = _2662;
    }
    else
    {
        uint _2779 = _2190 + 3u;
        uint _2783 = _2190 + 11u;
        float _2797 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2779].w)) * _682) * 0.949999988079071044921875);
        float _2798 = _2797 * _2797;
        float _2799 = cbLight._m0[_2779].x + _759;
        float _2800 = cbLight._m0[_2779].y + _760;
        float _2801 = cbLight._m0[_2779].z + _761;
        float _2805 = inversesqrt(dot(vec3(_2799, _2800, _2801), vec3(_2799, _2800, _2801)));
        float _2806 = _2805 * _2799;
        float _2807 = _2805 * _2800;
        float _2808 = _2805 * _2801;
        float _2809 = dot(vec3(_679, _680, _681), vec3(cbLight._m0[_2779].xyz));
        float _4723 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
        float _2812 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
        float _2813 = dot(vec3(_679, _680, _681), vec3(_2806, _2807, _2808));
        float _4734 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
        float _2816 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
        float _2817 = dot(vec3(cbLight._m0[_2779].xyz), vec3(_2806, _2807, _2808));
        float _4745 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
        float _2821 = _2798 * _2798;
        float _2825 = ((_2816 * _2816) * (_2821 + (-1.0))) + 1.0;
        float _2832 = exp2(log2(1.0 - (isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0)))) * 5.0);
        float _2839 = 1.0 - _2798;
        float _2849 = (0.5 / (((_2466 * ((_2812 * _2839) + _2798)) + 9.9999999392252902907785028219223e-09) + (((_2466 * _2839) + _2798) * _2812))) * _2812;
        float _4756 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
        float _2851 = (isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0))) * (_2821 / ((_2825 * _2825) * 3.141590118408203125));
        float _2852 = isnan(1.0) ? _2206 : (isnan(_2206) ? 1.0 : min(_2206, 1.0));
        _2768 = (((((_2832 * _2488) + _841) * cbLight._m0[_2783].x) * _2851) * _2852) + _2658;
        _2770 = (((((_2832 * _2490) + _843) * cbLight._m0[_2783].y) * _2851) * _2852) + _2660;
        _2772 = (((((_2832 * _2491) + _844) * cbLight._m0[_2783].z) * _2851) * _2852) + _2662;
    }
    float _2918;
    float _2920;
    float _2922;
    float _2924;
    float _2926;
    float _2928;
    if (_2188.y == 0u)
    {
        uvec4 _2873 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2874 = _2873.x;
        uint _2885 = uint((float(_2873.y) * floor(float(uint(cbSceneParam._m0[85u].y * _780) / _2874))) + floor(float(uint(cbSceneParam._m0[85u].x * _779) / _2874)));
        float _2895 = (log2(_1966 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2896 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
        uint _2899 = uint(isnan(14.0) ? _2896 : (isnan(_2896) ? 14.0 : min(_2896, 14.0)));
        uvec4 _2904 = texelFetch(g_lightClusterGridBuffer, int(((_2899 << 2u) + (_2885 << 6u)) >> 2u));
        uint _2905 = _2904.x;
        uint _2906 = _2873.z;
        float _2985;
        float _2987;
        float _2989;
        float _2991;
        float _2993;
        float _2995;
        if (((((1u << ((_2906 >> 4u) & 15u)) + 4294967295u) & _2905) == 0u) || ((_2906 & 240u) == 0u))
        {
            _2985 = 0.0;
            _2987 = 0.0;
            _2989 = 0.0;
            _2991 = 0.0;
            _2993 = 0.0;
            _2995 = 0.0;
        }
        else
        {
            float _2986;
            float _2988;
            float _2990;
            float _2992;
            float _2994;
            float _2996;
            float _3138 = 0.0;
            float _3139 = 0.0;
            float _3140 = 0.0;
            float _3141 = 0.0;
            float _3142 = 0.0;
            float _3143 = 0.0;
            uint _3144 = 0u;
            uint _3153;
            bool _3154;
            for (;;)
            {
                _3153 = texelFetch(g_lightClassification, int((((_2899 << 5u) + (_2885 << 9u)) + (_3144 << 2u)) >> 2u)).x;
                _3154 = _3153 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3154)
                {
                    frontier_phi_71_pred = _3143;
                    frontier_phi_71_pred_1 = _3142;
                    frontier_phi_71_pred_2 = _3141;
                    frontier_phi_71_pred_3 = _3140;
                    frontier_phi_71_pred_4 = _3139;
                    frontier_phi_71_pred_5 = _3138;
                }
                else
                {
                    float _3283;
                    float _3284;
                    float _3285;
                    float _3286;
                    float _3287;
                    float _3288;
                    uint _3289;
                    _3283 = _3138;
                    _3284 = _3139;
                    _3285 = _3140;
                    _3286 = _3141;
                    _3287 = _3142;
                    _3288 = _3143;
                    _3289 = _3153;
                    float _3210;
                    float _3211;
                    float _3212;
                    float _3213;
                    float _3214;
                    float _3215;
                    for (;;)
                    {
                        uint _3293 = uint(findLSB(_3289)) + (_3144 << 5u);
                        uint _3290 = (_3289 + 4294967295u) & _3289;
                        uint _3295 = _3293 * 48u;
                        vec4 _3309 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3295)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 3u)).x));
                        uint _3315 = (_3293 * 48u) + 4u;
                        vec4 _3328 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3315)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 3u)).x));
                        uint _3334 = (_3293 * 48u) + 8u;
                        vec3 _3345 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3334)).x, texelFetch(g_PointLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3334 + 2u)).x));
                        float _3349 = _3309.x - _1964;
                        float _3350 = _3309.y - _1965;
                        float _3351 = _3309.z - _1966;
                        float _3352 = dot(vec3(_3349, _3350, _3351), vec3(_3349, _3350, _3351));
                        float _3355 = inversesqrt(_3352);
                        float _3356 = _3355 * _3349;
                        float _3357 = _3355 * _3350;
                        float _3358 = _3355 * _3351;
                        float _3359 = dot(vec3(_798, _801, _804), vec3(_3356, _3357, _3358));
                        float _3364 = 1.0 - (_3352 * _3309.w);
                        float _4782 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                        float _3365 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
                        float _3366 = sqrt(_3352) * _3328.w;
                        float _3369 = 1.39999997615814208984375 / (_3366 + 1.39999997615814208984375);
                        float _3370 = _3369 * _3369;
                        float _3373 = ((1.0 - _3370) * _3359) + _3370;
                        float _3376 = _3366 * _3366;
                        float _3380 = ((isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0))) * _3365) / ((_3376 * 0.699999988079071044921875) + 1.0);
                        float _3384 = (-0.0) - _1964;
                        float _3385 = (-0.0) - _1965;
                        float _3386 = (-0.0) - _1966;
                        float _3390 = inversesqrt(dot(vec3(_3384, _3385, _3386), vec3(_3384, _3385, _3386)));
                        float _3391 = _3390 * _3384;
                        float _3392 = _3390 * _3385;
                        float _3393 = _3390 * _3386;
                        float _3400 = exp2(log2(1.0 / ((_3376 * 3.5) + 5.0)) * 0.25);
                        float _3401 = 1.0 - _873;
                        float _3408 = sqrt(1.0 - ((1.0 - (_3401 * _3401)) * (1.0 - (_3400 * _3400))));
                        float _3409 = _3408 * _3408;
                        float _3410 = _3409 * _3409;
                        float _3411 = _3391 + _3356;
                        float _3412 = _3392 + _3357;
                        float _3413 = _3393 + _3358;
                        float _3417 = inversesqrt(dot(vec3(_3411, _3412, _3413), vec3(_3411, _3412, _3413)));
                        float _3421 = dot(vec3(_798, _801, _804), vec3(_3391, _3392, _3393));
                        float _4798 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                        float _3424 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                        float _3425 = dot(vec3(_798, _801, _804), vec3(_3417 * _3411, _3417 * _3412, _3417 * _3413));
                        float _4809 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                        float _3428 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
                        float _3432 = ((_3428 * _3428) * (_3410 + (-1.0))) + 1.0;
                        float _3433 = _3369 * _3409;
                        float _3434 = _3433 * _3433;
                        float _3437 = ((1.0 - _3434) * _3359) + _3434;
                        float _4820 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                        float _3438 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
                        float _3439 = 1.0 - _3409;
                        float _3449 = (0.5 / (((_3438 * ((_3424 * _3439) + _3409)) + 9.9999999392252902907785028219223e-09) + (((_3438 * _3439) + _3409) * _3424))) * _3438;
                        float _4831 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                        float _3460 = (((_3410 * 3.1415927410125732421875) * (isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0)))) / ((_3432 * _3432) * ((_3376 * 2.1991131305694580078125) + 3.141590118408203125))) * _3365;
                        _3213 = (_3380 * _3328.x) + _3286;
                        _3214 = (_3380 * _3328.y) + _3287;
                        _3215 = (_3380 * _3328.z) + _3288;
                        _3210 = (_3460 * _3345.x) + _3283;
                        _3211 = (_3460 * _3345.y) + _3284;
                        _3212 = (_3460 * _3345.z) + _3285;
                        if (_3290 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3283 = _3210;
                            _3284 = _3211;
                            _3285 = _3212;
                            _3286 = _3213;
                            _3287 = _3214;
                            _3288 = _3215;
                            _3289 = _3290;
                        }
                    }
                    frontier_phi_71_pred = _3215;
                    frontier_phi_71_pred_1 = _3214;
                    frontier_phi_71_pred_2 = _3213;
                    frontier_phi_71_pred_3 = _3212;
                    frontier_phi_71_pred_4 = _3211;
                    frontier_phi_71_pred_5 = _3210;
                }
                _2996 = frontier_phi_71_pred;
                _2994 = frontier_phi_71_pred_1;
                _2992 = frontier_phi_71_pred_2;
                _2990 = frontier_phi_71_pred_3;
                _2988 = frontier_phi_71_pred_4;
                _2986 = frontier_phi_71_pred_5;
                uint _3145 = _3144 + 1u;
                if (_3145 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3138 = _2986;
                    _3139 = _2988;
                    _3140 = _2990;
                    _3141 = _2992;
                    _3142 = _2994;
                    _3143 = _2996;
                    _3144 = _3145;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2985 = _2986;
            _2987 = _2988;
            _2989 = _2990;
            _2991 = _2992;
            _2993 = _2994;
            _2995 = _2996;
        }
        uvec4 _2999 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3000 = _2999.z;
        uint _3002 = (_3000 >> 8u) & 15u;
        float _3106;
        float _3108;
        float _3110;
        float _3112;
        float _3114;
        float _3116;
        if (((4294967295u << _3002) & _2905) == 0u)
        {
            _3106 = _2985;
            _3108 = _2987;
            _3110 = _2989;
            _3112 = _2991;
            _3114 = _2993;
            _3116 = _2995;
        }
        else
        {
            float _3131 = inversesqrt(dot(vec3(_1964, _1965, _1966), vec3(_1964, _1965, _1966)));
            float _3132 = _3131 * _1964;
            float _3133 = _3131 * _1965;
            float _3134 = _3131 * _1966;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3002 < ((_3000 >> 12u) & 15u))
            {
                float _3107;
                float _3109;
                float _3111;
                float _3113;
                float _3115;
                float _3117;
                float _3266 = _2985;
                float _3267 = _2987;
                float _3268 = _2989;
                float _3269 = _2991;
                float _3270 = _2993;
                float _3271 = _2995;
                uint _3272 = _3002;
                uint _3281;
                bool _3282;
                for (;;)
                {
                    _3281 = texelFetch(g_lightClassification, int((((_2899 << 5u) + (_2885 << 9u)) + (_3272 << 2u)) >> 2u)).x;
                    _3282 = _3281 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3282)
                    {
                        frontier_phi_82_pred = _3271;
                        frontier_phi_82_pred_1 = _3270;
                        frontier_phi_82_pred_2 = _3269;
                        frontier_phi_82_pred_3 = _3268;
                        frontier_phi_82_pred_4 = _3267;
                        frontier_phi_82_pred_5 = _3266;
                    }
                    else
                    {
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3479;
                        float _3767;
                        float _3768;
                        float _3769;
                        float _3770;
                        float _3771;
                        float _3772;
                        float _3487 = _3266;
                        float _3488 = _3267;
                        float _3489 = _3268;
                        float _3490 = _3269;
                        float _3491 = _3270;
                        float _3492 = _3271;
                        uint _3493 = _3281;
                        uint _3494;
                        vec4 _3519;
                        float _3520;
                        vec4 _3535;
                        vec3 _3547;
                        vec4 _3562;
                        vec4 _3577;
                        float _3623;
                        bool _3624;
                        for (;;)
                        {
                            uint _3504 = ((_3272 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3493));
                            _3494 = (_3493 + 4294967295u) & _3493;
                            uint _3506 = _3504 * 40u;
                            _3519 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3506)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 3u)).x));
                            _3520 = _3519.w;
                            uint _3522 = (_3504 * 40u) + 4u;
                            _3535 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 3u)).x));
                            uint _3537 = (_3504 * 40u) + 8u;
                            _3547 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 2u)).x));
                            uint _3549 = (_3504 * 40u) + 16u;
                            _3562 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 3u)).x));
                            uint _3564 = (_3504 * 40u) + 20u;
                            _3577 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3564)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 3u)).x));
                            uint _3579 = (_3504 * 40u) + 24u;
                            vec4 _3592 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3579)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 3u)).x));
                            uint _3598 = (_3504 * 40u) + 28u;
                            vec4 _3611 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3598)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 3u)).x));
                            _3623 = fma(_1966, _3611.z, fma(_1965, _3611.y, _3611.x * _1964)) + _3611.w;
                            _3624 = !((fma(_1966, _3592.z, fma(_1965, _3592.y, _3592.x * _1964)) + _3592.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3624)
                            {
                                float _3651 = _3519.x - _1964;
                                float _3652 = _3519.y - _1965;
                                float _3653 = _3519.z - _1966;
                                float _3654 = dot(vec3(_3651, _3652, _3653), vec3(_3651, _3652, _3653));
                                float _3657 = inversesqrt(_3654);
                                float _3658 = _3657 * _3651;
                                float _3659 = _3657 * _3652;
                                float _3660 = _3657 * _3653;
                                float _3664 = 1.0 - (_3654 / (_3520 * _3520));
                                float _4842 = isnan(0.0) ? _3664 : (isnan(_3664) ? 0.0 : max(_3664, 0.0));
                                float _3665 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
                                float _3669 = sqrt(_3654) * _3535.w;
                                float _3671 = 1.39999997615814208984375 / (_3669 + 1.39999997615814208984375);
                                float _3672 = _3671 * _3671;
                                float _3675 = ((1.0 - _3672) * dot(vec3(_3658, _3659, _3660), vec3(_798, _801, _804))) + _3672;
                                float _3678 = _3669 * _3669;
                                float _3682 = (fma(_1966, _3562.z, fma(_1965, _3562.y, _3562.x * _1964)) + _3562.w) / _3623;
                                float _3683 = (fma(_1966, _3577.z, fma(_1965, _3577.y, _3577.x * _1964)) + _3577.w) / _3623;
                                float _3687 = 1.0 - dot(vec2(_3682, _3683), vec2(_3682, _3683));
                                float _4858 = isnan(0.0) ? _3687 : (isnan(_3687) ? 0.0 : max(_3687, 0.0));
                                float _3688 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
                                float _3689 = _3688 * (((isnan(0.0) ? _3675 : (isnan(_3675) ? 0.0 : max(_3675, 0.0))) * _3665) / ((_3678 * 0.699999988079071044921875) + 1.0));
                                float _3701 = exp2(log2(1.0 / ((_3678 * 3.5) + 5.0)) * 0.25);
                                float _3702 = 1.0 - _873;
                                float _3709 = sqrt(1.0 - ((1.0 - (_3702 * _3702)) * (1.0 - (_3701 * _3701))));
                                float _3710 = _3709 * _3709;
                                float _3711 = _3710 * _3710;
                                float _3712 = _3658 - _3132;
                                float _3713 = _3659 - _3133;
                                float _3714 = _3660 - _3134;
                                float _3718 = inversesqrt(dot(vec3(_3712, _3713, _3714), vec3(_3712, _3713, _3714)));
                                float _3722 = dot(vec3(_798, _801, _804), vec3((-0.0) - _3132, (-0.0) - _3133, (-0.0) - _3134));
                                float _4869 = isnan(0.0) ? _3722 : (isnan(_3722) ? 0.0 : max(_3722, 0.0));
                                float _3725 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
                                float _3726 = dot(vec3(_798, _801, _804), vec3(_3718 * _3712, _3718 * _3713, _3718 * _3714));
                                float _4880 = isnan(0.0) ? _3726 : (isnan(_3726) ? 0.0 : max(_3726, 0.0));
                                float _3729 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
                                float _3733 = ((_3729 * _3729) * (_3711 + (-1.0))) + 1.0;
                                float _3734 = _3671 * _3710;
                                float _3735 = _3734 * _3734;
                                float _3741 = ((1.0 - _3735) * dot(vec3(_798, _801, _804), vec3(_3658, _3659, _3660))) + _3735;
                                float _4891 = isnan(0.0) ? _3741 : (isnan(_3741) ? 0.0 : max(_3741, 0.0));
                                float _3742 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
                                float _3743 = 1.0 - _3710;
                                float _3753 = (0.5 / (((_3742 * ((_3725 * _3743) + _3710)) + 9.9999999392252902907785028219223e-09) + (((_3742 * _3743) + _3710) * _3725))) * _3742;
                                float _4902 = isnan(0.0) ? _3753 : (isnan(_3753) ? 0.0 : max(_3753, 0.0));
                                float _3763 = (_3688 * _3665) * (((_3711 * 3.1415927410125732421875) * (isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0)))) / ((_3733 * _3733) * ((_3678 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3689 * _3535.z;
                                frontier_phi_88_pred_1 = _3689 * _3535.y;
                                frontier_phi_88_pred_2 = _3689 * _3535.x;
                                frontier_phi_88_pred_3 = _3763 * _3547.z;
                                frontier_phi_88_pred_4 = _3763 * _3547.y;
                                frontier_phi_88_pred_5 = _3763 * _3547.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3772 = frontier_phi_88_pred;
                            _3771 = frontier_phi_88_pred_1;
                            _3770 = frontier_phi_88_pred_2;
                            _3769 = frontier_phi_88_pred_3;
                            _3768 = frontier_phi_88_pred_4;
                            _3767 = frontier_phi_88_pred_5;
                            _3477 = _3770 + _3490;
                            _3478 = _3771 + _3491;
                            _3479 = _3772 + _3492;
                            _3474 = _3767 + _3487;
                            _3475 = _3768 + _3488;
                            _3476 = _3769 + _3489;
                            if (_3494 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3487 = _3474;
                                _3488 = _3475;
                                _3489 = _3476;
                                _3490 = _3477;
                                _3491 = _3478;
                                _3492 = _3479;
                                _3493 = _3494;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3479;
                        frontier_phi_82_pred_1 = _3478;
                        frontier_phi_82_pred_2 = _3477;
                        frontier_phi_82_pred_3 = _3476;
                        frontier_phi_82_pred_4 = _3475;
                        frontier_phi_82_pred_5 = _3474;
                    }
                    _3117 = frontier_phi_82_pred;
                    _3115 = frontier_phi_82_pred_1;
                    _3113 = frontier_phi_82_pred_2;
                    _3111 = frontier_phi_82_pred_3;
                    _3109 = frontier_phi_82_pred_4;
                    _3107 = frontier_phi_82_pred_5;
                    uint _3273 = _3272 + 1u;
                    if (_3273 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3266 = _3107;
                        _3267 = _3109;
                        _3268 = _3111;
                        _3269 = _3113;
                        _3270 = _3115;
                        _3271 = _3117;
                        _3272 = _3273;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3113;
                frontier_phi_63_64_ladder_1 = _3117;
                frontier_phi_63_64_ladder_2 = _3115;
                frontier_phi_63_64_ladder_3 = _3111;
                frontier_phi_63_64_ladder_4 = _3109;
                frontier_phi_63_64_ladder_5 = _3107;
            }
            else
            {
                frontier_phi_63_64_ladder = _2991;
                frontier_phi_63_64_ladder_1 = _2995;
                frontier_phi_63_64_ladder_2 = _2993;
                frontier_phi_63_64_ladder_3 = _2989;
                frontier_phi_63_64_ladder_4 = _2987;
                frontier_phi_63_64_ladder_5 = _2985;
            }
            _3106 = frontier_phi_63_64_ladder_5;
            _3108 = frontier_phi_63_64_ladder_4;
            _3110 = frontier_phi_63_64_ladder_3;
            _3112 = frontier_phi_63_64_ladder;
            _3114 = frontier_phi_63_64_ladder_2;
            _3116 = frontier_phi_63_64_ladder_1;
        }
        float _3121 = isnan(1.0) ? _857 : (isnan(_857) ? 1.0 : min(_857, 1.0));
        _2918 = (_3121 * _3112) + _2430;
        _2920 = (_3121 * _3114) + _2432;
        _2922 = (_3121 * _3116) + _2434;
        _2924 = ((_3106 * _841) * _3121) + _2768;
        _2926 = ((_3108 * _843) * _3121) + _2770;
        _2928 = ((_3110 * _844) * _3121) + _2772;
    }
    else
    {
        _2918 = _2430;
        _2920 = _2432;
        _2922 = _2434;
        _2924 = _2768;
        _2926 = _2770;
        _2928 = _2772;
    }
    float _4918 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _4929 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _4940 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _2945 = ((isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0))) * (_2918 + ((isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))) * _857))) + ((_2924 + ((isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0))) * _1696)) * cbPerFrame._m0[3u].x);
    float _2946 = ((isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0))) * (_2920 + ((isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))) * _857))) + ((_2926 + ((isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0))) * _1696)) * cbPerFrame._m0[3u].x);
    float _2947 = ((isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0))) * (_2922 + ((isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))) * _857))) + ((_2928 + ((isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0))) * _1696)) * cbPerFrame._m0[3u].x);
    uint _2948 = _248 + 6u;
    float _2956 = _779 / cbSceneParam._m0[86u].x;
    float _2957 = _780 / cbSceneParam._m0[86u].y;
    vec4 _2971 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2956, _2957, (log2((isnan(cbSceneParam._m0[77u].w) ? _701 : (isnan(_701) ? cbSceneParam._m0[77u].w : min(_701, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2973 = _2971.x;
    float _2974 = _2971.y;
    float _2975 = _2971.z;
    float _2976 = _2971.w;
    float _3048;
    float _3050;
    float _3052;
    float _3054;
    if (_701 > cbSceneParam._m0[78u].w)
    {
        float _3010 = isnan(_701) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _701 : min(cbSceneParam._m0[80u].w, _701));
        float _3011 = _3010 / _701;
        float _3022 = _3011 * _752;
        float _3023 = _753 * _3011;
        float _3024 = (-0.0) - _3023;
        float _3026 = _3011 * _754;
        float _3028 = (cbSceneParam._m0[77u].w * _3024) / _3010;
        float _3029 = _3028 + cbSceneParam._m0[79u].w;
        float _3030 = cbSceneParam._m0[79u].w - _3023;
        float _3036 = sqrt(((_3022 * _3022) + (_3023 * _3023)) + (_3026 * _3026));
        float _3039 = (1.0 - (cbSceneParam._m0[77u].w / _3010)) * _3036;
        float _3044 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3046 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3223;
        if (abs((_3024 - _3028) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3223 = ((((_3029 > 0.0) ? exp2(_3044 * _3029) : (2.0 - exp2(_3046 * _3029))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3039;
        }
        else
        {
            float _3167 = 1.0 / cbSceneParam._m0[80u].x;
            float _3168 = isnan(_3030) ? _3029 : (isnan(_3029) ? _3030 : max(_3029, _3030));
            float _3169 = isnan(_3030) ? _3029 : (isnan(_3029) ? _3030 : min(_3029, _3030));
            float _3178 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : min(_3168, 0.0));
            float _3179 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : min(_3169, 0.0));
            _3223 = ((abs(_3036 / _3024) * cbSceneParam._m0[80u].y) * ((((_3178 - _3179) * 2.0) - ((exp2(_3044 * (isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0)))) - exp2(_3044 * (isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0))))) * _3167)) - ((exp2(_3046 * _3178) - exp2(_3046 * _3179)) * _3167))) + (_3039 * cbSceneParam._m0[80u].z);
        }
        vec4 _3225 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2956, _2957, 1.0), 0.0);
        float _3234 = exp2((_3223 * (-1.44269502162933349609375)) * (1.0 - _3225.w));
        float _3235 = log2(_3234);
        float _3251 = log2(_2976);
        _3048 = (exp2(_3251 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3235 * cbSceneParam._m0[78u].x)) * _3225.x) / cbSceneParam._m0[78u].x)) + _2973;
        _3050 = (exp2(_3251 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3235 * cbSceneParam._m0[78u].y)) * _3225.y) / cbSceneParam._m0[78u].y)) + _2974;
        _3052 = (exp2(_3251 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3235 * cbSceneParam._m0[78u].z)) * _3225.z) / cbSceneParam._m0[78u].z)) + _2975;
        _3054 = _3234 * _2976;
    }
    else
    {
        _3048 = _2973;
        _3050 = _2974;
        _3052 = _2975;
        _3054 = _2976;
    }
    bool _3261;
    vec4 _3064;
    vec4 _3086;
    float _3088;
    float _3092;
    float _3093;
    float _3094;
    float _3095;
    bool _3105;
    for (;;)
    {
        _3064 = cbMatDynParam._m0[0u];
        float _3066 = roundEven(_3064.y);
        bool _3067 = _3066 == 3.0;
        float _3068 = log2(_3054);
        float _3075 = exp2(_3068 * cbSceneParam._m0[78u].x) * _2945;
        float _3076 = exp2(_3068 * cbSceneParam._m0[78u].y) * _2946;
        float _3077 = exp2(_3068 * cbSceneParam._m0[78u].z) * _2947;
        float _3084 = _768 + (-0.5);
        _3086 = cbMtdParam._m0[1u];
        _3088 = _3086.y * _3084;
        float _3091 = (_3066 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3092 = _3091 * (_3067 ? _3075 : (_3075 + (cbSceneParam._m0[72u].w * _3048)));
        _3093 = _3091 * (_3067 ? _3076 : (_3076 + (cbSceneParam._m0[72u].w * _3050)));
        _3094 = _3091 * (_3067 ? _3077 : (_3077 + (cbSceneParam._m0[72u].w * _3052)));
        _3095 = _3084 * 0.999000012874603271484375;
        _3105 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3105)
        {
            if ((cbInstanceData._m0[_248 + 7u].x + _3095) < 0.5)
            {
                _3261 = true;
                break;
            }
        }
        uint _3202 = _817 + uint(_3064.w);
        if ((cbInstanceData._m0[_3202].w < 1.0) && ((cbInstanceData._m0[_3202].w + _3095) < 0.5))
        {
            _3261 = true;
            break;
        }
        if ((_3088 + 1.0) < _3086.x)
        {
            _3261 = true;
            break;
        }
        _3261 = false;
        break;
    }
    float _3465;
    if (_3261)
    {
        discard_state = true;
        _3465 = 0.0;
    }
    else
    {
        _3465 = cbInstanceData._m0[_2948].w;
    }
    SV_Target.x = _3092;
    SV_Target.y = _3093;
    SV_Target.z = _3094;
    SV_Target.w = _3465;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2948].w;
    discard_exit();
}


