#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1376;
float _3781;
float _3782;
float _3783;
float _3784;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _261 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _261 + 1u;
    uint _270 = _261 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _307 = _301.x * cbMtdParam._m0[11u].x;
    float _308 = _301.y * cbMtdParam._m0[11u].y;
    float _309 = _301.z * cbMtdParam._m0[11u].z;
    vec4 _328 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _280) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    vec4 _366 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _368 = _366.x;
    float _380 = dot(vec4(_368, _366.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _397 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_368 - _380) * cbMtdParam._m0[24u].y) + _380) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3793 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _398 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    float _405 = (_398 * ((_328.x * cbMtdParam._m0[12u].x) - _307)) + _307;
    float _406 = (_398 * ((_328.y * cbMtdParam._m0[12u].y) - _308)) + _308;
    float _407 = (_398 * ((_328.z * cbMtdParam._m0[12u].z) - _309)) + _309;
    vec4 _425 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _280) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _281) + cbTextureTilingScale._m0[20u].w));
    vec4 _450 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    vec4 _467 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _469 = _467.x;
    float _470 = _467.y;
    float _471 = _467.z;
    float _480 = ((_450.z - _471) * _398) + _471;
    float _483 = ((((_450.x - _469) * _398) + _469) * 2.0) + (-1.0);
    float _484 = ((((_450.y - _470) * _398) + _470) * 2.0) + (-1.0);
    float _485 = dot(vec2(_483, _484), vec2(_483, _484));
    float _3804 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _490 = sqrt(1.0 - (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))));
    vec4 _506 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _531 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _280) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _281) + cbTextureTilingScale._m0[11u].w));
    float _533 = _531.x;
    float _534 = 1.0 - _533;
    float _540 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _543 = ((isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : min(_540, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _552 = (_543 - ((((((_533 - _534) * cbMtdParam._m0[24u].z) + _534) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _543))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3825 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _553 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    float _560 = (_553 * (cbMtdParam._m0[17u].x - _405)) + _405;
    float _561 = (_553 * (cbMtdParam._m0[17u].y - _406)) + _406;
    float _562 = (_553 * (cbMtdParam._m0[17u].z - _407)) + _407;
    vec4 _574 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _280) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _281) + cbTextureTilingScale._m0[19u].w));
    float _576 = _574.x;
    float _577 = 1.0 - _576;
    float _604 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_576 - _577) * cbMtdParam._m0[24u].w) + _577) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3836 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _605 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
    float _613 = ((((cbMtdParam._m0[10u].x - _560) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _605) + _560;
    float _614 = ((((cbMtdParam._m0[10u].y - _561) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _605) + _561;
    float _615 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _562)) * _605) + _562;
    vec4 _627 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _641 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _643 = _641.x;
    float _661 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _280) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _281) + cbTextureTilingScale._m0[9u].w)).x - _643) * _398) + _643;
    float _665 = ((_627.x - _661) * cbMtdParam._m0[19u].z) + _661;
    float _667 = _665 - (_665 * _553);
    float _669 = _667 - (_667 * _605);
    float _674 = (((_425.z - _480) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _480;
    float _678 = ((_506.z - _674) * cbMtdParam._m0[19u].w) + _674;
    vec4 _692 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _280) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _281) + cbTextureTilingScale._m0[15u].w));
    float _699 = (_692.x * 2.0) + (-1.0);
    float _700 = (_692.y * 2.0) + (-1.0);
    float _701 = dot(vec2(_699, _700), vec2(_699, _700));
    float _3847 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _709 = (_553 * (_692.z - _678)) + _678;
    float _712 = ((cbMtdParam._m0[23u].y - _709) * _605) + _709;
    vec4 _731 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _280) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _281) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _737 = (_731.x * 2.0) + (-1.0);
    float _738 = (_731.y * 2.0) + (-1.0);
    float _739 = dot(vec2(_737, _738), vec2(_737, _738));
    float _3858 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _753 = (_483 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_425.x * 2.0) + (-1.0)))) + (((_506.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _754 = (_484 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_425.y * 2.0) + (-1.0)))) + (((_506.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _766 = (((_699 - _753) + (cbMtdParam._m0[21u].x * _753)) * _553) + _753;
    float _767 = (((_700 - _754) + (cbMtdParam._m0[21u].x * _754)) * _553) + _754;
    float _768 = (_553 * (sqrt(1.0 - (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0)))) - _490)) + _490;
    float _779 = (((_737 - _766) + (_766 * cbMtdParam._m0[22u].z)) * _605) + _766;
    float _780 = (((_738 - _767) + (_767 * cbMtdParam._m0[22u].z)) * _605) + _767;
    float _781 = ((sqrt(1.0 - (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0)))) - _768) * _605) + _768;
    float _783 = cbMtdParam._m0[22u].x + _506.w;
    float _786 = fma(_781, _248 * NORMAL.x, fma(_780, _255 * TANGENT.x, (_241 * _233) * _779));
    float _789 = fma(_781, _248 * NORMAL.y, fma(_780, _255 * TANGENT.y, (_241 * _234) * _779));
    float _792 = fma(_781, _248 * NORMAL.z, fma(_780, _255 * TANGENT.z, (_241 * _235) * _779));
    float _796 = inversesqrt(dot(vec3(_786, _789, _792), vec3(_786, _789, _792)));
    float _797 = _796 * _786;
    float _798 = _796 * _789;
    float _799 = _796 * _792;
    float _3869 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _800 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _3880 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _3891 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _3902 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _3913 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _3924 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _805 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _819 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _859 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _869 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _859);
    float _870 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _859);
    float _871 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _859);
    float _875 = inversesqrt(dot(vec3(_869, _870, _871), vec3(_869, _870, _871)));
    float _876 = _869 * _875;
    float _877 = _870 * _875;
    float _878 = _871 * _875;
    vec4 _883 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _885 = _883.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1057 = sqrt(((_869 * _869) + (_870 * _870)) + (_871 * _871));
        float _1063 = (cbMatDynParam._m0[5u].x * _1057) + cbMatDynParam._m0[5u].y;
        float _3935 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1068 = (cbMatDynParam._m0[5u].z * _1057) + cbMatDynParam._m0[5u].w;
        float _3946 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) - _1064)) + _1064) < ((_885 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _896 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _897 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _915 = fma(_799, cbSceneParam._m0[5u].z, fma(_798, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _797));
    float _918 = fma(_799, cbSceneParam._m0[6u].z, fma(_798, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _797));
    float _921 = fma(_799, cbSceneParam._m0[7u].z, fma(_798, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _797));
    uint _934 = _261 + 9u;
    uint _935 = _934 + uint(cbMatDynParam._m0[0u].w);
    float _941 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0)))) * cbInstanceData._m0[_935].x;
    float _942 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) * cbInstanceData._m0[_935].y;
    float _943 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0)))) * cbInstanceData._m0[_935].z;
    float _3957 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _944 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _3968 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _945 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _3979 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _946 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _947 = 1.0 - _805;
    float _948 = _944 * _947;
    float _949 = _945 * _947;
    float _950 = _946 * _947;
    float _955 = (_944 + (-0.039999999105930328369140625)) * _805;
    float _956 = (_945 + (-0.039999999105930328369140625)) * _805;
    float _957 = (_946 + (-0.039999999105930328369140625)) * _805;
    float _958 = _955 + 0.039999999105930328369140625;
    float _960 = _956 + 0.039999999105930328369140625;
    float _961 = _957 + 0.039999999105930328369140625;
    vec4 _970 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _896, cbSceneParam._m0[86u].y * _897));
    float _974 = ((isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * TEXCOORD_5.w) * _970.x;
    float _975 = dot(vec3(_797, _798, _799), vec3(_876, _877, _878));
    float _978 = _975 * 2.0;
    float _982 = (_978 * _797) - _876;
    float _983 = (_978 * _798) - _877;
    float _984 = (_978 * _799) - _878;
    float _988 = abs(dot(vec3(_876, _877, _878), vec3(_797, _798, _799)));
    float _3990 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _990 = sqrt(_800);
    float _1003 = exp2((_990 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_990 * 3.0));
    float _1009 = (1.0 - _1003) * ((_990 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1010 = _1003 * _990;
    float _1038 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1042 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1046 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1375;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1100 = fma(_1046, cbModelParam._m0[26u].z, fma(_1042, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1038));
        float _1104 = fma(_1046, cbModelParam._m0[27u].z, fma(_1042, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1038));
        float _1108 = fma(_1046, cbModelParam._m0[28u].z, fma(_1042, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1038));
        float _1133 = _1038 + _797;
        float _1134 = _1042 + _798;
        float _1135 = _1046 + _799;
        float _1145 = fma(_1135, cbModelParam._m0[26u].z, fma(_1134, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1133)) - _1100;
        float _1146 = fma(_1135, cbModelParam._m0[27u].z, fma(_1134, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1133)) - _1104;
        float _1147 = fma(_1135, cbModelParam._m0[28u].z, fma(_1134, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1133)) - _1108;
        float _1151 = inversesqrt(dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147)));
        float _1164 = ((_1151 * _1145) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1100 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1165 = ((_1151 * _1146) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1104 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1166 = ((_1151 * _1147) / cbModelParam._m0[34u].z) + ((((((_1108 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        float _1203 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1169.x + (-0.5));
        float _1205 = _1203 * (_1169.y + (-0.5));
        float _1206 = _1203 * (_1169.z + (-0.5));
        float _1213 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1176.x + (-0.5));
        float _1215 = _1213 * (_1176.y + (-0.5));
        float _1216 = _1213 * (_1176.z + (-0.5));
        float _1223 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1183.x + (-0.5));
        float _1225 = _1223 * (_1183.y + (-0.5));
        float _1226 = _1223 * (_1183.z + (-0.5));
        float _1233 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1190.x + (-0.5));
        float _1235 = _1233 * (_1190.y + (-0.5));
        float _1236 = _1233 * (_1190.z + (-0.5));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1239 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1240 = _1204 * 0.5;
        float _1241 = _1214 * 0.5;
        float _1242 = _1224 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1257 = (dot(vec3(_797, _798, _799), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _4016 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1267 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _4027 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1269 = _1268 * 2.0;
        float _1273 = (1.0 - _1268) / (_1268 + 1.0);
        float _4038 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1283 = ((((1.0 - _1274) * (_1269 + 2.0)) * exp2(log2(isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_1269 + 1.0))) + _1274) * _1237;
        float _1284 = _1205 * 0.5;
        float _1285 = _1215 * 0.5;
        float _1286 = _1225 * 0.5;
        float _1287 = dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286));
        float _1292 = (_1287 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1287);
        float _1300 = (dot(vec3(_797, _798, _799), vec3(_1292 * _1284, _1292 * _1285, _1292 * _1286)) + 1.0) * 0.5;
        float _4049 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1309 = sqrt(((_1285 * _1285) + (_1284 * _1284)) + (_1286 * _1286)) / (_1238 + 9.9999997473787516355514526367188e-06);
        float _4060 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1311 = _1310 * 2.0;
        float _1315 = (1.0 - _1310) / (_1310 + 1.0);
        float _4071 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1325 = ((((1.0 - _1316) * (_1311 + 2.0)) * exp2(log2(isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_1311 + 1.0))) + _1316) * _1238;
        float _1326 = _1206 * 0.5;
        float _1327 = _1216 * 0.5;
        float _1328 = _1226 * 0.5;
        float _1329 = dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328));
        float _1334 = (_1329 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1329);
        float _1342 = (dot(vec3(_797, _798, _799), vec3(_1334 * _1326, _1334 * _1327, _1334 * _1328)) + 1.0) * 0.5;
        float _4082 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1351 = sqrt(((_1327 * _1327) + (_1326 * _1326)) + (_1328 * _1328)) / (_1239 + 9.9999997473787516355514526367188e-06);
        float _4093 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1353 = _1352 * 2.0;
        float _1357 = (1.0 - _1352) / (_1352 + 1.0);
        float _4104 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1367 = ((((1.0 - _1358) * (_1353 + 2.0)) * exp2(log2(isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_1353 + 1.0))) + _1358) * _1239;
        _1375 = _1206;
        _1377 = _1205;
        _1378 = _1204;
        _1379 = _1216;
        _1380 = _1215;
        _1381 = _1214;
        _1382 = _1226;
        _1383 = _1225;
        _1384 = _1224;
        _1385 = _1239;
        _1386 = _1238;
        _1387 = _1237;
        _1388 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)));
        _1389 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
        _1390 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)));
    }
    else
    {
        _1375 = _1376;
        _1377 = _1376;
        _1378 = _1376;
        _1379 = _1376;
        _1380 = _1376;
        _1381 = _1376;
        _1382 = _1376;
        _1383 = _1376;
        _1384 = _1376;
        _1385 = _1376;
        _1386 = _1376;
        _1387 = _1376;
        _1388 = 0.0;
        _1389 = 0.0;
        _1390 = 0.0;
    }
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1418 = fma(_1046, cbModelParam._m0[30u].z, fma(_1042, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1038));
        float _1422 = fma(_1046, cbModelParam._m0[31u].z, fma(_1042, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1038));
        float _1426 = fma(_1046, cbModelParam._m0[32u].z, fma(_1042, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1038));
        float _1449 = _1038 + _797;
        float _1450 = _1042 + _798;
        float _1451 = _1046 + _799;
        float _1461 = fma(_1451, cbModelParam._m0[30u].z, fma(_1450, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1449)) - _1418;
        float _1462 = fma(_1451, cbModelParam._m0[31u].z, fma(_1450, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1449)) - _1422;
        float _1463 = fma(_1451, cbModelParam._m0[32u].z, fma(_1450, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1449)) - _1426;
        float _1467 = inversesqrt(dot(vec3(_1461, _1462, _1463), vec3(_1461, _1462, _1463)));
        float _1480 = ((_1467 * _1461) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1418 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1481 = ((_1467 * _1462) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1422 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1482 = ((_1467 * _1463) / cbModelParam._m0[35u].z) + ((((((_1426 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1484 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1480, _1481, _1482), 0.0);
        vec4 _1491 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1480, _1481, _1482), 0.0);
        vec4 _1498 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1480, _1481, _1482), 0.0);
        vec4 _1505 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1480, _1481, _1482), 0.0);
        float _1517 = exp2((_1484.w + (-0.5)) * 20.0) * 2.0;
        float _1518 = _1517 * (_1484.x + (-0.5));
        float _1519 = _1517 * (_1484.y + (-0.5));
        float _1520 = _1517 * (_1484.z + (-0.5));
        float _1527 = exp2((_1491.w + (-0.5)) * 20.0) * 2.0;
        float _1528 = _1527 * (_1491.x + (-0.5));
        float _1529 = _1527 * (_1491.y + (-0.5));
        float _1530 = _1527 * (_1491.z + (-0.5));
        float _1537 = exp2((_1498.w + (-0.5)) * 20.0) * 2.0;
        float _1538 = _1537 * (_1498.x + (-0.5));
        float _1539 = _1537 * (_1498.y + (-0.5));
        float _1540 = _1537 * (_1498.z + (-0.5));
        float _1547 = exp2((_1505.w + (-0.5)) * 20.0) * 2.0;
        float _1548 = _1547 * (_1505.x + (-0.5));
        float _1549 = _1547 * (_1505.y + (-0.5));
        float _1550 = _1547 * (_1505.z + (-0.5));
        float _1551 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1552 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1553 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1554 = _1518 * 0.5;
        float _1555 = _1528 * 0.5;
        float _1556 = _1538 * 0.5;
        float _1557 = dot(vec3(_1554, _1555, _1556), vec3(_1554, _1555, _1556));
        float _1562 = (_1557 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1557);
        float _1570 = (dot(vec3(_797, _798, _799), vec3(_1562 * _1554, _1562 * _1555, _1562 * _1556)) + 1.0) * 0.5;
        float _4145 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1579 = sqrt(((_1555 * _1555) + (_1554 * _1554)) + (_1556 * _1556)) / (_1551 + 9.9999997473787516355514526367188e-06);
        float _4156 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1581 = _1580 * 2.0;
        float _1585 = (1.0 - _1580) / (_1580 + 1.0);
        float _4167 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1595 = ((((1.0 - _1586) * (_1581 + 2.0)) * exp2(log2(isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_1581 + 1.0))) + _1586) * _1551;
        float _1596 = _1519 * 0.5;
        float _1597 = _1529 * 0.5;
        float _1598 = _1539 * 0.5;
        float _1599 = dot(vec3(_1596, _1597, _1598), vec3(_1596, _1597, _1598));
        float _1604 = (_1599 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1599);
        float _1612 = (dot(vec3(_797, _798, _799), vec3(_1604 * _1596, _1604 * _1597, _1604 * _1598)) + 1.0) * 0.5;
        float _4178 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1621 = sqrt(((_1597 * _1597) + (_1596 * _1596)) + (_1598 * _1598)) / (_1552 + 9.9999997473787516355514526367188e-06);
        float _4189 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1623 = _1622 * 2.0;
        float _1627 = (1.0 - _1622) / (_1622 + 1.0);
        float _4200 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1637 = ((((1.0 - _1628) * (_1623 + 2.0)) * exp2(log2(isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_1623 + 1.0))) + _1628) * _1552;
        float _1638 = _1520 * 0.5;
        float _1639 = _1530 * 0.5;
        float _1640 = _1540 * 0.5;
        float _1641 = dot(vec3(_1638, _1639, _1640), vec3(_1638, _1639, _1640));
        float _1646 = (_1641 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1641);
        float _1654 = (dot(vec3(_797, _798, _799), vec3(_1646 * _1638, _1646 * _1639, _1646 * _1640)) + 1.0) * 0.5;
        float _4211 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1663 = sqrt(((_1639 * _1639) + (_1638 * _1638)) + (_1640 * _1640)) / (_1553 + 9.9999997473787516355514526367188e-06);
        float _4222 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1665 = _1664 * 2.0;
        float _1669 = (1.0 - _1664) / (_1664 + 1.0);
        float _4233 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1670 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1679 = ((((1.0 - _1670) * (_1665 + 2.0)) * exp2(log2(isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_1665 + 1.0))) + _1670) * _1553;
        _1687 = _1520;
        _1688 = _1519;
        _1689 = _1518;
        _1690 = _1530;
        _1691 = _1529;
        _1692 = _1528;
        _1693 = _1540;
        _1694 = _1539;
        _1695 = _1538;
        _1696 = _1553;
        _1697 = _1552;
        _1698 = _1551;
        _1699 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)));
        _1700 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)));
        _1701 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)));
    }
    else
    {
        _1687 = _1376;
        _1688 = _1376;
        _1689 = _1376;
        _1690 = _1376;
        _1691 = _1376;
        _1692 = _1376;
        _1693 = _1376;
        _1694 = _1376;
        _1695 = _1376;
        _1696 = _1376;
        _1697 = _1376;
        _1698 = _1376;
        _1699 = 0.0;
        _1700 = 0.0;
        _1701 = 0.0;
    }
    float _1711 = (cbModelParam._m0[1u].x * (_1699 - _1388)) + _1388;
    float _1712 = (cbModelParam._m0[1u].x * (_1700 - _1389)) + _1389;
    float _1713 = (cbModelParam._m0[1u].x * (_1701 - _1390)) + _1390;
    float _1734 = fma(_1713, cbSceneParam._m0[89u].z, fma(_1712, cbSceneParam._m0[89u].y, _1711 * cbSceneParam._m0[89u].x));
    float _1737 = fma(_1713, cbSceneParam._m0[90u].z, fma(_1712, cbSceneParam._m0[90u].y, _1711 * cbSceneParam._m0[90u].x));
    float _1740 = fma(_1713, cbSceneParam._m0[91u].z, fma(_1712, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1711));
    float _1755 = _982 * 0.5;
    float _1756 = _983 * 0.5;
    float _1757 = _984 * 0.5;
    float _1758 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1689, _1692, _1695, _1698));
    float _1761 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1688, _1691, _1694, _1697));
    float _1764 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1687, _1690, _1693, _1696));
    float _1798;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1771 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1375, _1379, _1382, _1385));
        float _1775 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1377, _1380, _1383, _1386));
        float _1779 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1378, _1381, _1384, _1387));
        float _1786 = dot(vec4(cbModelParam._m0[39u]), vec4(_1755, _1756, _1757, 1.0));
        _1798 = dot(vec3(isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0)), isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0)), isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1786) ? 0.0 : (isnan(0.0) ? _1786 : max(0.0, _1786))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1798 = 1.0;
    }
    float _1809;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1800 = dot(vec4(cbModelParam._m0[40u]), vec4(_1755, _1756, _1757, 1.0));
        _1809 = dot(vec3(isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0)), isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)), isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1800) ? 0.0 : (isnan(0.0) ? _1800 : max(0.0, _1800))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1809 = 1.0;
    }
    float _1813 = (_1809 * cbModelParam._m0[1u].x) + (_1798 * (1.0 - cbModelParam._m0[1u].x));
    float _1823 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _800);
    float _1824 = isnan(_1823) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1823 : min(cbModelParam._m0[25u].z, _1823));
    float _1905;
    float _1907;
    float _1909;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1872 = fma(_1046, cbModelParam._m0[13u].z, fma(_1042, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1038)) + cbModelParam._m0[13u].w;
        float _1876 = fma(_1046, cbModelParam._m0[14u].z, fma(_1042, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1038)) + cbModelParam._m0[14u].w;
        float _1880 = fma(_1046, cbModelParam._m0[15u].z, fma(_1042, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1038)) + cbModelParam._m0[15u].w;
        float _1883 = fma(_984, cbModelParam._m0[13u].z, fma(_983, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _982));
        float _1886 = fma(_984, cbModelParam._m0[14u].z, fma(_983, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _982));
        float _1889 = fma(_984, cbModelParam._m0[15u].z, fma(_983, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _982));
        float _1917;
        if (_1883 > 0.0)
        {
            _1917 = abs((1.0 - _1872) / _1883);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1883 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1872 + 1.0) / _1883);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1917 = frontier_phi_17_15_ladder;
        }
        float _2141;
        if (_1886 > 0.0)
        {
            _2141 = abs((1.0 - _1876) / _1886);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1886 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1876 + 1.0) / _1886);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2141 = frontier_phi_26_22_ladder;
        }
        float _2398;
        if (_1889 > 0.0)
        {
            _2398 = abs((1.0 - _1880) / _1889);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1889 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1880 + 1.0) / _1889);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2398 = frontier_phi_38_33_ladder;
        }
        float _2400 = isnan(_2141) ? _1917 : (isnan(_1917) ? _2141 : min(_1917, _2141));
        float _2401 = isnan(_2398) ? _2400 : (isnan(_2400) ? _2398 : min(_2400, _2398));
        float _2405 = (_2401 * _1883) + _1872;
        float _2406 = (_2401 * _1886) + _1876;
        float _2407 = (_2401 * _1889) + _1880;
        float _2408 = _2401 * 9.9999997473787516355514526367188e-05;
        float _2410 = (-1.0) - _2408;
        float _2412 = _2408 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2407 > _2412) || ((_2407 < _2410) || ((_2406 > _2412) || ((_2406 < _2410) || ((_2405 < _2410) || (_2405 > _2412))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2535 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2407, cbModelParam._m0[9u].z, fma(_2406, cbModelParam._m0[9u].y, _2405 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2407, cbModelParam._m0[10u].z, fma(_2406, cbModelParam._m0[10u].y, _2405 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2407, cbModelParam._m0[11u].z, fma(_2406, cbModelParam._m0[11u].y, _2405 * cbModelParam._m0[11u].x))), _1824);
            frontier_phi_16_38_ladder = _2535.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2535.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2535.x * cbModelParam._m0[1u].y;
        }
        _1905 = frontier_phi_16_38_ladder_2;
        _1907 = frontier_phi_16_38_ladder_1;
        _1909 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1893 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_982, _983, _984), _1824);
        _1905 = _1893.x * cbModelParam._m0[1u].y;
        _1907 = _1893.y * cbModelParam._m0[1u].y;
        _1909 = _1893.z * cbModelParam._m0[1u].y;
    }
    float _1913 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _800);
    float _1914 = isnan(_1913) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1913 : min(cbModelParam._m0[25u].w, _1913));
    float _2004;
    float _2006;
    float _2008;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1968 = fma(_1046, cbModelParam._m0[21u].z, fma(_1042, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1038)) + cbModelParam._m0[21u].w;
        float _1972 = fma(_1046, cbModelParam._m0[22u].z, fma(_1042, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1038)) + cbModelParam._m0[22u].w;
        float _1976 = fma(_1046, cbModelParam._m0[23u].z, fma(_1042, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1038)) + cbModelParam._m0[23u].w;
        float _1979 = fma(_984, cbModelParam._m0[21u].z, fma(_983, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _982));
        float _1982 = fma(_984, cbModelParam._m0[22u].z, fma(_983, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _982));
        float _1985 = fma(_984, cbModelParam._m0[23u].z, fma(_983, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _982));
        float _2146;
        if (_1979 > 0.0)
        {
            _2146 = abs((1.0 - _1968) / _1979);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1979 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1968 + 1.0) / _1979);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2146 = frontier_phi_28_24_ladder;
        }
        float _2425;
        if (_1982 > 0.0)
        {
            _2425 = abs((1.0 - _1972) / _1982);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1982 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1972 + 1.0) / _1982);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2425 = frontier_phi_40_35_ladder;
        }
        float _2638;
        if (_1985 > 0.0)
        {
            _2638 = abs((1.0 - _1976) / _1985);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1985 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1976 + 1.0) / _1985);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2638 = frontier_phi_49_46_ladder;
        }
        float _2640 = isnan(_2425) ? _2146 : (isnan(_2146) ? _2425 : min(_2146, _2425));
        float _2641 = isnan(_2638) ? _2640 : (isnan(_2640) ? _2638 : min(_2640, _2638));
        float _2645 = (_2641 * _1979) + _1968;
        float _2646 = (_2641 * _1982) + _1972;
        float _2647 = (_2641 * _1985) + _1976;
        float _2648 = _2641 * 9.9999997473787516355514526367188e-05;
        float _2649 = (-1.0) - _2648;
        float _2651 = _2648 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2647 > _2651) || ((_2647 < _2649) || ((_2646 > _2651) || ((_2646 < _2649) || ((_2645 < _2649) || (_2645 > _2651))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2846 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2647, cbModelParam._m0[17u].z, fma(_2646, cbModelParam._m0[17u].y, _2645 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2647, cbModelParam._m0[18u].z, fma(_2646, cbModelParam._m0[18u].y, _2645 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2647, cbModelParam._m0[19u].z, fma(_2646, cbModelParam._m0[19u].y, _2645 * cbModelParam._m0[19u].x))), _1914);
            frontier_phi_25_49_ladder = _2846.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2846.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2846.x * cbModelParam._m0[1u].z;
        }
        _2004 = frontier_phi_25_49_ladder_2;
        _2006 = frontier_phi_25_49_ladder_1;
        _2008 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1988 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_982, _983, _984), _1914);
        _2004 = _1988.x * cbModelParam._m0[1u].z;
        _2006 = _1988.y * cbModelParam._m0[1u].z;
        _2008 = _1988.z * cbModelParam._m0[1u].z;
    }
    float _2021 = (((_1009 * _958) + _1010) * _974) * ((cbModelParam._m0[1u].w * (_2004 - _1905)) + _1905);
    float _2023 = (((_1009 * _960) + _1010) * _974) * ((cbModelParam._m0[1u].w * (_2006 - _1907)) + _1907);
    float _2025 = (((_1009 * _961) + _1010) * _974) * ((cbModelParam._m0[1u].w * (_2008 - _1909)) + _1909);
    float _2028 = fma(_2025, cbSceneParam._m0[89u].z, fma(_2023, cbSceneParam._m0[89u].y, _2021 * cbSceneParam._m0[89u].x));
    float _2031 = fma(_2025, cbSceneParam._m0[90u].z, fma(_2023, cbSceneParam._m0[90u].y, _2021 * cbSceneParam._m0[90u].x));
    float _2034 = fma(_2025, cbSceneParam._m0[91u].z, fma(_2023, cbSceneParam._m0[91u].y, _2021 * cbSceneParam._m0[91u].x));
    vec4 _2042 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_896, _897));
    float _2044 = _2042.w;
    float _2056 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2044);
    float _2057 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2044);
    float _2058 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2044);
    uvec4 _2062 = floatBitsToUint(cbInstanceData._m0[_261 + 5u]);
    uint _2064 = _2062.x * 14u;
    uint _2065 = _2064 + 13u;
    float _2072 = _974 + (-1.0);
    float _2077 = (cbLight._m0[_2065].x * _2072) + 1.0;
    float _2078 = (cbLight._m0[_2065].y * _2072) + 1.0;
    float _2079 = (cbLight._m0[_2065].z * _2072) + 1.0;
    float _2080 = (cbLight._m0[_2065].w * _2072) + 1.0;
    uint _2081 = _2064 + 5u;
    float _2087 = isnan(1.0) ? _2078 : (isnan(_2078) ? 1.0 : min(_2078, 1.0));
    uint _2091 = _2064 + 4u;
    float _2100 = isnan(1.0) ? _2077 : (isnan(_2077) ? 1.0 : min(_2077, 1.0));
    uint _2104 = _2064 | 1u;
    float _2115 = dot(vec3(cbLight._m0[_2064].xyz), vec3(_797, _798, _799));
    float _2118 = dot(vec3(cbLight._m0[_2104].xyz), vec3(_797, _798, _799));
    float _4369 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _4380 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2123 = (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * 0.3183098733425140380859375;
    float _2125 = (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * 0.3183098733425140380859375;
    float _2132 = ((cbLight._m0[_2081].x * _2087) * _2125) + (((cbLight._m0[_2091].x * _2056) * _2100) * _2123);
    float _2133 = ((_2087 * cbLight._m0[_2081].y) * _2125) + (((cbLight._m0[_2091].y * _2057) * _2100) * _2123);
    float _2134 = ((_2087 * cbLight._m0[_2081].z) * _2125) + (((cbLight._m0[_2091].z * _2058) * _2100) * _2123);
    uvec4 _2138 = floatBitsToUint(cbLight._m0[_2064 + 12u]);
    bool _2140 = _2138.x == 0u;
    float _2151;
    float _2153;
    float _2155;
    if (_2140)
    {
        _2151 = _2132;
        _2153 = _2133;
        _2155 = _2134;
    }
    else
    {
        uint _2159 = _2064 + 6u;
        float _2175 = (dot(vec3(cbLight._m0[_2064 + 2u].xyz), vec3(_797, _798, _799)) * 0.5) + 0.5;
        float _2176 = _2175 * _2175;
        float _4391 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
        float _2177 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _2178 = isnan(1.0) ? _2079 : (isnan(_2079) ? 1.0 : min(_2079, 1.0));
        _2151 = (((cbLight._m0[_2159].x * 0.3183098733425140380859375) * _2177) * _2178) + _2132;
        _2153 = (((cbLight._m0[_2159].y * 0.3183098733425140380859375) * _2177) * _2178) + _2133;
        _2155 = (((cbLight._m0[_2159].z * 0.3183098733425140380859375) * _2177) * _2178) + _2134;
    }
    bool _2158 = _2138.y == 0u;
    float _2196;
    float _2198;
    float _2200;
    if (_2158)
    {
        _2196 = _2151;
        _2198 = _2153;
        _2200 = _2155;
    }
    else
    {
        uint _2369 = _2064 + 7u;
        float _2385 = (dot(vec3(cbLight._m0[_2064 + 3u].xyz), vec3(_797, _798, _799)) * 0.5) + 0.5;
        float _2386 = _2385 * _2385;
        float _4407 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        float _2387 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _2388 = isnan(1.0) ? _2080 : (isnan(_2080) ? 1.0 : min(_2080, 1.0));
        _2196 = (((cbLight._m0[_2369].x * 0.3183098733425140380859375) * _2387) * _2388) + _2151;
        _2198 = (((cbLight._m0[_2369].y * 0.3183098733425140380859375) * _2387) * _2388) + _2153;
        _2200 = (((cbLight._m0[_2369].z * 0.3183098733425140380859375) * _2387) * _2388) + _2155;
    }
    uint _2203 = _2064 + 8u;
    float _2216 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2064].w)) * _800) * 0.949999988079071044921875);
    float _2217 = _2216 * _2216;
    float _2218 = cbLight._m0[_2064].x + _876;
    float _2219 = cbLight._m0[_2064].y + _877;
    float _2220 = cbLight._m0[_2064].z + _878;
    float _2224 = inversesqrt(dot(vec3(_2218, _2219, _2220), vec3(_2218, _2219, _2220)));
    float _2225 = _2224 * _2218;
    float _2226 = _2224 * _2219;
    float _2227 = _2224 * _2220;
    float _2228 = dot(vec3(_797, _798, _799), vec3(cbLight._m0[_2064].xyz));
    float _4423 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2231 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
    float _4434 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _2232 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
    float _2233 = dot(vec3(_797, _798, _799), vec3(_2225, _2226, _2227));
    float _4445 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2236 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
    float _2237 = dot(vec3(cbLight._m0[_2064].xyz), vec3(_2225, _2226, _2227));
    float _4456 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
    float _2241 = _2217 * _2217;
    float _2245 = ((_2236 * _2236) * (_2241 + (-1.0))) + 1.0;
    float _2253 = exp2(log2(1.0 - (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0)))) * 5.0);
    float _2254 = 0.959999978542327880859375 - _955;
    float _2256 = 0.959999978542327880859375 - _956;
    float _2257 = 0.959999978542327880859375 - _957;
    float _2264 = 1.0 - _2217;
    float _2275 = (0.5 / (((_2232 * ((_2231 * _2264) + _2217)) + 9.9999999392252902907785028219223e-09) + (((_2232 * _2264) + _2217) * _2231))) * _2231;
    float _4467 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2277 = (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_2241 / ((_2245 * _2245) * 3.141590118408203125));
    uint _2291 = _2064 + 9u;
    float _2302 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2104].w)) * _800) * 0.949999988079071044921875);
    float _2303 = _2302 * _2302;
    float _2304 = cbLight._m0[_2104].x + _876;
    float _2305 = cbLight._m0[_2104].y + _877;
    float _2306 = cbLight._m0[_2104].z + _878;
    float _2310 = inversesqrt(dot(vec3(_2304, _2305, _2306), vec3(_2304, _2305, _2306)));
    float _2311 = _2310 * _2304;
    float _2312 = _2310 * _2305;
    float _2313 = _2310 * _2306;
    float _2314 = dot(vec3(_797, _798, _799), vec3(cbLight._m0[_2104].xyz));
    float _4478 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _2317 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
    float _2318 = dot(vec3(_797, _798, _799), vec3(_2311, _2312, _2313));
    float _4489 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2321 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
    float _2322 = dot(vec3(cbLight._m0[_2104].xyz), vec3(_2311, _2312, _2313));
    float _4500 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2326 = _2303 * _2303;
    float _2330 = ((_2321 * _2321) * (_2326 + (-1.0))) + 1.0;
    float _2337 = exp2(log2(1.0 - (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0)))) * 5.0);
    float _2344 = 1.0 - _2303;
    float _2354 = (0.5 / (((_2232 * ((_2317 * _2344) + _2303)) + 9.9999999392252902907785028219223e-09) + (((_2232 * _2344) + _2303) * _2317))) * _2317;
    float _4511 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2356 = (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0))) * (_2326 / ((_2330 * _2330) * 3.141590118408203125));
    float _2366 = (((((_2337 * _2254) + _958) * cbLight._m0[_2291].x) * _2356) * _2087) + ((((cbLight._m0[_2203].x * _2056) * ((_2253 * _2254) + _958)) * _2277) * _2100);
    float _2367 = (((((_2337 * _2256) + _960) * cbLight._m0[_2291].y) * _2356) * _2087) + ((((cbLight._m0[_2203].y * _2057) * ((_2253 * _2256) + _960)) * _2277) * _2100);
    float _2368 = (((((_2337 * _2257) + _961) * cbLight._m0[_2291].z) * _2356) * _2087) + ((((cbLight._m0[_2203].z * _2058) * ((_2253 * _2257) + _961)) * _2277) * _2100);
    float _2430;
    float _2432;
    float _2434;
    if (_2140)
    {
        _2430 = _2366;
        _2432 = _2367;
        _2434 = _2368;
    }
    else
    {
        uint _2436 = _2064 + 2u;
        uint _2440 = _2064 + 10u;
        float _2454 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2436].w)) * _800) * 0.949999988079071044921875);
        float _2455 = _2454 * _2454;
        float _2456 = cbLight._m0[_2436].x + _876;
        float _2457 = cbLight._m0[_2436].y + _877;
        float _2458 = cbLight._m0[_2436].z + _878;
        float _2462 = inversesqrt(dot(vec3(_2456, _2457, _2458), vec3(_2456, _2457, _2458)));
        float _2463 = _2462 * _2456;
        float _2464 = _2462 * _2457;
        float _2465 = _2462 * _2458;
        float _2466 = dot(vec3(_797, _798, _799), vec3(cbLight._m0[_2436].xyz));
        float _4522 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2469 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _2470 = dot(vec3(_797, _798, _799), vec3(_2463, _2464, _2465));
        float _4533 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2473 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _2474 = dot(vec3(cbLight._m0[_2436].xyz), vec3(_2463, _2464, _2465));
        float _4544 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        float _2478 = _2455 * _2455;
        float _2482 = ((_2473 * _2473) * (_2478 + (-1.0))) + 1.0;
        float _2489 = exp2(log2(1.0 - (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0)))) * 5.0);
        float _2496 = 1.0 - _2455;
        float _2506 = (0.5 / (((_2232 * ((_2469 * _2496) + _2455)) + 9.9999999392252902907785028219223e-09) + (((_2232 * _2496) + _2455) * _2469))) * _2469;
        float _4555 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2508 = (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (_2478 / ((_2482 * _2482) * 3.141590118408203125));
        float _2509 = isnan(1.0) ? _2079 : (isnan(_2079) ? 1.0 : min(_2079, 1.0));
        _2430 = (((((_2489 * _2254) + _958) * cbLight._m0[_2440].x) * _2508) * _2509) + _2366;
        _2432 = (((((_2489 * _2256) + _960) * cbLight._m0[_2440].y) * _2508) * _2509) + _2367;
        _2434 = (((((_2489 * _2257) + _961) * cbLight._m0[_2440].z) * _2508) * _2509) + _2368;
    }
    float _2544;
    float _2546;
    float _2548;
    if (_2158)
    {
        _2544 = _2430;
        _2546 = _2432;
        _2548 = _2434;
    }
    else
    {
        uint _2555 = _2064 + 3u;
        uint _2559 = _2064 + 11u;
        float _2573 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2555].w)) * _800) * 0.949999988079071044921875);
        float _2574 = _2573 * _2573;
        float _2575 = cbLight._m0[_2555].x + _876;
        float _2576 = cbLight._m0[_2555].y + _877;
        float _2577 = cbLight._m0[_2555].z + _878;
        float _2581 = inversesqrt(dot(vec3(_2575, _2576, _2577), vec3(_2575, _2576, _2577)));
        float _2582 = _2581 * _2575;
        float _2583 = _2581 * _2576;
        float _2584 = _2581 * _2577;
        float _2585 = dot(vec3(_797, _798, _799), vec3(cbLight._m0[_2555].xyz));
        float _4571 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        float _2588 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _2589 = dot(vec3(_797, _798, _799), vec3(_2582, _2583, _2584));
        float _4582 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2592 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
        float _2593 = dot(vec3(cbLight._m0[_2555].xyz), vec3(_2582, _2583, _2584));
        float _4593 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
        float _2597 = _2574 * _2574;
        float _2601 = ((_2592 * _2592) * (_2597 + (-1.0))) + 1.0;
        float _2608 = exp2(log2(1.0 - (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0)))) * 5.0);
        float _2615 = 1.0 - _2574;
        float _2625 = (0.5 / (((_2232 * ((_2588 * _2615) + _2574)) + 9.9999999392252902907785028219223e-09) + (((_2232 * _2615) + _2574) * _2588))) * _2588;
        float _4604 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
        float _2627 = (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * (_2597 / ((_2601 * _2601) * 3.141590118408203125));
        float _2628 = isnan(1.0) ? _2080 : (isnan(_2080) ? 1.0 : min(_2080, 1.0));
        _2544 = (((((_2608 * _2254) + _958) * cbLight._m0[_2559].x) * _2627) * _2628) + _2430;
        _2546 = (((((_2608 * _2256) + _960) * cbLight._m0[_2559].y) * _2627) * _2628) + _2432;
        _2548 = (((((_2608 * _2257) + _961) * cbLight._m0[_2559].z) * _2627) * _2628) + _2434;
    }
    float _2763;
    float _2765;
    float _2767;
    float _2769;
    float _2771;
    float _2773;
    if (_2062.y == 0u)
    {
        float _2703 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2704 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2703;
        float _2705 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2703;
        float _2706 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2703;
        uvec4 _2718 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2719 = _2718.x;
        uint _2730 = uint((float(_2718.y) * floor(float(uint(cbSceneParam._m0[85u].y * _897) / _2719))) + floor(float(uint(cbSceneParam._m0[85u].x * _896) / _2719)));
        float _2740 = (log2(_2706 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2741 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
        uint _2744 = uint(isnan(14.0) ? _2741 : (isnan(_2741) ? 14.0 : min(_2741, 14.0)));
        uvec4 _2749 = texelFetch(g_lightClusterGridBuffer, int(((_2744 << 2u) + (_2730 << 6u)) >> 2u));
        uint _2750 = _2749.x;
        uint _2751 = _2718.z;
        float _2851;
        float _2853;
        float _2855;
        float _2857;
        float _2859;
        float _2861;
        if (((((1u << ((_2751 >> 4u) & 15u)) + 4294967295u) & _2750) == 0u) || ((_2751 & 240u) == 0u))
        {
            _2851 = 0.0;
            _2853 = 0.0;
            _2855 = 0.0;
            _2857 = 0.0;
            _2859 = 0.0;
            _2861 = 0.0;
        }
        else
        {
            float _2852;
            float _2854;
            float _2856;
            float _2858;
            float _2860;
            float _2862;
            float _3004 = 0.0;
            float _3005 = 0.0;
            float _3006 = 0.0;
            float _3007 = 0.0;
            float _3008 = 0.0;
            float _3009 = 0.0;
            uint _3010 = 0u;
            uint _3019;
            bool _3020;
            for (;;)
            {
                _3019 = texelFetch(g_lightClassification, int((((_2744 << 5u) + (_2730 << 9u)) + (_3010 << 2u)) >> 2u)).x;
                _3020 = _3019 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3020)
                {
                    frontier_phi_66_pred = _3004;
                    frontier_phi_66_pred_1 = _3009;
                    frontier_phi_66_pred_2 = _3008;
                    frontier_phi_66_pred_3 = _3007;
                    frontier_phi_66_pred_4 = _3006;
                    frontier_phi_66_pred_5 = _3005;
                }
                else
                {
                    float _3149;
                    float _3150;
                    float _3151;
                    float _3152;
                    float _3153;
                    float _3154;
                    uint _3155;
                    _3149 = _3004;
                    _3150 = _3005;
                    _3151 = _3006;
                    _3152 = _3007;
                    _3153 = _3008;
                    _3154 = _3009;
                    _3155 = _3019;
                    float _3076;
                    float _3077;
                    float _3078;
                    float _3079;
                    float _3080;
                    float _3081;
                    for (;;)
                    {
                        uint _3159 = uint(findLSB(_3155)) + (_3010 << 5u);
                        uint _3156 = (_3155 + 4294967295u) & _3155;
                        uint _3161 = _3159 * 48u;
                        vec4 _3175 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3161)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 3u)).x));
                        uint _3181 = (_3159 * 48u) + 4u;
                        vec4 _3194 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3181)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 3u)).x));
                        uint _3200 = (_3159 * 48u) + 8u;
                        vec3 _3211 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3200)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 2u)).x));
                        float _3215 = _3175.x - _2704;
                        float _3216 = _3175.y - _2705;
                        float _3217 = _3175.z - _2706;
                        float _3218 = dot(vec3(_3215, _3216, _3217), vec3(_3215, _3216, _3217));
                        float _3221 = inversesqrt(_3218);
                        float _3222 = _3221 * _3215;
                        float _3223 = _3221 * _3216;
                        float _3224 = _3221 * _3217;
                        float _3225 = dot(vec3(_915, _918, _921), vec3(_3222, _3223, _3224));
                        float _3230 = 1.0 - (_3218 * _3175.w);
                        float _4630 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                        float _3231 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                        float _3232 = sqrt(_3218) * _3194.w;
                        float _3235 = 1.39999997615814208984375 / (_3232 + 1.39999997615814208984375);
                        float _3236 = _3235 * _3235;
                        float _3239 = ((1.0 - _3236) * _3225) + _3236;
                        float _3242 = _3232 * _3232;
                        float _3246 = ((isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0))) * _3231) / ((_3242 * 0.699999988079071044921875) + 1.0);
                        float _3250 = (-0.0) - _2704;
                        float _3251 = (-0.0) - _2705;
                        float _3252 = (-0.0) - _2706;
                        float _3256 = inversesqrt(dot(vec3(_3250, _3251, _3252), vec3(_3250, _3251, _3252)));
                        float _3257 = _3256 * _3250;
                        float _3258 = _3256 * _3251;
                        float _3259 = _3256 * _3252;
                        float _3267 = exp2(log2(1.0 / ((_3242 * 3.5) + 5.0)) * 0.25);
                        float _3268 = 1.0 - _990;
                        float _3275 = sqrt(1.0 - ((1.0 - (_3268 * _3268)) * (1.0 - (_3267 * _3267))));
                        float _3276 = _3275 * _3275;
                        float _3277 = _3276 * _3276;
                        float _3278 = _3257 + _3222;
                        float _3279 = _3258 + _3223;
                        float _3280 = _3259 + _3224;
                        float _3284 = inversesqrt(dot(vec3(_3278, _3279, _3280), vec3(_3278, _3279, _3280)));
                        float _3288 = dot(vec3(_915, _918, _921), vec3(_3257, _3258, _3259));
                        float _4646 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                        float _3291 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                        float _3292 = dot(vec3(_915, _918, _921), vec3(_3284 * _3278, _3284 * _3279, _3284 * _3280));
                        float _4657 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                        float _3295 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                        float _3299 = ((_3295 * _3295) * (_3277 + (-1.0))) + 1.0;
                        float _3300 = _3235 * _3276;
                        float _3301 = _3300 * _3300;
                        float _3304 = ((1.0 - _3301) * _3225) + _3301;
                        float _4668 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                        float _3305 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                        float _3306 = 1.0 - _3276;
                        float _3316 = (0.5 / (((_3305 * ((_3291 * _3306) + _3276)) + 9.9999999392252902907785028219223e-09) + (((_3305 * _3306) + _3276) * _3291))) * _3305;
                        float _4679 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                        float _3327 = (((_3277 * 3.1415927410125732421875) * (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0)))) / ((_3299 * _3299) * ((_3242 * 2.1991131305694580078125) + 3.141590118408203125))) * _3231;
                        _3079 = (_3246 * _3194.x) + _3152;
                        _3080 = (_3246 * _3194.y) + _3153;
                        _3081 = (_3246 * _3194.z) + _3154;
                        _3076 = (_3327 * _3211.x) + _3149;
                        _3077 = (_3327 * _3211.y) + _3150;
                        _3078 = (_3327 * _3211.z) + _3151;
                        if (_3156 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3149 = _3076;
                            _3150 = _3077;
                            _3151 = _3078;
                            _3152 = _3079;
                            _3153 = _3080;
                            _3154 = _3081;
                            _3155 = _3156;
                        }
                    }
                    frontier_phi_66_pred = _3076;
                    frontier_phi_66_pred_1 = _3081;
                    frontier_phi_66_pred_2 = _3080;
                    frontier_phi_66_pred_3 = _3079;
                    frontier_phi_66_pred_4 = _3078;
                    frontier_phi_66_pred_5 = _3077;
                }
                _2852 = frontier_phi_66_pred;
                _2862 = frontier_phi_66_pred_1;
                _2860 = frontier_phi_66_pred_2;
                _2858 = frontier_phi_66_pred_3;
                _2856 = frontier_phi_66_pred_4;
                _2854 = frontier_phi_66_pred_5;
                uint _3011 = _3010 + 1u;
                if (_3011 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3004 = _2852;
                    _3005 = _2854;
                    _3006 = _2856;
                    _3007 = _2858;
                    _3008 = _2860;
                    _3009 = _2862;
                    _3010 = _3011;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2851 = _2852;
            _2853 = _2854;
            _2855 = _2856;
            _2857 = _2858;
            _2859 = _2860;
            _2861 = _2862;
        }
        uvec4 _2865 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2866 = _2865.z;
        uint _2868 = (_2866 >> 8u) & 15u;
        float _2972;
        float _2974;
        float _2976;
        float _2978;
        float _2980;
        float _2982;
        if (((4294967295u << _2868) & _2750) == 0u)
        {
            _2972 = _2851;
            _2974 = _2853;
            _2976 = _2855;
            _2978 = _2857;
            _2980 = _2859;
            _2982 = _2861;
        }
        else
        {
            float _2997 = inversesqrt(dot(vec3(_2704, _2705, _2706), vec3(_2704, _2705, _2706)));
            float _2998 = _2997 * _2704;
            float _2999 = _2997 * _2705;
            float _3000 = _2997 * _2706;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2868 < ((_2866 >> 12u) & 15u))
            {
                float _2973;
                float _2975;
                float _2977;
                float _2979;
                float _2981;
                float _2983;
                float _3132 = _2851;
                float _3133 = _2853;
                float _3134 = _2855;
                float _3135 = _2857;
                float _3136 = _2859;
                float _3137 = _2861;
                uint _3138 = _2868;
                uint _3147;
                bool _3148;
                for (;;)
                {
                    _3147 = texelFetch(g_lightClassification, int((((_2744 << 5u) + (_2730 << 9u)) + (_3138 << 2u)) >> 2u)).x;
                    _3148 = _3147 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3148)
                    {
                        frontier_phi_77_pred = _3137;
                        frontier_phi_77_pred_1 = _3136;
                        frontier_phi_77_pred_2 = _3135;
                        frontier_phi_77_pred_3 = _3134;
                        frontier_phi_77_pred_4 = _3133;
                        frontier_phi_77_pred_5 = _3132;
                    }
                    else
                    {
                        float _3341;
                        float _3342;
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3634;
                        float _3635;
                        float _3636;
                        float _3637;
                        float _3638;
                        float _3639;
                        float _3354 = _3132;
                        float _3355 = _3133;
                        float _3356 = _3134;
                        float _3357 = _3135;
                        float _3358 = _3136;
                        float _3359 = _3137;
                        uint _3360 = _3147;
                        uint _3361;
                        vec4 _3386;
                        float _3387;
                        vec4 _3402;
                        vec3 _3414;
                        vec4 _3429;
                        vec4 _3444;
                        float _3490;
                        bool _3491;
                        for (;;)
                        {
                            uint _3371 = ((_3138 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3360));
                            _3361 = (_3360 + 4294967295u) & _3360;
                            uint _3373 = _3371 * 40u;
                            _3386 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3373)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 3u)).x));
                            _3387 = _3386.w;
                            uint _3389 = (_3371 * 40u) + 4u;
                            _3402 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3389)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 3u)).x));
                            uint _3404 = (_3371 * 40u) + 8u;
                            _3414 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3404)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 2u)).x));
                            uint _3416 = (_3371 * 40u) + 16u;
                            _3429 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3416)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 3u)).x));
                            uint _3431 = (_3371 * 40u) + 20u;
                            _3444 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3431)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 3u)).x));
                            uint _3446 = (_3371 * 40u) + 24u;
                            vec4 _3459 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3446)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 3u)).x));
                            uint _3465 = (_3371 * 40u) + 28u;
                            vec4 _3478 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 3u)).x));
                            _3490 = fma(_2706, _3478.z, fma(_2705, _3478.y, _3478.x * _2704)) + _3478.w;
                            _3491 = !((fma(_2706, _3459.z, fma(_2705, _3459.y, _3459.x * _2704)) + _3459.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3491)
                            {
                                float _3518 = _3386.x - _2704;
                                float _3519 = _3386.y - _2705;
                                float _3520 = _3386.z - _2706;
                                float _3521 = dot(vec3(_3518, _3519, _3520), vec3(_3518, _3519, _3520));
                                float _3524 = inversesqrt(_3521);
                                float _3525 = _3524 * _3518;
                                float _3526 = _3524 * _3519;
                                float _3527 = _3524 * _3520;
                                float _3531 = 1.0 - (_3521 / (_3387 * _3387));
                                float _4690 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0));
                                float _3532 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
                                float _3536 = sqrt(_3521) * _3402.w;
                                float _3538 = 1.39999997615814208984375 / (_3536 + 1.39999997615814208984375);
                                float _3539 = _3538 * _3538;
                                float _3542 = ((1.0 - _3539) * dot(vec3(_3525, _3526, _3527), vec3(_915, _918, _921))) + _3539;
                                float _3545 = _3536 * _3536;
                                float _3549 = (fma(_2706, _3429.z, fma(_2705, _3429.y, _3429.x * _2704)) + _3429.w) / _3490;
                                float _3550 = (fma(_2706, _3444.z, fma(_2705, _3444.y, _3444.x * _2704)) + _3444.w) / _3490;
                                float _3554 = 1.0 - dot(vec2(_3549, _3550), vec2(_3549, _3550));
                                float _4706 = isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0));
                                float _3555 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
                                float _3556 = _3555 * (((isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0))) * _3532) / ((_3545 * 0.699999988079071044921875) + 1.0));
                                float _3568 = exp2(log2(1.0 / ((_3545 * 3.5) + 5.0)) * 0.25);
                                float _3569 = 1.0 - _990;
                                float _3576 = sqrt(1.0 - ((1.0 - (_3569 * _3569)) * (1.0 - (_3568 * _3568))));
                                float _3577 = _3576 * _3576;
                                float _3578 = _3577 * _3577;
                                float _3579 = _3525 - _2998;
                                float _3580 = _3526 - _2999;
                                float _3581 = _3527 - _3000;
                                float _3585 = inversesqrt(dot(vec3(_3579, _3580, _3581), vec3(_3579, _3580, _3581)));
                                float _3589 = dot(vec3(_915, _918, _921), vec3((-0.0) - _2998, (-0.0) - _2999, (-0.0) - _3000));
                                float _4717 = isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0));
                                float _3592 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                                float _3593 = dot(vec3(_915, _918, _921), vec3(_3585 * _3579, _3585 * _3580, _3585 * _3581));
                                float _4728 = isnan(0.0) ? _3593 : (isnan(_3593) ? 0.0 : max(_3593, 0.0));
                                float _3596 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
                                float _3600 = ((_3596 * _3596) * (_3578 + (-1.0))) + 1.0;
                                float _3601 = _3538 * _3577;
                                float _3602 = _3601 * _3601;
                                float _3608 = ((1.0 - _3602) * dot(vec3(_915, _918, _921), vec3(_3525, _3526, _3527))) + _3602;
                                float _4739 = isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0));
                                float _3609 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                                float _3610 = 1.0 - _3577;
                                float _3620 = (0.5 / (((_3609 * ((_3592 * _3610) + _3577)) + 9.9999999392252902907785028219223e-09) + (((_3609 * _3610) + _3577) * _3592))) * _3609;
                                float _4750 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                                float _3630 = (_3555 * _3532) * (((_3578 * 3.1415927410125732421875) * (isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0)))) / ((_3600 * _3600) * ((_3545 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3556 * _3402.y;
                                frontier_phi_83_pred_1 = _3556 * _3402.x;
                                frontier_phi_83_pred_2 = _3630 * _3414.z;
                                frontier_phi_83_pred_3 = _3630 * _3414.y;
                                frontier_phi_83_pred_4 = _3630 * _3414.x;
                                frontier_phi_83_pred_5 = _3556 * _3402.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3638 = frontier_phi_83_pred;
                            _3637 = frontier_phi_83_pred_1;
                            _3636 = frontier_phi_83_pred_2;
                            _3635 = frontier_phi_83_pred_3;
                            _3634 = frontier_phi_83_pred_4;
                            _3639 = frontier_phi_83_pred_5;
                            _3344 = _3637 + _3357;
                            _3345 = _3638 + _3358;
                            _3346 = _3639 + _3359;
                            _3341 = _3634 + _3354;
                            _3342 = _3635 + _3355;
                            _3343 = _3636 + _3356;
                            if (_3361 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3354 = _3341;
                                _3355 = _3342;
                                _3356 = _3343;
                                _3357 = _3344;
                                _3358 = _3345;
                                _3359 = _3346;
                                _3360 = _3361;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3346;
                        frontier_phi_77_pred_1 = _3345;
                        frontier_phi_77_pred_2 = _3344;
                        frontier_phi_77_pred_3 = _3343;
                        frontier_phi_77_pred_4 = _3342;
                        frontier_phi_77_pred_5 = _3341;
                    }
                    _2983 = frontier_phi_77_pred;
                    _2981 = frontier_phi_77_pred_1;
                    _2979 = frontier_phi_77_pred_2;
                    _2977 = frontier_phi_77_pred_3;
                    _2975 = frontier_phi_77_pred_4;
                    _2973 = frontier_phi_77_pred_5;
                    uint _3139 = _3138 + 1u;
                    if (_3139 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3132 = _2973;
                        _3133 = _2975;
                        _3134 = _2977;
                        _3135 = _2979;
                        _3136 = _2981;
                        _3137 = _2983;
                        _3138 = _3139;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2977;
                frontier_phi_58_59_ladder_1 = _2983;
                frontier_phi_58_59_ladder_2 = _2981;
                frontier_phi_58_59_ladder_3 = _2979;
                frontier_phi_58_59_ladder_4 = _2975;
                frontier_phi_58_59_ladder_5 = _2973;
            }
            else
            {
                frontier_phi_58_59_ladder = _2855;
                frontier_phi_58_59_ladder_1 = _2861;
                frontier_phi_58_59_ladder_2 = _2859;
                frontier_phi_58_59_ladder_3 = _2857;
                frontier_phi_58_59_ladder_4 = _2853;
                frontier_phi_58_59_ladder_5 = _2851;
            }
            _2972 = frontier_phi_58_59_ladder_5;
            _2974 = frontier_phi_58_59_ladder_4;
            _2976 = frontier_phi_58_59_ladder;
            _2978 = frontier_phi_58_59_ladder_3;
            _2980 = frontier_phi_58_59_ladder_2;
            _2982 = frontier_phi_58_59_ladder_1;
        }
        float _2987 = isnan(1.0) ? _974 : (isnan(_974) ? 1.0 : min(_974, 1.0));
        _2763 = (_2987 * _2978) + _2196;
        _2765 = (_2987 * _2980) + _2198;
        _2767 = (_2987 * _2982) + _2200;
        _2769 = ((_2972 * _958) * _2987) + _2544;
        _2771 = ((_2974 * _960) * _2987) + _2546;
        _2773 = ((_2976 * _961) * _2987) + _2548;
    }
    else
    {
        _2763 = _2196;
        _2765 = _2198;
        _2767 = _2200;
        _2769 = _2544;
        _2771 = _2546;
        _2773 = _2548;
    }
    float _4766 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _4777 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _4788 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _2790 = ((isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0))) * (_2763 + ((isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))) * _974))) + ((_2769 + ((isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0))) * _1813)) * cbPerFrame._m0[3u].x);
    float _2791 = ((isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0))) * (_2765 + ((isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))) * _974))) + ((_2771 + ((isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0))) * _1813)) * cbPerFrame._m0[3u].x);
    float _2792 = ((isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0))) * (_2767 + ((isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))) * _974))) + ((_2773 + ((isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0))) * _1813)) * cbPerFrame._m0[3u].x);
    uint _2793 = _261 + 6u;
    float _2801 = _896 / cbSceneParam._m0[86u].x;
    float _2802 = _897 / cbSceneParam._m0[86u].y;
    vec4 _2816 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2801, _2802, (log2((isnan(cbSceneParam._m0[77u].w) ? _819 : (isnan(_819) ? cbSceneParam._m0[77u].w : min(_819, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2818 = _2816.x;
    float _2819 = _2816.y;
    float _2820 = _2816.z;
    float _2821 = _2816.w;
    float _2914;
    float _2916;
    float _2918;
    float _2920;
    if (_819 > cbSceneParam._m0[78u].w)
    {
        float _2876 = isnan(_819) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _819 : min(cbSceneParam._m0[80u].w, _819));
        float _2877 = _2876 / _819;
        float _2888 = _2877 * _869;
        float _2889 = _870 * _2877;
        float _2890 = (-0.0) - _2889;
        float _2892 = _2877 * _871;
        float _2894 = (cbSceneParam._m0[77u].w * _2890) / _2876;
        float _2895 = _2894 + cbSceneParam._m0[79u].w;
        float _2896 = cbSceneParam._m0[79u].w - _2889;
        float _2902 = sqrt(((_2888 * _2888) + (_2889 * _2889)) + (_2892 * _2892));
        float _2905 = (1.0 - (cbSceneParam._m0[77u].w / _2876)) * _2902;
        float _2910 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2912 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3089;
        if (abs((_2890 - _2894) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3089 = ((((_2895 > 0.0) ? exp2(_2910 * _2895) : (2.0 - exp2(_2912 * _2895))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2905;
        }
        else
        {
            float _3033 = 1.0 / cbSceneParam._m0[80u].x;
            float _3034 = isnan(_2896) ? _2895 : (isnan(_2895) ? _2896 : max(_2895, _2896));
            float _3035 = isnan(_2896) ? _2895 : (isnan(_2895) ? _2896 : min(_2895, _2896));
            float _3044 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : min(_3034, 0.0));
            float _3045 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : min(_3035, 0.0));
            _3089 = ((abs(_2902 / _2890) * cbSceneParam._m0[80u].y) * ((((_3044 - _3045) * 2.0) - ((exp2(_2910 * (isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0)))) - exp2(_2910 * (isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0))))) * _3033)) - ((exp2(_2912 * _3044) - exp2(_2912 * _3045)) * _3033))) + (_2905 * cbSceneParam._m0[80u].z);
        }
        vec4 _3091 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2801, _2802, 1.0), 0.0);
        float _3100 = exp2((_3089 * (-1.44269502162933349609375)) * (1.0 - _3091.w));
        float _3101 = log2(_3100);
        float _3117 = log2(_2821);
        _2914 = (exp2(_3117 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3101 * cbSceneParam._m0[78u].x)) * _3091.x) / cbSceneParam._m0[78u].x)) + _2818;
        _2916 = (exp2(_3117 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3101 * cbSceneParam._m0[78u].y)) * _3091.y) / cbSceneParam._m0[78u].y)) + _2819;
        _2918 = (exp2(_3117 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3101 * cbSceneParam._m0[78u].z)) * _3091.z) / cbSceneParam._m0[78u].z)) + _2820;
        _2920 = _3100 * _2821;
    }
    else
    {
        _2914 = _2818;
        _2916 = _2819;
        _2918 = _2820;
        _2920 = _2821;
    }
    bool _3127;
    vec4 _2930;
    vec4 _2952;
    float _2954;
    float _2958;
    float _2959;
    float _2960;
    float _2961;
    bool _2971;
    for (;;)
    {
        _2930 = cbMatDynParam._m0[0u];
        float _2932 = roundEven(_2930.y);
        bool _2933 = _2932 == 3.0;
        float _2934 = log2(_2920);
        float _2941 = exp2(_2934 * cbSceneParam._m0[78u].x) * _2790;
        float _2942 = exp2(_2934 * cbSceneParam._m0[78u].y) * _2791;
        float _2943 = exp2(_2934 * cbSceneParam._m0[78u].z) * _2792;
        float _2950 = _885 + (-0.5);
        _2952 = cbMtdParam._m0[1u];
        _2954 = _2952.y * _2950;
        float _2957 = (_2932 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2958 = _2957 * (_2933 ? _2941 : (_2941 + (cbSceneParam._m0[72u].w * _2914)));
        _2959 = _2957 * (_2933 ? _2942 : (_2942 + (cbSceneParam._m0[72u].w * _2916)));
        _2960 = _2957 * (_2933 ? _2943 : (_2943 + (cbSceneParam._m0[72u].w * _2918)));
        _2961 = _2950 * 0.999000012874603271484375;
        _2971 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2971)
        {
            if ((cbInstanceData._m0[_261 + 7u].x + _2961) < 0.5)
            {
                _3127 = true;
                break;
            }
        }
        uint _3068 = _934 + uint(_2930.w);
        if ((cbInstanceData._m0[_3068].w < 1.0) && ((cbInstanceData._m0[_3068].w + _2961) < 0.5))
        {
            _3127 = true;
            break;
        }
        if ((_2954 + 1.0) < _2952.x)
        {
            _3127 = true;
            break;
        }
        _3127 = false;
        break;
    }
    float _3332;
    if (_3127)
    {
        discard_state = true;
        _3332 = 0.0;
    }
    else
    {
        _3332 = cbInstanceData._m0[_2793].w;
    }
    SV_Target.x = _2958;
    SV_Target.y = _2959;
    SV_Target.z = _2960;
    SV_Target.w = _3332;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2793].w;
    discard_exit();
}


