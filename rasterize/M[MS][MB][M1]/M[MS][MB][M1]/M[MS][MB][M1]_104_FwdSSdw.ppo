#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1339;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _236 = _235 * _227;
    float _237 = _235 * _228;
    float _238 = _235 * _229;
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = _242 * NORMAL.x;
    float _244 = _242 * NORMAL.y;
    float _245 = _242 * NORMAL.z;
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = _249 * TANGENT.x;
    float _251 = _249 * TANGENT.y;
    float _252 = _249 * TANGENT.z;
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _360 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _362 = _360.x;
    float _374 = dot(vec4(_362, _360.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _391 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_362 - _374) * cbMtdParam._m0[24u].y) + _374) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3689 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _392 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
    float _399 = (_392 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _400 = (_392 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _401 = (_392 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _419 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _274) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _275) + cbTextureTilingScale._m0[20u].w));
    vec4 _446 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _463 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _465 = _463.x;
    float _466 = _463.y;
    float _467 = _463.z;
    float _476 = ((_446.z - _467) * _392) + _467;
    float _479 = ((((_446.x - _465) * _392) + _465) * 2.0) + (-1.0);
    float _480 = ((((_446.y - _466) * _392) + _466) * 2.0) + (-1.0);
    float _481 = dot(vec2(_479, _480), vec2(_479, _480));
    float _3700 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _486 = sqrt(1.0 - (isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))));
    float _489 = _479 + ((((_419.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _490 = _480 + ((((_419.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _493 = fma(_486, _243, fma(_490, _250, _489 * _236));
    float _496 = fma(_486, _244, fma(_490, _251, _489 * _237));
    float _499 = fma(_486, _245, fma(_490, _252, _489 * _238));
    float _503 = inversesqrt(dot(vec3(_493, _496, _499), vec3(_493, _496, _499)));
    vec4 _519 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _545 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _547 = _545.x;
    float _548 = 1.0 - _547;
    float _554 = (cbMtdParam._m0[19u].x + dot(vec4(_503 * _493, _503 * _496, _503 * _499, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_547 - _548) * cbMtdParam._m0[24u].z) + _548) * cbMtdParam._m0[21u].z);
    float _3711 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _555 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
    float _557 = (-0.0) - cbMtdParam._m0[24u].x;
    float _559 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _560 = isnan(1.0) ? _559 : (isnan(_559) ? 1.0 : min(_559, 1.0));
    float _567 = _555 - ((_555 * TEXCOORD_8.x) * _560);
    float _568 = _555 - ((_555 * TEXCOORD_8.y) * _560);
    float _569 = _555 - ((_555 * TEXCOORD_8.z) * _560);
    float _576 = (_567 * (cbMtdParam._m0[17u].x - _399)) + _399;
    float _577 = (_568 * (cbMtdParam._m0[17u].y - _400)) + _400;
    float _578 = (_569 * (cbMtdParam._m0[17u].z - _401)) + _401;
    vec4 _590 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _592 = _590.x;
    float _593 = 1.0 - _592;
    float _621 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_592 - _593) * cbMtdParam._m0[24u].w) + _593) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3732 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _622 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
    float _630 = ((((cbMtdParam._m0[10u].x - _576) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _622) + _576;
    float _631 = ((((cbMtdParam._m0[10u].y - _577) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _622) + _577;
    float _632 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _578)) * _622) + _578;
    vec4 _658 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _660 = _658.x;
    float _678 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _274) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _275) + cbTextureTilingScale._m0[9u].w)).x - _660) * _392) + _660;
    float _682 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _678) * cbMtdParam._m0[19u].z) + _678;
    float _684 = _682 - (_682 * _567);
    float _686 = _684 - (_684 * _622);
    float _691 = (((_419.z - _476) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _476;
    vec4 _705 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _712 = (_705.x * 2.0) + (-1.0);
    float _713 = (_705.y * 2.0) + (-1.0);
    float _714 = dot(vec2(_712, _713), vec2(_712, _713));
    float _3743 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _722 = ((_705.z - _691) * _567) + _691;
    float _725 = ((cbMtdParam._m0[23u].y - _722) * _622) + _722;
    vec4 _744 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _750 = (_744.x * 2.0) + (-1.0);
    float _751 = (_744.y * 2.0) + (-1.0);
    float _752 = dot(vec2(_750, _751), vec2(_750, _751));
    float _3754 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _767 = ((sqrt(1.0 - (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0)))) - _486) * _569) + _486;
    float _770 = (((_712 - _489) * _567) + _489) + (cbMtdParam._m0[21u].x * _489);
    float _771 = (((_713 - _490) * _568) + _490) + (cbMtdParam._m0[21u].x * _490);
    float _782 = (((_750 - _770) + (_770 * cbMtdParam._m0[22u].z)) * _622) + _770;
    float _783 = (((_751 - _771) + (_771 * cbMtdParam._m0[22u].z)) * _622) + _771;
    float _784 = (_622 * (sqrt(1.0 - (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0)))) - _767)) + _767;
    float _786 = cbMtdParam._m0[22u].x + _519.w;
    float _789 = fma(_784, _243, fma(_783, _250, _782 * _236));
    float _792 = fma(_784, _244, fma(_783, _251, _782 * _237));
    float _795 = fma(_784, _245, fma(_783, _252, _782 * _238));
    float _799 = inversesqrt(dot(vec3(_789, _792, _795), vec3(_789, _792, _795)));
    float _800 = _799 * _789;
    float _801 = _799 * _792;
    float _802 = _799 * _795;
    float _3765 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _803 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
    float _3776 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _3787 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _3798 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _3809 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _3820 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _808 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _822 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _862 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _872 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _862);
    float _873 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _862);
    float _874 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _862);
    float _878 = inversesqrt(dot(vec3(_872, _873, _874), vec3(_872, _873, _874)));
    float _879 = _872 * _878;
    float _880 = _873 * _878;
    float _881 = _874 * _878;
    float _887 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _888 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _906 = fma(_802, cbSceneParam._m0[5u].z, fma(_801, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _800));
    float _909 = fma(_802, cbSceneParam._m0[6u].z, fma(_801, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _800));
    float _912 = fma(_802, cbSceneParam._m0[7u].z, fma(_801, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _800));
    uint _926 = (_255 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _932 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0)))) * cbInstanceData._m0[_926].x;
    float _933 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0)))) * cbInstanceData._m0[_926].y;
    float _934 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0)))) * cbInstanceData._m0[_926].z;
    float _3831 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _935 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _3842 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _936 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _3853 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _937 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _938 = 1.0 - _808;
    float _939 = _935 * _938;
    float _940 = _936 * _938;
    float _941 = _937 * _938;
    float _946 = (_935 + (-0.039999999105930328369140625)) * _808;
    float _947 = (_936 + (-0.039999999105930328369140625)) * _808;
    float _948 = (_937 + (-0.039999999105930328369140625)) * _808;
    float _949 = _946 + 0.039999999105930328369140625;
    float _951 = _947 + 0.039999999105930328369140625;
    float _952 = _948 + 0.039999999105930328369140625;
    vec4 _961 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _887, cbSceneParam._m0[86u].y * _888));
    float _965 = ((isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) * TEXCOORD_5.w) * _961.x;
    float _966 = dot(vec3(_800, _801, _802), vec3(_879, _880, _881));
    float _969 = _966 * 2.0;
    float _973 = (_969 * _800) - _879;
    float _974 = (_969 * _801) - _880;
    float _975 = (_969 * _802) - _881;
    float _979 = abs(dot(vec3(_879, _880, _881), vec3(_800, _801, _802)));
    float _3864 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _981 = sqrt(_803);
    float _994 = exp2((_981 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_981 * 3.0));
    float _1000 = (1.0 - _994) * ((_981 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1001 = _994 * _981;
    float _1029 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1033 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1037 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1338;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1063 = fma(_1037, cbModelParam._m0[26u].z, fma(_1033, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1029));
        float _1067 = fma(_1037, cbModelParam._m0[27u].z, fma(_1033, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1029));
        float _1071 = fma(_1037, cbModelParam._m0[28u].z, fma(_1033, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1029));
        float _1096 = _1029 + _800;
        float _1097 = _1033 + _801;
        float _1098 = _1037 + _802;
        float _1108 = fma(_1098, cbModelParam._m0[26u].z, fma(_1097, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1096)) - _1063;
        float _1109 = fma(_1098, cbModelParam._m0[27u].z, fma(_1097, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1096)) - _1067;
        float _1110 = fma(_1098, cbModelParam._m0[28u].z, fma(_1097, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1096)) - _1071;
        float _1114 = inversesqrt(dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110)));
        float _1127 = ((_1114 * _1108) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1063 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1128 = ((_1114 * _1109) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1067 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1129 = ((_1114 * _1110) / cbModelParam._m0[34u].z) + ((((((_1071 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1127, _1128, _1129), 0.0);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1127, _1128, _1129), 0.0);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1127, _1128, _1129), 0.0);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1127, _1128, _1129), 0.0);
        float _1166 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1132.x + (-0.5));
        float _1168 = _1166 * (_1132.y + (-0.5));
        float _1169 = _1166 * (_1132.z + (-0.5));
        float _1176 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1139.x + (-0.5));
        float _1178 = _1176 * (_1139.y + (-0.5));
        float _1179 = _1176 * (_1139.z + (-0.5));
        float _1186 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1146.x + (-0.5));
        float _1188 = _1186 * (_1146.y + (-0.5));
        float _1189 = _1186 * (_1146.z + (-0.5));
        float _1196 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1153.x + (-0.5));
        float _1198 = _1196 * (_1153.y + (-0.5));
        float _1199 = _1196 * (_1153.z + (-0.5));
        float _1200 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1201 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1202 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1203 = _1167 * 0.5;
        float _1204 = _1177 * 0.5;
        float _1205 = _1187 * 0.5;
        float _1206 = dot(vec3(_1203, _1204, _1205), vec3(_1203, _1204, _1205));
        float _1211 = (_1206 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1206);
        float _1220 = (dot(vec3(_800, _801, _802), vec3(_1211 * _1203, _1211 * _1204, _1211 * _1205)) + 1.0) * 0.5;
        float _3890 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1230 = sqrt(((_1204 * _1204) + (_1203 * _1203)) + (_1205 * _1205)) / (_1200 + 9.9999997473787516355514526367188e-06);
        float _3901 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1232 = _1231 * 2.0;
        float _1236 = (1.0 - _1231) / (_1231 + 1.0);
        float _3912 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1246 = ((((1.0 - _1237) * (_1232 + 2.0)) * exp2(log2(isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * (_1232 + 1.0))) + _1237) * _1200;
        float _1247 = _1168 * 0.5;
        float _1248 = _1178 * 0.5;
        float _1249 = _1188 * 0.5;
        float _1250 = dot(vec3(_1247, _1248, _1249), vec3(_1247, _1248, _1249));
        float _1255 = (_1250 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1250);
        float _1263 = (dot(vec3(_800, _801, _802), vec3(_1255 * _1247, _1255 * _1248, _1255 * _1249)) + 1.0) * 0.5;
        float _3923 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1272 = sqrt(((_1248 * _1248) + (_1247 * _1247)) + (_1249 * _1249)) / (_1201 + 9.9999997473787516355514526367188e-06);
        float _3934 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1274 = _1273 * 2.0;
        float _1278 = (1.0 - _1273) / (_1273 + 1.0);
        float _3945 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1288 = ((((1.0 - _1279) * (_1274 + 2.0)) * exp2(log2(isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * (_1274 + 1.0))) + _1279) * _1201;
        float _1289 = _1169 * 0.5;
        float _1290 = _1179 * 0.5;
        float _1291 = _1189 * 0.5;
        float _1292 = dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291));
        float _1297 = (_1292 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1292);
        float _1305 = (dot(vec3(_800, _801, _802), vec3(_1297 * _1289, _1297 * _1290, _1297 * _1291)) + 1.0) * 0.5;
        float _3956 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1314 = sqrt(((_1290 * _1290) + (_1289 * _1289)) + (_1291 * _1291)) / (_1202 + 9.9999997473787516355514526367188e-06);
        float _3967 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1316 = _1315 * 2.0;
        float _1320 = (1.0 - _1315) / (_1315 + 1.0);
        float _3978 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1330 = ((((1.0 - _1321) * (_1316 + 2.0)) * exp2(log2(isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * (_1316 + 1.0))) + _1321) * _1202;
        _1338 = _1169;
        _1340 = _1168;
        _1341 = _1167;
        _1342 = _1179;
        _1343 = _1178;
        _1344 = _1177;
        _1345 = _1189;
        _1346 = _1188;
        _1347 = _1187;
        _1348 = _1202;
        _1349 = _1201;
        _1350 = _1200;
        _1351 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)));
        _1352 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)));
        _1353 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)));
    }
    else
    {
        _1338 = _1339;
        _1340 = _1339;
        _1341 = _1339;
        _1342 = _1339;
        _1343 = _1339;
        _1344 = _1339;
        _1345 = _1339;
        _1346 = _1339;
        _1347 = _1339;
        _1348 = _1339;
        _1349 = _1339;
        _1350 = _1339;
        _1351 = 0.0;
        _1352 = 0.0;
        _1353 = 0.0;
    }
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1378 = fma(_1037, cbModelParam._m0[30u].z, fma(_1033, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1029));
        float _1382 = fma(_1037, cbModelParam._m0[31u].z, fma(_1033, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1029));
        float _1386 = fma(_1037, cbModelParam._m0[32u].z, fma(_1033, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1029));
        float _1409 = _1029 + _800;
        float _1410 = _1033 + _801;
        float _1411 = _1037 + _802;
        float _1421 = fma(_1411, cbModelParam._m0[30u].z, fma(_1410, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1409)) - _1378;
        float _1422 = fma(_1411, cbModelParam._m0[31u].z, fma(_1410, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1409)) - _1382;
        float _1423 = fma(_1411, cbModelParam._m0[32u].z, fma(_1410, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1409)) - _1386;
        float _1427 = inversesqrt(dot(vec3(_1421, _1422, _1423), vec3(_1421, _1422, _1423)));
        float _1440 = ((_1427 * _1421) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1378 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1441 = ((_1427 * _1422) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1382 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1442 = ((_1427 * _1423) / cbModelParam._m0[35u].z) + ((((((_1386 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1444 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1440, _1441, _1442), 0.0);
        vec4 _1451 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1440, _1441, _1442), 0.0);
        vec4 _1458 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1440, _1441, _1442), 0.0);
        vec4 _1465 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1440, _1441, _1442), 0.0);
        float _1477 = exp2((_1444.w + (-0.5)) * 20.0) * 2.0;
        float _1478 = _1477 * (_1444.x + (-0.5));
        float _1479 = _1477 * (_1444.y + (-0.5));
        float _1480 = _1477 * (_1444.z + (-0.5));
        float _1487 = exp2((_1451.w + (-0.5)) * 20.0) * 2.0;
        float _1488 = _1487 * (_1451.x + (-0.5));
        float _1489 = _1487 * (_1451.y + (-0.5));
        float _1490 = _1487 * (_1451.z + (-0.5));
        float _1497 = exp2((_1458.w + (-0.5)) * 20.0) * 2.0;
        float _1498 = _1497 * (_1458.x + (-0.5));
        float _1499 = _1497 * (_1458.y + (-0.5));
        float _1500 = _1497 * (_1458.z + (-0.5));
        float _1507 = exp2((_1465.w + (-0.5)) * 20.0) * 2.0;
        float _1508 = _1507 * (_1465.x + (-0.5));
        float _1509 = _1507 * (_1465.y + (-0.5));
        float _1510 = _1507 * (_1465.z + (-0.5));
        float _1511 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1512 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1513 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1514 = _1478 * 0.5;
        float _1515 = _1488 * 0.5;
        float _1516 = _1498 * 0.5;
        float _1517 = dot(vec3(_1514, _1515, _1516), vec3(_1514, _1515, _1516));
        float _1522 = (_1517 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1517);
        float _1530 = (dot(vec3(_800, _801, _802), vec3(_1522 * _1514, _1522 * _1515, _1522 * _1516)) + 1.0) * 0.5;
        float _4019 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1539 = sqrt(((_1515 * _1515) + (_1514 * _1514)) + (_1516 * _1516)) / (_1511 + 9.9999997473787516355514526367188e-06);
        float _4030 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1541 = _1540 * 2.0;
        float _1545 = (1.0 - _1540) / (_1540 + 1.0);
        float _4041 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1555 = ((((1.0 - _1546) * (_1541 + 2.0)) * exp2(log2(isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_1541 + 1.0))) + _1546) * _1511;
        float _1556 = _1479 * 0.5;
        float _1557 = _1489 * 0.5;
        float _1558 = _1499 * 0.5;
        float _1559 = dot(vec3(_1556, _1557, _1558), vec3(_1556, _1557, _1558));
        float _1564 = (_1559 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1559);
        float _1572 = (dot(vec3(_800, _801, _802), vec3(_1564 * _1556, _1564 * _1557, _1564 * _1558)) + 1.0) * 0.5;
        float _4052 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1581 = sqrt(((_1557 * _1557) + (_1556 * _1556)) + (_1558 * _1558)) / (_1512 + 9.9999997473787516355514526367188e-06);
        float _4063 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1583 = _1582 * 2.0;
        float _1587 = (1.0 - _1582) / (_1582 + 1.0);
        float _4074 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1597 = ((((1.0 - _1588) * (_1583 + 2.0)) * exp2(log2(isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_1583 + 1.0))) + _1588) * _1512;
        float _1598 = _1480 * 0.5;
        float _1599 = _1490 * 0.5;
        float _1600 = _1500 * 0.5;
        float _1601 = dot(vec3(_1598, _1599, _1600), vec3(_1598, _1599, _1600));
        float _1606 = (_1601 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1601);
        float _1614 = (dot(vec3(_800, _801, _802), vec3(_1606 * _1598, _1606 * _1599, _1606 * _1600)) + 1.0) * 0.5;
        float _4085 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1623 = sqrt(((_1599 * _1599) + (_1598 * _1598)) + (_1600 * _1600)) / (_1513 + 9.9999997473787516355514526367188e-06);
        float _4096 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1625 = _1624 * 2.0;
        float _1629 = (1.0 - _1624) / (_1624 + 1.0);
        float _4107 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1639 = ((((1.0 - _1630) * (_1625 + 2.0)) * exp2(log2(isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (_1625 + 1.0))) + _1630) * _1513;
        _1647 = _1480;
        _1648 = _1479;
        _1649 = _1478;
        _1650 = _1490;
        _1651 = _1489;
        _1652 = _1488;
        _1653 = _1500;
        _1654 = _1499;
        _1655 = _1498;
        _1656 = _1513;
        _1657 = _1512;
        _1658 = _1511;
        _1659 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)));
        _1660 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)));
        _1661 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)));
    }
    else
    {
        _1647 = _1339;
        _1648 = _1339;
        _1649 = _1339;
        _1650 = _1339;
        _1651 = _1339;
        _1652 = _1339;
        _1653 = _1339;
        _1654 = _1339;
        _1655 = _1339;
        _1656 = _1339;
        _1657 = _1339;
        _1658 = _1339;
        _1659 = 0.0;
        _1660 = 0.0;
        _1661 = 0.0;
    }
    float _1671 = (cbModelParam._m0[1u].x * (_1659 - _1351)) + _1351;
    float _1672 = (cbModelParam._m0[1u].x * (_1660 - _1352)) + _1352;
    float _1673 = (cbModelParam._m0[1u].x * (_1661 - _1353)) + _1353;
    float _1694 = fma(_1673, cbSceneParam._m0[89u].z, fma(_1672, cbSceneParam._m0[89u].y, _1671 * cbSceneParam._m0[89u].x));
    float _1697 = fma(_1673, cbSceneParam._m0[90u].z, fma(_1672, cbSceneParam._m0[90u].y, _1671 * cbSceneParam._m0[90u].x));
    float _1700 = fma(_1673, cbSceneParam._m0[91u].z, fma(_1672, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1671));
    float _1715 = _973 * 0.5;
    float _1716 = _974 * 0.5;
    float _1717 = _975 * 0.5;
    float _1718 = dot(vec4(_1715, _1716, _1717, 1.0), vec4(_1649, _1652, _1655, _1658));
    float _1721 = dot(vec4(_1715, _1716, _1717, 1.0), vec4(_1648, _1651, _1654, _1657));
    float _1724 = dot(vec4(_1715, _1716, _1717, 1.0), vec4(_1647, _1650, _1653, _1656));
    float _1758;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1731 = dot(vec4(_1715, _1716, _1717, 1.0), vec4(_1338, _1342, _1345, _1348));
        float _1735 = dot(vec4(_1715, _1716, _1717, 1.0), vec4(_1340, _1343, _1346, _1349));
        float _1739 = dot(vec4(_1715, _1716, _1717, 1.0), vec4(_1341, _1344, _1347, _1350));
        float _1746 = dot(vec4(cbModelParam._m0[39u]), vec4(_1715, _1716, _1717, 1.0));
        _1758 = dot(vec3(isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0)), isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0)), isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1746) ? 0.0 : (isnan(0.0) ? _1746 : max(0.0, _1746))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1758 = 1.0;
    }
    float _1769;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1760 = dot(vec4(cbModelParam._m0[40u]), vec4(_1715, _1716, _1717, 1.0));
        _1769 = dot(vec3(isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)), isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0)), isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1760) ? 0.0 : (isnan(0.0) ? _1760 : max(0.0, _1760))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1769 = 1.0;
    }
    float _1773 = (_1769 * cbModelParam._m0[1u].x) + (_1758 * (1.0 - cbModelParam._m0[1u].x));
    float _1783 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _803);
    float _1784 = isnan(_1783) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1783 : min(cbModelParam._m0[25u].z, _1783));
    float _1865;
    float _1867;
    float _1869;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1832 = fma(_1037, cbModelParam._m0[13u].z, fma(_1033, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1029)) + cbModelParam._m0[13u].w;
        float _1836 = fma(_1037, cbModelParam._m0[14u].z, fma(_1033, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1029)) + cbModelParam._m0[14u].w;
        float _1840 = fma(_1037, cbModelParam._m0[15u].z, fma(_1033, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1029)) + cbModelParam._m0[15u].w;
        float _1843 = fma(_975, cbModelParam._m0[13u].z, fma(_974, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _973));
        float _1846 = fma(_975, cbModelParam._m0[14u].z, fma(_974, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _973));
        float _1849 = fma(_975, cbModelParam._m0[15u].z, fma(_974, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _973));
        float _1877;
        if (_1843 > 0.0)
        {
            _1877 = abs((1.0 - _1832) / _1843);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1843 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1832 + 1.0) / _1843);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1877 = frontier_phi_14_12_ladder;
        }
        float _2101;
        if (_1846 > 0.0)
        {
            _2101 = abs((1.0 - _1836) / _1846);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1846 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1836 + 1.0) / _1846);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2101 = frontier_phi_23_19_ladder;
        }
        float _2358;
        if (_1849 > 0.0)
        {
            _2358 = abs((1.0 - _1840) / _1849);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1849 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1840 + 1.0) / _1849);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2358 = frontier_phi_35_30_ladder;
        }
        float _2360 = isnan(_2101) ? _1877 : (isnan(_1877) ? _2101 : min(_1877, _2101));
        float _2361 = isnan(_2358) ? _2360 : (isnan(_2360) ? _2358 : min(_2360, _2358));
        float _2365 = (_2361 * _1843) + _1832;
        float _2366 = (_2361 * _1846) + _1836;
        float _2367 = (_2361 * _1849) + _1840;
        float _2368 = _2361 * 9.9999997473787516355514526367188e-05;
        float _2370 = (-1.0) - _2368;
        float _2372 = _2368 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2367 > _2372) || ((_2367 < _2370) || ((_2366 > _2372) || ((_2366 < _2370) || ((_2365 < _2370) || (_2365 > _2372))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2495 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2367, cbModelParam._m0[9u].z, fma(_2366, cbModelParam._m0[9u].y, _2365 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2367, cbModelParam._m0[10u].z, fma(_2366, cbModelParam._m0[10u].y, _2365 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2367, cbModelParam._m0[11u].z, fma(_2366, cbModelParam._m0[11u].y, _2365 * cbModelParam._m0[11u].x))), _1784);
            frontier_phi_13_35_ladder = _2495.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2495.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2495.x * cbModelParam._m0[1u].y;
        }
        _1865 = frontier_phi_13_35_ladder_2;
        _1867 = frontier_phi_13_35_ladder_1;
        _1869 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1853 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_973, _974, _975), _1784);
        _1865 = _1853.x * cbModelParam._m0[1u].y;
        _1867 = _1853.y * cbModelParam._m0[1u].y;
        _1869 = _1853.z * cbModelParam._m0[1u].y;
    }
    float _1873 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _803);
    float _1874 = isnan(_1873) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1873 : min(cbModelParam._m0[25u].w, _1873));
    float _1964;
    float _1966;
    float _1968;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1928 = fma(_1037, cbModelParam._m0[21u].z, fma(_1033, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1029)) + cbModelParam._m0[21u].w;
        float _1932 = fma(_1037, cbModelParam._m0[22u].z, fma(_1033, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1029)) + cbModelParam._m0[22u].w;
        float _1936 = fma(_1037, cbModelParam._m0[23u].z, fma(_1033, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1029)) + cbModelParam._m0[23u].w;
        float _1939 = fma(_975, cbModelParam._m0[21u].z, fma(_974, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _973));
        float _1942 = fma(_975, cbModelParam._m0[22u].z, fma(_974, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _973));
        float _1945 = fma(_975, cbModelParam._m0[23u].z, fma(_974, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _973));
        float _2106;
        if (_1939 > 0.0)
        {
            _2106 = abs((1.0 - _1928) / _1939);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1939 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1928 + 1.0) / _1939);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2106 = frontier_phi_25_21_ladder;
        }
        float _2385;
        if (_1942 > 0.0)
        {
            _2385 = abs((1.0 - _1932) / _1942);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1942 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1932 + 1.0) / _1942);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2385 = frontier_phi_37_32_ladder;
        }
        float _2598;
        if (_1945 > 0.0)
        {
            _2598 = abs((1.0 - _1936) / _1945);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1945 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1936 + 1.0) / _1945);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2598 = frontier_phi_46_43_ladder;
        }
        float _2600 = isnan(_2385) ? _2106 : (isnan(_2106) ? _2385 : min(_2106, _2385));
        float _2601 = isnan(_2598) ? _2600 : (isnan(_2600) ? _2598 : min(_2600, _2598));
        float _2605 = (_2601 * _1939) + _1928;
        float _2606 = (_2601 * _1942) + _1932;
        float _2607 = (_2601 * _1945) + _1936;
        float _2608 = _2601 * 9.9999997473787516355514526367188e-05;
        float _2609 = (-1.0) - _2608;
        float _2611 = _2608 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2607 > _2611) || ((_2607 < _2609) || ((_2606 > _2611) || ((_2606 < _2609) || ((_2605 < _2609) || (_2605 > _2611))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2806 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2607, cbModelParam._m0[17u].z, fma(_2606, cbModelParam._m0[17u].y, _2605 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2607, cbModelParam._m0[18u].z, fma(_2606, cbModelParam._m0[18u].y, _2605 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2607, cbModelParam._m0[19u].z, fma(_2606, cbModelParam._m0[19u].y, _2605 * cbModelParam._m0[19u].x))), _1874);
            frontier_phi_22_46_ladder = _2806.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2806.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2806.x * cbModelParam._m0[1u].z;
        }
        _1964 = frontier_phi_22_46_ladder_2;
        _1966 = frontier_phi_22_46_ladder_1;
        _1968 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1948 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_973, _974, _975), _1874);
        _1964 = _1948.x * cbModelParam._m0[1u].z;
        _1966 = _1948.y * cbModelParam._m0[1u].z;
        _1968 = _1948.z * cbModelParam._m0[1u].z;
    }
    float _1981 = (((_1000 * _949) + _1001) * _965) * ((cbModelParam._m0[1u].w * (_1964 - _1865)) + _1865);
    float _1983 = (((_1000 * _951) + _1001) * _965) * ((cbModelParam._m0[1u].w * (_1966 - _1867)) + _1867);
    float _1985 = (((_1000 * _952) + _1001) * _965) * ((cbModelParam._m0[1u].w * (_1968 - _1869)) + _1869);
    float _1988 = fma(_1985, cbSceneParam._m0[89u].z, fma(_1983, cbSceneParam._m0[89u].y, _1981 * cbSceneParam._m0[89u].x));
    float _1991 = fma(_1985, cbSceneParam._m0[90u].z, fma(_1983, cbSceneParam._m0[90u].y, _1981 * cbSceneParam._m0[90u].x));
    float _1994 = fma(_1985, cbSceneParam._m0[91u].z, fma(_1983, cbSceneParam._m0[91u].y, _1981 * cbSceneParam._m0[91u].x));
    vec4 _2002 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_887, _888));
    float _2004 = _2002.w;
    float _2016 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2004);
    float _2017 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2004);
    float _2018 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2004);
    uvec4 _2022 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _2024 = _2022.x * 14u;
    uint _2025 = _2024 + 13u;
    float _2032 = _965 + (-1.0);
    float _2037 = (cbLight._m0[_2025].x * _2032) + 1.0;
    float _2038 = (cbLight._m0[_2025].y * _2032) + 1.0;
    float _2039 = (cbLight._m0[_2025].z * _2032) + 1.0;
    float _2040 = (cbLight._m0[_2025].w * _2032) + 1.0;
    uint _2041 = _2024 + 5u;
    float _2047 = isnan(1.0) ? _2038 : (isnan(_2038) ? 1.0 : min(_2038, 1.0));
    uint _2051 = _2024 + 4u;
    float _2060 = isnan(1.0) ? _2037 : (isnan(_2037) ? 1.0 : min(_2037, 1.0));
    uint _2064 = _2024 | 1u;
    float _2075 = dot(vec3(cbLight._m0[_2024].xyz), vec3(_800, _801, _802));
    float _2078 = dot(vec3(cbLight._m0[_2064].xyz), vec3(_800, _801, _802));
    float _4243 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _4254 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _2083 = (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * 0.3183098733425140380859375;
    float _2085 = (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * 0.3183098733425140380859375;
    float _2092 = ((cbLight._m0[_2041].x * _2047) * _2085) + (((cbLight._m0[_2051].x * _2016) * _2060) * _2083);
    float _2093 = ((_2047 * cbLight._m0[_2041].y) * _2085) + (((cbLight._m0[_2051].y * _2017) * _2060) * _2083);
    float _2094 = ((_2047 * cbLight._m0[_2041].z) * _2085) + (((cbLight._m0[_2051].z * _2018) * _2060) * _2083);
    uvec4 _2098 = floatBitsToUint(cbLight._m0[_2024 + 12u]);
    bool _2100 = _2098.x == 0u;
    float _2111;
    float _2113;
    float _2115;
    if (_2100)
    {
        _2111 = _2092;
        _2113 = _2093;
        _2115 = _2094;
    }
    else
    {
        uint _2119 = _2024 + 6u;
        float _2135 = (dot(vec3(cbLight._m0[_2024 + 2u].xyz), vec3(_800, _801, _802)) * 0.5) + 0.5;
        float _2136 = _2135 * _2135;
        float _4265 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
        float _2137 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _2138 = isnan(1.0) ? _2039 : (isnan(_2039) ? 1.0 : min(_2039, 1.0));
        _2111 = (((cbLight._m0[_2119].x * 0.3183098733425140380859375) * _2137) * _2138) + _2092;
        _2113 = (((cbLight._m0[_2119].y * 0.3183098733425140380859375) * _2137) * _2138) + _2093;
        _2115 = (((cbLight._m0[_2119].z * 0.3183098733425140380859375) * _2137) * _2138) + _2094;
    }
    bool _2118 = _2098.y == 0u;
    float _2156;
    float _2158;
    float _2160;
    if (_2118)
    {
        _2156 = _2111;
        _2158 = _2113;
        _2160 = _2115;
    }
    else
    {
        uint _2329 = _2024 + 7u;
        float _2345 = (dot(vec3(cbLight._m0[_2024 + 3u].xyz), vec3(_800, _801, _802)) * 0.5) + 0.5;
        float _2346 = _2345 * _2345;
        float _4281 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2347 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _2348 = isnan(1.0) ? _2040 : (isnan(_2040) ? 1.0 : min(_2040, 1.0));
        _2156 = (((cbLight._m0[_2329].x * 0.3183098733425140380859375) * _2347) * _2348) + _2111;
        _2158 = (((cbLight._m0[_2329].y * 0.3183098733425140380859375) * _2347) * _2348) + _2113;
        _2160 = (((cbLight._m0[_2329].z * 0.3183098733425140380859375) * _2347) * _2348) + _2115;
    }
    uint _2163 = _2024 + 8u;
    float _2176 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2024].w)) * _803) * 0.949999988079071044921875);
    float _2177 = _2176 * _2176;
    float _2178 = cbLight._m0[_2024].x + _879;
    float _2179 = cbLight._m0[_2024].y + _880;
    float _2180 = cbLight._m0[_2024].z + _881;
    float _2184 = inversesqrt(dot(vec3(_2178, _2179, _2180), vec3(_2178, _2179, _2180)));
    float _2185 = _2184 * _2178;
    float _2186 = _2184 * _2179;
    float _2187 = _2184 * _2180;
    float _2188 = dot(vec3(_800, _801, _802), vec3(cbLight._m0[_2024].xyz));
    float _4297 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2191 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
    float _4308 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _2192 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
    float _2193 = dot(vec3(_800, _801, _802), vec3(_2185, _2186, _2187));
    float _4319 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2196 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
    float _2197 = dot(vec3(cbLight._m0[_2024].xyz), vec3(_2185, _2186, _2187));
    float _4330 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2201 = _2177 * _2177;
    float _2205 = ((_2196 * _2196) * (_2201 + (-1.0))) + 1.0;
    float _2213 = exp2(log2(1.0 - (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0)))) * 5.0);
    float _2214 = 0.959999978542327880859375 - _946;
    float _2216 = 0.959999978542327880859375 - _947;
    float _2217 = 0.959999978542327880859375 - _948;
    float _2224 = 1.0 - _2177;
    float _2235 = (0.5 / (((_2192 * ((_2191 * _2224) + _2177)) + 9.9999999392252902907785028219223e-09) + (((_2192 * _2224) + _2177) * _2191))) * _2191;
    float _4341 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2237 = (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (_2201 / ((_2205 * _2205) * 3.141590118408203125));
    uint _2251 = _2024 + 9u;
    float _2262 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2064].w)) * _803) * 0.949999988079071044921875);
    float _2263 = _2262 * _2262;
    float _2264 = cbLight._m0[_2064].x + _879;
    float _2265 = cbLight._m0[_2064].y + _880;
    float _2266 = cbLight._m0[_2064].z + _881;
    float _2270 = inversesqrt(dot(vec3(_2264, _2265, _2266), vec3(_2264, _2265, _2266)));
    float _2271 = _2270 * _2264;
    float _2272 = _2270 * _2265;
    float _2273 = _2270 * _2266;
    float _2274 = dot(vec3(_800, _801, _802), vec3(cbLight._m0[_2064].xyz));
    float _4352 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2277 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
    float _2278 = dot(vec3(_800, _801, _802), vec3(_2271, _2272, _2273));
    float _4363 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2281 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
    float _2282 = dot(vec3(cbLight._m0[_2064].xyz), vec3(_2271, _2272, _2273));
    float _4374 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2286 = _2263 * _2263;
    float _2290 = ((_2281 * _2281) * (_2286 + (-1.0))) + 1.0;
    float _2297 = exp2(log2(1.0 - (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0)))) * 5.0);
    float _2304 = 1.0 - _2263;
    float _2314 = (0.5 / (((_2192 * ((_2277 * _2304) + _2263)) + 9.9999999392252902907785028219223e-09) + (((_2192 * _2304) + _2263) * _2277))) * _2277;
    float _4385 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _2316 = (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_2286 / ((_2290 * _2290) * 3.141590118408203125));
    float _2326 = (((((_2297 * _2214) + _949) * cbLight._m0[_2251].x) * _2316) * _2047) + ((((cbLight._m0[_2163].x * _2016) * ((_2213 * _2214) + _949)) * _2237) * _2060);
    float _2327 = (((((_2297 * _2216) + _951) * cbLight._m0[_2251].y) * _2316) * _2047) + ((((cbLight._m0[_2163].y * _2017) * ((_2213 * _2216) + _951)) * _2237) * _2060);
    float _2328 = (((((_2297 * _2217) + _952) * cbLight._m0[_2251].z) * _2316) * _2047) + ((((cbLight._m0[_2163].z * _2018) * ((_2213 * _2217) + _952)) * _2237) * _2060);
    float _2390;
    float _2392;
    float _2394;
    if (_2100)
    {
        _2390 = _2326;
        _2392 = _2327;
        _2394 = _2328;
    }
    else
    {
        uint _2396 = _2024 + 2u;
        uint _2400 = _2024 + 10u;
        float _2414 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2396].w)) * _803) * 0.949999988079071044921875);
        float _2415 = _2414 * _2414;
        float _2416 = cbLight._m0[_2396].x + _879;
        float _2417 = cbLight._m0[_2396].y + _880;
        float _2418 = cbLight._m0[_2396].z + _881;
        float _2422 = inversesqrt(dot(vec3(_2416, _2417, _2418), vec3(_2416, _2417, _2418)));
        float _2423 = _2422 * _2416;
        float _2424 = _2422 * _2417;
        float _2425 = _2422 * _2418;
        float _2426 = dot(vec3(_800, _801, _802), vec3(cbLight._m0[_2396].xyz));
        float _4396 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2429 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _2430 = dot(vec3(_800, _801, _802), vec3(_2423, _2424, _2425));
        float _4407 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2433 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _2434 = dot(vec3(cbLight._m0[_2396].xyz), vec3(_2423, _2424, _2425));
        float _4418 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        float _2438 = _2415 * _2415;
        float _2442 = ((_2433 * _2433) * (_2438 + (-1.0))) + 1.0;
        float _2449 = exp2(log2(1.0 - (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0)))) * 5.0);
        float _2456 = 1.0 - _2415;
        float _2466 = (0.5 / (((_2192 * ((_2429 * _2456) + _2415)) + 9.9999999392252902907785028219223e-09) + (((_2192 * _2456) + _2415) * _2429))) * _2429;
        float _4429 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2468 = (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_2438 / ((_2442 * _2442) * 3.141590118408203125));
        float _2469 = isnan(1.0) ? _2039 : (isnan(_2039) ? 1.0 : min(_2039, 1.0));
        _2390 = (((((_2449 * _2214) + _949) * cbLight._m0[_2400].x) * _2468) * _2469) + _2326;
        _2392 = (((((_2449 * _2216) + _951) * cbLight._m0[_2400].y) * _2468) * _2469) + _2327;
        _2394 = (((((_2449 * _2217) + _952) * cbLight._m0[_2400].z) * _2468) * _2469) + _2328;
    }
    float _2504;
    float _2506;
    float _2508;
    if (_2118)
    {
        _2504 = _2390;
        _2506 = _2392;
        _2508 = _2394;
    }
    else
    {
        uint _2515 = _2024 + 3u;
        uint _2519 = _2024 + 11u;
        float _2533 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2515].w)) * _803) * 0.949999988079071044921875);
        float _2534 = _2533 * _2533;
        float _2535 = cbLight._m0[_2515].x + _879;
        float _2536 = cbLight._m0[_2515].y + _880;
        float _2537 = cbLight._m0[_2515].z + _881;
        float _2541 = inversesqrt(dot(vec3(_2535, _2536, _2537), vec3(_2535, _2536, _2537)));
        float _2542 = _2541 * _2535;
        float _2543 = _2541 * _2536;
        float _2544 = _2541 * _2537;
        float _2545 = dot(vec3(_800, _801, _802), vec3(cbLight._m0[_2515].xyz));
        float _4445 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2548 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _2549 = dot(vec3(_800, _801, _802), vec3(_2542, _2543, _2544));
        float _4456 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2552 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
        float _2553 = dot(vec3(cbLight._m0[_2515].xyz), vec3(_2542, _2543, _2544));
        float _4467 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
        float _2557 = _2534 * _2534;
        float _2561 = ((_2552 * _2552) * (_2557 + (-1.0))) + 1.0;
        float _2568 = exp2(log2(1.0 - (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0)))) * 5.0);
        float _2575 = 1.0 - _2534;
        float _2585 = (0.5 / (((_2192 * ((_2548 * _2575) + _2534)) + 9.9999999392252902907785028219223e-09) + (((_2192 * _2575) + _2534) * _2548))) * _2548;
        float _4478 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        float _2587 = (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * (_2557 / ((_2561 * _2561) * 3.141590118408203125));
        float _2588 = isnan(1.0) ? _2040 : (isnan(_2040) ? 1.0 : min(_2040, 1.0));
        _2504 = (((((_2568 * _2214) + _949) * cbLight._m0[_2519].x) * _2587) * _2588) + _2390;
        _2506 = (((((_2568 * _2216) + _951) * cbLight._m0[_2519].y) * _2587) * _2588) + _2392;
        _2508 = (((((_2568 * _2217) + _952) * cbLight._m0[_2519].z) * _2587) * _2588) + _2394;
    }
    float _2723;
    float _2725;
    float _2727;
    float _2729;
    float _2731;
    float _2733;
    if (_2022.y == 0u)
    {
        float _2663 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2664 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2663;
        float _2665 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2663;
        float _2666 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2663;
        uvec4 _2678 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2679 = _2678.x;
        uint _2690 = uint((float(_2678.y) * floor(float(uint(cbSceneParam._m0[85u].y * _888) / _2679))) + floor(float(uint(cbSceneParam._m0[85u].x * _887) / _2679)));
        float _2700 = (log2(_2666 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2701 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
        uint _2704 = uint(isnan(14.0) ? _2701 : (isnan(_2701) ? 14.0 : min(_2701, 14.0)));
        uvec4 _2709 = texelFetch(g_lightClusterGridBuffer, int(((_2704 << 2u) + (_2690 << 6u)) >> 2u));
        uint _2710 = _2709.x;
        uint _2711 = _2678.z;
        float _2811;
        float _2813;
        float _2815;
        float _2817;
        float _2819;
        float _2821;
        if (((((1u << ((_2711 >> 4u) & 15u)) + 4294967295u) & _2710) == 0u) || ((_2711 & 240u) == 0u))
        {
            _2811 = 0.0;
            _2813 = 0.0;
            _2815 = 0.0;
            _2817 = 0.0;
            _2819 = 0.0;
            _2821 = 0.0;
        }
        else
        {
            float _2812;
            float _2814;
            float _2816;
            float _2818;
            float _2820;
            float _2822;
            float _2955 = 0.0;
            float _2956 = 0.0;
            float _2957 = 0.0;
            float _2958 = 0.0;
            float _2959 = 0.0;
            float _2960 = 0.0;
            uint _2961 = 0u;
            uint _2970;
            bool _2971;
            for (;;)
            {
                _2970 = texelFetch(g_lightClassification, int((((_2704 << 5u) + (_2690 << 9u)) + (_2961 << 2u)) >> 2u)).x;
                _2971 = _2970 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2971)
                {
                    frontier_phi_61_pred = _2955;
                    frontier_phi_61_pred_1 = _2960;
                    frontier_phi_61_pred_2 = _2959;
                    frontier_phi_61_pred_3 = _2958;
                    frontier_phi_61_pred_4 = _2957;
                    frontier_phi_61_pred_5 = _2956;
                }
                else
                {
                    float _3079;
                    float _3080;
                    float _3081;
                    float _3082;
                    float _3083;
                    float _3084;
                    uint _3085;
                    _3079 = _2955;
                    _3080 = _2956;
                    _3081 = _2957;
                    _3082 = _2958;
                    _3083 = _2959;
                    _3084 = _2960;
                    _3085 = _2970;
                    float _3011;
                    float _3012;
                    float _3013;
                    float _3014;
                    float _3015;
                    float _3016;
                    for (;;)
                    {
                        uint _3089 = uint(findLSB(_3085)) + (_2961 << 5u);
                        uint _3086 = (_3085 + 4294967295u) & _3085;
                        uint _3091 = _3089 * 48u;
                        vec4 _3105 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3091)).x, texelFetch(g_PointLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3091 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3091 + 3u)).x));
                        uint _3111 = (_3089 * 48u) + 4u;
                        vec4 _3124 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3111)).x, texelFetch(g_PointLightRenderingBuffer, int(_3111 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3111 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3111 + 3u)).x));
                        uint _3130 = (_3089 * 48u) + 8u;
                        vec3 _3141 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3130)).x, texelFetch(g_PointLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3130 + 2u)).x));
                        float _3145 = _3105.x - _2664;
                        float _3146 = _3105.y - _2665;
                        float _3147 = _3105.z - _2666;
                        float _3148 = dot(vec3(_3145, _3146, _3147), vec3(_3145, _3146, _3147));
                        float _3151 = inversesqrt(_3148);
                        float _3152 = _3151 * _3145;
                        float _3153 = _3151 * _3146;
                        float _3154 = _3151 * _3147;
                        float _3155 = dot(vec3(_906, _909, _912), vec3(_3152, _3153, _3154));
                        float _3160 = 1.0 - (_3148 * _3105.w);
                        float _4504 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                        float _3161 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
                        float _3162 = sqrt(_3148) * _3124.w;
                        float _3165 = 1.39999997615814208984375 / (_3162 + 1.39999997615814208984375);
                        float _3166 = _3165 * _3165;
                        float _3169 = ((1.0 - _3166) * _3155) + _3166;
                        float _3172 = _3162 * _3162;
                        float _3176 = ((isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0))) * _3161) / ((_3172 * 0.699999988079071044921875) + 1.0);
                        float _3180 = (-0.0) - _2664;
                        float _3181 = (-0.0) - _2665;
                        float _3182 = (-0.0) - _2666;
                        float _3186 = inversesqrt(dot(vec3(_3180, _3181, _3182), vec3(_3180, _3181, _3182)));
                        float _3187 = _3186 * _3180;
                        float _3188 = _3186 * _3181;
                        float _3189 = _3186 * _3182;
                        float _3197 = exp2(log2(1.0 / ((_3172 * 3.5) + 5.0)) * 0.25);
                        float _3198 = 1.0 - _981;
                        float _3205 = sqrt(1.0 - ((1.0 - (_3198 * _3198)) * (1.0 - (_3197 * _3197))));
                        float _3206 = _3205 * _3205;
                        float _3207 = _3206 * _3206;
                        float _3208 = _3187 + _3152;
                        float _3209 = _3188 + _3153;
                        float _3210 = _3189 + _3154;
                        float _3214 = inversesqrt(dot(vec3(_3208, _3209, _3210), vec3(_3208, _3209, _3210)));
                        float _3218 = dot(vec3(_906, _909, _912), vec3(_3187, _3188, _3189));
                        float _4520 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
                        float _3221 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
                        float _3222 = dot(vec3(_906, _909, _912), vec3(_3214 * _3208, _3214 * _3209, _3214 * _3210));
                        float _4531 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                        float _3225 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
                        float _3229 = ((_3225 * _3225) * (_3207 + (-1.0))) + 1.0;
                        float _3230 = _3165 * _3206;
                        float _3231 = _3230 * _3230;
                        float _3234 = ((1.0 - _3231) * _3155) + _3231;
                        float _4542 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                        float _3235 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
                        float _3236 = 1.0 - _3206;
                        float _3246 = (0.5 / (((_3235 * ((_3221 * _3236) + _3206)) + 9.9999999392252902907785028219223e-09) + (((_3235 * _3236) + _3206) * _3221))) * _3235;
                        float _4553 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                        float _3257 = (((_3207 * 3.1415927410125732421875) * (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0)))) / ((_3229 * _3229) * ((_3172 * 2.1991131305694580078125) + 3.141590118408203125))) * _3161;
                        _3014 = (_3176 * _3124.x) + _3082;
                        _3015 = (_3176 * _3124.y) + _3083;
                        _3016 = (_3176 * _3124.z) + _3084;
                        _3011 = (_3257 * _3141.x) + _3079;
                        _3012 = (_3257 * _3141.y) + _3080;
                        _3013 = (_3257 * _3141.z) + _3081;
                        if (_3086 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3079 = _3011;
                            _3080 = _3012;
                            _3081 = _3013;
                            _3082 = _3014;
                            _3083 = _3015;
                            _3084 = _3016;
                            _3085 = _3086;
                        }
                    }
                    frontier_phi_61_pred = _3011;
                    frontier_phi_61_pred_1 = _3016;
                    frontier_phi_61_pred_2 = _3015;
                    frontier_phi_61_pred_3 = _3014;
                    frontier_phi_61_pred_4 = _3013;
                    frontier_phi_61_pred_5 = _3012;
                }
                _2812 = frontier_phi_61_pred;
                _2822 = frontier_phi_61_pred_1;
                _2820 = frontier_phi_61_pred_2;
                _2818 = frontier_phi_61_pred_3;
                _2816 = frontier_phi_61_pred_4;
                _2814 = frontier_phi_61_pred_5;
                uint _2962 = _2961 + 1u;
                if (_2962 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2955 = _2812;
                    _2956 = _2814;
                    _2957 = _2816;
                    _2958 = _2818;
                    _2959 = _2820;
                    _2960 = _2822;
                    _2961 = _2962;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2811 = _2812;
            _2813 = _2814;
            _2815 = _2816;
            _2817 = _2818;
            _2819 = _2820;
            _2821 = _2822;
        }
        uvec4 _2825 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2826 = _2825.z;
        uint _2828 = (_2826 >> 8u) & 15u;
        float _2923;
        float _2925;
        float _2927;
        float _2929;
        float _2931;
        float _2933;
        if (((4294967295u << _2828) & _2710) == 0u)
        {
            _2923 = _2811;
            _2925 = _2813;
            _2927 = _2815;
            _2929 = _2817;
            _2931 = _2819;
            _2933 = _2821;
        }
        else
        {
            float _2948 = inversesqrt(dot(vec3(_2664, _2665, _2666), vec3(_2664, _2665, _2666)));
            float _2949 = _2948 * _2664;
            float _2950 = _2948 * _2665;
            float _2951 = _2948 * _2666;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2828 < ((_2826 >> 12u) & 15u))
            {
                float _2924;
                float _2926;
                float _2928;
                float _2930;
                float _2932;
                float _2934;
                float _3062 = _2811;
                float _3063 = _2813;
                float _3064 = _2815;
                float _3065 = _2817;
                float _3066 = _2819;
                float _3067 = _2821;
                uint _3068 = _2828;
                uint _3077;
                bool _3078;
                for (;;)
                {
                    _3077 = texelFetch(g_lightClassification, int((((_2704 << 5u) + (_2690 << 9u)) + (_3068 << 2u)) >> 2u)).x;
                    _3078 = _3077 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3078)
                    {
                        frontier_phi_67_pred = _3065;
                        frontier_phi_67_pred_1 = _3066;
                        frontier_phi_67_pred_2 = _3067;
                        frontier_phi_67_pred_3 = _3064;
                        frontier_phi_67_pred_4 = _3063;
                        frontier_phi_67_pred_5 = _3062;
                    }
                    else
                    {
                        float _3262;
                        float _3263;
                        float _3264;
                        float _3265;
                        float _3266;
                        float _3267;
                        float _3555;
                        float _3556;
                        float _3557;
                        float _3558;
                        float _3559;
                        float _3560;
                        float _3275 = _3062;
                        float _3276 = _3063;
                        float _3277 = _3064;
                        float _3278 = _3065;
                        float _3279 = _3066;
                        float _3280 = _3067;
                        uint _3281 = _3077;
                        uint _3282;
                        vec4 _3307;
                        float _3308;
                        vec4 _3323;
                        vec3 _3335;
                        vec4 _3350;
                        vec4 _3365;
                        float _3411;
                        bool _3412;
                        for (;;)
                        {
                            uint _3292 = ((_3068 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3281));
                            _3282 = (_3281 + 4294967295u) & _3281;
                            uint _3294 = _3292 * 40u;
                            _3307 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3294)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 3u)).x));
                            _3308 = _3307.w;
                            uint _3310 = (_3292 * 40u) + 4u;
                            _3323 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3310)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 3u)).x));
                            uint _3325 = (_3292 * 40u) + 8u;
                            _3335 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3325)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 2u)).x));
                            uint _3337 = (_3292 * 40u) + 16u;
                            _3350 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3337)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 3u)).x));
                            uint _3352 = (_3292 * 40u) + 20u;
                            _3365 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3352)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 3u)).x));
                            uint _3367 = (_3292 * 40u) + 24u;
                            vec4 _3380 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3367)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 3u)).x));
                            uint _3386 = (_3292 * 40u) + 28u;
                            vec4 _3399 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3386)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 3u)).x));
                            _3411 = fma(_2666, _3399.z, fma(_2665, _3399.y, _3399.x * _2664)) + _3399.w;
                            _3412 = !((fma(_2666, _3380.z, fma(_2665, _3380.y, _3380.x * _2664)) + _3380.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3412)
                            {
                                float _3439 = _3307.x - _2664;
                                float _3440 = _3307.y - _2665;
                                float _3441 = _3307.z - _2666;
                                float _3442 = dot(vec3(_3439, _3440, _3441), vec3(_3439, _3440, _3441));
                                float _3445 = inversesqrt(_3442);
                                float _3446 = _3445 * _3439;
                                float _3447 = _3445 * _3440;
                                float _3448 = _3445 * _3441;
                                float _3452 = 1.0 - (_3442 / (_3308 * _3308));
                                float _4564 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                                float _3453 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
                                float _3457 = sqrt(_3442) * _3323.w;
                                float _3459 = 1.39999997615814208984375 / (_3457 + 1.39999997615814208984375);
                                float _3460 = _3459 * _3459;
                                float _3463 = ((1.0 - _3460) * dot(vec3(_3446, _3447, _3448), vec3(_906, _909, _912))) + _3460;
                                float _3466 = _3457 * _3457;
                                float _3470 = (fma(_2666, _3350.z, fma(_2665, _3350.y, _3350.x * _2664)) + _3350.w) / _3411;
                                float _3471 = (fma(_2666, _3365.z, fma(_2665, _3365.y, _3365.x * _2664)) + _3365.w) / _3411;
                                float _3475 = 1.0 - dot(vec2(_3470, _3471), vec2(_3470, _3471));
                                float _4580 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                                float _3476 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                                float _3477 = _3476 * (((isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0))) * _3453) / ((_3466 * 0.699999988079071044921875) + 1.0));
                                float _3489 = exp2(log2(1.0 / ((_3466 * 3.5) + 5.0)) * 0.25);
                                float _3490 = 1.0 - _981;
                                float _3497 = sqrt(1.0 - ((1.0 - (_3490 * _3490)) * (1.0 - (_3489 * _3489))));
                                float _3498 = _3497 * _3497;
                                float _3499 = _3498 * _3498;
                                float _3500 = _3446 - _2949;
                                float _3501 = _3447 - _2950;
                                float _3502 = _3448 - _2951;
                                float _3506 = inversesqrt(dot(vec3(_3500, _3501, _3502), vec3(_3500, _3501, _3502)));
                                float _3510 = dot(vec3(_906, _909, _912), vec3((-0.0) - _2949, (-0.0) - _2950, (-0.0) - _2951));
                                float _4591 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                                float _3513 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
                                float _3514 = dot(vec3(_906, _909, _912), vec3(_3506 * _3500, _3506 * _3501, _3506 * _3502));
                                float _4602 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                                float _3517 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
                                float _3521 = ((_3517 * _3517) * (_3499 + (-1.0))) + 1.0;
                                float _3522 = _3459 * _3498;
                                float _3523 = _3522 * _3522;
                                float _3529 = ((1.0 - _3523) * dot(vec3(_906, _909, _912), vec3(_3446, _3447, _3448))) + _3523;
                                float _4613 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                                float _3530 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
                                float _3531 = 1.0 - _3498;
                                float _3541 = (0.5 / (((_3530 * ((_3513 * _3531) + _3498)) + 9.9999999392252902907785028219223e-09) + (((_3530 * _3531) + _3498) * _3513))) * _3530;
                                float _4624 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                                float _3551 = (_3476 * _3453) * (((_3499 * 3.1415927410125732421875) * (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0)))) / ((_3521 * _3521) * ((_3466 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3551 * _3335.x;
                                frontier_phi_73_pred_1 = _3551 * _3335.y;
                                frontier_phi_73_pred_2 = _3477 * _3323.z;
                                frontier_phi_73_pred_3 = _3477 * _3323.y;
                                frontier_phi_73_pred_4 = _3477 * _3323.x;
                                frontier_phi_73_pred_5 = _3551 * _3335.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3555 = frontier_phi_73_pred;
                            _3556 = frontier_phi_73_pred_1;
                            _3560 = frontier_phi_73_pred_2;
                            _3559 = frontier_phi_73_pred_3;
                            _3558 = frontier_phi_73_pred_4;
                            _3557 = frontier_phi_73_pred_5;
                            _3265 = _3558 + _3278;
                            _3266 = _3559 + _3279;
                            _3267 = _3560 + _3280;
                            _3262 = _3555 + _3275;
                            _3263 = _3556 + _3276;
                            _3264 = _3557 + _3277;
                            if (_3282 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3275 = _3262;
                                _3276 = _3263;
                                _3277 = _3264;
                                _3278 = _3265;
                                _3279 = _3266;
                                _3280 = _3267;
                                _3281 = _3282;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3265;
                        frontier_phi_67_pred_1 = _3266;
                        frontier_phi_67_pred_2 = _3267;
                        frontier_phi_67_pred_3 = _3264;
                        frontier_phi_67_pred_4 = _3263;
                        frontier_phi_67_pred_5 = _3262;
                    }
                    _2930 = frontier_phi_67_pred;
                    _2932 = frontier_phi_67_pred_1;
                    _2934 = frontier_phi_67_pred_2;
                    _2928 = frontier_phi_67_pred_3;
                    _2926 = frontier_phi_67_pred_4;
                    _2924 = frontier_phi_67_pred_5;
                    uint _3069 = _3068 + 1u;
                    if (_3069 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3062 = _2924;
                        _3063 = _2926;
                        _3064 = _2928;
                        _3065 = _2930;
                        _3066 = _2932;
                        _3067 = _2934;
                        _3068 = _3069;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2932;
                frontier_phi_55_56_ladder_1 = _2934;
                frontier_phi_55_56_ladder_2 = _2930;
                frontier_phi_55_56_ladder_3 = _2928;
                frontier_phi_55_56_ladder_4 = _2926;
                frontier_phi_55_56_ladder_5 = _2924;
            }
            else
            {
                frontier_phi_55_56_ladder = _2819;
                frontier_phi_55_56_ladder_1 = _2821;
                frontier_phi_55_56_ladder_2 = _2817;
                frontier_phi_55_56_ladder_3 = _2815;
                frontier_phi_55_56_ladder_4 = _2813;
                frontier_phi_55_56_ladder_5 = _2811;
            }
            _2923 = frontier_phi_55_56_ladder_5;
            _2925 = frontier_phi_55_56_ladder_4;
            _2927 = frontier_phi_55_56_ladder_3;
            _2929 = frontier_phi_55_56_ladder_2;
            _2931 = frontier_phi_55_56_ladder;
            _2933 = frontier_phi_55_56_ladder_1;
        }
        float _2938 = isnan(1.0) ? _965 : (isnan(_965) ? 1.0 : min(_965, 1.0));
        _2723 = (_2938 * _2929) + _2156;
        _2725 = (_2938 * _2931) + _2158;
        _2727 = (_2938 * _2933) + _2160;
        _2729 = ((_2923 * _949) * _2938) + _2504;
        _2731 = ((_2925 * _951) * _2938) + _2506;
        _2733 = ((_2927 * _952) * _2938) + _2508;
    }
    else
    {
        _2723 = _2156;
        _2725 = _2158;
        _2727 = _2160;
        _2729 = _2504;
        _2731 = _2506;
        _2733 = _2508;
    }
    float _4640 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _4651 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _4662 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    uint _2753 = _255 + 6u;
    float _2761 = _887 / cbSceneParam._m0[86u].x;
    float _2762 = _888 / cbSceneParam._m0[86u].y;
    vec4 _2776 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2761, _2762, (log2((isnan(cbSceneParam._m0[77u].w) ? _822 : (isnan(_822) ? cbSceneParam._m0[77u].w : min(_822, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2778 = _2776.x;
    float _2779 = _2776.y;
    float _2780 = _2776.z;
    float _2781 = _2776.w;
    float _2873;
    float _2875;
    float _2877;
    float _2879;
    if (_822 > cbSceneParam._m0[78u].w)
    {
        float _2836 = isnan(_822) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _822 : min(cbSceneParam._m0[80u].w, _822));
        float _2837 = _2836 / _822;
        float _2848 = _2837 * _872;
        float _2849 = _873 * _2837;
        float _2850 = (-0.0) - _2849;
        float _2851 = _2837 * _874;
        float _2853 = (cbSceneParam._m0[77u].w * _2850) / _2836;
        float _2854 = _2853 + cbSceneParam._m0[79u].w;
        float _2855 = cbSceneParam._m0[79u].w - _2849;
        float _2861 = sqrt(((_2848 * _2848) + (_2849 * _2849)) + (_2851 * _2851));
        float _2864 = (1.0 - (cbSceneParam._m0[77u].w / _2836)) * _2861;
        float _2869 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2871 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3024;
        if (abs((_2850 - _2853) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3024 = ((((_2854 > 0.0) ? exp2(_2869 * _2854) : (2.0 - exp2(_2871 * _2854))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2864;
        }
        else
        {
            float _2984 = 1.0 / cbSceneParam._m0[80u].x;
            float _2985 = isnan(_2855) ? _2854 : (isnan(_2854) ? _2855 : max(_2854, _2855));
            float _2986 = isnan(_2855) ? _2854 : (isnan(_2854) ? _2855 : min(_2854, _2855));
            float _2995 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : min(_2985, 0.0));
            float _2996 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : min(_2986, 0.0));
            _3024 = ((abs(_2861 / _2850) * cbSceneParam._m0[80u].y) * ((((_2995 - _2996) * 2.0) - ((exp2(_2869 * (isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0)))) - exp2(_2869 * (isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0))))) * _2984)) - ((exp2(_2871 * _2995) - exp2(_2871 * _2996)) * _2984))) + (_2864 * cbSceneParam._m0[80u].z);
        }
        vec4 _3026 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2761, _2762, 1.0), 0.0);
        float _3035 = exp2((_3024 * (-1.44269502162933349609375)) * (1.0 - _3026.w));
        float _3036 = log2(_3035);
        float _3052 = log2(_2781);
        _2873 = (exp2(_3052 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3036 * cbSceneParam._m0[78u].x)) * _3026.x) / cbSceneParam._m0[78u].x)) + _2778;
        _2875 = (exp2(_3052 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3036 * cbSceneParam._m0[78u].y)) * _3026.y) / cbSceneParam._m0[78u].y)) + _2779;
        _2877 = (exp2(_3052 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3036 * cbSceneParam._m0[78u].z)) * _3026.z) / cbSceneParam._m0[78u].z)) + _2780;
        _2879 = _3035 * _2781;
    }
    else
    {
        _2873 = _2778;
        _2875 = _2779;
        _2877 = _2780;
        _2879 = _2781;
    }
    float _2891 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2892 = _2891 == 3.0;
    float _2893 = log2(_2879);
    float _2900 = exp2(_2893 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * (_2723 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _965))) + ((_2729 + ((isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0))) * _1773)) * cbPerFrame._m0[3u].x));
    float _2901 = exp2(_2893 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0))) * (_2725 + ((isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))) * _965))) + ((_2731 + ((isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0))) * _1773)) * cbPerFrame._m0[3u].x));
    float _2902 = exp2(_2893 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0))) * (_2727 + ((isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))) * _965))) + ((_2733 + ((isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0))) * _1773)) * cbPerFrame._m0[3u].x));
    float _2911 = (_2891 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2911 * (_2892 ? _2900 : (_2900 + (cbSceneParam._m0[72u].w * _2873)));
    SV_Target.y = _2911 * (_2892 ? _2901 : (_2901 + (cbSceneParam._m0[72u].w * _2875)));
    SV_Target.z = _2911 * (_2892 ? _2902 : (_2902 + (cbSceneParam._m0[72u].w * _2877)));
    SV_Target.w = cbInstanceData._m0[_2753].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2753].w;
}


