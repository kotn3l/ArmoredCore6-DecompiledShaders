#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1320;
float _3984;
float _3985;
float _3986;
float _3987;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3996 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _4007 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _4018 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    uint _276 = uint(roundEven(NORMAL.w)) * 13u;
    uint _281 = _276 + 1u;
    uint _285 = _276 + 2u;
    float _294 = sqrt(((cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x)) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x));
    float _295 = _294 * TEXCOORD.z;
    float _296 = _294 * TEXCOORD.w;
    vec4 _309 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _295) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _296) + cbTextureTilingScale._m0[13u].w));
    vec4 _333 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _338 = _333.x * cbMtdParam._m0[11u].x;
    float _339 = _333.y * cbMtdParam._m0[11u].y;
    float _340 = _333.z * cbMtdParam._m0[11u].z;
    vec4 _359 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _295) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _296) + cbTextureTilingScale._m0[5u].w));
    vec4 _396 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _398 = _396.x;
    float _410 = dot(vec4(_398, _396.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _427 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_398 - _410) * cbMtdParam._m0[24u].y) + _410) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4029 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _428 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _435 = (_428 * ((_359.x * cbMtdParam._m0[12u].x) - _338)) + _338;
    float _436 = (_428 * ((_359.y * cbMtdParam._m0[12u].y) - _339)) + _339;
    float _437 = (_428 * ((_359.z * cbMtdParam._m0[12u].z) - _340)) + _340;
    vec4 _454 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _295) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _296) + cbTextureTilingScale._m0[3u].w));
    vec4 _474 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _476 = _474.x;
    float _486 = dot(vec4(_476, _474.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _500 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_476 - _486) * cbMtdParam._m0[24u].y) + _486) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4040 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _501 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _508 = (_501 * ((_454.x * cbMtdParam._m0[13u].x) - _435)) + _435;
    float _509 = (_501 * ((_454.y * cbMtdParam._m0[13u].y) - _436)) + _436;
    float _510 = (_501 * ((_454.z * cbMtdParam._m0[13u].z) - _437)) + _437;
    float _514 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _309.x) * _508;
    float _517 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _309.y) * _509;
    float _520 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _309.z) * _510;
    float _527 = ((_508 - _514) * (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0)))) + _514;
    float _528 = ((_509 - _517) * (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0)))) + _517;
    float _529 = ((_510 - _520) * (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0)))) + _520;
    vec4 _541 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _295) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _296) + cbTextureTilingScale._m0[20u].w));
    vec4 _564 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _295) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _296) + cbTextureTilingScale._m0[4u].w));
    vec4 _581 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _583 = _581.x;
    float _584 = _581.y;
    float _585 = _581.z;
    float _592 = ((_564.x - _583) * _428) + _583;
    float _593 = ((_564.y - _584) * _428) + _584;
    float _594 = ((_564.z - _585) * _428) + _585;
    vec4 _606 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _295) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _296) + cbTextureTilingScale._m0[2u].w));
    float _619 = ((_606.z - _594) * _501) + _594;
    float _622 = ((((_606.x - _592) * _501) + _592) * 2.0) + (-1.0);
    float _623 = ((((_606.y - _593) * _501) + _593) * 2.0) + (-1.0);
    float _624 = dot(vec2(_622, _623), vec2(_622, _623));
    float _4051 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _629 = sqrt(1.0 - (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))));
    float _634 = _622 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_541.x * 2.0) + (-1.0)));
    float _635 = _623 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_541.y * 2.0) + (-1.0)));
    vec4 _648 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _662 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _676 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _678 = _676.x;
    float _696 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _295) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _296) + cbTextureTilingScale._m0[9u].w)).x - _678) * _428) + _678;
    float _714 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _295) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _296) + cbTextureTilingScale._m0[21u].w)).x - _696) * _501) + _696;
    float _718 = ((_662.x - _714) * cbMtdParam._m0[19u].z) + _714;
    float _723 = (((_541.z - _619) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _619;
    float _725 = cbMtdParam._m0[22u].x + _648.w;
    float _728 = fma(_629, _242 * NORMAL.x, fma(_635, _249 * TANGENT.x, (_235 * _227) * _634));
    float _731 = fma(_629, _242 * NORMAL.y, fma(_635, _249 * TANGENT.y, (_235 * _228) * _634));
    float _734 = fma(_629, _242 * NORMAL.z, fma(_635, _249 * TANGENT.z, (_235 * _229) * _634));
    float _738 = inversesqrt(dot(vec3(_728, _731, _734), vec3(_728, _731, _734)));
    float _739 = _738 * _728;
    float _740 = _738 * _731;
    float _741 = _738 * _734;
    float _4062 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _742 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _4073 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _4084 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _4095 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _4106 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _4117 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _747 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _761 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _802 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _812 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _802);
    float _813 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _802);
    float _814 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _802);
    float _818 = inversesqrt(dot(vec3(_812, _813, _814), vec3(_812, _813, _814)));
    float _819 = _812 * _818;
    float _820 = _813 * _818;
    float _821 = _814 * _818;
    vec4 _826 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _828 = _826.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1000 = sqrt(((_812 * _812) + (_813 * _813)) + (_814 * _814));
        float _1006 = (cbMatDynParam._m0[5u].x * _1000) + cbMatDynParam._m0[5u].y;
        float _4128 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1011 = (cbMatDynParam._m0[5u].z * _1000) + cbMatDynParam._m0[5u].w;
        float _4139 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) - _1007)) + _1007) < ((_828 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _839 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _840 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _858 = fma(_741, cbSceneParam._m0[5u].z, fma(_740, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _739));
    float _861 = fma(_741, cbSceneParam._m0[6u].z, fma(_740, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _739));
    float _864 = fma(_741, cbSceneParam._m0[7u].z, fma(_740, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _739));
    uint _877 = _276 + 9u;
    uint _878 = _877 + uint(cbMatDynParam._m0[0u].w);
    float _884 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) * cbInstanceData._m0[_878].x;
    float _885 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0)))) * cbInstanceData._m0[_878].y;
    float _886 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0)))) * cbInstanceData._m0[_878].z;
    float _4150 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _887 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    float _4161 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _888 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    float _4172 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _889 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
    float _890 = 1.0 - _747;
    float _891 = _887 * _890;
    float _892 = _888 * _890;
    float _893 = _889 * _890;
    float _898 = (_887 + (-0.039999999105930328369140625)) * _747;
    float _899 = (_888 + (-0.039999999105930328369140625)) * _747;
    float _900 = (_889 + (-0.039999999105930328369140625)) * _747;
    float _901 = _898 + 0.039999999105930328369140625;
    float _903 = _899 + 0.039999999105930328369140625;
    float _904 = _900 + 0.039999999105930328369140625;
    vec4 _913 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _839, cbSceneParam._m0[86u].y * _840));
    float _917 = ((isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * TEXCOORD_5.w) * _913.x;
    float _918 = dot(vec3(_739, _740, _741), vec3(_819, _820, _821));
    float _921 = _918 * 2.0;
    float _925 = (_921 * _739) - _819;
    float _926 = (_921 * _740) - _820;
    float _927 = (_921 * _741) - _821;
    float _931 = abs(dot(vec3(_819, _820, _821), vec3(_739, _740, _741)));
    float _4183 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _933 = sqrt(_742);
    float _946 = exp2((_933 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_933 * 3.0));
    float _952 = (1.0 - _946) * ((_933 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _953 = _946 * _933;
    float _981 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _985 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _989 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1319;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1044 = fma(_989, cbModelParam._m0[26u].z, fma(_985, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _981));
        float _1048 = fma(_989, cbModelParam._m0[27u].z, fma(_985, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _981));
        float _1052 = fma(_989, cbModelParam._m0[28u].z, fma(_985, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _981));
        float _1077 = _981 + _739;
        float _1078 = _985 + _740;
        float _1079 = _989 + _741;
        float _1089 = fma(_1079, cbModelParam._m0[26u].z, fma(_1078, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1077)) - _1044;
        float _1090 = fma(_1079, cbModelParam._m0[27u].z, fma(_1078, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1077)) - _1048;
        float _1091 = fma(_1079, cbModelParam._m0[28u].z, fma(_1078, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1077)) - _1052;
        float _1095 = inversesqrt(dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091)));
        float _1108 = ((_1095 * _1089) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1044 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1109 = ((_1095 * _1090) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1048 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1110 = ((_1095 * _1091) / cbModelParam._m0[34u].z) + ((((((_1052 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1108, _1109, _1110), 0.0);
        vec4 _1120 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1108, _1109, _1110), 0.0);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1108, _1109, _1110), 0.0);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1108, _1109, _1110), 0.0);
        float _1147 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1113.x + (-0.5));
        float _1149 = _1147 * (_1113.y + (-0.5));
        float _1150 = _1147 * (_1113.z + (-0.5));
        float _1157 = exp2((_1120.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1120.x + (-0.5));
        float _1159 = _1157 * (_1120.y + (-0.5));
        float _1160 = _1157 * (_1120.z + (-0.5));
        float _1167 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1127.x + (-0.5));
        float _1169 = _1167 * (_1127.y + (-0.5));
        float _1170 = _1167 * (_1127.z + (-0.5));
        float _1177 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1134.x + (-0.5));
        float _1179 = _1177 * (_1134.y + (-0.5));
        float _1180 = _1177 * (_1134.z + (-0.5));
        float _1181 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1182 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1183 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1184 = _1148 * 0.5;
        float _1185 = _1158 * 0.5;
        float _1186 = _1168 * 0.5;
        float _1187 = dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186));
        float _1192 = (_1187 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1187);
        float _1201 = (dot(vec3(_739, _740, _741), vec3(_1192 * _1184, _1192 * _1185, _1192 * _1186)) + 1.0) * 0.5;
        float _4209 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1211 = sqrt(((_1185 * _1185) + (_1184 * _1184)) + (_1186 * _1186)) / (_1181 + 9.9999997473787516355514526367188e-06);
        float _4220 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1213 = _1212 * 2.0;
        float _1217 = (1.0 - _1212) / (_1212 + 1.0);
        float _4231 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1227 = ((((1.0 - _1218) * (_1213 + 2.0)) * exp2(log2(isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_1213 + 1.0))) + _1218) * _1181;
        float _1228 = _1149 * 0.5;
        float _1229 = _1159 * 0.5;
        float _1230 = _1169 * 0.5;
        float _1231 = dot(vec3(_1228, _1229, _1230), vec3(_1228, _1229, _1230));
        float _1236 = (_1231 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1231);
        float _1244 = (dot(vec3(_739, _740, _741), vec3(_1236 * _1228, _1236 * _1229, _1236 * _1230)) + 1.0) * 0.5;
        float _4242 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1253 = sqrt(((_1229 * _1229) + (_1228 * _1228)) + (_1230 * _1230)) / (_1182 + 9.9999997473787516355514526367188e-06);
        float _4253 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _1255 = _1254 * 2.0;
        float _1259 = (1.0 - _1254) / (_1254 + 1.0);
        float _4264 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1269 = ((((1.0 - _1260) * (_1255 + 2.0)) * exp2(log2(isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_1255 + 1.0))) + _1260) * _1182;
        float _1270 = _1150 * 0.5;
        float _1271 = _1160 * 0.5;
        float _1272 = _1170 * 0.5;
        float _1273 = dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272));
        float _1278 = (_1273 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1273);
        float _1286 = (dot(vec3(_739, _740, _741), vec3(_1278 * _1270, _1278 * _1271, _1278 * _1272)) + 1.0) * 0.5;
        float _4275 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1295 = sqrt(((_1271 * _1271) + (_1270 * _1270)) + (_1272 * _1272)) / (_1183 + 9.9999997473787516355514526367188e-06);
        float _4286 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1297 = _1296 * 2.0;
        float _1301 = (1.0 - _1296) / (_1296 + 1.0);
        float _4297 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1311 = ((((1.0 - _1302) * (_1297 + 2.0)) * exp2(log2(isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_1297 + 1.0))) + _1302) * _1183;
        _1319 = _1150;
        _1321 = _1149;
        _1322 = _1148;
        _1323 = _1160;
        _1324 = _1159;
        _1325 = _1158;
        _1326 = _1170;
        _1327 = _1169;
        _1328 = _1168;
        _1329 = _1183;
        _1330 = _1182;
        _1331 = _1181;
        _1332 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)));
        _1333 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)));
        _1334 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)));
    }
    else
    {
        _1319 = _1320;
        _1321 = _1320;
        _1322 = _1320;
        _1323 = _1320;
        _1324 = _1320;
        _1325 = _1320;
        _1326 = _1320;
        _1327 = _1320;
        _1328 = _1320;
        _1329 = _1320;
        _1330 = _1320;
        _1331 = _1320;
        _1332 = 0.0;
        _1333 = 0.0;
        _1334 = 0.0;
    }
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1361 = fma(_989, cbModelParam._m0[30u].z, fma(_985, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _981));
        float _1365 = fma(_989, cbModelParam._m0[31u].z, fma(_985, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _981));
        float _1369 = fma(_989, cbModelParam._m0[32u].z, fma(_985, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _981));
        float _1392 = _981 + _739;
        float _1393 = _985 + _740;
        float _1394 = _989 + _741;
        float _1404 = fma(_1394, cbModelParam._m0[30u].z, fma(_1393, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1392)) - _1361;
        float _1405 = fma(_1394, cbModelParam._m0[31u].z, fma(_1393, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1392)) - _1365;
        float _1406 = fma(_1394, cbModelParam._m0[32u].z, fma(_1393, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1392)) - _1369;
        float _1410 = inversesqrt(dot(vec3(_1404, _1405, _1406), vec3(_1404, _1405, _1406)));
        float _1423 = ((_1410 * _1404) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1361 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1424 = ((_1410 * _1405) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1365 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1425 = ((_1410 * _1406) / cbModelParam._m0[35u].z) + ((((((_1369 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1427 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        vec4 _1434 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        vec4 _1441 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        vec4 _1448 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        float _1460 = exp2((_1427.w + (-0.5)) * 20.0) * 2.0;
        float _1461 = _1460 * (_1427.x + (-0.5));
        float _1462 = _1460 * (_1427.y + (-0.5));
        float _1463 = _1460 * (_1427.z + (-0.5));
        float _1470 = exp2((_1434.w + (-0.5)) * 20.0) * 2.0;
        float _1471 = _1470 * (_1434.x + (-0.5));
        float _1472 = _1470 * (_1434.y + (-0.5));
        float _1473 = _1470 * (_1434.z + (-0.5));
        float _1480 = exp2((_1441.w + (-0.5)) * 20.0) * 2.0;
        float _1481 = _1480 * (_1441.x + (-0.5));
        float _1482 = _1480 * (_1441.y + (-0.5));
        float _1483 = _1480 * (_1441.z + (-0.5));
        float _1490 = exp2((_1448.w + (-0.5)) * 20.0) * 2.0;
        float _1491 = _1490 * (_1448.x + (-0.5));
        float _1492 = _1490 * (_1448.y + (-0.5));
        float _1493 = _1490 * (_1448.z + (-0.5));
        float _1494 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1495 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1496 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1497 = _1461 * 0.5;
        float _1498 = _1471 * 0.5;
        float _1499 = _1481 * 0.5;
        float _1500 = dot(vec3(_1497, _1498, _1499), vec3(_1497, _1498, _1499));
        float _1505 = (_1500 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1500);
        float _1513 = (dot(vec3(_739, _740, _741), vec3(_1505 * _1497, _1505 * _1498, _1505 * _1499)) + 1.0) * 0.5;
        float _4338 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1522 = sqrt(((_1498 * _1498) + (_1497 * _1497)) + (_1499 * _1499)) / (_1494 + 9.9999997473787516355514526367188e-06);
        float _4349 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1524 = _1523 * 2.0;
        float _1528 = (1.0 - _1523) / (_1523 + 1.0);
        float _4360 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _1538 = ((((1.0 - _1529) * (_1524 + 2.0)) * exp2(log2(isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_1524 + 1.0))) + _1529) * _1494;
        float _1539 = _1462 * 0.5;
        float _1540 = _1472 * 0.5;
        float _1541 = _1482 * 0.5;
        float _1542 = dot(vec3(_1539, _1540, _1541), vec3(_1539, _1540, _1541));
        float _1547 = (_1542 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1542);
        float _1555 = (dot(vec3(_739, _740, _741), vec3(_1547 * _1539, _1547 * _1540, _1547 * _1541)) + 1.0) * 0.5;
        float _4371 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1564 = sqrt(((_1540 * _1540) + (_1539 * _1539)) + (_1541 * _1541)) / (_1495 + 9.9999997473787516355514526367188e-06);
        float _4382 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _1566 = _1565 * 2.0;
        float _1570 = (1.0 - _1565) / (_1565 + 1.0);
        float _4393 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _1580 = ((((1.0 - _1571) * (_1566 + 2.0)) * exp2(log2(isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_1566 + 1.0))) + _1571) * _1495;
        float _1581 = _1463 * 0.5;
        float _1582 = _1473 * 0.5;
        float _1583 = _1483 * 0.5;
        float _1584 = dot(vec3(_1581, _1582, _1583), vec3(_1581, _1582, _1583));
        float _1589 = (_1584 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1584);
        float _1597 = (dot(vec3(_739, _740, _741), vec3(_1589 * _1581, _1589 * _1582, _1589 * _1583)) + 1.0) * 0.5;
        float _4404 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1606 = sqrt(((_1582 * _1582) + (_1581 * _1581)) + (_1583 * _1583)) / (_1496 + 9.9999997473787516355514526367188e-06);
        float _4415 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1607 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _1608 = _1607 * 2.0;
        float _1612 = (1.0 - _1607) / (_1607 + 1.0);
        float _4426 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _1622 = ((((1.0 - _1613) * (_1608 + 2.0)) * exp2(log2(isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_1608 + 1.0))) + _1613) * _1496;
        _1630 = _1463;
        _1631 = _1462;
        _1632 = _1461;
        _1633 = _1473;
        _1634 = _1472;
        _1635 = _1471;
        _1636 = _1483;
        _1637 = _1482;
        _1638 = _1481;
        _1639 = _1496;
        _1640 = _1495;
        _1641 = _1494;
        _1642 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)));
        _1643 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)));
        _1644 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)));
    }
    else
    {
        _1630 = _1320;
        _1631 = _1320;
        _1632 = _1320;
        _1633 = _1320;
        _1634 = _1320;
        _1635 = _1320;
        _1636 = _1320;
        _1637 = _1320;
        _1638 = _1320;
        _1639 = _1320;
        _1640 = _1320;
        _1641 = _1320;
        _1642 = 0.0;
        _1643 = 0.0;
        _1644 = 0.0;
    }
    float _1654 = (cbModelParam._m0[1u].x * (_1642 - _1332)) + _1332;
    float _1655 = (cbModelParam._m0[1u].x * (_1643 - _1333)) + _1333;
    float _1656 = (cbModelParam._m0[1u].x * (_1644 - _1334)) + _1334;
    float _1677 = fma(_1656, cbSceneParam._m0[89u].z, fma(_1655, cbSceneParam._m0[89u].y, _1654 * cbSceneParam._m0[89u].x));
    float _1680 = fma(_1656, cbSceneParam._m0[90u].z, fma(_1655, cbSceneParam._m0[90u].y, _1654 * cbSceneParam._m0[90u].x));
    float _1683 = fma(_1656, cbSceneParam._m0[91u].z, fma(_1655, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1654));
    float _1698 = _925 * 0.5;
    float _1699 = _926 * 0.5;
    float _1700 = _927 * 0.5;
    float _1701 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1632, _1635, _1638, _1641));
    float _1704 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1631, _1634, _1637, _1640));
    float _1707 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1630, _1633, _1636, _1639));
    float _1741;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1714 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1319, _1323, _1326, _1329));
        float _1718 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1321, _1324, _1327, _1330));
        float _1722 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1322, _1325, _1328, _1331));
        float _1729 = dot(vec4(cbModelParam._m0[39u]), vec4(_1698, _1699, _1700, 1.0));
        _1741 = dot(vec3(isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)), isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)), isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1729) ? 0.0 : (isnan(0.0) ? _1729 : max(0.0, _1729))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1741 = 1.0;
    }
    float _1752;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1743 = dot(vec4(cbModelParam._m0[40u]), vec4(_1698, _1699, _1700, 1.0));
        _1752 = dot(vec3(isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)), isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)), isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1743) ? 0.0 : (isnan(0.0) ? _1743 : max(0.0, _1743))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1752 = 1.0;
    }
    float _1756 = (_1752 * cbModelParam._m0[1u].x) + (_1741 * (1.0 - cbModelParam._m0[1u].x));
    float _1766 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _742);
    float _1767 = isnan(_1766) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1766 : min(cbModelParam._m0[25u].z, _1766));
    float _1849;
    float _1851;
    float _1853;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1816 = fma(_989, cbModelParam._m0[13u].z, fma(_985, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _981)) + cbModelParam._m0[13u].w;
        float _1820 = fma(_989, cbModelParam._m0[14u].z, fma(_985, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _981)) + cbModelParam._m0[14u].w;
        float _1824 = fma(_989, cbModelParam._m0[15u].z, fma(_985, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _981)) + cbModelParam._m0[15u].w;
        float _1827 = fma(_927, cbModelParam._m0[13u].z, fma(_926, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _925));
        float _1830 = fma(_927, cbModelParam._m0[14u].z, fma(_926, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _925));
        float _1833 = fma(_927, cbModelParam._m0[15u].z, fma(_926, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _925));
        float _1861;
        if (_1827 > 0.0)
        {
            _1861 = abs((1.0 - _1816) / _1827);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1827 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1816 + 1.0) / _1827);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1861 = frontier_phi_17_15_ladder;
        }
        float _2033;
        if (_1830 > 0.0)
        {
            _2033 = abs((1.0 - _1820) / _1830);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1830 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1820 + 1.0) / _1830);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2033 = frontier_phi_26_22_ladder;
        }
        float _2328;
        if (_1833 > 0.0)
        {
            _2328 = abs((1.0 - _1824) / _1833);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1833 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1824 + 1.0) / _1833);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2328 = frontier_phi_38_33_ladder;
        }
        float _2330 = isnan(_2033) ? _1861 : (isnan(_1861) ? _2033 : min(_1861, _2033));
        float _2331 = isnan(_2328) ? _2330 : (isnan(_2330) ? _2328 : min(_2330, _2328));
        float _2335 = (_2331 * _1827) + _1816;
        float _2336 = (_2331 * _1830) + _1820;
        float _2337 = (_2331 * _1833) + _1824;
        float _2338 = _2331 * 9.9999997473787516355514526367188e-05;
        float _2340 = (-1.0) - _2338;
        float _2342 = _2338 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2337 > _2342) || ((_2337 < _2340) || ((_2336 > _2342) || ((_2336 < _2340) || ((_2335 < _2340) || (_2335 > _2342))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2482 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2337, cbModelParam._m0[9u].z, fma(_2336, cbModelParam._m0[9u].y, _2335 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2337, cbModelParam._m0[10u].z, fma(_2336, cbModelParam._m0[10u].y, _2335 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2337, cbModelParam._m0[11u].z, fma(_2336, cbModelParam._m0[11u].y, _2335 * cbModelParam._m0[11u].x))), _1767);
            frontier_phi_16_38_ladder = _2482.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2482.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2482.x * cbModelParam._m0[1u].y;
        }
        _1849 = frontier_phi_16_38_ladder_2;
        _1851 = frontier_phi_16_38_ladder_1;
        _1853 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1837 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_925, _926, _927), _1767);
        _1849 = _1837.x * cbModelParam._m0[1u].y;
        _1851 = _1837.y * cbModelParam._m0[1u].y;
        _1853 = _1837.z * cbModelParam._m0[1u].y;
    }
    float _1857 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _742);
    float _1858 = isnan(_1857) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1857 : min(cbModelParam._m0[25u].w, _1857));
    float _1948;
    float _1950;
    float _1952;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1912 = fma(_989, cbModelParam._m0[21u].z, fma(_985, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _981)) + cbModelParam._m0[21u].w;
        float _1916 = fma(_989, cbModelParam._m0[22u].z, fma(_985, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _981)) + cbModelParam._m0[22u].w;
        float _1920 = fma(_989, cbModelParam._m0[23u].z, fma(_985, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _981)) + cbModelParam._m0[23u].w;
        float _1923 = fma(_927, cbModelParam._m0[21u].z, fma(_926, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _925));
        float _1926 = fma(_927, cbModelParam._m0[22u].z, fma(_926, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _925));
        float _1929 = fma(_927, cbModelParam._m0[23u].z, fma(_926, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _925));
        float _2038;
        if (_1923 > 0.0)
        {
            _2038 = abs((1.0 - _1912) / _1923);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1923 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1912 + 1.0) / _1923);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2038 = frontier_phi_28_24_ladder;
        }
        float _2355;
        if (_1926 > 0.0)
        {
            _2355 = abs((1.0 - _1916) / _1926);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1926 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1916 + 1.0) / _1926);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2355 = frontier_phi_40_35_ladder;
        }
        float _2693;
        if (_1929 > 0.0)
        {
            _2693 = abs((1.0 - _1920) / _1929);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1929 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1920 + 1.0) / _1929);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2693 = frontier_phi_50_47_ladder;
        }
        float _2695 = isnan(_2355) ? _2038 : (isnan(_2038) ? _2355 : min(_2038, _2355));
        float _2696 = isnan(_2693) ? _2695 : (isnan(_2695) ? _2693 : min(_2695, _2693));
        float _2700 = (_2696 * _1923) + _1912;
        float _2701 = (_2696 * _1926) + _1916;
        float _2702 = (_2696 * _1929) + _1920;
        float _2703 = _2696 * 9.9999997473787516355514526367188e-05;
        float _2704 = (-1.0) - _2703;
        float _2706 = _2703 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2702 > _2706) || ((_2702 < _2704) || ((_2701 > _2706) || ((_2701 < _2704) || ((_2700 < _2704) || (_2700 > _2706))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2824 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2702, cbModelParam._m0[17u].z, fma(_2701, cbModelParam._m0[17u].y, _2700 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2702, cbModelParam._m0[18u].z, fma(_2701, cbModelParam._m0[18u].y, _2700 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2702, cbModelParam._m0[19u].z, fma(_2701, cbModelParam._m0[19u].y, _2700 * cbModelParam._m0[19u].x))), _1858);
            frontier_phi_25_50_ladder = _2824.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2824.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2824.x * cbModelParam._m0[1u].z;
        }
        _1948 = frontier_phi_25_50_ladder_2;
        _1950 = frontier_phi_25_50_ladder_1;
        _1952 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1932 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_925, _926, _927), _1858);
        _1948 = _1932.x * cbModelParam._m0[1u].z;
        _1950 = _1932.y * cbModelParam._m0[1u].z;
        _1952 = _1932.z * cbModelParam._m0[1u].z;
    }
    float _1965 = (((_952 * _901) + _953) * _917) * ((cbModelParam._m0[1u].w * (_1948 - _1849)) + _1849);
    float _1967 = (((_952 * _903) + _953) * _917) * ((cbModelParam._m0[1u].w * (_1950 - _1851)) + _1851);
    float _1969 = (((_952 * _904) + _953) * _917) * ((cbModelParam._m0[1u].w * (_1952 - _1853)) + _1853);
    float _1972 = fma(_1969, cbSceneParam._m0[89u].z, fma(_1967, cbSceneParam._m0[89u].y, _1965 * cbSceneParam._m0[89u].x));
    float _1975 = fma(_1969, cbSceneParam._m0[90u].z, fma(_1967, cbSceneParam._m0[90u].y, _1965 * cbSceneParam._m0[90u].x));
    float _1978 = fma(_1969, cbSceneParam._m0[91u].z, fma(_1967, cbSceneParam._m0[91u].y, _1965 * cbSceneParam._m0[91u].x));
    float _2012 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2016 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2020 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2024 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2025 = _2012 / _2024;
    float _2026 = _2016 / _2024;
    float _2027 = _2020 / _2024;
    float _2174;
    float _2175;
    float _2176;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2054 = ((uint(_2027 > cbSceneParam._m0[59u].y) + uint(_2027 > cbSceneParam._m0[59u].x)) + uint(_2027 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2055 = _2054 + 43u;
        uint _2063 = _2054 + 44u;
        uint _2071 = _2054 + 45u;
        uint _2079 = _2054 + 46u;
        float _2090 = fma(_2024, cbSceneParam._m0[_2055].w, fma(_2020, cbSceneParam._m0[_2055].z, fma(_2016, cbSceneParam._m0[_2055].y, _2012 * cbSceneParam._m0[_2055].x)));
        float _2094 = fma(_2024, cbSceneParam._m0[_2063].w, fma(_2020, cbSceneParam._m0[_2063].z, fma(_2016, cbSceneParam._m0[_2063].y, _2012 * cbSceneParam._m0[_2063].x)));
        float _2102 = fma(_2024, cbSceneParam._m0[_2079].w, fma(_2020, cbSceneParam._m0[_2079].z, fma(_2016, cbSceneParam._m0[_2079].y, _2012 * cbSceneParam._m0[_2079].x)));
        float _2107 = cbSceneParam._m0[33u].z * _2102;
        float _2109 = cbSceneParam._m0[33u].w * _2102;
        float _2112 = fma(_2024, cbSceneParam._m0[_2071].w, fma(_2020, cbSceneParam._m0[_2071].z, fma(_2016, cbSceneParam._m0[_2071].y, _2012 * cbSceneParam._m0[_2071].x))) / _2102;
        float _2160 = (cbSceneParam._m0[33u].x - sqrt(((_2026 * _2026) + (_2025 * _2025)) + (_2027 * _2027))) * cbSceneParam._m0[33u].y;
        float _4552 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2167 = (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2107 + _2090) / _2102, (_2109 + _2094) / _2102), _2112), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2109 + _2090) / _2102, (_2094 - _2107) / _2102), _2112), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2090 - _2107) / _2102, (_2094 - _2109) / _2102), _2112), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2090 - _2109) / _2102, (_2107 + _2094) / _2102), _2112), 0.0)).x), vec4(0.25)));
        _2174 = 1.0 - (_2167 * cbSceneParam._m0[34u].x);
        _2175 = 1.0 - (_2167 * cbSceneParam._m0[34u].y);
        _2176 = 1.0 - (_2167 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2174 = 1.0;
        _2175 = 1.0;
        _2176 = 1.0;
    }
    float _2240;
    float _2242;
    float _2244;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2228 = fma(_2024, cbSceneParam._m0[63u].w, fma(_2020, cbSceneParam._m0[63u].z, fma(_2016, cbSceneParam._m0[63u].y, _2012 * cbSceneParam._m0[63u].x)));
        float _2229 = fma(_2024, cbSceneParam._m0[60u].w, fma(_2020, cbSceneParam._m0[60u].z, fma(_2016, cbSceneParam._m0[60u].y, _2012 * cbSceneParam._m0[60u].x))) / _2228;
        float _2230 = fma(_2024, cbSceneParam._m0[61u].w, fma(_2020, cbSceneParam._m0[61u].z, fma(_2016, cbSceneParam._m0[61u].y, _2012 * cbSceneParam._m0[61u].x))) / _2228;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2229 >= cbSceneParam._m0[64u].x) && (_2230 >= cbSceneParam._m0[64u].y)) && (_2229 <= cbSceneParam._m0[64u].z)) && (_2230 <= cbSceneParam._m0[64u].w))
        {
            float _2368 = fma(_2024, cbSceneParam._m0[62u].w, fma(_2020, cbSceneParam._m0[62u].z, fma(_2016, cbSceneParam._m0[62u].y, _2012 * cbSceneParam._m0[62u].x))) / _2228;
            float _2372 = isnan(cbSceneParam._m0[41u].w) ? _2368 : (isnan(_2368) ? cbSceneParam._m0[41u].w : max(_2368, cbSceneParam._m0[41u].w));
            float _2415 = (cbSceneParam._m0[33u].x - sqrt(((_2026 * _2026) + (_2025 * _2025)) + (_2027 * _2027))) * cbSceneParam._m0[33u].y;
            float _4568 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
            float _2422 = (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2229, cbSceneParam._m0[33u].w + _2230), _2372), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2229, _2230 - cbSceneParam._m0[33u].z), _2372), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2229 - cbSceneParam._m0[33u].z, _2230 - cbSceneParam._m0[33u].w), _2372), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2229 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2230), _2372), 0.0)).x), vec4(0.25)));
            float _2426 = 1.0 - (_2422 * cbSceneParam._m0[34u].x);
            float _2427 = 1.0 - (_2422 * cbSceneParam._m0[34u].y);
            float _2428 = 1.0 - (_2422 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2428) ? _2176 : (isnan(_2176) ? _2428 : min(_2176, _2428));
            frontier_phi_37_36_ladder_1 = isnan(_2427) ? _2175 : (isnan(_2175) ? _2427 : min(_2175, _2427));
            frontier_phi_37_36_ladder_2 = isnan(_2426) ? _2174 : (isnan(_2174) ? _2426 : min(_2174, _2426));
        }
        else
        {
            frontier_phi_37_36_ladder = _2176;
            frontier_phi_37_36_ladder_1 = _2175;
            frontier_phi_37_36_ladder_2 = _2174;
        }
        _2240 = frontier_phi_37_36_ladder_2;
        _2242 = frontier_phi_37_36_ladder_1;
        _2244 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2240 = _2174;
        _2242 = _2175;
        _2244 = _2176;
    }
    uvec4 _2249 = floatBitsToUint(cbInstanceData._m0[_276 + 5u]);
    uint _2251 = _2249.x * 14u;
    uint _2252 = _2251 + 13u;
    float _2259 = _917 + (-1.0);
    float _2264 = (cbLight._m0[_2252].x * _2259) + 1.0;
    float _2265 = (cbLight._m0[_2252].y * _2259) + 1.0;
    float _2266 = (cbLight._m0[_2252].z * _2259) + 1.0;
    float _2267 = (cbLight._m0[_2252].w * _2259) + 1.0;
    uint _2268 = _2251 + 5u;
    float _2274 = isnan(1.0) ? _2265 : (isnan(_2265) ? 1.0 : min(_2265, 1.0));
    uint _2278 = _2251 + 4u;
    float _2287 = isnan(1.0) ? _2264 : (isnan(_2264) ? 1.0 : min(_2264, 1.0));
    uint _2291 = _2251 | 1u;
    float _2302 = dot(vec3(cbLight._m0[_2251].xyz), vec3(_739, _740, _741));
    float _2305 = dot(vec3(cbLight._m0[_2291].xyz), vec3(_739, _740, _741));
    float _4604 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _4615 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2310 = (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * 0.3183098733425140380859375;
    float _2312 = (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * 0.3183098733425140380859375;
    float _2319 = ((cbLight._m0[_2268].x * _2274) * _2312) + (((cbLight._m0[_2278].x * _2240) * _2287) * _2310);
    float _2320 = ((_2274 * cbLight._m0[_2268].y) * _2312) + (((cbLight._m0[_2278].y * _2242) * _2287) * _2310);
    float _2321 = ((_2274 * cbLight._m0[_2268].z) * _2312) + (((cbLight._m0[_2278].z * _2244) * _2287) * _2310);
    uvec4 _2325 = floatBitsToUint(cbLight._m0[_2251 + 12u]);
    bool _2327 = _2325.x == 0u;
    float _2429;
    float _2431;
    float _2433;
    if (_2327)
    {
        _2429 = _2319;
        _2431 = _2320;
        _2433 = _2321;
    }
    else
    {
        uint _2437 = _2251 + 6u;
        float _2453 = (dot(vec3(cbLight._m0[_2251 + 2u].xyz), vec3(_739, _740, _741)) * 0.5) + 0.5;
        float _2454 = _2453 * _2453;
        float _4626 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2455 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
        float _2456 = isnan(1.0) ? _2266 : (isnan(_2266) ? 1.0 : min(_2266, 1.0));
        _2429 = (((cbLight._m0[_2437].x * 0.3183098733425140380859375) * _2455) * _2456) + _2319;
        _2431 = (((cbLight._m0[_2437].y * 0.3183098733425140380859375) * _2455) * _2456) + _2320;
        _2433 = (((cbLight._m0[_2437].z * 0.3183098733425140380859375) * _2455) * _2456) + _2321;
    }
    bool _2436 = _2325.y == 0u;
    float _2491;
    float _2493;
    float _2495;
    if (_2436)
    {
        _2491 = _2429;
        _2493 = _2431;
        _2495 = _2433;
    }
    else
    {
        uint _2664 = _2251 + 7u;
        float _2680 = (dot(vec3(cbLight._m0[_2251 + 3u].xyz), vec3(_739, _740, _741)) * 0.5) + 0.5;
        float _2681 = _2680 * _2680;
        float _4642 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        float _2682 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
        float _2683 = isnan(1.0) ? _2267 : (isnan(_2267) ? 1.0 : min(_2267, 1.0));
        _2491 = (((cbLight._m0[_2664].x * 0.3183098733425140380859375) * _2682) * _2683) + _2429;
        _2493 = (((cbLight._m0[_2664].y * 0.3183098733425140380859375) * _2682) * _2683) + _2431;
        _2495 = (((cbLight._m0[_2664].z * 0.3183098733425140380859375) * _2682) * _2683) + _2433;
    }
    uint _2498 = _2251 + 8u;
    float _2511 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2251].w)) * _742) * 0.949999988079071044921875);
    float _2512 = _2511 * _2511;
    float _2513 = cbLight._m0[_2251].x + _819;
    float _2514 = cbLight._m0[_2251].y + _820;
    float _2515 = cbLight._m0[_2251].z + _821;
    float _2519 = inversesqrt(dot(vec3(_2513, _2514, _2515), vec3(_2513, _2514, _2515)));
    float _2520 = _2519 * _2513;
    float _2521 = _2519 * _2514;
    float _2522 = _2519 * _2515;
    float _2523 = dot(vec3(_739, _740, _741), vec3(cbLight._m0[_2251].xyz));
    float _4658 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
    float _2526 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
    float _4669 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _2527 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
    float _2528 = dot(vec3(_739, _740, _741), vec3(_2520, _2521, _2522));
    float _4680 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
    float _2531 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
    float _2532 = dot(vec3(cbLight._m0[_2251].xyz), vec3(_2520, _2521, _2522));
    float _4691 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
    float _2536 = _2512 * _2512;
    float _2540 = ((_2531 * _2531) * (_2536 + (-1.0))) + 1.0;
    float _2548 = exp2(log2(1.0 - (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0)))) * 5.0);
    float _2549 = 0.959999978542327880859375 - _898;
    float _2551 = 0.959999978542327880859375 - _899;
    float _2552 = 0.959999978542327880859375 - _900;
    float _2559 = 1.0 - _2512;
    float _2570 = (0.5 / (((_2527 * ((_2526 * _2559) + _2512)) + 9.9999999392252902907785028219223e-09) + (((_2527 * _2559) + _2512) * _2526))) * _2526;
    float _4702 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
    float _2572 = (isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0))) * (_2536 / ((_2540 * _2540) * 3.141590118408203125));
    uint _2586 = _2251 + 9u;
    float _2597 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2291].w)) * _742) * 0.949999988079071044921875);
    float _2598 = _2597 * _2597;
    float _2599 = cbLight._m0[_2291].x + _819;
    float _2600 = cbLight._m0[_2291].y + _820;
    float _2601 = cbLight._m0[_2291].z + _821;
    float _2605 = inversesqrt(dot(vec3(_2599, _2600, _2601), vec3(_2599, _2600, _2601)));
    float _2606 = _2605 * _2599;
    float _2607 = _2605 * _2600;
    float _2608 = _2605 * _2601;
    float _2609 = dot(vec3(_739, _740, _741), vec3(cbLight._m0[_2291].xyz));
    float _4713 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
    float _2612 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
    float _2613 = dot(vec3(_739, _740, _741), vec3(_2606, _2607, _2608));
    float _4724 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
    float _2616 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
    float _2617 = dot(vec3(cbLight._m0[_2291].xyz), vec3(_2606, _2607, _2608));
    float _4735 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
    float _2621 = _2598 * _2598;
    float _2625 = ((_2616 * _2616) * (_2621 + (-1.0))) + 1.0;
    float _2632 = exp2(log2(1.0 - (isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0)))) * 5.0);
    float _2639 = 1.0 - _2598;
    float _2649 = (0.5 / (((_2527 * ((_2612 * _2639) + _2598)) + 9.9999999392252902907785028219223e-09) + (((_2527 * _2639) + _2598) * _2612))) * _2612;
    float _4746 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
    float _2651 = (isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0))) * (_2621 / ((_2625 * _2625) * 3.141590118408203125));
    float _2661 = (((((_2632 * _2549) + _901) * cbLight._m0[_2586].x) * _2651) * _2274) + ((((cbLight._m0[_2498].x * _2240) * ((_2548 * _2549) + _901)) * _2572) * _2287);
    float _2662 = (((((_2632 * _2551) + _903) * cbLight._m0[_2586].y) * _2651) * _2274) + ((((cbLight._m0[_2498].y * _2242) * ((_2548 * _2551) + _903)) * _2572) * _2287);
    float _2663 = (((((_2632 * _2552) + _904) * cbLight._m0[_2586].z) * _2651) * _2274) + ((((cbLight._m0[_2498].z * _2244) * ((_2548 * _2552) + _904)) * _2572) * _2287);
    float _2719;
    float _2721;
    float _2723;
    if (_2327)
    {
        _2719 = _2661;
        _2721 = _2662;
        _2723 = _2663;
    }
    else
    {
        uint _2725 = _2251 + 2u;
        uint _2729 = _2251 + 10u;
        float _2743 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2725].w)) * _742) * 0.949999988079071044921875);
        float _2744 = _2743 * _2743;
        float _2745 = cbLight._m0[_2725].x + _819;
        float _2746 = cbLight._m0[_2725].y + _820;
        float _2747 = cbLight._m0[_2725].z + _821;
        float _2751 = inversesqrt(dot(vec3(_2745, _2746, _2747), vec3(_2745, _2746, _2747)));
        float _2752 = _2751 * _2745;
        float _2753 = _2751 * _2746;
        float _2754 = _2751 * _2747;
        float _2755 = dot(vec3(_739, _740, _741), vec3(cbLight._m0[_2725].xyz));
        float _4757 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
        float _2758 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
        float _2759 = dot(vec3(_739, _740, _741), vec3(_2752, _2753, _2754));
        float _4768 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
        float _2762 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
        float _2763 = dot(vec3(cbLight._m0[_2725].xyz), vec3(_2752, _2753, _2754));
        float _4779 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
        float _2767 = _2744 * _2744;
        float _2771 = ((_2762 * _2762) * (_2767 + (-1.0))) + 1.0;
        float _2778 = exp2(log2(1.0 - (isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0)))) * 5.0);
        float _2785 = 1.0 - _2744;
        float _2795 = (0.5 / (((_2527 * ((_2758 * _2785) + _2744)) + 9.9999999392252902907785028219223e-09) + (((_2527 * _2785) + _2744) * _2758))) * _2758;
        float _4790 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
        float _2797 = (isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0))) * (_2767 / ((_2771 * _2771) * 3.141590118408203125));
        float _2798 = isnan(1.0) ? _2266 : (isnan(_2266) ? 1.0 : min(_2266, 1.0));
        _2719 = (((((_2778 * _2549) + _901) * cbLight._m0[_2729].x) * _2797) * _2798) + _2661;
        _2721 = (((((_2778 * _2551) + _903) * cbLight._m0[_2729].y) * _2797) * _2798) + _2662;
        _2723 = (((((_2778 * _2552) + _904) * cbLight._m0[_2729].z) * _2797) * _2798) + _2663;
    }
    float _2829;
    float _2831;
    float _2833;
    if (_2436)
    {
        _2829 = _2719;
        _2831 = _2721;
        _2833 = _2723;
    }
    else
    {
        uint _2840 = _2251 + 3u;
        uint _2844 = _2251 + 11u;
        float _2858 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2840].w)) * _742) * 0.949999988079071044921875);
        float _2859 = _2858 * _2858;
        float _2860 = cbLight._m0[_2840].x + _819;
        float _2861 = cbLight._m0[_2840].y + _820;
        float _2862 = cbLight._m0[_2840].z + _821;
        float _2866 = inversesqrt(dot(vec3(_2860, _2861, _2862), vec3(_2860, _2861, _2862)));
        float _2867 = _2866 * _2860;
        float _2868 = _2866 * _2861;
        float _2869 = _2866 * _2862;
        float _2870 = dot(vec3(_739, _740, _741), vec3(cbLight._m0[_2840].xyz));
        float _4806 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
        float _2873 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
        float _2874 = dot(vec3(_739, _740, _741), vec3(_2867, _2868, _2869));
        float _4817 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
        float _2877 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
        float _2878 = dot(vec3(cbLight._m0[_2840].xyz), vec3(_2867, _2868, _2869));
        float _4828 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
        float _2882 = _2859 * _2859;
        float _2886 = ((_2877 * _2877) * (_2882 + (-1.0))) + 1.0;
        float _2893 = exp2(log2(1.0 - (isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0)))) * 5.0);
        float _2900 = 1.0 - _2859;
        float _2910 = (0.5 / (((_2527 * ((_2873 * _2900) + _2859)) + 9.9999999392252902907785028219223e-09) + (((_2527 * _2900) + _2859) * _2873))) * _2873;
        float _4839 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
        float _2912 = (isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0))) * (_2882 / ((_2886 * _2886) * 3.141590118408203125));
        float _2913 = isnan(1.0) ? _2267 : (isnan(_2267) ? 1.0 : min(_2267, 1.0));
        _2829 = (((((_2893 * _2549) + _901) * cbLight._m0[_2844].x) * _2912) * _2913) + _2719;
        _2831 = (((((_2893 * _2551) + _903) * cbLight._m0[_2844].y) * _2912) * _2913) + _2721;
        _2833 = (((((_2893 * _2552) + _904) * cbLight._m0[_2844].z) * _2912) * _2913) + _2723;
    }
    float _2979;
    float _2981;
    float _2983;
    float _2985;
    float _2987;
    float _2989;
    if (_2249.y == 0u)
    {
        uvec4 _2934 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2935 = _2934.x;
        uint _2946 = uint((float(_2934.y) * floor(float(uint(cbSceneParam._m0[85u].y * _840) / _2935))) + floor(float(uint(cbSceneParam._m0[85u].x * _839) / _2935)));
        float _2956 = (log2(_2027 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2957 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
        uint _2960 = uint(isnan(14.0) ? _2957 : (isnan(_2957) ? 14.0 : min(_2957, 14.0)));
        uvec4 _2965 = texelFetch(g_lightClusterGridBuffer, int(((_2960 << 2u) + (_2946 << 6u)) >> 2u));
        uint _2966 = _2965.x;
        uint _2967 = _2934.z;
        float _3046;
        float _3048;
        float _3050;
        float _3052;
        float _3054;
        float _3056;
        if (((((1u << ((_2967 >> 4u) & 15u)) + 4294967295u) & _2966) == 0u) || ((_2967 & 240u) == 0u))
        {
            _3046 = 0.0;
            _3048 = 0.0;
            _3050 = 0.0;
            _3052 = 0.0;
            _3054 = 0.0;
            _3056 = 0.0;
        }
        else
        {
            float _3047;
            float _3049;
            float _3051;
            float _3053;
            float _3055;
            float _3057;
            float _3199 = 0.0;
            float _3200 = 0.0;
            float _3201 = 0.0;
            float _3202 = 0.0;
            float _3203 = 0.0;
            float _3204 = 0.0;
            uint _3205 = 0u;
            uint _3214;
            bool _3215;
            for (;;)
            {
                _3214 = texelFetch(g_lightClassification, int((((_2960 << 5u) + (_2946 << 9u)) + (_3205 << 2u)) >> 2u)).x;
                _3215 = _3214 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3215)
                {
                    frontier_phi_71_pred = _3204;
                    frontier_phi_71_pred_1 = _3203;
                    frontier_phi_71_pred_2 = _3202;
                    frontier_phi_71_pred_3 = _3201;
                    frontier_phi_71_pred_4 = _3200;
                    frontier_phi_71_pred_5 = _3199;
                }
                else
                {
                    float _3344;
                    float _3345;
                    float _3346;
                    float _3347;
                    float _3348;
                    float _3349;
                    uint _3350;
                    _3344 = _3199;
                    _3345 = _3200;
                    _3346 = _3201;
                    _3347 = _3202;
                    _3348 = _3203;
                    _3349 = _3204;
                    _3350 = _3214;
                    float _3271;
                    float _3272;
                    float _3273;
                    float _3274;
                    float _3275;
                    float _3276;
                    for (;;)
                    {
                        uint _3354 = uint(findLSB(_3350)) + (_3205 << 5u);
                        uint _3351 = (_3350 + 4294967295u) & _3350;
                        uint _3356 = _3354 * 48u;
                        vec4 _3370 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3356)).x, texelFetch(g_PointLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3356 + 3u)).x));
                        uint _3376 = (_3354 * 48u) + 4u;
                        vec4 _3389 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3376)).x, texelFetch(g_PointLightRenderingBuffer, int(_3376 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3376 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3376 + 3u)).x));
                        uint _3395 = (_3354 * 48u) + 8u;
                        vec3 _3406 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3395)).x, texelFetch(g_PointLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3395 + 2u)).x));
                        float _3410 = _3370.x - _2025;
                        float _3411 = _3370.y - _2026;
                        float _3412 = _3370.z - _2027;
                        float _3413 = dot(vec3(_3410, _3411, _3412), vec3(_3410, _3411, _3412));
                        float _3416 = inversesqrt(_3413);
                        float _3417 = _3416 * _3410;
                        float _3418 = _3416 * _3411;
                        float _3419 = _3416 * _3412;
                        float _3420 = dot(vec3(_858, _861, _864), vec3(_3417, _3418, _3419));
                        float _3425 = 1.0 - (_3413 * _3370.w);
                        float _4865 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                        float _3426 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
                        float _3427 = sqrt(_3413) * _3389.w;
                        float _3430 = 1.39999997615814208984375 / (_3427 + 1.39999997615814208984375);
                        float _3431 = _3430 * _3430;
                        float _3434 = ((1.0 - _3431) * _3420) + _3431;
                        float _3437 = _3427 * _3427;
                        float _3441 = ((isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0))) * _3426) / ((_3437 * 0.699999988079071044921875) + 1.0);
                        float _3445 = (-0.0) - _2025;
                        float _3446 = (-0.0) - _2026;
                        float _3447 = (-0.0) - _2027;
                        float _3451 = inversesqrt(dot(vec3(_3445, _3446, _3447), vec3(_3445, _3446, _3447)));
                        float _3452 = _3451 * _3445;
                        float _3453 = _3451 * _3446;
                        float _3454 = _3451 * _3447;
                        float _3461 = exp2(log2(1.0 / ((_3437 * 3.5) + 5.0)) * 0.25);
                        float _3462 = 1.0 - _933;
                        float _3469 = sqrt(1.0 - ((1.0 - (_3462 * _3462)) * (1.0 - (_3461 * _3461))));
                        float _3470 = _3469 * _3469;
                        float _3471 = _3470 * _3470;
                        float _3472 = _3452 + _3417;
                        float _3473 = _3453 + _3418;
                        float _3474 = _3454 + _3419;
                        float _3478 = inversesqrt(dot(vec3(_3472, _3473, _3474), vec3(_3472, _3473, _3474)));
                        float _3482 = dot(vec3(_858, _861, _864), vec3(_3452, _3453, _3454));
                        float _4881 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
                        float _3485 = isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0));
                        float _3486 = dot(vec3(_858, _861, _864), vec3(_3478 * _3472, _3478 * _3473, _3478 * _3474));
                        float _4892 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                        float _3489 = isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0));
                        float _3493 = ((_3489 * _3489) * (_3471 + (-1.0))) + 1.0;
                        float _3494 = _3430 * _3470;
                        float _3495 = _3494 * _3494;
                        float _3498 = ((1.0 - _3495) * _3420) + _3495;
                        float _4903 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                        float _3499 = isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0));
                        float _3500 = 1.0 - _3470;
                        float _3510 = (0.5 / (((_3499 * ((_3485 * _3500) + _3470)) + 9.9999999392252902907785028219223e-09) + (((_3499 * _3500) + _3470) * _3485))) * _3499;
                        float _4914 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                        float _3521 = (((_3471 * 3.1415927410125732421875) * (isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0)))) / ((_3493 * _3493) * ((_3437 * 2.1991131305694580078125) + 3.141590118408203125))) * _3426;
                        _3274 = (_3441 * _3389.x) + _3347;
                        _3275 = (_3441 * _3389.y) + _3348;
                        _3276 = (_3441 * _3389.z) + _3349;
                        _3271 = (_3521 * _3406.x) + _3344;
                        _3272 = (_3521 * _3406.y) + _3345;
                        _3273 = (_3521 * _3406.z) + _3346;
                        if (_3351 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3344 = _3271;
                            _3345 = _3272;
                            _3346 = _3273;
                            _3347 = _3274;
                            _3348 = _3275;
                            _3349 = _3276;
                            _3350 = _3351;
                        }
                    }
                    frontier_phi_71_pred = _3276;
                    frontier_phi_71_pred_1 = _3275;
                    frontier_phi_71_pred_2 = _3274;
                    frontier_phi_71_pred_3 = _3273;
                    frontier_phi_71_pred_4 = _3272;
                    frontier_phi_71_pred_5 = _3271;
                }
                _3057 = frontier_phi_71_pred;
                _3055 = frontier_phi_71_pred_1;
                _3053 = frontier_phi_71_pred_2;
                _3051 = frontier_phi_71_pred_3;
                _3049 = frontier_phi_71_pred_4;
                _3047 = frontier_phi_71_pred_5;
                uint _3206 = _3205 + 1u;
                if (_3206 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3199 = _3047;
                    _3200 = _3049;
                    _3201 = _3051;
                    _3202 = _3053;
                    _3203 = _3055;
                    _3204 = _3057;
                    _3205 = _3206;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3046 = _3047;
            _3048 = _3049;
            _3050 = _3051;
            _3052 = _3053;
            _3054 = _3055;
            _3056 = _3057;
        }
        uvec4 _3060 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3061 = _3060.z;
        uint _3063 = (_3061 >> 8u) & 15u;
        float _3167;
        float _3169;
        float _3171;
        float _3173;
        float _3175;
        float _3177;
        if (((4294967295u << _3063) & _2966) == 0u)
        {
            _3167 = _3046;
            _3169 = _3048;
            _3171 = _3050;
            _3173 = _3052;
            _3175 = _3054;
            _3177 = _3056;
        }
        else
        {
            float _3192 = inversesqrt(dot(vec3(_2025, _2026, _2027), vec3(_2025, _2026, _2027)));
            float _3193 = _3192 * _2025;
            float _3194 = _3192 * _2026;
            float _3195 = _3192 * _2027;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3063 < ((_3061 >> 12u) & 15u))
            {
                float _3168;
                float _3170;
                float _3172;
                float _3174;
                float _3176;
                float _3178;
                float _3327 = _3046;
                float _3328 = _3048;
                float _3329 = _3050;
                float _3330 = _3052;
                float _3331 = _3054;
                float _3332 = _3056;
                uint _3333 = _3063;
                uint _3342;
                bool _3343;
                for (;;)
                {
                    _3342 = texelFetch(g_lightClassification, int((((_2960 << 5u) + (_2946 << 9u)) + (_3333 << 2u)) >> 2u)).x;
                    _3343 = _3342 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3343)
                    {
                        frontier_phi_82_pred = _3332;
                        frontier_phi_82_pred_1 = _3331;
                        frontier_phi_82_pred_2 = _3330;
                        frontier_phi_82_pred_3 = _3329;
                        frontier_phi_82_pred_4 = _3328;
                        frontier_phi_82_pred_5 = _3327;
                    }
                    else
                    {
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3539;
                        float _3540;
                        float _3828;
                        float _3829;
                        float _3830;
                        float _3831;
                        float _3832;
                        float _3833;
                        float _3548 = _3327;
                        float _3549 = _3328;
                        float _3550 = _3329;
                        float _3551 = _3330;
                        float _3552 = _3331;
                        float _3553 = _3332;
                        uint _3554 = _3342;
                        uint _3555;
                        vec4 _3580;
                        float _3581;
                        vec4 _3596;
                        vec3 _3608;
                        vec4 _3623;
                        vec4 _3638;
                        float _3684;
                        bool _3685;
                        for (;;)
                        {
                            uint _3565 = ((_3333 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3554));
                            _3555 = (_3554 + 4294967295u) & _3554;
                            uint _3567 = _3565 * 40u;
                            _3580 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3567)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 3u)).x));
                            _3581 = _3580.w;
                            uint _3583 = (_3565 * 40u) + 4u;
                            _3596 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3583)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 3u)).x));
                            uint _3598 = (_3565 * 40u) + 8u;
                            _3608 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3598)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 2u)).x));
                            uint _3610 = (_3565 * 40u) + 16u;
                            _3623 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3610)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 3u)).x));
                            uint _3625 = (_3565 * 40u) + 20u;
                            _3638 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3625)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 3u)).x));
                            uint _3640 = (_3565 * 40u) + 24u;
                            vec4 _3653 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3640)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 3u)).x));
                            uint _3659 = (_3565 * 40u) + 28u;
                            vec4 _3672 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3659)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 3u)).x));
                            _3684 = fma(_2027, _3672.z, fma(_2026, _3672.y, _3672.x * _2025)) + _3672.w;
                            _3685 = !((fma(_2027, _3653.z, fma(_2026, _3653.y, _3653.x * _2025)) + _3653.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3685)
                            {
                                float _3712 = _3580.x - _2025;
                                float _3713 = _3580.y - _2026;
                                float _3714 = _3580.z - _2027;
                                float _3715 = dot(vec3(_3712, _3713, _3714), vec3(_3712, _3713, _3714));
                                float _3718 = inversesqrt(_3715);
                                float _3719 = _3718 * _3712;
                                float _3720 = _3718 * _3713;
                                float _3721 = _3718 * _3714;
                                float _3725 = 1.0 - (_3715 / (_3581 * _3581));
                                float _4925 = isnan(0.0) ? _3725 : (isnan(_3725) ? 0.0 : max(_3725, 0.0));
                                float _3726 = isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0));
                                float _3730 = sqrt(_3715) * _3596.w;
                                float _3732 = 1.39999997615814208984375 / (_3730 + 1.39999997615814208984375);
                                float _3733 = _3732 * _3732;
                                float _3736 = ((1.0 - _3733) * dot(vec3(_3719, _3720, _3721), vec3(_858, _861, _864))) + _3733;
                                float _3739 = _3730 * _3730;
                                float _3743 = (fma(_2027, _3623.z, fma(_2026, _3623.y, _3623.x * _2025)) + _3623.w) / _3684;
                                float _3744 = (fma(_2027, _3638.z, fma(_2026, _3638.y, _3638.x * _2025)) + _3638.w) / _3684;
                                float _3748 = 1.0 - dot(vec2(_3743, _3744), vec2(_3743, _3744));
                                float _4941 = isnan(0.0) ? _3748 : (isnan(_3748) ? 0.0 : max(_3748, 0.0));
                                float _3749 = isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0));
                                float _3750 = _3749 * (((isnan(0.0) ? _3736 : (isnan(_3736) ? 0.0 : max(_3736, 0.0))) * _3726) / ((_3739 * 0.699999988079071044921875) + 1.0));
                                float _3762 = exp2(log2(1.0 / ((_3739 * 3.5) + 5.0)) * 0.25);
                                float _3763 = 1.0 - _933;
                                float _3770 = sqrt(1.0 - ((1.0 - (_3763 * _3763)) * (1.0 - (_3762 * _3762))));
                                float _3771 = _3770 * _3770;
                                float _3772 = _3771 * _3771;
                                float _3773 = _3719 - _3193;
                                float _3774 = _3720 - _3194;
                                float _3775 = _3721 - _3195;
                                float _3779 = inversesqrt(dot(vec3(_3773, _3774, _3775), vec3(_3773, _3774, _3775)));
                                float _3783 = dot(vec3(_858, _861, _864), vec3((-0.0) - _3193, (-0.0) - _3194, (-0.0) - _3195));
                                float _4952 = isnan(0.0) ? _3783 : (isnan(_3783) ? 0.0 : max(_3783, 0.0));
                                float _3786 = isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0));
                                float _3787 = dot(vec3(_858, _861, _864), vec3(_3779 * _3773, _3779 * _3774, _3779 * _3775));
                                float _4963 = isnan(0.0) ? _3787 : (isnan(_3787) ? 0.0 : max(_3787, 0.0));
                                float _3790 = isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0));
                                float _3794 = ((_3790 * _3790) * (_3772 + (-1.0))) + 1.0;
                                float _3795 = _3732 * _3771;
                                float _3796 = _3795 * _3795;
                                float _3802 = ((1.0 - _3796) * dot(vec3(_858, _861, _864), vec3(_3719, _3720, _3721))) + _3796;
                                float _4974 = isnan(0.0) ? _3802 : (isnan(_3802) ? 0.0 : max(_3802, 0.0));
                                float _3803 = isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0));
                                float _3804 = 1.0 - _3771;
                                float _3814 = (0.5 / (((_3803 * ((_3786 * _3804) + _3771)) + 9.9999999392252902907785028219223e-09) + (((_3803 * _3804) + _3771) * _3786))) * _3803;
                                float _4985 = isnan(0.0) ? _3814 : (isnan(_3814) ? 0.0 : max(_3814, 0.0));
                                float _3824 = (_3749 * _3726) * (((_3772 * 3.1415927410125732421875) * (isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0)))) / ((_3794 * _3794) * ((_3739 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3750 * _3596.z;
                                frontier_phi_88_pred_1 = _3750 * _3596.y;
                                frontier_phi_88_pred_2 = _3750 * _3596.x;
                                frontier_phi_88_pred_3 = _3824 * _3608.z;
                                frontier_phi_88_pred_4 = _3824 * _3608.y;
                                frontier_phi_88_pred_5 = _3824 * _3608.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3833 = frontier_phi_88_pred;
                            _3832 = frontier_phi_88_pred_1;
                            _3831 = frontier_phi_88_pred_2;
                            _3830 = frontier_phi_88_pred_3;
                            _3829 = frontier_phi_88_pred_4;
                            _3828 = frontier_phi_88_pred_5;
                            _3538 = _3831 + _3551;
                            _3539 = _3832 + _3552;
                            _3540 = _3833 + _3553;
                            _3535 = _3828 + _3548;
                            _3536 = _3829 + _3549;
                            _3537 = _3830 + _3550;
                            if (_3555 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3548 = _3535;
                                _3549 = _3536;
                                _3550 = _3537;
                                _3551 = _3538;
                                _3552 = _3539;
                                _3553 = _3540;
                                _3554 = _3555;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3540;
                        frontier_phi_82_pred_1 = _3539;
                        frontier_phi_82_pred_2 = _3538;
                        frontier_phi_82_pred_3 = _3537;
                        frontier_phi_82_pred_4 = _3536;
                        frontier_phi_82_pred_5 = _3535;
                    }
                    _3178 = frontier_phi_82_pred;
                    _3176 = frontier_phi_82_pred_1;
                    _3174 = frontier_phi_82_pred_2;
                    _3172 = frontier_phi_82_pred_3;
                    _3170 = frontier_phi_82_pred_4;
                    _3168 = frontier_phi_82_pred_5;
                    uint _3334 = _3333 + 1u;
                    if (_3334 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3327 = _3168;
                        _3328 = _3170;
                        _3329 = _3172;
                        _3330 = _3174;
                        _3331 = _3176;
                        _3332 = _3178;
                        _3333 = _3334;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3174;
                frontier_phi_63_64_ladder_1 = _3178;
                frontier_phi_63_64_ladder_2 = _3176;
                frontier_phi_63_64_ladder_3 = _3172;
                frontier_phi_63_64_ladder_4 = _3170;
                frontier_phi_63_64_ladder_5 = _3168;
            }
            else
            {
                frontier_phi_63_64_ladder = _3052;
                frontier_phi_63_64_ladder_1 = _3056;
                frontier_phi_63_64_ladder_2 = _3054;
                frontier_phi_63_64_ladder_3 = _3050;
                frontier_phi_63_64_ladder_4 = _3048;
                frontier_phi_63_64_ladder_5 = _3046;
            }
            _3167 = frontier_phi_63_64_ladder_5;
            _3169 = frontier_phi_63_64_ladder_4;
            _3171 = frontier_phi_63_64_ladder_3;
            _3173 = frontier_phi_63_64_ladder;
            _3175 = frontier_phi_63_64_ladder_2;
            _3177 = frontier_phi_63_64_ladder_1;
        }
        float _3182 = isnan(1.0) ? _917 : (isnan(_917) ? 1.0 : min(_917, 1.0));
        _2979 = (_3182 * _3173) + _2491;
        _2981 = (_3182 * _3175) + _2493;
        _2983 = (_3182 * _3177) + _2495;
        _2985 = ((_3167 * _901) * _3182) + _2829;
        _2987 = ((_3169 * _903) * _3182) + _2831;
        _2989 = ((_3171 * _904) * _3182) + _2833;
    }
    else
    {
        _2979 = _2491;
        _2981 = _2493;
        _2983 = _2495;
        _2985 = _2829;
        _2987 = _2831;
        _2989 = _2833;
    }
    float _5001 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _5012 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _5023 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _3006 = ((isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0))) * (_2979 + ((isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))) * _917))) + ((_2985 + ((isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0))) * _1756)) * cbPerFrame._m0[3u].x);
    float _3007 = ((isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0))) * (_2981 + ((isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))) * _917))) + ((_2987 + ((isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0))) * _1756)) * cbPerFrame._m0[3u].x);
    float _3008 = ((isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0))) * (_2983 + ((isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))) * _917))) + ((_2989 + ((isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0))) * _1756)) * cbPerFrame._m0[3u].x);
    uint _3009 = _276 + 6u;
    float _3017 = _839 / cbSceneParam._m0[86u].x;
    float _3018 = _840 / cbSceneParam._m0[86u].y;
    vec4 _3032 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3017, _3018, (log2((isnan(cbSceneParam._m0[77u].w) ? _761 : (isnan(_761) ? cbSceneParam._m0[77u].w : min(_761, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3034 = _3032.x;
    float _3035 = _3032.y;
    float _3036 = _3032.z;
    float _3037 = _3032.w;
    float _3109;
    float _3111;
    float _3113;
    float _3115;
    if (_761 > cbSceneParam._m0[78u].w)
    {
        float _3071 = isnan(_761) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _761 : min(cbSceneParam._m0[80u].w, _761));
        float _3072 = _3071 / _761;
        float _3083 = _3072 * _812;
        float _3084 = _813 * _3072;
        float _3085 = (-0.0) - _3084;
        float _3087 = _3072 * _814;
        float _3089 = (cbSceneParam._m0[77u].w * _3085) / _3071;
        float _3090 = _3089 + cbSceneParam._m0[79u].w;
        float _3091 = cbSceneParam._m0[79u].w - _3084;
        float _3097 = sqrt(((_3083 * _3083) + (_3084 * _3084)) + (_3087 * _3087));
        float _3100 = (1.0 - (cbSceneParam._m0[77u].w / _3071)) * _3097;
        float _3105 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3107 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3284;
        if (abs((_3085 - _3089) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3284 = ((((_3090 > 0.0) ? exp2(_3105 * _3090) : (2.0 - exp2(_3107 * _3090))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3100;
        }
        else
        {
            float _3228 = 1.0 / cbSceneParam._m0[80u].x;
            float _3229 = isnan(_3091) ? _3090 : (isnan(_3090) ? _3091 : max(_3090, _3091));
            float _3230 = isnan(_3091) ? _3090 : (isnan(_3090) ? _3091 : min(_3090, _3091));
            float _3239 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : min(_3229, 0.0));
            float _3240 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : min(_3230, 0.0));
            _3284 = ((abs(_3097 / _3085) * cbSceneParam._m0[80u].y) * ((((_3239 - _3240) * 2.0) - ((exp2(_3105 * (isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0)))) - exp2(_3105 * (isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0))))) * _3228)) - ((exp2(_3107 * _3239) - exp2(_3107 * _3240)) * _3228))) + (_3100 * cbSceneParam._m0[80u].z);
        }
        vec4 _3286 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3017, _3018, 1.0), 0.0);
        float _3295 = exp2((_3284 * (-1.44269502162933349609375)) * (1.0 - _3286.w));
        float _3296 = log2(_3295);
        float _3312 = log2(_3037);
        _3109 = (exp2(_3312 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3296 * cbSceneParam._m0[78u].x)) * _3286.x) / cbSceneParam._m0[78u].x)) + _3034;
        _3111 = (exp2(_3312 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3296 * cbSceneParam._m0[78u].y)) * _3286.y) / cbSceneParam._m0[78u].y)) + _3035;
        _3113 = (exp2(_3312 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3296 * cbSceneParam._m0[78u].z)) * _3286.z) / cbSceneParam._m0[78u].z)) + _3036;
        _3115 = _3295 * _3037;
    }
    else
    {
        _3109 = _3034;
        _3111 = _3035;
        _3113 = _3036;
        _3115 = _3037;
    }
    bool _3322;
    vec4 _3125;
    vec4 _3147;
    float _3149;
    float _3153;
    float _3154;
    float _3155;
    float _3156;
    bool _3166;
    for (;;)
    {
        _3125 = cbMatDynParam._m0[0u];
        float _3127 = roundEven(_3125.y);
        bool _3128 = _3127 == 3.0;
        float _3129 = log2(_3115);
        float _3136 = exp2(_3129 * cbSceneParam._m0[78u].x) * _3006;
        float _3137 = exp2(_3129 * cbSceneParam._m0[78u].y) * _3007;
        float _3138 = exp2(_3129 * cbSceneParam._m0[78u].z) * _3008;
        float _3145 = _828 + (-0.5);
        _3147 = cbMtdParam._m0[1u];
        _3149 = _3147.y * _3145;
        float _3152 = (_3127 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3153 = _3152 * (_3128 ? _3136 : (_3136 + (cbSceneParam._m0[72u].w * _3109)));
        _3154 = _3152 * (_3128 ? _3137 : (_3137 + (cbSceneParam._m0[72u].w * _3111)));
        _3155 = _3152 * (_3128 ? _3138 : (_3138 + (cbSceneParam._m0[72u].w * _3113)));
        _3156 = _3145 * 0.999000012874603271484375;
        _3166 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3166)
        {
            if ((cbInstanceData._m0[_276 + 7u].x + _3156) < 0.5)
            {
                _3322 = true;
                break;
            }
        }
        uint _3263 = _877 + uint(_3125.w);
        if ((cbInstanceData._m0[_3263].w < 1.0) && ((cbInstanceData._m0[_3263].w + _3156) < 0.5))
        {
            _3322 = true;
            break;
        }
        if ((_3149 + 1.0) < _3147.x)
        {
            _3322 = true;
            break;
        }
        _3322 = false;
        break;
    }
    float _3526;
    if (_3322)
    {
        discard_state = true;
        _3526 = 0.0;
    }
    else
    {
        _3526 = cbInstanceData._m0[_3009].w;
    }
    SV_Target.x = _3153;
    SV_Target.y = _3154;
    SV_Target.z = _3155;
    SV_Target.w = _3526;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3009].w;
    discard_exit();
}


