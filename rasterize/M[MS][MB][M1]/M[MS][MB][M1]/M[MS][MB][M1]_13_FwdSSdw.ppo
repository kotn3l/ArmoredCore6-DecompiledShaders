#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _976;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _222 = uint(roundEven(NORMAL.w)) * 13u;
    uint _228 = _222 + 1u;
    uint _232 = _222 + 2u;
    float _241 = sqrt(((cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x) + (cbInstanceData._m0[_222].x * cbInstanceData._m0[_222].x)) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x));
    float _242 = _241 * TEXCOORD.z;
    float _243 = _241 * TEXCOORD.w;
    vec4 _262 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _268 = _262.x * cbMtdParam._m0[9u].x;
    float _269 = _262.y * cbMtdParam._m0[9u].y;
    float _270 = _262.z * cbMtdParam._m0[9u].z;
    vec4 _288 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _292 = _288.z;
    float _297 = (_288.x * 2.0) + (-1.0);
    float _299 = (_288.y * 2.0) + (-1.0);
    float _300 = dot(vec2(_297, _299), vec2(_297, _299));
    float _3331 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _306 = sqrt(1.0 - (isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0))));
    vec4 _323 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _242) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _243) + cbTextureTilingScale._m0[11u].w));
    float _325 = _323.x;
    float _326 = 1.0 - _325;
    float _342 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_325 - _326) * cbMtdParam._m0[24u].z) + _326) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3342 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _343 = isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0));
    float _350 = (_343 * (cbMtdParam._m0[17u].x - _268)) + _268;
    float _351 = (_343 * (cbMtdParam._m0[17u].y - _269)) + _269;
    float _352 = (_343 * (cbMtdParam._m0[17u].z - _270)) + _270;
    vec4 _365 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _367 = _365.x;
    float _369 = _367 - (_367 * _343);
    vec4 _382 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _242) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _243) + cbTextureTilingScale._m0[15u].w));
    float _389 = (_382.x * 2.0) + (-1.0);
    float _390 = (_382.y * 2.0) + (-1.0);
    float _391 = dot(vec2(_389, _390), vec2(_389, _390));
    float _3353 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _399 = (_343 * (_382.z - _292)) + _292;
    float _411 = (((_389 - _297) + (cbMtdParam._m0[21u].x * _297)) * _343) + _297;
    float _412 = (((_390 - _299) + (cbMtdParam._m0[21u].x * _299)) * _343) + _299;
    float _413 = (_343 * (sqrt(1.0 - (isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0)))) - _306)) + _306;
    float _418 = cbMtdParam._m0[22u].x + _288.w;
    float _421 = fma(_413, _209 * NORMAL.x, fma(_412, _216 * TANGENT.x, (_202 * _194) * _411));
    float _424 = fma(_413, _209 * NORMAL.y, fma(_412, _216 * TANGENT.y, (_202 * _195) * _411));
    float _427 = fma(_413, _209 * NORMAL.z, fma(_412, _216 * TANGENT.z, (_202 * _196) * _411));
    float _431 = inversesqrt(dot(vec3(_421, _424, _427), vec3(_421, _424, _427)));
    float _432 = _431 * _421;
    float _433 = _431 * _424;
    float _434 = _431 * _427;
    float _3364 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _435 = isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0));
    float _3375 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _3386 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _3397 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _3408 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _3419 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _440 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
    float _454 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _495 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _505 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _495);
    float _506 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _495);
    float _507 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _495);
    float _511 = inversesqrt(dot(vec3(_505, _506, _507), vec3(_505, _506, _507)));
    float _512 = _505 * _511;
    float _513 = _506 * _511;
    float _514 = _507 * _511;
    float _520 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _521 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _542 = fma(_434, cbSceneParam._m0[5u].z, fma(_433, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _432));
    float _545 = fma(_434, cbSceneParam._m0[6u].z, fma(_433, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _432));
    float _548 = fma(_434, cbSceneParam._m0[7u].z, fma(_433, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _432));
    uint _562 = (_222 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _568 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0)))) * cbInstanceData._m0[_562].x;
    float _569 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0)))) * cbInstanceData._m0[_562].y;
    float _570 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0)))) * cbInstanceData._m0[_562].z;
    float _3430 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _571 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
    float _3441 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _572 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
    float _3452 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _573 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
    float _574 = 1.0 - _440;
    float _575 = _571 * _574;
    float _576 = _572 * _574;
    float _577 = _573 * _574;
    float _582 = (_571 + (-0.039999999105930328369140625)) * _440;
    float _583 = (_572 + (-0.039999999105930328369140625)) * _440;
    float _584 = (_573 + (-0.039999999105930328369140625)) * _440;
    float _585 = _582 + 0.039999999105930328369140625;
    float _587 = _583 + 0.039999999105930328369140625;
    float _588 = _584 + 0.039999999105930328369140625;
    vec4 _597 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _520, cbSceneParam._m0[86u].y * _521));
    float _601 = ((isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0))) * TEXCOORD_5.w) * _597.x;
    float _602 = dot(vec3(_432, _433, _434), vec3(_512, _513, _514));
    float _605 = _602 * 2.0;
    float _609 = (_605 * _432) - _512;
    float _610 = (_605 * _433) - _513;
    float _611 = (_605 * _434) - _514;
    float _615 = abs(dot(vec3(_512, _513, _514), vec3(_432, _433, _434)));
    float _3463 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _617 = sqrt(_435);
    float _630 = exp2((_617 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_617 * 3.0));
    float _636 = (1.0 - _630) * ((_617 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _637 = _630 * _617;
    float _665 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _669 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _673 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _975;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _700 = fma(_673, cbModelParam._m0[26u].z, fma(_669, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _665));
        float _704 = fma(_673, cbModelParam._m0[27u].z, fma(_669, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _665));
        float _708 = fma(_673, cbModelParam._m0[28u].z, fma(_669, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _665));
        float _733 = _665 + _432;
        float _734 = _669 + _433;
        float _735 = _673 + _434;
        float _745 = fma(_735, cbModelParam._m0[26u].z, fma(_734, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _733)) - _700;
        float _746 = fma(_735, cbModelParam._m0[27u].z, fma(_734, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _733)) - _704;
        float _747 = fma(_735, cbModelParam._m0[28u].z, fma(_734, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _733)) - _708;
        float _751 = inversesqrt(dot(vec3(_745, _746, _747), vec3(_745, _746, _747)));
        float _764 = ((_751 * _745) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_700 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _765 = ((_751 * _746) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_704 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _766 = ((_751 * _747) / cbModelParam._m0[34u].z) + ((((((_708 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _769 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_764, _765, _766), 0.0);
        vec4 _776 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_764, _765, _766), 0.0);
        vec4 _783 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_764, _765, _766), 0.0);
        vec4 _790 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_764, _765, _766), 0.0);
        float _803 = exp2((_769.w + (-0.5)) * 20.0) * 2.0;
        float _804 = _803 * (_769.x + (-0.5));
        float _805 = _803 * (_769.y + (-0.5));
        float _806 = _803 * (_769.z + (-0.5));
        float _813 = exp2((_776.w + (-0.5)) * 20.0) * 2.0;
        float _814 = _813 * (_776.x + (-0.5));
        float _815 = _813 * (_776.y + (-0.5));
        float _816 = _813 * (_776.z + (-0.5));
        float _823 = exp2((_783.w + (-0.5)) * 20.0) * 2.0;
        float _824 = _823 * (_783.x + (-0.5));
        float _825 = _823 * (_783.y + (-0.5));
        float _826 = _823 * (_783.z + (-0.5));
        float _833 = exp2((_790.w + (-0.5)) * 20.0) * 2.0;
        float _834 = _833 * (_790.x + (-0.5));
        float _835 = _833 * (_790.y + (-0.5));
        float _836 = _833 * (_790.z + (-0.5));
        float _837 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _838 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _839 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _840 = _804 * 0.5;
        float _841 = _814 * 0.5;
        float _842 = _824 * 0.5;
        float _843 = dot(vec3(_840, _841, _842), vec3(_840, _841, _842));
        float _848 = (_843 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_843);
        float _857 = (dot(vec3(_432, _433, _434), vec3(_848 * _840, _848 * _841, _848 * _842)) + 1.0) * 0.5;
        float _3489 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _867 = sqrt(((_841 * _841) + (_840 * _840)) + (_842 * _842)) / (_837 + 9.9999997473787516355514526367188e-06);
        float _3500 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _868 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
        float _869 = _868 * 2.0;
        float _873 = (1.0 - _868) / (_868 + 1.0);
        float _3511 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _874 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _883 = ((((1.0 - _874) * (_869 + 2.0)) * exp2(log2(isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0))) * (_869 + 1.0))) + _874) * _837;
        float _884 = _805 * 0.5;
        float _885 = _815 * 0.5;
        float _886 = _825 * 0.5;
        float _887 = dot(vec3(_884, _885, _886), vec3(_884, _885, _886));
        float _892 = (_887 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_887);
        float _900 = (dot(vec3(_432, _433, _434), vec3(_892 * _884, _892 * _885, _892 * _886)) + 1.0) * 0.5;
        float _3522 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _909 = sqrt(((_885 * _885) + (_884 * _884)) + (_886 * _886)) / (_838 + 9.9999997473787516355514526367188e-06);
        float _3533 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _910 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _911 = _910 * 2.0;
        float _915 = (1.0 - _910) / (_910 + 1.0);
        float _3544 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _925 = ((((1.0 - _916) * (_911 + 2.0)) * exp2(log2(isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0))) * (_911 + 1.0))) + _916) * _838;
        float _926 = _806 * 0.5;
        float _927 = _816 * 0.5;
        float _928 = _826 * 0.5;
        float _929 = dot(vec3(_926, _927, _928), vec3(_926, _927, _928));
        float _934 = (_929 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_929);
        float _942 = (dot(vec3(_432, _433, _434), vec3(_934 * _926, _934 * _927, _934 * _928)) + 1.0) * 0.5;
        float _3555 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _951 = sqrt(((_927 * _927) + (_926 * _926)) + (_928 * _928)) / (_839 + 9.9999997473787516355514526367188e-06);
        float _3566 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _953 = _952 * 2.0;
        float _957 = (1.0 - _952) / (_952 + 1.0);
        float _3577 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _967 = ((((1.0 - _958) * (_953 + 2.0)) * exp2(log2(isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) * (_953 + 1.0))) + _958) * _839;
        _975 = _806;
        _977 = _805;
        _978 = _804;
        _979 = _816;
        _980 = _815;
        _981 = _814;
        _982 = _826;
        _983 = _825;
        _984 = _824;
        _985 = _839;
        _986 = _838;
        _987 = _837;
        _988 = cbModelParam._m0[36u].z * (isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0)));
        _989 = cbModelParam._m0[36u].z * (isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0)));
        _990 = cbModelParam._m0[36u].z * (isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0)));
    }
    else
    {
        _975 = _976;
        _977 = _976;
        _978 = _976;
        _979 = _976;
        _980 = _976;
        _981 = _976;
        _982 = _976;
        _983 = _976;
        _984 = _976;
        _985 = _976;
        _986 = _976;
        _987 = _976;
        _988 = 0.0;
        _989 = 0.0;
        _990 = 0.0;
    }
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1015 = fma(_673, cbModelParam._m0[30u].z, fma(_669, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _665));
        float _1019 = fma(_673, cbModelParam._m0[31u].z, fma(_669, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _665));
        float _1023 = fma(_673, cbModelParam._m0[32u].z, fma(_669, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _665));
        float _1046 = _665 + _432;
        float _1047 = _669 + _433;
        float _1048 = _673 + _434;
        float _1058 = fma(_1048, cbModelParam._m0[30u].z, fma(_1047, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1046)) - _1015;
        float _1059 = fma(_1048, cbModelParam._m0[31u].z, fma(_1047, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1046)) - _1019;
        float _1060 = fma(_1048, cbModelParam._m0[32u].z, fma(_1047, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1046)) - _1023;
        float _1064 = inversesqrt(dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060)));
        float _1077 = ((_1064 * _1058) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1015 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1078 = ((_1064 * _1059) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1019 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1079 = ((_1064 * _1060) / cbModelParam._m0[35u].z) + ((((((_1023 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1077, _1078, _1079), 0.0);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1077, _1078, _1079), 0.0);
        vec4 _1095 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1077, _1078, _1079), 0.0);
        vec4 _1102 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1077, _1078, _1079), 0.0);
        float _1114 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = _1114 * (_1081.x + (-0.5));
        float _1116 = _1114 * (_1081.y + (-0.5));
        float _1117 = _1114 * (_1081.z + (-0.5));
        float _1124 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1125 = _1124 * (_1088.x + (-0.5));
        float _1126 = _1124 * (_1088.y + (-0.5));
        float _1127 = _1124 * (_1088.z + (-0.5));
        float _1134 = exp2((_1095.w + (-0.5)) * 20.0) * 2.0;
        float _1135 = _1134 * (_1095.x + (-0.5));
        float _1136 = _1134 * (_1095.y + (-0.5));
        float _1137 = _1134 * (_1095.z + (-0.5));
        float _1144 = exp2((_1102.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1102.x + (-0.5));
        float _1146 = _1144 * (_1102.y + (-0.5));
        float _1147 = _1144 * (_1102.z + (-0.5));
        float _1148 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1149 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1150 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1151 = _1115 * 0.5;
        float _1152 = _1125 * 0.5;
        float _1153 = _1135 * 0.5;
        float _1154 = dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153));
        float _1159 = (_1154 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1154);
        float _1167 = (dot(vec3(_432, _433, _434), vec3(_1159 * _1151, _1159 * _1152, _1159 * _1153)) + 1.0) * 0.5;
        float _3618 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1176 = sqrt(((_1152 * _1152) + (_1151 * _1151)) + (_1153 * _1153)) / (_1148 + 9.9999997473787516355514526367188e-06);
        float _3629 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _1178 = _1177 * 2.0;
        float _1182 = (1.0 - _1177) / (_1177 + 1.0);
        float _3640 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _1192 = ((((1.0 - _1183) * (_1178 + 2.0)) * exp2(log2(isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))) * (_1178 + 1.0))) + _1183) * _1148;
        float _1193 = _1116 * 0.5;
        float _1194 = _1126 * 0.5;
        float _1195 = _1136 * 0.5;
        float _1196 = dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195));
        float _1201 = (_1196 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1196);
        float _1209 = (dot(vec3(_432, _433, _434), vec3(_1201 * _1193, _1201 * _1194, _1201 * _1195)) + 1.0) * 0.5;
        float _3651 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1218 = sqrt(((_1194 * _1194) + (_1193 * _1193)) + (_1195 * _1195)) / (_1149 + 9.9999997473787516355514526367188e-06);
        float _3662 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _1220 = _1219 * 2.0;
        float _1224 = (1.0 - _1219) / (_1219 + 1.0);
        float _3673 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1234 = ((((1.0 - _1225) * (_1220 + 2.0)) * exp2(log2(isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))) * (_1220 + 1.0))) + _1225) * _1149;
        float _1235 = _1117 * 0.5;
        float _1236 = _1127 * 0.5;
        float _1237 = _1137 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1251 = (dot(vec3(_432, _433, _434), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _3684 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1260 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1150 + 9.9999997473787516355514526367188e-06);
        float _3695 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1262 = _1261 * 2.0;
        float _1266 = (1.0 - _1261) / (_1261 + 1.0);
        float _3706 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _1276 = ((((1.0 - _1267) * (_1262 + 2.0)) * exp2(log2(isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) * (_1262 + 1.0))) + _1267) * _1150;
        _1284 = _1117;
        _1285 = _1116;
        _1286 = _1115;
        _1287 = _1127;
        _1288 = _1126;
        _1289 = _1125;
        _1290 = _1137;
        _1291 = _1136;
        _1292 = _1135;
        _1293 = _1150;
        _1294 = _1149;
        _1295 = _1148;
        _1296 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0)));
        _1297 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)));
        _1298 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)));
    }
    else
    {
        _1284 = _976;
        _1285 = _976;
        _1286 = _976;
        _1287 = _976;
        _1288 = _976;
        _1289 = _976;
        _1290 = _976;
        _1291 = _976;
        _1292 = _976;
        _1293 = _976;
        _1294 = _976;
        _1295 = _976;
        _1296 = 0.0;
        _1297 = 0.0;
        _1298 = 0.0;
    }
    float _1308 = (cbModelParam._m0[1u].x * (_1296 - _988)) + _988;
    float _1309 = (cbModelParam._m0[1u].x * (_1297 - _989)) + _989;
    float _1310 = (cbModelParam._m0[1u].x * (_1298 - _990)) + _990;
    float _1331 = fma(_1310, cbSceneParam._m0[89u].z, fma(_1309, cbSceneParam._m0[89u].y, _1308 * cbSceneParam._m0[89u].x));
    float _1334 = fma(_1310, cbSceneParam._m0[90u].z, fma(_1309, cbSceneParam._m0[90u].y, _1308 * cbSceneParam._m0[90u].x));
    float _1337 = fma(_1310, cbSceneParam._m0[91u].z, fma(_1309, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1308));
    float _1352 = _609 * 0.5;
    float _1353 = _610 * 0.5;
    float _1354 = _611 * 0.5;
    float _1355 = dot(vec4(_1352, _1353, _1354, 1.0), vec4(_1286, _1289, _1292, _1295));
    float _1358 = dot(vec4(_1352, _1353, _1354, 1.0), vec4(_1285, _1288, _1291, _1294));
    float _1361 = dot(vec4(_1352, _1353, _1354, 1.0), vec4(_1284, _1287, _1290, _1293));
    float _1395;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1368 = dot(vec4(_1352, _1353, _1354, 1.0), vec4(_975, _979, _982, _985));
        float _1372 = dot(vec4(_1352, _1353, _1354, 1.0), vec4(_977, _980, _983, _986));
        float _1376 = dot(vec4(_1352, _1353, _1354, 1.0), vec4(_978, _981, _984, _987));
        float _1383 = dot(vec4(cbModelParam._m0[39u]), vec4(_1352, _1353, _1354, 1.0));
        _1395 = dot(vec3(isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)), isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)), isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1383) ? 0.0 : (isnan(0.0) ? _1383 : max(0.0, _1383))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1395 = 1.0;
    }
    float _1406;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1397 = dot(vec4(cbModelParam._m0[40u]), vec4(_1352, _1353, _1354, 1.0));
        _1406 = dot(vec3(isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)), isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)), isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1397) ? 0.0 : (isnan(0.0) ? _1397 : max(0.0, _1397))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1406 = 1.0;
    }
    float _1410 = (_1406 * cbModelParam._m0[1u].x) + (_1395 * (1.0 - cbModelParam._m0[1u].x));
    float _1420 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _435);
    float _1421 = isnan(_1420) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1420 : min(cbModelParam._m0[25u].z, _1420));
    float _1502;
    float _1504;
    float _1506;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1469 = fma(_673, cbModelParam._m0[13u].z, fma(_669, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _665)) + cbModelParam._m0[13u].w;
        float _1473 = fma(_673, cbModelParam._m0[14u].z, fma(_669, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _665)) + cbModelParam._m0[14u].w;
        float _1477 = fma(_673, cbModelParam._m0[15u].z, fma(_669, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _665)) + cbModelParam._m0[15u].w;
        float _1480 = fma(_611, cbModelParam._m0[13u].z, fma(_610, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _609));
        float _1483 = fma(_611, cbModelParam._m0[14u].z, fma(_610, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _609));
        float _1486 = fma(_611, cbModelParam._m0[15u].z, fma(_610, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _609));
        float _1514;
        if (_1480 > 0.0)
        {
            _1514 = abs((1.0 - _1469) / _1480);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1480 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1469 + 1.0) / _1480);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1514 = frontier_phi_14_12_ladder;
        }
        float _1740;
        if (_1483 > 0.0)
        {
            _1740 = abs((1.0 - _1473) / _1483);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1483 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1473 + 1.0) / _1483);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1740 = frontier_phi_23_19_ladder;
        }
        float _1997;
        if (_1486 > 0.0)
        {
            _1997 = abs((1.0 - _1477) / _1486);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1486 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1477 + 1.0) / _1486);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1997 = frontier_phi_35_30_ladder;
        }
        float _1999 = isnan(_1740) ? _1514 : (isnan(_1514) ? _1740 : min(_1514, _1740));
        float _2000 = isnan(_1997) ? _1999 : (isnan(_1999) ? _1997 : min(_1999, _1997));
        float _2004 = (_2000 * _1480) + _1469;
        float _2005 = (_2000 * _1483) + _1473;
        float _2006 = (_2000 * _1486) + _1477;
        float _2007 = _2000 * 9.9999997473787516355514526367188e-05;
        float _2009 = (-1.0) - _2007;
        float _2011 = _2007 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2006 > _2011) || ((_2006 < _2009) || ((_2005 > _2011) || ((_2005 < _2009) || ((_2004 < _2009) || (_2004 > _2011))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2134 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2006, cbModelParam._m0[9u].z, fma(_2005, cbModelParam._m0[9u].y, _2004 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2006, cbModelParam._m0[10u].z, fma(_2005, cbModelParam._m0[10u].y, _2004 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2006, cbModelParam._m0[11u].z, fma(_2005, cbModelParam._m0[11u].y, _2004 * cbModelParam._m0[11u].x))), _1421);
            frontier_phi_13_35_ladder = _2134.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2134.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2134.x * cbModelParam._m0[1u].y;
        }
        _1502 = frontier_phi_13_35_ladder_2;
        _1504 = frontier_phi_13_35_ladder_1;
        _1506 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1490 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_609, _610, _611), _1421);
        _1502 = _1490.x * cbModelParam._m0[1u].y;
        _1504 = _1490.y * cbModelParam._m0[1u].y;
        _1506 = _1490.z * cbModelParam._m0[1u].y;
    }
    float _1510 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _435);
    float _1511 = isnan(_1510) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1510 : min(cbModelParam._m0[25u].w, _1510));
    float _1602;
    float _1604;
    float _1606;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1566 = fma(_673, cbModelParam._m0[21u].z, fma(_669, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _665)) + cbModelParam._m0[21u].w;
        float _1570 = fma(_673, cbModelParam._m0[22u].z, fma(_669, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _665)) + cbModelParam._m0[22u].w;
        float _1574 = fma(_673, cbModelParam._m0[23u].z, fma(_669, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _665)) + cbModelParam._m0[23u].w;
        float _1577 = fma(_611, cbModelParam._m0[21u].z, fma(_610, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _609));
        float _1580 = fma(_611, cbModelParam._m0[22u].z, fma(_610, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _609));
        float _1583 = fma(_611, cbModelParam._m0[23u].z, fma(_610, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _609));
        float _1745;
        if (_1577 > 0.0)
        {
            _1745 = abs((1.0 - _1566) / _1577);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1577 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1566 + 1.0) / _1577);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1745 = frontier_phi_25_21_ladder;
        }
        float _2024;
        if (_1580 > 0.0)
        {
            _2024 = abs((1.0 - _1570) / _1580);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1580 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1570 + 1.0) / _1580);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2024 = frontier_phi_37_32_ladder;
        }
        float _2237;
        if (_1583 > 0.0)
        {
            _2237 = abs((1.0 - _1574) / _1583);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1583 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1574 + 1.0) / _1583);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2237 = frontier_phi_46_43_ladder;
        }
        float _2239 = isnan(_2024) ? _1745 : (isnan(_1745) ? _2024 : min(_1745, _2024));
        float _2240 = isnan(_2237) ? _2239 : (isnan(_2239) ? _2237 : min(_2239, _2237));
        float _2244 = (_2240 * _1577) + _1566;
        float _2245 = (_2240 * _1580) + _1570;
        float _2246 = (_2240 * _1583) + _1574;
        float _2247 = _2240 * 9.9999997473787516355514526367188e-05;
        float _2248 = (-1.0) - _2247;
        float _2250 = _2247 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2246 > _2250) || ((_2246 < _2248) || ((_2245 > _2250) || ((_2245 < _2248) || ((_2244 < _2248) || (_2244 > _2250))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2445 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2246, cbModelParam._m0[17u].z, fma(_2245, cbModelParam._m0[17u].y, _2244 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2246, cbModelParam._m0[18u].z, fma(_2245, cbModelParam._m0[18u].y, _2244 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2246, cbModelParam._m0[19u].z, fma(_2245, cbModelParam._m0[19u].y, _2244 * cbModelParam._m0[19u].x))), _1511);
            frontier_phi_22_46_ladder = _2445.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2445.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2445.x * cbModelParam._m0[1u].z;
        }
        _1602 = frontier_phi_22_46_ladder_2;
        _1604 = frontier_phi_22_46_ladder_1;
        _1606 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1586 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_609, _610, _611), _1511);
        _1602 = _1586.x * cbModelParam._m0[1u].z;
        _1604 = _1586.y * cbModelParam._m0[1u].z;
        _1606 = _1586.z * cbModelParam._m0[1u].z;
    }
    float _1619 = (((_636 * _585) + _637) * _601) * ((cbModelParam._m0[1u].w * (_1602 - _1502)) + _1502);
    float _1621 = (((_636 * _587) + _637) * _601) * ((cbModelParam._m0[1u].w * (_1604 - _1504)) + _1504);
    float _1623 = (((_636 * _588) + _637) * _601) * ((cbModelParam._m0[1u].w * (_1606 - _1506)) + _1506);
    float _1626 = fma(_1623, cbSceneParam._m0[89u].z, fma(_1621, cbSceneParam._m0[89u].y, _1619 * cbSceneParam._m0[89u].x));
    float _1629 = fma(_1623, cbSceneParam._m0[90u].z, fma(_1621, cbSceneParam._m0[90u].y, _1619 * cbSceneParam._m0[90u].x));
    float _1632 = fma(_1623, cbSceneParam._m0[91u].z, fma(_1621, cbSceneParam._m0[91u].y, _1619 * cbSceneParam._m0[91u].x));
    vec4 _1640 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_520, _521));
    float _1642 = _1640.w;
    float _1654 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1642);
    float _1655 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1642);
    float _1656 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1642);
    uvec4 _1660 = floatBitsToUint(cbInstanceData._m0[_222 + 5u]);
    uint _1662 = _1660.x * 14u;
    uint _1663 = _1662 + 13u;
    float _1670 = _601 + (-1.0);
    float _1675 = (cbLight._m0[_1663].x * _1670) + 1.0;
    float _1676 = (cbLight._m0[_1663].y * _1670) + 1.0;
    float _1677 = (cbLight._m0[_1663].z * _1670) + 1.0;
    float _1678 = (cbLight._m0[_1663].w * _1670) + 1.0;
    uint _1679 = _1662 + 5u;
    float _1685 = isnan(1.0) ? _1676 : (isnan(_1676) ? 1.0 : min(_1676, 1.0));
    uint _1689 = _1662 + 4u;
    float _1699 = isnan(1.0) ? _1675 : (isnan(_1675) ? 1.0 : min(_1675, 1.0));
    uint _1703 = _1662 | 1u;
    float _1714 = dot(vec3(cbLight._m0[_1662].xyz), vec3(_432, _433, _434));
    float _1717 = dot(vec3(cbLight._m0[_1703].xyz), vec3(_432, _433, _434));
    float _3842 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
    float _3853 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
    float _1722 = (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * 0.3183098733425140380859375;
    float _1724 = (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * 0.3183098733425140380859375;
    float _1731 = ((cbLight._m0[_1679].x * _1685) * _1724) + (((cbLight._m0[_1689].x * _1654) * _1699) * _1722);
    float _1732 = ((_1685 * cbLight._m0[_1679].y) * _1724) + (((cbLight._m0[_1689].y * _1655) * _1699) * _1722);
    float _1733 = ((_1685 * cbLight._m0[_1679].z) * _1724) + (((cbLight._m0[_1689].z * _1656) * _1699) * _1722);
    uvec4 _1737 = floatBitsToUint(cbLight._m0[_1662 + 12u]);
    bool _1739 = _1737.x == 0u;
    float _1750;
    float _1752;
    float _1754;
    if (_1739)
    {
        _1750 = _1731;
        _1752 = _1732;
        _1754 = _1733;
    }
    else
    {
        uint _1758 = _1662 + 6u;
        float _1774 = (dot(vec3(cbLight._m0[_1662 + 2u].xyz), vec3(_432, _433, _434)) * 0.5) + 0.5;
        float _1775 = _1774 * _1774;
        float _3864 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1776 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1777 = isnan(1.0) ? _1677 : (isnan(_1677) ? 1.0 : min(_1677, 1.0));
        _1750 = (((cbLight._m0[_1758].x * 0.3183098733425140380859375) * _1776) * _1777) + _1731;
        _1752 = (((cbLight._m0[_1758].y * 0.3183098733425140380859375) * _1776) * _1777) + _1732;
        _1754 = (((cbLight._m0[_1758].z * 0.3183098733425140380859375) * _1776) * _1777) + _1733;
    }
    bool _1757 = _1737.y == 0u;
    float _1795;
    float _1797;
    float _1799;
    if (_1757)
    {
        _1795 = _1750;
        _1797 = _1752;
        _1799 = _1754;
    }
    else
    {
        uint _1968 = _1662 + 7u;
        float _1984 = (dot(vec3(cbLight._m0[_1662 + 3u].xyz), vec3(_432, _433, _434)) * 0.5) + 0.5;
        float _1985 = _1984 * _1984;
        float _3880 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
        float _1986 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1987 = isnan(1.0) ? _1678 : (isnan(_1678) ? 1.0 : min(_1678, 1.0));
        _1795 = (((cbLight._m0[_1968].x * 0.3183098733425140380859375) * _1986) * _1987) + _1750;
        _1797 = (((cbLight._m0[_1968].y * 0.3183098733425140380859375) * _1986) * _1987) + _1752;
        _1799 = (((cbLight._m0[_1968].z * 0.3183098733425140380859375) * _1986) * _1987) + _1754;
    }
    uint _1802 = _1662 + 8u;
    float _1815 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1662].w)) * _435) * 0.949999988079071044921875);
    float _1816 = _1815 * _1815;
    float _1817 = cbLight._m0[_1662].x + _512;
    float _1818 = cbLight._m0[_1662].y + _513;
    float _1819 = cbLight._m0[_1662].z + _514;
    float _1823 = inversesqrt(dot(vec3(_1817, _1818, _1819), vec3(_1817, _1818, _1819)));
    float _1824 = _1823 * _1817;
    float _1825 = _1823 * _1818;
    float _1826 = _1823 * _1819;
    float _1827 = dot(vec3(_432, _433, _434), vec3(cbLight._m0[_1662].xyz));
    float _3896 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _1830 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _3907 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _1831 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _1832 = dot(vec3(_432, _433, _434), vec3(_1824, _1825, _1826));
    float _3918 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1835 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _1836 = dot(vec3(cbLight._m0[_1662].xyz), vec3(_1824, _1825, _1826));
    float _3929 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _1840 = _1816 * _1816;
    float _1844 = ((_1835 * _1835) * (_1840 + (-1.0))) + 1.0;
    float _1852 = exp2(log2(1.0 - (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)))) * 5.0);
    float _1853 = 0.959999978542327880859375 - _582;
    float _1855 = 0.959999978542327880859375 - _583;
    float _1856 = 0.959999978542327880859375 - _584;
    float _1863 = 1.0 - _1816;
    float _1874 = (0.5 / (((_1831 * ((_1830 * _1863) + _1816)) + 9.9999999392252902907785028219223e-09) + (((_1831 * _1863) + _1816) * _1830))) * _1830;
    float _3940 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
    float _1876 = (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * (_1840 / ((_1844 * _1844) * 3.141590118408203125));
    uint _1890 = _1662 + 9u;
    float _1901 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1703].w)) * _435) * 0.949999988079071044921875);
    float _1902 = _1901 * _1901;
    float _1903 = cbLight._m0[_1703].x + _512;
    float _1904 = cbLight._m0[_1703].y + _513;
    float _1905 = cbLight._m0[_1703].z + _514;
    float _1909 = inversesqrt(dot(vec3(_1903, _1904, _1905), vec3(_1903, _1904, _1905)));
    float _1910 = _1909 * _1903;
    float _1911 = _1909 * _1904;
    float _1912 = _1909 * _1905;
    float _1913 = dot(vec3(_432, _433, _434), vec3(cbLight._m0[_1703].xyz));
    float _3951 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
    float _1916 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _1917 = dot(vec3(_432, _433, _434), vec3(_1910, _1911, _1912));
    float _3962 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
    float _1920 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _1921 = dot(vec3(cbLight._m0[_1703].xyz), vec3(_1910, _1911, _1912));
    float _3973 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
    float _1925 = _1902 * _1902;
    float _1929 = ((_1920 * _1920) * (_1925 + (-1.0))) + 1.0;
    float _1936 = exp2(log2(1.0 - (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0)))) * 5.0);
    float _1943 = 1.0 - _1902;
    float _1953 = (0.5 / (((_1831 * ((_1916 * _1943) + _1902)) + 9.9999999392252902907785028219223e-09) + (((_1831 * _1943) + _1902) * _1916))) * _1916;
    float _3984 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _1955 = (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * (_1925 / ((_1929 * _1929) * 3.141590118408203125));
    float _1965 = (((((_1936 * _1853) + _585) * cbLight._m0[_1890].x) * _1955) * _1685) + ((((cbLight._m0[_1802].x * _1654) * ((_1852 * _1853) + _585)) * _1876) * _1699);
    float _1966 = (((((_1936 * _1855) + _587) * cbLight._m0[_1890].y) * _1955) * _1685) + ((((cbLight._m0[_1802].y * _1655) * ((_1852 * _1855) + _587)) * _1876) * _1699);
    float _1967 = (((((_1936 * _1856) + _588) * cbLight._m0[_1890].z) * _1955) * _1685) + ((((cbLight._m0[_1802].z * _1656) * ((_1852 * _1856) + _588)) * _1876) * _1699);
    float _2029;
    float _2031;
    float _2033;
    if (_1739)
    {
        _2029 = _1965;
        _2031 = _1966;
        _2033 = _1967;
    }
    else
    {
        uint _2035 = _1662 + 2u;
        uint _2039 = _1662 + 10u;
        float _2053 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2035].w)) * _435) * 0.949999988079071044921875);
        float _2054 = _2053 * _2053;
        float _2055 = cbLight._m0[_2035].x + _512;
        float _2056 = cbLight._m0[_2035].y + _513;
        float _2057 = cbLight._m0[_2035].z + _514;
        float _2061 = inversesqrt(dot(vec3(_2055, _2056, _2057), vec3(_2055, _2056, _2057)));
        float _2062 = _2061 * _2055;
        float _2063 = _2061 * _2056;
        float _2064 = _2061 * _2057;
        float _2065 = dot(vec3(_432, _433, _434), vec3(cbLight._m0[_2035].xyz));
        float _3995 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
        float _2068 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _2069 = dot(vec3(_432, _433, _434), vec3(_2062, _2063, _2064));
        float _4006 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
        float _2072 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _2073 = dot(vec3(cbLight._m0[_2035].xyz), vec3(_2062, _2063, _2064));
        float _4017 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
        float _2077 = _2054 * _2054;
        float _2081 = ((_2072 * _2072) * (_2077 + (-1.0))) + 1.0;
        float _2088 = exp2(log2(1.0 - (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0)))) * 5.0);
        float _2095 = 1.0 - _2054;
        float _2105 = (0.5 / (((_1831 * ((_2068 * _2095) + _2054)) + 9.9999999392252902907785028219223e-09) + (((_1831 * _2095) + _2054) * _2068))) * _2068;
        float _4028 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        float _2107 = (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_2077 / ((_2081 * _2081) * 3.141590118408203125));
        float _2108 = isnan(1.0) ? _1677 : (isnan(_1677) ? 1.0 : min(_1677, 1.0));
        _2029 = (((((_2088 * _1853) + _585) * cbLight._m0[_2039].x) * _2107) * _2108) + _1965;
        _2031 = (((((_2088 * _1855) + _587) * cbLight._m0[_2039].y) * _2107) * _2108) + _1966;
        _2033 = (((((_2088 * _1856) + _588) * cbLight._m0[_2039].z) * _2107) * _2108) + _1967;
    }
    float _2143;
    float _2145;
    float _2147;
    if (_1757)
    {
        _2143 = _2029;
        _2145 = _2031;
        _2147 = _2033;
    }
    else
    {
        uint _2154 = _1662 + 3u;
        uint _2158 = _1662 + 11u;
        float _2172 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2154].w)) * _435) * 0.949999988079071044921875);
        float _2173 = _2172 * _2172;
        float _2174 = cbLight._m0[_2154].x + _512;
        float _2175 = cbLight._m0[_2154].y + _513;
        float _2176 = cbLight._m0[_2154].z + _514;
        float _2180 = inversesqrt(dot(vec3(_2174, _2175, _2176), vec3(_2174, _2175, _2176)));
        float _2181 = _2180 * _2174;
        float _2182 = _2180 * _2175;
        float _2183 = _2180 * _2176;
        float _2184 = dot(vec3(_432, _433, _434), vec3(cbLight._m0[_2154].xyz));
        float _4044 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
        float _2187 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _2188 = dot(vec3(_432, _433, _434), vec3(_2181, _2182, _2183));
        float _4055 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2191 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _2192 = dot(vec3(cbLight._m0[_2154].xyz), vec3(_2181, _2182, _2183));
        float _4066 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        float _2196 = _2173 * _2173;
        float _2200 = ((_2191 * _2191) * (_2196 + (-1.0))) + 1.0;
        float _2207 = exp2(log2(1.0 - (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0)))) * 5.0);
        float _2214 = 1.0 - _2173;
        float _2224 = (0.5 / (((_1831 * ((_2187 * _2214) + _2173)) + 9.9999999392252902907785028219223e-09) + (((_1831 * _2214) + _2173) * _2187))) * _2187;
        float _4077 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2226 = (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_2196 / ((_2200 * _2200) * 3.141590118408203125));
        float _2227 = isnan(1.0) ? _1678 : (isnan(_1678) ? 1.0 : min(_1678, 1.0));
        _2143 = (((((_2207 * _1853) + _585) * cbLight._m0[_2158].x) * _2226) * _2227) + _2029;
        _2145 = (((((_2207 * _1855) + _587) * cbLight._m0[_2158].y) * _2226) * _2227) + _2031;
        _2147 = (((((_2207 * _1856) + _588) * cbLight._m0[_2158].z) * _2226) * _2227) + _2033;
    }
    float _2362;
    float _2364;
    float _2366;
    float _2368;
    float _2370;
    float _2372;
    if (_1660.y == 0u)
    {
        float _2302 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2303 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2302;
        float _2304 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2302;
        float _2305 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2302;
        uvec4 _2317 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2318 = _2317.x;
        uint _2329 = uint((float(_2317.y) * floor(float(uint(cbSceneParam._m0[85u].y * _521) / _2318))) + floor(float(uint(cbSceneParam._m0[85u].x * _520) / _2318)));
        float _2339 = (log2(_2305 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2340 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        uint _2343 = uint(isnan(14.0) ? _2340 : (isnan(_2340) ? 14.0 : min(_2340, 14.0)));
        uvec4 _2348 = texelFetch(g_lightClusterGridBuffer, int(((_2343 << 2u) + (_2329 << 6u)) >> 2u));
        uint _2349 = _2348.x;
        uint _2350 = _2317.z;
        float _2450;
        float _2452;
        float _2454;
        float _2456;
        float _2458;
        float _2460;
        if (((((1u << ((_2350 >> 4u) & 15u)) + 4294967295u) & _2349) == 0u) || ((_2350 & 240u) == 0u))
        {
            _2450 = 0.0;
            _2452 = 0.0;
            _2454 = 0.0;
            _2456 = 0.0;
            _2458 = 0.0;
            _2460 = 0.0;
        }
        else
        {
            float _2451;
            float _2453;
            float _2455;
            float _2457;
            float _2459;
            float _2461;
            float _2595 = 0.0;
            float _2596 = 0.0;
            float _2597 = 0.0;
            float _2598 = 0.0;
            float _2599 = 0.0;
            float _2600 = 0.0;
            uint _2601 = 0u;
            uint _2610;
            bool _2611;
            for (;;)
            {
                _2610 = texelFetch(g_lightClassification, int((((_2343 << 5u) + (_2329 << 9u)) + (_2601 << 2u)) >> 2u)).x;
                _2611 = _2610 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2611)
                {
                    frontier_phi_61_pred = _2595;
                    frontier_phi_61_pred_1 = _2600;
                    frontier_phi_61_pred_2 = _2599;
                    frontier_phi_61_pred_3 = _2598;
                    frontier_phi_61_pred_4 = _2597;
                    frontier_phi_61_pred_5 = _2596;
                }
                else
                {
                    float _2719;
                    float _2720;
                    float _2721;
                    float _2722;
                    float _2723;
                    float _2724;
                    uint _2725;
                    _2719 = _2595;
                    _2720 = _2596;
                    _2721 = _2597;
                    _2722 = _2598;
                    _2723 = _2599;
                    _2724 = _2600;
                    _2725 = _2610;
                    float _2651;
                    float _2652;
                    float _2653;
                    float _2654;
                    float _2655;
                    float _2656;
                    for (;;)
                    {
                        uint _2729 = uint(findLSB(_2725)) + (_2601 << 5u);
                        uint _2726 = (_2725 + 4294967295u) & _2725;
                        uint _2731 = _2729 * 48u;
                        vec4 _2745 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2731)).x, texelFetch(g_PointLightRenderingBuffer, int(_2731 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2731 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2731 + 3u)).x));
                        uint _2751 = (_2729 * 48u) + 4u;
                        vec4 _2764 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2751)).x, texelFetch(g_PointLightRenderingBuffer, int(_2751 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2751 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2751 + 3u)).x));
                        uint _2770 = (_2729 * 48u) + 8u;
                        vec3 _2781 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2770)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 2u)).x));
                        float _2785 = _2745.x - _2303;
                        float _2786 = _2745.y - _2304;
                        float _2787 = _2745.z - _2305;
                        float _2788 = dot(vec3(_2785, _2786, _2787), vec3(_2785, _2786, _2787));
                        float _2791 = inversesqrt(_2788);
                        float _2792 = _2791 * _2785;
                        float _2793 = _2791 * _2786;
                        float _2794 = _2791 * _2787;
                        float _2795 = dot(vec3(_542, _545, _548), vec3(_2792, _2793, _2794));
                        float _2800 = 1.0 - (_2788 * _2745.w);
                        float _4103 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
                        float _2801 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
                        float _2802 = sqrt(_2788) * _2764.w;
                        float _2805 = 1.39999997615814208984375 / (_2802 + 1.39999997615814208984375);
                        float _2806 = _2805 * _2805;
                        float _2809 = ((1.0 - _2806) * _2795) + _2806;
                        float _2812 = _2802 * _2802;
                        float _2816 = ((isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0))) * _2801) / ((_2812 * 0.699999988079071044921875) + 1.0);
                        float _2820 = (-0.0) - _2303;
                        float _2821 = (-0.0) - _2304;
                        float _2822 = (-0.0) - _2305;
                        float _2826 = inversesqrt(dot(vec3(_2820, _2821, _2822), vec3(_2820, _2821, _2822)));
                        float _2827 = _2826 * _2820;
                        float _2828 = _2826 * _2821;
                        float _2829 = _2826 * _2822;
                        float _2837 = exp2(log2(1.0 / ((_2812 * 3.5) + 5.0)) * 0.25);
                        float _2838 = 1.0 - _617;
                        float _2845 = sqrt(1.0 - ((1.0 - (_2838 * _2838)) * (1.0 - (_2837 * _2837))));
                        float _2846 = _2845 * _2845;
                        float _2847 = _2846 * _2846;
                        float _2848 = _2827 + _2792;
                        float _2849 = _2828 + _2793;
                        float _2850 = _2829 + _2794;
                        float _2854 = inversesqrt(dot(vec3(_2848, _2849, _2850), vec3(_2848, _2849, _2850)));
                        float _2858 = dot(vec3(_542, _545, _548), vec3(_2827, _2828, _2829));
                        float _4119 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
                        float _2861 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
                        float _2862 = dot(vec3(_542, _545, _548), vec3(_2854 * _2848, _2854 * _2849, _2854 * _2850));
                        float _4130 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
                        float _2865 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
                        float _2869 = ((_2865 * _2865) * (_2847 + (-1.0))) + 1.0;
                        float _2870 = _2805 * _2846;
                        float _2871 = _2870 * _2870;
                        float _2874 = ((1.0 - _2871) * _2795) + _2871;
                        float _4141 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
                        float _2875 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
                        float _2876 = 1.0 - _2846;
                        float _2886 = (0.5 / (((_2875 * ((_2861 * _2876) + _2846)) + 9.9999999392252902907785028219223e-09) + (((_2875 * _2876) + _2846) * _2861))) * _2875;
                        float _4152 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
                        float _2897 = (((_2847 * 3.1415927410125732421875) * (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0)))) / ((_2869 * _2869) * ((_2812 * 2.1991131305694580078125) + 3.141590118408203125))) * _2801;
                        _2654 = (_2816 * _2764.x) + _2722;
                        _2655 = (_2816 * _2764.y) + _2723;
                        _2656 = (_2816 * _2764.z) + _2724;
                        _2651 = (_2897 * _2781.x) + _2719;
                        _2652 = (_2897 * _2781.y) + _2720;
                        _2653 = (_2897 * _2781.z) + _2721;
                        if (_2726 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2719 = _2651;
                            _2720 = _2652;
                            _2721 = _2653;
                            _2722 = _2654;
                            _2723 = _2655;
                            _2724 = _2656;
                            _2725 = _2726;
                        }
                    }
                    frontier_phi_61_pred = _2651;
                    frontier_phi_61_pred_1 = _2656;
                    frontier_phi_61_pred_2 = _2655;
                    frontier_phi_61_pred_3 = _2654;
                    frontier_phi_61_pred_4 = _2653;
                    frontier_phi_61_pred_5 = _2652;
                }
                _2451 = frontier_phi_61_pred;
                _2461 = frontier_phi_61_pred_1;
                _2459 = frontier_phi_61_pred_2;
                _2457 = frontier_phi_61_pred_3;
                _2455 = frontier_phi_61_pred_4;
                _2453 = frontier_phi_61_pred_5;
                uint _2602 = _2601 + 1u;
                if (_2602 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2595 = _2451;
                    _2596 = _2453;
                    _2597 = _2455;
                    _2598 = _2457;
                    _2599 = _2459;
                    _2600 = _2461;
                    _2601 = _2602;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2450 = _2451;
            _2452 = _2453;
            _2454 = _2455;
            _2456 = _2457;
            _2458 = _2459;
            _2460 = _2461;
        }
        uvec4 _2464 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2465 = _2464.z;
        uint _2467 = (_2465 >> 8u) & 15u;
        float _2563;
        float _2565;
        float _2567;
        float _2569;
        float _2571;
        float _2573;
        if (((4294967295u << _2467) & _2349) == 0u)
        {
            _2563 = _2450;
            _2565 = _2452;
            _2567 = _2454;
            _2569 = _2456;
            _2571 = _2458;
            _2573 = _2460;
        }
        else
        {
            float _2588 = inversesqrt(dot(vec3(_2303, _2304, _2305), vec3(_2303, _2304, _2305)));
            float _2589 = _2588 * _2303;
            float _2590 = _2588 * _2304;
            float _2591 = _2588 * _2305;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2467 < ((_2465 >> 12u) & 15u))
            {
                float _2564;
                float _2566;
                float _2568;
                float _2570;
                float _2572;
                float _2574;
                float _2702 = _2450;
                float _2703 = _2452;
                float _2704 = _2454;
                float _2705 = _2456;
                float _2706 = _2458;
                float _2707 = _2460;
                uint _2708 = _2467;
                uint _2717;
                bool _2718;
                for (;;)
                {
                    _2717 = texelFetch(g_lightClassification, int((((_2343 << 5u) + (_2329 << 9u)) + (_2708 << 2u)) >> 2u)).x;
                    _2718 = _2717 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2718)
                    {
                        frontier_phi_67_pred = _2705;
                        frontier_phi_67_pred_1 = _2706;
                        frontier_phi_67_pred_2 = _2707;
                        frontier_phi_67_pred_3 = _2704;
                        frontier_phi_67_pred_4 = _2703;
                        frontier_phi_67_pred_5 = _2702;
                    }
                    else
                    {
                        float _2902;
                        float _2903;
                        float _2904;
                        float _2905;
                        float _2906;
                        float _2907;
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3200;
                        float _3201;
                        float _3202;
                        float _2915 = _2702;
                        float _2916 = _2703;
                        float _2917 = _2704;
                        float _2918 = _2705;
                        float _2919 = _2706;
                        float _2920 = _2707;
                        uint _2921 = _2717;
                        uint _2922;
                        vec4 _2947;
                        float _2948;
                        vec4 _2963;
                        vec3 _2975;
                        vec4 _2991;
                        vec4 _3007;
                        float _3053;
                        bool _3054;
                        for (;;)
                        {
                            uint _2932 = ((_2708 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2921));
                            _2922 = (_2921 + 4294967295u) & _2921;
                            uint _2934 = _2932 * 40u;
                            _2947 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2934)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 3u)).x));
                            _2948 = _2947.w;
                            uint _2950 = (_2932 * 40u) + 4u;
                            _2963 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2950)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 3u)).x));
                            uint _2965 = (_2932 * 40u) + 8u;
                            _2975 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2965)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 2u)).x));
                            uint _2978 = (_2932 * 40u) + 16u;
                            _2991 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2978)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 3u)).x));
                            uint _2994 = (_2932 * 40u) + 20u;
                            _3007 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2994)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 3u)).x));
                            uint _3009 = (_2932 * 40u) + 24u;
                            vec4 _3022 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3009)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 3u)).x));
                            uint _3028 = (_2932 * 40u) + 28u;
                            vec4 _3041 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3028)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 3u)).x));
                            _3053 = fma(_2305, _3041.z, fma(_2304, _3041.y, _3041.x * _2303)) + _3041.w;
                            _3054 = !((fma(_2305, _3022.z, fma(_2304, _3022.y, _3022.x * _2303)) + _3022.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3054)
                            {
                                float _3081 = _2947.x - _2303;
                                float _3082 = _2947.y - _2304;
                                float _3083 = _2947.z - _2305;
                                float _3084 = dot(vec3(_3081, _3082, _3083), vec3(_3081, _3082, _3083));
                                float _3087 = inversesqrt(_3084);
                                float _3088 = _3087 * _3081;
                                float _3089 = _3087 * _3082;
                                float _3090 = _3087 * _3083;
                                float _3094 = 1.0 - (_3084 / (_2948 * _2948));
                                float _4163 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                                float _3095 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
                                float _3099 = sqrt(_3084) * _2963.w;
                                float _3101 = 1.39999997615814208984375 / (_3099 + 1.39999997615814208984375);
                                float _3102 = _3101 * _3101;
                                float _3105 = ((1.0 - _3102) * dot(vec3(_3088, _3089, _3090), vec3(_542, _545, _548))) + _3102;
                                float _3108 = _3099 * _3099;
                                float _3112 = (fma(_2305, _2991.z, fma(_2304, _2991.y, _2991.x * _2303)) + _2991.w) / _3053;
                                float _3113 = (fma(_2305, _3007.z, fma(_2304, _3007.y, _3007.x * _2303)) + _3007.w) / _3053;
                                float _3117 = 1.0 - dot(vec2(_3112, _3113), vec2(_3112, _3113));
                                float _4179 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                                float _3118 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
                                float _3119 = _3118 * (((isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0))) * _3095) / ((_3108 * 0.699999988079071044921875) + 1.0));
                                float _3131 = exp2(log2(1.0 / ((_3108 * 3.5) + 5.0)) * 0.25);
                                float _3132 = 1.0 - _617;
                                float _3139 = sqrt(1.0 - ((1.0 - (_3132 * _3132)) * (1.0 - (_3131 * _3131))));
                                float _3140 = _3139 * _3139;
                                float _3141 = _3140 * _3140;
                                float _3142 = _3088 - _2589;
                                float _3143 = _3089 - _2590;
                                float _3144 = _3090 - _2591;
                                float _3148 = inversesqrt(dot(vec3(_3142, _3143, _3144), vec3(_3142, _3143, _3144)));
                                float _3152 = dot(vec3(_542, _545, _548), vec3((-0.0) - _2589, (-0.0) - _2590, (-0.0) - _2591));
                                float _4190 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                                float _3155 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
                                float _3156 = dot(vec3(_542, _545, _548), vec3(_3148 * _3142, _3148 * _3143, _3148 * _3144));
                                float _4201 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                                float _3159 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
                                float _3163 = ((_3159 * _3159) * (_3141 + (-1.0))) + 1.0;
                                float _3164 = _3101 * _3140;
                                float _3165 = _3164 * _3164;
                                float _3171 = ((1.0 - _3165) * dot(vec3(_542, _545, _548), vec3(_3088, _3089, _3090))) + _3165;
                                float _4212 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                                float _3172 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
                                float _3173 = 1.0 - _3140;
                                float _3183 = (0.5 / (((_3172 * ((_3155 * _3173) + _3140)) + 9.9999999392252902907785028219223e-09) + (((_3172 * _3173) + _3140) * _3155))) * _3172;
                                float _4223 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
                                float _3193 = (_3118 * _3095) * (((_3141 * 3.1415927410125732421875) * (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0)))) / ((_3163 * _3163) * ((_3108 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3193 * _2975.x;
                                frontier_phi_73_pred_1 = _3193 * _2975.y;
                                frontier_phi_73_pred_2 = _3119 * _2963.z;
                                frontier_phi_73_pred_3 = _3119 * _2963.y;
                                frontier_phi_73_pred_4 = _3119 * _2963.x;
                                frontier_phi_73_pred_5 = _3193 * _2975.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3197 = frontier_phi_73_pred;
                            _3198 = frontier_phi_73_pred_1;
                            _3202 = frontier_phi_73_pred_2;
                            _3201 = frontier_phi_73_pred_3;
                            _3200 = frontier_phi_73_pred_4;
                            _3199 = frontier_phi_73_pred_5;
                            _2905 = _3200 + _2918;
                            _2906 = _3201 + _2919;
                            _2907 = _3202 + _2920;
                            _2902 = _3197 + _2915;
                            _2903 = _3198 + _2916;
                            _2904 = _3199 + _2917;
                            if (_2922 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2915 = _2902;
                                _2916 = _2903;
                                _2917 = _2904;
                                _2918 = _2905;
                                _2919 = _2906;
                                _2920 = _2907;
                                _2921 = _2922;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2905;
                        frontier_phi_67_pred_1 = _2906;
                        frontier_phi_67_pred_2 = _2907;
                        frontier_phi_67_pred_3 = _2904;
                        frontier_phi_67_pred_4 = _2903;
                        frontier_phi_67_pred_5 = _2902;
                    }
                    _2570 = frontier_phi_67_pred;
                    _2572 = frontier_phi_67_pred_1;
                    _2574 = frontier_phi_67_pred_2;
                    _2568 = frontier_phi_67_pred_3;
                    _2566 = frontier_phi_67_pred_4;
                    _2564 = frontier_phi_67_pred_5;
                    uint _2709 = _2708 + 1u;
                    if (_2709 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2702 = _2564;
                        _2703 = _2566;
                        _2704 = _2568;
                        _2705 = _2570;
                        _2706 = _2572;
                        _2707 = _2574;
                        _2708 = _2709;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2572;
                frontier_phi_55_56_ladder_1 = _2574;
                frontier_phi_55_56_ladder_2 = _2570;
                frontier_phi_55_56_ladder_3 = _2568;
                frontier_phi_55_56_ladder_4 = _2566;
                frontier_phi_55_56_ladder_5 = _2564;
            }
            else
            {
                frontier_phi_55_56_ladder = _2458;
                frontier_phi_55_56_ladder_1 = _2460;
                frontier_phi_55_56_ladder_2 = _2456;
                frontier_phi_55_56_ladder_3 = _2454;
                frontier_phi_55_56_ladder_4 = _2452;
                frontier_phi_55_56_ladder_5 = _2450;
            }
            _2563 = frontier_phi_55_56_ladder_5;
            _2565 = frontier_phi_55_56_ladder_4;
            _2567 = frontier_phi_55_56_ladder_3;
            _2569 = frontier_phi_55_56_ladder_2;
            _2571 = frontier_phi_55_56_ladder;
            _2573 = frontier_phi_55_56_ladder_1;
        }
        float _2578 = isnan(1.0) ? _601 : (isnan(_601) ? 1.0 : min(_601, 1.0));
        _2362 = (_2578 * _2569) + _1795;
        _2364 = (_2578 * _2571) + _1797;
        _2366 = (_2578 * _2573) + _1799;
        _2368 = ((_2563 * _585) * _2578) + _2143;
        _2370 = ((_2565 * _587) * _2578) + _2145;
        _2372 = ((_2567 * _588) * _2578) + _2147;
    }
    else
    {
        _2362 = _1795;
        _2364 = _1797;
        _2366 = _1799;
        _2368 = _2143;
        _2370 = _2145;
        _2372 = _2147;
    }
    float _4239 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _4250 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _4261 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    uint _2392 = _222 + 6u;
    float _2400 = _520 / cbSceneParam._m0[86u].x;
    float _2401 = _521 / cbSceneParam._m0[86u].y;
    vec4 _2415 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2400, _2401, (log2((isnan(cbSceneParam._m0[77u].w) ? _454 : (isnan(_454) ? cbSceneParam._m0[77u].w : min(_454, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2417 = _2415.x;
    float _2418 = _2415.y;
    float _2419 = _2415.z;
    float _2420 = _2415.w;
    float _2513;
    float _2515;
    float _2517;
    float _2519;
    if (_454 > cbSceneParam._m0[78u].w)
    {
        float _2475 = isnan(_454) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _454 : min(cbSceneParam._m0[80u].w, _454));
        float _2476 = _2475 / _454;
        float _2487 = _2476 * _505;
        float _2488 = _506 * _2476;
        float _2489 = (-0.0) - _2488;
        float _2491 = _2476 * _507;
        float _2493 = (cbSceneParam._m0[77u].w * _2489) / _2475;
        float _2494 = _2493 + cbSceneParam._m0[79u].w;
        float _2495 = cbSceneParam._m0[79u].w - _2488;
        float _2501 = sqrt(((_2487 * _2487) + (_2488 * _2488)) + (_2491 * _2491));
        float _2504 = (1.0 - (cbSceneParam._m0[77u].w / _2475)) * _2501;
        float _2509 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2511 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2664;
        if (abs((_2489 - _2493) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2664 = ((((_2494 > 0.0) ? exp2(_2509 * _2494) : (2.0 - exp2(_2511 * _2494))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2504;
        }
        else
        {
            float _2624 = 1.0 / cbSceneParam._m0[80u].x;
            float _2625 = isnan(_2495) ? _2494 : (isnan(_2494) ? _2495 : max(_2494, _2495));
            float _2626 = isnan(_2495) ? _2494 : (isnan(_2494) ? _2495 : min(_2494, _2495));
            float _2635 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : min(_2625, 0.0));
            float _2636 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : min(_2626, 0.0));
            _2664 = ((abs(_2501 / _2489) * cbSceneParam._m0[80u].y) * ((((_2635 - _2636) * 2.0) - ((exp2(_2509 * (isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0)))) - exp2(_2509 * (isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0))))) * _2624)) - ((exp2(_2511 * _2635) - exp2(_2511 * _2636)) * _2624))) + (_2504 * cbSceneParam._m0[80u].z);
        }
        vec4 _2666 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2400, _2401, 1.0), 0.0);
        float _2675 = exp2((_2664 * (-1.44269502162933349609375)) * (1.0 - _2666.w));
        float _2676 = log2(_2675);
        float _2692 = log2(_2420);
        _2513 = (exp2(_2692 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2676 * cbSceneParam._m0[78u].x)) * _2666.x) / cbSceneParam._m0[78u].x)) + _2417;
        _2515 = (exp2(_2692 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2676 * cbSceneParam._m0[78u].y)) * _2666.y) / cbSceneParam._m0[78u].y)) + _2418;
        _2517 = (exp2(_2692 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2676 * cbSceneParam._m0[78u].z)) * _2666.z) / cbSceneParam._m0[78u].z)) + _2419;
        _2519 = _2675 * _2420;
    }
    else
    {
        _2513 = _2417;
        _2515 = _2418;
        _2517 = _2419;
        _2519 = _2420;
    }
    float _2531 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2532 = _2531 == 3.0;
    float _2533 = log2(_2519);
    float _2540 = exp2(_2533 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_2362 + ((isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0))) * _601))) + ((_2368 + ((isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))) * _1410)) * cbPerFrame._m0[3u].x));
    float _2541 = exp2(_2533 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_2364 + ((isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0))) * _601))) + ((_2370 + ((isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))) * _1410)) * cbPerFrame._m0[3u].x));
    float _2542 = exp2(_2533 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_2366 + ((isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0))) * _601))) + ((_2372 + ((isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))) * _1410)) * cbPerFrame._m0[3u].x));
    float _2551 = (_2531 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2551 * (_2532 ? _2540 : (_2540 + (cbSceneParam._m0[72u].w * _2513)));
    SV_Target.y = _2551 * (_2532 ? _2541 : (_2541 + (cbSceneParam._m0[72u].w * _2515)));
    SV_Target.z = _2551 * (_2532 ? _2542 : (_2542 + (cbSceneParam._m0[72u].w * _2517)));
    SV_Target.w = cbInstanceData._m0[_2392].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2392].w;
}


