#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1064;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _211 = _210 * _202;
    float _212 = _210 * _203;
    float _213 = _210 * _204;
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = _217 * NORMAL.x;
    float _219 = _217 * NORMAL.y;
    float _220 = _217 * NORMAL.z;
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _225 = _224 * TANGENT.x;
    float _226 = _224 * TANGENT.y;
    float _227 = _224 * TANGENT.z;
    uint _230 = uint(roundEven(NORMAL.w)) * 13u;
    uint _236 = _230 + 1u;
    uint _240 = _230 + 2u;
    float _249 = sqrt(((cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x)) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x));
    float _250 = _249 * TEXCOORD.z;
    float _251 = _249 * TEXCOORD.w;
    vec4 _270 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _276 = _270.x * cbMtdParam._m0[9u].x;
    float _277 = _270.y * cbMtdParam._m0[9u].y;
    float _278 = _270.z * cbMtdParam._m0[9u].z;
    vec4 _297 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _250) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _251) + cbTextureTilingScale._m0[14u].w));
    vec4 _317 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _250) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _251) + cbTextureTilingScale._m0[20u].w));
    vec4 _343 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _347 = _343.z;
    float _351 = (_343.x * 2.0) + (-1.0);
    float _352 = (_343.y * 2.0) + (-1.0);
    float _353 = dot(vec2(_351, _352), vec2(_351, _352));
    float _3674 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _359 = sqrt(1.0 - (isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0))));
    float _364 = _351 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_317.x * 2.0) + (-1.0)));
    float _365 = _352 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_317.y * 2.0) + (-1.0)));
    float _368 = fma(_359, _218, fma(_365, _225, _364 * _211));
    float _371 = fma(_359, _219, fma(_365, _226, _364 * _212));
    float _374 = fma(_359, _220, fma(_365, _227, _364 * _213));
    float _378 = inversesqrt(dot(vec3(_368, _371, _374), vec3(_368, _371, _374)));
    vec4 _414 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _250) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _251) + cbTextureTilingScale._m0[11u].w));
    float _416 = _414.x;
    float _417 = 1.0 - _416;
    float _426 = (cbMtdParam._m0[19u].x + dot(vec4(_378 * _368, _378 * _371, _378 * _374, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_416 - _417) * cbMtdParam._m0[24u].z) + _417) * cbMtdParam._m0[21u].z);
    float _3685 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _427 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    float _434 = (_427 * ((_297.x * cbMtdParam._m0[18u].x) - _276)) + _276;
    float _435 = (_427 * ((_297.y * cbMtdParam._m0[18u].y) - _277)) + _277;
    float _436 = (_427 * ((_297.z * cbMtdParam._m0[18u].z) - _278)) + _278;
    vec4 _449 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _451 = _449.x;
    float _453 = _451 - (_451 * _427);
    float _458 = (((_317.z - _347) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _347;
    vec4 _471 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _250) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _251) + cbTextureTilingScale._m0[15u].w));
    float _478 = (_471.x * 2.0) + (-1.0);
    float _479 = (_471.y * 2.0) + (-1.0);
    float _480 = dot(vec2(_478, _479), vec2(_478, _479));
    float _3696 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _488 = ((_471.z - _458) * _427) + _458;
    float _498 = ((sqrt(1.0 - (isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0)))) - _359) * _427) + _359;
    float _501 = (((_478 - _364) * _427) + _364) + (cbMtdParam._m0[21u].x * _364);
    float _502 = (((_479 - _365) * _427) + _365) + (cbMtdParam._m0[21u].x * _365);
    float _507 = cbMtdParam._m0[22u].x + _343.w;
    float _510 = fma(_498, _218, fma(_502, _225, _501 * _211));
    float _513 = fma(_498, _219, fma(_502, _226, _501 * _212));
    float _516 = fma(_498, _220, fma(_502, _227, _501 * _213));
    float _520 = inversesqrt(dot(vec3(_510, _513, _516), vec3(_510, _513, _516)));
    float _521 = _520 * _510;
    float _522 = _520 * _513;
    float _523 = _520 * _516;
    float _3707 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _524 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
    float _3718 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _3729 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _3740 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _3751 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _3762 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _529 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
    float _543 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _584 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _594 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _584);
    float _595 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _584);
    float _596 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _584);
    float _600 = inversesqrt(dot(vec3(_594, _595, _596), vec3(_594, _595, _596)));
    float _601 = _594 * _600;
    float _602 = _595 * _600;
    float _603 = _596 * _600;
    float _609 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _610 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _631 = fma(_523, cbSceneParam._m0[5u].z, fma(_522, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _521));
    float _634 = fma(_523, cbSceneParam._m0[6u].z, fma(_522, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _521));
    float _637 = fma(_523, cbSceneParam._m0[7u].z, fma(_522, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _521));
    uint _651 = (_230 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _657 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0)))) * cbInstanceData._m0[_651].x;
    float _658 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0)))) * cbInstanceData._m0[_651].y;
    float _659 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0)))) * cbInstanceData._m0[_651].z;
    float _3773 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _660 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
    float _3784 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _661 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
    float _3795 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _662 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    float _663 = 1.0 - _529;
    float _664 = _660 * _663;
    float _665 = _661 * _663;
    float _666 = _662 * _663;
    float _671 = (_660 + (-0.039999999105930328369140625)) * _529;
    float _672 = (_661 + (-0.039999999105930328369140625)) * _529;
    float _673 = (_662 + (-0.039999999105930328369140625)) * _529;
    float _674 = _671 + 0.039999999105930328369140625;
    float _676 = _672 + 0.039999999105930328369140625;
    float _677 = _673 + 0.039999999105930328369140625;
    vec4 _686 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _609, cbSceneParam._m0[86u].y * _610));
    float _690 = ((isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) * TEXCOORD_5.w) * _686.x;
    float _691 = dot(vec3(_521, _522, _523), vec3(_601, _602, _603));
    float _694 = _691 * 2.0;
    float _698 = (_694 * _521) - _601;
    float _699 = (_694 * _522) - _602;
    float _700 = (_694 * _523) - _603;
    float _704 = abs(dot(vec3(_601, _602, _603), vec3(_521, _522, _523)));
    float _3806 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _706 = sqrt(_524);
    float _719 = exp2((_706 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_706 * 3.0));
    float _725 = (1.0 - _719) * ((_706 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _726 = _719 * _706;
    float _754 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _758 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _762 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1063;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _788 = fma(_762, cbModelParam._m0[26u].z, fma(_758, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _754));
        float _792 = fma(_762, cbModelParam._m0[27u].z, fma(_758, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _754));
        float _796 = fma(_762, cbModelParam._m0[28u].z, fma(_758, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _754));
        float _821 = _754 + _521;
        float _822 = _758 + _522;
        float _823 = _762 + _523;
        float _833 = fma(_823, cbModelParam._m0[26u].z, fma(_822, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _821)) - _788;
        float _834 = fma(_823, cbModelParam._m0[27u].z, fma(_822, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _821)) - _792;
        float _835 = fma(_823, cbModelParam._m0[28u].z, fma(_822, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _821)) - _796;
        float _839 = inversesqrt(dot(vec3(_833, _834, _835), vec3(_833, _834, _835)));
        float _852 = ((_839 * _833) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_788 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _853 = ((_839 * _834) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_792 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _854 = ((_839 * _835) / cbModelParam._m0[34u].z) + ((((((_796 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _857 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_852, _853, _854), 0.0);
        vec4 _864 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_852, _853, _854), 0.0);
        vec4 _871 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_852, _853, _854), 0.0);
        vec4 _878 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_852, _853, _854), 0.0);
        float _891 = exp2((_857.w + (-0.5)) * 20.0) * 2.0;
        float _892 = _891 * (_857.x + (-0.5));
        float _893 = _891 * (_857.y + (-0.5));
        float _894 = _891 * (_857.z + (-0.5));
        float _901 = exp2((_864.w + (-0.5)) * 20.0) * 2.0;
        float _902 = _901 * (_864.x + (-0.5));
        float _903 = _901 * (_864.y + (-0.5));
        float _904 = _901 * (_864.z + (-0.5));
        float _911 = exp2((_871.w + (-0.5)) * 20.0) * 2.0;
        float _912 = _911 * (_871.x + (-0.5));
        float _913 = _911 * (_871.y + (-0.5));
        float _914 = _911 * (_871.z + (-0.5));
        float _921 = exp2((_878.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_878.x + (-0.5));
        float _923 = _921 * (_878.y + (-0.5));
        float _924 = _921 * (_878.z + (-0.5));
        float _925 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _926 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _927 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _928 = _892 * 0.5;
        float _929 = _902 * 0.5;
        float _930 = _912 * 0.5;
        float _931 = dot(vec3(_928, _929, _930), vec3(_928, _929, _930));
        float _936 = (_931 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_931);
        float _945 = (dot(vec3(_521, _522, _523), vec3(_936 * _928, _936 * _929, _936 * _930)) + 1.0) * 0.5;
        float _3832 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _955 = sqrt(((_929 * _929) + (_928 * _928)) + (_930 * _930)) / (_925 + 9.9999997473787516355514526367188e-06);
        float _3843 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _957 = _956 * 2.0;
        float _961 = (1.0 - _956) / (_956 + 1.0);
        float _3854 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _962 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _971 = ((((1.0 - _962) * (_957 + 2.0)) * exp2(log2(isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * (_957 + 1.0))) + _962) * _925;
        float _972 = _893 * 0.5;
        float _973 = _903 * 0.5;
        float _974 = _913 * 0.5;
        float _975 = dot(vec3(_972, _973, _974), vec3(_972, _973, _974));
        float _980 = (_975 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_975);
        float _988 = (dot(vec3(_521, _522, _523), vec3(_980 * _972, _980 * _973, _980 * _974)) + 1.0) * 0.5;
        float _3865 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _997 = sqrt(((_973 * _973) + (_972 * _972)) + (_974 * _974)) / (_926 + 9.9999997473787516355514526367188e-06);
        float _3876 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _999 = _998 * 2.0;
        float _1003 = (1.0 - _998) / (_998 + 1.0);
        float _3887 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1013 = ((((1.0 - _1004) * (_999 + 2.0)) * exp2(log2(isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * (_999 + 1.0))) + _1004) * _926;
        float _1014 = _894 * 0.5;
        float _1015 = _904 * 0.5;
        float _1016 = _914 * 0.5;
        float _1017 = dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016));
        float _1022 = (_1017 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1017);
        float _1030 = (dot(vec3(_521, _522, _523), vec3(_1022 * _1014, _1022 * _1015, _1022 * _1016)) + 1.0) * 0.5;
        float _3898 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1039 = sqrt(((_1015 * _1015) + (_1014 * _1014)) + (_1016 * _1016)) / (_927 + 9.9999997473787516355514526367188e-06);
        float _3909 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1041 = _1040 * 2.0;
        float _1045 = (1.0 - _1040) / (_1040 + 1.0);
        float _3920 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1055 = ((((1.0 - _1046) * (_1041 + 2.0)) * exp2(log2(isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * (_1041 + 1.0))) + _1046) * _927;
        _1063 = _894;
        _1065 = _893;
        _1066 = _892;
        _1067 = _904;
        _1068 = _903;
        _1069 = _902;
        _1070 = _914;
        _1071 = _913;
        _1072 = _912;
        _1073 = _927;
        _1074 = _926;
        _1075 = _925;
        _1076 = cbModelParam._m0[36u].z * (isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0)));
        _1077 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0)));
        _1078 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0)));
    }
    else
    {
        _1063 = _1064;
        _1065 = _1064;
        _1066 = _1064;
        _1067 = _1064;
        _1068 = _1064;
        _1069 = _1064;
        _1070 = _1064;
        _1071 = _1064;
        _1072 = _1064;
        _1073 = _1064;
        _1074 = _1064;
        _1075 = _1064;
        _1076 = 0.0;
        _1077 = 0.0;
        _1078 = 0.0;
    }
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1103 = fma(_762, cbModelParam._m0[30u].z, fma(_758, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _754));
        float _1107 = fma(_762, cbModelParam._m0[31u].z, fma(_758, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _754));
        float _1111 = fma(_762, cbModelParam._m0[32u].z, fma(_758, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _754));
        float _1134 = _754 + _521;
        float _1135 = _758 + _522;
        float _1136 = _762 + _523;
        float _1146 = fma(_1136, cbModelParam._m0[30u].z, fma(_1135, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1134)) - _1103;
        float _1147 = fma(_1136, cbModelParam._m0[31u].z, fma(_1135, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1134)) - _1107;
        float _1148 = fma(_1136, cbModelParam._m0[32u].z, fma(_1135, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1134)) - _1111;
        float _1152 = inversesqrt(dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148)));
        float _1165 = ((_1152 * _1146) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1103 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1166 = ((_1152 * _1147) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1107 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1167 = ((_1152 * _1148) / cbModelParam._m0[35u].z) + ((((((_1111 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        float _1202 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1169.x + (-0.5));
        float _1204 = _1202 * (_1169.y + (-0.5));
        float _1205 = _1202 * (_1169.z + (-0.5));
        float _1212 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1176.x + (-0.5));
        float _1214 = _1212 * (_1176.y + (-0.5));
        float _1215 = _1212 * (_1176.z + (-0.5));
        float _1222 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1183.x + (-0.5));
        float _1224 = _1222 * (_1183.y + (-0.5));
        float _1225 = _1222 * (_1183.z + (-0.5));
        float _1232 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1190.x + (-0.5));
        float _1234 = _1232 * (_1190.y + (-0.5));
        float _1235 = _1232 * (_1190.z + (-0.5));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1239 = _1203 * 0.5;
        float _1240 = _1213 * 0.5;
        float _1241 = _1223 * 0.5;
        float _1242 = dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241));
        float _1247 = (_1242 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1242);
        float _1255 = (dot(vec3(_521, _522, _523), vec3(_1247 * _1239, _1247 * _1240, _1247 * _1241)) + 1.0) * 0.5;
        float _3961 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1264 = sqrt(((_1240 * _1240) + (_1239 * _1239)) + (_1241 * _1241)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _3972 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1266 = _1265 * 2.0;
        float _1270 = (1.0 - _1265) / (_1265 + 1.0);
        float _3983 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _1280 = ((((1.0 - _1271) * (_1266 + 2.0)) * exp2(log2(isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * (_1266 + 1.0))) + _1271) * _1236;
        float _1281 = _1204 * 0.5;
        float _1282 = _1214 * 0.5;
        float _1283 = _1224 * 0.5;
        float _1284 = dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283));
        float _1289 = (_1284 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1284);
        float _1297 = (dot(vec3(_521, _522, _523), vec3(_1289 * _1281, _1289 * _1282, _1289 * _1283)) + 1.0) * 0.5;
        float _3994 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1306 = sqrt(((_1282 * _1282) + (_1281 * _1281)) + (_1283 * _1283)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _4005 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1308 = _1307 * 2.0;
        float _1312 = (1.0 - _1307) / (_1307 + 1.0);
        float _4016 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1322 = ((((1.0 - _1313) * (_1308 + 2.0)) * exp2(log2(isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (_1308 + 1.0))) + _1313) * _1237;
        float _1323 = _1205 * 0.5;
        float _1324 = _1215 * 0.5;
        float _1325 = _1225 * 0.5;
        float _1326 = dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325));
        float _1331 = (_1326 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1326);
        float _1339 = (dot(vec3(_521, _522, _523), vec3(_1331 * _1323, _1331 * _1324, _1331 * _1325)) + 1.0) * 0.5;
        float _4027 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1348 = sqrt(((_1324 * _1324) + (_1323 * _1323)) + (_1325 * _1325)) / (_1238 + 9.9999997473787516355514526367188e-06);
        float _4038 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1350 = _1349 * 2.0;
        float _1354 = (1.0 - _1349) / (_1349 + 1.0);
        float _4049 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1364 = ((((1.0 - _1355) * (_1350 + 2.0)) * exp2(log2(isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_1350 + 1.0))) + _1355) * _1238;
        _1372 = _1205;
        _1373 = _1204;
        _1374 = _1203;
        _1375 = _1215;
        _1376 = _1214;
        _1377 = _1213;
        _1378 = _1225;
        _1379 = _1224;
        _1380 = _1223;
        _1381 = _1238;
        _1382 = _1237;
        _1383 = _1236;
        _1384 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)));
        _1385 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)));
        _1386 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)));
    }
    else
    {
        _1372 = _1064;
        _1373 = _1064;
        _1374 = _1064;
        _1375 = _1064;
        _1376 = _1064;
        _1377 = _1064;
        _1378 = _1064;
        _1379 = _1064;
        _1380 = _1064;
        _1381 = _1064;
        _1382 = _1064;
        _1383 = _1064;
        _1384 = 0.0;
        _1385 = 0.0;
        _1386 = 0.0;
    }
    float _1396 = (cbModelParam._m0[1u].x * (_1384 - _1076)) + _1076;
    float _1397 = (cbModelParam._m0[1u].x * (_1385 - _1077)) + _1077;
    float _1398 = (cbModelParam._m0[1u].x * (_1386 - _1078)) + _1078;
    float _1419 = fma(_1398, cbSceneParam._m0[89u].z, fma(_1397, cbSceneParam._m0[89u].y, _1396 * cbSceneParam._m0[89u].x));
    float _1422 = fma(_1398, cbSceneParam._m0[90u].z, fma(_1397, cbSceneParam._m0[90u].y, _1396 * cbSceneParam._m0[90u].x));
    float _1425 = fma(_1398, cbSceneParam._m0[91u].z, fma(_1397, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1396));
    float _1440 = _698 * 0.5;
    float _1441 = _699 * 0.5;
    float _1442 = _700 * 0.5;
    float _1443 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1374, _1377, _1380, _1383));
    float _1446 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1373, _1376, _1379, _1382));
    float _1449 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1372, _1375, _1378, _1381));
    float _1483;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1456 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1063, _1067, _1070, _1073));
        float _1460 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1065, _1068, _1071, _1074));
        float _1464 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1066, _1069, _1072, _1075));
        float _1471 = dot(vec4(cbModelParam._m0[39u]), vec4(_1440, _1441, _1442, 1.0));
        _1483 = dot(vec3(isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)), isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)), isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1471) ? 0.0 : (isnan(0.0) ? _1471 : max(0.0, _1471))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1483 = 1.0;
    }
    float _1494;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1485 = dot(vec4(cbModelParam._m0[40u]), vec4(_1440, _1441, _1442, 1.0));
        _1494 = dot(vec3(isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)), isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)), isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1485) ? 0.0 : (isnan(0.0) ? _1485 : max(0.0, _1485))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1494 = 1.0;
    }
    float _1498 = (_1494 * cbModelParam._m0[1u].x) + (_1483 * (1.0 - cbModelParam._m0[1u].x));
    float _1508 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _524);
    float _1509 = isnan(_1508) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1508 : min(cbModelParam._m0[25u].z, _1508));
    float _1589;
    float _1591;
    float _1593;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1556 = fma(_762, cbModelParam._m0[13u].z, fma(_758, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _754)) + cbModelParam._m0[13u].w;
        float _1560 = fma(_762, cbModelParam._m0[14u].z, fma(_758, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _754)) + cbModelParam._m0[14u].w;
        float _1564 = fma(_762, cbModelParam._m0[15u].z, fma(_758, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _754)) + cbModelParam._m0[15u].w;
        float _1567 = fma(_700, cbModelParam._m0[13u].z, fma(_699, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _698));
        float _1570 = fma(_700, cbModelParam._m0[14u].z, fma(_699, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _698));
        float _1573 = fma(_700, cbModelParam._m0[15u].z, fma(_699, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _698));
        float _1601;
        if (_1567 > 0.0)
        {
            _1601 = abs((1.0 - _1556) / _1567);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1567 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1556 + 1.0) / _1567);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1601 = frontier_phi_14_12_ladder;
        }
        float _1772;
        if (_1570 > 0.0)
        {
            _1772 = abs((1.0 - _1560) / _1570);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1570 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1560 + 1.0) / _1570);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1772 = frontier_phi_23_19_ladder;
        }
        float _2068;
        if (_1573 > 0.0)
        {
            _2068 = abs((1.0 - _1564) / _1573);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1573 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1564 + 1.0) / _1573);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2068 = frontier_phi_35_30_ladder;
        }
        float _2070 = isnan(_1772) ? _1601 : (isnan(_1601) ? _1772 : min(_1601, _1772));
        float _2071 = isnan(_2068) ? _2070 : (isnan(_2070) ? _2068 : min(_2070, _2068));
        float _2075 = (_2071 * _1567) + _1556;
        float _2076 = (_2071 * _1570) + _1560;
        float _2077 = (_2071 * _1573) + _1564;
        float _2078 = _2071 * 9.9999997473787516355514526367188e-05;
        float _2080 = (-1.0) - _2078;
        float _2082 = _2078 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2077 > _2082) || ((_2077 < _2080) || ((_2076 > _2082) || ((_2076 < _2080) || ((_2075 < _2080) || (_2075 > _2082))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2222 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2077, cbModelParam._m0[9u].z, fma(_2076, cbModelParam._m0[9u].y, _2075 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2077, cbModelParam._m0[10u].z, fma(_2076, cbModelParam._m0[10u].y, _2075 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2077, cbModelParam._m0[11u].z, fma(_2076, cbModelParam._m0[11u].y, _2075 * cbModelParam._m0[11u].x))), _1509);
            frontier_phi_13_35_ladder = _2222.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2222.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2222.x * cbModelParam._m0[1u].y;
        }
        _1589 = frontier_phi_13_35_ladder_2;
        _1591 = frontier_phi_13_35_ladder_1;
        _1593 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1577 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_698, _699, _700), _1509);
        _1589 = _1577.x * cbModelParam._m0[1u].y;
        _1591 = _1577.y * cbModelParam._m0[1u].y;
        _1593 = _1577.z * cbModelParam._m0[1u].y;
    }
    float _1597 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _524);
    float _1598 = isnan(_1597) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1597 : min(cbModelParam._m0[25u].w, _1597));
    float _1687;
    float _1689;
    float _1691;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1651 = fma(_762, cbModelParam._m0[21u].z, fma(_758, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _754)) + cbModelParam._m0[21u].w;
        float _1655 = fma(_762, cbModelParam._m0[22u].z, fma(_758, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _754)) + cbModelParam._m0[22u].w;
        float _1659 = fma(_762, cbModelParam._m0[23u].z, fma(_758, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _754)) + cbModelParam._m0[23u].w;
        float _1662 = fma(_700, cbModelParam._m0[21u].z, fma(_699, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _698));
        float _1665 = fma(_700, cbModelParam._m0[22u].z, fma(_699, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _698));
        float _1668 = fma(_700, cbModelParam._m0[23u].z, fma(_699, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _698));
        float _1777;
        if (_1662 > 0.0)
        {
            _1777 = abs((1.0 - _1651) / _1662);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1662 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1651 + 1.0) / _1662);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1777 = frontier_phi_25_21_ladder;
        }
        float _2095;
        if (_1665 > 0.0)
        {
            _2095 = abs((1.0 - _1655) / _1665);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1665 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1655 + 1.0) / _1665);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2095 = frontier_phi_37_32_ladder;
        }
        float _2433;
        if (_1668 > 0.0)
        {
            _2433 = abs((1.0 - _1659) / _1668);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1668 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1659 + 1.0) / _1668);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2433 = frontier_phi_47_44_ladder;
        }
        float _2435 = isnan(_2095) ? _1777 : (isnan(_1777) ? _2095 : min(_1777, _2095));
        float _2436 = isnan(_2433) ? _2435 : (isnan(_2435) ? _2433 : min(_2435, _2433));
        float _2440 = (_2436 * _1662) + _1651;
        float _2441 = (_2436 * _1665) + _1655;
        float _2442 = (_2436 * _1668) + _1659;
        float _2443 = _2436 * 9.9999997473787516355514526367188e-05;
        float _2444 = (-1.0) - _2443;
        float _2446 = _2443 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2442 > _2446) || ((_2442 < _2444) || ((_2441 > _2446) || ((_2441 < _2444) || ((_2440 < _2444) || (_2440 > _2446))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2564 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2442, cbModelParam._m0[17u].z, fma(_2441, cbModelParam._m0[17u].y, _2440 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2442, cbModelParam._m0[18u].z, fma(_2441, cbModelParam._m0[18u].y, _2440 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2442, cbModelParam._m0[19u].z, fma(_2441, cbModelParam._m0[19u].y, _2440 * cbModelParam._m0[19u].x))), _1598);
            frontier_phi_22_47_ladder = _2564.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2564.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2564.x * cbModelParam._m0[1u].z;
        }
        _1687 = frontier_phi_22_47_ladder_2;
        _1689 = frontier_phi_22_47_ladder_1;
        _1691 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1671 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_698, _699, _700), _1598);
        _1687 = _1671.x * cbModelParam._m0[1u].z;
        _1689 = _1671.y * cbModelParam._m0[1u].z;
        _1691 = _1671.z * cbModelParam._m0[1u].z;
    }
    float _1704 = (((_725 * _674) + _726) * _690) * ((cbModelParam._m0[1u].w * (_1687 - _1589)) + _1589);
    float _1706 = (((_725 * _676) + _726) * _690) * ((cbModelParam._m0[1u].w * (_1689 - _1591)) + _1591);
    float _1708 = (((_725 * _677) + _726) * _690) * ((cbModelParam._m0[1u].w * (_1691 - _1593)) + _1593);
    float _1711 = fma(_1708, cbSceneParam._m0[89u].z, fma(_1706, cbSceneParam._m0[89u].y, _1704 * cbSceneParam._m0[89u].x));
    float _1714 = fma(_1708, cbSceneParam._m0[90u].z, fma(_1706, cbSceneParam._m0[90u].y, _1704 * cbSceneParam._m0[90u].x));
    float _1717 = fma(_1708, cbSceneParam._m0[91u].z, fma(_1706, cbSceneParam._m0[91u].y, _1704 * cbSceneParam._m0[91u].x));
    float _1751 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1755 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1759 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1763 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1764 = _1751 / _1763;
    float _1765 = _1755 / _1763;
    float _1766 = _1759 / _1763;
    float _1913;
    float _1914;
    float _1915;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1793 = ((uint(_1766 > cbSceneParam._m0[59u].y) + uint(_1766 > cbSceneParam._m0[59u].x)) + uint(_1766 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1794 = _1793 + 43u;
        uint _1802 = _1793 + 44u;
        uint _1810 = _1793 + 45u;
        uint _1818 = _1793 + 46u;
        float _1829 = fma(_1763, cbSceneParam._m0[_1794].w, fma(_1759, cbSceneParam._m0[_1794].z, fma(_1755, cbSceneParam._m0[_1794].y, _1751 * cbSceneParam._m0[_1794].x)));
        float _1833 = fma(_1763, cbSceneParam._m0[_1802].w, fma(_1759, cbSceneParam._m0[_1802].z, fma(_1755, cbSceneParam._m0[_1802].y, _1751 * cbSceneParam._m0[_1802].x)));
        float _1841 = fma(_1763, cbSceneParam._m0[_1818].w, fma(_1759, cbSceneParam._m0[_1818].z, fma(_1755, cbSceneParam._m0[_1818].y, _1751 * cbSceneParam._m0[_1818].x)));
        float _1846 = cbSceneParam._m0[33u].z * _1841;
        float _1848 = cbSceneParam._m0[33u].w * _1841;
        float _1851 = fma(_1763, cbSceneParam._m0[_1810].w, fma(_1759, cbSceneParam._m0[_1810].z, fma(_1755, cbSceneParam._m0[_1810].y, _1751 * cbSceneParam._m0[_1810].x))) / _1841;
        float _1899 = (cbSceneParam._m0[33u].x - sqrt(((_1765 * _1765) + (_1764 * _1764)) + (_1766 * _1766))) * cbSceneParam._m0[33u].y;
        float _4175 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
        float _1906 = (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1846 + _1829) / _1841, (_1848 + _1833) / _1841), _1851), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1848 + _1829) / _1841, (_1833 - _1846) / _1841), _1851), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1829 - _1846) / _1841, (_1833 - _1848) / _1841), _1851), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1829 - _1848) / _1841, (_1846 + _1833) / _1841), _1851), 0.0)).x), vec4(0.25)));
        _1913 = 1.0 - (_1906 * cbSceneParam._m0[34u].x);
        _1914 = 1.0 - (_1906 * cbSceneParam._m0[34u].y);
        _1915 = 1.0 - (_1906 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1913 = 1.0;
        _1914 = 1.0;
        _1915 = 1.0;
    }
    float _1979;
    float _1981;
    float _1983;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1967 = fma(_1763, cbSceneParam._m0[63u].w, fma(_1759, cbSceneParam._m0[63u].z, fma(_1755, cbSceneParam._m0[63u].y, _1751 * cbSceneParam._m0[63u].x)));
        float _1968 = fma(_1763, cbSceneParam._m0[60u].w, fma(_1759, cbSceneParam._m0[60u].z, fma(_1755, cbSceneParam._m0[60u].y, _1751 * cbSceneParam._m0[60u].x))) / _1967;
        float _1969 = fma(_1763, cbSceneParam._m0[61u].w, fma(_1759, cbSceneParam._m0[61u].z, fma(_1755, cbSceneParam._m0[61u].y, _1751 * cbSceneParam._m0[61u].x))) / _1967;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1968 >= cbSceneParam._m0[64u].x) && (_1969 >= cbSceneParam._m0[64u].y)) && (_1968 <= cbSceneParam._m0[64u].z)) && (_1969 <= cbSceneParam._m0[64u].w))
        {
            float _2108 = fma(_1763, cbSceneParam._m0[62u].w, fma(_1759, cbSceneParam._m0[62u].z, fma(_1755, cbSceneParam._m0[62u].y, _1751 * cbSceneParam._m0[62u].x))) / _1967;
            float _2112 = isnan(cbSceneParam._m0[41u].w) ? _2108 : (isnan(_2108) ? cbSceneParam._m0[41u].w : max(_2108, cbSceneParam._m0[41u].w));
            float _2155 = (cbSceneParam._m0[33u].x - sqrt(((_1765 * _1765) + (_1764 * _1764)) + (_1766 * _1766))) * cbSceneParam._m0[33u].y;
            float _4191 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
            float _2162 = (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1968, cbSceneParam._m0[33u].w + _1969), _2112), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1968, _1969 - cbSceneParam._m0[33u].z), _2112), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1968 - cbSceneParam._m0[33u].z, _1969 - cbSceneParam._m0[33u].w), _2112), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1968 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1969), _2112), 0.0)).x), vec4(0.25)));
            float _2166 = 1.0 - (_2162 * cbSceneParam._m0[34u].x);
            float _2167 = 1.0 - (_2162 * cbSceneParam._m0[34u].y);
            float _2168 = 1.0 - (_2162 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2168) ? _1915 : (isnan(_1915) ? _2168 : min(_1915, _2168));
            frontier_phi_34_33_ladder_1 = isnan(_2167) ? _1914 : (isnan(_1914) ? _2167 : min(_1914, _2167));
            frontier_phi_34_33_ladder_2 = isnan(_2166) ? _1913 : (isnan(_1913) ? _2166 : min(_1913, _2166));
        }
        else
        {
            frontier_phi_34_33_ladder = _1915;
            frontier_phi_34_33_ladder_1 = _1914;
            frontier_phi_34_33_ladder_2 = _1913;
        }
        _1979 = frontier_phi_34_33_ladder_2;
        _1981 = frontier_phi_34_33_ladder_1;
        _1983 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1979 = _1913;
        _1981 = _1914;
        _1983 = _1915;
    }
    uvec4 _1988 = floatBitsToUint(cbInstanceData._m0[_230 + 5u]);
    uint _1990 = _1988.x * 14u;
    uint _1991 = _1990 + 13u;
    float _1998 = _690 + (-1.0);
    float _2003 = (cbLight._m0[_1991].x * _1998) + 1.0;
    float _2004 = (cbLight._m0[_1991].y * _1998) + 1.0;
    float _2005 = (cbLight._m0[_1991].z * _1998) + 1.0;
    float _2006 = (cbLight._m0[_1991].w * _1998) + 1.0;
    uint _2007 = _1990 + 5u;
    float _2013 = isnan(1.0) ? _2004 : (isnan(_2004) ? 1.0 : min(_2004, 1.0));
    uint _2017 = _1990 + 4u;
    float _2027 = isnan(1.0) ? _2003 : (isnan(_2003) ? 1.0 : min(_2003, 1.0));
    uint _2031 = _1990 | 1u;
    float _2042 = dot(vec3(cbLight._m0[_1990].xyz), vec3(_521, _522, _523));
    float _2045 = dot(vec3(cbLight._m0[_2031].xyz), vec3(_521, _522, _523));
    float _4227 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _4238 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2050 = (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * 0.3183098733425140380859375;
    float _2052 = (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * 0.3183098733425140380859375;
    float _2059 = ((cbLight._m0[_2007].x * _2013) * _2052) + (((cbLight._m0[_2017].x * _1979) * _2027) * _2050);
    float _2060 = ((_2013 * cbLight._m0[_2007].y) * _2052) + (((cbLight._m0[_2017].y * _1981) * _2027) * _2050);
    float _2061 = ((_2013 * cbLight._m0[_2007].z) * _2052) + (((cbLight._m0[_2017].z * _1983) * _2027) * _2050);
    uvec4 _2065 = floatBitsToUint(cbLight._m0[_1990 + 12u]);
    bool _2067 = _2065.x == 0u;
    float _2169;
    float _2171;
    float _2173;
    if (_2067)
    {
        _2169 = _2059;
        _2171 = _2060;
        _2173 = _2061;
    }
    else
    {
        uint _2177 = _1990 + 6u;
        float _2193 = (dot(vec3(cbLight._m0[_1990 + 2u].xyz), vec3(_521, _522, _523)) * 0.5) + 0.5;
        float _2194 = _2193 * _2193;
        float _4249 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
        float _2195 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _2196 = isnan(1.0) ? _2005 : (isnan(_2005) ? 1.0 : min(_2005, 1.0));
        _2169 = (((cbLight._m0[_2177].x * 0.3183098733425140380859375) * _2195) * _2196) + _2059;
        _2171 = (((cbLight._m0[_2177].y * 0.3183098733425140380859375) * _2195) * _2196) + _2060;
        _2173 = (((cbLight._m0[_2177].z * 0.3183098733425140380859375) * _2195) * _2196) + _2061;
    }
    bool _2176 = _2065.y == 0u;
    float _2231;
    float _2233;
    float _2235;
    if (_2176)
    {
        _2231 = _2169;
        _2233 = _2171;
        _2235 = _2173;
    }
    else
    {
        uint _2404 = _1990 + 7u;
        float _2420 = (dot(vec3(cbLight._m0[_1990 + 3u].xyz), vec3(_521, _522, _523)) * 0.5) + 0.5;
        float _2421 = _2420 * _2420;
        float _4265 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        float _2422 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _2423 = isnan(1.0) ? _2006 : (isnan(_2006) ? 1.0 : min(_2006, 1.0));
        _2231 = (((cbLight._m0[_2404].x * 0.3183098733425140380859375) * _2422) * _2423) + _2169;
        _2233 = (((cbLight._m0[_2404].y * 0.3183098733425140380859375) * _2422) * _2423) + _2171;
        _2235 = (((cbLight._m0[_2404].z * 0.3183098733425140380859375) * _2422) * _2423) + _2173;
    }
    uint _2238 = _1990 + 8u;
    float _2251 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1990].w)) * _524) * 0.949999988079071044921875);
    float _2252 = _2251 * _2251;
    float _2253 = cbLight._m0[_1990].x + _601;
    float _2254 = cbLight._m0[_1990].y + _602;
    float _2255 = cbLight._m0[_1990].z + _603;
    float _2259 = inversesqrt(dot(vec3(_2253, _2254, _2255), vec3(_2253, _2254, _2255)));
    float _2260 = _2259 * _2253;
    float _2261 = _2259 * _2254;
    float _2262 = _2259 * _2255;
    float _2263 = dot(vec3(_521, _522, _523), vec3(cbLight._m0[_1990].xyz));
    float _4281 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2266 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
    float _4292 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _2267 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
    float _2268 = dot(vec3(_521, _522, _523), vec3(_2260, _2261, _2262));
    float _4303 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2271 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
    float _2272 = dot(vec3(cbLight._m0[_1990].xyz), vec3(_2260, _2261, _2262));
    float _4314 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2276 = _2252 * _2252;
    float _2280 = ((_2271 * _2271) * (_2276 + (-1.0))) + 1.0;
    float _2288 = exp2(log2(1.0 - (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0)))) * 5.0);
    float _2289 = 0.959999978542327880859375 - _671;
    float _2291 = 0.959999978542327880859375 - _672;
    float _2292 = 0.959999978542327880859375 - _673;
    float _2299 = 1.0 - _2252;
    float _2310 = (0.5 / (((_2267 * ((_2266 * _2299) + _2252)) + 9.9999999392252902907785028219223e-09) + (((_2267 * _2299) + _2252) * _2266))) * _2266;
    float _4325 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2312 = (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * (_2276 / ((_2280 * _2280) * 3.141590118408203125));
    uint _2326 = _1990 + 9u;
    float _2337 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2031].w)) * _524) * 0.949999988079071044921875);
    float _2338 = _2337 * _2337;
    float _2339 = cbLight._m0[_2031].x + _601;
    float _2340 = cbLight._m0[_2031].y + _602;
    float _2341 = cbLight._m0[_2031].z + _603;
    float _2345 = inversesqrt(dot(vec3(_2339, _2340, _2341), vec3(_2339, _2340, _2341)));
    float _2346 = _2345 * _2339;
    float _2347 = _2345 * _2340;
    float _2348 = _2345 * _2341;
    float _2349 = dot(vec3(_521, _522, _523), vec3(cbLight._m0[_2031].xyz));
    float _4336 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
    float _2352 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
    float _2353 = dot(vec3(_521, _522, _523), vec3(_2346, _2347, _2348));
    float _4347 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _2356 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
    float _2357 = dot(vec3(cbLight._m0[_2031].xyz), vec3(_2346, _2347, _2348));
    float _4358 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2361 = _2338 * _2338;
    float _2365 = ((_2356 * _2356) * (_2361 + (-1.0))) + 1.0;
    float _2372 = exp2(log2(1.0 - (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0)))) * 5.0);
    float _2379 = 1.0 - _2338;
    float _2389 = (0.5 / (((_2267 * ((_2352 * _2379) + _2338)) + 9.9999999392252902907785028219223e-09) + (((_2267 * _2379) + _2338) * _2352))) * _2352;
    float _4369 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2391 = (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * (_2361 / ((_2365 * _2365) * 3.141590118408203125));
    float _2401 = (((((_2372 * _2289) + _674) * cbLight._m0[_2326].x) * _2391) * _2013) + ((((cbLight._m0[_2238].x * _1979) * ((_2288 * _2289) + _674)) * _2312) * _2027);
    float _2402 = (((((_2372 * _2291) + _676) * cbLight._m0[_2326].y) * _2391) * _2013) + ((((cbLight._m0[_2238].y * _1981) * ((_2288 * _2291) + _676)) * _2312) * _2027);
    float _2403 = (((((_2372 * _2292) + _677) * cbLight._m0[_2326].z) * _2391) * _2013) + ((((cbLight._m0[_2238].z * _1983) * ((_2288 * _2292) + _677)) * _2312) * _2027);
    float _2459;
    float _2461;
    float _2463;
    if (_2067)
    {
        _2459 = _2401;
        _2461 = _2402;
        _2463 = _2403;
    }
    else
    {
        uint _2465 = _1990 + 2u;
        uint _2469 = _1990 + 10u;
        float _2483 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2465].w)) * _524) * 0.949999988079071044921875);
        float _2484 = _2483 * _2483;
        float _2485 = cbLight._m0[_2465].x + _601;
        float _2486 = cbLight._m0[_2465].y + _602;
        float _2487 = cbLight._m0[_2465].z + _603;
        float _2491 = inversesqrt(dot(vec3(_2485, _2486, _2487), vec3(_2485, _2486, _2487)));
        float _2492 = _2491 * _2485;
        float _2493 = _2491 * _2486;
        float _2494 = _2491 * _2487;
        float _2495 = dot(vec3(_521, _522, _523), vec3(cbLight._m0[_2465].xyz));
        float _4380 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2498 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _2499 = dot(vec3(_521, _522, _523), vec3(_2492, _2493, _2494));
        float _4391 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2502 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _2503 = dot(vec3(cbLight._m0[_2465].xyz), vec3(_2492, _2493, _2494));
        float _4402 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2507 = _2484 * _2484;
        float _2511 = ((_2502 * _2502) * (_2507 + (-1.0))) + 1.0;
        float _2518 = exp2(log2(1.0 - (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0)))) * 5.0);
        float _2525 = 1.0 - _2484;
        float _2535 = (0.5 / (((_2267 * ((_2498 * _2525) + _2484)) + 9.9999999392252902907785028219223e-09) + (((_2267 * _2525) + _2484) * _2498))) * _2498;
        float _4413 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2537 = (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * (_2507 / ((_2511 * _2511) * 3.141590118408203125));
        float _2538 = isnan(1.0) ? _2005 : (isnan(_2005) ? 1.0 : min(_2005, 1.0));
        _2459 = (((((_2518 * _2289) + _674) * cbLight._m0[_2469].x) * _2537) * _2538) + _2401;
        _2461 = (((((_2518 * _2291) + _676) * cbLight._m0[_2469].y) * _2537) * _2538) + _2402;
        _2463 = (((((_2518 * _2292) + _677) * cbLight._m0[_2469].z) * _2537) * _2538) + _2403;
    }
    float _2569;
    float _2571;
    float _2573;
    if (_2176)
    {
        _2569 = _2459;
        _2571 = _2461;
        _2573 = _2463;
    }
    else
    {
        uint _2580 = _1990 + 3u;
        uint _2584 = _1990 + 11u;
        float _2598 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2580].w)) * _524) * 0.949999988079071044921875);
        float _2599 = _2598 * _2598;
        float _2600 = cbLight._m0[_2580].x + _601;
        float _2601 = cbLight._m0[_2580].y + _602;
        float _2602 = cbLight._m0[_2580].z + _603;
        float _2606 = inversesqrt(dot(vec3(_2600, _2601, _2602), vec3(_2600, _2601, _2602)));
        float _2607 = _2606 * _2600;
        float _2608 = _2606 * _2601;
        float _2609 = _2606 * _2602;
        float _2610 = dot(vec3(_521, _522, _523), vec3(cbLight._m0[_2580].xyz));
        float _4429 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
        float _2613 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
        float _2614 = dot(vec3(_521, _522, _523), vec3(_2607, _2608, _2609));
        float _4440 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
        float _2617 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
        float _2618 = dot(vec3(cbLight._m0[_2580].xyz), vec3(_2607, _2608, _2609));
        float _4451 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        float _2622 = _2599 * _2599;
        float _2626 = ((_2617 * _2617) * (_2622 + (-1.0))) + 1.0;
        float _2633 = exp2(log2(1.0 - (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0)))) * 5.0);
        float _2640 = 1.0 - _2599;
        float _2650 = (0.5 / (((_2267 * ((_2613 * _2640) + _2599)) + 9.9999999392252902907785028219223e-09) + (((_2267 * _2640) + _2599) * _2613))) * _2613;
        float _4462 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        float _2652 = (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (_2622 / ((_2626 * _2626) * 3.141590118408203125));
        float _2653 = isnan(1.0) ? _2006 : (isnan(_2006) ? 1.0 : min(_2006, 1.0));
        _2569 = (((((_2633 * _2289) + _674) * cbLight._m0[_2584].x) * _2652) * _2653) + _2459;
        _2571 = (((((_2633 * _2291) + _676) * cbLight._m0[_2584].y) * _2652) * _2653) + _2461;
        _2573 = (((((_2633 * _2292) + _677) * cbLight._m0[_2584].z) * _2652) * _2653) + _2463;
    }
    float _2719;
    float _2721;
    float _2723;
    float _2725;
    float _2727;
    float _2729;
    if (_1988.y == 0u)
    {
        uvec4 _2674 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2675 = _2674.x;
        uint _2686 = uint((float(_2674.y) * floor(float(uint(cbSceneParam._m0[85u].y * _610) / _2675))) + floor(float(uint(cbSceneParam._m0[85u].x * _609) / _2675)));
        float _2696 = (log2(_1766 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2697 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        uint _2700 = uint(isnan(14.0) ? _2697 : (isnan(_2697) ? 14.0 : min(_2697, 14.0)));
        uvec4 _2705 = texelFetch(g_lightClusterGridBuffer, int(((_2700 << 2u) + (_2686 << 6u)) >> 2u));
        uint _2706 = _2705.x;
        uint _2707 = _2674.z;
        float _2786;
        float _2788;
        float _2790;
        float _2792;
        float _2794;
        float _2796;
        if (((((1u << ((_2707 >> 4u) & 15u)) + 4294967295u) & _2706) == 0u) || ((_2707 & 240u) == 0u))
        {
            _2786 = 0.0;
            _2788 = 0.0;
            _2790 = 0.0;
            _2792 = 0.0;
            _2794 = 0.0;
            _2796 = 0.0;
        }
        else
        {
            float _2787;
            float _2789;
            float _2791;
            float _2793;
            float _2795;
            float _2797;
            float _2931 = 0.0;
            float _2932 = 0.0;
            float _2933 = 0.0;
            float _2934 = 0.0;
            float _2935 = 0.0;
            float _2936 = 0.0;
            uint _2937 = 0u;
            uint _2946;
            bool _2947;
            for (;;)
            {
                _2946 = texelFetch(g_lightClassification, int((((_2700 << 5u) + (_2686 << 9u)) + (_2937 << 2u)) >> 2u)).x;
                _2947 = _2946 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2947)
                {
                    frontier_phi_66_pred = _2936;
                    frontier_phi_66_pred_1 = _2935;
                    frontier_phi_66_pred_2 = _2934;
                    frontier_phi_66_pred_3 = _2933;
                    frontier_phi_66_pred_4 = _2932;
                    frontier_phi_66_pred_5 = _2931;
                }
                else
                {
                    float _3055;
                    float _3056;
                    float _3057;
                    float _3058;
                    float _3059;
                    float _3060;
                    uint _3061;
                    _3055 = _2931;
                    _3056 = _2932;
                    _3057 = _2933;
                    _3058 = _2934;
                    _3059 = _2935;
                    _3060 = _2936;
                    _3061 = _2946;
                    float _2987;
                    float _2988;
                    float _2989;
                    float _2990;
                    float _2991;
                    float _2992;
                    for (;;)
                    {
                        uint _3065 = uint(findLSB(_3061)) + (_2937 << 5u);
                        uint _3062 = (_3061 + 4294967295u) & _3061;
                        uint _3067 = _3065 * 48u;
                        vec4 _3081 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3067)).x, texelFetch(g_PointLightRenderingBuffer, int(_3067 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3067 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3067 + 3u)).x));
                        uint _3087 = (_3065 * 48u) + 4u;
                        vec4 _3100 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3087)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 3u)).x));
                        uint _3106 = (_3065 * 48u) + 8u;
                        vec3 _3117 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3106)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 2u)).x));
                        float _3121 = _3081.x - _1764;
                        float _3122 = _3081.y - _1765;
                        float _3123 = _3081.z - _1766;
                        float _3124 = dot(vec3(_3121, _3122, _3123), vec3(_3121, _3122, _3123));
                        float _3127 = inversesqrt(_3124);
                        float _3128 = _3127 * _3121;
                        float _3129 = _3127 * _3122;
                        float _3130 = _3127 * _3123;
                        float _3131 = dot(vec3(_631, _634, _637), vec3(_3128, _3129, _3130));
                        float _3136 = 1.0 - (_3124 * _3081.w);
                        float _4488 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                        float _3137 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
                        float _3138 = sqrt(_3124) * _3100.w;
                        float _3141 = 1.39999997615814208984375 / (_3138 + 1.39999997615814208984375);
                        float _3142 = _3141 * _3141;
                        float _3145 = ((1.0 - _3142) * _3131) + _3142;
                        float _3148 = _3138 * _3138;
                        float _3152 = ((isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0))) * _3137) / ((_3148 * 0.699999988079071044921875) + 1.0);
                        float _3156 = (-0.0) - _1764;
                        float _3157 = (-0.0) - _1765;
                        float _3158 = (-0.0) - _1766;
                        float _3162 = inversesqrt(dot(vec3(_3156, _3157, _3158), vec3(_3156, _3157, _3158)));
                        float _3163 = _3162 * _3156;
                        float _3164 = _3162 * _3157;
                        float _3165 = _3162 * _3158;
                        float _3172 = exp2(log2(1.0 / ((_3148 * 3.5) + 5.0)) * 0.25);
                        float _3173 = 1.0 - _706;
                        float _3180 = sqrt(1.0 - ((1.0 - (_3173 * _3173)) * (1.0 - (_3172 * _3172))));
                        float _3181 = _3180 * _3180;
                        float _3182 = _3181 * _3181;
                        float _3183 = _3163 + _3128;
                        float _3184 = _3164 + _3129;
                        float _3185 = _3165 + _3130;
                        float _3189 = inversesqrt(dot(vec3(_3183, _3184, _3185), vec3(_3183, _3184, _3185)));
                        float _3193 = dot(vec3(_631, _634, _637), vec3(_3163, _3164, _3165));
                        float _4504 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                        float _3196 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
                        float _3197 = dot(vec3(_631, _634, _637), vec3(_3189 * _3183, _3189 * _3184, _3189 * _3185));
                        float _4515 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                        float _3200 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
                        float _3204 = ((_3200 * _3200) * (_3182 + (-1.0))) + 1.0;
                        float _3205 = _3141 * _3181;
                        float _3206 = _3205 * _3205;
                        float _3209 = ((1.0 - _3206) * _3131) + _3206;
                        float _4526 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                        float _3210 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
                        float _3211 = 1.0 - _3181;
                        float _3221 = (0.5 / (((_3210 * ((_3196 * _3211) + _3181)) + 9.9999999392252902907785028219223e-09) + (((_3210 * _3211) + _3181) * _3196))) * _3210;
                        float _4537 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                        float _3232 = (((_3182 * 3.1415927410125732421875) * (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0)))) / ((_3204 * _3204) * ((_3148 * 2.1991131305694580078125) + 3.141590118408203125))) * _3137;
                        _2990 = (_3152 * _3100.x) + _3058;
                        _2991 = (_3152 * _3100.y) + _3059;
                        _2992 = (_3152 * _3100.z) + _3060;
                        _2987 = (_3232 * _3117.x) + _3055;
                        _2988 = (_3232 * _3117.y) + _3056;
                        _2989 = (_3232 * _3117.z) + _3057;
                        if (_3062 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3055 = _2987;
                            _3056 = _2988;
                            _3057 = _2989;
                            _3058 = _2990;
                            _3059 = _2991;
                            _3060 = _2992;
                            _3061 = _3062;
                        }
                    }
                    frontier_phi_66_pred = _2992;
                    frontier_phi_66_pred_1 = _2991;
                    frontier_phi_66_pred_2 = _2990;
                    frontier_phi_66_pred_3 = _2989;
                    frontier_phi_66_pred_4 = _2988;
                    frontier_phi_66_pred_5 = _2987;
                }
                _2797 = frontier_phi_66_pred;
                _2795 = frontier_phi_66_pred_1;
                _2793 = frontier_phi_66_pred_2;
                _2791 = frontier_phi_66_pred_3;
                _2789 = frontier_phi_66_pred_4;
                _2787 = frontier_phi_66_pred_5;
                uint _2938 = _2937 + 1u;
                if (_2938 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2931 = _2787;
                    _2932 = _2789;
                    _2933 = _2791;
                    _2934 = _2793;
                    _2935 = _2795;
                    _2936 = _2797;
                    _2937 = _2938;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2786 = _2787;
            _2788 = _2789;
            _2790 = _2791;
            _2792 = _2793;
            _2794 = _2795;
            _2796 = _2797;
        }
        uvec4 _2800 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2801 = _2800.z;
        uint _2803 = (_2801 >> 8u) & 15u;
        float _2899;
        float _2901;
        float _2903;
        float _2905;
        float _2907;
        float _2909;
        if (((4294967295u << _2803) & _2706) == 0u)
        {
            _2899 = _2786;
            _2901 = _2788;
            _2903 = _2790;
            _2905 = _2792;
            _2907 = _2794;
            _2909 = _2796;
        }
        else
        {
            float _2924 = inversesqrt(dot(vec3(_1764, _1765, _1766), vec3(_1764, _1765, _1766)));
            float _2925 = _2924 * _1764;
            float _2926 = _2924 * _1765;
            float _2927 = _2924 * _1766;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2803 < ((_2801 >> 12u) & 15u))
            {
                float _2900;
                float _2902;
                float _2904;
                float _2906;
                float _2908;
                float _2910;
                float _3038 = _2786;
                float _3039 = _2788;
                float _3040 = _2790;
                float _3041 = _2792;
                float _3042 = _2794;
                float _3043 = _2796;
                uint _3044 = _2803;
                uint _3053;
                bool _3054;
                for (;;)
                {
                    _3053 = texelFetch(g_lightClassification, int((((_2700 << 5u) + (_2686 << 9u)) + (_3044 << 2u)) >> 2u)).x;
                    _3054 = _3053 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3054)
                    {
                        frontier_phi_72_pred = _3043;
                        frontier_phi_72_pred_1 = _3042;
                        frontier_phi_72_pred_2 = _3041;
                        frontier_phi_72_pred_3 = _3040;
                        frontier_phi_72_pred_4 = _3039;
                        frontier_phi_72_pred_5 = _3038;
                    }
                    else
                    {
                        float _3237;
                        float _3238;
                        float _3239;
                        float _3240;
                        float _3241;
                        float _3242;
                        float _3531;
                        float _3532;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3536;
                        float _3250 = _3038;
                        float _3251 = _3039;
                        float _3252 = _3040;
                        float _3253 = _3041;
                        float _3254 = _3042;
                        float _3255 = _3043;
                        uint _3256 = _3053;
                        uint _3257;
                        vec4 _3282;
                        float _3283;
                        vec4 _3298;
                        vec3 _3310;
                        vec4 _3326;
                        vec4 _3341;
                        float _3387;
                        bool _3388;
                        for (;;)
                        {
                            uint _3267 = ((_3044 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3256));
                            _3257 = (_3256 + 4294967295u) & _3256;
                            uint _3269 = _3267 * 40u;
                            _3282 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3269)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 3u)).x));
                            _3283 = _3282.w;
                            uint _3285 = (_3267 * 40u) + 4u;
                            _3298 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3285)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 3u)).x));
                            uint _3300 = (_3267 * 40u) + 8u;
                            _3310 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3300)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 2u)).x));
                            uint _3313 = (_3267 * 40u) + 16u;
                            _3326 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3313)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 3u)).x));
                            uint _3328 = (_3267 * 40u) + 20u;
                            _3341 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3328)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 3u)).x));
                            uint _3343 = (_3267 * 40u) + 24u;
                            vec4 _3356 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 3u)).x));
                            uint _3362 = (_3267 * 40u) + 28u;
                            vec4 _3375 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3362)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 3u)).x));
                            _3387 = fma(_1766, _3375.z, fma(_1765, _3375.y, _3375.x * _1764)) + _3375.w;
                            _3388 = !((fma(_1766, _3356.z, fma(_1765, _3356.y, _3356.x * _1764)) + _3356.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3388)
                            {
                                float _3415 = _3282.x - _1764;
                                float _3416 = _3282.y - _1765;
                                float _3417 = _3282.z - _1766;
                                float _3418 = dot(vec3(_3415, _3416, _3417), vec3(_3415, _3416, _3417));
                                float _3421 = inversesqrt(_3418);
                                float _3422 = _3421 * _3415;
                                float _3423 = _3421 * _3416;
                                float _3424 = _3421 * _3417;
                                float _3428 = 1.0 - (_3418 / (_3283 * _3283));
                                float _4548 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                                float _3429 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
                                float _3433 = sqrt(_3418) * _3298.w;
                                float _3435 = 1.39999997615814208984375 / (_3433 + 1.39999997615814208984375);
                                float _3436 = _3435 * _3435;
                                float _3439 = ((1.0 - _3436) * dot(vec3(_3422, _3423, _3424), vec3(_631, _634, _637))) + _3436;
                                float _3442 = _3433 * _3433;
                                float _3446 = (fma(_1766, _3326.z, fma(_1765, _3326.y, _3326.x * _1764)) + _3326.w) / _3387;
                                float _3447 = (fma(_1766, _3341.z, fma(_1765, _3341.y, _3341.x * _1764)) + _3341.w) / _3387;
                                float _3451 = 1.0 - dot(vec2(_3446, _3447), vec2(_3446, _3447));
                                float _4564 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                                float _3452 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
                                float _3453 = _3452 * (((isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0))) * _3429) / ((_3442 * 0.699999988079071044921875) + 1.0));
                                float _3465 = exp2(log2(1.0 / ((_3442 * 3.5) + 5.0)) * 0.25);
                                float _3466 = 1.0 - _706;
                                float _3473 = sqrt(1.0 - ((1.0 - (_3466 * _3466)) * (1.0 - (_3465 * _3465))));
                                float _3474 = _3473 * _3473;
                                float _3475 = _3474 * _3474;
                                float _3476 = _3422 - _2925;
                                float _3477 = _3423 - _2926;
                                float _3478 = _3424 - _2927;
                                float _3482 = inversesqrt(dot(vec3(_3476, _3477, _3478), vec3(_3476, _3477, _3478)));
                                float _3486 = dot(vec3(_631, _634, _637), vec3((-0.0) - _2925, (-0.0) - _2926, (-0.0) - _2927));
                                float _4575 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                                float _3489 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
                                float _3490 = dot(vec3(_631, _634, _637), vec3(_3482 * _3476, _3482 * _3477, _3482 * _3478));
                                float _4586 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                                float _3493 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
                                float _3497 = ((_3493 * _3493) * (_3475 + (-1.0))) + 1.0;
                                float _3498 = _3435 * _3474;
                                float _3499 = _3498 * _3498;
                                float _3505 = ((1.0 - _3499) * dot(vec3(_631, _634, _637), vec3(_3422, _3423, _3424))) + _3499;
                                float _4597 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                                float _3506 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
                                float _3507 = 1.0 - _3474;
                                float _3517 = (0.5 / (((_3506 * ((_3489 * _3507) + _3474)) + 9.9999999392252902907785028219223e-09) + (((_3506 * _3507) + _3474) * _3489))) * _3506;
                                float _4608 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                                float _3527 = (_3452 * _3429) * (((_3475 * 3.1415927410125732421875) * (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0)))) / ((_3497 * _3497) * ((_3442 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3453 * _3298.y;
                                frontier_phi_78_pred_1 = _3453 * _3298.x;
                                frontier_phi_78_pred_2 = _3527 * _3310.z;
                                frontier_phi_78_pred_3 = _3527 * _3310.y;
                                frontier_phi_78_pred_4 = _3527 * _3310.x;
                                frontier_phi_78_pred_5 = _3453 * _3298.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3535 = frontier_phi_78_pred;
                            _3534 = frontier_phi_78_pred_1;
                            _3533 = frontier_phi_78_pred_2;
                            _3532 = frontier_phi_78_pred_3;
                            _3531 = frontier_phi_78_pred_4;
                            _3536 = frontier_phi_78_pred_5;
                            _3240 = _3534 + _3253;
                            _3241 = _3535 + _3254;
                            _3242 = _3536 + _3255;
                            _3237 = _3531 + _3250;
                            _3238 = _3532 + _3251;
                            _3239 = _3533 + _3252;
                            if (_3257 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3250 = _3237;
                                _3251 = _3238;
                                _3252 = _3239;
                                _3253 = _3240;
                                _3254 = _3241;
                                _3255 = _3242;
                                _3256 = _3257;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3242;
                        frontier_phi_72_pred_1 = _3241;
                        frontier_phi_72_pred_2 = _3240;
                        frontier_phi_72_pred_3 = _3239;
                        frontier_phi_72_pred_4 = _3238;
                        frontier_phi_72_pred_5 = _3237;
                    }
                    _2910 = frontier_phi_72_pred;
                    _2908 = frontier_phi_72_pred_1;
                    _2906 = frontier_phi_72_pred_2;
                    _2904 = frontier_phi_72_pred_3;
                    _2902 = frontier_phi_72_pred_4;
                    _2900 = frontier_phi_72_pred_5;
                    uint _3045 = _3044 + 1u;
                    if (_3045 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3038 = _2900;
                        _3039 = _2902;
                        _3040 = _2904;
                        _3041 = _2906;
                        _3042 = _2908;
                        _3043 = _2910;
                        _3044 = _3045;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2910;
                frontier_phi_60_61_ladder_1 = _2908;
                frontier_phi_60_61_ladder_2 = _2904;
                frontier_phi_60_61_ladder_3 = _2902;
                frontier_phi_60_61_ladder_4 = _2900;
                frontier_phi_60_61_ladder_5 = _2906;
            }
            else
            {
                frontier_phi_60_61_ladder = _2796;
                frontier_phi_60_61_ladder_1 = _2794;
                frontier_phi_60_61_ladder_2 = _2790;
                frontier_phi_60_61_ladder_3 = _2788;
                frontier_phi_60_61_ladder_4 = _2786;
                frontier_phi_60_61_ladder_5 = _2792;
            }
            _2899 = frontier_phi_60_61_ladder_4;
            _2901 = frontier_phi_60_61_ladder_3;
            _2903 = frontier_phi_60_61_ladder_2;
            _2905 = frontier_phi_60_61_ladder_5;
            _2907 = frontier_phi_60_61_ladder_1;
            _2909 = frontier_phi_60_61_ladder;
        }
        float _2914 = isnan(1.0) ? _690 : (isnan(_690) ? 1.0 : min(_690, 1.0));
        _2719 = (_2914 * _2905) + _2231;
        _2721 = (_2914 * _2907) + _2233;
        _2723 = (_2914 * _2909) + _2235;
        _2725 = ((_2899 * _674) * _2914) + _2569;
        _2727 = ((_2901 * _676) * _2914) + _2571;
        _2729 = ((_2903 * _677) * _2914) + _2573;
    }
    else
    {
        _2719 = _2231;
        _2721 = _2233;
        _2723 = _2235;
        _2725 = _2569;
        _2727 = _2571;
        _2729 = _2573;
    }
    float _4624 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _4635 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _4646 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    uint _2749 = _230 + 6u;
    float _2757 = _609 / cbSceneParam._m0[86u].x;
    float _2758 = _610 / cbSceneParam._m0[86u].y;
    vec4 _2772 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2757, _2758, (log2((isnan(cbSceneParam._m0[77u].w) ? _543 : (isnan(_543) ? cbSceneParam._m0[77u].w : min(_543, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2774 = _2772.x;
    float _2775 = _2772.y;
    float _2776 = _2772.z;
    float _2777 = _2772.w;
    float _2849;
    float _2851;
    float _2853;
    float _2855;
    if (_543 > cbSceneParam._m0[78u].w)
    {
        float _2811 = isnan(_543) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _543 : min(cbSceneParam._m0[80u].w, _543));
        float _2812 = _2811 / _543;
        float _2823 = _2812 * _594;
        float _2824 = _595 * _2812;
        float _2825 = (-0.0) - _2824;
        float _2827 = _2812 * _596;
        float _2829 = (cbSceneParam._m0[77u].w * _2825) / _2811;
        float _2830 = _2829 + cbSceneParam._m0[79u].w;
        float _2831 = cbSceneParam._m0[79u].w - _2824;
        float _2837 = sqrt(((_2823 * _2823) + (_2824 * _2824)) + (_2827 * _2827));
        float _2840 = (1.0 - (cbSceneParam._m0[77u].w / _2811)) * _2837;
        float _2845 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2847 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3000;
        if (abs((_2825 - _2829) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3000 = ((((_2830 > 0.0) ? exp2(_2845 * _2830) : (2.0 - exp2(_2847 * _2830))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2840;
        }
        else
        {
            float _2960 = 1.0 / cbSceneParam._m0[80u].x;
            float _2961 = isnan(_2831) ? _2830 : (isnan(_2830) ? _2831 : max(_2830, _2831));
            float _2962 = isnan(_2831) ? _2830 : (isnan(_2830) ? _2831 : min(_2830, _2831));
            float _2971 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : min(_2961, 0.0));
            float _2972 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : min(_2962, 0.0));
            _3000 = ((abs(_2837 / _2825) * cbSceneParam._m0[80u].y) * ((((_2971 - _2972) * 2.0) - ((exp2(_2845 * (isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0)))) - exp2(_2845 * (isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0))))) * _2960)) - ((exp2(_2847 * _2971) - exp2(_2847 * _2972)) * _2960))) + (_2840 * cbSceneParam._m0[80u].z);
        }
        vec4 _3002 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2757, _2758, 1.0), 0.0);
        float _3011 = exp2((_3000 * (-1.44269502162933349609375)) * (1.0 - _3002.w));
        float _3012 = log2(_3011);
        float _3028 = log2(_2777);
        _2849 = (exp2(_3028 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3012 * cbSceneParam._m0[78u].x)) * _3002.x) / cbSceneParam._m0[78u].x)) + _2774;
        _2851 = (exp2(_3028 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3012 * cbSceneParam._m0[78u].y)) * _3002.y) / cbSceneParam._m0[78u].y)) + _2775;
        _2853 = (exp2(_3028 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3012 * cbSceneParam._m0[78u].z)) * _3002.z) / cbSceneParam._m0[78u].z)) + _2776;
        _2855 = _3011 * _2777;
    }
    else
    {
        _2849 = _2774;
        _2851 = _2775;
        _2853 = _2776;
        _2855 = _2777;
    }
    float _2867 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2868 = _2867 == 3.0;
    float _2869 = log2(_2855);
    float _2876 = exp2(_2869 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * (_2719 + ((isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0))) * _690))) + ((_2725 + ((isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))) * _1498)) * cbPerFrame._m0[3u].x));
    float _2877 = exp2(_2869 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0))) * (_2721 + ((isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0))) * _690))) + ((_2727 + ((isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))) * _1498)) * cbPerFrame._m0[3u].x));
    float _2878 = exp2(_2869 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0))) * (_2723 + ((isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0))) * _690))) + ((_2729 + ((isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))) * _1498)) * cbPerFrame._m0[3u].x));
    float _2887 = (_2867 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2887 * (_2868 ? _2876 : (_2876 + (cbSceneParam._m0[72u].w * _2849)));
    SV_Target.y = _2887 * (_2868 ? _2877 : (_2877 + (cbSceneParam._m0[72u].w * _2851)));
    SV_Target.z = _2887 * (_2868 ? _2878 : (_2878 + (cbSceneParam._m0[72u].w * _2853)));
    SV_Target.w = cbInstanceData._m0[_2749].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2749].w;
}


