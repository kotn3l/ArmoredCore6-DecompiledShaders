#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1458;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _243 = _242 * _234;
    float _244 = _242 * _235;
    float _245 = _242 * _236;
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = _249 * NORMAL.x;
    float _251 = _249 * NORMAL.y;
    float _252 = _249 * NORMAL.z;
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = _256 * TANGENT.x;
    float _258 = _256 * TANGENT.y;
    float _259 = _256 * TANGENT.z;
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3782 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3793 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3804 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    uint _281 = uint(roundEven(NORMAL.w)) * 13u;
    uint _286 = _281 + 1u;
    uint _290 = _281 + 2u;
    float _299 = sqrt(((cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x)) + (cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x));
    float _300 = _299 * TEXCOORD.z;
    float _301 = _299 * TEXCOORD.w;
    vec4 _314 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _300) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _301) + cbTextureTilingScale._m0[13u].w));
    vec4 _338 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _343 = _338.x * cbMtdParam._m0[11u].x;
    float _344 = _338.y * cbMtdParam._m0[11u].y;
    float _345 = _338.z * cbMtdParam._m0[11u].z;
    vec4 _364 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _300) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _301) + cbTextureTilingScale._m0[5u].w));
    vec4 _400 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _402 = _400.x;
    float _414 = dot(vec4(_402, _400.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _431 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_402 - _414) * cbMtdParam._m0[24u].y) + _414) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3815 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _432 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    float _439 = (_432 * ((_364.x * cbMtdParam._m0[12u].x) - _343)) + _343;
    float _440 = (_432 * ((_364.y * cbMtdParam._m0[12u].y) - _344)) + _344;
    float _441 = (_432 * ((_364.z * cbMtdParam._m0[12u].z) - _345)) + _345;
    float _445 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _314.x) * _439;
    float _448 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _314.y) * _440;
    float _451 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _314.z) * _441;
    float _458 = ((_439 - _445) * (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0)))) + _445;
    float _459 = ((_440 - _448) * (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0)))) + _448;
    float _460 = ((_441 - _451) * (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0)))) + _451;
    vec4 _479 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _300) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _301) + cbTextureTilingScale._m0[14u].w));
    vec4 _499 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _300) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _301) + cbTextureTilingScale._m0[20u].w));
    vec4 _526 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _300) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _301) + cbTextureTilingScale._m0[4u].w));
    vec4 _543 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _545 = _543.x;
    float _546 = _543.y;
    float _547 = _543.z;
    float _556 = ((_526.z - _547) * _432) + _547;
    float _559 = ((((_526.x - _545) * _432) + _545) * 2.0) + (-1.0);
    float _560 = ((((_526.y - _546) * _432) + _546) * 2.0) + (-1.0);
    float _561 = dot(vec2(_559, _560), vec2(_559, _560));
    float _3826 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _566 = sqrt(1.0 - (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))));
    vec4 _586 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _598 = (_559 + ((((_499.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_586.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _599 = (_560 + ((((_499.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_586.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _602 = fma(_566, _250, fma(_599, _257, _598 * _243));
    float _605 = fma(_566, _251, fma(_599, _258, _598 * _244));
    float _608 = fma(_566, _252, fma(_599, _259, _598 * _245));
    float _612 = inversesqrt(dot(vec3(_602, _605, _608), vec3(_602, _605, _608)));
    vec4 _639 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _300) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _301) + cbTextureTilingScale._m0[11u].w));
    float _641 = _639.x;
    float _642 = 1.0 - _641;
    float _646 = ((_641 - _642) * cbMtdParam._m0[24u].z) + _642;
    float _648 = (cbMtdParam._m0[19u].x + dot(vec4(_612 * _602, _612 * _605, _612 * _608, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_646 * cbMtdParam._m0[21u].z);
    float _3837 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _649 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _651 = (-0.0) - cbMtdParam._m0[24u].x;
    float _653 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _654 = isnan(1.0) ? _653 : (isnan(_653) ? 1.0 : min(_653, 1.0));
    float _661 = _649 - ((_649 * TEXCOORD_8.x) * _654);
    float _662 = _649 - ((_649 * TEXCOORD_8.y) * _654);
    float _663 = _649 - ((_649 * TEXCOORD_8.z) * _654);
    float _670 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _674 = ((isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : min(_670, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _682 = (_674 - (((_646 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _674))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3868 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _683 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    float _687 = ((_661 * ((_479.x * cbMtdParam._m0[18u].x) - _458)) * _683) + _458;
    float _688 = ((_662 * ((_479.y * cbMtdParam._m0[18u].y) - _459)) * _683) + _459;
    float _689 = ((_663 * ((_479.z * cbMtdParam._m0[18u].z) - _460)) * _683) + _460;
    vec4 _701 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _300) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _301) + cbTextureTilingScale._m0[19u].w));
    float _703 = _701.x;
    float _704 = 1.0 - _703;
    float _729 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_703 - _704) * cbMtdParam._m0[24u].w) + _704) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3879 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _730 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    float _738 = ((((cbMtdParam._m0[10u].x - _687) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _730) + _687;
    float _739 = ((((cbMtdParam._m0[10u].y - _688) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _730) + _688;
    float _740 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _689)) * _730) + _689;
    vec4 _766 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _768 = _766.x;
    float _786 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _300) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _301) + cbTextureTilingScale._m0[9u].w)).x - _768) * _432) + _768;
    float _790 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _786) * cbMtdParam._m0[19u].z) + _786;
    float _793 = _790 - ((_683 * _661) * _790);
    float _795 = _793 - (_793 * _730);
    float _800 = (((_499.z - _556) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _556;
    float _804 = ((_586.z - _800) * cbMtdParam._m0[19u].w) + _800;
    vec4 _818 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _300) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _301) + cbTextureTilingScale._m0[15u].w));
    float _825 = (_818.x * 2.0) + (-1.0);
    float _826 = (_818.y * 2.0) + (-1.0);
    float _827 = dot(vec2(_825, _826), vec2(_825, _826));
    float _3890 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _836 = (((_818.z - _804) * _661) * _683) + _804;
    float _839 = ((cbMtdParam._m0[23u].y - _836) * _730) + _836;
    vec4 _860 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _300) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _301) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _866 = (_860.x * 2.0) + (-1.0);
    float _867 = (_860.y * 2.0) + (-1.0);
    float _868 = dot(vec2(_866, _867), vec2(_866, _867));
    float _3901 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _888 = (((cbMtdParam._m0[21u].x * _598) + ((_825 - _598) * _661)) * _683) + _598;
    float _889 = (((cbMtdParam._m0[21u].x * _599) + ((_826 - _599) * _662)) * _683) + _599;
    float _890 = (((sqrt(1.0 - (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0)))) - _566) * _663) * _683) + _566;
    float _901 = (((_866 - _888) + (_888 * cbMtdParam._m0[22u].z)) * _730) + _888;
    float _902 = (((_867 - _889) + (_889 * cbMtdParam._m0[22u].z)) * _730) + _889;
    float _903 = ((sqrt(1.0 - (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) - _890) * _730) + _890;
    float _905 = cbMtdParam._m0[22u].x + _586.w;
    float _908 = fma(_903, _250, fma(_902, _257, _901 * _243));
    float _911 = fma(_903, _251, fma(_902, _258, _901 * _244));
    float _914 = fma(_903, _252, fma(_902, _259, _901 * _245));
    float _918 = inversesqrt(dot(vec3(_908, _911, _914), vec3(_908, _911, _914)));
    float _919 = _918 * _908;
    float _920 = _918 * _911;
    float _921 = _918 * _914;
    float _3912 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _922 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _3923 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _3934 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _3945 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _3956 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _3967 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _927 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _941 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _981 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _991 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _981);
    float _992 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _981);
    float _993 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _981);
    float _997 = inversesqrt(dot(vec3(_991, _992, _993), vec3(_991, _992, _993)));
    float _998 = _991 * _997;
    float _999 = _992 * _997;
    float _1000 = _993 * _997;
    float _1006 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1007 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1025 = fma(_921, cbSceneParam._m0[5u].z, fma(_920, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _919));
    float _1028 = fma(_921, cbSceneParam._m0[6u].z, fma(_920, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _919));
    float _1031 = fma(_921, cbSceneParam._m0[7u].z, fma(_920, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _919));
    uint _1045 = (_281 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1051 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0)))) * cbInstanceData._m0[_1045].x;
    float _1052 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0)))) * cbInstanceData._m0[_1045].y;
    float _1053 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0)))) * cbInstanceData._m0[_1045].z;
    float _3978 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
    float _1054 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _3989 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _1055 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _4000 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
    float _1056 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _1057 = 1.0 - _927;
    float _1058 = _1054 * _1057;
    float _1059 = _1055 * _1057;
    float _1060 = _1056 * _1057;
    float _1065 = (_1054 + (-0.039999999105930328369140625)) * _927;
    float _1066 = (_1055 + (-0.039999999105930328369140625)) * _927;
    float _1067 = (_1056 + (-0.039999999105930328369140625)) * _927;
    float _1068 = _1065 + 0.039999999105930328369140625;
    float _1070 = _1066 + 0.039999999105930328369140625;
    float _1071 = _1067 + 0.039999999105930328369140625;
    vec4 _1080 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1006, cbSceneParam._m0[86u].y * _1007));
    float _1084 = ((isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * TEXCOORD_5.w) * _1080.x;
    float _1085 = dot(vec3(_919, _920, _921), vec3(_998, _999, _1000));
    float _1088 = _1085 * 2.0;
    float _1092 = (_1088 * _919) - _998;
    float _1093 = (_1088 * _920) - _999;
    float _1094 = (_1088 * _921) - _1000;
    float _1098 = abs(dot(vec3(_998, _999, _1000), vec3(_919, _920, _921)));
    float _4011 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
    float _1100 = sqrt(_922);
    float _1113 = exp2((_1100 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1100 * 3.0));
    float _1119 = (1.0 - _1113) * ((_1100 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1120 = _1113 * _1100;
    float _1148 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1152 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1156 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1457;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1182 = fma(_1156, cbModelParam._m0[26u].z, fma(_1152, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1148));
        float _1186 = fma(_1156, cbModelParam._m0[27u].z, fma(_1152, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1148));
        float _1190 = fma(_1156, cbModelParam._m0[28u].z, fma(_1152, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1148));
        float _1215 = _1148 + _919;
        float _1216 = _1152 + _920;
        float _1217 = _1156 + _921;
        float _1227 = fma(_1217, cbModelParam._m0[26u].z, fma(_1216, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1215)) - _1182;
        float _1228 = fma(_1217, cbModelParam._m0[27u].z, fma(_1216, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1215)) - _1186;
        float _1229 = fma(_1217, cbModelParam._m0[28u].z, fma(_1216, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1215)) - _1190;
        float _1233 = inversesqrt(dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229)));
        float _1246 = ((_1233 * _1227) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1182 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1247 = ((_1233 * _1228) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1186 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1248 = ((_1233 * _1229) / cbModelParam._m0[34u].z) + ((((((_1190 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1246, _1247, _1248), 0.0);
        vec4 _1258 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1246, _1247, _1248), 0.0);
        vec4 _1265 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1246, _1247, _1248), 0.0);
        vec4 _1272 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1246, _1247, _1248), 0.0);
        float _1285 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1251.x + (-0.5));
        float _1287 = _1285 * (_1251.y + (-0.5));
        float _1288 = _1285 * (_1251.z + (-0.5));
        float _1295 = exp2((_1258.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1258.x + (-0.5));
        float _1297 = _1295 * (_1258.y + (-0.5));
        float _1298 = _1295 * (_1258.z + (-0.5));
        float _1305 = exp2((_1265.w + (-0.5)) * 20.0) * 2.0;
        float _1306 = _1305 * (_1265.x + (-0.5));
        float _1307 = _1305 * (_1265.y + (-0.5));
        float _1308 = _1305 * (_1265.z + (-0.5));
        float _1315 = exp2((_1272.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1272.x + (-0.5));
        float _1317 = _1315 * (_1272.y + (-0.5));
        float _1318 = _1315 * (_1272.z + (-0.5));
        float _1319 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1320 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1321 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1322 = _1286 * 0.5;
        float _1323 = _1296 * 0.5;
        float _1324 = _1306 * 0.5;
        float _1325 = dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324));
        float _1330 = (_1325 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1325);
        float _1339 = (dot(vec3(_919, _920, _921), vec3(_1330 * _1322, _1330 * _1323, _1330 * _1324)) + 1.0) * 0.5;
        float _4037 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1349 = sqrt(((_1323 * _1323) + (_1322 * _1322)) + (_1324 * _1324)) / (_1319 + 9.9999997473787516355514526367188e-06);
        float _4048 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1351 = _1350 * 2.0;
        float _1355 = (1.0 - _1350) / (_1350 + 1.0);
        float _4059 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1365 = ((((1.0 - _1356) * (_1351 + 2.0)) * exp2(log2(isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * (_1351 + 1.0))) + _1356) * _1319;
        float _1366 = _1287 * 0.5;
        float _1367 = _1297 * 0.5;
        float _1368 = _1307 * 0.5;
        float _1369 = dot(vec3(_1366, _1367, _1368), vec3(_1366, _1367, _1368));
        float _1374 = (_1369 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1369);
        float _1382 = (dot(vec3(_919, _920, _921), vec3(_1374 * _1366, _1374 * _1367, _1374 * _1368)) + 1.0) * 0.5;
        float _4070 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1391 = sqrt(((_1367 * _1367) + (_1366 * _1366)) + (_1368 * _1368)) / (_1320 + 9.9999997473787516355514526367188e-06);
        float _4081 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1393 = _1392 * 2.0;
        float _1397 = (1.0 - _1392) / (_1392 + 1.0);
        float _4092 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1407 = ((((1.0 - _1398) * (_1393 + 2.0)) * exp2(log2(isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * (_1393 + 1.0))) + _1398) * _1320;
        float _1408 = _1288 * 0.5;
        float _1409 = _1298 * 0.5;
        float _1410 = _1308 * 0.5;
        float _1411 = dot(vec3(_1408, _1409, _1410), vec3(_1408, _1409, _1410));
        float _1416 = (_1411 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1411);
        float _1424 = (dot(vec3(_919, _920, _921), vec3(_1416 * _1408, _1416 * _1409, _1416 * _1410)) + 1.0) * 0.5;
        float _4103 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1433 = sqrt(((_1409 * _1409) + (_1408 * _1408)) + (_1410 * _1410)) / (_1321 + 9.9999997473787516355514526367188e-06);
        float _4114 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1435 = _1434 * 2.0;
        float _1439 = (1.0 - _1434) / (_1434 + 1.0);
        float _4125 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1449 = ((((1.0 - _1440) * (_1435 + 2.0)) * exp2(log2(isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (_1435 + 1.0))) + _1440) * _1321;
        _1457 = _1288;
        _1459 = _1287;
        _1460 = _1286;
        _1461 = _1298;
        _1462 = _1297;
        _1463 = _1296;
        _1464 = _1308;
        _1465 = _1307;
        _1466 = _1306;
        _1467 = _1321;
        _1468 = _1320;
        _1469 = _1319;
        _1470 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)));
        _1471 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0)));
        _1472 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)));
    }
    else
    {
        _1457 = _1458;
        _1459 = _1458;
        _1460 = _1458;
        _1461 = _1458;
        _1462 = _1458;
        _1463 = _1458;
        _1464 = _1458;
        _1465 = _1458;
        _1466 = _1458;
        _1467 = _1458;
        _1468 = _1458;
        _1469 = _1458;
        _1470 = 0.0;
        _1471 = 0.0;
        _1472 = 0.0;
    }
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1497 = fma(_1156, cbModelParam._m0[30u].z, fma(_1152, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1148));
        float _1501 = fma(_1156, cbModelParam._m0[31u].z, fma(_1152, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1148));
        float _1505 = fma(_1156, cbModelParam._m0[32u].z, fma(_1152, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1148));
        float _1528 = _1148 + _919;
        float _1529 = _1152 + _920;
        float _1530 = _1156 + _921;
        float _1540 = fma(_1530, cbModelParam._m0[30u].z, fma(_1529, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1528)) - _1497;
        float _1541 = fma(_1530, cbModelParam._m0[31u].z, fma(_1529, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1528)) - _1501;
        float _1542 = fma(_1530, cbModelParam._m0[32u].z, fma(_1529, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1528)) - _1505;
        float _1546 = inversesqrt(dot(vec3(_1540, _1541, _1542), vec3(_1540, _1541, _1542)));
        float _1559 = ((_1546 * _1540) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1497 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1560 = ((_1546 * _1541) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1501 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1561 = ((_1546 * _1542) / cbModelParam._m0[35u].z) + ((((((_1505 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1563 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1559, _1560, _1561), 0.0);
        vec4 _1570 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1559, _1560, _1561), 0.0);
        vec4 _1577 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1559, _1560, _1561), 0.0);
        vec4 _1584 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1559, _1560, _1561), 0.0);
        float _1596 = exp2((_1563.w + (-0.5)) * 20.0) * 2.0;
        float _1597 = _1596 * (_1563.x + (-0.5));
        float _1598 = _1596 * (_1563.y + (-0.5));
        float _1599 = _1596 * (_1563.z + (-0.5));
        float _1606 = exp2((_1570.w + (-0.5)) * 20.0) * 2.0;
        float _1607 = _1606 * (_1570.x + (-0.5));
        float _1608 = _1606 * (_1570.y + (-0.5));
        float _1609 = _1606 * (_1570.z + (-0.5));
        float _1616 = exp2((_1577.w + (-0.5)) * 20.0) * 2.0;
        float _1617 = _1616 * (_1577.x + (-0.5));
        float _1618 = _1616 * (_1577.y + (-0.5));
        float _1619 = _1616 * (_1577.z + (-0.5));
        float _1626 = exp2((_1584.w + (-0.5)) * 20.0) * 2.0;
        float _1627 = _1626 * (_1584.x + (-0.5));
        float _1628 = _1626 * (_1584.y + (-0.5));
        float _1629 = _1626 * (_1584.z + (-0.5));
        float _1630 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1631 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1632 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1633 = _1597 * 0.5;
        float _1634 = _1607 * 0.5;
        float _1635 = _1617 * 0.5;
        float _1636 = dot(vec3(_1633, _1634, _1635), vec3(_1633, _1634, _1635));
        float _1641 = (_1636 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1636);
        float _1649 = (dot(vec3(_919, _920, _921), vec3(_1641 * _1633, _1641 * _1634, _1641 * _1635)) + 1.0) * 0.5;
        float _4166 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1658 = sqrt(((_1634 * _1634) + (_1633 * _1633)) + (_1635 * _1635)) / (_1630 + 9.9999997473787516355514526367188e-06);
        float _4177 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1660 = _1659 * 2.0;
        float _1664 = (1.0 - _1659) / (_1659 + 1.0);
        float _4188 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1674 = ((((1.0 - _1665) * (_1660 + 2.0)) * exp2(log2(isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_1660 + 1.0))) + _1665) * _1630;
        float _1675 = _1598 * 0.5;
        float _1676 = _1608 * 0.5;
        float _1677 = _1618 * 0.5;
        float _1678 = dot(vec3(_1675, _1676, _1677), vec3(_1675, _1676, _1677));
        float _1683 = (_1678 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1678);
        float _1691 = (dot(vec3(_919, _920, _921), vec3(_1683 * _1675, _1683 * _1676, _1683 * _1677)) + 1.0) * 0.5;
        float _4199 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1700 = sqrt(((_1676 * _1676) + (_1675 * _1675)) + (_1677 * _1677)) / (_1631 + 9.9999997473787516355514526367188e-06);
        float _4210 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1701 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1702 = _1701 * 2.0;
        float _1706 = (1.0 - _1701) / (_1701 + 1.0);
        float _4221 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1707 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1716 = ((((1.0 - _1707) * (_1702 + 2.0)) * exp2(log2(isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * (_1702 + 1.0))) + _1707) * _1631;
        float _1717 = _1599 * 0.5;
        float _1718 = _1609 * 0.5;
        float _1719 = _1619 * 0.5;
        float _1720 = dot(vec3(_1717, _1718, _1719), vec3(_1717, _1718, _1719));
        float _1725 = (_1720 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1720);
        float _1733 = (dot(vec3(_919, _920, _921), vec3(_1725 * _1717, _1725 * _1718, _1725 * _1719)) + 1.0) * 0.5;
        float _4232 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1742 = sqrt(((_1718 * _1718) + (_1717 * _1717)) + (_1719 * _1719)) / (_1632 + 9.9999997473787516355514526367188e-06);
        float _4243 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1743 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1744 = _1743 * 2.0;
        float _1748 = (1.0 - _1743) / (_1743 + 1.0);
        float _4254 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
        float _1749 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1758 = ((((1.0 - _1749) * (_1744 + 2.0)) * exp2(log2(isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_1744 + 1.0))) + _1749) * _1632;
        _1766 = _1599;
        _1767 = _1598;
        _1768 = _1597;
        _1769 = _1609;
        _1770 = _1608;
        _1771 = _1607;
        _1772 = _1619;
        _1773 = _1618;
        _1774 = _1617;
        _1775 = _1632;
        _1776 = _1631;
        _1777 = _1630;
        _1778 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0)));
        _1779 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0)));
        _1780 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0)));
    }
    else
    {
        _1766 = _1458;
        _1767 = _1458;
        _1768 = _1458;
        _1769 = _1458;
        _1770 = _1458;
        _1771 = _1458;
        _1772 = _1458;
        _1773 = _1458;
        _1774 = _1458;
        _1775 = _1458;
        _1776 = _1458;
        _1777 = _1458;
        _1778 = 0.0;
        _1779 = 0.0;
        _1780 = 0.0;
    }
    float _1790 = (cbModelParam._m0[1u].x * (_1778 - _1470)) + _1470;
    float _1791 = (cbModelParam._m0[1u].x * (_1779 - _1471)) + _1471;
    float _1792 = (cbModelParam._m0[1u].x * (_1780 - _1472)) + _1472;
    float _1813 = fma(_1792, cbSceneParam._m0[89u].z, fma(_1791, cbSceneParam._m0[89u].y, _1790 * cbSceneParam._m0[89u].x));
    float _1816 = fma(_1792, cbSceneParam._m0[90u].z, fma(_1791, cbSceneParam._m0[90u].y, _1790 * cbSceneParam._m0[90u].x));
    float _1819 = fma(_1792, cbSceneParam._m0[91u].z, fma(_1791, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1790));
    float _1834 = _1092 * 0.5;
    float _1835 = _1093 * 0.5;
    float _1836 = _1094 * 0.5;
    float _1837 = dot(vec4(_1834, _1835, _1836, 1.0), vec4(_1768, _1771, _1774, _1777));
    float _1840 = dot(vec4(_1834, _1835, _1836, 1.0), vec4(_1767, _1770, _1773, _1776));
    float _1843 = dot(vec4(_1834, _1835, _1836, 1.0), vec4(_1766, _1769, _1772, _1775));
    float _1877;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1850 = dot(vec4(_1834, _1835, _1836, 1.0), vec4(_1457, _1461, _1464, _1467));
        float _1854 = dot(vec4(_1834, _1835, _1836, 1.0), vec4(_1459, _1462, _1465, _1468));
        float _1858 = dot(vec4(_1834, _1835, _1836, 1.0), vec4(_1460, _1463, _1466, _1469));
        float _1865 = dot(vec4(cbModelParam._m0[39u]), vec4(_1834, _1835, _1836, 1.0));
        _1877 = dot(vec3(isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0)), isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0)), isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1865) ? 0.0 : (isnan(0.0) ? _1865 : max(0.0, _1865))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1877 = 1.0;
    }
    float _1888;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1879 = dot(vec4(cbModelParam._m0[40u]), vec4(_1834, _1835, _1836, 1.0));
        _1888 = dot(vec3(isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0)), isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0)), isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1879) ? 0.0 : (isnan(0.0) ? _1879 : max(0.0, _1879))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1888 = 1.0;
    }
    float _1892 = (_1888 * cbModelParam._m0[1u].x) + (_1877 * (1.0 - cbModelParam._m0[1u].x));
    float _1902 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _922);
    float _1903 = isnan(_1902) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1902 : min(cbModelParam._m0[25u].z, _1902));
    float _1983;
    float _1985;
    float _1987;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1950 = fma(_1156, cbModelParam._m0[13u].z, fma(_1152, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1148)) + cbModelParam._m0[13u].w;
        float _1954 = fma(_1156, cbModelParam._m0[14u].z, fma(_1152, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1148)) + cbModelParam._m0[14u].w;
        float _1958 = fma(_1156, cbModelParam._m0[15u].z, fma(_1152, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1148)) + cbModelParam._m0[15u].w;
        float _1961 = fma(_1094, cbModelParam._m0[13u].z, fma(_1093, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1092));
        float _1964 = fma(_1094, cbModelParam._m0[14u].z, fma(_1093, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1092));
        float _1967 = fma(_1094, cbModelParam._m0[15u].z, fma(_1093, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1092));
        float _1995;
        if (_1961 > 0.0)
        {
            _1995 = abs((1.0 - _1950) / _1961);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1961 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1950 + 1.0) / _1961);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1995 = frontier_phi_14_12_ladder;
        }
        float _2197;
        if (_1964 > 0.0)
        {
            _2197 = abs((1.0 - _1954) / _1964);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1964 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1954 + 1.0) / _1964);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2197 = frontier_phi_23_19_ladder;
        }
        float _2451;
        if (_1967 > 0.0)
        {
            _2451 = abs((1.0 - _1958) / _1967);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1958 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2451 = frontier_phi_35_30_ladder;
        }
        float _2453 = isnan(_2197) ? _1995 : (isnan(_1995) ? _2197 : min(_1995, _2197));
        float _2454 = isnan(_2451) ? _2453 : (isnan(_2453) ? _2451 : min(_2453, _2451));
        float _2458 = (_2454 * _1961) + _1950;
        float _2459 = (_2454 * _1964) + _1954;
        float _2460 = (_2454 * _1967) + _1958;
        float _2461 = _2454 * 9.9999997473787516355514526367188e-05;
        float _2463 = (-1.0) - _2461;
        float _2465 = _2461 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2460 > _2465) || ((_2460 < _2463) || ((_2459 > _2465) || ((_2459 < _2463) || ((_2458 < _2463) || (_2458 > _2465))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2588 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2460, cbModelParam._m0[9u].z, fma(_2459, cbModelParam._m0[9u].y, _2458 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2460, cbModelParam._m0[10u].z, fma(_2459, cbModelParam._m0[10u].y, _2458 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2460, cbModelParam._m0[11u].z, fma(_2459, cbModelParam._m0[11u].y, _2458 * cbModelParam._m0[11u].x))), _1903);
            frontier_phi_13_35_ladder = _2588.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2588.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2588.x * cbModelParam._m0[1u].y;
        }
        _1983 = frontier_phi_13_35_ladder_2;
        _1985 = frontier_phi_13_35_ladder_1;
        _1987 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1971 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1092, _1093, _1094), _1903);
        _1983 = _1971.x * cbModelParam._m0[1u].y;
        _1985 = _1971.y * cbModelParam._m0[1u].y;
        _1987 = _1971.z * cbModelParam._m0[1u].y;
    }
    float _1991 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _922);
    float _1992 = isnan(_1991) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1991 : min(cbModelParam._m0[25u].w, _1991));
    float _2081;
    float _2083;
    float _2085;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2045 = fma(_1156, cbModelParam._m0[21u].z, fma(_1152, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1148)) + cbModelParam._m0[21u].w;
        float _2049 = fma(_1156, cbModelParam._m0[22u].z, fma(_1152, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1148)) + cbModelParam._m0[22u].w;
        float _2053 = fma(_1156, cbModelParam._m0[23u].z, fma(_1152, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1148)) + cbModelParam._m0[23u].w;
        float _2056 = fma(_1094, cbModelParam._m0[21u].z, fma(_1093, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1092));
        float _2059 = fma(_1094, cbModelParam._m0[22u].z, fma(_1093, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1092));
        float _2062 = fma(_1094, cbModelParam._m0[23u].z, fma(_1093, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1092));
        float _2202;
        if (_2056 > 0.0)
        {
            _2202 = abs((1.0 - _2045) / _2056);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2056 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2045 + 1.0) / _2056);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2202 = frontier_phi_25_21_ladder;
        }
        float _2478;
        if (_2059 > 0.0)
        {
            _2478 = abs((1.0 - _2049) / _2059);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2059 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2049 + 1.0) / _2059);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2478 = frontier_phi_37_32_ladder;
        }
        float _2691;
        if (_2062 > 0.0)
        {
            _2691 = abs((1.0 - _2053) / _2062);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2062 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2053 + 1.0) / _2062);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2691 = frontier_phi_46_43_ladder;
        }
        float _2693 = isnan(_2478) ? _2202 : (isnan(_2202) ? _2478 : min(_2202, _2478));
        float _2694 = isnan(_2691) ? _2693 : (isnan(_2693) ? _2691 : min(_2693, _2691));
        float _2698 = (_2694 * _2056) + _2045;
        float _2699 = (_2694 * _2059) + _2049;
        float _2700 = (_2694 * _2062) + _2053;
        float _2701 = _2694 * 9.9999997473787516355514526367188e-05;
        float _2702 = (-1.0) - _2701;
        float _2704 = _2701 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2700 > _2704) || ((_2700 < _2702) || ((_2699 > _2704) || ((_2699 < _2702) || ((_2698 < _2702) || (_2698 > _2704))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2899 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2700, cbModelParam._m0[17u].z, fma(_2699, cbModelParam._m0[17u].y, _2698 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2700, cbModelParam._m0[18u].z, fma(_2699, cbModelParam._m0[18u].y, _2698 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2700, cbModelParam._m0[19u].z, fma(_2699, cbModelParam._m0[19u].y, _2698 * cbModelParam._m0[19u].x))), _1992);
            frontier_phi_22_46_ladder = _2899.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2899.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2899.x * cbModelParam._m0[1u].z;
        }
        _2081 = frontier_phi_22_46_ladder_2;
        _2083 = frontier_phi_22_46_ladder_1;
        _2085 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2065 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1092, _1093, _1094), _1992);
        _2081 = _2065.x * cbModelParam._m0[1u].z;
        _2083 = _2065.y * cbModelParam._m0[1u].z;
        _2085 = _2065.z * cbModelParam._m0[1u].z;
    }
    float _2098 = (((_1119 * _1068) + _1120) * _1084) * ((cbModelParam._m0[1u].w * (_2081 - _1983)) + _1983);
    float _2100 = (((_1119 * _1070) + _1120) * _1084) * ((cbModelParam._m0[1u].w * (_2083 - _1985)) + _1985);
    float _2102 = (((_1119 * _1071) + _1120) * _1084) * ((cbModelParam._m0[1u].w * (_2085 - _1987)) + _1987);
    float _2105 = fma(_2102, cbSceneParam._m0[89u].z, fma(_2100, cbSceneParam._m0[89u].y, _2098 * cbSceneParam._m0[89u].x));
    float _2108 = fma(_2102, cbSceneParam._m0[90u].z, fma(_2100, cbSceneParam._m0[90u].y, _2098 * cbSceneParam._m0[90u].x));
    float _2111 = fma(_2102, cbSceneParam._m0[91u].z, fma(_2100, cbSceneParam._m0[91u].y, _2098 * cbSceneParam._m0[91u].x));
    uvec4 _2121 = floatBitsToUint(cbInstanceData._m0[_281 + 5u]);
    uint _2123 = _2121.x * 14u;
    uint _2124 = _2123 + 13u;
    float _2131 = _1084 + (-1.0);
    float _2136 = (cbLight._m0[_2124].x * _2131) + 1.0;
    float _2137 = (cbLight._m0[_2124].y * _2131) + 1.0;
    float _2138 = (cbLight._m0[_2124].z * _2131) + 1.0;
    float _2139 = (cbLight._m0[_2124].w * _2131) + 1.0;
    uint _2140 = _2123 + 5u;
    float _2146 = isnan(1.0) ? _2137 : (isnan(_2137) ? 1.0 : min(_2137, 1.0));
    uint _2150 = _2123 + 4u;
    float _2156 = isnan(1.0) ? _2136 : (isnan(_2136) ? 1.0 : min(_2136, 1.0));
    uint _2160 = _2123 | 1u;
    float _2171 = dot(vec3(cbLight._m0[_2123].xyz), vec3(_919, _920, _921));
    float _2174 = dot(vec3(cbLight._m0[_2160].xyz), vec3(_919, _920, _921));
    float _4390 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _4401 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _2179 = (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))) * 0.3183098733425140380859375;
    float _2181 = (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * 0.3183098733425140380859375;
    float _2188 = ((cbLight._m0[_2140].x * _2146) * _2181) + ((cbLight._m0[_2150].x * _2156) * _2179);
    float _2189 = ((_2146 * cbLight._m0[_2140].y) * _2181) + ((_2156 * cbLight._m0[_2150].y) * _2179);
    float _2190 = ((_2146 * cbLight._m0[_2140].z) * _2181) + ((_2156 * cbLight._m0[_2150].z) * _2179);
    uvec4 _2194 = floatBitsToUint(cbLight._m0[_2123 + 12u]);
    bool _2196 = _2194.x == 0u;
    float _2207;
    float _2209;
    float _2211;
    if (_2196)
    {
        _2207 = _2188;
        _2209 = _2189;
        _2211 = _2190;
    }
    else
    {
        uint _2215 = _2123 + 6u;
        float _2231 = (dot(vec3(cbLight._m0[_2123 + 2u].xyz), vec3(_919, _920, _921)) * 0.5) + 0.5;
        float _2232 = _2231 * _2231;
        float _4412 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        float _2233 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _2234 = isnan(1.0) ? _2138 : (isnan(_2138) ? 1.0 : min(_2138, 1.0));
        _2207 = (((cbLight._m0[_2215].x * 0.3183098733425140380859375) * _2233) * _2234) + _2188;
        _2209 = (((cbLight._m0[_2215].y * 0.3183098733425140380859375) * _2233) * _2234) + _2189;
        _2211 = (((cbLight._m0[_2215].z * 0.3183098733425140380859375) * _2233) * _2234) + _2190;
    }
    bool _2214 = _2194.y == 0u;
    float _2252;
    float _2254;
    float _2256;
    if (_2214)
    {
        _2252 = _2207;
        _2254 = _2209;
        _2256 = _2211;
    }
    else
    {
        uint _2422 = _2123 + 7u;
        float _2438 = (dot(vec3(cbLight._m0[_2123 + 3u].xyz), vec3(_919, _920, _921)) * 0.5) + 0.5;
        float _2439 = _2438 * _2438;
        float _4428 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2440 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _2441 = isnan(1.0) ? _2139 : (isnan(_2139) ? 1.0 : min(_2139, 1.0));
        _2252 = (((cbLight._m0[_2422].x * 0.3183098733425140380859375) * _2440) * _2441) + _2207;
        _2254 = (((cbLight._m0[_2422].y * 0.3183098733425140380859375) * _2440) * _2441) + _2209;
        _2256 = (((cbLight._m0[_2422].z * 0.3183098733425140380859375) * _2440) * _2441) + _2211;
    }
    uint _2259 = _2123 + 8u;
    float _2272 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2123].w)) * _922) * 0.949999988079071044921875);
    float _2273 = _2272 * _2272;
    float _2274 = cbLight._m0[_2123].x + _998;
    float _2275 = cbLight._m0[_2123].y + _999;
    float _2276 = cbLight._m0[_2123].z + _1000;
    float _2280 = inversesqrt(dot(vec3(_2274, _2275, _2276), vec3(_2274, _2275, _2276)));
    float _2281 = _2280 * _2274;
    float _2282 = _2280 * _2275;
    float _2283 = _2280 * _2276;
    float _2284 = dot(vec3(_919, _920, _921), vec3(cbLight._m0[_2123].xyz));
    float _4444 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _2287 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
    float _4455 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
    float _2288 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
    float _2289 = dot(vec3(_919, _920, _921), vec3(_2281, _2282, _2283));
    float _4466 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2292 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
    float _2293 = dot(vec3(cbLight._m0[_2123].xyz), vec3(_2281, _2282, _2283));
    float _4477 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
    float _2297 = _2273 * _2273;
    float _2301 = ((_2292 * _2292) * (_2297 + (-1.0))) + 1.0;
    float _2309 = exp2(log2(1.0 - (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0)))) * 5.0);
    float _2310 = 0.959999978542327880859375 - _1065;
    float _2312 = 0.959999978542327880859375 - _1066;
    float _2313 = 0.959999978542327880859375 - _1067;
    float _2320 = 1.0 - _2273;
    float _2331 = (0.5 / (((_2288 * ((_2287 * _2320) + _2273)) + 9.9999999392252902907785028219223e-09) + (((_2288 * _2320) + _2273) * _2287))) * _2287;
    float _4488 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _2333 = (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * (_2297 / ((_2301 * _2301) * 3.141590118408203125));
    uint _2344 = _2123 + 9u;
    float _2355 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2160].w)) * _922) * 0.949999988079071044921875);
    float _2356 = _2355 * _2355;
    float _2357 = cbLight._m0[_2160].x + _998;
    float _2358 = cbLight._m0[_2160].y + _999;
    float _2359 = cbLight._m0[_2160].z + _1000;
    float _2363 = inversesqrt(dot(vec3(_2357, _2358, _2359), vec3(_2357, _2358, _2359)));
    float _2364 = _2363 * _2357;
    float _2365 = _2363 * _2358;
    float _2366 = _2363 * _2359;
    float _2367 = dot(vec3(_919, _920, _921), vec3(cbLight._m0[_2160].xyz));
    float _4499 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
    float _2370 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
    float _2371 = dot(vec3(_919, _920, _921), vec3(_2364, _2365, _2366));
    float _4510 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _2374 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
    float _2375 = dot(vec3(cbLight._m0[_2160].xyz), vec3(_2364, _2365, _2366));
    float _4521 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
    float _2379 = _2356 * _2356;
    float _2383 = ((_2374 * _2374) * (_2379 + (-1.0))) + 1.0;
    float _2390 = exp2(log2(1.0 - (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0)))) * 5.0);
    float _2397 = 1.0 - _2356;
    float _2407 = (0.5 / (((_2288 * ((_2370 * _2397) + _2356)) + 9.9999999392252902907785028219223e-09) + (((_2288 * _2397) + _2356) * _2370))) * _2370;
    float _4532 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2409 = (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (_2379 / ((_2383 * _2383) * 3.141590118408203125));
    float _2419 = (((((_2390 * _2310) + _1068) * cbLight._m0[_2344].x) * _2409) * _2146) + (((((_2309 * _2310) + _1068) * cbLight._m0[_2259].x) * _2333) * _2156);
    float _2420 = (((((_2390 * _2312) + _1070) * cbLight._m0[_2344].y) * _2409) * _2146) + (((((_2309 * _2312) + _1070) * cbLight._m0[_2259].y) * _2333) * _2156);
    float _2421 = (((((_2390 * _2313) + _1071) * cbLight._m0[_2344].z) * _2409) * _2146) + (((((_2309 * _2313) + _1071) * cbLight._m0[_2259].z) * _2333) * _2156);
    float _2483;
    float _2485;
    float _2487;
    if (_2196)
    {
        _2483 = _2419;
        _2485 = _2420;
        _2487 = _2421;
    }
    else
    {
        uint _2489 = _2123 + 2u;
        uint _2493 = _2123 + 10u;
        float _2507 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2489].w)) * _922) * 0.949999988079071044921875);
        float _2508 = _2507 * _2507;
        float _2509 = cbLight._m0[_2489].x + _998;
        float _2510 = cbLight._m0[_2489].y + _999;
        float _2511 = cbLight._m0[_2489].z + _1000;
        float _2515 = inversesqrt(dot(vec3(_2509, _2510, _2511), vec3(_2509, _2510, _2511)));
        float _2516 = _2515 * _2509;
        float _2517 = _2515 * _2510;
        float _2518 = _2515 * _2511;
        float _2519 = dot(vec3(_919, _920, _921), vec3(cbLight._m0[_2489].xyz));
        float _4543 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2522 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
        float _2523 = dot(vec3(_919, _920, _921), vec3(_2516, _2517, _2518));
        float _4554 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2526 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _2527 = dot(vec3(cbLight._m0[_2489].xyz), vec3(_2516, _2517, _2518));
        float _4565 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
        float _2531 = _2508 * _2508;
        float _2535 = ((_2526 * _2526) * (_2531 + (-1.0))) + 1.0;
        float _2542 = exp2(log2(1.0 - (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0)))) * 5.0);
        float _2549 = 1.0 - _2508;
        float _2559 = (0.5 / (((_2288 * ((_2522 * _2549) + _2508)) + 9.9999999392252902907785028219223e-09) + (((_2288 * _2549) + _2508) * _2522))) * _2522;
        float _4576 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        float _2561 = (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * (_2531 / ((_2535 * _2535) * 3.141590118408203125));
        float _2562 = isnan(1.0) ? _2138 : (isnan(_2138) ? 1.0 : min(_2138, 1.0));
        _2483 = (((((_2542 * _2310) + _1068) * cbLight._m0[_2493].x) * _2561) * _2562) + _2419;
        _2485 = (((((_2542 * _2312) + _1070) * cbLight._m0[_2493].y) * _2561) * _2562) + _2420;
        _2487 = (((((_2542 * _2313) + _1071) * cbLight._m0[_2493].z) * _2561) * _2562) + _2421;
    }
    float _2597;
    float _2599;
    float _2601;
    if (_2214)
    {
        _2597 = _2483;
        _2599 = _2485;
        _2601 = _2487;
    }
    else
    {
        uint _2608 = _2123 + 3u;
        uint _2612 = _2123 + 11u;
        float _2626 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2608].w)) * _922) * 0.949999988079071044921875);
        float _2627 = _2626 * _2626;
        float _2628 = cbLight._m0[_2608].x + _998;
        float _2629 = cbLight._m0[_2608].y + _999;
        float _2630 = cbLight._m0[_2608].z + _1000;
        float _2634 = inversesqrt(dot(vec3(_2628, _2629, _2630), vec3(_2628, _2629, _2630)));
        float _2635 = _2634 * _2628;
        float _2636 = _2634 * _2629;
        float _2637 = _2634 * _2630;
        float _2638 = dot(vec3(_919, _920, _921), vec3(cbLight._m0[_2608].xyz));
        float _4592 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2641 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
        float _2642 = dot(vec3(_919, _920, _921), vec3(_2635, _2636, _2637));
        float _4603 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
        float _2645 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
        float _2646 = dot(vec3(cbLight._m0[_2608].xyz), vec3(_2635, _2636, _2637));
        float _4614 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        float _2650 = _2627 * _2627;
        float _2654 = ((_2645 * _2645) * (_2650 + (-1.0))) + 1.0;
        float _2661 = exp2(log2(1.0 - (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0)))) * 5.0);
        float _2668 = 1.0 - _2627;
        float _2678 = (0.5 / (((_2288 * ((_2641 * _2668) + _2627)) + 9.9999999392252902907785028219223e-09) + (((_2288 * _2668) + _2627) * _2641))) * _2641;
        float _4625 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2680 = (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (_2650 / ((_2654 * _2654) * 3.141590118408203125));
        float _2681 = isnan(1.0) ? _2139 : (isnan(_2139) ? 1.0 : min(_2139, 1.0));
        _2597 = (((((_2661 * _2310) + _1068) * cbLight._m0[_2612].x) * _2680) * _2681) + _2483;
        _2599 = (((((_2661 * _2312) + _1070) * cbLight._m0[_2612].y) * _2680) * _2681) + _2485;
        _2601 = (((((_2661 * _2313) + _1071) * cbLight._m0[_2612].z) * _2680) * _2681) + _2487;
    }
    float _2816;
    float _2818;
    float _2820;
    float _2822;
    float _2824;
    float _2826;
    if (_2121.y == 0u)
    {
        float _2756 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2757 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2756;
        float _2758 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2756;
        float _2759 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2756;
        uvec4 _2771 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2772 = _2771.x;
        uint _2783 = uint((float(_2771.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1007) / _2772))) + floor(float(uint(cbSceneParam._m0[85u].x * _1006) / _2772)));
        float _2793 = (log2(_2759 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2794 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
        uint _2797 = uint(isnan(14.0) ? _2794 : (isnan(_2794) ? 14.0 : min(_2794, 14.0)));
        uvec4 _2802 = texelFetch(g_lightClusterGridBuffer, int(((_2797 << 2u) + (_2783 << 6u)) >> 2u));
        uint _2803 = _2802.x;
        uint _2804 = _2771.z;
        float _2904;
        float _2906;
        float _2908;
        float _2910;
        float _2912;
        float _2914;
        if (((((1u << ((_2804 >> 4u) & 15u)) + 4294967295u) & _2803) == 0u) || ((_2804 & 240u) == 0u))
        {
            _2904 = 0.0;
            _2906 = 0.0;
            _2908 = 0.0;
            _2910 = 0.0;
            _2912 = 0.0;
            _2914 = 0.0;
        }
        else
        {
            float _2905;
            float _2907;
            float _2909;
            float _2911;
            float _2913;
            float _2915;
            float _3048 = 0.0;
            float _3049 = 0.0;
            float _3050 = 0.0;
            float _3051 = 0.0;
            float _3052 = 0.0;
            float _3053 = 0.0;
            uint _3054 = 0u;
            uint _3063;
            bool _3064;
            for (;;)
            {
                _3063 = texelFetch(g_lightClassification, int((((_2797 << 5u) + (_2783 << 9u)) + (_3054 << 2u)) >> 2u)).x;
                _3064 = _3063 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3064)
                {
                    frontier_phi_61_pred = _3048;
                    frontier_phi_61_pred_1 = _3053;
                    frontier_phi_61_pred_2 = _3052;
                    frontier_phi_61_pred_3 = _3051;
                    frontier_phi_61_pred_4 = _3050;
                    frontier_phi_61_pred_5 = _3049;
                }
                else
                {
                    float _3172;
                    float _3173;
                    float _3174;
                    float _3175;
                    float _3176;
                    float _3177;
                    uint _3178;
                    _3172 = _3048;
                    _3173 = _3049;
                    _3174 = _3050;
                    _3175 = _3051;
                    _3176 = _3052;
                    _3177 = _3053;
                    _3178 = _3063;
                    float _3104;
                    float _3105;
                    float _3106;
                    float _3107;
                    float _3108;
                    float _3109;
                    for (;;)
                    {
                        uint _3182 = uint(findLSB(_3178)) + (_3054 << 5u);
                        uint _3179 = (_3178 + 4294967295u) & _3178;
                        uint _3184 = _3182 * 48u;
                        vec4 _3198 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3184)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 3u)).x));
                        uint _3204 = (_3182 * 48u) + 4u;
                        vec4 _3217 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3204)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 3u)).x));
                        uint _3223 = (_3182 * 48u) + 8u;
                        vec3 _3234 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3223)).x, texelFetch(g_PointLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3223 + 2u)).x));
                        float _3238 = _3198.x - _2757;
                        float _3239 = _3198.y - _2758;
                        float _3240 = _3198.z - _2759;
                        float _3241 = dot(vec3(_3238, _3239, _3240), vec3(_3238, _3239, _3240));
                        float _3244 = inversesqrt(_3241);
                        float _3245 = _3244 * _3238;
                        float _3246 = _3244 * _3239;
                        float _3247 = _3244 * _3240;
                        float _3248 = dot(vec3(_1025, _1028, _1031), vec3(_3245, _3246, _3247));
                        float _3253 = 1.0 - (_3241 * _3198.w);
                        float _4651 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                        float _3254 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
                        float _3255 = sqrt(_3241) * _3217.w;
                        float _3258 = 1.39999997615814208984375 / (_3255 + 1.39999997615814208984375);
                        float _3259 = _3258 * _3258;
                        float _3262 = ((1.0 - _3259) * _3248) + _3259;
                        float _3265 = _3255 * _3255;
                        float _3269 = ((isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0))) * _3254) / ((_3265 * 0.699999988079071044921875) + 1.0);
                        float _3273 = (-0.0) - _2757;
                        float _3274 = (-0.0) - _2758;
                        float _3275 = (-0.0) - _2759;
                        float _3279 = inversesqrt(dot(vec3(_3273, _3274, _3275), vec3(_3273, _3274, _3275)));
                        float _3280 = _3279 * _3273;
                        float _3281 = _3279 * _3274;
                        float _3282 = _3279 * _3275;
                        float _3290 = exp2(log2(1.0 / ((_3265 * 3.5) + 5.0)) * 0.25);
                        float _3291 = 1.0 - _1100;
                        float _3298 = sqrt(1.0 - ((1.0 - (_3291 * _3291)) * (1.0 - (_3290 * _3290))));
                        float _3299 = _3298 * _3298;
                        float _3300 = _3299 * _3299;
                        float _3301 = _3280 + _3245;
                        float _3302 = _3281 + _3246;
                        float _3303 = _3282 + _3247;
                        float _3307 = inversesqrt(dot(vec3(_3301, _3302, _3303), vec3(_3301, _3302, _3303)));
                        float _3311 = dot(vec3(_1025, _1028, _1031), vec3(_3280, _3281, _3282));
                        float _4667 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                        float _3314 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                        float _3315 = dot(vec3(_1025, _1028, _1031), vec3(_3307 * _3301, _3307 * _3302, _3307 * _3303));
                        float _4678 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                        float _3318 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                        float _3322 = ((_3318 * _3318) * (_3300 + (-1.0))) + 1.0;
                        float _3323 = _3258 * _3299;
                        float _3324 = _3323 * _3323;
                        float _3327 = ((1.0 - _3324) * _3248) + _3324;
                        float _4689 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                        float _3328 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                        float _3329 = 1.0 - _3299;
                        float _3339 = (0.5 / (((_3328 * ((_3314 * _3329) + _3299)) + 9.9999999392252902907785028219223e-09) + (((_3328 * _3329) + _3299) * _3314))) * _3328;
                        float _4700 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                        float _3350 = (((_3300 * 3.1415927410125732421875) * (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0)))) / ((_3322 * _3322) * ((_3265 * 2.1991131305694580078125) + 3.141590118408203125))) * _3254;
                        _3107 = (_3269 * _3217.x) + _3175;
                        _3108 = (_3269 * _3217.y) + _3176;
                        _3109 = (_3269 * _3217.z) + _3177;
                        _3104 = (_3350 * _3234.x) + _3172;
                        _3105 = (_3350 * _3234.y) + _3173;
                        _3106 = (_3350 * _3234.z) + _3174;
                        if (_3179 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3172 = _3104;
                            _3173 = _3105;
                            _3174 = _3106;
                            _3175 = _3107;
                            _3176 = _3108;
                            _3177 = _3109;
                            _3178 = _3179;
                        }
                    }
                    frontier_phi_61_pred = _3104;
                    frontier_phi_61_pred_1 = _3109;
                    frontier_phi_61_pred_2 = _3108;
                    frontier_phi_61_pred_3 = _3107;
                    frontier_phi_61_pred_4 = _3106;
                    frontier_phi_61_pred_5 = _3105;
                }
                _2905 = frontier_phi_61_pred;
                _2915 = frontier_phi_61_pred_1;
                _2913 = frontier_phi_61_pred_2;
                _2911 = frontier_phi_61_pred_3;
                _2909 = frontier_phi_61_pred_4;
                _2907 = frontier_phi_61_pred_5;
                uint _3055 = _3054 + 1u;
                if (_3055 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3048 = _2905;
                    _3049 = _2907;
                    _3050 = _2909;
                    _3051 = _2911;
                    _3052 = _2913;
                    _3053 = _2915;
                    _3054 = _3055;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2904 = _2905;
            _2906 = _2907;
            _2908 = _2909;
            _2910 = _2911;
            _2912 = _2913;
            _2914 = _2915;
        }
        uvec4 _2918 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2919 = _2918.z;
        uint _2921 = (_2919 >> 8u) & 15u;
        float _3016;
        float _3018;
        float _3020;
        float _3022;
        float _3024;
        float _3026;
        if (((4294967295u << _2921) & _2803) == 0u)
        {
            _3016 = _2904;
            _3018 = _2906;
            _3020 = _2908;
            _3022 = _2910;
            _3024 = _2912;
            _3026 = _2914;
        }
        else
        {
            float _3041 = inversesqrt(dot(vec3(_2757, _2758, _2759), vec3(_2757, _2758, _2759)));
            float _3042 = _3041 * _2757;
            float _3043 = _3041 * _2758;
            float _3044 = _3041 * _2759;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2921 < ((_2919 >> 12u) & 15u))
            {
                float _3017;
                float _3019;
                float _3021;
                float _3023;
                float _3025;
                float _3027;
                float _3155 = _2904;
                float _3156 = _2906;
                float _3157 = _2908;
                float _3158 = _2910;
                float _3159 = _2912;
                float _3160 = _2914;
                uint _3161 = _2921;
                uint _3170;
                bool _3171;
                for (;;)
                {
                    _3170 = texelFetch(g_lightClassification, int((((_2797 << 5u) + (_2783 << 9u)) + (_3161 << 2u)) >> 2u)).x;
                    _3171 = _3170 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3171)
                    {
                        frontier_phi_67_pred = _3158;
                        frontier_phi_67_pred_1 = _3159;
                        frontier_phi_67_pred_2 = _3160;
                        frontier_phi_67_pred_3 = _3157;
                        frontier_phi_67_pred_4 = _3156;
                        frontier_phi_67_pred_5 = _3155;
                    }
                    else
                    {
                        float _3355;
                        float _3356;
                        float _3357;
                        float _3358;
                        float _3359;
                        float _3360;
                        float _3648;
                        float _3649;
                        float _3650;
                        float _3651;
                        float _3652;
                        float _3653;
                        float _3368 = _3155;
                        float _3369 = _3156;
                        float _3370 = _3157;
                        float _3371 = _3158;
                        float _3372 = _3159;
                        float _3373 = _3160;
                        uint _3374 = _3170;
                        uint _3375;
                        vec4 _3400;
                        float _3401;
                        vec4 _3416;
                        vec3 _3428;
                        vec4 _3443;
                        vec4 _3458;
                        float _3504;
                        bool _3505;
                        for (;;)
                        {
                            uint _3385 = ((_3161 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3374));
                            _3375 = (_3374 + 4294967295u) & _3374;
                            uint _3387 = _3385 * 40u;
                            _3400 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3387)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 3u)).x));
                            _3401 = _3400.w;
                            uint _3403 = (_3385 * 40u) + 4u;
                            _3416 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3403)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 3u)).x));
                            uint _3418 = (_3385 * 40u) + 8u;
                            _3428 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3418)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 2u)).x));
                            uint _3430 = (_3385 * 40u) + 16u;
                            _3443 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3430)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 3u)).x));
                            uint _3445 = (_3385 * 40u) + 20u;
                            _3458 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3445)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 3u)).x));
                            uint _3460 = (_3385 * 40u) + 24u;
                            vec4 _3473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 3u)).x));
                            uint _3479 = (_3385 * 40u) + 28u;
                            vec4 _3492 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 3u)).x));
                            _3504 = fma(_2759, _3492.z, fma(_2758, _3492.y, _3492.x * _2757)) + _3492.w;
                            _3505 = !((fma(_2759, _3473.z, fma(_2758, _3473.y, _3473.x * _2757)) + _3473.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3505)
                            {
                                float _3532 = _3400.x - _2757;
                                float _3533 = _3400.y - _2758;
                                float _3534 = _3400.z - _2759;
                                float _3535 = dot(vec3(_3532, _3533, _3534), vec3(_3532, _3533, _3534));
                                float _3538 = inversesqrt(_3535);
                                float _3539 = _3538 * _3532;
                                float _3540 = _3538 * _3533;
                                float _3541 = _3538 * _3534;
                                float _3545 = 1.0 - (_3535 / (_3401 * _3401));
                                float _4711 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                                float _3546 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
                                float _3550 = sqrt(_3535) * _3416.w;
                                float _3552 = 1.39999997615814208984375 / (_3550 + 1.39999997615814208984375);
                                float _3553 = _3552 * _3552;
                                float _3556 = ((1.0 - _3553) * dot(vec3(_3539, _3540, _3541), vec3(_1025, _1028, _1031))) + _3553;
                                float _3559 = _3550 * _3550;
                                float _3563 = (fma(_2759, _3443.z, fma(_2758, _3443.y, _3443.x * _2757)) + _3443.w) / _3504;
                                float _3564 = (fma(_2759, _3458.z, fma(_2758, _3458.y, _3458.x * _2757)) + _3458.w) / _3504;
                                float _3568 = 1.0 - dot(vec2(_3563, _3564), vec2(_3563, _3564));
                                float _4727 = isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0));
                                float _3569 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
                                float _3570 = _3569 * (((isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0))) * _3546) / ((_3559 * 0.699999988079071044921875) + 1.0));
                                float _3582 = exp2(log2(1.0 / ((_3559 * 3.5) + 5.0)) * 0.25);
                                float _3583 = 1.0 - _1100;
                                float _3590 = sqrt(1.0 - ((1.0 - (_3583 * _3583)) * (1.0 - (_3582 * _3582))));
                                float _3591 = _3590 * _3590;
                                float _3592 = _3591 * _3591;
                                float _3593 = _3539 - _3042;
                                float _3594 = _3540 - _3043;
                                float _3595 = _3541 - _3044;
                                float _3599 = inversesqrt(dot(vec3(_3593, _3594, _3595), vec3(_3593, _3594, _3595)));
                                float _3603 = dot(vec3(_1025, _1028, _1031), vec3((-0.0) - _3042, (-0.0) - _3043, (-0.0) - _3044));
                                float _4738 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                                float _3606 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                                float _3607 = dot(vec3(_1025, _1028, _1031), vec3(_3599 * _3593, _3599 * _3594, _3599 * _3595));
                                float _4749 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                                float _3610 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
                                float _3614 = ((_3610 * _3610) * (_3592 + (-1.0))) + 1.0;
                                float _3615 = _3552 * _3591;
                                float _3616 = _3615 * _3615;
                                float _3622 = ((1.0 - _3616) * dot(vec3(_1025, _1028, _1031), vec3(_3539, _3540, _3541))) + _3616;
                                float _4760 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                                float _3623 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                                float _3624 = 1.0 - _3591;
                                float _3634 = (0.5 / (((_3623 * ((_3606 * _3624) + _3591)) + 9.9999999392252902907785028219223e-09) + (((_3623 * _3624) + _3591) * _3606))) * _3623;
                                float _4771 = isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0));
                                float _3644 = (_3569 * _3546) * (((_3592 * 3.1415927410125732421875) * (isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0)))) / ((_3614 * _3614) * ((_3559 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3644 * _3428.x;
                                frontier_phi_73_pred_1 = _3644 * _3428.y;
                                frontier_phi_73_pred_2 = _3570 * _3416.z;
                                frontier_phi_73_pred_3 = _3570 * _3416.y;
                                frontier_phi_73_pred_4 = _3570 * _3416.x;
                                frontier_phi_73_pred_5 = _3644 * _3428.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3648 = frontier_phi_73_pred;
                            _3649 = frontier_phi_73_pred_1;
                            _3653 = frontier_phi_73_pred_2;
                            _3652 = frontier_phi_73_pred_3;
                            _3651 = frontier_phi_73_pred_4;
                            _3650 = frontier_phi_73_pred_5;
                            _3358 = _3651 + _3371;
                            _3359 = _3652 + _3372;
                            _3360 = _3653 + _3373;
                            _3355 = _3648 + _3368;
                            _3356 = _3649 + _3369;
                            _3357 = _3650 + _3370;
                            if (_3375 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3368 = _3355;
                                _3369 = _3356;
                                _3370 = _3357;
                                _3371 = _3358;
                                _3372 = _3359;
                                _3373 = _3360;
                                _3374 = _3375;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3358;
                        frontier_phi_67_pred_1 = _3359;
                        frontier_phi_67_pred_2 = _3360;
                        frontier_phi_67_pred_3 = _3357;
                        frontier_phi_67_pred_4 = _3356;
                        frontier_phi_67_pred_5 = _3355;
                    }
                    _3023 = frontier_phi_67_pred;
                    _3025 = frontier_phi_67_pred_1;
                    _3027 = frontier_phi_67_pred_2;
                    _3021 = frontier_phi_67_pred_3;
                    _3019 = frontier_phi_67_pred_4;
                    _3017 = frontier_phi_67_pred_5;
                    uint _3162 = _3161 + 1u;
                    if (_3162 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3155 = _3017;
                        _3156 = _3019;
                        _3157 = _3021;
                        _3158 = _3023;
                        _3159 = _3025;
                        _3160 = _3027;
                        _3161 = _3162;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3025;
                frontier_phi_55_56_ladder_1 = _3027;
                frontier_phi_55_56_ladder_2 = _3023;
                frontier_phi_55_56_ladder_3 = _3021;
                frontier_phi_55_56_ladder_4 = _3019;
                frontier_phi_55_56_ladder_5 = _3017;
            }
            else
            {
                frontier_phi_55_56_ladder = _2912;
                frontier_phi_55_56_ladder_1 = _2914;
                frontier_phi_55_56_ladder_2 = _2910;
                frontier_phi_55_56_ladder_3 = _2908;
                frontier_phi_55_56_ladder_4 = _2906;
                frontier_phi_55_56_ladder_5 = _2904;
            }
            _3016 = frontier_phi_55_56_ladder_5;
            _3018 = frontier_phi_55_56_ladder_4;
            _3020 = frontier_phi_55_56_ladder_3;
            _3022 = frontier_phi_55_56_ladder_2;
            _3024 = frontier_phi_55_56_ladder;
            _3026 = frontier_phi_55_56_ladder_1;
        }
        float _3031 = isnan(1.0) ? _1084 : (isnan(_1084) ? 1.0 : min(_1084, 1.0));
        _2816 = (_3031 * _3022) + _2252;
        _2818 = (_3031 * _3024) + _2254;
        _2820 = (_3031 * _3026) + _2256;
        _2822 = ((_3016 * _1068) * _3031) + _2597;
        _2824 = ((_3018 * _1070) * _3031) + _2599;
        _2826 = ((_3020 * _1071) * _3031) + _2601;
    }
    else
    {
        _2816 = _2252;
        _2818 = _2254;
        _2820 = _2256;
        _2822 = _2597;
        _2824 = _2599;
        _2826 = _2601;
    }
    float _4787 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
    float _4798 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
    float _4809 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    uint _2846 = _281 + 6u;
    float _2854 = _1006 / cbSceneParam._m0[86u].x;
    float _2855 = _1007 / cbSceneParam._m0[86u].y;
    vec4 _2869 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2854, _2855, (log2((isnan(cbSceneParam._m0[77u].w) ? _941 : (isnan(_941) ? cbSceneParam._m0[77u].w : min(_941, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2871 = _2869.x;
    float _2872 = _2869.y;
    float _2873 = _2869.z;
    float _2874 = _2869.w;
    float _2966;
    float _2968;
    float _2970;
    float _2972;
    if (_941 > cbSceneParam._m0[78u].w)
    {
        float _2929 = isnan(_941) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _941 : min(cbSceneParam._m0[80u].w, _941));
        float _2930 = _2929 / _941;
        float _2941 = _2930 * _991;
        float _2942 = _992 * _2930;
        float _2943 = (-0.0) - _2942;
        float _2944 = _2930 * _993;
        float _2946 = (cbSceneParam._m0[77u].w * _2943) / _2929;
        float _2947 = _2946 + cbSceneParam._m0[79u].w;
        float _2948 = cbSceneParam._m0[79u].w - _2942;
        float _2954 = sqrt(((_2941 * _2941) + (_2942 * _2942)) + (_2944 * _2944));
        float _2957 = (1.0 - (cbSceneParam._m0[77u].w / _2929)) * _2954;
        float _2962 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2964 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3117;
        if (abs((_2943 - _2946) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3117 = ((((_2947 > 0.0) ? exp2(_2962 * _2947) : (2.0 - exp2(_2964 * _2947))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2957;
        }
        else
        {
            float _3077 = 1.0 / cbSceneParam._m0[80u].x;
            float _3078 = isnan(_2948) ? _2947 : (isnan(_2947) ? _2948 : max(_2947, _2948));
            float _3079 = isnan(_2948) ? _2947 : (isnan(_2947) ? _2948 : min(_2947, _2948));
            float _3088 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : min(_3078, 0.0));
            float _3089 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : min(_3079, 0.0));
            _3117 = ((abs(_2954 / _2943) * cbSceneParam._m0[80u].y) * ((((_3088 - _3089) * 2.0) - ((exp2(_2962 * (isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0)))) - exp2(_2962 * (isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0))))) * _3077)) - ((exp2(_2964 * _3088) - exp2(_2964 * _3089)) * _3077))) + (_2957 * cbSceneParam._m0[80u].z);
        }
        vec4 _3119 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2854, _2855, 1.0), 0.0);
        float _3128 = exp2((_3117 * (-1.44269502162933349609375)) * (1.0 - _3119.w));
        float _3129 = log2(_3128);
        float _3145 = log2(_2874);
        _2966 = (exp2(_3145 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3129 * cbSceneParam._m0[78u].x)) * _3119.x) / cbSceneParam._m0[78u].x)) + _2871;
        _2968 = (exp2(_3145 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3129 * cbSceneParam._m0[78u].y)) * _3119.y) / cbSceneParam._m0[78u].y)) + _2872;
        _2970 = (exp2(_3145 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3129 * cbSceneParam._m0[78u].z)) * _3119.z) / cbSceneParam._m0[78u].z)) + _2873;
        _2972 = _3128 * _2874;
    }
    else
    {
        _2966 = _2871;
        _2968 = _2872;
        _2970 = _2873;
        _2972 = _2874;
    }
    float _2984 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2985 = _2984 == 3.0;
    float _2986 = log2(_2972);
    float _2993 = exp2(_2986 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0))) * (_2816 + ((isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))) * _1084))) + ((_2822 + ((isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0))) * _1892)) * cbPerFrame._m0[3u].x));
    float _2994 = exp2(_2986 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0))) * (_2818 + ((isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))) * _1084))) + ((_2824 + ((isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0))) * _1892)) * cbPerFrame._m0[3u].x));
    float _2995 = exp2(_2986 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0))) * (_2820 + ((isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))) * _1084))) + ((_2826 + ((isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0))) * _1892)) * cbPerFrame._m0[3u].x));
    float _3004 = (_2984 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3004 * (_2985 ? _2993 : (_2993 + (cbSceneParam._m0[72u].w * _2966)));
    SV_Target.y = _3004 * (_2985 ? _2994 : (_2994 + (cbSceneParam._m0[72u].w * _2968)));
    SV_Target.z = _3004 * (_2985 ? _2995 : (_2995 + (cbSceneParam._m0[72u].w * _2970)));
    SV_Target.w = cbInstanceData._m0[_2846].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2846].w;
}


