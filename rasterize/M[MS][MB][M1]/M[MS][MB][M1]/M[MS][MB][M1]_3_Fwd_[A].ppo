#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1014;
float _3400;
float _3401;
float _3402;
float _3403;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _237 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _239 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _240 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3412 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3423 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3434 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    uint _250 = uint(roundEven(NORMAL.w)) * 13u;
    uint _255 = _250 + 1u;
    uint _259 = _250 + 2u;
    float _268 = sqrt(((cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x)) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x));
    float _269 = _268 * TEXCOORD.z;
    float _270 = _268 * TEXCOORD.w;
    vec4 _283 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _269) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _270) + cbTextureTilingScale._m0[13u].w));
    vec4 _306 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _311 = _306.x * cbMtdParam._m0[9u].x;
    float _312 = _306.y * cbMtdParam._m0[9u].y;
    float _313 = _306.z * cbMtdParam._m0[9u].z;
    float _317 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _283.x) * _311;
    float _320 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _283.y) * _312;
    float _323 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _283.z) * _313;
    float _330 = ((_311 - _317) * (isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0)))) + _317;
    float _331 = ((_312 - _320) * (isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0)))) + _320;
    float _332 = ((_313 - _323) * (isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0)))) + _323;
    vec4 _345 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _269) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _270) + cbTextureTilingScale._m0[20u].w));
    vec4 _371 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _375 = _371.z;
    float _379 = (_371.x * 2.0) + (-1.0);
    float _380 = (_371.y * 2.0) + (-1.0);
    float _381 = dot(vec2(_379, _380), vec2(_379, _380));
    float _3445 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _386 = sqrt(1.0 - (isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0))));
    float _391 = _379 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_345.x * 2.0) + (-1.0)));
    float _392 = _380 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_345.y * 2.0) + (-1.0)));
    vec4 _405 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _407 = _405.x;
    float _412 = (((_345.z - _375) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _375;
    float _414 = cbMtdParam._m0[22u].x + _371.w;
    float _417 = fma(_386, _216 * NORMAL.x, fma(_392, _223 * TANGENT.x, (_209 * _201) * _391));
    float _420 = fma(_386, _216 * NORMAL.y, fma(_392, _223 * TANGENT.y, (_209 * _202) * _391));
    float _423 = fma(_386, _216 * NORMAL.z, fma(_392, _223 * TANGENT.z, (_209 * _203) * _391));
    float _427 = inversesqrt(dot(vec3(_417, _420, _423), vec3(_417, _420, _423)));
    float _428 = _427 * _417;
    float _429 = _427 * _420;
    float _430 = _427 * _423;
    float _3456 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _431 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
    float _3467 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _3478 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _3489 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _3500 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _3511 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _436 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
    float _450 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _492 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _502 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _492);
    float _503 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _492);
    float _504 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _492);
    float _508 = inversesqrt(dot(vec3(_502, _503, _504), vec3(_502, _503, _504)));
    float _509 = _502 * _508;
    float _510 = _503 * _508;
    float _511 = _504 * _508;
    vec4 _516 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _518 = _516.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _693 = sqrt(((_502 * _502) + (_503 * _503)) + (_504 * _504));
        float _699 = (cbMatDynParam._m0[5u].x * _693) + cbMatDynParam._m0[5u].y;
        float _3522 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
        float _700 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _704 = (cbMatDynParam._m0[5u].z * _693) + cbMatDynParam._m0[5u].w;
        float _3533 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0))) - _700)) + _700) < ((_518 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _530 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _531 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _551 = fma(_430, cbSceneParam._m0[5u].z, fma(_429, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _428));
    float _554 = fma(_430, cbSceneParam._m0[6u].z, fma(_429, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _428));
    float _557 = fma(_430, cbSceneParam._m0[7u].z, fma(_429, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _428));
    uint _570 = _250 + 9u;
    uint _571 = _570 + uint(cbMatDynParam._m0[0u].w);
    float _577 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0)))) * cbInstanceData._m0[_571].x;
    float _578 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0)))) * cbInstanceData._m0[_571].y;
    float _579 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0)))) * cbInstanceData._m0[_571].z;
    float _3544 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _580 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
    float _3555 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _581 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
    float _3566 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _582 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
    float _583 = 1.0 - _436;
    float _584 = _580 * _583;
    float _585 = _581 * _583;
    float _586 = _582 * _583;
    float _591 = (_580 + (-0.039999999105930328369140625)) * _436;
    float _592 = (_581 + (-0.039999999105930328369140625)) * _436;
    float _593 = (_582 + (-0.039999999105930328369140625)) * _436;
    float _594 = _591 + 0.039999999105930328369140625;
    float _596 = _592 + 0.039999999105930328369140625;
    float _597 = _593 + 0.039999999105930328369140625;
    vec4 _606 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _530, cbSceneParam._m0[86u].y * _531));
    float _610 = ((isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0))) * TEXCOORD_5.w) * _606.x;
    float _611 = dot(vec3(_428, _429, _430), vec3(_509, _510, _511));
    float _614 = _611 * 2.0;
    float _618 = (_614 * _428) - _509;
    float _619 = (_614 * _429) - _510;
    float _620 = (_614 * _430) - _511;
    float _624 = abs(dot(vec3(_509, _510, _511), vec3(_428, _429, _430)));
    float _3577 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _626 = sqrt(_431);
    float _639 = exp2((_626 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_626 * 3.0));
    float _645 = (1.0 - _639) * ((_626 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _646 = _639 * _626;
    float _674 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _678 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _682 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1013;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _738 = fma(_682, cbModelParam._m0[26u].z, fma(_678, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _674));
        float _742 = fma(_682, cbModelParam._m0[27u].z, fma(_678, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _674));
        float _746 = fma(_682, cbModelParam._m0[28u].z, fma(_678, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _674));
        float _771 = _674 + _428;
        float _772 = _678 + _429;
        float _773 = _682 + _430;
        float _783 = fma(_773, cbModelParam._m0[26u].z, fma(_772, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _771)) - _738;
        float _784 = fma(_773, cbModelParam._m0[27u].z, fma(_772, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _771)) - _742;
        float _785 = fma(_773, cbModelParam._m0[28u].z, fma(_772, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _771)) - _746;
        float _789 = inversesqrt(dot(vec3(_783, _784, _785), vec3(_783, _784, _785)));
        float _802 = ((_789 * _783) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_738 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _803 = ((_789 * _784) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_742 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _804 = ((_789 * _785) / cbModelParam._m0[34u].z) + ((((((_746 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _807 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_802, _803, _804), 0.0);
        vec4 _814 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_802, _803, _804), 0.0);
        vec4 _821 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_802, _803, _804), 0.0);
        vec4 _828 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_802, _803, _804), 0.0);
        float _841 = exp2((_807.w + (-0.5)) * 20.0) * 2.0;
        float _842 = _841 * (_807.x + (-0.5));
        float _843 = _841 * (_807.y + (-0.5));
        float _844 = _841 * (_807.z + (-0.5));
        float _851 = exp2((_814.w + (-0.5)) * 20.0) * 2.0;
        float _852 = _851 * (_814.x + (-0.5));
        float _853 = _851 * (_814.y + (-0.5));
        float _854 = _851 * (_814.z + (-0.5));
        float _861 = exp2((_821.w + (-0.5)) * 20.0) * 2.0;
        float _862 = _861 * (_821.x + (-0.5));
        float _863 = _861 * (_821.y + (-0.5));
        float _864 = _861 * (_821.z + (-0.5));
        float _871 = exp2((_828.w + (-0.5)) * 20.0) * 2.0;
        float _872 = _871 * (_828.x + (-0.5));
        float _873 = _871 * (_828.y + (-0.5));
        float _874 = _871 * (_828.z + (-0.5));
        float _875 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _876 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _877 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _878 = _842 * 0.5;
        float _879 = _852 * 0.5;
        float _880 = _862 * 0.5;
        float _881 = dot(vec3(_878, _879, _880), vec3(_878, _879, _880));
        float _886 = (_881 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_881);
        float _895 = (dot(vec3(_428, _429, _430), vec3(_886 * _878, _886 * _879, _886 * _880)) + 1.0) * 0.5;
        float _3603 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _905 = sqrt(((_879 * _879) + (_878 * _878)) + (_880 * _880)) / (_875 + 9.9999997473787516355514526367188e-06);
        float _3614 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _906 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _907 = _906 * 2.0;
        float _911 = (1.0 - _906) / (_906 + 1.0);
        float _3625 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _912 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _921 = ((((1.0 - _912) * (_907 + 2.0)) * exp2(log2(isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * (_907 + 1.0))) + _912) * _875;
        float _922 = _843 * 0.5;
        float _923 = _853 * 0.5;
        float _924 = _863 * 0.5;
        float _925 = dot(vec3(_922, _923, _924), vec3(_922, _923, _924));
        float _930 = (_925 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_925);
        float _938 = (dot(vec3(_428, _429, _430), vec3(_930 * _922, _930 * _923, _930 * _924)) + 1.0) * 0.5;
        float _3636 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _947 = sqrt(((_923 * _923) + (_922 * _922)) + (_924 * _924)) / (_876 + 9.9999997473787516355514526367188e-06);
        float _3647 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _948 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _949 = _948 * 2.0;
        float _953 = (1.0 - _948) / (_948 + 1.0);
        float _3658 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _963 = ((((1.0 - _954) * (_949 + 2.0)) * exp2(log2(isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))) * (_949 + 1.0))) + _954) * _876;
        float _964 = _844 * 0.5;
        float _965 = _854 * 0.5;
        float _966 = _864 * 0.5;
        float _967 = dot(vec3(_964, _965, _966), vec3(_964, _965, _966));
        float _972 = (_967 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_967);
        float _980 = (dot(vec3(_428, _429, _430), vec3(_972 * _964, _972 * _965, _972 * _966)) + 1.0) * 0.5;
        float _3669 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _989 = sqrt(((_965 * _965) + (_964 * _964)) + (_966 * _966)) / (_877 + 9.9999997473787516355514526367188e-06);
        float _3680 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _991 = _990 * 2.0;
        float _995 = (1.0 - _990) / (_990 + 1.0);
        float _3691 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1005 = ((((1.0 - _996) * (_991 + 2.0)) * exp2(log2(isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))) * (_991 + 1.0))) + _996) * _877;
        _1013 = _844;
        _1015 = _843;
        _1016 = _842;
        _1017 = _854;
        _1018 = _853;
        _1019 = _852;
        _1020 = _864;
        _1021 = _863;
        _1022 = _862;
        _1023 = _877;
        _1024 = _876;
        _1025 = _875;
        _1026 = cbModelParam._m0[36u].z * (isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0)));
        _1027 = cbModelParam._m0[36u].z * (isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0)));
        _1028 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0)));
    }
    else
    {
        _1013 = _1014;
        _1015 = _1014;
        _1016 = _1014;
        _1017 = _1014;
        _1018 = _1014;
        _1019 = _1014;
        _1020 = _1014;
        _1021 = _1014;
        _1022 = _1014;
        _1023 = _1014;
        _1024 = _1014;
        _1025 = _1014;
        _1026 = 0.0;
        _1027 = 0.0;
        _1028 = 0.0;
    }
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1056 = fma(_682, cbModelParam._m0[30u].z, fma(_678, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _674));
        float _1060 = fma(_682, cbModelParam._m0[31u].z, fma(_678, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _674));
        float _1064 = fma(_682, cbModelParam._m0[32u].z, fma(_678, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _674));
        float _1087 = _674 + _428;
        float _1088 = _678 + _429;
        float _1089 = _682 + _430;
        float _1099 = fma(_1089, cbModelParam._m0[30u].z, fma(_1088, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1087)) - _1056;
        float _1100 = fma(_1089, cbModelParam._m0[31u].z, fma(_1088, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1087)) - _1060;
        float _1101 = fma(_1089, cbModelParam._m0[32u].z, fma(_1088, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1087)) - _1064;
        float _1105 = inversesqrt(dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101)));
        float _1118 = ((_1105 * _1099) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1056 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1119 = ((_1105 * _1100) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1060 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1120 = ((_1105 * _1101) / cbModelParam._m0[35u].z) + ((((((_1064 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        vec4 _1136 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        vec4 _1143 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        float _1155 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1122.x + (-0.5));
        float _1157 = _1155 * (_1122.y + (-0.5));
        float _1158 = _1155 * (_1122.z + (-0.5));
        float _1165 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1166 = _1165 * (_1129.x + (-0.5));
        float _1167 = _1165 * (_1129.y + (-0.5));
        float _1168 = _1165 * (_1129.z + (-0.5));
        float _1175 = exp2((_1136.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1136.x + (-0.5));
        float _1177 = _1175 * (_1136.y + (-0.5));
        float _1178 = _1175 * (_1136.z + (-0.5));
        float _1185 = exp2((_1143.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1143.x + (-0.5));
        float _1187 = _1185 * (_1143.y + (-0.5));
        float _1188 = _1185 * (_1143.z + (-0.5));
        float _1189 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1190 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1191 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1192 = _1156 * 0.5;
        float _1193 = _1166 * 0.5;
        float _1194 = _1176 * 0.5;
        float _1195 = dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194));
        float _1200 = (_1195 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1195);
        float _1208 = (dot(vec3(_428, _429, _430), vec3(_1200 * _1192, _1200 * _1193, _1200 * _1194)) + 1.0) * 0.5;
        float _3732 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1217 = sqrt(((_1193 * _1193) + (_1192 * _1192)) + (_1194 * _1194)) / (_1189 + 9.9999997473787516355514526367188e-06);
        float _3743 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1219 = _1218 * 2.0;
        float _1223 = (1.0 - _1218) / (_1218 + 1.0);
        float _3754 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1233 = ((((1.0 - _1224) * (_1219 + 2.0)) * exp2(log2(isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * (_1219 + 1.0))) + _1224) * _1189;
        float _1234 = _1157 * 0.5;
        float _1235 = _1167 * 0.5;
        float _1236 = _1177 * 0.5;
        float _1237 = dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236));
        float _1242 = (_1237 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1237);
        float _1250 = (dot(vec3(_428, _429, _430), vec3(_1242 * _1234, _1242 * _1235, _1242 * _1236)) + 1.0) * 0.5;
        float _3765 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1259 = sqrt(((_1235 * _1235) + (_1234 * _1234)) + (_1236 * _1236)) / (_1190 + 9.9999997473787516355514526367188e-06);
        float _3776 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1261 = _1260 * 2.0;
        float _1265 = (1.0 - _1260) / (_1260 + 1.0);
        float _3787 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1275 = ((((1.0 - _1266) * (_1261 + 2.0)) * exp2(log2(isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * (_1261 + 1.0))) + _1266) * _1190;
        float _1276 = _1158 * 0.5;
        float _1277 = _1168 * 0.5;
        float _1278 = _1178 * 0.5;
        float _1279 = dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278));
        float _1284 = (_1279 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1279);
        float _1292 = (dot(vec3(_428, _429, _430), vec3(_1284 * _1276, _1284 * _1277, _1284 * _1278)) + 1.0) * 0.5;
        float _3798 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1301 = sqrt(((_1277 * _1277) + (_1276 * _1276)) + (_1278 * _1278)) / (_1191 + 9.9999997473787516355514526367188e-06);
        float _3809 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1303 = _1302 * 2.0;
        float _1307 = (1.0 - _1302) / (_1302 + 1.0);
        float _3820 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1317 = ((((1.0 - _1308) * (_1303 + 2.0)) * exp2(log2(isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * (_1303 + 1.0))) + _1308) * _1191;
        _1325 = _1158;
        _1326 = _1157;
        _1327 = _1156;
        _1328 = _1168;
        _1329 = _1167;
        _1330 = _1166;
        _1331 = _1178;
        _1332 = _1177;
        _1333 = _1176;
        _1334 = _1191;
        _1335 = _1190;
        _1336 = _1189;
        _1337 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)));
        _1338 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)));
        _1339 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)));
    }
    else
    {
        _1325 = _1014;
        _1326 = _1014;
        _1327 = _1014;
        _1328 = _1014;
        _1329 = _1014;
        _1330 = _1014;
        _1331 = _1014;
        _1332 = _1014;
        _1333 = _1014;
        _1334 = _1014;
        _1335 = _1014;
        _1336 = _1014;
        _1337 = 0.0;
        _1338 = 0.0;
        _1339 = 0.0;
    }
    float _1349 = (cbModelParam._m0[1u].x * (_1337 - _1026)) + _1026;
    float _1350 = (cbModelParam._m0[1u].x * (_1338 - _1027)) + _1027;
    float _1351 = (cbModelParam._m0[1u].x * (_1339 - _1028)) + _1028;
    float _1372 = fma(_1351, cbSceneParam._m0[89u].z, fma(_1350, cbSceneParam._m0[89u].y, _1349 * cbSceneParam._m0[89u].x));
    float _1375 = fma(_1351, cbSceneParam._m0[90u].z, fma(_1350, cbSceneParam._m0[90u].y, _1349 * cbSceneParam._m0[90u].x));
    float _1378 = fma(_1351, cbSceneParam._m0[91u].z, fma(_1350, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1349));
    float _1393 = _618 * 0.5;
    float _1394 = _619 * 0.5;
    float _1395 = _620 * 0.5;
    float _1396 = dot(vec4(_1393, _1394, _1395, 1.0), vec4(_1327, _1330, _1333, _1336));
    float _1399 = dot(vec4(_1393, _1394, _1395, 1.0), vec4(_1326, _1329, _1332, _1335));
    float _1402 = dot(vec4(_1393, _1394, _1395, 1.0), vec4(_1325, _1328, _1331, _1334));
    float _1436;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1409 = dot(vec4(_1393, _1394, _1395, 1.0), vec4(_1013, _1017, _1020, _1023));
        float _1413 = dot(vec4(_1393, _1394, _1395, 1.0), vec4(_1015, _1018, _1021, _1024));
        float _1417 = dot(vec4(_1393, _1394, _1395, 1.0), vec4(_1016, _1019, _1022, _1025));
        float _1424 = dot(vec4(cbModelParam._m0[39u]), vec4(_1393, _1394, _1395, 1.0));
        _1436 = dot(vec3(isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)), isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)), isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1424) ? 0.0 : (isnan(0.0) ? _1424 : max(0.0, _1424))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1436 = 1.0;
    }
    float _1447;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1438 = dot(vec4(cbModelParam._m0[40u]), vec4(_1393, _1394, _1395, 1.0));
        _1447 = dot(vec3(isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)), isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)), isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1438) ? 0.0 : (isnan(0.0) ? _1438 : max(0.0, _1438))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1447 = 1.0;
    }
    float _1451 = (_1447 * cbModelParam._m0[1u].x) + (_1436 * (1.0 - cbModelParam._m0[1u].x));
    float _1461 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _431);
    float _1462 = isnan(_1461) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1461 : min(cbModelParam._m0[25u].z, _1461));
    float _1544;
    float _1546;
    float _1548;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1511 = fma(_682, cbModelParam._m0[13u].z, fma(_678, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _674)) + cbModelParam._m0[13u].w;
        float _1515 = fma(_682, cbModelParam._m0[14u].z, fma(_678, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _674)) + cbModelParam._m0[14u].w;
        float _1519 = fma(_682, cbModelParam._m0[15u].z, fma(_678, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _674)) + cbModelParam._m0[15u].w;
        float _1522 = fma(_620, cbModelParam._m0[13u].z, fma(_619, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _618));
        float _1525 = fma(_620, cbModelParam._m0[14u].z, fma(_619, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _618));
        float _1528 = fma(_620, cbModelParam._m0[15u].z, fma(_619, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _618));
        float _1556;
        if (_1522 > 0.0)
        {
            _1556 = abs((1.0 - _1511) / _1522);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1522 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1511 + 1.0) / _1522);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1556 = frontier_phi_17_15_ladder;
        }
        float _1762;
        if (_1525 > 0.0)
        {
            _1762 = abs((1.0 - _1515) / _1525);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1525 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1515 + 1.0) / _1525);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1762 = frontier_phi_26_22_ladder;
        }
        float _2016;
        if (_1528 > 0.0)
        {
            _2016 = abs((1.0 - _1519) / _1528);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1528 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1519 + 1.0) / _1528);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2016 = frontier_phi_38_33_ladder;
        }
        float _2018 = isnan(_1762) ? _1556 : (isnan(_1556) ? _1762 : min(_1556, _1762));
        float _2019 = isnan(_2016) ? _2018 : (isnan(_2018) ? _2016 : min(_2018, _2016));
        float _2023 = (_2019 * _1522) + _1511;
        float _2024 = (_2019 * _1525) + _1515;
        float _2025 = (_2019 * _1528) + _1519;
        float _2026 = _2019 * 9.9999997473787516355514526367188e-05;
        float _2028 = (-1.0) - _2026;
        float _2030 = _2026 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2025 > _2030) || ((_2025 < _2028) || ((_2024 > _2030) || ((_2024 < _2028) || ((_2023 < _2028) || (_2023 > _2030))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2153 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2025, cbModelParam._m0[9u].z, fma(_2024, cbModelParam._m0[9u].y, _2023 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2025, cbModelParam._m0[10u].z, fma(_2024, cbModelParam._m0[10u].y, _2023 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2025, cbModelParam._m0[11u].z, fma(_2024, cbModelParam._m0[11u].y, _2023 * cbModelParam._m0[11u].x))), _1462);
            frontier_phi_16_38_ladder = _2153.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2153.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2153.x * cbModelParam._m0[1u].y;
        }
        _1544 = frontier_phi_16_38_ladder_2;
        _1546 = frontier_phi_16_38_ladder_1;
        _1548 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1532 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_618, _619, _620), _1462);
        _1544 = _1532.x * cbModelParam._m0[1u].y;
        _1546 = _1532.y * cbModelParam._m0[1u].y;
        _1548 = _1532.z * cbModelParam._m0[1u].y;
    }
    float _1552 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _431);
    float _1553 = isnan(_1552) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1552 : min(cbModelParam._m0[25u].w, _1552));
    float _1645;
    float _1647;
    float _1649;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1609 = fma(_682, cbModelParam._m0[21u].z, fma(_678, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _674)) + cbModelParam._m0[21u].w;
        float _1613 = fma(_682, cbModelParam._m0[22u].z, fma(_678, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _674)) + cbModelParam._m0[22u].w;
        float _1617 = fma(_682, cbModelParam._m0[23u].z, fma(_678, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _674)) + cbModelParam._m0[23u].w;
        float _1620 = fma(_620, cbModelParam._m0[21u].z, fma(_619, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _618));
        float _1623 = fma(_620, cbModelParam._m0[22u].z, fma(_619, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _618));
        float _1626 = fma(_620, cbModelParam._m0[23u].z, fma(_619, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _618));
        float _1767;
        if (_1620 > 0.0)
        {
            _1767 = abs((1.0 - _1609) / _1620);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1620 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1609 + 1.0) / _1620);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1767 = frontier_phi_28_24_ladder;
        }
        float _2043;
        if (_1623 > 0.0)
        {
            _2043 = abs((1.0 - _1613) / _1623);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1623 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1613 + 1.0) / _1623);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2043 = frontier_phi_40_35_ladder;
        }
        float _2256;
        if (_1626 > 0.0)
        {
            _2256 = abs((1.0 - _1617) / _1626);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1626 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1617 + 1.0) / _1626);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2256 = frontier_phi_49_46_ladder;
        }
        float _2258 = isnan(_2043) ? _1767 : (isnan(_1767) ? _2043 : min(_1767, _2043));
        float _2259 = isnan(_2256) ? _2258 : (isnan(_2258) ? _2256 : min(_2258, _2256));
        float _2263 = (_2259 * _1620) + _1609;
        float _2264 = (_2259 * _1623) + _1613;
        float _2265 = (_2259 * _1626) + _1617;
        float _2266 = _2259 * 9.9999997473787516355514526367188e-05;
        float _2267 = (-1.0) - _2266;
        float _2269 = _2266 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2265 > _2269) || ((_2265 < _2267) || ((_2264 > _2269) || ((_2264 < _2267) || ((_2263 < _2267) || (_2263 > _2269))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2464 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2265, cbModelParam._m0[17u].z, fma(_2264, cbModelParam._m0[17u].y, _2263 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2265, cbModelParam._m0[18u].z, fma(_2264, cbModelParam._m0[18u].y, _2263 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2265, cbModelParam._m0[19u].z, fma(_2264, cbModelParam._m0[19u].y, _2263 * cbModelParam._m0[19u].x))), _1553);
            frontier_phi_25_49_ladder = _2464.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2464.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2464.x * cbModelParam._m0[1u].z;
        }
        _1645 = frontier_phi_25_49_ladder_2;
        _1647 = frontier_phi_25_49_ladder_1;
        _1649 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1629 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_618, _619, _620), _1553);
        _1645 = _1629.x * cbModelParam._m0[1u].z;
        _1647 = _1629.y * cbModelParam._m0[1u].z;
        _1649 = _1629.z * cbModelParam._m0[1u].z;
    }
    float _1662 = (((_645 * _594) + _646) * _610) * ((cbModelParam._m0[1u].w * (_1645 - _1544)) + _1544);
    float _1664 = (((_645 * _596) + _646) * _610) * ((cbModelParam._m0[1u].w * (_1647 - _1546)) + _1546);
    float _1666 = (((_645 * _597) + _646) * _610) * ((cbModelParam._m0[1u].w * (_1649 - _1548)) + _1548);
    float _1669 = fma(_1666, cbSceneParam._m0[89u].z, fma(_1664, cbSceneParam._m0[89u].y, _1662 * cbSceneParam._m0[89u].x));
    float _1672 = fma(_1666, cbSceneParam._m0[90u].z, fma(_1664, cbSceneParam._m0[90u].y, _1662 * cbSceneParam._m0[90u].x));
    float _1675 = fma(_1666, cbSceneParam._m0[91u].z, fma(_1664, cbSceneParam._m0[91u].y, _1662 * cbSceneParam._m0[91u].x));
    uvec4 _1685 = floatBitsToUint(cbInstanceData._m0[_250 + 5u]);
    uint _1687 = _1685.x * 14u;
    uint _1688 = _1687 + 13u;
    float _1695 = _610 + (-1.0);
    float _1700 = (cbLight._m0[_1688].x * _1695) + 1.0;
    float _1701 = (cbLight._m0[_1688].y * _1695) + 1.0;
    float _1702 = (cbLight._m0[_1688].z * _1695) + 1.0;
    float _1703 = (cbLight._m0[_1688].w * _1695) + 1.0;
    uint _1704 = _1687 + 5u;
    float _1710 = isnan(1.0) ? _1701 : (isnan(_1701) ? 1.0 : min(_1701, 1.0));
    uint _1714 = _1687 + 4u;
    float _1721 = isnan(1.0) ? _1700 : (isnan(_1700) ? 1.0 : min(_1700, 1.0));
    uint _1725 = _1687 | 1u;
    float _1736 = dot(vec3(cbLight._m0[_1687].xyz), vec3(_428, _429, _430));
    float _1739 = dot(vec3(cbLight._m0[_1725].xyz), vec3(_428, _429, _430));
    float _3956 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
    float _3967 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
    float _1744 = (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * 0.3183098733425140380859375;
    float _1746 = (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * 0.3183098733425140380859375;
    float _1753 = ((cbLight._m0[_1704].x * _1710) * _1746) + ((cbLight._m0[_1714].x * _1721) * _1744);
    float _1754 = ((_1710 * cbLight._m0[_1704].y) * _1746) + ((_1721 * cbLight._m0[_1714].y) * _1744);
    float _1755 = ((_1710 * cbLight._m0[_1704].z) * _1746) + ((_1721 * cbLight._m0[_1714].z) * _1744);
    uvec4 _1759 = floatBitsToUint(cbLight._m0[_1687 + 12u]);
    bool _1761 = _1759.x == 0u;
    float _1772;
    float _1774;
    float _1776;
    if (_1761)
    {
        _1772 = _1753;
        _1774 = _1754;
        _1776 = _1755;
    }
    else
    {
        uint _1780 = _1687 + 6u;
        float _1796 = (dot(vec3(cbLight._m0[_1687 + 2u].xyz), vec3(_428, _429, _430)) * 0.5) + 0.5;
        float _1797 = _1796 * _1796;
        float _3978 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1798 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1799 = isnan(1.0) ? _1702 : (isnan(_1702) ? 1.0 : min(_1702, 1.0));
        _1772 = (((cbLight._m0[_1780].x * 0.3183098733425140380859375) * _1798) * _1799) + _1753;
        _1774 = (((cbLight._m0[_1780].y * 0.3183098733425140380859375) * _1798) * _1799) + _1754;
        _1776 = (((cbLight._m0[_1780].z * 0.3183098733425140380859375) * _1798) * _1799) + _1755;
    }
    bool _1779 = _1759.y == 0u;
    float _1817;
    float _1819;
    float _1821;
    if (_1779)
    {
        _1817 = _1772;
        _1819 = _1774;
        _1821 = _1776;
    }
    else
    {
        uint _1987 = _1687 + 7u;
        float _2003 = (dot(vec3(cbLight._m0[_1687 + 3u].xyz), vec3(_428, _429, _430)) * 0.5) + 0.5;
        float _2004 = _2003 * _2003;
        float _3994 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
        float _2005 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _2006 = isnan(1.0) ? _1703 : (isnan(_1703) ? 1.0 : min(_1703, 1.0));
        _1817 = (((cbLight._m0[_1987].x * 0.3183098733425140380859375) * _2005) * _2006) + _1772;
        _1819 = (((cbLight._m0[_1987].y * 0.3183098733425140380859375) * _2005) * _2006) + _1774;
        _1821 = (((cbLight._m0[_1987].z * 0.3183098733425140380859375) * _2005) * _2006) + _1776;
    }
    uint _1824 = _1687 + 8u;
    float _1837 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1687].w)) * _431) * 0.949999988079071044921875);
    float _1838 = _1837 * _1837;
    float _1839 = cbLight._m0[_1687].x + _509;
    float _1840 = cbLight._m0[_1687].y + _510;
    float _1841 = cbLight._m0[_1687].z + _511;
    float _1845 = inversesqrt(dot(vec3(_1839, _1840, _1841), vec3(_1839, _1840, _1841)));
    float _1846 = _1845 * _1839;
    float _1847 = _1845 * _1840;
    float _1848 = _1845 * _1841;
    float _1849 = dot(vec3(_428, _429, _430), vec3(cbLight._m0[_1687].xyz));
    float _4010 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
    float _1852 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _4021 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _1853 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    float _1854 = dot(vec3(_428, _429, _430), vec3(_1846, _1847, _1848));
    float _4032 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _1857 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _1858 = dot(vec3(cbLight._m0[_1687].xyz), vec3(_1846, _1847, _1848));
    float _4043 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _1862 = _1838 * _1838;
    float _1866 = ((_1857 * _1857) * (_1862 + (-1.0))) + 1.0;
    float _1874 = exp2(log2(1.0 - (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0)))) * 5.0);
    float _1875 = 0.959999978542327880859375 - _591;
    float _1877 = 0.959999978542327880859375 - _592;
    float _1878 = 0.959999978542327880859375 - _593;
    float _1885 = 1.0 - _1838;
    float _1896 = (0.5 / (((_1853 * ((_1852 * _1885) + _1838)) + 9.9999999392252902907785028219223e-09) + (((_1853 * _1885) + _1838) * _1852))) * _1852;
    float _4054 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
    float _1898 = (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_1862 / ((_1866 * _1866) * 3.141590118408203125));
    uint _1909 = _1687 + 9u;
    float _1920 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1725].w)) * _431) * 0.949999988079071044921875);
    float _1921 = _1920 * _1920;
    float _1922 = cbLight._m0[_1725].x + _509;
    float _1923 = cbLight._m0[_1725].y + _510;
    float _1924 = cbLight._m0[_1725].z + _511;
    float _1928 = inversesqrt(dot(vec3(_1922, _1923, _1924), vec3(_1922, _1923, _1924)));
    float _1929 = _1928 * _1922;
    float _1930 = _1928 * _1923;
    float _1931 = _1928 * _1924;
    float _1932 = dot(vec3(_428, _429, _430), vec3(cbLight._m0[_1725].xyz));
    float _4065 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
    float _1935 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _1936 = dot(vec3(_428, _429, _430), vec3(_1929, _1930, _1931));
    float _4076 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1939 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _1940 = dot(vec3(cbLight._m0[_1725].xyz), vec3(_1929, _1930, _1931));
    float _4087 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _1944 = _1921 * _1921;
    float _1948 = ((_1939 * _1939) * (_1944 + (-1.0))) + 1.0;
    float _1955 = exp2(log2(1.0 - (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0)))) * 5.0);
    float _1962 = 1.0 - _1921;
    float _1972 = (0.5 / (((_1853 * ((_1935 * _1962) + _1921)) + 9.9999999392252902907785028219223e-09) + (((_1853 * _1962) + _1921) * _1935))) * _1935;
    float _4098 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _1974 = (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_1944 / ((_1948 * _1948) * 3.141590118408203125));
    float _1984 = (((((_1955 * _1875) + _594) * cbLight._m0[_1909].x) * _1974) * _1710) + (((((_1874 * _1875) + _594) * cbLight._m0[_1824].x) * _1898) * _1721);
    float _1985 = (((((_1955 * _1877) + _596) * cbLight._m0[_1909].y) * _1974) * _1710) + (((((_1874 * _1877) + _596) * cbLight._m0[_1824].y) * _1898) * _1721);
    float _1986 = (((((_1955 * _1878) + _597) * cbLight._m0[_1909].z) * _1974) * _1710) + (((((_1874 * _1878) + _597) * cbLight._m0[_1824].z) * _1898) * _1721);
    float _2048;
    float _2050;
    float _2052;
    if (_1761)
    {
        _2048 = _1984;
        _2050 = _1985;
        _2052 = _1986;
    }
    else
    {
        uint _2054 = _1687 + 2u;
        uint _2058 = _1687 + 10u;
        float _2072 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2054].w)) * _431) * 0.949999988079071044921875);
        float _2073 = _2072 * _2072;
        float _2074 = cbLight._m0[_2054].x + _509;
        float _2075 = cbLight._m0[_2054].y + _510;
        float _2076 = cbLight._m0[_2054].z + _511;
        float _2080 = inversesqrt(dot(vec3(_2074, _2075, _2076), vec3(_2074, _2075, _2076)));
        float _2081 = _2080 * _2074;
        float _2082 = _2080 * _2075;
        float _2083 = _2080 * _2076;
        float _2084 = dot(vec3(_428, _429, _430), vec3(cbLight._m0[_2054].xyz));
        float _4109 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
        float _2087 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _2088 = dot(vec3(_428, _429, _430), vec3(_2081, _2082, _2083));
        float _4120 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2091 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _2092 = dot(vec3(cbLight._m0[_2054].xyz), vec3(_2081, _2082, _2083));
        float _4131 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        float _2096 = _2073 * _2073;
        float _2100 = ((_2091 * _2091) * (_2096 + (-1.0))) + 1.0;
        float _2107 = exp2(log2(1.0 - (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0)))) * 5.0);
        float _2114 = 1.0 - _2073;
        float _2124 = (0.5 / (((_1853 * ((_2087 * _2114) + _2073)) + 9.9999999392252902907785028219223e-09) + (((_1853 * _2114) + _2073) * _2087))) * _2087;
        float _4142 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
        float _2126 = (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_2096 / ((_2100 * _2100) * 3.141590118408203125));
        float _2127 = isnan(1.0) ? _1702 : (isnan(_1702) ? 1.0 : min(_1702, 1.0));
        _2048 = (((((_2107 * _1875) + _594) * cbLight._m0[_2058].x) * _2126) * _2127) + _1984;
        _2050 = (((((_2107 * _1877) + _596) * cbLight._m0[_2058].y) * _2126) * _2127) + _1985;
        _2052 = (((((_2107 * _1878) + _597) * cbLight._m0[_2058].z) * _2126) * _2127) + _1986;
    }
    float _2162;
    float _2164;
    float _2166;
    if (_1779)
    {
        _2162 = _2048;
        _2164 = _2050;
        _2166 = _2052;
    }
    else
    {
        uint _2173 = _1687 + 3u;
        uint _2177 = _1687 + 11u;
        float _2191 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2173].w)) * _431) * 0.949999988079071044921875);
        float _2192 = _2191 * _2191;
        float _2193 = cbLight._m0[_2173].x + _509;
        float _2194 = cbLight._m0[_2173].y + _510;
        float _2195 = cbLight._m0[_2173].z + _511;
        float _2199 = inversesqrt(dot(vec3(_2193, _2194, _2195), vec3(_2193, _2194, _2195)));
        float _2200 = _2199 * _2193;
        float _2201 = _2199 * _2194;
        float _2202 = _2199 * _2195;
        float _2203 = dot(vec3(_428, _429, _430), vec3(cbLight._m0[_2173].xyz));
        float _4158 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        float _2206 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _2207 = dot(vec3(_428, _429, _430), vec3(_2200, _2201, _2202));
        float _4169 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        float _2210 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _2211 = dot(vec3(cbLight._m0[_2173].xyz), vec3(_2200, _2201, _2202));
        float _4180 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        float _2215 = _2192 * _2192;
        float _2219 = ((_2210 * _2210) * (_2215 + (-1.0))) + 1.0;
        float _2226 = exp2(log2(1.0 - (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0)))) * 5.0);
        float _2233 = 1.0 - _2192;
        float _2243 = (0.5 / (((_1853 * ((_2206 * _2233) + _2192)) + 9.9999999392252902907785028219223e-09) + (((_1853 * _2233) + _2192) * _2206))) * _2206;
        float _4191 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        float _2245 = (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_2215 / ((_2219 * _2219) * 3.141590118408203125));
        float _2246 = isnan(1.0) ? _1703 : (isnan(_1703) ? 1.0 : min(_1703, 1.0));
        _2162 = (((((_2226 * _1875) + _594) * cbLight._m0[_2177].x) * _2245) * _2246) + _2048;
        _2164 = (((((_2226 * _1877) + _596) * cbLight._m0[_2177].y) * _2245) * _2246) + _2050;
        _2166 = (((((_2226 * _1878) + _597) * cbLight._m0[_2177].z) * _2245) * _2246) + _2052;
    }
    float _2381;
    float _2383;
    float _2385;
    float _2387;
    float _2389;
    float _2391;
    if (_1685.y == 0u)
    {
        float _2321 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2322 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2321;
        float _2323 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2321;
        float _2324 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2321;
        uvec4 _2336 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2337 = _2336.x;
        uint _2348 = uint((float(_2336.y) * floor(float(uint(cbSceneParam._m0[85u].y * _531) / _2337))) + floor(float(uint(cbSceneParam._m0[85u].x * _530) / _2337)));
        float _2358 = (log2(_2324 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2359 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        uint _2362 = uint(isnan(14.0) ? _2359 : (isnan(_2359) ? 14.0 : min(_2359, 14.0)));
        uvec4 _2367 = texelFetch(g_lightClusterGridBuffer, int(((_2362 << 2u) + (_2348 << 6u)) >> 2u));
        uint _2368 = _2367.x;
        uint _2369 = _2336.z;
        float _2469;
        float _2471;
        float _2473;
        float _2475;
        float _2477;
        float _2479;
        if (((((1u << ((_2369 >> 4u) & 15u)) + 4294967295u) & _2368) == 0u) || ((_2369 & 240u) == 0u))
        {
            _2469 = 0.0;
            _2471 = 0.0;
            _2473 = 0.0;
            _2475 = 0.0;
            _2477 = 0.0;
            _2479 = 0.0;
        }
        else
        {
            float _2470;
            float _2472;
            float _2474;
            float _2476;
            float _2478;
            float _2480;
            float _2622 = 0.0;
            float _2623 = 0.0;
            float _2624 = 0.0;
            float _2625 = 0.0;
            float _2626 = 0.0;
            float _2627 = 0.0;
            uint _2628 = 0u;
            uint _2637;
            bool _2638;
            for (;;)
            {
                _2637 = texelFetch(g_lightClassification, int((((_2362 << 5u) + (_2348 << 9u)) + (_2628 << 2u)) >> 2u)).x;
                _2638 = _2637 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2638)
                {
                    frontier_phi_66_pred = _2622;
                    frontier_phi_66_pred_1 = _2627;
                    frontier_phi_66_pred_2 = _2626;
                    frontier_phi_66_pred_3 = _2625;
                    frontier_phi_66_pred_4 = _2624;
                    frontier_phi_66_pred_5 = _2623;
                }
                else
                {
                    float _2767;
                    float _2768;
                    float _2769;
                    float _2770;
                    float _2771;
                    float _2772;
                    uint _2773;
                    _2767 = _2622;
                    _2768 = _2623;
                    _2769 = _2624;
                    _2770 = _2625;
                    _2771 = _2626;
                    _2772 = _2627;
                    _2773 = _2637;
                    float _2694;
                    float _2695;
                    float _2696;
                    float _2697;
                    float _2698;
                    float _2699;
                    for (;;)
                    {
                        uint _2777 = uint(findLSB(_2773)) + (_2628 << 5u);
                        uint _2774 = (_2773 + 4294967295u) & _2773;
                        uint _2779 = _2777 * 48u;
                        vec4 _2793 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2779)).x, texelFetch(g_PointLightRenderingBuffer, int(_2779 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2779 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2779 + 3u)).x));
                        uint _2799 = (_2777 * 48u) + 4u;
                        vec4 _2812 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2799)).x, texelFetch(g_PointLightRenderingBuffer, int(_2799 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2799 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2799 + 3u)).x));
                        uint _2818 = (_2777 * 48u) + 8u;
                        vec3 _2829 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2818)).x, texelFetch(g_PointLightRenderingBuffer, int(_2818 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2818 + 2u)).x));
                        float _2833 = _2793.x - _2322;
                        float _2834 = _2793.y - _2323;
                        float _2835 = _2793.z - _2324;
                        float _2836 = dot(vec3(_2833, _2834, _2835), vec3(_2833, _2834, _2835));
                        float _2839 = inversesqrt(_2836);
                        float _2840 = _2839 * _2833;
                        float _2841 = _2839 * _2834;
                        float _2842 = _2839 * _2835;
                        float _2843 = dot(vec3(_551, _554, _557), vec3(_2840, _2841, _2842));
                        float _2848 = 1.0 - (_2836 * _2793.w);
                        float _4217 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
                        float _2849 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
                        float _2850 = sqrt(_2836) * _2812.w;
                        float _2853 = 1.39999997615814208984375 / (_2850 + 1.39999997615814208984375);
                        float _2854 = _2853 * _2853;
                        float _2857 = ((1.0 - _2854) * _2843) + _2854;
                        float _2860 = _2850 * _2850;
                        float _2864 = ((isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0))) * _2849) / ((_2860 * 0.699999988079071044921875) + 1.0);
                        float _2868 = (-0.0) - _2322;
                        float _2869 = (-0.0) - _2323;
                        float _2870 = (-0.0) - _2324;
                        float _2874 = inversesqrt(dot(vec3(_2868, _2869, _2870), vec3(_2868, _2869, _2870)));
                        float _2875 = _2874 * _2868;
                        float _2876 = _2874 * _2869;
                        float _2877 = _2874 * _2870;
                        float _2885 = exp2(log2(1.0 / ((_2860 * 3.5) + 5.0)) * 0.25);
                        float _2886 = 1.0 - _626;
                        float _2893 = sqrt(1.0 - ((1.0 - (_2886 * _2886)) * (1.0 - (_2885 * _2885))));
                        float _2894 = _2893 * _2893;
                        float _2895 = _2894 * _2894;
                        float _2896 = _2875 + _2840;
                        float _2897 = _2876 + _2841;
                        float _2898 = _2877 + _2842;
                        float _2902 = inversesqrt(dot(vec3(_2896, _2897, _2898), vec3(_2896, _2897, _2898)));
                        float _2906 = dot(vec3(_551, _554, _557), vec3(_2875, _2876, _2877));
                        float _4233 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
                        float _2909 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
                        float _2910 = dot(vec3(_551, _554, _557), vec3(_2902 * _2896, _2902 * _2897, _2902 * _2898));
                        float _4244 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
                        float _2913 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
                        float _2917 = ((_2913 * _2913) * (_2895 + (-1.0))) + 1.0;
                        float _2918 = _2853 * _2894;
                        float _2919 = _2918 * _2918;
                        float _2922 = ((1.0 - _2919) * _2843) + _2919;
                        float _4255 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
                        float _2923 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
                        float _2924 = 1.0 - _2894;
                        float _2934 = (0.5 / (((_2923 * ((_2909 * _2924) + _2894)) + 9.9999999392252902907785028219223e-09) + (((_2923 * _2924) + _2894) * _2909))) * _2923;
                        float _4266 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
                        float _2945 = (((_2895 * 3.1415927410125732421875) * (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0)))) / ((_2917 * _2917) * ((_2860 * 2.1991131305694580078125) + 3.141590118408203125))) * _2849;
                        _2697 = (_2864 * _2812.x) + _2770;
                        _2698 = (_2864 * _2812.y) + _2771;
                        _2699 = (_2864 * _2812.z) + _2772;
                        _2694 = (_2945 * _2829.x) + _2767;
                        _2695 = (_2945 * _2829.y) + _2768;
                        _2696 = (_2945 * _2829.z) + _2769;
                        if (_2774 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2767 = _2694;
                            _2768 = _2695;
                            _2769 = _2696;
                            _2770 = _2697;
                            _2771 = _2698;
                            _2772 = _2699;
                            _2773 = _2774;
                        }
                    }
                    frontier_phi_66_pred = _2694;
                    frontier_phi_66_pred_1 = _2699;
                    frontier_phi_66_pred_2 = _2698;
                    frontier_phi_66_pred_3 = _2697;
                    frontier_phi_66_pred_4 = _2696;
                    frontier_phi_66_pred_5 = _2695;
                }
                _2470 = frontier_phi_66_pred;
                _2480 = frontier_phi_66_pred_1;
                _2478 = frontier_phi_66_pred_2;
                _2476 = frontier_phi_66_pred_3;
                _2474 = frontier_phi_66_pred_4;
                _2472 = frontier_phi_66_pred_5;
                uint _2629 = _2628 + 1u;
                if (_2629 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2622 = _2470;
                    _2623 = _2472;
                    _2624 = _2474;
                    _2625 = _2476;
                    _2626 = _2478;
                    _2627 = _2480;
                    _2628 = _2629;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2469 = _2470;
            _2471 = _2472;
            _2473 = _2474;
            _2475 = _2476;
            _2477 = _2478;
            _2479 = _2480;
        }
        uvec4 _2483 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2484 = _2483.z;
        uint _2486 = (_2484 >> 8u) & 15u;
        float _2590;
        float _2592;
        float _2594;
        float _2596;
        float _2598;
        float _2600;
        if (((4294967295u << _2486) & _2368) == 0u)
        {
            _2590 = _2469;
            _2592 = _2471;
            _2594 = _2473;
            _2596 = _2475;
            _2598 = _2477;
            _2600 = _2479;
        }
        else
        {
            float _2615 = inversesqrt(dot(vec3(_2322, _2323, _2324), vec3(_2322, _2323, _2324)));
            float _2616 = _2615 * _2322;
            float _2617 = _2615 * _2323;
            float _2618 = _2615 * _2324;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2486 < ((_2484 >> 12u) & 15u))
            {
                float _2591;
                float _2593;
                float _2595;
                float _2597;
                float _2599;
                float _2601;
                float _2750 = _2469;
                float _2751 = _2471;
                float _2752 = _2473;
                float _2753 = _2475;
                float _2754 = _2477;
                float _2755 = _2479;
                uint _2756 = _2486;
                uint _2765;
                bool _2766;
                for (;;)
                {
                    _2765 = texelFetch(g_lightClassification, int((((_2362 << 5u) + (_2348 << 9u)) + (_2756 << 2u)) >> 2u)).x;
                    _2766 = _2765 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2766)
                    {
                        frontier_phi_77_pred = _2755;
                        frontier_phi_77_pred_1 = _2754;
                        frontier_phi_77_pred_2 = _2753;
                        frontier_phi_77_pred_3 = _2752;
                        frontier_phi_77_pred_4 = _2751;
                        frontier_phi_77_pred_5 = _2750;
                    }
                    else
                    {
                        float _2959;
                        float _2960;
                        float _2961;
                        float _2962;
                        float _2963;
                        float _2964;
                        float _3253;
                        float _3254;
                        float _3255;
                        float _3256;
                        float _3257;
                        float _3258;
                        float _2972 = _2750;
                        float _2973 = _2751;
                        float _2974 = _2752;
                        float _2975 = _2753;
                        float _2976 = _2754;
                        float _2977 = _2755;
                        uint _2978 = _2765;
                        uint _2979;
                        vec4 _3004;
                        float _3005;
                        vec4 _3020;
                        vec3 _3032;
                        vec4 _3047;
                        vec4 _3062;
                        float _3109;
                        bool _3110;
                        for (;;)
                        {
                            uint _2989 = ((_2756 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2978));
                            _2979 = (_2978 + 4294967295u) & _2978;
                            uint _2991 = _2989 * 40u;
                            _3004 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2991)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 3u)).x));
                            _3005 = _3004.w;
                            uint _3007 = (_2989 * 40u) + 4u;
                            _3020 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3007)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 3u)).x));
                            uint _3022 = (_2989 * 40u) + 8u;
                            _3032 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3022)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 2u)).x));
                            uint _3034 = (_2989 * 40u) + 16u;
                            _3047 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3034)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 3u)).x));
                            uint _3049 = (_2989 * 40u) + 20u;
                            _3062 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3049)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 3u)).x));
                            uint _3065 = (_2989 * 40u) + 24u;
                            vec4 _3078 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3065)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 3u)).x));
                            uint _3084 = (_2989 * 40u) + 28u;
                            vec4 _3097 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3084)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 3u)).x));
                            _3109 = fma(_2324, _3097.z, fma(_2323, _3097.y, _3097.x * _2322)) + _3097.w;
                            _3110 = !((fma(_2324, _3078.z, fma(_2323, _3078.y, _3078.x * _2322)) + _3078.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3110)
                            {
                                float _3137 = _3004.x - _2322;
                                float _3138 = _3004.y - _2323;
                                float _3139 = _3004.z - _2324;
                                float _3140 = dot(vec3(_3137, _3138, _3139), vec3(_3137, _3138, _3139));
                                float _3143 = inversesqrt(_3140);
                                float _3144 = _3143 * _3137;
                                float _3145 = _3143 * _3138;
                                float _3146 = _3143 * _3139;
                                float _3150 = 1.0 - (_3140 / (_3005 * _3005));
                                float _4277 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                                float _3151 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
                                float _3155 = sqrt(_3140) * _3020.w;
                                float _3157 = 1.39999997615814208984375 / (_3155 + 1.39999997615814208984375);
                                float _3158 = _3157 * _3157;
                                float _3161 = ((1.0 - _3158) * dot(vec3(_3144, _3145, _3146), vec3(_551, _554, _557))) + _3158;
                                float _3164 = _3155 * _3155;
                                float _3168 = (fma(_2324, _3047.z, fma(_2323, _3047.y, _3047.x * _2322)) + _3047.w) / _3109;
                                float _3169 = (fma(_2324, _3062.z, fma(_2323, _3062.y, _3062.x * _2322)) + _3062.w) / _3109;
                                float _3173 = 1.0 - dot(vec2(_3168, _3169), vec2(_3168, _3169));
                                float _4293 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                                float _3174 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
                                float _3175 = _3174 * (((isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0))) * _3151) / ((_3164 * 0.699999988079071044921875) + 1.0));
                                float _3187 = exp2(log2(1.0 / ((_3164 * 3.5) + 5.0)) * 0.25);
                                float _3188 = 1.0 - _626;
                                float _3195 = sqrt(1.0 - ((1.0 - (_3188 * _3188)) * (1.0 - (_3187 * _3187))));
                                float _3196 = _3195 * _3195;
                                float _3197 = _3196 * _3196;
                                float _3198 = _3144 - _2616;
                                float _3199 = _3145 - _2617;
                                float _3200 = _3146 - _2618;
                                float _3204 = inversesqrt(dot(vec3(_3198, _3199, _3200), vec3(_3198, _3199, _3200)));
                                float _3208 = dot(vec3(_551, _554, _557), vec3((-0.0) - _2616, (-0.0) - _2617, (-0.0) - _2618));
                                float _4304 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                                float _3211 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
                                float _3212 = dot(vec3(_551, _554, _557), vec3(_3204 * _3198, _3204 * _3199, _3204 * _3200));
                                float _4315 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                                float _3215 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
                                float _3219 = ((_3215 * _3215) * (_3197 + (-1.0))) + 1.0;
                                float _3220 = _3157 * _3196;
                                float _3221 = _3220 * _3220;
                                float _3227 = ((1.0 - _3221) * dot(vec3(_551, _554, _557), vec3(_3144, _3145, _3146))) + _3221;
                                float _4326 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                                float _3228 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
                                float _3229 = 1.0 - _3196;
                                float _3239 = (0.5 / (((_3228 * ((_3211 * _3229) + _3196)) + 9.9999999392252902907785028219223e-09) + (((_3228 * _3229) + _3196) * _3211))) * _3228;
                                float _4337 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                                float _3249 = (_3174 * _3151) * (((_3197 * 3.1415927410125732421875) * (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0)))) / ((_3219 * _3219) * ((_3164 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3175 * _3020.y;
                                frontier_phi_83_pred_1 = _3175 * _3020.x;
                                frontier_phi_83_pred_2 = _3249 * _3032.z;
                                frontier_phi_83_pred_3 = _3249 * _3032.y;
                                frontier_phi_83_pred_4 = _3249 * _3032.x;
                                frontier_phi_83_pred_5 = _3175 * _3020.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3257 = frontier_phi_83_pred;
                            _3256 = frontier_phi_83_pred_1;
                            _3255 = frontier_phi_83_pred_2;
                            _3254 = frontier_phi_83_pred_3;
                            _3253 = frontier_phi_83_pred_4;
                            _3258 = frontier_phi_83_pred_5;
                            _2962 = _3256 + _2975;
                            _2963 = _3257 + _2976;
                            _2964 = _3258 + _2977;
                            _2959 = _3253 + _2972;
                            _2960 = _3254 + _2973;
                            _2961 = _3255 + _2974;
                            if (_2979 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2972 = _2959;
                                _2973 = _2960;
                                _2974 = _2961;
                                _2975 = _2962;
                                _2976 = _2963;
                                _2977 = _2964;
                                _2978 = _2979;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2964;
                        frontier_phi_77_pred_1 = _2963;
                        frontier_phi_77_pred_2 = _2962;
                        frontier_phi_77_pred_3 = _2961;
                        frontier_phi_77_pred_4 = _2960;
                        frontier_phi_77_pred_5 = _2959;
                    }
                    _2601 = frontier_phi_77_pred;
                    _2599 = frontier_phi_77_pred_1;
                    _2597 = frontier_phi_77_pred_2;
                    _2595 = frontier_phi_77_pred_3;
                    _2593 = frontier_phi_77_pred_4;
                    _2591 = frontier_phi_77_pred_5;
                    uint _2757 = _2756 + 1u;
                    if (_2757 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2750 = _2591;
                        _2751 = _2593;
                        _2752 = _2595;
                        _2753 = _2597;
                        _2754 = _2599;
                        _2755 = _2601;
                        _2756 = _2757;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2595;
                frontier_phi_58_59_ladder_1 = _2601;
                frontier_phi_58_59_ladder_2 = _2599;
                frontier_phi_58_59_ladder_3 = _2597;
                frontier_phi_58_59_ladder_4 = _2593;
                frontier_phi_58_59_ladder_5 = _2591;
            }
            else
            {
                frontier_phi_58_59_ladder = _2473;
                frontier_phi_58_59_ladder_1 = _2479;
                frontier_phi_58_59_ladder_2 = _2477;
                frontier_phi_58_59_ladder_3 = _2475;
                frontier_phi_58_59_ladder_4 = _2471;
                frontier_phi_58_59_ladder_5 = _2469;
            }
            _2590 = frontier_phi_58_59_ladder_5;
            _2592 = frontier_phi_58_59_ladder_4;
            _2594 = frontier_phi_58_59_ladder;
            _2596 = frontier_phi_58_59_ladder_3;
            _2598 = frontier_phi_58_59_ladder_2;
            _2600 = frontier_phi_58_59_ladder_1;
        }
        float _2605 = isnan(1.0) ? _610 : (isnan(_610) ? 1.0 : min(_610, 1.0));
        _2381 = (_2605 * _2596) + _1817;
        _2383 = (_2605 * _2598) + _1819;
        _2385 = (_2605 * _2600) + _1821;
        _2387 = ((_2590 * _594) * _2605) + _2162;
        _2389 = ((_2592 * _596) * _2605) + _2164;
        _2391 = ((_2594 * _597) * _2605) + _2166;
    }
    else
    {
        _2381 = _1817;
        _2383 = _1819;
        _2385 = _1821;
        _2387 = _2162;
        _2389 = _2164;
        _2391 = _2166;
    }
    float _4353 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _4364 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _4375 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _2408 = ((isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_2381 + ((isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0))) * _610))) + ((_2387 + ((isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))) * _1451)) * cbPerFrame._m0[3u].x);
    float _2409 = ((isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * (_2383 + ((isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0))) * _610))) + ((_2389 + ((isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))) * _1451)) * cbPerFrame._m0[3u].x);
    float _2410 = ((isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * (_2385 + ((isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0))) * _610))) + ((_2391 + ((isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))) * _1451)) * cbPerFrame._m0[3u].x);
    uint _2411 = _250 + 6u;
    float _2419 = _530 / cbSceneParam._m0[86u].x;
    float _2420 = _531 / cbSceneParam._m0[86u].y;
    vec4 _2434 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2419, _2420, (log2((isnan(cbSceneParam._m0[77u].w) ? _450 : (isnan(_450) ? cbSceneParam._m0[77u].w : min(_450, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2436 = _2434.x;
    float _2437 = _2434.y;
    float _2438 = _2434.z;
    float _2439 = _2434.w;
    float _2532;
    float _2534;
    float _2536;
    float _2538;
    if (_450 > cbSceneParam._m0[78u].w)
    {
        float _2494 = isnan(_450) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _450 : min(cbSceneParam._m0[80u].w, _450));
        float _2495 = _2494 / _450;
        float _2506 = _2495 * _502;
        float _2507 = _503 * _2495;
        float _2508 = (-0.0) - _2507;
        float _2510 = _2495 * _504;
        float _2512 = (cbSceneParam._m0[77u].w * _2508) / _2494;
        float _2513 = _2512 + cbSceneParam._m0[79u].w;
        float _2514 = cbSceneParam._m0[79u].w - _2507;
        float _2520 = sqrt(((_2506 * _2506) + (_2507 * _2507)) + (_2510 * _2510));
        float _2523 = (1.0 - (cbSceneParam._m0[77u].w / _2494)) * _2520;
        float _2528 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2530 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2707;
        if (abs((_2508 - _2512) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2707 = ((((_2513 > 0.0) ? exp2(_2528 * _2513) : (2.0 - exp2(_2530 * _2513))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2523;
        }
        else
        {
            float _2651 = 1.0 / cbSceneParam._m0[80u].x;
            float _2652 = isnan(_2514) ? _2513 : (isnan(_2513) ? _2514 : max(_2513, _2514));
            float _2653 = isnan(_2514) ? _2513 : (isnan(_2513) ? _2514 : min(_2513, _2514));
            float _2662 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : min(_2652, 0.0));
            float _2663 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : min(_2653, 0.0));
            _2707 = ((abs(_2520 / _2508) * cbSceneParam._m0[80u].y) * ((((_2662 - _2663) * 2.0) - ((exp2(_2528 * (isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0)))) - exp2(_2528 * (isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0))))) * _2651)) - ((exp2(_2530 * _2662) - exp2(_2530 * _2663)) * _2651))) + (_2523 * cbSceneParam._m0[80u].z);
        }
        vec4 _2709 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2419, _2420, 1.0), 0.0);
        float _2718 = exp2((_2707 * (-1.44269502162933349609375)) * (1.0 - _2709.w));
        float _2719 = log2(_2718);
        float _2735 = log2(_2439);
        _2532 = (exp2(_2735 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2719 * cbSceneParam._m0[78u].x)) * _2709.x) / cbSceneParam._m0[78u].x)) + _2436;
        _2534 = (exp2(_2735 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2719 * cbSceneParam._m0[78u].y)) * _2709.y) / cbSceneParam._m0[78u].y)) + _2437;
        _2536 = (exp2(_2735 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2719 * cbSceneParam._m0[78u].z)) * _2709.z) / cbSceneParam._m0[78u].z)) + _2438;
        _2538 = _2718 * _2439;
    }
    else
    {
        _2532 = _2436;
        _2534 = _2437;
        _2536 = _2438;
        _2538 = _2439;
    }
    bool _2745;
    vec4 _2548;
    vec4 _2570;
    float _2572;
    float _2576;
    float _2577;
    float _2578;
    float _2579;
    bool _2589;
    for (;;)
    {
        _2548 = cbMatDynParam._m0[0u];
        float _2550 = roundEven(_2548.y);
        bool _2551 = _2550 == 3.0;
        float _2552 = log2(_2538);
        float _2559 = exp2(_2552 * cbSceneParam._m0[78u].x) * _2408;
        float _2560 = exp2(_2552 * cbSceneParam._m0[78u].y) * _2409;
        float _2561 = exp2(_2552 * cbSceneParam._m0[78u].z) * _2410;
        float _2568 = _518 + (-0.5);
        _2570 = cbMtdParam._m0[1u];
        _2572 = _2570.y * _2568;
        float _2575 = (_2550 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2576 = _2575 * (_2551 ? _2559 : (_2559 + (cbSceneParam._m0[72u].w * _2532)));
        _2577 = _2575 * (_2551 ? _2560 : (_2560 + (cbSceneParam._m0[72u].w * _2534)));
        _2578 = _2575 * (_2551 ? _2561 : (_2561 + (cbSceneParam._m0[72u].w * _2536)));
        _2579 = _2568 * 0.999000012874603271484375;
        _2589 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2589)
        {
            if ((cbInstanceData._m0[_250 + 7u].x + _2579) < 0.5)
            {
                _2745 = true;
                break;
            }
        }
        uint _2686 = _570 + uint(_2548.w);
        if ((cbInstanceData._m0[_2686].w < 1.0) && ((cbInstanceData._m0[_2686].w + _2579) < 0.5))
        {
            _2745 = true;
            break;
        }
        if ((_2572 + 1.0) < _2570.x)
        {
            _2745 = true;
            break;
        }
        _2745 = false;
        break;
    }
    float _2950;
    if (_2745)
    {
        discard_state = true;
        _2950 = 0.0;
    }
    else
    {
        _2950 = cbInstanceData._m0[_2411].w;
    }
    SV_Target.x = _2576;
    SV_Target.y = _2577;
    SV_Target.z = _2578;
    SV_Target.w = _2950;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2411].w;
    discard_exit();
}


