#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1200;
float _3865;
float _3866;
float _3867;
float _3868;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _242 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _242 + 1u;
    uint _252 = _242 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _283 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _289 = _283.x * cbMtdParam._m0[11u].x;
    float _290 = _283.y * cbMtdParam._m0[11u].y;
    float _291 = _283.z * cbMtdParam._m0[11u].z;
    vec4 _310 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _348 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _350 = _348.x;
    float _362 = dot(vec4(_350, _348.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _379 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_350 - _362) * cbMtdParam._m0[24u].y) + _362) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3877 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _380 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    float _387 = (_380 * ((_310.x * cbMtdParam._m0[12u].x) - _289)) + _289;
    float _388 = (_380 * ((_310.y * cbMtdParam._m0[12u].y) - _290)) + _290;
    float _389 = (_380 * ((_310.z * cbMtdParam._m0[12u].z) - _291)) + _291;
    vec4 _407 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _424 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _426 = _424.x;
    float _427 = _424.y;
    float _428 = _424.z;
    float _437 = ((_407.z - _428) * _380) + _428;
    float _440 = ((((_407.x - _426) * _380) + _426) * 2.0) + (-1.0);
    float _442 = ((((_407.y - _427) * _380) + _427) * 2.0) + (-1.0);
    float _443 = dot(vec2(_440, _442), vec2(_440, _442));
    float _3888 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _448 = sqrt(1.0 - (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))));
    vec4 _461 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _479 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _481 = _479.x;
    float _482 = 1.0 - _481;
    float _495 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_481 - _482) * cbMtdParam._m0[24u].z) + _482) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3899 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _496 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _503 = (_496 * (cbMtdParam._m0[17u].x - _387)) + _387;
    float _504 = (_496 * (cbMtdParam._m0[17u].y - _388)) + _388;
    float _505 = (_496 * (cbMtdParam._m0[17u].z - _389)) + _389;
    vec4 _517 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _531 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _533 = _531.x;
    float _551 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _262) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _263) + cbTextureTilingScale._m0[9u].w)).x - _533) * _380) + _533;
    float _555 = ((_517.x - _551) * cbMtdParam._m0[19u].z) + _551;
    float _557 = _555 - (_555 * _496);
    vec4 _570 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _577 = (_570.x * 2.0) + (-1.0);
    float _578 = (_570.y * 2.0) + (-1.0);
    float _579 = dot(vec2(_577, _578), vec2(_577, _578));
    float _3910 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _587 = (_496 * (_570.z - _437)) + _437;
    float _599 = (((_577 - _440) + (cbMtdParam._m0[21u].x * _440)) * _496) + _440;
    float _600 = (((_578 - _442) + (cbMtdParam._m0[21u].x * _442)) * _496) + _442;
    float _601 = (_496 * (sqrt(1.0 - (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0)))) - _448)) + _448;
    float _606 = cbMtdParam._m0[22u].x + _461.w;
    float _609 = fma(_601, _229 * NORMAL.x, fma(_600, _236 * TANGENT.x, (_222 * _214) * _599));
    float _612 = fma(_601, _229 * NORMAL.y, fma(_600, _236 * TANGENT.y, (_222 * _215) * _599));
    float _615 = fma(_601, _229 * NORMAL.z, fma(_600, _236 * TANGENT.z, (_222 * _216) * _599));
    float _619 = inversesqrt(dot(vec3(_609, _612, _615), vec3(_609, _612, _615)));
    float _620 = _619 * _609;
    float _621 = _619 * _612;
    float _622 = _619 * _615;
    float _3921 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _623 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _3932 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _3943 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _3954 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _3965 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _3976 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _628 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _642 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _683 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _693 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _683);
    float _694 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _683);
    float _695 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _683);
    float _699 = inversesqrt(dot(vec3(_693, _694, _695), vec3(_693, _694, _695)));
    float _700 = _693 * _699;
    float _701 = _694 * _699;
    float _702 = _695 * _699;
    vec4 _707 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _709 = _707.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _881 = sqrt(((_693 * _693) + (_694 * _694)) + (_695 * _695));
        float _887 = (cbMatDynParam._m0[5u].x * _881) + cbMatDynParam._m0[5u].y;
        float _3987 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _888 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _892 = (cbMatDynParam._m0[5u].z * _881) + cbMatDynParam._m0[5u].w;
        float _3998 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) - _888)) + _888) < ((_709 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _720 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _721 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _739 = fma(_622, cbSceneParam._m0[5u].z, fma(_621, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _620));
    float _742 = fma(_622, cbSceneParam._m0[6u].z, fma(_621, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _620));
    float _745 = fma(_622, cbSceneParam._m0[7u].z, fma(_621, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _620));
    uint _758 = _242 + 9u;
    uint _759 = _758 + uint(cbMatDynParam._m0[0u].w);
    float _765 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0)))) * cbInstanceData._m0[_759].x;
    float _766 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0)))) * cbInstanceData._m0[_759].y;
    float _767 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0)))) * cbInstanceData._m0[_759].z;
    float _4009 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _768 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
    float _4020 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _769 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
    float _4031 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _770 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _771 = 1.0 - _628;
    float _772 = _768 * _771;
    float _773 = _769 * _771;
    float _774 = _770 * _771;
    float _779 = (_768 + (-0.039999999105930328369140625)) * _628;
    float _780 = (_769 + (-0.039999999105930328369140625)) * _628;
    float _781 = (_770 + (-0.039999999105930328369140625)) * _628;
    float _782 = _779 + 0.039999999105930328369140625;
    float _784 = _780 + 0.039999999105930328369140625;
    float _785 = _781 + 0.039999999105930328369140625;
    vec4 _794 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _720, cbSceneParam._m0[86u].y * _721));
    float _798 = ((isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * TEXCOORD_5.w) * _794.x;
    float _799 = dot(vec3(_620, _621, _622), vec3(_700, _701, _702));
    float _802 = _799 * 2.0;
    float _806 = (_802 * _620) - _700;
    float _807 = (_802 * _621) - _701;
    float _808 = (_802 * _622) - _702;
    float _812 = abs(dot(vec3(_700, _701, _702), vec3(_620, _621, _622)));
    float _4042 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _814 = sqrt(_623);
    float _827 = exp2((_814 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_814 * 3.0));
    float _833 = (1.0 - _827) * ((_814 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _834 = _827 * _814;
    float _862 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _866 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _870 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1199;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _924 = fma(_870, cbModelParam._m0[26u].z, fma(_866, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _862));
        float _928 = fma(_870, cbModelParam._m0[27u].z, fma(_866, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _862));
        float _932 = fma(_870, cbModelParam._m0[28u].z, fma(_866, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _862));
        float _957 = _862 + _620;
        float _958 = _866 + _621;
        float _959 = _870 + _622;
        float _969 = fma(_959, cbModelParam._m0[26u].z, fma(_958, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _957)) - _924;
        float _970 = fma(_959, cbModelParam._m0[27u].z, fma(_958, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _957)) - _928;
        float _971 = fma(_959, cbModelParam._m0[28u].z, fma(_958, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _957)) - _932;
        float _975 = inversesqrt(dot(vec3(_969, _970, _971), vec3(_969, _970, _971)));
        float _988 = ((_975 * _969) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_924 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _989 = ((_975 * _970) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_928 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _990 = ((_975 * _971) / cbModelParam._m0[34u].z) + ((((((_932 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _993 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        vec4 _1000 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        vec4 _1014 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        float _1027 = exp2((_993.w + (-0.5)) * 20.0) * 2.0;
        float _1028 = _1027 * (_993.x + (-0.5));
        float _1029 = _1027 * (_993.y + (-0.5));
        float _1030 = _1027 * (_993.z + (-0.5));
        float _1037 = exp2((_1000.w + (-0.5)) * 20.0) * 2.0;
        float _1038 = _1037 * (_1000.x + (-0.5));
        float _1039 = _1037 * (_1000.y + (-0.5));
        float _1040 = _1037 * (_1000.z + (-0.5));
        float _1047 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1048 = _1047 * (_1007.x + (-0.5));
        float _1049 = _1047 * (_1007.y + (-0.5));
        float _1050 = _1047 * (_1007.z + (-0.5));
        float _1057 = exp2((_1014.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1014.x + (-0.5));
        float _1059 = _1057 * (_1014.y + (-0.5));
        float _1060 = _1057 * (_1014.z + (-0.5));
        float _1061 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1062 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1063 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1064 = _1028 * 0.5;
        float _1065 = _1038 * 0.5;
        float _1066 = _1048 * 0.5;
        float _1067 = dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066));
        float _1072 = (_1067 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1067);
        float _1081 = (dot(vec3(_620, _621, _622), vec3(_1072 * _1064, _1072 * _1065, _1072 * _1066)) + 1.0) * 0.5;
        float _4068 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1091 = sqrt(((_1065 * _1065) + (_1064 * _1064)) + (_1066 * _1066)) / (_1061 + 9.9999997473787516355514526367188e-06);
        float _4079 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _1093 = _1092 * 2.0;
        float _1097 = (1.0 - _1092) / (_1092 + 1.0);
        float _4090 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1107 = ((((1.0 - _1098) * (_1093 + 2.0)) * exp2(log2(isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * (_1093 + 1.0))) + _1098) * _1061;
        float _1108 = _1029 * 0.5;
        float _1109 = _1039 * 0.5;
        float _1110 = _1049 * 0.5;
        float _1111 = dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110));
        float _1116 = (_1111 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1111);
        float _1124 = (dot(vec3(_620, _621, _622), vec3(_1116 * _1108, _1116 * _1109, _1116 * _1110)) + 1.0) * 0.5;
        float _4101 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1133 = sqrt(((_1109 * _1109) + (_1108 * _1108)) + (_1110 * _1110)) / (_1062 + 9.9999997473787516355514526367188e-06);
        float _4112 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _1135 = _1134 * 2.0;
        float _1139 = (1.0 - _1134) / (_1134 + 1.0);
        float _4123 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1149 = ((((1.0 - _1140) * (_1135 + 2.0)) * exp2(log2(isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * (_1135 + 1.0))) + _1140) * _1062;
        float _1150 = _1030 * 0.5;
        float _1151 = _1040 * 0.5;
        float _1152 = _1050 * 0.5;
        float _1153 = dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152));
        float _1158 = (_1153 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1153);
        float _1166 = (dot(vec3(_620, _621, _622), vec3(_1158 * _1150, _1158 * _1151, _1158 * _1152)) + 1.0) * 0.5;
        float _4134 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1175 = sqrt(((_1151 * _1151) + (_1150 * _1150)) + (_1152 * _1152)) / (_1063 + 9.9999997473787516355514526367188e-06);
        float _4145 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1177 = _1176 * 2.0;
        float _1181 = (1.0 - _1176) / (_1176 + 1.0);
        float _4156 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1191 = ((((1.0 - _1182) * (_1177 + 2.0)) * exp2(log2(isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * (_1177 + 1.0))) + _1182) * _1063;
        _1199 = _1030;
        _1201 = _1029;
        _1202 = _1028;
        _1203 = _1040;
        _1204 = _1039;
        _1205 = _1038;
        _1206 = _1050;
        _1207 = _1049;
        _1208 = _1048;
        _1209 = _1063;
        _1210 = _1062;
        _1211 = _1061;
        _1212 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0)));
        _1213 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)));
        _1214 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)));
    }
    else
    {
        _1199 = _1200;
        _1201 = _1200;
        _1202 = _1200;
        _1203 = _1200;
        _1204 = _1200;
        _1205 = _1200;
        _1206 = _1200;
        _1207 = _1200;
        _1208 = _1200;
        _1209 = _1200;
        _1210 = _1200;
        _1211 = _1200;
        _1212 = 0.0;
        _1213 = 0.0;
        _1214 = 0.0;
    }
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1242 = fma(_870, cbModelParam._m0[30u].z, fma(_866, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _862));
        float _1246 = fma(_870, cbModelParam._m0[31u].z, fma(_866, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _862));
        float _1250 = fma(_870, cbModelParam._m0[32u].z, fma(_866, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _862));
        float _1273 = _862 + _620;
        float _1274 = _866 + _621;
        float _1275 = _870 + _622;
        float _1285 = fma(_1275, cbModelParam._m0[30u].z, fma(_1274, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1273)) - _1242;
        float _1286 = fma(_1275, cbModelParam._m0[31u].z, fma(_1274, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1273)) - _1246;
        float _1287 = fma(_1275, cbModelParam._m0[32u].z, fma(_1274, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1273)) - _1250;
        float _1291 = inversesqrt(dot(vec3(_1285, _1286, _1287), vec3(_1285, _1286, _1287)));
        float _1304 = ((_1291 * _1285) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1242 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1305 = ((_1291 * _1286) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1246 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1306 = ((_1291 * _1287) / cbModelParam._m0[35u].z) + ((((((_1250 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1308 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1304, _1305, _1306), 0.0);
        vec4 _1315 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1304, _1305, _1306), 0.0);
        vec4 _1322 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1304, _1305, _1306), 0.0);
        vec4 _1329 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1304, _1305, _1306), 0.0);
        float _1341 = exp2((_1308.w + (-0.5)) * 20.0) * 2.0;
        float _1342 = _1341 * (_1308.x + (-0.5));
        float _1343 = _1341 * (_1308.y + (-0.5));
        float _1344 = _1341 * (_1308.z + (-0.5));
        float _1351 = exp2((_1315.w + (-0.5)) * 20.0) * 2.0;
        float _1352 = _1351 * (_1315.x + (-0.5));
        float _1353 = _1351 * (_1315.y + (-0.5));
        float _1354 = _1351 * (_1315.z + (-0.5));
        float _1361 = exp2((_1322.w + (-0.5)) * 20.0) * 2.0;
        float _1362 = _1361 * (_1322.x + (-0.5));
        float _1363 = _1361 * (_1322.y + (-0.5));
        float _1364 = _1361 * (_1322.z + (-0.5));
        float _1371 = exp2((_1329.w + (-0.5)) * 20.0) * 2.0;
        float _1372 = _1371 * (_1329.x + (-0.5));
        float _1373 = _1371 * (_1329.y + (-0.5));
        float _1374 = _1371 * (_1329.z + (-0.5));
        float _1375 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1376 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1377 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1378 = _1342 * 0.5;
        float _1379 = _1352 * 0.5;
        float _1380 = _1362 * 0.5;
        float _1381 = dot(vec3(_1378, _1379, _1380), vec3(_1378, _1379, _1380));
        float _1386 = (_1381 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1381);
        float _1394 = (dot(vec3(_620, _621, _622), vec3(_1386 * _1378, _1386 * _1379, _1386 * _1380)) + 1.0) * 0.5;
        float _4197 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1403 = sqrt(((_1379 * _1379) + (_1378 * _1378)) + (_1380 * _1380)) / (_1375 + 9.9999997473787516355514526367188e-06);
        float _4208 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _1405 = _1404 * 2.0;
        float _1409 = (1.0 - _1404) / (_1404 + 1.0);
        float _4219 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1419 = ((((1.0 - _1410) * (_1405 + 2.0)) * exp2(log2(isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_1405 + 1.0))) + _1410) * _1375;
        float _1420 = _1343 * 0.5;
        float _1421 = _1353 * 0.5;
        float _1422 = _1363 * 0.5;
        float _1423 = dot(vec3(_1420, _1421, _1422), vec3(_1420, _1421, _1422));
        float _1428 = (_1423 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1423);
        float _1436 = (dot(vec3(_620, _621, _622), vec3(_1428 * _1420, _1428 * _1421, _1428 * _1422)) + 1.0) * 0.5;
        float _4230 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1445 = sqrt(((_1421 * _1421) + (_1420 * _1420)) + (_1422 * _1422)) / (_1376 + 9.9999997473787516355514526367188e-06);
        float _4241 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _1447 = _1446 * 2.0;
        float _1451 = (1.0 - _1446) / (_1446 + 1.0);
        float _4252 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _1461 = ((((1.0 - _1452) * (_1447 + 2.0)) * exp2(log2(isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * (_1447 + 1.0))) + _1452) * _1376;
        float _1462 = _1344 * 0.5;
        float _1463 = _1354 * 0.5;
        float _1464 = _1364 * 0.5;
        float _1465 = dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464));
        float _1470 = (_1465 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1465);
        float _1478 = (dot(vec3(_620, _621, _622), vec3(_1470 * _1462, _1470 * _1463, _1470 * _1464)) + 1.0) * 0.5;
        float _4263 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1487 = sqrt(((_1463 * _1463) + (_1462 * _1462)) + (_1464 * _1464)) / (_1377 + 9.9999997473787516355514526367188e-06);
        float _4274 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _1489 = _1488 * 2.0;
        float _1493 = (1.0 - _1488) / (_1488 + 1.0);
        float _4285 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _1503 = ((((1.0 - _1494) * (_1489 + 2.0)) * exp2(log2(isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * (_1489 + 1.0))) + _1494) * _1377;
        _1511 = _1344;
        _1512 = _1343;
        _1513 = _1342;
        _1514 = _1354;
        _1515 = _1353;
        _1516 = _1352;
        _1517 = _1364;
        _1518 = _1363;
        _1519 = _1362;
        _1520 = _1377;
        _1521 = _1376;
        _1522 = _1375;
        _1523 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)));
        _1524 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)));
        _1525 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)));
    }
    else
    {
        _1511 = _1200;
        _1512 = _1200;
        _1513 = _1200;
        _1514 = _1200;
        _1515 = _1200;
        _1516 = _1200;
        _1517 = _1200;
        _1518 = _1200;
        _1519 = _1200;
        _1520 = _1200;
        _1521 = _1200;
        _1522 = _1200;
        _1523 = 0.0;
        _1524 = 0.0;
        _1525 = 0.0;
    }
    float _1535 = (cbModelParam._m0[1u].x * (_1523 - _1212)) + _1212;
    float _1536 = (cbModelParam._m0[1u].x * (_1524 - _1213)) + _1213;
    float _1537 = (cbModelParam._m0[1u].x * (_1525 - _1214)) + _1214;
    float _1558 = fma(_1537, cbSceneParam._m0[89u].z, fma(_1536, cbSceneParam._m0[89u].y, _1535 * cbSceneParam._m0[89u].x));
    float _1561 = fma(_1537, cbSceneParam._m0[90u].z, fma(_1536, cbSceneParam._m0[90u].y, _1535 * cbSceneParam._m0[90u].x));
    float _1564 = fma(_1537, cbSceneParam._m0[91u].z, fma(_1536, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1535));
    float _1579 = _806 * 0.5;
    float _1580 = _807 * 0.5;
    float _1581 = _808 * 0.5;
    float _1582 = dot(vec4(_1579, _1580, _1581, 1.0), vec4(_1513, _1516, _1519, _1522));
    float _1585 = dot(vec4(_1579, _1580, _1581, 1.0), vec4(_1512, _1515, _1518, _1521));
    float _1588 = dot(vec4(_1579, _1580, _1581, 1.0), vec4(_1511, _1514, _1517, _1520));
    float _1622;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1595 = dot(vec4(_1579, _1580, _1581, 1.0), vec4(_1199, _1203, _1206, _1209));
        float _1599 = dot(vec4(_1579, _1580, _1581, 1.0), vec4(_1201, _1204, _1207, _1210));
        float _1603 = dot(vec4(_1579, _1580, _1581, 1.0), vec4(_1202, _1205, _1208, _1211));
        float _1610 = dot(vec4(cbModelParam._m0[39u]), vec4(_1579, _1580, _1581, 1.0));
        _1622 = dot(vec3(isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)), isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)), isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1610) ? 0.0 : (isnan(0.0) ? _1610 : max(0.0, _1610))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1622 = 1.0;
    }
    float _1633;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1624 = dot(vec4(cbModelParam._m0[40u]), vec4(_1579, _1580, _1581, 1.0));
        _1633 = dot(vec3(isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)), isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0)), isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1624) ? 0.0 : (isnan(0.0) ? _1624 : max(0.0, _1624))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1633 = 1.0;
    }
    float _1637 = (_1633 * cbModelParam._m0[1u].x) + (_1622 * (1.0 - cbModelParam._m0[1u].x));
    float _1647 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _623);
    float _1648 = isnan(_1647) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1647 : min(cbModelParam._m0[25u].z, _1647));
    float _1729;
    float _1731;
    float _1733;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1696 = fma(_870, cbModelParam._m0[13u].z, fma(_866, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _862)) + cbModelParam._m0[13u].w;
        float _1700 = fma(_870, cbModelParam._m0[14u].z, fma(_866, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _862)) + cbModelParam._m0[14u].w;
        float _1704 = fma(_870, cbModelParam._m0[15u].z, fma(_866, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _862)) + cbModelParam._m0[15u].w;
        float _1707 = fma(_808, cbModelParam._m0[13u].z, fma(_807, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _806));
        float _1710 = fma(_808, cbModelParam._m0[14u].z, fma(_807, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _806));
        float _1713 = fma(_808, cbModelParam._m0[15u].z, fma(_807, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _806));
        float _1741;
        if (_1707 > 0.0)
        {
            _1741 = abs((1.0 - _1696) / _1707);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1707 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1696 + 1.0) / _1707);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1741 = frontier_phi_17_15_ladder;
        }
        float _1913;
        if (_1710 > 0.0)
        {
            _1913 = abs((1.0 - _1700) / _1710);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1710 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1700 + 1.0) / _1710);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1913 = frontier_phi_26_22_ladder;
        }
        float _2208;
        if (_1713 > 0.0)
        {
            _2208 = abs((1.0 - _1704) / _1713);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1713 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1704 + 1.0) / _1713);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2208 = frontier_phi_38_33_ladder;
        }
        float _2210 = isnan(_1913) ? _1741 : (isnan(_1741) ? _1913 : min(_1741, _1913));
        float _2211 = isnan(_2208) ? _2210 : (isnan(_2210) ? _2208 : min(_2210, _2208));
        float _2215 = (_2211 * _1707) + _1696;
        float _2216 = (_2211 * _1710) + _1700;
        float _2217 = (_2211 * _1713) + _1704;
        float _2218 = _2211 * 9.9999997473787516355514526367188e-05;
        float _2220 = (-1.0) - _2218;
        float _2222 = _2218 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2217 > _2222) || ((_2217 < _2220) || ((_2216 > _2222) || ((_2216 < _2220) || ((_2215 < _2220) || (_2215 > _2222))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2362 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2217, cbModelParam._m0[9u].z, fma(_2216, cbModelParam._m0[9u].y, _2215 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2217, cbModelParam._m0[10u].z, fma(_2216, cbModelParam._m0[10u].y, _2215 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2217, cbModelParam._m0[11u].z, fma(_2216, cbModelParam._m0[11u].y, _2215 * cbModelParam._m0[11u].x))), _1648);
            frontier_phi_16_38_ladder = _2362.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2362.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2362.x * cbModelParam._m0[1u].y;
        }
        _1729 = frontier_phi_16_38_ladder_2;
        _1731 = frontier_phi_16_38_ladder_1;
        _1733 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1717 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_806, _807, _808), _1648);
        _1729 = _1717.x * cbModelParam._m0[1u].y;
        _1731 = _1717.y * cbModelParam._m0[1u].y;
        _1733 = _1717.z * cbModelParam._m0[1u].y;
    }
    float _1737 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _623);
    float _1738 = isnan(_1737) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1737 : min(cbModelParam._m0[25u].w, _1737));
    float _1828;
    float _1830;
    float _1832;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1792 = fma(_870, cbModelParam._m0[21u].z, fma(_866, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _862)) + cbModelParam._m0[21u].w;
        float _1796 = fma(_870, cbModelParam._m0[22u].z, fma(_866, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _862)) + cbModelParam._m0[22u].w;
        float _1800 = fma(_870, cbModelParam._m0[23u].z, fma(_866, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _862)) + cbModelParam._m0[23u].w;
        float _1803 = fma(_808, cbModelParam._m0[21u].z, fma(_807, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _806));
        float _1806 = fma(_808, cbModelParam._m0[22u].z, fma(_807, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _806));
        float _1809 = fma(_808, cbModelParam._m0[23u].z, fma(_807, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _806));
        float _1918;
        if (_1803 > 0.0)
        {
            _1918 = abs((1.0 - _1792) / _1803);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1803 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1792 + 1.0) / _1803);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1918 = frontier_phi_28_24_ladder;
        }
        float _2235;
        if (_1806 > 0.0)
        {
            _2235 = abs((1.0 - _1796) / _1806);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1806 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1796 + 1.0) / _1806);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2235 = frontier_phi_40_35_ladder;
        }
        float _2573;
        if (_1809 > 0.0)
        {
            _2573 = abs((1.0 - _1800) / _1809);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1809 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1800 + 1.0) / _1809);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2573 = frontier_phi_50_47_ladder;
        }
        float _2575 = isnan(_2235) ? _1918 : (isnan(_1918) ? _2235 : min(_1918, _2235));
        float _2576 = isnan(_2573) ? _2575 : (isnan(_2575) ? _2573 : min(_2575, _2573));
        float _2580 = (_2576 * _1803) + _1792;
        float _2581 = (_2576 * _1806) + _1796;
        float _2582 = (_2576 * _1809) + _1800;
        float _2583 = _2576 * 9.9999997473787516355514526367188e-05;
        float _2584 = (-1.0) - _2583;
        float _2586 = _2583 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2582 > _2586) || ((_2582 < _2584) || ((_2581 > _2586) || ((_2581 < _2584) || ((_2580 < _2584) || (_2580 > _2586))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2704 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2582, cbModelParam._m0[17u].z, fma(_2581, cbModelParam._m0[17u].y, _2580 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2582, cbModelParam._m0[18u].z, fma(_2581, cbModelParam._m0[18u].y, _2580 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2582, cbModelParam._m0[19u].z, fma(_2581, cbModelParam._m0[19u].y, _2580 * cbModelParam._m0[19u].x))), _1738);
            frontier_phi_25_50_ladder = _2704.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2704.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2704.x * cbModelParam._m0[1u].z;
        }
        _1828 = frontier_phi_25_50_ladder_2;
        _1830 = frontier_phi_25_50_ladder_1;
        _1832 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1812 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_806, _807, _808), _1738);
        _1828 = _1812.x * cbModelParam._m0[1u].z;
        _1830 = _1812.y * cbModelParam._m0[1u].z;
        _1832 = _1812.z * cbModelParam._m0[1u].z;
    }
    float _1845 = (((_833 * _782) + _834) * _798) * ((cbModelParam._m0[1u].w * (_1828 - _1729)) + _1729);
    float _1847 = (((_833 * _784) + _834) * _798) * ((cbModelParam._m0[1u].w * (_1830 - _1731)) + _1731);
    float _1849 = (((_833 * _785) + _834) * _798) * ((cbModelParam._m0[1u].w * (_1832 - _1733)) + _1733);
    float _1852 = fma(_1849, cbSceneParam._m0[89u].z, fma(_1847, cbSceneParam._m0[89u].y, _1845 * cbSceneParam._m0[89u].x));
    float _1855 = fma(_1849, cbSceneParam._m0[90u].z, fma(_1847, cbSceneParam._m0[90u].y, _1845 * cbSceneParam._m0[90u].x));
    float _1858 = fma(_1849, cbSceneParam._m0[91u].z, fma(_1847, cbSceneParam._m0[91u].y, _1845 * cbSceneParam._m0[91u].x));
    float _1892 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1896 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1900 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1904 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1905 = _1892 / _1904;
    float _1906 = _1896 / _1904;
    float _1907 = _1900 / _1904;
    float _2054;
    float _2055;
    float _2056;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1934 = ((uint(_1907 > cbSceneParam._m0[59u].y) + uint(_1907 > cbSceneParam._m0[59u].x)) + uint(_1907 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1935 = _1934 + 43u;
        uint _1943 = _1934 + 44u;
        uint _1951 = _1934 + 45u;
        uint _1959 = _1934 + 46u;
        float _1970 = fma(_1904, cbSceneParam._m0[_1935].w, fma(_1900, cbSceneParam._m0[_1935].z, fma(_1896, cbSceneParam._m0[_1935].y, _1892 * cbSceneParam._m0[_1935].x)));
        float _1974 = fma(_1904, cbSceneParam._m0[_1943].w, fma(_1900, cbSceneParam._m0[_1943].z, fma(_1896, cbSceneParam._m0[_1943].y, _1892 * cbSceneParam._m0[_1943].x)));
        float _1982 = fma(_1904, cbSceneParam._m0[_1959].w, fma(_1900, cbSceneParam._m0[_1959].z, fma(_1896, cbSceneParam._m0[_1959].y, _1892 * cbSceneParam._m0[_1959].x)));
        float _1987 = cbSceneParam._m0[33u].z * _1982;
        float _1989 = cbSceneParam._m0[33u].w * _1982;
        float _1992 = fma(_1904, cbSceneParam._m0[_1951].w, fma(_1900, cbSceneParam._m0[_1951].z, fma(_1896, cbSceneParam._m0[_1951].y, _1892 * cbSceneParam._m0[_1951].x))) / _1982;
        float _2040 = (cbSceneParam._m0[33u].x - sqrt(((_1906 * _1906) + (_1905 * _1905)) + (_1907 * _1907))) * cbSceneParam._m0[33u].y;
        float _4411 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
        float _2047 = (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1987 + _1970) / _1982, (_1989 + _1974) / _1982), _1992), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1989 + _1970) / _1982, (_1974 - _1987) / _1982), _1992), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1970 - _1987) / _1982, (_1974 - _1989) / _1982), _1992), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1970 - _1989) / _1982, (_1987 + _1974) / _1982), _1992), 0.0)).x), vec4(0.25)));
        _2054 = 1.0 - (_2047 * cbSceneParam._m0[34u].x);
        _2055 = 1.0 - (_2047 * cbSceneParam._m0[34u].y);
        _2056 = 1.0 - (_2047 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2054 = 1.0;
        _2055 = 1.0;
        _2056 = 1.0;
    }
    float _2120;
    float _2122;
    float _2124;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2108 = fma(_1904, cbSceneParam._m0[63u].w, fma(_1900, cbSceneParam._m0[63u].z, fma(_1896, cbSceneParam._m0[63u].y, _1892 * cbSceneParam._m0[63u].x)));
        float _2109 = fma(_1904, cbSceneParam._m0[60u].w, fma(_1900, cbSceneParam._m0[60u].z, fma(_1896, cbSceneParam._m0[60u].y, _1892 * cbSceneParam._m0[60u].x))) / _2108;
        float _2110 = fma(_1904, cbSceneParam._m0[61u].w, fma(_1900, cbSceneParam._m0[61u].z, fma(_1896, cbSceneParam._m0[61u].y, _1892 * cbSceneParam._m0[61u].x))) / _2108;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2109 >= cbSceneParam._m0[64u].x) && (_2110 >= cbSceneParam._m0[64u].y)) && (_2109 <= cbSceneParam._m0[64u].z)) && (_2110 <= cbSceneParam._m0[64u].w))
        {
            float _2248 = fma(_1904, cbSceneParam._m0[62u].w, fma(_1900, cbSceneParam._m0[62u].z, fma(_1896, cbSceneParam._m0[62u].y, _1892 * cbSceneParam._m0[62u].x))) / _2108;
            float _2252 = isnan(cbSceneParam._m0[41u].w) ? _2248 : (isnan(_2248) ? cbSceneParam._m0[41u].w : max(_2248, cbSceneParam._m0[41u].w));
            float _2295 = (cbSceneParam._m0[33u].x - sqrt(((_1906 * _1906) + (_1905 * _1905)) + (_1907 * _1907))) * cbSceneParam._m0[33u].y;
            float _4427 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
            float _2302 = (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2109, cbSceneParam._m0[33u].w + _2110), _2252), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2109, _2110 - cbSceneParam._m0[33u].z), _2252), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2109 - cbSceneParam._m0[33u].z, _2110 - cbSceneParam._m0[33u].w), _2252), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2109 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2110), _2252), 0.0)).x), vec4(0.25)));
            float _2306 = 1.0 - (_2302 * cbSceneParam._m0[34u].x);
            float _2307 = 1.0 - (_2302 * cbSceneParam._m0[34u].y);
            float _2308 = 1.0 - (_2302 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2308) ? _2056 : (isnan(_2056) ? _2308 : min(_2056, _2308));
            frontier_phi_37_36_ladder_1 = isnan(_2307) ? _2055 : (isnan(_2055) ? _2307 : min(_2055, _2307));
            frontier_phi_37_36_ladder_2 = isnan(_2306) ? _2054 : (isnan(_2054) ? _2306 : min(_2054, _2306));
        }
        else
        {
            frontier_phi_37_36_ladder = _2056;
            frontier_phi_37_36_ladder_1 = _2055;
            frontier_phi_37_36_ladder_2 = _2054;
        }
        _2120 = frontier_phi_37_36_ladder_2;
        _2122 = frontier_phi_37_36_ladder_1;
        _2124 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2120 = _2054;
        _2122 = _2055;
        _2124 = _2056;
    }
    uvec4 _2129 = floatBitsToUint(cbInstanceData._m0[_242 + 5u]);
    uint _2131 = _2129.x * 14u;
    uint _2132 = _2131 + 13u;
    float _2139 = _798 + (-1.0);
    float _2144 = (cbLight._m0[_2132].x * _2139) + 1.0;
    float _2145 = (cbLight._m0[_2132].y * _2139) + 1.0;
    float _2146 = (cbLight._m0[_2132].z * _2139) + 1.0;
    float _2147 = (cbLight._m0[_2132].w * _2139) + 1.0;
    uint _2148 = _2131 + 5u;
    float _2154 = isnan(1.0) ? _2145 : (isnan(_2145) ? 1.0 : min(_2145, 1.0));
    uint _2158 = _2131 + 4u;
    float _2167 = isnan(1.0) ? _2144 : (isnan(_2144) ? 1.0 : min(_2144, 1.0));
    uint _2171 = _2131 | 1u;
    float _2182 = dot(vec3(cbLight._m0[_2131].xyz), vec3(_620, _621, _622));
    float _2185 = dot(vec3(cbLight._m0[_2171].xyz), vec3(_620, _621, _622));
    float _4463 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _4474 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _2190 = (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * 0.3183098733425140380859375;
    float _2192 = (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * 0.3183098733425140380859375;
    float _2199 = ((cbLight._m0[_2148].x * _2154) * _2192) + (((cbLight._m0[_2158].x * _2120) * _2167) * _2190);
    float _2200 = ((_2154 * cbLight._m0[_2148].y) * _2192) + (((cbLight._m0[_2158].y * _2122) * _2167) * _2190);
    float _2201 = ((_2154 * cbLight._m0[_2148].z) * _2192) + (((cbLight._m0[_2158].z * _2124) * _2167) * _2190);
    uvec4 _2205 = floatBitsToUint(cbLight._m0[_2131 + 12u]);
    bool _2207 = _2205.x == 0u;
    float _2309;
    float _2311;
    float _2313;
    if (_2207)
    {
        _2309 = _2199;
        _2311 = _2200;
        _2313 = _2201;
    }
    else
    {
        uint _2317 = _2131 + 6u;
        float _2333 = (dot(vec3(cbLight._m0[_2131 + 2u].xyz), vec3(_620, _621, _622)) * 0.5) + 0.5;
        float _2334 = _2333 * _2333;
        float _4485 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2335 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _2336 = isnan(1.0) ? _2146 : (isnan(_2146) ? 1.0 : min(_2146, 1.0));
        _2309 = (((cbLight._m0[_2317].x * 0.3183098733425140380859375) * _2335) * _2336) + _2199;
        _2311 = (((cbLight._m0[_2317].y * 0.3183098733425140380859375) * _2335) * _2336) + _2200;
        _2313 = (((cbLight._m0[_2317].z * 0.3183098733425140380859375) * _2335) * _2336) + _2201;
    }
    bool _2316 = _2205.y == 0u;
    float _2371;
    float _2373;
    float _2375;
    if (_2316)
    {
        _2371 = _2309;
        _2373 = _2311;
        _2375 = _2313;
    }
    else
    {
        uint _2544 = _2131 + 7u;
        float _2560 = (dot(vec3(cbLight._m0[_2131 + 3u].xyz), vec3(_620, _621, _622)) * 0.5) + 0.5;
        float _2561 = _2560 * _2560;
        float _4501 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        float _2562 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _2563 = isnan(1.0) ? _2147 : (isnan(_2147) ? 1.0 : min(_2147, 1.0));
        _2371 = (((cbLight._m0[_2544].x * 0.3183098733425140380859375) * _2562) * _2563) + _2309;
        _2373 = (((cbLight._m0[_2544].y * 0.3183098733425140380859375) * _2562) * _2563) + _2311;
        _2375 = (((cbLight._m0[_2544].z * 0.3183098733425140380859375) * _2562) * _2563) + _2313;
    }
    uint _2378 = _2131 + 8u;
    float _2391 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2131].w)) * _623) * 0.949999988079071044921875);
    float _2392 = _2391 * _2391;
    float _2393 = cbLight._m0[_2131].x + _700;
    float _2394 = cbLight._m0[_2131].y + _701;
    float _2395 = cbLight._m0[_2131].z + _702;
    float _2399 = inversesqrt(dot(vec3(_2393, _2394, _2395), vec3(_2393, _2394, _2395)));
    float _2400 = _2399 * _2393;
    float _2401 = _2399 * _2394;
    float _2402 = _2399 * _2395;
    float _2403 = dot(vec3(_620, _621, _622), vec3(cbLight._m0[_2131].xyz));
    float _4517 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2406 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
    float _4528 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _2407 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
    float _2408 = dot(vec3(_620, _621, _622), vec3(_2400, _2401, _2402));
    float _4539 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
    float _2411 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
    float _2412 = dot(vec3(cbLight._m0[_2131].xyz), vec3(_2400, _2401, _2402));
    float _4550 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _2416 = _2392 * _2392;
    float _2420 = ((_2411 * _2411) * (_2416 + (-1.0))) + 1.0;
    float _2428 = exp2(log2(1.0 - (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0)))) * 5.0);
    float _2429 = 0.959999978542327880859375 - _779;
    float _2431 = 0.959999978542327880859375 - _780;
    float _2432 = 0.959999978542327880859375 - _781;
    float _2439 = 1.0 - _2392;
    float _2450 = (0.5 / (((_2407 * ((_2406 * _2439) + _2392)) + 9.9999999392252902907785028219223e-09) + (((_2407 * _2439) + _2392) * _2406))) * _2406;
    float _4561 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2452 = (isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * (_2416 / ((_2420 * _2420) * 3.141590118408203125));
    uint _2466 = _2131 + 9u;
    float _2477 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2171].w)) * _623) * 0.949999988079071044921875);
    float _2478 = _2477 * _2477;
    float _2479 = cbLight._m0[_2171].x + _700;
    float _2480 = cbLight._m0[_2171].y + _701;
    float _2481 = cbLight._m0[_2171].z + _702;
    float _2485 = inversesqrt(dot(vec3(_2479, _2480, _2481), vec3(_2479, _2480, _2481)));
    float _2486 = _2485 * _2479;
    float _2487 = _2485 * _2480;
    float _2488 = _2485 * _2481;
    float _2489 = dot(vec3(_620, _621, _622), vec3(cbLight._m0[_2171].xyz));
    float _4572 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
    float _2492 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
    float _2493 = dot(vec3(_620, _621, _622), vec3(_2486, _2487, _2488));
    float _4583 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
    float _2496 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
    float _2497 = dot(vec3(cbLight._m0[_2171].xyz), vec3(_2486, _2487, _2488));
    float _4594 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
    float _2501 = _2478 * _2478;
    float _2505 = ((_2496 * _2496) * (_2501 + (-1.0))) + 1.0;
    float _2512 = exp2(log2(1.0 - (isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0)))) * 5.0);
    float _2519 = 1.0 - _2478;
    float _2529 = (0.5 / (((_2407 * ((_2492 * _2519) + _2478)) + 9.9999999392252902907785028219223e-09) + (((_2407 * _2519) + _2478) * _2492))) * _2492;
    float _4605 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
    float _2531 = (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * (_2501 / ((_2505 * _2505) * 3.141590118408203125));
    float _2541 = (((((_2512 * _2429) + _782) * cbLight._m0[_2466].x) * _2531) * _2154) + ((((cbLight._m0[_2378].x * _2120) * ((_2428 * _2429) + _782)) * _2452) * _2167);
    float _2542 = (((((_2512 * _2431) + _784) * cbLight._m0[_2466].y) * _2531) * _2154) + ((((cbLight._m0[_2378].y * _2122) * ((_2428 * _2431) + _784)) * _2452) * _2167);
    float _2543 = (((((_2512 * _2432) + _785) * cbLight._m0[_2466].z) * _2531) * _2154) + ((((cbLight._m0[_2378].z * _2124) * ((_2428 * _2432) + _785)) * _2452) * _2167);
    float _2599;
    float _2601;
    float _2603;
    if (_2207)
    {
        _2599 = _2541;
        _2601 = _2542;
        _2603 = _2543;
    }
    else
    {
        uint _2605 = _2131 + 2u;
        uint _2609 = _2131 + 10u;
        float _2623 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2605].w)) * _623) * 0.949999988079071044921875);
        float _2624 = _2623 * _2623;
        float _2625 = cbLight._m0[_2605].x + _700;
        float _2626 = cbLight._m0[_2605].y + _701;
        float _2627 = cbLight._m0[_2605].z + _702;
        float _2631 = inversesqrt(dot(vec3(_2625, _2626, _2627), vec3(_2625, _2626, _2627)));
        float _2632 = _2631 * _2625;
        float _2633 = _2631 * _2626;
        float _2634 = _2631 * _2627;
        float _2635 = dot(vec3(_620, _621, _622), vec3(cbLight._m0[_2605].xyz));
        float _4616 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        float _2638 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
        float _2639 = dot(vec3(_620, _621, _622), vec3(_2632, _2633, _2634));
        float _4627 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        float _2642 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
        float _2643 = dot(vec3(cbLight._m0[_2605].xyz), vec3(_2632, _2633, _2634));
        float _4638 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        float _2647 = _2624 * _2624;
        float _2651 = ((_2642 * _2642) * (_2647 + (-1.0))) + 1.0;
        float _2658 = exp2(log2(1.0 - (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0)))) * 5.0);
        float _2665 = 1.0 - _2624;
        float _2675 = (0.5 / (((_2407 * ((_2638 * _2665) + _2624)) + 9.9999999392252902907785028219223e-09) + (((_2407 * _2665) + _2624) * _2638))) * _2638;
        float _4649 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2677 = (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0))) * (_2647 / ((_2651 * _2651) * 3.141590118408203125));
        float _2678 = isnan(1.0) ? _2146 : (isnan(_2146) ? 1.0 : min(_2146, 1.0));
        _2599 = (((((_2658 * _2429) + _782) * cbLight._m0[_2609].x) * _2677) * _2678) + _2541;
        _2601 = (((((_2658 * _2431) + _784) * cbLight._m0[_2609].y) * _2677) * _2678) + _2542;
        _2603 = (((((_2658 * _2432) + _785) * cbLight._m0[_2609].z) * _2677) * _2678) + _2543;
    }
    float _2709;
    float _2711;
    float _2713;
    if (_2316)
    {
        _2709 = _2599;
        _2711 = _2601;
        _2713 = _2603;
    }
    else
    {
        uint _2720 = _2131 + 3u;
        uint _2724 = _2131 + 11u;
        float _2738 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2720].w)) * _623) * 0.949999988079071044921875);
        float _2739 = _2738 * _2738;
        float _2740 = cbLight._m0[_2720].x + _700;
        float _2741 = cbLight._m0[_2720].y + _701;
        float _2742 = cbLight._m0[_2720].z + _702;
        float _2746 = inversesqrt(dot(vec3(_2740, _2741, _2742), vec3(_2740, _2741, _2742)));
        float _2747 = _2746 * _2740;
        float _2748 = _2746 * _2741;
        float _2749 = _2746 * _2742;
        float _2750 = dot(vec3(_620, _621, _622), vec3(cbLight._m0[_2720].xyz));
        float _4665 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
        float _2753 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
        float _2754 = dot(vec3(_620, _621, _622), vec3(_2747, _2748, _2749));
        float _4676 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
        float _2757 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
        float _2758 = dot(vec3(cbLight._m0[_2720].xyz), vec3(_2747, _2748, _2749));
        float _4687 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
        float _2762 = _2739 * _2739;
        float _2766 = ((_2757 * _2757) * (_2762 + (-1.0))) + 1.0;
        float _2773 = exp2(log2(1.0 - (isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0)))) * 5.0);
        float _2780 = 1.0 - _2739;
        float _2790 = (0.5 / (((_2407 * ((_2753 * _2780) + _2739)) + 9.9999999392252902907785028219223e-09) + (((_2407 * _2780) + _2739) * _2753))) * _2753;
        float _4698 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
        float _2792 = (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0))) * (_2762 / ((_2766 * _2766) * 3.141590118408203125));
        float _2793 = isnan(1.0) ? _2147 : (isnan(_2147) ? 1.0 : min(_2147, 1.0));
        _2709 = (((((_2773 * _2429) + _782) * cbLight._m0[_2724].x) * _2792) * _2793) + _2599;
        _2711 = (((((_2773 * _2431) + _784) * cbLight._m0[_2724].y) * _2792) * _2793) + _2601;
        _2713 = (((((_2773 * _2432) + _785) * cbLight._m0[_2724].z) * _2792) * _2793) + _2603;
    }
    float _2859;
    float _2861;
    float _2863;
    float _2865;
    float _2867;
    float _2869;
    if (_2129.y == 0u)
    {
        uvec4 _2814 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2815 = _2814.x;
        uint _2826 = uint((float(_2814.y) * floor(float(uint(cbSceneParam._m0[85u].y * _721) / _2815))) + floor(float(uint(cbSceneParam._m0[85u].x * _720) / _2815)));
        float _2836 = (log2(_1907 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2837 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
        uint _2840 = uint(isnan(14.0) ? _2837 : (isnan(_2837) ? 14.0 : min(_2837, 14.0)));
        uvec4 _2845 = texelFetch(g_lightClusterGridBuffer, int(((_2840 << 2u) + (_2826 << 6u)) >> 2u));
        uint _2846 = _2845.x;
        uint _2847 = _2814.z;
        float _2926;
        float _2928;
        float _2930;
        float _2932;
        float _2934;
        float _2936;
        if (((((1u << ((_2847 >> 4u) & 15u)) + 4294967295u) & _2846) == 0u) || ((_2847 & 240u) == 0u))
        {
            _2926 = 0.0;
            _2928 = 0.0;
            _2930 = 0.0;
            _2932 = 0.0;
            _2934 = 0.0;
            _2936 = 0.0;
        }
        else
        {
            float _2927;
            float _2929;
            float _2931;
            float _2933;
            float _2935;
            float _2937;
            float _3079 = 0.0;
            float _3080 = 0.0;
            float _3081 = 0.0;
            float _3082 = 0.0;
            float _3083 = 0.0;
            float _3084 = 0.0;
            uint _3085 = 0u;
            uint _3094;
            bool _3095;
            for (;;)
            {
                _3094 = texelFetch(g_lightClassification, int((((_2840 << 5u) + (_2826 << 9u)) + (_3085 << 2u)) >> 2u)).x;
                _3095 = _3094 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3095)
                {
                    frontier_phi_71_pred = _3084;
                    frontier_phi_71_pred_1 = _3083;
                    frontier_phi_71_pred_2 = _3082;
                    frontier_phi_71_pred_3 = _3081;
                    frontier_phi_71_pred_4 = _3080;
                    frontier_phi_71_pred_5 = _3079;
                }
                else
                {
                    float _3224;
                    float _3225;
                    float _3226;
                    float _3227;
                    float _3228;
                    float _3229;
                    uint _3230;
                    _3224 = _3079;
                    _3225 = _3080;
                    _3226 = _3081;
                    _3227 = _3082;
                    _3228 = _3083;
                    _3229 = _3084;
                    _3230 = _3094;
                    float _3151;
                    float _3152;
                    float _3153;
                    float _3154;
                    float _3155;
                    float _3156;
                    for (;;)
                    {
                        uint _3234 = uint(findLSB(_3230)) + (_3085 << 5u);
                        uint _3231 = (_3230 + 4294967295u) & _3230;
                        uint _3236 = _3234 * 48u;
                        vec4 _3250 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3236)).x, texelFetch(g_PointLightRenderingBuffer, int(_3236 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3236 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3236 + 3u)).x));
                        uint _3256 = (_3234 * 48u) + 4u;
                        vec4 _3269 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3256)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 3u)).x));
                        uint _3275 = (_3234 * 48u) + 8u;
                        vec3 _3286 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3275)).x, texelFetch(g_PointLightRenderingBuffer, int(_3275 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3275 + 2u)).x));
                        float _3290 = _3250.x - _1905;
                        float _3291 = _3250.y - _1906;
                        float _3292 = _3250.z - _1907;
                        float _3293 = dot(vec3(_3290, _3291, _3292), vec3(_3290, _3291, _3292));
                        float _3296 = inversesqrt(_3293);
                        float _3297 = _3296 * _3290;
                        float _3298 = _3296 * _3291;
                        float _3299 = _3296 * _3292;
                        float _3300 = dot(vec3(_739, _742, _745), vec3(_3297, _3298, _3299));
                        float _3305 = 1.0 - (_3293 * _3250.w);
                        float _4724 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                        float _3306 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
                        float _3307 = sqrt(_3293) * _3269.w;
                        float _3310 = 1.39999997615814208984375 / (_3307 + 1.39999997615814208984375);
                        float _3311 = _3310 * _3310;
                        float _3314 = ((1.0 - _3311) * _3300) + _3311;
                        float _3317 = _3307 * _3307;
                        float _3321 = ((isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0))) * _3306) / ((_3317 * 0.699999988079071044921875) + 1.0);
                        float _3325 = (-0.0) - _1905;
                        float _3326 = (-0.0) - _1906;
                        float _3327 = (-0.0) - _1907;
                        float _3331 = inversesqrt(dot(vec3(_3325, _3326, _3327), vec3(_3325, _3326, _3327)));
                        float _3332 = _3331 * _3325;
                        float _3333 = _3331 * _3326;
                        float _3334 = _3331 * _3327;
                        float _3341 = exp2(log2(1.0 / ((_3317 * 3.5) + 5.0)) * 0.25);
                        float _3342 = 1.0 - _814;
                        float _3349 = sqrt(1.0 - ((1.0 - (_3342 * _3342)) * (1.0 - (_3341 * _3341))));
                        float _3350 = _3349 * _3349;
                        float _3351 = _3350 * _3350;
                        float _3352 = _3332 + _3297;
                        float _3353 = _3333 + _3298;
                        float _3354 = _3334 + _3299;
                        float _3358 = inversesqrt(dot(vec3(_3352, _3353, _3354), vec3(_3352, _3353, _3354)));
                        float _3362 = dot(vec3(_739, _742, _745), vec3(_3332, _3333, _3334));
                        float _4740 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                        float _3365 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
                        float _3366 = dot(vec3(_739, _742, _745), vec3(_3358 * _3352, _3358 * _3353, _3358 * _3354));
                        float _4751 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                        float _3369 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
                        float _3373 = ((_3369 * _3369) * (_3351 + (-1.0))) + 1.0;
                        float _3374 = _3310 * _3350;
                        float _3375 = _3374 * _3374;
                        float _3378 = ((1.0 - _3375) * _3300) + _3375;
                        float _4762 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                        float _3379 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
                        float _3380 = 1.0 - _3350;
                        float _3390 = (0.5 / (((_3379 * ((_3365 * _3380) + _3350)) + 9.9999999392252902907785028219223e-09) + (((_3379 * _3380) + _3350) * _3365))) * _3379;
                        float _4773 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                        float _3401 = (((_3351 * 3.1415927410125732421875) * (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0)))) / ((_3373 * _3373) * ((_3317 * 2.1991131305694580078125) + 3.141590118408203125))) * _3306;
                        _3154 = (_3321 * _3269.x) + _3227;
                        _3155 = (_3321 * _3269.y) + _3228;
                        _3156 = (_3321 * _3269.z) + _3229;
                        _3151 = (_3401 * _3286.x) + _3224;
                        _3152 = (_3401 * _3286.y) + _3225;
                        _3153 = (_3401 * _3286.z) + _3226;
                        if (_3231 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3224 = _3151;
                            _3225 = _3152;
                            _3226 = _3153;
                            _3227 = _3154;
                            _3228 = _3155;
                            _3229 = _3156;
                            _3230 = _3231;
                        }
                    }
                    frontier_phi_71_pred = _3156;
                    frontier_phi_71_pred_1 = _3155;
                    frontier_phi_71_pred_2 = _3154;
                    frontier_phi_71_pred_3 = _3153;
                    frontier_phi_71_pred_4 = _3152;
                    frontier_phi_71_pred_5 = _3151;
                }
                _2937 = frontier_phi_71_pred;
                _2935 = frontier_phi_71_pred_1;
                _2933 = frontier_phi_71_pred_2;
                _2931 = frontier_phi_71_pred_3;
                _2929 = frontier_phi_71_pred_4;
                _2927 = frontier_phi_71_pred_5;
                uint _3086 = _3085 + 1u;
                if (_3086 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3079 = _2927;
                    _3080 = _2929;
                    _3081 = _2931;
                    _3082 = _2933;
                    _3083 = _2935;
                    _3084 = _2937;
                    _3085 = _3086;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2926 = _2927;
            _2928 = _2929;
            _2930 = _2931;
            _2932 = _2933;
            _2934 = _2935;
            _2936 = _2937;
        }
        uvec4 _2940 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2941 = _2940.z;
        uint _2943 = (_2941 >> 8u) & 15u;
        float _3047;
        float _3049;
        float _3051;
        float _3053;
        float _3055;
        float _3057;
        if (((4294967295u << _2943) & _2846) == 0u)
        {
            _3047 = _2926;
            _3049 = _2928;
            _3051 = _2930;
            _3053 = _2932;
            _3055 = _2934;
            _3057 = _2936;
        }
        else
        {
            float _3072 = inversesqrt(dot(vec3(_1905, _1906, _1907), vec3(_1905, _1906, _1907)));
            float _3073 = _3072 * _1905;
            float _3074 = _3072 * _1906;
            float _3075 = _3072 * _1907;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2943 < ((_2941 >> 12u) & 15u))
            {
                float _3048;
                float _3050;
                float _3052;
                float _3054;
                float _3056;
                float _3058;
                float _3207 = _2926;
                float _3208 = _2928;
                float _3209 = _2930;
                float _3210 = _2932;
                float _3211 = _2934;
                float _3212 = _2936;
                uint _3213 = _2943;
                uint _3222;
                bool _3223;
                for (;;)
                {
                    _3222 = texelFetch(g_lightClassification, int((((_2840 << 5u) + (_2826 << 9u)) + (_3213 << 2u)) >> 2u)).x;
                    _3223 = _3222 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3223)
                    {
                        frontier_phi_82_pred = _3212;
                        frontier_phi_82_pred_1 = _3211;
                        frontier_phi_82_pred_2 = _3210;
                        frontier_phi_82_pred_3 = _3209;
                        frontier_phi_82_pred_4 = _3208;
                        frontier_phi_82_pred_5 = _3207;
                    }
                    else
                    {
                        float _3415;
                        float _3416;
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3420;
                        float _3709;
                        float _3710;
                        float _3711;
                        float _3712;
                        float _3713;
                        float _3714;
                        float _3428 = _3207;
                        float _3429 = _3208;
                        float _3430 = _3209;
                        float _3431 = _3210;
                        float _3432 = _3211;
                        float _3433 = _3212;
                        uint _3434 = _3222;
                        uint _3435;
                        vec4 _3460;
                        float _3461;
                        vec4 _3476;
                        vec3 _3488;
                        vec4 _3503;
                        vec4 _3519;
                        float _3565;
                        bool _3566;
                        for (;;)
                        {
                            uint _3445 = ((_3213 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3434));
                            _3435 = (_3434 + 4294967295u) & _3434;
                            uint _3447 = _3445 * 40u;
                            _3460 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3447)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 3u)).x));
                            _3461 = _3460.w;
                            uint _3463 = (_3445 * 40u) + 4u;
                            _3476 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3463)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 3u)).x));
                            uint _3478 = (_3445 * 40u) + 8u;
                            _3488 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3478)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 2u)).x));
                            uint _3490 = (_3445 * 40u) + 16u;
                            _3503 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3490)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 3u)).x));
                            uint _3506 = (_3445 * 40u) + 20u;
                            _3519 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3506)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 3u)).x));
                            uint _3521 = (_3445 * 40u) + 24u;
                            vec4 _3534 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3521)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 3u)).x));
                            uint _3540 = (_3445 * 40u) + 28u;
                            vec4 _3553 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3540)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 3u)).x));
                            _3565 = fma(_1907, _3553.z, fma(_1906, _3553.y, _3553.x * _1905)) + _3553.w;
                            _3566 = !((fma(_1907, _3534.z, fma(_1906, _3534.y, _3534.x * _1905)) + _3534.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3566)
                            {
                                float _3593 = _3460.x - _1905;
                                float _3594 = _3460.y - _1906;
                                float _3595 = _3460.z - _1907;
                                float _3596 = dot(vec3(_3593, _3594, _3595), vec3(_3593, _3594, _3595));
                                float _3599 = inversesqrt(_3596);
                                float _3600 = _3599 * _3593;
                                float _3601 = _3599 * _3594;
                                float _3602 = _3599 * _3595;
                                float _3606 = 1.0 - (_3596 / (_3461 * _3461));
                                float _4784 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                                float _3607 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
                                float _3611 = sqrt(_3596) * _3476.w;
                                float _3613 = 1.39999997615814208984375 / (_3611 + 1.39999997615814208984375);
                                float _3614 = _3613 * _3613;
                                float _3617 = ((1.0 - _3614) * dot(vec3(_3600, _3601, _3602), vec3(_739, _742, _745))) + _3614;
                                float _3620 = _3611 * _3611;
                                float _3624 = (fma(_1907, _3503.z, fma(_1906, _3503.y, _3503.x * _1905)) + _3503.w) / _3565;
                                float _3625 = (fma(_1907, _3519.z, fma(_1906, _3519.y, _3519.x * _1905)) + _3519.w) / _3565;
                                float _3629 = 1.0 - dot(vec2(_3624, _3625), vec2(_3624, _3625));
                                float _4800 = isnan(0.0) ? _3629 : (isnan(_3629) ? 0.0 : max(_3629, 0.0));
                                float _3630 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                                float _3631 = _3630 * (((isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0))) * _3607) / ((_3620 * 0.699999988079071044921875) + 1.0));
                                float _3643 = exp2(log2(1.0 / ((_3620 * 3.5) + 5.0)) * 0.25);
                                float _3644 = 1.0 - _814;
                                float _3651 = sqrt(1.0 - ((1.0 - (_3644 * _3644)) * (1.0 - (_3643 * _3643))));
                                float _3652 = _3651 * _3651;
                                float _3653 = _3652 * _3652;
                                float _3654 = _3600 - _3073;
                                float _3655 = _3601 - _3074;
                                float _3656 = _3602 - _3075;
                                float _3660 = inversesqrt(dot(vec3(_3654, _3655, _3656), vec3(_3654, _3655, _3656)));
                                float _3664 = dot(vec3(_739, _742, _745), vec3((-0.0) - _3073, (-0.0) - _3074, (-0.0) - _3075));
                                float _4811 = isnan(0.0) ? _3664 : (isnan(_3664) ? 0.0 : max(_3664, 0.0));
                                float _3667 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
                                float _3668 = dot(vec3(_739, _742, _745), vec3(_3660 * _3654, _3660 * _3655, _3660 * _3656));
                                float _4822 = isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0));
                                float _3671 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
                                float _3675 = ((_3671 * _3671) * (_3653 + (-1.0))) + 1.0;
                                float _3676 = _3613 * _3652;
                                float _3677 = _3676 * _3676;
                                float _3683 = ((1.0 - _3677) * dot(vec3(_739, _742, _745), vec3(_3600, _3601, _3602))) + _3677;
                                float _4833 = isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0));
                                float _3684 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
                                float _3685 = 1.0 - _3652;
                                float _3695 = (0.5 / (((_3684 * ((_3667 * _3685) + _3652)) + 9.9999999392252902907785028219223e-09) + (((_3684 * _3685) + _3652) * _3667))) * _3684;
                                float _4844 = isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0));
                                float _3705 = (_3630 * _3607) * (((_3653 * 3.1415927410125732421875) * (isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0)))) / ((_3675 * _3675) * ((_3620 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3631 * _3476.z;
                                frontier_phi_88_pred_1 = _3631 * _3476.y;
                                frontier_phi_88_pred_2 = _3631 * _3476.x;
                                frontier_phi_88_pred_3 = _3705 * _3488.z;
                                frontier_phi_88_pred_4 = _3705 * _3488.y;
                                frontier_phi_88_pred_5 = _3705 * _3488.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3714 = frontier_phi_88_pred;
                            _3713 = frontier_phi_88_pred_1;
                            _3712 = frontier_phi_88_pred_2;
                            _3711 = frontier_phi_88_pred_3;
                            _3710 = frontier_phi_88_pred_4;
                            _3709 = frontier_phi_88_pred_5;
                            _3418 = _3712 + _3431;
                            _3419 = _3713 + _3432;
                            _3420 = _3714 + _3433;
                            _3415 = _3709 + _3428;
                            _3416 = _3710 + _3429;
                            _3417 = _3711 + _3430;
                            if (_3435 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3428 = _3415;
                                _3429 = _3416;
                                _3430 = _3417;
                                _3431 = _3418;
                                _3432 = _3419;
                                _3433 = _3420;
                                _3434 = _3435;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3420;
                        frontier_phi_82_pred_1 = _3419;
                        frontier_phi_82_pred_2 = _3418;
                        frontier_phi_82_pred_3 = _3417;
                        frontier_phi_82_pred_4 = _3416;
                        frontier_phi_82_pred_5 = _3415;
                    }
                    _3058 = frontier_phi_82_pred;
                    _3056 = frontier_phi_82_pred_1;
                    _3054 = frontier_phi_82_pred_2;
                    _3052 = frontier_phi_82_pred_3;
                    _3050 = frontier_phi_82_pred_4;
                    _3048 = frontier_phi_82_pred_5;
                    uint _3214 = _3213 + 1u;
                    if (_3214 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3207 = _3048;
                        _3208 = _3050;
                        _3209 = _3052;
                        _3210 = _3054;
                        _3211 = _3056;
                        _3212 = _3058;
                        _3213 = _3214;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3054;
                frontier_phi_63_64_ladder_1 = _3058;
                frontier_phi_63_64_ladder_2 = _3056;
                frontier_phi_63_64_ladder_3 = _3052;
                frontier_phi_63_64_ladder_4 = _3050;
                frontier_phi_63_64_ladder_5 = _3048;
            }
            else
            {
                frontier_phi_63_64_ladder = _2932;
                frontier_phi_63_64_ladder_1 = _2936;
                frontier_phi_63_64_ladder_2 = _2934;
                frontier_phi_63_64_ladder_3 = _2930;
                frontier_phi_63_64_ladder_4 = _2928;
                frontier_phi_63_64_ladder_5 = _2926;
            }
            _3047 = frontier_phi_63_64_ladder_5;
            _3049 = frontier_phi_63_64_ladder_4;
            _3051 = frontier_phi_63_64_ladder_3;
            _3053 = frontier_phi_63_64_ladder;
            _3055 = frontier_phi_63_64_ladder_2;
            _3057 = frontier_phi_63_64_ladder_1;
        }
        float _3062 = isnan(1.0) ? _798 : (isnan(_798) ? 1.0 : min(_798, 1.0));
        _2859 = (_3062 * _3053) + _2371;
        _2861 = (_3062 * _3055) + _2373;
        _2863 = (_3062 * _3057) + _2375;
        _2865 = ((_3047 * _782) * _3062) + _2709;
        _2867 = ((_3049 * _784) * _3062) + _2711;
        _2869 = ((_3051 * _785) * _3062) + _2713;
    }
    else
    {
        _2859 = _2371;
        _2861 = _2373;
        _2863 = _2375;
        _2865 = _2709;
        _2867 = _2711;
        _2869 = _2713;
    }
    float _4860 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _4871 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _4882 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _2886 = ((isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0))) * (_2859 + ((isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))) * _798))) + ((_2865 + ((isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0))) * _1637)) * cbPerFrame._m0[3u].x);
    float _2887 = ((isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0))) * (_2861 + ((isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))) * _798))) + ((_2867 + ((isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0))) * _1637)) * cbPerFrame._m0[3u].x);
    float _2888 = ((isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0))) * (_2863 + ((isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))) * _798))) + ((_2869 + ((isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0))) * _1637)) * cbPerFrame._m0[3u].x);
    uint _2889 = _242 + 6u;
    float _2897 = _720 / cbSceneParam._m0[86u].x;
    float _2898 = _721 / cbSceneParam._m0[86u].y;
    vec4 _2912 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2897, _2898, (log2((isnan(cbSceneParam._m0[77u].w) ? _642 : (isnan(_642) ? cbSceneParam._m0[77u].w : min(_642, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2914 = _2912.x;
    float _2915 = _2912.y;
    float _2916 = _2912.z;
    float _2917 = _2912.w;
    float _2989;
    float _2991;
    float _2993;
    float _2995;
    if (_642 > cbSceneParam._m0[78u].w)
    {
        float _2951 = isnan(_642) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _642 : min(cbSceneParam._m0[80u].w, _642));
        float _2952 = _2951 / _642;
        float _2963 = _2952 * _693;
        float _2964 = _694 * _2952;
        float _2965 = (-0.0) - _2964;
        float _2967 = _2952 * _695;
        float _2969 = (cbSceneParam._m0[77u].w * _2965) / _2951;
        float _2970 = _2969 + cbSceneParam._m0[79u].w;
        float _2971 = cbSceneParam._m0[79u].w - _2964;
        float _2977 = sqrt(((_2963 * _2963) + (_2964 * _2964)) + (_2967 * _2967));
        float _2980 = (1.0 - (cbSceneParam._m0[77u].w / _2951)) * _2977;
        float _2985 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2987 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3164;
        if (abs((_2965 - _2969) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3164 = ((((_2970 > 0.0) ? exp2(_2985 * _2970) : (2.0 - exp2(_2987 * _2970))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2980;
        }
        else
        {
            float _3108 = 1.0 / cbSceneParam._m0[80u].x;
            float _3109 = isnan(_2971) ? _2970 : (isnan(_2970) ? _2971 : max(_2970, _2971));
            float _3110 = isnan(_2971) ? _2970 : (isnan(_2970) ? _2971 : min(_2970, _2971));
            float _3119 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : min(_3109, 0.0));
            float _3120 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : min(_3110, 0.0));
            _3164 = ((abs(_2977 / _2965) * cbSceneParam._m0[80u].y) * ((((_3119 - _3120) * 2.0) - ((exp2(_2985 * (isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0)))) - exp2(_2985 * (isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0))))) * _3108)) - ((exp2(_2987 * _3119) - exp2(_2987 * _3120)) * _3108))) + (_2980 * cbSceneParam._m0[80u].z);
        }
        vec4 _3166 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2897, _2898, 1.0), 0.0);
        float _3175 = exp2((_3164 * (-1.44269502162933349609375)) * (1.0 - _3166.w));
        float _3176 = log2(_3175);
        float _3192 = log2(_2917);
        _2989 = (exp2(_3192 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3176 * cbSceneParam._m0[78u].x)) * _3166.x) / cbSceneParam._m0[78u].x)) + _2914;
        _2991 = (exp2(_3192 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3176 * cbSceneParam._m0[78u].y)) * _3166.y) / cbSceneParam._m0[78u].y)) + _2915;
        _2993 = (exp2(_3192 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3176 * cbSceneParam._m0[78u].z)) * _3166.z) / cbSceneParam._m0[78u].z)) + _2916;
        _2995 = _3175 * _2917;
    }
    else
    {
        _2989 = _2914;
        _2991 = _2915;
        _2993 = _2916;
        _2995 = _2917;
    }
    bool _3202;
    vec4 _3005;
    vec4 _3027;
    float _3029;
    float _3033;
    float _3034;
    float _3035;
    float _3036;
    bool _3046;
    for (;;)
    {
        _3005 = cbMatDynParam._m0[0u];
        float _3007 = roundEven(_3005.y);
        bool _3008 = _3007 == 3.0;
        float _3009 = log2(_2995);
        float _3016 = exp2(_3009 * cbSceneParam._m0[78u].x) * _2886;
        float _3017 = exp2(_3009 * cbSceneParam._m0[78u].y) * _2887;
        float _3018 = exp2(_3009 * cbSceneParam._m0[78u].z) * _2888;
        float _3025 = _709 + (-0.5);
        _3027 = cbMtdParam._m0[1u];
        _3029 = _3027.y * _3025;
        float _3032 = (_3007 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3033 = _3032 * (_3008 ? _3016 : (_3016 + (cbSceneParam._m0[72u].w * _2989)));
        _3034 = _3032 * (_3008 ? _3017 : (_3017 + (cbSceneParam._m0[72u].w * _2991)));
        _3035 = _3032 * (_3008 ? _3018 : (_3018 + (cbSceneParam._m0[72u].w * _2993)));
        _3036 = _3025 * 0.999000012874603271484375;
        _3046 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3046)
        {
            if ((cbInstanceData._m0[_242 + 7u].x + _3036) < 0.5)
            {
                _3202 = true;
                break;
            }
        }
        uint _3143 = _758 + uint(_3005.w);
        if ((cbInstanceData._m0[_3143].w < 1.0) && ((cbInstanceData._m0[_3143].w + _3036) < 0.5))
        {
            _3202 = true;
            break;
        }
        if ((_3029 + 1.0) < _3027.x)
        {
            _3202 = true;
            break;
        }
        _3202 = false;
        break;
    }
    float _3406;
    if (_3202)
    {
        discard_state = true;
        _3406 = 0.0;
    }
    else
    {
        _3406 = cbInstanceData._m0[_2889].w;
    }
    SV_Target.x = _3033;
    SV_Target.y = _3034;
    SV_Target.z = _3035;
    SV_Target.w = _3406;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2889].w;
    discard_exit();
}


