#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1342;
float _4005;
float _4006;
float _4007;
float _4008;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _299.x * cbMtdParam._m0[11u].x;
    float _306 = _299.y * cbMtdParam._m0[11u].y;
    float _307 = _299.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _364 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _366 = _364.x;
    float _378 = dot(vec4(_366, _364.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _395 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_366 - _378) * cbMtdParam._m0[24u].y) + _378) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4017 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _396 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _403 = (_396 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305;
    float _404 = (_396 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306;
    float _405 = (_396 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307;
    vec4 _424 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _278) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _279) + cbTextureTilingScale._m0[14u].w));
    vec4 _444 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _461 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _463 = _461.x;
    float _464 = _461.y;
    float _465 = _461.z;
    float _474 = ((_444.z - _465) * _396) + _465;
    float _477 = ((((_444.x - _463) * _396) + _463) * 2.0) + (-1.0);
    float _479 = ((((_444.y - _464) * _396) + _464) * 2.0) + (-1.0);
    float _480 = dot(vec2(_477, _479), vec2(_477, _479));
    float _4028 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _485 = sqrt(1.0 - (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))));
    vec4 _498 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _516 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _518 = _516.x;
    float _519 = 1.0 - _518;
    float _525 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _528 = ((isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : min(_525, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _537 = (_528 - ((((((_518 - _519) * cbMtdParam._m0[24u].z) + _519) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _528))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4049 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _538 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _545 = (_538 * ((_424.x * cbMtdParam._m0[18u].x) - _403)) + _403;
    float _546 = (_538 * ((_424.y * cbMtdParam._m0[18u].y) - _404)) + _404;
    float _547 = (_538 * ((_424.z * cbMtdParam._m0[18u].z) - _405)) + _405;
    vec4 _559 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _561 = _559.x;
    float _562 = 1.0 - _561;
    float _589 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_561 - _562) * cbMtdParam._m0[24u].w) + _562) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4060 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _590 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _598 = ((((cbMtdParam._m0[10u].x - _545) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _590) + _545;
    float _599 = ((((cbMtdParam._m0[10u].y - _546) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _590) + _546;
    float _600 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _547)) * _590) + _547;
    vec4 _612 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _626 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _628 = _626.x;
    float _646 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _278) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _279) + cbTextureTilingScale._m0[9u].w)).x - _628) * _396) + _628;
    float _650 = ((_612.x - _646) * cbMtdParam._m0[19u].z) + _646;
    float _652 = _650 - (_650 * _538);
    float _654 = _652 - (_652 * _590);
    vec4 _668 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _675 = (_668.x * 2.0) + (-1.0);
    float _676 = (_668.y * 2.0) + (-1.0);
    float _677 = dot(vec2(_675, _676), vec2(_675, _676));
    float _4071 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _685 = (_538 * (_668.z - _474)) + _474;
    float _688 = ((cbMtdParam._m0[23u].y - _685) * _590) + _685;
    vec4 _707 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _713 = (_707.x * 2.0) + (-1.0);
    float _714 = (_707.y * 2.0) + (-1.0);
    float _715 = dot(vec2(_713, _714), vec2(_713, _714));
    float _4082 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _732 = (((_675 - _477) + (cbMtdParam._m0[21u].x * _477)) * _538) + _477;
    float _733 = (((_676 - _479) + (cbMtdParam._m0[21u].x * _479)) * _538) + _479;
    float _734 = (_538 * (sqrt(1.0 - (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0)))) - _485)) + _485;
    float _745 = (((_713 - _732) + (_732 * cbMtdParam._m0[22u].z)) * _590) + _732;
    float _746 = (((_714 - _733) + (_733 * cbMtdParam._m0[22u].z)) * _590) + _733;
    float _747 = ((sqrt(1.0 - (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0)))) - _734) * _590) + _734;
    float _749 = cbMtdParam._m0[22u].x + _498.w;
    float _752 = fma(_747, _246 * NORMAL.x, fma(_746, _253 * TANGENT.x, (_239 * _231) * _745));
    float _755 = fma(_747, _246 * NORMAL.y, fma(_746, _253 * TANGENT.y, (_239 * _232) * _745));
    float _758 = fma(_747, _246 * NORMAL.z, fma(_746, _253 * TANGENT.z, (_239 * _233) * _745));
    float _762 = inversesqrt(dot(vec3(_752, _755, _758), vec3(_752, _755, _758)));
    float _763 = _762 * _752;
    float _764 = _762 * _755;
    float _765 = _762 * _758;
    float _4093 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _766 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _4104 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _4115 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _4126 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _4137 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _4148 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _771 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
    float _785 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _825 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _835 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _825);
    float _836 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _825);
    float _837 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _825);
    float _841 = inversesqrt(dot(vec3(_835, _836, _837), vec3(_835, _836, _837)));
    float _842 = _835 * _841;
    float _843 = _836 * _841;
    float _844 = _837 * _841;
    vec4 _849 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _851 = _849.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1023 = sqrt(((_835 * _835) + (_836 * _836)) + (_837 * _837));
        float _1029 = (cbMatDynParam._m0[5u].x * _1023) + cbMatDynParam._m0[5u].y;
        float _4159 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1034 = (cbMatDynParam._m0[5u].z * _1023) + cbMatDynParam._m0[5u].w;
        float _4170 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) - _1030)) + _1030) < ((_851 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _862 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _863 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _881 = fma(_765, cbSceneParam._m0[5u].z, fma(_764, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _763));
    float _884 = fma(_765, cbSceneParam._m0[6u].z, fma(_764, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _763));
    float _887 = fma(_765, cbSceneParam._m0[7u].z, fma(_764, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _763));
    uint _900 = _259 + 9u;
    uint _901 = _900 + uint(cbMatDynParam._m0[0u].w);
    float _907 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0)))) * cbInstanceData._m0[_901].x;
    float _908 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0)))) * cbInstanceData._m0[_901].y;
    float _909 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0)))) * cbInstanceData._m0[_901].z;
    float _4181 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _910 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _4192 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _911 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
    float _4203 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _912 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
    float _913 = 1.0 - _771;
    float _914 = _910 * _913;
    float _915 = _911 * _913;
    float _916 = _912 * _913;
    float _921 = (_910 + (-0.039999999105930328369140625)) * _771;
    float _922 = (_911 + (-0.039999999105930328369140625)) * _771;
    float _923 = (_912 + (-0.039999999105930328369140625)) * _771;
    float _924 = _921 + 0.039999999105930328369140625;
    float _926 = _922 + 0.039999999105930328369140625;
    float _927 = _923 + 0.039999999105930328369140625;
    vec4 _936 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _862, cbSceneParam._m0[86u].y * _863));
    float _940 = ((isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * TEXCOORD_5.w) * _936.x;
    float _941 = dot(vec3(_763, _764, _765), vec3(_842, _843, _844));
    float _944 = _941 * 2.0;
    float _948 = (_944 * _763) - _842;
    float _949 = (_944 * _764) - _843;
    float _950 = (_944 * _765) - _844;
    float _954 = abs(dot(vec3(_842, _843, _844), vec3(_763, _764, _765)));
    float _4214 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _956 = sqrt(_766);
    float _969 = exp2((_956 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_956 * 3.0));
    float _975 = (1.0 - _969) * ((_956 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _976 = _969 * _956;
    float _1004 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1008 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1012 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1341;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1066 = fma(_1012, cbModelParam._m0[26u].z, fma(_1008, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1004));
        float _1070 = fma(_1012, cbModelParam._m0[27u].z, fma(_1008, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1004));
        float _1074 = fma(_1012, cbModelParam._m0[28u].z, fma(_1008, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1004));
        float _1099 = _1004 + _763;
        float _1100 = _1008 + _764;
        float _1101 = _1012 + _765;
        float _1111 = fma(_1101, cbModelParam._m0[26u].z, fma(_1100, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1099)) - _1066;
        float _1112 = fma(_1101, cbModelParam._m0[27u].z, fma(_1100, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1099)) - _1070;
        float _1113 = fma(_1101, cbModelParam._m0[28u].z, fma(_1100, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1099)) - _1074;
        float _1117 = inversesqrt(dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113)));
        float _1130 = ((_1117 * _1111) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1066 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1131 = ((_1117 * _1112) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1070 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1132 = ((_1117 * _1113) / cbModelParam._m0[34u].z) + ((((((_1074 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        float _1169 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1135.x + (-0.5));
        float _1171 = _1169 * (_1135.y + (-0.5));
        float _1172 = _1169 * (_1135.z + (-0.5));
        float _1179 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1142.x + (-0.5));
        float _1181 = _1179 * (_1142.y + (-0.5));
        float _1182 = _1179 * (_1142.z + (-0.5));
        float _1189 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1149.x + (-0.5));
        float _1191 = _1189 * (_1149.y + (-0.5));
        float _1192 = _1189 * (_1149.z + (-0.5));
        float _1199 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1156.x + (-0.5));
        float _1201 = _1199 * (_1156.y + (-0.5));
        float _1202 = _1199 * (_1156.z + (-0.5));
        float _1203 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1204 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1205 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1206 = _1170 * 0.5;
        float _1207 = _1180 * 0.5;
        float _1208 = _1190 * 0.5;
        float _1209 = dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208));
        float _1214 = (_1209 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1209);
        float _1223 = (dot(vec3(_763, _764, _765), vec3(_1214 * _1206, _1214 * _1207, _1214 * _1208)) + 1.0) * 0.5;
        float _4240 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1233 = sqrt(((_1207 * _1207) + (_1206 * _1206)) + (_1208 * _1208)) / (_1203 + 9.9999997473787516355514526367188e-06);
        float _4251 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1235 = _1234 * 2.0;
        float _1239 = (1.0 - _1234) / (_1234 + 1.0);
        float _4262 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _1249 = ((((1.0 - _1240) * (_1235 + 2.0)) * exp2(log2(isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * (_1235 + 1.0))) + _1240) * _1203;
        float _1250 = _1171 * 0.5;
        float _1251 = _1181 * 0.5;
        float _1252 = _1191 * 0.5;
        float _1253 = dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252));
        float _1258 = (_1253 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1253);
        float _1266 = (dot(vec3(_763, _764, _765), vec3(_1258 * _1250, _1258 * _1251, _1258 * _1252)) + 1.0) * 0.5;
        float _4273 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1275 = sqrt(((_1251 * _1251) + (_1250 * _1250)) + (_1252 * _1252)) / (_1204 + 9.9999997473787516355514526367188e-06);
        float _4284 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1277 = _1276 * 2.0;
        float _1281 = (1.0 - _1276) / (_1276 + 1.0);
        float _4295 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1291 = ((((1.0 - _1282) * (_1277 + 2.0)) * exp2(log2(isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_1277 + 1.0))) + _1282) * _1204;
        float _1292 = _1172 * 0.5;
        float _1293 = _1182 * 0.5;
        float _1294 = _1192 * 0.5;
        float _1295 = dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294));
        float _1300 = (_1295 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1295);
        float _1308 = (dot(vec3(_763, _764, _765), vec3(_1300 * _1292, _1300 * _1293, _1300 * _1294)) + 1.0) * 0.5;
        float _4306 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1317 = sqrt(((_1293 * _1293) + (_1292 * _1292)) + (_1294 * _1294)) / (_1205 + 9.9999997473787516355514526367188e-06);
        float _4317 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1319 = _1318 * 2.0;
        float _1323 = (1.0 - _1318) / (_1318 + 1.0);
        float _4328 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1333 = ((((1.0 - _1324) * (_1319 + 2.0)) * exp2(log2(isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_1319 + 1.0))) + _1324) * _1205;
        _1341 = _1172;
        _1343 = _1171;
        _1344 = _1170;
        _1345 = _1182;
        _1346 = _1181;
        _1347 = _1180;
        _1348 = _1192;
        _1349 = _1191;
        _1350 = _1190;
        _1351 = _1205;
        _1352 = _1204;
        _1353 = _1203;
        _1354 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)));
        _1355 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)));
        _1356 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)));
    }
    else
    {
        _1341 = _1342;
        _1343 = _1342;
        _1344 = _1342;
        _1345 = _1342;
        _1346 = _1342;
        _1347 = _1342;
        _1348 = _1342;
        _1349 = _1342;
        _1350 = _1342;
        _1351 = _1342;
        _1352 = _1342;
        _1353 = _1342;
        _1354 = 0.0;
        _1355 = 0.0;
        _1356 = 0.0;
    }
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1384 = fma(_1012, cbModelParam._m0[30u].z, fma(_1008, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1004));
        float _1388 = fma(_1012, cbModelParam._m0[31u].z, fma(_1008, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1004));
        float _1392 = fma(_1012, cbModelParam._m0[32u].z, fma(_1008, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1004));
        float _1415 = _1004 + _763;
        float _1416 = _1008 + _764;
        float _1417 = _1012 + _765;
        float _1427 = fma(_1417, cbModelParam._m0[30u].z, fma(_1416, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1415)) - _1384;
        float _1428 = fma(_1417, cbModelParam._m0[31u].z, fma(_1416, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1415)) - _1388;
        float _1429 = fma(_1417, cbModelParam._m0[32u].z, fma(_1416, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1415)) - _1392;
        float _1433 = inversesqrt(dot(vec3(_1427, _1428, _1429), vec3(_1427, _1428, _1429)));
        float _1446 = ((_1433 * _1427) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1384 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1447 = ((_1433 * _1428) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1388 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1448 = ((_1433 * _1429) / cbModelParam._m0[35u].z) + ((((((_1392 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1450 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1446, _1447, _1448), 0.0);
        vec4 _1457 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1446, _1447, _1448), 0.0);
        vec4 _1464 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1446, _1447, _1448), 0.0);
        vec4 _1471 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1446, _1447, _1448), 0.0);
        float _1483 = exp2((_1450.w + (-0.5)) * 20.0) * 2.0;
        float _1484 = _1483 * (_1450.x + (-0.5));
        float _1485 = _1483 * (_1450.y + (-0.5));
        float _1486 = _1483 * (_1450.z + (-0.5));
        float _1493 = exp2((_1457.w + (-0.5)) * 20.0) * 2.0;
        float _1494 = _1493 * (_1457.x + (-0.5));
        float _1495 = _1493 * (_1457.y + (-0.5));
        float _1496 = _1493 * (_1457.z + (-0.5));
        float _1503 = exp2((_1464.w + (-0.5)) * 20.0) * 2.0;
        float _1504 = _1503 * (_1464.x + (-0.5));
        float _1505 = _1503 * (_1464.y + (-0.5));
        float _1506 = _1503 * (_1464.z + (-0.5));
        float _1513 = exp2((_1471.w + (-0.5)) * 20.0) * 2.0;
        float _1514 = _1513 * (_1471.x + (-0.5));
        float _1515 = _1513 * (_1471.y + (-0.5));
        float _1516 = _1513 * (_1471.z + (-0.5));
        float _1517 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1518 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1519 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1520 = _1484 * 0.5;
        float _1521 = _1494 * 0.5;
        float _1522 = _1504 * 0.5;
        float _1523 = dot(vec3(_1520, _1521, _1522), vec3(_1520, _1521, _1522));
        float _1528 = (_1523 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1523);
        float _1536 = (dot(vec3(_763, _764, _765), vec3(_1528 * _1520, _1528 * _1521, _1528 * _1522)) + 1.0) * 0.5;
        float _4369 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1545 = sqrt(((_1521 * _1521) + (_1520 * _1520)) + (_1522 * _1522)) / (_1517 + 9.9999997473787516355514526367188e-06);
        float _4380 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _1547 = _1546 * 2.0;
        float _1551 = (1.0 - _1546) / (_1546 + 1.0);
        float _4391 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _1561 = ((((1.0 - _1552) * (_1547 + 2.0)) * exp2(log2(isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * (_1547 + 1.0))) + _1552) * _1517;
        float _1562 = _1485 * 0.5;
        float _1563 = _1495 * 0.5;
        float _1564 = _1505 * 0.5;
        float _1565 = dot(vec3(_1562, _1563, _1564), vec3(_1562, _1563, _1564));
        float _1570 = (_1565 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1565);
        float _1578 = (dot(vec3(_763, _764, _765), vec3(_1570 * _1562, _1570 * _1563, _1570 * _1564)) + 1.0) * 0.5;
        float _4402 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1587 = sqrt(((_1563 * _1563) + (_1562 * _1562)) + (_1564 * _1564)) / (_1518 + 9.9999997473787516355514526367188e-06);
        float _4413 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _1589 = _1588 * 2.0;
        float _1593 = (1.0 - _1588) / (_1588 + 1.0);
        float _4424 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _1603 = ((((1.0 - _1594) * (_1589 + 2.0)) * exp2(log2(isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * (_1589 + 1.0))) + _1594) * _1518;
        float _1604 = _1486 * 0.5;
        float _1605 = _1496 * 0.5;
        float _1606 = _1506 * 0.5;
        float _1607 = dot(vec3(_1604, _1605, _1606), vec3(_1604, _1605, _1606));
        float _1612 = (_1607 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1607);
        float _1620 = (dot(vec3(_763, _764, _765), vec3(_1612 * _1604, _1612 * _1605, _1612 * _1606)) + 1.0) * 0.5;
        float _4435 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1629 = sqrt(((_1605 * _1605) + (_1604 * _1604)) + (_1606 * _1606)) / (_1519 + 9.9999997473787516355514526367188e-06);
        float _4446 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _1631 = _1630 * 2.0;
        float _1635 = (1.0 - _1630) / (_1630 + 1.0);
        float _4457 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1636 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _1645 = ((((1.0 - _1636) * (_1631 + 2.0)) * exp2(log2(isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * (_1631 + 1.0))) + _1636) * _1519;
        _1653 = _1486;
        _1654 = _1485;
        _1655 = _1484;
        _1656 = _1496;
        _1657 = _1495;
        _1658 = _1494;
        _1659 = _1506;
        _1660 = _1505;
        _1661 = _1504;
        _1662 = _1519;
        _1663 = _1518;
        _1664 = _1517;
        _1665 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)));
        _1666 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)));
        _1667 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)));
    }
    else
    {
        _1653 = _1342;
        _1654 = _1342;
        _1655 = _1342;
        _1656 = _1342;
        _1657 = _1342;
        _1658 = _1342;
        _1659 = _1342;
        _1660 = _1342;
        _1661 = _1342;
        _1662 = _1342;
        _1663 = _1342;
        _1664 = _1342;
        _1665 = 0.0;
        _1666 = 0.0;
        _1667 = 0.0;
    }
    float _1677 = (cbModelParam._m0[1u].x * (_1665 - _1354)) + _1354;
    float _1678 = (cbModelParam._m0[1u].x * (_1666 - _1355)) + _1355;
    float _1679 = (cbModelParam._m0[1u].x * (_1667 - _1356)) + _1356;
    float _1700 = fma(_1679, cbSceneParam._m0[89u].z, fma(_1678, cbSceneParam._m0[89u].y, _1677 * cbSceneParam._m0[89u].x));
    float _1703 = fma(_1679, cbSceneParam._m0[90u].z, fma(_1678, cbSceneParam._m0[90u].y, _1677 * cbSceneParam._m0[90u].x));
    float _1706 = fma(_1679, cbSceneParam._m0[91u].z, fma(_1678, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1677));
    float _1721 = _948 * 0.5;
    float _1722 = _949 * 0.5;
    float _1723 = _950 * 0.5;
    float _1724 = dot(vec4(_1721, _1722, _1723, 1.0), vec4(_1655, _1658, _1661, _1664));
    float _1727 = dot(vec4(_1721, _1722, _1723, 1.0), vec4(_1654, _1657, _1660, _1663));
    float _1730 = dot(vec4(_1721, _1722, _1723, 1.0), vec4(_1653, _1656, _1659, _1662));
    float _1764;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1737 = dot(vec4(_1721, _1722, _1723, 1.0), vec4(_1341, _1345, _1348, _1351));
        float _1741 = dot(vec4(_1721, _1722, _1723, 1.0), vec4(_1343, _1346, _1349, _1352));
        float _1745 = dot(vec4(_1721, _1722, _1723, 1.0), vec4(_1344, _1347, _1350, _1353));
        float _1752 = dot(vec4(cbModelParam._m0[39u]), vec4(_1721, _1722, _1723, 1.0));
        _1764 = dot(vec3(isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0)), isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0)), isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1752) ? 0.0 : (isnan(0.0) ? _1752 : max(0.0, _1752))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1764 = 1.0;
    }
    float _1775;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1766 = dot(vec4(cbModelParam._m0[40u]), vec4(_1721, _1722, _1723, 1.0));
        _1775 = dot(vec3(isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0)), isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)), isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1766) ? 0.0 : (isnan(0.0) ? _1766 : max(0.0, _1766))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1775 = 1.0;
    }
    float _1779 = (_1775 * cbModelParam._m0[1u].x) + (_1764 * (1.0 - cbModelParam._m0[1u].x));
    float _1789 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _766);
    float _1790 = isnan(_1789) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1789 : min(cbModelParam._m0[25u].z, _1789));
    float _1870;
    float _1872;
    float _1874;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1837 = fma(_1012, cbModelParam._m0[13u].z, fma(_1008, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1004)) + cbModelParam._m0[13u].w;
        float _1841 = fma(_1012, cbModelParam._m0[14u].z, fma(_1008, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1004)) + cbModelParam._m0[14u].w;
        float _1845 = fma(_1012, cbModelParam._m0[15u].z, fma(_1008, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1004)) + cbModelParam._m0[15u].w;
        float _1848 = fma(_950, cbModelParam._m0[13u].z, fma(_949, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _948));
        float _1851 = fma(_950, cbModelParam._m0[14u].z, fma(_949, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _948));
        float _1854 = fma(_950, cbModelParam._m0[15u].z, fma(_949, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _948));
        float _1882;
        if (_1848 > 0.0)
        {
            _1882 = abs((1.0 - _1837) / _1848);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1837 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1882 = frontier_phi_17_15_ladder;
        }
        float _2053;
        if (_1851 > 0.0)
        {
            _2053 = abs((1.0 - _1841) / _1851);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1841 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2053 = frontier_phi_26_22_ladder;
        }
        float _2348;
        if (_1854 > 0.0)
        {
            _2348 = abs((1.0 - _1845) / _1854);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1854 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1845 + 1.0) / _1854);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2348 = frontier_phi_38_33_ladder;
        }
        float _2350 = isnan(_2053) ? _1882 : (isnan(_1882) ? _2053 : min(_1882, _2053));
        float _2351 = isnan(_2348) ? _2350 : (isnan(_2350) ? _2348 : min(_2350, _2348));
        float _2355 = (_2351 * _1848) + _1837;
        float _2356 = (_2351 * _1851) + _1841;
        float _2357 = (_2351 * _1854) + _1845;
        float _2358 = _2351 * 9.9999997473787516355514526367188e-05;
        float _2360 = (-1.0) - _2358;
        float _2362 = _2358 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2357 > _2362) || ((_2357 < _2360) || ((_2356 > _2362) || ((_2356 < _2360) || ((_2355 < _2360) || (_2355 > _2362))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2502 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2357, cbModelParam._m0[9u].z, fma(_2356, cbModelParam._m0[9u].y, _2355 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2357, cbModelParam._m0[10u].z, fma(_2356, cbModelParam._m0[10u].y, _2355 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2357, cbModelParam._m0[11u].z, fma(_2356, cbModelParam._m0[11u].y, _2355 * cbModelParam._m0[11u].x))), _1790);
            frontier_phi_16_38_ladder = _2502.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2502.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2502.x * cbModelParam._m0[1u].y;
        }
        _1870 = frontier_phi_16_38_ladder_2;
        _1872 = frontier_phi_16_38_ladder_1;
        _1874 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1858 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_948, _949, _950), _1790);
        _1870 = _1858.x * cbModelParam._m0[1u].y;
        _1872 = _1858.y * cbModelParam._m0[1u].y;
        _1874 = _1858.z * cbModelParam._m0[1u].y;
    }
    float _1878 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _766);
    float _1879 = isnan(_1878) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1878 : min(cbModelParam._m0[25u].w, _1878));
    float _1968;
    float _1970;
    float _1972;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1932 = fma(_1012, cbModelParam._m0[21u].z, fma(_1008, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1004)) + cbModelParam._m0[21u].w;
        float _1936 = fma(_1012, cbModelParam._m0[22u].z, fma(_1008, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1004)) + cbModelParam._m0[22u].w;
        float _1940 = fma(_1012, cbModelParam._m0[23u].z, fma(_1008, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1004)) + cbModelParam._m0[23u].w;
        float _1943 = fma(_950, cbModelParam._m0[21u].z, fma(_949, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _948));
        float _1946 = fma(_950, cbModelParam._m0[22u].z, fma(_949, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _948));
        float _1949 = fma(_950, cbModelParam._m0[23u].z, fma(_949, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _948));
        float _2058;
        if (_1943 > 0.0)
        {
            _2058 = abs((1.0 - _1932) / _1943);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1943 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1932 + 1.0) / _1943);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2058 = frontier_phi_28_24_ladder;
        }
        float _2375;
        if (_1946 > 0.0)
        {
            _2375 = abs((1.0 - _1936) / _1946);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1946 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1936 + 1.0) / _1946);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2375 = frontier_phi_40_35_ladder;
        }
        float _2713;
        if (_1949 > 0.0)
        {
            _2713 = abs((1.0 - _1940) / _1949);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1949 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1940 + 1.0) / _1949);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2713 = frontier_phi_50_47_ladder;
        }
        float _2715 = isnan(_2375) ? _2058 : (isnan(_2058) ? _2375 : min(_2058, _2375));
        float _2716 = isnan(_2713) ? _2715 : (isnan(_2715) ? _2713 : min(_2715, _2713));
        float _2720 = (_2716 * _1943) + _1932;
        float _2721 = (_2716 * _1946) + _1936;
        float _2722 = (_2716 * _1949) + _1940;
        float _2723 = _2716 * 9.9999997473787516355514526367188e-05;
        float _2724 = (-1.0) - _2723;
        float _2726 = _2723 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2722 > _2726) || ((_2722 < _2724) || ((_2721 > _2726) || ((_2721 < _2724) || ((_2720 < _2724) || (_2720 > _2726))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2844 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2722, cbModelParam._m0[17u].z, fma(_2721, cbModelParam._m0[17u].y, _2720 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2722, cbModelParam._m0[18u].z, fma(_2721, cbModelParam._m0[18u].y, _2720 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2722, cbModelParam._m0[19u].z, fma(_2721, cbModelParam._m0[19u].y, _2720 * cbModelParam._m0[19u].x))), _1879);
            frontier_phi_25_50_ladder = _2844.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2844.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2844.x * cbModelParam._m0[1u].z;
        }
        _1968 = frontier_phi_25_50_ladder_2;
        _1970 = frontier_phi_25_50_ladder_1;
        _1972 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1952 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_948, _949, _950), _1879);
        _1968 = _1952.x * cbModelParam._m0[1u].z;
        _1970 = _1952.y * cbModelParam._m0[1u].z;
        _1972 = _1952.z * cbModelParam._m0[1u].z;
    }
    float _1985 = (((_975 * _924) + _976) * _940) * ((cbModelParam._m0[1u].w * (_1968 - _1870)) + _1870);
    float _1987 = (((_975 * _926) + _976) * _940) * ((cbModelParam._m0[1u].w * (_1970 - _1872)) + _1872);
    float _1989 = (((_975 * _927) + _976) * _940) * ((cbModelParam._m0[1u].w * (_1972 - _1874)) + _1874);
    float _1992 = fma(_1989, cbSceneParam._m0[89u].z, fma(_1987, cbSceneParam._m0[89u].y, _1985 * cbSceneParam._m0[89u].x));
    float _1995 = fma(_1989, cbSceneParam._m0[90u].z, fma(_1987, cbSceneParam._m0[90u].y, _1985 * cbSceneParam._m0[90u].x));
    float _1998 = fma(_1989, cbSceneParam._m0[91u].z, fma(_1987, cbSceneParam._m0[91u].y, _1985 * cbSceneParam._m0[91u].x));
    float _2032 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2036 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2040 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2044 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2045 = _2032 / _2044;
    float _2046 = _2036 / _2044;
    float _2047 = _2040 / _2044;
    float _2194;
    float _2195;
    float _2196;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2074 = ((uint(_2047 > cbSceneParam._m0[59u].y) + uint(_2047 > cbSceneParam._m0[59u].x)) + uint(_2047 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2075 = _2074 + 43u;
        uint _2083 = _2074 + 44u;
        uint _2091 = _2074 + 45u;
        uint _2099 = _2074 + 46u;
        float _2110 = fma(_2044, cbSceneParam._m0[_2075].w, fma(_2040, cbSceneParam._m0[_2075].z, fma(_2036, cbSceneParam._m0[_2075].y, _2032 * cbSceneParam._m0[_2075].x)));
        float _2114 = fma(_2044, cbSceneParam._m0[_2083].w, fma(_2040, cbSceneParam._m0[_2083].z, fma(_2036, cbSceneParam._m0[_2083].y, _2032 * cbSceneParam._m0[_2083].x)));
        float _2122 = fma(_2044, cbSceneParam._m0[_2099].w, fma(_2040, cbSceneParam._m0[_2099].z, fma(_2036, cbSceneParam._m0[_2099].y, _2032 * cbSceneParam._m0[_2099].x)));
        float _2127 = cbSceneParam._m0[33u].z * _2122;
        float _2129 = cbSceneParam._m0[33u].w * _2122;
        float _2132 = fma(_2044, cbSceneParam._m0[_2091].w, fma(_2040, cbSceneParam._m0[_2091].z, fma(_2036, cbSceneParam._m0[_2091].y, _2032 * cbSceneParam._m0[_2091].x))) / _2122;
        float _2180 = (cbSceneParam._m0[33u].x - sqrt(((_2046 * _2046) + (_2045 * _2045)) + (_2047 * _2047))) * cbSceneParam._m0[33u].y;
        float _4583 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
        float _2187 = (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2127 + _2110) / _2122, (_2129 + _2114) / _2122), _2132), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2129 + _2110) / _2122, (_2114 - _2127) / _2122), _2132), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2110 - _2127) / _2122, (_2114 - _2129) / _2122), _2132), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2110 - _2129) / _2122, (_2127 + _2114) / _2122), _2132), 0.0)).x), vec4(0.25)));
        _2194 = 1.0 - (_2187 * cbSceneParam._m0[34u].x);
        _2195 = 1.0 - (_2187 * cbSceneParam._m0[34u].y);
        _2196 = 1.0 - (_2187 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2194 = 1.0;
        _2195 = 1.0;
        _2196 = 1.0;
    }
    float _2260;
    float _2262;
    float _2264;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2248 = fma(_2044, cbSceneParam._m0[63u].w, fma(_2040, cbSceneParam._m0[63u].z, fma(_2036, cbSceneParam._m0[63u].y, _2032 * cbSceneParam._m0[63u].x)));
        float _2249 = fma(_2044, cbSceneParam._m0[60u].w, fma(_2040, cbSceneParam._m0[60u].z, fma(_2036, cbSceneParam._m0[60u].y, _2032 * cbSceneParam._m0[60u].x))) / _2248;
        float _2250 = fma(_2044, cbSceneParam._m0[61u].w, fma(_2040, cbSceneParam._m0[61u].z, fma(_2036, cbSceneParam._m0[61u].y, _2032 * cbSceneParam._m0[61u].x))) / _2248;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2249 >= cbSceneParam._m0[64u].x) && (_2250 >= cbSceneParam._m0[64u].y)) && (_2249 <= cbSceneParam._m0[64u].z)) && (_2250 <= cbSceneParam._m0[64u].w))
        {
            float _2388 = fma(_2044, cbSceneParam._m0[62u].w, fma(_2040, cbSceneParam._m0[62u].z, fma(_2036, cbSceneParam._m0[62u].y, _2032 * cbSceneParam._m0[62u].x))) / _2248;
            float _2392 = isnan(cbSceneParam._m0[41u].w) ? _2388 : (isnan(_2388) ? cbSceneParam._m0[41u].w : max(_2388, cbSceneParam._m0[41u].w));
            float _2435 = (cbSceneParam._m0[33u].x - sqrt(((_2046 * _2046) + (_2045 * _2045)) + (_2047 * _2047))) * cbSceneParam._m0[33u].y;
            float _4599 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
            float _2442 = (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2249, cbSceneParam._m0[33u].w + _2250), _2392), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2249, _2250 - cbSceneParam._m0[33u].z), _2392), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2249 - cbSceneParam._m0[33u].z, _2250 - cbSceneParam._m0[33u].w), _2392), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2249 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2250), _2392), 0.0)).x), vec4(0.25)));
            float _2446 = 1.0 - (_2442 * cbSceneParam._m0[34u].x);
            float _2447 = 1.0 - (_2442 * cbSceneParam._m0[34u].y);
            float _2448 = 1.0 - (_2442 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2448) ? _2196 : (isnan(_2196) ? _2448 : min(_2196, _2448));
            frontier_phi_37_36_ladder_1 = isnan(_2447) ? _2195 : (isnan(_2195) ? _2447 : min(_2195, _2447));
            frontier_phi_37_36_ladder_2 = isnan(_2446) ? _2194 : (isnan(_2194) ? _2446 : min(_2194, _2446));
        }
        else
        {
            frontier_phi_37_36_ladder = _2196;
            frontier_phi_37_36_ladder_1 = _2195;
            frontier_phi_37_36_ladder_2 = _2194;
        }
        _2260 = frontier_phi_37_36_ladder_2;
        _2262 = frontier_phi_37_36_ladder_1;
        _2264 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2260 = _2194;
        _2262 = _2195;
        _2264 = _2196;
    }
    uvec4 _2269 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _2271 = _2269.x * 14u;
    uint _2272 = _2271 + 13u;
    float _2279 = _940 + (-1.0);
    float _2284 = (cbLight._m0[_2272].x * _2279) + 1.0;
    float _2285 = (cbLight._m0[_2272].y * _2279) + 1.0;
    float _2286 = (cbLight._m0[_2272].z * _2279) + 1.0;
    float _2287 = (cbLight._m0[_2272].w * _2279) + 1.0;
    uint _2288 = _2271 + 5u;
    float _2294 = isnan(1.0) ? _2285 : (isnan(_2285) ? 1.0 : min(_2285, 1.0));
    uint _2298 = _2271 + 4u;
    float _2307 = isnan(1.0) ? _2284 : (isnan(_2284) ? 1.0 : min(_2284, 1.0));
    uint _2311 = _2271 | 1u;
    float _2322 = dot(vec3(cbLight._m0[_2271].xyz), vec3(_763, _764, _765));
    float _2325 = dot(vec3(cbLight._m0[_2311].xyz), vec3(_763, _764, _765));
    float _4635 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _4646 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2330 = (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0))) * 0.3183098733425140380859375;
    float _2332 = (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0))) * 0.3183098733425140380859375;
    float _2339 = ((cbLight._m0[_2288].x * _2294) * _2332) + (((cbLight._m0[_2298].x * _2260) * _2307) * _2330);
    float _2340 = ((_2294 * cbLight._m0[_2288].y) * _2332) + (((cbLight._m0[_2298].y * _2262) * _2307) * _2330);
    float _2341 = ((_2294 * cbLight._m0[_2288].z) * _2332) + (((cbLight._m0[_2298].z * _2264) * _2307) * _2330);
    uvec4 _2345 = floatBitsToUint(cbLight._m0[_2271 + 12u]);
    bool _2347 = _2345.x == 0u;
    float _2449;
    float _2451;
    float _2453;
    if (_2347)
    {
        _2449 = _2339;
        _2451 = _2340;
        _2453 = _2341;
    }
    else
    {
        uint _2457 = _2271 + 6u;
        float _2473 = (dot(vec3(cbLight._m0[_2271 + 2u].xyz), vec3(_763, _764, _765)) * 0.5) + 0.5;
        float _2474 = _2473 * _2473;
        float _4657 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        float _2475 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
        float _2476 = isnan(1.0) ? _2286 : (isnan(_2286) ? 1.0 : min(_2286, 1.0));
        _2449 = (((cbLight._m0[_2457].x * 0.3183098733425140380859375) * _2475) * _2476) + _2339;
        _2451 = (((cbLight._m0[_2457].y * 0.3183098733425140380859375) * _2475) * _2476) + _2340;
        _2453 = (((cbLight._m0[_2457].z * 0.3183098733425140380859375) * _2475) * _2476) + _2341;
    }
    bool _2456 = _2345.y == 0u;
    float _2511;
    float _2513;
    float _2515;
    if (_2456)
    {
        _2511 = _2449;
        _2513 = _2451;
        _2515 = _2453;
    }
    else
    {
        uint _2684 = _2271 + 7u;
        float _2700 = (dot(vec3(cbLight._m0[_2271 + 3u].xyz), vec3(_763, _764, _765)) * 0.5) + 0.5;
        float _2701 = _2700 * _2700;
        float _4673 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        float _2702 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
        float _2703 = isnan(1.0) ? _2287 : (isnan(_2287) ? 1.0 : min(_2287, 1.0));
        _2511 = (((cbLight._m0[_2684].x * 0.3183098733425140380859375) * _2702) * _2703) + _2449;
        _2513 = (((cbLight._m0[_2684].y * 0.3183098733425140380859375) * _2702) * _2703) + _2451;
        _2515 = (((cbLight._m0[_2684].z * 0.3183098733425140380859375) * _2702) * _2703) + _2453;
    }
    uint _2518 = _2271 + 8u;
    float _2531 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2271].w)) * _766) * 0.949999988079071044921875);
    float _2532 = _2531 * _2531;
    float _2533 = cbLight._m0[_2271].x + _842;
    float _2534 = cbLight._m0[_2271].y + _843;
    float _2535 = cbLight._m0[_2271].z + _844;
    float _2539 = inversesqrt(dot(vec3(_2533, _2534, _2535), vec3(_2533, _2534, _2535)));
    float _2540 = _2539 * _2533;
    float _2541 = _2539 * _2534;
    float _2542 = _2539 * _2535;
    float _2543 = dot(vec3(_763, _764, _765), vec3(cbLight._m0[_2271].xyz));
    float _4689 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
    float _2546 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
    float _4700 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _2547 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
    float _2548 = dot(vec3(_763, _764, _765), vec3(_2540, _2541, _2542));
    float _4711 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
    float _2551 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
    float _2552 = dot(vec3(cbLight._m0[_2271].xyz), vec3(_2540, _2541, _2542));
    float _4722 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
    float _2556 = _2532 * _2532;
    float _2560 = ((_2551 * _2551) * (_2556 + (-1.0))) + 1.0;
    float _2568 = exp2(log2(1.0 - (isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0)))) * 5.0);
    float _2569 = 0.959999978542327880859375 - _921;
    float _2571 = 0.959999978542327880859375 - _922;
    float _2572 = 0.959999978542327880859375 - _923;
    float _2579 = 1.0 - _2532;
    float _2590 = (0.5 / (((_2547 * ((_2546 * _2579) + _2532)) + 9.9999999392252902907785028219223e-09) + (((_2547 * _2579) + _2532) * _2546))) * _2546;
    float _4733 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
    float _2592 = (isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0))) * (_2556 / ((_2560 * _2560) * 3.141590118408203125));
    uint _2606 = _2271 + 9u;
    float _2617 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2311].w)) * _766) * 0.949999988079071044921875);
    float _2618 = _2617 * _2617;
    float _2619 = cbLight._m0[_2311].x + _842;
    float _2620 = cbLight._m0[_2311].y + _843;
    float _2621 = cbLight._m0[_2311].z + _844;
    float _2625 = inversesqrt(dot(vec3(_2619, _2620, _2621), vec3(_2619, _2620, _2621)));
    float _2626 = _2625 * _2619;
    float _2627 = _2625 * _2620;
    float _2628 = _2625 * _2621;
    float _2629 = dot(vec3(_763, _764, _765), vec3(cbLight._m0[_2311].xyz));
    float _4744 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
    float _2632 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
    float _2633 = dot(vec3(_763, _764, _765), vec3(_2626, _2627, _2628));
    float _4755 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
    float _2636 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
    float _2637 = dot(vec3(cbLight._m0[_2311].xyz), vec3(_2626, _2627, _2628));
    float _4766 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
    float _2641 = _2618 * _2618;
    float _2645 = ((_2636 * _2636) * (_2641 + (-1.0))) + 1.0;
    float _2652 = exp2(log2(1.0 - (isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0)))) * 5.0);
    float _2659 = 1.0 - _2618;
    float _2669 = (0.5 / (((_2547 * ((_2632 * _2659) + _2618)) + 9.9999999392252902907785028219223e-09) + (((_2547 * _2659) + _2618) * _2632))) * _2632;
    float _4777 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
    float _2671 = (isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0))) * (_2641 / ((_2645 * _2645) * 3.141590118408203125));
    float _2681 = (((((_2652 * _2569) + _924) * cbLight._m0[_2606].x) * _2671) * _2294) + ((((cbLight._m0[_2518].x * _2260) * ((_2568 * _2569) + _924)) * _2592) * _2307);
    float _2682 = (((((_2652 * _2571) + _926) * cbLight._m0[_2606].y) * _2671) * _2294) + ((((cbLight._m0[_2518].y * _2262) * ((_2568 * _2571) + _926)) * _2592) * _2307);
    float _2683 = (((((_2652 * _2572) + _927) * cbLight._m0[_2606].z) * _2671) * _2294) + ((((cbLight._m0[_2518].z * _2264) * ((_2568 * _2572) + _927)) * _2592) * _2307);
    float _2739;
    float _2741;
    float _2743;
    if (_2347)
    {
        _2739 = _2681;
        _2741 = _2682;
        _2743 = _2683;
    }
    else
    {
        uint _2745 = _2271 + 2u;
        uint _2749 = _2271 + 10u;
        float _2763 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2745].w)) * _766) * 0.949999988079071044921875);
        float _2764 = _2763 * _2763;
        float _2765 = cbLight._m0[_2745].x + _842;
        float _2766 = cbLight._m0[_2745].y + _843;
        float _2767 = cbLight._m0[_2745].z + _844;
        float _2771 = inversesqrt(dot(vec3(_2765, _2766, _2767), vec3(_2765, _2766, _2767)));
        float _2772 = _2771 * _2765;
        float _2773 = _2771 * _2766;
        float _2774 = _2771 * _2767;
        float _2775 = dot(vec3(_763, _764, _765), vec3(cbLight._m0[_2745].xyz));
        float _4788 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
        float _2778 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
        float _2779 = dot(vec3(_763, _764, _765), vec3(_2772, _2773, _2774));
        float _4799 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        float _2782 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
        float _2783 = dot(vec3(cbLight._m0[_2745].xyz), vec3(_2772, _2773, _2774));
        float _4810 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
        float _2787 = _2764 * _2764;
        float _2791 = ((_2782 * _2782) * (_2787 + (-1.0))) + 1.0;
        float _2798 = exp2(log2(1.0 - (isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0)))) * 5.0);
        float _2805 = 1.0 - _2764;
        float _2815 = (0.5 / (((_2547 * ((_2778 * _2805) + _2764)) + 9.9999999392252902907785028219223e-09) + (((_2547 * _2805) + _2764) * _2778))) * _2778;
        float _4821 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
        float _2817 = (isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0))) * (_2787 / ((_2791 * _2791) * 3.141590118408203125));
        float _2818 = isnan(1.0) ? _2286 : (isnan(_2286) ? 1.0 : min(_2286, 1.0));
        _2739 = (((((_2798 * _2569) + _924) * cbLight._m0[_2749].x) * _2817) * _2818) + _2681;
        _2741 = (((((_2798 * _2571) + _926) * cbLight._m0[_2749].y) * _2817) * _2818) + _2682;
        _2743 = (((((_2798 * _2572) + _927) * cbLight._m0[_2749].z) * _2817) * _2818) + _2683;
    }
    float _2849;
    float _2851;
    float _2853;
    if (_2456)
    {
        _2849 = _2739;
        _2851 = _2741;
        _2853 = _2743;
    }
    else
    {
        uint _2860 = _2271 + 3u;
        uint _2864 = _2271 + 11u;
        float _2878 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2860].w)) * _766) * 0.949999988079071044921875);
        float _2879 = _2878 * _2878;
        float _2880 = cbLight._m0[_2860].x + _842;
        float _2881 = cbLight._m0[_2860].y + _843;
        float _2882 = cbLight._m0[_2860].z + _844;
        float _2886 = inversesqrt(dot(vec3(_2880, _2881, _2882), vec3(_2880, _2881, _2882)));
        float _2887 = _2886 * _2880;
        float _2888 = _2886 * _2881;
        float _2889 = _2886 * _2882;
        float _2890 = dot(vec3(_763, _764, _765), vec3(cbLight._m0[_2860].xyz));
        float _4837 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
        float _2893 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
        float _2894 = dot(vec3(_763, _764, _765), vec3(_2887, _2888, _2889));
        float _4848 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
        float _2897 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
        float _2898 = dot(vec3(cbLight._m0[_2860].xyz), vec3(_2887, _2888, _2889));
        float _4859 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
        float _2902 = _2879 * _2879;
        float _2906 = ((_2897 * _2897) * (_2902 + (-1.0))) + 1.0;
        float _2913 = exp2(log2(1.0 - (isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0)))) * 5.0);
        float _2920 = 1.0 - _2879;
        float _2930 = (0.5 / (((_2547 * ((_2893 * _2920) + _2879)) + 9.9999999392252902907785028219223e-09) + (((_2547 * _2920) + _2879) * _2893))) * _2893;
        float _4870 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
        float _2932 = (isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0))) * (_2902 / ((_2906 * _2906) * 3.141590118408203125));
        float _2933 = isnan(1.0) ? _2287 : (isnan(_2287) ? 1.0 : min(_2287, 1.0));
        _2849 = (((((_2913 * _2569) + _924) * cbLight._m0[_2864].x) * _2932) * _2933) + _2739;
        _2851 = (((((_2913 * _2571) + _926) * cbLight._m0[_2864].y) * _2932) * _2933) + _2741;
        _2853 = (((((_2913 * _2572) + _927) * cbLight._m0[_2864].z) * _2932) * _2933) + _2743;
    }
    float _2999;
    float _3001;
    float _3003;
    float _3005;
    float _3007;
    float _3009;
    if (_2269.y == 0u)
    {
        uvec4 _2954 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2955 = _2954.x;
        uint _2966 = uint((float(_2954.y) * floor(float(uint(cbSceneParam._m0[85u].y * _863) / _2955))) + floor(float(uint(cbSceneParam._m0[85u].x * _862) / _2955)));
        float _2976 = (log2(_2047 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2977 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
        uint _2980 = uint(isnan(14.0) ? _2977 : (isnan(_2977) ? 14.0 : min(_2977, 14.0)));
        uvec4 _2985 = texelFetch(g_lightClusterGridBuffer, int(((_2980 << 2u) + (_2966 << 6u)) >> 2u));
        uint _2986 = _2985.x;
        uint _2987 = _2954.z;
        float _3066;
        float _3068;
        float _3070;
        float _3072;
        float _3074;
        float _3076;
        if (((((1u << ((_2987 >> 4u) & 15u)) + 4294967295u) & _2986) == 0u) || ((_2987 & 240u) == 0u))
        {
            _3066 = 0.0;
            _3068 = 0.0;
            _3070 = 0.0;
            _3072 = 0.0;
            _3074 = 0.0;
            _3076 = 0.0;
        }
        else
        {
            float _3067;
            float _3069;
            float _3071;
            float _3073;
            float _3075;
            float _3077;
            float _3219 = 0.0;
            float _3220 = 0.0;
            float _3221 = 0.0;
            float _3222 = 0.0;
            float _3223 = 0.0;
            float _3224 = 0.0;
            uint _3225 = 0u;
            uint _3234;
            bool _3235;
            for (;;)
            {
                _3234 = texelFetch(g_lightClassification, int((((_2980 << 5u) + (_2966 << 9u)) + (_3225 << 2u)) >> 2u)).x;
                _3235 = _3234 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3235)
                {
                    frontier_phi_71_pred = _3224;
                    frontier_phi_71_pred_1 = _3223;
                    frontier_phi_71_pred_2 = _3222;
                    frontier_phi_71_pred_3 = _3221;
                    frontier_phi_71_pred_4 = _3220;
                    frontier_phi_71_pred_5 = _3219;
                }
                else
                {
                    float _3364;
                    float _3365;
                    float _3366;
                    float _3367;
                    float _3368;
                    float _3369;
                    uint _3370;
                    _3364 = _3219;
                    _3365 = _3220;
                    _3366 = _3221;
                    _3367 = _3222;
                    _3368 = _3223;
                    _3369 = _3224;
                    _3370 = _3234;
                    float _3291;
                    float _3292;
                    float _3293;
                    float _3294;
                    float _3295;
                    float _3296;
                    for (;;)
                    {
                        uint _3374 = uint(findLSB(_3370)) + (_3225 << 5u);
                        uint _3371 = (_3370 + 4294967295u) & _3370;
                        uint _3376 = _3374 * 48u;
                        vec4 _3390 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3376)).x, texelFetch(g_PointLightRenderingBuffer, int(_3376 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3376 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3376 + 3u)).x));
                        uint _3396 = (_3374 * 48u) + 4u;
                        vec4 _3409 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3396)).x, texelFetch(g_PointLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3396 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3396 + 3u)).x));
                        uint _3415 = (_3374 * 48u) + 8u;
                        vec3 _3426 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3415)).x, texelFetch(g_PointLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3415 + 2u)).x));
                        float _3430 = _3390.x - _2045;
                        float _3431 = _3390.y - _2046;
                        float _3432 = _3390.z - _2047;
                        float _3433 = dot(vec3(_3430, _3431, _3432), vec3(_3430, _3431, _3432));
                        float _3436 = inversesqrt(_3433);
                        float _3437 = _3436 * _3430;
                        float _3438 = _3436 * _3431;
                        float _3439 = _3436 * _3432;
                        float _3440 = dot(vec3(_881, _884, _887), vec3(_3437, _3438, _3439));
                        float _3445 = 1.0 - (_3433 * _3390.w);
                        float _4896 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                        float _3446 = isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0));
                        float _3447 = sqrt(_3433) * _3409.w;
                        float _3450 = 1.39999997615814208984375 / (_3447 + 1.39999997615814208984375);
                        float _3451 = _3450 * _3450;
                        float _3454 = ((1.0 - _3451) * _3440) + _3451;
                        float _3457 = _3447 * _3447;
                        float _3461 = ((isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0))) * _3446) / ((_3457 * 0.699999988079071044921875) + 1.0);
                        float _3465 = (-0.0) - _2045;
                        float _3466 = (-0.0) - _2046;
                        float _3467 = (-0.0) - _2047;
                        float _3471 = inversesqrt(dot(vec3(_3465, _3466, _3467), vec3(_3465, _3466, _3467)));
                        float _3472 = _3471 * _3465;
                        float _3473 = _3471 * _3466;
                        float _3474 = _3471 * _3467;
                        float _3481 = exp2(log2(1.0 / ((_3457 * 3.5) + 5.0)) * 0.25);
                        float _3482 = 1.0 - _956;
                        float _3489 = sqrt(1.0 - ((1.0 - (_3482 * _3482)) * (1.0 - (_3481 * _3481))));
                        float _3490 = _3489 * _3489;
                        float _3491 = _3490 * _3490;
                        float _3492 = _3472 + _3437;
                        float _3493 = _3473 + _3438;
                        float _3494 = _3474 + _3439;
                        float _3498 = inversesqrt(dot(vec3(_3492, _3493, _3494), vec3(_3492, _3493, _3494)));
                        float _3502 = dot(vec3(_881, _884, _887), vec3(_3472, _3473, _3474));
                        float _4912 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                        float _3505 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
                        float _3506 = dot(vec3(_881, _884, _887), vec3(_3498 * _3492, _3498 * _3493, _3498 * _3494));
                        float _4923 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                        float _3509 = isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0));
                        float _3513 = ((_3509 * _3509) * (_3491 + (-1.0))) + 1.0;
                        float _3514 = _3450 * _3490;
                        float _3515 = _3514 * _3514;
                        float _3518 = ((1.0 - _3515) * _3440) + _3515;
                        float _4934 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                        float _3519 = isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0));
                        float _3520 = 1.0 - _3490;
                        float _3530 = (0.5 / (((_3519 * ((_3505 * _3520) + _3490)) + 9.9999999392252902907785028219223e-09) + (((_3519 * _3520) + _3490) * _3505))) * _3519;
                        float _4945 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                        float _3541 = (((_3491 * 3.1415927410125732421875) * (isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0)))) / ((_3513 * _3513) * ((_3457 * 2.1991131305694580078125) + 3.141590118408203125))) * _3446;
                        _3294 = (_3461 * _3409.x) + _3367;
                        _3295 = (_3461 * _3409.y) + _3368;
                        _3296 = (_3461 * _3409.z) + _3369;
                        _3291 = (_3541 * _3426.x) + _3364;
                        _3292 = (_3541 * _3426.y) + _3365;
                        _3293 = (_3541 * _3426.z) + _3366;
                        if (_3371 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3364 = _3291;
                            _3365 = _3292;
                            _3366 = _3293;
                            _3367 = _3294;
                            _3368 = _3295;
                            _3369 = _3296;
                            _3370 = _3371;
                        }
                    }
                    frontier_phi_71_pred = _3296;
                    frontier_phi_71_pred_1 = _3295;
                    frontier_phi_71_pred_2 = _3294;
                    frontier_phi_71_pred_3 = _3293;
                    frontier_phi_71_pred_4 = _3292;
                    frontier_phi_71_pred_5 = _3291;
                }
                _3077 = frontier_phi_71_pred;
                _3075 = frontier_phi_71_pred_1;
                _3073 = frontier_phi_71_pred_2;
                _3071 = frontier_phi_71_pred_3;
                _3069 = frontier_phi_71_pred_4;
                _3067 = frontier_phi_71_pred_5;
                uint _3226 = _3225 + 1u;
                if (_3226 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3219 = _3067;
                    _3220 = _3069;
                    _3221 = _3071;
                    _3222 = _3073;
                    _3223 = _3075;
                    _3224 = _3077;
                    _3225 = _3226;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3066 = _3067;
            _3068 = _3069;
            _3070 = _3071;
            _3072 = _3073;
            _3074 = _3075;
            _3076 = _3077;
        }
        uvec4 _3080 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3081 = _3080.z;
        uint _3083 = (_3081 >> 8u) & 15u;
        float _3187;
        float _3189;
        float _3191;
        float _3193;
        float _3195;
        float _3197;
        if (((4294967295u << _3083) & _2986) == 0u)
        {
            _3187 = _3066;
            _3189 = _3068;
            _3191 = _3070;
            _3193 = _3072;
            _3195 = _3074;
            _3197 = _3076;
        }
        else
        {
            float _3212 = inversesqrt(dot(vec3(_2045, _2046, _2047), vec3(_2045, _2046, _2047)));
            float _3213 = _3212 * _2045;
            float _3214 = _3212 * _2046;
            float _3215 = _3212 * _2047;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3083 < ((_3081 >> 12u) & 15u))
            {
                float _3188;
                float _3190;
                float _3192;
                float _3194;
                float _3196;
                float _3198;
                float _3347 = _3066;
                float _3348 = _3068;
                float _3349 = _3070;
                float _3350 = _3072;
                float _3351 = _3074;
                float _3352 = _3076;
                uint _3353 = _3083;
                uint _3362;
                bool _3363;
                for (;;)
                {
                    _3362 = texelFetch(g_lightClassification, int((((_2980 << 5u) + (_2966 << 9u)) + (_3353 << 2u)) >> 2u)).x;
                    _3363 = _3362 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3363)
                    {
                        frontier_phi_82_pred = _3352;
                        frontier_phi_82_pred_1 = _3351;
                        frontier_phi_82_pred_2 = _3350;
                        frontier_phi_82_pred_3 = _3349;
                        frontier_phi_82_pred_4 = _3348;
                        frontier_phi_82_pred_5 = _3347;
                    }
                    else
                    {
                        float _3555;
                        float _3556;
                        float _3557;
                        float _3558;
                        float _3559;
                        float _3560;
                        float _3849;
                        float _3850;
                        float _3851;
                        float _3852;
                        float _3853;
                        float _3854;
                        float _3568 = _3347;
                        float _3569 = _3348;
                        float _3570 = _3349;
                        float _3571 = _3350;
                        float _3572 = _3351;
                        float _3573 = _3352;
                        uint _3574 = _3362;
                        uint _3575;
                        vec4 _3600;
                        float _3601;
                        vec4 _3616;
                        vec3 _3628;
                        vec4 _3643;
                        vec4 _3659;
                        float _3705;
                        bool _3706;
                        for (;;)
                        {
                            uint _3585 = ((_3353 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3574));
                            _3575 = (_3574 + 4294967295u) & _3574;
                            uint _3587 = _3585 * 40u;
                            _3600 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3587)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 3u)).x));
                            _3601 = _3600.w;
                            uint _3603 = (_3585 * 40u) + 4u;
                            _3616 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3603)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 3u)).x));
                            uint _3618 = (_3585 * 40u) + 8u;
                            _3628 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3618)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 2u)).x));
                            uint _3630 = (_3585 * 40u) + 16u;
                            _3643 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3630)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 3u)).x));
                            uint _3646 = (_3585 * 40u) + 20u;
                            _3659 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3646)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 3u)).x));
                            uint _3661 = (_3585 * 40u) + 24u;
                            vec4 _3674 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3661)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 3u)).x));
                            uint _3680 = (_3585 * 40u) + 28u;
                            vec4 _3693 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3680)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 3u)).x));
                            _3705 = fma(_2047, _3693.z, fma(_2046, _3693.y, _3693.x * _2045)) + _3693.w;
                            _3706 = !((fma(_2047, _3674.z, fma(_2046, _3674.y, _3674.x * _2045)) + _3674.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3706)
                            {
                                float _3733 = _3600.x - _2045;
                                float _3734 = _3600.y - _2046;
                                float _3735 = _3600.z - _2047;
                                float _3736 = dot(vec3(_3733, _3734, _3735), vec3(_3733, _3734, _3735));
                                float _3739 = inversesqrt(_3736);
                                float _3740 = _3739 * _3733;
                                float _3741 = _3739 * _3734;
                                float _3742 = _3739 * _3735;
                                float _3746 = 1.0 - (_3736 / (_3601 * _3601));
                                float _4956 = isnan(0.0) ? _3746 : (isnan(_3746) ? 0.0 : max(_3746, 0.0));
                                float _3747 = isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0));
                                float _3751 = sqrt(_3736) * _3616.w;
                                float _3753 = 1.39999997615814208984375 / (_3751 + 1.39999997615814208984375);
                                float _3754 = _3753 * _3753;
                                float _3757 = ((1.0 - _3754) * dot(vec3(_3740, _3741, _3742), vec3(_881, _884, _887))) + _3754;
                                float _3760 = _3751 * _3751;
                                float _3764 = (fma(_2047, _3643.z, fma(_2046, _3643.y, _3643.x * _2045)) + _3643.w) / _3705;
                                float _3765 = (fma(_2047, _3659.z, fma(_2046, _3659.y, _3659.x * _2045)) + _3659.w) / _3705;
                                float _3769 = 1.0 - dot(vec2(_3764, _3765), vec2(_3764, _3765));
                                float _4972 = isnan(0.0) ? _3769 : (isnan(_3769) ? 0.0 : max(_3769, 0.0));
                                float _3770 = isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0));
                                float _3771 = _3770 * (((isnan(0.0) ? _3757 : (isnan(_3757) ? 0.0 : max(_3757, 0.0))) * _3747) / ((_3760 * 0.699999988079071044921875) + 1.0));
                                float _3783 = exp2(log2(1.0 / ((_3760 * 3.5) + 5.0)) * 0.25);
                                float _3784 = 1.0 - _956;
                                float _3791 = sqrt(1.0 - ((1.0 - (_3784 * _3784)) * (1.0 - (_3783 * _3783))));
                                float _3792 = _3791 * _3791;
                                float _3793 = _3792 * _3792;
                                float _3794 = _3740 - _3213;
                                float _3795 = _3741 - _3214;
                                float _3796 = _3742 - _3215;
                                float _3800 = inversesqrt(dot(vec3(_3794, _3795, _3796), vec3(_3794, _3795, _3796)));
                                float _3804 = dot(vec3(_881, _884, _887), vec3((-0.0) - _3213, (-0.0) - _3214, (-0.0) - _3215));
                                float _4983 = isnan(0.0) ? _3804 : (isnan(_3804) ? 0.0 : max(_3804, 0.0));
                                float _3807 = isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0));
                                float _3808 = dot(vec3(_881, _884, _887), vec3(_3800 * _3794, _3800 * _3795, _3800 * _3796));
                                float _4994 = isnan(0.0) ? _3808 : (isnan(_3808) ? 0.0 : max(_3808, 0.0));
                                float _3811 = isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0));
                                float _3815 = ((_3811 * _3811) * (_3793 + (-1.0))) + 1.0;
                                float _3816 = _3753 * _3792;
                                float _3817 = _3816 * _3816;
                                float _3823 = ((1.0 - _3817) * dot(vec3(_881, _884, _887), vec3(_3740, _3741, _3742))) + _3817;
                                float _5005 = isnan(0.0) ? _3823 : (isnan(_3823) ? 0.0 : max(_3823, 0.0));
                                float _3824 = isnan(1.0) ? _5005 : (isnan(_5005) ? 1.0 : min(_5005, 1.0));
                                float _3825 = 1.0 - _3792;
                                float _3835 = (0.5 / (((_3824 * ((_3807 * _3825) + _3792)) + 9.9999999392252902907785028219223e-09) + (((_3824 * _3825) + _3792) * _3807))) * _3824;
                                float _5016 = isnan(0.0) ? _3835 : (isnan(_3835) ? 0.0 : max(_3835, 0.0));
                                float _3845 = (_3770 * _3747) * (((_3793 * 3.1415927410125732421875) * (isnan(1.0) ? _5016 : (isnan(_5016) ? 1.0 : min(_5016, 1.0)))) / ((_3815 * _3815) * ((_3760 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3771 * _3616.z;
                                frontier_phi_88_pred_1 = _3771 * _3616.y;
                                frontier_phi_88_pred_2 = _3771 * _3616.x;
                                frontier_phi_88_pred_3 = _3845 * _3628.z;
                                frontier_phi_88_pred_4 = _3845 * _3628.y;
                                frontier_phi_88_pred_5 = _3845 * _3628.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3854 = frontier_phi_88_pred;
                            _3853 = frontier_phi_88_pred_1;
                            _3852 = frontier_phi_88_pred_2;
                            _3851 = frontier_phi_88_pred_3;
                            _3850 = frontier_phi_88_pred_4;
                            _3849 = frontier_phi_88_pred_5;
                            _3558 = _3852 + _3571;
                            _3559 = _3853 + _3572;
                            _3560 = _3854 + _3573;
                            _3555 = _3849 + _3568;
                            _3556 = _3850 + _3569;
                            _3557 = _3851 + _3570;
                            if (_3575 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3568 = _3555;
                                _3569 = _3556;
                                _3570 = _3557;
                                _3571 = _3558;
                                _3572 = _3559;
                                _3573 = _3560;
                                _3574 = _3575;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3560;
                        frontier_phi_82_pred_1 = _3559;
                        frontier_phi_82_pred_2 = _3558;
                        frontier_phi_82_pred_3 = _3557;
                        frontier_phi_82_pred_4 = _3556;
                        frontier_phi_82_pred_5 = _3555;
                    }
                    _3198 = frontier_phi_82_pred;
                    _3196 = frontier_phi_82_pred_1;
                    _3194 = frontier_phi_82_pred_2;
                    _3192 = frontier_phi_82_pred_3;
                    _3190 = frontier_phi_82_pred_4;
                    _3188 = frontier_phi_82_pred_5;
                    uint _3354 = _3353 + 1u;
                    if (_3354 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3347 = _3188;
                        _3348 = _3190;
                        _3349 = _3192;
                        _3350 = _3194;
                        _3351 = _3196;
                        _3352 = _3198;
                        _3353 = _3354;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3194;
                frontier_phi_63_64_ladder_1 = _3198;
                frontier_phi_63_64_ladder_2 = _3196;
                frontier_phi_63_64_ladder_3 = _3192;
                frontier_phi_63_64_ladder_4 = _3190;
                frontier_phi_63_64_ladder_5 = _3188;
            }
            else
            {
                frontier_phi_63_64_ladder = _3072;
                frontier_phi_63_64_ladder_1 = _3076;
                frontier_phi_63_64_ladder_2 = _3074;
                frontier_phi_63_64_ladder_3 = _3070;
                frontier_phi_63_64_ladder_4 = _3068;
                frontier_phi_63_64_ladder_5 = _3066;
            }
            _3187 = frontier_phi_63_64_ladder_5;
            _3189 = frontier_phi_63_64_ladder_4;
            _3191 = frontier_phi_63_64_ladder_3;
            _3193 = frontier_phi_63_64_ladder;
            _3195 = frontier_phi_63_64_ladder_2;
            _3197 = frontier_phi_63_64_ladder_1;
        }
        float _3202 = isnan(1.0) ? _940 : (isnan(_940) ? 1.0 : min(_940, 1.0));
        _2999 = (_3202 * _3193) + _2511;
        _3001 = (_3202 * _3195) + _2513;
        _3003 = (_3202 * _3197) + _2515;
        _3005 = ((_3187 * _924) * _3202) + _2849;
        _3007 = ((_3189 * _926) * _3202) + _2851;
        _3009 = ((_3191 * _927) * _3202) + _2853;
    }
    else
    {
        _2999 = _2511;
        _3001 = _2513;
        _3003 = _2515;
        _3005 = _2849;
        _3007 = _2851;
        _3009 = _2853;
    }
    float _5032 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _5043 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _5054 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _3026 = ((isnan(1.0) ? _5032 : (isnan(_5032) ? 1.0 : min(_5032, 1.0))) * (_2999 + ((isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))) * _940))) + ((_3005 + ((isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0))) * _1779)) * cbPerFrame._m0[3u].x);
    float _3027 = ((isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0))) * (_3001 + ((isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))) * _940))) + ((_3007 + ((isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0))) * _1779)) * cbPerFrame._m0[3u].x);
    float _3028 = ((isnan(1.0) ? _5054 : (isnan(_5054) ? 1.0 : min(_5054, 1.0))) * (_3003 + ((isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))) * _940))) + ((_3009 + ((isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0))) * _1779)) * cbPerFrame._m0[3u].x);
    uint _3029 = _259 + 6u;
    float _3037 = _862 / cbSceneParam._m0[86u].x;
    float _3038 = _863 / cbSceneParam._m0[86u].y;
    vec4 _3052 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3037, _3038, (log2((isnan(cbSceneParam._m0[77u].w) ? _785 : (isnan(_785) ? cbSceneParam._m0[77u].w : min(_785, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3054 = _3052.x;
    float _3055 = _3052.y;
    float _3056 = _3052.z;
    float _3057 = _3052.w;
    float _3129;
    float _3131;
    float _3133;
    float _3135;
    if (_785 > cbSceneParam._m0[78u].w)
    {
        float _3091 = isnan(_785) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _785 : min(cbSceneParam._m0[80u].w, _785));
        float _3092 = _3091 / _785;
        float _3103 = _3092 * _835;
        float _3104 = _836 * _3092;
        float _3105 = (-0.0) - _3104;
        float _3107 = _3092 * _837;
        float _3109 = (cbSceneParam._m0[77u].w * _3105) / _3091;
        float _3110 = _3109 + cbSceneParam._m0[79u].w;
        float _3111 = cbSceneParam._m0[79u].w - _3104;
        float _3117 = sqrt(((_3103 * _3103) + (_3104 * _3104)) + (_3107 * _3107));
        float _3120 = (1.0 - (cbSceneParam._m0[77u].w / _3091)) * _3117;
        float _3125 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3127 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3304;
        if (abs((_3105 - _3109) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3304 = ((((_3110 > 0.0) ? exp2(_3125 * _3110) : (2.0 - exp2(_3127 * _3110))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3120;
        }
        else
        {
            float _3248 = 1.0 / cbSceneParam._m0[80u].x;
            float _3249 = isnan(_3111) ? _3110 : (isnan(_3110) ? _3111 : max(_3110, _3111));
            float _3250 = isnan(_3111) ? _3110 : (isnan(_3110) ? _3111 : min(_3110, _3111));
            float _3259 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : min(_3249, 0.0));
            float _3260 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : min(_3250, 0.0));
            _3304 = ((abs(_3117 / _3105) * cbSceneParam._m0[80u].y) * ((((_3259 - _3260) * 2.0) - ((exp2(_3125 * (isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0)))) - exp2(_3125 * (isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0))))) * _3248)) - ((exp2(_3127 * _3259) - exp2(_3127 * _3260)) * _3248))) + (_3120 * cbSceneParam._m0[80u].z);
        }
        vec4 _3306 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3037, _3038, 1.0), 0.0);
        float _3315 = exp2((_3304 * (-1.44269502162933349609375)) * (1.0 - _3306.w));
        float _3316 = log2(_3315);
        float _3332 = log2(_3057);
        _3129 = (exp2(_3332 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3316 * cbSceneParam._m0[78u].x)) * _3306.x) / cbSceneParam._m0[78u].x)) + _3054;
        _3131 = (exp2(_3332 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3316 * cbSceneParam._m0[78u].y)) * _3306.y) / cbSceneParam._m0[78u].y)) + _3055;
        _3133 = (exp2(_3332 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3316 * cbSceneParam._m0[78u].z)) * _3306.z) / cbSceneParam._m0[78u].z)) + _3056;
        _3135 = _3315 * _3057;
    }
    else
    {
        _3129 = _3054;
        _3131 = _3055;
        _3133 = _3056;
        _3135 = _3057;
    }
    bool _3342;
    vec4 _3145;
    vec4 _3167;
    float _3169;
    float _3173;
    float _3174;
    float _3175;
    float _3176;
    bool _3186;
    for (;;)
    {
        _3145 = cbMatDynParam._m0[0u];
        float _3147 = roundEven(_3145.y);
        bool _3148 = _3147 == 3.0;
        float _3149 = log2(_3135);
        float _3156 = exp2(_3149 * cbSceneParam._m0[78u].x) * _3026;
        float _3157 = exp2(_3149 * cbSceneParam._m0[78u].y) * _3027;
        float _3158 = exp2(_3149 * cbSceneParam._m0[78u].z) * _3028;
        float _3165 = _851 + (-0.5);
        _3167 = cbMtdParam._m0[1u];
        _3169 = _3167.y * _3165;
        float _3172 = (_3147 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3173 = _3172 * (_3148 ? _3156 : (_3156 + (cbSceneParam._m0[72u].w * _3129)));
        _3174 = _3172 * (_3148 ? _3157 : (_3157 + (cbSceneParam._m0[72u].w * _3131)));
        _3175 = _3172 * (_3148 ? _3158 : (_3158 + (cbSceneParam._m0[72u].w * _3133)));
        _3176 = _3165 * 0.999000012874603271484375;
        _3186 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3186)
        {
            if ((cbInstanceData._m0[_259 + 7u].x + _3176) < 0.5)
            {
                _3342 = true;
                break;
            }
        }
        uint _3283 = _900 + uint(_3145.w);
        if ((cbInstanceData._m0[_3283].w < 1.0) && ((cbInstanceData._m0[_3283].w + _3176) < 0.5))
        {
            _3342 = true;
            break;
        }
        if ((_3169 + 1.0) < _3167.x)
        {
            _3342 = true;
            break;
        }
        _3342 = false;
        break;
    }
    float _3546;
    if (_3342)
    {
        discard_state = true;
        _3546 = 0.0;
    }
    else
    {
        _3546 = cbInstanceData._m0[_3029].w;
    }
    SV_Target.x = _3173;
    SV_Target.y = _3174;
    SV_Target.z = _3175;
    SV_Target.w = _3546;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3029].w;
    discard_exit();
}


