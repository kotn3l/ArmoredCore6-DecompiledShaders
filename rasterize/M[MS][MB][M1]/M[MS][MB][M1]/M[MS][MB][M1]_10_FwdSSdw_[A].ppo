#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1155;
float _3562;
float _3563;
float _3564;
float _3565;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _243 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _243 + 1u;
    uint _252 = _243 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_243].x * cbInstanceData._m0[_243].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _282 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _288 = _282.x * cbMtdParam._m0[9u].x;
    float _289 = _282.y * cbMtdParam._m0[9u].y;
    float _290 = _282.z * cbMtdParam._m0[9u].z;
    vec4 _303 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((_262 * cbTextureTilingScale._m0[20u].x) + cbTextureTilingScale._m0[20u].z, (_263 * cbTextureTilingScale._m0[20u].y) + cbTextureTilingScale._m0[20u].w));
    vec4 _329 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _333 = _329.z;
    float _337 = (_329.x * 2.0) + (-1.0);
    float _338 = (_329.y * 2.0) + (-1.0);
    float _339 = dot(vec2(_337, _338), vec2(_337, _338));
    float _3574 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _345 = sqrt(1.0 - (isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))));
    float _350 = _337 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_303.x * 2.0) + (-1.0)));
    float _351 = _338 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_303.y * 2.0) + (-1.0)));
    vec4 _364 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _262) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _263) + cbTextureTilingScale._m0[19u].w));
    float _366 = _364.x;
    float _367 = 1.0 - _366;
    float _400 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_366 - _367) * cbMtdParam._m0[24u].w) + _367) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3585 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _401 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
    float _409 = ((((cbMtdParam._m0[10u].x - _288) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _401) + _288;
    float _410 = ((((cbMtdParam._m0[10u].y - _289) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _401) + _289;
    float _411 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _290)) * _401) + _290;
    vec4 _424 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _426 = _424.x;
    float _428 = _426 - (_426 * _401);
    float _433 = (((_303.z - _333) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _333;
    float _437 = ((cbMtdParam._m0[23u].y - _433) * _401) + _433;
    vec4 _459 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _262) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _263) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _461 = _459.x;
    float _462 = _459.y;
    float _469 = dot(vec4(cbMtdParam._m0[29u].yzw, 0.0), vec4(_231, _232, _233, 0.0));
    vec4 _484 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _262) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _263) + cbTextureTilingScale._m0[18u].w));
    float _486 = _484.x;
    float _491 = fract(_484.w + cbPerFrame._m0[22u].x);
    float _493 = (1.0 - _491) * _486;
    float _498 = ((_491 + (-1.0)) + _486) * 9.0;
    float _500 = ((_486 + (-1.0)) + _491) * 9.0;
    float _501 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _502 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _516 = (_493 * ((_484.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _501 : (isnan(_501) ? 3.0 : min(_501, 3.0))) * 3.1415927410125732421875);
    float _518 = (_493 * ((_484.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _502 : (isnan(_502) ? 3.0 : min(_502, 3.0))) * 3.1415927410125732421875);
    float _522 = inversesqrt(dot(vec3(_516, _518, 1.0), vec3(_516, _518, 1.0)));
    float _538 = (((((0.5 - _461) + ((_516 * 0.5) * _522)) * _469) + _461) * 2.0) + (-1.0);
    float _539 = (((((0.5 - _462) + ((_522 * 0.5) * _518)) * _469) + _462) * 2.0) + (-1.0);
    float _540 = dot(vec2(_538, _539), vec2(_538, _539));
    float _3616 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _556 = ((((cbMtdParam._m0[22u].z * _350) - _350) + _538) * _401) + _350;
    float _557 = ((((cbMtdParam._m0[22u].z * _351) - _351) + _539) * _401) + _351;
    float _558 = (_401 * (sqrt(1.0 - (isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0)))) - _345)) + _345;
    float _560 = cbMtdParam._m0[22u].x + _329.w;
    float _563 = fma(_558, _231, fma(_557, _237 * TANGENT.x, (_223 * _215) * _556));
    float _566 = fma(_558, _232, fma(_557, _237 * TANGENT.y, (_223 * _216) * _556));
    float _569 = fma(_558, _233, fma(_557, _237 * TANGENT.z, (_223 * _217) * _556));
    float _573 = inversesqrt(dot(vec3(_563, _566, _569), vec3(_563, _566, _569)));
    float _574 = _573 * _563;
    float _575 = _573 * _566;
    float _576 = _573 * _569;
    float _3627 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _577 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
    float _3638 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _3649 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _3660 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _3671 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _3682 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _582 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
    float _596 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _637 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _647 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _637);
    float _648 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _637);
    float _649 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _637);
    float _653 = inversesqrt(dot(vec3(_647, _648, _649), vec3(_647, _648, _649)));
    float _654 = _647 * _653;
    float _655 = _648 * _653;
    float _656 = _649 * _653;
    vec4 _661 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _663 = _661.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _837 = sqrt(((_647 * _647) + (_648 * _648)) + (_649 * _649));
        float _843 = (cbMatDynParam._m0[5u].x * _837) + cbMatDynParam._m0[5u].y;
        float _3693 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _844 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
        float _848 = (cbMatDynParam._m0[5u].z * _837) + cbMatDynParam._m0[5u].w;
        float _3704 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))) - _844)) + _844) < ((_663 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _675 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _676 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _696 = fma(_576, cbSceneParam._m0[5u].z, fma(_575, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _574));
    float _699 = fma(_576, cbSceneParam._m0[6u].z, fma(_575, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _574));
    float _702 = fma(_576, cbSceneParam._m0[7u].z, fma(_575, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _574));
    uint _715 = _243 + 9u;
    uint _716 = _715 + uint(cbMatDynParam._m0[0u].w);
    float _722 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0)))) * cbInstanceData._m0[_716].x;
    float _723 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0)))) * cbInstanceData._m0[_716].y;
    float _724 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0)))) * cbInstanceData._m0[_716].z;
    float _3715 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _725 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
    float _3726 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _726 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
    float _3737 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _727 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
    float _728 = 1.0 - _582;
    float _729 = _725 * _728;
    float _730 = _726 * _728;
    float _731 = _727 * _728;
    float _736 = (_725 + (-0.039999999105930328369140625)) * _582;
    float _737 = (_726 + (-0.039999999105930328369140625)) * _582;
    float _738 = (_727 + (-0.039999999105930328369140625)) * _582;
    float _739 = _736 + 0.039999999105930328369140625;
    float _741 = _737 + 0.039999999105930328369140625;
    float _742 = _738 + 0.039999999105930328369140625;
    vec4 _751 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _675, cbSceneParam._m0[86u].y * _676));
    float _755 = ((isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) * TEXCOORD_5.w) * _751.x;
    float _756 = dot(vec3(_574, _575, _576), vec3(_654, _655, _656));
    float _759 = _756 * 2.0;
    float _763 = (_759 * _574) - _654;
    float _764 = (_759 * _575) - _655;
    float _765 = (_759 * _576) - _656;
    float _769 = abs(dot(vec3(_654, _655, _656), vec3(_574, _575, _576)));
    float _3748 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _771 = sqrt(_577);
    float _783 = exp2((_771 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_771 * 3.0));
    float _789 = (1.0 - _783) * ((_771 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _790 = _783 * _771;
    float _818 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _822 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _826 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1154;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _880 = fma(_826, cbModelParam._m0[26u].z, fma(_822, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _818));
        float _884 = fma(_826, cbModelParam._m0[27u].z, fma(_822, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _818));
        float _888 = fma(_826, cbModelParam._m0[28u].z, fma(_822, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _818));
        float _912 = _818 + _574;
        float _913 = _822 + _575;
        float _914 = _826 + _576;
        float _924 = fma(_914, cbModelParam._m0[26u].z, fma(_913, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _912)) - _880;
        float _925 = fma(_914, cbModelParam._m0[27u].z, fma(_913, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _912)) - _884;
        float _926 = fma(_914, cbModelParam._m0[28u].z, fma(_913, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _912)) - _888;
        float _930 = inversesqrt(dot(vec3(_924, _925, _926), vec3(_924, _925, _926)));
        float _943 = ((_930 * _924) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_880 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _944 = ((_930 * _925) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_884 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _945 = ((_930 * _926) / cbModelParam._m0[34u].z) + ((((((_888 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _948 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_943, _944, _945), 0.0);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_943, _944, _945), 0.0);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_943, _944, _945), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_943, _944, _945), 0.0);
        float _982 = exp2((_948.w + (-0.5)) * 20.0) * 2.0;
        float _983 = _982 * (_948.x + (-0.5));
        float _984 = _982 * (_948.y + (-0.5));
        float _985 = _982 * (_948.z + (-0.5));
        float _992 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _993 = _992 * (_955.x + (-0.5));
        float _994 = _992 * (_955.y + (-0.5));
        float _995 = _992 * (_955.z + (-0.5));
        float _1002 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_962.x + (-0.5));
        float _1004 = _1002 * (_962.y + (-0.5));
        float _1005 = _1002 * (_962.z + (-0.5));
        float _1012 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_969.x + (-0.5));
        float _1014 = _1012 * (_969.y + (-0.5));
        float _1015 = _1012 * (_969.z + (-0.5));
        float _1016 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1017 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1018 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1019 = _983 * 0.5;
        float _1020 = _993 * 0.5;
        float _1021 = _1003 * 0.5;
        float _1022 = dot(vec3(_1019, _1020, _1021), vec3(_1019, _1020, _1021));
        float _1027 = (_1022 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1022);
        float _1036 = (dot(vec3(_574, _575, _576), vec3(_1027 * _1019, _1027 * _1020, _1027 * _1021)) + 1.0) * 0.5;
        float _3774 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1046 = sqrt(((_1020 * _1020) + (_1019 * _1019)) + (_1021 * _1021)) / (_1016 + 9.9999997473787516355514526367188e-06);
        float _3785 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1048 = _1047 * 2.0;
        float _1052 = (1.0 - _1047) / (_1047 + 1.0);
        float _3796 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
        float _1062 = ((((1.0 - _1053) * (_1048 + 2.0)) * exp2(log2(isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * (_1048 + 1.0))) + _1053) * _1016;
        float _1063 = _984 * 0.5;
        float _1064 = _994 * 0.5;
        float _1065 = _1004 * 0.5;
        float _1066 = dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065));
        float _1071 = (_1066 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1066);
        float _1079 = (dot(vec3(_574, _575, _576), vec3(_1071 * _1063, _1071 * _1064, _1071 * _1065)) + 1.0) * 0.5;
        float _3807 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1088 = sqrt(((_1064 * _1064) + (_1063 * _1063)) + (_1065 * _1065)) / (_1017 + 9.9999997473787516355514526367188e-06);
        float _3818 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1090 = _1089 * 2.0;
        float _1094 = (1.0 - _1089) / (_1089 + 1.0);
        float _3829 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _1104 = ((((1.0 - _1095) * (_1090 + 2.0)) * exp2(log2(isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))) * (_1090 + 1.0))) + _1095) * _1017;
        float _1105 = _985 * 0.5;
        float _1106 = _995 * 0.5;
        float _1107 = _1005 * 0.5;
        float _1108 = dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107));
        float _1113 = (_1108 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1108);
        float _1121 = (dot(vec3(_574, _575, _576), vec3(_1113 * _1105, _1113 * _1106, _1113 * _1107)) + 1.0) * 0.5;
        float _3840 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1130 = sqrt(((_1106 * _1106) + (_1105 * _1105)) + (_1107 * _1107)) / (_1018 + 9.9999997473787516355514526367188e-06);
        float _3851 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1132 = _1131 * 2.0;
        float _1136 = (1.0 - _1131) / (_1131 + 1.0);
        float _3862 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1146 = ((((1.0 - _1137) * (_1132 + 2.0)) * exp2(log2(isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) * (_1132 + 1.0))) + _1137) * _1018;
        _1154 = _985;
        _1156 = _984;
        _1157 = _983;
        _1158 = _995;
        _1159 = _994;
        _1160 = _993;
        _1161 = _1005;
        _1162 = _1004;
        _1163 = _1003;
        _1164 = _1018;
        _1165 = _1017;
        _1166 = _1016;
        _1167 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0)));
        _1168 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0)));
        _1169 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)));
    }
    else
    {
        _1154 = _1155;
        _1156 = _1155;
        _1157 = _1155;
        _1158 = _1155;
        _1159 = _1155;
        _1160 = _1155;
        _1161 = _1155;
        _1162 = _1155;
        _1163 = _1155;
        _1164 = _1155;
        _1165 = _1155;
        _1166 = _1155;
        _1167 = 0.0;
        _1168 = 0.0;
        _1169 = 0.0;
    }
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1197 = fma(_826, cbModelParam._m0[30u].z, fma(_822, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _818));
        float _1201 = fma(_826, cbModelParam._m0[31u].z, fma(_822, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _818));
        float _1205 = fma(_826, cbModelParam._m0[32u].z, fma(_822, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _818));
        float _1228 = _818 + _574;
        float _1229 = _822 + _575;
        float _1230 = _826 + _576;
        float _1240 = fma(_1230, cbModelParam._m0[30u].z, fma(_1229, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1228)) - _1197;
        float _1241 = fma(_1230, cbModelParam._m0[31u].z, fma(_1229, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1228)) - _1201;
        float _1242 = fma(_1230, cbModelParam._m0[32u].z, fma(_1229, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1228)) - _1205;
        float _1246 = inversesqrt(dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242)));
        float _1259 = ((_1246 * _1240) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1197 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1260 = ((_1246 * _1241) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1201 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1261 = ((_1246 * _1242) / cbModelParam._m0[35u].z) + ((((((_1205 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1263 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        vec4 _1270 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        vec4 _1277 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        vec4 _1284 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        float _1296 = exp2((_1263.w + (-0.5)) * 20.0) * 2.0;
        float _1297 = _1296 * (_1263.x + (-0.5));
        float _1298 = _1296 * (_1263.y + (-0.5));
        float _1299 = _1296 * (_1263.z + (-0.5));
        float _1306 = exp2((_1270.w + (-0.5)) * 20.0) * 2.0;
        float _1307 = _1306 * (_1270.x + (-0.5));
        float _1308 = _1306 * (_1270.y + (-0.5));
        float _1309 = _1306 * (_1270.z + (-0.5));
        float _1316 = exp2((_1277.w + (-0.5)) * 20.0) * 2.0;
        float _1317 = _1316 * (_1277.x + (-0.5));
        float _1318 = _1316 * (_1277.y + (-0.5));
        float _1319 = _1316 * (_1277.z + (-0.5));
        float _1326 = exp2((_1284.w + (-0.5)) * 20.0) * 2.0;
        float _1327 = _1326 * (_1284.x + (-0.5));
        float _1328 = _1326 * (_1284.y + (-0.5));
        float _1329 = _1326 * (_1284.z + (-0.5));
        float _1330 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1331 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1332 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1333 = _1297 * 0.5;
        float _1334 = _1307 * 0.5;
        float _1335 = _1317 * 0.5;
        float _1336 = dot(vec3(_1333, _1334, _1335), vec3(_1333, _1334, _1335));
        float _1341 = (_1336 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1336);
        float _1349 = (dot(vec3(_574, _575, _576), vec3(_1341 * _1333, _1341 * _1334, _1341 * _1335)) + 1.0) * 0.5;
        float _3903 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1358 = sqrt(((_1334 * _1334) + (_1333 * _1333)) + (_1335 * _1335)) / (_1330 + 9.9999997473787516355514526367188e-06);
        float _3914 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1360 = _1359 * 2.0;
        float _1364 = (1.0 - _1359) / (_1359 + 1.0);
        float _3925 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1374 = ((((1.0 - _1365) * (_1360 + 2.0)) * exp2(log2(isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_1360 + 1.0))) + _1365) * _1330;
        float _1375 = _1298 * 0.5;
        float _1376 = _1308 * 0.5;
        float _1377 = _1318 * 0.5;
        float _1378 = dot(vec3(_1375, _1376, _1377), vec3(_1375, _1376, _1377));
        float _1383 = (_1378 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1378);
        float _1391 = (dot(vec3(_574, _575, _576), vec3(_1383 * _1375, _1383 * _1376, _1383 * _1377)) + 1.0) * 0.5;
        float _3936 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1400 = sqrt(((_1376 * _1376) + (_1375 * _1375)) + (_1377 * _1377)) / (_1331 + 9.9999997473787516355514526367188e-06);
        float _3947 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1402 = _1401 * 2.0;
        float _1406 = (1.0 - _1401) / (_1401 + 1.0);
        float _3958 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1416 = ((((1.0 - _1407) * (_1402 + 2.0)) * exp2(log2(isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_1402 + 1.0))) + _1407) * _1331;
        float _1417 = _1299 * 0.5;
        float _1418 = _1309 * 0.5;
        float _1419 = _1319 * 0.5;
        float _1420 = dot(vec3(_1417, _1418, _1419), vec3(_1417, _1418, _1419));
        float _1425 = (_1420 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1420);
        float _1433 = (dot(vec3(_574, _575, _576), vec3(_1425 * _1417, _1425 * _1418, _1425 * _1419)) + 1.0) * 0.5;
        float _3969 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1442 = sqrt(((_1418 * _1418) + (_1417 * _1417)) + (_1419 * _1419)) / (_1332 + 9.9999997473787516355514526367188e-06);
        float _3980 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1444 = _1443 * 2.0;
        float _1448 = (1.0 - _1443) / (_1443 + 1.0);
        float _3991 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1458 = ((((1.0 - _1449) * (_1444 + 2.0)) * exp2(log2(isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * (_1444 + 1.0))) + _1449) * _1332;
        _1466 = _1299;
        _1467 = _1298;
        _1468 = _1297;
        _1469 = _1309;
        _1470 = _1308;
        _1471 = _1307;
        _1472 = _1319;
        _1473 = _1318;
        _1474 = _1317;
        _1475 = _1332;
        _1476 = _1331;
        _1477 = _1330;
        _1478 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)));
        _1479 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)));
        _1480 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)));
    }
    else
    {
        _1466 = _1155;
        _1467 = _1155;
        _1468 = _1155;
        _1469 = _1155;
        _1470 = _1155;
        _1471 = _1155;
        _1472 = _1155;
        _1473 = _1155;
        _1474 = _1155;
        _1475 = _1155;
        _1476 = _1155;
        _1477 = _1155;
        _1478 = 0.0;
        _1479 = 0.0;
        _1480 = 0.0;
    }
    float _1490 = (cbModelParam._m0[1u].x * (_1478 - _1167)) + _1167;
    float _1491 = (cbModelParam._m0[1u].x * (_1479 - _1168)) + _1168;
    float _1492 = (cbModelParam._m0[1u].x * (_1480 - _1169)) + _1169;
    float _1513 = fma(_1492, cbSceneParam._m0[89u].z, fma(_1491, cbSceneParam._m0[89u].y, _1490 * cbSceneParam._m0[89u].x));
    float _1516 = fma(_1492, cbSceneParam._m0[90u].z, fma(_1491, cbSceneParam._m0[90u].y, _1490 * cbSceneParam._m0[90u].x));
    float _1519 = fma(_1492, cbSceneParam._m0[91u].z, fma(_1491, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1490));
    float _1534 = _763 * 0.5;
    float _1535 = _764 * 0.5;
    float _1536 = _765 * 0.5;
    float _1537 = dot(vec4(_1534, _1535, _1536, 1.0), vec4(_1468, _1471, _1474, _1477));
    float _1540 = dot(vec4(_1534, _1535, _1536, 1.0), vec4(_1467, _1470, _1473, _1476));
    float _1543 = dot(vec4(_1534, _1535, _1536, 1.0), vec4(_1466, _1469, _1472, _1475));
    float _1577;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1550 = dot(vec4(_1534, _1535, _1536, 1.0), vec4(_1154, _1158, _1161, _1164));
        float _1554 = dot(vec4(_1534, _1535, _1536, 1.0), vec4(_1156, _1159, _1162, _1165));
        float _1558 = dot(vec4(_1534, _1535, _1536, 1.0), vec4(_1157, _1160, _1163, _1166));
        float _1565 = dot(vec4(cbModelParam._m0[39u]), vec4(_1534, _1535, _1536, 1.0));
        _1577 = dot(vec3(isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)), isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)), isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1565) ? 0.0 : (isnan(0.0) ? _1565 : max(0.0, _1565))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1577 = 1.0;
    }
    float _1588;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1579 = dot(vec4(cbModelParam._m0[40u]), vec4(_1534, _1535, _1536, 1.0));
        _1588 = dot(vec3(isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0)), isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)), isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1579) ? 0.0 : (isnan(0.0) ? _1579 : max(0.0, _1579))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1588 = 1.0;
    }
    float _1592 = (_1588 * cbModelParam._m0[1u].x) + (_1577 * (1.0 - cbModelParam._m0[1u].x));
    float _1602 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _577);
    float _1603 = isnan(_1602) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1602 : min(cbModelParam._m0[25u].z, _1602));
    float _1685;
    float _1687;
    float _1689;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1652 = fma(_826, cbModelParam._m0[13u].z, fma(_822, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _818)) + cbModelParam._m0[13u].w;
        float _1656 = fma(_826, cbModelParam._m0[14u].z, fma(_822, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _818)) + cbModelParam._m0[14u].w;
        float _1660 = fma(_826, cbModelParam._m0[15u].z, fma(_822, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _818)) + cbModelParam._m0[15u].w;
        float _1663 = fma(_765, cbModelParam._m0[13u].z, fma(_764, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _763));
        float _1666 = fma(_765, cbModelParam._m0[14u].z, fma(_764, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _763));
        float _1669 = fma(_765, cbModelParam._m0[15u].z, fma(_764, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _763));
        float _1697;
        if (_1663 > 0.0)
        {
            _1697 = abs((1.0 - _1652) / _1663);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1663 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1652 + 1.0) / _1663);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1697 = frontier_phi_17_15_ladder;
        }
        float _1922;
        if (_1666 > 0.0)
        {
            _1922 = abs((1.0 - _1656) / _1666);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1666 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1656 + 1.0) / _1666);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1922 = frontier_phi_26_22_ladder;
        }
        float _2179;
        if (_1669 > 0.0)
        {
            _2179 = abs((1.0 - _1660) / _1669);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1669 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1660 + 1.0) / _1669);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2179 = frontier_phi_38_33_ladder;
        }
        float _2181 = isnan(_1922) ? _1697 : (isnan(_1697) ? _1922 : min(_1697, _1922));
        float _2182 = isnan(_2179) ? _2181 : (isnan(_2181) ? _2179 : min(_2181, _2179));
        float _2186 = (_2182 * _1663) + _1652;
        float _2187 = (_2182 * _1666) + _1656;
        float _2188 = (_2182 * _1669) + _1660;
        float _2189 = _2182 * 9.9999997473787516355514526367188e-05;
        float _2191 = (-1.0) - _2189;
        float _2193 = _2189 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2188 > _2193) || ((_2188 < _2191) || ((_2187 > _2193) || ((_2187 < _2191) || ((_2186 < _2191) || (_2186 > _2193))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2316 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2188, cbModelParam._m0[9u].z, fma(_2187, cbModelParam._m0[9u].y, _2186 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2188, cbModelParam._m0[10u].z, fma(_2187, cbModelParam._m0[10u].y, _2186 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2188, cbModelParam._m0[11u].z, fma(_2187, cbModelParam._m0[11u].y, _2186 * cbModelParam._m0[11u].x))), _1603);
            frontier_phi_16_38_ladder = _2316.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2316.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2316.x * cbModelParam._m0[1u].y;
        }
        _1685 = frontier_phi_16_38_ladder_2;
        _1687 = frontier_phi_16_38_ladder_1;
        _1689 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1673 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_763, _764, _765), _1603);
        _1685 = _1673.x * cbModelParam._m0[1u].y;
        _1687 = _1673.y * cbModelParam._m0[1u].y;
        _1689 = _1673.z * cbModelParam._m0[1u].y;
    }
    float _1693 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _577);
    float _1694 = isnan(_1693) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1693 : min(cbModelParam._m0[25u].w, _1693));
    float _1784;
    float _1786;
    float _1788;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1748 = fma(_826, cbModelParam._m0[21u].z, fma(_822, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _818)) + cbModelParam._m0[21u].w;
        float _1752 = fma(_826, cbModelParam._m0[22u].z, fma(_822, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _818)) + cbModelParam._m0[22u].w;
        float _1756 = fma(_826, cbModelParam._m0[23u].z, fma(_822, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _818)) + cbModelParam._m0[23u].w;
        float _1759 = fma(_765, cbModelParam._m0[21u].z, fma(_764, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _763));
        float _1762 = fma(_765, cbModelParam._m0[22u].z, fma(_764, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _763));
        float _1765 = fma(_765, cbModelParam._m0[23u].z, fma(_764, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _763));
        float _1927;
        if (_1759 > 0.0)
        {
            _1927 = abs((1.0 - _1748) / _1759);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1759 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1748 + 1.0) / _1759);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1927 = frontier_phi_28_24_ladder;
        }
        float _2206;
        if (_1762 > 0.0)
        {
            _2206 = abs((1.0 - _1752) / _1762);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1762 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1752 + 1.0) / _1762);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2206 = frontier_phi_40_35_ladder;
        }
        float _2419;
        if (_1765 > 0.0)
        {
            _2419 = abs((1.0 - _1756) / _1765);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1765 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1756 + 1.0) / _1765);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2419 = frontier_phi_49_46_ladder;
        }
        float _2421 = isnan(_2206) ? _1927 : (isnan(_1927) ? _2206 : min(_1927, _2206));
        float _2422 = isnan(_2419) ? _2421 : (isnan(_2421) ? _2419 : min(_2421, _2419));
        float _2426 = (_2422 * _1759) + _1748;
        float _2427 = (_2422 * _1762) + _1752;
        float _2428 = (_2422 * _1765) + _1756;
        float _2429 = _2422 * 9.9999997473787516355514526367188e-05;
        float _2430 = (-1.0) - _2429;
        float _2432 = _2429 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2428 > _2432) || ((_2428 < _2430) || ((_2427 > _2432) || ((_2427 < _2430) || ((_2426 < _2430) || (_2426 > _2432))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2627 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2428, cbModelParam._m0[17u].z, fma(_2427, cbModelParam._m0[17u].y, _2426 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2428, cbModelParam._m0[18u].z, fma(_2427, cbModelParam._m0[18u].y, _2426 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2428, cbModelParam._m0[19u].z, fma(_2427, cbModelParam._m0[19u].y, _2426 * cbModelParam._m0[19u].x))), _1694);
            frontier_phi_25_49_ladder = _2627.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2627.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2627.x * cbModelParam._m0[1u].z;
        }
        _1784 = frontier_phi_25_49_ladder_2;
        _1786 = frontier_phi_25_49_ladder_1;
        _1788 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1768 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_763, _764, _765), _1694);
        _1784 = _1768.x * cbModelParam._m0[1u].z;
        _1786 = _1768.y * cbModelParam._m0[1u].z;
        _1788 = _1768.z * cbModelParam._m0[1u].z;
    }
    float _1801 = (((_789 * _739) + _790) * _755) * ((cbModelParam._m0[1u].w * (_1784 - _1685)) + _1685);
    float _1803 = (((_789 * _741) + _790) * _755) * ((cbModelParam._m0[1u].w * (_1786 - _1687)) + _1687);
    float _1805 = (((_789 * _742) + _790) * _755) * ((cbModelParam._m0[1u].w * (_1788 - _1689)) + _1689);
    float _1808 = fma(_1805, cbSceneParam._m0[89u].z, fma(_1803, cbSceneParam._m0[89u].y, _1801 * cbSceneParam._m0[89u].x));
    float _1811 = fma(_1805, cbSceneParam._m0[90u].z, fma(_1803, cbSceneParam._m0[90u].y, _1801 * cbSceneParam._m0[90u].x));
    float _1814 = fma(_1805, cbSceneParam._m0[91u].z, fma(_1803, cbSceneParam._m0[91u].y, _1801 * cbSceneParam._m0[91u].x));
    vec4 _1822 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_675, _676));
    float _1824 = _1822.w;
    float _1836 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1824);
    float _1837 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1824);
    float _1838 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1824);
    uvec4 _1842 = floatBitsToUint(cbInstanceData._m0[_243 + 5u]);
    uint _1844 = _1842.x * 14u;
    uint _1845 = _1844 + 13u;
    float _1852 = _755 + (-1.0);
    float _1857 = (cbLight._m0[_1845].x * _1852) + 1.0;
    float _1858 = (cbLight._m0[_1845].y * _1852) + 1.0;
    float _1859 = (cbLight._m0[_1845].z * _1852) + 1.0;
    float _1860 = (cbLight._m0[_1845].w * _1852) + 1.0;
    uint _1861 = _1844 + 5u;
    float _1867 = isnan(1.0) ? _1858 : (isnan(_1858) ? 1.0 : min(_1858, 1.0));
    uint _1871 = _1844 + 4u;
    float _1881 = isnan(1.0) ? _1857 : (isnan(_1857) ? 1.0 : min(_1857, 1.0));
    uint _1885 = _1844 | 1u;
    float _1896 = dot(vec3(cbLight._m0[_1844].xyz), vec3(_574, _575, _576));
    float _1899 = dot(vec3(cbLight._m0[_1885].xyz), vec3(_574, _575, _576));
    float _4127 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
    float _4138 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1904 = (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * 0.3183098733425140380859375;
    float _1906 = (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * 0.3183098733425140380859375;
    float _1913 = ((cbLight._m0[_1861].x * _1867) * _1906) + (((cbLight._m0[_1871].x * _1836) * _1881) * _1904);
    float _1914 = ((_1867 * cbLight._m0[_1861].y) * _1906) + (((cbLight._m0[_1871].y * _1837) * _1881) * _1904);
    float _1915 = ((_1867 * cbLight._m0[_1861].z) * _1906) + (((cbLight._m0[_1871].z * _1838) * _1881) * _1904);
    uvec4 _1919 = floatBitsToUint(cbLight._m0[_1844 + 12u]);
    bool _1921 = _1919.x == 0u;
    float _1932;
    float _1934;
    float _1936;
    if (_1921)
    {
        _1932 = _1913;
        _1934 = _1914;
        _1936 = _1915;
    }
    else
    {
        uint _1940 = _1844 + 6u;
        float _1956 = (dot(vec3(cbLight._m0[_1844 + 2u].xyz), vec3(_574, _575, _576)) * 0.5) + 0.5;
        float _1957 = _1956 * _1956;
        float _4149 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
        float _1958 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1959 = isnan(1.0) ? _1859 : (isnan(_1859) ? 1.0 : min(_1859, 1.0));
        _1932 = (((cbLight._m0[_1940].x * 0.3183098733425140380859375) * _1958) * _1959) + _1913;
        _1934 = (((cbLight._m0[_1940].y * 0.3183098733425140380859375) * _1958) * _1959) + _1914;
        _1936 = (((cbLight._m0[_1940].z * 0.3183098733425140380859375) * _1958) * _1959) + _1915;
    }
    bool _1939 = _1919.y == 0u;
    float _1977;
    float _1979;
    float _1981;
    if (_1939)
    {
        _1977 = _1932;
        _1979 = _1934;
        _1981 = _1936;
    }
    else
    {
        uint _2150 = _1844 + 7u;
        float _2166 = (dot(vec3(cbLight._m0[_1844 + 3u].xyz), vec3(_574, _575, _576)) * 0.5) + 0.5;
        float _2167 = _2166 * _2166;
        float _4165 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
        float _2168 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _2169 = isnan(1.0) ? _1860 : (isnan(_1860) ? 1.0 : min(_1860, 1.0));
        _1977 = (((cbLight._m0[_2150].x * 0.3183098733425140380859375) * _2168) * _2169) + _1932;
        _1979 = (((cbLight._m0[_2150].y * 0.3183098733425140380859375) * _2168) * _2169) + _1934;
        _1981 = (((cbLight._m0[_2150].z * 0.3183098733425140380859375) * _2168) * _2169) + _1936;
    }
    uint _1984 = _1844 + 8u;
    float _1997 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1844].w)) * _577) * 0.949999988079071044921875);
    float _1998 = _1997 * _1997;
    float _1999 = cbLight._m0[_1844].x + _654;
    float _2000 = cbLight._m0[_1844].y + _655;
    float _2001 = cbLight._m0[_1844].z + _656;
    float _2005 = inversesqrt(dot(vec3(_1999, _2000, _2001), vec3(_1999, _2000, _2001)));
    float _2006 = _2005 * _1999;
    float _2007 = _2005 * _2000;
    float _2008 = _2005 * _2001;
    float _2009 = dot(vec3(_574, _575, _576), vec3(cbLight._m0[_1844].xyz));
    float _4181 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
    float _2012 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _4192 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _2013 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
    float _2014 = dot(vec3(_574, _575, _576), vec3(_2006, _2007, _2008));
    float _4203 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2017 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
    float _2018 = dot(vec3(cbLight._m0[_1844].xyz), vec3(_2006, _2007, _2008));
    float _4214 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2022 = _1998 * _1998;
    float _2026 = ((_2017 * _2017) * (_2022 + (-1.0))) + 1.0;
    float _2034 = exp2(log2(1.0 - (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0)))) * 5.0);
    float _2035 = 0.959999978542327880859375 - _736;
    float _2037 = 0.959999978542327880859375 - _737;
    float _2038 = 0.959999978542327880859375 - _738;
    float _2045 = 1.0 - _1998;
    float _2056 = (0.5 / (((_2013 * ((_2012 * _2045) + _1998)) + 9.9999999392252902907785028219223e-09) + (((_2013 * _2045) + _1998) * _2012))) * _2012;
    float _4225 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _2058 = (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * (_2022 / ((_2026 * _2026) * 3.141590118408203125));
    uint _2072 = _1844 + 9u;
    float _2083 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1885].w)) * _577) * 0.949999988079071044921875);
    float _2084 = _2083 * _2083;
    float _2085 = cbLight._m0[_1885].x + _654;
    float _2086 = cbLight._m0[_1885].y + _655;
    float _2087 = cbLight._m0[_1885].z + _656;
    float _2091 = inversesqrt(dot(vec3(_2085, _2086, _2087), vec3(_2085, _2086, _2087)));
    float _2092 = _2091 * _2085;
    float _2093 = _2091 * _2086;
    float _2094 = _2091 * _2087;
    float _2095 = dot(vec3(_574, _575, _576), vec3(cbLight._m0[_1885].xyz));
    float _4236 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2098 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _2099 = dot(vec3(_574, _575, _576), vec3(_2092, _2093, _2094));
    float _4247 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2102 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
    float _2103 = dot(vec3(cbLight._m0[_1885].xyz), vec3(_2092, _2093, _2094));
    float _4258 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2107 = _2084 * _2084;
    float _2111 = ((_2102 * _2102) * (_2107 + (-1.0))) + 1.0;
    float _2118 = exp2(log2(1.0 - (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0)))) * 5.0);
    float _2125 = 1.0 - _2084;
    float _2135 = (0.5 / (((_2013 * ((_2098 * _2125) + _2084)) + 9.9999999392252902907785028219223e-09) + (((_2013 * _2125) + _2084) * _2098))) * _2098;
    float _4269 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2137 = (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_2107 / ((_2111 * _2111) * 3.141590118408203125));
    float _2147 = (((((_2118 * _2035) + _739) * cbLight._m0[_2072].x) * _2137) * _1867) + ((((cbLight._m0[_1984].x * _1836) * ((_2034 * _2035) + _739)) * _2058) * _1881);
    float _2148 = (((((_2118 * _2037) + _741) * cbLight._m0[_2072].y) * _2137) * _1867) + ((((cbLight._m0[_1984].y * _1837) * ((_2034 * _2037) + _741)) * _2058) * _1881);
    float _2149 = (((((_2118 * _2038) + _742) * cbLight._m0[_2072].z) * _2137) * _1867) + ((((cbLight._m0[_1984].z * _1838) * ((_2034 * _2038) + _742)) * _2058) * _1881);
    float _2211;
    float _2213;
    float _2215;
    if (_1921)
    {
        _2211 = _2147;
        _2213 = _2148;
        _2215 = _2149;
    }
    else
    {
        uint _2217 = _1844 + 2u;
        uint _2221 = _1844 + 10u;
        float _2235 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2217].w)) * _577) * 0.949999988079071044921875);
        float _2236 = _2235 * _2235;
        float _2237 = cbLight._m0[_2217].x + _654;
        float _2238 = cbLight._m0[_2217].y + _655;
        float _2239 = cbLight._m0[_2217].z + _656;
        float _2243 = inversesqrt(dot(vec3(_2237, _2238, _2239), vec3(_2237, _2238, _2239)));
        float _2244 = _2243 * _2237;
        float _2245 = _2243 * _2238;
        float _2246 = _2243 * _2239;
        float _2247 = dot(vec3(_574, _575, _576), vec3(cbLight._m0[_2217].xyz));
        float _4280 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        float _2250 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _2251 = dot(vec3(_574, _575, _576), vec3(_2244, _2245, _2246));
        float _4291 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
        float _2254 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _2255 = dot(vec3(cbLight._m0[_2217].xyz), vec3(_2244, _2245, _2246));
        float _4302 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
        float _2259 = _2236 * _2236;
        float _2263 = ((_2254 * _2254) * (_2259 + (-1.0))) + 1.0;
        float _2270 = exp2(log2(1.0 - (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) * 5.0);
        float _2277 = 1.0 - _2236;
        float _2287 = (0.5 / (((_2013 * ((_2250 * _2277) + _2236)) + 9.9999999392252902907785028219223e-09) + (((_2013 * _2277) + _2236) * _2250))) * _2250;
        float _4313 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2289 = (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_2259 / ((_2263 * _2263) * 3.141590118408203125));
        float _2290 = isnan(1.0) ? _1859 : (isnan(_1859) ? 1.0 : min(_1859, 1.0));
        _2211 = (((((_2270 * _2035) + _739) * cbLight._m0[_2221].x) * _2289) * _2290) + _2147;
        _2213 = (((((_2270 * _2037) + _741) * cbLight._m0[_2221].y) * _2289) * _2290) + _2148;
        _2215 = (((((_2270 * _2038) + _742) * cbLight._m0[_2221].z) * _2289) * _2290) + _2149;
    }
    float _2325;
    float _2327;
    float _2329;
    if (_1939)
    {
        _2325 = _2211;
        _2327 = _2213;
        _2329 = _2215;
    }
    else
    {
        uint _2336 = _1844 + 3u;
        uint _2340 = _1844 + 11u;
        float _2354 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2336].w)) * _577) * 0.949999988079071044921875);
        float _2355 = _2354 * _2354;
        float _2356 = cbLight._m0[_2336].x + _654;
        float _2357 = cbLight._m0[_2336].y + _655;
        float _2358 = cbLight._m0[_2336].z + _656;
        float _2362 = inversesqrt(dot(vec3(_2356, _2357, _2358), vec3(_2356, _2357, _2358)));
        float _2363 = _2362 * _2356;
        float _2364 = _2362 * _2357;
        float _2365 = _2362 * _2358;
        float _2366 = dot(vec3(_574, _575, _576), vec3(cbLight._m0[_2336].xyz));
        float _4329 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2369 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _2370 = dot(vec3(_574, _575, _576), vec3(_2363, _2364, _2365));
        float _4340 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2373 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _2374 = dot(vec3(cbLight._m0[_2336].xyz), vec3(_2363, _2364, _2365));
        float _4351 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2378 = _2355 * _2355;
        float _2382 = ((_2373 * _2373) * (_2378 + (-1.0))) + 1.0;
        float _2389 = exp2(log2(1.0 - (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0)))) * 5.0);
        float _2396 = 1.0 - _2355;
        float _2406 = (0.5 / (((_2013 * ((_2369 * _2396) + _2355)) + 9.9999999392252902907785028219223e-09) + (((_2013 * _2396) + _2355) * _2369))) * _2369;
        float _4362 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2408 = (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (_2378 / ((_2382 * _2382) * 3.141590118408203125));
        float _2409 = isnan(1.0) ? _1860 : (isnan(_1860) ? 1.0 : min(_1860, 1.0));
        _2325 = (((((_2389 * _2035) + _739) * cbLight._m0[_2340].x) * _2408) * _2409) + _2211;
        _2327 = (((((_2389 * _2037) + _741) * cbLight._m0[_2340].y) * _2408) * _2409) + _2213;
        _2329 = (((((_2389 * _2038) + _742) * cbLight._m0[_2340].z) * _2408) * _2409) + _2215;
    }
    float _2544;
    float _2546;
    float _2548;
    float _2550;
    float _2552;
    float _2554;
    if (_1842.y == 0u)
    {
        float _2484 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2485 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2484;
        float _2486 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2484;
        float _2487 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2484;
        uvec4 _2499 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2500 = _2499.x;
        uint _2511 = uint((float(_2499.y) * floor(float(uint(cbSceneParam._m0[85u].y * _676) / _2500))) + floor(float(uint(cbSceneParam._m0[85u].x * _675) / _2500)));
        float _2521 = (log2(_2487 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2522 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        uint _2525 = uint(isnan(14.0) ? _2522 : (isnan(_2522) ? 14.0 : min(_2522, 14.0)));
        uvec4 _2530 = texelFetch(g_lightClusterGridBuffer, int(((_2525 << 2u) + (_2511 << 6u)) >> 2u));
        uint _2531 = _2530.x;
        uint _2532 = _2499.z;
        float _2632;
        float _2634;
        float _2636;
        float _2638;
        float _2640;
        float _2642;
        if (((((1u << ((_2532 >> 4u) & 15u)) + 4294967295u) & _2531) == 0u) || ((_2532 & 240u) == 0u))
        {
            _2632 = 0.0;
            _2634 = 0.0;
            _2636 = 0.0;
            _2638 = 0.0;
            _2640 = 0.0;
            _2642 = 0.0;
        }
        else
        {
            float _2633;
            float _2635;
            float _2637;
            float _2639;
            float _2641;
            float _2643;
            float _2785 = 0.0;
            float _2786 = 0.0;
            float _2787 = 0.0;
            float _2788 = 0.0;
            float _2789 = 0.0;
            float _2790 = 0.0;
            uint _2791 = 0u;
            uint _2800;
            bool _2801;
            for (;;)
            {
                _2800 = texelFetch(g_lightClassification, int((((_2525 << 5u) + (_2511 << 9u)) + (_2791 << 2u)) >> 2u)).x;
                _2801 = _2800 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2801)
                {
                    frontier_phi_66_pred = _2785;
                    frontier_phi_66_pred_1 = _2790;
                    frontier_phi_66_pred_2 = _2789;
                    frontier_phi_66_pred_3 = _2788;
                    frontier_phi_66_pred_4 = _2787;
                    frontier_phi_66_pred_5 = _2786;
                }
                else
                {
                    float _2930;
                    float _2931;
                    float _2932;
                    float _2933;
                    float _2934;
                    float _2935;
                    uint _2936;
                    _2930 = _2785;
                    _2931 = _2786;
                    _2932 = _2787;
                    _2933 = _2788;
                    _2934 = _2789;
                    _2935 = _2790;
                    _2936 = _2800;
                    float _2857;
                    float _2858;
                    float _2859;
                    float _2860;
                    float _2861;
                    float _2862;
                    for (;;)
                    {
                        uint _2940 = uint(findLSB(_2936)) + (_2791 << 5u);
                        uint _2937 = (_2936 + 4294967295u) & _2936;
                        uint _2942 = _2940 * 48u;
                        vec4 _2956 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2942)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 3u)).x));
                        uint _2962 = (_2940 * 48u) + 4u;
                        vec4 _2975 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2962)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 3u)).x));
                        uint _2981 = (_2940 * 48u) + 8u;
                        vec3 _2992 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2981)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 2u)).x));
                        float _2996 = _2956.x - _2485;
                        float _2997 = _2956.y - _2486;
                        float _2998 = _2956.z - _2487;
                        float _2999 = dot(vec3(_2996, _2997, _2998), vec3(_2996, _2997, _2998));
                        float _3002 = inversesqrt(_2999);
                        float _3003 = _3002 * _2996;
                        float _3004 = _3002 * _2997;
                        float _3005 = _3002 * _2998;
                        float _3006 = dot(vec3(_696, _699, _702), vec3(_3003, _3004, _3005));
                        float _3011 = 1.0 - (_2999 * _2956.w);
                        float _4388 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
                        float _3012 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                        float _3013 = sqrt(_2999) * _2975.w;
                        float _3016 = 1.39999997615814208984375 / (_3013 + 1.39999997615814208984375);
                        float _3017 = _3016 * _3016;
                        float _3020 = ((1.0 - _3017) * _3006) + _3017;
                        float _3023 = _3013 * _3013;
                        float _3027 = ((isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0))) * _3012) / ((_3023 * 0.699999988079071044921875) + 1.0);
                        float _3031 = (-0.0) - _2485;
                        float _3032 = (-0.0) - _2486;
                        float _3033 = (-0.0) - _2487;
                        float _3037 = inversesqrt(dot(vec3(_3031, _3032, _3033), vec3(_3031, _3032, _3033)));
                        float _3038 = _3037 * _3031;
                        float _3039 = _3037 * _3032;
                        float _3040 = _3037 * _3033;
                        float _3048 = exp2(log2(1.0 / ((_3023 * 3.5) + 5.0)) * 0.25);
                        float _3049 = 1.0 - _771;
                        float _3056 = sqrt(1.0 - ((1.0 - (_3049 * _3049)) * (1.0 - (_3048 * _3048))));
                        float _3057 = _3056 * _3056;
                        float _3058 = _3057 * _3057;
                        float _3059 = _3038 + _3003;
                        float _3060 = _3039 + _3004;
                        float _3061 = _3040 + _3005;
                        float _3065 = inversesqrt(dot(vec3(_3059, _3060, _3061), vec3(_3059, _3060, _3061)));
                        float _3069 = dot(vec3(_696, _699, _702), vec3(_3038, _3039, _3040));
                        float _4404 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                        float _3072 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
                        float _3073 = dot(vec3(_696, _699, _702), vec3(_3065 * _3059, _3065 * _3060, _3065 * _3061));
                        float _4415 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
                        float _3076 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
                        float _3080 = ((_3076 * _3076) * (_3058 + (-1.0))) + 1.0;
                        float _3081 = _3016 * _3057;
                        float _3082 = _3081 * _3081;
                        float _3085 = ((1.0 - _3082) * _3006) + _3082;
                        float _4426 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                        float _3086 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
                        float _3087 = 1.0 - _3057;
                        float _3097 = (0.5 / (((_3086 * ((_3072 * _3087) + _3057)) + 9.9999999392252902907785028219223e-09) + (((_3086 * _3087) + _3057) * _3072))) * _3086;
                        float _4437 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                        float _3107 = (((_3058 * 3.1415927410125732421875) * (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0)))) / ((_3080 * _3080) * ((_3023 * 2.1991131305694580078125) + 3.141590118408203125))) * _3012;
                        _2860 = (_3027 * _2975.x) + _2933;
                        _2861 = (_3027 * _2975.y) + _2934;
                        _2862 = (_3027 * _2975.z) + _2935;
                        _2857 = (_3107 * _2992.x) + _2930;
                        _2858 = (_3107 * _2992.y) + _2931;
                        _2859 = (_3107 * _2992.z) + _2932;
                        if (_2937 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2930 = _2857;
                            _2931 = _2858;
                            _2932 = _2859;
                            _2933 = _2860;
                            _2934 = _2861;
                            _2935 = _2862;
                            _2936 = _2937;
                        }
                    }
                    frontier_phi_66_pred = _2857;
                    frontier_phi_66_pred_1 = _2862;
                    frontier_phi_66_pred_2 = _2861;
                    frontier_phi_66_pred_3 = _2860;
                    frontier_phi_66_pred_4 = _2859;
                    frontier_phi_66_pred_5 = _2858;
                }
                _2633 = frontier_phi_66_pred;
                _2643 = frontier_phi_66_pred_1;
                _2641 = frontier_phi_66_pred_2;
                _2639 = frontier_phi_66_pred_3;
                _2637 = frontier_phi_66_pred_4;
                _2635 = frontier_phi_66_pred_5;
                uint _2792 = _2791 + 1u;
                if (_2792 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2785 = _2633;
                    _2786 = _2635;
                    _2787 = _2637;
                    _2788 = _2639;
                    _2789 = _2641;
                    _2790 = _2643;
                    _2791 = _2792;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2632 = _2633;
            _2634 = _2635;
            _2636 = _2637;
            _2638 = _2639;
            _2640 = _2641;
            _2642 = _2643;
        }
        uvec4 _2646 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2647 = _2646.z;
        uint _2649 = (_2647 >> 8u) & 15u;
        float _2753;
        float _2755;
        float _2757;
        float _2759;
        float _2761;
        float _2763;
        if (((4294967295u << _2649) & _2531) == 0u)
        {
            _2753 = _2632;
            _2755 = _2634;
            _2757 = _2636;
            _2759 = _2638;
            _2761 = _2640;
            _2763 = _2642;
        }
        else
        {
            float _2778 = inversesqrt(dot(vec3(_2485, _2486, _2487), vec3(_2485, _2486, _2487)));
            float _2779 = _2778 * _2485;
            float _2780 = _2778 * _2486;
            float _2781 = _2778 * _2487;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2649 < ((_2647 >> 12u) & 15u))
            {
                float _2754;
                float _2756;
                float _2758;
                float _2760;
                float _2762;
                float _2764;
                float _2913 = _2632;
                float _2914 = _2634;
                float _2915 = _2636;
                float _2916 = _2638;
                float _2917 = _2640;
                float _2918 = _2642;
                uint _2919 = _2649;
                uint _2928;
                bool _2929;
                for (;;)
                {
                    _2928 = texelFetch(g_lightClassification, int((((_2525 << 5u) + (_2511 << 9u)) + (_2919 << 2u)) >> 2u)).x;
                    _2929 = _2928 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2929)
                    {
                        frontier_phi_77_pred = _2918;
                        frontier_phi_77_pred_1 = _2917;
                        frontier_phi_77_pred_2 = _2916;
                        frontier_phi_77_pred_3 = _2915;
                        frontier_phi_77_pred_4 = _2914;
                        frontier_phi_77_pred_5 = _2913;
                    }
                    else
                    {
                        float _3121;
                        float _3122;
                        float _3123;
                        float _3124;
                        float _3125;
                        float _3126;
                        float _3415;
                        float _3416;
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3420;
                        float _3134 = _2913;
                        float _3135 = _2914;
                        float _3136 = _2915;
                        float _3137 = _2916;
                        float _3138 = _2917;
                        float _3139 = _2918;
                        uint _3140 = _2928;
                        uint _3141;
                        vec4 _3166;
                        float _3167;
                        vec4 _3182;
                        vec3 _3194;
                        vec4 _3210;
                        vec4 _3225;
                        float _3271;
                        bool _3272;
                        for (;;)
                        {
                            uint _3151 = ((_2919 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3140));
                            _3141 = (_3140 + 4294967295u) & _3140;
                            uint _3153 = _3151 * 40u;
                            _3166 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3153)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 3u)).x));
                            _3167 = _3166.w;
                            uint _3169 = (_3151 * 40u) + 4u;
                            _3182 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3169)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 3u)).x));
                            uint _3184 = (_3151 * 40u) + 8u;
                            _3194 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3184)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 2u)).x));
                            uint _3197 = (_3151 * 40u) + 16u;
                            _3210 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3197)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 3u)).x));
                            uint _3212 = (_3151 * 40u) + 20u;
                            _3225 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3212)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 3u)).x));
                            uint _3227 = (_3151 * 40u) + 24u;
                            vec4 _3240 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 3u)).x));
                            uint _3246 = (_3151 * 40u) + 28u;
                            vec4 _3259 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3246)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 3u)).x));
                            _3271 = fma(_2487, _3259.z, fma(_2486, _3259.y, _3259.x * _2485)) + _3259.w;
                            _3272 = !((fma(_2487, _3240.z, fma(_2486, _3240.y, _3240.x * _2485)) + _3240.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3272)
                            {
                                float _3299 = _3166.x - _2485;
                                float _3300 = _3166.y - _2486;
                                float _3301 = _3166.z - _2487;
                                float _3302 = dot(vec3(_3299, _3300, _3301), vec3(_3299, _3300, _3301));
                                float _3305 = inversesqrt(_3302);
                                float _3306 = _3305 * _3299;
                                float _3307 = _3305 * _3300;
                                float _3308 = _3305 * _3301;
                                float _3312 = 1.0 - (_3302 / (_3167 * _3167));
                                float _4448 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                                float _3313 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
                                float _3317 = sqrt(_3302) * _3182.w;
                                float _3319 = 1.39999997615814208984375 / (_3317 + 1.39999997615814208984375);
                                float _3320 = _3319 * _3319;
                                float _3323 = ((1.0 - _3320) * dot(vec3(_3306, _3307, _3308), vec3(_696, _699, _702))) + _3320;
                                float _3326 = _3317 * _3317;
                                float _3330 = (fma(_2487, _3210.z, fma(_2486, _3210.y, _3210.x * _2485)) + _3210.w) / _3271;
                                float _3331 = (fma(_2487, _3225.z, fma(_2486, _3225.y, _3225.x * _2485)) + _3225.w) / _3271;
                                float _3335 = 1.0 - dot(vec2(_3330, _3331), vec2(_3330, _3331));
                                float _4464 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                                float _3336 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
                                float _3337 = _3336 * (((isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0))) * _3313) / ((_3326 * 0.699999988079071044921875) + 1.0));
                                float _3349 = exp2(log2(1.0 / ((_3326 * 3.5) + 5.0)) * 0.25);
                                float _3350 = 1.0 - _771;
                                float _3357 = sqrt(1.0 - ((1.0 - (_3350 * _3350)) * (1.0 - (_3349 * _3349))));
                                float _3358 = _3357 * _3357;
                                float _3359 = _3358 * _3358;
                                float _3360 = _3306 - _2779;
                                float _3361 = _3307 - _2780;
                                float _3362 = _3308 - _2781;
                                float _3366 = inversesqrt(dot(vec3(_3360, _3361, _3362), vec3(_3360, _3361, _3362)));
                                float _3370 = dot(vec3(_696, _699, _702), vec3((-0.0) - _2779, (-0.0) - _2780, (-0.0) - _2781));
                                float _4475 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                                float _3373 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
                                float _3374 = dot(vec3(_696, _699, _702), vec3(_3366 * _3360, _3366 * _3361, _3366 * _3362));
                                float _4486 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                                float _3377 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
                                float _3381 = ((_3377 * _3377) * (_3359 + (-1.0))) + 1.0;
                                float _3382 = _3319 * _3358;
                                float _3383 = _3382 * _3382;
                                float _3389 = ((1.0 - _3383) * dot(vec3(_696, _699, _702), vec3(_3306, _3307, _3308))) + _3383;
                                float _4497 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                                float _3390 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                                float _3391 = 1.0 - _3358;
                                float _3401 = (0.5 / (((_3390 * ((_3373 * _3391) + _3358)) + 9.9999999392252902907785028219223e-09) + (((_3390 * _3391) + _3358) * _3373))) * _3390;
                                float _4508 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                                float _3411 = (_3336 * _3313) * (((_3359 * 3.1415927410125732421875) * (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0)))) / ((_3381 * _3381) * ((_3326 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3337 * _3182.y;
                                frontier_phi_83_pred_1 = _3337 * _3182.x;
                                frontier_phi_83_pred_2 = _3411 * _3194.z;
                                frontier_phi_83_pred_3 = _3411 * _3194.y;
                                frontier_phi_83_pred_4 = _3411 * _3194.x;
                                frontier_phi_83_pred_5 = _3337 * _3182.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3419 = frontier_phi_83_pred;
                            _3418 = frontier_phi_83_pred_1;
                            _3417 = frontier_phi_83_pred_2;
                            _3416 = frontier_phi_83_pred_3;
                            _3415 = frontier_phi_83_pred_4;
                            _3420 = frontier_phi_83_pred_5;
                            _3124 = _3418 + _3137;
                            _3125 = _3419 + _3138;
                            _3126 = _3420 + _3139;
                            _3121 = _3415 + _3134;
                            _3122 = _3416 + _3135;
                            _3123 = _3417 + _3136;
                            if (_3141 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3134 = _3121;
                                _3135 = _3122;
                                _3136 = _3123;
                                _3137 = _3124;
                                _3138 = _3125;
                                _3139 = _3126;
                                _3140 = _3141;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3126;
                        frontier_phi_77_pred_1 = _3125;
                        frontier_phi_77_pred_2 = _3124;
                        frontier_phi_77_pred_3 = _3123;
                        frontier_phi_77_pred_4 = _3122;
                        frontier_phi_77_pred_5 = _3121;
                    }
                    _2764 = frontier_phi_77_pred;
                    _2762 = frontier_phi_77_pred_1;
                    _2760 = frontier_phi_77_pred_2;
                    _2758 = frontier_phi_77_pred_3;
                    _2756 = frontier_phi_77_pred_4;
                    _2754 = frontier_phi_77_pred_5;
                    uint _2920 = _2919 + 1u;
                    if (_2920 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2913 = _2754;
                        _2914 = _2756;
                        _2915 = _2758;
                        _2916 = _2760;
                        _2917 = _2762;
                        _2918 = _2764;
                        _2919 = _2920;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2758;
                frontier_phi_58_59_ladder_1 = _2764;
                frontier_phi_58_59_ladder_2 = _2762;
                frontier_phi_58_59_ladder_3 = _2760;
                frontier_phi_58_59_ladder_4 = _2756;
                frontier_phi_58_59_ladder_5 = _2754;
            }
            else
            {
                frontier_phi_58_59_ladder = _2636;
                frontier_phi_58_59_ladder_1 = _2642;
                frontier_phi_58_59_ladder_2 = _2640;
                frontier_phi_58_59_ladder_3 = _2638;
                frontier_phi_58_59_ladder_4 = _2634;
                frontier_phi_58_59_ladder_5 = _2632;
            }
            _2753 = frontier_phi_58_59_ladder_5;
            _2755 = frontier_phi_58_59_ladder_4;
            _2757 = frontier_phi_58_59_ladder;
            _2759 = frontier_phi_58_59_ladder_3;
            _2761 = frontier_phi_58_59_ladder_2;
            _2763 = frontier_phi_58_59_ladder_1;
        }
        float _2768 = isnan(1.0) ? _755 : (isnan(_755) ? 1.0 : min(_755, 1.0));
        _2544 = (_2768 * _2759) + _1977;
        _2546 = (_2768 * _2761) + _1979;
        _2548 = (_2768 * _2763) + _1981;
        _2550 = ((_2753 * _739) * _2768) + _2325;
        _2552 = ((_2755 * _741) * _2768) + _2327;
        _2554 = ((_2757 * _742) * _2768) + _2329;
    }
    else
    {
        _2544 = _1977;
        _2546 = _1979;
        _2548 = _1981;
        _2550 = _2325;
        _2552 = _2327;
        _2554 = _2329;
    }
    float _4524 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _4535 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _4546 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _2571 = ((isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * (_2544 + ((isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))) * _755))) + ((_2550 + ((isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0))) * _1592)) * cbPerFrame._m0[3u].x);
    float _2572 = ((isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (_2546 + ((isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0))) * _755))) + ((_2552 + ((isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))) * _1592)) * cbPerFrame._m0[3u].x);
    float _2573 = ((isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0))) * (_2548 + ((isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))) * _755))) + ((_2554 + ((isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))) * _1592)) * cbPerFrame._m0[3u].x);
    uint _2574 = _243 + 6u;
    float _2582 = _675 / cbSceneParam._m0[86u].x;
    float _2583 = _676 / cbSceneParam._m0[86u].y;
    vec4 _2597 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2582, _2583, (log2((isnan(cbSceneParam._m0[77u].w) ? _596 : (isnan(_596) ? cbSceneParam._m0[77u].w : min(_596, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2599 = _2597.x;
    float _2600 = _2597.y;
    float _2601 = _2597.z;
    float _2602 = _2597.w;
    float _2695;
    float _2697;
    float _2699;
    float _2701;
    if (_596 > cbSceneParam._m0[78u].w)
    {
        float _2657 = isnan(_596) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _596 : min(cbSceneParam._m0[80u].w, _596));
        float _2658 = _2657 / _596;
        float _2669 = _2658 * _647;
        float _2670 = _648 * _2658;
        float _2671 = (-0.0) - _2670;
        float _2673 = _2658 * _649;
        float _2675 = (cbSceneParam._m0[77u].w * _2671) / _2657;
        float _2676 = _2675 + cbSceneParam._m0[79u].w;
        float _2677 = cbSceneParam._m0[79u].w - _2670;
        float _2683 = sqrt(((_2669 * _2669) + (_2670 * _2670)) + (_2673 * _2673));
        float _2686 = (1.0 - (cbSceneParam._m0[77u].w / _2657)) * _2683;
        float _2691 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2693 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2870;
        if (abs((_2671 - _2675) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2870 = ((((_2676 > 0.0) ? exp2(_2691 * _2676) : (2.0 - exp2(_2693 * _2676))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2686;
        }
        else
        {
            float _2814 = 1.0 / cbSceneParam._m0[80u].x;
            float _2815 = isnan(_2677) ? _2676 : (isnan(_2676) ? _2677 : max(_2676, _2677));
            float _2816 = isnan(_2677) ? _2676 : (isnan(_2676) ? _2677 : min(_2676, _2677));
            float _2825 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : min(_2815, 0.0));
            float _2826 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : min(_2816, 0.0));
            _2870 = ((abs(_2683 / _2671) * cbSceneParam._m0[80u].y) * ((((_2825 - _2826) * 2.0) - ((exp2(_2691 * (isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0)))) - exp2(_2691 * (isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0))))) * _2814)) - ((exp2(_2693 * _2825) - exp2(_2693 * _2826)) * _2814))) + (_2686 * cbSceneParam._m0[80u].z);
        }
        vec4 _2872 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2582, _2583, 1.0), 0.0);
        float _2881 = exp2((_2870 * (-1.44269502162933349609375)) * (1.0 - _2872.w));
        float _2882 = log2(_2881);
        float _2898 = log2(_2602);
        _2695 = (exp2(_2898 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2882 * cbSceneParam._m0[78u].x)) * _2872.x) / cbSceneParam._m0[78u].x)) + _2599;
        _2697 = (exp2(_2898 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2882 * cbSceneParam._m0[78u].y)) * _2872.y) / cbSceneParam._m0[78u].y)) + _2600;
        _2699 = (exp2(_2898 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2882 * cbSceneParam._m0[78u].z)) * _2872.z) / cbSceneParam._m0[78u].z)) + _2601;
        _2701 = _2881 * _2602;
    }
    else
    {
        _2695 = _2599;
        _2697 = _2600;
        _2699 = _2601;
        _2701 = _2602;
    }
    bool _2908;
    vec4 _2711;
    vec4 _2733;
    float _2735;
    float _2739;
    float _2740;
    float _2741;
    float _2742;
    bool _2752;
    for (;;)
    {
        _2711 = cbMatDynParam._m0[0u];
        float _2713 = roundEven(_2711.y);
        bool _2714 = _2713 == 3.0;
        float _2715 = log2(_2701);
        float _2722 = exp2(_2715 * cbSceneParam._m0[78u].x) * _2571;
        float _2723 = exp2(_2715 * cbSceneParam._m0[78u].y) * _2572;
        float _2724 = exp2(_2715 * cbSceneParam._m0[78u].z) * _2573;
        float _2731 = _663 + (-0.5);
        _2733 = cbMtdParam._m0[1u];
        _2735 = _2733.y * _2731;
        float _2738 = (_2713 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2739 = _2738 * (_2714 ? _2722 : (_2722 + (cbSceneParam._m0[72u].w * _2695)));
        _2740 = _2738 * (_2714 ? _2723 : (_2723 + (cbSceneParam._m0[72u].w * _2697)));
        _2741 = _2738 * (_2714 ? _2724 : (_2724 + (cbSceneParam._m0[72u].w * _2699)));
        _2742 = _2731 * 0.999000012874603271484375;
        _2752 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2752)
        {
            if ((cbInstanceData._m0[_243 + 7u].x + _2742) < 0.5)
            {
                _2908 = true;
                break;
            }
        }
        uint _2849 = _715 + uint(_2711.w);
        if ((cbInstanceData._m0[_2849].w < 1.0) && ((cbInstanceData._m0[_2849].w + _2742) < 0.5))
        {
            _2908 = true;
            break;
        }
        if ((_2735 + 1.0) < _2733.x)
        {
            _2908 = true;
            break;
        }
        _2908 = false;
        break;
    }
    float _3112;
    if (_2908)
    {
        discard_state = true;
        _3112 = 0.0;
    }
    else
    {
        _3112 = cbInstanceData._m0[_2574].w;
    }
    SV_Target.x = _2739;
    SV_Target.y = _2740;
    SV_Target.z = _2741;
    SV_Target.w = _3112;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2574].w;
    discard_exit();
}


