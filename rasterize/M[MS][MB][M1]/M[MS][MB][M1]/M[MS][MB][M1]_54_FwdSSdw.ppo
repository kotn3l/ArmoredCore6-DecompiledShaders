#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1082;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _211 = _210 * _202;
    float _212 = _210 * _203;
    float _213 = _210 * _204;
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = _217 * NORMAL.x;
    float _219 = _217 * NORMAL.y;
    float _220 = _217 * NORMAL.z;
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _225 = _224 * TANGENT.x;
    float _226 = _224 * TANGENT.y;
    float _227 = _224 * TANGENT.z;
    uint _230 = uint(roundEven(NORMAL.w)) * 13u;
    uint _236 = _230 + 1u;
    uint _240 = _230 + 2u;
    float _249 = sqrt(((cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x)) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x));
    float _250 = _249 * TEXCOORD.z;
    float _251 = _249 * TEXCOORD.w;
    vec4 _270 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _276 = _270.x * cbMtdParam._m0[9u].x;
    float _277 = _270.y * cbMtdParam._m0[9u].y;
    float _278 = _270.z * cbMtdParam._m0[9u].z;
    vec4 _297 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _250) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _251) + cbTextureTilingScale._m0[14u].w));
    vec4 _317 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _250) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _251) + cbTextureTilingScale._m0[20u].w));
    vec4 _343 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _347 = _343.z;
    float _351 = (_343.x * 2.0) + (-1.0);
    float _352 = (_343.y * 2.0) + (-1.0);
    float _353 = dot(vec2(_351, _352), vec2(_351, _352));
    float _3433 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _359 = sqrt(1.0 - (isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0))));
    float _364 = _351 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_317.x * 2.0) + (-1.0)));
    float _365 = _352 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_317.y * 2.0) + (-1.0)));
    float _368 = fma(_359, _218, fma(_365, _225, _364 * _211));
    float _371 = fma(_359, _219, fma(_365, _226, _364 * _212));
    float _374 = fma(_359, _220, fma(_365, _227, _364 * _213));
    float _378 = inversesqrt(dot(vec3(_368, _371, _374), vec3(_368, _371, _374)));
    vec4 _414 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _250) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _251) + cbTextureTilingScale._m0[11u].w));
    float _416 = _414.x;
    float _417 = 1.0 - _416;
    float _424 = ((_416 - _417) * cbMtdParam._m0[24u].z) + _417;
    float _426 = (cbMtdParam._m0[19u].x + dot(vec4(_378 * _368, _378 * _371, _378 * _374, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_424 * cbMtdParam._m0[21u].z);
    float _3444 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _427 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
    float _442 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_424 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3455 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _443 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
    float _447 = ((_427 * ((_297.x * cbMtdParam._m0[18u].x) - _276)) * _443) + _276;
    float _448 = ((_427 * ((_297.y * cbMtdParam._m0[18u].y) - _277)) * _443) + _277;
    float _449 = ((_427 * ((_297.z * cbMtdParam._m0[18u].z) - _278)) * _443) + _278;
    vec4 _462 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _464 = _462.x;
    float _467 = _464 - ((_464 * _427) * _443);
    float _472 = (((_317.z - _347) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _347;
    vec4 _485 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _250) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _251) + cbTextureTilingScale._m0[15u].w));
    float _492 = (_485.x * 2.0) + (-1.0);
    float _493 = (_485.y * 2.0) + (-1.0);
    float _494 = dot(vec2(_492, _493), vec2(_492, _493));
    float _3466 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _503 = (((_485.z - _472) * _427) * _443) + _472;
    float _518 = (((cbMtdParam._m0[21u].x * _364) + ((_492 - _364) * _427)) * _443) + _364;
    float _519 = (((cbMtdParam._m0[21u].x * _365) + ((_493 - _365) * _427)) * _443) + _365;
    float _520 = (((sqrt(1.0 - (isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0)))) - _359) * _427) * _443) + _359;
    float _525 = cbMtdParam._m0[22u].x + _343.w;
    float _528 = fma(_520, _218, fma(_519, _225, _518 * _211));
    float _531 = fma(_520, _219, fma(_519, _226, _518 * _212));
    float _534 = fma(_520, _220, fma(_519, _227, _518 * _213));
    float _538 = inversesqrt(dot(vec3(_528, _531, _534), vec3(_528, _531, _534)));
    float _539 = _538 * _528;
    float _540 = _538 * _531;
    float _541 = _538 * _534;
    float _3477 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _542 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
    float _3488 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _3499 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _3510 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _3521 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _3532 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _547 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
    float _561 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _602 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _612 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _602);
    float _613 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _602);
    float _614 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _602);
    float _618 = inversesqrt(dot(vec3(_612, _613, _614), vec3(_612, _613, _614)));
    float _619 = _612 * _618;
    float _620 = _613 * _618;
    float _621 = _614 * _618;
    float _627 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _628 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _649 = fma(_541, cbSceneParam._m0[5u].z, fma(_540, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _539));
    float _652 = fma(_541, cbSceneParam._m0[6u].z, fma(_540, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _539));
    float _655 = fma(_541, cbSceneParam._m0[7u].z, fma(_540, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _539));
    uint _669 = (_230 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _675 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0)))) * cbInstanceData._m0[_669].x;
    float _676 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0)))) * cbInstanceData._m0[_669].y;
    float _677 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0)))) * cbInstanceData._m0[_669].z;
    float _3543 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _678 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
    float _3554 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _679 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
    float _3565 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _680 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
    float _681 = 1.0 - _547;
    float _682 = _678 * _681;
    float _683 = _679 * _681;
    float _684 = _680 * _681;
    float _689 = (_678 + (-0.039999999105930328369140625)) * _547;
    float _690 = (_679 + (-0.039999999105930328369140625)) * _547;
    float _691 = (_680 + (-0.039999999105930328369140625)) * _547;
    float _692 = _689 + 0.039999999105930328369140625;
    float _694 = _690 + 0.039999999105930328369140625;
    float _695 = _691 + 0.039999999105930328369140625;
    vec4 _704 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _627, cbSceneParam._m0[86u].y * _628));
    float _708 = ((isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0))) * TEXCOORD_5.w) * _704.x;
    float _709 = dot(vec3(_539, _540, _541), vec3(_619, _620, _621));
    float _712 = _709 * 2.0;
    float _716 = (_712 * _539) - _619;
    float _717 = (_712 * _540) - _620;
    float _718 = (_712 * _541) - _621;
    float _722 = abs(dot(vec3(_619, _620, _621), vec3(_539, _540, _541)));
    float _3576 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _724 = sqrt(_542);
    float _737 = exp2((_724 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_724 * 3.0));
    float _743 = (1.0 - _737) * ((_724 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _744 = _737 * _724;
    float _772 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _776 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _780 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1081;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _806 = fma(_780, cbModelParam._m0[26u].z, fma(_776, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _772));
        float _810 = fma(_780, cbModelParam._m0[27u].z, fma(_776, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _772));
        float _814 = fma(_780, cbModelParam._m0[28u].z, fma(_776, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _772));
        float _839 = _772 + _539;
        float _840 = _776 + _540;
        float _841 = _780 + _541;
        float _851 = fma(_841, cbModelParam._m0[26u].z, fma(_840, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _839)) - _806;
        float _852 = fma(_841, cbModelParam._m0[27u].z, fma(_840, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _839)) - _810;
        float _853 = fma(_841, cbModelParam._m0[28u].z, fma(_840, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _839)) - _814;
        float _857 = inversesqrt(dot(vec3(_851, _852, _853), vec3(_851, _852, _853)));
        float _870 = ((_857 * _851) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_806 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _871 = ((_857 * _852) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_810 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _872 = ((_857 * _853) / cbModelParam._m0[34u].z) + ((((((_814 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _875 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        vec4 _882 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        vec4 _896 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        float _909 = exp2((_875.w + (-0.5)) * 20.0) * 2.0;
        float _910 = _909 * (_875.x + (-0.5));
        float _911 = _909 * (_875.y + (-0.5));
        float _912 = _909 * (_875.z + (-0.5));
        float _919 = exp2((_882.w + (-0.5)) * 20.0) * 2.0;
        float _920 = _919 * (_882.x + (-0.5));
        float _921 = _919 * (_882.y + (-0.5));
        float _922 = _919 * (_882.z + (-0.5));
        float _929 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_889.x + (-0.5));
        float _931 = _929 * (_889.y + (-0.5));
        float _932 = _929 * (_889.z + (-0.5));
        float _939 = exp2((_896.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_896.x + (-0.5));
        float _941 = _939 * (_896.y + (-0.5));
        float _942 = _939 * (_896.z + (-0.5));
        float _943 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _944 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _945 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _946 = _910 * 0.5;
        float _947 = _920 * 0.5;
        float _948 = _930 * 0.5;
        float _949 = dot(vec3(_946, _947, _948), vec3(_946, _947, _948));
        float _954 = (_949 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_949);
        float _963 = (dot(vec3(_539, _540, _541), vec3(_954 * _946, _954 * _947, _954 * _948)) + 1.0) * 0.5;
        float _3602 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _973 = sqrt(((_947 * _947) + (_946 * _946)) + (_948 * _948)) / (_943 + 9.9999997473787516355514526367188e-06);
        float _3613 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _975 = _974 * 2.0;
        float _979 = (1.0 - _974) / (_974 + 1.0);
        float _3624 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _989 = ((((1.0 - _980) * (_975 + 2.0)) * exp2(log2(isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))) * (_975 + 1.0))) + _980) * _943;
        float _990 = _911 * 0.5;
        float _991 = _921 * 0.5;
        float _992 = _931 * 0.5;
        float _993 = dot(vec3(_990, _991, _992), vec3(_990, _991, _992));
        float _998 = (_993 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_993);
        float _1006 = (dot(vec3(_539, _540, _541), vec3(_998 * _990, _998 * _991, _998 * _992)) + 1.0) * 0.5;
        float _3635 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1015 = sqrt(((_991 * _991) + (_990 * _990)) + (_992 * _992)) / (_944 + 9.9999997473787516355514526367188e-06);
        float _3646 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _1017 = _1016 * 2.0;
        float _1021 = (1.0 - _1016) / (_1016 + 1.0);
        float _3657 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _1031 = ((((1.0 - _1022) * (_1017 + 2.0)) * exp2(log2(isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0))) * (_1017 + 1.0))) + _1022) * _944;
        float _1032 = _912 * 0.5;
        float _1033 = _922 * 0.5;
        float _1034 = _932 * 0.5;
        float _1035 = dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034));
        float _1040 = (_1035 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1035);
        float _1048 = (dot(vec3(_539, _540, _541), vec3(_1040 * _1032, _1040 * _1033, _1040 * _1034)) + 1.0) * 0.5;
        float _3668 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1057 = sqrt(((_1033 * _1033) + (_1032 * _1032)) + (_1034 * _1034)) / (_945 + 9.9999997473787516355514526367188e-06);
        float _3679 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _1059 = _1058 * 2.0;
        float _1063 = (1.0 - _1058) / (_1058 + 1.0);
        float _3690 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _1073 = ((((1.0 - _1064) * (_1059 + 2.0)) * exp2(log2(isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))) * (_1059 + 1.0))) + _1064) * _945;
        _1081 = _912;
        _1083 = _911;
        _1084 = _910;
        _1085 = _922;
        _1086 = _921;
        _1087 = _920;
        _1088 = _932;
        _1089 = _931;
        _1090 = _930;
        _1091 = _945;
        _1092 = _944;
        _1093 = _943;
        _1094 = cbModelParam._m0[36u].z * (isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0)));
        _1095 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0)));
        _1096 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0)));
    }
    else
    {
        _1081 = _1082;
        _1083 = _1082;
        _1084 = _1082;
        _1085 = _1082;
        _1086 = _1082;
        _1087 = _1082;
        _1088 = _1082;
        _1089 = _1082;
        _1090 = _1082;
        _1091 = _1082;
        _1092 = _1082;
        _1093 = _1082;
        _1094 = 0.0;
        _1095 = 0.0;
        _1096 = 0.0;
    }
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1121 = fma(_780, cbModelParam._m0[30u].z, fma(_776, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _772));
        float _1125 = fma(_780, cbModelParam._m0[31u].z, fma(_776, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _772));
        float _1129 = fma(_780, cbModelParam._m0[32u].z, fma(_776, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _772));
        float _1152 = _772 + _539;
        float _1153 = _776 + _540;
        float _1154 = _780 + _541;
        float _1164 = fma(_1154, cbModelParam._m0[30u].z, fma(_1153, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1152)) - _1121;
        float _1165 = fma(_1154, cbModelParam._m0[31u].z, fma(_1153, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1152)) - _1125;
        float _1166 = fma(_1154, cbModelParam._m0[32u].z, fma(_1153, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1152)) - _1129;
        float _1170 = inversesqrt(dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166)));
        float _1183 = ((_1170 * _1164) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1121 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1184 = ((_1170 * _1165) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1125 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1185 = ((_1170 * _1166) / cbModelParam._m0[35u].z) + ((((((_1129 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        float _1220 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1187.x + (-0.5));
        float _1222 = _1220 * (_1187.y + (-0.5));
        float _1223 = _1220 * (_1187.z + (-0.5));
        float _1230 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1194.x + (-0.5));
        float _1232 = _1230 * (_1194.y + (-0.5));
        float _1233 = _1230 * (_1194.z + (-0.5));
        float _1240 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1201.x + (-0.5));
        float _1242 = _1240 * (_1201.y + (-0.5));
        float _1243 = _1240 * (_1201.z + (-0.5));
        float _1250 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1208.x + (-0.5));
        float _1252 = _1250 * (_1208.y + (-0.5));
        float _1253 = _1250 * (_1208.z + (-0.5));
        float _1254 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1255 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1256 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1257 = _1221 * 0.5;
        float _1258 = _1231 * 0.5;
        float _1259 = _1241 * 0.5;
        float _1260 = dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259));
        float _1265 = (_1260 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1260);
        float _1273 = (dot(vec3(_539, _540, _541), vec3(_1265 * _1257, _1265 * _1258, _1265 * _1259)) + 1.0) * 0.5;
        float _3731 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1282 = sqrt(((_1258 * _1258) + (_1257 * _1257)) + (_1259 * _1259)) / (_1254 + 9.9999997473787516355514526367188e-06);
        float _3742 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1284 = _1283 * 2.0;
        float _1288 = (1.0 - _1283) / (_1283 + 1.0);
        float _3753 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1298 = ((((1.0 - _1289) * (_1284 + 2.0)) * exp2(log2(isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * (_1284 + 1.0))) + _1289) * _1254;
        float _1299 = _1222 * 0.5;
        float _1300 = _1232 * 0.5;
        float _1301 = _1242 * 0.5;
        float _1302 = dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301));
        float _1307 = (_1302 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1302);
        float _1315 = (dot(vec3(_539, _540, _541), vec3(_1307 * _1299, _1307 * _1300, _1307 * _1301)) + 1.0) * 0.5;
        float _3764 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1324 = sqrt(((_1300 * _1300) + (_1299 * _1299)) + (_1301 * _1301)) / (_1255 + 9.9999997473787516355514526367188e-06);
        float _3775 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1326 = _1325 * 2.0;
        float _1330 = (1.0 - _1325) / (_1325 + 1.0);
        float _3786 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1340 = ((((1.0 - _1331) * (_1326 + 2.0)) * exp2(log2(isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) * (_1326 + 1.0))) + _1331) * _1255;
        float _1341 = _1223 * 0.5;
        float _1342 = _1233 * 0.5;
        float _1343 = _1243 * 0.5;
        float _1344 = dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343));
        float _1349 = (_1344 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1344);
        float _1357 = (dot(vec3(_539, _540, _541), vec3(_1349 * _1341, _1349 * _1342, _1349 * _1343)) + 1.0) * 0.5;
        float _3797 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1366 = sqrt(((_1342 * _1342) + (_1341 * _1341)) + (_1343 * _1343)) / (_1256 + 9.9999997473787516355514526367188e-06);
        float _3808 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1368 = _1367 * 2.0;
        float _1372 = (1.0 - _1367) / (_1367 + 1.0);
        float _3819 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1382 = ((((1.0 - _1373) * (_1368 + 2.0)) * exp2(log2(isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * (_1368 + 1.0))) + _1373) * _1256;
        _1390 = _1223;
        _1391 = _1222;
        _1392 = _1221;
        _1393 = _1233;
        _1394 = _1232;
        _1395 = _1231;
        _1396 = _1243;
        _1397 = _1242;
        _1398 = _1241;
        _1399 = _1256;
        _1400 = _1255;
        _1401 = _1254;
        _1402 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)));
        _1403 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)));
        _1404 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)));
    }
    else
    {
        _1390 = _1082;
        _1391 = _1082;
        _1392 = _1082;
        _1393 = _1082;
        _1394 = _1082;
        _1395 = _1082;
        _1396 = _1082;
        _1397 = _1082;
        _1398 = _1082;
        _1399 = _1082;
        _1400 = _1082;
        _1401 = _1082;
        _1402 = 0.0;
        _1403 = 0.0;
        _1404 = 0.0;
    }
    float _1414 = (cbModelParam._m0[1u].x * (_1402 - _1094)) + _1094;
    float _1415 = (cbModelParam._m0[1u].x * (_1403 - _1095)) + _1095;
    float _1416 = (cbModelParam._m0[1u].x * (_1404 - _1096)) + _1096;
    float _1437 = fma(_1416, cbSceneParam._m0[89u].z, fma(_1415, cbSceneParam._m0[89u].y, _1414 * cbSceneParam._m0[89u].x));
    float _1440 = fma(_1416, cbSceneParam._m0[90u].z, fma(_1415, cbSceneParam._m0[90u].y, _1414 * cbSceneParam._m0[90u].x));
    float _1443 = fma(_1416, cbSceneParam._m0[91u].z, fma(_1415, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1414));
    float _1458 = _716 * 0.5;
    float _1459 = _717 * 0.5;
    float _1460 = _718 * 0.5;
    float _1461 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1392, _1395, _1398, _1401));
    float _1464 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1391, _1394, _1397, _1400));
    float _1467 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1390, _1393, _1396, _1399));
    float _1501;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1474 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1081, _1085, _1088, _1091));
        float _1478 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1083, _1086, _1089, _1092));
        float _1482 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1084, _1087, _1090, _1093));
        float _1489 = dot(vec4(cbModelParam._m0[39u]), vec4(_1458, _1459, _1460, 1.0));
        _1501 = dot(vec3(isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)), isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)), isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1489) ? 0.0 : (isnan(0.0) ? _1489 : max(0.0, _1489))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1501 = 1.0;
    }
    float _1512;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1503 = dot(vec4(cbModelParam._m0[40u]), vec4(_1458, _1459, _1460, 1.0));
        _1512 = dot(vec3(isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)), isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)), isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1503) ? 0.0 : (isnan(0.0) ? _1503 : max(0.0, _1503))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1512 = 1.0;
    }
    float _1516 = (_1512 * cbModelParam._m0[1u].x) + (_1501 * (1.0 - cbModelParam._m0[1u].x));
    float _1526 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _542);
    float _1527 = isnan(_1526) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1526 : min(cbModelParam._m0[25u].z, _1526));
    float _1607;
    float _1609;
    float _1611;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1574 = fma(_780, cbModelParam._m0[13u].z, fma(_776, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _772)) + cbModelParam._m0[13u].w;
        float _1578 = fma(_780, cbModelParam._m0[14u].z, fma(_776, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _772)) + cbModelParam._m0[14u].w;
        float _1582 = fma(_780, cbModelParam._m0[15u].z, fma(_776, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _772)) + cbModelParam._m0[15u].w;
        float _1585 = fma(_718, cbModelParam._m0[13u].z, fma(_717, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _716));
        float _1588 = fma(_718, cbModelParam._m0[14u].z, fma(_717, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _716));
        float _1591 = fma(_718, cbModelParam._m0[15u].z, fma(_717, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _716));
        float _1619;
        if (_1585 > 0.0)
        {
            _1619 = abs((1.0 - _1574) / _1585);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1585 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1574 + 1.0) / _1585);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1619 = frontier_phi_14_12_ladder;
        }
        float _1843;
        if (_1588 > 0.0)
        {
            _1843 = abs((1.0 - _1578) / _1588);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1588 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1578 + 1.0) / _1588);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1843 = frontier_phi_23_19_ladder;
        }
        float _2100;
        if (_1591 > 0.0)
        {
            _2100 = abs((1.0 - _1582) / _1591);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1591 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1582 + 1.0) / _1591);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2100 = frontier_phi_35_30_ladder;
        }
        float _2102 = isnan(_1843) ? _1619 : (isnan(_1619) ? _1843 : min(_1619, _1843));
        float _2103 = isnan(_2100) ? _2102 : (isnan(_2102) ? _2100 : min(_2102, _2100));
        float _2107 = (_2103 * _1585) + _1574;
        float _2108 = (_2103 * _1588) + _1578;
        float _2109 = (_2103 * _1591) + _1582;
        float _2110 = _2103 * 9.9999997473787516355514526367188e-05;
        float _2112 = (-1.0) - _2110;
        float _2114 = _2110 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2109 > _2114) || ((_2109 < _2112) || ((_2108 > _2114) || ((_2108 < _2112) || ((_2107 < _2112) || (_2107 > _2114))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2237 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2109, cbModelParam._m0[9u].z, fma(_2108, cbModelParam._m0[9u].y, _2107 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2109, cbModelParam._m0[10u].z, fma(_2108, cbModelParam._m0[10u].y, _2107 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2109, cbModelParam._m0[11u].z, fma(_2108, cbModelParam._m0[11u].y, _2107 * cbModelParam._m0[11u].x))), _1527);
            frontier_phi_13_35_ladder = _2237.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2237.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2237.x * cbModelParam._m0[1u].y;
        }
        _1607 = frontier_phi_13_35_ladder_2;
        _1609 = frontier_phi_13_35_ladder_1;
        _1611 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1595 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_716, _717, _718), _1527);
        _1607 = _1595.x * cbModelParam._m0[1u].y;
        _1609 = _1595.y * cbModelParam._m0[1u].y;
        _1611 = _1595.z * cbModelParam._m0[1u].y;
    }
    float _1615 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _542);
    float _1616 = isnan(_1615) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1615 : min(cbModelParam._m0[25u].w, _1615));
    float _1705;
    float _1707;
    float _1709;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1669 = fma(_780, cbModelParam._m0[21u].z, fma(_776, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _772)) + cbModelParam._m0[21u].w;
        float _1673 = fma(_780, cbModelParam._m0[22u].z, fma(_776, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _772)) + cbModelParam._m0[22u].w;
        float _1677 = fma(_780, cbModelParam._m0[23u].z, fma(_776, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _772)) + cbModelParam._m0[23u].w;
        float _1680 = fma(_718, cbModelParam._m0[21u].z, fma(_717, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _716));
        float _1683 = fma(_718, cbModelParam._m0[22u].z, fma(_717, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _716));
        float _1686 = fma(_718, cbModelParam._m0[23u].z, fma(_717, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _716));
        float _1848;
        if (_1680 > 0.0)
        {
            _1848 = abs((1.0 - _1669) / _1680);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1680 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1669 + 1.0) / _1680);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1848 = frontier_phi_25_21_ladder;
        }
        float _2127;
        if (_1683 > 0.0)
        {
            _2127 = abs((1.0 - _1673) / _1683);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1683 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1673 + 1.0) / _1683);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2127 = frontier_phi_37_32_ladder;
        }
        float _2340;
        if (_1686 > 0.0)
        {
            _2340 = abs((1.0 - _1677) / _1686);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1686 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1677 + 1.0) / _1686);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2340 = frontier_phi_46_43_ladder;
        }
        float _2342 = isnan(_2127) ? _1848 : (isnan(_1848) ? _2127 : min(_1848, _2127));
        float _2343 = isnan(_2340) ? _2342 : (isnan(_2342) ? _2340 : min(_2342, _2340));
        float _2347 = (_2343 * _1680) + _1669;
        float _2348 = (_2343 * _1683) + _1673;
        float _2349 = (_2343 * _1686) + _1677;
        float _2350 = _2343 * 9.9999997473787516355514526367188e-05;
        float _2351 = (-1.0) - _2350;
        float _2353 = _2350 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2349 > _2353) || ((_2349 < _2351) || ((_2348 > _2353) || ((_2348 < _2351) || ((_2347 < _2351) || (_2347 > _2353))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2548 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2349, cbModelParam._m0[17u].z, fma(_2348, cbModelParam._m0[17u].y, _2347 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2349, cbModelParam._m0[18u].z, fma(_2348, cbModelParam._m0[18u].y, _2347 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2349, cbModelParam._m0[19u].z, fma(_2348, cbModelParam._m0[19u].y, _2347 * cbModelParam._m0[19u].x))), _1616);
            frontier_phi_22_46_ladder = _2548.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2548.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2548.x * cbModelParam._m0[1u].z;
        }
        _1705 = frontier_phi_22_46_ladder_2;
        _1707 = frontier_phi_22_46_ladder_1;
        _1709 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1689 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_716, _717, _718), _1616);
        _1705 = _1689.x * cbModelParam._m0[1u].z;
        _1707 = _1689.y * cbModelParam._m0[1u].z;
        _1709 = _1689.z * cbModelParam._m0[1u].z;
    }
    float _1722 = (((_743 * _692) + _744) * _708) * ((cbModelParam._m0[1u].w * (_1705 - _1607)) + _1607);
    float _1724 = (((_743 * _694) + _744) * _708) * ((cbModelParam._m0[1u].w * (_1707 - _1609)) + _1609);
    float _1726 = (((_743 * _695) + _744) * _708) * ((cbModelParam._m0[1u].w * (_1709 - _1611)) + _1611);
    float _1729 = fma(_1726, cbSceneParam._m0[89u].z, fma(_1724, cbSceneParam._m0[89u].y, _1722 * cbSceneParam._m0[89u].x));
    float _1732 = fma(_1726, cbSceneParam._m0[90u].z, fma(_1724, cbSceneParam._m0[90u].y, _1722 * cbSceneParam._m0[90u].x));
    float _1735 = fma(_1726, cbSceneParam._m0[91u].z, fma(_1724, cbSceneParam._m0[91u].y, _1722 * cbSceneParam._m0[91u].x));
    vec4 _1743 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_627, _628));
    float _1745 = _1743.w;
    float _1757 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1745);
    float _1758 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1745);
    float _1759 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1745);
    uvec4 _1763 = floatBitsToUint(cbInstanceData._m0[_230 + 5u]);
    uint _1765 = _1763.x * 14u;
    uint _1766 = _1765 + 13u;
    float _1773 = _708 + (-1.0);
    float _1778 = (cbLight._m0[_1766].x * _1773) + 1.0;
    float _1779 = (cbLight._m0[_1766].y * _1773) + 1.0;
    float _1780 = (cbLight._m0[_1766].z * _1773) + 1.0;
    float _1781 = (cbLight._m0[_1766].w * _1773) + 1.0;
    uint _1782 = _1765 + 5u;
    float _1788 = isnan(1.0) ? _1779 : (isnan(_1779) ? 1.0 : min(_1779, 1.0));
    uint _1792 = _1765 + 4u;
    float _1802 = isnan(1.0) ? _1778 : (isnan(_1778) ? 1.0 : min(_1778, 1.0));
    uint _1806 = _1765 | 1u;
    float _1817 = dot(vec3(cbLight._m0[_1765].xyz), vec3(_539, _540, _541));
    float _1820 = dot(vec3(cbLight._m0[_1806].xyz), vec3(_539, _540, _541));
    float _3955 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
    float _3966 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
    float _1825 = (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * 0.3183098733425140380859375;
    float _1827 = (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * 0.3183098733425140380859375;
    float _1834 = ((cbLight._m0[_1782].x * _1788) * _1827) + (((cbLight._m0[_1792].x * _1757) * _1802) * _1825);
    float _1835 = ((_1788 * cbLight._m0[_1782].y) * _1827) + (((cbLight._m0[_1792].y * _1758) * _1802) * _1825);
    float _1836 = ((_1788 * cbLight._m0[_1782].z) * _1827) + (((cbLight._m0[_1792].z * _1759) * _1802) * _1825);
    uvec4 _1840 = floatBitsToUint(cbLight._m0[_1765 + 12u]);
    bool _1842 = _1840.x == 0u;
    float _1853;
    float _1855;
    float _1857;
    if (_1842)
    {
        _1853 = _1834;
        _1855 = _1835;
        _1857 = _1836;
    }
    else
    {
        uint _1861 = _1765 + 6u;
        float _1877 = (dot(vec3(cbLight._m0[_1765 + 2u].xyz), vec3(_539, _540, _541)) * 0.5) + 0.5;
        float _1878 = _1877 * _1877;
        float _3977 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
        float _1879 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1880 = isnan(1.0) ? _1780 : (isnan(_1780) ? 1.0 : min(_1780, 1.0));
        _1853 = (((cbLight._m0[_1861].x * 0.3183098733425140380859375) * _1879) * _1880) + _1834;
        _1855 = (((cbLight._m0[_1861].y * 0.3183098733425140380859375) * _1879) * _1880) + _1835;
        _1857 = (((cbLight._m0[_1861].z * 0.3183098733425140380859375) * _1879) * _1880) + _1836;
    }
    bool _1860 = _1840.y == 0u;
    float _1898;
    float _1900;
    float _1902;
    if (_1860)
    {
        _1898 = _1853;
        _1900 = _1855;
        _1902 = _1857;
    }
    else
    {
        uint _2071 = _1765 + 7u;
        float _2087 = (dot(vec3(cbLight._m0[_1765 + 3u].xyz), vec3(_539, _540, _541)) * 0.5) + 0.5;
        float _2088 = _2087 * _2087;
        float _3993 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2089 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _2090 = isnan(1.0) ? _1781 : (isnan(_1781) ? 1.0 : min(_1781, 1.0));
        _1898 = (((cbLight._m0[_2071].x * 0.3183098733425140380859375) * _2089) * _2090) + _1853;
        _1900 = (((cbLight._m0[_2071].y * 0.3183098733425140380859375) * _2089) * _2090) + _1855;
        _1902 = (((cbLight._m0[_2071].z * 0.3183098733425140380859375) * _2089) * _2090) + _1857;
    }
    uint _1905 = _1765 + 8u;
    float _1918 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1765].w)) * _542) * 0.949999988079071044921875);
    float _1919 = _1918 * _1918;
    float _1920 = cbLight._m0[_1765].x + _619;
    float _1921 = cbLight._m0[_1765].y + _620;
    float _1922 = cbLight._m0[_1765].z + _621;
    float _1926 = inversesqrt(dot(vec3(_1920, _1921, _1922), vec3(_1920, _1921, _1922)));
    float _1927 = _1926 * _1920;
    float _1928 = _1926 * _1921;
    float _1929 = _1926 * _1922;
    float _1930 = dot(vec3(_539, _540, _541), vec3(cbLight._m0[_1765].xyz));
    float _4009 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
    float _1933 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
    float _4020 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _1934 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
    float _1935 = dot(vec3(_539, _540, _541), vec3(_1927, _1928, _1929));
    float _4031 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
    float _1938 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _1939 = dot(vec3(cbLight._m0[_1765].xyz), vec3(_1927, _1928, _1929));
    float _4042 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
    float _1943 = _1919 * _1919;
    float _1947 = ((_1938 * _1938) * (_1943 + (-1.0))) + 1.0;
    float _1955 = exp2(log2(1.0 - (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0)))) * 5.0);
    float _1956 = 0.959999978542327880859375 - _689;
    float _1958 = 0.959999978542327880859375 - _690;
    float _1959 = 0.959999978542327880859375 - _691;
    float _1966 = 1.0 - _1919;
    float _1977 = (0.5 / (((_1934 * ((_1933 * _1966) + _1919)) + 9.9999999392252902907785028219223e-09) + (((_1934 * _1966) + _1919) * _1933))) * _1933;
    float _4053 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1979 = (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * (_1943 / ((_1947 * _1947) * 3.141590118408203125));
    uint _1993 = _1765 + 9u;
    float _2004 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1806].w)) * _542) * 0.949999988079071044921875);
    float _2005 = _2004 * _2004;
    float _2006 = cbLight._m0[_1806].x + _619;
    float _2007 = cbLight._m0[_1806].y + _620;
    float _2008 = cbLight._m0[_1806].z + _621;
    float _2012 = inversesqrt(dot(vec3(_2006, _2007, _2008), vec3(_2006, _2007, _2008)));
    float _2013 = _2012 * _2006;
    float _2014 = _2012 * _2007;
    float _2015 = _2012 * _2008;
    float _2016 = dot(vec3(_539, _540, _541), vec3(cbLight._m0[_1806].xyz));
    float _4064 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2019 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _2020 = dot(vec3(_539, _540, _541), vec3(_2013, _2014, _2015));
    float _4075 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
    float _2023 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _2024 = dot(vec3(cbLight._m0[_1806].xyz), vec3(_2013, _2014, _2015));
    float _4086 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2028 = _2005 * _2005;
    float _2032 = ((_2023 * _2023) * (_2028 + (-1.0))) + 1.0;
    float _2039 = exp2(log2(1.0 - (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0)))) * 5.0);
    float _2046 = 1.0 - _2005;
    float _2056 = (0.5 / (((_1934 * ((_2019 * _2046) + _2005)) + 9.9999999392252902907785028219223e-09) + (((_1934 * _2046) + _2005) * _2019))) * _2019;
    float _4097 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _2058 = (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (_2028 / ((_2032 * _2032) * 3.141590118408203125));
    float _2068 = (((((_2039 * _1956) + _692) * cbLight._m0[_1993].x) * _2058) * _1788) + ((((cbLight._m0[_1905].x * _1757) * ((_1955 * _1956) + _692)) * _1979) * _1802);
    float _2069 = (((((_2039 * _1958) + _694) * cbLight._m0[_1993].y) * _2058) * _1788) + ((((cbLight._m0[_1905].y * _1758) * ((_1955 * _1958) + _694)) * _1979) * _1802);
    float _2070 = (((((_2039 * _1959) + _695) * cbLight._m0[_1993].z) * _2058) * _1788) + ((((cbLight._m0[_1905].z * _1759) * ((_1955 * _1959) + _695)) * _1979) * _1802);
    float _2132;
    float _2134;
    float _2136;
    if (_1842)
    {
        _2132 = _2068;
        _2134 = _2069;
        _2136 = _2070;
    }
    else
    {
        uint _2138 = _1765 + 2u;
        uint _2142 = _1765 + 10u;
        float _2156 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2138].w)) * _542) * 0.949999988079071044921875);
        float _2157 = _2156 * _2156;
        float _2158 = cbLight._m0[_2138].x + _619;
        float _2159 = cbLight._m0[_2138].y + _620;
        float _2160 = cbLight._m0[_2138].z + _621;
        float _2164 = inversesqrt(dot(vec3(_2158, _2159, _2160), vec3(_2158, _2159, _2160)));
        float _2165 = _2164 * _2158;
        float _2166 = _2164 * _2159;
        float _2167 = _2164 * _2160;
        float _2168 = dot(vec3(_539, _540, _541), vec3(cbLight._m0[_2138].xyz));
        float _4108 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2171 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _2172 = dot(vec3(_539, _540, _541), vec3(_2165, _2166, _2167));
        float _4119 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        float _2175 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _2176 = dot(vec3(cbLight._m0[_2138].xyz), vec3(_2165, _2166, _2167));
        float _4130 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
        float _2180 = _2157 * _2157;
        float _2184 = ((_2175 * _2175) * (_2180 + (-1.0))) + 1.0;
        float _2191 = exp2(log2(1.0 - (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0)))) * 5.0);
        float _2198 = 1.0 - _2157;
        float _2208 = (0.5 / (((_1934 * ((_2171 * _2198) + _2157)) + 9.9999999392252902907785028219223e-09) + (((_1934 * _2198) + _2157) * _2171))) * _2171;
        float _4141 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2210 = (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * (_2180 / ((_2184 * _2184) * 3.141590118408203125));
        float _2211 = isnan(1.0) ? _1780 : (isnan(_1780) ? 1.0 : min(_1780, 1.0));
        _2132 = (((((_2191 * _1956) + _692) * cbLight._m0[_2142].x) * _2210) * _2211) + _2068;
        _2134 = (((((_2191 * _1958) + _694) * cbLight._m0[_2142].y) * _2210) * _2211) + _2069;
        _2136 = (((((_2191 * _1959) + _695) * cbLight._m0[_2142].z) * _2210) * _2211) + _2070;
    }
    float _2246;
    float _2248;
    float _2250;
    if (_1860)
    {
        _2246 = _2132;
        _2248 = _2134;
        _2250 = _2136;
    }
    else
    {
        uint _2257 = _1765 + 3u;
        uint _2261 = _1765 + 11u;
        float _2275 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2257].w)) * _542) * 0.949999988079071044921875);
        float _2276 = _2275 * _2275;
        float _2277 = cbLight._m0[_2257].x + _619;
        float _2278 = cbLight._m0[_2257].y + _620;
        float _2279 = cbLight._m0[_2257].z + _621;
        float _2283 = inversesqrt(dot(vec3(_2277, _2278, _2279), vec3(_2277, _2278, _2279)));
        float _2284 = _2283 * _2277;
        float _2285 = _2283 * _2278;
        float _2286 = _2283 * _2279;
        float _2287 = dot(vec3(_539, _540, _541), vec3(cbLight._m0[_2257].xyz));
        float _4157 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2290 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _2291 = dot(vec3(_539, _540, _541), vec3(_2284, _2285, _2286));
        float _4168 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        float _2294 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _2295 = dot(vec3(cbLight._m0[_2257].xyz), vec3(_2284, _2285, _2286));
        float _4179 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        float _2299 = _2276 * _2276;
        float _2303 = ((_2294 * _2294) * (_2299 + (-1.0))) + 1.0;
        float _2310 = exp2(log2(1.0 - (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0)))) * 5.0);
        float _2317 = 1.0 - _2276;
        float _2327 = (0.5 / (((_1934 * ((_2290 * _2317) + _2276)) + 9.9999999392252902907785028219223e-09) + (((_1934 * _2317) + _2276) * _2290))) * _2290;
        float _4190 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2329 = (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_2299 / ((_2303 * _2303) * 3.141590118408203125));
        float _2330 = isnan(1.0) ? _1781 : (isnan(_1781) ? 1.0 : min(_1781, 1.0));
        _2246 = (((((_2310 * _1956) + _692) * cbLight._m0[_2261].x) * _2329) * _2330) + _2132;
        _2248 = (((((_2310 * _1958) + _694) * cbLight._m0[_2261].y) * _2329) * _2330) + _2134;
        _2250 = (((((_2310 * _1959) + _695) * cbLight._m0[_2261].z) * _2329) * _2330) + _2136;
    }
    float _2465;
    float _2467;
    float _2469;
    float _2471;
    float _2473;
    float _2475;
    if (_1763.y == 0u)
    {
        float _2405 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2406 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2405;
        float _2407 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2405;
        float _2408 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2405;
        uvec4 _2420 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2421 = _2420.x;
        uint _2432 = uint((float(_2420.y) * floor(float(uint(cbSceneParam._m0[85u].y * _628) / _2421))) + floor(float(uint(cbSceneParam._m0[85u].x * _627) / _2421)));
        float _2442 = (log2(_2408 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2443 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        uint _2446 = uint(isnan(14.0) ? _2443 : (isnan(_2443) ? 14.0 : min(_2443, 14.0)));
        uvec4 _2451 = texelFetch(g_lightClusterGridBuffer, int(((_2446 << 2u) + (_2432 << 6u)) >> 2u));
        uint _2452 = _2451.x;
        uint _2453 = _2420.z;
        float _2553;
        float _2555;
        float _2557;
        float _2559;
        float _2561;
        float _2563;
        if (((((1u << ((_2453 >> 4u) & 15u)) + 4294967295u) & _2452) == 0u) || ((_2453 & 240u) == 0u))
        {
            _2553 = 0.0;
            _2555 = 0.0;
            _2557 = 0.0;
            _2559 = 0.0;
            _2561 = 0.0;
            _2563 = 0.0;
        }
        else
        {
            float _2554;
            float _2556;
            float _2558;
            float _2560;
            float _2562;
            float _2564;
            float _2698 = 0.0;
            float _2699 = 0.0;
            float _2700 = 0.0;
            float _2701 = 0.0;
            float _2702 = 0.0;
            float _2703 = 0.0;
            uint _2704 = 0u;
            uint _2713;
            bool _2714;
            for (;;)
            {
                _2713 = texelFetch(g_lightClassification, int((((_2446 << 5u) + (_2432 << 9u)) + (_2704 << 2u)) >> 2u)).x;
                _2714 = _2713 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2714)
                {
                    frontier_phi_61_pred = _2698;
                    frontier_phi_61_pred_1 = _2703;
                    frontier_phi_61_pred_2 = _2702;
                    frontier_phi_61_pred_3 = _2701;
                    frontier_phi_61_pred_4 = _2700;
                    frontier_phi_61_pred_5 = _2699;
                }
                else
                {
                    float _2822;
                    float _2823;
                    float _2824;
                    float _2825;
                    float _2826;
                    float _2827;
                    uint _2828;
                    _2822 = _2698;
                    _2823 = _2699;
                    _2824 = _2700;
                    _2825 = _2701;
                    _2826 = _2702;
                    _2827 = _2703;
                    _2828 = _2713;
                    float _2754;
                    float _2755;
                    float _2756;
                    float _2757;
                    float _2758;
                    float _2759;
                    for (;;)
                    {
                        uint _2832 = uint(findLSB(_2828)) + (_2704 << 5u);
                        uint _2829 = (_2828 + 4294967295u) & _2828;
                        uint _2834 = _2832 * 48u;
                        vec4 _2848 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2834)).x, texelFetch(g_PointLightRenderingBuffer, int(_2834 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2834 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2834 + 3u)).x));
                        uint _2854 = (_2832 * 48u) + 4u;
                        vec4 _2867 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2854)).x, texelFetch(g_PointLightRenderingBuffer, int(_2854 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2854 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2854 + 3u)).x));
                        uint _2873 = (_2832 * 48u) + 8u;
                        vec3 _2884 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2873)).x, texelFetch(g_PointLightRenderingBuffer, int(_2873 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2873 + 2u)).x));
                        float _2888 = _2848.x - _2406;
                        float _2889 = _2848.y - _2407;
                        float _2890 = _2848.z - _2408;
                        float _2891 = dot(vec3(_2888, _2889, _2890), vec3(_2888, _2889, _2890));
                        float _2894 = inversesqrt(_2891);
                        float _2895 = _2894 * _2888;
                        float _2896 = _2894 * _2889;
                        float _2897 = _2894 * _2890;
                        float _2898 = dot(vec3(_649, _652, _655), vec3(_2895, _2896, _2897));
                        float _2903 = 1.0 - (_2891 * _2848.w);
                        float _4216 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
                        float _2904 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
                        float _2905 = sqrt(_2891) * _2867.w;
                        float _2908 = 1.39999997615814208984375 / (_2905 + 1.39999997615814208984375);
                        float _2909 = _2908 * _2908;
                        float _2912 = ((1.0 - _2909) * _2898) + _2909;
                        float _2915 = _2905 * _2905;
                        float _2919 = ((isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0))) * _2904) / ((_2915 * 0.699999988079071044921875) + 1.0);
                        float _2923 = (-0.0) - _2406;
                        float _2924 = (-0.0) - _2407;
                        float _2925 = (-0.0) - _2408;
                        float _2929 = inversesqrt(dot(vec3(_2923, _2924, _2925), vec3(_2923, _2924, _2925)));
                        float _2930 = _2929 * _2923;
                        float _2931 = _2929 * _2924;
                        float _2932 = _2929 * _2925;
                        float _2940 = exp2(log2(1.0 / ((_2915 * 3.5) + 5.0)) * 0.25);
                        float _2941 = 1.0 - _724;
                        float _2948 = sqrt(1.0 - ((1.0 - (_2941 * _2941)) * (1.0 - (_2940 * _2940))));
                        float _2949 = _2948 * _2948;
                        float _2950 = _2949 * _2949;
                        float _2951 = _2930 + _2895;
                        float _2952 = _2931 + _2896;
                        float _2953 = _2932 + _2897;
                        float _2957 = inversesqrt(dot(vec3(_2951, _2952, _2953), vec3(_2951, _2952, _2953)));
                        float _2961 = dot(vec3(_649, _652, _655), vec3(_2930, _2931, _2932));
                        float _4232 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
                        float _2964 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
                        float _2965 = dot(vec3(_649, _652, _655), vec3(_2957 * _2951, _2957 * _2952, _2957 * _2953));
                        float _4243 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
                        float _2968 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
                        float _2972 = ((_2968 * _2968) * (_2950 + (-1.0))) + 1.0;
                        float _2973 = _2908 * _2949;
                        float _2974 = _2973 * _2973;
                        float _2977 = ((1.0 - _2974) * _2898) + _2974;
                        float _4254 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
                        float _2978 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
                        float _2979 = 1.0 - _2949;
                        float _2989 = (0.5 / (((_2978 * ((_2964 * _2979) + _2949)) + 9.9999999392252902907785028219223e-09) + (((_2978 * _2979) + _2949) * _2964))) * _2978;
                        float _4265 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
                        float _3000 = (((_2950 * 3.1415927410125732421875) * (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0)))) / ((_2972 * _2972) * ((_2915 * 2.1991131305694580078125) + 3.141590118408203125))) * _2904;
                        _2757 = (_2919 * _2867.x) + _2825;
                        _2758 = (_2919 * _2867.y) + _2826;
                        _2759 = (_2919 * _2867.z) + _2827;
                        _2754 = (_3000 * _2884.x) + _2822;
                        _2755 = (_3000 * _2884.y) + _2823;
                        _2756 = (_3000 * _2884.z) + _2824;
                        if (_2829 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2822 = _2754;
                            _2823 = _2755;
                            _2824 = _2756;
                            _2825 = _2757;
                            _2826 = _2758;
                            _2827 = _2759;
                            _2828 = _2829;
                        }
                    }
                    frontier_phi_61_pred = _2754;
                    frontier_phi_61_pred_1 = _2759;
                    frontier_phi_61_pred_2 = _2758;
                    frontier_phi_61_pred_3 = _2757;
                    frontier_phi_61_pred_4 = _2756;
                    frontier_phi_61_pred_5 = _2755;
                }
                _2554 = frontier_phi_61_pred;
                _2564 = frontier_phi_61_pred_1;
                _2562 = frontier_phi_61_pred_2;
                _2560 = frontier_phi_61_pred_3;
                _2558 = frontier_phi_61_pred_4;
                _2556 = frontier_phi_61_pred_5;
                uint _2705 = _2704 + 1u;
                if (_2705 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2698 = _2554;
                    _2699 = _2556;
                    _2700 = _2558;
                    _2701 = _2560;
                    _2702 = _2562;
                    _2703 = _2564;
                    _2704 = _2705;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2553 = _2554;
            _2555 = _2556;
            _2557 = _2558;
            _2559 = _2560;
            _2561 = _2562;
            _2563 = _2564;
        }
        uvec4 _2567 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2568 = _2567.z;
        uint _2570 = (_2568 >> 8u) & 15u;
        float _2666;
        float _2668;
        float _2670;
        float _2672;
        float _2674;
        float _2676;
        if (((4294967295u << _2570) & _2452) == 0u)
        {
            _2666 = _2553;
            _2668 = _2555;
            _2670 = _2557;
            _2672 = _2559;
            _2674 = _2561;
            _2676 = _2563;
        }
        else
        {
            float _2691 = inversesqrt(dot(vec3(_2406, _2407, _2408), vec3(_2406, _2407, _2408)));
            float _2692 = _2691 * _2406;
            float _2693 = _2691 * _2407;
            float _2694 = _2691 * _2408;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2570 < ((_2568 >> 12u) & 15u))
            {
                float _2667;
                float _2669;
                float _2671;
                float _2673;
                float _2675;
                float _2677;
                float _2805 = _2553;
                float _2806 = _2555;
                float _2807 = _2557;
                float _2808 = _2559;
                float _2809 = _2561;
                float _2810 = _2563;
                uint _2811 = _2570;
                uint _2820;
                bool _2821;
                for (;;)
                {
                    _2820 = texelFetch(g_lightClassification, int((((_2446 << 5u) + (_2432 << 9u)) + (_2811 << 2u)) >> 2u)).x;
                    _2821 = _2820 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2821)
                    {
                        frontier_phi_67_pred = _2808;
                        frontier_phi_67_pred_1 = _2809;
                        frontier_phi_67_pred_2 = _2810;
                        frontier_phi_67_pred_3 = _2807;
                        frontier_phi_67_pred_4 = _2806;
                        frontier_phi_67_pred_5 = _2805;
                    }
                    else
                    {
                        float _3005;
                        float _3006;
                        float _3007;
                        float _3008;
                        float _3009;
                        float _3010;
                        float _3299;
                        float _3300;
                        float _3301;
                        float _3302;
                        float _3303;
                        float _3304;
                        float _3018 = _2805;
                        float _3019 = _2806;
                        float _3020 = _2807;
                        float _3021 = _2808;
                        float _3022 = _2809;
                        float _3023 = _2810;
                        uint _3024 = _2820;
                        uint _3025;
                        vec4 _3050;
                        float _3051;
                        vec4 _3066;
                        vec3 _3078;
                        vec4 _3094;
                        vec4 _3109;
                        float _3155;
                        bool _3156;
                        for (;;)
                        {
                            uint _3035 = ((_2811 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3024));
                            _3025 = (_3024 + 4294967295u) & _3024;
                            uint _3037 = _3035 * 40u;
                            _3050 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3037)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 3u)).x));
                            _3051 = _3050.w;
                            uint _3053 = (_3035 * 40u) + 4u;
                            _3066 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3053)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 3u)).x));
                            uint _3068 = (_3035 * 40u) + 8u;
                            _3078 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3068)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 2u)).x));
                            uint _3081 = (_3035 * 40u) + 16u;
                            _3094 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3081)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 3u)).x));
                            uint _3096 = (_3035 * 40u) + 20u;
                            _3109 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3096)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 3u)).x));
                            uint _3111 = (_3035 * 40u) + 24u;
                            vec4 _3124 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3111)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 3u)).x));
                            uint _3130 = (_3035 * 40u) + 28u;
                            vec4 _3143 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3130)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 3u)).x));
                            _3155 = fma(_2408, _3143.z, fma(_2407, _3143.y, _3143.x * _2406)) + _3143.w;
                            _3156 = !((fma(_2408, _3124.z, fma(_2407, _3124.y, _3124.x * _2406)) + _3124.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3156)
                            {
                                float _3183 = _3050.x - _2406;
                                float _3184 = _3050.y - _2407;
                                float _3185 = _3050.z - _2408;
                                float _3186 = dot(vec3(_3183, _3184, _3185), vec3(_3183, _3184, _3185));
                                float _3189 = inversesqrt(_3186);
                                float _3190 = _3189 * _3183;
                                float _3191 = _3189 * _3184;
                                float _3192 = _3189 * _3185;
                                float _3196 = 1.0 - (_3186 / (_3051 * _3051));
                                float _4276 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                                float _3197 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
                                float _3201 = sqrt(_3186) * _3066.w;
                                float _3203 = 1.39999997615814208984375 / (_3201 + 1.39999997615814208984375);
                                float _3204 = _3203 * _3203;
                                float _3207 = ((1.0 - _3204) * dot(vec3(_3190, _3191, _3192), vec3(_649, _652, _655))) + _3204;
                                float _3210 = _3201 * _3201;
                                float _3214 = (fma(_2408, _3094.z, fma(_2407, _3094.y, _3094.x * _2406)) + _3094.w) / _3155;
                                float _3215 = (fma(_2408, _3109.z, fma(_2407, _3109.y, _3109.x * _2406)) + _3109.w) / _3155;
                                float _3219 = 1.0 - dot(vec2(_3214, _3215), vec2(_3214, _3215));
                                float _4292 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                                float _3220 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
                                float _3221 = _3220 * (((isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0))) * _3197) / ((_3210 * 0.699999988079071044921875) + 1.0));
                                float _3233 = exp2(log2(1.0 / ((_3210 * 3.5) + 5.0)) * 0.25);
                                float _3234 = 1.0 - _724;
                                float _3241 = sqrt(1.0 - ((1.0 - (_3234 * _3234)) * (1.0 - (_3233 * _3233))));
                                float _3242 = _3241 * _3241;
                                float _3243 = _3242 * _3242;
                                float _3244 = _3190 - _2692;
                                float _3245 = _3191 - _2693;
                                float _3246 = _3192 - _2694;
                                float _3250 = inversesqrt(dot(vec3(_3244, _3245, _3246), vec3(_3244, _3245, _3246)));
                                float _3254 = dot(vec3(_649, _652, _655), vec3((-0.0) - _2692, (-0.0) - _2693, (-0.0) - _2694));
                                float _4303 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                                float _3257 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
                                float _3258 = dot(vec3(_649, _652, _655), vec3(_3250 * _3244, _3250 * _3245, _3250 * _3246));
                                float _4314 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                                float _3261 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
                                float _3265 = ((_3261 * _3261) * (_3243 + (-1.0))) + 1.0;
                                float _3266 = _3203 * _3242;
                                float _3267 = _3266 * _3266;
                                float _3273 = ((1.0 - _3267) * dot(vec3(_649, _652, _655), vec3(_3190, _3191, _3192))) + _3267;
                                float _4325 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                                float _3274 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
                                float _3275 = 1.0 - _3242;
                                float _3285 = (0.5 / (((_3274 * ((_3257 * _3275) + _3242)) + 9.9999999392252902907785028219223e-09) + (((_3274 * _3275) + _3242) * _3257))) * _3274;
                                float _4336 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                                float _3295 = (_3220 * _3197) * (((_3243 * 3.1415927410125732421875) * (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0)))) / ((_3265 * _3265) * ((_3210 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3295 * _3078.x;
                                frontier_phi_73_pred_1 = _3295 * _3078.y;
                                frontier_phi_73_pred_2 = _3221 * _3066.z;
                                frontier_phi_73_pred_3 = _3221 * _3066.y;
                                frontier_phi_73_pred_4 = _3221 * _3066.x;
                                frontier_phi_73_pred_5 = _3295 * _3078.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3299 = frontier_phi_73_pred;
                            _3300 = frontier_phi_73_pred_1;
                            _3304 = frontier_phi_73_pred_2;
                            _3303 = frontier_phi_73_pred_3;
                            _3302 = frontier_phi_73_pred_4;
                            _3301 = frontier_phi_73_pred_5;
                            _3008 = _3302 + _3021;
                            _3009 = _3303 + _3022;
                            _3010 = _3304 + _3023;
                            _3005 = _3299 + _3018;
                            _3006 = _3300 + _3019;
                            _3007 = _3301 + _3020;
                            if (_3025 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3018 = _3005;
                                _3019 = _3006;
                                _3020 = _3007;
                                _3021 = _3008;
                                _3022 = _3009;
                                _3023 = _3010;
                                _3024 = _3025;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3008;
                        frontier_phi_67_pred_1 = _3009;
                        frontier_phi_67_pred_2 = _3010;
                        frontier_phi_67_pred_3 = _3007;
                        frontier_phi_67_pred_4 = _3006;
                        frontier_phi_67_pred_5 = _3005;
                    }
                    _2673 = frontier_phi_67_pred;
                    _2675 = frontier_phi_67_pred_1;
                    _2677 = frontier_phi_67_pred_2;
                    _2671 = frontier_phi_67_pred_3;
                    _2669 = frontier_phi_67_pred_4;
                    _2667 = frontier_phi_67_pred_5;
                    uint _2812 = _2811 + 1u;
                    if (_2812 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2805 = _2667;
                        _2806 = _2669;
                        _2807 = _2671;
                        _2808 = _2673;
                        _2809 = _2675;
                        _2810 = _2677;
                        _2811 = _2812;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2675;
                frontier_phi_55_56_ladder_1 = _2677;
                frontier_phi_55_56_ladder_2 = _2673;
                frontier_phi_55_56_ladder_3 = _2671;
                frontier_phi_55_56_ladder_4 = _2669;
                frontier_phi_55_56_ladder_5 = _2667;
            }
            else
            {
                frontier_phi_55_56_ladder = _2561;
                frontier_phi_55_56_ladder_1 = _2563;
                frontier_phi_55_56_ladder_2 = _2559;
                frontier_phi_55_56_ladder_3 = _2557;
                frontier_phi_55_56_ladder_4 = _2555;
                frontier_phi_55_56_ladder_5 = _2553;
            }
            _2666 = frontier_phi_55_56_ladder_5;
            _2668 = frontier_phi_55_56_ladder_4;
            _2670 = frontier_phi_55_56_ladder_3;
            _2672 = frontier_phi_55_56_ladder_2;
            _2674 = frontier_phi_55_56_ladder;
            _2676 = frontier_phi_55_56_ladder_1;
        }
        float _2681 = isnan(1.0) ? _708 : (isnan(_708) ? 1.0 : min(_708, 1.0));
        _2465 = (_2681 * _2672) + _1898;
        _2467 = (_2681 * _2674) + _1900;
        _2469 = (_2681 * _2676) + _1902;
        _2471 = ((_2666 * _692) * _2681) + _2246;
        _2473 = ((_2668 * _694) * _2681) + _2248;
        _2475 = ((_2670 * _695) * _2681) + _2250;
    }
    else
    {
        _2465 = _1898;
        _2467 = _1900;
        _2469 = _1902;
        _2471 = _2246;
        _2473 = _2248;
        _2475 = _2250;
    }
    float _4352 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _4363 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _4374 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    uint _2495 = _230 + 6u;
    float _2503 = _627 / cbSceneParam._m0[86u].x;
    float _2504 = _628 / cbSceneParam._m0[86u].y;
    vec4 _2518 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2503, _2504, (log2((isnan(cbSceneParam._m0[77u].w) ? _561 : (isnan(_561) ? cbSceneParam._m0[77u].w : min(_561, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2520 = _2518.x;
    float _2521 = _2518.y;
    float _2522 = _2518.z;
    float _2523 = _2518.w;
    float _2616;
    float _2618;
    float _2620;
    float _2622;
    if (_561 > cbSceneParam._m0[78u].w)
    {
        float _2578 = isnan(_561) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _561 : min(cbSceneParam._m0[80u].w, _561));
        float _2579 = _2578 / _561;
        float _2590 = _2579 * _612;
        float _2591 = _613 * _2579;
        float _2592 = (-0.0) - _2591;
        float _2594 = _2579 * _614;
        float _2596 = (cbSceneParam._m0[77u].w * _2592) / _2578;
        float _2597 = _2596 + cbSceneParam._m0[79u].w;
        float _2598 = cbSceneParam._m0[79u].w - _2591;
        float _2604 = sqrt(((_2590 * _2590) + (_2591 * _2591)) + (_2594 * _2594));
        float _2607 = (1.0 - (cbSceneParam._m0[77u].w / _2578)) * _2604;
        float _2612 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2614 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2767;
        if (abs((_2592 - _2596) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2767 = ((((_2597 > 0.0) ? exp2(_2612 * _2597) : (2.0 - exp2(_2614 * _2597))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2607;
        }
        else
        {
            float _2727 = 1.0 / cbSceneParam._m0[80u].x;
            float _2728 = isnan(_2598) ? _2597 : (isnan(_2597) ? _2598 : max(_2597, _2598));
            float _2729 = isnan(_2598) ? _2597 : (isnan(_2597) ? _2598 : min(_2597, _2598));
            float _2738 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : min(_2728, 0.0));
            float _2739 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : min(_2729, 0.0));
            _2767 = ((abs(_2604 / _2592) * cbSceneParam._m0[80u].y) * ((((_2738 - _2739) * 2.0) - ((exp2(_2612 * (isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0)))) - exp2(_2612 * (isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0))))) * _2727)) - ((exp2(_2614 * _2738) - exp2(_2614 * _2739)) * _2727))) + (_2607 * cbSceneParam._m0[80u].z);
        }
        vec4 _2769 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2503, _2504, 1.0), 0.0);
        float _2778 = exp2((_2767 * (-1.44269502162933349609375)) * (1.0 - _2769.w));
        float _2779 = log2(_2778);
        float _2795 = log2(_2523);
        _2616 = (exp2(_2795 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2779 * cbSceneParam._m0[78u].x)) * _2769.x) / cbSceneParam._m0[78u].x)) + _2520;
        _2618 = (exp2(_2795 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2779 * cbSceneParam._m0[78u].y)) * _2769.y) / cbSceneParam._m0[78u].y)) + _2521;
        _2620 = (exp2(_2795 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2779 * cbSceneParam._m0[78u].z)) * _2769.z) / cbSceneParam._m0[78u].z)) + _2522;
        _2622 = _2778 * _2523;
    }
    else
    {
        _2616 = _2520;
        _2618 = _2521;
        _2620 = _2522;
        _2622 = _2523;
    }
    float _2634 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2635 = _2634 == 3.0;
    float _2636 = log2(_2622);
    float _2643 = exp2(_2636 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (_2465 + ((isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0))) * _708))) + ((_2471 + ((isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))) * _1516)) * cbPerFrame._m0[3u].x));
    float _2644 = exp2(_2636 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (_2467 + ((isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0))) * _708))) + ((_2473 + ((isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))) * _1516)) * cbPerFrame._m0[3u].x));
    float _2645 = exp2(_2636 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_2469 + ((isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))) * _708))) + ((_2475 + ((isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))) * _1516)) * cbPerFrame._m0[3u].x));
    float _2654 = (_2634 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2654 * (_2635 ? _2643 : (_2643 + (cbSceneParam._m0[72u].w * _2616)));
    SV_Target.y = _2654 * (_2635 ? _2644 : (_2644 + (cbSceneParam._m0[72u].w * _2618)));
    SV_Target.z = _2654 * (_2635 ? _2645 : (_2645 + (cbSceneParam._m0[72u].w * _2620)));
    SV_Target.w = cbInstanceData._m0[_2495].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2495].w;
}


