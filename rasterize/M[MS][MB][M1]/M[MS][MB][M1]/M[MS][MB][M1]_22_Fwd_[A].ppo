#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1082;
float _3465;
float _3466;
float _3467;
float _3468;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _209 = _208 * _200;
    float _210 = _208 * _201;
    float _211 = _208 * _202;
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _223 = _222 * TANGENT.x;
    float _224 = _222 * TANGENT.y;
    float _225 = _222 * TANGENT.z;
    uint _228 = uint(roundEven(NORMAL.w)) * 13u;
    uint _234 = _228 + 1u;
    uint _238 = _228 + 2u;
    float _247 = sqrt(((cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x) + (cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x)) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x));
    float _248 = _247 * TEXCOORD.z;
    float _249 = _247 * TEXCOORD.w;
    vec4 _268 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _274 = _268.x * cbMtdParam._m0[9u].x;
    float _275 = _268.y * cbMtdParam._m0[9u].y;
    float _276 = _268.z * cbMtdParam._m0[9u].z;
    vec4 _294 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _248) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _249) + cbTextureTilingScale._m0[20u].w));
    vec4 _320 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _324 = _320.z;
    float _328 = (_320.x * 2.0) + (-1.0);
    float _329 = (_320.y * 2.0) + (-1.0);
    float _330 = dot(vec2(_328, _329), vec2(_328, _329));
    float _3477 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _336 = sqrt(1.0 - (isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0))));
    float _341 = _328 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_294.x * 2.0) + (-1.0)));
    float _342 = _329 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_294.y * 2.0) + (-1.0)));
    float _345 = fma(_336, _216, fma(_342, _223, _341 * _209));
    float _348 = fma(_336, _217, fma(_342, _224, _341 * _210));
    float _351 = fma(_336, _218, fma(_342, _225, _341 * _211));
    float _355 = inversesqrt(dot(vec3(_345, _348, _351), vec3(_345, _348, _351)));
    vec4 _391 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _248) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _249) + cbTextureTilingScale._m0[11u].w));
    float _393 = _391.x;
    float _394 = 1.0 - _393;
    float _403 = (cbMtdParam._m0[19u].x + dot(vec4(_355 * _345, _355 * _348, _355 * _351, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_393 - _394) * cbMtdParam._m0[24u].z) + _394) * cbMtdParam._m0[21u].z);
    float _3488 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _404 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
    float _411 = (_404 * (cbMtdParam._m0[17u].x - _274)) + _274;
    float _412 = (_404 * (cbMtdParam._m0[17u].y - _275)) + _275;
    float _413 = (_404 * (cbMtdParam._m0[17u].z - _276)) + _276;
    vec4 _426 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _428 = _426.x;
    float _430 = _428 - (_428 * _404);
    float _435 = (((_294.z - _324) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _324;
    vec4 _448 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _248) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _249) + cbTextureTilingScale._m0[15u].w));
    float _455 = (_448.x * 2.0) + (-1.0);
    float _456 = (_448.y * 2.0) + (-1.0);
    float _457 = dot(vec2(_455, _456), vec2(_455, _456));
    float _3499 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _465 = ((_448.z - _435) * _404) + _435;
    float _475 = ((sqrt(1.0 - (isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0)))) - _336) * _404) + _336;
    float _478 = (((_455 - _341) * _404) + _341) + (cbMtdParam._m0[21u].x * _341);
    float _479 = (((_456 - _342) * _404) + _342) + (cbMtdParam._m0[21u].x * _342);
    float _484 = cbMtdParam._m0[22u].x + _320.w;
    float _487 = fma(_475, _216, fma(_479, _223, _478 * _209));
    float _490 = fma(_475, _217, fma(_479, _224, _478 * _210));
    float _493 = fma(_475, _218, fma(_479, _225, _478 * _211));
    float _497 = inversesqrt(dot(vec3(_487, _490, _493), vec3(_487, _490, _493)));
    float _498 = _497 * _487;
    float _499 = _497 * _490;
    float _500 = _497 * _493;
    float _3510 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _501 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
    float _3521 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _3532 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _3543 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _3554 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _3565 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _506 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
    float _520 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _561 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _571 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _561);
    float _572 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _561);
    float _573 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _561);
    float _577 = inversesqrt(dot(vec3(_571, _572, _573), vec3(_571, _572, _573)));
    float _578 = _571 * _577;
    float _579 = _572 * _577;
    float _580 = _573 * _577;
    vec4 _585 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _587 = _585.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _762 = sqrt(((_571 * _571) + (_572 * _572)) + (_573 * _573));
        float _768 = (cbMatDynParam._m0[5u].x * _762) + cbMatDynParam._m0[5u].y;
        float _3576 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _769 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _773 = (cbMatDynParam._m0[5u].z * _762) + cbMatDynParam._m0[5u].w;
        float _3587 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0))) - _769)) + _769) < ((_587 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _599 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _600 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _620 = fma(_500, cbSceneParam._m0[5u].z, fma(_499, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _498));
    float _623 = fma(_500, cbSceneParam._m0[6u].z, fma(_499, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _498));
    float _626 = fma(_500, cbSceneParam._m0[7u].z, fma(_499, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _498));
    uint _639 = _228 + 9u;
    uint _640 = _639 + uint(cbMatDynParam._m0[0u].w);
    float _646 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0)))) * cbInstanceData._m0[_640].x;
    float _647 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0)))) * cbInstanceData._m0[_640].y;
    float _648 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0)))) * cbInstanceData._m0[_640].z;
    float _3598 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _649 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
    float _3609 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _650 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
    float _3620 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _651 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
    float _652 = 1.0 - _506;
    float _653 = _649 * _652;
    float _654 = _650 * _652;
    float _655 = _651 * _652;
    float _660 = (_649 + (-0.039999999105930328369140625)) * _506;
    float _661 = (_650 + (-0.039999999105930328369140625)) * _506;
    float _662 = (_651 + (-0.039999999105930328369140625)) * _506;
    float _663 = _660 + 0.039999999105930328369140625;
    float _665 = _661 + 0.039999999105930328369140625;
    float _666 = _662 + 0.039999999105930328369140625;
    vec4 _675 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _599, cbSceneParam._m0[86u].y * _600));
    float _679 = ((isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0))) * TEXCOORD_5.w) * _675.x;
    float _680 = dot(vec3(_498, _499, _500), vec3(_578, _579, _580));
    float _683 = _680 * 2.0;
    float _687 = (_683 * _498) - _578;
    float _688 = (_683 * _499) - _579;
    float _689 = (_683 * _500) - _580;
    float _693 = abs(dot(vec3(_578, _579, _580), vec3(_498, _499, _500)));
    float _3631 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _695 = sqrt(_501);
    float _708 = exp2((_695 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_695 * 3.0));
    float _714 = (1.0 - _708) * ((_695 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _715 = _708 * _695;
    float _743 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _747 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _751 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1081;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _806 = fma(_751, cbModelParam._m0[26u].z, fma(_747, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _743));
        float _810 = fma(_751, cbModelParam._m0[27u].z, fma(_747, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _743));
        float _814 = fma(_751, cbModelParam._m0[28u].z, fma(_747, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _743));
        float _839 = _743 + _498;
        float _840 = _747 + _499;
        float _841 = _751 + _500;
        float _851 = fma(_841, cbModelParam._m0[26u].z, fma(_840, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _839)) - _806;
        float _852 = fma(_841, cbModelParam._m0[27u].z, fma(_840, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _839)) - _810;
        float _853 = fma(_841, cbModelParam._m0[28u].z, fma(_840, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _839)) - _814;
        float _857 = inversesqrt(dot(vec3(_851, _852, _853), vec3(_851, _852, _853)));
        float _870 = ((_857 * _851) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_806 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _871 = ((_857 * _852) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_810 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _872 = ((_857 * _853) / cbModelParam._m0[34u].z) + ((((((_814 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _875 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        vec4 _882 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        vec4 _896 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        float _909 = exp2((_875.w + (-0.5)) * 20.0) * 2.0;
        float _910 = _909 * (_875.x + (-0.5));
        float _911 = _909 * (_875.y + (-0.5));
        float _912 = _909 * (_875.z + (-0.5));
        float _919 = exp2((_882.w + (-0.5)) * 20.0) * 2.0;
        float _920 = _919 * (_882.x + (-0.5));
        float _921 = _919 * (_882.y + (-0.5));
        float _922 = _919 * (_882.z + (-0.5));
        float _929 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_889.x + (-0.5));
        float _931 = _929 * (_889.y + (-0.5));
        float _932 = _929 * (_889.z + (-0.5));
        float _939 = exp2((_896.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_896.x + (-0.5));
        float _941 = _939 * (_896.y + (-0.5));
        float _942 = _939 * (_896.z + (-0.5));
        float _943 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _944 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _945 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _946 = _910 * 0.5;
        float _947 = _920 * 0.5;
        float _948 = _930 * 0.5;
        float _949 = dot(vec3(_946, _947, _948), vec3(_946, _947, _948));
        float _954 = (_949 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_949);
        float _963 = (dot(vec3(_498, _499, _500), vec3(_954 * _946, _954 * _947, _954 * _948)) + 1.0) * 0.5;
        float _3657 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _973 = sqrt(((_947 * _947) + (_946 * _946)) + (_948 * _948)) / (_943 + 9.9999997473787516355514526367188e-06);
        float _3668 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _975 = _974 * 2.0;
        float _979 = (1.0 - _974) / (_974 + 1.0);
        float _3679 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _989 = ((((1.0 - _980) * (_975 + 2.0)) * exp2(log2(isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0))) * (_975 + 1.0))) + _980) * _943;
        float _990 = _911 * 0.5;
        float _991 = _921 * 0.5;
        float _992 = _931 * 0.5;
        float _993 = dot(vec3(_990, _991, _992), vec3(_990, _991, _992));
        float _998 = (_993 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_993);
        float _1006 = (dot(vec3(_498, _499, _500), vec3(_998 * _990, _998 * _991, _998 * _992)) + 1.0) * 0.5;
        float _3690 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1015 = sqrt(((_991 * _991) + (_990 * _990)) + (_992 * _992)) / (_944 + 9.9999997473787516355514526367188e-06);
        float _3701 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _1017 = _1016 * 2.0;
        float _1021 = (1.0 - _1016) / (_1016 + 1.0);
        float _3712 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1031 = ((((1.0 - _1022) * (_1017 + 2.0)) * exp2(log2(isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))) * (_1017 + 1.0))) + _1022) * _944;
        float _1032 = _912 * 0.5;
        float _1033 = _922 * 0.5;
        float _1034 = _932 * 0.5;
        float _1035 = dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034));
        float _1040 = (_1035 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1035);
        float _1048 = (dot(vec3(_498, _499, _500), vec3(_1040 * _1032, _1040 * _1033, _1040 * _1034)) + 1.0) * 0.5;
        float _3723 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1057 = sqrt(((_1033 * _1033) + (_1032 * _1032)) + (_1034 * _1034)) / (_945 + 9.9999997473787516355514526367188e-06);
        float _3734 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1059 = _1058 * 2.0;
        float _1063 = (1.0 - _1058) / (_1058 + 1.0);
        float _3745 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1073 = ((((1.0 - _1064) * (_1059 + 2.0)) * exp2(log2(isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * (_1059 + 1.0))) + _1064) * _945;
        _1081 = _912;
        _1083 = _911;
        _1084 = _910;
        _1085 = _922;
        _1086 = _921;
        _1087 = _920;
        _1088 = _932;
        _1089 = _931;
        _1090 = _930;
        _1091 = _945;
        _1092 = _944;
        _1093 = _943;
        _1094 = cbModelParam._m0[36u].z * (isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0)));
        _1095 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0)));
        _1096 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0)));
    }
    else
    {
        _1081 = _1082;
        _1083 = _1082;
        _1084 = _1082;
        _1085 = _1082;
        _1086 = _1082;
        _1087 = _1082;
        _1088 = _1082;
        _1089 = _1082;
        _1090 = _1082;
        _1091 = _1082;
        _1092 = _1082;
        _1093 = _1082;
        _1094 = 0.0;
        _1095 = 0.0;
        _1096 = 0.0;
    }
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1124 = fma(_751, cbModelParam._m0[30u].z, fma(_747, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _743));
        float _1128 = fma(_751, cbModelParam._m0[31u].z, fma(_747, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _743));
        float _1132 = fma(_751, cbModelParam._m0[32u].z, fma(_747, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _743));
        float _1155 = _743 + _498;
        float _1156 = _747 + _499;
        float _1157 = _751 + _500;
        float _1167 = fma(_1157, cbModelParam._m0[30u].z, fma(_1156, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1155)) - _1124;
        float _1168 = fma(_1157, cbModelParam._m0[31u].z, fma(_1156, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1155)) - _1128;
        float _1169 = fma(_1157, cbModelParam._m0[32u].z, fma(_1156, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1155)) - _1132;
        float _1173 = inversesqrt(dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169)));
        float _1186 = ((_1173 * _1167) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1124 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1187 = ((_1173 * _1168) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1128 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1188 = ((_1173 * _1169) / cbModelParam._m0[35u].z) + ((((((_1132 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        float _1223 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1190.x + (-0.5));
        float _1225 = _1223 * (_1190.y + (-0.5));
        float _1226 = _1223 * (_1190.z + (-0.5));
        float _1233 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1197.x + (-0.5));
        float _1235 = _1233 * (_1197.y + (-0.5));
        float _1236 = _1233 * (_1197.z + (-0.5));
        float _1243 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1204.x + (-0.5));
        float _1245 = _1243 * (_1204.y + (-0.5));
        float _1246 = _1243 * (_1204.z + (-0.5));
        float _1253 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1211.x + (-0.5));
        float _1255 = _1253 * (_1211.y + (-0.5));
        float _1256 = _1253 * (_1211.z + (-0.5));
        float _1257 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1258 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1259 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1260 = _1224 * 0.5;
        float _1261 = _1234 * 0.5;
        float _1262 = _1244 * 0.5;
        float _1263 = dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262));
        float _1268 = (_1263 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1263);
        float _1276 = (dot(vec3(_498, _499, _500), vec3(_1268 * _1260, _1268 * _1261, _1268 * _1262)) + 1.0) * 0.5;
        float _3786 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1285 = sqrt(((_1261 * _1261) + (_1260 * _1260)) + (_1262 * _1262)) / (_1257 + 9.9999997473787516355514526367188e-06);
        float _3797 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1287 = _1286 * 2.0;
        float _1291 = (1.0 - _1286) / (_1286 + 1.0);
        float _3808 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1301 = ((((1.0 - _1292) * (_1287 + 2.0)) * exp2(log2(isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) * (_1287 + 1.0))) + _1292) * _1257;
        float _1302 = _1225 * 0.5;
        float _1303 = _1235 * 0.5;
        float _1304 = _1245 * 0.5;
        float _1305 = dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304));
        float _1310 = (_1305 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1305);
        float _1318 = (dot(vec3(_498, _499, _500), vec3(_1310 * _1302, _1310 * _1303, _1310 * _1304)) + 1.0) * 0.5;
        float _3819 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1327 = sqrt(((_1303 * _1303) + (_1302 * _1302)) + (_1304 * _1304)) / (_1258 + 9.9999997473787516355514526367188e-06);
        float _3830 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1329 = _1328 * 2.0;
        float _1333 = (1.0 - _1328) / (_1328 + 1.0);
        float _3841 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1343 = ((((1.0 - _1334) * (_1329 + 2.0)) * exp2(log2(isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * (_1329 + 1.0))) + _1334) * _1258;
        float _1344 = _1226 * 0.5;
        float _1345 = _1236 * 0.5;
        float _1346 = _1246 * 0.5;
        float _1347 = dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346));
        float _1352 = (_1347 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1347);
        float _1360 = (dot(vec3(_498, _499, _500), vec3(_1352 * _1344, _1352 * _1345, _1352 * _1346)) + 1.0) * 0.5;
        float _3852 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1369 = sqrt(((_1345 * _1345) + (_1344 * _1344)) + (_1346 * _1346)) / (_1259 + 9.9999997473787516355514526367188e-06);
        float _3863 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1371 = _1370 * 2.0;
        float _1375 = (1.0 - _1370) / (_1370 + 1.0);
        float _3874 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1385 = ((((1.0 - _1376) * (_1371 + 2.0)) * exp2(log2(isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * (_1371 + 1.0))) + _1376) * _1259;
        _1393 = _1226;
        _1394 = _1225;
        _1395 = _1224;
        _1396 = _1236;
        _1397 = _1235;
        _1398 = _1234;
        _1399 = _1246;
        _1400 = _1245;
        _1401 = _1244;
        _1402 = _1259;
        _1403 = _1258;
        _1404 = _1257;
        _1405 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)));
        _1406 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)));
        _1407 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)));
    }
    else
    {
        _1393 = _1082;
        _1394 = _1082;
        _1395 = _1082;
        _1396 = _1082;
        _1397 = _1082;
        _1398 = _1082;
        _1399 = _1082;
        _1400 = _1082;
        _1401 = _1082;
        _1402 = _1082;
        _1403 = _1082;
        _1404 = _1082;
        _1405 = 0.0;
        _1406 = 0.0;
        _1407 = 0.0;
    }
    float _1417 = (cbModelParam._m0[1u].x * (_1405 - _1094)) + _1094;
    float _1418 = (cbModelParam._m0[1u].x * (_1406 - _1095)) + _1095;
    float _1419 = (cbModelParam._m0[1u].x * (_1407 - _1096)) + _1096;
    float _1440 = fma(_1419, cbSceneParam._m0[89u].z, fma(_1418, cbSceneParam._m0[89u].y, _1417 * cbSceneParam._m0[89u].x));
    float _1443 = fma(_1419, cbSceneParam._m0[90u].z, fma(_1418, cbSceneParam._m0[90u].y, _1417 * cbSceneParam._m0[90u].x));
    float _1446 = fma(_1419, cbSceneParam._m0[91u].z, fma(_1418, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1417));
    float _1461 = _687 * 0.5;
    float _1462 = _688 * 0.5;
    float _1463 = _689 * 0.5;
    float _1464 = dot(vec4(_1461, _1462, _1463, 1.0), vec4(_1395, _1398, _1401, _1404));
    float _1467 = dot(vec4(_1461, _1462, _1463, 1.0), vec4(_1394, _1397, _1400, _1403));
    float _1470 = dot(vec4(_1461, _1462, _1463, 1.0), vec4(_1393, _1396, _1399, _1402));
    float _1504;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1477 = dot(vec4(_1461, _1462, _1463, 1.0), vec4(_1081, _1085, _1088, _1091));
        float _1481 = dot(vec4(_1461, _1462, _1463, 1.0), vec4(_1083, _1086, _1089, _1092));
        float _1485 = dot(vec4(_1461, _1462, _1463, 1.0), vec4(_1084, _1087, _1090, _1093));
        float _1492 = dot(vec4(cbModelParam._m0[39u]), vec4(_1461, _1462, _1463, 1.0));
        _1504 = dot(vec3(isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0)), isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)), isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1492) ? 0.0 : (isnan(0.0) ? _1492 : max(0.0, _1492))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1504 = 1.0;
    }
    float _1515;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1506 = dot(vec4(cbModelParam._m0[40u]), vec4(_1461, _1462, _1463, 1.0));
        _1515 = dot(vec3(isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)), isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)), isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1506) ? 0.0 : (isnan(0.0) ? _1506 : max(0.0, _1506))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1515 = 1.0;
    }
    float _1519 = (_1515 * cbModelParam._m0[1u].x) + (_1504 * (1.0 - cbModelParam._m0[1u].x));
    float _1529 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _501);
    float _1530 = isnan(_1529) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1529 : min(cbModelParam._m0[25u].z, _1529));
    float _1611;
    float _1613;
    float _1615;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1578 = fma(_751, cbModelParam._m0[13u].z, fma(_747, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _743)) + cbModelParam._m0[13u].w;
        float _1582 = fma(_751, cbModelParam._m0[14u].z, fma(_747, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _743)) + cbModelParam._m0[14u].w;
        float _1586 = fma(_751, cbModelParam._m0[15u].z, fma(_747, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _743)) + cbModelParam._m0[15u].w;
        float _1589 = fma(_689, cbModelParam._m0[13u].z, fma(_688, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _687));
        float _1592 = fma(_689, cbModelParam._m0[14u].z, fma(_688, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _687));
        float _1595 = fma(_689, cbModelParam._m0[15u].z, fma(_688, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _687));
        float _1623;
        if (_1589 > 0.0)
        {
            _1623 = abs((1.0 - _1578) / _1589);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1589 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1578 + 1.0) / _1589);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1623 = frontier_phi_17_15_ladder;
        }
        float _1827;
        if (_1592 > 0.0)
        {
            _1827 = abs((1.0 - _1582) / _1592);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1592 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1582 + 1.0) / _1592);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1827 = frontier_phi_26_22_ladder;
        }
        float _2081;
        if (_1595 > 0.0)
        {
            _2081 = abs((1.0 - _1586) / _1595);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1595 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1586 + 1.0) / _1595);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2081 = frontier_phi_38_33_ladder;
        }
        float _2083 = isnan(_1827) ? _1623 : (isnan(_1623) ? _1827 : min(_1623, _1827));
        float _2084 = isnan(_2081) ? _2083 : (isnan(_2083) ? _2081 : min(_2083, _2081));
        float _2088 = (_2084 * _1589) + _1578;
        float _2089 = (_2084 * _1592) + _1582;
        float _2090 = (_2084 * _1595) + _1586;
        float _2091 = _2084 * 9.9999997473787516355514526367188e-05;
        float _2093 = (-1.0) - _2091;
        float _2095 = _2091 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2090 > _2095) || ((_2090 < _2093) || ((_2089 > _2095) || ((_2089 < _2093) || ((_2088 < _2093) || (_2088 > _2095))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2218 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2090, cbModelParam._m0[9u].z, fma(_2089, cbModelParam._m0[9u].y, _2088 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2090, cbModelParam._m0[10u].z, fma(_2089, cbModelParam._m0[10u].y, _2088 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2090, cbModelParam._m0[11u].z, fma(_2089, cbModelParam._m0[11u].y, _2088 * cbModelParam._m0[11u].x))), _1530);
            frontier_phi_16_38_ladder = _2218.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2218.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2218.x * cbModelParam._m0[1u].y;
        }
        _1611 = frontier_phi_16_38_ladder_2;
        _1613 = frontier_phi_16_38_ladder_1;
        _1615 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1599 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_687, _688, _689), _1530);
        _1611 = _1599.x * cbModelParam._m0[1u].y;
        _1613 = _1599.y * cbModelParam._m0[1u].y;
        _1615 = _1599.z * cbModelParam._m0[1u].y;
    }
    float _1619 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _501);
    float _1620 = isnan(_1619) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1619 : min(cbModelParam._m0[25u].w, _1619));
    float _1710;
    float _1712;
    float _1714;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1674 = fma(_751, cbModelParam._m0[21u].z, fma(_747, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _743)) + cbModelParam._m0[21u].w;
        float _1678 = fma(_751, cbModelParam._m0[22u].z, fma(_747, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _743)) + cbModelParam._m0[22u].w;
        float _1682 = fma(_751, cbModelParam._m0[23u].z, fma(_747, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _743)) + cbModelParam._m0[23u].w;
        float _1685 = fma(_689, cbModelParam._m0[21u].z, fma(_688, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _687));
        float _1688 = fma(_689, cbModelParam._m0[22u].z, fma(_688, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _687));
        float _1691 = fma(_689, cbModelParam._m0[23u].z, fma(_688, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _687));
        float _1832;
        if (_1685 > 0.0)
        {
            _1832 = abs((1.0 - _1674) / _1685);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1685 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1674 + 1.0) / _1685);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1832 = frontier_phi_28_24_ladder;
        }
        float _2108;
        if (_1688 > 0.0)
        {
            _2108 = abs((1.0 - _1678) / _1688);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1688 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1678 + 1.0) / _1688);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2108 = frontier_phi_40_35_ladder;
        }
        float _2321;
        if (_1691 > 0.0)
        {
            _2321 = abs((1.0 - _1682) / _1691);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1691 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1682 + 1.0) / _1691);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2321 = frontier_phi_49_46_ladder;
        }
        float _2323 = isnan(_2108) ? _1832 : (isnan(_1832) ? _2108 : min(_1832, _2108));
        float _2324 = isnan(_2321) ? _2323 : (isnan(_2323) ? _2321 : min(_2323, _2321));
        float _2328 = (_2324 * _1685) + _1674;
        float _2329 = (_2324 * _1688) + _1678;
        float _2330 = (_2324 * _1691) + _1682;
        float _2331 = _2324 * 9.9999997473787516355514526367188e-05;
        float _2332 = (-1.0) - _2331;
        float _2334 = _2331 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2330 > _2334) || ((_2330 < _2332) || ((_2329 > _2334) || ((_2329 < _2332) || ((_2328 < _2332) || (_2328 > _2334))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2529 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2330, cbModelParam._m0[17u].z, fma(_2329, cbModelParam._m0[17u].y, _2328 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2330, cbModelParam._m0[18u].z, fma(_2329, cbModelParam._m0[18u].y, _2328 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2330, cbModelParam._m0[19u].z, fma(_2329, cbModelParam._m0[19u].y, _2328 * cbModelParam._m0[19u].x))), _1620);
            frontier_phi_25_49_ladder = _2529.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2529.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2529.x * cbModelParam._m0[1u].z;
        }
        _1710 = frontier_phi_25_49_ladder_2;
        _1712 = frontier_phi_25_49_ladder_1;
        _1714 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1694 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_687, _688, _689), _1620);
        _1710 = _1694.x * cbModelParam._m0[1u].z;
        _1712 = _1694.y * cbModelParam._m0[1u].z;
        _1714 = _1694.z * cbModelParam._m0[1u].z;
    }
    float _1727 = (((_714 * _663) + _715) * _679) * ((cbModelParam._m0[1u].w * (_1710 - _1611)) + _1611);
    float _1729 = (((_714 * _665) + _715) * _679) * ((cbModelParam._m0[1u].w * (_1712 - _1613)) + _1613);
    float _1731 = (((_714 * _666) + _715) * _679) * ((cbModelParam._m0[1u].w * (_1714 - _1615)) + _1615);
    float _1734 = fma(_1731, cbSceneParam._m0[89u].z, fma(_1729, cbSceneParam._m0[89u].y, _1727 * cbSceneParam._m0[89u].x));
    float _1737 = fma(_1731, cbSceneParam._m0[90u].z, fma(_1729, cbSceneParam._m0[90u].y, _1727 * cbSceneParam._m0[90u].x));
    float _1740 = fma(_1731, cbSceneParam._m0[91u].z, fma(_1729, cbSceneParam._m0[91u].y, _1727 * cbSceneParam._m0[91u].x));
    uvec4 _1750 = floatBitsToUint(cbInstanceData._m0[_228 + 5u]);
    uint _1752 = _1750.x * 14u;
    uint _1753 = _1752 + 13u;
    float _1760 = _679 + (-1.0);
    float _1765 = (cbLight._m0[_1753].x * _1760) + 1.0;
    float _1766 = (cbLight._m0[_1753].y * _1760) + 1.0;
    float _1767 = (cbLight._m0[_1753].z * _1760) + 1.0;
    float _1768 = (cbLight._m0[_1753].w * _1760) + 1.0;
    uint _1769 = _1752 + 5u;
    float _1775 = isnan(1.0) ? _1766 : (isnan(_1766) ? 1.0 : min(_1766, 1.0));
    uint _1779 = _1752 + 4u;
    float _1786 = isnan(1.0) ? _1765 : (isnan(_1765) ? 1.0 : min(_1765, 1.0));
    uint _1790 = _1752 | 1u;
    float _1801 = dot(vec3(cbLight._m0[_1752].xyz), vec3(_498, _499, _500));
    float _1804 = dot(vec3(cbLight._m0[_1790].xyz), vec3(_498, _499, _500));
    float _4010 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
    float _4021 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1809 = (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * 0.3183098733425140380859375;
    float _1811 = (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * 0.3183098733425140380859375;
    float _1818 = ((cbLight._m0[_1769].x * _1775) * _1811) + ((cbLight._m0[_1779].x * _1786) * _1809);
    float _1819 = ((_1775 * cbLight._m0[_1769].y) * _1811) + ((_1786 * cbLight._m0[_1779].y) * _1809);
    float _1820 = ((_1775 * cbLight._m0[_1769].z) * _1811) + ((_1786 * cbLight._m0[_1779].z) * _1809);
    uvec4 _1824 = floatBitsToUint(cbLight._m0[_1752 + 12u]);
    bool _1826 = _1824.x == 0u;
    float _1837;
    float _1839;
    float _1841;
    if (_1826)
    {
        _1837 = _1818;
        _1839 = _1819;
        _1841 = _1820;
    }
    else
    {
        uint _1845 = _1752 + 6u;
        float _1861 = (dot(vec3(cbLight._m0[_1752 + 2u].xyz), vec3(_498, _499, _500)) * 0.5) + 0.5;
        float _1862 = _1861 * _1861;
        float _4032 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
        float _1863 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1864 = isnan(1.0) ? _1767 : (isnan(_1767) ? 1.0 : min(_1767, 1.0));
        _1837 = (((cbLight._m0[_1845].x * 0.3183098733425140380859375) * _1863) * _1864) + _1818;
        _1839 = (((cbLight._m0[_1845].y * 0.3183098733425140380859375) * _1863) * _1864) + _1819;
        _1841 = (((cbLight._m0[_1845].z * 0.3183098733425140380859375) * _1863) * _1864) + _1820;
    }
    bool _1844 = _1824.y == 0u;
    float _1882;
    float _1884;
    float _1886;
    if (_1844)
    {
        _1882 = _1837;
        _1884 = _1839;
        _1886 = _1841;
    }
    else
    {
        uint _2052 = _1752 + 7u;
        float _2068 = (dot(vec3(cbLight._m0[_1752 + 3u].xyz), vec3(_498, _499, _500)) * 0.5) + 0.5;
        float _2069 = _2068 * _2068;
        float _4048 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
        float _2070 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _2071 = isnan(1.0) ? _1768 : (isnan(_1768) ? 1.0 : min(_1768, 1.0));
        _1882 = (((cbLight._m0[_2052].x * 0.3183098733425140380859375) * _2070) * _2071) + _1837;
        _1884 = (((cbLight._m0[_2052].y * 0.3183098733425140380859375) * _2070) * _2071) + _1839;
        _1886 = (((cbLight._m0[_2052].z * 0.3183098733425140380859375) * _2070) * _2071) + _1841;
    }
    uint _1889 = _1752 + 8u;
    float _1902 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1752].w)) * _501) * 0.949999988079071044921875);
    float _1903 = _1902 * _1902;
    float _1904 = cbLight._m0[_1752].x + _578;
    float _1905 = cbLight._m0[_1752].y + _579;
    float _1906 = cbLight._m0[_1752].z + _580;
    float _1910 = inversesqrt(dot(vec3(_1904, _1905, _1906), vec3(_1904, _1905, _1906)));
    float _1911 = _1910 * _1904;
    float _1912 = _1910 * _1905;
    float _1913 = _1910 * _1906;
    float _1914 = dot(vec3(_498, _499, _500), vec3(cbLight._m0[_1752].xyz));
    float _4064 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _1917 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _4075 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _1918 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _1919 = dot(vec3(_498, _499, _500), vec3(_1911, _1912, _1913));
    float _4086 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
    float _1922 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _1923 = dot(vec3(cbLight._m0[_1752].xyz), vec3(_1911, _1912, _1913));
    float _4097 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _1927 = _1903 * _1903;
    float _1931 = ((_1922 * _1922) * (_1927 + (-1.0))) + 1.0;
    float _1939 = exp2(log2(1.0 - (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0)))) * 5.0);
    float _1940 = 0.959999978542327880859375 - _660;
    float _1942 = 0.959999978542327880859375 - _661;
    float _1943 = 0.959999978542327880859375 - _662;
    float _1950 = 1.0 - _1903;
    float _1961 = (0.5 / (((_1918 * ((_1917 * _1950) + _1903)) + 9.9999999392252902907785028219223e-09) + (((_1918 * _1950) + _1903) * _1917))) * _1917;
    float _4108 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1963 = (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * (_1927 / ((_1931 * _1931) * 3.141590118408203125));
    uint _1974 = _1752 + 9u;
    float _1985 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1790].w)) * _501) * 0.949999988079071044921875);
    float _1986 = _1985 * _1985;
    float _1987 = cbLight._m0[_1790].x + _578;
    float _1988 = cbLight._m0[_1790].y + _579;
    float _1989 = cbLight._m0[_1790].z + _580;
    float _1993 = inversesqrt(dot(vec3(_1987, _1988, _1989), vec3(_1987, _1988, _1989)));
    float _1994 = _1993 * _1987;
    float _1995 = _1993 * _1988;
    float _1996 = _1993 * _1989;
    float _1997 = dot(vec3(_498, _499, _500), vec3(cbLight._m0[_1790].xyz));
    float _4119 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
    float _2000 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
    float _2001 = dot(vec3(_498, _499, _500), vec3(_1994, _1995, _1996));
    float _4130 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _2004 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _2005 = dot(vec3(cbLight._m0[_1790].xyz), vec3(_1994, _1995, _1996));
    float _4141 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _2009 = _1986 * _1986;
    float _2013 = ((_2004 * _2004) * (_2009 + (-1.0))) + 1.0;
    float _2020 = exp2(log2(1.0 - (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0)))) * 5.0);
    float _2027 = 1.0 - _1986;
    float _2037 = (0.5 / (((_1918 * ((_2000 * _2027) + _1986)) + 9.9999999392252902907785028219223e-09) + (((_1918 * _2027) + _1986) * _2000))) * _2000;
    float _4152 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2039 = (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_2009 / ((_2013 * _2013) * 3.141590118408203125));
    float _2049 = (((((_2020 * _1940) + _663) * cbLight._m0[_1974].x) * _2039) * _1775) + (((((_1939 * _1940) + _663) * cbLight._m0[_1889].x) * _1963) * _1786);
    float _2050 = (((((_2020 * _1942) + _665) * cbLight._m0[_1974].y) * _2039) * _1775) + (((((_1939 * _1942) + _665) * cbLight._m0[_1889].y) * _1963) * _1786);
    float _2051 = (((((_2020 * _1943) + _666) * cbLight._m0[_1974].z) * _2039) * _1775) + (((((_1939 * _1943) + _666) * cbLight._m0[_1889].z) * _1963) * _1786);
    float _2113;
    float _2115;
    float _2117;
    if (_1826)
    {
        _2113 = _2049;
        _2115 = _2050;
        _2117 = _2051;
    }
    else
    {
        uint _2119 = _1752 + 2u;
        uint _2123 = _1752 + 10u;
        float _2137 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2119].w)) * _501) * 0.949999988079071044921875);
        float _2138 = _2137 * _2137;
        float _2139 = cbLight._m0[_2119].x + _578;
        float _2140 = cbLight._m0[_2119].y + _579;
        float _2141 = cbLight._m0[_2119].z + _580;
        float _2145 = inversesqrt(dot(vec3(_2139, _2140, _2141), vec3(_2139, _2140, _2141)));
        float _2146 = _2145 * _2139;
        float _2147 = _2145 * _2140;
        float _2148 = _2145 * _2141;
        float _2149 = dot(vec3(_498, _499, _500), vec3(cbLight._m0[_2119].xyz));
        float _4163 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
        float _2152 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _2153 = dot(vec3(_498, _499, _500), vec3(_2146, _2147, _2148));
        float _4174 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2156 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _2157 = dot(vec3(cbLight._m0[_2119].xyz), vec3(_2146, _2147, _2148));
        float _4185 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
        float _2161 = _2138 * _2138;
        float _2165 = ((_2156 * _2156) * (_2161 + (-1.0))) + 1.0;
        float _2172 = exp2(log2(1.0 - (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0)))) * 5.0);
        float _2179 = 1.0 - _2138;
        float _2189 = (0.5 / (((_1918 * ((_2152 * _2179) + _2138)) + 9.9999999392252902907785028219223e-09) + (((_1918 * _2179) + _2138) * _2152))) * _2152;
        float _4196 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        float _2191 = (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (_2161 / ((_2165 * _2165) * 3.141590118408203125));
        float _2192 = isnan(1.0) ? _1767 : (isnan(_1767) ? 1.0 : min(_1767, 1.0));
        _2113 = (((((_2172 * _1940) + _663) * cbLight._m0[_2123].x) * _2191) * _2192) + _2049;
        _2115 = (((((_2172 * _1942) + _665) * cbLight._m0[_2123].y) * _2191) * _2192) + _2050;
        _2117 = (((((_2172 * _1943) + _666) * cbLight._m0[_2123].z) * _2191) * _2192) + _2051;
    }
    float _2227;
    float _2229;
    float _2231;
    if (_1844)
    {
        _2227 = _2113;
        _2229 = _2115;
        _2231 = _2117;
    }
    else
    {
        uint _2238 = _1752 + 3u;
        uint _2242 = _1752 + 11u;
        float _2256 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2238].w)) * _501) * 0.949999988079071044921875);
        float _2257 = _2256 * _2256;
        float _2258 = cbLight._m0[_2238].x + _578;
        float _2259 = cbLight._m0[_2238].y + _579;
        float _2260 = cbLight._m0[_2238].z + _580;
        float _2264 = inversesqrt(dot(vec3(_2258, _2259, _2260), vec3(_2258, _2259, _2260)));
        float _2265 = _2264 * _2258;
        float _2266 = _2264 * _2259;
        float _2267 = _2264 * _2260;
        float _2268 = dot(vec3(_498, _499, _500), vec3(cbLight._m0[_2238].xyz));
        float _4212 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
        float _2271 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _2272 = dot(vec3(_498, _499, _500), vec3(_2265, _2266, _2267));
        float _4223 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2275 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _2276 = dot(vec3(cbLight._m0[_2238].xyz), vec3(_2265, _2266, _2267));
        float _4234 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2280 = _2257 * _2257;
        float _2284 = ((_2275 * _2275) * (_2280 + (-1.0))) + 1.0;
        float _2291 = exp2(log2(1.0 - (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0)))) * 5.0);
        float _2298 = 1.0 - _2257;
        float _2308 = (0.5 / (((_1918 * ((_2271 * _2298) + _2257)) + 9.9999999392252902907785028219223e-09) + (((_1918 * _2298) + _2257) * _2271))) * _2271;
        float _4245 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2310 = (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * (_2280 / ((_2284 * _2284) * 3.141590118408203125));
        float _2311 = isnan(1.0) ? _1768 : (isnan(_1768) ? 1.0 : min(_1768, 1.0));
        _2227 = (((((_2291 * _1940) + _663) * cbLight._m0[_2242].x) * _2310) * _2311) + _2113;
        _2229 = (((((_2291 * _1942) + _665) * cbLight._m0[_2242].y) * _2310) * _2311) + _2115;
        _2231 = (((((_2291 * _1943) + _666) * cbLight._m0[_2242].z) * _2310) * _2311) + _2117;
    }
    float _2446;
    float _2448;
    float _2450;
    float _2452;
    float _2454;
    float _2456;
    if (_1750.y == 0u)
    {
        float _2386 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2387 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2386;
        float _2388 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2386;
        float _2389 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2386;
        uvec4 _2401 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2402 = _2401.x;
        uint _2413 = uint((float(_2401.y) * floor(float(uint(cbSceneParam._m0[85u].y * _600) / _2402))) + floor(float(uint(cbSceneParam._m0[85u].x * _599) / _2402)));
        float _2423 = (log2(_2389 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2424 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        uint _2427 = uint(isnan(14.0) ? _2424 : (isnan(_2424) ? 14.0 : min(_2424, 14.0)));
        uvec4 _2432 = texelFetch(g_lightClusterGridBuffer, int(((_2427 << 2u) + (_2413 << 6u)) >> 2u));
        uint _2433 = _2432.x;
        uint _2434 = _2401.z;
        float _2534;
        float _2536;
        float _2538;
        float _2540;
        float _2542;
        float _2544;
        if (((((1u << ((_2434 >> 4u) & 15u)) + 4294967295u) & _2433) == 0u) || ((_2434 & 240u) == 0u))
        {
            _2534 = 0.0;
            _2536 = 0.0;
            _2538 = 0.0;
            _2540 = 0.0;
            _2542 = 0.0;
            _2544 = 0.0;
        }
        else
        {
            float _2535;
            float _2537;
            float _2539;
            float _2541;
            float _2543;
            float _2545;
            float _2687 = 0.0;
            float _2688 = 0.0;
            float _2689 = 0.0;
            float _2690 = 0.0;
            float _2691 = 0.0;
            float _2692 = 0.0;
            uint _2693 = 0u;
            uint _2702;
            bool _2703;
            for (;;)
            {
                _2702 = texelFetch(g_lightClassification, int((((_2427 << 5u) + (_2413 << 9u)) + (_2693 << 2u)) >> 2u)).x;
                _2703 = _2702 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2703)
                {
                    frontier_phi_66_pred = _2687;
                    frontier_phi_66_pred_1 = _2692;
                    frontier_phi_66_pred_2 = _2691;
                    frontier_phi_66_pred_3 = _2690;
                    frontier_phi_66_pred_4 = _2689;
                    frontier_phi_66_pred_5 = _2688;
                }
                else
                {
                    float _2832;
                    float _2833;
                    float _2834;
                    float _2835;
                    float _2836;
                    float _2837;
                    uint _2838;
                    _2832 = _2687;
                    _2833 = _2688;
                    _2834 = _2689;
                    _2835 = _2690;
                    _2836 = _2691;
                    _2837 = _2692;
                    _2838 = _2702;
                    float _2759;
                    float _2760;
                    float _2761;
                    float _2762;
                    float _2763;
                    float _2764;
                    for (;;)
                    {
                        uint _2842 = uint(findLSB(_2838)) + (_2693 << 5u);
                        uint _2839 = (_2838 + 4294967295u) & _2838;
                        uint _2844 = _2842 * 48u;
                        vec4 _2858 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2844)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 3u)).x));
                        uint _2864 = (_2842 * 48u) + 4u;
                        vec4 _2877 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2864)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 3u)).x));
                        uint _2883 = (_2842 * 48u) + 8u;
                        vec3 _2894 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2883)).x, texelFetch(g_PointLightRenderingBuffer, int(_2883 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2883 + 2u)).x));
                        float _2898 = _2858.x - _2387;
                        float _2899 = _2858.y - _2388;
                        float _2900 = _2858.z - _2389;
                        float _2901 = dot(vec3(_2898, _2899, _2900), vec3(_2898, _2899, _2900));
                        float _2904 = inversesqrt(_2901);
                        float _2905 = _2904 * _2898;
                        float _2906 = _2904 * _2899;
                        float _2907 = _2904 * _2900;
                        float _2908 = dot(vec3(_620, _623, _626), vec3(_2905, _2906, _2907));
                        float _2913 = 1.0 - (_2901 * _2858.w);
                        float _4271 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
                        float _2914 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
                        float _2915 = sqrt(_2901) * _2877.w;
                        float _2918 = 1.39999997615814208984375 / (_2915 + 1.39999997615814208984375);
                        float _2919 = _2918 * _2918;
                        float _2922 = ((1.0 - _2919) * _2908) + _2919;
                        float _2925 = _2915 * _2915;
                        float _2929 = ((isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0))) * _2914) / ((_2925 * 0.699999988079071044921875) + 1.0);
                        float _2933 = (-0.0) - _2387;
                        float _2934 = (-0.0) - _2388;
                        float _2935 = (-0.0) - _2389;
                        float _2939 = inversesqrt(dot(vec3(_2933, _2934, _2935), vec3(_2933, _2934, _2935)));
                        float _2940 = _2939 * _2933;
                        float _2941 = _2939 * _2934;
                        float _2942 = _2939 * _2935;
                        float _2950 = exp2(log2(1.0 / ((_2925 * 3.5) + 5.0)) * 0.25);
                        float _2951 = 1.0 - _695;
                        float _2958 = sqrt(1.0 - ((1.0 - (_2951 * _2951)) * (1.0 - (_2950 * _2950))));
                        float _2959 = _2958 * _2958;
                        float _2960 = _2959 * _2959;
                        float _2961 = _2940 + _2905;
                        float _2962 = _2941 + _2906;
                        float _2963 = _2942 + _2907;
                        float _2967 = inversesqrt(dot(vec3(_2961, _2962, _2963), vec3(_2961, _2962, _2963)));
                        float _2971 = dot(vec3(_620, _623, _626), vec3(_2940, _2941, _2942));
                        float _4287 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
                        float _2974 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
                        float _2975 = dot(vec3(_620, _623, _626), vec3(_2967 * _2961, _2967 * _2962, _2967 * _2963));
                        float _4298 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
                        float _2978 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
                        float _2982 = ((_2978 * _2978) * (_2960 + (-1.0))) + 1.0;
                        float _2983 = _2918 * _2959;
                        float _2984 = _2983 * _2983;
                        float _2987 = ((1.0 - _2984) * _2908) + _2984;
                        float _4309 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
                        float _2988 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
                        float _2989 = 1.0 - _2959;
                        float _2999 = (0.5 / (((_2988 * ((_2974 * _2989) + _2959)) + 9.9999999392252902907785028219223e-09) + (((_2988 * _2989) + _2959) * _2974))) * _2988;
                        float _4320 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
                        float _3010 = (((_2960 * 3.1415927410125732421875) * (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0)))) / ((_2982 * _2982) * ((_2925 * 2.1991131305694580078125) + 3.141590118408203125))) * _2914;
                        _2762 = (_2929 * _2877.x) + _2835;
                        _2763 = (_2929 * _2877.y) + _2836;
                        _2764 = (_2929 * _2877.z) + _2837;
                        _2759 = (_3010 * _2894.x) + _2832;
                        _2760 = (_3010 * _2894.y) + _2833;
                        _2761 = (_3010 * _2894.z) + _2834;
                        if (_2839 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2832 = _2759;
                            _2833 = _2760;
                            _2834 = _2761;
                            _2835 = _2762;
                            _2836 = _2763;
                            _2837 = _2764;
                            _2838 = _2839;
                        }
                    }
                    frontier_phi_66_pred = _2759;
                    frontier_phi_66_pred_1 = _2764;
                    frontier_phi_66_pred_2 = _2763;
                    frontier_phi_66_pred_3 = _2762;
                    frontier_phi_66_pred_4 = _2761;
                    frontier_phi_66_pred_5 = _2760;
                }
                _2535 = frontier_phi_66_pred;
                _2545 = frontier_phi_66_pred_1;
                _2543 = frontier_phi_66_pred_2;
                _2541 = frontier_phi_66_pred_3;
                _2539 = frontier_phi_66_pred_4;
                _2537 = frontier_phi_66_pred_5;
                uint _2694 = _2693 + 1u;
                if (_2694 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2687 = _2535;
                    _2688 = _2537;
                    _2689 = _2539;
                    _2690 = _2541;
                    _2691 = _2543;
                    _2692 = _2545;
                    _2693 = _2694;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2534 = _2535;
            _2536 = _2537;
            _2538 = _2539;
            _2540 = _2541;
            _2542 = _2543;
            _2544 = _2545;
        }
        uvec4 _2548 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2549 = _2548.z;
        uint _2551 = (_2549 >> 8u) & 15u;
        float _2655;
        float _2657;
        float _2659;
        float _2661;
        float _2663;
        float _2665;
        if (((4294967295u << _2551) & _2433) == 0u)
        {
            _2655 = _2534;
            _2657 = _2536;
            _2659 = _2538;
            _2661 = _2540;
            _2663 = _2542;
            _2665 = _2544;
        }
        else
        {
            float _2680 = inversesqrt(dot(vec3(_2387, _2388, _2389), vec3(_2387, _2388, _2389)));
            float _2681 = _2680 * _2387;
            float _2682 = _2680 * _2388;
            float _2683 = _2680 * _2389;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2551 < ((_2549 >> 12u) & 15u))
            {
                float _2656;
                float _2658;
                float _2660;
                float _2662;
                float _2664;
                float _2666;
                float _2815 = _2534;
                float _2816 = _2536;
                float _2817 = _2538;
                float _2818 = _2540;
                float _2819 = _2542;
                float _2820 = _2544;
                uint _2821 = _2551;
                uint _2830;
                bool _2831;
                for (;;)
                {
                    _2830 = texelFetch(g_lightClassification, int((((_2427 << 5u) + (_2413 << 9u)) + (_2821 << 2u)) >> 2u)).x;
                    _2831 = _2830 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2831)
                    {
                        frontier_phi_77_pred = _2820;
                        frontier_phi_77_pred_1 = _2819;
                        frontier_phi_77_pred_2 = _2818;
                        frontier_phi_77_pred_3 = _2817;
                        frontier_phi_77_pred_4 = _2816;
                        frontier_phi_77_pred_5 = _2815;
                    }
                    else
                    {
                        float _3024;
                        float _3025;
                        float _3026;
                        float _3027;
                        float _3028;
                        float _3029;
                        float _3318;
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3322;
                        float _3323;
                        float _3037 = _2815;
                        float _3038 = _2816;
                        float _3039 = _2817;
                        float _3040 = _2818;
                        float _3041 = _2819;
                        float _3042 = _2820;
                        uint _3043 = _2830;
                        uint _3044;
                        vec4 _3069;
                        float _3070;
                        vec4 _3085;
                        vec3 _3097;
                        vec4 _3113;
                        vec4 _3128;
                        float _3174;
                        bool _3175;
                        for (;;)
                        {
                            uint _3054 = ((_2821 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3043));
                            _3044 = (_3043 + 4294967295u) & _3043;
                            uint _3056 = _3054 * 40u;
                            _3069 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3056)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 3u)).x));
                            _3070 = _3069.w;
                            uint _3072 = (_3054 * 40u) + 4u;
                            _3085 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3072)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 3u)).x));
                            uint _3087 = (_3054 * 40u) + 8u;
                            _3097 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3087)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 2u)).x));
                            uint _3100 = (_3054 * 40u) + 16u;
                            _3113 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3100)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 3u)).x));
                            uint _3115 = (_3054 * 40u) + 20u;
                            _3128 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 3u)).x));
                            uint _3130 = (_3054 * 40u) + 24u;
                            vec4 _3143 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3130)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 3u)).x));
                            uint _3149 = (_3054 * 40u) + 28u;
                            vec4 _3162 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3149)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 3u)).x));
                            _3174 = fma(_2389, _3162.z, fma(_2388, _3162.y, _3162.x * _2387)) + _3162.w;
                            _3175 = !((fma(_2389, _3143.z, fma(_2388, _3143.y, _3143.x * _2387)) + _3143.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3175)
                            {
                                float _3202 = _3069.x - _2387;
                                float _3203 = _3069.y - _2388;
                                float _3204 = _3069.z - _2389;
                                float _3205 = dot(vec3(_3202, _3203, _3204), vec3(_3202, _3203, _3204));
                                float _3208 = inversesqrt(_3205);
                                float _3209 = _3208 * _3202;
                                float _3210 = _3208 * _3203;
                                float _3211 = _3208 * _3204;
                                float _3215 = 1.0 - (_3205 / (_3070 * _3070));
                                float _4331 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                                float _3216 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
                                float _3220 = sqrt(_3205) * _3085.w;
                                float _3222 = 1.39999997615814208984375 / (_3220 + 1.39999997615814208984375);
                                float _3223 = _3222 * _3222;
                                float _3226 = ((1.0 - _3223) * dot(vec3(_3209, _3210, _3211), vec3(_620, _623, _626))) + _3223;
                                float _3229 = _3220 * _3220;
                                float _3233 = (fma(_2389, _3113.z, fma(_2388, _3113.y, _3113.x * _2387)) + _3113.w) / _3174;
                                float _3234 = (fma(_2389, _3128.z, fma(_2388, _3128.y, _3128.x * _2387)) + _3128.w) / _3174;
                                float _3238 = 1.0 - dot(vec2(_3233, _3234), vec2(_3233, _3234));
                                float _4347 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                                float _3239 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
                                float _3240 = _3239 * (((isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0))) * _3216) / ((_3229 * 0.699999988079071044921875) + 1.0));
                                float _3252 = exp2(log2(1.0 / ((_3229 * 3.5) + 5.0)) * 0.25);
                                float _3253 = 1.0 - _695;
                                float _3260 = sqrt(1.0 - ((1.0 - (_3253 * _3253)) * (1.0 - (_3252 * _3252))));
                                float _3261 = _3260 * _3260;
                                float _3262 = _3261 * _3261;
                                float _3263 = _3209 - _2681;
                                float _3264 = _3210 - _2682;
                                float _3265 = _3211 - _2683;
                                float _3269 = inversesqrt(dot(vec3(_3263, _3264, _3265), vec3(_3263, _3264, _3265)));
                                float _3273 = dot(vec3(_620, _623, _626), vec3((-0.0) - _2681, (-0.0) - _2682, (-0.0) - _2683));
                                float _4358 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                                float _3276 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
                                float _3277 = dot(vec3(_620, _623, _626), vec3(_3269 * _3263, _3269 * _3264, _3269 * _3265));
                                float _4369 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                                float _3280 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
                                float _3284 = ((_3280 * _3280) * (_3262 + (-1.0))) + 1.0;
                                float _3285 = _3222 * _3261;
                                float _3286 = _3285 * _3285;
                                float _3292 = ((1.0 - _3286) * dot(vec3(_620, _623, _626), vec3(_3209, _3210, _3211))) + _3286;
                                float _4380 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                                float _3293 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
                                float _3294 = 1.0 - _3261;
                                float _3304 = (0.5 / (((_3293 * ((_3276 * _3294) + _3261)) + 9.9999999392252902907785028219223e-09) + (((_3293 * _3294) + _3261) * _3276))) * _3293;
                                float _4391 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                                float _3314 = (_3239 * _3216) * (((_3262 * 3.1415927410125732421875) * (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0)))) / ((_3284 * _3284) * ((_3229 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3240 * _3085.y;
                                frontier_phi_83_pred_1 = _3240 * _3085.x;
                                frontier_phi_83_pred_2 = _3314 * _3097.z;
                                frontier_phi_83_pred_3 = _3314 * _3097.y;
                                frontier_phi_83_pred_4 = _3314 * _3097.x;
                                frontier_phi_83_pred_5 = _3240 * _3085.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3322 = frontier_phi_83_pred;
                            _3321 = frontier_phi_83_pred_1;
                            _3320 = frontier_phi_83_pred_2;
                            _3319 = frontier_phi_83_pred_3;
                            _3318 = frontier_phi_83_pred_4;
                            _3323 = frontier_phi_83_pred_5;
                            _3027 = _3321 + _3040;
                            _3028 = _3322 + _3041;
                            _3029 = _3323 + _3042;
                            _3024 = _3318 + _3037;
                            _3025 = _3319 + _3038;
                            _3026 = _3320 + _3039;
                            if (_3044 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3037 = _3024;
                                _3038 = _3025;
                                _3039 = _3026;
                                _3040 = _3027;
                                _3041 = _3028;
                                _3042 = _3029;
                                _3043 = _3044;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3029;
                        frontier_phi_77_pred_1 = _3028;
                        frontier_phi_77_pred_2 = _3027;
                        frontier_phi_77_pred_3 = _3026;
                        frontier_phi_77_pred_4 = _3025;
                        frontier_phi_77_pred_5 = _3024;
                    }
                    _2666 = frontier_phi_77_pred;
                    _2664 = frontier_phi_77_pred_1;
                    _2662 = frontier_phi_77_pred_2;
                    _2660 = frontier_phi_77_pred_3;
                    _2658 = frontier_phi_77_pred_4;
                    _2656 = frontier_phi_77_pred_5;
                    uint _2822 = _2821 + 1u;
                    if (_2822 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2815 = _2656;
                        _2816 = _2658;
                        _2817 = _2660;
                        _2818 = _2662;
                        _2819 = _2664;
                        _2820 = _2666;
                        _2821 = _2822;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2660;
                frontier_phi_58_59_ladder_1 = _2666;
                frontier_phi_58_59_ladder_2 = _2664;
                frontier_phi_58_59_ladder_3 = _2662;
                frontier_phi_58_59_ladder_4 = _2658;
                frontier_phi_58_59_ladder_5 = _2656;
            }
            else
            {
                frontier_phi_58_59_ladder = _2538;
                frontier_phi_58_59_ladder_1 = _2544;
                frontier_phi_58_59_ladder_2 = _2542;
                frontier_phi_58_59_ladder_3 = _2540;
                frontier_phi_58_59_ladder_4 = _2536;
                frontier_phi_58_59_ladder_5 = _2534;
            }
            _2655 = frontier_phi_58_59_ladder_5;
            _2657 = frontier_phi_58_59_ladder_4;
            _2659 = frontier_phi_58_59_ladder;
            _2661 = frontier_phi_58_59_ladder_3;
            _2663 = frontier_phi_58_59_ladder_2;
            _2665 = frontier_phi_58_59_ladder_1;
        }
        float _2670 = isnan(1.0) ? _679 : (isnan(_679) ? 1.0 : min(_679, 1.0));
        _2446 = (_2670 * _2661) + _1882;
        _2448 = (_2670 * _2663) + _1884;
        _2450 = (_2670 * _2665) + _1886;
        _2452 = ((_2655 * _663) * _2670) + _2227;
        _2454 = ((_2657 * _665) * _2670) + _2229;
        _2456 = ((_2659 * _666) * _2670) + _2231;
    }
    else
    {
        _2446 = _1882;
        _2448 = _1884;
        _2450 = _1886;
        _2452 = _2227;
        _2454 = _2229;
        _2456 = _2231;
    }
    float _4407 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _4418 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _4429 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _2473 = ((isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * (_2446 + ((isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0))) * _679))) + ((_2452 + ((isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))) * _1519)) * cbPerFrame._m0[3u].x);
    float _2474 = ((isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0))) * (_2448 + ((isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))) * _679))) + ((_2454 + ((isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))) * _1519)) * cbPerFrame._m0[3u].x);
    float _2475 = ((isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_2450 + ((isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0))) * _679))) + ((_2456 + ((isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))) * _1519)) * cbPerFrame._m0[3u].x);
    uint _2476 = _228 + 6u;
    float _2484 = _599 / cbSceneParam._m0[86u].x;
    float _2485 = _600 / cbSceneParam._m0[86u].y;
    vec4 _2499 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2484, _2485, (log2((isnan(cbSceneParam._m0[77u].w) ? _520 : (isnan(_520) ? cbSceneParam._m0[77u].w : min(_520, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2501 = _2499.x;
    float _2502 = _2499.y;
    float _2503 = _2499.z;
    float _2504 = _2499.w;
    float _2597;
    float _2599;
    float _2601;
    float _2603;
    if (_520 > cbSceneParam._m0[78u].w)
    {
        float _2559 = isnan(_520) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _520 : min(cbSceneParam._m0[80u].w, _520));
        float _2560 = _2559 / _520;
        float _2571 = _2560 * _571;
        float _2572 = _572 * _2560;
        float _2573 = (-0.0) - _2572;
        float _2575 = _2560 * _573;
        float _2577 = (cbSceneParam._m0[77u].w * _2573) / _2559;
        float _2578 = _2577 + cbSceneParam._m0[79u].w;
        float _2579 = cbSceneParam._m0[79u].w - _2572;
        float _2585 = sqrt(((_2571 * _2571) + (_2572 * _2572)) + (_2575 * _2575));
        float _2588 = (1.0 - (cbSceneParam._m0[77u].w / _2559)) * _2585;
        float _2593 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2595 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2772;
        if (abs((_2573 - _2577) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2772 = ((((_2578 > 0.0) ? exp2(_2593 * _2578) : (2.0 - exp2(_2595 * _2578))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2588;
        }
        else
        {
            float _2716 = 1.0 / cbSceneParam._m0[80u].x;
            float _2717 = isnan(_2579) ? _2578 : (isnan(_2578) ? _2579 : max(_2578, _2579));
            float _2718 = isnan(_2579) ? _2578 : (isnan(_2578) ? _2579 : min(_2578, _2579));
            float _2727 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : min(_2717, 0.0));
            float _2728 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : min(_2718, 0.0));
            _2772 = ((abs(_2585 / _2573) * cbSceneParam._m0[80u].y) * ((((_2727 - _2728) * 2.0) - ((exp2(_2593 * (isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0)))) - exp2(_2593 * (isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0))))) * _2716)) - ((exp2(_2595 * _2727) - exp2(_2595 * _2728)) * _2716))) + (_2588 * cbSceneParam._m0[80u].z);
        }
        vec4 _2774 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2484, _2485, 1.0), 0.0);
        float _2783 = exp2((_2772 * (-1.44269502162933349609375)) * (1.0 - _2774.w));
        float _2784 = log2(_2783);
        float _2800 = log2(_2504);
        _2597 = (exp2(_2800 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2784 * cbSceneParam._m0[78u].x)) * _2774.x) / cbSceneParam._m0[78u].x)) + _2501;
        _2599 = (exp2(_2800 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2784 * cbSceneParam._m0[78u].y)) * _2774.y) / cbSceneParam._m0[78u].y)) + _2502;
        _2601 = (exp2(_2800 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2784 * cbSceneParam._m0[78u].z)) * _2774.z) / cbSceneParam._m0[78u].z)) + _2503;
        _2603 = _2783 * _2504;
    }
    else
    {
        _2597 = _2501;
        _2599 = _2502;
        _2601 = _2503;
        _2603 = _2504;
    }
    bool _2810;
    vec4 _2613;
    vec4 _2635;
    float _2637;
    float _2641;
    float _2642;
    float _2643;
    float _2644;
    bool _2654;
    for (;;)
    {
        _2613 = cbMatDynParam._m0[0u];
        float _2615 = roundEven(_2613.y);
        bool _2616 = _2615 == 3.0;
        float _2617 = log2(_2603);
        float _2624 = exp2(_2617 * cbSceneParam._m0[78u].x) * _2473;
        float _2625 = exp2(_2617 * cbSceneParam._m0[78u].y) * _2474;
        float _2626 = exp2(_2617 * cbSceneParam._m0[78u].z) * _2475;
        float _2633 = _587 + (-0.5);
        _2635 = cbMtdParam._m0[1u];
        _2637 = _2635.y * _2633;
        float _2640 = (_2615 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2641 = _2640 * (_2616 ? _2624 : (_2624 + (cbSceneParam._m0[72u].w * _2597)));
        _2642 = _2640 * (_2616 ? _2625 : (_2625 + (cbSceneParam._m0[72u].w * _2599)));
        _2643 = _2640 * (_2616 ? _2626 : (_2626 + (cbSceneParam._m0[72u].w * _2601)));
        _2644 = _2633 * 0.999000012874603271484375;
        _2654 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2654)
        {
            if ((cbInstanceData._m0[_228 + 7u].x + _2644) < 0.5)
            {
                _2810 = true;
                break;
            }
        }
        uint _2751 = _639 + uint(_2613.w);
        if ((cbInstanceData._m0[_2751].w < 1.0) && ((cbInstanceData._m0[_2751].w + _2644) < 0.5))
        {
            _2810 = true;
            break;
        }
        if ((_2637 + 1.0) < _2635.x)
        {
            _2810 = true;
            break;
        }
        _2810 = false;
        break;
    }
    float _3015;
    if (_2810)
    {
        discard_state = true;
        _3015 = 0.0;
    }
    else
    {
        _3015 = cbInstanceData._m0[_2476].w;
    }
    SV_Target.x = _2641;
    SV_Target.y = _2642;
    SV_Target.z = _2643;
    SV_Target.w = _3015;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2476].w;
    discard_exit();
}


