#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1214;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _224 = _223 * _215;
    float _225 = _223 * _216;
    float _226 = _223 * _217;
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _238 = _237 * TANGENT.x;
    float _239 = _237 * TANGENT.y;
    float _240 = _237 * TANGENT.z;
    uint _243 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _243 + 1u;
    uint _252 = _243 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_243].x * cbInstanceData._m0[_243].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _282 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _288 = _282.x * cbMtdParam._m0[9u].x;
    float _289 = _282.y * cbMtdParam._m0[9u].y;
    float _290 = _282.z * cbMtdParam._m0[9u].z;
    vec4 _309 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _262) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _263) + cbTextureTilingScale._m0[14u].w));
    vec4 _329 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _262) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _263) + cbTextureTilingScale._m0[20u].w));
    vec4 _355 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _359 = _355.z;
    float _363 = (_355.x * 2.0) + (-1.0);
    float _364 = (_355.y * 2.0) + (-1.0);
    float _365 = dot(vec2(_363, _364), vec2(_363, _364));
    float _3540 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _371 = sqrt(1.0 - (isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0))));
    float _376 = _363 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_329.x * 2.0) + (-1.0)));
    float _377 = _364 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_329.y * 2.0) + (-1.0)));
    float _380 = fma(_371, _231, fma(_377, _238, _376 * _224));
    float _383 = fma(_371, _232, fma(_377, _239, _376 * _225));
    float _386 = fma(_371, _233, fma(_377, _240, _376 * _226));
    float _390 = inversesqrt(dot(vec3(_380, _383, _386), vec3(_380, _383, _386)));
    vec4 _426 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _428 = _426.x;
    float _429 = 1.0 - _428;
    float _436 = ((_428 - _429) * cbMtdParam._m0[24u].z) + _429;
    float _438 = (cbMtdParam._m0[19u].x + dot(vec4(_390 * _380, _390 * _383, _390 * _386, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_436 * cbMtdParam._m0[21u].z);
    float _3551 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _439 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
    float _441 = (-0.0) - cbMtdParam._m0[24u].x;
    float _443 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _444 = isnan(1.0) ? _443 : (isnan(_443) ? 1.0 : min(_443, 1.0));
    float _451 = _439 - ((_439 * TEXCOORD_8.x) * _444);
    float _452 = _439 - ((_439 * TEXCOORD_8.y) * _444);
    float _453 = _439 - ((_439 * TEXCOORD_8.z) * _444);
    float _460 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _464 = ((isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : min(_460, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _472 = (_464 - (((_436 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _464))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3582 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _473 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
    float _477 = ((_451 * ((_309.x * cbMtdParam._m0[18u].x) - _288)) * _473) + _288;
    float _478 = ((_452 * ((_309.y * cbMtdParam._m0[18u].y) - _289)) * _473) + _289;
    float _479 = ((_453 * ((_309.z * cbMtdParam._m0[18u].z) - _290)) * _473) + _290;
    vec4 _491 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _262) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _263) + cbTextureTilingScale._m0[19u].w));
    float _493 = _491.x;
    float _494 = 1.0 - _493;
    float _523 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_493 - _494) * cbMtdParam._m0[24u].w) + _494) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3593 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _524 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
    float _532 = ((((cbMtdParam._m0[10u].x - _477) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _524) + _477;
    float _533 = ((((cbMtdParam._m0[10u].y - _478) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _524) + _478;
    float _534 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _479)) * _524) + _479;
    vec4 _547 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _549 = _547.x;
    float _552 = _549 - ((_549 * _451) * _473);
    float _554 = _552 - (_552 * _524);
    float _559 = (((_329.z - _359) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _359;
    vec4 _573 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _580 = (_573.x * 2.0) + (-1.0);
    float _581 = (_573.y * 2.0) + (-1.0);
    float _582 = dot(vec2(_580, _581), vec2(_580, _581));
    float _3604 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _591 = (((_573.z - _559) * _451) * _473) + _559;
    float _594 = ((cbMtdParam._m0[23u].y - _591) * _524) + _591;
    vec4 _613 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _262) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _263) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _619 = (_613.x * 2.0) + (-1.0);
    float _620 = (_613.y * 2.0) + (-1.0);
    float _621 = dot(vec2(_619, _620), vec2(_619, _620));
    float _3615 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _641 = (((cbMtdParam._m0[21u].x * _376) + ((_580 - _376) * _451)) * _473) + _376;
    float _642 = (((cbMtdParam._m0[21u].x * _377) + ((_581 - _377) * _452)) * _473) + _377;
    float _643 = (((sqrt(1.0 - (isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0)))) - _371) * _453) * _473) + _371;
    float _654 = (((_619 - _641) + (_641 * cbMtdParam._m0[22u].z)) * _524) + _641;
    float _655 = (((_620 - _642) + (_642 * cbMtdParam._m0[22u].z)) * _524) + _642;
    float _656 = ((sqrt(1.0 - (isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0)))) - _643) * _524) + _643;
    float _658 = cbMtdParam._m0[22u].x + _355.w;
    float _661 = fma(_656, _231, fma(_655, _238, _654 * _224));
    float _664 = fma(_656, _232, fma(_655, _239, _654 * _225));
    float _667 = fma(_656, _233, fma(_655, _240, _654 * _226));
    float _671 = inversesqrt(dot(vec3(_661, _664, _667), vec3(_661, _664, _667)));
    float _672 = _671 * _661;
    float _673 = _671 * _664;
    float _674 = _671 * _667;
    float _3626 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _675 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
    float _3637 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _3648 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _3659 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _3670 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _3681 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _680 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
    float _694 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _734 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _744 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _734);
    float _745 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _734);
    float _746 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _734);
    float _750 = inversesqrt(dot(vec3(_744, _745, _746), vec3(_744, _745, _746)));
    float _751 = _744 * _750;
    float _752 = _745 * _750;
    float _753 = _746 * _750;
    float _759 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _760 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _781 = fma(_674, cbSceneParam._m0[5u].z, fma(_673, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _672));
    float _784 = fma(_674, cbSceneParam._m0[6u].z, fma(_673, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _672));
    float _787 = fma(_674, cbSceneParam._m0[7u].z, fma(_673, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _672));
    uint _801 = (_243 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _807 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0)))) * cbInstanceData._m0[_801].x;
    float _808 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0)))) * cbInstanceData._m0[_801].y;
    float _809 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0)))) * cbInstanceData._m0[_801].z;
    float _3692 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _810 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    float _3703 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _811 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _3714 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _812 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    float _813 = 1.0 - _680;
    float _814 = _810 * _813;
    float _815 = _811 * _813;
    float _816 = _812 * _813;
    float _821 = (_810 + (-0.039999999105930328369140625)) * _680;
    float _822 = (_811 + (-0.039999999105930328369140625)) * _680;
    float _823 = (_812 + (-0.039999999105930328369140625)) * _680;
    float _824 = _821 + 0.039999999105930328369140625;
    float _826 = _822 + 0.039999999105930328369140625;
    float _827 = _823 + 0.039999999105930328369140625;
    vec4 _836 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _759, cbSceneParam._m0[86u].y * _760));
    float _840 = ((isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) * TEXCOORD_5.w) * _836.x;
    float _841 = dot(vec3(_672, _673, _674), vec3(_751, _752, _753));
    float _844 = _841 * 2.0;
    float _848 = (_844 * _672) - _751;
    float _849 = (_844 * _673) - _752;
    float _850 = (_844 * _674) - _753;
    float _854 = abs(dot(vec3(_751, _752, _753), vec3(_672, _673, _674)));
    float _3725 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _856 = sqrt(_675);
    float _869 = exp2((_856 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_856 * 3.0));
    float _875 = (1.0 - _869) * ((_856 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _876 = _869 * _856;
    float _904 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _908 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _912 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1213;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _938 = fma(_912, cbModelParam._m0[26u].z, fma(_908, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _904));
        float _942 = fma(_912, cbModelParam._m0[27u].z, fma(_908, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _904));
        float _946 = fma(_912, cbModelParam._m0[28u].z, fma(_908, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _904));
        float _971 = _904 + _672;
        float _972 = _908 + _673;
        float _973 = _912 + _674;
        float _983 = fma(_973, cbModelParam._m0[26u].z, fma(_972, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _971)) - _938;
        float _984 = fma(_973, cbModelParam._m0[27u].z, fma(_972, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _971)) - _942;
        float _985 = fma(_973, cbModelParam._m0[28u].z, fma(_972, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _971)) - _946;
        float _989 = inversesqrt(dot(vec3(_983, _984, _985), vec3(_983, _984, _985)));
        float _1002 = ((_989 * _983) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_938 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1003 = ((_989 * _984) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_942 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1004 = ((_989 * _985) / cbModelParam._m0[34u].z) + ((((((_946 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        vec4 _1014 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        float _1041 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_1007.x + (-0.5));
        float _1043 = _1041 * (_1007.y + (-0.5));
        float _1044 = _1041 * (_1007.z + (-0.5));
        float _1051 = exp2((_1014.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1014.x + (-0.5));
        float _1053 = _1051 * (_1014.y + (-0.5));
        float _1054 = _1051 * (_1014.z + (-0.5));
        float _1061 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1021.x + (-0.5));
        float _1063 = _1061 * (_1021.y + (-0.5));
        float _1064 = _1061 * (_1021.z + (-0.5));
        float _1071 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1028.x + (-0.5));
        float _1073 = _1071 * (_1028.y + (-0.5));
        float _1074 = _1071 * (_1028.z + (-0.5));
        float _1075 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1076 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1077 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1078 = _1042 * 0.5;
        float _1079 = _1052 * 0.5;
        float _1080 = _1062 * 0.5;
        float _1081 = dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080));
        float _1086 = (_1081 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1081);
        float _1095 = (dot(vec3(_672, _673, _674), vec3(_1086 * _1078, _1086 * _1079, _1086 * _1080)) + 1.0) * 0.5;
        float _3751 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1105 = sqrt(((_1079 * _1079) + (_1078 * _1078)) + (_1080 * _1080)) / (_1075 + 9.9999997473787516355514526367188e-06);
        float _3762 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1107 = _1106 * 2.0;
        float _1111 = (1.0 - _1106) / (_1106 + 1.0);
        float _3773 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1121 = ((((1.0 - _1112) * (_1107 + 2.0)) * exp2(log2(isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * (_1107 + 1.0))) + _1112) * _1075;
        float _1122 = _1043 * 0.5;
        float _1123 = _1053 * 0.5;
        float _1124 = _1063 * 0.5;
        float _1125 = dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124));
        float _1130 = (_1125 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1125);
        float _1138 = (dot(vec3(_672, _673, _674), vec3(_1130 * _1122, _1130 * _1123, _1130 * _1124)) + 1.0) * 0.5;
        float _3784 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1147 = sqrt(((_1123 * _1123) + (_1122 * _1122)) + (_1124 * _1124)) / (_1076 + 9.9999997473787516355514526367188e-06);
        float _3795 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1149 = _1148 * 2.0;
        float _1153 = (1.0 - _1148) / (_1148 + 1.0);
        float _3806 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1163 = ((((1.0 - _1154) * (_1149 + 2.0)) * exp2(log2(isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * (_1149 + 1.0))) + _1154) * _1076;
        float _1164 = _1044 * 0.5;
        float _1165 = _1054 * 0.5;
        float _1166 = _1064 * 0.5;
        float _1167 = dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166));
        float _1172 = (_1167 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1167);
        float _1180 = (dot(vec3(_672, _673, _674), vec3(_1172 * _1164, _1172 * _1165, _1172 * _1166)) + 1.0) * 0.5;
        float _3817 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1189 = sqrt(((_1165 * _1165) + (_1164 * _1164)) + (_1166 * _1166)) / (_1077 + 9.9999997473787516355514526367188e-06);
        float _3828 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1191 = _1190 * 2.0;
        float _1195 = (1.0 - _1190) / (_1190 + 1.0);
        float _3839 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1205 = ((((1.0 - _1196) * (_1191 + 2.0)) * exp2(log2(isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (_1191 + 1.0))) + _1196) * _1077;
        _1213 = _1044;
        _1215 = _1043;
        _1216 = _1042;
        _1217 = _1054;
        _1218 = _1053;
        _1219 = _1052;
        _1220 = _1064;
        _1221 = _1063;
        _1222 = _1062;
        _1223 = _1077;
        _1224 = _1076;
        _1225 = _1075;
        _1226 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0)));
        _1227 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0)));
        _1228 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0)));
    }
    else
    {
        _1213 = _1214;
        _1215 = _1214;
        _1216 = _1214;
        _1217 = _1214;
        _1218 = _1214;
        _1219 = _1214;
        _1220 = _1214;
        _1221 = _1214;
        _1222 = _1214;
        _1223 = _1214;
        _1224 = _1214;
        _1225 = _1214;
        _1226 = 0.0;
        _1227 = 0.0;
        _1228 = 0.0;
    }
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1253 = fma(_912, cbModelParam._m0[30u].z, fma(_908, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _904));
        float _1257 = fma(_912, cbModelParam._m0[31u].z, fma(_908, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _904));
        float _1261 = fma(_912, cbModelParam._m0[32u].z, fma(_908, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _904));
        float _1284 = _904 + _672;
        float _1285 = _908 + _673;
        float _1286 = _912 + _674;
        float _1296 = fma(_1286, cbModelParam._m0[30u].z, fma(_1285, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1284)) - _1253;
        float _1297 = fma(_1286, cbModelParam._m0[31u].z, fma(_1285, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1284)) - _1257;
        float _1298 = fma(_1286, cbModelParam._m0[32u].z, fma(_1285, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1284)) - _1261;
        float _1302 = inversesqrt(dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298)));
        float _1315 = ((_1302 * _1296) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1253 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1316 = ((_1302 * _1297) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1257 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1317 = ((_1302 * _1298) / cbModelParam._m0[35u].z) + ((((((_1261 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1319 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1315, _1316, _1317), 0.0);
        vec4 _1326 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1315, _1316, _1317), 0.0);
        vec4 _1333 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1315, _1316, _1317), 0.0);
        vec4 _1340 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1315, _1316, _1317), 0.0);
        float _1352 = exp2((_1319.w + (-0.5)) * 20.0) * 2.0;
        float _1353 = _1352 * (_1319.x + (-0.5));
        float _1354 = _1352 * (_1319.y + (-0.5));
        float _1355 = _1352 * (_1319.z + (-0.5));
        float _1362 = exp2((_1326.w + (-0.5)) * 20.0) * 2.0;
        float _1363 = _1362 * (_1326.x + (-0.5));
        float _1364 = _1362 * (_1326.y + (-0.5));
        float _1365 = _1362 * (_1326.z + (-0.5));
        float _1372 = exp2((_1333.w + (-0.5)) * 20.0) * 2.0;
        float _1373 = _1372 * (_1333.x + (-0.5));
        float _1374 = _1372 * (_1333.y + (-0.5));
        float _1375 = _1372 * (_1333.z + (-0.5));
        float _1382 = exp2((_1340.w + (-0.5)) * 20.0) * 2.0;
        float _1383 = _1382 * (_1340.x + (-0.5));
        float _1384 = _1382 * (_1340.y + (-0.5));
        float _1385 = _1382 * (_1340.z + (-0.5));
        float _1386 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1387 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1388 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1389 = _1353 * 0.5;
        float _1390 = _1363 * 0.5;
        float _1391 = _1373 * 0.5;
        float _1392 = dot(vec3(_1389, _1390, _1391), vec3(_1389, _1390, _1391));
        float _1397 = (_1392 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1392);
        float _1405 = (dot(vec3(_672, _673, _674), vec3(_1397 * _1389, _1397 * _1390, _1397 * _1391)) + 1.0) * 0.5;
        float _3880 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1414 = sqrt(((_1390 * _1390) + (_1389 * _1389)) + (_1391 * _1391)) / (_1386 + 9.9999997473787516355514526367188e-06);
        float _3891 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1416 = _1415 * 2.0;
        float _1420 = (1.0 - _1415) / (_1415 + 1.0);
        float _3902 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1430 = ((((1.0 - _1421) * (_1416 + 2.0)) * exp2(log2(isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * (_1416 + 1.0))) + _1421) * _1386;
        float _1431 = _1354 * 0.5;
        float _1432 = _1364 * 0.5;
        float _1433 = _1374 * 0.5;
        float _1434 = dot(vec3(_1431, _1432, _1433), vec3(_1431, _1432, _1433));
        float _1439 = (_1434 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1434);
        float _1447 = (dot(vec3(_672, _673, _674), vec3(_1439 * _1431, _1439 * _1432, _1439 * _1433)) + 1.0) * 0.5;
        float _3913 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1456 = sqrt(((_1432 * _1432) + (_1431 * _1431)) + (_1433 * _1433)) / (_1387 + 9.9999997473787516355514526367188e-06);
        float _3924 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1458 = _1457 * 2.0;
        float _1462 = (1.0 - _1457) / (_1457 + 1.0);
        float _3935 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1472 = ((((1.0 - _1463) * (_1458 + 2.0)) * exp2(log2(isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * (_1458 + 1.0))) + _1463) * _1387;
        float _1473 = _1355 * 0.5;
        float _1474 = _1365 * 0.5;
        float _1475 = _1375 * 0.5;
        float _1476 = dot(vec3(_1473, _1474, _1475), vec3(_1473, _1474, _1475));
        float _1481 = (_1476 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1476);
        float _1489 = (dot(vec3(_672, _673, _674), vec3(_1481 * _1473, _1481 * _1474, _1481 * _1475)) + 1.0) * 0.5;
        float _3946 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1498 = sqrt(((_1474 * _1474) + (_1473 * _1473)) + (_1475 * _1475)) / (_1388 + 9.9999997473787516355514526367188e-06);
        float _3957 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1500 = _1499 * 2.0;
        float _1504 = (1.0 - _1499) / (_1499 + 1.0);
        float _3968 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1514 = ((((1.0 - _1505) * (_1500 + 2.0)) * exp2(log2(isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * (_1500 + 1.0))) + _1505) * _1388;
        _1522 = _1355;
        _1523 = _1354;
        _1524 = _1353;
        _1525 = _1365;
        _1526 = _1364;
        _1527 = _1363;
        _1528 = _1375;
        _1529 = _1374;
        _1530 = _1373;
        _1531 = _1388;
        _1532 = _1387;
        _1533 = _1386;
        _1534 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)));
        _1535 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)));
        _1536 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)));
    }
    else
    {
        _1522 = _1214;
        _1523 = _1214;
        _1524 = _1214;
        _1525 = _1214;
        _1526 = _1214;
        _1527 = _1214;
        _1528 = _1214;
        _1529 = _1214;
        _1530 = _1214;
        _1531 = _1214;
        _1532 = _1214;
        _1533 = _1214;
        _1534 = 0.0;
        _1535 = 0.0;
        _1536 = 0.0;
    }
    float _1546 = (cbModelParam._m0[1u].x * (_1534 - _1226)) + _1226;
    float _1547 = (cbModelParam._m0[1u].x * (_1535 - _1227)) + _1227;
    float _1548 = (cbModelParam._m0[1u].x * (_1536 - _1228)) + _1228;
    float _1569 = fma(_1548, cbSceneParam._m0[89u].z, fma(_1547, cbSceneParam._m0[89u].y, _1546 * cbSceneParam._m0[89u].x));
    float _1572 = fma(_1548, cbSceneParam._m0[90u].z, fma(_1547, cbSceneParam._m0[90u].y, _1546 * cbSceneParam._m0[90u].x));
    float _1575 = fma(_1548, cbSceneParam._m0[91u].z, fma(_1547, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1546));
    float _1590 = _848 * 0.5;
    float _1591 = _849 * 0.5;
    float _1592 = _850 * 0.5;
    float _1593 = dot(vec4(_1590, _1591, _1592, 1.0), vec4(_1524, _1527, _1530, _1533));
    float _1596 = dot(vec4(_1590, _1591, _1592, 1.0), vec4(_1523, _1526, _1529, _1532));
    float _1599 = dot(vec4(_1590, _1591, _1592, 1.0), vec4(_1522, _1525, _1528, _1531));
    float _1633;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1606 = dot(vec4(_1590, _1591, _1592, 1.0), vec4(_1213, _1217, _1220, _1223));
        float _1610 = dot(vec4(_1590, _1591, _1592, 1.0), vec4(_1215, _1218, _1221, _1224));
        float _1614 = dot(vec4(_1590, _1591, _1592, 1.0), vec4(_1216, _1219, _1222, _1225));
        float _1621 = dot(vec4(cbModelParam._m0[39u]), vec4(_1590, _1591, _1592, 1.0));
        _1633 = dot(vec3(isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)), isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)), isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1621) ? 0.0 : (isnan(0.0) ? _1621 : max(0.0, _1621))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1633 = 1.0;
    }
    float _1644;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1635 = dot(vec4(cbModelParam._m0[40u]), vec4(_1590, _1591, _1592, 1.0));
        _1644 = dot(vec3(isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)), isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)), isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1635) ? 0.0 : (isnan(0.0) ? _1635 : max(0.0, _1635))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1644 = 1.0;
    }
    float _1648 = (_1644 * cbModelParam._m0[1u].x) + (_1633 * (1.0 - cbModelParam._m0[1u].x));
    float _1658 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _675);
    float _1659 = isnan(_1658) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1658 : min(cbModelParam._m0[25u].z, _1658));
    float _1739;
    float _1741;
    float _1743;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1706 = fma(_912, cbModelParam._m0[13u].z, fma(_908, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _904)) + cbModelParam._m0[13u].w;
        float _1710 = fma(_912, cbModelParam._m0[14u].z, fma(_908, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _904)) + cbModelParam._m0[14u].w;
        float _1714 = fma(_912, cbModelParam._m0[15u].z, fma(_908, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _904)) + cbModelParam._m0[15u].w;
        float _1717 = fma(_850, cbModelParam._m0[13u].z, fma(_849, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _848));
        float _1720 = fma(_850, cbModelParam._m0[14u].z, fma(_849, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _848));
        float _1723 = fma(_850, cbModelParam._m0[15u].z, fma(_849, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _848));
        float _1751;
        if (_1717 > 0.0)
        {
            _1751 = abs((1.0 - _1706) / _1717);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1717 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1706 + 1.0) / _1717);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1751 = frontier_phi_14_12_ladder;
        }
        float _1954;
        if (_1720 > 0.0)
        {
            _1954 = abs((1.0 - _1710) / _1720);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1720 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1710 + 1.0) / _1720);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1954 = frontier_phi_23_19_ladder;
        }
        float _2208;
        if (_1723 > 0.0)
        {
            _2208 = abs((1.0 - _1714) / _1723);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1723 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1714 + 1.0) / _1723);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2208 = frontier_phi_35_30_ladder;
        }
        float _2210 = isnan(_1954) ? _1751 : (isnan(_1751) ? _1954 : min(_1751, _1954));
        float _2211 = isnan(_2208) ? _2210 : (isnan(_2210) ? _2208 : min(_2210, _2208));
        float _2215 = (_2211 * _1717) + _1706;
        float _2216 = (_2211 * _1720) + _1710;
        float _2217 = (_2211 * _1723) + _1714;
        float _2218 = _2211 * 9.9999997473787516355514526367188e-05;
        float _2220 = (-1.0) - _2218;
        float _2222 = _2218 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2217 > _2222) || ((_2217 < _2220) || ((_2216 > _2222) || ((_2216 < _2220) || ((_2215 < _2220) || (_2215 > _2222))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2345 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2217, cbModelParam._m0[9u].z, fma(_2216, cbModelParam._m0[9u].y, _2215 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2217, cbModelParam._m0[10u].z, fma(_2216, cbModelParam._m0[10u].y, _2215 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2217, cbModelParam._m0[11u].z, fma(_2216, cbModelParam._m0[11u].y, _2215 * cbModelParam._m0[11u].x))), _1659);
            frontier_phi_13_35_ladder = _2345.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2345.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2345.x * cbModelParam._m0[1u].y;
        }
        _1739 = frontier_phi_13_35_ladder_2;
        _1741 = frontier_phi_13_35_ladder_1;
        _1743 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1727 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_848, _849, _850), _1659);
        _1739 = _1727.x * cbModelParam._m0[1u].y;
        _1741 = _1727.y * cbModelParam._m0[1u].y;
        _1743 = _1727.z * cbModelParam._m0[1u].y;
    }
    float _1747 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _675);
    float _1748 = isnan(_1747) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1747 : min(cbModelParam._m0[25u].w, _1747));
    float _1837;
    float _1839;
    float _1841;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1801 = fma(_912, cbModelParam._m0[21u].z, fma(_908, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _904)) + cbModelParam._m0[21u].w;
        float _1805 = fma(_912, cbModelParam._m0[22u].z, fma(_908, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _904)) + cbModelParam._m0[22u].w;
        float _1809 = fma(_912, cbModelParam._m0[23u].z, fma(_908, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _904)) + cbModelParam._m0[23u].w;
        float _1812 = fma(_850, cbModelParam._m0[21u].z, fma(_849, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _848));
        float _1815 = fma(_850, cbModelParam._m0[22u].z, fma(_849, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _848));
        float _1818 = fma(_850, cbModelParam._m0[23u].z, fma(_849, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _848));
        float _1959;
        if (_1812 > 0.0)
        {
            _1959 = abs((1.0 - _1801) / _1812);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1801 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1959 = frontier_phi_25_21_ladder;
        }
        float _2235;
        if (_1815 > 0.0)
        {
            _2235 = abs((1.0 - _1805) / _1815);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1815 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1805 + 1.0) / _1815);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2235 = frontier_phi_37_32_ladder;
        }
        float _2448;
        if (_1818 > 0.0)
        {
            _2448 = abs((1.0 - _1809) / _1818);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1818 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1809 + 1.0) / _1818);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2448 = frontier_phi_46_43_ladder;
        }
        float _2450 = isnan(_2235) ? _1959 : (isnan(_1959) ? _2235 : min(_1959, _2235));
        float _2451 = isnan(_2448) ? _2450 : (isnan(_2450) ? _2448 : min(_2450, _2448));
        float _2455 = (_2451 * _1812) + _1801;
        float _2456 = (_2451 * _1815) + _1805;
        float _2457 = (_2451 * _1818) + _1809;
        float _2458 = _2451 * 9.9999997473787516355514526367188e-05;
        float _2459 = (-1.0) - _2458;
        float _2461 = _2458 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2457 > _2461) || ((_2457 < _2459) || ((_2456 > _2461) || ((_2456 < _2459) || ((_2455 < _2459) || (_2455 > _2461))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2656 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2457, cbModelParam._m0[17u].z, fma(_2456, cbModelParam._m0[17u].y, _2455 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2457, cbModelParam._m0[18u].z, fma(_2456, cbModelParam._m0[18u].y, _2455 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2457, cbModelParam._m0[19u].z, fma(_2456, cbModelParam._m0[19u].y, _2455 * cbModelParam._m0[19u].x))), _1748);
            frontier_phi_22_46_ladder = _2656.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2656.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2656.x * cbModelParam._m0[1u].z;
        }
        _1837 = frontier_phi_22_46_ladder_2;
        _1839 = frontier_phi_22_46_ladder_1;
        _1841 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1821 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_848, _849, _850), _1748);
        _1837 = _1821.x * cbModelParam._m0[1u].z;
        _1839 = _1821.y * cbModelParam._m0[1u].z;
        _1841 = _1821.z * cbModelParam._m0[1u].z;
    }
    float _1854 = (((_875 * _824) + _876) * _840) * ((cbModelParam._m0[1u].w * (_1837 - _1739)) + _1739);
    float _1856 = (((_875 * _826) + _876) * _840) * ((cbModelParam._m0[1u].w * (_1839 - _1741)) + _1741);
    float _1858 = (((_875 * _827) + _876) * _840) * ((cbModelParam._m0[1u].w * (_1841 - _1743)) + _1743);
    float _1861 = fma(_1858, cbSceneParam._m0[89u].z, fma(_1856, cbSceneParam._m0[89u].y, _1854 * cbSceneParam._m0[89u].x));
    float _1864 = fma(_1858, cbSceneParam._m0[90u].z, fma(_1856, cbSceneParam._m0[90u].y, _1854 * cbSceneParam._m0[90u].x));
    float _1867 = fma(_1858, cbSceneParam._m0[91u].z, fma(_1856, cbSceneParam._m0[91u].y, _1854 * cbSceneParam._m0[91u].x));
    uvec4 _1877 = floatBitsToUint(cbInstanceData._m0[_243 + 5u]);
    uint _1879 = _1877.x * 14u;
    uint _1880 = _1879 + 13u;
    float _1887 = _840 + (-1.0);
    float _1892 = (cbLight._m0[_1880].x * _1887) + 1.0;
    float _1893 = (cbLight._m0[_1880].y * _1887) + 1.0;
    float _1894 = (cbLight._m0[_1880].z * _1887) + 1.0;
    float _1895 = (cbLight._m0[_1880].w * _1887) + 1.0;
    uint _1896 = _1879 + 5u;
    float _1902 = isnan(1.0) ? _1893 : (isnan(_1893) ? 1.0 : min(_1893, 1.0));
    uint _1906 = _1879 + 4u;
    float _1913 = isnan(1.0) ? _1892 : (isnan(_1892) ? 1.0 : min(_1892, 1.0));
    uint _1917 = _1879 | 1u;
    float _1928 = dot(vec3(cbLight._m0[_1879].xyz), vec3(_672, _673, _674));
    float _1931 = dot(vec3(cbLight._m0[_1917].xyz), vec3(_672, _673, _674));
    float _4104 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _4115 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _1936 = (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * 0.3183098733425140380859375;
    float _1938 = (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * 0.3183098733425140380859375;
    float _1945 = ((cbLight._m0[_1896].x * _1902) * _1938) + ((cbLight._m0[_1906].x * _1913) * _1936);
    float _1946 = ((_1902 * cbLight._m0[_1896].y) * _1938) + ((_1913 * cbLight._m0[_1906].y) * _1936);
    float _1947 = ((_1902 * cbLight._m0[_1896].z) * _1938) + ((_1913 * cbLight._m0[_1906].z) * _1936);
    uvec4 _1951 = floatBitsToUint(cbLight._m0[_1879 + 12u]);
    bool _1953 = _1951.x == 0u;
    float _1964;
    float _1966;
    float _1968;
    if (_1953)
    {
        _1964 = _1945;
        _1966 = _1946;
        _1968 = _1947;
    }
    else
    {
        uint _1972 = _1879 + 6u;
        float _1988 = (dot(vec3(cbLight._m0[_1879 + 2u].xyz), vec3(_672, _673, _674)) * 0.5) + 0.5;
        float _1989 = _1988 * _1988;
        float _4126 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        float _1990 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1991 = isnan(1.0) ? _1894 : (isnan(_1894) ? 1.0 : min(_1894, 1.0));
        _1964 = (((cbLight._m0[_1972].x * 0.3183098733425140380859375) * _1990) * _1991) + _1945;
        _1966 = (((cbLight._m0[_1972].y * 0.3183098733425140380859375) * _1990) * _1991) + _1946;
        _1968 = (((cbLight._m0[_1972].z * 0.3183098733425140380859375) * _1990) * _1991) + _1947;
    }
    bool _1971 = _1951.y == 0u;
    float _2009;
    float _2011;
    float _2013;
    if (_1971)
    {
        _2009 = _1964;
        _2011 = _1966;
        _2013 = _1968;
    }
    else
    {
        uint _2179 = _1879 + 7u;
        float _2195 = (dot(vec3(cbLight._m0[_1879 + 3u].xyz), vec3(_672, _673, _674)) * 0.5) + 0.5;
        float _2196 = _2195 * _2195;
        float _4142 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        float _2197 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _2198 = isnan(1.0) ? _1895 : (isnan(_1895) ? 1.0 : min(_1895, 1.0));
        _2009 = (((cbLight._m0[_2179].x * 0.3183098733425140380859375) * _2197) * _2198) + _1964;
        _2011 = (((cbLight._m0[_2179].y * 0.3183098733425140380859375) * _2197) * _2198) + _1966;
        _2013 = (((cbLight._m0[_2179].z * 0.3183098733425140380859375) * _2197) * _2198) + _1968;
    }
    uint _2016 = _1879 + 8u;
    float _2029 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1879].w)) * _675) * 0.949999988079071044921875);
    float _2030 = _2029 * _2029;
    float _2031 = cbLight._m0[_1879].x + _751;
    float _2032 = cbLight._m0[_1879].y + _752;
    float _2033 = cbLight._m0[_1879].z + _753;
    float _2037 = inversesqrt(dot(vec3(_2031, _2032, _2033), vec3(_2031, _2032, _2033)));
    float _2038 = _2037 * _2031;
    float _2039 = _2037 * _2032;
    float _2040 = _2037 * _2033;
    float _2041 = dot(vec3(_672, _673, _674), vec3(cbLight._m0[_1879].xyz));
    float _4158 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2044 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
    float _4169 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _2045 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _2046 = dot(vec3(_672, _673, _674), vec3(_2038, _2039, _2040));
    float _4180 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _2049 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    float _2050 = dot(vec3(cbLight._m0[_1879].xyz), vec3(_2038, _2039, _2040));
    float _4191 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2054 = _2030 * _2030;
    float _2058 = ((_2049 * _2049) * (_2054 + (-1.0))) + 1.0;
    float _2066 = exp2(log2(1.0 - (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0)))) * 5.0);
    float _2067 = 0.959999978542327880859375 - _821;
    float _2069 = 0.959999978542327880859375 - _822;
    float _2070 = 0.959999978542327880859375 - _823;
    float _2077 = 1.0 - _2030;
    float _2088 = (0.5 / (((_2045 * ((_2044 * _2077) + _2030)) + 9.9999999392252902907785028219223e-09) + (((_2045 * _2077) + _2030) * _2044))) * _2044;
    float _4202 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2090 = (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_2054 / ((_2058 * _2058) * 3.141590118408203125));
    uint _2101 = _1879 + 9u;
    float _2112 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1917].w)) * _675) * 0.949999988079071044921875);
    float _2113 = _2112 * _2112;
    float _2114 = cbLight._m0[_1917].x + _751;
    float _2115 = cbLight._m0[_1917].y + _752;
    float _2116 = cbLight._m0[_1917].z + _753;
    float _2120 = inversesqrt(dot(vec3(_2114, _2115, _2116), vec3(_2114, _2115, _2116)));
    float _2121 = _2120 * _2114;
    float _2122 = _2120 * _2115;
    float _2123 = _2120 * _2116;
    float _2124 = dot(vec3(_672, _673, _674), vec3(cbLight._m0[_1917].xyz));
    float _4213 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2127 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
    float _2128 = dot(vec3(_672, _673, _674), vec3(_2121, _2122, _2123));
    float _4224 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2131 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
    float _2132 = dot(vec3(cbLight._m0[_1917].xyz), vec3(_2121, _2122, _2123));
    float _4235 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2136 = _2113 * _2113;
    float _2140 = ((_2131 * _2131) * (_2136 + (-1.0))) + 1.0;
    float _2147 = exp2(log2(1.0 - (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0)))) * 5.0);
    float _2154 = 1.0 - _2113;
    float _2164 = (0.5 / (((_2045 * ((_2127 * _2154) + _2113)) + 9.9999999392252902907785028219223e-09) + (((_2045 * _2154) + _2113) * _2127))) * _2127;
    float _4246 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2166 = (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_2136 / ((_2140 * _2140) * 3.141590118408203125));
    float _2176 = (((((_2147 * _2067) + _824) * cbLight._m0[_2101].x) * _2166) * _1902) + (((((_2066 * _2067) + _824) * cbLight._m0[_2016].x) * _2090) * _1913);
    float _2177 = (((((_2147 * _2069) + _826) * cbLight._m0[_2101].y) * _2166) * _1902) + (((((_2066 * _2069) + _826) * cbLight._m0[_2016].y) * _2090) * _1913);
    float _2178 = (((((_2147 * _2070) + _827) * cbLight._m0[_2101].z) * _2166) * _1902) + (((((_2066 * _2070) + _827) * cbLight._m0[_2016].z) * _2090) * _1913);
    float _2240;
    float _2242;
    float _2244;
    if (_1953)
    {
        _2240 = _2176;
        _2242 = _2177;
        _2244 = _2178;
    }
    else
    {
        uint _2246 = _1879 + 2u;
        uint _2250 = _1879 + 10u;
        float _2264 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2246].w)) * _675) * 0.949999988079071044921875);
        float _2265 = _2264 * _2264;
        float _2266 = cbLight._m0[_2246].x + _751;
        float _2267 = cbLight._m0[_2246].y + _752;
        float _2268 = cbLight._m0[_2246].z + _753;
        float _2272 = inversesqrt(dot(vec3(_2266, _2267, _2268), vec3(_2266, _2267, _2268)));
        float _2273 = _2272 * _2266;
        float _2274 = _2272 * _2267;
        float _2275 = _2272 * _2268;
        float _2276 = dot(vec3(_672, _673, _674), vec3(cbLight._m0[_2246].xyz));
        float _4257 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2279 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _2280 = dot(vec3(_672, _673, _674), vec3(_2273, _2274, _2275));
        float _4268 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        float _2283 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _2284 = dot(vec3(cbLight._m0[_2246].xyz), vec3(_2273, _2274, _2275));
        float _4279 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
        float _2288 = _2265 * _2265;
        float _2292 = ((_2283 * _2283) * (_2288 + (-1.0))) + 1.0;
        float _2299 = exp2(log2(1.0 - (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0)))) * 5.0);
        float _2306 = 1.0 - _2265;
        float _2316 = (0.5 / (((_2045 * ((_2279 * _2306) + _2265)) + 9.9999999392252902907785028219223e-09) + (((_2045 * _2306) + _2265) * _2279))) * _2279;
        float _4290 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        float _2318 = (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_2288 / ((_2292 * _2292) * 3.141590118408203125));
        float _2319 = isnan(1.0) ? _1894 : (isnan(_1894) ? 1.0 : min(_1894, 1.0));
        _2240 = (((((_2299 * _2067) + _824) * cbLight._m0[_2250].x) * _2318) * _2319) + _2176;
        _2242 = (((((_2299 * _2069) + _826) * cbLight._m0[_2250].y) * _2318) * _2319) + _2177;
        _2244 = (((((_2299 * _2070) + _827) * cbLight._m0[_2250].z) * _2318) * _2319) + _2178;
    }
    float _2354;
    float _2356;
    float _2358;
    if (_1971)
    {
        _2354 = _2240;
        _2356 = _2242;
        _2358 = _2244;
    }
    else
    {
        uint _2365 = _1879 + 3u;
        uint _2369 = _1879 + 11u;
        float _2383 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2365].w)) * _675) * 0.949999988079071044921875);
        float _2384 = _2383 * _2383;
        float _2385 = cbLight._m0[_2365].x + _751;
        float _2386 = cbLight._m0[_2365].y + _752;
        float _2387 = cbLight._m0[_2365].z + _753;
        float _2391 = inversesqrt(dot(vec3(_2385, _2386, _2387), vec3(_2385, _2386, _2387)));
        float _2392 = _2391 * _2385;
        float _2393 = _2391 * _2386;
        float _2394 = _2391 * _2387;
        float _2395 = dot(vec3(_672, _673, _674), vec3(cbLight._m0[_2365].xyz));
        float _4306 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        float _2398 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _2399 = dot(vec3(_672, _673, _674), vec3(_2392, _2393, _2394));
        float _4317 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
        float _2402 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _2403 = dot(vec3(cbLight._m0[_2365].xyz), vec3(_2392, _2393, _2394));
        float _4328 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2407 = _2384 * _2384;
        float _2411 = ((_2402 * _2402) * (_2407 + (-1.0))) + 1.0;
        float _2418 = exp2(log2(1.0 - (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) * 5.0);
        float _2425 = 1.0 - _2384;
        float _2435 = (0.5 / (((_2045 * ((_2398 * _2425) + _2384)) + 9.9999999392252902907785028219223e-09) + (((_2045 * _2425) + _2384) * _2398))) * _2398;
        float _4339 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
        float _2437 = (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_2407 / ((_2411 * _2411) * 3.141590118408203125));
        float _2438 = isnan(1.0) ? _1895 : (isnan(_1895) ? 1.0 : min(_1895, 1.0));
        _2354 = (((((_2418 * _2067) + _824) * cbLight._m0[_2369].x) * _2437) * _2438) + _2240;
        _2356 = (((((_2418 * _2069) + _826) * cbLight._m0[_2369].y) * _2437) * _2438) + _2242;
        _2358 = (((((_2418 * _2070) + _827) * cbLight._m0[_2369].z) * _2437) * _2438) + _2244;
    }
    float _2573;
    float _2575;
    float _2577;
    float _2579;
    float _2581;
    float _2583;
    if (_1877.y == 0u)
    {
        float _2513 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2514 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2513;
        float _2515 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2513;
        float _2516 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2513;
        uvec4 _2528 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2529 = _2528.x;
        uint _2540 = uint((float(_2528.y) * floor(float(uint(cbSceneParam._m0[85u].y * _760) / _2529))) + floor(float(uint(cbSceneParam._m0[85u].x * _759) / _2529)));
        float _2550 = (log2(_2516 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2551 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        uint _2554 = uint(isnan(14.0) ? _2551 : (isnan(_2551) ? 14.0 : min(_2551, 14.0)));
        uvec4 _2559 = texelFetch(g_lightClusterGridBuffer, int(((_2554 << 2u) + (_2540 << 6u)) >> 2u));
        uint _2560 = _2559.x;
        uint _2561 = _2528.z;
        float _2661;
        float _2663;
        float _2665;
        float _2667;
        float _2669;
        float _2671;
        if (((((1u << ((_2561 >> 4u) & 15u)) + 4294967295u) & _2560) == 0u) || ((_2561 & 240u) == 0u))
        {
            _2661 = 0.0;
            _2663 = 0.0;
            _2665 = 0.0;
            _2667 = 0.0;
            _2669 = 0.0;
            _2671 = 0.0;
        }
        else
        {
            float _2662;
            float _2664;
            float _2666;
            float _2668;
            float _2670;
            float _2672;
            float _2805 = 0.0;
            float _2806 = 0.0;
            float _2807 = 0.0;
            float _2808 = 0.0;
            float _2809 = 0.0;
            float _2810 = 0.0;
            uint _2811 = 0u;
            uint _2820;
            bool _2821;
            for (;;)
            {
                _2820 = texelFetch(g_lightClassification, int((((_2554 << 5u) + (_2540 << 9u)) + (_2811 << 2u)) >> 2u)).x;
                _2821 = _2820 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2821)
                {
                    frontier_phi_61_pred = _2805;
                    frontier_phi_61_pred_1 = _2810;
                    frontier_phi_61_pred_2 = _2809;
                    frontier_phi_61_pred_3 = _2808;
                    frontier_phi_61_pred_4 = _2807;
                    frontier_phi_61_pred_5 = _2806;
                }
                else
                {
                    float _2929;
                    float _2930;
                    float _2931;
                    float _2932;
                    float _2933;
                    float _2934;
                    uint _2935;
                    _2929 = _2805;
                    _2930 = _2806;
                    _2931 = _2807;
                    _2932 = _2808;
                    _2933 = _2809;
                    _2934 = _2810;
                    _2935 = _2820;
                    float _2861;
                    float _2862;
                    float _2863;
                    float _2864;
                    float _2865;
                    float _2866;
                    for (;;)
                    {
                        uint _2939 = uint(findLSB(_2935)) + (_2811 << 5u);
                        uint _2936 = (_2935 + 4294967295u) & _2935;
                        uint _2941 = _2939 * 48u;
                        vec4 _2955 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2941)).x, texelFetch(g_PointLightRenderingBuffer, int(_2941 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2941 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2941 + 3u)).x));
                        uint _2961 = (_2939 * 48u) + 4u;
                        vec4 _2974 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2961)).x, texelFetch(g_PointLightRenderingBuffer, int(_2961 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2961 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2961 + 3u)).x));
                        uint _2980 = (_2939 * 48u) + 8u;
                        vec3 _2991 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2980)).x, texelFetch(g_PointLightRenderingBuffer, int(_2980 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2980 + 2u)).x));
                        float _2995 = _2955.x - _2514;
                        float _2996 = _2955.y - _2515;
                        float _2997 = _2955.z - _2516;
                        float _2998 = dot(vec3(_2995, _2996, _2997), vec3(_2995, _2996, _2997));
                        float _3001 = inversesqrt(_2998);
                        float _3002 = _3001 * _2995;
                        float _3003 = _3001 * _2996;
                        float _3004 = _3001 * _2997;
                        float _3005 = dot(vec3(_781, _784, _787), vec3(_3002, _3003, _3004));
                        float _3010 = 1.0 - (_2998 * _2955.w);
                        float _4365 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
                        float _3011 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
                        float _3012 = sqrt(_2998) * _2974.w;
                        float _3015 = 1.39999997615814208984375 / (_3012 + 1.39999997615814208984375);
                        float _3016 = _3015 * _3015;
                        float _3019 = ((1.0 - _3016) * _3005) + _3016;
                        float _3022 = _3012 * _3012;
                        float _3026 = ((isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0))) * _3011) / ((_3022 * 0.699999988079071044921875) + 1.0);
                        float _3030 = (-0.0) - _2514;
                        float _3031 = (-0.0) - _2515;
                        float _3032 = (-0.0) - _2516;
                        float _3036 = inversesqrt(dot(vec3(_3030, _3031, _3032), vec3(_3030, _3031, _3032)));
                        float _3037 = _3036 * _3030;
                        float _3038 = _3036 * _3031;
                        float _3039 = _3036 * _3032;
                        float _3047 = exp2(log2(1.0 / ((_3022 * 3.5) + 5.0)) * 0.25);
                        float _3048 = 1.0 - _856;
                        float _3055 = sqrt(1.0 - ((1.0 - (_3048 * _3048)) * (1.0 - (_3047 * _3047))));
                        float _3056 = _3055 * _3055;
                        float _3057 = _3056 * _3056;
                        float _3058 = _3037 + _3002;
                        float _3059 = _3038 + _3003;
                        float _3060 = _3039 + _3004;
                        float _3064 = inversesqrt(dot(vec3(_3058, _3059, _3060), vec3(_3058, _3059, _3060)));
                        float _3068 = dot(vec3(_781, _784, _787), vec3(_3037, _3038, _3039));
                        float _4381 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                        float _3071 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
                        float _3072 = dot(vec3(_781, _784, _787), vec3(_3064 * _3058, _3064 * _3059, _3064 * _3060));
                        float _4392 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                        float _3075 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
                        float _3079 = ((_3075 * _3075) * (_3057 + (-1.0))) + 1.0;
                        float _3080 = _3015 * _3056;
                        float _3081 = _3080 * _3080;
                        float _3084 = ((1.0 - _3081) * _3005) + _3081;
                        float _4403 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
                        float _3085 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
                        float _3086 = 1.0 - _3056;
                        float _3096 = (0.5 / (((_3085 * ((_3071 * _3086) + _3056)) + 9.9999999392252902907785028219223e-09) + (((_3085 * _3086) + _3056) * _3071))) * _3085;
                        float _4414 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
                        float _3107 = (((_3057 * 3.1415927410125732421875) * (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0)))) / ((_3079 * _3079) * ((_3022 * 2.1991131305694580078125) + 3.141590118408203125))) * _3011;
                        _2864 = (_3026 * _2974.x) + _2932;
                        _2865 = (_3026 * _2974.y) + _2933;
                        _2866 = (_3026 * _2974.z) + _2934;
                        _2861 = (_3107 * _2991.x) + _2929;
                        _2862 = (_3107 * _2991.y) + _2930;
                        _2863 = (_3107 * _2991.z) + _2931;
                        if (_2936 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2929 = _2861;
                            _2930 = _2862;
                            _2931 = _2863;
                            _2932 = _2864;
                            _2933 = _2865;
                            _2934 = _2866;
                            _2935 = _2936;
                        }
                    }
                    frontier_phi_61_pred = _2861;
                    frontier_phi_61_pred_1 = _2866;
                    frontier_phi_61_pred_2 = _2865;
                    frontier_phi_61_pred_3 = _2864;
                    frontier_phi_61_pred_4 = _2863;
                    frontier_phi_61_pred_5 = _2862;
                }
                _2662 = frontier_phi_61_pred;
                _2672 = frontier_phi_61_pred_1;
                _2670 = frontier_phi_61_pred_2;
                _2668 = frontier_phi_61_pred_3;
                _2666 = frontier_phi_61_pred_4;
                _2664 = frontier_phi_61_pred_5;
                uint _2812 = _2811 + 1u;
                if (_2812 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2805 = _2662;
                    _2806 = _2664;
                    _2807 = _2666;
                    _2808 = _2668;
                    _2809 = _2670;
                    _2810 = _2672;
                    _2811 = _2812;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2661 = _2662;
            _2663 = _2664;
            _2665 = _2666;
            _2667 = _2668;
            _2669 = _2670;
            _2671 = _2672;
        }
        uvec4 _2675 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2676 = _2675.z;
        uint _2678 = (_2676 >> 8u) & 15u;
        float _2773;
        float _2775;
        float _2777;
        float _2779;
        float _2781;
        float _2783;
        if (((4294967295u << _2678) & _2560) == 0u)
        {
            _2773 = _2661;
            _2775 = _2663;
            _2777 = _2665;
            _2779 = _2667;
            _2781 = _2669;
            _2783 = _2671;
        }
        else
        {
            float _2798 = inversesqrt(dot(vec3(_2514, _2515, _2516), vec3(_2514, _2515, _2516)));
            float _2799 = _2798 * _2514;
            float _2800 = _2798 * _2515;
            float _2801 = _2798 * _2516;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2678 < ((_2676 >> 12u) & 15u))
            {
                float _2774;
                float _2776;
                float _2778;
                float _2780;
                float _2782;
                float _2784;
                float _2912 = _2661;
                float _2913 = _2663;
                float _2914 = _2665;
                float _2915 = _2667;
                float _2916 = _2669;
                float _2917 = _2671;
                uint _2918 = _2678;
                uint _2927;
                bool _2928;
                for (;;)
                {
                    _2927 = texelFetch(g_lightClassification, int((((_2554 << 5u) + (_2540 << 9u)) + (_2918 << 2u)) >> 2u)).x;
                    _2928 = _2927 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2928)
                    {
                        frontier_phi_67_pred = _2915;
                        frontier_phi_67_pred_1 = _2916;
                        frontier_phi_67_pred_2 = _2917;
                        frontier_phi_67_pred_3 = _2914;
                        frontier_phi_67_pred_4 = _2913;
                        frontier_phi_67_pred_5 = _2912;
                    }
                    else
                    {
                        float _3112;
                        float _3113;
                        float _3114;
                        float _3115;
                        float _3116;
                        float _3117;
                        float _3406;
                        float _3407;
                        float _3408;
                        float _3409;
                        float _3410;
                        float _3411;
                        float _3125 = _2912;
                        float _3126 = _2913;
                        float _3127 = _2914;
                        float _3128 = _2915;
                        float _3129 = _2916;
                        float _3130 = _2917;
                        uint _3131 = _2927;
                        uint _3132;
                        vec4 _3157;
                        float _3158;
                        vec4 _3173;
                        vec3 _3185;
                        vec4 _3201;
                        vec4 _3216;
                        float _3262;
                        bool _3263;
                        for (;;)
                        {
                            uint _3142 = ((_2918 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3131));
                            _3132 = (_3131 + 4294967295u) & _3131;
                            uint _3144 = _3142 * 40u;
                            _3157 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3144)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 3u)).x));
                            _3158 = _3157.w;
                            uint _3160 = (_3142 * 40u) + 4u;
                            _3173 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3160)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 3u)).x));
                            uint _3175 = (_3142 * 40u) + 8u;
                            _3185 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3175)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 2u)).x));
                            uint _3188 = (_3142 * 40u) + 16u;
                            _3201 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3188)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 3u)).x));
                            uint _3203 = (_3142 * 40u) + 20u;
                            _3216 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3203)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 3u)).x));
                            uint _3218 = (_3142 * 40u) + 24u;
                            vec4 _3231 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3218)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 3u)).x));
                            uint _3237 = (_3142 * 40u) + 28u;
                            vec4 _3250 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3237)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 3u)).x));
                            _3262 = fma(_2516, _3250.z, fma(_2515, _3250.y, _3250.x * _2514)) + _3250.w;
                            _3263 = !((fma(_2516, _3231.z, fma(_2515, _3231.y, _3231.x * _2514)) + _3231.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3263)
                            {
                                float _3290 = _3157.x - _2514;
                                float _3291 = _3157.y - _2515;
                                float _3292 = _3157.z - _2516;
                                float _3293 = dot(vec3(_3290, _3291, _3292), vec3(_3290, _3291, _3292));
                                float _3296 = inversesqrt(_3293);
                                float _3297 = _3296 * _3290;
                                float _3298 = _3296 * _3291;
                                float _3299 = _3296 * _3292;
                                float _3303 = 1.0 - (_3293 / (_3158 * _3158));
                                float _4425 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                                float _3304 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                                float _3308 = sqrt(_3293) * _3173.w;
                                float _3310 = 1.39999997615814208984375 / (_3308 + 1.39999997615814208984375);
                                float _3311 = _3310 * _3310;
                                float _3314 = ((1.0 - _3311) * dot(vec3(_3297, _3298, _3299), vec3(_781, _784, _787))) + _3311;
                                float _3317 = _3308 * _3308;
                                float _3321 = (fma(_2516, _3201.z, fma(_2515, _3201.y, _3201.x * _2514)) + _3201.w) / _3262;
                                float _3322 = (fma(_2516, _3216.z, fma(_2515, _3216.y, _3216.x * _2514)) + _3216.w) / _3262;
                                float _3326 = 1.0 - dot(vec2(_3321, _3322), vec2(_3321, _3322));
                                float _4441 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                                float _3327 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
                                float _3328 = _3327 * (((isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0))) * _3304) / ((_3317 * 0.699999988079071044921875) + 1.0));
                                float _3340 = exp2(log2(1.0 / ((_3317 * 3.5) + 5.0)) * 0.25);
                                float _3341 = 1.0 - _856;
                                float _3348 = sqrt(1.0 - ((1.0 - (_3341 * _3341)) * (1.0 - (_3340 * _3340))));
                                float _3349 = _3348 * _3348;
                                float _3350 = _3349 * _3349;
                                float _3351 = _3297 - _2799;
                                float _3352 = _3298 - _2800;
                                float _3353 = _3299 - _2801;
                                float _3357 = inversesqrt(dot(vec3(_3351, _3352, _3353), vec3(_3351, _3352, _3353)));
                                float _3361 = dot(vec3(_781, _784, _787), vec3((-0.0) - _2799, (-0.0) - _2800, (-0.0) - _2801));
                                float _4452 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                                float _3364 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
                                float _3365 = dot(vec3(_781, _784, _787), vec3(_3357 * _3351, _3357 * _3352, _3357 * _3353));
                                float _4463 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                                float _3368 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
                                float _3372 = ((_3368 * _3368) * (_3350 + (-1.0))) + 1.0;
                                float _3373 = _3310 * _3349;
                                float _3374 = _3373 * _3373;
                                float _3380 = ((1.0 - _3374) * dot(vec3(_781, _784, _787), vec3(_3297, _3298, _3299))) + _3374;
                                float _4474 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                                float _3381 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
                                float _3382 = 1.0 - _3349;
                                float _3392 = (0.5 / (((_3381 * ((_3364 * _3382) + _3349)) + 9.9999999392252902907785028219223e-09) + (((_3381 * _3382) + _3349) * _3364))) * _3381;
                                float _4485 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                                float _3402 = (_3327 * _3304) * (((_3350 * 3.1415927410125732421875) * (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0)))) / ((_3372 * _3372) * ((_3317 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3402 * _3185.x;
                                frontier_phi_73_pred_1 = _3402 * _3185.y;
                                frontier_phi_73_pred_2 = _3328 * _3173.z;
                                frontier_phi_73_pred_3 = _3328 * _3173.y;
                                frontier_phi_73_pred_4 = _3328 * _3173.x;
                                frontier_phi_73_pred_5 = _3402 * _3185.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3406 = frontier_phi_73_pred;
                            _3407 = frontier_phi_73_pred_1;
                            _3411 = frontier_phi_73_pred_2;
                            _3410 = frontier_phi_73_pred_3;
                            _3409 = frontier_phi_73_pred_4;
                            _3408 = frontier_phi_73_pred_5;
                            _3115 = _3409 + _3128;
                            _3116 = _3410 + _3129;
                            _3117 = _3411 + _3130;
                            _3112 = _3406 + _3125;
                            _3113 = _3407 + _3126;
                            _3114 = _3408 + _3127;
                            if (_3132 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3125 = _3112;
                                _3126 = _3113;
                                _3127 = _3114;
                                _3128 = _3115;
                                _3129 = _3116;
                                _3130 = _3117;
                                _3131 = _3132;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3115;
                        frontier_phi_67_pred_1 = _3116;
                        frontier_phi_67_pred_2 = _3117;
                        frontier_phi_67_pred_3 = _3114;
                        frontier_phi_67_pred_4 = _3113;
                        frontier_phi_67_pred_5 = _3112;
                    }
                    _2780 = frontier_phi_67_pred;
                    _2782 = frontier_phi_67_pred_1;
                    _2784 = frontier_phi_67_pred_2;
                    _2778 = frontier_phi_67_pred_3;
                    _2776 = frontier_phi_67_pred_4;
                    _2774 = frontier_phi_67_pred_5;
                    uint _2919 = _2918 + 1u;
                    if (_2919 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2912 = _2774;
                        _2913 = _2776;
                        _2914 = _2778;
                        _2915 = _2780;
                        _2916 = _2782;
                        _2917 = _2784;
                        _2918 = _2919;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2782;
                frontier_phi_55_56_ladder_1 = _2784;
                frontier_phi_55_56_ladder_2 = _2780;
                frontier_phi_55_56_ladder_3 = _2778;
                frontier_phi_55_56_ladder_4 = _2776;
                frontier_phi_55_56_ladder_5 = _2774;
            }
            else
            {
                frontier_phi_55_56_ladder = _2669;
                frontier_phi_55_56_ladder_1 = _2671;
                frontier_phi_55_56_ladder_2 = _2667;
                frontier_phi_55_56_ladder_3 = _2665;
                frontier_phi_55_56_ladder_4 = _2663;
                frontier_phi_55_56_ladder_5 = _2661;
            }
            _2773 = frontier_phi_55_56_ladder_5;
            _2775 = frontier_phi_55_56_ladder_4;
            _2777 = frontier_phi_55_56_ladder_3;
            _2779 = frontier_phi_55_56_ladder_2;
            _2781 = frontier_phi_55_56_ladder;
            _2783 = frontier_phi_55_56_ladder_1;
        }
        float _2788 = isnan(1.0) ? _840 : (isnan(_840) ? 1.0 : min(_840, 1.0));
        _2573 = (_2788 * _2779) + _2009;
        _2575 = (_2788 * _2781) + _2011;
        _2577 = (_2788 * _2783) + _2013;
        _2579 = ((_2773 * _824) * _2788) + _2354;
        _2581 = ((_2775 * _826) * _2788) + _2356;
        _2583 = ((_2777 * _827) * _2788) + _2358;
    }
    else
    {
        _2573 = _2009;
        _2575 = _2011;
        _2577 = _2013;
        _2579 = _2354;
        _2581 = _2356;
        _2583 = _2358;
    }
    float _4501 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _4512 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _4523 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    uint _2603 = _243 + 6u;
    float _2611 = _759 / cbSceneParam._m0[86u].x;
    float _2612 = _760 / cbSceneParam._m0[86u].y;
    vec4 _2626 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2611, _2612, (log2((isnan(cbSceneParam._m0[77u].w) ? _694 : (isnan(_694) ? cbSceneParam._m0[77u].w : min(_694, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2628 = _2626.x;
    float _2629 = _2626.y;
    float _2630 = _2626.z;
    float _2631 = _2626.w;
    float _2723;
    float _2725;
    float _2727;
    float _2729;
    if (_694 > cbSceneParam._m0[78u].w)
    {
        float _2686 = isnan(_694) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _694 : min(cbSceneParam._m0[80u].w, _694));
        float _2687 = _2686 / _694;
        float _2698 = _2687 * _744;
        float _2699 = _745 * _2687;
        float _2700 = (-0.0) - _2699;
        float _2701 = _2687 * _746;
        float _2703 = (cbSceneParam._m0[77u].w * _2700) / _2686;
        float _2704 = _2703 + cbSceneParam._m0[79u].w;
        float _2705 = cbSceneParam._m0[79u].w - _2699;
        float _2711 = sqrt(((_2698 * _2698) + (_2699 * _2699)) + (_2701 * _2701));
        float _2714 = (1.0 - (cbSceneParam._m0[77u].w / _2686)) * _2711;
        float _2719 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2721 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2874;
        if (abs((_2700 - _2703) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2874 = ((((_2704 > 0.0) ? exp2(_2719 * _2704) : (2.0 - exp2(_2721 * _2704))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2714;
        }
        else
        {
            float _2834 = 1.0 / cbSceneParam._m0[80u].x;
            float _2835 = isnan(_2705) ? _2704 : (isnan(_2704) ? _2705 : max(_2704, _2705));
            float _2836 = isnan(_2705) ? _2704 : (isnan(_2704) ? _2705 : min(_2704, _2705));
            float _2845 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : min(_2835, 0.0));
            float _2846 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : min(_2836, 0.0));
            _2874 = ((abs(_2711 / _2700) * cbSceneParam._m0[80u].y) * ((((_2845 - _2846) * 2.0) - ((exp2(_2719 * (isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0)))) - exp2(_2719 * (isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0))))) * _2834)) - ((exp2(_2721 * _2845) - exp2(_2721 * _2846)) * _2834))) + (_2714 * cbSceneParam._m0[80u].z);
        }
        vec4 _2876 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2611, _2612, 1.0), 0.0);
        float _2885 = exp2((_2874 * (-1.44269502162933349609375)) * (1.0 - _2876.w));
        float _2886 = log2(_2885);
        float _2902 = log2(_2631);
        _2723 = (exp2(_2902 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2886 * cbSceneParam._m0[78u].x)) * _2876.x) / cbSceneParam._m0[78u].x)) + _2628;
        _2725 = (exp2(_2902 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2886 * cbSceneParam._m0[78u].y)) * _2876.y) / cbSceneParam._m0[78u].y)) + _2629;
        _2727 = (exp2(_2902 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2886 * cbSceneParam._m0[78u].z)) * _2876.z) / cbSceneParam._m0[78u].z)) + _2630;
        _2729 = _2885 * _2631;
    }
    else
    {
        _2723 = _2628;
        _2725 = _2629;
        _2727 = _2630;
        _2729 = _2631;
    }
    float _2741 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2742 = _2741 == 3.0;
    float _2743 = log2(_2729);
    float _2750 = exp2(_2743 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * (_2573 + ((isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))) * _840))) + ((_2579 + ((isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0))) * _1648)) * cbPerFrame._m0[3u].x));
    float _2751 = exp2(_2743 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (_2575 + ((isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))) * _840))) + ((_2581 + ((isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))) * _1648)) * cbPerFrame._m0[3u].x));
    float _2752 = exp2(_2743 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * (_2577 + ((isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))) * _840))) + ((_2583 + ((isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))) * _1648)) * cbPerFrame._m0[3u].x));
    float _2761 = (_2741 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2761 * (_2742 ? _2750 : (_2750 + (cbSceneParam._m0[72u].w * _2723)));
    SV_Target.y = _2761 * (_2742 ? _2751 : (_2751 + (cbSceneParam._m0[72u].w * _2725)));
    SV_Target.z = _2761 * (_2742 ? _2752 : (_2752 + (cbSceneParam._m0[72u].w * _2727)));
    SV_Target.w = cbInstanceData._m0[_2603].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2603].w;
}


