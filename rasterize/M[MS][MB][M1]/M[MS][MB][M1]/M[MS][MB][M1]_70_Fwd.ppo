#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1186;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _243 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _243 + 1u;
    uint _252 = _243 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_243].x * cbInstanceData._m0[_243].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _283 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _289 = _283.x * cbMtdParam._m0[11u].x;
    float _290 = _283.y * cbMtdParam._m0[11u].y;
    float _291 = _283.z * cbMtdParam._m0[11u].z;
    vec4 _310 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _348 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _350 = _348.x;
    float _362 = dot(vec4(_350, _348.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _379 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_350 - _362) * cbMtdParam._m0[24u].y) + _362) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3516 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _380 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
    float _387 = (_380 * ((_310.x * cbMtdParam._m0[12u].x) - _289)) + _289;
    float _388 = (_380 * ((_310.y * cbMtdParam._m0[12u].y) - _290)) + _290;
    float _389 = (_380 * ((_310.z * cbMtdParam._m0[12u].z) - _291)) + _291;
    vec4 _402 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _419 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _421 = _419.x;
    float _422 = _419.y;
    float _423 = _419.z;
    float _432 = ((_402.z - _423) * _380) + _423;
    float _435 = ((((_402.x - _421) * _380) + _421) * 2.0) + (-1.0);
    float _437 = ((((_402.y - _422) * _380) + _422) * 2.0) + (-1.0);
    float _438 = dot(vec2(_435, _437), vec2(_435, _437));
    float _3527 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _443 = sqrt(1.0 - (isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0))));
    vec4 _459 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _471 = (((_459.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _435;
    float _472 = (((_459.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _437;
    vec4 _484 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _262) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _263) + cbTextureTilingScale._m0[19u].w));
    float _486 = _484.x;
    float _487 = 1.0 - _486;
    float _515 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_486 - _487) * cbMtdParam._m0[24u].w) + _487) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3538 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _516 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
    float _524 = ((((cbMtdParam._m0[10u].x - _387) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _516) + _387;
    float _525 = ((((cbMtdParam._m0[10u].y - _388) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _516) + _388;
    float _526 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _389)) * _516) + _389;
    vec4 _538 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _552 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _554 = _552.x;
    float _572 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _262) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _263) + cbTextureTilingScale._m0[9u].w)).x - _554) * _380) + _554;
    float _576 = ((_538.x - _572) * cbMtdParam._m0[19u].z) + _572;
    float _578 = _576 - (_576 * _516);
    float _582 = (cbMtdParam._m0[19u].w * (_459.z - _432)) + _432;
    float _586 = ((cbMtdParam._m0[23u].y - _582) * _516) + _582;
    vec4 _605 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _262) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _263) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _611 = (_605.x * 2.0) + (-1.0);
    float _612 = (_605.y * 2.0) + (-1.0);
    float _613 = dot(vec2(_611, _612), vec2(_611, _612));
    float _3549 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _629 = (_516 * (((cbMtdParam._m0[22u].z * _471) - _471) + _611)) + _471;
    float _630 = (_516 * (((cbMtdParam._m0[22u].z * _472) - _472) + _612)) + _472;
    float _631 = (_516 * (sqrt(1.0 - (isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0)))) - _443)) + _443;
    float _633 = cbMtdParam._m0[22u].x + _459.w;
    float _636 = fma(_631, _230 * NORMAL.x, fma(_630, _237 * TANGENT.x, (_223 * _215) * _629));
    float _639 = fma(_631, _230 * NORMAL.y, fma(_630, _237 * TANGENT.y, (_223 * _216) * _629));
    float _642 = fma(_631, _230 * NORMAL.z, fma(_630, _237 * TANGENT.z, (_223 * _217) * _629));
    float _646 = inversesqrt(dot(vec3(_636, _639, _642), vec3(_636, _639, _642)));
    float _647 = _646 * _636;
    float _648 = _646 * _639;
    float _649 = _646 * _642;
    float _3560 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _650 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
    float _3571 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _3582 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _3593 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _3604 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _3615 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _655 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
    float _669 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _709 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _719 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _709);
    float _720 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _709);
    float _721 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _709);
    float _725 = inversesqrt(dot(vec3(_719, _720, _721), vec3(_719, _720, _721)));
    float _726 = _719 * _725;
    float _727 = _720 * _725;
    float _728 = _721 * _725;
    float _734 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _735 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _753 = fma(_649, cbSceneParam._m0[5u].z, fma(_648, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _647));
    float _756 = fma(_649, cbSceneParam._m0[6u].z, fma(_648, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _647));
    float _759 = fma(_649, cbSceneParam._m0[7u].z, fma(_648, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _647));
    uint _773 = (_243 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _779 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0)))) * cbInstanceData._m0[_773].x;
    float _780 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0)))) * cbInstanceData._m0[_773].y;
    float _781 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0)))) * cbInstanceData._m0[_773].z;
    float _3626 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _782 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
    float _3637 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _783 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
    float _3648 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _784 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
    float _785 = 1.0 - _655;
    float _786 = _782 * _785;
    float _787 = _783 * _785;
    float _788 = _784 * _785;
    float _793 = (_782 + (-0.039999999105930328369140625)) * _655;
    float _794 = (_783 + (-0.039999999105930328369140625)) * _655;
    float _795 = (_784 + (-0.039999999105930328369140625)) * _655;
    float _796 = _793 + 0.039999999105930328369140625;
    float _798 = _794 + 0.039999999105930328369140625;
    float _799 = _795 + 0.039999999105930328369140625;
    vec4 _808 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _734, cbSceneParam._m0[86u].y * _735));
    float _812 = ((isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0))) * TEXCOORD_5.w) * _808.x;
    float _813 = dot(vec3(_647, _648, _649), vec3(_726, _727, _728));
    float _816 = _813 * 2.0;
    float _820 = (_816 * _647) - _726;
    float _821 = (_816 * _648) - _727;
    float _822 = (_816 * _649) - _728;
    float _826 = abs(dot(vec3(_726, _727, _728), vec3(_647, _648, _649)));
    float _3659 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _828 = sqrt(_650);
    float _841 = exp2((_828 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_828 * 3.0));
    float _847 = (1.0 - _841) * ((_828 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _848 = _841 * _828;
    float _876 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _880 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _884 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1185;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _910 = fma(_884, cbModelParam._m0[26u].z, fma(_880, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _876));
        float _914 = fma(_884, cbModelParam._m0[27u].z, fma(_880, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _876));
        float _918 = fma(_884, cbModelParam._m0[28u].z, fma(_880, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _876));
        float _943 = _876 + _647;
        float _944 = _880 + _648;
        float _945 = _884 + _649;
        float _955 = fma(_945, cbModelParam._m0[26u].z, fma(_944, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _943)) - _910;
        float _956 = fma(_945, cbModelParam._m0[27u].z, fma(_944, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _943)) - _914;
        float _957 = fma(_945, cbModelParam._m0[28u].z, fma(_944, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _943)) - _918;
        float _961 = inversesqrt(dot(vec3(_955, _956, _957), vec3(_955, _956, _957)));
        float _974 = ((_961 * _955) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_910 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _975 = ((_961 * _956) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_914 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _976 = ((_961 * _957) / cbModelParam._m0[34u].z) + ((((((_918 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _979 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_974, _975, _976), 0.0);
        vec4 _986 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_974, _975, _976), 0.0);
        vec4 _993 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_974, _975, _976), 0.0);
        vec4 _1000 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_974, _975, _976), 0.0);
        float _1013 = exp2((_979.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_979.x + (-0.5));
        float _1015 = _1013 * (_979.y + (-0.5));
        float _1016 = _1013 * (_979.z + (-0.5));
        float _1023 = exp2((_986.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_986.x + (-0.5));
        float _1025 = _1023 * (_986.y + (-0.5));
        float _1026 = _1023 * (_986.z + (-0.5));
        float _1033 = exp2((_993.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_993.x + (-0.5));
        float _1035 = _1033 * (_993.y + (-0.5));
        float _1036 = _1033 * (_993.z + (-0.5));
        float _1043 = exp2((_1000.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1000.x + (-0.5));
        float _1045 = _1043 * (_1000.y + (-0.5));
        float _1046 = _1043 * (_1000.z + (-0.5));
        float _1047 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1048 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1049 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1050 = _1014 * 0.5;
        float _1051 = _1024 * 0.5;
        float _1052 = _1034 * 0.5;
        float _1053 = dot(vec3(_1050, _1051, _1052), vec3(_1050, _1051, _1052));
        float _1058 = (_1053 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1053);
        float _1067 = (dot(vec3(_647, _648, _649), vec3(_1058 * _1050, _1058 * _1051, _1058 * _1052)) + 1.0) * 0.5;
        float _3685 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1077 = sqrt(((_1051 * _1051) + (_1050 * _1050)) + (_1052 * _1052)) / (_1047 + 9.9999997473787516355514526367188e-06);
        float _3696 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
        float _1079 = _1078 * 2.0;
        float _1083 = (1.0 - _1078) / (_1078 + 1.0);
        float _3707 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _1093 = ((((1.0 - _1084) * (_1079 + 2.0)) * exp2(log2(isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0))) * (_1079 + 1.0))) + _1084) * _1047;
        float _1094 = _1015 * 0.5;
        float _1095 = _1025 * 0.5;
        float _1096 = _1035 * 0.5;
        float _1097 = dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096));
        float _1102 = (_1097 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1097);
        float _1110 = (dot(vec3(_647, _648, _649), vec3(_1102 * _1094, _1102 * _1095, _1102 * _1096)) + 1.0) * 0.5;
        float _3718 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1119 = sqrt(((_1095 * _1095) + (_1094 * _1094)) + (_1096 * _1096)) / (_1048 + 9.9999997473787516355514526367188e-06);
        float _3729 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
        float _1121 = _1120 * 2.0;
        float _1125 = (1.0 - _1120) / (_1120 + 1.0);
        float _3740 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1135 = ((((1.0 - _1126) * (_1121 + 2.0)) * exp2(log2(isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) * (_1121 + 1.0))) + _1126) * _1048;
        float _1136 = _1016 * 0.5;
        float _1137 = _1026 * 0.5;
        float _1138 = _1036 * 0.5;
        float _1139 = dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138));
        float _1144 = (_1139 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1139);
        float _1152 = (dot(vec3(_647, _648, _649), vec3(_1144 * _1136, _1144 * _1137, _1144 * _1138)) + 1.0) * 0.5;
        float _3751 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1161 = sqrt(((_1137 * _1137) + (_1136 * _1136)) + (_1138 * _1138)) / (_1049 + 9.9999997473787516355514526367188e-06);
        float _3762 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1163 = _1162 * 2.0;
        float _1167 = (1.0 - _1162) / (_1162 + 1.0);
        float _3773 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1177 = ((((1.0 - _1168) * (_1163 + 2.0)) * exp2(log2(isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * (_1163 + 1.0))) + _1168) * _1049;
        _1185 = _1016;
        _1187 = _1015;
        _1188 = _1014;
        _1189 = _1026;
        _1190 = _1025;
        _1191 = _1024;
        _1192 = _1036;
        _1193 = _1035;
        _1194 = _1034;
        _1195 = _1049;
        _1196 = _1048;
        _1197 = _1047;
        _1198 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0)));
        _1199 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0)));
        _1200 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)));
    }
    else
    {
        _1185 = _1186;
        _1187 = _1186;
        _1188 = _1186;
        _1189 = _1186;
        _1190 = _1186;
        _1191 = _1186;
        _1192 = _1186;
        _1193 = _1186;
        _1194 = _1186;
        _1195 = _1186;
        _1196 = _1186;
        _1197 = _1186;
        _1198 = 0.0;
        _1199 = 0.0;
        _1200 = 0.0;
    }
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1225 = fma(_884, cbModelParam._m0[30u].z, fma(_880, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _876));
        float _1229 = fma(_884, cbModelParam._m0[31u].z, fma(_880, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _876));
        float _1233 = fma(_884, cbModelParam._m0[32u].z, fma(_880, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _876));
        float _1256 = _876 + _647;
        float _1257 = _880 + _648;
        float _1258 = _884 + _649;
        float _1268 = fma(_1258, cbModelParam._m0[30u].z, fma(_1257, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1256)) - _1225;
        float _1269 = fma(_1258, cbModelParam._m0[31u].z, fma(_1257, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1256)) - _1229;
        float _1270 = fma(_1258, cbModelParam._m0[32u].z, fma(_1257, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1256)) - _1233;
        float _1274 = inversesqrt(dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270)));
        float _1287 = ((_1274 * _1268) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1225 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1288 = ((_1274 * _1269) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1229 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1289 = ((_1274 * _1270) / cbModelParam._m0[35u].z) + ((((((_1233 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1291 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        vec4 _1298 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        vec4 _1305 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        vec4 _1312 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        float _1324 = exp2((_1291.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1291.x + (-0.5));
        float _1326 = _1324 * (_1291.y + (-0.5));
        float _1327 = _1324 * (_1291.z + (-0.5));
        float _1334 = exp2((_1298.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1298.x + (-0.5));
        float _1336 = _1334 * (_1298.y + (-0.5));
        float _1337 = _1334 * (_1298.z + (-0.5));
        float _1344 = exp2((_1305.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1305.x + (-0.5));
        float _1346 = _1344 * (_1305.y + (-0.5));
        float _1347 = _1344 * (_1305.z + (-0.5));
        float _1354 = exp2((_1312.w + (-0.5)) * 20.0) * 2.0;
        float _1355 = _1354 * (_1312.x + (-0.5));
        float _1356 = _1354 * (_1312.y + (-0.5));
        float _1357 = _1354 * (_1312.z + (-0.5));
        float _1358 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1359 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1360 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1361 = _1325 * 0.5;
        float _1362 = _1335 * 0.5;
        float _1363 = _1345 * 0.5;
        float _1364 = dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363));
        float _1369 = (_1364 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1364);
        float _1377 = (dot(vec3(_647, _648, _649), vec3(_1369 * _1361, _1369 * _1362, _1369 * _1363)) + 1.0) * 0.5;
        float _3814 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1386 = sqrt(((_1362 * _1362) + (_1361 * _1361)) + (_1363 * _1363)) / (_1358 + 9.9999997473787516355514526367188e-06);
        float _3825 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _1388 = _1387 * 2.0;
        float _1392 = (1.0 - _1387) / (_1387 + 1.0);
        float _3836 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1402 = ((((1.0 - _1393) * (_1388 + 2.0)) * exp2(log2(isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))) * (_1388 + 1.0))) + _1393) * _1358;
        float _1403 = _1326 * 0.5;
        float _1404 = _1336 * 0.5;
        float _1405 = _1346 * 0.5;
        float _1406 = dot(vec3(_1403, _1404, _1405), vec3(_1403, _1404, _1405));
        float _1411 = (_1406 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1406);
        float _1419 = (dot(vec3(_647, _648, _649), vec3(_1411 * _1403, _1411 * _1404, _1411 * _1405)) + 1.0) * 0.5;
        float _3847 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1428 = sqrt(((_1404 * _1404) + (_1403 * _1403)) + (_1405 * _1405)) / (_1359 + 9.9999997473787516355514526367188e-06);
        float _3858 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1430 = _1429 * 2.0;
        float _1434 = (1.0 - _1429) / (_1429 + 1.0);
        float _3869 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1444 = ((((1.0 - _1435) * (_1430 + 2.0)) * exp2(log2(isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * (_1430 + 1.0))) + _1435) * _1359;
        float _1445 = _1327 * 0.5;
        float _1446 = _1337 * 0.5;
        float _1447 = _1347 * 0.5;
        float _1448 = dot(vec3(_1445, _1446, _1447), vec3(_1445, _1446, _1447));
        float _1453 = (_1448 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1448);
        float _1461 = (dot(vec3(_647, _648, _649), vec3(_1453 * _1445, _1453 * _1446, _1453 * _1447)) + 1.0) * 0.5;
        float _3880 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1470 = sqrt(((_1446 * _1446) + (_1445 * _1445)) + (_1447 * _1447)) / (_1360 + 9.9999997473787516355514526367188e-06);
        float _3891 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1472 = _1471 * 2.0;
        float _1476 = (1.0 - _1471) / (_1471 + 1.0);
        float _3902 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1486 = ((((1.0 - _1477) * (_1472 + 2.0)) * exp2(log2(isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * (_1472 + 1.0))) + _1477) * _1360;
        _1494 = _1327;
        _1495 = _1326;
        _1496 = _1325;
        _1497 = _1337;
        _1498 = _1336;
        _1499 = _1335;
        _1500 = _1347;
        _1501 = _1346;
        _1502 = _1345;
        _1503 = _1360;
        _1504 = _1359;
        _1505 = _1358;
        _1506 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)));
        _1507 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)));
        _1508 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)));
    }
    else
    {
        _1494 = _1186;
        _1495 = _1186;
        _1496 = _1186;
        _1497 = _1186;
        _1498 = _1186;
        _1499 = _1186;
        _1500 = _1186;
        _1501 = _1186;
        _1502 = _1186;
        _1503 = _1186;
        _1504 = _1186;
        _1505 = _1186;
        _1506 = 0.0;
        _1507 = 0.0;
        _1508 = 0.0;
    }
    float _1518 = (cbModelParam._m0[1u].x * (_1506 - _1198)) + _1198;
    float _1519 = (cbModelParam._m0[1u].x * (_1507 - _1199)) + _1199;
    float _1520 = (cbModelParam._m0[1u].x * (_1508 - _1200)) + _1200;
    float _1541 = fma(_1520, cbSceneParam._m0[89u].z, fma(_1519, cbSceneParam._m0[89u].y, _1518 * cbSceneParam._m0[89u].x));
    float _1544 = fma(_1520, cbSceneParam._m0[90u].z, fma(_1519, cbSceneParam._m0[90u].y, _1518 * cbSceneParam._m0[90u].x));
    float _1547 = fma(_1520, cbSceneParam._m0[91u].z, fma(_1519, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1518));
    float _1562 = _820 * 0.5;
    float _1563 = _821 * 0.5;
    float _1564 = _822 * 0.5;
    float _1565 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1496, _1499, _1502, _1505));
    float _1568 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1495, _1498, _1501, _1504));
    float _1571 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1494, _1497, _1500, _1503));
    float _1605;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1578 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1185, _1189, _1192, _1195));
        float _1582 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1187, _1190, _1193, _1196));
        float _1586 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1188, _1191, _1194, _1197));
        float _1593 = dot(vec4(cbModelParam._m0[39u]), vec4(_1562, _1563, _1564, 1.0));
        _1605 = dot(vec3(isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)), isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)), isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1593) ? 0.0 : (isnan(0.0) ? _1593 : max(0.0, _1593))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1605 = 1.0;
    }
    float _1616;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1607 = dot(vec4(cbModelParam._m0[40u]), vec4(_1562, _1563, _1564, 1.0));
        _1616 = dot(vec3(isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)), isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)), isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1607) ? 0.0 : (isnan(0.0) ? _1607 : max(0.0, _1607))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1616 = 1.0;
    }
    float _1620 = (_1616 * cbModelParam._m0[1u].x) + (_1605 * (1.0 - cbModelParam._m0[1u].x));
    float _1630 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _650);
    float _1631 = isnan(_1630) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1630 : min(cbModelParam._m0[25u].z, _1630));
    float _1713;
    float _1715;
    float _1717;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1680 = fma(_884, cbModelParam._m0[13u].z, fma(_880, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _876)) + cbModelParam._m0[13u].w;
        float _1684 = fma(_884, cbModelParam._m0[14u].z, fma(_880, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _876)) + cbModelParam._m0[14u].w;
        float _1688 = fma(_884, cbModelParam._m0[15u].z, fma(_880, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _876)) + cbModelParam._m0[15u].w;
        float _1691 = fma(_822, cbModelParam._m0[13u].z, fma(_821, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _820));
        float _1694 = fma(_822, cbModelParam._m0[14u].z, fma(_821, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _820));
        float _1697 = fma(_822, cbModelParam._m0[15u].z, fma(_821, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _820));
        float _1725;
        if (_1691 > 0.0)
        {
            _1725 = abs((1.0 - _1680) / _1691);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1691 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1680 + 1.0) / _1691);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1725 = frontier_phi_14_12_ladder;
        }
        float _1929;
        if (_1694 > 0.0)
        {
            _1929 = abs((1.0 - _1684) / _1694);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1694 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1684 + 1.0) / _1694);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1929 = frontier_phi_23_19_ladder;
        }
        float _2183;
        if (_1697 > 0.0)
        {
            _2183 = abs((1.0 - _1688) / _1697);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1697 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1688 + 1.0) / _1697);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2183 = frontier_phi_35_30_ladder;
        }
        float _2185 = isnan(_1929) ? _1725 : (isnan(_1725) ? _1929 : min(_1725, _1929));
        float _2186 = isnan(_2183) ? _2185 : (isnan(_2185) ? _2183 : min(_2185, _2183));
        float _2190 = (_2186 * _1691) + _1680;
        float _2191 = (_2186 * _1694) + _1684;
        float _2192 = (_2186 * _1697) + _1688;
        float _2193 = _2186 * 9.9999997473787516355514526367188e-05;
        float _2195 = (-1.0) - _2193;
        float _2197 = _2193 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2192 > _2197) || ((_2192 < _2195) || ((_2191 > _2197) || ((_2191 < _2195) || ((_2190 < _2195) || (_2190 > _2197))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2320 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2192, cbModelParam._m0[9u].z, fma(_2191, cbModelParam._m0[9u].y, _2190 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2192, cbModelParam._m0[10u].z, fma(_2191, cbModelParam._m0[10u].y, _2190 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2192, cbModelParam._m0[11u].z, fma(_2191, cbModelParam._m0[11u].y, _2190 * cbModelParam._m0[11u].x))), _1631);
            frontier_phi_13_35_ladder = _2320.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2320.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2320.x * cbModelParam._m0[1u].y;
        }
        _1713 = frontier_phi_13_35_ladder_2;
        _1715 = frontier_phi_13_35_ladder_1;
        _1717 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1701 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_820, _821, _822), _1631);
        _1713 = _1701.x * cbModelParam._m0[1u].y;
        _1715 = _1701.y * cbModelParam._m0[1u].y;
        _1717 = _1701.z * cbModelParam._m0[1u].y;
    }
    float _1721 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _650);
    float _1722 = isnan(_1721) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1721 : min(cbModelParam._m0[25u].w, _1721));
    float _1813;
    float _1815;
    float _1817;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1777 = fma(_884, cbModelParam._m0[21u].z, fma(_880, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _876)) + cbModelParam._m0[21u].w;
        float _1781 = fma(_884, cbModelParam._m0[22u].z, fma(_880, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _876)) + cbModelParam._m0[22u].w;
        float _1785 = fma(_884, cbModelParam._m0[23u].z, fma(_880, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _876)) + cbModelParam._m0[23u].w;
        float _1788 = fma(_822, cbModelParam._m0[21u].z, fma(_821, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _820));
        float _1791 = fma(_822, cbModelParam._m0[22u].z, fma(_821, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _820));
        float _1794 = fma(_822, cbModelParam._m0[23u].z, fma(_821, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _820));
        float _1934;
        if (_1788 > 0.0)
        {
            _1934 = abs((1.0 - _1777) / _1788);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1788 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1777 + 1.0) / _1788);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1934 = frontier_phi_25_21_ladder;
        }
        float _2210;
        if (_1791 > 0.0)
        {
            _2210 = abs((1.0 - _1781) / _1791);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1791 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1781 + 1.0) / _1791);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2210 = frontier_phi_37_32_ladder;
        }
        float _2423;
        if (_1794 > 0.0)
        {
            _2423 = abs((1.0 - _1785) / _1794);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1794 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1785 + 1.0) / _1794);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2423 = frontier_phi_46_43_ladder;
        }
        float _2425 = isnan(_2210) ? _1934 : (isnan(_1934) ? _2210 : min(_1934, _2210));
        float _2426 = isnan(_2423) ? _2425 : (isnan(_2425) ? _2423 : min(_2425, _2423));
        float _2430 = (_2426 * _1788) + _1777;
        float _2431 = (_2426 * _1791) + _1781;
        float _2432 = (_2426 * _1794) + _1785;
        float _2433 = _2426 * 9.9999997473787516355514526367188e-05;
        float _2434 = (-1.0) - _2433;
        float _2436 = _2433 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2432 > _2436) || ((_2432 < _2434) || ((_2431 > _2436) || ((_2431 < _2434) || ((_2430 < _2434) || (_2430 > _2436))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2631 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2432, cbModelParam._m0[17u].z, fma(_2431, cbModelParam._m0[17u].y, _2430 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2432, cbModelParam._m0[18u].z, fma(_2431, cbModelParam._m0[18u].y, _2430 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2432, cbModelParam._m0[19u].z, fma(_2431, cbModelParam._m0[19u].y, _2430 * cbModelParam._m0[19u].x))), _1722);
            frontier_phi_22_46_ladder = _2631.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2631.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2631.x * cbModelParam._m0[1u].z;
        }
        _1813 = frontier_phi_22_46_ladder_2;
        _1815 = frontier_phi_22_46_ladder_1;
        _1817 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1797 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_820, _821, _822), _1722);
        _1813 = _1797.x * cbModelParam._m0[1u].z;
        _1815 = _1797.y * cbModelParam._m0[1u].z;
        _1817 = _1797.z * cbModelParam._m0[1u].z;
    }
    float _1830 = (((_847 * _796) + _848) * _812) * ((cbModelParam._m0[1u].w * (_1813 - _1713)) + _1713);
    float _1832 = (((_847 * _798) + _848) * _812) * ((cbModelParam._m0[1u].w * (_1815 - _1715)) + _1715);
    float _1834 = (((_847 * _799) + _848) * _812) * ((cbModelParam._m0[1u].w * (_1817 - _1717)) + _1717);
    float _1837 = fma(_1834, cbSceneParam._m0[89u].z, fma(_1832, cbSceneParam._m0[89u].y, _1830 * cbSceneParam._m0[89u].x));
    float _1840 = fma(_1834, cbSceneParam._m0[90u].z, fma(_1832, cbSceneParam._m0[90u].y, _1830 * cbSceneParam._m0[90u].x));
    float _1843 = fma(_1834, cbSceneParam._m0[91u].z, fma(_1832, cbSceneParam._m0[91u].y, _1830 * cbSceneParam._m0[91u].x));
    uvec4 _1853 = floatBitsToUint(cbInstanceData._m0[_243 + 5u]);
    uint _1855 = _1853.x * 14u;
    uint _1856 = _1855 + 13u;
    float _1863 = _812 + (-1.0);
    float _1868 = (cbLight._m0[_1856].x * _1863) + 1.0;
    float _1869 = (cbLight._m0[_1856].y * _1863) + 1.0;
    float _1870 = (cbLight._m0[_1856].z * _1863) + 1.0;
    float _1871 = (cbLight._m0[_1856].w * _1863) + 1.0;
    uint _1872 = _1855 + 5u;
    float _1878 = isnan(1.0) ? _1869 : (isnan(_1869) ? 1.0 : min(_1869, 1.0));
    uint _1882 = _1855 + 4u;
    float _1888 = isnan(1.0) ? _1868 : (isnan(_1868) ? 1.0 : min(_1868, 1.0));
    uint _1892 = _1855 | 1u;
    float _1903 = dot(vec3(cbLight._m0[_1855].xyz), vec3(_647, _648, _649));
    float _1906 = dot(vec3(cbLight._m0[_1892].xyz), vec3(_647, _648, _649));
    float _4038 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
    float _4049 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
    float _1911 = (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * 0.3183098733425140380859375;
    float _1913 = (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * 0.3183098733425140380859375;
    float _1920 = ((cbLight._m0[_1872].x * _1878) * _1913) + ((cbLight._m0[_1882].x * _1888) * _1911);
    float _1921 = ((_1878 * cbLight._m0[_1872].y) * _1913) + ((_1888 * cbLight._m0[_1882].y) * _1911);
    float _1922 = ((_1878 * cbLight._m0[_1872].z) * _1913) + ((_1888 * cbLight._m0[_1882].z) * _1911);
    uvec4 _1926 = floatBitsToUint(cbLight._m0[_1855 + 12u]);
    bool _1928 = _1926.x == 0u;
    float _1939;
    float _1941;
    float _1943;
    if (_1928)
    {
        _1939 = _1920;
        _1941 = _1921;
        _1943 = _1922;
    }
    else
    {
        uint _1947 = _1855 + 6u;
        float _1963 = (dot(vec3(cbLight._m0[_1855 + 2u].xyz), vec3(_647, _648, _649)) * 0.5) + 0.5;
        float _1964 = _1963 * _1963;
        float _4060 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
        float _1965 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1966 = isnan(1.0) ? _1870 : (isnan(_1870) ? 1.0 : min(_1870, 1.0));
        _1939 = (((cbLight._m0[_1947].x * 0.3183098733425140380859375) * _1965) * _1966) + _1920;
        _1941 = (((cbLight._m0[_1947].y * 0.3183098733425140380859375) * _1965) * _1966) + _1921;
        _1943 = (((cbLight._m0[_1947].z * 0.3183098733425140380859375) * _1965) * _1966) + _1922;
    }
    bool _1946 = _1926.y == 0u;
    float _1984;
    float _1986;
    float _1988;
    if (_1946)
    {
        _1984 = _1939;
        _1986 = _1941;
        _1988 = _1943;
    }
    else
    {
        uint _2154 = _1855 + 7u;
        float _2170 = (dot(vec3(cbLight._m0[_1855 + 3u].xyz), vec3(_647, _648, _649)) * 0.5) + 0.5;
        float _2171 = _2170 * _2170;
        float _4076 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
        float _2172 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _2173 = isnan(1.0) ? _1871 : (isnan(_1871) ? 1.0 : min(_1871, 1.0));
        _1984 = (((cbLight._m0[_2154].x * 0.3183098733425140380859375) * _2172) * _2173) + _1939;
        _1986 = (((cbLight._m0[_2154].y * 0.3183098733425140380859375) * _2172) * _2173) + _1941;
        _1988 = (((cbLight._m0[_2154].z * 0.3183098733425140380859375) * _2172) * _2173) + _1943;
    }
    uint _1991 = _1855 + 8u;
    float _2004 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1855].w)) * _650) * 0.949999988079071044921875);
    float _2005 = _2004 * _2004;
    float _2006 = cbLight._m0[_1855].x + _726;
    float _2007 = cbLight._m0[_1855].y + _727;
    float _2008 = cbLight._m0[_1855].z + _728;
    float _2012 = inversesqrt(dot(vec3(_2006, _2007, _2008), vec3(_2006, _2007, _2008)));
    float _2013 = _2012 * _2006;
    float _2014 = _2012 * _2007;
    float _2015 = _2012 * _2008;
    float _2016 = dot(vec3(_647, _648, _649), vec3(cbLight._m0[_1855].xyz));
    float _4092 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2019 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _4103 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _2020 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _2021 = dot(vec3(_647, _648, _649), vec3(_2013, _2014, _2015));
    float _4114 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2024 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _2025 = dot(vec3(cbLight._m0[_1855].xyz), vec3(_2013, _2014, _2015));
    float _4125 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2029 = _2005 * _2005;
    float _2033 = ((_2024 * _2024) * (_2029 + (-1.0))) + 1.0;
    float _2041 = exp2(log2(1.0 - (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0)))) * 5.0);
    float _2042 = 0.959999978542327880859375 - _793;
    float _2044 = 0.959999978542327880859375 - _794;
    float _2045 = 0.959999978542327880859375 - _795;
    float _2052 = 1.0 - _2005;
    float _2063 = (0.5 / (((_2020 * ((_2019 * _2052) + _2005)) + 9.9999999392252902907785028219223e-09) + (((_2020 * _2052) + _2005) * _2019))) * _2019;
    float _4136 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2065 = (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_2029 / ((_2033 * _2033) * 3.141590118408203125));
    uint _2076 = _1855 + 9u;
    float _2087 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1892].w)) * _650) * 0.949999988079071044921875);
    float _2088 = _2087 * _2087;
    float _2089 = cbLight._m0[_1892].x + _726;
    float _2090 = cbLight._m0[_1892].y + _727;
    float _2091 = cbLight._m0[_1892].z + _728;
    float _2095 = inversesqrt(dot(vec3(_2089, _2090, _2091), vec3(_2089, _2090, _2091)));
    float _2096 = _2095 * _2089;
    float _2097 = _2095 * _2090;
    float _2098 = _2095 * _2091;
    float _2099 = dot(vec3(_647, _648, _649), vec3(cbLight._m0[_1892].xyz));
    float _4147 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2102 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
    float _2103 = dot(vec3(_647, _648, _649), vec3(_2096, _2097, _2098));
    float _4158 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2106 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
    float _2107 = dot(vec3(cbLight._m0[_1892].xyz), vec3(_2096, _2097, _2098));
    float _4169 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2111 = _2088 * _2088;
    float _2115 = ((_2106 * _2106) * (_2111 + (-1.0))) + 1.0;
    float _2122 = exp2(log2(1.0 - (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0)))) * 5.0);
    float _2129 = 1.0 - _2088;
    float _2139 = (0.5 / (((_2020 * ((_2102 * _2129) + _2088)) + 9.9999999392252902907785028219223e-09) + (((_2020 * _2129) + _2088) * _2102))) * _2102;
    float _4180 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _2141 = (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_2111 / ((_2115 * _2115) * 3.141590118408203125));
    float _2151 = (((((_2122 * _2042) + _796) * cbLight._m0[_2076].x) * _2141) * _1878) + (((((_2041 * _2042) + _796) * cbLight._m0[_1991].x) * _2065) * _1888);
    float _2152 = (((((_2122 * _2044) + _798) * cbLight._m0[_2076].y) * _2141) * _1878) + (((((_2041 * _2044) + _798) * cbLight._m0[_1991].y) * _2065) * _1888);
    float _2153 = (((((_2122 * _2045) + _799) * cbLight._m0[_2076].z) * _2141) * _1878) + (((((_2041 * _2045) + _799) * cbLight._m0[_1991].z) * _2065) * _1888);
    float _2215;
    float _2217;
    float _2219;
    if (_1928)
    {
        _2215 = _2151;
        _2217 = _2152;
        _2219 = _2153;
    }
    else
    {
        uint _2221 = _1855 + 2u;
        uint _2225 = _1855 + 10u;
        float _2239 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2221].w)) * _650) * 0.949999988079071044921875);
        float _2240 = _2239 * _2239;
        float _2241 = cbLight._m0[_2221].x + _726;
        float _2242 = cbLight._m0[_2221].y + _727;
        float _2243 = cbLight._m0[_2221].z + _728;
        float _2247 = inversesqrt(dot(vec3(_2241, _2242, _2243), vec3(_2241, _2242, _2243)));
        float _2248 = _2247 * _2241;
        float _2249 = _2247 * _2242;
        float _2250 = _2247 * _2243;
        float _2251 = dot(vec3(_647, _648, _649), vec3(cbLight._m0[_2221].xyz));
        float _4191 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
        float _2254 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _2255 = dot(vec3(_647, _648, _649), vec3(_2248, _2249, _2250));
        float _4202 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
        float _2258 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _2259 = dot(vec3(cbLight._m0[_2221].xyz), vec3(_2248, _2249, _2250));
        float _4213 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
        float _2263 = _2240 * _2240;
        float _2267 = ((_2258 * _2258) * (_2263 + (-1.0))) + 1.0;
        float _2274 = exp2(log2(1.0 - (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0)))) * 5.0);
        float _2281 = 1.0 - _2240;
        float _2291 = (0.5 / (((_2020 * ((_2254 * _2281) + _2240)) + 9.9999999392252902907785028219223e-09) + (((_2020 * _2281) + _2240) * _2254))) * _2254;
        float _4224 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        float _2293 = (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * (_2263 / ((_2267 * _2267) * 3.141590118408203125));
        float _2294 = isnan(1.0) ? _1870 : (isnan(_1870) ? 1.0 : min(_1870, 1.0));
        _2215 = (((((_2274 * _2042) + _796) * cbLight._m0[_2225].x) * _2293) * _2294) + _2151;
        _2217 = (((((_2274 * _2044) + _798) * cbLight._m0[_2225].y) * _2293) * _2294) + _2152;
        _2219 = (((((_2274 * _2045) + _799) * cbLight._m0[_2225].z) * _2293) * _2294) + _2153;
    }
    float _2329;
    float _2331;
    float _2333;
    if (_1946)
    {
        _2329 = _2215;
        _2331 = _2217;
        _2333 = _2219;
    }
    else
    {
        uint _2340 = _1855 + 3u;
        uint _2344 = _1855 + 11u;
        float _2358 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2340].w)) * _650) * 0.949999988079071044921875);
        float _2359 = _2358 * _2358;
        float _2360 = cbLight._m0[_2340].x + _726;
        float _2361 = cbLight._m0[_2340].y + _727;
        float _2362 = cbLight._m0[_2340].z + _728;
        float _2366 = inversesqrt(dot(vec3(_2360, _2361, _2362), vec3(_2360, _2361, _2362)));
        float _2367 = _2366 * _2360;
        float _2368 = _2366 * _2361;
        float _2369 = _2366 * _2362;
        float _2370 = dot(vec3(_647, _648, _649), vec3(cbLight._m0[_2340].xyz));
        float _4240 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2373 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _2374 = dot(vec3(_647, _648, _649), vec3(_2367, _2368, _2369));
        float _4251 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2377 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _2378 = dot(vec3(cbLight._m0[_2340].xyz), vec3(_2367, _2368, _2369));
        float _4262 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2382 = _2359 * _2359;
        float _2386 = ((_2377 * _2377) * (_2382 + (-1.0))) + 1.0;
        float _2393 = exp2(log2(1.0 - (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0)))) * 5.0);
        float _2400 = 1.0 - _2359;
        float _2410 = (0.5 / (((_2020 * ((_2373 * _2400) + _2359)) + 9.9999999392252902907785028219223e-09) + (((_2020 * _2400) + _2359) * _2373))) * _2373;
        float _4273 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2412 = (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_2382 / ((_2386 * _2386) * 3.141590118408203125));
        float _2413 = isnan(1.0) ? _1871 : (isnan(_1871) ? 1.0 : min(_1871, 1.0));
        _2329 = (((((_2393 * _2042) + _796) * cbLight._m0[_2344].x) * _2412) * _2413) + _2215;
        _2331 = (((((_2393 * _2044) + _798) * cbLight._m0[_2344].y) * _2412) * _2413) + _2217;
        _2333 = (((((_2393 * _2045) + _799) * cbLight._m0[_2344].z) * _2412) * _2413) + _2219;
    }
    float _2548;
    float _2550;
    float _2552;
    float _2554;
    float _2556;
    float _2558;
    if (_1853.y == 0u)
    {
        float _2488 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2489 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2488;
        float _2490 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2488;
        float _2491 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2488;
        uvec4 _2503 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2504 = _2503.x;
        uint _2515 = uint((float(_2503.y) * floor(float(uint(cbSceneParam._m0[85u].y * _735) / _2504))) + floor(float(uint(cbSceneParam._m0[85u].x * _734) / _2504)));
        float _2525 = (log2(_2491 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2526 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        uint _2529 = uint(isnan(14.0) ? _2526 : (isnan(_2526) ? 14.0 : min(_2526, 14.0)));
        uvec4 _2534 = texelFetch(g_lightClusterGridBuffer, int(((_2529 << 2u) + (_2515 << 6u)) >> 2u));
        uint _2535 = _2534.x;
        uint _2536 = _2503.z;
        float _2636;
        float _2638;
        float _2640;
        float _2642;
        float _2644;
        float _2646;
        if (((((1u << ((_2536 >> 4u) & 15u)) + 4294967295u) & _2535) == 0u) || ((_2536 & 240u) == 0u))
        {
            _2636 = 0.0;
            _2638 = 0.0;
            _2640 = 0.0;
            _2642 = 0.0;
            _2644 = 0.0;
            _2646 = 0.0;
        }
        else
        {
            float _2637;
            float _2639;
            float _2641;
            float _2643;
            float _2645;
            float _2647;
            float _2781 = 0.0;
            float _2782 = 0.0;
            float _2783 = 0.0;
            float _2784 = 0.0;
            float _2785 = 0.0;
            float _2786 = 0.0;
            uint _2787 = 0u;
            uint _2796;
            bool _2797;
            for (;;)
            {
                _2796 = texelFetch(g_lightClassification, int((((_2529 << 5u) + (_2515 << 9u)) + (_2787 << 2u)) >> 2u)).x;
                _2797 = _2796 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2797)
                {
                    frontier_phi_61_pred = _2781;
                    frontier_phi_61_pred_1 = _2786;
                    frontier_phi_61_pred_2 = _2785;
                    frontier_phi_61_pred_3 = _2784;
                    frontier_phi_61_pred_4 = _2783;
                    frontier_phi_61_pred_5 = _2782;
                }
                else
                {
                    float _2905;
                    float _2906;
                    float _2907;
                    float _2908;
                    float _2909;
                    float _2910;
                    uint _2911;
                    _2905 = _2781;
                    _2906 = _2782;
                    _2907 = _2783;
                    _2908 = _2784;
                    _2909 = _2785;
                    _2910 = _2786;
                    _2911 = _2796;
                    float _2837;
                    float _2838;
                    float _2839;
                    float _2840;
                    float _2841;
                    float _2842;
                    for (;;)
                    {
                        uint _2915 = uint(findLSB(_2911)) + (_2787 << 5u);
                        uint _2912 = (_2911 + 4294967295u) & _2911;
                        uint _2917 = _2915 * 48u;
                        vec4 _2931 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2917)).x, texelFetch(g_PointLightRenderingBuffer, int(_2917 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2917 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2917 + 3u)).x));
                        uint _2937 = (_2915 * 48u) + 4u;
                        vec4 _2950 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2937)).x, texelFetch(g_PointLightRenderingBuffer, int(_2937 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2937 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2937 + 3u)).x));
                        uint _2956 = (_2915 * 48u) + 8u;
                        vec3 _2967 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2956)).x, texelFetch(g_PointLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2956 + 2u)).x));
                        float _2971 = _2931.x - _2489;
                        float _2972 = _2931.y - _2490;
                        float _2973 = _2931.z - _2491;
                        float _2974 = dot(vec3(_2971, _2972, _2973), vec3(_2971, _2972, _2973));
                        float _2977 = inversesqrt(_2974);
                        float _2978 = _2977 * _2971;
                        float _2979 = _2977 * _2972;
                        float _2980 = _2977 * _2973;
                        float _2981 = dot(vec3(_753, _756, _759), vec3(_2978, _2979, _2980));
                        float _2986 = 1.0 - (_2974 * _2931.w);
                        float _4299 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
                        float _2987 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
                        float _2988 = sqrt(_2974) * _2950.w;
                        float _2991 = 1.39999997615814208984375 / (_2988 + 1.39999997615814208984375);
                        float _2992 = _2991 * _2991;
                        float _2995 = ((1.0 - _2992) * _2981) + _2992;
                        float _2998 = _2988 * _2988;
                        float _3002 = ((isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0))) * _2987) / ((_2998 * 0.699999988079071044921875) + 1.0);
                        float _3006 = (-0.0) - _2489;
                        float _3007 = (-0.0) - _2490;
                        float _3008 = (-0.0) - _2491;
                        float _3012 = inversesqrt(dot(vec3(_3006, _3007, _3008), vec3(_3006, _3007, _3008)));
                        float _3013 = _3012 * _3006;
                        float _3014 = _3012 * _3007;
                        float _3015 = _3012 * _3008;
                        float _3023 = exp2(log2(1.0 / ((_2998 * 3.5) + 5.0)) * 0.25);
                        float _3024 = 1.0 - _828;
                        float _3031 = sqrt(1.0 - ((1.0 - (_3024 * _3024)) * (1.0 - (_3023 * _3023))));
                        float _3032 = _3031 * _3031;
                        float _3033 = _3032 * _3032;
                        float _3034 = _3013 + _2978;
                        float _3035 = _3014 + _2979;
                        float _3036 = _3015 + _2980;
                        float _3040 = inversesqrt(dot(vec3(_3034, _3035, _3036), vec3(_3034, _3035, _3036)));
                        float _3044 = dot(vec3(_753, _756, _759), vec3(_3013, _3014, _3015));
                        float _4315 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                        float _3047 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
                        float _3048 = dot(vec3(_753, _756, _759), vec3(_3040 * _3034, _3040 * _3035, _3040 * _3036));
                        float _4326 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                        float _3051 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
                        float _3055 = ((_3051 * _3051) * (_3033 + (-1.0))) + 1.0;
                        float _3056 = _2991 * _3032;
                        float _3057 = _3056 * _3056;
                        float _3060 = ((1.0 - _3057) * _2981) + _3057;
                        float _4337 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                        float _3061 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                        float _3062 = 1.0 - _3032;
                        float _3072 = (0.5 / (((_3061 * ((_3047 * _3062) + _3032)) + 9.9999999392252902907785028219223e-09) + (((_3061 * _3062) + _3032) * _3047))) * _3061;
                        float _4348 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                        float _3083 = (((_3033 * 3.1415927410125732421875) * (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0)))) / ((_3055 * _3055) * ((_2998 * 2.1991131305694580078125) + 3.141590118408203125))) * _2987;
                        _2840 = (_3002 * _2950.x) + _2908;
                        _2841 = (_3002 * _2950.y) + _2909;
                        _2842 = (_3002 * _2950.z) + _2910;
                        _2837 = (_3083 * _2967.x) + _2905;
                        _2838 = (_3083 * _2967.y) + _2906;
                        _2839 = (_3083 * _2967.z) + _2907;
                        if (_2912 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2905 = _2837;
                            _2906 = _2838;
                            _2907 = _2839;
                            _2908 = _2840;
                            _2909 = _2841;
                            _2910 = _2842;
                            _2911 = _2912;
                        }
                    }
                    frontier_phi_61_pred = _2837;
                    frontier_phi_61_pred_1 = _2842;
                    frontier_phi_61_pred_2 = _2841;
                    frontier_phi_61_pred_3 = _2840;
                    frontier_phi_61_pred_4 = _2839;
                    frontier_phi_61_pred_5 = _2838;
                }
                _2637 = frontier_phi_61_pred;
                _2647 = frontier_phi_61_pred_1;
                _2645 = frontier_phi_61_pred_2;
                _2643 = frontier_phi_61_pred_3;
                _2641 = frontier_phi_61_pred_4;
                _2639 = frontier_phi_61_pred_5;
                uint _2788 = _2787 + 1u;
                if (_2788 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2781 = _2637;
                    _2782 = _2639;
                    _2783 = _2641;
                    _2784 = _2643;
                    _2785 = _2645;
                    _2786 = _2647;
                    _2787 = _2788;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2636 = _2637;
            _2638 = _2639;
            _2640 = _2641;
            _2642 = _2643;
            _2644 = _2645;
            _2646 = _2647;
        }
        uvec4 _2650 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2651 = _2650.z;
        uint _2653 = (_2651 >> 8u) & 15u;
        float _2749;
        float _2751;
        float _2753;
        float _2755;
        float _2757;
        float _2759;
        if (((4294967295u << _2653) & _2535) == 0u)
        {
            _2749 = _2636;
            _2751 = _2638;
            _2753 = _2640;
            _2755 = _2642;
            _2757 = _2644;
            _2759 = _2646;
        }
        else
        {
            float _2774 = inversesqrt(dot(vec3(_2489, _2490, _2491), vec3(_2489, _2490, _2491)));
            float _2775 = _2774 * _2489;
            float _2776 = _2774 * _2490;
            float _2777 = _2774 * _2491;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2653 < ((_2651 >> 12u) & 15u))
            {
                float _2750;
                float _2752;
                float _2754;
                float _2756;
                float _2758;
                float _2760;
                float _2888 = _2636;
                float _2889 = _2638;
                float _2890 = _2640;
                float _2891 = _2642;
                float _2892 = _2644;
                float _2893 = _2646;
                uint _2894 = _2653;
                uint _2903;
                bool _2904;
                for (;;)
                {
                    _2903 = texelFetch(g_lightClassification, int((((_2529 << 5u) + (_2515 << 9u)) + (_2894 << 2u)) >> 2u)).x;
                    _2904 = _2903 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2904)
                    {
                        frontier_phi_67_pred = _2891;
                        frontier_phi_67_pred_1 = _2892;
                        frontier_phi_67_pred_2 = _2893;
                        frontier_phi_67_pred_3 = _2890;
                        frontier_phi_67_pred_4 = _2889;
                        frontier_phi_67_pred_5 = _2888;
                    }
                    else
                    {
                        float _3088;
                        float _3089;
                        float _3090;
                        float _3091;
                        float _3092;
                        float _3093;
                        float _3382;
                        float _3383;
                        float _3384;
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3101 = _2888;
                        float _3102 = _2889;
                        float _3103 = _2890;
                        float _3104 = _2891;
                        float _3105 = _2892;
                        float _3106 = _2893;
                        uint _3107 = _2903;
                        uint _3108;
                        vec4 _3133;
                        float _3134;
                        vec4 _3149;
                        vec3 _3161;
                        vec4 _3176;
                        vec4 _3192;
                        float _3238;
                        bool _3239;
                        for (;;)
                        {
                            uint _3118 = ((_2894 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3107));
                            _3108 = (_3107 + 4294967295u) & _3107;
                            uint _3120 = _3118 * 40u;
                            _3133 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3120)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 3u)).x));
                            _3134 = _3133.w;
                            uint _3136 = (_3118 * 40u) + 4u;
                            _3149 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3136)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 3u)).x));
                            uint _3151 = (_3118 * 40u) + 8u;
                            _3161 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3151)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 2u)).x));
                            uint _3163 = (_3118 * 40u) + 16u;
                            _3176 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 3u)).x));
                            uint _3179 = (_3118 * 40u) + 20u;
                            _3192 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3179)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 3u)).x));
                            uint _3194 = (_3118 * 40u) + 24u;
                            vec4 _3207 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3194)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 3u)).x));
                            uint _3213 = (_3118 * 40u) + 28u;
                            vec4 _3226 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3213)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 3u)).x));
                            _3238 = fma(_2491, _3226.z, fma(_2490, _3226.y, _3226.x * _2489)) + _3226.w;
                            _3239 = !((fma(_2491, _3207.z, fma(_2490, _3207.y, _3207.x * _2489)) + _3207.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3239)
                            {
                                float _3266 = _3133.x - _2489;
                                float _3267 = _3133.y - _2490;
                                float _3268 = _3133.z - _2491;
                                float _3269 = dot(vec3(_3266, _3267, _3268), vec3(_3266, _3267, _3268));
                                float _3272 = inversesqrt(_3269);
                                float _3273 = _3272 * _3266;
                                float _3274 = _3272 * _3267;
                                float _3275 = _3272 * _3268;
                                float _3279 = 1.0 - (_3269 / (_3134 * _3134));
                                float _4359 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                                float _3280 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
                                float _3284 = sqrt(_3269) * _3149.w;
                                float _3286 = 1.39999997615814208984375 / (_3284 + 1.39999997615814208984375);
                                float _3287 = _3286 * _3286;
                                float _3290 = ((1.0 - _3287) * dot(vec3(_3273, _3274, _3275), vec3(_753, _756, _759))) + _3287;
                                float _3293 = _3284 * _3284;
                                float _3297 = (fma(_2491, _3176.z, fma(_2490, _3176.y, _3176.x * _2489)) + _3176.w) / _3238;
                                float _3298 = (fma(_2491, _3192.z, fma(_2490, _3192.y, _3192.x * _2489)) + _3192.w) / _3238;
                                float _3302 = 1.0 - dot(vec2(_3297, _3298), vec2(_3297, _3298));
                                float _4375 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                                float _3303 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
                                float _3304 = _3303 * (((isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0))) * _3280) / ((_3293 * 0.699999988079071044921875) + 1.0));
                                float _3316 = exp2(log2(1.0 / ((_3293 * 3.5) + 5.0)) * 0.25);
                                float _3317 = 1.0 - _828;
                                float _3324 = sqrt(1.0 - ((1.0 - (_3317 * _3317)) * (1.0 - (_3316 * _3316))));
                                float _3325 = _3324 * _3324;
                                float _3326 = _3325 * _3325;
                                float _3327 = _3273 - _2775;
                                float _3328 = _3274 - _2776;
                                float _3329 = _3275 - _2777;
                                float _3333 = inversesqrt(dot(vec3(_3327, _3328, _3329), vec3(_3327, _3328, _3329)));
                                float _3337 = dot(vec3(_753, _756, _759), vec3((-0.0) - _2775, (-0.0) - _2776, (-0.0) - _2777));
                                float _4386 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                                float _3340 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
                                float _3341 = dot(vec3(_753, _756, _759), vec3(_3333 * _3327, _3333 * _3328, _3333 * _3329));
                                float _4397 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                                float _3344 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
                                float _3348 = ((_3344 * _3344) * (_3326 + (-1.0))) + 1.0;
                                float _3349 = _3286 * _3325;
                                float _3350 = _3349 * _3349;
                                float _3356 = ((1.0 - _3350) * dot(vec3(_753, _756, _759), vec3(_3273, _3274, _3275))) + _3350;
                                float _4408 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0));
                                float _3357 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
                                float _3358 = 1.0 - _3325;
                                float _3368 = (0.5 / (((_3357 * ((_3340 * _3358) + _3325)) + 9.9999999392252902907785028219223e-09) + (((_3357 * _3358) + _3325) * _3340))) * _3357;
                                float _4419 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                                float _3378 = (_3303 * _3280) * (((_3326 * 3.1415927410125732421875) * (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0)))) / ((_3348 * _3348) * ((_3293 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3378 * _3161.x;
                                frontier_phi_73_pred_1 = _3378 * _3161.y;
                                frontier_phi_73_pred_2 = _3304 * _3149.z;
                                frontier_phi_73_pred_3 = _3304 * _3149.y;
                                frontier_phi_73_pred_4 = _3304 * _3149.x;
                                frontier_phi_73_pred_5 = _3378 * _3161.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3382 = frontier_phi_73_pred;
                            _3383 = frontier_phi_73_pred_1;
                            _3387 = frontier_phi_73_pred_2;
                            _3386 = frontier_phi_73_pred_3;
                            _3385 = frontier_phi_73_pred_4;
                            _3384 = frontier_phi_73_pred_5;
                            _3091 = _3385 + _3104;
                            _3092 = _3386 + _3105;
                            _3093 = _3387 + _3106;
                            _3088 = _3382 + _3101;
                            _3089 = _3383 + _3102;
                            _3090 = _3384 + _3103;
                            if (_3108 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3101 = _3088;
                                _3102 = _3089;
                                _3103 = _3090;
                                _3104 = _3091;
                                _3105 = _3092;
                                _3106 = _3093;
                                _3107 = _3108;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3091;
                        frontier_phi_67_pred_1 = _3092;
                        frontier_phi_67_pred_2 = _3093;
                        frontier_phi_67_pred_3 = _3090;
                        frontier_phi_67_pred_4 = _3089;
                        frontier_phi_67_pred_5 = _3088;
                    }
                    _2756 = frontier_phi_67_pred;
                    _2758 = frontier_phi_67_pred_1;
                    _2760 = frontier_phi_67_pred_2;
                    _2754 = frontier_phi_67_pred_3;
                    _2752 = frontier_phi_67_pred_4;
                    _2750 = frontier_phi_67_pred_5;
                    uint _2895 = _2894 + 1u;
                    if (_2895 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2888 = _2750;
                        _2889 = _2752;
                        _2890 = _2754;
                        _2891 = _2756;
                        _2892 = _2758;
                        _2893 = _2760;
                        _2894 = _2895;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2758;
                frontier_phi_55_56_ladder_1 = _2760;
                frontier_phi_55_56_ladder_2 = _2756;
                frontier_phi_55_56_ladder_3 = _2754;
                frontier_phi_55_56_ladder_4 = _2752;
                frontier_phi_55_56_ladder_5 = _2750;
            }
            else
            {
                frontier_phi_55_56_ladder = _2644;
                frontier_phi_55_56_ladder_1 = _2646;
                frontier_phi_55_56_ladder_2 = _2642;
                frontier_phi_55_56_ladder_3 = _2640;
                frontier_phi_55_56_ladder_4 = _2638;
                frontier_phi_55_56_ladder_5 = _2636;
            }
            _2749 = frontier_phi_55_56_ladder_5;
            _2751 = frontier_phi_55_56_ladder_4;
            _2753 = frontier_phi_55_56_ladder_3;
            _2755 = frontier_phi_55_56_ladder_2;
            _2757 = frontier_phi_55_56_ladder;
            _2759 = frontier_phi_55_56_ladder_1;
        }
        float _2764 = isnan(1.0) ? _812 : (isnan(_812) ? 1.0 : min(_812, 1.0));
        _2548 = (_2764 * _2755) + _1984;
        _2550 = (_2764 * _2757) + _1986;
        _2552 = (_2764 * _2759) + _1988;
        _2554 = ((_2749 * _796) * _2764) + _2329;
        _2556 = ((_2751 * _798) * _2764) + _2331;
        _2558 = ((_2753 * _799) * _2764) + _2333;
    }
    else
    {
        _2548 = _1984;
        _2550 = _1986;
        _2552 = _1988;
        _2554 = _2329;
        _2556 = _2331;
        _2558 = _2333;
    }
    float _4435 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _4446 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _4457 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    uint _2578 = _243 + 6u;
    float _2586 = _734 / cbSceneParam._m0[86u].x;
    float _2587 = _735 / cbSceneParam._m0[86u].y;
    vec4 _2601 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2586, _2587, (log2((isnan(cbSceneParam._m0[77u].w) ? _669 : (isnan(_669) ? cbSceneParam._m0[77u].w : min(_669, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2603 = _2601.x;
    float _2604 = _2601.y;
    float _2605 = _2601.z;
    float _2606 = _2601.w;
    float _2699;
    float _2701;
    float _2703;
    float _2705;
    if (_669 > cbSceneParam._m0[78u].w)
    {
        float _2661 = isnan(_669) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _669 : min(cbSceneParam._m0[80u].w, _669));
        float _2662 = _2661 / _669;
        float _2673 = _2662 * _719;
        float _2674 = _720 * _2662;
        float _2675 = (-0.0) - _2674;
        float _2677 = _2662 * _721;
        float _2679 = (cbSceneParam._m0[77u].w * _2675) / _2661;
        float _2680 = _2679 + cbSceneParam._m0[79u].w;
        float _2681 = cbSceneParam._m0[79u].w - _2674;
        float _2687 = sqrt(((_2673 * _2673) + (_2674 * _2674)) + (_2677 * _2677));
        float _2690 = (1.0 - (cbSceneParam._m0[77u].w / _2661)) * _2687;
        float _2695 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2697 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2850;
        if (abs((_2675 - _2679) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2850 = ((((_2680 > 0.0) ? exp2(_2695 * _2680) : (2.0 - exp2(_2697 * _2680))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2690;
        }
        else
        {
            float _2810 = 1.0 / cbSceneParam._m0[80u].x;
            float _2811 = isnan(_2681) ? _2680 : (isnan(_2680) ? _2681 : max(_2680, _2681));
            float _2812 = isnan(_2681) ? _2680 : (isnan(_2680) ? _2681 : min(_2680, _2681));
            float _2821 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : min(_2811, 0.0));
            float _2822 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : min(_2812, 0.0));
            _2850 = ((abs(_2687 / _2675) * cbSceneParam._m0[80u].y) * ((((_2821 - _2822) * 2.0) - ((exp2(_2695 * (isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0)))) - exp2(_2695 * (isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0))))) * _2810)) - ((exp2(_2697 * _2821) - exp2(_2697 * _2822)) * _2810))) + (_2690 * cbSceneParam._m0[80u].z);
        }
        vec4 _2852 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2586, _2587, 1.0), 0.0);
        float _2861 = exp2((_2850 * (-1.44269502162933349609375)) * (1.0 - _2852.w));
        float _2862 = log2(_2861);
        float _2878 = log2(_2606);
        _2699 = (exp2(_2878 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2862 * cbSceneParam._m0[78u].x)) * _2852.x) / cbSceneParam._m0[78u].x)) + _2603;
        _2701 = (exp2(_2878 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2862 * cbSceneParam._m0[78u].y)) * _2852.y) / cbSceneParam._m0[78u].y)) + _2604;
        _2703 = (exp2(_2878 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2862 * cbSceneParam._m0[78u].z)) * _2852.z) / cbSceneParam._m0[78u].z)) + _2605;
        _2705 = _2861 * _2606;
    }
    else
    {
        _2699 = _2603;
        _2701 = _2604;
        _2703 = _2605;
        _2705 = _2606;
    }
    float _2717 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2718 = _2717 == 3.0;
    float _2719 = log2(_2705);
    float _2726 = exp2(_2719 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * (_2548 + ((isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))) * _812))) + ((_2554 + ((isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))) * _1620)) * cbPerFrame._m0[3u].x));
    float _2727 = exp2(_2719 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_2550 + ((isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))) * _812))) + ((_2556 + ((isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0))) * _1620)) * cbPerFrame._m0[3u].x));
    float _2728 = exp2(_2719 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * (_2552 + ((isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0))) * _812))) + ((_2558 + ((isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0))) * _1620)) * cbPerFrame._m0[3u].x));
    float _2737 = (_2717 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2737 * (_2718 ? _2726 : (_2726 + (cbSceneParam._m0[72u].w * _2699)));
    SV_Target.y = _2737 * (_2718 ? _2727 : (_2727 + (cbSceneParam._m0[72u].w * _2701)));
    SV_Target.z = _2737 * (_2718 ? _2728 : (_2728 + (cbSceneParam._m0[72u].w * _2703)));
    SV_Target.w = cbInstanceData._m0[_2578].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2578].w;
}


