#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1435;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _241 = _240 * _232;
    float _242 = _240 * _233;
    float _243 = _240 * _234;
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = _247 * NORMAL.x;
    float _249 = _247 * NORMAL.y;
    float _250 = _247 * NORMAL.z;
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255 = _254 * TANGENT.x;
    float _256 = _254 * TANGENT.y;
    float _257 = _254 * TANGENT.z;
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3761 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3772 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3783 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    uint _279 = uint(roundEven(NORMAL.w)) * 13u;
    uint _284 = _279 + 1u;
    uint _288 = _279 + 2u;
    float _297 = sqrt(((cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x)) + (cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x));
    float _298 = _297 * TEXCOORD.z;
    float _299 = _297 * TEXCOORD.w;
    vec4 _312 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _298) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _299) + cbTextureTilingScale._m0[13u].w));
    vec4 _336 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _341 = _336.x * cbMtdParam._m0[11u].x;
    float _342 = _336.y * cbMtdParam._m0[11u].y;
    float _343 = _336.z * cbMtdParam._m0[11u].z;
    vec4 _362 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _298) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _299) + cbTextureTilingScale._m0[5u].w));
    vec4 _398 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _400 = _398.x;
    float _412 = dot(vec4(_400, _398.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _429 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_400 - _412) * cbMtdParam._m0[24u].y) + _412) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3794 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _430 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _437 = (_430 * ((_362.x * cbMtdParam._m0[12u].x) - _341)) + _341;
    float _438 = (_430 * ((_362.y * cbMtdParam._m0[12u].y) - _342)) + _342;
    float _439 = (_430 * ((_362.z * cbMtdParam._m0[12u].z) - _343)) + _343;
    float _443 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _312.x) * _437;
    float _446 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _312.y) * _438;
    float _449 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _312.z) * _439;
    float _456 = ((_437 - _443) * (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0)))) + _443;
    float _457 = ((_438 - _446) * (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0)))) + _446;
    float _458 = ((_439 - _449) * (isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0)))) + _449;
    vec4 _476 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _298) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _299) + cbTextureTilingScale._m0[20u].w));
    vec4 _503 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _298) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _299) + cbTextureTilingScale._m0[4u].w));
    vec4 _520 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _522 = _520.x;
    float _523 = _520.y;
    float _524 = _520.z;
    float _533 = ((_503.z - _524) * _430) + _524;
    float _536 = ((((_503.x - _522) * _430) + _522) * 2.0) + (-1.0);
    float _537 = ((((_503.y - _523) * _430) + _523) * 2.0) + (-1.0);
    float _538 = dot(vec2(_536, _537), vec2(_536, _537));
    float _3805 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _543 = sqrt(1.0 - (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))));
    vec4 _563 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _575 = (_536 + ((((_476.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_563.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _576 = (_537 + ((((_476.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_563.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _579 = fma(_543, _248, fma(_576, _255, _575 * _241));
    float _582 = fma(_543, _249, fma(_576, _256, _575 * _242));
    float _585 = fma(_543, _250, fma(_576, _257, _575 * _243));
    float _589 = inversesqrt(dot(vec3(_579, _582, _585), vec3(_579, _582, _585)));
    vec4 _616 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _298) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _299) + cbTextureTilingScale._m0[11u].w));
    float _618 = _616.x;
    float _619 = 1.0 - _618;
    float _623 = ((_618 - _619) * cbMtdParam._m0[24u].z) + _619;
    float _625 = (cbMtdParam._m0[19u].x + dot(vec4(_589 * _579, _589 * _582, _589 * _585, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_623 * cbMtdParam._m0[21u].z);
    float _3816 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _626 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _628 = (-0.0) - cbMtdParam._m0[24u].x;
    float _630 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _631 = isnan(1.0) ? _630 : (isnan(_630) ? 1.0 : min(_630, 1.0));
    float _638 = _626 - ((_626 * TEXCOORD_8.x) * _631);
    float _639 = _626 - ((_626 * TEXCOORD_8.y) * _631);
    float _640 = _626 - ((_626 * TEXCOORD_8.z) * _631);
    float _647 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _651 = ((isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : min(_647, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _659 = (_651 - (((_623 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _651))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3847 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _660 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _664 = ((_638 * (cbMtdParam._m0[17u].x - _456)) * _660) + _456;
    float _665 = ((_639 * (cbMtdParam._m0[17u].y - _457)) * _660) + _457;
    float _666 = ((_640 * (cbMtdParam._m0[17u].z - _458)) * _660) + _458;
    vec4 _678 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _298) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _299) + cbTextureTilingScale._m0[19u].w));
    float _680 = _678.x;
    float _681 = 1.0 - _680;
    float _706 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_680 - _681) * cbMtdParam._m0[24u].w) + _681) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3858 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _707 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _715 = ((((cbMtdParam._m0[10u].x - _664) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _707) + _664;
    float _716 = ((((cbMtdParam._m0[10u].y - _665) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _707) + _665;
    float _717 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _666)) * _707) + _666;
    vec4 _743 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _745 = _743.x;
    float _763 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _298) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _299) + cbTextureTilingScale._m0[9u].w)).x - _745) * _430) + _745;
    float _767 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _763) * cbMtdParam._m0[19u].z) + _763;
    float _770 = _767 - ((_660 * _638) * _767);
    float _772 = _770 - (_770 * _707);
    float _777 = (((_476.z - _533) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _533;
    float _781 = ((_563.z - _777) * cbMtdParam._m0[19u].w) + _777;
    vec4 _795 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _298) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _299) + cbTextureTilingScale._m0[15u].w));
    float _802 = (_795.x * 2.0) + (-1.0);
    float _803 = (_795.y * 2.0) + (-1.0);
    float _804 = dot(vec2(_802, _803), vec2(_802, _803));
    float _3869 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _813 = (((_795.z - _781) * _638) * _660) + _781;
    float _816 = ((cbMtdParam._m0[23u].y - _813) * _707) + _813;
    vec4 _835 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _298) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _299) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _841 = (_835.x * 2.0) + (-1.0);
    float _842 = (_835.y * 2.0) + (-1.0);
    float _843 = dot(vec2(_841, _842), vec2(_841, _842));
    float _3880 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _863 = (((cbMtdParam._m0[21u].x * _575) + ((_802 - _575) * _638)) * _660) + _575;
    float _864 = (((cbMtdParam._m0[21u].x * _576) + ((_803 - _576) * _639)) * _660) + _576;
    float _865 = (((sqrt(1.0 - (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0)))) - _543) * _640) * _660) + _543;
    float _876 = (((_841 - _863) + (_863 * cbMtdParam._m0[22u].z)) * _707) + _863;
    float _877 = (((_842 - _864) + (_864 * cbMtdParam._m0[22u].z)) * _707) + _864;
    float _878 = ((sqrt(1.0 - (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0)))) - _865) * _707) + _865;
    float _882 = cbMtdParam._m0[22u].x + _563.w;
    float _885 = fma(_878, _248, fma(_877, _255, _876 * _241));
    float _888 = fma(_878, _249, fma(_877, _256, _876 * _242));
    float _891 = fma(_878, _250, fma(_877, _257, _876 * _243));
    float _895 = inversesqrt(dot(vec3(_885, _888, _891), vec3(_885, _888, _891)));
    float _896 = _895 * _885;
    float _897 = _895 * _888;
    float _898 = _895 * _891;
    float _3891 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _899 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    float _3902 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _3913 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _3924 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _3935 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _3946 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _904 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _918 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _958 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _968 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _958);
    float _969 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _958);
    float _970 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _958);
    float _974 = inversesqrt(dot(vec3(_968, _969, _970), vec3(_968, _969, _970)));
    float _975 = _968 * _974;
    float _976 = _969 * _974;
    float _977 = _970 * _974;
    float _983 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _984 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1002 = fma(_898, cbSceneParam._m0[5u].z, fma(_897, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _896));
    float _1005 = fma(_898, cbSceneParam._m0[6u].z, fma(_897, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _896));
    float _1008 = fma(_898, cbSceneParam._m0[7u].z, fma(_897, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _896));
    uint _1022 = (_279 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1028 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0)))) * cbInstanceData._m0[_1022].x;
    float _1029 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0)))) * cbInstanceData._m0[_1022].y;
    float _1030 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0)))) * cbInstanceData._m0[_1022].z;
    float _3957 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
    float _1031 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _3968 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _1032 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _3979 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _1033 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _1034 = 1.0 - _904;
    float _1035 = _1031 * _1034;
    float _1036 = _1032 * _1034;
    float _1037 = _1033 * _1034;
    float _1042 = (_1031 + (-0.039999999105930328369140625)) * _904;
    float _1043 = (_1032 + (-0.039999999105930328369140625)) * _904;
    float _1044 = (_1033 + (-0.039999999105930328369140625)) * _904;
    float _1045 = _1042 + 0.039999999105930328369140625;
    float _1047 = _1043 + 0.039999999105930328369140625;
    float _1048 = _1044 + 0.039999999105930328369140625;
    vec4 _1057 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _983, cbSceneParam._m0[86u].y * _984));
    float _1061 = ((isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * TEXCOORD_5.w) * _1057.x;
    float _1062 = dot(vec3(_896, _897, _898), vec3(_975, _976, _977));
    float _1065 = _1062 * 2.0;
    float _1069 = (_1065 * _896) - _975;
    float _1070 = (_1065 * _897) - _976;
    float _1071 = (_1065 * _898) - _977;
    float _1075 = abs(dot(vec3(_975, _976, _977), vec3(_896, _897, _898)));
    float _3990 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _1077 = sqrt(_899);
    float _1090 = exp2((_1077 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1077 * 3.0));
    float _1096 = (1.0 - _1090) * ((_1077 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1097 = _1090 * _1077;
    float _1125 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1129 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1133 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1434;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1159 = fma(_1133, cbModelParam._m0[26u].z, fma(_1129, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1125));
        float _1163 = fma(_1133, cbModelParam._m0[27u].z, fma(_1129, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1125));
        float _1167 = fma(_1133, cbModelParam._m0[28u].z, fma(_1129, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1125));
        float _1192 = _1125 + _896;
        float _1193 = _1129 + _897;
        float _1194 = _1133 + _898;
        float _1204 = fma(_1194, cbModelParam._m0[26u].z, fma(_1193, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1192)) - _1159;
        float _1205 = fma(_1194, cbModelParam._m0[27u].z, fma(_1193, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1192)) - _1163;
        float _1206 = fma(_1194, cbModelParam._m0[28u].z, fma(_1193, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1192)) - _1167;
        float _1210 = inversesqrt(dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206)));
        float _1223 = ((_1210 * _1204) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1159 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1224 = ((_1210 * _1205) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1163 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1225 = ((_1210 * _1206) / cbModelParam._m0[34u].z) + ((((((_1167 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        float _1262 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1228.x + (-0.5));
        float _1264 = _1262 * (_1228.y + (-0.5));
        float _1265 = _1262 * (_1228.z + (-0.5));
        float _1272 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1273 = _1272 * (_1235.x + (-0.5));
        float _1274 = _1272 * (_1235.y + (-0.5));
        float _1275 = _1272 * (_1235.z + (-0.5));
        float _1282 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1283 = _1282 * (_1242.x + (-0.5));
        float _1284 = _1282 * (_1242.y + (-0.5));
        float _1285 = _1282 * (_1242.z + (-0.5));
        float _1292 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1293 = _1292 * (_1249.x + (-0.5));
        float _1294 = _1292 * (_1249.y + (-0.5));
        float _1295 = _1292 * (_1249.z + (-0.5));
        float _1296 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1297 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1298 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1299 = _1263 * 0.5;
        float _1300 = _1273 * 0.5;
        float _1301 = _1283 * 0.5;
        float _1302 = dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301));
        float _1307 = (_1302 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1302);
        float _1316 = (dot(vec3(_896, _897, _898), vec3(_1307 * _1299, _1307 * _1300, _1307 * _1301)) + 1.0) * 0.5;
        float _4016 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1326 = sqrt(((_1300 * _1300) + (_1299 * _1299)) + (_1301 * _1301)) / (_1296 + 9.9999997473787516355514526367188e-06);
        float _4027 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1328 = _1327 * 2.0;
        float _1332 = (1.0 - _1327) / (_1327 + 1.0);
        float _4038 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1342 = ((((1.0 - _1333) * (_1328 + 2.0)) * exp2(log2(isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_1328 + 1.0))) + _1333) * _1296;
        float _1343 = _1264 * 0.5;
        float _1344 = _1274 * 0.5;
        float _1345 = _1284 * 0.5;
        float _1346 = dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345));
        float _1351 = (_1346 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1346);
        float _1359 = (dot(vec3(_896, _897, _898), vec3(_1351 * _1343, _1351 * _1344, _1351 * _1345)) + 1.0) * 0.5;
        float _4049 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1368 = sqrt(((_1344 * _1344) + (_1343 * _1343)) + (_1345 * _1345)) / (_1297 + 9.9999997473787516355514526367188e-06);
        float _4060 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1370 = _1369 * 2.0;
        float _1374 = (1.0 - _1369) / (_1369 + 1.0);
        float _4071 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1384 = ((((1.0 - _1375) * (_1370 + 2.0)) * exp2(log2(isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_1370 + 1.0))) + _1375) * _1297;
        float _1385 = _1265 * 0.5;
        float _1386 = _1275 * 0.5;
        float _1387 = _1285 * 0.5;
        float _1388 = dot(vec3(_1385, _1386, _1387), vec3(_1385, _1386, _1387));
        float _1393 = (_1388 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1388);
        float _1401 = (dot(vec3(_896, _897, _898), vec3(_1393 * _1385, _1393 * _1386, _1393 * _1387)) + 1.0) * 0.5;
        float _4082 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1410 = sqrt(((_1386 * _1386) + (_1385 * _1385)) + (_1387 * _1387)) / (_1298 + 9.9999997473787516355514526367188e-06);
        float _4093 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1412 = _1411 * 2.0;
        float _1416 = (1.0 - _1411) / (_1411 + 1.0);
        float _4104 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1426 = ((((1.0 - _1417) * (_1412 + 2.0)) * exp2(log2(isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_1412 + 1.0))) + _1417) * _1298;
        _1434 = _1265;
        _1436 = _1264;
        _1437 = _1263;
        _1438 = _1275;
        _1439 = _1274;
        _1440 = _1273;
        _1441 = _1285;
        _1442 = _1284;
        _1443 = _1283;
        _1444 = _1298;
        _1445 = _1297;
        _1446 = _1296;
        _1447 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)));
        _1448 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)));
        _1449 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)));
    }
    else
    {
        _1434 = _1435;
        _1436 = _1435;
        _1437 = _1435;
        _1438 = _1435;
        _1439 = _1435;
        _1440 = _1435;
        _1441 = _1435;
        _1442 = _1435;
        _1443 = _1435;
        _1444 = _1435;
        _1445 = _1435;
        _1446 = _1435;
        _1447 = 0.0;
        _1448 = 0.0;
        _1449 = 0.0;
    }
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1474 = fma(_1133, cbModelParam._m0[30u].z, fma(_1129, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1125));
        float _1478 = fma(_1133, cbModelParam._m0[31u].z, fma(_1129, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1125));
        float _1482 = fma(_1133, cbModelParam._m0[32u].z, fma(_1129, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1125));
        float _1505 = _1125 + _896;
        float _1506 = _1129 + _897;
        float _1507 = _1133 + _898;
        float _1517 = fma(_1507, cbModelParam._m0[30u].z, fma(_1506, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1505)) - _1474;
        float _1518 = fma(_1507, cbModelParam._m0[31u].z, fma(_1506, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1505)) - _1478;
        float _1519 = fma(_1507, cbModelParam._m0[32u].z, fma(_1506, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1505)) - _1482;
        float _1523 = inversesqrt(dot(vec3(_1517, _1518, _1519), vec3(_1517, _1518, _1519)));
        float _1536 = ((_1523 * _1517) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1474 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1537 = ((_1523 * _1518) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1478 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1538 = ((_1523 * _1519) / cbModelParam._m0[35u].z) + ((((((_1482 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1540 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1536, _1537, _1538), 0.0);
        vec4 _1547 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1536, _1537, _1538), 0.0);
        vec4 _1554 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1536, _1537, _1538), 0.0);
        vec4 _1561 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1536, _1537, _1538), 0.0);
        float _1573 = exp2((_1540.w + (-0.5)) * 20.0) * 2.0;
        float _1574 = _1573 * (_1540.x + (-0.5));
        float _1575 = _1573 * (_1540.y + (-0.5));
        float _1576 = _1573 * (_1540.z + (-0.5));
        float _1583 = exp2((_1547.w + (-0.5)) * 20.0) * 2.0;
        float _1584 = _1583 * (_1547.x + (-0.5));
        float _1585 = _1583 * (_1547.y + (-0.5));
        float _1586 = _1583 * (_1547.z + (-0.5));
        float _1593 = exp2((_1554.w + (-0.5)) * 20.0) * 2.0;
        float _1594 = _1593 * (_1554.x + (-0.5));
        float _1595 = _1593 * (_1554.y + (-0.5));
        float _1596 = _1593 * (_1554.z + (-0.5));
        float _1603 = exp2((_1561.w + (-0.5)) * 20.0) * 2.0;
        float _1604 = _1603 * (_1561.x + (-0.5));
        float _1605 = _1603 * (_1561.y + (-0.5));
        float _1606 = _1603 * (_1561.z + (-0.5));
        float _1607 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1608 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1609 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1610 = _1574 * 0.5;
        float _1611 = _1584 * 0.5;
        float _1612 = _1594 * 0.5;
        float _1613 = dot(vec3(_1610, _1611, _1612), vec3(_1610, _1611, _1612));
        float _1618 = (_1613 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1613);
        float _1626 = (dot(vec3(_896, _897, _898), vec3(_1618 * _1610, _1618 * _1611, _1618 * _1612)) + 1.0) * 0.5;
        float _4145 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1635 = sqrt(((_1611 * _1611) + (_1610 * _1610)) + (_1612 * _1612)) / (_1607 + 9.9999997473787516355514526367188e-06);
        float _4156 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1636 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1637 = _1636 * 2.0;
        float _1641 = (1.0 - _1636) / (_1636 + 1.0);
        float _4167 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1642 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1651 = ((((1.0 - _1642) * (_1637 + 2.0)) * exp2(log2(isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_1637 + 1.0))) + _1642) * _1607;
        float _1652 = _1575 * 0.5;
        float _1653 = _1585 * 0.5;
        float _1654 = _1595 * 0.5;
        float _1655 = dot(vec3(_1652, _1653, _1654), vec3(_1652, _1653, _1654));
        float _1660 = (_1655 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1655);
        float _1668 = (dot(vec3(_896, _897, _898), vec3(_1660 * _1652, _1660 * _1653, _1660 * _1654)) + 1.0) * 0.5;
        float _4178 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1677 = sqrt(((_1653 * _1653) + (_1652 * _1652)) + (_1654 * _1654)) / (_1608 + 9.9999997473787516355514526367188e-06);
        float _4189 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1678 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1679 = _1678 * 2.0;
        float _1683 = (1.0 - _1678) / (_1678 + 1.0);
        float _4200 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1684 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1693 = ((((1.0 - _1684) * (_1679 + 2.0)) * exp2(log2(isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_1679 + 1.0))) + _1684) * _1608;
        float _1694 = _1576 * 0.5;
        float _1695 = _1586 * 0.5;
        float _1696 = _1596 * 0.5;
        float _1697 = dot(vec3(_1694, _1695, _1696), vec3(_1694, _1695, _1696));
        float _1702 = (_1697 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1697);
        float _1710 = (dot(vec3(_896, _897, _898), vec3(_1702 * _1694, _1702 * _1695, _1702 * _1696)) + 1.0) * 0.5;
        float _4211 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1719 = sqrt(((_1695 * _1695) + (_1694 * _1694)) + (_1696 * _1696)) / (_1609 + 9.9999997473787516355514526367188e-06);
        float _4222 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1720 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1721 = _1720 * 2.0;
        float _1725 = (1.0 - _1720) / (_1720 + 1.0);
        float _4233 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1726 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1735 = ((((1.0 - _1726) * (_1721 + 2.0)) * exp2(log2(isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_1721 + 1.0))) + _1726) * _1609;
        _1743 = _1576;
        _1744 = _1575;
        _1745 = _1574;
        _1746 = _1586;
        _1747 = _1585;
        _1748 = _1584;
        _1749 = _1596;
        _1750 = _1595;
        _1751 = _1594;
        _1752 = _1609;
        _1753 = _1608;
        _1754 = _1607;
        _1755 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0)));
        _1756 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0)));
        _1757 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0)));
    }
    else
    {
        _1743 = _1435;
        _1744 = _1435;
        _1745 = _1435;
        _1746 = _1435;
        _1747 = _1435;
        _1748 = _1435;
        _1749 = _1435;
        _1750 = _1435;
        _1751 = _1435;
        _1752 = _1435;
        _1753 = _1435;
        _1754 = _1435;
        _1755 = 0.0;
        _1756 = 0.0;
        _1757 = 0.0;
    }
    float _1767 = (cbModelParam._m0[1u].x * (_1755 - _1447)) + _1447;
    float _1768 = (cbModelParam._m0[1u].x * (_1756 - _1448)) + _1448;
    float _1769 = (cbModelParam._m0[1u].x * (_1757 - _1449)) + _1449;
    float _1790 = fma(_1769, cbSceneParam._m0[89u].z, fma(_1768, cbSceneParam._m0[89u].y, _1767 * cbSceneParam._m0[89u].x));
    float _1793 = fma(_1769, cbSceneParam._m0[90u].z, fma(_1768, cbSceneParam._m0[90u].y, _1767 * cbSceneParam._m0[90u].x));
    float _1796 = fma(_1769, cbSceneParam._m0[91u].z, fma(_1768, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1767));
    float _1811 = _1069 * 0.5;
    float _1812 = _1070 * 0.5;
    float _1813 = _1071 * 0.5;
    float _1814 = dot(vec4(_1811, _1812, _1813, 1.0), vec4(_1745, _1748, _1751, _1754));
    float _1817 = dot(vec4(_1811, _1812, _1813, 1.0), vec4(_1744, _1747, _1750, _1753));
    float _1820 = dot(vec4(_1811, _1812, _1813, 1.0), vec4(_1743, _1746, _1749, _1752));
    float _1854;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1827 = dot(vec4(_1811, _1812, _1813, 1.0), vec4(_1434, _1438, _1441, _1444));
        float _1831 = dot(vec4(_1811, _1812, _1813, 1.0), vec4(_1436, _1439, _1442, _1445));
        float _1835 = dot(vec4(_1811, _1812, _1813, 1.0), vec4(_1437, _1440, _1443, _1446));
        float _1842 = dot(vec4(cbModelParam._m0[39u]), vec4(_1811, _1812, _1813, 1.0));
        _1854 = dot(vec3(isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0)), isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0)), isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1842) ? 0.0 : (isnan(0.0) ? _1842 : max(0.0, _1842))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1854 = 1.0;
    }
    float _1865;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1856 = dot(vec4(cbModelParam._m0[40u]), vec4(_1811, _1812, _1813, 1.0));
        _1865 = dot(vec3(isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0)), isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0)), isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1856) ? 0.0 : (isnan(0.0) ? _1856 : max(0.0, _1856))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1865 = 1.0;
    }
    float _1869 = (_1865 * cbModelParam._m0[1u].x) + (_1854 * (1.0 - cbModelParam._m0[1u].x));
    float _1879 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _899);
    float _1880 = isnan(_1879) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1879 : min(cbModelParam._m0[25u].z, _1879));
    float _1961;
    float _1963;
    float _1965;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1928 = fma(_1133, cbModelParam._m0[13u].z, fma(_1129, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1125)) + cbModelParam._m0[13u].w;
        float _1932 = fma(_1133, cbModelParam._m0[14u].z, fma(_1129, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1125)) + cbModelParam._m0[14u].w;
        float _1936 = fma(_1133, cbModelParam._m0[15u].z, fma(_1129, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1125)) + cbModelParam._m0[15u].w;
        float _1939 = fma(_1071, cbModelParam._m0[13u].z, fma(_1070, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1069));
        float _1942 = fma(_1071, cbModelParam._m0[14u].z, fma(_1070, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1069));
        float _1945 = fma(_1071, cbModelParam._m0[15u].z, fma(_1070, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1069));
        float _1973;
        if (_1939 > 0.0)
        {
            _1973 = abs((1.0 - _1928) / _1939);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1939 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1928 + 1.0) / _1939);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1973 = frontier_phi_14_12_ladder;
        }
        float _2176;
        if (_1942 > 0.0)
        {
            _2176 = abs((1.0 - _1932) / _1942);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1942 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1932 + 1.0) / _1942);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2176 = frontier_phi_23_19_ladder;
        }
        float _2430;
        if (_1945 > 0.0)
        {
            _2430 = abs((1.0 - _1936) / _1945);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1945 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1936 + 1.0) / _1945);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2430 = frontier_phi_35_30_ladder;
        }
        float _2432 = isnan(_2176) ? _1973 : (isnan(_1973) ? _2176 : min(_1973, _2176));
        float _2433 = isnan(_2430) ? _2432 : (isnan(_2432) ? _2430 : min(_2432, _2430));
        float _2437 = (_2433 * _1939) + _1928;
        float _2438 = (_2433 * _1942) + _1932;
        float _2439 = (_2433 * _1945) + _1936;
        float _2440 = _2433 * 9.9999997473787516355514526367188e-05;
        float _2442 = (-1.0) - _2440;
        float _2444 = _2440 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2439 > _2444) || ((_2439 < _2442) || ((_2438 > _2444) || ((_2438 < _2442) || ((_2437 < _2442) || (_2437 > _2444))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2567 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2439, cbModelParam._m0[9u].z, fma(_2438, cbModelParam._m0[9u].y, _2437 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2439, cbModelParam._m0[10u].z, fma(_2438, cbModelParam._m0[10u].y, _2437 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2439, cbModelParam._m0[11u].z, fma(_2438, cbModelParam._m0[11u].y, _2437 * cbModelParam._m0[11u].x))), _1880);
            frontier_phi_13_35_ladder = _2567.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2567.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2567.x * cbModelParam._m0[1u].y;
        }
        _1961 = frontier_phi_13_35_ladder_2;
        _1963 = frontier_phi_13_35_ladder_1;
        _1965 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1949 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1069, _1070, _1071), _1880);
        _1961 = _1949.x * cbModelParam._m0[1u].y;
        _1963 = _1949.y * cbModelParam._m0[1u].y;
        _1965 = _1949.z * cbModelParam._m0[1u].y;
    }
    float _1969 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _899);
    float _1970 = isnan(_1969) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1969 : min(cbModelParam._m0[25u].w, _1969));
    float _2060;
    float _2062;
    float _2064;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2024 = fma(_1133, cbModelParam._m0[21u].z, fma(_1129, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1125)) + cbModelParam._m0[21u].w;
        float _2028 = fma(_1133, cbModelParam._m0[22u].z, fma(_1129, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1125)) + cbModelParam._m0[22u].w;
        float _2032 = fma(_1133, cbModelParam._m0[23u].z, fma(_1129, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1125)) + cbModelParam._m0[23u].w;
        float _2035 = fma(_1071, cbModelParam._m0[21u].z, fma(_1070, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1069));
        float _2038 = fma(_1071, cbModelParam._m0[22u].z, fma(_1070, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1069));
        float _2041 = fma(_1071, cbModelParam._m0[23u].z, fma(_1070, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1069));
        float _2181;
        if (_2035 > 0.0)
        {
            _2181 = abs((1.0 - _2024) / _2035);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2035 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2024 + 1.0) / _2035);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2181 = frontier_phi_25_21_ladder;
        }
        float _2457;
        if (_2038 > 0.0)
        {
            _2457 = abs((1.0 - _2028) / _2038);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2038 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2028 + 1.0) / _2038);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2457 = frontier_phi_37_32_ladder;
        }
        float _2670;
        if (_2041 > 0.0)
        {
            _2670 = abs((1.0 - _2032) / _2041);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2041 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2032 + 1.0) / _2041);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2670 = frontier_phi_46_43_ladder;
        }
        float _2672 = isnan(_2457) ? _2181 : (isnan(_2181) ? _2457 : min(_2181, _2457));
        float _2673 = isnan(_2670) ? _2672 : (isnan(_2672) ? _2670 : min(_2672, _2670));
        float _2677 = (_2673 * _2035) + _2024;
        float _2678 = (_2673 * _2038) + _2028;
        float _2679 = (_2673 * _2041) + _2032;
        float _2680 = _2673 * 9.9999997473787516355514526367188e-05;
        float _2681 = (-1.0) - _2680;
        float _2683 = _2680 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2679 > _2683) || ((_2679 < _2681) || ((_2678 > _2683) || ((_2678 < _2681) || ((_2677 < _2681) || (_2677 > _2683))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2878 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2679, cbModelParam._m0[17u].z, fma(_2678, cbModelParam._m0[17u].y, _2677 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2679, cbModelParam._m0[18u].z, fma(_2678, cbModelParam._m0[18u].y, _2677 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2679, cbModelParam._m0[19u].z, fma(_2678, cbModelParam._m0[19u].y, _2677 * cbModelParam._m0[19u].x))), _1970);
            frontier_phi_22_46_ladder = _2878.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2878.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2878.x * cbModelParam._m0[1u].z;
        }
        _2060 = frontier_phi_22_46_ladder_2;
        _2062 = frontier_phi_22_46_ladder_1;
        _2064 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2044 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1069, _1070, _1071), _1970);
        _2060 = _2044.x * cbModelParam._m0[1u].z;
        _2062 = _2044.y * cbModelParam._m0[1u].z;
        _2064 = _2044.z * cbModelParam._m0[1u].z;
    }
    float _2077 = (((_1096 * _1045) + _1097) * _1061) * ((cbModelParam._m0[1u].w * (_2060 - _1961)) + _1961);
    float _2079 = (((_1096 * _1047) + _1097) * _1061) * ((cbModelParam._m0[1u].w * (_2062 - _1963)) + _1963);
    float _2081 = (((_1096 * _1048) + _1097) * _1061) * ((cbModelParam._m0[1u].w * (_2064 - _1965)) + _1965);
    float _2084 = fma(_2081, cbSceneParam._m0[89u].z, fma(_2079, cbSceneParam._m0[89u].y, _2077 * cbSceneParam._m0[89u].x));
    float _2087 = fma(_2081, cbSceneParam._m0[90u].z, fma(_2079, cbSceneParam._m0[90u].y, _2077 * cbSceneParam._m0[90u].x));
    float _2090 = fma(_2081, cbSceneParam._m0[91u].z, fma(_2079, cbSceneParam._m0[91u].y, _2077 * cbSceneParam._m0[91u].x));
    uvec4 _2100 = floatBitsToUint(cbInstanceData._m0[_279 + 5u]);
    uint _2102 = _2100.x * 14u;
    uint _2103 = _2102 + 13u;
    float _2110 = _1061 + (-1.0);
    float _2115 = (cbLight._m0[_2103].x * _2110) + 1.0;
    float _2116 = (cbLight._m0[_2103].y * _2110) + 1.0;
    float _2117 = (cbLight._m0[_2103].z * _2110) + 1.0;
    float _2118 = (cbLight._m0[_2103].w * _2110) + 1.0;
    uint _2119 = _2102 + 5u;
    float _2125 = isnan(1.0) ? _2116 : (isnan(_2116) ? 1.0 : min(_2116, 1.0));
    uint _2129 = _2102 + 4u;
    float _2135 = isnan(1.0) ? _2115 : (isnan(_2115) ? 1.0 : min(_2115, 1.0));
    uint _2139 = _2102 | 1u;
    float _2150 = dot(vec3(cbLight._m0[_2102].xyz), vec3(_896, _897, _898));
    float _2153 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_896, _897, _898));
    float _4369 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _4380 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2158 = (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * 0.3183098733425140380859375;
    float _2160 = (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * 0.3183098733425140380859375;
    float _2167 = ((cbLight._m0[_2119].x * _2125) * _2160) + ((cbLight._m0[_2129].x * _2135) * _2158);
    float _2168 = ((_2125 * cbLight._m0[_2119].y) * _2160) + ((_2135 * cbLight._m0[_2129].y) * _2158);
    float _2169 = ((_2125 * cbLight._m0[_2119].z) * _2160) + ((_2135 * cbLight._m0[_2129].z) * _2158);
    uvec4 _2173 = floatBitsToUint(cbLight._m0[_2102 + 12u]);
    bool _2175 = _2173.x == 0u;
    float _2186;
    float _2188;
    float _2190;
    if (_2175)
    {
        _2186 = _2167;
        _2188 = _2168;
        _2190 = _2169;
    }
    else
    {
        uint _2194 = _2102 + 6u;
        float _2210 = (dot(vec3(cbLight._m0[_2102 + 2u].xyz), vec3(_896, _897, _898)) * 0.5) + 0.5;
        float _2211 = _2210 * _2210;
        float _4391 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        float _2212 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _2213 = isnan(1.0) ? _2117 : (isnan(_2117) ? 1.0 : min(_2117, 1.0));
        _2186 = (((cbLight._m0[_2194].x * 0.3183098733425140380859375) * _2212) * _2213) + _2167;
        _2188 = (((cbLight._m0[_2194].y * 0.3183098733425140380859375) * _2212) * _2213) + _2168;
        _2190 = (((cbLight._m0[_2194].z * 0.3183098733425140380859375) * _2212) * _2213) + _2169;
    }
    bool _2193 = _2173.y == 0u;
    float _2231;
    float _2233;
    float _2235;
    if (_2193)
    {
        _2231 = _2186;
        _2233 = _2188;
        _2235 = _2190;
    }
    else
    {
        uint _2401 = _2102 + 7u;
        float _2417 = (dot(vec3(cbLight._m0[_2102 + 3u].xyz), vec3(_896, _897, _898)) * 0.5) + 0.5;
        float _2418 = _2417 * _2417;
        float _4407 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2419 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _2420 = isnan(1.0) ? _2118 : (isnan(_2118) ? 1.0 : min(_2118, 1.0));
        _2231 = (((cbLight._m0[_2401].x * 0.3183098733425140380859375) * _2419) * _2420) + _2186;
        _2233 = (((cbLight._m0[_2401].y * 0.3183098733425140380859375) * _2419) * _2420) + _2188;
        _2235 = (((cbLight._m0[_2401].z * 0.3183098733425140380859375) * _2419) * _2420) + _2190;
    }
    uint _2238 = _2102 + 8u;
    float _2251 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2102].w)) * _899) * 0.949999988079071044921875);
    float _2252 = _2251 * _2251;
    float _2253 = cbLight._m0[_2102].x + _975;
    float _2254 = cbLight._m0[_2102].y + _976;
    float _2255 = cbLight._m0[_2102].z + _977;
    float _2259 = inversesqrt(dot(vec3(_2253, _2254, _2255), vec3(_2253, _2254, _2255)));
    float _2260 = _2259 * _2253;
    float _2261 = _2259 * _2254;
    float _2262 = _2259 * _2255;
    float _2263 = dot(vec3(_896, _897, _898), vec3(cbLight._m0[_2102].xyz));
    float _4423 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2266 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
    float _4434 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    float _2267 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
    float _2268 = dot(vec3(_896, _897, _898), vec3(_2260, _2261, _2262));
    float _4445 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2271 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
    float _2272 = dot(vec3(cbLight._m0[_2102].xyz), vec3(_2260, _2261, _2262));
    float _4456 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2276 = _2252 * _2252;
    float _2280 = ((_2271 * _2271) * (_2276 + (-1.0))) + 1.0;
    float _2288 = exp2(log2(1.0 - (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0)))) * 5.0);
    float _2289 = 0.959999978542327880859375 - _1042;
    float _2291 = 0.959999978542327880859375 - _1043;
    float _2292 = 0.959999978542327880859375 - _1044;
    float _2299 = 1.0 - _2252;
    float _2310 = (0.5 / (((_2267 * ((_2266 * _2299) + _2252)) + 9.9999999392252902907785028219223e-09) + (((_2267 * _2299) + _2252) * _2266))) * _2266;
    float _4467 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2312 = (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_2276 / ((_2280 * _2280) * 3.141590118408203125));
    uint _2323 = _2102 + 9u;
    float _2334 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2139].w)) * _899) * 0.949999988079071044921875);
    float _2335 = _2334 * _2334;
    float _2336 = cbLight._m0[_2139].x + _975;
    float _2337 = cbLight._m0[_2139].y + _976;
    float _2338 = cbLight._m0[_2139].z + _977;
    float _2342 = inversesqrt(dot(vec3(_2336, _2337, _2338), vec3(_2336, _2337, _2338)));
    float _2343 = _2342 * _2336;
    float _2344 = _2342 * _2337;
    float _2345 = _2342 * _2338;
    float _2346 = dot(vec3(_896, _897, _898), vec3(cbLight._m0[_2139].xyz));
    float _4478 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2349 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
    float _2350 = dot(vec3(_896, _897, _898), vec3(_2343, _2344, _2345));
    float _4489 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2353 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
    float _2354 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_2343, _2344, _2345));
    float _4500 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2358 = _2335 * _2335;
    float _2362 = ((_2353 * _2353) * (_2358 + (-1.0))) + 1.0;
    float _2369 = exp2(log2(1.0 - (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0)))) * 5.0);
    float _2376 = 1.0 - _2335;
    float _2386 = (0.5 / (((_2267 * ((_2349 * _2376) + _2335)) + 9.9999999392252902907785028219223e-09) + (((_2267 * _2376) + _2335) * _2349))) * _2349;
    float _4511 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2388 = (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0))) * (_2358 / ((_2362 * _2362) * 3.141590118408203125));
    float _2398 = (((((_2369 * _2289) + _1045) * cbLight._m0[_2323].x) * _2388) * _2125) + (((((_2288 * _2289) + _1045) * cbLight._m0[_2238].x) * _2312) * _2135);
    float _2399 = (((((_2369 * _2291) + _1047) * cbLight._m0[_2323].y) * _2388) * _2125) + (((((_2288 * _2291) + _1047) * cbLight._m0[_2238].y) * _2312) * _2135);
    float _2400 = (((((_2369 * _2292) + _1048) * cbLight._m0[_2323].z) * _2388) * _2125) + (((((_2288 * _2292) + _1048) * cbLight._m0[_2238].z) * _2312) * _2135);
    float _2462;
    float _2464;
    float _2466;
    if (_2175)
    {
        _2462 = _2398;
        _2464 = _2399;
        _2466 = _2400;
    }
    else
    {
        uint _2468 = _2102 + 2u;
        uint _2472 = _2102 + 10u;
        float _2486 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2468].w)) * _899) * 0.949999988079071044921875);
        float _2487 = _2486 * _2486;
        float _2488 = cbLight._m0[_2468].x + _975;
        float _2489 = cbLight._m0[_2468].y + _976;
        float _2490 = cbLight._m0[_2468].z + _977;
        float _2494 = inversesqrt(dot(vec3(_2488, _2489, _2490), vec3(_2488, _2489, _2490)));
        float _2495 = _2494 * _2488;
        float _2496 = _2494 * _2489;
        float _2497 = _2494 * _2490;
        float _2498 = dot(vec3(_896, _897, _898), vec3(cbLight._m0[_2468].xyz));
        float _4522 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2501 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _2502 = dot(vec3(_896, _897, _898), vec3(_2495, _2496, _2497));
        float _4533 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2505 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _2506 = dot(vec3(cbLight._m0[_2468].xyz), vec3(_2495, _2496, _2497));
        float _4544 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2510 = _2487 * _2487;
        float _2514 = ((_2505 * _2505) * (_2510 + (-1.0))) + 1.0;
        float _2521 = exp2(log2(1.0 - (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0)))) * 5.0);
        float _2528 = 1.0 - _2487;
        float _2538 = (0.5 / (((_2267 * ((_2501 * _2528) + _2487)) + 9.9999999392252902907785028219223e-09) + (((_2267 * _2528) + _2487) * _2501))) * _2501;
        float _4555 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2540 = (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (_2510 / ((_2514 * _2514) * 3.141590118408203125));
        float _2541 = isnan(1.0) ? _2117 : (isnan(_2117) ? 1.0 : min(_2117, 1.0));
        _2462 = (((((_2521 * _2289) + _1045) * cbLight._m0[_2472].x) * _2540) * _2541) + _2398;
        _2464 = (((((_2521 * _2291) + _1047) * cbLight._m0[_2472].y) * _2540) * _2541) + _2399;
        _2466 = (((((_2521 * _2292) + _1048) * cbLight._m0[_2472].z) * _2540) * _2541) + _2400;
    }
    float _2576;
    float _2578;
    float _2580;
    if (_2193)
    {
        _2576 = _2462;
        _2578 = _2464;
        _2580 = _2466;
    }
    else
    {
        uint _2587 = _2102 + 3u;
        uint _2591 = _2102 + 11u;
        float _2605 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2587].w)) * _899) * 0.949999988079071044921875);
        float _2606 = _2605 * _2605;
        float _2607 = cbLight._m0[_2587].x + _975;
        float _2608 = cbLight._m0[_2587].y + _976;
        float _2609 = cbLight._m0[_2587].z + _977;
        float _2613 = inversesqrt(dot(vec3(_2607, _2608, _2609), vec3(_2607, _2608, _2609)));
        float _2614 = _2613 * _2607;
        float _2615 = _2613 * _2608;
        float _2616 = _2613 * _2609;
        float _2617 = dot(vec3(_896, _897, _898), vec3(cbLight._m0[_2587].xyz));
        float _4571 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2620 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _2621 = dot(vec3(_896, _897, _898), vec3(_2614, _2615, _2616));
        float _4582 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
        float _2624 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
        float _2625 = dot(vec3(cbLight._m0[_2587].xyz), vec3(_2614, _2615, _2616));
        float _4593 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
        float _2629 = _2606 * _2606;
        float _2633 = ((_2624 * _2624) * (_2629 + (-1.0))) + 1.0;
        float _2640 = exp2(log2(1.0 - (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0)))) * 5.0);
        float _2647 = 1.0 - _2606;
        float _2657 = (0.5 / (((_2267 * ((_2620 * _2647) + _2606)) + 9.9999999392252902907785028219223e-09) + (((_2267 * _2647) + _2606) * _2620))) * _2620;
        float _4604 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
        float _2659 = (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * (_2629 / ((_2633 * _2633) * 3.141590118408203125));
        float _2660 = isnan(1.0) ? _2118 : (isnan(_2118) ? 1.0 : min(_2118, 1.0));
        _2576 = (((((_2640 * _2289) + _1045) * cbLight._m0[_2591].x) * _2659) * _2660) + _2462;
        _2578 = (((((_2640 * _2291) + _1047) * cbLight._m0[_2591].y) * _2659) * _2660) + _2464;
        _2580 = (((((_2640 * _2292) + _1048) * cbLight._m0[_2591].z) * _2659) * _2660) + _2466;
    }
    float _2795;
    float _2797;
    float _2799;
    float _2801;
    float _2803;
    float _2805;
    if (_2100.y == 0u)
    {
        float _2735 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2736 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2735;
        float _2737 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2735;
        float _2738 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2735;
        uvec4 _2750 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2751 = _2750.x;
        uint _2762 = uint((float(_2750.y) * floor(float(uint(cbSceneParam._m0[85u].y * _984) / _2751))) + floor(float(uint(cbSceneParam._m0[85u].x * _983) / _2751)));
        float _2772 = (log2(_2738 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2773 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
        uint _2776 = uint(isnan(14.0) ? _2773 : (isnan(_2773) ? 14.0 : min(_2773, 14.0)));
        uvec4 _2781 = texelFetch(g_lightClusterGridBuffer, int(((_2776 << 2u) + (_2762 << 6u)) >> 2u));
        uint _2782 = _2781.x;
        uint _2783 = _2750.z;
        float _2883;
        float _2885;
        float _2887;
        float _2889;
        float _2891;
        float _2893;
        if (((((1u << ((_2783 >> 4u) & 15u)) + 4294967295u) & _2782) == 0u) || ((_2783 & 240u) == 0u))
        {
            _2883 = 0.0;
            _2885 = 0.0;
            _2887 = 0.0;
            _2889 = 0.0;
            _2891 = 0.0;
            _2893 = 0.0;
        }
        else
        {
            float _2884;
            float _2886;
            float _2888;
            float _2890;
            float _2892;
            float _2894;
            float _3027 = 0.0;
            float _3028 = 0.0;
            float _3029 = 0.0;
            float _3030 = 0.0;
            float _3031 = 0.0;
            float _3032 = 0.0;
            uint _3033 = 0u;
            uint _3042;
            bool _3043;
            for (;;)
            {
                _3042 = texelFetch(g_lightClassification, int((((_2776 << 5u) + (_2762 << 9u)) + (_3033 << 2u)) >> 2u)).x;
                _3043 = _3042 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3043)
                {
                    frontier_phi_61_pred = _3027;
                    frontier_phi_61_pred_1 = _3032;
                    frontier_phi_61_pred_2 = _3031;
                    frontier_phi_61_pred_3 = _3030;
                    frontier_phi_61_pred_4 = _3029;
                    frontier_phi_61_pred_5 = _3028;
                }
                else
                {
                    float _3151;
                    float _3152;
                    float _3153;
                    float _3154;
                    float _3155;
                    float _3156;
                    uint _3157;
                    _3151 = _3027;
                    _3152 = _3028;
                    _3153 = _3029;
                    _3154 = _3030;
                    _3155 = _3031;
                    _3156 = _3032;
                    _3157 = _3042;
                    float _3083;
                    float _3084;
                    float _3085;
                    float _3086;
                    float _3087;
                    float _3088;
                    for (;;)
                    {
                        uint _3161 = uint(findLSB(_3157)) + (_3033 << 5u);
                        uint _3158 = (_3157 + 4294967295u) & _3157;
                        uint _3163 = _3161 * 48u;
                        vec4 _3177 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3163)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 3u)).x));
                        uint _3183 = (_3161 * 48u) + 4u;
                        vec4 _3196 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3183)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 3u)).x));
                        uint _3202 = (_3161 * 48u) + 8u;
                        vec3 _3213 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3202)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 2u)).x));
                        float _3217 = _3177.x - _2736;
                        float _3218 = _3177.y - _2737;
                        float _3219 = _3177.z - _2738;
                        float _3220 = dot(vec3(_3217, _3218, _3219), vec3(_3217, _3218, _3219));
                        float _3223 = inversesqrt(_3220);
                        float _3224 = _3223 * _3217;
                        float _3225 = _3223 * _3218;
                        float _3226 = _3223 * _3219;
                        float _3227 = dot(vec3(_1002, _1005, _1008), vec3(_3224, _3225, _3226));
                        float _3232 = 1.0 - (_3220 * _3177.w);
                        float _4630 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                        float _3233 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                        float _3234 = sqrt(_3220) * _3196.w;
                        float _3237 = 1.39999997615814208984375 / (_3234 + 1.39999997615814208984375);
                        float _3238 = _3237 * _3237;
                        float _3241 = ((1.0 - _3238) * _3227) + _3238;
                        float _3244 = _3234 * _3234;
                        float _3248 = ((isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0))) * _3233) / ((_3244 * 0.699999988079071044921875) + 1.0);
                        float _3252 = (-0.0) - _2736;
                        float _3253 = (-0.0) - _2737;
                        float _3254 = (-0.0) - _2738;
                        float _3258 = inversesqrt(dot(vec3(_3252, _3253, _3254), vec3(_3252, _3253, _3254)));
                        float _3259 = _3258 * _3252;
                        float _3260 = _3258 * _3253;
                        float _3261 = _3258 * _3254;
                        float _3269 = exp2(log2(1.0 / ((_3244 * 3.5) + 5.0)) * 0.25);
                        float _3270 = 1.0 - _1077;
                        float _3277 = sqrt(1.0 - ((1.0 - (_3270 * _3270)) * (1.0 - (_3269 * _3269))));
                        float _3278 = _3277 * _3277;
                        float _3279 = _3278 * _3278;
                        float _3280 = _3259 + _3224;
                        float _3281 = _3260 + _3225;
                        float _3282 = _3261 + _3226;
                        float _3286 = inversesqrt(dot(vec3(_3280, _3281, _3282), vec3(_3280, _3281, _3282)));
                        float _3290 = dot(vec3(_1002, _1005, _1008), vec3(_3259, _3260, _3261));
                        float _4646 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                        float _3293 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                        float _3294 = dot(vec3(_1002, _1005, _1008), vec3(_3286 * _3280, _3286 * _3281, _3286 * _3282));
                        float _4657 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                        float _3297 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                        float _3301 = ((_3297 * _3297) * (_3279 + (-1.0))) + 1.0;
                        float _3302 = _3237 * _3278;
                        float _3303 = _3302 * _3302;
                        float _3306 = ((1.0 - _3303) * _3227) + _3303;
                        float _4668 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                        float _3307 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                        float _3308 = 1.0 - _3278;
                        float _3318 = (0.5 / (((_3307 * ((_3293 * _3308) + _3278)) + 9.9999999392252902907785028219223e-09) + (((_3307 * _3308) + _3278) * _3293))) * _3307;
                        float _4679 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                        float _3329 = (((_3279 * 3.1415927410125732421875) * (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0)))) / ((_3301 * _3301) * ((_3244 * 2.1991131305694580078125) + 3.141590118408203125))) * _3233;
                        _3086 = (_3248 * _3196.x) + _3154;
                        _3087 = (_3248 * _3196.y) + _3155;
                        _3088 = (_3248 * _3196.z) + _3156;
                        _3083 = (_3329 * _3213.x) + _3151;
                        _3084 = (_3329 * _3213.y) + _3152;
                        _3085 = (_3329 * _3213.z) + _3153;
                        if (_3158 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3151 = _3083;
                            _3152 = _3084;
                            _3153 = _3085;
                            _3154 = _3086;
                            _3155 = _3087;
                            _3156 = _3088;
                            _3157 = _3158;
                        }
                    }
                    frontier_phi_61_pred = _3083;
                    frontier_phi_61_pred_1 = _3088;
                    frontier_phi_61_pred_2 = _3087;
                    frontier_phi_61_pred_3 = _3086;
                    frontier_phi_61_pred_4 = _3085;
                    frontier_phi_61_pred_5 = _3084;
                }
                _2884 = frontier_phi_61_pred;
                _2894 = frontier_phi_61_pred_1;
                _2892 = frontier_phi_61_pred_2;
                _2890 = frontier_phi_61_pred_3;
                _2888 = frontier_phi_61_pred_4;
                _2886 = frontier_phi_61_pred_5;
                uint _3034 = _3033 + 1u;
                if (_3034 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3027 = _2884;
                    _3028 = _2886;
                    _3029 = _2888;
                    _3030 = _2890;
                    _3031 = _2892;
                    _3032 = _2894;
                    _3033 = _3034;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2883 = _2884;
            _2885 = _2886;
            _2887 = _2888;
            _2889 = _2890;
            _2891 = _2892;
            _2893 = _2894;
        }
        uvec4 _2897 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2898 = _2897.z;
        uint _2900 = (_2898 >> 8u) & 15u;
        float _2995;
        float _2997;
        float _2999;
        float _3001;
        float _3003;
        float _3005;
        if (((4294967295u << _2900) & _2782) == 0u)
        {
            _2995 = _2883;
            _2997 = _2885;
            _2999 = _2887;
            _3001 = _2889;
            _3003 = _2891;
            _3005 = _2893;
        }
        else
        {
            float _3020 = inversesqrt(dot(vec3(_2736, _2737, _2738), vec3(_2736, _2737, _2738)));
            float _3021 = _3020 * _2736;
            float _3022 = _3020 * _2737;
            float _3023 = _3020 * _2738;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2900 < ((_2898 >> 12u) & 15u))
            {
                float _2996;
                float _2998;
                float _3000;
                float _3002;
                float _3004;
                float _3006;
                float _3134 = _2883;
                float _3135 = _2885;
                float _3136 = _2887;
                float _3137 = _2889;
                float _3138 = _2891;
                float _3139 = _2893;
                uint _3140 = _2900;
                uint _3149;
                bool _3150;
                for (;;)
                {
                    _3149 = texelFetch(g_lightClassification, int((((_2776 << 5u) + (_2762 << 9u)) + (_3140 << 2u)) >> 2u)).x;
                    _3150 = _3149 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3150)
                    {
                        frontier_phi_67_pred = _3137;
                        frontier_phi_67_pred_1 = _3138;
                        frontier_phi_67_pred_2 = _3139;
                        frontier_phi_67_pred_3 = _3136;
                        frontier_phi_67_pred_4 = _3135;
                        frontier_phi_67_pred_5 = _3134;
                    }
                    else
                    {
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3627;
                        float _3628;
                        float _3629;
                        float _3630;
                        float _3631;
                        float _3632;
                        float _3347 = _3134;
                        float _3348 = _3135;
                        float _3349 = _3136;
                        float _3350 = _3137;
                        float _3351 = _3138;
                        float _3352 = _3139;
                        uint _3353 = _3149;
                        uint _3354;
                        vec4 _3379;
                        float _3380;
                        vec4 _3395;
                        vec3 _3407;
                        vec4 _3422;
                        vec4 _3437;
                        float _3483;
                        bool _3484;
                        for (;;)
                        {
                            uint _3364 = ((_3140 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3353));
                            _3354 = (_3353 + 4294967295u) & _3353;
                            uint _3366 = _3364 * 40u;
                            _3379 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3366)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 3u)).x));
                            _3380 = _3379.w;
                            uint _3382 = (_3364 * 40u) + 4u;
                            _3395 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3382)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 3u)).x));
                            uint _3397 = (_3364 * 40u) + 8u;
                            _3407 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3397)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 2u)).x));
                            uint _3409 = (_3364 * 40u) + 16u;
                            _3422 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3409)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 3u)).x));
                            uint _3424 = (_3364 * 40u) + 20u;
                            _3437 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3424)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 3u)).x));
                            uint _3439 = (_3364 * 40u) + 24u;
                            vec4 _3452 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3439)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 3u)).x));
                            uint _3458 = (_3364 * 40u) + 28u;
                            vec4 _3471 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3458)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 3u)).x));
                            _3483 = fma(_2738, _3471.z, fma(_2737, _3471.y, _3471.x * _2736)) + _3471.w;
                            _3484 = !((fma(_2738, _3452.z, fma(_2737, _3452.y, _3452.x * _2736)) + _3452.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3484)
                            {
                                float _3511 = _3379.x - _2736;
                                float _3512 = _3379.y - _2737;
                                float _3513 = _3379.z - _2738;
                                float _3514 = dot(vec3(_3511, _3512, _3513), vec3(_3511, _3512, _3513));
                                float _3517 = inversesqrt(_3514);
                                float _3518 = _3517 * _3511;
                                float _3519 = _3517 * _3512;
                                float _3520 = _3517 * _3513;
                                float _3524 = 1.0 - (_3514 / (_3380 * _3380));
                                float _4690 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                                float _3525 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
                                float _3529 = sqrt(_3514) * _3395.w;
                                float _3531 = 1.39999997615814208984375 / (_3529 + 1.39999997615814208984375);
                                float _3532 = _3531 * _3531;
                                float _3535 = ((1.0 - _3532) * dot(vec3(_3518, _3519, _3520), vec3(_1002, _1005, _1008))) + _3532;
                                float _3538 = _3529 * _3529;
                                float _3542 = (fma(_2738, _3422.z, fma(_2737, _3422.y, _3422.x * _2736)) + _3422.w) / _3483;
                                float _3543 = (fma(_2738, _3437.z, fma(_2737, _3437.y, _3437.x * _2736)) + _3437.w) / _3483;
                                float _3547 = 1.0 - dot(vec2(_3542, _3543), vec2(_3542, _3543));
                                float _4706 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                                float _3548 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
                                float _3549 = _3548 * (((isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0))) * _3525) / ((_3538 * 0.699999988079071044921875) + 1.0));
                                float _3561 = exp2(log2(1.0 / ((_3538 * 3.5) + 5.0)) * 0.25);
                                float _3562 = 1.0 - _1077;
                                float _3569 = sqrt(1.0 - ((1.0 - (_3562 * _3562)) * (1.0 - (_3561 * _3561))));
                                float _3570 = _3569 * _3569;
                                float _3571 = _3570 * _3570;
                                float _3572 = _3518 - _3021;
                                float _3573 = _3519 - _3022;
                                float _3574 = _3520 - _3023;
                                float _3578 = inversesqrt(dot(vec3(_3572, _3573, _3574), vec3(_3572, _3573, _3574)));
                                float _3582 = dot(vec3(_1002, _1005, _1008), vec3((-0.0) - _3021, (-0.0) - _3022, (-0.0) - _3023));
                                float _4717 = isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0));
                                float _3585 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                                float _3586 = dot(vec3(_1002, _1005, _1008), vec3(_3578 * _3572, _3578 * _3573, _3578 * _3574));
                                float _4728 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                                float _3589 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
                                float _3593 = ((_3589 * _3589) * (_3571 + (-1.0))) + 1.0;
                                float _3594 = _3531 * _3570;
                                float _3595 = _3594 * _3594;
                                float _3601 = ((1.0 - _3595) * dot(vec3(_1002, _1005, _1008), vec3(_3518, _3519, _3520))) + _3595;
                                float _4739 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                                float _3602 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                                float _3603 = 1.0 - _3570;
                                float _3613 = (0.5 / (((_3602 * ((_3585 * _3603) + _3570)) + 9.9999999392252902907785028219223e-09) + (((_3602 * _3603) + _3570) * _3585))) * _3602;
                                float _4750 = isnan(0.0) ? _3613 : (isnan(_3613) ? 0.0 : max(_3613, 0.0));
                                float _3623 = (_3548 * _3525) * (((_3571 * 3.1415927410125732421875) * (isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0)))) / ((_3593 * _3593) * ((_3538 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3623 * _3407.x;
                                frontier_phi_73_pred_1 = _3623 * _3407.y;
                                frontier_phi_73_pred_2 = _3549 * _3395.z;
                                frontier_phi_73_pred_3 = _3549 * _3395.y;
                                frontier_phi_73_pred_4 = _3549 * _3395.x;
                                frontier_phi_73_pred_5 = _3623 * _3407.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3627 = frontier_phi_73_pred;
                            _3628 = frontier_phi_73_pred_1;
                            _3632 = frontier_phi_73_pred_2;
                            _3631 = frontier_phi_73_pred_3;
                            _3630 = frontier_phi_73_pred_4;
                            _3629 = frontier_phi_73_pred_5;
                            _3337 = _3630 + _3350;
                            _3338 = _3631 + _3351;
                            _3339 = _3632 + _3352;
                            _3334 = _3627 + _3347;
                            _3335 = _3628 + _3348;
                            _3336 = _3629 + _3349;
                            if (_3354 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3347 = _3334;
                                _3348 = _3335;
                                _3349 = _3336;
                                _3350 = _3337;
                                _3351 = _3338;
                                _3352 = _3339;
                                _3353 = _3354;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3337;
                        frontier_phi_67_pred_1 = _3338;
                        frontier_phi_67_pred_2 = _3339;
                        frontier_phi_67_pred_3 = _3336;
                        frontier_phi_67_pred_4 = _3335;
                        frontier_phi_67_pred_5 = _3334;
                    }
                    _3002 = frontier_phi_67_pred;
                    _3004 = frontier_phi_67_pred_1;
                    _3006 = frontier_phi_67_pred_2;
                    _3000 = frontier_phi_67_pred_3;
                    _2998 = frontier_phi_67_pred_4;
                    _2996 = frontier_phi_67_pred_5;
                    uint _3141 = _3140 + 1u;
                    if (_3141 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3134 = _2996;
                        _3135 = _2998;
                        _3136 = _3000;
                        _3137 = _3002;
                        _3138 = _3004;
                        _3139 = _3006;
                        _3140 = _3141;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3004;
                frontier_phi_55_56_ladder_1 = _3006;
                frontier_phi_55_56_ladder_2 = _3002;
                frontier_phi_55_56_ladder_3 = _3000;
                frontier_phi_55_56_ladder_4 = _2998;
                frontier_phi_55_56_ladder_5 = _2996;
            }
            else
            {
                frontier_phi_55_56_ladder = _2891;
                frontier_phi_55_56_ladder_1 = _2893;
                frontier_phi_55_56_ladder_2 = _2889;
                frontier_phi_55_56_ladder_3 = _2887;
                frontier_phi_55_56_ladder_4 = _2885;
                frontier_phi_55_56_ladder_5 = _2883;
            }
            _2995 = frontier_phi_55_56_ladder_5;
            _2997 = frontier_phi_55_56_ladder_4;
            _2999 = frontier_phi_55_56_ladder_3;
            _3001 = frontier_phi_55_56_ladder_2;
            _3003 = frontier_phi_55_56_ladder;
            _3005 = frontier_phi_55_56_ladder_1;
        }
        float _3010 = isnan(1.0) ? _1061 : (isnan(_1061) ? 1.0 : min(_1061, 1.0));
        _2795 = (_3010 * _3001) + _2231;
        _2797 = (_3010 * _3003) + _2233;
        _2799 = (_3010 * _3005) + _2235;
        _2801 = ((_2995 * _1045) * _3010) + _2576;
        _2803 = ((_2997 * _1047) * _3010) + _2578;
        _2805 = ((_2999 * _1048) * _3010) + _2580;
    }
    else
    {
        _2795 = _2231;
        _2797 = _2233;
        _2799 = _2235;
        _2801 = _2576;
        _2803 = _2578;
        _2805 = _2580;
    }
    float _4766 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    float _4777 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
    float _4788 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    uint _2825 = _279 + 6u;
    float _2833 = _983 / cbSceneParam._m0[86u].x;
    float _2834 = _984 / cbSceneParam._m0[86u].y;
    vec4 _2848 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2833, _2834, (log2((isnan(cbSceneParam._m0[77u].w) ? _918 : (isnan(_918) ? cbSceneParam._m0[77u].w : min(_918, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2850 = _2848.x;
    float _2851 = _2848.y;
    float _2852 = _2848.z;
    float _2853 = _2848.w;
    float _2945;
    float _2947;
    float _2949;
    float _2951;
    if (_918 > cbSceneParam._m0[78u].w)
    {
        float _2908 = isnan(_918) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _918 : min(cbSceneParam._m0[80u].w, _918));
        float _2909 = _2908 / _918;
        float _2920 = _2909 * _968;
        float _2921 = _969 * _2909;
        float _2922 = (-0.0) - _2921;
        float _2923 = _2909 * _970;
        float _2925 = (cbSceneParam._m0[77u].w * _2922) / _2908;
        float _2926 = _2925 + cbSceneParam._m0[79u].w;
        float _2927 = cbSceneParam._m0[79u].w - _2921;
        float _2933 = sqrt(((_2920 * _2920) + (_2921 * _2921)) + (_2923 * _2923));
        float _2936 = (1.0 - (cbSceneParam._m0[77u].w / _2908)) * _2933;
        float _2941 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2943 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3096;
        if (abs((_2922 - _2925) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3096 = ((((_2926 > 0.0) ? exp2(_2941 * _2926) : (2.0 - exp2(_2943 * _2926))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2936;
        }
        else
        {
            float _3056 = 1.0 / cbSceneParam._m0[80u].x;
            float _3057 = isnan(_2927) ? _2926 : (isnan(_2926) ? _2927 : max(_2926, _2927));
            float _3058 = isnan(_2927) ? _2926 : (isnan(_2926) ? _2927 : min(_2926, _2927));
            float _3067 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : min(_3057, 0.0));
            float _3068 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : min(_3058, 0.0));
            _3096 = ((abs(_2933 / _2922) * cbSceneParam._m0[80u].y) * ((((_3067 - _3068) * 2.0) - ((exp2(_2941 * (isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0)))) - exp2(_2941 * (isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0))))) * _3056)) - ((exp2(_2943 * _3067) - exp2(_2943 * _3068)) * _3056))) + (_2936 * cbSceneParam._m0[80u].z);
        }
        vec4 _3098 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2833, _2834, 1.0), 0.0);
        float _3107 = exp2((_3096 * (-1.44269502162933349609375)) * (1.0 - _3098.w));
        float _3108 = log2(_3107);
        float _3124 = log2(_2853);
        _2945 = (exp2(_3124 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3108 * cbSceneParam._m0[78u].x)) * _3098.x) / cbSceneParam._m0[78u].x)) + _2850;
        _2947 = (exp2(_3124 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3108 * cbSceneParam._m0[78u].y)) * _3098.y) / cbSceneParam._m0[78u].y)) + _2851;
        _2949 = (exp2(_3124 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3108 * cbSceneParam._m0[78u].z)) * _3098.z) / cbSceneParam._m0[78u].z)) + _2852;
        _2951 = _3107 * _2853;
    }
    else
    {
        _2945 = _2850;
        _2947 = _2851;
        _2949 = _2852;
        _2951 = _2853;
    }
    float _2963 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2964 = _2963 == 3.0;
    float _2965 = log2(_2951);
    float _2972 = exp2(_2965 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0))) * (_2795 + ((isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))) * _1061))) + ((_2801 + ((isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0))) * _1869)) * cbPerFrame._m0[3u].x));
    float _2973 = exp2(_2965 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0))) * (_2797 + ((isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))) * _1061))) + ((_2803 + ((isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0))) * _1869)) * cbPerFrame._m0[3u].x));
    float _2974 = exp2(_2965 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0))) * (_2799 + ((isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0))) * _1061))) + ((_2805 + ((isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0))) * _1869)) * cbPerFrame._m0[3u].x));
    float _2983 = (_2963 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2983 * (_2964 ? _2972 : (_2972 + (cbSceneParam._m0[72u].w * _2945)));
    SV_Target.y = _2983 * (_2964 ? _2973 : (_2973 + (cbSceneParam._m0[72u].w * _2947)));
    SV_Target.z = _2983 * (_2964 ? _2974 : (_2974 + (cbSceneParam._m0[72u].w * _2949)));
    SV_Target.w = cbInstanceData._m0[_2825].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2825].w;
}


