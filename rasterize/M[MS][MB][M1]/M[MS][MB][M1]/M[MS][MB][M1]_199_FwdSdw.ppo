#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1414;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4021 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _4032 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _4043 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    uint _280 = uint(roundEven(NORMAL.w)) * 13u;
    uint _285 = _280 + 1u;
    uint _289 = _280 + 2u;
    float _298 = sqrt(((cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x)) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x));
    float _299 = _298 * TEXCOORD.z;
    float _300 = _298 * TEXCOORD.w;
    vec4 _313 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _299) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _300) + cbTextureTilingScale._m0[13u].w));
    vec4 _337 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _342 = _337.x * cbMtdParam._m0[11u].x;
    float _343 = _337.y * cbMtdParam._m0[11u].y;
    float _344 = _337.z * cbMtdParam._m0[11u].z;
    vec4 _363 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _299) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _300) + cbTextureTilingScale._m0[5u].w));
    vec4 _400 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _402 = _400.x;
    float _414 = dot(vec4(_402, _400.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _431 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_402 - _414) * cbMtdParam._m0[24u].y) + _414) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4054 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _432 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
    float _439 = (_432 * ((_363.x * cbMtdParam._m0[12u].x) - _342)) + _342;
    float _440 = (_432 * ((_363.y * cbMtdParam._m0[12u].y) - _343)) + _343;
    float _441 = (_432 * ((_363.z * cbMtdParam._m0[12u].z) - _344)) + _344;
    vec4 _458 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _299) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _300) + cbTextureTilingScale._m0[3u].w));
    vec4 _478 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _480 = _478.x;
    float _490 = dot(vec4(_480, _478.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _504 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_480 - _490) * cbMtdParam._m0[24u].y) + _490) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4065 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _505 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _512 = (_505 * ((_458.x * cbMtdParam._m0[13u].x) - _439)) + _439;
    float _513 = (_505 * ((_458.y * cbMtdParam._m0[13u].y) - _440)) + _440;
    float _514 = (_505 * ((_458.z * cbMtdParam._m0[13u].z) - _441)) + _441;
    float _518 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _313.x) * _512;
    float _521 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _313.y) * _513;
    float _524 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _313.z) * _514;
    float _531 = ((_512 - _518) * (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0)))) + _518;
    float _532 = ((_513 - _521) * (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0)))) + _521;
    float _533 = ((_514 - _524) * (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0)))) + _524;
    vec4 _552 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _299) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _300) + cbTextureTilingScale._m0[14u].w));
    vec4 _571 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _299) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _300) + cbTextureTilingScale._m0[20u].w));
    vec4 _594 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _299) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _300) + cbTextureTilingScale._m0[4u].w));
    vec4 _611 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _613 = _611.x;
    float _614 = _611.y;
    float _615 = _611.z;
    float _622 = ((_594.x - _613) * _432) + _613;
    float _623 = ((_594.y - _614) * _432) + _614;
    float _624 = ((_594.z - _615) * _432) + _615;
    vec4 _636 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _299) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _300) + cbTextureTilingScale._m0[2u].w));
    float _649 = ((_636.z - _624) * _505) + _624;
    float _652 = ((((_636.x - _622) * _505) + _622) * 2.0) + (-1.0);
    float _653 = ((((_636.y - _623) * _505) + _623) * 2.0) + (-1.0);
    float _654 = dot(vec2(_652, _653), vec2(_652, _653));
    float _4076 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _659 = sqrt(1.0 - (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))));
    vec4 _673 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _698 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _299) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _300) + cbTextureTilingScale._m0[11u].w));
    float _700 = _698.x;
    float _701 = 1.0 - _700;
    float _714 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_700 - _701) * cbMtdParam._m0[24u].z) + _701) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4087 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _715 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
    float _722 = (_715 * ((_552.x * cbMtdParam._m0[18u].x) - _531)) + _531;
    float _723 = (_715 * ((_552.y * cbMtdParam._m0[18u].y) - _532)) + _532;
    float _724 = (_715 * ((_552.z * cbMtdParam._m0[18u].z) - _533)) + _533;
    vec4 _736 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _750 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _752 = _750.x;
    float _770 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _299) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _300) + cbTextureTilingScale._m0[9u].w)).x - _752) * _432) + _752;
    float _787 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _299) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _300) + cbTextureTilingScale._m0[21u].w)).x - _770) * _505) + _770;
    float _791 = ((_736.x - _787) * cbMtdParam._m0[19u].z) + _787;
    float _793 = _791 - (_791 * _715);
    float _798 = (((_571.z - _649) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _649;
    float _802 = ((_673.z - _798) * cbMtdParam._m0[19u].w) + _798;
    vec4 _815 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _299) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _300) + cbTextureTilingScale._m0[15u].w));
    float _822 = (_815.x * 2.0) + (-1.0);
    float _823 = (_815.y * 2.0) + (-1.0);
    float _824 = dot(vec2(_822, _823), vec2(_822, _823));
    float _4098 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _832 = (_715 * (_815.z - _802)) + _802;
    float _841 = (_652 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_571.x * 2.0) + (-1.0)))) + (((_673.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _842 = (_653 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_571.y * 2.0) + (-1.0)))) + (((_673.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _854 = (((_822 - _841) + (cbMtdParam._m0[21u].x * _841)) * _715) + _841;
    float _855 = (((_823 - _842) + (cbMtdParam._m0[21u].x * _842)) * _715) + _842;
    float _856 = (_715 * (sqrt(1.0 - (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) - _659)) + _659;
    float _860 = cbMtdParam._m0[22u].x + _673.w;
    float _863 = fma(_856, _246 * NORMAL.x, fma(_855, _253 * TANGENT.x, (_239 * _231) * _854));
    float _866 = fma(_856, _246 * NORMAL.y, fma(_855, _253 * TANGENT.y, (_239 * _232) * _854));
    float _869 = fma(_856, _246 * NORMAL.z, fma(_855, _253 * TANGENT.z, (_239 * _233) * _854));
    float _873 = inversesqrt(dot(vec3(_863, _866, _869), vec3(_863, _866, _869)));
    float _874 = _873 * _863;
    float _875 = _873 * _866;
    float _876 = _873 * _869;
    float _4109 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _877 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _4120 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _4131 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _4142 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _4153 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _4164 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _882 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
    float _896 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _937 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _947 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _937);
    float _948 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _937);
    float _949 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _937);
    float _953 = inversesqrt(dot(vec3(_947, _948, _949), vec3(_947, _948, _949)));
    float _954 = _947 * _953;
    float _955 = _948 * _953;
    float _956 = _949 * _953;
    float _962 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _963 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _981 = fma(_876, cbSceneParam._m0[5u].z, fma(_875, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _874));
    float _984 = fma(_876, cbSceneParam._m0[6u].z, fma(_875, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _874));
    float _987 = fma(_876, cbSceneParam._m0[7u].z, fma(_875, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _874));
    uint _1001 = (_280 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1007 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0)))) * cbInstanceData._m0[_1001].x;
    float _1008 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0)))) * cbInstanceData._m0[_1001].y;
    float _1009 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0)))) * cbInstanceData._m0[_1001].z;
    float _4175 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _1010 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
    float _4186 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _1011 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
    float _4197 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _1012 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
    float _1013 = 1.0 - _882;
    float _1014 = _1010 * _1013;
    float _1015 = _1011 * _1013;
    float _1016 = _1012 * _1013;
    float _1021 = (_1010 + (-0.039999999105930328369140625)) * _882;
    float _1022 = (_1011 + (-0.039999999105930328369140625)) * _882;
    float _1023 = (_1012 + (-0.039999999105930328369140625)) * _882;
    float _1024 = _1021 + 0.039999999105930328369140625;
    float _1026 = _1022 + 0.039999999105930328369140625;
    float _1027 = _1023 + 0.039999999105930328369140625;
    vec4 _1036 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _962, cbSceneParam._m0[86u].y * _963));
    float _1040 = ((isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * TEXCOORD_5.w) * _1036.x;
    float _1041 = dot(vec3(_874, _875, _876), vec3(_954, _955, _956));
    float _1044 = _1041 * 2.0;
    float _1048 = (_1044 * _874) - _954;
    float _1049 = (_1044 * _875) - _955;
    float _1050 = (_1044 * _876) - _956;
    float _1054 = abs(dot(vec3(_954, _955, _956), vec3(_874, _875, _876)));
    float _4208 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    float _1056 = sqrt(_877);
    float _1069 = exp2((_1056 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1056 * 3.0));
    float _1075 = (1.0 - _1069) * ((_1056 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1076 = _1069 * _1056;
    float _1104 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1108 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1112 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1413;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1138 = fma(_1112, cbModelParam._m0[26u].z, fma(_1108, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1104));
        float _1142 = fma(_1112, cbModelParam._m0[27u].z, fma(_1108, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1104));
        float _1146 = fma(_1112, cbModelParam._m0[28u].z, fma(_1108, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1104));
        float _1171 = _1104 + _874;
        float _1172 = _1108 + _875;
        float _1173 = _1112 + _876;
        float _1183 = fma(_1173, cbModelParam._m0[26u].z, fma(_1172, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1171)) - _1138;
        float _1184 = fma(_1173, cbModelParam._m0[27u].z, fma(_1172, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1171)) - _1142;
        float _1185 = fma(_1173, cbModelParam._m0[28u].z, fma(_1172, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1171)) - _1146;
        float _1189 = inversesqrt(dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185)));
        float _1202 = ((_1189 * _1183) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1138 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1203 = ((_1189 * _1184) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1142 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1204 = ((_1189 * _1185) / cbModelParam._m0[34u].z) + ((((((_1146 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        float _1241 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1207.x + (-0.5));
        float _1243 = _1241 * (_1207.y + (-0.5));
        float _1244 = _1241 * (_1207.z + (-0.5));
        float _1251 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1214.x + (-0.5));
        float _1253 = _1251 * (_1214.y + (-0.5));
        float _1254 = _1251 * (_1214.z + (-0.5));
        float _1261 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1221.x + (-0.5));
        float _1263 = _1261 * (_1221.y + (-0.5));
        float _1264 = _1261 * (_1221.z + (-0.5));
        float _1271 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1228.x + (-0.5));
        float _1273 = _1271 * (_1228.y + (-0.5));
        float _1274 = _1271 * (_1228.z + (-0.5));
        float _1275 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1276 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1277 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1278 = _1242 * 0.5;
        float _1279 = _1252 * 0.5;
        float _1280 = _1262 * 0.5;
        float _1281 = dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280));
        float _1286 = (_1281 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1281);
        float _1295 = (dot(vec3(_874, _875, _876), vec3(_1286 * _1278, _1286 * _1279, _1286 * _1280)) + 1.0) * 0.5;
        float _4234 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1305 = sqrt(((_1279 * _1279) + (_1278 * _1278)) + (_1280 * _1280)) / (_1275 + 9.9999997473787516355514526367188e-06);
        float _4245 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1307 = _1306 * 2.0;
        float _1311 = (1.0 - _1306) / (_1306 + 1.0);
        float _4256 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1321 = ((((1.0 - _1312) * (_1307 + 2.0)) * exp2(log2(isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_1307 + 1.0))) + _1312) * _1275;
        float _1322 = _1243 * 0.5;
        float _1323 = _1253 * 0.5;
        float _1324 = _1263 * 0.5;
        float _1325 = dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324));
        float _1330 = (_1325 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1325);
        float _1338 = (dot(vec3(_874, _875, _876), vec3(_1330 * _1322, _1330 * _1323, _1330 * _1324)) + 1.0) * 0.5;
        float _4267 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1347 = sqrt(((_1323 * _1323) + (_1322 * _1322)) + (_1324 * _1324)) / (_1276 + 9.9999997473787516355514526367188e-06);
        float _4278 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1349 = _1348 * 2.0;
        float _1353 = (1.0 - _1348) / (_1348 + 1.0);
        float _4289 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1363 = ((((1.0 - _1354) * (_1349 + 2.0)) * exp2(log2(isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_1349 + 1.0))) + _1354) * _1276;
        float _1364 = _1244 * 0.5;
        float _1365 = _1254 * 0.5;
        float _1366 = _1264 * 0.5;
        float _1367 = dot(vec3(_1364, _1365, _1366), vec3(_1364, _1365, _1366));
        float _1372 = (_1367 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1367);
        float _1380 = (dot(vec3(_874, _875, _876), vec3(_1372 * _1364, _1372 * _1365, _1372 * _1366)) + 1.0) * 0.5;
        float _4300 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1389 = sqrt(((_1365 * _1365) + (_1364 * _1364)) + (_1366 * _1366)) / (_1277 + 9.9999997473787516355514526367188e-06);
        float _4311 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1391 = _1390 * 2.0;
        float _1395 = (1.0 - _1390) / (_1390 + 1.0);
        float _4322 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _1405 = ((((1.0 - _1396) * (_1391 + 2.0)) * exp2(log2(isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_1391 + 1.0))) + _1396) * _1277;
        _1413 = _1244;
        _1415 = _1243;
        _1416 = _1242;
        _1417 = _1254;
        _1418 = _1253;
        _1419 = _1252;
        _1420 = _1264;
        _1421 = _1263;
        _1422 = _1262;
        _1423 = _1277;
        _1424 = _1276;
        _1425 = _1275;
        _1426 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)));
        _1427 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)));
        _1428 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)));
    }
    else
    {
        _1413 = _1414;
        _1415 = _1414;
        _1416 = _1414;
        _1417 = _1414;
        _1418 = _1414;
        _1419 = _1414;
        _1420 = _1414;
        _1421 = _1414;
        _1422 = _1414;
        _1423 = _1414;
        _1424 = _1414;
        _1425 = _1414;
        _1426 = 0.0;
        _1427 = 0.0;
        _1428 = 0.0;
    }
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1452 = fma(_1112, cbModelParam._m0[30u].z, fma(_1108, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1104));
        float _1456 = fma(_1112, cbModelParam._m0[31u].z, fma(_1108, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1104));
        float _1460 = fma(_1112, cbModelParam._m0[32u].z, fma(_1108, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1104));
        float _1483 = _1104 + _874;
        float _1484 = _1108 + _875;
        float _1485 = _1112 + _876;
        float _1495 = fma(_1485, cbModelParam._m0[30u].z, fma(_1484, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1483)) - _1452;
        float _1496 = fma(_1485, cbModelParam._m0[31u].z, fma(_1484, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1483)) - _1456;
        float _1497 = fma(_1485, cbModelParam._m0[32u].z, fma(_1484, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1483)) - _1460;
        float _1501 = inversesqrt(dot(vec3(_1495, _1496, _1497), vec3(_1495, _1496, _1497)));
        float _1514 = ((_1501 * _1495) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1452 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1515 = ((_1501 * _1496) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1456 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1516 = ((_1501 * _1497) / cbModelParam._m0[35u].z) + ((((((_1460 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1518 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1514, _1515, _1516), 0.0);
        vec4 _1525 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1514, _1515, _1516), 0.0);
        vec4 _1532 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1514, _1515, _1516), 0.0);
        vec4 _1539 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1514, _1515, _1516), 0.0);
        float _1551 = exp2((_1518.w + (-0.5)) * 20.0) * 2.0;
        float _1552 = _1551 * (_1518.x + (-0.5));
        float _1553 = _1551 * (_1518.y + (-0.5));
        float _1554 = _1551 * (_1518.z + (-0.5));
        float _1561 = exp2((_1525.w + (-0.5)) * 20.0) * 2.0;
        float _1562 = _1561 * (_1525.x + (-0.5));
        float _1563 = _1561 * (_1525.y + (-0.5));
        float _1564 = _1561 * (_1525.z + (-0.5));
        float _1571 = exp2((_1532.w + (-0.5)) * 20.0) * 2.0;
        float _1572 = _1571 * (_1532.x + (-0.5));
        float _1573 = _1571 * (_1532.y + (-0.5));
        float _1574 = _1571 * (_1532.z + (-0.5));
        float _1581 = exp2((_1539.w + (-0.5)) * 20.0) * 2.0;
        float _1582 = _1581 * (_1539.x + (-0.5));
        float _1583 = _1581 * (_1539.y + (-0.5));
        float _1584 = _1581 * (_1539.z + (-0.5));
        float _1585 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1586 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1587 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1588 = _1552 * 0.5;
        float _1589 = _1562 * 0.5;
        float _1590 = _1572 * 0.5;
        float _1591 = dot(vec3(_1588, _1589, _1590), vec3(_1588, _1589, _1590));
        float _1596 = (_1591 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1591);
        float _1604 = (dot(vec3(_874, _875, _876), vec3(_1596 * _1588, _1596 * _1589, _1596 * _1590)) + 1.0) * 0.5;
        float _4363 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1613 = sqrt(((_1589 * _1589) + (_1588 * _1588)) + (_1590 * _1590)) / (_1585 + 9.9999997473787516355514526367188e-06);
        float _4374 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1614 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _1615 = _1614 * 2.0;
        float _1619 = (1.0 - _1614) / (_1614 + 1.0);
        float _4385 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _1629 = ((((1.0 - _1620) * (_1615 + 2.0)) * exp2(log2(isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (_1615 + 1.0))) + _1620) * _1585;
        float _1630 = _1553 * 0.5;
        float _1631 = _1563 * 0.5;
        float _1632 = _1573 * 0.5;
        float _1633 = dot(vec3(_1630, _1631, _1632), vec3(_1630, _1631, _1632));
        float _1638 = (_1633 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1633);
        float _1646 = (dot(vec3(_874, _875, _876), vec3(_1638 * _1630, _1638 * _1631, _1638 * _1632)) + 1.0) * 0.5;
        float _4396 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1655 = sqrt(((_1631 * _1631) + (_1630 * _1630)) + (_1632 * _1632)) / (_1586 + 9.9999997473787516355514526367188e-06);
        float _4407 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1656 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _1657 = _1656 * 2.0;
        float _1661 = (1.0 - _1656) / (_1656 + 1.0);
        float _4418 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _1671 = ((((1.0 - _1662) * (_1657 + 2.0)) * exp2(log2(isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_1657 + 1.0))) + _1662) * _1586;
        float _1672 = _1554 * 0.5;
        float _1673 = _1564 * 0.5;
        float _1674 = _1574 * 0.5;
        float _1675 = dot(vec3(_1672, _1673, _1674), vec3(_1672, _1673, _1674));
        float _1680 = (_1675 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1675);
        float _1688 = (dot(vec3(_874, _875, _876), vec3(_1680 * _1672, _1680 * _1673, _1680 * _1674)) + 1.0) * 0.5;
        float _4429 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1697 = sqrt(((_1673 * _1673) + (_1672 * _1672)) + (_1674 * _1674)) / (_1587 + 9.9999997473787516355514526367188e-06);
        float _4440 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1698 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
        float _1699 = _1698 * 2.0;
        float _1703 = (1.0 - _1698) / (_1698 + 1.0);
        float _4451 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1704 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _1713 = ((((1.0 - _1704) * (_1699 + 2.0)) * exp2(log2(isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_1699 + 1.0))) + _1704) * _1587;
        _1721 = _1554;
        _1722 = _1553;
        _1723 = _1552;
        _1724 = _1564;
        _1725 = _1563;
        _1726 = _1562;
        _1727 = _1574;
        _1728 = _1573;
        _1729 = _1572;
        _1730 = _1587;
        _1731 = _1586;
        _1732 = _1585;
        _1733 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)));
        _1734 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0)));
        _1735 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0)));
    }
    else
    {
        _1721 = _1414;
        _1722 = _1414;
        _1723 = _1414;
        _1724 = _1414;
        _1725 = _1414;
        _1726 = _1414;
        _1727 = _1414;
        _1728 = _1414;
        _1729 = _1414;
        _1730 = _1414;
        _1731 = _1414;
        _1732 = _1414;
        _1733 = 0.0;
        _1734 = 0.0;
        _1735 = 0.0;
    }
    float _1745 = (cbModelParam._m0[1u].x * (_1733 - _1426)) + _1426;
    float _1746 = (cbModelParam._m0[1u].x * (_1734 - _1427)) + _1427;
    float _1747 = (cbModelParam._m0[1u].x * (_1735 - _1428)) + _1428;
    float _1768 = fma(_1747, cbSceneParam._m0[89u].z, fma(_1746, cbSceneParam._m0[89u].y, _1745 * cbSceneParam._m0[89u].x));
    float _1771 = fma(_1747, cbSceneParam._m0[90u].z, fma(_1746, cbSceneParam._m0[90u].y, _1745 * cbSceneParam._m0[90u].x));
    float _1774 = fma(_1747, cbSceneParam._m0[91u].z, fma(_1746, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1745));
    float _1789 = _1048 * 0.5;
    float _1790 = _1049 * 0.5;
    float _1791 = _1050 * 0.5;
    float _1792 = dot(vec4(_1789, _1790, _1791, 1.0), vec4(_1723, _1726, _1729, _1732));
    float _1795 = dot(vec4(_1789, _1790, _1791, 1.0), vec4(_1722, _1725, _1728, _1731));
    float _1798 = dot(vec4(_1789, _1790, _1791, 1.0), vec4(_1721, _1724, _1727, _1730));
    float _1832;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1805 = dot(vec4(_1789, _1790, _1791, 1.0), vec4(_1413, _1417, _1420, _1423));
        float _1809 = dot(vec4(_1789, _1790, _1791, 1.0), vec4(_1415, _1418, _1421, _1424));
        float _1813 = dot(vec4(_1789, _1790, _1791, 1.0), vec4(_1416, _1419, _1422, _1425));
        float _1820 = dot(vec4(cbModelParam._m0[39u]), vec4(_1789, _1790, _1791, 1.0));
        _1832 = dot(vec3(isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0)), isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0)), isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1820) ? 0.0 : (isnan(0.0) ? _1820 : max(0.0, _1820))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1832 = 1.0;
    }
    float _1843;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1834 = dot(vec4(cbModelParam._m0[40u]), vec4(_1789, _1790, _1791, 1.0));
        _1843 = dot(vec3(isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0)), isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0)), isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1834) ? 0.0 : (isnan(0.0) ? _1834 : max(0.0, _1834))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1843 = 1.0;
    }
    float _1847 = (_1843 * cbModelParam._m0[1u].x) + (_1832 * (1.0 - cbModelParam._m0[1u].x));
    float _1857 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _877);
    float _1858 = isnan(_1857) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1857 : min(cbModelParam._m0[25u].z, _1857));
    float _1938;
    float _1940;
    float _1942;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1905 = fma(_1112, cbModelParam._m0[13u].z, fma(_1108, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1104)) + cbModelParam._m0[13u].w;
        float _1909 = fma(_1112, cbModelParam._m0[14u].z, fma(_1108, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1104)) + cbModelParam._m0[14u].w;
        float _1913 = fma(_1112, cbModelParam._m0[15u].z, fma(_1108, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1104)) + cbModelParam._m0[15u].w;
        float _1916 = fma(_1050, cbModelParam._m0[13u].z, fma(_1049, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1048));
        float _1919 = fma(_1050, cbModelParam._m0[14u].z, fma(_1049, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1048));
        float _1922 = fma(_1050, cbModelParam._m0[15u].z, fma(_1049, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1048));
        float _1950;
        if (_1916 > 0.0)
        {
            _1950 = abs((1.0 - _1905) / _1916);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1916 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1905 + 1.0) / _1916);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1950 = frontier_phi_14_12_ladder;
        }
        float _2121;
        if (_1919 > 0.0)
        {
            _2121 = abs((1.0 - _1909) / _1919);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1919 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1909 + 1.0) / _1919);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2121 = frontier_phi_23_19_ladder;
        }
        float _2416;
        if (_1922 > 0.0)
        {
            _2416 = abs((1.0 - _1913) / _1922);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1922 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1913 + 1.0) / _1922);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2416 = frontier_phi_35_30_ladder;
        }
        float _2418 = isnan(_2121) ? _1950 : (isnan(_1950) ? _2121 : min(_1950, _2121));
        float _2419 = isnan(_2416) ? _2418 : (isnan(_2418) ? _2416 : min(_2418, _2416));
        float _2423 = (_2419 * _1916) + _1905;
        float _2424 = (_2419 * _1919) + _1909;
        float _2425 = (_2419 * _1922) + _1913;
        float _2426 = _2419 * 9.9999997473787516355514526367188e-05;
        float _2428 = (-1.0) - _2426;
        float _2430 = _2426 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2425 > _2430) || ((_2425 < _2428) || ((_2424 > _2430) || ((_2424 < _2428) || ((_2423 < _2428) || (_2423 > _2430))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2570 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2425, cbModelParam._m0[9u].z, fma(_2424, cbModelParam._m0[9u].y, _2423 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2425, cbModelParam._m0[10u].z, fma(_2424, cbModelParam._m0[10u].y, _2423 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2425, cbModelParam._m0[11u].z, fma(_2424, cbModelParam._m0[11u].y, _2423 * cbModelParam._m0[11u].x))), _1858);
            frontier_phi_13_35_ladder = _2570.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2570.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2570.x * cbModelParam._m0[1u].y;
        }
        _1938 = frontier_phi_13_35_ladder_2;
        _1940 = frontier_phi_13_35_ladder_1;
        _1942 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1926 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1048, _1049, _1050), _1858);
        _1938 = _1926.x * cbModelParam._m0[1u].y;
        _1940 = _1926.y * cbModelParam._m0[1u].y;
        _1942 = _1926.z * cbModelParam._m0[1u].y;
    }
    float _1946 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _877);
    float _1947 = isnan(_1946) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1946 : min(cbModelParam._m0[25u].w, _1946));
    float _2036;
    float _2038;
    float _2040;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2000 = fma(_1112, cbModelParam._m0[21u].z, fma(_1108, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1104)) + cbModelParam._m0[21u].w;
        float _2004 = fma(_1112, cbModelParam._m0[22u].z, fma(_1108, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1104)) + cbModelParam._m0[22u].w;
        float _2008 = fma(_1112, cbModelParam._m0[23u].z, fma(_1108, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1104)) + cbModelParam._m0[23u].w;
        float _2011 = fma(_1050, cbModelParam._m0[21u].z, fma(_1049, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1048));
        float _2014 = fma(_1050, cbModelParam._m0[22u].z, fma(_1049, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1048));
        float _2017 = fma(_1050, cbModelParam._m0[23u].z, fma(_1049, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1048));
        float _2126;
        if (_2011 > 0.0)
        {
            _2126 = abs((1.0 - _2000) / _2011);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2011 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2000 + 1.0) / _2011);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2126 = frontier_phi_25_21_ladder;
        }
        float _2443;
        if (_2014 > 0.0)
        {
            _2443 = abs((1.0 - _2004) / _2014);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2014 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2004 + 1.0) / _2014);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2443 = frontier_phi_37_32_ladder;
        }
        float _2781;
        if (_2017 > 0.0)
        {
            _2781 = abs((1.0 - _2008) / _2017);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2017 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2008 + 1.0) / _2017);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2781 = frontier_phi_47_44_ladder;
        }
        float _2783 = isnan(_2443) ? _2126 : (isnan(_2126) ? _2443 : min(_2126, _2443));
        float _2784 = isnan(_2781) ? _2783 : (isnan(_2783) ? _2781 : min(_2783, _2781));
        float _2788 = (_2784 * _2011) + _2000;
        float _2789 = (_2784 * _2014) + _2004;
        float _2790 = (_2784 * _2017) + _2008;
        float _2791 = _2784 * 9.9999997473787516355514526367188e-05;
        float _2792 = (-1.0) - _2791;
        float _2794 = _2791 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2790 > _2794) || ((_2790 < _2792) || ((_2789 > _2794) || ((_2789 < _2792) || ((_2788 < _2792) || (_2788 > _2794))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2912 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2790, cbModelParam._m0[17u].z, fma(_2789, cbModelParam._m0[17u].y, _2788 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2790, cbModelParam._m0[18u].z, fma(_2789, cbModelParam._m0[18u].y, _2788 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2790, cbModelParam._m0[19u].z, fma(_2789, cbModelParam._m0[19u].y, _2788 * cbModelParam._m0[19u].x))), _1947);
            frontier_phi_22_47_ladder = _2912.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2912.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2912.x * cbModelParam._m0[1u].z;
        }
        _2036 = frontier_phi_22_47_ladder_2;
        _2038 = frontier_phi_22_47_ladder_1;
        _2040 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2020 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1048, _1049, _1050), _1947);
        _2036 = _2020.x * cbModelParam._m0[1u].z;
        _2038 = _2020.y * cbModelParam._m0[1u].z;
        _2040 = _2020.z * cbModelParam._m0[1u].z;
    }
    float _2053 = (((_1075 * _1024) + _1076) * _1040) * ((cbModelParam._m0[1u].w * (_2036 - _1938)) + _1938);
    float _2055 = (((_1075 * _1026) + _1076) * _1040) * ((cbModelParam._m0[1u].w * (_2038 - _1940)) + _1940);
    float _2057 = (((_1075 * _1027) + _1076) * _1040) * ((cbModelParam._m0[1u].w * (_2040 - _1942)) + _1942);
    float _2060 = fma(_2057, cbSceneParam._m0[89u].z, fma(_2055, cbSceneParam._m0[89u].y, _2053 * cbSceneParam._m0[89u].x));
    float _2063 = fma(_2057, cbSceneParam._m0[90u].z, fma(_2055, cbSceneParam._m0[90u].y, _2053 * cbSceneParam._m0[90u].x));
    float _2066 = fma(_2057, cbSceneParam._m0[91u].z, fma(_2055, cbSceneParam._m0[91u].y, _2053 * cbSceneParam._m0[91u].x));
    float _2100 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2104 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2108 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2112 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2113 = _2100 / _2112;
    float _2114 = _2104 / _2112;
    float _2115 = _2108 / _2112;
    float _2262;
    float _2263;
    float _2264;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2142 = ((uint(_2115 > cbSceneParam._m0[59u].y) + uint(_2115 > cbSceneParam._m0[59u].x)) + uint(_2115 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2143 = _2142 + 43u;
        uint _2151 = _2142 + 44u;
        uint _2159 = _2142 + 45u;
        uint _2167 = _2142 + 46u;
        float _2178 = fma(_2112, cbSceneParam._m0[_2143].w, fma(_2108, cbSceneParam._m0[_2143].z, fma(_2104, cbSceneParam._m0[_2143].y, _2100 * cbSceneParam._m0[_2143].x)));
        float _2182 = fma(_2112, cbSceneParam._m0[_2151].w, fma(_2108, cbSceneParam._m0[_2151].z, fma(_2104, cbSceneParam._m0[_2151].y, _2100 * cbSceneParam._m0[_2151].x)));
        float _2190 = fma(_2112, cbSceneParam._m0[_2167].w, fma(_2108, cbSceneParam._m0[_2167].z, fma(_2104, cbSceneParam._m0[_2167].y, _2100 * cbSceneParam._m0[_2167].x)));
        float _2195 = cbSceneParam._m0[33u].z * _2190;
        float _2197 = cbSceneParam._m0[33u].w * _2190;
        float _2200 = fma(_2112, cbSceneParam._m0[_2159].w, fma(_2108, cbSceneParam._m0[_2159].z, fma(_2104, cbSceneParam._m0[_2159].y, _2100 * cbSceneParam._m0[_2159].x))) / _2190;
        float _2248 = (cbSceneParam._m0[33u].x - sqrt(((_2114 * _2114) + (_2113 * _2113)) + (_2115 * _2115))) * cbSceneParam._m0[33u].y;
        float _4577 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2255 = (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2195 + _2178) / _2190, (_2197 + _2182) / _2190), _2200), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2197 + _2178) / _2190, (_2182 - _2195) / _2190), _2200), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2178 - _2195) / _2190, (_2182 - _2197) / _2190), _2200), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2178 - _2197) / _2190, (_2195 + _2182) / _2190), _2200), 0.0)).x), vec4(0.25)));
        _2262 = 1.0 - (_2255 * cbSceneParam._m0[34u].x);
        _2263 = 1.0 - (_2255 * cbSceneParam._m0[34u].y);
        _2264 = 1.0 - (_2255 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2262 = 1.0;
        _2263 = 1.0;
        _2264 = 1.0;
    }
    float _2328;
    float _2330;
    float _2332;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2316 = fma(_2112, cbSceneParam._m0[63u].w, fma(_2108, cbSceneParam._m0[63u].z, fma(_2104, cbSceneParam._m0[63u].y, _2100 * cbSceneParam._m0[63u].x)));
        float _2317 = fma(_2112, cbSceneParam._m0[60u].w, fma(_2108, cbSceneParam._m0[60u].z, fma(_2104, cbSceneParam._m0[60u].y, _2100 * cbSceneParam._m0[60u].x))) / _2316;
        float _2318 = fma(_2112, cbSceneParam._m0[61u].w, fma(_2108, cbSceneParam._m0[61u].z, fma(_2104, cbSceneParam._m0[61u].y, _2100 * cbSceneParam._m0[61u].x))) / _2316;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2317 >= cbSceneParam._m0[64u].x) && (_2318 >= cbSceneParam._m0[64u].y)) && (_2317 <= cbSceneParam._m0[64u].z)) && (_2318 <= cbSceneParam._m0[64u].w))
        {
            float _2456 = fma(_2112, cbSceneParam._m0[62u].w, fma(_2108, cbSceneParam._m0[62u].z, fma(_2104, cbSceneParam._m0[62u].y, _2100 * cbSceneParam._m0[62u].x))) / _2316;
            float _2460 = isnan(cbSceneParam._m0[41u].w) ? _2456 : (isnan(_2456) ? cbSceneParam._m0[41u].w : max(_2456, cbSceneParam._m0[41u].w));
            float _2503 = (cbSceneParam._m0[33u].x - sqrt(((_2114 * _2114) + (_2113 * _2113)) + (_2115 * _2115))) * cbSceneParam._m0[33u].y;
            float _4593 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
            float _2510 = (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2317, cbSceneParam._m0[33u].w + _2318), _2460), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2317, _2318 - cbSceneParam._m0[33u].z), _2460), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2317 - cbSceneParam._m0[33u].z, _2318 - cbSceneParam._m0[33u].w), _2460), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2317 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2318), _2460), 0.0)).x), vec4(0.25)));
            float _2514 = 1.0 - (_2510 * cbSceneParam._m0[34u].x);
            float _2515 = 1.0 - (_2510 * cbSceneParam._m0[34u].y);
            float _2516 = 1.0 - (_2510 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2516) ? _2264 : (isnan(_2264) ? _2516 : min(_2264, _2516));
            frontier_phi_34_33_ladder_1 = isnan(_2515) ? _2263 : (isnan(_2263) ? _2515 : min(_2263, _2515));
            frontier_phi_34_33_ladder_2 = isnan(_2514) ? _2262 : (isnan(_2262) ? _2514 : min(_2262, _2514));
        }
        else
        {
            frontier_phi_34_33_ladder = _2264;
            frontier_phi_34_33_ladder_1 = _2263;
            frontier_phi_34_33_ladder_2 = _2262;
        }
        _2328 = frontier_phi_34_33_ladder_2;
        _2330 = frontier_phi_34_33_ladder_1;
        _2332 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2328 = _2262;
        _2330 = _2263;
        _2332 = _2264;
    }
    uvec4 _2337 = floatBitsToUint(cbInstanceData._m0[_280 + 5u]);
    uint _2339 = _2337.x * 14u;
    uint _2340 = _2339 + 13u;
    float _2347 = _1040 + (-1.0);
    float _2352 = (cbLight._m0[_2340].x * _2347) + 1.0;
    float _2353 = (cbLight._m0[_2340].y * _2347) + 1.0;
    float _2354 = (cbLight._m0[_2340].z * _2347) + 1.0;
    float _2355 = (cbLight._m0[_2340].w * _2347) + 1.0;
    uint _2356 = _2339 + 5u;
    float _2362 = isnan(1.0) ? _2353 : (isnan(_2353) ? 1.0 : min(_2353, 1.0));
    uint _2366 = _2339 + 4u;
    float _2375 = isnan(1.0) ? _2352 : (isnan(_2352) ? 1.0 : min(_2352, 1.0));
    uint _2379 = _2339 | 1u;
    float _2390 = dot(vec3(cbLight._m0[_2339].xyz), vec3(_874, _875, _876));
    float _2393 = dot(vec3(cbLight._m0[_2379].xyz), vec3(_874, _875, _876));
    float _4629 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _4640 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
    float _2398 = (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * 0.3183098733425140380859375;
    float _2400 = (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * 0.3183098733425140380859375;
    float _2407 = ((cbLight._m0[_2356].x * _2362) * _2400) + (((cbLight._m0[_2366].x * _2328) * _2375) * _2398);
    float _2408 = ((_2362 * cbLight._m0[_2356].y) * _2400) + (((cbLight._m0[_2366].y * _2330) * _2375) * _2398);
    float _2409 = ((_2362 * cbLight._m0[_2356].z) * _2400) + (((cbLight._m0[_2366].z * _2332) * _2375) * _2398);
    uvec4 _2413 = floatBitsToUint(cbLight._m0[_2339 + 12u]);
    bool _2415 = _2413.x == 0u;
    float _2517;
    float _2519;
    float _2521;
    if (_2415)
    {
        _2517 = _2407;
        _2519 = _2408;
        _2521 = _2409;
    }
    else
    {
        uint _2525 = _2339 + 6u;
        float _2541 = (dot(vec3(cbLight._m0[_2339 + 2u].xyz), vec3(_874, _875, _876)) * 0.5) + 0.5;
        float _2542 = _2541 * _2541;
        float _4651 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        float _2543 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
        float _2544 = isnan(1.0) ? _2354 : (isnan(_2354) ? 1.0 : min(_2354, 1.0));
        _2517 = (((cbLight._m0[_2525].x * 0.3183098733425140380859375) * _2543) * _2544) + _2407;
        _2519 = (((cbLight._m0[_2525].y * 0.3183098733425140380859375) * _2543) * _2544) + _2408;
        _2521 = (((cbLight._m0[_2525].z * 0.3183098733425140380859375) * _2543) * _2544) + _2409;
    }
    bool _2524 = _2413.y == 0u;
    float _2579;
    float _2581;
    float _2583;
    if (_2524)
    {
        _2579 = _2517;
        _2581 = _2519;
        _2583 = _2521;
    }
    else
    {
        uint _2752 = _2339 + 7u;
        float _2768 = (dot(vec3(cbLight._m0[_2339 + 3u].xyz), vec3(_874, _875, _876)) * 0.5) + 0.5;
        float _2769 = _2768 * _2768;
        float _4667 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        float _2770 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
        float _2771 = isnan(1.0) ? _2355 : (isnan(_2355) ? 1.0 : min(_2355, 1.0));
        _2579 = (((cbLight._m0[_2752].x * 0.3183098733425140380859375) * _2770) * _2771) + _2517;
        _2581 = (((cbLight._m0[_2752].y * 0.3183098733425140380859375) * _2770) * _2771) + _2519;
        _2583 = (((cbLight._m0[_2752].z * 0.3183098733425140380859375) * _2770) * _2771) + _2521;
    }
    uint _2586 = _2339 + 8u;
    float _2599 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2339].w)) * _877) * 0.949999988079071044921875);
    float _2600 = _2599 * _2599;
    float _2601 = cbLight._m0[_2339].x + _954;
    float _2602 = cbLight._m0[_2339].y + _955;
    float _2603 = cbLight._m0[_2339].z + _956;
    float _2607 = inversesqrt(dot(vec3(_2601, _2602, _2603), vec3(_2601, _2602, _2603)));
    float _2608 = _2607 * _2601;
    float _2609 = _2607 * _2602;
    float _2610 = _2607 * _2603;
    float _2611 = dot(vec3(_874, _875, _876), vec3(cbLight._m0[_2339].xyz));
    float _4683 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
    float _2614 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
    float _4694 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
    float _2615 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
    float _2616 = dot(vec3(_874, _875, _876), vec3(_2608, _2609, _2610));
    float _4705 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
    float _2619 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
    float _2620 = dot(vec3(cbLight._m0[_2339].xyz), vec3(_2608, _2609, _2610));
    float _4716 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
    float _2624 = _2600 * _2600;
    float _2628 = ((_2619 * _2619) * (_2624 + (-1.0))) + 1.0;
    float _2636 = exp2(log2(1.0 - (isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0)))) * 5.0);
    float _2637 = 0.959999978542327880859375 - _1021;
    float _2639 = 0.959999978542327880859375 - _1022;
    float _2640 = 0.959999978542327880859375 - _1023;
    float _2647 = 1.0 - _2600;
    float _2658 = (0.5 / (((_2615 * ((_2614 * _2647) + _2600)) + 9.9999999392252902907785028219223e-09) + (((_2615 * _2647) + _2600) * _2614))) * _2614;
    float _4727 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
    float _2660 = (isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0))) * (_2624 / ((_2628 * _2628) * 3.141590118408203125));
    uint _2674 = _2339 + 9u;
    float _2685 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2379].w)) * _877) * 0.949999988079071044921875);
    float _2686 = _2685 * _2685;
    float _2687 = cbLight._m0[_2379].x + _954;
    float _2688 = cbLight._m0[_2379].y + _955;
    float _2689 = cbLight._m0[_2379].z + _956;
    float _2693 = inversesqrt(dot(vec3(_2687, _2688, _2689), vec3(_2687, _2688, _2689)));
    float _2694 = _2693 * _2687;
    float _2695 = _2693 * _2688;
    float _2696 = _2693 * _2689;
    float _2697 = dot(vec3(_874, _875, _876), vec3(cbLight._m0[_2379].xyz));
    float _4738 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
    float _2700 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
    float _2701 = dot(vec3(_874, _875, _876), vec3(_2694, _2695, _2696));
    float _4749 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
    float _2704 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
    float _2705 = dot(vec3(cbLight._m0[_2379].xyz), vec3(_2694, _2695, _2696));
    float _4760 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
    float _2709 = _2686 * _2686;
    float _2713 = ((_2704 * _2704) * (_2709 + (-1.0))) + 1.0;
    float _2720 = exp2(log2(1.0 - (isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0)))) * 5.0);
    float _2727 = 1.0 - _2686;
    float _2737 = (0.5 / (((_2615 * ((_2700 * _2727) + _2686)) + 9.9999999392252902907785028219223e-09) + (((_2615 * _2727) + _2686) * _2700))) * _2700;
    float _4771 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
    float _2739 = (isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0))) * (_2709 / ((_2713 * _2713) * 3.141590118408203125));
    float _2749 = (((((_2720 * _2637) + _1024) * cbLight._m0[_2674].x) * _2739) * _2362) + ((((cbLight._m0[_2586].x * _2328) * ((_2636 * _2637) + _1024)) * _2660) * _2375);
    float _2750 = (((((_2720 * _2639) + _1026) * cbLight._m0[_2674].y) * _2739) * _2362) + ((((cbLight._m0[_2586].y * _2330) * ((_2636 * _2639) + _1026)) * _2660) * _2375);
    float _2751 = (((((_2720 * _2640) + _1027) * cbLight._m0[_2674].z) * _2739) * _2362) + ((((cbLight._m0[_2586].z * _2332) * ((_2636 * _2640) + _1027)) * _2660) * _2375);
    float _2807;
    float _2809;
    float _2811;
    if (_2415)
    {
        _2807 = _2749;
        _2809 = _2750;
        _2811 = _2751;
    }
    else
    {
        uint _2813 = _2339 + 2u;
        uint _2817 = _2339 + 10u;
        float _2831 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2813].w)) * _877) * 0.949999988079071044921875);
        float _2832 = _2831 * _2831;
        float _2833 = cbLight._m0[_2813].x + _954;
        float _2834 = cbLight._m0[_2813].y + _955;
        float _2835 = cbLight._m0[_2813].z + _956;
        float _2839 = inversesqrt(dot(vec3(_2833, _2834, _2835), vec3(_2833, _2834, _2835)));
        float _2840 = _2839 * _2833;
        float _2841 = _2839 * _2834;
        float _2842 = _2839 * _2835;
        float _2843 = dot(vec3(_874, _875, _876), vec3(cbLight._m0[_2813].xyz));
        float _4782 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
        float _2846 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
        float _2847 = dot(vec3(_874, _875, _876), vec3(_2840, _2841, _2842));
        float _4793 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
        float _2850 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
        float _2851 = dot(vec3(cbLight._m0[_2813].xyz), vec3(_2840, _2841, _2842));
        float _4804 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
        float _2855 = _2832 * _2832;
        float _2859 = ((_2850 * _2850) * (_2855 + (-1.0))) + 1.0;
        float _2866 = exp2(log2(1.0 - (isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0)))) * 5.0);
        float _2873 = 1.0 - _2832;
        float _2883 = (0.5 / (((_2615 * ((_2846 * _2873) + _2832)) + 9.9999999392252902907785028219223e-09) + (((_2615 * _2873) + _2832) * _2846))) * _2846;
        float _4815 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
        float _2885 = (isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0))) * (_2855 / ((_2859 * _2859) * 3.141590118408203125));
        float _2886 = isnan(1.0) ? _2354 : (isnan(_2354) ? 1.0 : min(_2354, 1.0));
        _2807 = (((((_2866 * _2637) + _1024) * cbLight._m0[_2817].x) * _2885) * _2886) + _2749;
        _2809 = (((((_2866 * _2639) + _1026) * cbLight._m0[_2817].y) * _2885) * _2886) + _2750;
        _2811 = (((((_2866 * _2640) + _1027) * cbLight._m0[_2817].z) * _2885) * _2886) + _2751;
    }
    float _2917;
    float _2919;
    float _2921;
    if (_2524)
    {
        _2917 = _2807;
        _2919 = _2809;
        _2921 = _2811;
    }
    else
    {
        uint _2928 = _2339 + 3u;
        uint _2932 = _2339 + 11u;
        float _2946 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2928].w)) * _877) * 0.949999988079071044921875);
        float _2947 = _2946 * _2946;
        float _2948 = cbLight._m0[_2928].x + _954;
        float _2949 = cbLight._m0[_2928].y + _955;
        float _2950 = cbLight._m0[_2928].z + _956;
        float _2954 = inversesqrt(dot(vec3(_2948, _2949, _2950), vec3(_2948, _2949, _2950)));
        float _2955 = _2954 * _2948;
        float _2956 = _2954 * _2949;
        float _2957 = _2954 * _2950;
        float _2958 = dot(vec3(_874, _875, _876), vec3(cbLight._m0[_2928].xyz));
        float _4831 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
        float _2961 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
        float _2962 = dot(vec3(_874, _875, _876), vec3(_2955, _2956, _2957));
        float _4842 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
        float _2965 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
        float _2966 = dot(vec3(cbLight._m0[_2928].xyz), vec3(_2955, _2956, _2957));
        float _4853 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
        float _2970 = _2947 * _2947;
        float _2974 = ((_2965 * _2965) * (_2970 + (-1.0))) + 1.0;
        float _2981 = exp2(log2(1.0 - (isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0)))) * 5.0);
        float _2988 = 1.0 - _2947;
        float _2998 = (0.5 / (((_2615 * ((_2961 * _2988) + _2947)) + 9.9999999392252902907785028219223e-09) + (((_2615 * _2988) + _2947) * _2961))) * _2961;
        float _4864 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
        float _3000 = (isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0))) * (_2970 / ((_2974 * _2974) * 3.141590118408203125));
        float _3001 = isnan(1.0) ? _2355 : (isnan(_2355) ? 1.0 : min(_2355, 1.0));
        _2917 = (((((_2981 * _2637) + _1024) * cbLight._m0[_2932].x) * _3000) * _3001) + _2807;
        _2919 = (((((_2981 * _2639) + _1026) * cbLight._m0[_2932].y) * _3000) * _3001) + _2809;
        _2921 = (((((_2981 * _2640) + _1027) * cbLight._m0[_2932].z) * _3000) * _3001) + _2811;
    }
    float _3067;
    float _3069;
    float _3071;
    float _3073;
    float _3075;
    float _3077;
    if (_2337.y == 0u)
    {
        uvec4 _3022 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3023 = _3022.x;
        uint _3034 = uint((float(_3022.y) * floor(float(uint(cbSceneParam._m0[85u].y * _963) / _3023))) + floor(float(uint(cbSceneParam._m0[85u].x * _962) / _3023)));
        float _3044 = (log2(_2115 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3045 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
        uint _3048 = uint(isnan(14.0) ? _3045 : (isnan(_3045) ? 14.0 : min(_3045, 14.0)));
        uvec4 _3053 = texelFetch(g_lightClusterGridBuffer, int(((_3048 << 2u) + (_3034 << 6u)) >> 2u));
        uint _3054 = _3053.x;
        uint _3055 = _3022.z;
        float _3134;
        float _3136;
        float _3138;
        float _3140;
        float _3142;
        float _3144;
        if (((((1u << ((_3055 >> 4u) & 15u)) + 4294967295u) & _3054) == 0u) || ((_3055 & 240u) == 0u))
        {
            _3134 = 0.0;
            _3136 = 0.0;
            _3138 = 0.0;
            _3140 = 0.0;
            _3142 = 0.0;
            _3144 = 0.0;
        }
        else
        {
            float _3135;
            float _3137;
            float _3139;
            float _3141;
            float _3143;
            float _3145;
            float _3279 = 0.0;
            float _3280 = 0.0;
            float _3281 = 0.0;
            float _3282 = 0.0;
            float _3283 = 0.0;
            float _3284 = 0.0;
            uint _3285 = 0u;
            uint _3294;
            bool _3295;
            for (;;)
            {
                _3294 = texelFetch(g_lightClassification, int((((_3048 << 5u) + (_3034 << 9u)) + (_3285 << 2u)) >> 2u)).x;
                _3295 = _3294 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3295)
                {
                    frontier_phi_66_pred = _3284;
                    frontier_phi_66_pred_1 = _3283;
                    frontier_phi_66_pred_2 = _3282;
                    frontier_phi_66_pred_3 = _3281;
                    frontier_phi_66_pred_4 = _3280;
                    frontier_phi_66_pred_5 = _3279;
                }
                else
                {
                    float _3403;
                    float _3404;
                    float _3405;
                    float _3406;
                    float _3407;
                    float _3408;
                    uint _3409;
                    _3403 = _3279;
                    _3404 = _3280;
                    _3405 = _3281;
                    _3406 = _3282;
                    _3407 = _3283;
                    _3408 = _3284;
                    _3409 = _3294;
                    float _3335;
                    float _3336;
                    float _3337;
                    float _3338;
                    float _3339;
                    float _3340;
                    for (;;)
                    {
                        uint _3413 = uint(findLSB(_3409)) + (_3285 << 5u);
                        uint _3410 = (_3409 + 4294967295u) & _3409;
                        uint _3415 = _3413 * 48u;
                        vec4 _3429 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3415)).x, texelFetch(g_PointLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3415 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3415 + 3u)).x));
                        uint _3435 = (_3413 * 48u) + 4u;
                        vec4 _3448 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3435)).x, texelFetch(g_PointLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3435 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3435 + 3u)).x));
                        uint _3454 = (_3413 * 48u) + 8u;
                        vec3 _3465 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3454)).x, texelFetch(g_PointLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3454 + 2u)).x));
                        float _3469 = _3429.x - _2113;
                        float _3470 = _3429.y - _2114;
                        float _3471 = _3429.z - _2115;
                        float _3472 = dot(vec3(_3469, _3470, _3471), vec3(_3469, _3470, _3471));
                        float _3475 = inversesqrt(_3472);
                        float _3476 = _3475 * _3469;
                        float _3477 = _3475 * _3470;
                        float _3478 = _3475 * _3471;
                        float _3479 = dot(vec3(_981, _984, _987), vec3(_3476, _3477, _3478));
                        float _3484 = 1.0 - (_3472 * _3429.w);
                        float _4890 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                        float _3485 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
                        float _3486 = sqrt(_3472) * _3448.w;
                        float _3489 = 1.39999997615814208984375 / (_3486 + 1.39999997615814208984375);
                        float _3490 = _3489 * _3489;
                        float _3493 = ((1.0 - _3490) * _3479) + _3490;
                        float _3496 = _3486 * _3486;
                        float _3500 = ((isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0))) * _3485) / ((_3496 * 0.699999988079071044921875) + 1.0);
                        float _3504 = (-0.0) - _2113;
                        float _3505 = (-0.0) - _2114;
                        float _3506 = (-0.0) - _2115;
                        float _3510 = inversesqrt(dot(vec3(_3504, _3505, _3506), vec3(_3504, _3505, _3506)));
                        float _3511 = _3510 * _3504;
                        float _3512 = _3510 * _3505;
                        float _3513 = _3510 * _3506;
                        float _3520 = exp2(log2(1.0 / ((_3496 * 3.5) + 5.0)) * 0.25);
                        float _3521 = 1.0 - _1056;
                        float _3528 = sqrt(1.0 - ((1.0 - (_3521 * _3521)) * (1.0 - (_3520 * _3520))));
                        float _3529 = _3528 * _3528;
                        float _3530 = _3529 * _3529;
                        float _3531 = _3511 + _3476;
                        float _3532 = _3512 + _3477;
                        float _3533 = _3513 + _3478;
                        float _3537 = inversesqrt(dot(vec3(_3531, _3532, _3533), vec3(_3531, _3532, _3533)));
                        float _3541 = dot(vec3(_981, _984, _987), vec3(_3511, _3512, _3513));
                        float _4906 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                        float _3544 = isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0));
                        float _3545 = dot(vec3(_981, _984, _987), vec3(_3537 * _3531, _3537 * _3532, _3537 * _3533));
                        float _4917 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                        float _3548 = isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0));
                        float _3552 = ((_3548 * _3548) * (_3530 + (-1.0))) + 1.0;
                        float _3553 = _3489 * _3529;
                        float _3554 = _3553 * _3553;
                        float _3557 = ((1.0 - _3554) * _3479) + _3554;
                        float _4928 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                        float _3558 = isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0));
                        float _3559 = 1.0 - _3529;
                        float _3569 = (0.5 / (((_3558 * ((_3544 * _3559) + _3529)) + 9.9999999392252902907785028219223e-09) + (((_3558 * _3559) + _3529) * _3544))) * _3558;
                        float _4939 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                        float _3580 = (((_3530 * 3.1415927410125732421875) * (isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0)))) / ((_3552 * _3552) * ((_3496 * 2.1991131305694580078125) + 3.141590118408203125))) * _3485;
                        _3338 = (_3500 * _3448.x) + _3406;
                        _3339 = (_3500 * _3448.y) + _3407;
                        _3340 = (_3500 * _3448.z) + _3408;
                        _3335 = (_3580 * _3465.x) + _3403;
                        _3336 = (_3580 * _3465.y) + _3404;
                        _3337 = (_3580 * _3465.z) + _3405;
                        if (_3410 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3403 = _3335;
                            _3404 = _3336;
                            _3405 = _3337;
                            _3406 = _3338;
                            _3407 = _3339;
                            _3408 = _3340;
                            _3409 = _3410;
                        }
                    }
                    frontier_phi_66_pred = _3340;
                    frontier_phi_66_pred_1 = _3339;
                    frontier_phi_66_pred_2 = _3338;
                    frontier_phi_66_pred_3 = _3337;
                    frontier_phi_66_pred_4 = _3336;
                    frontier_phi_66_pred_5 = _3335;
                }
                _3145 = frontier_phi_66_pred;
                _3143 = frontier_phi_66_pred_1;
                _3141 = frontier_phi_66_pred_2;
                _3139 = frontier_phi_66_pred_3;
                _3137 = frontier_phi_66_pred_4;
                _3135 = frontier_phi_66_pred_5;
                uint _3286 = _3285 + 1u;
                if (_3286 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3279 = _3135;
                    _3280 = _3137;
                    _3281 = _3139;
                    _3282 = _3141;
                    _3283 = _3143;
                    _3284 = _3145;
                    _3285 = _3286;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3134 = _3135;
            _3136 = _3137;
            _3138 = _3139;
            _3140 = _3141;
            _3142 = _3143;
            _3144 = _3145;
        }
        uvec4 _3148 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3149 = _3148.z;
        uint _3151 = (_3149 >> 8u) & 15u;
        float _3247;
        float _3249;
        float _3251;
        float _3253;
        float _3255;
        float _3257;
        if (((4294967295u << _3151) & _3054) == 0u)
        {
            _3247 = _3134;
            _3249 = _3136;
            _3251 = _3138;
            _3253 = _3140;
            _3255 = _3142;
            _3257 = _3144;
        }
        else
        {
            float _3272 = inversesqrt(dot(vec3(_2113, _2114, _2115), vec3(_2113, _2114, _2115)));
            float _3273 = _3272 * _2113;
            float _3274 = _3272 * _2114;
            float _3275 = _3272 * _2115;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3151 < ((_3149 >> 12u) & 15u))
            {
                float _3248;
                float _3250;
                float _3252;
                float _3254;
                float _3256;
                float _3258;
                float _3386 = _3134;
                float _3387 = _3136;
                float _3388 = _3138;
                float _3389 = _3140;
                float _3390 = _3142;
                float _3391 = _3144;
                uint _3392 = _3151;
                uint _3401;
                bool _3402;
                for (;;)
                {
                    _3401 = texelFetch(g_lightClassification, int((((_3048 << 5u) + (_3034 << 9u)) + (_3392 << 2u)) >> 2u)).x;
                    _3402 = _3401 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3402)
                    {
                        frontier_phi_72_pred = _3391;
                        frontier_phi_72_pred_1 = _3390;
                        frontier_phi_72_pred_2 = _3389;
                        frontier_phi_72_pred_3 = _3388;
                        frontier_phi_72_pred_4 = _3387;
                        frontier_phi_72_pred_5 = _3386;
                    }
                    else
                    {
                        float _3585;
                        float _3586;
                        float _3587;
                        float _3588;
                        float _3589;
                        float _3590;
                        float _3878;
                        float _3879;
                        float _3880;
                        float _3881;
                        float _3882;
                        float _3883;
                        float _3598 = _3386;
                        float _3599 = _3387;
                        float _3600 = _3388;
                        float _3601 = _3389;
                        float _3602 = _3390;
                        float _3603 = _3391;
                        uint _3604 = _3401;
                        uint _3605;
                        vec4 _3630;
                        float _3631;
                        vec4 _3646;
                        vec3 _3658;
                        vec4 _3673;
                        vec4 _3688;
                        float _3734;
                        bool _3735;
                        for (;;)
                        {
                            uint _3615 = ((_3392 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3604));
                            _3605 = (_3604 + 4294967295u) & _3604;
                            uint _3617 = _3615 * 40u;
                            _3630 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3617)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 3u)).x));
                            _3631 = _3630.w;
                            uint _3633 = (_3615 * 40u) + 4u;
                            _3646 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3633)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 3u)).x));
                            uint _3648 = (_3615 * 40u) + 8u;
                            _3658 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3648)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 2u)).x));
                            uint _3660 = (_3615 * 40u) + 16u;
                            _3673 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3660)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 3u)).x));
                            uint _3675 = (_3615 * 40u) + 20u;
                            _3688 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3675)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 3u)).x));
                            uint _3690 = (_3615 * 40u) + 24u;
                            vec4 _3703 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3690)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 3u)).x));
                            uint _3709 = (_3615 * 40u) + 28u;
                            vec4 _3722 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3709)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 3u)).x));
                            _3734 = fma(_2115, _3722.z, fma(_2114, _3722.y, _3722.x * _2113)) + _3722.w;
                            _3735 = !((fma(_2115, _3703.z, fma(_2114, _3703.y, _3703.x * _2113)) + _3703.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3735)
                            {
                                float _3762 = _3630.x - _2113;
                                float _3763 = _3630.y - _2114;
                                float _3764 = _3630.z - _2115;
                                float _3765 = dot(vec3(_3762, _3763, _3764), vec3(_3762, _3763, _3764));
                                float _3768 = inversesqrt(_3765);
                                float _3769 = _3768 * _3762;
                                float _3770 = _3768 * _3763;
                                float _3771 = _3768 * _3764;
                                float _3775 = 1.0 - (_3765 / (_3631 * _3631));
                                float _4950 = isnan(0.0) ? _3775 : (isnan(_3775) ? 0.0 : max(_3775, 0.0));
                                float _3776 = isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0));
                                float _3780 = sqrt(_3765) * _3646.w;
                                float _3782 = 1.39999997615814208984375 / (_3780 + 1.39999997615814208984375);
                                float _3783 = _3782 * _3782;
                                float _3786 = ((1.0 - _3783) * dot(vec3(_3769, _3770, _3771), vec3(_981, _984, _987))) + _3783;
                                float _3789 = _3780 * _3780;
                                float _3793 = (fma(_2115, _3673.z, fma(_2114, _3673.y, _3673.x * _2113)) + _3673.w) / _3734;
                                float _3794 = (fma(_2115, _3688.z, fma(_2114, _3688.y, _3688.x * _2113)) + _3688.w) / _3734;
                                float _3798 = 1.0 - dot(vec2(_3793, _3794), vec2(_3793, _3794));
                                float _4966 = isnan(0.0) ? _3798 : (isnan(_3798) ? 0.0 : max(_3798, 0.0));
                                float _3799 = isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0));
                                float _3800 = _3799 * (((isnan(0.0) ? _3786 : (isnan(_3786) ? 0.0 : max(_3786, 0.0))) * _3776) / ((_3789 * 0.699999988079071044921875) + 1.0));
                                float _3812 = exp2(log2(1.0 / ((_3789 * 3.5) + 5.0)) * 0.25);
                                float _3813 = 1.0 - _1056;
                                float _3820 = sqrt(1.0 - ((1.0 - (_3813 * _3813)) * (1.0 - (_3812 * _3812))));
                                float _3821 = _3820 * _3820;
                                float _3822 = _3821 * _3821;
                                float _3823 = _3769 - _3273;
                                float _3824 = _3770 - _3274;
                                float _3825 = _3771 - _3275;
                                float _3829 = inversesqrt(dot(vec3(_3823, _3824, _3825), vec3(_3823, _3824, _3825)));
                                float _3833 = dot(vec3(_981, _984, _987), vec3((-0.0) - _3273, (-0.0) - _3274, (-0.0) - _3275));
                                float _4977 = isnan(0.0) ? _3833 : (isnan(_3833) ? 0.0 : max(_3833, 0.0));
                                float _3836 = isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0));
                                float _3837 = dot(vec3(_981, _984, _987), vec3(_3829 * _3823, _3829 * _3824, _3829 * _3825));
                                float _4988 = isnan(0.0) ? _3837 : (isnan(_3837) ? 0.0 : max(_3837, 0.0));
                                float _3840 = isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0));
                                float _3844 = ((_3840 * _3840) * (_3822 + (-1.0))) + 1.0;
                                float _3845 = _3782 * _3821;
                                float _3846 = _3845 * _3845;
                                float _3852 = ((1.0 - _3846) * dot(vec3(_981, _984, _987), vec3(_3769, _3770, _3771))) + _3846;
                                float _4999 = isnan(0.0) ? _3852 : (isnan(_3852) ? 0.0 : max(_3852, 0.0));
                                float _3853 = isnan(1.0) ? _4999 : (isnan(_4999) ? 1.0 : min(_4999, 1.0));
                                float _3854 = 1.0 - _3821;
                                float _3864 = (0.5 / (((_3853 * ((_3836 * _3854) + _3821)) + 9.9999999392252902907785028219223e-09) + (((_3853 * _3854) + _3821) * _3836))) * _3853;
                                float _5010 = isnan(0.0) ? _3864 : (isnan(_3864) ? 0.0 : max(_3864, 0.0));
                                float _3874 = (_3799 * _3776) * (((_3822 * 3.1415927410125732421875) * (isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0)))) / ((_3844 * _3844) * ((_3789 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3800 * _3646.y;
                                frontier_phi_78_pred_1 = _3800 * _3646.x;
                                frontier_phi_78_pred_2 = _3874 * _3658.z;
                                frontier_phi_78_pred_3 = _3874 * _3658.y;
                                frontier_phi_78_pred_4 = _3874 * _3658.x;
                                frontier_phi_78_pred_5 = _3800 * _3646.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3882 = frontier_phi_78_pred;
                            _3881 = frontier_phi_78_pred_1;
                            _3880 = frontier_phi_78_pred_2;
                            _3879 = frontier_phi_78_pred_3;
                            _3878 = frontier_phi_78_pred_4;
                            _3883 = frontier_phi_78_pred_5;
                            _3588 = _3881 + _3601;
                            _3589 = _3882 + _3602;
                            _3590 = _3883 + _3603;
                            _3585 = _3878 + _3598;
                            _3586 = _3879 + _3599;
                            _3587 = _3880 + _3600;
                            if (_3605 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3598 = _3585;
                                _3599 = _3586;
                                _3600 = _3587;
                                _3601 = _3588;
                                _3602 = _3589;
                                _3603 = _3590;
                                _3604 = _3605;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3590;
                        frontier_phi_72_pred_1 = _3589;
                        frontier_phi_72_pred_2 = _3588;
                        frontier_phi_72_pred_3 = _3587;
                        frontier_phi_72_pred_4 = _3586;
                        frontier_phi_72_pred_5 = _3585;
                    }
                    _3258 = frontier_phi_72_pred;
                    _3256 = frontier_phi_72_pred_1;
                    _3254 = frontier_phi_72_pred_2;
                    _3252 = frontier_phi_72_pred_3;
                    _3250 = frontier_phi_72_pred_4;
                    _3248 = frontier_phi_72_pred_5;
                    uint _3393 = _3392 + 1u;
                    if (_3393 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3386 = _3248;
                        _3387 = _3250;
                        _3388 = _3252;
                        _3389 = _3254;
                        _3390 = _3256;
                        _3391 = _3258;
                        _3392 = _3393;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3258;
                frontier_phi_60_61_ladder_1 = _3256;
                frontier_phi_60_61_ladder_2 = _3252;
                frontier_phi_60_61_ladder_3 = _3250;
                frontier_phi_60_61_ladder_4 = _3248;
                frontier_phi_60_61_ladder_5 = _3254;
            }
            else
            {
                frontier_phi_60_61_ladder = _3144;
                frontier_phi_60_61_ladder_1 = _3142;
                frontier_phi_60_61_ladder_2 = _3138;
                frontier_phi_60_61_ladder_3 = _3136;
                frontier_phi_60_61_ladder_4 = _3134;
                frontier_phi_60_61_ladder_5 = _3140;
            }
            _3247 = frontier_phi_60_61_ladder_4;
            _3249 = frontier_phi_60_61_ladder_3;
            _3251 = frontier_phi_60_61_ladder_2;
            _3253 = frontier_phi_60_61_ladder_5;
            _3255 = frontier_phi_60_61_ladder_1;
            _3257 = frontier_phi_60_61_ladder;
        }
        float _3262 = isnan(1.0) ? _1040 : (isnan(_1040) ? 1.0 : min(_1040, 1.0));
        _3067 = (_3262 * _3253) + _2579;
        _3069 = (_3262 * _3255) + _2581;
        _3071 = (_3262 * _3257) + _2583;
        _3073 = ((_3247 * _1024) * _3262) + _2917;
        _3075 = ((_3249 * _1026) * _3262) + _2919;
        _3077 = ((_3251 * _1027) * _3262) + _2921;
    }
    else
    {
        _3067 = _2579;
        _3069 = _2581;
        _3071 = _2583;
        _3073 = _2917;
        _3075 = _2919;
        _3077 = _2921;
    }
    float _5026 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _5037 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _5048 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
    uint _3097 = _280 + 6u;
    float _3105 = _962 / cbSceneParam._m0[86u].x;
    float _3106 = _963 / cbSceneParam._m0[86u].y;
    vec4 _3120 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3105, _3106, (log2((isnan(cbSceneParam._m0[77u].w) ? _896 : (isnan(_896) ? cbSceneParam._m0[77u].w : min(_896, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3122 = _3120.x;
    float _3123 = _3120.y;
    float _3124 = _3120.z;
    float _3125 = _3120.w;
    float _3197;
    float _3199;
    float _3201;
    float _3203;
    if (_896 > cbSceneParam._m0[78u].w)
    {
        float _3159 = isnan(_896) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _896 : min(cbSceneParam._m0[80u].w, _896));
        float _3160 = _3159 / _896;
        float _3171 = _3160 * _947;
        float _3172 = _948 * _3160;
        float _3173 = (-0.0) - _3172;
        float _3175 = _3160 * _949;
        float _3177 = (cbSceneParam._m0[77u].w * _3173) / _3159;
        float _3178 = _3177 + cbSceneParam._m0[79u].w;
        float _3179 = cbSceneParam._m0[79u].w - _3172;
        float _3185 = sqrt(((_3171 * _3171) + (_3172 * _3172)) + (_3175 * _3175));
        float _3188 = (1.0 - (cbSceneParam._m0[77u].w / _3159)) * _3185;
        float _3193 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3195 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3348;
        if (abs((_3173 - _3177) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3348 = ((((_3178 > 0.0) ? exp2(_3193 * _3178) : (2.0 - exp2(_3195 * _3178))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3188;
        }
        else
        {
            float _3308 = 1.0 / cbSceneParam._m0[80u].x;
            float _3309 = isnan(_3179) ? _3178 : (isnan(_3178) ? _3179 : max(_3178, _3179));
            float _3310 = isnan(_3179) ? _3178 : (isnan(_3178) ? _3179 : min(_3178, _3179));
            float _3319 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : min(_3309, 0.0));
            float _3320 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : min(_3310, 0.0));
            _3348 = ((abs(_3185 / _3173) * cbSceneParam._m0[80u].y) * ((((_3319 - _3320) * 2.0) - ((exp2(_3193 * (isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0)))) - exp2(_3193 * (isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0))))) * _3308)) - ((exp2(_3195 * _3319) - exp2(_3195 * _3320)) * _3308))) + (_3188 * cbSceneParam._m0[80u].z);
        }
        vec4 _3350 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3105, _3106, 1.0), 0.0);
        float _3359 = exp2((_3348 * (-1.44269502162933349609375)) * (1.0 - _3350.w));
        float _3360 = log2(_3359);
        float _3376 = log2(_3125);
        _3197 = (exp2(_3376 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3360 * cbSceneParam._m0[78u].x)) * _3350.x) / cbSceneParam._m0[78u].x)) + _3122;
        _3199 = (exp2(_3376 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3360 * cbSceneParam._m0[78u].y)) * _3350.y) / cbSceneParam._m0[78u].y)) + _3123;
        _3201 = (exp2(_3376 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3360 * cbSceneParam._m0[78u].z)) * _3350.z) / cbSceneParam._m0[78u].z)) + _3124;
        _3203 = _3359 * _3125;
    }
    else
    {
        _3197 = _3122;
        _3199 = _3123;
        _3201 = _3124;
        _3203 = _3125;
    }
    float _3215 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3216 = _3215 == 3.0;
    float _3217 = log2(_3203);
    float _3224 = exp2(_3217 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0))) * (_3067 + ((isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))) * _1040))) + ((_3073 + ((isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0))) * _1847)) * cbPerFrame._m0[3u].x));
    float _3225 = exp2(_3217 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0))) * (_3069 + ((isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))) * _1040))) + ((_3075 + ((isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0))) * _1847)) * cbPerFrame._m0[3u].x));
    float _3226 = exp2(_3217 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5048 : (isnan(_5048) ? 1.0 : min(_5048, 1.0))) * (_3071 + ((isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))) * _1040))) + ((_3077 + ((isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0))) * _1847)) * cbPerFrame._m0[3u].x));
    float _3235 = (_3215 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3235 * (_3216 ? _3224 : (_3224 + (cbSceneParam._m0[72u].w * _3197)));
    SV_Target.y = _3235 * (_3216 ? _3225 : (_3225 + (cbSceneParam._m0[72u].w * _3199)));
    SV_Target.z = _3235 * (_3216 ? _3226 : (_3226 + (cbSceneParam._m0[72u].w * _3201)));
    SV_Target.w = cbInstanceData._m0[_3097].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3097].w;
}


