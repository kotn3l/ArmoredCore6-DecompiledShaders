#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1064;
float _3446;
float _3447;
float _3448;
float _3449;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _205 = _204 * _196;
    float _206 = _204 * _197;
    float _207 = _204 * _198;
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219 = _218 * TANGENT.x;
    float _220 = _218 * TANGENT.y;
    float _221 = _218 * TANGENT.z;
    uint _224 = uint(roundEven(NORMAL.w)) * 13u;
    uint _230 = _224 + 1u;
    uint _234 = _224 + 2u;
    float _243 = sqrt(((cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x) + (cbInstanceData._m0[_224].x * cbInstanceData._m0[_224].x)) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x));
    float _244 = _243 * TEXCOORD.z;
    float _245 = _243 * TEXCOORD.w;
    vec4 _264 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _270 = _264.x * cbMtdParam._m0[9u].x;
    float _271 = _264.y * cbMtdParam._m0[9u].y;
    float _272 = _264.z * cbMtdParam._m0[9u].z;
    vec4 _291 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _244) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _245) + cbTextureTilingScale._m0[14u].w));
    vec4 _311 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _315 = _311.z;
    float _320 = (_311.x * 2.0) + (-1.0);
    float _322 = (_311.y * 2.0) + (-1.0);
    float _323 = dot(vec2(_320, _322), vec2(_320, _322));
    float _3458 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _329 = sqrt(1.0 - (isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0))));
    float _332 = fma(_329, _212, fma(_322, _219, _320 * _205));
    float _335 = fma(_329, _213, fma(_322, _220, _320 * _206));
    float _338 = fma(_329, _214, fma(_322, _221, _320 * _207));
    float _342 = inversesqrt(dot(vec3(_332, _335, _338), vec3(_332, _335, _338)));
    vec4 _378 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _244) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _245) + cbTextureTilingScale._m0[11u].w));
    float _380 = _378.x;
    float _381 = 1.0 - _380;
    float _390 = (cbMtdParam._m0[19u].x + dot(vec4(_342 * _332, _342 * _335, _342 * _338, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_380 - _381) * cbMtdParam._m0[24u].z) + _381) * cbMtdParam._m0[21u].z);
    float _3469 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _391 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
    float _398 = (_391 * ((_291.x * cbMtdParam._m0[18u].x) - _270)) + _270;
    float _399 = (_391 * ((_291.y * cbMtdParam._m0[18u].y) - _271)) + _271;
    float _400 = (_391 * ((_291.z * cbMtdParam._m0[18u].z) - _272)) + _272;
    vec4 _413 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _415 = _413.x;
    float _417 = _415 - (_415 * _391);
    vec4 _430 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _244) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _245) + cbTextureTilingScale._m0[15u].w));
    float _437 = (_430.x * 2.0) + (-1.0);
    float _438 = (_430.y * 2.0) + (-1.0);
    float _439 = dot(vec2(_437, _438), vec2(_437, _438));
    float _3480 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _447 = ((_430.z - _315) * _391) + _315;
    float _457 = ((sqrt(1.0 - (isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0)))) - _329) * _391) + _329;
    float _460 = (((_437 - _320) * _391) + _320) + (cbMtdParam._m0[21u].x * _320);
    float _461 = (((_438 - _322) * _391) + _322) + (cbMtdParam._m0[21u].x * _322);
    float _466 = cbMtdParam._m0[22u].x + _311.w;
    float _469 = fma(_457, _212, fma(_461, _219, _460 * _205));
    float _472 = fma(_457, _213, fma(_461, _220, _460 * _206));
    float _475 = fma(_457, _214, fma(_461, _221, _460 * _207));
    float _479 = inversesqrt(dot(vec3(_469, _472, _475), vec3(_469, _472, _475)));
    float _480 = _479 * _469;
    float _481 = _479 * _472;
    float _482 = _479 * _475;
    float _3491 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _483 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
    float _3502 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _3513 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _3524 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _3535 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _3546 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _488 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
    float _502 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _543 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _553 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _543);
    float _554 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _543);
    float _555 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _543);
    float _559 = inversesqrt(dot(vec3(_553, _554, _555), vec3(_553, _554, _555)));
    float _560 = _553 * _559;
    float _561 = _554 * _559;
    float _562 = _555 * _559;
    vec4 _567 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _569 = _567.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _744 = sqrt(((_553 * _553) + (_554 * _554)) + (_555 * _555));
        float _750 = (cbMatDynParam._m0[5u].x * _744) + cbMatDynParam._m0[5u].y;
        float _3557 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _751 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
        float _755 = (cbMatDynParam._m0[5u].z * _744) + cbMatDynParam._m0[5u].w;
        float _3568 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0))) - _751)) + _751) < ((_569 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _581 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _582 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _602 = fma(_482, cbSceneParam._m0[5u].z, fma(_481, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _480));
    float _605 = fma(_482, cbSceneParam._m0[6u].z, fma(_481, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _480));
    float _608 = fma(_482, cbSceneParam._m0[7u].z, fma(_481, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _480));
    uint _621 = _224 + 9u;
    uint _622 = _621 + uint(cbMatDynParam._m0[0u].w);
    float _628 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0)))) * cbInstanceData._m0[_622].x;
    float _629 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0)))) * cbInstanceData._m0[_622].y;
    float _630 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0)))) * cbInstanceData._m0[_622].z;
    float _3579 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _631 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
    float _3590 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _632 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
    float _3601 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _633 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
    float _634 = 1.0 - _488;
    float _635 = _631 * _634;
    float _636 = _632 * _634;
    float _637 = _633 * _634;
    float _642 = (_631 + (-0.039999999105930328369140625)) * _488;
    float _643 = (_632 + (-0.039999999105930328369140625)) * _488;
    float _644 = (_633 + (-0.039999999105930328369140625)) * _488;
    float _645 = _642 + 0.039999999105930328369140625;
    float _647 = _643 + 0.039999999105930328369140625;
    float _648 = _644 + 0.039999999105930328369140625;
    vec4 _657 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _581, cbSceneParam._m0[86u].y * _582));
    float _661 = ((isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0))) * TEXCOORD_5.w) * _657.x;
    float _662 = dot(vec3(_480, _481, _482), vec3(_560, _561, _562));
    float _665 = _662 * 2.0;
    float _669 = (_665 * _480) - _560;
    float _670 = (_665 * _481) - _561;
    float _671 = (_665 * _482) - _562;
    float _675 = abs(dot(vec3(_560, _561, _562), vec3(_480, _481, _482)));
    float _3612 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _677 = sqrt(_483);
    float _690 = exp2((_677 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_677 * 3.0));
    float _696 = (1.0 - _690) * ((_677 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _697 = _690 * _677;
    float _725 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _729 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _733 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1063;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _788 = fma(_733, cbModelParam._m0[26u].z, fma(_729, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _725));
        float _792 = fma(_733, cbModelParam._m0[27u].z, fma(_729, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _725));
        float _796 = fma(_733, cbModelParam._m0[28u].z, fma(_729, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _725));
        float _821 = _725 + _480;
        float _822 = _729 + _481;
        float _823 = _733 + _482;
        float _833 = fma(_823, cbModelParam._m0[26u].z, fma(_822, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _821)) - _788;
        float _834 = fma(_823, cbModelParam._m0[27u].z, fma(_822, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _821)) - _792;
        float _835 = fma(_823, cbModelParam._m0[28u].z, fma(_822, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _821)) - _796;
        float _839 = inversesqrt(dot(vec3(_833, _834, _835), vec3(_833, _834, _835)));
        float _852 = ((_839 * _833) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_788 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _853 = ((_839 * _834) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_792 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _854 = ((_839 * _835) / cbModelParam._m0[34u].z) + ((((((_796 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _857 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_852, _853, _854), 0.0);
        vec4 _864 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_852, _853, _854), 0.0);
        vec4 _871 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_852, _853, _854), 0.0);
        vec4 _878 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_852, _853, _854), 0.0);
        float _891 = exp2((_857.w + (-0.5)) * 20.0) * 2.0;
        float _892 = _891 * (_857.x + (-0.5));
        float _893 = _891 * (_857.y + (-0.5));
        float _894 = _891 * (_857.z + (-0.5));
        float _901 = exp2((_864.w + (-0.5)) * 20.0) * 2.0;
        float _902 = _901 * (_864.x + (-0.5));
        float _903 = _901 * (_864.y + (-0.5));
        float _904 = _901 * (_864.z + (-0.5));
        float _911 = exp2((_871.w + (-0.5)) * 20.0) * 2.0;
        float _912 = _911 * (_871.x + (-0.5));
        float _913 = _911 * (_871.y + (-0.5));
        float _914 = _911 * (_871.z + (-0.5));
        float _921 = exp2((_878.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_878.x + (-0.5));
        float _923 = _921 * (_878.y + (-0.5));
        float _924 = _921 * (_878.z + (-0.5));
        float _925 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _926 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _927 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _928 = _892 * 0.5;
        float _929 = _902 * 0.5;
        float _930 = _912 * 0.5;
        float _931 = dot(vec3(_928, _929, _930), vec3(_928, _929, _930));
        float _936 = (_931 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_931);
        float _945 = (dot(vec3(_480, _481, _482), vec3(_936 * _928, _936 * _929, _936 * _930)) + 1.0) * 0.5;
        float _3638 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _955 = sqrt(((_929 * _929) + (_928 * _928)) + (_930 * _930)) / (_925 + 9.9999997473787516355514526367188e-06);
        float _3649 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
        float _957 = _956 * 2.0;
        float _961 = (1.0 - _956) / (_956 + 1.0);
        float _3660 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _962 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _971 = ((((1.0 - _962) * (_957 + 2.0)) * exp2(log2(isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) * (_957 + 1.0))) + _962) * _925;
        float _972 = _893 * 0.5;
        float _973 = _903 * 0.5;
        float _974 = _913 * 0.5;
        float _975 = dot(vec3(_972, _973, _974), vec3(_972, _973, _974));
        float _980 = (_975 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_975);
        float _988 = (dot(vec3(_480, _481, _482), vec3(_980 * _972, _980 * _973, _980 * _974)) + 1.0) * 0.5;
        float _3671 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _997 = sqrt(((_973 * _973) + (_972 * _972)) + (_974 * _974)) / (_926 + 9.9999997473787516355514526367188e-06);
        float _3682 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
        float _999 = _998 * 2.0;
        float _1003 = (1.0 - _998) / (_998 + 1.0);
        float _3693 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
        float _1013 = ((((1.0 - _1004) * (_999 + 2.0)) * exp2(log2(isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))) * (_999 + 1.0))) + _1004) * _926;
        float _1014 = _894 * 0.5;
        float _1015 = _904 * 0.5;
        float _1016 = _914 * 0.5;
        float _1017 = dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016));
        float _1022 = (_1017 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1017);
        float _1030 = (dot(vec3(_480, _481, _482), vec3(_1022 * _1014, _1022 * _1015, _1022 * _1016)) + 1.0) * 0.5;
        float _3704 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1039 = sqrt(((_1015 * _1015) + (_1014 * _1014)) + (_1016 * _1016)) / (_927 + 9.9999997473787516355514526367188e-06);
        float _3715 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _1041 = _1040 * 2.0;
        float _1045 = (1.0 - _1040) / (_1040 + 1.0);
        float _3726 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _1055 = ((((1.0 - _1046) * (_1041 + 2.0)) * exp2(log2(isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))) * (_1041 + 1.0))) + _1046) * _927;
        _1063 = _894;
        _1065 = _893;
        _1066 = _892;
        _1067 = _904;
        _1068 = _903;
        _1069 = _902;
        _1070 = _914;
        _1071 = _913;
        _1072 = _912;
        _1073 = _927;
        _1074 = _926;
        _1075 = _925;
        _1076 = cbModelParam._m0[36u].z * (isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0)));
        _1077 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0)));
        _1078 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0)));
    }
    else
    {
        _1063 = _1064;
        _1065 = _1064;
        _1066 = _1064;
        _1067 = _1064;
        _1068 = _1064;
        _1069 = _1064;
        _1070 = _1064;
        _1071 = _1064;
        _1072 = _1064;
        _1073 = _1064;
        _1074 = _1064;
        _1075 = _1064;
        _1076 = 0.0;
        _1077 = 0.0;
        _1078 = 0.0;
    }
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1106 = fma(_733, cbModelParam._m0[30u].z, fma(_729, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _725));
        float _1110 = fma(_733, cbModelParam._m0[31u].z, fma(_729, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _725));
        float _1114 = fma(_733, cbModelParam._m0[32u].z, fma(_729, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _725));
        float _1137 = _725 + _480;
        float _1138 = _729 + _481;
        float _1139 = _733 + _482;
        float _1149 = fma(_1139, cbModelParam._m0[30u].z, fma(_1138, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1137)) - _1106;
        float _1150 = fma(_1139, cbModelParam._m0[31u].z, fma(_1138, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1137)) - _1110;
        float _1151 = fma(_1139, cbModelParam._m0[32u].z, fma(_1138, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1137)) - _1114;
        float _1155 = inversesqrt(dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151)));
        float _1168 = ((_1155 * _1149) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1106 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1169 = ((_1155 * _1150) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1110 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1170 = ((_1155 * _1151) / cbModelParam._m0[35u].z) + ((((((_1114 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        float _1205 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1172.x + (-0.5));
        float _1207 = _1205 * (_1172.y + (-0.5));
        float _1208 = _1205 * (_1172.z + (-0.5));
        float _1215 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1179.x + (-0.5));
        float _1217 = _1215 * (_1179.y + (-0.5));
        float _1218 = _1215 * (_1179.z + (-0.5));
        float _1225 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1186.x + (-0.5));
        float _1227 = _1225 * (_1186.y + (-0.5));
        float _1228 = _1225 * (_1186.z + (-0.5));
        float _1235 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1193.x + (-0.5));
        float _1237 = _1235 * (_1193.y + (-0.5));
        float _1238 = _1235 * (_1193.z + (-0.5));
        float _1239 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1240 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1241 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1242 = _1206 * 0.5;
        float _1243 = _1216 * 0.5;
        float _1244 = _1226 * 0.5;
        float _1245 = dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244));
        float _1250 = (_1245 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1245);
        float _1258 = (dot(vec3(_480, _481, _482), vec3(_1250 * _1242, _1250 * _1243, _1250 * _1244)) + 1.0) * 0.5;
        float _3767 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1267 = sqrt(((_1243 * _1243) + (_1242 * _1242)) + (_1244 * _1244)) / (_1239 + 9.9999997473787516355514526367188e-06);
        float _3778 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1269 = _1268 * 2.0;
        float _1273 = (1.0 - _1268) / (_1268 + 1.0);
        float _3789 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _1283 = ((((1.0 - _1274) * (_1269 + 2.0)) * exp2(log2(isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) * (_1269 + 1.0))) + _1274) * _1239;
        float _1284 = _1207 * 0.5;
        float _1285 = _1217 * 0.5;
        float _1286 = _1227 * 0.5;
        float _1287 = dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286));
        float _1292 = (_1287 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1287);
        float _1300 = (dot(vec3(_480, _481, _482), vec3(_1292 * _1284, _1292 * _1285, _1292 * _1286)) + 1.0) * 0.5;
        float _3800 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1309 = sqrt(((_1285 * _1285) + (_1284 * _1284)) + (_1286 * _1286)) / (_1240 + 9.9999997473787516355514526367188e-06);
        float _3811 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1311 = _1310 * 2.0;
        float _1315 = (1.0 - _1310) / (_1310 + 1.0);
        float _3822 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _1325 = ((((1.0 - _1316) * (_1311 + 2.0)) * exp2(log2(isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * (_1311 + 1.0))) + _1316) * _1240;
        float _1326 = _1208 * 0.5;
        float _1327 = _1218 * 0.5;
        float _1328 = _1228 * 0.5;
        float _1329 = dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328));
        float _1334 = (_1329 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1329);
        float _1342 = (dot(vec3(_480, _481, _482), vec3(_1334 * _1326, _1334 * _1327, _1334 * _1328)) + 1.0) * 0.5;
        float _3833 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1351 = sqrt(((_1327 * _1327) + (_1326 * _1326)) + (_1328 * _1328)) / (_1241 + 9.9999997473787516355514526367188e-06);
        float _3844 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1353 = _1352 * 2.0;
        float _1357 = (1.0 - _1352) / (_1352 + 1.0);
        float _3855 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1367 = ((((1.0 - _1358) * (_1353 + 2.0)) * exp2(log2(isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * (_1353 + 1.0))) + _1358) * _1241;
        _1375 = _1208;
        _1376 = _1207;
        _1377 = _1206;
        _1378 = _1218;
        _1379 = _1217;
        _1380 = _1216;
        _1381 = _1228;
        _1382 = _1227;
        _1383 = _1226;
        _1384 = _1241;
        _1385 = _1240;
        _1386 = _1239;
        _1387 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)));
        _1388 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
        _1389 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)));
    }
    else
    {
        _1375 = _1064;
        _1376 = _1064;
        _1377 = _1064;
        _1378 = _1064;
        _1379 = _1064;
        _1380 = _1064;
        _1381 = _1064;
        _1382 = _1064;
        _1383 = _1064;
        _1384 = _1064;
        _1385 = _1064;
        _1386 = _1064;
        _1387 = 0.0;
        _1388 = 0.0;
        _1389 = 0.0;
    }
    float _1399 = (cbModelParam._m0[1u].x * (_1387 - _1076)) + _1076;
    float _1400 = (cbModelParam._m0[1u].x * (_1388 - _1077)) + _1077;
    float _1401 = (cbModelParam._m0[1u].x * (_1389 - _1078)) + _1078;
    float _1422 = fma(_1401, cbSceneParam._m0[89u].z, fma(_1400, cbSceneParam._m0[89u].y, _1399 * cbSceneParam._m0[89u].x));
    float _1425 = fma(_1401, cbSceneParam._m0[90u].z, fma(_1400, cbSceneParam._m0[90u].y, _1399 * cbSceneParam._m0[90u].x));
    float _1428 = fma(_1401, cbSceneParam._m0[91u].z, fma(_1400, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1399));
    float _1443 = _669 * 0.5;
    float _1444 = _670 * 0.5;
    float _1445 = _671 * 0.5;
    float _1446 = dot(vec4(_1443, _1444, _1445, 1.0), vec4(_1377, _1380, _1383, _1386));
    float _1449 = dot(vec4(_1443, _1444, _1445, 1.0), vec4(_1376, _1379, _1382, _1385));
    float _1452 = dot(vec4(_1443, _1444, _1445, 1.0), vec4(_1375, _1378, _1381, _1384));
    float _1486;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1459 = dot(vec4(_1443, _1444, _1445, 1.0), vec4(_1063, _1067, _1070, _1073));
        float _1463 = dot(vec4(_1443, _1444, _1445, 1.0), vec4(_1065, _1068, _1071, _1074));
        float _1467 = dot(vec4(_1443, _1444, _1445, 1.0), vec4(_1066, _1069, _1072, _1075));
        float _1474 = dot(vec4(cbModelParam._m0[39u]), vec4(_1443, _1444, _1445, 1.0));
        _1486 = dot(vec3(isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)), isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)), isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1474) ? 0.0 : (isnan(0.0) ? _1474 : max(0.0, _1474))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1486 = 1.0;
    }
    float _1497;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1488 = dot(vec4(cbModelParam._m0[40u]), vec4(_1443, _1444, _1445, 1.0));
        _1497 = dot(vec3(isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)), isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)), isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1488) ? 0.0 : (isnan(0.0) ? _1488 : max(0.0, _1488))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1497 = 1.0;
    }
    float _1501 = (_1497 * cbModelParam._m0[1u].x) + (_1486 * (1.0 - cbModelParam._m0[1u].x));
    float _1511 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _483);
    float _1512 = isnan(_1511) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1511 : min(cbModelParam._m0[25u].z, _1511));
    float _1592;
    float _1594;
    float _1596;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1559 = fma(_733, cbModelParam._m0[13u].z, fma(_729, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _725)) + cbModelParam._m0[13u].w;
        float _1563 = fma(_733, cbModelParam._m0[14u].z, fma(_729, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _725)) + cbModelParam._m0[14u].w;
        float _1567 = fma(_733, cbModelParam._m0[15u].z, fma(_729, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _725)) + cbModelParam._m0[15u].w;
        float _1570 = fma(_671, cbModelParam._m0[13u].z, fma(_670, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _669));
        float _1573 = fma(_671, cbModelParam._m0[14u].z, fma(_670, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _669));
        float _1576 = fma(_671, cbModelParam._m0[15u].z, fma(_670, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _669));
        float _1604;
        if (_1570 > 0.0)
        {
            _1604 = abs((1.0 - _1559) / _1570);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1570 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1559 + 1.0) / _1570);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1604 = frontier_phi_17_15_ladder;
        }
        float _1807;
        if (_1573 > 0.0)
        {
            _1807 = abs((1.0 - _1563) / _1573);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1573 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1563 + 1.0) / _1573);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1807 = frontier_phi_26_22_ladder;
        }
        float _2061;
        if (_1576 > 0.0)
        {
            _2061 = abs((1.0 - _1567) / _1576);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1576 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1567 + 1.0) / _1576);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2061 = frontier_phi_38_33_ladder;
        }
        float _2063 = isnan(_1807) ? _1604 : (isnan(_1604) ? _1807 : min(_1604, _1807));
        float _2064 = isnan(_2061) ? _2063 : (isnan(_2063) ? _2061 : min(_2063, _2061));
        float _2068 = (_2064 * _1570) + _1559;
        float _2069 = (_2064 * _1573) + _1563;
        float _2070 = (_2064 * _1576) + _1567;
        float _2071 = _2064 * 9.9999997473787516355514526367188e-05;
        float _2073 = (-1.0) - _2071;
        float _2075 = _2071 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2070 > _2075) || ((_2070 < _2073) || ((_2069 > _2075) || ((_2069 < _2073) || ((_2068 < _2073) || (_2068 > _2075))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2198 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2070, cbModelParam._m0[9u].z, fma(_2069, cbModelParam._m0[9u].y, _2068 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2070, cbModelParam._m0[10u].z, fma(_2069, cbModelParam._m0[10u].y, _2068 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2070, cbModelParam._m0[11u].z, fma(_2069, cbModelParam._m0[11u].y, _2068 * cbModelParam._m0[11u].x))), _1512);
            frontier_phi_16_38_ladder = _2198.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2198.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2198.x * cbModelParam._m0[1u].y;
        }
        _1592 = frontier_phi_16_38_ladder_2;
        _1594 = frontier_phi_16_38_ladder_1;
        _1596 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1580 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_669, _670, _671), _1512);
        _1592 = _1580.x * cbModelParam._m0[1u].y;
        _1594 = _1580.y * cbModelParam._m0[1u].y;
        _1596 = _1580.z * cbModelParam._m0[1u].y;
    }
    float _1600 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _483);
    float _1601 = isnan(_1600) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1600 : min(cbModelParam._m0[25u].w, _1600));
    float _1690;
    float _1692;
    float _1694;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1654 = fma(_733, cbModelParam._m0[21u].z, fma(_729, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _725)) + cbModelParam._m0[21u].w;
        float _1658 = fma(_733, cbModelParam._m0[22u].z, fma(_729, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _725)) + cbModelParam._m0[22u].w;
        float _1662 = fma(_733, cbModelParam._m0[23u].z, fma(_729, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _725)) + cbModelParam._m0[23u].w;
        float _1665 = fma(_671, cbModelParam._m0[21u].z, fma(_670, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _669));
        float _1668 = fma(_671, cbModelParam._m0[22u].z, fma(_670, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _669));
        float _1671 = fma(_671, cbModelParam._m0[23u].z, fma(_670, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _669));
        float _1812;
        if (_1665 > 0.0)
        {
            _1812 = abs((1.0 - _1654) / _1665);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1665 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1654 + 1.0) / _1665);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1812 = frontier_phi_28_24_ladder;
        }
        float _2088;
        if (_1668 > 0.0)
        {
            _2088 = abs((1.0 - _1658) / _1668);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1668 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1658 + 1.0) / _1668);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2088 = frontier_phi_40_35_ladder;
        }
        float _2301;
        if (_1671 > 0.0)
        {
            _2301 = abs((1.0 - _1662) / _1671);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1671 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1662 + 1.0) / _1671);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2301 = frontier_phi_49_46_ladder;
        }
        float _2303 = isnan(_2088) ? _1812 : (isnan(_1812) ? _2088 : min(_1812, _2088));
        float _2304 = isnan(_2301) ? _2303 : (isnan(_2303) ? _2301 : min(_2303, _2301));
        float _2308 = (_2304 * _1665) + _1654;
        float _2309 = (_2304 * _1668) + _1658;
        float _2310 = (_2304 * _1671) + _1662;
        float _2311 = _2304 * 9.9999997473787516355514526367188e-05;
        float _2312 = (-1.0) - _2311;
        float _2314 = _2311 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2310 > _2314) || ((_2310 < _2312) || ((_2309 > _2314) || ((_2309 < _2312) || ((_2308 < _2312) || (_2308 > _2314))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2509 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2310, cbModelParam._m0[17u].z, fma(_2309, cbModelParam._m0[17u].y, _2308 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2310, cbModelParam._m0[18u].z, fma(_2309, cbModelParam._m0[18u].y, _2308 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2310, cbModelParam._m0[19u].z, fma(_2309, cbModelParam._m0[19u].y, _2308 * cbModelParam._m0[19u].x))), _1601);
            frontier_phi_25_49_ladder = _2509.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2509.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2509.x * cbModelParam._m0[1u].z;
        }
        _1690 = frontier_phi_25_49_ladder_2;
        _1692 = frontier_phi_25_49_ladder_1;
        _1694 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1674 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_669, _670, _671), _1601);
        _1690 = _1674.x * cbModelParam._m0[1u].z;
        _1692 = _1674.y * cbModelParam._m0[1u].z;
        _1694 = _1674.z * cbModelParam._m0[1u].z;
    }
    float _1707 = (((_696 * _645) + _697) * _661) * ((cbModelParam._m0[1u].w * (_1690 - _1592)) + _1592);
    float _1709 = (((_696 * _647) + _697) * _661) * ((cbModelParam._m0[1u].w * (_1692 - _1594)) + _1594);
    float _1711 = (((_696 * _648) + _697) * _661) * ((cbModelParam._m0[1u].w * (_1694 - _1596)) + _1596);
    float _1714 = fma(_1711, cbSceneParam._m0[89u].z, fma(_1709, cbSceneParam._m0[89u].y, _1707 * cbSceneParam._m0[89u].x));
    float _1717 = fma(_1711, cbSceneParam._m0[90u].z, fma(_1709, cbSceneParam._m0[90u].y, _1707 * cbSceneParam._m0[90u].x));
    float _1720 = fma(_1711, cbSceneParam._m0[91u].z, fma(_1709, cbSceneParam._m0[91u].y, _1707 * cbSceneParam._m0[91u].x));
    uvec4 _1730 = floatBitsToUint(cbInstanceData._m0[_224 + 5u]);
    uint _1732 = _1730.x * 14u;
    uint _1733 = _1732 + 13u;
    float _1740 = _661 + (-1.0);
    float _1745 = (cbLight._m0[_1733].x * _1740) + 1.0;
    float _1746 = (cbLight._m0[_1733].y * _1740) + 1.0;
    float _1747 = (cbLight._m0[_1733].z * _1740) + 1.0;
    float _1748 = (cbLight._m0[_1733].w * _1740) + 1.0;
    uint _1749 = _1732 + 5u;
    float _1755 = isnan(1.0) ? _1746 : (isnan(_1746) ? 1.0 : min(_1746, 1.0));
    uint _1759 = _1732 + 4u;
    float _1766 = isnan(1.0) ? _1745 : (isnan(_1745) ? 1.0 : min(_1745, 1.0));
    uint _1770 = _1732 | 1u;
    float _1781 = dot(vec3(cbLight._m0[_1732].xyz), vec3(_480, _481, _482));
    float _1784 = dot(vec3(cbLight._m0[_1770].xyz), vec3(_480, _481, _482));
    float _3991 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
    float _4002 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _1789 = (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * 0.3183098733425140380859375;
    float _1791 = (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * 0.3183098733425140380859375;
    float _1798 = ((cbLight._m0[_1749].x * _1755) * _1791) + ((cbLight._m0[_1759].x * _1766) * _1789);
    float _1799 = ((_1755 * cbLight._m0[_1749].y) * _1791) + ((_1766 * cbLight._m0[_1759].y) * _1789);
    float _1800 = ((_1755 * cbLight._m0[_1749].z) * _1791) + ((_1766 * cbLight._m0[_1759].z) * _1789);
    uvec4 _1804 = floatBitsToUint(cbLight._m0[_1732 + 12u]);
    bool _1806 = _1804.x == 0u;
    float _1817;
    float _1819;
    float _1821;
    if (_1806)
    {
        _1817 = _1798;
        _1819 = _1799;
        _1821 = _1800;
    }
    else
    {
        uint _1825 = _1732 + 6u;
        float _1841 = (dot(vec3(cbLight._m0[_1732 + 2u].xyz), vec3(_480, _481, _482)) * 0.5) + 0.5;
        float _1842 = _1841 * _1841;
        float _4013 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
        float _1843 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1844 = isnan(1.0) ? _1747 : (isnan(_1747) ? 1.0 : min(_1747, 1.0));
        _1817 = (((cbLight._m0[_1825].x * 0.3183098733425140380859375) * _1843) * _1844) + _1798;
        _1819 = (((cbLight._m0[_1825].y * 0.3183098733425140380859375) * _1843) * _1844) + _1799;
        _1821 = (((cbLight._m0[_1825].z * 0.3183098733425140380859375) * _1843) * _1844) + _1800;
    }
    bool _1824 = _1804.y == 0u;
    float _1862;
    float _1864;
    float _1866;
    if (_1824)
    {
        _1862 = _1817;
        _1864 = _1819;
        _1866 = _1821;
    }
    else
    {
        uint _2032 = _1732 + 7u;
        float _2048 = (dot(vec3(cbLight._m0[_1732 + 3u].xyz), vec3(_480, _481, _482)) * 0.5) + 0.5;
        float _2049 = _2048 * _2048;
        float _4029 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
        float _2050 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _2051 = isnan(1.0) ? _1748 : (isnan(_1748) ? 1.0 : min(_1748, 1.0));
        _1862 = (((cbLight._m0[_2032].x * 0.3183098733425140380859375) * _2050) * _2051) + _1817;
        _1864 = (((cbLight._m0[_2032].y * 0.3183098733425140380859375) * _2050) * _2051) + _1819;
        _1866 = (((cbLight._m0[_2032].z * 0.3183098733425140380859375) * _2050) * _2051) + _1821;
    }
    uint _1869 = _1732 + 8u;
    float _1882 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1732].w)) * _483) * 0.949999988079071044921875);
    float _1883 = _1882 * _1882;
    float _1884 = cbLight._m0[_1732].x + _560;
    float _1885 = cbLight._m0[_1732].y + _561;
    float _1886 = cbLight._m0[_1732].z + _562;
    float _1890 = inversesqrt(dot(vec3(_1884, _1885, _1886), vec3(_1884, _1885, _1886)));
    float _1891 = _1890 * _1884;
    float _1892 = _1890 * _1885;
    float _1893 = _1890 * _1886;
    float _1894 = dot(vec3(_480, _481, _482), vec3(cbLight._m0[_1732].xyz));
    float _4045 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
    float _1897 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _4056 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _1898 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _1899 = dot(vec3(_480, _481, _482), vec3(_1891, _1892, _1893));
    float _4067 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1902 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _1903 = dot(vec3(cbLight._m0[_1732].xyz), vec3(_1891, _1892, _1893));
    float _4078 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
    float _1907 = _1883 * _1883;
    float _1911 = ((_1902 * _1902) * (_1907 + (-1.0))) + 1.0;
    float _1919 = exp2(log2(1.0 - (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0)))) * 5.0);
    float _1920 = 0.959999978542327880859375 - _642;
    float _1922 = 0.959999978542327880859375 - _643;
    float _1923 = 0.959999978542327880859375 - _644;
    float _1930 = 1.0 - _1883;
    float _1941 = (0.5 / (((_1898 * ((_1897 * _1930) + _1883)) + 9.9999999392252902907785028219223e-09) + (((_1898 * _1930) + _1883) * _1897))) * _1897;
    float _4089 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _1943 = (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (_1907 / ((_1911 * _1911) * 3.141590118408203125));
    uint _1954 = _1732 + 9u;
    float _1965 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1770].w)) * _483) * 0.949999988079071044921875);
    float _1966 = _1965 * _1965;
    float _1967 = cbLight._m0[_1770].x + _560;
    float _1968 = cbLight._m0[_1770].y + _561;
    float _1969 = cbLight._m0[_1770].z + _562;
    float _1973 = inversesqrt(dot(vec3(_1967, _1968, _1969), vec3(_1967, _1968, _1969)));
    float _1974 = _1973 * _1967;
    float _1975 = _1973 * _1968;
    float _1976 = _1973 * _1969;
    float _1977 = dot(vec3(_480, _481, _482), vec3(cbLight._m0[_1770].xyz));
    float _4100 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1980 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _1981 = dot(vec3(_480, _481, _482), vec3(_1974, _1975, _1976));
    float _4111 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1984 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _1985 = dot(vec3(cbLight._m0[_1770].xyz), vec3(_1974, _1975, _1976));
    float _4122 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1989 = _1966 * _1966;
    float _1993 = ((_1984 * _1984) * (_1989 + (-1.0))) + 1.0;
    float _2000 = exp2(log2(1.0 - (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0)))) * 5.0);
    float _2007 = 1.0 - _1966;
    float _2017 = (0.5 / (((_1898 * ((_1980 * _2007) + _1966)) + 9.9999999392252902907785028219223e-09) + (((_1898 * _2007) + _1966) * _1980))) * _1980;
    float _4133 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2019 = (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_1989 / ((_1993 * _1993) * 3.141590118408203125));
    float _2029 = (((((_2000 * _1920) + _645) * cbLight._m0[_1954].x) * _2019) * _1755) + (((((_1919 * _1920) + _645) * cbLight._m0[_1869].x) * _1943) * _1766);
    float _2030 = (((((_2000 * _1922) + _647) * cbLight._m0[_1954].y) * _2019) * _1755) + (((((_1919 * _1922) + _647) * cbLight._m0[_1869].y) * _1943) * _1766);
    float _2031 = (((((_2000 * _1923) + _648) * cbLight._m0[_1954].z) * _2019) * _1755) + (((((_1919 * _1923) + _648) * cbLight._m0[_1869].z) * _1943) * _1766);
    float _2093;
    float _2095;
    float _2097;
    if (_1806)
    {
        _2093 = _2029;
        _2095 = _2030;
        _2097 = _2031;
    }
    else
    {
        uint _2099 = _1732 + 2u;
        uint _2103 = _1732 + 10u;
        float _2117 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2099].w)) * _483) * 0.949999988079071044921875);
        float _2118 = _2117 * _2117;
        float _2119 = cbLight._m0[_2099].x + _560;
        float _2120 = cbLight._m0[_2099].y + _561;
        float _2121 = cbLight._m0[_2099].z + _562;
        float _2125 = inversesqrt(dot(vec3(_2119, _2120, _2121), vec3(_2119, _2120, _2121)));
        float _2126 = _2125 * _2119;
        float _2127 = _2125 * _2120;
        float _2128 = _2125 * _2121;
        float _2129 = dot(vec3(_480, _481, _482), vec3(cbLight._m0[_2099].xyz));
        float _4144 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2132 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _2133 = dot(vec3(_480, _481, _482), vec3(_2126, _2127, _2128));
        float _4155 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2136 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _2137 = dot(vec3(cbLight._m0[_2099].xyz), vec3(_2126, _2127, _2128));
        float _4166 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        float _2141 = _2118 * _2118;
        float _2145 = ((_2136 * _2136) * (_2141 + (-1.0))) + 1.0;
        float _2152 = exp2(log2(1.0 - (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) * 5.0);
        float _2159 = 1.0 - _2118;
        float _2169 = (0.5 / (((_1898 * ((_2132 * _2159) + _2118)) + 9.9999999392252902907785028219223e-09) + (((_1898 * _2159) + _2118) * _2132))) * _2132;
        float _4177 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
        float _2171 = (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_2141 / ((_2145 * _2145) * 3.141590118408203125));
        float _2172 = isnan(1.0) ? _1747 : (isnan(_1747) ? 1.0 : min(_1747, 1.0));
        _2093 = (((((_2152 * _1920) + _645) * cbLight._m0[_2103].x) * _2171) * _2172) + _2029;
        _2095 = (((((_2152 * _1922) + _647) * cbLight._m0[_2103].y) * _2171) * _2172) + _2030;
        _2097 = (((((_2152 * _1923) + _648) * cbLight._m0[_2103].z) * _2171) * _2172) + _2031;
    }
    float _2207;
    float _2209;
    float _2211;
    if (_1824)
    {
        _2207 = _2093;
        _2209 = _2095;
        _2211 = _2097;
    }
    else
    {
        uint _2218 = _1732 + 3u;
        uint _2222 = _1732 + 11u;
        float _2236 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2218].w)) * _483) * 0.949999988079071044921875);
        float _2237 = _2236 * _2236;
        float _2238 = cbLight._m0[_2218].x + _560;
        float _2239 = cbLight._m0[_2218].y + _561;
        float _2240 = cbLight._m0[_2218].z + _562;
        float _2244 = inversesqrt(dot(vec3(_2238, _2239, _2240), vec3(_2238, _2239, _2240)));
        float _2245 = _2244 * _2238;
        float _2246 = _2244 * _2239;
        float _2247 = _2244 * _2240;
        float _2248 = dot(vec3(_480, _481, _482), vec3(cbLight._m0[_2218].xyz));
        float _4193 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2251 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _2252 = dot(vec3(_480, _481, _482), vec3(_2245, _2246, _2247));
        float _4204 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        float _2255 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _2256 = dot(vec3(cbLight._m0[_2218].xyz), vec3(_2245, _2246, _2247));
        float _4215 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2260 = _2237 * _2237;
        float _2264 = ((_2255 * _2255) * (_2260 + (-1.0))) + 1.0;
        float _2271 = exp2(log2(1.0 - (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0)))) * 5.0);
        float _2278 = 1.0 - _2237;
        float _2288 = (0.5 / (((_1898 * ((_2251 * _2278) + _2237)) + 9.9999999392252902907785028219223e-09) + (((_1898 * _2278) + _2237) * _2251))) * _2251;
        float _4226 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
        float _2290 = (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * (_2260 / ((_2264 * _2264) * 3.141590118408203125));
        float _2291 = isnan(1.0) ? _1748 : (isnan(_1748) ? 1.0 : min(_1748, 1.0));
        _2207 = (((((_2271 * _1920) + _645) * cbLight._m0[_2222].x) * _2290) * _2291) + _2093;
        _2209 = (((((_2271 * _1922) + _647) * cbLight._m0[_2222].y) * _2290) * _2291) + _2095;
        _2211 = (((((_2271 * _1923) + _648) * cbLight._m0[_2222].z) * _2290) * _2291) + _2097;
    }
    float _2426;
    float _2428;
    float _2430;
    float _2432;
    float _2434;
    float _2436;
    if (_1730.y == 0u)
    {
        float _2366 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2367 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2366;
        float _2368 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2366;
        float _2369 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2366;
        uvec4 _2381 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2382 = _2381.x;
        uint _2393 = uint((float(_2381.y) * floor(float(uint(cbSceneParam._m0[85u].y * _582) / _2382))) + floor(float(uint(cbSceneParam._m0[85u].x * _581) / _2382)));
        float _2403 = (log2(_2369 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2404 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        uint _2407 = uint(isnan(14.0) ? _2404 : (isnan(_2404) ? 14.0 : min(_2404, 14.0)));
        uvec4 _2412 = texelFetch(g_lightClusterGridBuffer, int(((_2407 << 2u) + (_2393 << 6u)) >> 2u));
        uint _2413 = _2412.x;
        uint _2414 = _2381.z;
        float _2514;
        float _2516;
        float _2518;
        float _2520;
        float _2522;
        float _2524;
        if (((((1u << ((_2414 >> 4u) & 15u)) + 4294967295u) & _2413) == 0u) || ((_2414 & 240u) == 0u))
        {
            _2514 = 0.0;
            _2516 = 0.0;
            _2518 = 0.0;
            _2520 = 0.0;
            _2522 = 0.0;
            _2524 = 0.0;
        }
        else
        {
            float _2515;
            float _2517;
            float _2519;
            float _2521;
            float _2523;
            float _2525;
            float _2667 = 0.0;
            float _2668 = 0.0;
            float _2669 = 0.0;
            float _2670 = 0.0;
            float _2671 = 0.0;
            float _2672 = 0.0;
            uint _2673 = 0u;
            uint _2682;
            bool _2683;
            for (;;)
            {
                _2682 = texelFetch(g_lightClassification, int((((_2407 << 5u) + (_2393 << 9u)) + (_2673 << 2u)) >> 2u)).x;
                _2683 = _2682 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2683)
                {
                    frontier_phi_66_pred = _2667;
                    frontier_phi_66_pred_1 = _2672;
                    frontier_phi_66_pred_2 = _2671;
                    frontier_phi_66_pred_3 = _2670;
                    frontier_phi_66_pred_4 = _2669;
                    frontier_phi_66_pred_5 = _2668;
                }
                else
                {
                    float _2812;
                    float _2813;
                    float _2814;
                    float _2815;
                    float _2816;
                    float _2817;
                    uint _2818;
                    _2812 = _2667;
                    _2813 = _2668;
                    _2814 = _2669;
                    _2815 = _2670;
                    _2816 = _2671;
                    _2817 = _2672;
                    _2818 = _2682;
                    float _2739;
                    float _2740;
                    float _2741;
                    float _2742;
                    float _2743;
                    float _2744;
                    for (;;)
                    {
                        uint _2822 = uint(findLSB(_2818)) + (_2673 << 5u);
                        uint _2819 = (_2818 + 4294967295u) & _2818;
                        uint _2824 = _2822 * 48u;
                        vec4 _2838 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2824)).x, texelFetch(g_PointLightRenderingBuffer, int(_2824 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2824 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2824 + 3u)).x));
                        uint _2844 = (_2822 * 48u) + 4u;
                        vec4 _2857 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2844)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 3u)).x));
                        uint _2863 = (_2822 * 48u) + 8u;
                        vec3 _2874 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2863)).x, texelFetch(g_PointLightRenderingBuffer, int(_2863 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2863 + 2u)).x));
                        float _2878 = _2838.x - _2367;
                        float _2879 = _2838.y - _2368;
                        float _2880 = _2838.z - _2369;
                        float _2881 = dot(vec3(_2878, _2879, _2880), vec3(_2878, _2879, _2880));
                        float _2884 = inversesqrt(_2881);
                        float _2885 = _2884 * _2878;
                        float _2886 = _2884 * _2879;
                        float _2887 = _2884 * _2880;
                        float _2888 = dot(vec3(_602, _605, _608), vec3(_2885, _2886, _2887));
                        float _2893 = 1.0 - (_2881 * _2838.w);
                        float _4252 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
                        float _2894 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
                        float _2895 = sqrt(_2881) * _2857.w;
                        float _2898 = 1.39999997615814208984375 / (_2895 + 1.39999997615814208984375);
                        float _2899 = _2898 * _2898;
                        float _2902 = ((1.0 - _2899) * _2888) + _2899;
                        float _2905 = _2895 * _2895;
                        float _2909 = ((isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0))) * _2894) / ((_2905 * 0.699999988079071044921875) + 1.0);
                        float _2913 = (-0.0) - _2367;
                        float _2914 = (-0.0) - _2368;
                        float _2915 = (-0.0) - _2369;
                        float _2919 = inversesqrt(dot(vec3(_2913, _2914, _2915), vec3(_2913, _2914, _2915)));
                        float _2920 = _2919 * _2913;
                        float _2921 = _2919 * _2914;
                        float _2922 = _2919 * _2915;
                        float _2930 = exp2(log2(1.0 / ((_2905 * 3.5) + 5.0)) * 0.25);
                        float _2931 = 1.0 - _677;
                        float _2938 = sqrt(1.0 - ((1.0 - (_2931 * _2931)) * (1.0 - (_2930 * _2930))));
                        float _2939 = _2938 * _2938;
                        float _2940 = _2939 * _2939;
                        float _2941 = _2920 + _2885;
                        float _2942 = _2921 + _2886;
                        float _2943 = _2922 + _2887;
                        float _2947 = inversesqrt(dot(vec3(_2941, _2942, _2943), vec3(_2941, _2942, _2943)));
                        float _2951 = dot(vec3(_602, _605, _608), vec3(_2920, _2921, _2922));
                        float _4268 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
                        float _2954 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
                        float _2955 = dot(vec3(_602, _605, _608), vec3(_2947 * _2941, _2947 * _2942, _2947 * _2943));
                        float _4279 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
                        float _2958 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
                        float _2962 = ((_2958 * _2958) * (_2940 + (-1.0))) + 1.0;
                        float _2963 = _2898 * _2939;
                        float _2964 = _2963 * _2963;
                        float _2967 = ((1.0 - _2964) * _2888) + _2964;
                        float _4290 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
                        float _2968 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                        float _2969 = 1.0 - _2939;
                        float _2979 = (0.5 / (((_2968 * ((_2954 * _2969) + _2939)) + 9.9999999392252902907785028219223e-09) + (((_2968 * _2969) + _2939) * _2954))) * _2968;
                        float _4301 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
                        float _2990 = (((_2940 * 3.1415927410125732421875) * (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0)))) / ((_2962 * _2962) * ((_2905 * 2.1991131305694580078125) + 3.141590118408203125))) * _2894;
                        _2742 = (_2909 * _2857.x) + _2815;
                        _2743 = (_2909 * _2857.y) + _2816;
                        _2744 = (_2909 * _2857.z) + _2817;
                        _2739 = (_2990 * _2874.x) + _2812;
                        _2740 = (_2990 * _2874.y) + _2813;
                        _2741 = (_2990 * _2874.z) + _2814;
                        if (_2819 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2812 = _2739;
                            _2813 = _2740;
                            _2814 = _2741;
                            _2815 = _2742;
                            _2816 = _2743;
                            _2817 = _2744;
                            _2818 = _2819;
                        }
                    }
                    frontier_phi_66_pred = _2739;
                    frontier_phi_66_pred_1 = _2744;
                    frontier_phi_66_pred_2 = _2743;
                    frontier_phi_66_pred_3 = _2742;
                    frontier_phi_66_pred_4 = _2741;
                    frontier_phi_66_pred_5 = _2740;
                }
                _2515 = frontier_phi_66_pred;
                _2525 = frontier_phi_66_pred_1;
                _2523 = frontier_phi_66_pred_2;
                _2521 = frontier_phi_66_pred_3;
                _2519 = frontier_phi_66_pred_4;
                _2517 = frontier_phi_66_pred_5;
                uint _2674 = _2673 + 1u;
                if (_2674 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2667 = _2515;
                    _2668 = _2517;
                    _2669 = _2519;
                    _2670 = _2521;
                    _2671 = _2523;
                    _2672 = _2525;
                    _2673 = _2674;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2514 = _2515;
            _2516 = _2517;
            _2518 = _2519;
            _2520 = _2521;
            _2522 = _2523;
            _2524 = _2525;
        }
        uvec4 _2528 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2529 = _2528.z;
        uint _2531 = (_2529 >> 8u) & 15u;
        float _2635;
        float _2637;
        float _2639;
        float _2641;
        float _2643;
        float _2645;
        if (((4294967295u << _2531) & _2413) == 0u)
        {
            _2635 = _2514;
            _2637 = _2516;
            _2639 = _2518;
            _2641 = _2520;
            _2643 = _2522;
            _2645 = _2524;
        }
        else
        {
            float _2660 = inversesqrt(dot(vec3(_2367, _2368, _2369), vec3(_2367, _2368, _2369)));
            float _2661 = _2660 * _2367;
            float _2662 = _2660 * _2368;
            float _2663 = _2660 * _2369;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2531 < ((_2529 >> 12u) & 15u))
            {
                float _2636;
                float _2638;
                float _2640;
                float _2642;
                float _2644;
                float _2646;
                float _2795 = _2514;
                float _2796 = _2516;
                float _2797 = _2518;
                float _2798 = _2520;
                float _2799 = _2522;
                float _2800 = _2524;
                uint _2801 = _2531;
                uint _2810;
                bool _2811;
                for (;;)
                {
                    _2810 = texelFetch(g_lightClassification, int((((_2407 << 5u) + (_2393 << 9u)) + (_2801 << 2u)) >> 2u)).x;
                    _2811 = _2810 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2811)
                    {
                        frontier_phi_77_pred = _2800;
                        frontier_phi_77_pred_1 = _2799;
                        frontier_phi_77_pred_2 = _2798;
                        frontier_phi_77_pred_3 = _2797;
                        frontier_phi_77_pred_4 = _2796;
                        frontier_phi_77_pred_5 = _2795;
                    }
                    else
                    {
                        float _3004;
                        float _3005;
                        float _3006;
                        float _3007;
                        float _3008;
                        float _3009;
                        float _3299;
                        float _3300;
                        float _3301;
                        float _3302;
                        float _3303;
                        float _3304;
                        float _3017 = _2795;
                        float _3018 = _2796;
                        float _3019 = _2797;
                        float _3020 = _2798;
                        float _3021 = _2799;
                        float _3022 = _2800;
                        uint _3023 = _2810;
                        uint _3024;
                        vec4 _3049;
                        float _3050;
                        vec4 _3065;
                        vec3 _3077;
                        vec4 _3093;
                        vec4 _3109;
                        float _3155;
                        bool _3156;
                        for (;;)
                        {
                            uint _3034 = ((_2801 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3023));
                            _3024 = (_3023 + 4294967295u) & _3023;
                            uint _3036 = _3034 * 40u;
                            _3049 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3036)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 3u)).x));
                            _3050 = _3049.w;
                            uint _3052 = (_3034 * 40u) + 4u;
                            _3065 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3052)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 3u)).x));
                            uint _3067 = (_3034 * 40u) + 8u;
                            _3077 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3067)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 2u)).x));
                            uint _3080 = (_3034 * 40u) + 16u;
                            _3093 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3080)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 3u)).x));
                            uint _3096 = (_3034 * 40u) + 20u;
                            _3109 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3096)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 3u)).x));
                            uint _3111 = (_3034 * 40u) + 24u;
                            vec4 _3124 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3111)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 3u)).x));
                            uint _3130 = (_3034 * 40u) + 28u;
                            vec4 _3143 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3130)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 3u)).x));
                            _3155 = fma(_2369, _3143.z, fma(_2368, _3143.y, _3143.x * _2367)) + _3143.w;
                            _3156 = !((fma(_2369, _3124.z, fma(_2368, _3124.y, _3124.x * _2367)) + _3124.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3156)
                            {
                                float _3183 = _3049.x - _2367;
                                float _3184 = _3049.y - _2368;
                                float _3185 = _3049.z - _2369;
                                float _3186 = dot(vec3(_3183, _3184, _3185), vec3(_3183, _3184, _3185));
                                float _3189 = inversesqrt(_3186);
                                float _3190 = _3189 * _3183;
                                float _3191 = _3189 * _3184;
                                float _3192 = _3189 * _3185;
                                float _3196 = 1.0 - (_3186 / (_3050 * _3050));
                                float _4312 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                                float _3197 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
                                float _3201 = sqrt(_3186) * _3065.w;
                                float _3203 = 1.39999997615814208984375 / (_3201 + 1.39999997615814208984375);
                                float _3204 = _3203 * _3203;
                                float _3207 = ((1.0 - _3204) * dot(vec3(_3190, _3191, _3192), vec3(_602, _605, _608))) + _3204;
                                float _3210 = _3201 * _3201;
                                float _3214 = (fma(_2369, _3093.z, fma(_2368, _3093.y, _3093.x * _2367)) + _3093.w) / _3155;
                                float _3215 = (fma(_2369, _3109.z, fma(_2368, _3109.y, _3109.x * _2367)) + _3109.w) / _3155;
                                float _3219 = 1.0 - dot(vec2(_3214, _3215), vec2(_3214, _3215));
                                float _4328 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                                float _3220 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
                                float _3221 = _3220 * (((isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0))) * _3197) / ((_3210 * 0.699999988079071044921875) + 1.0));
                                float _3233 = exp2(log2(1.0 / ((_3210 * 3.5) + 5.0)) * 0.25);
                                float _3234 = 1.0 - _677;
                                float _3241 = sqrt(1.0 - ((1.0 - (_3234 * _3234)) * (1.0 - (_3233 * _3233))));
                                float _3242 = _3241 * _3241;
                                float _3243 = _3242 * _3242;
                                float _3244 = _3190 - _2661;
                                float _3245 = _3191 - _2662;
                                float _3246 = _3192 - _2663;
                                float _3250 = inversesqrt(dot(vec3(_3244, _3245, _3246), vec3(_3244, _3245, _3246)));
                                float _3254 = dot(vec3(_602, _605, _608), vec3((-0.0) - _2661, (-0.0) - _2662, (-0.0) - _2663));
                                float _4339 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                                float _3257 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
                                float _3258 = dot(vec3(_602, _605, _608), vec3(_3250 * _3244, _3250 * _3245, _3250 * _3246));
                                float _4350 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                                float _3261 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
                                float _3265 = ((_3261 * _3261) * (_3243 + (-1.0))) + 1.0;
                                float _3266 = _3203 * _3242;
                                float _3267 = _3266 * _3266;
                                float _3273 = ((1.0 - _3267) * dot(vec3(_602, _605, _608), vec3(_3190, _3191, _3192))) + _3267;
                                float _4361 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                                float _3274 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
                                float _3275 = 1.0 - _3242;
                                float _3285 = (0.5 / (((_3274 * ((_3257 * _3275) + _3242)) + 9.9999999392252902907785028219223e-09) + (((_3274 * _3275) + _3242) * _3257))) * _3274;
                                float _4372 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                                float _3295 = (_3220 * _3197) * (((_3243 * 3.1415927410125732421875) * (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0)))) / ((_3265 * _3265) * ((_3210 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3221 * _3065.y;
                                frontier_phi_83_pred_1 = _3221 * _3065.x;
                                frontier_phi_83_pred_2 = _3295 * _3077.z;
                                frontier_phi_83_pred_3 = _3295 * _3077.y;
                                frontier_phi_83_pred_4 = _3295 * _3077.x;
                                frontier_phi_83_pred_5 = _3221 * _3065.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3303 = frontier_phi_83_pred;
                            _3302 = frontier_phi_83_pred_1;
                            _3301 = frontier_phi_83_pred_2;
                            _3300 = frontier_phi_83_pred_3;
                            _3299 = frontier_phi_83_pred_4;
                            _3304 = frontier_phi_83_pred_5;
                            _3007 = _3302 + _3020;
                            _3008 = _3303 + _3021;
                            _3009 = _3304 + _3022;
                            _3004 = _3299 + _3017;
                            _3005 = _3300 + _3018;
                            _3006 = _3301 + _3019;
                            if (_3024 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3017 = _3004;
                                _3018 = _3005;
                                _3019 = _3006;
                                _3020 = _3007;
                                _3021 = _3008;
                                _3022 = _3009;
                                _3023 = _3024;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3009;
                        frontier_phi_77_pred_1 = _3008;
                        frontier_phi_77_pred_2 = _3007;
                        frontier_phi_77_pred_3 = _3006;
                        frontier_phi_77_pred_4 = _3005;
                        frontier_phi_77_pred_5 = _3004;
                    }
                    _2646 = frontier_phi_77_pred;
                    _2644 = frontier_phi_77_pred_1;
                    _2642 = frontier_phi_77_pred_2;
                    _2640 = frontier_phi_77_pred_3;
                    _2638 = frontier_phi_77_pred_4;
                    _2636 = frontier_phi_77_pred_5;
                    uint _2802 = _2801 + 1u;
                    if (_2802 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2795 = _2636;
                        _2796 = _2638;
                        _2797 = _2640;
                        _2798 = _2642;
                        _2799 = _2644;
                        _2800 = _2646;
                        _2801 = _2802;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2640;
                frontier_phi_58_59_ladder_1 = _2646;
                frontier_phi_58_59_ladder_2 = _2644;
                frontier_phi_58_59_ladder_3 = _2642;
                frontier_phi_58_59_ladder_4 = _2638;
                frontier_phi_58_59_ladder_5 = _2636;
            }
            else
            {
                frontier_phi_58_59_ladder = _2518;
                frontier_phi_58_59_ladder_1 = _2524;
                frontier_phi_58_59_ladder_2 = _2522;
                frontier_phi_58_59_ladder_3 = _2520;
                frontier_phi_58_59_ladder_4 = _2516;
                frontier_phi_58_59_ladder_5 = _2514;
            }
            _2635 = frontier_phi_58_59_ladder_5;
            _2637 = frontier_phi_58_59_ladder_4;
            _2639 = frontier_phi_58_59_ladder;
            _2641 = frontier_phi_58_59_ladder_3;
            _2643 = frontier_phi_58_59_ladder_2;
            _2645 = frontier_phi_58_59_ladder_1;
        }
        float _2650 = isnan(1.0) ? _661 : (isnan(_661) ? 1.0 : min(_661, 1.0));
        _2426 = (_2650 * _2641) + _1862;
        _2428 = (_2650 * _2643) + _1864;
        _2430 = (_2650 * _2645) + _1866;
        _2432 = ((_2635 * _645) * _2650) + _2207;
        _2434 = ((_2637 * _647) * _2650) + _2209;
        _2436 = ((_2639 * _648) * _2650) + _2211;
    }
    else
    {
        _2426 = _1862;
        _2428 = _1864;
        _2430 = _1866;
        _2432 = _2207;
        _2434 = _2209;
        _2436 = _2211;
    }
    float _4388 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _4399 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _4410 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _2453 = ((isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_2426 + ((isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0))) * _661))) + ((_2432 + ((isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))) * _1501)) * cbPerFrame._m0[3u].x);
    float _2454 = ((isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_2428 + ((isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0))) * _661))) + ((_2434 + ((isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))) * _1501)) * cbPerFrame._m0[3u].x);
    float _2455 = ((isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * (_2430 + ((isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0))) * _661))) + ((_2436 + ((isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))) * _1501)) * cbPerFrame._m0[3u].x);
    uint _2456 = _224 + 6u;
    float _2464 = _581 / cbSceneParam._m0[86u].x;
    float _2465 = _582 / cbSceneParam._m0[86u].y;
    vec4 _2479 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2464, _2465, (log2((isnan(cbSceneParam._m0[77u].w) ? _502 : (isnan(_502) ? cbSceneParam._m0[77u].w : min(_502, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2481 = _2479.x;
    float _2482 = _2479.y;
    float _2483 = _2479.z;
    float _2484 = _2479.w;
    float _2577;
    float _2579;
    float _2581;
    float _2583;
    if (_502 > cbSceneParam._m0[78u].w)
    {
        float _2539 = isnan(_502) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _502 : min(cbSceneParam._m0[80u].w, _502));
        float _2540 = _2539 / _502;
        float _2551 = _2540 * _553;
        float _2552 = _554 * _2540;
        float _2553 = (-0.0) - _2552;
        float _2555 = _2540 * _555;
        float _2557 = (cbSceneParam._m0[77u].w * _2553) / _2539;
        float _2558 = _2557 + cbSceneParam._m0[79u].w;
        float _2559 = cbSceneParam._m0[79u].w - _2552;
        float _2565 = sqrt(((_2551 * _2551) + (_2552 * _2552)) + (_2555 * _2555));
        float _2568 = (1.0 - (cbSceneParam._m0[77u].w / _2539)) * _2565;
        float _2573 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2575 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2752;
        if (abs((_2553 - _2557) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2752 = ((((_2558 > 0.0) ? exp2(_2573 * _2558) : (2.0 - exp2(_2575 * _2558))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2568;
        }
        else
        {
            float _2696 = 1.0 / cbSceneParam._m0[80u].x;
            float _2697 = isnan(_2559) ? _2558 : (isnan(_2558) ? _2559 : max(_2558, _2559));
            float _2698 = isnan(_2559) ? _2558 : (isnan(_2558) ? _2559 : min(_2558, _2559));
            float _2707 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : min(_2697, 0.0));
            float _2708 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : min(_2698, 0.0));
            _2752 = ((abs(_2565 / _2553) * cbSceneParam._m0[80u].y) * ((((_2707 - _2708) * 2.0) - ((exp2(_2573 * (isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0)))) - exp2(_2573 * (isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0))))) * _2696)) - ((exp2(_2575 * _2707) - exp2(_2575 * _2708)) * _2696))) + (_2568 * cbSceneParam._m0[80u].z);
        }
        vec4 _2754 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2464, _2465, 1.0), 0.0);
        float _2763 = exp2((_2752 * (-1.44269502162933349609375)) * (1.0 - _2754.w));
        float _2764 = log2(_2763);
        float _2780 = log2(_2484);
        _2577 = (exp2(_2780 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2764 * cbSceneParam._m0[78u].x)) * _2754.x) / cbSceneParam._m0[78u].x)) + _2481;
        _2579 = (exp2(_2780 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2764 * cbSceneParam._m0[78u].y)) * _2754.y) / cbSceneParam._m0[78u].y)) + _2482;
        _2581 = (exp2(_2780 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2764 * cbSceneParam._m0[78u].z)) * _2754.z) / cbSceneParam._m0[78u].z)) + _2483;
        _2583 = _2763 * _2484;
    }
    else
    {
        _2577 = _2481;
        _2579 = _2482;
        _2581 = _2483;
        _2583 = _2484;
    }
    bool _2790;
    vec4 _2593;
    vec4 _2615;
    float _2617;
    float _2621;
    float _2622;
    float _2623;
    float _2624;
    bool _2634;
    for (;;)
    {
        _2593 = cbMatDynParam._m0[0u];
        float _2595 = roundEven(_2593.y);
        bool _2596 = _2595 == 3.0;
        float _2597 = log2(_2583);
        float _2604 = exp2(_2597 * cbSceneParam._m0[78u].x) * _2453;
        float _2605 = exp2(_2597 * cbSceneParam._m0[78u].y) * _2454;
        float _2606 = exp2(_2597 * cbSceneParam._m0[78u].z) * _2455;
        float _2613 = _569 + (-0.5);
        _2615 = cbMtdParam._m0[1u];
        _2617 = _2615.y * _2613;
        float _2620 = (_2595 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2621 = _2620 * (_2596 ? _2604 : (_2604 + (cbSceneParam._m0[72u].w * _2577)));
        _2622 = _2620 * (_2596 ? _2605 : (_2605 + (cbSceneParam._m0[72u].w * _2579)));
        _2623 = _2620 * (_2596 ? _2606 : (_2606 + (cbSceneParam._m0[72u].w * _2581)));
        _2624 = _2613 * 0.999000012874603271484375;
        _2634 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2634)
        {
            if ((cbInstanceData._m0[_224 + 7u].x + _2624) < 0.5)
            {
                _2790 = true;
                break;
            }
        }
        uint _2731 = _621 + uint(_2593.w);
        if ((cbInstanceData._m0[_2731].w < 1.0) && ((cbInstanceData._m0[_2731].w + _2624) < 0.5))
        {
            _2790 = true;
            break;
        }
        if ((_2617 + 1.0) < _2615.x)
        {
            _2790 = true;
            break;
        }
        _2790 = false;
        break;
    }
    float _2995;
    if (_2790)
    {
        discard_state = true;
        _2995 = 0.0;
    }
    else
    {
        _2995 = cbInstanceData._m0[_2456].w;
    }
    SV_Target.x = _2621;
    SV_Target.y = _2622;
    SV_Target.z = _2623;
    SV_Target.w = _2995;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2456].w;
    discard_exit();
}


