#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1063;
float _3730;
float _3731;
float _3732;
float _3733;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _234 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _234 + 1u;
    uint _244 = _234 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _274 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _280 = _274.x * cbMtdParam._m0[9u].x;
    float _281 = _274.y * cbMtdParam._m0[9u].y;
    float _282 = _274.z * cbMtdParam._m0[9u].z;
    vec4 _300 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _254) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _255) + cbTextureTilingScale._m0[20u].w));
    vec4 _326 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _330 = _326.z;
    float _334 = (_326.x * 2.0) + (-1.0);
    float _335 = (_326.y * 2.0) + (-1.0);
    float _336 = dot(vec2(_334, _335), vec2(_334, _335));
    float _3742 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _342 = sqrt(1.0 - (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))));
    float _347 = _334 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_300.x * 2.0) + (-1.0)));
    float _348 = _335 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_300.y * 2.0) + (-1.0)));
    vec4 _365 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _254) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _255) + cbTextureTilingScale._m0[11u].w));
    float _367 = _365.x;
    float _368 = 1.0 - _367;
    float _384 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_367 - _368) * cbMtdParam._m0[24u].z) + _368) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3753 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _385 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
    float _392 = (_385 * (cbMtdParam._m0[17u].x - _280)) + _280;
    float _393 = (_385 * (cbMtdParam._m0[17u].y - _281)) + _281;
    float _394 = (_385 * (cbMtdParam._m0[17u].z - _282)) + _282;
    vec4 _407 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _409 = _407.x;
    float _411 = _409 - (_409 * _385);
    float _416 = (((_300.z - _330) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _330;
    vec4 _429 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _254) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _255) + cbTextureTilingScale._m0[15u].w));
    float _436 = (_429.x * 2.0) + (-1.0);
    float _437 = (_429.y * 2.0) + (-1.0);
    float _438 = dot(vec2(_436, _437), vec2(_436, _437));
    float _3764 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _446 = (_385 * (_429.z - _416)) + _416;
    float _458 = (((_436 - _347) + (cbMtdParam._m0[21u].x * _347)) * _385) + _347;
    float _459 = (((_437 - _348) + (cbMtdParam._m0[21u].x * _348)) * _385) + _348;
    float _460 = (_385 * (sqrt(1.0 - (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0)))) - _342)) + _342;
    float _465 = cbMtdParam._m0[22u].x + _326.w;
    float _468 = fma(_460, _221 * NORMAL.x, fma(_459, _228 * TANGENT.x, (_214 * _206) * _458));
    float _471 = fma(_460, _221 * NORMAL.y, fma(_459, _228 * TANGENT.y, (_214 * _207) * _458));
    float _474 = fma(_460, _221 * NORMAL.z, fma(_459, _228 * TANGENT.z, (_214 * _208) * _458));
    float _478 = inversesqrt(dot(vec3(_468, _471, _474), vec3(_468, _471, _474)));
    float _479 = _478 * _468;
    float _480 = _478 * _471;
    float _481 = _478 * _474;
    float _3775 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _482 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _3786 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _3797 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _3808 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _3819 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _3830 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _487 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _501 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _542 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _552 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _542);
    float _553 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _542);
    float _554 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _542);
    float _558 = inversesqrt(dot(vec3(_552, _553, _554), vec3(_552, _553, _554)));
    float _559 = _552 * _558;
    float _560 = _553 * _558;
    float _561 = _554 * _558;
    vec4 _566 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _568 = _566.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _743 = sqrt(((_552 * _552) + (_553 * _553)) + (_554 * _554));
        float _749 = (cbMatDynParam._m0[5u].x * _743) + cbMatDynParam._m0[5u].y;
        float _3841 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _750 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _754 = (cbMatDynParam._m0[5u].z * _743) + cbMatDynParam._m0[5u].w;
        float _3852 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) - _750)) + _750) < ((_568 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _580 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _581 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _601 = fma(_481, cbSceneParam._m0[5u].z, fma(_480, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _479));
    float _604 = fma(_481, cbSceneParam._m0[6u].z, fma(_480, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _479));
    float _607 = fma(_481, cbSceneParam._m0[7u].z, fma(_480, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _479));
    uint _620 = _234 + 9u;
    uint _621 = _620 + uint(cbMatDynParam._m0[0u].w);
    float _627 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0)))) * cbInstanceData._m0[_621].x;
    float _628 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0)))) * cbInstanceData._m0[_621].y;
    float _629 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0)))) * cbInstanceData._m0[_621].z;
    float _3863 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _630 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _3874 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _631 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _3885 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _632 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _633 = 1.0 - _487;
    float _634 = _630 * _633;
    float _635 = _631 * _633;
    float _636 = _632 * _633;
    float _641 = (_630 + (-0.039999999105930328369140625)) * _487;
    float _642 = (_631 + (-0.039999999105930328369140625)) * _487;
    float _643 = (_632 + (-0.039999999105930328369140625)) * _487;
    float _644 = _641 + 0.039999999105930328369140625;
    float _646 = _642 + 0.039999999105930328369140625;
    float _647 = _643 + 0.039999999105930328369140625;
    vec4 _656 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _580, cbSceneParam._m0[86u].y * _581));
    float _660 = ((isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) * TEXCOORD_5.w) * _656.x;
    float _661 = dot(vec3(_479, _480, _481), vec3(_559, _560, _561));
    float _664 = _661 * 2.0;
    float _668 = (_664 * _479) - _559;
    float _669 = (_664 * _480) - _560;
    float _670 = (_664 * _481) - _561;
    float _674 = abs(dot(vec3(_559, _560, _561), vec3(_479, _480, _481)));
    float _3896 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _676 = sqrt(_482);
    float _689 = exp2((_676 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_676 * 3.0));
    float _695 = (1.0 - _689) * ((_676 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _696 = _689 * _676;
    float _724 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _728 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _732 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1062;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _787 = fma(_732, cbModelParam._m0[26u].z, fma(_728, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _724));
        float _791 = fma(_732, cbModelParam._m0[27u].z, fma(_728, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _724));
        float _795 = fma(_732, cbModelParam._m0[28u].z, fma(_728, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _724));
        float _820 = _724 + _479;
        float _821 = _728 + _480;
        float _822 = _732 + _481;
        float _832 = fma(_822, cbModelParam._m0[26u].z, fma(_821, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _820)) - _787;
        float _833 = fma(_822, cbModelParam._m0[27u].z, fma(_821, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _820)) - _791;
        float _834 = fma(_822, cbModelParam._m0[28u].z, fma(_821, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _820)) - _795;
        float _838 = inversesqrt(dot(vec3(_832, _833, _834), vec3(_832, _833, _834)));
        float _851 = ((_838 * _832) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_787 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _852 = ((_838 * _833) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_791 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _853 = ((_838 * _834) / cbModelParam._m0[34u].z) + ((((((_795 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _856 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_851, _852, _853), 0.0);
        vec4 _863 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_851, _852, _853), 0.0);
        vec4 _870 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_851, _852, _853), 0.0);
        vec4 _877 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_851, _852, _853), 0.0);
        float _890 = exp2((_856.w + (-0.5)) * 20.0) * 2.0;
        float _891 = _890 * (_856.x + (-0.5));
        float _892 = _890 * (_856.y + (-0.5));
        float _893 = _890 * (_856.z + (-0.5));
        float _900 = exp2((_863.w + (-0.5)) * 20.0) * 2.0;
        float _901 = _900 * (_863.x + (-0.5));
        float _902 = _900 * (_863.y + (-0.5));
        float _903 = _900 * (_863.z + (-0.5));
        float _910 = exp2((_870.w + (-0.5)) * 20.0) * 2.0;
        float _911 = _910 * (_870.x + (-0.5));
        float _912 = _910 * (_870.y + (-0.5));
        float _913 = _910 * (_870.z + (-0.5));
        float _920 = exp2((_877.w + (-0.5)) * 20.0) * 2.0;
        float _921 = _920 * (_877.x + (-0.5));
        float _922 = _920 * (_877.y + (-0.5));
        float _923 = _920 * (_877.z + (-0.5));
        float _924 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _925 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _926 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _927 = _891 * 0.5;
        float _928 = _901 * 0.5;
        float _929 = _911 * 0.5;
        float _930 = dot(vec3(_927, _928, _929), vec3(_927, _928, _929));
        float _935 = (_930 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_930);
        float _944 = (dot(vec3(_479, _480, _481), vec3(_935 * _927, _935 * _928, _935 * _929)) + 1.0) * 0.5;
        float _3922 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _954 = sqrt(((_928 * _928) + (_927 * _927)) + (_929 * _929)) / (_924 + 9.9999997473787516355514526367188e-06);
        float _3933 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _955 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _956 = _955 * 2.0;
        float _960 = (1.0 - _955) / (_955 + 1.0);
        float _3944 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _961 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _970 = ((((1.0 - _961) * (_956 + 2.0)) * exp2(log2(isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (_956 + 1.0))) + _961) * _924;
        float _971 = _892 * 0.5;
        float _972 = _902 * 0.5;
        float _973 = _912 * 0.5;
        float _974 = dot(vec3(_971, _972, _973), vec3(_971, _972, _973));
        float _979 = (_974 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_974);
        float _987 = (dot(vec3(_479, _480, _481), vec3(_979 * _971, _979 * _972, _979 * _973)) + 1.0) * 0.5;
        float _3955 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _996 = sqrt(((_972 * _972) + (_971 * _971)) + (_973 * _973)) / (_925 + 9.9999997473787516355514526367188e-06);
        float _3966 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _997 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _998 = _997 * 2.0;
        float _1002 = (1.0 - _997) / (_997 + 1.0);
        float _3977 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1012 = ((((1.0 - _1003) * (_998 + 2.0)) * exp2(log2(isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (_998 + 1.0))) + _1003) * _925;
        float _1013 = _893 * 0.5;
        float _1014 = _903 * 0.5;
        float _1015 = _913 * 0.5;
        float _1016 = dot(vec3(_1013, _1014, _1015), vec3(_1013, _1014, _1015));
        float _1021 = (_1016 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1016);
        float _1029 = (dot(vec3(_479, _480, _481), vec3(_1021 * _1013, _1021 * _1014, _1021 * _1015)) + 1.0) * 0.5;
        float _3988 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1038 = sqrt(((_1014 * _1014) + (_1013 * _1013)) + (_1015 * _1015)) / (_926 + 9.9999997473787516355514526367188e-06);
        float _3999 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1039 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1040 = _1039 * 2.0;
        float _1044 = (1.0 - _1039) / (_1039 + 1.0);
        float _4010 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1054 = ((((1.0 - _1045) * (_1040 + 2.0)) * exp2(log2(isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * (_1040 + 1.0))) + _1045) * _926;
        _1062 = _893;
        _1064 = _892;
        _1065 = _891;
        _1066 = _903;
        _1067 = _902;
        _1068 = _901;
        _1069 = _913;
        _1070 = _912;
        _1071 = _911;
        _1072 = _926;
        _1073 = _925;
        _1074 = _924;
        _1075 = cbModelParam._m0[36u].z * (isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0)));
        _1076 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0)));
        _1077 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0)));
    }
    else
    {
        _1062 = _1063;
        _1064 = _1063;
        _1065 = _1063;
        _1066 = _1063;
        _1067 = _1063;
        _1068 = _1063;
        _1069 = _1063;
        _1070 = _1063;
        _1071 = _1063;
        _1072 = _1063;
        _1073 = _1063;
        _1074 = _1063;
        _1075 = 0.0;
        _1076 = 0.0;
        _1077 = 0.0;
    }
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1105 = fma(_732, cbModelParam._m0[30u].z, fma(_728, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _724));
        float _1109 = fma(_732, cbModelParam._m0[31u].z, fma(_728, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _724));
        float _1113 = fma(_732, cbModelParam._m0[32u].z, fma(_728, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _724));
        float _1136 = _724 + _479;
        float _1137 = _728 + _480;
        float _1138 = _732 + _481;
        float _1148 = fma(_1138, cbModelParam._m0[30u].z, fma(_1137, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1136)) - _1105;
        float _1149 = fma(_1138, cbModelParam._m0[31u].z, fma(_1137, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1136)) - _1109;
        float _1150 = fma(_1138, cbModelParam._m0[32u].z, fma(_1137, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1136)) - _1113;
        float _1154 = inversesqrt(dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150)));
        float _1167 = ((_1154 * _1148) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1105 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1168 = ((_1154 * _1149) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1109 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1169 = ((_1154 * _1150) / cbModelParam._m0[35u].z) + ((((((_1113 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1167, _1168, _1169), 0.0);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1167, _1168, _1169), 0.0);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1167, _1168, _1169), 0.0);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1167, _1168, _1169), 0.0);
        float _1204 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1171.x + (-0.5));
        float _1206 = _1204 * (_1171.y + (-0.5));
        float _1207 = _1204 * (_1171.z + (-0.5));
        float _1214 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1178.x + (-0.5));
        float _1216 = _1214 * (_1178.y + (-0.5));
        float _1217 = _1214 * (_1178.z + (-0.5));
        float _1224 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1185.x + (-0.5));
        float _1226 = _1224 * (_1185.y + (-0.5));
        float _1227 = _1224 * (_1185.z + (-0.5));
        float _1234 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1192.x + (-0.5));
        float _1236 = _1234 * (_1192.y + (-0.5));
        float _1237 = _1234 * (_1192.z + (-0.5));
        float _1238 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1239 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1240 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1241 = _1205 * 0.5;
        float _1242 = _1215 * 0.5;
        float _1243 = _1225 * 0.5;
        float _1244 = dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243));
        float _1249 = (_1244 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1244);
        float _1257 = (dot(vec3(_479, _480, _481), vec3(_1249 * _1241, _1249 * _1242, _1249 * _1243)) + 1.0) * 0.5;
        float _4051 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1266 = sqrt(((_1242 * _1242) + (_1241 * _1241)) + (_1243 * _1243)) / (_1238 + 9.9999997473787516355514526367188e-06);
        float _4062 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1268 = _1267 * 2.0;
        float _1272 = (1.0 - _1267) / (_1267 + 1.0);
        float _4073 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1282 = ((((1.0 - _1273) * (_1268 + 2.0)) * exp2(log2(isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_1268 + 1.0))) + _1273) * _1238;
        float _1283 = _1206 * 0.5;
        float _1284 = _1216 * 0.5;
        float _1285 = _1226 * 0.5;
        float _1286 = dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285));
        float _1291 = (_1286 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1286);
        float _1299 = (dot(vec3(_479, _480, _481), vec3(_1291 * _1283, _1291 * _1284, _1291 * _1285)) + 1.0) * 0.5;
        float _4084 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1308 = sqrt(((_1284 * _1284) + (_1283 * _1283)) + (_1285 * _1285)) / (_1239 + 9.9999997473787516355514526367188e-06);
        float _4095 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1310 = _1309 * 2.0;
        float _1314 = (1.0 - _1309) / (_1309 + 1.0);
        float _4106 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1324 = ((((1.0 - _1315) * (_1310 + 2.0)) * exp2(log2(isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_1310 + 1.0))) + _1315) * _1239;
        float _1325 = _1207 * 0.5;
        float _1326 = _1217 * 0.5;
        float _1327 = _1227 * 0.5;
        float _1328 = dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327));
        float _1333 = (_1328 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1328);
        float _1341 = (dot(vec3(_479, _480, _481), vec3(_1333 * _1325, _1333 * _1326, _1333 * _1327)) + 1.0) * 0.5;
        float _4117 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1350 = sqrt(((_1326 * _1326) + (_1325 * _1325)) + (_1327 * _1327)) / (_1240 + 9.9999997473787516355514526367188e-06);
        float _4128 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1352 = _1351 * 2.0;
        float _1356 = (1.0 - _1351) / (_1351 + 1.0);
        float _4139 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1366 = ((((1.0 - _1357) * (_1352 + 2.0)) * exp2(log2(isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_1352 + 1.0))) + _1357) * _1240;
        _1374 = _1207;
        _1375 = _1206;
        _1376 = _1205;
        _1377 = _1217;
        _1378 = _1216;
        _1379 = _1215;
        _1380 = _1227;
        _1381 = _1226;
        _1382 = _1225;
        _1383 = _1240;
        _1384 = _1239;
        _1385 = _1238;
        _1386 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)));
        _1387 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)));
        _1388 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)));
    }
    else
    {
        _1374 = _1063;
        _1375 = _1063;
        _1376 = _1063;
        _1377 = _1063;
        _1378 = _1063;
        _1379 = _1063;
        _1380 = _1063;
        _1381 = _1063;
        _1382 = _1063;
        _1383 = _1063;
        _1384 = _1063;
        _1385 = _1063;
        _1386 = 0.0;
        _1387 = 0.0;
        _1388 = 0.0;
    }
    float _1398 = (cbModelParam._m0[1u].x * (_1386 - _1075)) + _1075;
    float _1399 = (cbModelParam._m0[1u].x * (_1387 - _1076)) + _1076;
    float _1400 = (cbModelParam._m0[1u].x * (_1388 - _1077)) + _1077;
    float _1421 = fma(_1400, cbSceneParam._m0[89u].z, fma(_1399, cbSceneParam._m0[89u].y, _1398 * cbSceneParam._m0[89u].x));
    float _1424 = fma(_1400, cbSceneParam._m0[90u].z, fma(_1399, cbSceneParam._m0[90u].y, _1398 * cbSceneParam._m0[90u].x));
    float _1427 = fma(_1400, cbSceneParam._m0[91u].z, fma(_1399, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1398));
    float _1442 = _668 * 0.5;
    float _1443 = _669 * 0.5;
    float _1444 = _670 * 0.5;
    float _1445 = dot(vec4(_1442, _1443, _1444, 1.0), vec4(_1376, _1379, _1382, _1385));
    float _1448 = dot(vec4(_1442, _1443, _1444, 1.0), vec4(_1375, _1378, _1381, _1384));
    float _1451 = dot(vec4(_1442, _1443, _1444, 1.0), vec4(_1374, _1377, _1380, _1383));
    float _1485;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1458 = dot(vec4(_1442, _1443, _1444, 1.0), vec4(_1062, _1066, _1069, _1072));
        float _1462 = dot(vec4(_1442, _1443, _1444, 1.0), vec4(_1064, _1067, _1070, _1073));
        float _1466 = dot(vec4(_1442, _1443, _1444, 1.0), vec4(_1065, _1068, _1071, _1074));
        float _1473 = dot(vec4(cbModelParam._m0[39u]), vec4(_1442, _1443, _1444, 1.0));
        _1485 = dot(vec3(isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)), isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)), isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1473) ? 0.0 : (isnan(0.0) ? _1473 : max(0.0, _1473))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1485 = 1.0;
    }
    float _1496;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1487 = dot(vec4(cbModelParam._m0[40u]), vec4(_1442, _1443, _1444, 1.0));
        _1496 = dot(vec3(isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)), isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)), isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1487) ? 0.0 : (isnan(0.0) ? _1487 : max(0.0, _1487))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1496 = 1.0;
    }
    float _1500 = (_1496 * cbModelParam._m0[1u].x) + (_1485 * (1.0 - cbModelParam._m0[1u].x));
    float _1510 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _482);
    float _1511 = isnan(_1510) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1510 : min(cbModelParam._m0[25u].z, _1510));
    float _1592;
    float _1594;
    float _1596;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1559 = fma(_732, cbModelParam._m0[13u].z, fma(_728, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _724)) + cbModelParam._m0[13u].w;
        float _1563 = fma(_732, cbModelParam._m0[14u].z, fma(_728, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _724)) + cbModelParam._m0[14u].w;
        float _1567 = fma(_732, cbModelParam._m0[15u].z, fma(_728, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _724)) + cbModelParam._m0[15u].w;
        float _1570 = fma(_670, cbModelParam._m0[13u].z, fma(_669, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _668));
        float _1573 = fma(_670, cbModelParam._m0[14u].z, fma(_669, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _668));
        float _1576 = fma(_670, cbModelParam._m0[15u].z, fma(_669, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _668));
        float _1604;
        if (_1570 > 0.0)
        {
            _1604 = abs((1.0 - _1559) / _1570);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1570 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1559 + 1.0) / _1570);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1604 = frontier_phi_17_15_ladder;
        }
        float _1777;
        if (_1573 > 0.0)
        {
            _1777 = abs((1.0 - _1563) / _1573);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1573 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1563 + 1.0) / _1573);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1777 = frontier_phi_26_22_ladder;
        }
        float _2073;
        if (_1576 > 0.0)
        {
            _2073 = abs((1.0 - _1567) / _1576);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1576 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1567 + 1.0) / _1576);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2073 = frontier_phi_38_33_ladder;
        }
        float _2075 = isnan(_1777) ? _1604 : (isnan(_1604) ? _1777 : min(_1604, _1777));
        float _2076 = isnan(_2073) ? _2075 : (isnan(_2075) ? _2073 : min(_2075, _2073));
        float _2080 = (_2076 * _1570) + _1559;
        float _2081 = (_2076 * _1573) + _1563;
        float _2082 = (_2076 * _1576) + _1567;
        float _2083 = _2076 * 9.9999997473787516355514526367188e-05;
        float _2085 = (-1.0) - _2083;
        float _2087 = _2083 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2082 > _2087) || ((_2082 < _2085) || ((_2081 > _2087) || ((_2081 < _2085) || ((_2080 < _2085) || (_2080 > _2087))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2227 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2082, cbModelParam._m0[9u].z, fma(_2081, cbModelParam._m0[9u].y, _2080 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2082, cbModelParam._m0[10u].z, fma(_2081, cbModelParam._m0[10u].y, _2080 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2082, cbModelParam._m0[11u].z, fma(_2081, cbModelParam._m0[11u].y, _2080 * cbModelParam._m0[11u].x))), _1511);
            frontier_phi_16_38_ladder = _2227.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2227.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2227.x * cbModelParam._m0[1u].y;
        }
        _1592 = frontier_phi_16_38_ladder_2;
        _1594 = frontier_phi_16_38_ladder_1;
        _1596 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1580 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_668, _669, _670), _1511);
        _1592 = _1580.x * cbModelParam._m0[1u].y;
        _1594 = _1580.y * cbModelParam._m0[1u].y;
        _1596 = _1580.z * cbModelParam._m0[1u].y;
    }
    float _1600 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _482);
    float _1601 = isnan(_1600) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1600 : min(cbModelParam._m0[25u].w, _1600));
    float _1692;
    float _1694;
    float _1696;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1656 = fma(_732, cbModelParam._m0[21u].z, fma(_728, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _724)) + cbModelParam._m0[21u].w;
        float _1660 = fma(_732, cbModelParam._m0[22u].z, fma(_728, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _724)) + cbModelParam._m0[22u].w;
        float _1664 = fma(_732, cbModelParam._m0[23u].z, fma(_728, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _724)) + cbModelParam._m0[23u].w;
        float _1667 = fma(_670, cbModelParam._m0[21u].z, fma(_669, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _668));
        float _1670 = fma(_670, cbModelParam._m0[22u].z, fma(_669, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _668));
        float _1673 = fma(_670, cbModelParam._m0[23u].z, fma(_669, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _668));
        float _1782;
        if (_1667 > 0.0)
        {
            _1782 = abs((1.0 - _1656) / _1667);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1667 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1656 + 1.0) / _1667);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1782 = frontier_phi_28_24_ladder;
        }
        float _2100;
        if (_1670 > 0.0)
        {
            _2100 = abs((1.0 - _1660) / _1670);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1670 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1660 + 1.0) / _1670);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2100 = frontier_phi_40_35_ladder;
        }
        float _2438;
        if (_1673 > 0.0)
        {
            _2438 = abs((1.0 - _1664) / _1673);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1673 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1664 + 1.0) / _1673);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2438 = frontier_phi_50_47_ladder;
        }
        float _2440 = isnan(_2100) ? _1782 : (isnan(_1782) ? _2100 : min(_1782, _2100));
        float _2441 = isnan(_2438) ? _2440 : (isnan(_2440) ? _2438 : min(_2440, _2438));
        float _2445 = (_2441 * _1667) + _1656;
        float _2446 = (_2441 * _1670) + _1660;
        float _2447 = (_2441 * _1673) + _1664;
        float _2448 = _2441 * 9.9999997473787516355514526367188e-05;
        float _2449 = (-1.0) - _2448;
        float _2451 = _2448 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2447 > _2451) || ((_2447 < _2449) || ((_2446 > _2451) || ((_2446 < _2449) || ((_2445 < _2449) || (_2445 > _2451))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2569 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2447, cbModelParam._m0[17u].z, fma(_2446, cbModelParam._m0[17u].y, _2445 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2447, cbModelParam._m0[18u].z, fma(_2446, cbModelParam._m0[18u].y, _2445 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2447, cbModelParam._m0[19u].z, fma(_2446, cbModelParam._m0[19u].y, _2445 * cbModelParam._m0[19u].x))), _1601);
            frontier_phi_25_50_ladder = _2569.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2569.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2569.x * cbModelParam._m0[1u].z;
        }
        _1692 = frontier_phi_25_50_ladder_2;
        _1694 = frontier_phi_25_50_ladder_1;
        _1696 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1676 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_668, _669, _670), _1601);
        _1692 = _1676.x * cbModelParam._m0[1u].z;
        _1694 = _1676.y * cbModelParam._m0[1u].z;
        _1696 = _1676.z * cbModelParam._m0[1u].z;
    }
    float _1709 = (((_695 * _644) + _696) * _660) * ((cbModelParam._m0[1u].w * (_1692 - _1592)) + _1592);
    float _1711 = (((_695 * _646) + _696) * _660) * ((cbModelParam._m0[1u].w * (_1694 - _1594)) + _1594);
    float _1713 = (((_695 * _647) + _696) * _660) * ((cbModelParam._m0[1u].w * (_1696 - _1596)) + _1596);
    float _1716 = fma(_1713, cbSceneParam._m0[89u].z, fma(_1711, cbSceneParam._m0[89u].y, _1709 * cbSceneParam._m0[89u].x));
    float _1719 = fma(_1713, cbSceneParam._m0[90u].z, fma(_1711, cbSceneParam._m0[90u].y, _1709 * cbSceneParam._m0[90u].x));
    float _1722 = fma(_1713, cbSceneParam._m0[91u].z, fma(_1711, cbSceneParam._m0[91u].y, _1709 * cbSceneParam._m0[91u].x));
    float _1756 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1760 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1764 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1768 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1769 = _1756 / _1768;
    float _1770 = _1760 / _1768;
    float _1771 = _1764 / _1768;
    float _1918;
    float _1919;
    float _1920;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1798 = ((uint(_1771 > cbSceneParam._m0[59u].y) + uint(_1771 > cbSceneParam._m0[59u].x)) + uint(_1771 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1799 = _1798 + 43u;
        uint _1807 = _1798 + 44u;
        uint _1815 = _1798 + 45u;
        uint _1823 = _1798 + 46u;
        float _1834 = fma(_1768, cbSceneParam._m0[_1799].w, fma(_1764, cbSceneParam._m0[_1799].z, fma(_1760, cbSceneParam._m0[_1799].y, _1756 * cbSceneParam._m0[_1799].x)));
        float _1838 = fma(_1768, cbSceneParam._m0[_1807].w, fma(_1764, cbSceneParam._m0[_1807].z, fma(_1760, cbSceneParam._m0[_1807].y, _1756 * cbSceneParam._m0[_1807].x)));
        float _1846 = fma(_1768, cbSceneParam._m0[_1823].w, fma(_1764, cbSceneParam._m0[_1823].z, fma(_1760, cbSceneParam._m0[_1823].y, _1756 * cbSceneParam._m0[_1823].x)));
        float _1851 = cbSceneParam._m0[33u].z * _1846;
        float _1853 = cbSceneParam._m0[33u].w * _1846;
        float _1856 = fma(_1768, cbSceneParam._m0[_1815].w, fma(_1764, cbSceneParam._m0[_1815].z, fma(_1760, cbSceneParam._m0[_1815].y, _1756 * cbSceneParam._m0[_1815].x))) / _1846;
        float _1904 = (cbSceneParam._m0[33u].x - sqrt(((_1770 * _1770) + (_1769 * _1769)) + (_1771 * _1771))) * cbSceneParam._m0[33u].y;
        float _4265 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
        float _1911 = (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1851 + _1834) / _1846, (_1853 + _1838) / _1846), _1856), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1853 + _1834) / _1846, (_1838 - _1851) / _1846), _1856), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1834 - _1851) / _1846, (_1838 - _1853) / _1846), _1856), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1834 - _1853) / _1846, (_1851 + _1838) / _1846), _1856), 0.0)).x), vec4(0.25)));
        _1918 = 1.0 - (_1911 * cbSceneParam._m0[34u].x);
        _1919 = 1.0 - (_1911 * cbSceneParam._m0[34u].y);
        _1920 = 1.0 - (_1911 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1918 = 1.0;
        _1919 = 1.0;
        _1920 = 1.0;
    }
    float _1984;
    float _1986;
    float _1988;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1972 = fma(_1768, cbSceneParam._m0[63u].w, fma(_1764, cbSceneParam._m0[63u].z, fma(_1760, cbSceneParam._m0[63u].y, _1756 * cbSceneParam._m0[63u].x)));
        float _1973 = fma(_1768, cbSceneParam._m0[60u].w, fma(_1764, cbSceneParam._m0[60u].z, fma(_1760, cbSceneParam._m0[60u].y, _1756 * cbSceneParam._m0[60u].x))) / _1972;
        float _1974 = fma(_1768, cbSceneParam._m0[61u].w, fma(_1764, cbSceneParam._m0[61u].z, fma(_1760, cbSceneParam._m0[61u].y, _1756 * cbSceneParam._m0[61u].x))) / _1972;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1973 >= cbSceneParam._m0[64u].x) && (_1974 >= cbSceneParam._m0[64u].y)) && (_1973 <= cbSceneParam._m0[64u].z)) && (_1974 <= cbSceneParam._m0[64u].w))
        {
            float _2113 = fma(_1768, cbSceneParam._m0[62u].w, fma(_1764, cbSceneParam._m0[62u].z, fma(_1760, cbSceneParam._m0[62u].y, _1756 * cbSceneParam._m0[62u].x))) / _1972;
            float _2117 = isnan(cbSceneParam._m0[41u].w) ? _2113 : (isnan(_2113) ? cbSceneParam._m0[41u].w : max(_2113, cbSceneParam._m0[41u].w));
            float _2160 = (cbSceneParam._m0[33u].x - sqrt(((_1770 * _1770) + (_1769 * _1769)) + (_1771 * _1771))) * cbSceneParam._m0[33u].y;
            float _4281 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
            float _2167 = (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1973, cbSceneParam._m0[33u].w + _1974), _2117), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1973, _1974 - cbSceneParam._m0[33u].z), _2117), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1973 - cbSceneParam._m0[33u].z, _1974 - cbSceneParam._m0[33u].w), _2117), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1973 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1974), _2117), 0.0)).x), vec4(0.25)));
            float _2171 = 1.0 - (_2167 * cbSceneParam._m0[34u].x);
            float _2172 = 1.0 - (_2167 * cbSceneParam._m0[34u].y);
            float _2173 = 1.0 - (_2167 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2173) ? _1920 : (isnan(_1920) ? _2173 : min(_1920, _2173));
            frontier_phi_37_36_ladder_1 = isnan(_2172) ? _1919 : (isnan(_1919) ? _2172 : min(_1919, _2172));
            frontier_phi_37_36_ladder_2 = isnan(_2171) ? _1918 : (isnan(_1918) ? _2171 : min(_1918, _2171));
        }
        else
        {
            frontier_phi_37_36_ladder = _1920;
            frontier_phi_37_36_ladder_1 = _1919;
            frontier_phi_37_36_ladder_2 = _1918;
        }
        _1984 = frontier_phi_37_36_ladder_2;
        _1986 = frontier_phi_37_36_ladder_1;
        _1988 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1984 = _1918;
        _1986 = _1919;
        _1988 = _1920;
    }
    uvec4 _1993 = floatBitsToUint(cbInstanceData._m0[_234 + 5u]);
    uint _1995 = _1993.x * 14u;
    uint _1996 = _1995 + 13u;
    float _2003 = _660 + (-1.0);
    float _2008 = (cbLight._m0[_1996].x * _2003) + 1.0;
    float _2009 = (cbLight._m0[_1996].y * _2003) + 1.0;
    float _2010 = (cbLight._m0[_1996].z * _2003) + 1.0;
    float _2011 = (cbLight._m0[_1996].w * _2003) + 1.0;
    uint _2012 = _1995 + 5u;
    float _2018 = isnan(1.0) ? _2009 : (isnan(_2009) ? 1.0 : min(_2009, 1.0));
    uint _2022 = _1995 + 4u;
    float _2032 = isnan(1.0) ? _2008 : (isnan(_2008) ? 1.0 : min(_2008, 1.0));
    uint _2036 = _1995 | 1u;
    float _2047 = dot(vec3(cbLight._m0[_1995].xyz), vec3(_479, _480, _481));
    float _2050 = dot(vec3(cbLight._m0[_2036].xyz), vec3(_479, _480, _481));
    float _4317 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _4328 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2055 = (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * 0.3183098733425140380859375;
    float _2057 = (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * 0.3183098733425140380859375;
    float _2064 = ((cbLight._m0[_2012].x * _2018) * _2057) + (((cbLight._m0[_2022].x * _1984) * _2032) * _2055);
    float _2065 = ((_2018 * cbLight._m0[_2012].y) * _2057) + (((cbLight._m0[_2022].y * _1986) * _2032) * _2055);
    float _2066 = ((_2018 * cbLight._m0[_2012].z) * _2057) + (((cbLight._m0[_2022].z * _1988) * _2032) * _2055);
    uvec4 _2070 = floatBitsToUint(cbLight._m0[_1995 + 12u]);
    bool _2072 = _2070.x == 0u;
    float _2174;
    float _2176;
    float _2178;
    if (_2072)
    {
        _2174 = _2064;
        _2176 = _2065;
        _2178 = _2066;
    }
    else
    {
        uint _2182 = _1995 + 6u;
        float _2198 = (dot(vec3(cbLight._m0[_1995 + 2u].xyz), vec3(_479, _480, _481)) * 0.5) + 0.5;
        float _2199 = _2198 * _2198;
        float _4339 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2200 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _2201 = isnan(1.0) ? _2010 : (isnan(_2010) ? 1.0 : min(_2010, 1.0));
        _2174 = (((cbLight._m0[_2182].x * 0.3183098733425140380859375) * _2200) * _2201) + _2064;
        _2176 = (((cbLight._m0[_2182].y * 0.3183098733425140380859375) * _2200) * _2201) + _2065;
        _2178 = (((cbLight._m0[_2182].z * 0.3183098733425140380859375) * _2200) * _2201) + _2066;
    }
    bool _2181 = _2070.y == 0u;
    float _2236;
    float _2238;
    float _2240;
    if (_2181)
    {
        _2236 = _2174;
        _2238 = _2176;
        _2240 = _2178;
    }
    else
    {
        uint _2409 = _1995 + 7u;
        float _2425 = (dot(vec3(cbLight._m0[_1995 + 3u].xyz), vec3(_479, _480, _481)) * 0.5) + 0.5;
        float _2426 = _2425 * _2425;
        float _4355 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2427 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _2428 = isnan(1.0) ? _2011 : (isnan(_2011) ? 1.0 : min(_2011, 1.0));
        _2236 = (((cbLight._m0[_2409].x * 0.3183098733425140380859375) * _2427) * _2428) + _2174;
        _2238 = (((cbLight._m0[_2409].y * 0.3183098733425140380859375) * _2427) * _2428) + _2176;
        _2240 = (((cbLight._m0[_2409].z * 0.3183098733425140380859375) * _2427) * _2428) + _2178;
    }
    uint _2243 = _1995 + 8u;
    float _2256 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1995].w)) * _482) * 0.949999988079071044921875);
    float _2257 = _2256 * _2256;
    float _2258 = cbLight._m0[_1995].x + _559;
    float _2259 = cbLight._m0[_1995].y + _560;
    float _2260 = cbLight._m0[_1995].z + _561;
    float _2264 = inversesqrt(dot(vec3(_2258, _2259, _2260), vec3(_2258, _2259, _2260)));
    float _2265 = _2264 * _2258;
    float _2266 = _2264 * _2259;
    float _2267 = _2264 * _2260;
    float _2268 = dot(vec3(_479, _480, _481), vec3(cbLight._m0[_1995].xyz));
    float _4371 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2271 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
    float _4382 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _2272 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
    float _2273 = dot(vec3(_479, _480, _481), vec3(_2265, _2266, _2267));
    float _4393 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2276 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
    float _2277 = dot(vec3(cbLight._m0[_1995].xyz), vec3(_2265, _2266, _2267));
    float _4404 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2281 = _2257 * _2257;
    float _2285 = ((_2276 * _2276) * (_2281 + (-1.0))) + 1.0;
    float _2293 = exp2(log2(1.0 - (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0)))) * 5.0);
    float _2294 = 0.959999978542327880859375 - _641;
    float _2296 = 0.959999978542327880859375 - _642;
    float _2297 = 0.959999978542327880859375 - _643;
    float _2304 = 1.0 - _2257;
    float _2315 = (0.5 / (((_2272 * ((_2271 * _2304) + _2257)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2304) + _2257) * _2271))) * _2271;
    float _4415 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2317 = (isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * (_2281 / ((_2285 * _2285) * 3.141590118408203125));
    uint _2331 = _1995 + 9u;
    float _2342 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2036].w)) * _482) * 0.949999988079071044921875);
    float _2343 = _2342 * _2342;
    float _2344 = cbLight._m0[_2036].x + _559;
    float _2345 = cbLight._m0[_2036].y + _560;
    float _2346 = cbLight._m0[_2036].z + _561;
    float _2350 = inversesqrt(dot(vec3(_2344, _2345, _2346), vec3(_2344, _2345, _2346)));
    float _2351 = _2350 * _2344;
    float _2352 = _2350 * _2345;
    float _2353 = _2350 * _2346;
    float _2354 = dot(vec3(_479, _480, _481), vec3(cbLight._m0[_2036].xyz));
    float _4426 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2357 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
    float _2358 = dot(vec3(_479, _480, _481), vec3(_2351, _2352, _2353));
    float _4437 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _2361 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
    float _2362 = dot(vec3(cbLight._m0[_2036].xyz), vec3(_2351, _2352, _2353));
    float _4448 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2366 = _2343 * _2343;
    float _2370 = ((_2361 * _2361) * (_2366 + (-1.0))) + 1.0;
    float _2377 = exp2(log2(1.0 - (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0)))) * 5.0);
    float _2384 = 1.0 - _2343;
    float _2394 = (0.5 / (((_2272 * ((_2357 * _2384) + _2343)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2384) + _2343) * _2357))) * _2357;
    float _4459 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2396 = (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_2366 / ((_2370 * _2370) * 3.141590118408203125));
    float _2406 = (((((_2377 * _2294) + _644) * cbLight._m0[_2331].x) * _2396) * _2018) + ((((cbLight._m0[_2243].x * _1984) * ((_2293 * _2294) + _644)) * _2317) * _2032);
    float _2407 = (((((_2377 * _2296) + _646) * cbLight._m0[_2331].y) * _2396) * _2018) + ((((cbLight._m0[_2243].y * _1986) * ((_2293 * _2296) + _646)) * _2317) * _2032);
    float _2408 = (((((_2377 * _2297) + _647) * cbLight._m0[_2331].z) * _2396) * _2018) + ((((cbLight._m0[_2243].z * _1988) * ((_2293 * _2297) + _647)) * _2317) * _2032);
    float _2464;
    float _2466;
    float _2468;
    if (_2072)
    {
        _2464 = _2406;
        _2466 = _2407;
        _2468 = _2408;
    }
    else
    {
        uint _2470 = _1995 + 2u;
        uint _2474 = _1995 + 10u;
        float _2488 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2470].w)) * _482) * 0.949999988079071044921875);
        float _2489 = _2488 * _2488;
        float _2490 = cbLight._m0[_2470].x + _559;
        float _2491 = cbLight._m0[_2470].y + _560;
        float _2492 = cbLight._m0[_2470].z + _561;
        float _2496 = inversesqrt(dot(vec3(_2490, _2491, _2492), vec3(_2490, _2491, _2492)));
        float _2497 = _2496 * _2490;
        float _2498 = _2496 * _2491;
        float _2499 = _2496 * _2492;
        float _2500 = dot(vec3(_479, _480, _481), vec3(cbLight._m0[_2470].xyz));
        float _4470 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        float _2503 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _2504 = dot(vec3(_479, _480, _481), vec3(_2497, _2498, _2499));
        float _4481 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2507 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
        float _2508 = dot(vec3(cbLight._m0[_2470].xyz), vec3(_2497, _2498, _2499));
        float _4492 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2512 = _2489 * _2489;
        float _2516 = ((_2507 * _2507) * (_2512 + (-1.0))) + 1.0;
        float _2523 = exp2(log2(1.0 - (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0)))) * 5.0);
        float _2530 = 1.0 - _2489;
        float _2540 = (0.5 / (((_2272 * ((_2503 * _2530) + _2489)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2530) + _2489) * _2503))) * _2503;
        float _4503 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2542 = (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * (_2512 / ((_2516 * _2516) * 3.141590118408203125));
        float _2543 = isnan(1.0) ? _2010 : (isnan(_2010) ? 1.0 : min(_2010, 1.0));
        _2464 = (((((_2523 * _2294) + _644) * cbLight._m0[_2474].x) * _2542) * _2543) + _2406;
        _2466 = (((((_2523 * _2296) + _646) * cbLight._m0[_2474].y) * _2542) * _2543) + _2407;
        _2468 = (((((_2523 * _2297) + _647) * cbLight._m0[_2474].z) * _2542) * _2543) + _2408;
    }
    float _2574;
    float _2576;
    float _2578;
    if (_2181)
    {
        _2574 = _2464;
        _2576 = _2466;
        _2578 = _2468;
    }
    else
    {
        uint _2585 = _1995 + 3u;
        uint _2589 = _1995 + 11u;
        float _2603 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2585].w)) * _482) * 0.949999988079071044921875);
        float _2604 = _2603 * _2603;
        float _2605 = cbLight._m0[_2585].x + _559;
        float _2606 = cbLight._m0[_2585].y + _560;
        float _2607 = cbLight._m0[_2585].z + _561;
        float _2611 = inversesqrt(dot(vec3(_2605, _2606, _2607), vec3(_2605, _2606, _2607)));
        float _2612 = _2611 * _2605;
        float _2613 = _2611 * _2606;
        float _2614 = _2611 * _2607;
        float _2615 = dot(vec3(_479, _480, _481), vec3(cbLight._m0[_2585].xyz));
        float _4519 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
        float _2618 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
        float _2619 = dot(vec3(_479, _480, _481), vec3(_2612, _2613, _2614));
        float _4530 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        float _2622 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
        float _2623 = dot(vec3(cbLight._m0[_2585].xyz), vec3(_2612, _2613, _2614));
        float _4541 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2627 = _2604 * _2604;
        float _2631 = ((_2622 * _2622) * (_2627 + (-1.0))) + 1.0;
        float _2638 = exp2(log2(1.0 - (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0)))) * 5.0);
        float _2645 = 1.0 - _2604;
        float _2655 = (0.5 / (((_2272 * ((_2618 * _2645) + _2604)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2645) + _2604) * _2618))) * _2618;
        float _4552 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2657 = (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0))) * (_2627 / ((_2631 * _2631) * 3.141590118408203125));
        float _2658 = isnan(1.0) ? _2011 : (isnan(_2011) ? 1.0 : min(_2011, 1.0));
        _2574 = (((((_2638 * _2294) + _644) * cbLight._m0[_2589].x) * _2657) * _2658) + _2464;
        _2576 = (((((_2638 * _2296) + _646) * cbLight._m0[_2589].y) * _2657) * _2658) + _2466;
        _2578 = (((((_2638 * _2297) + _647) * cbLight._m0[_2589].z) * _2657) * _2658) + _2468;
    }
    float _2724;
    float _2726;
    float _2728;
    float _2730;
    float _2732;
    float _2734;
    if (_1993.y == 0u)
    {
        uvec4 _2679 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2680 = _2679.x;
        uint _2691 = uint((float(_2679.y) * floor(float(uint(cbSceneParam._m0[85u].y * _581) / _2680))) + floor(float(uint(cbSceneParam._m0[85u].x * _580) / _2680)));
        float _2701 = (log2(_1771 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2702 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        uint _2705 = uint(isnan(14.0) ? _2702 : (isnan(_2702) ? 14.0 : min(_2702, 14.0)));
        uvec4 _2710 = texelFetch(g_lightClusterGridBuffer, int(((_2705 << 2u) + (_2691 << 6u)) >> 2u));
        uint _2711 = _2710.x;
        uint _2712 = _2679.z;
        float _2791;
        float _2793;
        float _2795;
        float _2797;
        float _2799;
        float _2801;
        if (((((1u << ((_2712 >> 4u) & 15u)) + 4294967295u) & _2711) == 0u) || ((_2712 & 240u) == 0u))
        {
            _2791 = 0.0;
            _2793 = 0.0;
            _2795 = 0.0;
            _2797 = 0.0;
            _2799 = 0.0;
            _2801 = 0.0;
        }
        else
        {
            float _2792;
            float _2794;
            float _2796;
            float _2798;
            float _2800;
            float _2802;
            float _2944 = 0.0;
            float _2945 = 0.0;
            float _2946 = 0.0;
            float _2947 = 0.0;
            float _2948 = 0.0;
            float _2949 = 0.0;
            uint _2950 = 0u;
            uint _2959;
            bool _2960;
            for (;;)
            {
                _2959 = texelFetch(g_lightClassification, int((((_2705 << 5u) + (_2691 << 9u)) + (_2950 << 2u)) >> 2u)).x;
                _2960 = _2959 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2960)
                {
                    frontier_phi_71_pred = _2949;
                    frontier_phi_71_pred_1 = _2948;
                    frontier_phi_71_pred_2 = _2947;
                    frontier_phi_71_pred_3 = _2946;
                    frontier_phi_71_pred_4 = _2945;
                    frontier_phi_71_pred_5 = _2944;
                }
                else
                {
                    float _3089;
                    float _3090;
                    float _3091;
                    float _3092;
                    float _3093;
                    float _3094;
                    uint _3095;
                    _3089 = _2944;
                    _3090 = _2945;
                    _3091 = _2946;
                    _3092 = _2947;
                    _3093 = _2948;
                    _3094 = _2949;
                    _3095 = _2959;
                    float _3016;
                    float _3017;
                    float _3018;
                    float _3019;
                    float _3020;
                    float _3021;
                    for (;;)
                    {
                        uint _3099 = uint(findLSB(_3095)) + (_2950 << 5u);
                        uint _3096 = (_3095 + 4294967295u) & _3095;
                        uint _3101 = _3099 * 48u;
                        vec4 _3115 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3101)).x, texelFetch(g_PointLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3101 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3101 + 3u)).x));
                        uint _3121 = (_3099 * 48u) + 4u;
                        vec4 _3134 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3121)).x, texelFetch(g_PointLightRenderingBuffer, int(_3121 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3121 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3121 + 3u)).x));
                        uint _3140 = (_3099 * 48u) + 8u;
                        vec3 _3151 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3140)).x, texelFetch(g_PointLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3140 + 2u)).x));
                        float _3155 = _3115.x - _1769;
                        float _3156 = _3115.y - _1770;
                        float _3157 = _3115.z - _1771;
                        float _3158 = dot(vec3(_3155, _3156, _3157), vec3(_3155, _3156, _3157));
                        float _3161 = inversesqrt(_3158);
                        float _3162 = _3161 * _3155;
                        float _3163 = _3161 * _3156;
                        float _3164 = _3161 * _3157;
                        float _3165 = dot(vec3(_601, _604, _607), vec3(_3162, _3163, _3164));
                        float _3170 = 1.0 - (_3158 * _3115.w);
                        float _4578 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
                        float _3171 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
                        float _3172 = sqrt(_3158) * _3134.w;
                        float _3175 = 1.39999997615814208984375 / (_3172 + 1.39999997615814208984375);
                        float _3176 = _3175 * _3175;
                        float _3179 = ((1.0 - _3176) * _3165) + _3176;
                        float _3182 = _3172 * _3172;
                        float _3186 = ((isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0))) * _3171) / ((_3182 * 0.699999988079071044921875) + 1.0);
                        float _3190 = (-0.0) - _1769;
                        float _3191 = (-0.0) - _1770;
                        float _3192 = (-0.0) - _1771;
                        float _3196 = inversesqrt(dot(vec3(_3190, _3191, _3192), vec3(_3190, _3191, _3192)));
                        float _3197 = _3196 * _3190;
                        float _3198 = _3196 * _3191;
                        float _3199 = _3196 * _3192;
                        float _3206 = exp2(log2(1.0 / ((_3182 * 3.5) + 5.0)) * 0.25);
                        float _3207 = 1.0 - _676;
                        float _3214 = sqrt(1.0 - ((1.0 - (_3207 * _3207)) * (1.0 - (_3206 * _3206))));
                        float _3215 = _3214 * _3214;
                        float _3216 = _3215 * _3215;
                        float _3217 = _3197 + _3162;
                        float _3218 = _3198 + _3163;
                        float _3219 = _3199 + _3164;
                        float _3223 = inversesqrt(dot(vec3(_3217, _3218, _3219), vec3(_3217, _3218, _3219)));
                        float _3227 = dot(vec3(_601, _604, _607), vec3(_3197, _3198, _3199));
                        float _4594 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                        float _3230 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
                        float _3231 = dot(vec3(_601, _604, _607), vec3(_3223 * _3217, _3223 * _3218, _3223 * _3219));
                        float _4605 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                        float _3234 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
                        float _3238 = ((_3234 * _3234) * (_3216 + (-1.0))) + 1.0;
                        float _3239 = _3175 * _3215;
                        float _3240 = _3239 * _3239;
                        float _3243 = ((1.0 - _3240) * _3165) + _3240;
                        float _4616 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                        float _3244 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
                        float _3245 = 1.0 - _3215;
                        float _3255 = (0.5 / (((_3244 * ((_3230 * _3245) + _3215)) + 9.9999999392252902907785028219223e-09) + (((_3244 * _3245) + _3215) * _3230))) * _3244;
                        float _4627 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                        float _3266 = (((_3216 * 3.1415927410125732421875) * (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0)))) / ((_3238 * _3238) * ((_3182 * 2.1991131305694580078125) + 3.141590118408203125))) * _3171;
                        _3019 = (_3186 * _3134.x) + _3092;
                        _3020 = (_3186 * _3134.y) + _3093;
                        _3021 = (_3186 * _3134.z) + _3094;
                        _3016 = (_3266 * _3151.x) + _3089;
                        _3017 = (_3266 * _3151.y) + _3090;
                        _3018 = (_3266 * _3151.z) + _3091;
                        if (_3096 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3089 = _3016;
                            _3090 = _3017;
                            _3091 = _3018;
                            _3092 = _3019;
                            _3093 = _3020;
                            _3094 = _3021;
                            _3095 = _3096;
                        }
                    }
                    frontier_phi_71_pred = _3021;
                    frontier_phi_71_pred_1 = _3020;
                    frontier_phi_71_pred_2 = _3019;
                    frontier_phi_71_pred_3 = _3018;
                    frontier_phi_71_pred_4 = _3017;
                    frontier_phi_71_pred_5 = _3016;
                }
                _2802 = frontier_phi_71_pred;
                _2800 = frontier_phi_71_pred_1;
                _2798 = frontier_phi_71_pred_2;
                _2796 = frontier_phi_71_pred_3;
                _2794 = frontier_phi_71_pred_4;
                _2792 = frontier_phi_71_pred_5;
                uint _2951 = _2950 + 1u;
                if (_2951 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2944 = _2792;
                    _2945 = _2794;
                    _2946 = _2796;
                    _2947 = _2798;
                    _2948 = _2800;
                    _2949 = _2802;
                    _2950 = _2951;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2791 = _2792;
            _2793 = _2794;
            _2795 = _2796;
            _2797 = _2798;
            _2799 = _2800;
            _2801 = _2802;
        }
        uvec4 _2805 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2806 = _2805.z;
        uint _2808 = (_2806 >> 8u) & 15u;
        float _2912;
        float _2914;
        float _2916;
        float _2918;
        float _2920;
        float _2922;
        if (((4294967295u << _2808) & _2711) == 0u)
        {
            _2912 = _2791;
            _2914 = _2793;
            _2916 = _2795;
            _2918 = _2797;
            _2920 = _2799;
            _2922 = _2801;
        }
        else
        {
            float _2937 = inversesqrt(dot(vec3(_1769, _1770, _1771), vec3(_1769, _1770, _1771)));
            float _2938 = _2937 * _1769;
            float _2939 = _2937 * _1770;
            float _2940 = _2937 * _1771;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2808 < ((_2806 >> 12u) & 15u))
            {
                float _2913;
                float _2915;
                float _2917;
                float _2919;
                float _2921;
                float _2923;
                float _3072 = _2791;
                float _3073 = _2793;
                float _3074 = _2795;
                float _3075 = _2797;
                float _3076 = _2799;
                float _3077 = _2801;
                uint _3078 = _2808;
                uint _3087;
                bool _3088;
                for (;;)
                {
                    _3087 = texelFetch(g_lightClassification, int((((_2705 << 5u) + (_2691 << 9u)) + (_3078 << 2u)) >> 2u)).x;
                    _3088 = _3087 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3088)
                    {
                        frontier_phi_82_pred = _3077;
                        frontier_phi_82_pred_1 = _3076;
                        frontier_phi_82_pred_2 = _3075;
                        frontier_phi_82_pred_3 = _3074;
                        frontier_phi_82_pred_4 = _3073;
                        frontier_phi_82_pred_5 = _3072;
                    }
                    else
                    {
                        float _3280;
                        float _3281;
                        float _3282;
                        float _3283;
                        float _3284;
                        float _3285;
                        float _3574;
                        float _3575;
                        float _3576;
                        float _3577;
                        float _3578;
                        float _3579;
                        float _3293 = _3072;
                        float _3294 = _3073;
                        float _3295 = _3074;
                        float _3296 = _3075;
                        float _3297 = _3076;
                        float _3298 = _3077;
                        uint _3299 = _3087;
                        uint _3300;
                        vec4 _3325;
                        float _3326;
                        vec4 _3341;
                        vec3 _3353;
                        vec4 _3369;
                        vec4 _3384;
                        float _3430;
                        bool _3431;
                        for (;;)
                        {
                            uint _3310 = ((_3078 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3299));
                            _3300 = (_3299 + 4294967295u) & _3299;
                            uint _3312 = _3310 * 40u;
                            _3325 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3312)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 3u)).x));
                            _3326 = _3325.w;
                            uint _3328 = (_3310 * 40u) + 4u;
                            _3341 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3328)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 3u)).x));
                            uint _3343 = (_3310 * 40u) + 8u;
                            _3353 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x));
                            uint _3356 = (_3310 * 40u) + 16u;
                            _3369 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 3u)).x));
                            uint _3371 = (_3310 * 40u) + 20u;
                            _3384 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3371)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 3u)).x));
                            uint _3386 = (_3310 * 40u) + 24u;
                            vec4 _3399 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3386)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 3u)).x));
                            uint _3405 = (_3310 * 40u) + 28u;
                            vec4 _3418 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3405)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 3u)).x));
                            _3430 = fma(_1771, _3418.z, fma(_1770, _3418.y, _3418.x * _1769)) + _3418.w;
                            _3431 = !((fma(_1771, _3399.z, fma(_1770, _3399.y, _3399.x * _1769)) + _3399.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3431)
                            {
                                float _3458 = _3325.x - _1769;
                                float _3459 = _3325.y - _1770;
                                float _3460 = _3325.z - _1771;
                                float _3461 = dot(vec3(_3458, _3459, _3460), vec3(_3458, _3459, _3460));
                                float _3464 = inversesqrt(_3461);
                                float _3465 = _3464 * _3458;
                                float _3466 = _3464 * _3459;
                                float _3467 = _3464 * _3460;
                                float _3471 = 1.0 - (_3461 / (_3326 * _3326));
                                float _4638 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3472 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
                                float _3476 = sqrt(_3461) * _3341.w;
                                float _3478 = 1.39999997615814208984375 / (_3476 + 1.39999997615814208984375);
                                float _3479 = _3478 * _3478;
                                float _3482 = ((1.0 - _3479) * dot(vec3(_3465, _3466, _3467), vec3(_601, _604, _607))) + _3479;
                                float _3485 = _3476 * _3476;
                                float _3489 = (fma(_1771, _3369.z, fma(_1770, _3369.y, _3369.x * _1769)) + _3369.w) / _3430;
                                float _3490 = (fma(_1771, _3384.z, fma(_1770, _3384.y, _3384.x * _1769)) + _3384.w) / _3430;
                                float _3494 = 1.0 - dot(vec2(_3489, _3490), vec2(_3489, _3490));
                                float _4654 = isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0));
                                float _3495 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
                                float _3496 = _3495 * (((isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0))) * _3472) / ((_3485 * 0.699999988079071044921875) + 1.0));
                                float _3508 = exp2(log2(1.0 / ((_3485 * 3.5) + 5.0)) * 0.25);
                                float _3509 = 1.0 - _676;
                                float _3516 = sqrt(1.0 - ((1.0 - (_3509 * _3509)) * (1.0 - (_3508 * _3508))));
                                float _3517 = _3516 * _3516;
                                float _3518 = _3517 * _3517;
                                float _3519 = _3465 - _2938;
                                float _3520 = _3466 - _2939;
                                float _3521 = _3467 - _2940;
                                float _3525 = inversesqrt(dot(vec3(_3519, _3520, _3521), vec3(_3519, _3520, _3521)));
                                float _3529 = dot(vec3(_601, _604, _607), vec3((-0.0) - _2938, (-0.0) - _2939, (-0.0) - _2940));
                                float _4665 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                                float _3532 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
                                float _3533 = dot(vec3(_601, _604, _607), vec3(_3525 * _3519, _3525 * _3520, _3525 * _3521));
                                float _4676 = isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0));
                                float _3536 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
                                float _3540 = ((_3536 * _3536) * (_3518 + (-1.0))) + 1.0;
                                float _3541 = _3478 * _3517;
                                float _3542 = _3541 * _3541;
                                float _3548 = ((1.0 - _3542) * dot(vec3(_601, _604, _607), vec3(_3465, _3466, _3467))) + _3542;
                                float _4687 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                                float _3549 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
                                float _3550 = 1.0 - _3517;
                                float _3560 = (0.5 / (((_3549 * ((_3532 * _3550) + _3517)) + 9.9999999392252902907785028219223e-09) + (((_3549 * _3550) + _3517) * _3532))) * _3549;
                                float _4698 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                                float _3570 = (_3495 * _3472) * (((_3518 * 3.1415927410125732421875) * (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0)))) / ((_3540 * _3540) * ((_3485 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3496 * _3341.z;
                                frontier_phi_88_pred_1 = _3496 * _3341.y;
                                frontier_phi_88_pred_2 = _3496 * _3341.x;
                                frontier_phi_88_pred_3 = _3570 * _3353.z;
                                frontier_phi_88_pred_4 = _3570 * _3353.y;
                                frontier_phi_88_pred_5 = _3570 * _3353.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3579 = frontier_phi_88_pred;
                            _3578 = frontier_phi_88_pred_1;
                            _3577 = frontier_phi_88_pred_2;
                            _3576 = frontier_phi_88_pred_3;
                            _3575 = frontier_phi_88_pred_4;
                            _3574 = frontier_phi_88_pred_5;
                            _3283 = _3577 + _3296;
                            _3284 = _3578 + _3297;
                            _3285 = _3579 + _3298;
                            _3280 = _3574 + _3293;
                            _3281 = _3575 + _3294;
                            _3282 = _3576 + _3295;
                            if (_3300 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3293 = _3280;
                                _3294 = _3281;
                                _3295 = _3282;
                                _3296 = _3283;
                                _3297 = _3284;
                                _3298 = _3285;
                                _3299 = _3300;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3285;
                        frontier_phi_82_pred_1 = _3284;
                        frontier_phi_82_pred_2 = _3283;
                        frontier_phi_82_pred_3 = _3282;
                        frontier_phi_82_pred_4 = _3281;
                        frontier_phi_82_pred_5 = _3280;
                    }
                    _2923 = frontier_phi_82_pred;
                    _2921 = frontier_phi_82_pred_1;
                    _2919 = frontier_phi_82_pred_2;
                    _2917 = frontier_phi_82_pred_3;
                    _2915 = frontier_phi_82_pred_4;
                    _2913 = frontier_phi_82_pred_5;
                    uint _3079 = _3078 + 1u;
                    if (_3079 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3072 = _2913;
                        _3073 = _2915;
                        _3074 = _2917;
                        _3075 = _2919;
                        _3076 = _2921;
                        _3077 = _2923;
                        _3078 = _3079;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2919;
                frontier_phi_63_64_ladder_1 = _2923;
                frontier_phi_63_64_ladder_2 = _2921;
                frontier_phi_63_64_ladder_3 = _2917;
                frontier_phi_63_64_ladder_4 = _2915;
                frontier_phi_63_64_ladder_5 = _2913;
            }
            else
            {
                frontier_phi_63_64_ladder = _2797;
                frontier_phi_63_64_ladder_1 = _2801;
                frontier_phi_63_64_ladder_2 = _2799;
                frontier_phi_63_64_ladder_3 = _2795;
                frontier_phi_63_64_ladder_4 = _2793;
                frontier_phi_63_64_ladder_5 = _2791;
            }
            _2912 = frontier_phi_63_64_ladder_5;
            _2914 = frontier_phi_63_64_ladder_4;
            _2916 = frontier_phi_63_64_ladder_3;
            _2918 = frontier_phi_63_64_ladder;
            _2920 = frontier_phi_63_64_ladder_2;
            _2922 = frontier_phi_63_64_ladder_1;
        }
        float _2927 = isnan(1.0) ? _660 : (isnan(_660) ? 1.0 : min(_660, 1.0));
        _2724 = (_2927 * _2918) + _2236;
        _2726 = (_2927 * _2920) + _2238;
        _2728 = (_2927 * _2922) + _2240;
        _2730 = ((_2912 * _644) * _2927) + _2574;
        _2732 = ((_2914 * _646) * _2927) + _2576;
        _2734 = ((_2916 * _647) * _2927) + _2578;
    }
    else
    {
        _2724 = _2236;
        _2726 = _2238;
        _2728 = _2240;
        _2730 = _2574;
        _2732 = _2576;
        _2734 = _2578;
    }
    float _4714 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _4725 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _4736 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _2751 = ((isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0))) * (_2724 + ((isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0))) * _660))) + ((_2730 + ((isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))) * _1500)) * cbPerFrame._m0[3u].x);
    float _2752 = ((isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0))) * (_2726 + ((isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0))) * _660))) + ((_2732 + ((isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))) * _1500)) * cbPerFrame._m0[3u].x);
    float _2753 = ((isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0))) * (_2728 + ((isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0))) * _660))) + ((_2734 + ((isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))) * _1500)) * cbPerFrame._m0[3u].x);
    uint _2754 = _234 + 6u;
    float _2762 = _580 / cbSceneParam._m0[86u].x;
    float _2763 = _581 / cbSceneParam._m0[86u].y;
    vec4 _2777 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2762, _2763, (log2((isnan(cbSceneParam._m0[77u].w) ? _501 : (isnan(_501) ? cbSceneParam._m0[77u].w : min(_501, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2779 = _2777.x;
    float _2780 = _2777.y;
    float _2781 = _2777.z;
    float _2782 = _2777.w;
    float _2854;
    float _2856;
    float _2858;
    float _2860;
    if (_501 > cbSceneParam._m0[78u].w)
    {
        float _2816 = isnan(_501) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _501 : min(cbSceneParam._m0[80u].w, _501));
        float _2817 = _2816 / _501;
        float _2828 = _2817 * _552;
        float _2829 = _553 * _2817;
        float _2830 = (-0.0) - _2829;
        float _2832 = _2817 * _554;
        float _2834 = (cbSceneParam._m0[77u].w * _2830) / _2816;
        float _2835 = _2834 + cbSceneParam._m0[79u].w;
        float _2836 = cbSceneParam._m0[79u].w - _2829;
        float _2842 = sqrt(((_2828 * _2828) + (_2829 * _2829)) + (_2832 * _2832));
        float _2845 = (1.0 - (cbSceneParam._m0[77u].w / _2816)) * _2842;
        float _2850 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2852 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3029;
        if (abs((_2830 - _2834) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3029 = ((((_2835 > 0.0) ? exp2(_2850 * _2835) : (2.0 - exp2(_2852 * _2835))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2845;
        }
        else
        {
            float _2973 = 1.0 / cbSceneParam._m0[80u].x;
            float _2974 = isnan(_2836) ? _2835 : (isnan(_2835) ? _2836 : max(_2835, _2836));
            float _2975 = isnan(_2836) ? _2835 : (isnan(_2835) ? _2836 : min(_2835, _2836));
            float _2984 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : min(_2974, 0.0));
            float _2985 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : min(_2975, 0.0));
            _3029 = ((abs(_2842 / _2830) * cbSceneParam._m0[80u].y) * ((((_2984 - _2985) * 2.0) - ((exp2(_2850 * (isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0)))) - exp2(_2850 * (isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0))))) * _2973)) - ((exp2(_2852 * _2984) - exp2(_2852 * _2985)) * _2973))) + (_2845 * cbSceneParam._m0[80u].z);
        }
        vec4 _3031 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2762, _2763, 1.0), 0.0);
        float _3040 = exp2((_3029 * (-1.44269502162933349609375)) * (1.0 - _3031.w));
        float _3041 = log2(_3040);
        float _3057 = log2(_2782);
        _2854 = (exp2(_3057 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3041 * cbSceneParam._m0[78u].x)) * _3031.x) / cbSceneParam._m0[78u].x)) + _2779;
        _2856 = (exp2(_3057 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3041 * cbSceneParam._m0[78u].y)) * _3031.y) / cbSceneParam._m0[78u].y)) + _2780;
        _2858 = (exp2(_3057 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3041 * cbSceneParam._m0[78u].z)) * _3031.z) / cbSceneParam._m0[78u].z)) + _2781;
        _2860 = _3040 * _2782;
    }
    else
    {
        _2854 = _2779;
        _2856 = _2780;
        _2858 = _2781;
        _2860 = _2782;
    }
    bool _3067;
    vec4 _2870;
    vec4 _2892;
    float _2894;
    float _2898;
    float _2899;
    float _2900;
    float _2901;
    bool _2911;
    for (;;)
    {
        _2870 = cbMatDynParam._m0[0u];
        float _2872 = roundEven(_2870.y);
        bool _2873 = _2872 == 3.0;
        float _2874 = log2(_2860);
        float _2881 = exp2(_2874 * cbSceneParam._m0[78u].x) * _2751;
        float _2882 = exp2(_2874 * cbSceneParam._m0[78u].y) * _2752;
        float _2883 = exp2(_2874 * cbSceneParam._m0[78u].z) * _2753;
        float _2890 = _568 + (-0.5);
        _2892 = cbMtdParam._m0[1u];
        _2894 = _2892.y * _2890;
        float _2897 = (_2872 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2898 = _2897 * (_2873 ? _2881 : (_2881 + (cbSceneParam._m0[72u].w * _2854)));
        _2899 = _2897 * (_2873 ? _2882 : (_2882 + (cbSceneParam._m0[72u].w * _2856)));
        _2900 = _2897 * (_2873 ? _2883 : (_2883 + (cbSceneParam._m0[72u].w * _2858)));
        _2901 = _2890 * 0.999000012874603271484375;
        _2911 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2911)
        {
            if ((cbInstanceData._m0[_234 + 7u].x + _2901) < 0.5)
            {
                _3067 = true;
                break;
            }
        }
        uint _3008 = _620 + uint(_2870.w);
        if ((cbInstanceData._m0[_3008].w < 1.0) && ((cbInstanceData._m0[_3008].w + _2901) < 0.5))
        {
            _3067 = true;
            break;
        }
        if ((_2894 + 1.0) < _2892.x)
        {
            _3067 = true;
            break;
        }
        _3067 = false;
        break;
    }
    float _3271;
    if (_3067)
    {
        discard_state = true;
        _3271 = 0.0;
    }
    else
    {
        _3271 = cbInstanceData._m0[_2754].w;
    }
    SV_Target.x = _2898;
    SV_Target.y = _2899;
    SV_Target.z = _2900;
    SV_Target.w = _3271;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2754].w;
    discard_exit();
}


