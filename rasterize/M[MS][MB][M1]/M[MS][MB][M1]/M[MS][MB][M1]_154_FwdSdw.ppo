#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1232;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _221 = _220 * _212;
    float _222 = _220 * _213;
    float _223 = _220 * _214;
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = _227 * NORMAL.x;
    float _229 = _227 * NORMAL.y;
    float _230 = _227 * NORMAL.z;
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _235 = _234 * TANGENT.x;
    float _236 = _234 * TANGENT.y;
    float _237 = _234 * TANGENT.z;
    uint _240 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _240 + 1u;
    uint _250 = _240 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _281 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _287 = _281.x * cbMtdParam._m0[11u].x;
    float _288 = _281.y * cbMtdParam._m0[11u].y;
    float _289 = _281.z * cbMtdParam._m0[11u].z;
    vec4 _308 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _346 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _348 = _346.x;
    float _360 = dot(vec4(_348, _346.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _377 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_348 - _360) * cbMtdParam._m0[24u].y) + _360) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3841 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _378 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
    float _385 = (_378 * ((_308.x * cbMtdParam._m0[12u].x) - _287)) + _287;
    float _386 = (_378 * ((_308.y * cbMtdParam._m0[12u].y) - _288)) + _288;
    float _387 = (_378 * ((_308.z * cbMtdParam._m0[12u].z) - _289)) + _289;
    vec4 _406 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _260) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _261) + cbTextureTilingScale._m0[14u].w));
    vec4 _426 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _443 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _445 = _443.x;
    float _446 = _443.y;
    float _447 = _443.z;
    float _456 = ((_426.z - _447) * _378) + _447;
    float _459 = ((((_426.x - _445) * _378) + _445) * 2.0) + (-1.0);
    float _461 = ((((_426.y - _446) * _378) + _446) * 2.0) + (-1.0);
    float _462 = dot(vec2(_459, _461), vec2(_459, _461));
    float _3852 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _467 = sqrt(1.0 - (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))));
    vec4 _483 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _495 = (((_483.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _459;
    float _496 = (((_483.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _461;
    float _499 = fma(_467, _228, fma(_496, _235, _495 * _221));
    float _502 = fma(_467, _229, fma(_496, _236, _495 * _222));
    float _505 = fma(_467, _230, fma(_496, _237, _495 * _223));
    float _509 = inversesqrt(dot(vec3(_499, _502, _505), vec3(_499, _502, _505)));
    vec4 _536 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _538 = _536.x;
    float _539 = 1.0 - _538;
    float _543 = ((_538 - _539) * cbMtdParam._m0[24u].z) + _539;
    float _545 = (cbMtdParam._m0[19u].x + dot(vec4(_509 * _499, _509 * _502, _509 * _505, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_543 * cbMtdParam._m0[21u].z);
    float _3863 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _546 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _561 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_543 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3874 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _562 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _566 = ((_546 * ((_406.x * cbMtdParam._m0[18u].x) - _385)) * _562) + _385;
    float _567 = ((_546 * ((_406.y * cbMtdParam._m0[18u].y) - _386)) * _562) + _386;
    float _568 = ((_546 * ((_406.z * cbMtdParam._m0[18u].z) - _387)) * _562) + _387;
    vec4 _580 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _594 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _596 = _594.x;
    float _614 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _260) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _261) + cbTextureTilingScale._m0[9u].w)).x - _596) * _378) + _596;
    float _618 = ((_580.x - _614) * cbMtdParam._m0[19u].z) + _614;
    float _621 = _618 - ((_562 * _546) * _618);
    float _625 = (cbMtdParam._m0[19u].w * (_483.z - _456)) + _456;
    vec4 _638 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _645 = (_638.x * 2.0) + (-1.0);
    float _646 = (_638.y * 2.0) + (-1.0);
    float _647 = dot(vec2(_645, _646), vec2(_645, _646));
    float _3885 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _656 = (((_638.z - _625) * _546) * _562) + _625;
    float _671 = (((cbMtdParam._m0[21u].x * _495) + ((_645 - _495) * _546)) * _562) + _495;
    float _672 = (((cbMtdParam._m0[21u].x * _496) + ((_646 - _496) * _546)) * _562) + _496;
    float _673 = (((sqrt(1.0 - (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) - _467) * _546) * _562) + _467;
    float _678 = cbMtdParam._m0[22u].x + _483.w;
    float _681 = fma(_673, _228, fma(_672, _235, _671 * _221));
    float _684 = fma(_673, _229, fma(_672, _236, _671 * _222));
    float _687 = fma(_673, _230, fma(_672, _237, _671 * _223));
    float _691 = inversesqrt(dot(vec3(_681, _684, _687), vec3(_681, _684, _687)));
    float _692 = _691 * _681;
    float _693 = _691 * _684;
    float _694 = _691 * _687;
    float _3896 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _695 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _3907 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _3918 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _3929 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _3940 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _3951 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _700 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _714 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _755 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _765 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _755);
    float _766 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _755);
    float _767 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _755);
    float _771 = inversesqrt(dot(vec3(_765, _766, _767), vec3(_765, _766, _767)));
    float _772 = _765 * _771;
    float _773 = _766 * _771;
    float _774 = _767 * _771;
    float _780 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _781 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _799 = fma(_694, cbSceneParam._m0[5u].z, fma(_693, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _692));
    float _802 = fma(_694, cbSceneParam._m0[6u].z, fma(_693, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _692));
    float _805 = fma(_694, cbSceneParam._m0[7u].z, fma(_693, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _692));
    uint _819 = (_240 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _825 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) * cbInstanceData._m0[_819].x;
    float _826 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)))) * cbInstanceData._m0[_819].y;
    float _827 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0)))) * cbInstanceData._m0[_819].z;
    float _3962 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _828 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _3973 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _829 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _3984 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _830 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _831 = 1.0 - _700;
    float _832 = _828 * _831;
    float _833 = _829 * _831;
    float _834 = _830 * _831;
    float _839 = (_828 + (-0.039999999105930328369140625)) * _700;
    float _840 = (_829 + (-0.039999999105930328369140625)) * _700;
    float _841 = (_830 + (-0.039999999105930328369140625)) * _700;
    float _842 = _839 + 0.039999999105930328369140625;
    float _844 = _840 + 0.039999999105930328369140625;
    float _845 = _841 + 0.039999999105930328369140625;
    vec4 _854 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _780, cbSceneParam._m0[86u].y * _781));
    float _858 = ((isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * TEXCOORD_5.w) * _854.x;
    float _859 = dot(vec3(_692, _693, _694), vec3(_772, _773, _774));
    float _862 = _859 * 2.0;
    float _866 = (_862 * _692) - _772;
    float _867 = (_862 * _693) - _773;
    float _868 = (_862 * _694) - _774;
    float _872 = abs(dot(vec3(_772, _773, _774), vec3(_692, _693, _694)));
    float _3995 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _874 = sqrt(_695);
    float _887 = exp2((_874 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_874 * 3.0));
    float _893 = (1.0 - _887) * ((_874 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _894 = _887 * _874;
    float _922 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _926 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _930 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1231;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _956 = fma(_930, cbModelParam._m0[26u].z, fma(_926, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _922));
        float _960 = fma(_930, cbModelParam._m0[27u].z, fma(_926, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _922));
        float _964 = fma(_930, cbModelParam._m0[28u].z, fma(_926, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _922));
        float _989 = _922 + _692;
        float _990 = _926 + _693;
        float _991 = _930 + _694;
        float _1001 = fma(_991, cbModelParam._m0[26u].z, fma(_990, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _989)) - _956;
        float _1002 = fma(_991, cbModelParam._m0[27u].z, fma(_990, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _989)) - _960;
        float _1003 = fma(_991, cbModelParam._m0[28u].z, fma(_990, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _989)) - _964;
        float _1007 = inversesqrt(dot(vec3(_1001, _1002, _1003), vec3(_1001, _1002, _1003)));
        float _1020 = ((_1007 * _1001) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_956 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1021 = ((_1007 * _1002) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_960 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1022 = ((_1007 * _1003) / cbModelParam._m0[34u].z) + ((((((_964 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1020, _1021, _1022), 0.0);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1020, _1021, _1022), 0.0);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1020, _1021, _1022), 0.0);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1020, _1021, _1022), 0.0);
        float _1059 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1060 = _1059 * (_1025.x + (-0.5));
        float _1061 = _1059 * (_1025.y + (-0.5));
        float _1062 = _1059 * (_1025.z + (-0.5));
        float _1069 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1070 = _1069 * (_1032.x + (-0.5));
        float _1071 = _1069 * (_1032.y + (-0.5));
        float _1072 = _1069 * (_1032.z + (-0.5));
        float _1079 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1080 = _1079 * (_1039.x + (-0.5));
        float _1081 = _1079 * (_1039.y + (-0.5));
        float _1082 = _1079 * (_1039.z + (-0.5));
        float _1089 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1046.x + (-0.5));
        float _1091 = _1089 * (_1046.y + (-0.5));
        float _1092 = _1089 * (_1046.z + (-0.5));
        float _1093 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1094 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1095 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1096 = _1060 * 0.5;
        float _1097 = _1070 * 0.5;
        float _1098 = _1080 * 0.5;
        float _1099 = dot(vec3(_1096, _1097, _1098), vec3(_1096, _1097, _1098));
        float _1104 = (_1099 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1099);
        float _1113 = (dot(vec3(_692, _693, _694), vec3(_1104 * _1096, _1104 * _1097, _1104 * _1098)) + 1.0) * 0.5;
        float _4021 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1123 = sqrt(((_1097 * _1097) + (_1096 * _1096)) + (_1098 * _1098)) / (_1093 + 9.9999997473787516355514526367188e-06);
        float _4032 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1125 = _1124 * 2.0;
        float _1129 = (1.0 - _1124) / (_1124 + 1.0);
        float _4043 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1139 = ((((1.0 - _1130) * (_1125 + 2.0)) * exp2(log2(isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_1125 + 1.0))) + _1130) * _1093;
        float _1140 = _1061 * 0.5;
        float _1141 = _1071 * 0.5;
        float _1142 = _1081 * 0.5;
        float _1143 = dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142));
        float _1148 = (_1143 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1143);
        float _1156 = (dot(vec3(_692, _693, _694), vec3(_1148 * _1140, _1148 * _1141, _1148 * _1142)) + 1.0) * 0.5;
        float _4054 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1165 = sqrt(((_1141 * _1141) + (_1140 * _1140)) + (_1142 * _1142)) / (_1094 + 9.9999997473787516355514526367188e-06);
        float _4065 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1167 = _1166 * 2.0;
        float _1171 = (1.0 - _1166) / (_1166 + 1.0);
        float _4076 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1181 = ((((1.0 - _1172) * (_1167 + 2.0)) * exp2(log2(isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_1167 + 1.0))) + _1172) * _1094;
        float _1182 = _1062 * 0.5;
        float _1183 = _1072 * 0.5;
        float _1184 = _1082 * 0.5;
        float _1185 = dot(vec3(_1182, _1183, _1184), vec3(_1182, _1183, _1184));
        float _1190 = (_1185 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1185);
        float _1198 = (dot(vec3(_692, _693, _694), vec3(_1190 * _1182, _1190 * _1183, _1190 * _1184)) + 1.0) * 0.5;
        float _4087 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1207 = sqrt(((_1183 * _1183) + (_1182 * _1182)) + (_1184 * _1184)) / (_1095 + 9.9999997473787516355514526367188e-06);
        float _4098 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1209 = _1208 * 2.0;
        float _1213 = (1.0 - _1208) / (_1208 + 1.0);
        float _4109 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1223 = ((((1.0 - _1214) * (_1209 + 2.0)) * exp2(log2(isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_1209 + 1.0))) + _1214) * _1095;
        _1231 = _1062;
        _1233 = _1061;
        _1234 = _1060;
        _1235 = _1072;
        _1236 = _1071;
        _1237 = _1070;
        _1238 = _1082;
        _1239 = _1081;
        _1240 = _1080;
        _1241 = _1095;
        _1242 = _1094;
        _1243 = _1093;
        _1244 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0)));
        _1245 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0)));
        _1246 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)));
    }
    else
    {
        _1231 = _1232;
        _1233 = _1232;
        _1234 = _1232;
        _1235 = _1232;
        _1236 = _1232;
        _1237 = _1232;
        _1238 = _1232;
        _1239 = _1232;
        _1240 = _1232;
        _1241 = _1232;
        _1242 = _1232;
        _1243 = _1232;
        _1244 = 0.0;
        _1245 = 0.0;
        _1246 = 0.0;
    }
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1271 = fma(_930, cbModelParam._m0[30u].z, fma(_926, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _922));
        float _1275 = fma(_930, cbModelParam._m0[31u].z, fma(_926, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _922));
        float _1279 = fma(_930, cbModelParam._m0[32u].z, fma(_926, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _922));
        float _1302 = _922 + _692;
        float _1303 = _926 + _693;
        float _1304 = _930 + _694;
        float _1314 = fma(_1304, cbModelParam._m0[30u].z, fma(_1303, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1302)) - _1271;
        float _1315 = fma(_1304, cbModelParam._m0[31u].z, fma(_1303, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1302)) - _1275;
        float _1316 = fma(_1304, cbModelParam._m0[32u].z, fma(_1303, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1302)) - _1279;
        float _1320 = inversesqrt(dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316)));
        float _1333 = ((_1320 * _1314) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1271 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1334 = ((_1320 * _1315) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1275 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1335 = ((_1320 * _1316) / cbModelParam._m0[35u].z) + ((((((_1279 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1337 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1333, _1334, _1335), 0.0);
        vec4 _1344 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1333, _1334, _1335), 0.0);
        vec4 _1351 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1333, _1334, _1335), 0.0);
        vec4 _1358 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1333, _1334, _1335), 0.0);
        float _1370 = exp2((_1337.w + (-0.5)) * 20.0) * 2.0;
        float _1371 = _1370 * (_1337.x + (-0.5));
        float _1372 = _1370 * (_1337.y + (-0.5));
        float _1373 = _1370 * (_1337.z + (-0.5));
        float _1380 = exp2((_1344.w + (-0.5)) * 20.0) * 2.0;
        float _1381 = _1380 * (_1344.x + (-0.5));
        float _1382 = _1380 * (_1344.y + (-0.5));
        float _1383 = _1380 * (_1344.z + (-0.5));
        float _1390 = exp2((_1351.w + (-0.5)) * 20.0) * 2.0;
        float _1391 = _1390 * (_1351.x + (-0.5));
        float _1392 = _1390 * (_1351.y + (-0.5));
        float _1393 = _1390 * (_1351.z + (-0.5));
        float _1400 = exp2((_1358.w + (-0.5)) * 20.0) * 2.0;
        float _1401 = _1400 * (_1358.x + (-0.5));
        float _1402 = _1400 * (_1358.y + (-0.5));
        float _1403 = _1400 * (_1358.z + (-0.5));
        float _1404 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1405 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1406 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1407 = _1371 * 0.5;
        float _1408 = _1381 * 0.5;
        float _1409 = _1391 * 0.5;
        float _1410 = dot(vec3(_1407, _1408, _1409), vec3(_1407, _1408, _1409));
        float _1415 = (_1410 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1410);
        float _1423 = (dot(vec3(_692, _693, _694), vec3(_1415 * _1407, _1415 * _1408, _1415 * _1409)) + 1.0) * 0.5;
        float _4150 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1432 = sqrt(((_1408 * _1408) + (_1407 * _1407)) + (_1409 * _1409)) / (_1404 + 9.9999997473787516355514526367188e-06);
        float _4161 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1434 = _1433 * 2.0;
        float _1438 = (1.0 - _1433) / (_1433 + 1.0);
        float _4172 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1448 = ((((1.0 - _1439) * (_1434 + 2.0)) * exp2(log2(isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_1434 + 1.0))) + _1439) * _1404;
        float _1449 = _1372 * 0.5;
        float _1450 = _1382 * 0.5;
        float _1451 = _1392 * 0.5;
        float _1452 = dot(vec3(_1449, _1450, _1451), vec3(_1449, _1450, _1451));
        float _1457 = (_1452 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1452);
        float _1465 = (dot(vec3(_692, _693, _694), vec3(_1457 * _1449, _1457 * _1450, _1457 * _1451)) + 1.0) * 0.5;
        float _4183 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1474 = sqrt(((_1450 * _1450) + (_1449 * _1449)) + (_1451 * _1451)) / (_1405 + 9.9999997473787516355514526367188e-06);
        float _4194 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1476 = _1475 * 2.0;
        float _1480 = (1.0 - _1475) / (_1475 + 1.0);
        float _4205 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1490 = ((((1.0 - _1481) * (_1476 + 2.0)) * exp2(log2(isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_1476 + 1.0))) + _1481) * _1405;
        float _1491 = _1373 * 0.5;
        float _1492 = _1383 * 0.5;
        float _1493 = _1393 * 0.5;
        float _1494 = dot(vec3(_1491, _1492, _1493), vec3(_1491, _1492, _1493));
        float _1499 = (_1494 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1494);
        float _1507 = (dot(vec3(_692, _693, _694), vec3(_1499 * _1491, _1499 * _1492, _1499 * _1493)) + 1.0) * 0.5;
        float _4216 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1516 = sqrt(((_1492 * _1492) + (_1491 * _1491)) + (_1493 * _1493)) / (_1406 + 9.9999997473787516355514526367188e-06);
        float _4227 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1517 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1518 = _1517 * 2.0;
        float _1522 = (1.0 - _1517) / (_1517 + 1.0);
        float _4238 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _1532 = ((((1.0 - _1523) * (_1518 + 2.0)) * exp2(log2(isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_1518 + 1.0))) + _1523) * _1406;
        _1540 = _1373;
        _1541 = _1372;
        _1542 = _1371;
        _1543 = _1383;
        _1544 = _1382;
        _1545 = _1381;
        _1546 = _1393;
        _1547 = _1392;
        _1548 = _1391;
        _1549 = _1406;
        _1550 = _1405;
        _1551 = _1404;
        _1552 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)));
        _1553 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)));
        _1554 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)));
    }
    else
    {
        _1540 = _1232;
        _1541 = _1232;
        _1542 = _1232;
        _1543 = _1232;
        _1544 = _1232;
        _1545 = _1232;
        _1546 = _1232;
        _1547 = _1232;
        _1548 = _1232;
        _1549 = _1232;
        _1550 = _1232;
        _1551 = _1232;
        _1552 = 0.0;
        _1553 = 0.0;
        _1554 = 0.0;
    }
    float _1564 = (cbModelParam._m0[1u].x * (_1552 - _1244)) + _1244;
    float _1565 = (cbModelParam._m0[1u].x * (_1553 - _1245)) + _1245;
    float _1566 = (cbModelParam._m0[1u].x * (_1554 - _1246)) + _1246;
    float _1587 = fma(_1566, cbSceneParam._m0[89u].z, fma(_1565, cbSceneParam._m0[89u].y, _1564 * cbSceneParam._m0[89u].x));
    float _1590 = fma(_1566, cbSceneParam._m0[90u].z, fma(_1565, cbSceneParam._m0[90u].y, _1564 * cbSceneParam._m0[90u].x));
    float _1593 = fma(_1566, cbSceneParam._m0[91u].z, fma(_1565, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1564));
    float _1608 = _866 * 0.5;
    float _1609 = _867 * 0.5;
    float _1610 = _868 * 0.5;
    float _1611 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1542, _1545, _1548, _1551));
    float _1614 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1541, _1544, _1547, _1550));
    float _1617 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1540, _1543, _1546, _1549));
    float _1651;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1624 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1231, _1235, _1238, _1241));
        float _1628 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1233, _1236, _1239, _1242));
        float _1632 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1234, _1237, _1240, _1243));
        float _1639 = dot(vec4(cbModelParam._m0[39u]), vec4(_1608, _1609, _1610, 1.0));
        _1651 = dot(vec3(isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0)), isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)), isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1639) ? 0.0 : (isnan(0.0) ? _1639 : max(0.0, _1639))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1651 = 1.0;
    }
    float _1662;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1653 = dot(vec4(cbModelParam._m0[40u]), vec4(_1608, _1609, _1610, 1.0));
        _1662 = dot(vec3(isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)), isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)), isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1653) ? 0.0 : (isnan(0.0) ? _1653 : max(0.0, _1653))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1662 = 1.0;
    }
    float _1666 = (_1662 * cbModelParam._m0[1u].x) + (_1651 * (1.0 - cbModelParam._m0[1u].x));
    float _1676 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _695);
    float _1677 = isnan(_1676) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1676 : min(cbModelParam._m0[25u].z, _1676));
    float _1757;
    float _1759;
    float _1761;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1724 = fma(_930, cbModelParam._m0[13u].z, fma(_926, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _922)) + cbModelParam._m0[13u].w;
        float _1728 = fma(_930, cbModelParam._m0[14u].z, fma(_926, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _922)) + cbModelParam._m0[14u].w;
        float _1732 = fma(_930, cbModelParam._m0[15u].z, fma(_926, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _922)) + cbModelParam._m0[15u].w;
        float _1735 = fma(_868, cbModelParam._m0[13u].z, fma(_867, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _866));
        float _1738 = fma(_868, cbModelParam._m0[14u].z, fma(_867, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _866));
        float _1741 = fma(_868, cbModelParam._m0[15u].z, fma(_867, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _866));
        float _1769;
        if (_1735 > 0.0)
        {
            _1769 = abs((1.0 - _1724) / _1735);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1735 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1724 + 1.0) / _1735);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1769 = frontier_phi_14_12_ladder;
        }
        float _1940;
        if (_1738 > 0.0)
        {
            _1940 = abs((1.0 - _1728) / _1738);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1738 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1728 + 1.0) / _1738);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1940 = frontier_phi_23_19_ladder;
        }
        float _2235;
        if (_1741 > 0.0)
        {
            _2235 = abs((1.0 - _1732) / _1741);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1741 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1732 + 1.0) / _1741);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2235 = frontier_phi_35_30_ladder;
        }
        float _2237 = isnan(_1940) ? _1769 : (isnan(_1769) ? _1940 : min(_1769, _1940));
        float _2238 = isnan(_2235) ? _2237 : (isnan(_2237) ? _2235 : min(_2237, _2235));
        float _2242 = (_2238 * _1735) + _1724;
        float _2243 = (_2238 * _1738) + _1728;
        float _2244 = (_2238 * _1741) + _1732;
        float _2245 = _2238 * 9.9999997473787516355514526367188e-05;
        float _2247 = (-1.0) - _2245;
        float _2249 = _2245 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2244 > _2249) || ((_2244 < _2247) || ((_2243 > _2249) || ((_2243 < _2247) || ((_2242 < _2247) || (_2242 > _2249))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2389 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2244, cbModelParam._m0[9u].z, fma(_2243, cbModelParam._m0[9u].y, _2242 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2244, cbModelParam._m0[10u].z, fma(_2243, cbModelParam._m0[10u].y, _2242 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2244, cbModelParam._m0[11u].z, fma(_2243, cbModelParam._m0[11u].y, _2242 * cbModelParam._m0[11u].x))), _1677);
            frontier_phi_13_35_ladder = _2389.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2389.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2389.x * cbModelParam._m0[1u].y;
        }
        _1757 = frontier_phi_13_35_ladder_2;
        _1759 = frontier_phi_13_35_ladder_1;
        _1761 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1745 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_866, _867, _868), _1677);
        _1757 = _1745.x * cbModelParam._m0[1u].y;
        _1759 = _1745.y * cbModelParam._m0[1u].y;
        _1761 = _1745.z * cbModelParam._m0[1u].y;
    }
    float _1765 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _695);
    float _1766 = isnan(_1765) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1765 : min(cbModelParam._m0[25u].w, _1765));
    float _1855;
    float _1857;
    float _1859;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1819 = fma(_930, cbModelParam._m0[21u].z, fma(_926, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _922)) + cbModelParam._m0[21u].w;
        float _1823 = fma(_930, cbModelParam._m0[22u].z, fma(_926, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _922)) + cbModelParam._m0[22u].w;
        float _1827 = fma(_930, cbModelParam._m0[23u].z, fma(_926, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _922)) + cbModelParam._m0[23u].w;
        float _1830 = fma(_868, cbModelParam._m0[21u].z, fma(_867, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _866));
        float _1833 = fma(_868, cbModelParam._m0[22u].z, fma(_867, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _866));
        float _1836 = fma(_868, cbModelParam._m0[23u].z, fma(_867, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _866));
        float _1945;
        if (_1830 > 0.0)
        {
            _1945 = abs((1.0 - _1819) / _1830);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1830 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1819 + 1.0) / _1830);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1945 = frontier_phi_25_21_ladder;
        }
        float _2262;
        if (_1833 > 0.0)
        {
            _2262 = abs((1.0 - _1823) / _1833);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1833 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1823 + 1.0) / _1833);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2262 = frontier_phi_37_32_ladder;
        }
        float _2600;
        if (_1836 > 0.0)
        {
            _2600 = abs((1.0 - _1827) / _1836);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1836 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1827 + 1.0) / _1836);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2600 = frontier_phi_47_44_ladder;
        }
        float _2602 = isnan(_2262) ? _1945 : (isnan(_1945) ? _2262 : min(_1945, _2262));
        float _2603 = isnan(_2600) ? _2602 : (isnan(_2602) ? _2600 : min(_2602, _2600));
        float _2607 = (_2603 * _1830) + _1819;
        float _2608 = (_2603 * _1833) + _1823;
        float _2609 = (_2603 * _1836) + _1827;
        float _2610 = _2603 * 9.9999997473787516355514526367188e-05;
        float _2611 = (-1.0) - _2610;
        float _2613 = _2610 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2609 > _2613) || ((_2609 < _2611) || ((_2608 > _2613) || ((_2608 < _2611) || ((_2607 < _2611) || (_2607 > _2613))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2731 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2609, cbModelParam._m0[17u].z, fma(_2608, cbModelParam._m0[17u].y, _2607 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2609, cbModelParam._m0[18u].z, fma(_2608, cbModelParam._m0[18u].y, _2607 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2609, cbModelParam._m0[19u].z, fma(_2608, cbModelParam._m0[19u].y, _2607 * cbModelParam._m0[19u].x))), _1766);
            frontier_phi_22_47_ladder = _2731.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2731.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2731.x * cbModelParam._m0[1u].z;
        }
        _1855 = frontier_phi_22_47_ladder_2;
        _1857 = frontier_phi_22_47_ladder_1;
        _1859 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1839 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_866, _867, _868), _1766);
        _1855 = _1839.x * cbModelParam._m0[1u].z;
        _1857 = _1839.y * cbModelParam._m0[1u].z;
        _1859 = _1839.z * cbModelParam._m0[1u].z;
    }
    float _1872 = (((_893 * _842) + _894) * _858) * ((cbModelParam._m0[1u].w * (_1855 - _1757)) + _1757);
    float _1874 = (((_893 * _844) + _894) * _858) * ((cbModelParam._m0[1u].w * (_1857 - _1759)) + _1759);
    float _1876 = (((_893 * _845) + _894) * _858) * ((cbModelParam._m0[1u].w * (_1859 - _1761)) + _1761);
    float _1879 = fma(_1876, cbSceneParam._m0[89u].z, fma(_1874, cbSceneParam._m0[89u].y, _1872 * cbSceneParam._m0[89u].x));
    float _1882 = fma(_1876, cbSceneParam._m0[90u].z, fma(_1874, cbSceneParam._m0[90u].y, _1872 * cbSceneParam._m0[90u].x));
    float _1885 = fma(_1876, cbSceneParam._m0[91u].z, fma(_1874, cbSceneParam._m0[91u].y, _1872 * cbSceneParam._m0[91u].x));
    float _1919 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1923 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1927 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1931 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1932 = _1919 / _1931;
    float _1933 = _1923 / _1931;
    float _1934 = _1927 / _1931;
    float _2081;
    float _2082;
    float _2083;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1961 = ((uint(_1934 > cbSceneParam._m0[59u].y) + uint(_1934 > cbSceneParam._m0[59u].x)) + uint(_1934 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1962 = _1961 + 43u;
        uint _1970 = _1961 + 44u;
        uint _1978 = _1961 + 45u;
        uint _1986 = _1961 + 46u;
        float _1997 = fma(_1931, cbSceneParam._m0[_1962].w, fma(_1927, cbSceneParam._m0[_1962].z, fma(_1923, cbSceneParam._m0[_1962].y, _1919 * cbSceneParam._m0[_1962].x)));
        float _2001 = fma(_1931, cbSceneParam._m0[_1970].w, fma(_1927, cbSceneParam._m0[_1970].z, fma(_1923, cbSceneParam._m0[_1970].y, _1919 * cbSceneParam._m0[_1970].x)));
        float _2009 = fma(_1931, cbSceneParam._m0[_1986].w, fma(_1927, cbSceneParam._m0[_1986].z, fma(_1923, cbSceneParam._m0[_1986].y, _1919 * cbSceneParam._m0[_1986].x)));
        float _2014 = cbSceneParam._m0[33u].z * _2009;
        float _2016 = cbSceneParam._m0[33u].w * _2009;
        float _2019 = fma(_1931, cbSceneParam._m0[_1978].w, fma(_1927, cbSceneParam._m0[_1978].z, fma(_1923, cbSceneParam._m0[_1978].y, _1919 * cbSceneParam._m0[_1978].x))) / _2009;
        float _2067 = (cbSceneParam._m0[33u].x - sqrt(((_1933 * _1933) + (_1932 * _1932)) + (_1934 * _1934))) * cbSceneParam._m0[33u].y;
        float _4364 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
        float _2074 = (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2014 + _1997) / _2009, (_2016 + _2001) / _2009), _2019), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2016 + _1997) / _2009, (_2001 - _2014) / _2009), _2019), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1997 - _2014) / _2009, (_2001 - _2016) / _2009), _2019), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1997 - _2016) / _2009, (_2014 + _2001) / _2009), _2019), 0.0)).x), vec4(0.25)));
        _2081 = 1.0 - (_2074 * cbSceneParam._m0[34u].x);
        _2082 = 1.0 - (_2074 * cbSceneParam._m0[34u].y);
        _2083 = 1.0 - (_2074 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2081 = 1.0;
        _2082 = 1.0;
        _2083 = 1.0;
    }
    float _2147;
    float _2149;
    float _2151;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2135 = fma(_1931, cbSceneParam._m0[63u].w, fma(_1927, cbSceneParam._m0[63u].z, fma(_1923, cbSceneParam._m0[63u].y, _1919 * cbSceneParam._m0[63u].x)));
        float _2136 = fma(_1931, cbSceneParam._m0[60u].w, fma(_1927, cbSceneParam._m0[60u].z, fma(_1923, cbSceneParam._m0[60u].y, _1919 * cbSceneParam._m0[60u].x))) / _2135;
        float _2137 = fma(_1931, cbSceneParam._m0[61u].w, fma(_1927, cbSceneParam._m0[61u].z, fma(_1923, cbSceneParam._m0[61u].y, _1919 * cbSceneParam._m0[61u].x))) / _2135;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2136 >= cbSceneParam._m0[64u].x) && (_2137 >= cbSceneParam._m0[64u].y)) && (_2136 <= cbSceneParam._m0[64u].z)) && (_2137 <= cbSceneParam._m0[64u].w))
        {
            float _2275 = fma(_1931, cbSceneParam._m0[62u].w, fma(_1927, cbSceneParam._m0[62u].z, fma(_1923, cbSceneParam._m0[62u].y, _1919 * cbSceneParam._m0[62u].x))) / _2135;
            float _2279 = isnan(cbSceneParam._m0[41u].w) ? _2275 : (isnan(_2275) ? cbSceneParam._m0[41u].w : max(_2275, cbSceneParam._m0[41u].w));
            float _2322 = (cbSceneParam._m0[33u].x - sqrt(((_1933 * _1933) + (_1932 * _1932)) + (_1934 * _1934))) * cbSceneParam._m0[33u].y;
            float _4380 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
            float _2329 = (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2136, cbSceneParam._m0[33u].w + _2137), _2279), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2136, _2137 - cbSceneParam._m0[33u].z), _2279), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2136 - cbSceneParam._m0[33u].z, _2137 - cbSceneParam._m0[33u].w), _2279), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2136 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2137), _2279), 0.0)).x), vec4(0.25)));
            float _2333 = 1.0 - (_2329 * cbSceneParam._m0[34u].x);
            float _2334 = 1.0 - (_2329 * cbSceneParam._m0[34u].y);
            float _2335 = 1.0 - (_2329 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2335) ? _2083 : (isnan(_2083) ? _2335 : min(_2083, _2335));
            frontier_phi_34_33_ladder_1 = isnan(_2334) ? _2082 : (isnan(_2082) ? _2334 : min(_2082, _2334));
            frontier_phi_34_33_ladder_2 = isnan(_2333) ? _2081 : (isnan(_2081) ? _2333 : min(_2081, _2333));
        }
        else
        {
            frontier_phi_34_33_ladder = _2083;
            frontier_phi_34_33_ladder_1 = _2082;
            frontier_phi_34_33_ladder_2 = _2081;
        }
        _2147 = frontier_phi_34_33_ladder_2;
        _2149 = frontier_phi_34_33_ladder_1;
        _2151 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2147 = _2081;
        _2149 = _2082;
        _2151 = _2083;
    }
    uvec4 _2156 = floatBitsToUint(cbInstanceData._m0[_240 + 5u]);
    uint _2158 = _2156.x * 14u;
    uint _2159 = _2158 + 13u;
    float _2166 = _858 + (-1.0);
    float _2171 = (cbLight._m0[_2159].x * _2166) + 1.0;
    float _2172 = (cbLight._m0[_2159].y * _2166) + 1.0;
    float _2173 = (cbLight._m0[_2159].z * _2166) + 1.0;
    float _2174 = (cbLight._m0[_2159].w * _2166) + 1.0;
    uint _2175 = _2158 + 5u;
    float _2181 = isnan(1.0) ? _2172 : (isnan(_2172) ? 1.0 : min(_2172, 1.0));
    uint _2185 = _2158 + 4u;
    float _2194 = isnan(1.0) ? _2171 : (isnan(_2171) ? 1.0 : min(_2171, 1.0));
    uint _2198 = _2158 | 1u;
    float _2209 = dot(vec3(cbLight._m0[_2158].xyz), vec3(_692, _693, _694));
    float _2212 = dot(vec3(cbLight._m0[_2198].xyz), vec3(_692, _693, _694));
    float _4416 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _4427 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2217 = (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * 0.3183098733425140380859375;
    float _2219 = (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * 0.3183098733425140380859375;
    float _2226 = ((cbLight._m0[_2175].x * _2181) * _2219) + (((cbLight._m0[_2185].x * _2147) * _2194) * _2217);
    float _2227 = ((_2181 * cbLight._m0[_2175].y) * _2219) + (((cbLight._m0[_2185].y * _2149) * _2194) * _2217);
    float _2228 = ((_2181 * cbLight._m0[_2175].z) * _2219) + (((cbLight._m0[_2185].z * _2151) * _2194) * _2217);
    uvec4 _2232 = floatBitsToUint(cbLight._m0[_2158 + 12u]);
    bool _2234 = _2232.x == 0u;
    float _2336;
    float _2338;
    float _2340;
    if (_2234)
    {
        _2336 = _2226;
        _2338 = _2227;
        _2340 = _2228;
    }
    else
    {
        uint _2344 = _2158 + 6u;
        float _2360 = (dot(vec3(cbLight._m0[_2158 + 2u].xyz), vec3(_692, _693, _694)) * 0.5) + 0.5;
        float _2361 = _2360 * _2360;
        float _4438 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2362 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _2363 = isnan(1.0) ? _2173 : (isnan(_2173) ? 1.0 : min(_2173, 1.0));
        _2336 = (((cbLight._m0[_2344].x * 0.3183098733425140380859375) * _2362) * _2363) + _2226;
        _2338 = (((cbLight._m0[_2344].y * 0.3183098733425140380859375) * _2362) * _2363) + _2227;
        _2340 = (((cbLight._m0[_2344].z * 0.3183098733425140380859375) * _2362) * _2363) + _2228;
    }
    bool _2343 = _2232.y == 0u;
    float _2398;
    float _2400;
    float _2402;
    if (_2343)
    {
        _2398 = _2336;
        _2400 = _2338;
        _2402 = _2340;
    }
    else
    {
        uint _2571 = _2158 + 7u;
        float _2587 = (dot(vec3(cbLight._m0[_2158 + 3u].xyz), vec3(_692, _693, _694)) * 0.5) + 0.5;
        float _2588 = _2587 * _2587;
        float _4454 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        float _2589 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _2590 = isnan(1.0) ? _2174 : (isnan(_2174) ? 1.0 : min(_2174, 1.0));
        _2398 = (((cbLight._m0[_2571].x * 0.3183098733425140380859375) * _2589) * _2590) + _2336;
        _2400 = (((cbLight._m0[_2571].y * 0.3183098733425140380859375) * _2589) * _2590) + _2338;
        _2402 = (((cbLight._m0[_2571].z * 0.3183098733425140380859375) * _2589) * _2590) + _2340;
    }
    uint _2405 = _2158 + 8u;
    float _2418 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2158].w)) * _695) * 0.949999988079071044921875);
    float _2419 = _2418 * _2418;
    float _2420 = cbLight._m0[_2158].x + _772;
    float _2421 = cbLight._m0[_2158].y + _773;
    float _2422 = cbLight._m0[_2158].z + _774;
    float _2426 = inversesqrt(dot(vec3(_2420, _2421, _2422), vec3(_2420, _2421, _2422)));
    float _2427 = _2426 * _2420;
    float _2428 = _2426 * _2421;
    float _2429 = _2426 * _2422;
    float _2430 = dot(vec3(_692, _693, _694), vec3(cbLight._m0[_2158].xyz));
    float _4470 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    float _2433 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
    float _4481 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _2434 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
    float _2435 = dot(vec3(_692, _693, _694), vec3(_2427, _2428, _2429));
    float _4492 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
    float _2438 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
    float _2439 = dot(vec3(cbLight._m0[_2158].xyz), vec3(_2427, _2428, _2429));
    float _4503 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
    float _2443 = _2419 * _2419;
    float _2447 = ((_2438 * _2438) * (_2443 + (-1.0))) + 1.0;
    float _2455 = exp2(log2(1.0 - (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0)))) * 5.0);
    float _2456 = 0.959999978542327880859375 - _839;
    float _2458 = 0.959999978542327880859375 - _840;
    float _2459 = 0.959999978542327880859375 - _841;
    float _2466 = 1.0 - _2419;
    float _2477 = (0.5 / (((_2434 * ((_2433 * _2466) + _2419)) + 9.9999999392252902907785028219223e-09) + (((_2434 * _2466) + _2419) * _2433))) * _2433;
    float _4514 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2479 = (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0))) * (_2443 / ((_2447 * _2447) * 3.141590118408203125));
    uint _2493 = _2158 + 9u;
    float _2504 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2198].w)) * _695) * 0.949999988079071044921875);
    float _2505 = _2504 * _2504;
    float _2506 = cbLight._m0[_2198].x + _772;
    float _2507 = cbLight._m0[_2198].y + _773;
    float _2508 = cbLight._m0[_2198].z + _774;
    float _2512 = inversesqrt(dot(vec3(_2506, _2507, _2508), vec3(_2506, _2507, _2508)));
    float _2513 = _2512 * _2506;
    float _2514 = _2512 * _2507;
    float _2515 = _2512 * _2508;
    float _2516 = dot(vec3(_692, _693, _694), vec3(cbLight._m0[_2198].xyz));
    float _4525 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
    float _2519 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
    float _2520 = dot(vec3(_692, _693, _694), vec3(_2513, _2514, _2515));
    float _4536 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
    float _2523 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
    float _2524 = dot(vec3(cbLight._m0[_2198].xyz), vec3(_2513, _2514, _2515));
    float _4547 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
    float _2528 = _2505 * _2505;
    float _2532 = ((_2523 * _2523) * (_2528 + (-1.0))) + 1.0;
    float _2539 = exp2(log2(1.0 - (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0)))) * 5.0);
    float _2546 = 1.0 - _2505;
    float _2556 = (0.5 / (((_2434 * ((_2519 * _2546) + _2505)) + 9.9999999392252902907785028219223e-09) + (((_2434 * _2546) + _2505) * _2519))) * _2519;
    float _4558 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
    float _2558 = (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * (_2528 / ((_2532 * _2532) * 3.141590118408203125));
    float _2568 = (((((_2539 * _2456) + _842) * cbLight._m0[_2493].x) * _2558) * _2181) + ((((cbLight._m0[_2405].x * _2147) * ((_2455 * _2456) + _842)) * _2479) * _2194);
    float _2569 = (((((_2539 * _2458) + _844) * cbLight._m0[_2493].y) * _2558) * _2181) + ((((cbLight._m0[_2405].y * _2149) * ((_2455 * _2458) + _844)) * _2479) * _2194);
    float _2570 = (((((_2539 * _2459) + _845) * cbLight._m0[_2493].z) * _2558) * _2181) + ((((cbLight._m0[_2405].z * _2151) * ((_2455 * _2459) + _845)) * _2479) * _2194);
    float _2626;
    float _2628;
    float _2630;
    if (_2234)
    {
        _2626 = _2568;
        _2628 = _2569;
        _2630 = _2570;
    }
    else
    {
        uint _2632 = _2158 + 2u;
        uint _2636 = _2158 + 10u;
        float _2650 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2632].w)) * _695) * 0.949999988079071044921875);
        float _2651 = _2650 * _2650;
        float _2652 = cbLight._m0[_2632].x + _772;
        float _2653 = cbLight._m0[_2632].y + _773;
        float _2654 = cbLight._m0[_2632].z + _774;
        float _2658 = inversesqrt(dot(vec3(_2652, _2653, _2654), vec3(_2652, _2653, _2654)));
        float _2659 = _2658 * _2652;
        float _2660 = _2658 * _2653;
        float _2661 = _2658 * _2654;
        float _2662 = dot(vec3(_692, _693, _694), vec3(cbLight._m0[_2632].xyz));
        float _4569 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
        float _2665 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
        float _2666 = dot(vec3(_692, _693, _694), vec3(_2659, _2660, _2661));
        float _4580 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
        float _2669 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _2670 = dot(vec3(cbLight._m0[_2632].xyz), vec3(_2659, _2660, _2661));
        float _4591 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        float _2674 = _2651 * _2651;
        float _2678 = ((_2669 * _2669) * (_2674 + (-1.0))) + 1.0;
        float _2685 = exp2(log2(1.0 - (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0)))) * 5.0);
        float _2692 = 1.0 - _2651;
        float _2702 = (0.5 / (((_2434 * ((_2665 * _2692) + _2651)) + 9.9999999392252902907785028219223e-09) + (((_2434 * _2692) + _2651) * _2665))) * _2665;
        float _4602 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
        float _2704 = (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * (_2674 / ((_2678 * _2678) * 3.141590118408203125));
        float _2705 = isnan(1.0) ? _2173 : (isnan(_2173) ? 1.0 : min(_2173, 1.0));
        _2626 = (((((_2685 * _2456) + _842) * cbLight._m0[_2636].x) * _2704) * _2705) + _2568;
        _2628 = (((((_2685 * _2458) + _844) * cbLight._m0[_2636].y) * _2704) * _2705) + _2569;
        _2630 = (((((_2685 * _2459) + _845) * cbLight._m0[_2636].z) * _2704) * _2705) + _2570;
    }
    float _2736;
    float _2738;
    float _2740;
    if (_2343)
    {
        _2736 = _2626;
        _2738 = _2628;
        _2740 = _2630;
    }
    else
    {
        uint _2747 = _2158 + 3u;
        uint _2751 = _2158 + 11u;
        float _2765 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2747].w)) * _695) * 0.949999988079071044921875);
        float _2766 = _2765 * _2765;
        float _2767 = cbLight._m0[_2747].x + _772;
        float _2768 = cbLight._m0[_2747].y + _773;
        float _2769 = cbLight._m0[_2747].z + _774;
        float _2773 = inversesqrt(dot(vec3(_2767, _2768, _2769), vec3(_2767, _2768, _2769)));
        float _2774 = _2773 * _2767;
        float _2775 = _2773 * _2768;
        float _2776 = _2773 * _2769;
        float _2777 = dot(vec3(_692, _693, _694), vec3(cbLight._m0[_2747].xyz));
        float _4618 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
        float _2780 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
        float _2781 = dot(vec3(_692, _693, _694), vec3(_2774, _2775, _2776));
        float _4629 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
        float _2784 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
        float _2785 = dot(vec3(cbLight._m0[_2747].xyz), vec3(_2774, _2775, _2776));
        float _4640 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
        float _2789 = _2766 * _2766;
        float _2793 = ((_2784 * _2784) * (_2789 + (-1.0))) + 1.0;
        float _2800 = exp2(log2(1.0 - (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0)))) * 5.0);
        float _2807 = 1.0 - _2766;
        float _2817 = (0.5 / (((_2434 * ((_2780 * _2807) + _2766)) + 9.9999999392252902907785028219223e-09) + (((_2434 * _2807) + _2766) * _2780))) * _2780;
        float _4651 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
        float _2819 = (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0))) * (_2789 / ((_2793 * _2793) * 3.141590118408203125));
        float _2820 = isnan(1.0) ? _2174 : (isnan(_2174) ? 1.0 : min(_2174, 1.0));
        _2736 = (((((_2800 * _2456) + _842) * cbLight._m0[_2751].x) * _2819) * _2820) + _2626;
        _2738 = (((((_2800 * _2458) + _844) * cbLight._m0[_2751].y) * _2819) * _2820) + _2628;
        _2740 = (((((_2800 * _2459) + _845) * cbLight._m0[_2751].z) * _2819) * _2820) + _2630;
    }
    float _2886;
    float _2888;
    float _2890;
    float _2892;
    float _2894;
    float _2896;
    if (_2156.y == 0u)
    {
        uvec4 _2841 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2842 = _2841.x;
        uint _2853 = uint((float(_2841.y) * floor(float(uint(cbSceneParam._m0[85u].y * _781) / _2842))) + floor(float(uint(cbSceneParam._m0[85u].x * _780) / _2842)));
        float _2863 = (log2(_1934 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2864 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
        uint _2867 = uint(isnan(14.0) ? _2864 : (isnan(_2864) ? 14.0 : min(_2864, 14.0)));
        uvec4 _2872 = texelFetch(g_lightClusterGridBuffer, int(((_2867 << 2u) + (_2853 << 6u)) >> 2u));
        uint _2873 = _2872.x;
        uint _2874 = _2841.z;
        float _2953;
        float _2955;
        float _2957;
        float _2959;
        float _2961;
        float _2963;
        if (((((1u << ((_2874 >> 4u) & 15u)) + 4294967295u) & _2873) == 0u) || ((_2874 & 240u) == 0u))
        {
            _2953 = 0.0;
            _2955 = 0.0;
            _2957 = 0.0;
            _2959 = 0.0;
            _2961 = 0.0;
            _2963 = 0.0;
        }
        else
        {
            float _2954;
            float _2956;
            float _2958;
            float _2960;
            float _2962;
            float _2964;
            float _3098 = 0.0;
            float _3099 = 0.0;
            float _3100 = 0.0;
            float _3101 = 0.0;
            float _3102 = 0.0;
            float _3103 = 0.0;
            uint _3104 = 0u;
            uint _3113;
            bool _3114;
            for (;;)
            {
                _3113 = texelFetch(g_lightClassification, int((((_2867 << 5u) + (_2853 << 9u)) + (_3104 << 2u)) >> 2u)).x;
                _3114 = _3113 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3114)
                {
                    frontier_phi_66_pred = _3103;
                    frontier_phi_66_pred_1 = _3102;
                    frontier_phi_66_pred_2 = _3101;
                    frontier_phi_66_pred_3 = _3100;
                    frontier_phi_66_pred_4 = _3099;
                    frontier_phi_66_pred_5 = _3098;
                }
                else
                {
                    float _3222;
                    float _3223;
                    float _3224;
                    float _3225;
                    float _3226;
                    float _3227;
                    uint _3228;
                    _3222 = _3098;
                    _3223 = _3099;
                    _3224 = _3100;
                    _3225 = _3101;
                    _3226 = _3102;
                    _3227 = _3103;
                    _3228 = _3113;
                    float _3154;
                    float _3155;
                    float _3156;
                    float _3157;
                    float _3158;
                    float _3159;
                    for (;;)
                    {
                        uint _3232 = uint(findLSB(_3228)) + (_3104 << 5u);
                        uint _3229 = (_3228 + 4294967295u) & _3228;
                        uint _3234 = _3232 * 48u;
                        vec4 _3248 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3234)).x, texelFetch(g_PointLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3234 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3234 + 3u)).x));
                        uint _3254 = (_3232 * 48u) + 4u;
                        vec4 _3267 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3254)).x, texelFetch(g_PointLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3254 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3254 + 3u)).x));
                        uint _3273 = (_3232 * 48u) + 8u;
                        vec3 _3284 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3273)).x, texelFetch(g_PointLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3273 + 2u)).x));
                        float _3288 = _3248.x - _1932;
                        float _3289 = _3248.y - _1933;
                        float _3290 = _3248.z - _1934;
                        float _3291 = dot(vec3(_3288, _3289, _3290), vec3(_3288, _3289, _3290));
                        float _3294 = inversesqrt(_3291);
                        float _3295 = _3294 * _3288;
                        float _3296 = _3294 * _3289;
                        float _3297 = _3294 * _3290;
                        float _3298 = dot(vec3(_799, _802, _805), vec3(_3295, _3296, _3297));
                        float _3303 = 1.0 - (_3291 * _3248.w);
                        float _4677 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                        float _3304 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                        float _3305 = sqrt(_3291) * _3267.w;
                        float _3308 = 1.39999997615814208984375 / (_3305 + 1.39999997615814208984375);
                        float _3309 = _3308 * _3308;
                        float _3312 = ((1.0 - _3309) * _3298) + _3309;
                        float _3315 = _3305 * _3305;
                        float _3319 = ((isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0))) * _3304) / ((_3315 * 0.699999988079071044921875) + 1.0);
                        float _3323 = (-0.0) - _1932;
                        float _3324 = (-0.0) - _1933;
                        float _3325 = (-0.0) - _1934;
                        float _3329 = inversesqrt(dot(vec3(_3323, _3324, _3325), vec3(_3323, _3324, _3325)));
                        float _3330 = _3329 * _3323;
                        float _3331 = _3329 * _3324;
                        float _3332 = _3329 * _3325;
                        float _3339 = exp2(log2(1.0 / ((_3315 * 3.5) + 5.0)) * 0.25);
                        float _3340 = 1.0 - _874;
                        float _3347 = sqrt(1.0 - ((1.0 - (_3340 * _3340)) * (1.0 - (_3339 * _3339))));
                        float _3348 = _3347 * _3347;
                        float _3349 = _3348 * _3348;
                        float _3350 = _3330 + _3295;
                        float _3351 = _3331 + _3296;
                        float _3352 = _3332 + _3297;
                        float _3356 = inversesqrt(dot(vec3(_3350, _3351, _3352), vec3(_3350, _3351, _3352)));
                        float _3360 = dot(vec3(_799, _802, _805), vec3(_3330, _3331, _3332));
                        float _4693 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                        float _3363 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                        float _3364 = dot(vec3(_799, _802, _805), vec3(_3356 * _3350, _3356 * _3351, _3356 * _3352));
                        float _4704 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                        float _3367 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                        float _3371 = ((_3367 * _3367) * (_3349 + (-1.0))) + 1.0;
                        float _3372 = _3308 * _3348;
                        float _3373 = _3372 * _3372;
                        float _3376 = ((1.0 - _3373) * _3298) + _3373;
                        float _4715 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                        float _3377 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                        float _3378 = 1.0 - _3348;
                        float _3388 = (0.5 / (((_3377 * ((_3363 * _3378) + _3348)) + 9.9999999392252902907785028219223e-09) + (((_3377 * _3378) + _3348) * _3363))) * _3377;
                        float _4726 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                        float _3399 = (((_3349 * 3.1415927410125732421875) * (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0)))) / ((_3371 * _3371) * ((_3315 * 2.1991131305694580078125) + 3.141590118408203125))) * _3304;
                        _3157 = (_3319 * _3267.x) + _3225;
                        _3158 = (_3319 * _3267.y) + _3226;
                        _3159 = (_3319 * _3267.z) + _3227;
                        _3154 = (_3399 * _3284.x) + _3222;
                        _3155 = (_3399 * _3284.y) + _3223;
                        _3156 = (_3399 * _3284.z) + _3224;
                        if (_3229 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3222 = _3154;
                            _3223 = _3155;
                            _3224 = _3156;
                            _3225 = _3157;
                            _3226 = _3158;
                            _3227 = _3159;
                            _3228 = _3229;
                        }
                    }
                    frontier_phi_66_pred = _3159;
                    frontier_phi_66_pred_1 = _3158;
                    frontier_phi_66_pred_2 = _3157;
                    frontier_phi_66_pred_3 = _3156;
                    frontier_phi_66_pred_4 = _3155;
                    frontier_phi_66_pred_5 = _3154;
                }
                _2964 = frontier_phi_66_pred;
                _2962 = frontier_phi_66_pred_1;
                _2960 = frontier_phi_66_pred_2;
                _2958 = frontier_phi_66_pred_3;
                _2956 = frontier_phi_66_pred_4;
                _2954 = frontier_phi_66_pred_5;
                uint _3105 = _3104 + 1u;
                if (_3105 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3098 = _2954;
                    _3099 = _2956;
                    _3100 = _2958;
                    _3101 = _2960;
                    _3102 = _2962;
                    _3103 = _2964;
                    _3104 = _3105;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2953 = _2954;
            _2955 = _2956;
            _2957 = _2958;
            _2959 = _2960;
            _2961 = _2962;
            _2963 = _2964;
        }
        uvec4 _2967 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2968 = _2967.z;
        uint _2970 = (_2968 >> 8u) & 15u;
        float _3066;
        float _3068;
        float _3070;
        float _3072;
        float _3074;
        float _3076;
        if (((4294967295u << _2970) & _2873) == 0u)
        {
            _3066 = _2953;
            _3068 = _2955;
            _3070 = _2957;
            _3072 = _2959;
            _3074 = _2961;
            _3076 = _2963;
        }
        else
        {
            float _3091 = inversesqrt(dot(vec3(_1932, _1933, _1934), vec3(_1932, _1933, _1934)));
            float _3092 = _3091 * _1932;
            float _3093 = _3091 * _1933;
            float _3094 = _3091 * _1934;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2970 < ((_2968 >> 12u) & 15u))
            {
                float _3067;
                float _3069;
                float _3071;
                float _3073;
                float _3075;
                float _3077;
                float _3205 = _2953;
                float _3206 = _2955;
                float _3207 = _2957;
                float _3208 = _2959;
                float _3209 = _2961;
                float _3210 = _2963;
                uint _3211 = _2970;
                uint _3220;
                bool _3221;
                for (;;)
                {
                    _3220 = texelFetch(g_lightClassification, int((((_2867 << 5u) + (_2853 << 9u)) + (_3211 << 2u)) >> 2u)).x;
                    _3221 = _3220 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3221)
                    {
                        frontier_phi_72_pred = _3210;
                        frontier_phi_72_pred_1 = _3209;
                        frontier_phi_72_pred_2 = _3208;
                        frontier_phi_72_pred_3 = _3207;
                        frontier_phi_72_pred_4 = _3206;
                        frontier_phi_72_pred_5 = _3205;
                    }
                    else
                    {
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3408;
                        float _3409;
                        float _3698;
                        float _3699;
                        float _3700;
                        float _3701;
                        float _3702;
                        float _3703;
                        float _3417 = _3205;
                        float _3418 = _3206;
                        float _3419 = _3207;
                        float _3420 = _3208;
                        float _3421 = _3209;
                        float _3422 = _3210;
                        uint _3423 = _3220;
                        uint _3424;
                        vec4 _3449;
                        float _3450;
                        vec4 _3465;
                        vec3 _3477;
                        vec4 _3492;
                        vec4 _3508;
                        float _3554;
                        bool _3555;
                        for (;;)
                        {
                            uint _3434 = ((_3211 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3423));
                            _3424 = (_3423 + 4294967295u) & _3423;
                            uint _3436 = _3434 * 40u;
                            _3449 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3436)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 3u)).x));
                            _3450 = _3449.w;
                            uint _3452 = (_3434 * 40u) + 4u;
                            _3465 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3452)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 3u)).x));
                            uint _3467 = (_3434 * 40u) + 8u;
                            _3477 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3467)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 2u)).x));
                            uint _3479 = (_3434 * 40u) + 16u;
                            _3492 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 3u)).x));
                            uint _3495 = (_3434 * 40u) + 20u;
                            _3508 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3495)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 3u)).x));
                            uint _3510 = (_3434 * 40u) + 24u;
                            vec4 _3523 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 3u)).x));
                            uint _3529 = (_3434 * 40u) + 28u;
                            vec4 _3542 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3529)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 3u)).x));
                            _3554 = fma(_1934, _3542.z, fma(_1933, _3542.y, _3542.x * _1932)) + _3542.w;
                            _3555 = !((fma(_1934, _3523.z, fma(_1933, _3523.y, _3523.x * _1932)) + _3523.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3555)
                            {
                                float _3582 = _3449.x - _1932;
                                float _3583 = _3449.y - _1933;
                                float _3584 = _3449.z - _1934;
                                float _3585 = dot(vec3(_3582, _3583, _3584), vec3(_3582, _3583, _3584));
                                float _3588 = inversesqrt(_3585);
                                float _3589 = _3588 * _3582;
                                float _3590 = _3588 * _3583;
                                float _3591 = _3588 * _3584;
                                float _3595 = 1.0 - (_3585 / (_3450 * _3450));
                                float _4737 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                                float _3596 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
                                float _3600 = sqrt(_3585) * _3465.w;
                                float _3602 = 1.39999997615814208984375 / (_3600 + 1.39999997615814208984375);
                                float _3603 = _3602 * _3602;
                                float _3606 = ((1.0 - _3603) * dot(vec3(_3589, _3590, _3591), vec3(_799, _802, _805))) + _3603;
                                float _3609 = _3600 * _3600;
                                float _3613 = (fma(_1934, _3492.z, fma(_1933, _3492.y, _3492.x * _1932)) + _3492.w) / _3554;
                                float _3614 = (fma(_1934, _3508.z, fma(_1933, _3508.y, _3508.x * _1932)) + _3508.w) / _3554;
                                float _3618 = 1.0 - dot(vec2(_3613, _3614), vec2(_3613, _3614));
                                float _4753 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                                float _3619 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
                                float _3620 = _3619 * (((isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0))) * _3596) / ((_3609 * 0.699999988079071044921875) + 1.0));
                                float _3632 = exp2(log2(1.0 / ((_3609 * 3.5) + 5.0)) * 0.25);
                                float _3633 = 1.0 - _874;
                                float _3640 = sqrt(1.0 - ((1.0 - (_3633 * _3633)) * (1.0 - (_3632 * _3632))));
                                float _3641 = _3640 * _3640;
                                float _3642 = _3641 * _3641;
                                float _3643 = _3589 - _3092;
                                float _3644 = _3590 - _3093;
                                float _3645 = _3591 - _3094;
                                float _3649 = inversesqrt(dot(vec3(_3643, _3644, _3645), vec3(_3643, _3644, _3645)));
                                float _3653 = dot(vec3(_799, _802, _805), vec3((-0.0) - _3092, (-0.0) - _3093, (-0.0) - _3094));
                                float _4764 = isnan(0.0) ? _3653 : (isnan(_3653) ? 0.0 : max(_3653, 0.0));
                                float _3656 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
                                float _3657 = dot(vec3(_799, _802, _805), vec3(_3649 * _3643, _3649 * _3644, _3649 * _3645));
                                float _4775 = isnan(0.0) ? _3657 : (isnan(_3657) ? 0.0 : max(_3657, 0.0));
                                float _3660 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
                                float _3664 = ((_3660 * _3660) * (_3642 + (-1.0))) + 1.0;
                                float _3665 = _3602 * _3641;
                                float _3666 = _3665 * _3665;
                                float _3672 = ((1.0 - _3666) * dot(vec3(_799, _802, _805), vec3(_3589, _3590, _3591))) + _3666;
                                float _4786 = isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0));
                                float _3673 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
                                float _3674 = 1.0 - _3641;
                                float _3684 = (0.5 / (((_3673 * ((_3656 * _3674) + _3641)) + 9.9999999392252902907785028219223e-09) + (((_3673 * _3674) + _3641) * _3656))) * _3673;
                                float _4797 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                                float _3694 = (_3619 * _3596) * (((_3642 * 3.1415927410125732421875) * (isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0)))) / ((_3664 * _3664) * ((_3609 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3620 * _3465.y;
                                frontier_phi_78_pred_1 = _3620 * _3465.x;
                                frontier_phi_78_pred_2 = _3694 * _3477.z;
                                frontier_phi_78_pred_3 = _3694 * _3477.y;
                                frontier_phi_78_pred_4 = _3694 * _3477.x;
                                frontier_phi_78_pred_5 = _3620 * _3465.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3702 = frontier_phi_78_pred;
                            _3701 = frontier_phi_78_pred_1;
                            _3700 = frontier_phi_78_pred_2;
                            _3699 = frontier_phi_78_pred_3;
                            _3698 = frontier_phi_78_pred_4;
                            _3703 = frontier_phi_78_pred_5;
                            _3407 = _3701 + _3420;
                            _3408 = _3702 + _3421;
                            _3409 = _3703 + _3422;
                            _3404 = _3698 + _3417;
                            _3405 = _3699 + _3418;
                            _3406 = _3700 + _3419;
                            if (_3424 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3417 = _3404;
                                _3418 = _3405;
                                _3419 = _3406;
                                _3420 = _3407;
                                _3421 = _3408;
                                _3422 = _3409;
                                _3423 = _3424;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3409;
                        frontier_phi_72_pred_1 = _3408;
                        frontier_phi_72_pred_2 = _3407;
                        frontier_phi_72_pred_3 = _3406;
                        frontier_phi_72_pred_4 = _3405;
                        frontier_phi_72_pred_5 = _3404;
                    }
                    _3077 = frontier_phi_72_pred;
                    _3075 = frontier_phi_72_pred_1;
                    _3073 = frontier_phi_72_pred_2;
                    _3071 = frontier_phi_72_pred_3;
                    _3069 = frontier_phi_72_pred_4;
                    _3067 = frontier_phi_72_pred_5;
                    uint _3212 = _3211 + 1u;
                    if (_3212 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3205 = _3067;
                        _3206 = _3069;
                        _3207 = _3071;
                        _3208 = _3073;
                        _3209 = _3075;
                        _3210 = _3077;
                        _3211 = _3212;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3077;
                frontier_phi_60_61_ladder_1 = _3075;
                frontier_phi_60_61_ladder_2 = _3071;
                frontier_phi_60_61_ladder_3 = _3069;
                frontier_phi_60_61_ladder_4 = _3067;
                frontier_phi_60_61_ladder_5 = _3073;
            }
            else
            {
                frontier_phi_60_61_ladder = _2963;
                frontier_phi_60_61_ladder_1 = _2961;
                frontier_phi_60_61_ladder_2 = _2957;
                frontier_phi_60_61_ladder_3 = _2955;
                frontier_phi_60_61_ladder_4 = _2953;
                frontier_phi_60_61_ladder_5 = _2959;
            }
            _3066 = frontier_phi_60_61_ladder_4;
            _3068 = frontier_phi_60_61_ladder_3;
            _3070 = frontier_phi_60_61_ladder_2;
            _3072 = frontier_phi_60_61_ladder_5;
            _3074 = frontier_phi_60_61_ladder_1;
            _3076 = frontier_phi_60_61_ladder;
        }
        float _3081 = isnan(1.0) ? _858 : (isnan(_858) ? 1.0 : min(_858, 1.0));
        _2886 = (_3081 * _3072) + _2398;
        _2888 = (_3081 * _3074) + _2400;
        _2890 = (_3081 * _3076) + _2402;
        _2892 = ((_3066 * _842) * _3081) + _2736;
        _2894 = ((_3068 * _844) * _3081) + _2738;
        _2896 = ((_3070 * _845) * _3081) + _2740;
    }
    else
    {
        _2886 = _2398;
        _2888 = _2400;
        _2890 = _2402;
        _2892 = _2736;
        _2894 = _2738;
        _2896 = _2740;
    }
    float _4813 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _4824 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _4835 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    uint _2916 = _240 + 6u;
    float _2924 = _780 / cbSceneParam._m0[86u].x;
    float _2925 = _781 / cbSceneParam._m0[86u].y;
    vec4 _2939 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2924, _2925, (log2((isnan(cbSceneParam._m0[77u].w) ? _714 : (isnan(_714) ? cbSceneParam._m0[77u].w : min(_714, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2941 = _2939.x;
    float _2942 = _2939.y;
    float _2943 = _2939.z;
    float _2944 = _2939.w;
    float _3016;
    float _3018;
    float _3020;
    float _3022;
    if (_714 > cbSceneParam._m0[78u].w)
    {
        float _2978 = isnan(_714) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _714 : min(cbSceneParam._m0[80u].w, _714));
        float _2979 = _2978 / _714;
        float _2990 = _2979 * _765;
        float _2991 = _766 * _2979;
        float _2992 = (-0.0) - _2991;
        float _2994 = _2979 * _767;
        float _2996 = (cbSceneParam._m0[77u].w * _2992) / _2978;
        float _2997 = _2996 + cbSceneParam._m0[79u].w;
        float _2998 = cbSceneParam._m0[79u].w - _2991;
        float _3004 = sqrt(((_2990 * _2990) + (_2991 * _2991)) + (_2994 * _2994));
        float _3007 = (1.0 - (cbSceneParam._m0[77u].w / _2978)) * _3004;
        float _3012 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3014 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3167;
        if (abs((_2992 - _2996) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3167 = ((((_2997 > 0.0) ? exp2(_3012 * _2997) : (2.0 - exp2(_3014 * _2997))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3007;
        }
        else
        {
            float _3127 = 1.0 / cbSceneParam._m0[80u].x;
            float _3128 = isnan(_2998) ? _2997 : (isnan(_2997) ? _2998 : max(_2997, _2998));
            float _3129 = isnan(_2998) ? _2997 : (isnan(_2997) ? _2998 : min(_2997, _2998));
            float _3138 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : min(_3128, 0.0));
            float _3139 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : min(_3129, 0.0));
            _3167 = ((abs(_3004 / _2992) * cbSceneParam._m0[80u].y) * ((((_3138 - _3139) * 2.0) - ((exp2(_3012 * (isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0)))) - exp2(_3012 * (isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0))))) * _3127)) - ((exp2(_3014 * _3138) - exp2(_3014 * _3139)) * _3127))) + (_3007 * cbSceneParam._m0[80u].z);
        }
        vec4 _3169 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2924, _2925, 1.0), 0.0);
        float _3178 = exp2((_3167 * (-1.44269502162933349609375)) * (1.0 - _3169.w));
        float _3179 = log2(_3178);
        float _3195 = log2(_2944);
        _3016 = (exp2(_3195 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3179 * cbSceneParam._m0[78u].x)) * _3169.x) / cbSceneParam._m0[78u].x)) + _2941;
        _3018 = (exp2(_3195 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3179 * cbSceneParam._m0[78u].y)) * _3169.y) / cbSceneParam._m0[78u].y)) + _2942;
        _3020 = (exp2(_3195 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3179 * cbSceneParam._m0[78u].z)) * _3169.z) / cbSceneParam._m0[78u].z)) + _2943;
        _3022 = _3178 * _2944;
    }
    else
    {
        _3016 = _2941;
        _3018 = _2942;
        _3020 = _2943;
        _3022 = _2944;
    }
    float _3034 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3035 = _3034 == 3.0;
    float _3036 = log2(_3022);
    float _3043 = exp2(_3036 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0))) * (_2886 + ((isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))) * _858))) + ((_2892 + ((isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0))) * _1666)) * cbPerFrame._m0[3u].x));
    float _3044 = exp2(_3036 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0))) * (_2888 + ((isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))) * _858))) + ((_2894 + ((isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0))) * _1666)) * cbPerFrame._m0[3u].x));
    float _3045 = exp2(_3036 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0))) * (_2890 + ((isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))) * _858))) + ((_2896 + ((isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0))) * _1666)) * cbPerFrame._m0[3u].x));
    float _3054 = (_3034 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3054 * (_3035 ? _3043 : (_3043 + (cbSceneParam._m0[72u].w * _3016)));
    SV_Target.y = _3054 * (_3035 ? _3044 : (_3044 + (cbSceneParam._m0[72u].w * _3018)));
    SV_Target.z = _3054 * (_3035 ? _3045 : (_3045 + (cbSceneParam._m0[72u].w * _3020)));
    SV_Target.w = cbInstanceData._m0[_2916].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2916].w;
}


