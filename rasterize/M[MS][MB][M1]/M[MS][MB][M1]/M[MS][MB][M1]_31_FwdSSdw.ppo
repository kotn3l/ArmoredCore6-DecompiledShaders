#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1115;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _214 = _213 * _205;
    float _215 = _213 * _206;
    float _216 = _213 * _207;
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = _220 * NORMAL.x;
    float _222 = _220 * NORMAL.y;
    float _223 = _220 * NORMAL.z;
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _228 = _227 * TANGENT.x;
    float _229 = _227 * TANGENT.y;
    float _230 = _227 * TANGENT.z;
    float _241 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _243 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _244 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3467 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3478 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3489 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    uint _254 = uint(roundEven(NORMAL.w)) * 13u;
    uint _259 = _254 + 1u;
    uint _263 = _254 + 2u;
    float _272 = sqrt(((cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x)) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x));
    float _273 = _272 * TEXCOORD.z;
    float _274 = _272 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _273) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _274) + cbTextureTilingScale._m0[13u].w));
    vec4 _310 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _315 = _310.x * cbMtdParam._m0[9u].x;
    float _316 = _310.y * cbMtdParam._m0[9u].y;
    float _317 = _310.z * cbMtdParam._m0[9u].z;
    float _321 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _287.x) * _315;
    float _324 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _287.y) * _316;
    float _327 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _287.z) * _317;
    float _334 = ((_315 - _321) * (isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0)))) + _321;
    float _335 = ((_316 - _324) * (isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0)))) + _324;
    float _336 = ((_317 - _327) * (isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0)))) + _327;
    vec4 _354 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _273) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _274) + cbTextureTilingScale._m0[20u].w));
    vec4 _380 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _384 = _380.z;
    float _388 = (_380.x * 2.0) + (-1.0);
    float _389 = (_380.y * 2.0) + (-1.0);
    float _390 = dot(vec2(_388, _389), vec2(_388, _389));
    float _3500 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _395 = sqrt(1.0 - (isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0))));
    float _400 = _388 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_354.x * 2.0) + (-1.0)));
    float _401 = _389 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_354.y * 2.0) + (-1.0)));
    float _404 = fma(_395, _221, fma(_401, _228, _400 * _214));
    float _407 = fma(_395, _222, fma(_401, _229, _400 * _215));
    float _410 = fma(_395, _223, fma(_401, _230, _400 * _216));
    float _414 = inversesqrt(dot(vec3(_404, _407, _410), vec3(_404, _407, _410)));
    vec4 _450 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _273) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _274) + cbTextureTilingScale._m0[11u].w));
    float _452 = _450.x;
    float _453 = 1.0 - _452;
    float _460 = ((_452 - _453) * cbMtdParam._m0[24u].z) + _453;
    float _462 = (cbMtdParam._m0[19u].x + dot(vec4(_414 * _404, _414 * _407, _414 * _410, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_460 * cbMtdParam._m0[21u].z);
    float _3511 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _463 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
    float _478 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_460 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3522 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _479 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
    float _483 = ((_463 * (cbMtdParam._m0[17u].x - _334)) * _479) + _334;
    float _484 = ((_463 * (cbMtdParam._m0[17u].y - _335)) * _479) + _335;
    float _485 = ((_463 * (cbMtdParam._m0[17u].z - _336)) * _479) + _336;
    vec4 _498 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _500 = _498.x;
    float _503 = _500 - ((_500 * _463) * _479);
    float _508 = (((_354.z - _384) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _384;
    vec4 _521 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _273) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _274) + cbTextureTilingScale._m0[15u].w));
    float _528 = (_521.x * 2.0) + (-1.0);
    float _529 = (_521.y * 2.0) + (-1.0);
    float _530 = dot(vec2(_528, _529), vec2(_528, _529));
    float _3533 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _539 = (((_521.z - _508) * _463) * _479) + _508;
    float _554 = (((cbMtdParam._m0[21u].x * _400) + ((_528 - _400) * _463)) * _479) + _400;
    float _555 = (((cbMtdParam._m0[21u].x * _401) + ((_529 - _401) * _463)) * _479) + _401;
    float _556 = (((sqrt(1.0 - (isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0)))) - _395) * _463) * _479) + _395;
    float _558 = cbMtdParam._m0[22u].x + _380.w;
    float _561 = fma(_556, _221, fma(_555, _228, _554 * _214));
    float _564 = fma(_556, _222, fma(_555, _229, _554 * _215));
    float _567 = fma(_556, _223, fma(_555, _230, _554 * _216));
    float _571 = inversesqrt(dot(vec3(_561, _564, _567), vec3(_561, _564, _567)));
    float _572 = _571 * _561;
    float _573 = _571 * _564;
    float _574 = _571 * _567;
    float _3544 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _575 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
    float _3555 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _3566 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _3577 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _3588 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _3599 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _580 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
    float _594 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _635 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _645 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _635);
    float _646 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _635);
    float _647 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _635);
    float _651 = inversesqrt(dot(vec3(_645, _646, _647), vec3(_645, _646, _647)));
    float _652 = _645 * _651;
    float _653 = _646 * _651;
    float _654 = _647 * _651;
    float _660 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _661 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _682 = fma(_574, cbSceneParam._m0[5u].z, fma(_573, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _572));
    float _685 = fma(_574, cbSceneParam._m0[6u].z, fma(_573, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _572));
    float _688 = fma(_574, cbSceneParam._m0[7u].z, fma(_573, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _572));
    uint _702 = (_254 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _708 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0)))) * cbInstanceData._m0[_702].x;
    float _709 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0)))) * cbInstanceData._m0[_702].y;
    float _710 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0)))) * cbInstanceData._m0[_702].z;
    float _3610 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _711 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _3621 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _712 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    float _3632 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _713 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
    float _714 = 1.0 - _580;
    float _715 = _711 * _714;
    float _716 = _712 * _714;
    float _717 = _713 * _714;
    float _722 = (_711 + (-0.039999999105930328369140625)) * _580;
    float _723 = (_712 + (-0.039999999105930328369140625)) * _580;
    float _724 = (_713 + (-0.039999999105930328369140625)) * _580;
    float _725 = _722 + 0.039999999105930328369140625;
    float _727 = _723 + 0.039999999105930328369140625;
    float _728 = _724 + 0.039999999105930328369140625;
    vec4 _737 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _660, cbSceneParam._m0[86u].y * _661));
    float _741 = ((isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) * TEXCOORD_5.w) * _737.x;
    float _742 = dot(vec3(_572, _573, _574), vec3(_652, _653, _654));
    float _745 = _742 * 2.0;
    float _749 = (_745 * _572) - _652;
    float _750 = (_745 * _573) - _653;
    float _751 = (_745 * _574) - _654;
    float _755 = abs(dot(vec3(_652, _653, _654), vec3(_572, _573, _574)));
    float _3643 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _757 = sqrt(_575);
    float _770 = exp2((_757 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_757 * 3.0));
    float _776 = (1.0 - _770) * ((_757 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _777 = _770 * _757;
    float _805 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _809 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _813 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1114;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _839 = fma(_813, cbModelParam._m0[26u].z, fma(_809, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _805));
        float _843 = fma(_813, cbModelParam._m0[27u].z, fma(_809, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _805));
        float _847 = fma(_813, cbModelParam._m0[28u].z, fma(_809, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _805));
        float _872 = _805 + _572;
        float _873 = _809 + _573;
        float _874 = _813 + _574;
        float _884 = fma(_874, cbModelParam._m0[26u].z, fma(_873, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _872)) - _839;
        float _885 = fma(_874, cbModelParam._m0[27u].z, fma(_873, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _872)) - _843;
        float _886 = fma(_874, cbModelParam._m0[28u].z, fma(_873, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _872)) - _847;
        float _890 = inversesqrt(dot(vec3(_884, _885, _886), vec3(_884, _885, _886)));
        float _903 = ((_890 * _884) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_839 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _904 = ((_890 * _885) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_843 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _905 = ((_890 * _886) / cbModelParam._m0[34u].z) + ((((((_847 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _908 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        vec4 _915 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        vec4 _922 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        vec4 _929 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        float _942 = exp2((_908.w + (-0.5)) * 20.0) * 2.0;
        float _943 = _942 * (_908.x + (-0.5));
        float _944 = _942 * (_908.y + (-0.5));
        float _945 = _942 * (_908.z + (-0.5));
        float _952 = exp2((_915.w + (-0.5)) * 20.0) * 2.0;
        float _953 = _952 * (_915.x + (-0.5));
        float _954 = _952 * (_915.y + (-0.5));
        float _955 = _952 * (_915.z + (-0.5));
        float _962 = exp2((_922.w + (-0.5)) * 20.0) * 2.0;
        float _963 = _962 * (_922.x + (-0.5));
        float _964 = _962 * (_922.y + (-0.5));
        float _965 = _962 * (_922.z + (-0.5));
        float _972 = exp2((_929.w + (-0.5)) * 20.0) * 2.0;
        float _973 = _972 * (_929.x + (-0.5));
        float _974 = _972 * (_929.y + (-0.5));
        float _975 = _972 * (_929.z + (-0.5));
        float _976 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _977 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _978 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _979 = _943 * 0.5;
        float _980 = _953 * 0.5;
        float _981 = _963 * 0.5;
        float _982 = dot(vec3(_979, _980, _981), vec3(_979, _980, _981));
        float _987 = (_982 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_982);
        float _996 = (dot(vec3(_572, _573, _574), vec3(_987 * _979, _987 * _980, _987 * _981)) + 1.0) * 0.5;
        float _3669 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1006 = sqrt(((_980 * _980) + (_979 * _979)) + (_981 * _981)) / (_976 + 9.9999997473787516355514526367188e-06);
        float _3680 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _1008 = _1007 * 2.0;
        float _1012 = (1.0 - _1007) / (_1007 + 1.0);
        float _3691 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1022 = ((((1.0 - _1013) * (_1008 + 2.0)) * exp2(log2(isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))) * (_1008 + 1.0))) + _1013) * _976;
        float _1023 = _944 * 0.5;
        float _1024 = _954 * 0.5;
        float _1025 = _964 * 0.5;
        float _1026 = dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025));
        float _1031 = (_1026 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1026);
        float _1039 = (dot(vec3(_572, _573, _574), vec3(_1031 * _1023, _1031 * _1024, _1031 * _1025)) + 1.0) * 0.5;
        float _3702 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1048 = sqrt(((_1024 * _1024) + (_1023 * _1023)) + (_1025 * _1025)) / (_977 + 9.9999997473787516355514526367188e-06);
        float _3713 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _1050 = _1049 * 2.0;
        float _1054 = (1.0 - _1049) / (_1049 + 1.0);
        float _3724 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1064 = ((((1.0 - _1055) * (_1050 + 2.0)) * exp2(log2(isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * (_1050 + 1.0))) + _1055) * _977;
        float _1065 = _945 * 0.5;
        float _1066 = _955 * 0.5;
        float _1067 = _965 * 0.5;
        float _1068 = dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067));
        float _1073 = (_1068 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1068);
        float _1081 = (dot(vec3(_572, _573, _574), vec3(_1073 * _1065, _1073 * _1066, _1073 * _1067)) + 1.0) * 0.5;
        float _3735 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1090 = sqrt(((_1066 * _1066) + (_1065 * _1065)) + (_1067 * _1067)) / (_978 + 9.9999997473787516355514526367188e-06);
        float _3746 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1092 = _1091 * 2.0;
        float _1096 = (1.0 - _1091) / (_1091 + 1.0);
        float _3757 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1106 = ((((1.0 - _1097) * (_1092 + 2.0)) * exp2(log2(isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * (_1092 + 1.0))) + _1097) * _978;
        _1114 = _945;
        _1116 = _944;
        _1117 = _943;
        _1118 = _955;
        _1119 = _954;
        _1120 = _953;
        _1121 = _965;
        _1122 = _964;
        _1123 = _963;
        _1124 = _978;
        _1125 = _977;
        _1126 = _976;
        _1127 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0)));
        _1128 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0)));
        _1129 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)));
    }
    else
    {
        _1114 = _1115;
        _1116 = _1115;
        _1117 = _1115;
        _1118 = _1115;
        _1119 = _1115;
        _1120 = _1115;
        _1121 = _1115;
        _1122 = _1115;
        _1123 = _1115;
        _1124 = _1115;
        _1125 = _1115;
        _1126 = _1115;
        _1127 = 0.0;
        _1128 = 0.0;
        _1129 = 0.0;
    }
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1154 = fma(_813, cbModelParam._m0[30u].z, fma(_809, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _805));
        float _1158 = fma(_813, cbModelParam._m0[31u].z, fma(_809, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _805));
        float _1162 = fma(_813, cbModelParam._m0[32u].z, fma(_809, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _805));
        float _1185 = _805 + _572;
        float _1186 = _809 + _573;
        float _1187 = _813 + _574;
        float _1197 = fma(_1187, cbModelParam._m0[30u].z, fma(_1186, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1185)) - _1154;
        float _1198 = fma(_1187, cbModelParam._m0[31u].z, fma(_1186, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1185)) - _1158;
        float _1199 = fma(_1187, cbModelParam._m0[32u].z, fma(_1186, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1185)) - _1162;
        float _1203 = inversesqrt(dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199)));
        float _1216 = ((_1203 * _1197) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1154 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1217 = ((_1203 * _1198) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1158 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1218 = ((_1203 * _1199) / cbModelParam._m0[35u].z) + ((((((_1162 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1216, _1217, _1218), 0.0);
        vec4 _1227 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1216, _1217, _1218), 0.0);
        vec4 _1234 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1216, _1217, _1218), 0.0);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1216, _1217, _1218), 0.0);
        float _1253 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1220.x + (-0.5));
        float _1255 = _1253 * (_1220.y + (-0.5));
        float _1256 = _1253 * (_1220.z + (-0.5));
        float _1263 = exp2((_1227.w + (-0.5)) * 20.0) * 2.0;
        float _1264 = _1263 * (_1227.x + (-0.5));
        float _1265 = _1263 * (_1227.y + (-0.5));
        float _1266 = _1263 * (_1227.z + (-0.5));
        float _1273 = exp2((_1234.w + (-0.5)) * 20.0) * 2.0;
        float _1274 = _1273 * (_1234.x + (-0.5));
        float _1275 = _1273 * (_1234.y + (-0.5));
        float _1276 = _1273 * (_1234.z + (-0.5));
        float _1283 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1284 = _1283 * (_1241.x + (-0.5));
        float _1285 = _1283 * (_1241.y + (-0.5));
        float _1286 = _1283 * (_1241.z + (-0.5));
        float _1287 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1288 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1289 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1290 = _1254 * 0.5;
        float _1291 = _1264 * 0.5;
        float _1292 = _1274 * 0.5;
        float _1293 = dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292));
        float _1298 = (_1293 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1293);
        float _1306 = (dot(vec3(_572, _573, _574), vec3(_1298 * _1290, _1298 * _1291, _1298 * _1292)) + 1.0) * 0.5;
        float _3798 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1315 = sqrt(((_1291 * _1291) + (_1290 * _1290)) + (_1292 * _1292)) / (_1287 + 9.9999997473787516355514526367188e-06);
        float _3809 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1317 = _1316 * 2.0;
        float _1321 = (1.0 - _1316) / (_1316 + 1.0);
        float _3820 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1331 = ((((1.0 - _1322) * (_1317 + 2.0)) * exp2(log2(isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * (_1317 + 1.0))) + _1322) * _1287;
        float _1332 = _1255 * 0.5;
        float _1333 = _1265 * 0.5;
        float _1334 = _1275 * 0.5;
        float _1335 = dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334));
        float _1340 = (_1335 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1335);
        float _1348 = (dot(vec3(_572, _573, _574), vec3(_1340 * _1332, _1340 * _1333, _1340 * _1334)) + 1.0) * 0.5;
        float _3831 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1357 = sqrt(((_1333 * _1333) + (_1332 * _1332)) + (_1334 * _1334)) / (_1288 + 9.9999997473787516355514526367188e-06);
        float _3842 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1359 = _1358 * 2.0;
        float _1363 = (1.0 - _1358) / (_1358 + 1.0);
        float _3853 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1373 = ((((1.0 - _1364) * (_1359 + 2.0)) * exp2(log2(isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * (_1359 + 1.0))) + _1364) * _1288;
        float _1374 = _1256 * 0.5;
        float _1375 = _1266 * 0.5;
        float _1376 = _1276 * 0.5;
        float _1377 = dot(vec3(_1374, _1375, _1376), vec3(_1374, _1375, _1376));
        float _1382 = (_1377 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1377);
        float _1390 = (dot(vec3(_572, _573, _574), vec3(_1382 * _1374, _1382 * _1375, _1382 * _1376)) + 1.0) * 0.5;
        float _3864 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1399 = sqrt(((_1375 * _1375) + (_1374 * _1374)) + (_1376 * _1376)) / (_1289 + 9.9999997473787516355514526367188e-06);
        float _3875 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1401 = _1400 * 2.0;
        float _1405 = (1.0 - _1400) / (_1400 + 1.0);
        float _3886 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1415 = ((((1.0 - _1406) * (_1401 + 2.0)) * exp2(log2(isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * (_1401 + 1.0))) + _1406) * _1289;
        _1423 = _1256;
        _1424 = _1255;
        _1425 = _1254;
        _1426 = _1266;
        _1427 = _1265;
        _1428 = _1264;
        _1429 = _1276;
        _1430 = _1275;
        _1431 = _1274;
        _1432 = _1289;
        _1433 = _1288;
        _1434 = _1287;
        _1435 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)));
        _1436 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)));
        _1437 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)));
    }
    else
    {
        _1423 = _1115;
        _1424 = _1115;
        _1425 = _1115;
        _1426 = _1115;
        _1427 = _1115;
        _1428 = _1115;
        _1429 = _1115;
        _1430 = _1115;
        _1431 = _1115;
        _1432 = _1115;
        _1433 = _1115;
        _1434 = _1115;
        _1435 = 0.0;
        _1436 = 0.0;
        _1437 = 0.0;
    }
    float _1447 = (cbModelParam._m0[1u].x * (_1435 - _1127)) + _1127;
    float _1448 = (cbModelParam._m0[1u].x * (_1436 - _1128)) + _1128;
    float _1449 = (cbModelParam._m0[1u].x * (_1437 - _1129)) + _1129;
    float _1470 = fma(_1449, cbSceneParam._m0[89u].z, fma(_1448, cbSceneParam._m0[89u].y, _1447 * cbSceneParam._m0[89u].x));
    float _1473 = fma(_1449, cbSceneParam._m0[90u].z, fma(_1448, cbSceneParam._m0[90u].y, _1447 * cbSceneParam._m0[90u].x));
    float _1476 = fma(_1449, cbSceneParam._m0[91u].z, fma(_1448, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1447));
    float _1491 = _749 * 0.5;
    float _1492 = _750 * 0.5;
    float _1493 = _751 * 0.5;
    float _1494 = dot(vec4(_1491, _1492, _1493, 1.0), vec4(_1425, _1428, _1431, _1434));
    float _1497 = dot(vec4(_1491, _1492, _1493, 1.0), vec4(_1424, _1427, _1430, _1433));
    float _1500 = dot(vec4(_1491, _1492, _1493, 1.0), vec4(_1423, _1426, _1429, _1432));
    float _1534;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1507 = dot(vec4(_1491, _1492, _1493, 1.0), vec4(_1114, _1118, _1121, _1124));
        float _1511 = dot(vec4(_1491, _1492, _1493, 1.0), vec4(_1116, _1119, _1122, _1125));
        float _1515 = dot(vec4(_1491, _1492, _1493, 1.0), vec4(_1117, _1120, _1123, _1126));
        float _1522 = dot(vec4(cbModelParam._m0[39u]), vec4(_1491, _1492, _1493, 1.0));
        _1534 = dot(vec3(isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)), isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)), isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1522) ? 0.0 : (isnan(0.0) ? _1522 : max(0.0, _1522))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1534 = 1.0;
    }
    float _1545;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1536 = dot(vec4(cbModelParam._m0[40u]), vec4(_1491, _1492, _1493, 1.0));
        _1545 = dot(vec3(isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)), isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)), isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1536) ? 0.0 : (isnan(0.0) ? _1536 : max(0.0, _1536))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1545 = 1.0;
    }
    float _1549 = (_1545 * cbModelParam._m0[1u].x) + (_1534 * (1.0 - cbModelParam._m0[1u].x));
    float _1559 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _575);
    float _1560 = isnan(_1559) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1559 : min(cbModelParam._m0[25u].z, _1559));
    float _1641;
    float _1643;
    float _1645;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1608 = fma(_813, cbModelParam._m0[13u].z, fma(_809, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _805)) + cbModelParam._m0[13u].w;
        float _1612 = fma(_813, cbModelParam._m0[14u].z, fma(_809, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _805)) + cbModelParam._m0[14u].w;
        float _1616 = fma(_813, cbModelParam._m0[15u].z, fma(_809, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _805)) + cbModelParam._m0[15u].w;
        float _1619 = fma(_751, cbModelParam._m0[13u].z, fma(_750, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _749));
        float _1622 = fma(_751, cbModelParam._m0[14u].z, fma(_750, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _749));
        float _1625 = fma(_751, cbModelParam._m0[15u].z, fma(_750, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _749));
        float _1653;
        if (_1619 > 0.0)
        {
            _1653 = abs((1.0 - _1608) / _1619);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1619 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1608 + 1.0) / _1619);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1653 = frontier_phi_14_12_ladder;
        }
        float _1878;
        if (_1622 > 0.0)
        {
            _1878 = abs((1.0 - _1612) / _1622);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1622 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1612 + 1.0) / _1622);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1878 = frontier_phi_23_19_ladder;
        }
        float _2135;
        if (_1625 > 0.0)
        {
            _2135 = abs((1.0 - _1616) / _1625);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1625 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1616 + 1.0) / _1625);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2135 = frontier_phi_35_30_ladder;
        }
        float _2137 = isnan(_1878) ? _1653 : (isnan(_1653) ? _1878 : min(_1653, _1878));
        float _2138 = isnan(_2135) ? _2137 : (isnan(_2137) ? _2135 : min(_2137, _2135));
        float _2142 = (_2138 * _1619) + _1608;
        float _2143 = (_2138 * _1622) + _1612;
        float _2144 = (_2138 * _1625) + _1616;
        float _2145 = _2138 * 9.9999997473787516355514526367188e-05;
        float _2147 = (-1.0) - _2145;
        float _2149 = _2145 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2144 > _2149) || ((_2144 < _2147) || ((_2143 > _2149) || ((_2143 < _2147) || ((_2142 < _2147) || (_2142 > _2149))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2272 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2144, cbModelParam._m0[9u].z, fma(_2143, cbModelParam._m0[9u].y, _2142 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2144, cbModelParam._m0[10u].z, fma(_2143, cbModelParam._m0[10u].y, _2142 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2144, cbModelParam._m0[11u].z, fma(_2143, cbModelParam._m0[11u].y, _2142 * cbModelParam._m0[11u].x))), _1560);
            frontier_phi_13_35_ladder = _2272.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2272.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2272.x * cbModelParam._m0[1u].y;
        }
        _1641 = frontier_phi_13_35_ladder_2;
        _1643 = frontier_phi_13_35_ladder_1;
        _1645 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1629 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_749, _750, _751), _1560);
        _1641 = _1629.x * cbModelParam._m0[1u].y;
        _1643 = _1629.y * cbModelParam._m0[1u].y;
        _1645 = _1629.z * cbModelParam._m0[1u].y;
    }
    float _1649 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _575);
    float _1650 = isnan(_1649) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1649 : min(cbModelParam._m0[25u].w, _1649));
    float _1740;
    float _1742;
    float _1744;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1704 = fma(_813, cbModelParam._m0[21u].z, fma(_809, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _805)) + cbModelParam._m0[21u].w;
        float _1708 = fma(_813, cbModelParam._m0[22u].z, fma(_809, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _805)) + cbModelParam._m0[22u].w;
        float _1712 = fma(_813, cbModelParam._m0[23u].z, fma(_809, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _805)) + cbModelParam._m0[23u].w;
        float _1715 = fma(_751, cbModelParam._m0[21u].z, fma(_750, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _749));
        float _1718 = fma(_751, cbModelParam._m0[22u].z, fma(_750, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _749));
        float _1721 = fma(_751, cbModelParam._m0[23u].z, fma(_750, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _749));
        float _1883;
        if (_1715 > 0.0)
        {
            _1883 = abs((1.0 - _1704) / _1715);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1715 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1704 + 1.0) / _1715);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1883 = frontier_phi_25_21_ladder;
        }
        float _2162;
        if (_1718 > 0.0)
        {
            _2162 = abs((1.0 - _1708) / _1718);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1718 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1708 + 1.0) / _1718);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2162 = frontier_phi_37_32_ladder;
        }
        float _2375;
        if (_1721 > 0.0)
        {
            _2375 = abs((1.0 - _1712) / _1721);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1721 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1712 + 1.0) / _1721);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2375 = frontier_phi_46_43_ladder;
        }
        float _2377 = isnan(_2162) ? _1883 : (isnan(_1883) ? _2162 : min(_1883, _2162));
        float _2378 = isnan(_2375) ? _2377 : (isnan(_2377) ? _2375 : min(_2377, _2375));
        float _2382 = (_2378 * _1715) + _1704;
        float _2383 = (_2378 * _1718) + _1708;
        float _2384 = (_2378 * _1721) + _1712;
        float _2385 = _2378 * 9.9999997473787516355514526367188e-05;
        float _2386 = (-1.0) - _2385;
        float _2388 = _2385 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2384 > _2388) || ((_2384 < _2386) || ((_2383 > _2388) || ((_2383 < _2386) || ((_2382 < _2386) || (_2382 > _2388))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2583 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2384, cbModelParam._m0[17u].z, fma(_2383, cbModelParam._m0[17u].y, _2382 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2384, cbModelParam._m0[18u].z, fma(_2383, cbModelParam._m0[18u].y, _2382 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2384, cbModelParam._m0[19u].z, fma(_2383, cbModelParam._m0[19u].y, _2382 * cbModelParam._m0[19u].x))), _1650);
            frontier_phi_22_46_ladder = _2583.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2583.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2583.x * cbModelParam._m0[1u].z;
        }
        _1740 = frontier_phi_22_46_ladder_2;
        _1742 = frontier_phi_22_46_ladder_1;
        _1744 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1724 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_749, _750, _751), _1650);
        _1740 = _1724.x * cbModelParam._m0[1u].z;
        _1742 = _1724.y * cbModelParam._m0[1u].z;
        _1744 = _1724.z * cbModelParam._m0[1u].z;
    }
    float _1757 = (((_776 * _725) + _777) * _741) * ((cbModelParam._m0[1u].w * (_1740 - _1641)) + _1641);
    float _1759 = (((_776 * _727) + _777) * _741) * ((cbModelParam._m0[1u].w * (_1742 - _1643)) + _1643);
    float _1761 = (((_776 * _728) + _777) * _741) * ((cbModelParam._m0[1u].w * (_1744 - _1645)) + _1645);
    float _1764 = fma(_1761, cbSceneParam._m0[89u].z, fma(_1759, cbSceneParam._m0[89u].y, _1757 * cbSceneParam._m0[89u].x));
    float _1767 = fma(_1761, cbSceneParam._m0[90u].z, fma(_1759, cbSceneParam._m0[90u].y, _1757 * cbSceneParam._m0[90u].x));
    float _1770 = fma(_1761, cbSceneParam._m0[91u].z, fma(_1759, cbSceneParam._m0[91u].y, _1757 * cbSceneParam._m0[91u].x));
    vec4 _1778 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_660, _661));
    float _1780 = _1778.w;
    float _1792 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1780);
    float _1793 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1780);
    float _1794 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1780);
    uvec4 _1798 = floatBitsToUint(cbInstanceData._m0[_254 + 5u]);
    uint _1800 = _1798.x * 14u;
    uint _1801 = _1800 + 13u;
    float _1808 = _741 + (-1.0);
    float _1813 = (cbLight._m0[_1801].x * _1808) + 1.0;
    float _1814 = (cbLight._m0[_1801].y * _1808) + 1.0;
    float _1815 = (cbLight._m0[_1801].z * _1808) + 1.0;
    float _1816 = (cbLight._m0[_1801].w * _1808) + 1.0;
    uint _1817 = _1800 + 5u;
    float _1823 = isnan(1.0) ? _1814 : (isnan(_1814) ? 1.0 : min(_1814, 1.0));
    uint _1827 = _1800 + 4u;
    float _1837 = isnan(1.0) ? _1813 : (isnan(_1813) ? 1.0 : min(_1813, 1.0));
    uint _1841 = _1800 | 1u;
    float _1852 = dot(vec3(cbLight._m0[_1800].xyz), vec3(_572, _573, _574));
    float _1855 = dot(vec3(cbLight._m0[_1841].xyz), vec3(_572, _573, _574));
    float _4022 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _4033 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _1860 = (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * 0.3183098733425140380859375;
    float _1862 = (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * 0.3183098733425140380859375;
    float _1869 = ((cbLight._m0[_1817].x * _1823) * _1862) + (((cbLight._m0[_1827].x * _1792) * _1837) * _1860);
    float _1870 = ((_1823 * cbLight._m0[_1817].y) * _1862) + (((cbLight._m0[_1827].y * _1793) * _1837) * _1860);
    float _1871 = ((_1823 * cbLight._m0[_1817].z) * _1862) + (((cbLight._m0[_1827].z * _1794) * _1837) * _1860);
    uvec4 _1875 = floatBitsToUint(cbLight._m0[_1800 + 12u]);
    bool _1877 = _1875.x == 0u;
    float _1888;
    float _1890;
    float _1892;
    if (_1877)
    {
        _1888 = _1869;
        _1890 = _1870;
        _1892 = _1871;
    }
    else
    {
        uint _1896 = _1800 + 6u;
        float _1912 = (dot(vec3(cbLight._m0[_1800 + 2u].xyz), vec3(_572, _573, _574)) * 0.5) + 0.5;
        float _1913 = _1912 * _1912;
        float _4044 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
        float _1914 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1915 = isnan(1.0) ? _1815 : (isnan(_1815) ? 1.0 : min(_1815, 1.0));
        _1888 = (((cbLight._m0[_1896].x * 0.3183098733425140380859375) * _1914) * _1915) + _1869;
        _1890 = (((cbLight._m0[_1896].y * 0.3183098733425140380859375) * _1914) * _1915) + _1870;
        _1892 = (((cbLight._m0[_1896].z * 0.3183098733425140380859375) * _1914) * _1915) + _1871;
    }
    bool _1895 = _1875.y == 0u;
    float _1933;
    float _1935;
    float _1937;
    if (_1895)
    {
        _1933 = _1888;
        _1935 = _1890;
        _1937 = _1892;
    }
    else
    {
        uint _2106 = _1800 + 7u;
        float _2122 = (dot(vec3(cbLight._m0[_1800 + 3u].xyz), vec3(_572, _573, _574)) * 0.5) + 0.5;
        float _2123 = _2122 * _2122;
        float _4060 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
        float _2124 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _2125 = isnan(1.0) ? _1816 : (isnan(_1816) ? 1.0 : min(_1816, 1.0));
        _1933 = (((cbLight._m0[_2106].x * 0.3183098733425140380859375) * _2124) * _2125) + _1888;
        _1935 = (((cbLight._m0[_2106].y * 0.3183098733425140380859375) * _2124) * _2125) + _1890;
        _1937 = (((cbLight._m0[_2106].z * 0.3183098733425140380859375) * _2124) * _2125) + _1892;
    }
    uint _1940 = _1800 + 8u;
    float _1953 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1800].w)) * _575) * 0.949999988079071044921875);
    float _1954 = _1953 * _1953;
    float _1955 = cbLight._m0[_1800].x + _652;
    float _1956 = cbLight._m0[_1800].y + _653;
    float _1957 = cbLight._m0[_1800].z + _654;
    float _1961 = inversesqrt(dot(vec3(_1955, _1956, _1957), vec3(_1955, _1956, _1957)));
    float _1962 = _1961 * _1955;
    float _1963 = _1961 * _1956;
    float _1964 = _1961 * _1957;
    float _1965 = dot(vec3(_572, _573, _574), vec3(cbLight._m0[_1800].xyz));
    float _4076 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _1968 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _4087 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _1969 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
    float _1970 = dot(vec3(_572, _573, _574), vec3(_1962, _1963, _1964));
    float _4098 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1973 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
    float _1974 = dot(vec3(cbLight._m0[_1800].xyz), vec3(_1962, _1963, _1964));
    float _4109 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
    float _1978 = _1954 * _1954;
    float _1982 = ((_1973 * _1973) * (_1978 + (-1.0))) + 1.0;
    float _1990 = exp2(log2(1.0 - (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0)))) * 5.0);
    float _1991 = 0.959999978542327880859375 - _722;
    float _1993 = 0.959999978542327880859375 - _723;
    float _1994 = 0.959999978542327880859375 - _724;
    float _2001 = 1.0 - _1954;
    float _2012 = (0.5 / (((_1969 * ((_1968 * _2001) + _1954)) + 9.9999999392252902907785028219223e-09) + (((_1969 * _2001) + _1954) * _1968))) * _1968;
    float _4120 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2014 = (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_1978 / ((_1982 * _1982) * 3.141590118408203125));
    uint _2028 = _1800 + 9u;
    float _2039 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1841].w)) * _575) * 0.949999988079071044921875);
    float _2040 = _2039 * _2039;
    float _2041 = cbLight._m0[_1841].x + _652;
    float _2042 = cbLight._m0[_1841].y + _653;
    float _2043 = cbLight._m0[_1841].z + _654;
    float _2047 = inversesqrt(dot(vec3(_2041, _2042, _2043), vec3(_2041, _2042, _2043)));
    float _2048 = _2047 * _2041;
    float _2049 = _2047 * _2042;
    float _2050 = _2047 * _2043;
    float _2051 = dot(vec3(_572, _573, _574), vec3(cbLight._m0[_1841].xyz));
    float _4131 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _2054 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _2055 = dot(vec3(_572, _573, _574), vec3(_2048, _2049, _2050));
    float _4142 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2058 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
    float _2059 = dot(vec3(cbLight._m0[_1841].xyz), vec3(_2048, _2049, _2050));
    float _4153 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2063 = _2040 * _2040;
    float _2067 = ((_2058 * _2058) * (_2063 + (-1.0))) + 1.0;
    float _2074 = exp2(log2(1.0 - (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0)))) * 5.0);
    float _2081 = 1.0 - _2040;
    float _2091 = (0.5 / (((_1969 * ((_2054 * _2081) + _2040)) + 9.9999999392252902907785028219223e-09) + (((_1969 * _2081) + _2040) * _2054))) * _2054;
    float _4164 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2093 = (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_2063 / ((_2067 * _2067) * 3.141590118408203125));
    float _2103 = (((((_2074 * _1991) + _725) * cbLight._m0[_2028].x) * _2093) * _1823) + ((((cbLight._m0[_1940].x * _1792) * ((_1990 * _1991) + _725)) * _2014) * _1837);
    float _2104 = (((((_2074 * _1993) + _727) * cbLight._m0[_2028].y) * _2093) * _1823) + ((((cbLight._m0[_1940].y * _1793) * ((_1990 * _1993) + _727)) * _2014) * _1837);
    float _2105 = (((((_2074 * _1994) + _728) * cbLight._m0[_2028].z) * _2093) * _1823) + ((((cbLight._m0[_1940].z * _1794) * ((_1990 * _1994) + _728)) * _2014) * _1837);
    float _2167;
    float _2169;
    float _2171;
    if (_1877)
    {
        _2167 = _2103;
        _2169 = _2104;
        _2171 = _2105;
    }
    else
    {
        uint _2173 = _1800 + 2u;
        uint _2177 = _1800 + 10u;
        float _2191 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2173].w)) * _575) * 0.949999988079071044921875);
        float _2192 = _2191 * _2191;
        float _2193 = cbLight._m0[_2173].x + _652;
        float _2194 = cbLight._m0[_2173].y + _653;
        float _2195 = cbLight._m0[_2173].z + _654;
        float _2199 = inversesqrt(dot(vec3(_2193, _2194, _2195), vec3(_2193, _2194, _2195)));
        float _2200 = _2199 * _2193;
        float _2201 = _2199 * _2194;
        float _2202 = _2199 * _2195;
        float _2203 = dot(vec3(_572, _573, _574), vec3(cbLight._m0[_2173].xyz));
        float _4175 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        float _2206 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _2207 = dot(vec3(_572, _573, _574), vec3(_2200, _2201, _2202));
        float _4186 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        float _2210 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _2211 = dot(vec3(cbLight._m0[_2173].xyz), vec3(_2200, _2201, _2202));
        float _4197 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        float _2215 = _2192 * _2192;
        float _2219 = ((_2210 * _2210) * (_2215 + (-1.0))) + 1.0;
        float _2226 = exp2(log2(1.0 - (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0)))) * 5.0);
        float _2233 = 1.0 - _2192;
        float _2243 = (0.5 / (((_1969 * ((_2206 * _2233) + _2192)) + 9.9999999392252902907785028219223e-09) + (((_1969 * _2233) + _2192) * _2206))) * _2206;
        float _4208 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        float _2245 = (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_2215 / ((_2219 * _2219) * 3.141590118408203125));
        float _2246 = isnan(1.0) ? _1815 : (isnan(_1815) ? 1.0 : min(_1815, 1.0));
        _2167 = (((((_2226 * _1991) + _725) * cbLight._m0[_2177].x) * _2245) * _2246) + _2103;
        _2169 = (((((_2226 * _1993) + _727) * cbLight._m0[_2177].y) * _2245) * _2246) + _2104;
        _2171 = (((((_2226 * _1994) + _728) * cbLight._m0[_2177].z) * _2245) * _2246) + _2105;
    }
    float _2281;
    float _2283;
    float _2285;
    if (_1895)
    {
        _2281 = _2167;
        _2283 = _2169;
        _2285 = _2171;
    }
    else
    {
        uint _2292 = _1800 + 3u;
        uint _2296 = _1800 + 11u;
        float _2310 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2292].w)) * _575) * 0.949999988079071044921875);
        float _2311 = _2310 * _2310;
        float _2312 = cbLight._m0[_2292].x + _652;
        float _2313 = cbLight._m0[_2292].y + _653;
        float _2314 = cbLight._m0[_2292].z + _654;
        float _2318 = inversesqrt(dot(vec3(_2312, _2313, _2314), vec3(_2312, _2313, _2314)));
        float _2319 = _2318 * _2312;
        float _2320 = _2318 * _2313;
        float _2321 = _2318 * _2314;
        float _2322 = dot(vec3(_572, _573, _574), vec3(cbLight._m0[_2292].xyz));
        float _4224 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2325 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _2326 = dot(vec3(_572, _573, _574), vec3(_2319, _2320, _2321));
        float _4235 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        float _2329 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _2330 = dot(vec3(cbLight._m0[_2292].xyz), vec3(_2319, _2320, _2321));
        float _4246 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2334 = _2311 * _2311;
        float _2338 = ((_2329 * _2329) * (_2334 + (-1.0))) + 1.0;
        float _2345 = exp2(log2(1.0 - (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0)))) * 5.0);
        float _2352 = 1.0 - _2311;
        float _2362 = (0.5 / (((_1969 * ((_2325 * _2352) + _2311)) + 9.9999999392252902907785028219223e-09) + (((_1969 * _2352) + _2311) * _2325))) * _2325;
        float _4257 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        float _2364 = (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * (_2334 / ((_2338 * _2338) * 3.141590118408203125));
        float _2365 = isnan(1.0) ? _1816 : (isnan(_1816) ? 1.0 : min(_1816, 1.0));
        _2281 = (((((_2345 * _1991) + _725) * cbLight._m0[_2296].x) * _2364) * _2365) + _2167;
        _2283 = (((((_2345 * _1993) + _727) * cbLight._m0[_2296].y) * _2364) * _2365) + _2169;
        _2285 = (((((_2345 * _1994) + _728) * cbLight._m0[_2296].z) * _2364) * _2365) + _2171;
    }
    float _2500;
    float _2502;
    float _2504;
    float _2506;
    float _2508;
    float _2510;
    if (_1798.y == 0u)
    {
        float _2440 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2441 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2440;
        float _2442 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2440;
        float _2443 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2440;
        uvec4 _2455 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2456 = _2455.x;
        uint _2467 = uint((float(_2455.y) * floor(float(uint(cbSceneParam._m0[85u].y * _661) / _2456))) + floor(float(uint(cbSceneParam._m0[85u].x * _660) / _2456)));
        float _2477 = (log2(_2443 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2478 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        uint _2481 = uint(isnan(14.0) ? _2478 : (isnan(_2478) ? 14.0 : min(_2478, 14.0)));
        uvec4 _2486 = texelFetch(g_lightClusterGridBuffer, int(((_2481 << 2u) + (_2467 << 6u)) >> 2u));
        uint _2487 = _2486.x;
        uint _2488 = _2455.z;
        float _2588;
        float _2590;
        float _2592;
        float _2594;
        float _2596;
        float _2598;
        if (((((1u << ((_2488 >> 4u) & 15u)) + 4294967295u) & _2487) == 0u) || ((_2488 & 240u) == 0u))
        {
            _2588 = 0.0;
            _2590 = 0.0;
            _2592 = 0.0;
            _2594 = 0.0;
            _2596 = 0.0;
            _2598 = 0.0;
        }
        else
        {
            float _2589;
            float _2591;
            float _2593;
            float _2595;
            float _2597;
            float _2599;
            float _2733 = 0.0;
            float _2734 = 0.0;
            float _2735 = 0.0;
            float _2736 = 0.0;
            float _2737 = 0.0;
            float _2738 = 0.0;
            uint _2739 = 0u;
            uint _2748;
            bool _2749;
            for (;;)
            {
                _2748 = texelFetch(g_lightClassification, int((((_2481 << 5u) + (_2467 << 9u)) + (_2739 << 2u)) >> 2u)).x;
                _2749 = _2748 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2749)
                {
                    frontier_phi_61_pred = _2733;
                    frontier_phi_61_pred_1 = _2738;
                    frontier_phi_61_pred_2 = _2737;
                    frontier_phi_61_pred_3 = _2736;
                    frontier_phi_61_pred_4 = _2735;
                    frontier_phi_61_pred_5 = _2734;
                }
                else
                {
                    float _2857;
                    float _2858;
                    float _2859;
                    float _2860;
                    float _2861;
                    float _2862;
                    uint _2863;
                    _2857 = _2733;
                    _2858 = _2734;
                    _2859 = _2735;
                    _2860 = _2736;
                    _2861 = _2737;
                    _2862 = _2738;
                    _2863 = _2748;
                    float _2789;
                    float _2790;
                    float _2791;
                    float _2792;
                    float _2793;
                    float _2794;
                    for (;;)
                    {
                        uint _2867 = uint(findLSB(_2863)) + (_2739 << 5u);
                        uint _2864 = (_2863 + 4294967295u) & _2863;
                        uint _2869 = _2867 * 48u;
                        vec4 _2883 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2869)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 3u)).x));
                        uint _2889 = (_2867 * 48u) + 4u;
                        vec4 _2902 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2889)).x, texelFetch(g_PointLightRenderingBuffer, int(_2889 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2889 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2889 + 3u)).x));
                        uint _2908 = (_2867 * 48u) + 8u;
                        vec3 _2919 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2908)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 2u)).x));
                        float _2923 = _2883.x - _2441;
                        float _2924 = _2883.y - _2442;
                        float _2925 = _2883.z - _2443;
                        float _2926 = dot(vec3(_2923, _2924, _2925), vec3(_2923, _2924, _2925));
                        float _2929 = inversesqrt(_2926);
                        float _2930 = _2929 * _2923;
                        float _2931 = _2929 * _2924;
                        float _2932 = _2929 * _2925;
                        float _2933 = dot(vec3(_682, _685, _688), vec3(_2930, _2931, _2932));
                        float _2938 = 1.0 - (_2926 * _2883.w);
                        float _4283 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
                        float _2939 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
                        float _2940 = sqrt(_2926) * _2902.w;
                        float _2943 = 1.39999997615814208984375 / (_2940 + 1.39999997615814208984375);
                        float _2944 = _2943 * _2943;
                        float _2947 = ((1.0 - _2944) * _2933) + _2944;
                        float _2950 = _2940 * _2940;
                        float _2954 = ((isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0))) * _2939) / ((_2950 * 0.699999988079071044921875) + 1.0);
                        float _2958 = (-0.0) - _2441;
                        float _2959 = (-0.0) - _2442;
                        float _2960 = (-0.0) - _2443;
                        float _2964 = inversesqrt(dot(vec3(_2958, _2959, _2960), vec3(_2958, _2959, _2960)));
                        float _2965 = _2964 * _2958;
                        float _2966 = _2964 * _2959;
                        float _2967 = _2964 * _2960;
                        float _2975 = exp2(log2(1.0 / ((_2950 * 3.5) + 5.0)) * 0.25);
                        float _2976 = 1.0 - _757;
                        float _2983 = sqrt(1.0 - ((1.0 - (_2976 * _2976)) * (1.0 - (_2975 * _2975))));
                        float _2984 = _2983 * _2983;
                        float _2985 = _2984 * _2984;
                        float _2986 = _2965 + _2930;
                        float _2987 = _2966 + _2931;
                        float _2988 = _2967 + _2932;
                        float _2992 = inversesqrt(dot(vec3(_2986, _2987, _2988), vec3(_2986, _2987, _2988)));
                        float _2996 = dot(vec3(_682, _685, _688), vec3(_2965, _2966, _2967));
                        float _4299 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
                        float _2999 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
                        float _3000 = dot(vec3(_682, _685, _688), vec3(_2992 * _2986, _2992 * _2987, _2992 * _2988));
                        float _4310 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
                        float _3003 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
                        float _3007 = ((_3003 * _3003) * (_2985 + (-1.0))) + 1.0;
                        float _3008 = _2943 * _2984;
                        float _3009 = _3008 * _3008;
                        float _3012 = ((1.0 - _3009) * _2933) + _3009;
                        float _4321 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                        float _3013 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
                        float _3014 = 1.0 - _2984;
                        float _3024 = (0.5 / (((_3013 * ((_2999 * _3014) + _2984)) + 9.9999999392252902907785028219223e-09) + (((_3013 * _3014) + _2984) * _2999))) * _3013;
                        float _4332 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                        float _3035 = (((_2985 * 3.1415927410125732421875) * (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0)))) / ((_3007 * _3007) * ((_2950 * 2.1991131305694580078125) + 3.141590118408203125))) * _2939;
                        _2792 = (_2954 * _2902.x) + _2860;
                        _2793 = (_2954 * _2902.y) + _2861;
                        _2794 = (_2954 * _2902.z) + _2862;
                        _2789 = (_3035 * _2919.x) + _2857;
                        _2790 = (_3035 * _2919.y) + _2858;
                        _2791 = (_3035 * _2919.z) + _2859;
                        if (_2864 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2857 = _2789;
                            _2858 = _2790;
                            _2859 = _2791;
                            _2860 = _2792;
                            _2861 = _2793;
                            _2862 = _2794;
                            _2863 = _2864;
                        }
                    }
                    frontier_phi_61_pred = _2789;
                    frontier_phi_61_pred_1 = _2794;
                    frontier_phi_61_pred_2 = _2793;
                    frontier_phi_61_pred_3 = _2792;
                    frontier_phi_61_pred_4 = _2791;
                    frontier_phi_61_pred_5 = _2790;
                }
                _2589 = frontier_phi_61_pred;
                _2599 = frontier_phi_61_pred_1;
                _2597 = frontier_phi_61_pred_2;
                _2595 = frontier_phi_61_pred_3;
                _2593 = frontier_phi_61_pred_4;
                _2591 = frontier_phi_61_pred_5;
                uint _2740 = _2739 + 1u;
                if (_2740 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2733 = _2589;
                    _2734 = _2591;
                    _2735 = _2593;
                    _2736 = _2595;
                    _2737 = _2597;
                    _2738 = _2599;
                    _2739 = _2740;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2588 = _2589;
            _2590 = _2591;
            _2592 = _2593;
            _2594 = _2595;
            _2596 = _2597;
            _2598 = _2599;
        }
        uvec4 _2602 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2603 = _2602.z;
        uint _2605 = (_2603 >> 8u) & 15u;
        float _2701;
        float _2703;
        float _2705;
        float _2707;
        float _2709;
        float _2711;
        if (((4294967295u << _2605) & _2487) == 0u)
        {
            _2701 = _2588;
            _2703 = _2590;
            _2705 = _2592;
            _2707 = _2594;
            _2709 = _2596;
            _2711 = _2598;
        }
        else
        {
            float _2726 = inversesqrt(dot(vec3(_2441, _2442, _2443), vec3(_2441, _2442, _2443)));
            float _2727 = _2726 * _2441;
            float _2728 = _2726 * _2442;
            float _2729 = _2726 * _2443;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2605 < ((_2603 >> 12u) & 15u))
            {
                float _2702;
                float _2704;
                float _2706;
                float _2708;
                float _2710;
                float _2712;
                float _2840 = _2588;
                float _2841 = _2590;
                float _2842 = _2592;
                float _2843 = _2594;
                float _2844 = _2596;
                float _2845 = _2598;
                uint _2846 = _2605;
                uint _2855;
                bool _2856;
                for (;;)
                {
                    _2855 = texelFetch(g_lightClassification, int((((_2481 << 5u) + (_2467 << 9u)) + (_2846 << 2u)) >> 2u)).x;
                    _2856 = _2855 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2856)
                    {
                        frontier_phi_67_pred = _2843;
                        frontier_phi_67_pred_1 = _2844;
                        frontier_phi_67_pred_2 = _2845;
                        frontier_phi_67_pred_3 = _2842;
                        frontier_phi_67_pred_4 = _2841;
                        frontier_phi_67_pred_5 = _2840;
                    }
                    else
                    {
                        float _3040;
                        float _3041;
                        float _3042;
                        float _3043;
                        float _3044;
                        float _3045;
                        float _3333;
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3053 = _2840;
                        float _3054 = _2841;
                        float _3055 = _2842;
                        float _3056 = _2843;
                        float _3057 = _2844;
                        float _3058 = _2845;
                        uint _3059 = _2855;
                        uint _3060;
                        vec4 _3085;
                        float _3086;
                        vec4 _3101;
                        vec3 _3113;
                        vec4 _3128;
                        vec4 _3143;
                        float _3189;
                        bool _3190;
                        for (;;)
                        {
                            uint _3070 = ((_2846 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3059));
                            _3060 = (_3059 + 4294967295u) & _3059;
                            uint _3072 = _3070 * 40u;
                            _3085 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3072)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 3u)).x));
                            _3086 = _3085.w;
                            uint _3088 = (_3070 * 40u) + 4u;
                            _3101 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3088)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 3u)).x));
                            uint _3103 = (_3070 * 40u) + 8u;
                            _3113 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3103)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 2u)).x));
                            uint _3115 = (_3070 * 40u) + 16u;
                            _3128 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 3u)).x));
                            uint _3130 = (_3070 * 40u) + 20u;
                            _3143 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3130)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 3u)).x));
                            uint _3145 = (_3070 * 40u) + 24u;
                            vec4 _3158 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3145)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 3u)).x));
                            uint _3164 = (_3070 * 40u) + 28u;
                            vec4 _3177 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3164)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 3u)).x));
                            _3189 = fma(_2443, _3177.z, fma(_2442, _3177.y, _3177.x * _2441)) + _3177.w;
                            _3190 = !((fma(_2443, _3158.z, fma(_2442, _3158.y, _3158.x * _2441)) + _3158.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3190)
                            {
                                float _3217 = _3085.x - _2441;
                                float _3218 = _3085.y - _2442;
                                float _3219 = _3085.z - _2443;
                                float _3220 = dot(vec3(_3217, _3218, _3219), vec3(_3217, _3218, _3219));
                                float _3223 = inversesqrt(_3220);
                                float _3224 = _3223 * _3217;
                                float _3225 = _3223 * _3218;
                                float _3226 = _3223 * _3219;
                                float _3230 = 1.0 - (_3220 / (_3086 * _3086));
                                float _4343 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                                float _3231 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
                                float _3235 = sqrt(_3220) * _3101.w;
                                float _3237 = 1.39999997615814208984375 / (_3235 + 1.39999997615814208984375);
                                float _3238 = _3237 * _3237;
                                float _3241 = ((1.0 - _3238) * dot(vec3(_3224, _3225, _3226), vec3(_682, _685, _688))) + _3238;
                                float _3244 = _3235 * _3235;
                                float _3248 = (fma(_2443, _3128.z, fma(_2442, _3128.y, _3128.x * _2441)) + _3128.w) / _3189;
                                float _3249 = (fma(_2443, _3143.z, fma(_2442, _3143.y, _3143.x * _2441)) + _3143.w) / _3189;
                                float _3253 = 1.0 - dot(vec2(_3248, _3249), vec2(_3248, _3249));
                                float _4359 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                                float _3254 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
                                float _3255 = _3254 * (((isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0))) * _3231) / ((_3244 * 0.699999988079071044921875) + 1.0));
                                float _3267 = exp2(log2(1.0 / ((_3244 * 3.5) + 5.0)) * 0.25);
                                float _3268 = 1.0 - _757;
                                float _3275 = sqrt(1.0 - ((1.0 - (_3268 * _3268)) * (1.0 - (_3267 * _3267))));
                                float _3276 = _3275 * _3275;
                                float _3277 = _3276 * _3276;
                                float _3278 = _3224 - _2727;
                                float _3279 = _3225 - _2728;
                                float _3280 = _3226 - _2729;
                                float _3284 = inversesqrt(dot(vec3(_3278, _3279, _3280), vec3(_3278, _3279, _3280)));
                                float _3288 = dot(vec3(_682, _685, _688), vec3((-0.0) - _2727, (-0.0) - _2728, (-0.0) - _2729));
                                float _4370 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                                float _3291 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
                                float _3292 = dot(vec3(_682, _685, _688), vec3(_3284 * _3278, _3284 * _3279, _3284 * _3280));
                                float _4381 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                                float _3295 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
                                float _3299 = ((_3295 * _3295) * (_3277 + (-1.0))) + 1.0;
                                float _3300 = _3237 * _3276;
                                float _3301 = _3300 * _3300;
                                float _3307 = ((1.0 - _3301) * dot(vec3(_682, _685, _688), vec3(_3224, _3225, _3226))) + _3301;
                                float _4392 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                                float _3308 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
                                float _3309 = 1.0 - _3276;
                                float _3319 = (0.5 / (((_3308 * ((_3291 * _3309) + _3276)) + 9.9999999392252902907785028219223e-09) + (((_3308 * _3309) + _3276) * _3291))) * _3308;
                                float _4403 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                                float _3329 = (_3254 * _3231) * (((_3277 * 3.1415927410125732421875) * (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0)))) / ((_3299 * _3299) * ((_3244 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3329 * _3113.x;
                                frontier_phi_73_pred_1 = _3329 * _3113.y;
                                frontier_phi_73_pred_2 = _3255 * _3101.z;
                                frontier_phi_73_pred_3 = _3255 * _3101.y;
                                frontier_phi_73_pred_4 = _3255 * _3101.x;
                                frontier_phi_73_pred_5 = _3329 * _3113.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3333 = frontier_phi_73_pred;
                            _3334 = frontier_phi_73_pred_1;
                            _3338 = frontier_phi_73_pred_2;
                            _3337 = frontier_phi_73_pred_3;
                            _3336 = frontier_phi_73_pred_4;
                            _3335 = frontier_phi_73_pred_5;
                            _3043 = _3336 + _3056;
                            _3044 = _3337 + _3057;
                            _3045 = _3338 + _3058;
                            _3040 = _3333 + _3053;
                            _3041 = _3334 + _3054;
                            _3042 = _3335 + _3055;
                            if (_3060 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3053 = _3040;
                                _3054 = _3041;
                                _3055 = _3042;
                                _3056 = _3043;
                                _3057 = _3044;
                                _3058 = _3045;
                                _3059 = _3060;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3043;
                        frontier_phi_67_pred_1 = _3044;
                        frontier_phi_67_pred_2 = _3045;
                        frontier_phi_67_pred_3 = _3042;
                        frontier_phi_67_pred_4 = _3041;
                        frontier_phi_67_pred_5 = _3040;
                    }
                    _2708 = frontier_phi_67_pred;
                    _2710 = frontier_phi_67_pred_1;
                    _2712 = frontier_phi_67_pred_2;
                    _2706 = frontier_phi_67_pred_3;
                    _2704 = frontier_phi_67_pred_4;
                    _2702 = frontier_phi_67_pred_5;
                    uint _2847 = _2846 + 1u;
                    if (_2847 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2840 = _2702;
                        _2841 = _2704;
                        _2842 = _2706;
                        _2843 = _2708;
                        _2844 = _2710;
                        _2845 = _2712;
                        _2846 = _2847;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2710;
                frontier_phi_55_56_ladder_1 = _2712;
                frontier_phi_55_56_ladder_2 = _2708;
                frontier_phi_55_56_ladder_3 = _2706;
                frontier_phi_55_56_ladder_4 = _2704;
                frontier_phi_55_56_ladder_5 = _2702;
            }
            else
            {
                frontier_phi_55_56_ladder = _2596;
                frontier_phi_55_56_ladder_1 = _2598;
                frontier_phi_55_56_ladder_2 = _2594;
                frontier_phi_55_56_ladder_3 = _2592;
                frontier_phi_55_56_ladder_4 = _2590;
                frontier_phi_55_56_ladder_5 = _2588;
            }
            _2701 = frontier_phi_55_56_ladder_5;
            _2703 = frontier_phi_55_56_ladder_4;
            _2705 = frontier_phi_55_56_ladder_3;
            _2707 = frontier_phi_55_56_ladder_2;
            _2709 = frontier_phi_55_56_ladder;
            _2711 = frontier_phi_55_56_ladder_1;
        }
        float _2716 = isnan(1.0) ? _741 : (isnan(_741) ? 1.0 : min(_741, 1.0));
        _2500 = (_2716 * _2707) + _1933;
        _2502 = (_2716 * _2709) + _1935;
        _2504 = (_2716 * _2711) + _1937;
        _2506 = ((_2701 * _725) * _2716) + _2281;
        _2508 = ((_2703 * _727) * _2716) + _2283;
        _2510 = ((_2705 * _728) * _2716) + _2285;
    }
    else
    {
        _2500 = _1933;
        _2502 = _1935;
        _2504 = _1937;
        _2506 = _2281;
        _2508 = _2283;
        _2510 = _2285;
    }
    float _4419 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _4430 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _4441 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    uint _2530 = _254 + 6u;
    float _2538 = _660 / cbSceneParam._m0[86u].x;
    float _2539 = _661 / cbSceneParam._m0[86u].y;
    vec4 _2553 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2538, _2539, (log2((isnan(cbSceneParam._m0[77u].w) ? _594 : (isnan(_594) ? cbSceneParam._m0[77u].w : min(_594, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2555 = _2553.x;
    float _2556 = _2553.y;
    float _2557 = _2553.z;
    float _2558 = _2553.w;
    float _2651;
    float _2653;
    float _2655;
    float _2657;
    if (_594 > cbSceneParam._m0[78u].w)
    {
        float _2613 = isnan(_594) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _594 : min(cbSceneParam._m0[80u].w, _594));
        float _2614 = _2613 / _594;
        float _2625 = _2614 * _645;
        float _2626 = _646 * _2614;
        float _2627 = (-0.0) - _2626;
        float _2629 = _2614 * _647;
        float _2631 = (cbSceneParam._m0[77u].w * _2627) / _2613;
        float _2632 = _2631 + cbSceneParam._m0[79u].w;
        float _2633 = cbSceneParam._m0[79u].w - _2626;
        float _2639 = sqrt(((_2625 * _2625) + (_2626 * _2626)) + (_2629 * _2629));
        float _2642 = (1.0 - (cbSceneParam._m0[77u].w / _2613)) * _2639;
        float _2647 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2649 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2802;
        if (abs((_2627 - _2631) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2802 = ((((_2632 > 0.0) ? exp2(_2647 * _2632) : (2.0 - exp2(_2649 * _2632))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2642;
        }
        else
        {
            float _2762 = 1.0 / cbSceneParam._m0[80u].x;
            float _2763 = isnan(_2633) ? _2632 : (isnan(_2632) ? _2633 : max(_2632, _2633));
            float _2764 = isnan(_2633) ? _2632 : (isnan(_2632) ? _2633 : min(_2632, _2633));
            float _2773 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : min(_2763, 0.0));
            float _2774 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : min(_2764, 0.0));
            _2802 = ((abs(_2639 / _2627) * cbSceneParam._m0[80u].y) * ((((_2773 - _2774) * 2.0) - ((exp2(_2647 * (isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0)))) - exp2(_2647 * (isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0))))) * _2762)) - ((exp2(_2649 * _2773) - exp2(_2649 * _2774)) * _2762))) + (_2642 * cbSceneParam._m0[80u].z);
        }
        vec4 _2804 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2538, _2539, 1.0), 0.0);
        float _2813 = exp2((_2802 * (-1.44269502162933349609375)) * (1.0 - _2804.w));
        float _2814 = log2(_2813);
        float _2830 = log2(_2558);
        _2651 = (exp2(_2830 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2814 * cbSceneParam._m0[78u].x)) * _2804.x) / cbSceneParam._m0[78u].x)) + _2555;
        _2653 = (exp2(_2830 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2814 * cbSceneParam._m0[78u].y)) * _2804.y) / cbSceneParam._m0[78u].y)) + _2556;
        _2655 = (exp2(_2830 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2814 * cbSceneParam._m0[78u].z)) * _2804.z) / cbSceneParam._m0[78u].z)) + _2557;
        _2657 = _2813 * _2558;
    }
    else
    {
        _2651 = _2555;
        _2653 = _2556;
        _2655 = _2557;
        _2657 = _2558;
    }
    float _2669 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2670 = _2669 == 3.0;
    float _2671 = log2(_2657);
    float _2678 = exp2(_2671 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * (_2500 + ((isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0))) * _741))) + ((_2506 + ((isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))) * _1549)) * cbPerFrame._m0[3u].x));
    float _2679 = exp2(_2671 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_2502 + ((isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0))) * _741))) + ((_2508 + ((isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))) * _1549)) * cbPerFrame._m0[3u].x));
    float _2680 = exp2(_2671 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_2504 + ((isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0))) * _741))) + ((_2510 + ((isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))) * _1549)) * cbPerFrame._m0[3u].x));
    float _2689 = (_2669 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2689 * (_2670 ? _2678 : (_2678 + (cbSceneParam._m0[72u].w * _2651)));
    SV_Target.y = _2689 * (_2670 ? _2679 : (_2679 + (cbSceneParam._m0[72u].w * _2653)));
    SV_Target.z = _2689 * (_2670 ? _2680 : (_2680 + (cbSceneParam._m0[72u].w * _2655)));
    SV_Target.w = cbInstanceData._m0[_2530].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2530].w;
}


