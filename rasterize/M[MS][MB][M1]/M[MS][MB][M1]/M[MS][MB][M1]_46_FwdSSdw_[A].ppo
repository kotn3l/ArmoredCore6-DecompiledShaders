#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1107;
float _3512;
float _3513;
float _3514;
float _3515;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _213 = _212 * _204;
    float _214 = _212 * _205;
    float _215 = _212 * _206;
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _227 = _226 * TANGENT.x;
    float _228 = _226 * TANGENT.y;
    float _229 = _226 * TANGENT.z;
    uint _232 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _232 + 1u;
    uint _242 = _232 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _272 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _278 = _272.x * cbMtdParam._m0[9u].x;
    float _279 = _272.y * cbMtdParam._m0[9u].y;
    float _280 = _272.z * cbMtdParam._m0[9u].z;
    vec4 _299 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _252) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _253) + cbTextureTilingScale._m0[14u].w));
    vec4 _319 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _252) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _253) + cbTextureTilingScale._m0[20u].w));
    vec4 _345 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _349 = _345.z;
    float _353 = (_345.x * 2.0) + (-1.0);
    float _354 = (_345.y * 2.0) + (-1.0);
    float _355 = dot(vec2(_353, _354), vec2(_353, _354));
    float _3524 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _361 = sqrt(1.0 - (isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0))));
    float _366 = _353 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_319.x * 2.0) + (-1.0)));
    float _367 = _354 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_319.y * 2.0) + (-1.0)));
    float _370 = fma(_361, _220, fma(_367, _227, _366 * _213));
    float _373 = fma(_361, _221, fma(_367, _228, _366 * _214));
    float _376 = fma(_361, _222, fma(_367, _229, _366 * _215));
    float _380 = inversesqrt(dot(vec3(_370, _373, _376), vec3(_370, _373, _376)));
    vec4 _416 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _252) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _253) + cbTextureTilingScale._m0[11u].w));
    float _418 = _416.x;
    float _419 = 1.0 - _418;
    float _428 = (cbMtdParam._m0[19u].x + dot(vec4(_380 * _370, _380 * _373, _380 * _376, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_418 - _419) * cbMtdParam._m0[24u].z) + _419) * cbMtdParam._m0[21u].z);
    float _3535 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _429 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
    float _436 = (_429 * ((_299.x * cbMtdParam._m0[18u].x) - _278)) + _278;
    float _437 = (_429 * ((_299.y * cbMtdParam._m0[18u].y) - _279)) + _279;
    float _438 = (_429 * ((_299.z * cbMtdParam._m0[18u].z) - _280)) + _280;
    vec4 _451 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _453 = _451.x;
    float _455 = _453 - (_453 * _429);
    float _460 = (((_319.z - _349) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _349;
    vec4 _473 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _252) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _253) + cbTextureTilingScale._m0[15u].w));
    float _480 = (_473.x * 2.0) + (-1.0);
    float _481 = (_473.y * 2.0) + (-1.0);
    float _482 = dot(vec2(_480, _481), vec2(_480, _481));
    float _3546 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _490 = ((_473.z - _460) * _429) + _460;
    float _500 = ((sqrt(1.0 - (isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0)))) - _361) * _429) + _361;
    float _503 = (((_480 - _366) * _429) + _366) + (cbMtdParam._m0[21u].x * _366);
    float _504 = (((_481 - _367) * _429) + _367) + (cbMtdParam._m0[21u].x * _367);
    float _509 = cbMtdParam._m0[22u].x + _345.w;
    float _512 = fma(_500, _220, fma(_504, _227, _503 * _213));
    float _515 = fma(_500, _221, fma(_504, _228, _503 * _214));
    float _518 = fma(_500, _222, fma(_504, _229, _503 * _215));
    float _522 = inversesqrt(dot(vec3(_512, _515, _518), vec3(_512, _515, _518)));
    float _523 = _522 * _512;
    float _524 = _522 * _515;
    float _525 = _522 * _518;
    float _3557 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _526 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
    float _3568 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _3579 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _3590 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _3601 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _3612 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _531 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
    float _545 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _586 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _596 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _586);
    float _597 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _586);
    float _598 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _586);
    float _602 = inversesqrt(dot(vec3(_596, _597, _598), vec3(_596, _597, _598)));
    float _603 = _596 * _602;
    float _604 = _597 * _602;
    float _605 = _598 * _602;
    vec4 _610 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _612 = _610.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _787 = sqrt(((_596 * _596) + (_597 * _597)) + (_598 * _598));
        float _793 = (cbMatDynParam._m0[5u].x * _787) + cbMatDynParam._m0[5u].y;
        float _3623 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _794 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _798 = (cbMatDynParam._m0[5u].z * _787) + cbMatDynParam._m0[5u].w;
        float _3634 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) - _794)) + _794) < ((_612 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _624 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _625 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _645 = fma(_525, cbSceneParam._m0[5u].z, fma(_524, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _523));
    float _648 = fma(_525, cbSceneParam._m0[6u].z, fma(_524, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _523));
    float _651 = fma(_525, cbSceneParam._m0[7u].z, fma(_524, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _523));
    uint _664 = _232 + 9u;
    uint _665 = _664 + uint(cbMatDynParam._m0[0u].w);
    float _671 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0)))) * cbInstanceData._m0[_665].x;
    float _672 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0)))) * cbInstanceData._m0[_665].y;
    float _673 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0)))) * cbInstanceData._m0[_665].z;
    float _3645 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _674 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
    float _3656 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _675 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
    float _3667 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _676 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
    float _677 = 1.0 - _531;
    float _678 = _674 * _677;
    float _679 = _675 * _677;
    float _680 = _676 * _677;
    float _685 = (_674 + (-0.039999999105930328369140625)) * _531;
    float _686 = (_675 + (-0.039999999105930328369140625)) * _531;
    float _687 = (_676 + (-0.039999999105930328369140625)) * _531;
    float _688 = _685 + 0.039999999105930328369140625;
    float _690 = _686 + 0.039999999105930328369140625;
    float _691 = _687 + 0.039999999105930328369140625;
    vec4 _700 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _624, cbSceneParam._m0[86u].y * _625));
    float _704 = ((isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0))) * TEXCOORD_5.w) * _700.x;
    float _705 = dot(vec3(_523, _524, _525), vec3(_603, _604, _605));
    float _708 = _705 * 2.0;
    float _712 = (_708 * _523) - _603;
    float _713 = (_708 * _524) - _604;
    float _714 = (_708 * _525) - _605;
    float _718 = abs(dot(vec3(_603, _604, _605), vec3(_523, _524, _525)));
    float _3678 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _720 = sqrt(_526);
    float _733 = exp2((_720 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_720 * 3.0));
    float _739 = (1.0 - _733) * ((_720 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _740 = _733 * _720;
    float _768 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _772 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _776 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1106;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _831 = fma(_776, cbModelParam._m0[26u].z, fma(_772, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _768));
        float _835 = fma(_776, cbModelParam._m0[27u].z, fma(_772, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _768));
        float _839 = fma(_776, cbModelParam._m0[28u].z, fma(_772, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _768));
        float _864 = _768 + _523;
        float _865 = _772 + _524;
        float _866 = _776 + _525;
        float _876 = fma(_866, cbModelParam._m0[26u].z, fma(_865, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _864)) - _831;
        float _877 = fma(_866, cbModelParam._m0[27u].z, fma(_865, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _864)) - _835;
        float _878 = fma(_866, cbModelParam._m0[28u].z, fma(_865, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _864)) - _839;
        float _882 = inversesqrt(dot(vec3(_876, _877, _878), vec3(_876, _877, _878)));
        float _895 = ((_882 * _876) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_831 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _896 = ((_882 * _877) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_835 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _897 = ((_882 * _878) / cbModelParam._m0[34u].z) + ((((((_839 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _900 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_895, _896, _897), 0.0);
        vec4 _907 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_895, _896, _897), 0.0);
        vec4 _914 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_895, _896, _897), 0.0);
        vec4 _921 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_895, _896, _897), 0.0);
        float _934 = exp2((_900.w + (-0.5)) * 20.0) * 2.0;
        float _935 = _934 * (_900.x + (-0.5));
        float _936 = _934 * (_900.y + (-0.5));
        float _937 = _934 * (_900.z + (-0.5));
        float _944 = exp2((_907.w + (-0.5)) * 20.0) * 2.0;
        float _945 = _944 * (_907.x + (-0.5));
        float _946 = _944 * (_907.y + (-0.5));
        float _947 = _944 * (_907.z + (-0.5));
        float _954 = exp2((_914.w + (-0.5)) * 20.0) * 2.0;
        float _955 = _954 * (_914.x + (-0.5));
        float _956 = _954 * (_914.y + (-0.5));
        float _957 = _954 * (_914.z + (-0.5));
        float _964 = exp2((_921.w + (-0.5)) * 20.0) * 2.0;
        float _965 = _964 * (_921.x + (-0.5));
        float _966 = _964 * (_921.y + (-0.5));
        float _967 = _964 * (_921.z + (-0.5));
        float _968 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _969 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _970 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _971 = _935 * 0.5;
        float _972 = _945 * 0.5;
        float _973 = _955 * 0.5;
        float _974 = dot(vec3(_971, _972, _973), vec3(_971, _972, _973));
        float _979 = (_974 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_974);
        float _988 = (dot(vec3(_523, _524, _525), vec3(_979 * _971, _979 * _972, _979 * _973)) + 1.0) * 0.5;
        float _3704 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _998 = sqrt(((_972 * _972) + (_971 * _971)) + (_973 * _973)) / (_968 + 9.9999997473787516355514526367188e-06);
        float _3715 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _999 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _1000 = _999 * 2.0;
        float _1004 = (1.0 - _999) / (_999 + 1.0);
        float _3726 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _1014 = ((((1.0 - _1005) * (_1000 + 2.0)) * exp2(log2(isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))) * (_1000 + 1.0))) + _1005) * _968;
        float _1015 = _936 * 0.5;
        float _1016 = _946 * 0.5;
        float _1017 = _956 * 0.5;
        float _1018 = dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017));
        float _1023 = (_1018 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1018);
        float _1031 = (dot(vec3(_523, _524, _525), vec3(_1023 * _1015, _1023 * _1016, _1023 * _1017)) + 1.0) * 0.5;
        float _3737 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1040 = sqrt(((_1016 * _1016) + (_1015 * _1015)) + (_1017 * _1017)) / (_969 + 9.9999997473787516355514526367188e-06);
        float _3748 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1042 = _1041 * 2.0;
        float _1046 = (1.0 - _1041) / (_1041 + 1.0);
        float _3759 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
        float _1056 = ((((1.0 - _1047) * (_1042 + 2.0)) * exp2(log2(isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0))) * (_1042 + 1.0))) + _1047) * _969;
        float _1057 = _937 * 0.5;
        float _1058 = _947 * 0.5;
        float _1059 = _957 * 0.5;
        float _1060 = dot(vec3(_1057, _1058, _1059), vec3(_1057, _1058, _1059));
        float _1065 = (_1060 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1060);
        float _1073 = (dot(vec3(_523, _524, _525), vec3(_1065 * _1057, _1065 * _1058, _1065 * _1059)) + 1.0) * 0.5;
        float _3770 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1082 = sqrt(((_1058 * _1058) + (_1057 * _1057)) + (_1059 * _1059)) / (_970 + 9.9999997473787516355514526367188e-06);
        float _3781 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1084 = _1083 * 2.0;
        float _1088 = (1.0 - _1083) / (_1083 + 1.0);
        float _3792 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _1098 = ((((1.0 - _1089) * (_1084 + 2.0)) * exp2(log2(isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * (_1084 + 1.0))) + _1089) * _970;
        _1106 = _937;
        _1108 = _936;
        _1109 = _935;
        _1110 = _947;
        _1111 = _946;
        _1112 = _945;
        _1113 = _957;
        _1114 = _956;
        _1115 = _955;
        _1116 = _970;
        _1117 = _969;
        _1118 = _968;
        _1119 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0)));
        _1120 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0)));
        _1121 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0)));
    }
    else
    {
        _1106 = _1107;
        _1108 = _1107;
        _1109 = _1107;
        _1110 = _1107;
        _1111 = _1107;
        _1112 = _1107;
        _1113 = _1107;
        _1114 = _1107;
        _1115 = _1107;
        _1116 = _1107;
        _1117 = _1107;
        _1118 = _1107;
        _1119 = 0.0;
        _1120 = 0.0;
        _1121 = 0.0;
    }
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1149 = fma(_776, cbModelParam._m0[30u].z, fma(_772, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _768));
        float _1153 = fma(_776, cbModelParam._m0[31u].z, fma(_772, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _768));
        float _1157 = fma(_776, cbModelParam._m0[32u].z, fma(_772, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _768));
        float _1180 = _768 + _523;
        float _1181 = _772 + _524;
        float _1182 = _776 + _525;
        float _1192 = fma(_1182, cbModelParam._m0[30u].z, fma(_1181, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1180)) - _1149;
        float _1193 = fma(_1182, cbModelParam._m0[31u].z, fma(_1181, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1180)) - _1153;
        float _1194 = fma(_1182, cbModelParam._m0[32u].z, fma(_1181, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1180)) - _1157;
        float _1198 = inversesqrt(dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194)));
        float _1211 = ((_1198 * _1192) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1149 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1212 = ((_1198 * _1193) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1153 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1213 = ((_1198 * _1194) / cbModelParam._m0[35u].z) + ((((((_1157 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        vec4 _1222 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        vec4 _1229 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        vec4 _1236 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        float _1248 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1215.x + (-0.5));
        float _1250 = _1248 * (_1215.y + (-0.5));
        float _1251 = _1248 * (_1215.z + (-0.5));
        float _1258 = exp2((_1222.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1222.x + (-0.5));
        float _1260 = _1258 * (_1222.y + (-0.5));
        float _1261 = _1258 * (_1222.z + (-0.5));
        float _1268 = exp2((_1229.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1229.x + (-0.5));
        float _1270 = _1268 * (_1229.y + (-0.5));
        float _1271 = _1268 * (_1229.z + (-0.5));
        float _1278 = exp2((_1236.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1236.x + (-0.5));
        float _1280 = _1278 * (_1236.y + (-0.5));
        float _1281 = _1278 * (_1236.z + (-0.5));
        float _1282 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1283 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1284 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1285 = _1249 * 0.5;
        float _1286 = _1259 * 0.5;
        float _1287 = _1269 * 0.5;
        float _1288 = dot(vec3(_1285, _1286, _1287), vec3(_1285, _1286, _1287));
        float _1293 = (_1288 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1288);
        float _1301 = (dot(vec3(_523, _524, _525), vec3(_1293 * _1285, _1293 * _1286, _1293 * _1287)) + 1.0) * 0.5;
        float _3833 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1310 = sqrt(((_1286 * _1286) + (_1285 * _1285)) + (_1287 * _1287)) / (_1282 + 9.9999997473787516355514526367188e-06);
        float _3844 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1312 = _1311 * 2.0;
        float _1316 = (1.0 - _1311) / (_1311 + 1.0);
        float _3855 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1326 = ((((1.0 - _1317) * (_1312 + 2.0)) * exp2(log2(isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * (_1312 + 1.0))) + _1317) * _1282;
        float _1327 = _1250 * 0.5;
        float _1328 = _1260 * 0.5;
        float _1329 = _1270 * 0.5;
        float _1330 = dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329));
        float _1335 = (_1330 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1330);
        float _1343 = (dot(vec3(_523, _524, _525), vec3(_1335 * _1327, _1335 * _1328, _1335 * _1329)) + 1.0) * 0.5;
        float _3866 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1352 = sqrt(((_1328 * _1328) + (_1327 * _1327)) + (_1329 * _1329)) / (_1283 + 9.9999997473787516355514526367188e-06);
        float _3877 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1354 = _1353 * 2.0;
        float _1358 = (1.0 - _1353) / (_1353 + 1.0);
        float _3888 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1368 = ((((1.0 - _1359) * (_1354 + 2.0)) * exp2(log2(isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * (_1354 + 1.0))) + _1359) * _1283;
        float _1369 = _1251 * 0.5;
        float _1370 = _1261 * 0.5;
        float _1371 = _1271 * 0.5;
        float _1372 = dot(vec3(_1369, _1370, _1371), vec3(_1369, _1370, _1371));
        float _1377 = (_1372 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1372);
        float _1385 = (dot(vec3(_523, _524, _525), vec3(_1377 * _1369, _1377 * _1370, _1377 * _1371)) + 1.0) * 0.5;
        float _3899 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1394 = sqrt(((_1370 * _1370) + (_1369 * _1369)) + (_1371 * _1371)) / (_1284 + 9.9999997473787516355514526367188e-06);
        float _3910 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1396 = _1395 * 2.0;
        float _1400 = (1.0 - _1395) / (_1395 + 1.0);
        float _3921 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1410 = ((((1.0 - _1401) * (_1396 + 2.0)) * exp2(log2(isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * (_1396 + 1.0))) + _1401) * _1284;
        _1418 = _1251;
        _1419 = _1250;
        _1420 = _1249;
        _1421 = _1261;
        _1422 = _1260;
        _1423 = _1259;
        _1424 = _1271;
        _1425 = _1270;
        _1426 = _1269;
        _1427 = _1284;
        _1428 = _1283;
        _1429 = _1282;
        _1430 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)));
        _1431 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)));
        _1432 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)));
    }
    else
    {
        _1418 = _1107;
        _1419 = _1107;
        _1420 = _1107;
        _1421 = _1107;
        _1422 = _1107;
        _1423 = _1107;
        _1424 = _1107;
        _1425 = _1107;
        _1426 = _1107;
        _1427 = _1107;
        _1428 = _1107;
        _1429 = _1107;
        _1430 = 0.0;
        _1431 = 0.0;
        _1432 = 0.0;
    }
    float _1442 = (cbModelParam._m0[1u].x * (_1430 - _1119)) + _1119;
    float _1443 = (cbModelParam._m0[1u].x * (_1431 - _1120)) + _1120;
    float _1444 = (cbModelParam._m0[1u].x * (_1432 - _1121)) + _1121;
    float _1465 = fma(_1444, cbSceneParam._m0[89u].z, fma(_1443, cbSceneParam._m0[89u].y, _1442 * cbSceneParam._m0[89u].x));
    float _1468 = fma(_1444, cbSceneParam._m0[90u].z, fma(_1443, cbSceneParam._m0[90u].y, _1442 * cbSceneParam._m0[90u].x));
    float _1471 = fma(_1444, cbSceneParam._m0[91u].z, fma(_1443, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1442));
    float _1486 = _712 * 0.5;
    float _1487 = _713 * 0.5;
    float _1488 = _714 * 0.5;
    float _1489 = dot(vec4(_1486, _1487, _1488, 1.0), vec4(_1420, _1423, _1426, _1429));
    float _1492 = dot(vec4(_1486, _1487, _1488, 1.0), vec4(_1419, _1422, _1425, _1428));
    float _1495 = dot(vec4(_1486, _1487, _1488, 1.0), vec4(_1418, _1421, _1424, _1427));
    float _1529;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1502 = dot(vec4(_1486, _1487, _1488, 1.0), vec4(_1106, _1110, _1113, _1116));
        float _1506 = dot(vec4(_1486, _1487, _1488, 1.0), vec4(_1108, _1111, _1114, _1117));
        float _1510 = dot(vec4(_1486, _1487, _1488, 1.0), vec4(_1109, _1112, _1115, _1118));
        float _1517 = dot(vec4(cbModelParam._m0[39u]), vec4(_1486, _1487, _1488, 1.0));
        _1529 = dot(vec3(isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)), isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)), isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1517) ? 0.0 : (isnan(0.0) ? _1517 : max(0.0, _1517))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1529 = 1.0;
    }
    float _1540;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1531 = dot(vec4(cbModelParam._m0[40u]), vec4(_1486, _1487, _1488, 1.0));
        _1540 = dot(vec3(isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)), isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)), isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1531) ? 0.0 : (isnan(0.0) ? _1531 : max(0.0, _1531))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1540 = 1.0;
    }
    float _1544 = (_1540 * cbModelParam._m0[1u].x) + (_1529 * (1.0 - cbModelParam._m0[1u].x));
    float _1554 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _526);
    float _1555 = isnan(_1554) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1554 : min(cbModelParam._m0[25u].z, _1554));
    float _1635;
    float _1637;
    float _1639;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1602 = fma(_776, cbModelParam._m0[13u].z, fma(_772, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _768)) + cbModelParam._m0[13u].w;
        float _1606 = fma(_776, cbModelParam._m0[14u].z, fma(_772, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _768)) + cbModelParam._m0[14u].w;
        float _1610 = fma(_776, cbModelParam._m0[15u].z, fma(_772, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _768)) + cbModelParam._m0[15u].w;
        float _1613 = fma(_714, cbModelParam._m0[13u].z, fma(_713, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _712));
        float _1616 = fma(_714, cbModelParam._m0[14u].z, fma(_713, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _712));
        float _1619 = fma(_714, cbModelParam._m0[15u].z, fma(_713, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _712));
        float _1647;
        if (_1613 > 0.0)
        {
            _1647 = abs((1.0 - _1602) / _1613);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1613 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1602 + 1.0) / _1613);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1647 = frontier_phi_17_15_ladder;
        }
        float _1871;
        if (_1616 > 0.0)
        {
            _1871 = abs((1.0 - _1606) / _1616);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1616 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1606 + 1.0) / _1616);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1871 = frontier_phi_26_22_ladder;
        }
        float _2128;
        if (_1619 > 0.0)
        {
            _2128 = abs((1.0 - _1610) / _1619);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1619 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1610 + 1.0) / _1619);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2128 = frontier_phi_38_33_ladder;
        }
        float _2130 = isnan(_1871) ? _1647 : (isnan(_1647) ? _1871 : min(_1647, _1871));
        float _2131 = isnan(_2128) ? _2130 : (isnan(_2130) ? _2128 : min(_2130, _2128));
        float _2135 = (_2131 * _1613) + _1602;
        float _2136 = (_2131 * _1616) + _1606;
        float _2137 = (_2131 * _1619) + _1610;
        float _2138 = _2131 * 9.9999997473787516355514526367188e-05;
        float _2140 = (-1.0) - _2138;
        float _2142 = _2138 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2137 > _2142) || ((_2137 < _2140) || ((_2136 > _2142) || ((_2136 < _2140) || ((_2135 < _2140) || (_2135 > _2142))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2265 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2137, cbModelParam._m0[9u].z, fma(_2136, cbModelParam._m0[9u].y, _2135 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2137, cbModelParam._m0[10u].z, fma(_2136, cbModelParam._m0[10u].y, _2135 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2137, cbModelParam._m0[11u].z, fma(_2136, cbModelParam._m0[11u].y, _2135 * cbModelParam._m0[11u].x))), _1555);
            frontier_phi_16_38_ladder = _2265.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2265.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2265.x * cbModelParam._m0[1u].y;
        }
        _1635 = frontier_phi_16_38_ladder_2;
        _1637 = frontier_phi_16_38_ladder_1;
        _1639 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1623 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_712, _713, _714), _1555);
        _1635 = _1623.x * cbModelParam._m0[1u].y;
        _1637 = _1623.y * cbModelParam._m0[1u].y;
        _1639 = _1623.z * cbModelParam._m0[1u].y;
    }
    float _1643 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _526);
    float _1644 = isnan(_1643) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1643 : min(cbModelParam._m0[25u].w, _1643));
    float _1733;
    float _1735;
    float _1737;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1697 = fma(_776, cbModelParam._m0[21u].z, fma(_772, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _768)) + cbModelParam._m0[21u].w;
        float _1701 = fma(_776, cbModelParam._m0[22u].z, fma(_772, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _768)) + cbModelParam._m0[22u].w;
        float _1705 = fma(_776, cbModelParam._m0[23u].z, fma(_772, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _768)) + cbModelParam._m0[23u].w;
        float _1708 = fma(_714, cbModelParam._m0[21u].z, fma(_713, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _712));
        float _1711 = fma(_714, cbModelParam._m0[22u].z, fma(_713, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _712));
        float _1714 = fma(_714, cbModelParam._m0[23u].z, fma(_713, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _712));
        float _1876;
        if (_1708 > 0.0)
        {
            _1876 = abs((1.0 - _1697) / _1708);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1708 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1697 + 1.0) / _1708);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1876 = frontier_phi_28_24_ladder;
        }
        float _2155;
        if (_1711 > 0.0)
        {
            _2155 = abs((1.0 - _1701) / _1711);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1711 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1701 + 1.0) / _1711);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2155 = frontier_phi_40_35_ladder;
        }
        float _2368;
        if (_1714 > 0.0)
        {
            _2368 = abs((1.0 - _1705) / _1714);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1714 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1705 + 1.0) / _1714);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2368 = frontier_phi_49_46_ladder;
        }
        float _2370 = isnan(_2155) ? _1876 : (isnan(_1876) ? _2155 : min(_1876, _2155));
        float _2371 = isnan(_2368) ? _2370 : (isnan(_2370) ? _2368 : min(_2370, _2368));
        float _2375 = (_2371 * _1708) + _1697;
        float _2376 = (_2371 * _1711) + _1701;
        float _2377 = (_2371 * _1714) + _1705;
        float _2378 = _2371 * 9.9999997473787516355514526367188e-05;
        float _2379 = (-1.0) - _2378;
        float _2381 = _2378 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2377 > _2381) || ((_2377 < _2379) || ((_2376 > _2381) || ((_2376 < _2379) || ((_2375 < _2379) || (_2375 > _2381))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2576 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2377, cbModelParam._m0[17u].z, fma(_2376, cbModelParam._m0[17u].y, _2375 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2377, cbModelParam._m0[18u].z, fma(_2376, cbModelParam._m0[18u].y, _2375 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2377, cbModelParam._m0[19u].z, fma(_2376, cbModelParam._m0[19u].y, _2375 * cbModelParam._m0[19u].x))), _1644);
            frontier_phi_25_49_ladder = _2576.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2576.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2576.x * cbModelParam._m0[1u].z;
        }
        _1733 = frontier_phi_25_49_ladder_2;
        _1735 = frontier_phi_25_49_ladder_1;
        _1737 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1717 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_712, _713, _714), _1644);
        _1733 = _1717.x * cbModelParam._m0[1u].z;
        _1735 = _1717.y * cbModelParam._m0[1u].z;
        _1737 = _1717.z * cbModelParam._m0[1u].z;
    }
    float _1750 = (((_739 * _688) + _740) * _704) * ((cbModelParam._m0[1u].w * (_1733 - _1635)) + _1635);
    float _1752 = (((_739 * _690) + _740) * _704) * ((cbModelParam._m0[1u].w * (_1735 - _1637)) + _1637);
    float _1754 = (((_739 * _691) + _740) * _704) * ((cbModelParam._m0[1u].w * (_1737 - _1639)) + _1639);
    float _1757 = fma(_1754, cbSceneParam._m0[89u].z, fma(_1752, cbSceneParam._m0[89u].y, _1750 * cbSceneParam._m0[89u].x));
    float _1760 = fma(_1754, cbSceneParam._m0[90u].z, fma(_1752, cbSceneParam._m0[90u].y, _1750 * cbSceneParam._m0[90u].x));
    float _1763 = fma(_1754, cbSceneParam._m0[91u].z, fma(_1752, cbSceneParam._m0[91u].y, _1750 * cbSceneParam._m0[91u].x));
    vec4 _1771 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_624, _625));
    float _1773 = _1771.w;
    float _1785 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1773);
    float _1786 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1773);
    float _1787 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1773);
    uvec4 _1791 = floatBitsToUint(cbInstanceData._m0[_232 + 5u]);
    uint _1793 = _1791.x * 14u;
    uint _1794 = _1793 + 13u;
    float _1801 = _704 + (-1.0);
    float _1806 = (cbLight._m0[_1794].x * _1801) + 1.0;
    float _1807 = (cbLight._m0[_1794].y * _1801) + 1.0;
    float _1808 = (cbLight._m0[_1794].z * _1801) + 1.0;
    float _1809 = (cbLight._m0[_1794].w * _1801) + 1.0;
    uint _1810 = _1793 + 5u;
    float _1816 = isnan(1.0) ? _1807 : (isnan(_1807) ? 1.0 : min(_1807, 1.0));
    uint _1820 = _1793 + 4u;
    float _1830 = isnan(1.0) ? _1806 : (isnan(_1806) ? 1.0 : min(_1806, 1.0));
    uint _1834 = _1793 | 1u;
    float _1845 = dot(vec3(cbLight._m0[_1793].xyz), vec3(_523, _524, _525));
    float _1848 = dot(vec3(cbLight._m0[_1834].xyz), vec3(_523, _524, _525));
    float _4057 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
    float _4068 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _1853 = (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * 0.3183098733425140380859375;
    float _1855 = (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * 0.3183098733425140380859375;
    float _1862 = ((cbLight._m0[_1810].x * _1816) * _1855) + (((cbLight._m0[_1820].x * _1785) * _1830) * _1853);
    float _1863 = ((_1816 * cbLight._m0[_1810].y) * _1855) + (((cbLight._m0[_1820].y * _1786) * _1830) * _1853);
    float _1864 = ((_1816 * cbLight._m0[_1810].z) * _1855) + (((cbLight._m0[_1820].z * _1787) * _1830) * _1853);
    uvec4 _1868 = floatBitsToUint(cbLight._m0[_1793 + 12u]);
    bool _1870 = _1868.x == 0u;
    float _1881;
    float _1883;
    float _1885;
    if (_1870)
    {
        _1881 = _1862;
        _1883 = _1863;
        _1885 = _1864;
    }
    else
    {
        uint _1889 = _1793 + 6u;
        float _1905 = (dot(vec3(cbLight._m0[_1793 + 2u].xyz), vec3(_523, _524, _525)) * 0.5) + 0.5;
        float _1906 = _1905 * _1905;
        float _4079 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
        float _1907 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _1908 = isnan(1.0) ? _1808 : (isnan(_1808) ? 1.0 : min(_1808, 1.0));
        _1881 = (((cbLight._m0[_1889].x * 0.3183098733425140380859375) * _1907) * _1908) + _1862;
        _1883 = (((cbLight._m0[_1889].y * 0.3183098733425140380859375) * _1907) * _1908) + _1863;
        _1885 = (((cbLight._m0[_1889].z * 0.3183098733425140380859375) * _1907) * _1908) + _1864;
    }
    bool _1888 = _1868.y == 0u;
    float _1926;
    float _1928;
    float _1930;
    if (_1888)
    {
        _1926 = _1881;
        _1928 = _1883;
        _1930 = _1885;
    }
    else
    {
        uint _2099 = _1793 + 7u;
        float _2115 = (dot(vec3(cbLight._m0[_1793 + 3u].xyz), vec3(_523, _524, _525)) * 0.5) + 0.5;
        float _2116 = _2115 * _2115;
        float _4095 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
        float _2117 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _2118 = isnan(1.0) ? _1809 : (isnan(_1809) ? 1.0 : min(_1809, 1.0));
        _1926 = (((cbLight._m0[_2099].x * 0.3183098733425140380859375) * _2117) * _2118) + _1881;
        _1928 = (((cbLight._m0[_2099].y * 0.3183098733425140380859375) * _2117) * _2118) + _1883;
        _1930 = (((cbLight._m0[_2099].z * 0.3183098733425140380859375) * _2117) * _2118) + _1885;
    }
    uint _1933 = _1793 + 8u;
    float _1946 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1793].w)) * _526) * 0.949999988079071044921875);
    float _1947 = _1946 * _1946;
    float _1948 = cbLight._m0[_1793].x + _603;
    float _1949 = cbLight._m0[_1793].y + _604;
    float _1950 = cbLight._m0[_1793].z + _605;
    float _1954 = inversesqrt(dot(vec3(_1948, _1949, _1950), vec3(_1948, _1949, _1950)));
    float _1955 = _1954 * _1948;
    float _1956 = _1954 * _1949;
    float _1957 = _1954 * _1950;
    float _1958 = dot(vec3(_523, _524, _525), vec3(cbLight._m0[_1793].xyz));
    float _4111 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _1961 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _4122 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _1962 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _1963 = dot(vec3(_523, _524, _525), vec3(_1955, _1956, _1957));
    float _4133 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1966 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _1967 = dot(vec3(cbLight._m0[_1793].xyz), vec3(_1955, _1956, _1957));
    float _4144 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1971 = _1947 * _1947;
    float _1975 = ((_1966 * _1966) * (_1971 + (-1.0))) + 1.0;
    float _1983 = exp2(log2(1.0 - (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) * 5.0);
    float _1984 = 0.959999978542327880859375 - _685;
    float _1986 = 0.959999978542327880859375 - _686;
    float _1987 = 0.959999978542327880859375 - _687;
    float _1994 = 1.0 - _1947;
    float _2005 = (0.5 / (((_1962 * ((_1961 * _1994) + _1947)) + 9.9999999392252902907785028219223e-09) + (((_1962 * _1994) + _1947) * _1961))) * _1961;
    float _4155 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _2007 = (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_1971 / ((_1975 * _1975) * 3.141590118408203125));
    uint _2021 = _1793 + 9u;
    float _2032 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1834].w)) * _526) * 0.949999988079071044921875);
    float _2033 = _2032 * _2032;
    float _2034 = cbLight._m0[_1834].x + _603;
    float _2035 = cbLight._m0[_1834].y + _604;
    float _2036 = cbLight._m0[_1834].z + _605;
    float _2040 = inversesqrt(dot(vec3(_2034, _2035, _2036), vec3(_2034, _2035, _2036)));
    float _2041 = _2040 * _2034;
    float _2042 = _2040 * _2035;
    float _2043 = _2040 * _2036;
    float _2044 = dot(vec3(_523, _524, _525), vec3(cbLight._m0[_1834].xyz));
    float _4166 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _2047 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
    float _2048 = dot(vec3(_523, _524, _525), vec3(_2041, _2042, _2043));
    float _4177 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _2051 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    float _2052 = dot(vec3(cbLight._m0[_1834].xyz), vec3(_2041, _2042, _2043));
    float _4188 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _2056 = _2033 * _2033;
    float _2060 = ((_2051 * _2051) * (_2056 + (-1.0))) + 1.0;
    float _2067 = exp2(log2(1.0 - (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0)))) * 5.0);
    float _2074 = 1.0 - _2033;
    float _2084 = (0.5 / (((_1962 * ((_2047 * _2074) + _2033)) + 9.9999999392252902907785028219223e-09) + (((_1962 * _2074) + _2033) * _2047))) * _2047;
    float _4199 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _2086 = (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * (_2056 / ((_2060 * _2060) * 3.141590118408203125));
    float _2096 = (((((_2067 * _1984) + _688) * cbLight._m0[_2021].x) * _2086) * _1816) + ((((cbLight._m0[_1933].x * _1785) * ((_1983 * _1984) + _688)) * _2007) * _1830);
    float _2097 = (((((_2067 * _1986) + _690) * cbLight._m0[_2021].y) * _2086) * _1816) + ((((cbLight._m0[_1933].y * _1786) * ((_1983 * _1986) + _690)) * _2007) * _1830);
    float _2098 = (((((_2067 * _1987) + _691) * cbLight._m0[_2021].z) * _2086) * _1816) + ((((cbLight._m0[_1933].z * _1787) * ((_1983 * _1987) + _691)) * _2007) * _1830);
    float _2160;
    float _2162;
    float _2164;
    if (_1870)
    {
        _2160 = _2096;
        _2162 = _2097;
        _2164 = _2098;
    }
    else
    {
        uint _2166 = _1793 + 2u;
        uint _2170 = _1793 + 10u;
        float _2184 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2166].w)) * _526) * 0.949999988079071044921875);
        float _2185 = _2184 * _2184;
        float _2186 = cbLight._m0[_2166].x + _603;
        float _2187 = cbLight._m0[_2166].y + _604;
        float _2188 = cbLight._m0[_2166].z + _605;
        float _2192 = inversesqrt(dot(vec3(_2186, _2187, _2188), vec3(_2186, _2187, _2188)));
        float _2193 = _2192 * _2186;
        float _2194 = _2192 * _2187;
        float _2195 = _2192 * _2188;
        float _2196 = dot(vec3(_523, _524, _525), vec3(cbLight._m0[_2166].xyz));
        float _4210 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        float _2199 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _2200 = dot(vec3(_523, _524, _525), vec3(_2193, _2194, _2195));
        float _4221 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
        float _2203 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _2204 = dot(vec3(cbLight._m0[_2166].xyz), vec3(_2193, _2194, _2195));
        float _4232 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
        float _2208 = _2185 * _2185;
        float _2212 = ((_2203 * _2203) * (_2208 + (-1.0))) + 1.0;
        float _2219 = exp2(log2(1.0 - (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0)))) * 5.0);
        float _2226 = 1.0 - _2185;
        float _2236 = (0.5 / (((_1962 * ((_2199 * _2226) + _2185)) + 9.9999999392252902907785028219223e-09) + (((_1962 * _2226) + _2185) * _2199))) * _2199;
        float _4243 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
        float _2238 = (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (_2208 / ((_2212 * _2212) * 3.141590118408203125));
        float _2239 = isnan(1.0) ? _1808 : (isnan(_1808) ? 1.0 : min(_1808, 1.0));
        _2160 = (((((_2219 * _1984) + _688) * cbLight._m0[_2170].x) * _2238) * _2239) + _2096;
        _2162 = (((((_2219 * _1986) + _690) * cbLight._m0[_2170].y) * _2238) * _2239) + _2097;
        _2164 = (((((_2219 * _1987) + _691) * cbLight._m0[_2170].z) * _2238) * _2239) + _2098;
    }
    float _2274;
    float _2276;
    float _2278;
    if (_1888)
    {
        _2274 = _2160;
        _2276 = _2162;
        _2278 = _2164;
    }
    else
    {
        uint _2285 = _1793 + 3u;
        uint _2289 = _1793 + 11u;
        float _2303 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2285].w)) * _526) * 0.949999988079071044921875);
        float _2304 = _2303 * _2303;
        float _2305 = cbLight._m0[_2285].x + _603;
        float _2306 = cbLight._m0[_2285].y + _604;
        float _2307 = cbLight._m0[_2285].z + _605;
        float _2311 = inversesqrt(dot(vec3(_2305, _2306, _2307), vec3(_2305, _2306, _2307)));
        float _2312 = _2311 * _2305;
        float _2313 = _2311 * _2306;
        float _2314 = _2311 * _2307;
        float _2315 = dot(vec3(_523, _524, _525), vec3(cbLight._m0[_2285].xyz));
        float _4259 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
        float _2318 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _2319 = dot(vec3(_523, _524, _525), vec3(_2312, _2313, _2314));
        float _4270 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2322 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _2323 = dot(vec3(cbLight._m0[_2285].xyz), vec3(_2312, _2313, _2314));
        float _4281 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2327 = _2304 * _2304;
        float _2331 = ((_2322 * _2322) * (_2327 + (-1.0))) + 1.0;
        float _2338 = exp2(log2(1.0 - (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0)))) * 5.0);
        float _2345 = 1.0 - _2304;
        float _2355 = (0.5 / (((_1962 * ((_2318 * _2345) + _2304)) + 9.9999999392252902907785028219223e-09) + (((_1962 * _2345) + _2304) * _2318))) * _2318;
        float _4292 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2357 = (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_2327 / ((_2331 * _2331) * 3.141590118408203125));
        float _2358 = isnan(1.0) ? _1809 : (isnan(_1809) ? 1.0 : min(_1809, 1.0));
        _2274 = (((((_2338 * _1984) + _688) * cbLight._m0[_2289].x) * _2357) * _2358) + _2160;
        _2276 = (((((_2338 * _1986) + _690) * cbLight._m0[_2289].y) * _2357) * _2358) + _2162;
        _2278 = (((((_2338 * _1987) + _691) * cbLight._m0[_2289].z) * _2357) * _2358) + _2164;
    }
    float _2493;
    float _2495;
    float _2497;
    float _2499;
    float _2501;
    float _2503;
    if (_1791.y == 0u)
    {
        float _2433 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2434 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2433;
        float _2435 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2433;
        float _2436 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2433;
        uvec4 _2448 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2449 = _2448.x;
        uint _2460 = uint((float(_2448.y) * floor(float(uint(cbSceneParam._m0[85u].y * _625) / _2449))) + floor(float(uint(cbSceneParam._m0[85u].x * _624) / _2449)));
        float _2470 = (log2(_2436 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2471 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        uint _2474 = uint(isnan(14.0) ? _2471 : (isnan(_2471) ? 14.0 : min(_2471, 14.0)));
        uvec4 _2479 = texelFetch(g_lightClusterGridBuffer, int(((_2474 << 2u) + (_2460 << 6u)) >> 2u));
        uint _2480 = _2479.x;
        uint _2481 = _2448.z;
        float _2581;
        float _2583;
        float _2585;
        float _2587;
        float _2589;
        float _2591;
        if (((((1u << ((_2481 >> 4u) & 15u)) + 4294967295u) & _2480) == 0u) || ((_2481 & 240u) == 0u))
        {
            _2581 = 0.0;
            _2583 = 0.0;
            _2585 = 0.0;
            _2587 = 0.0;
            _2589 = 0.0;
            _2591 = 0.0;
        }
        else
        {
            float _2582;
            float _2584;
            float _2586;
            float _2588;
            float _2590;
            float _2592;
            float _2734 = 0.0;
            float _2735 = 0.0;
            float _2736 = 0.0;
            float _2737 = 0.0;
            float _2738 = 0.0;
            float _2739 = 0.0;
            uint _2740 = 0u;
            uint _2749;
            bool _2750;
            for (;;)
            {
                _2749 = texelFetch(g_lightClassification, int((((_2474 << 5u) + (_2460 << 9u)) + (_2740 << 2u)) >> 2u)).x;
                _2750 = _2749 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2750)
                {
                    frontier_phi_66_pred = _2734;
                    frontier_phi_66_pred_1 = _2739;
                    frontier_phi_66_pred_2 = _2738;
                    frontier_phi_66_pred_3 = _2737;
                    frontier_phi_66_pred_4 = _2736;
                    frontier_phi_66_pred_5 = _2735;
                }
                else
                {
                    float _2879;
                    float _2880;
                    float _2881;
                    float _2882;
                    float _2883;
                    float _2884;
                    uint _2885;
                    _2879 = _2734;
                    _2880 = _2735;
                    _2881 = _2736;
                    _2882 = _2737;
                    _2883 = _2738;
                    _2884 = _2739;
                    _2885 = _2749;
                    float _2806;
                    float _2807;
                    float _2808;
                    float _2809;
                    float _2810;
                    float _2811;
                    for (;;)
                    {
                        uint _2889 = uint(findLSB(_2885)) + (_2740 << 5u);
                        uint _2886 = (_2885 + 4294967295u) & _2885;
                        uint _2891 = _2889 * 48u;
                        vec4 _2905 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2891)).x, texelFetch(g_PointLightRenderingBuffer, int(_2891 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2891 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2891 + 3u)).x));
                        uint _2911 = (_2889 * 48u) + 4u;
                        vec4 _2924 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2911)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 3u)).x));
                        uint _2930 = (_2889 * 48u) + 8u;
                        vec3 _2941 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2930)).x, texelFetch(g_PointLightRenderingBuffer, int(_2930 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2930 + 2u)).x));
                        float _2945 = _2905.x - _2434;
                        float _2946 = _2905.y - _2435;
                        float _2947 = _2905.z - _2436;
                        float _2948 = dot(vec3(_2945, _2946, _2947), vec3(_2945, _2946, _2947));
                        float _2951 = inversesqrt(_2948);
                        float _2952 = _2951 * _2945;
                        float _2953 = _2951 * _2946;
                        float _2954 = _2951 * _2947;
                        float _2955 = dot(vec3(_645, _648, _651), vec3(_2952, _2953, _2954));
                        float _2960 = 1.0 - (_2948 * _2905.w);
                        float _4318 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
                        float _2961 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
                        float _2962 = sqrt(_2948) * _2924.w;
                        float _2965 = 1.39999997615814208984375 / (_2962 + 1.39999997615814208984375);
                        float _2966 = _2965 * _2965;
                        float _2969 = ((1.0 - _2966) * _2955) + _2966;
                        float _2972 = _2962 * _2962;
                        float _2976 = ((isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0))) * _2961) / ((_2972 * 0.699999988079071044921875) + 1.0);
                        float _2980 = (-0.0) - _2434;
                        float _2981 = (-0.0) - _2435;
                        float _2982 = (-0.0) - _2436;
                        float _2986 = inversesqrt(dot(vec3(_2980, _2981, _2982), vec3(_2980, _2981, _2982)));
                        float _2987 = _2986 * _2980;
                        float _2988 = _2986 * _2981;
                        float _2989 = _2986 * _2982;
                        float _2997 = exp2(log2(1.0 / ((_2972 * 3.5) + 5.0)) * 0.25);
                        float _2998 = 1.0 - _720;
                        float _3005 = sqrt(1.0 - ((1.0 - (_2998 * _2998)) * (1.0 - (_2997 * _2997))));
                        float _3006 = _3005 * _3005;
                        float _3007 = _3006 * _3006;
                        float _3008 = _2987 + _2952;
                        float _3009 = _2988 + _2953;
                        float _3010 = _2989 + _2954;
                        float _3014 = inversesqrt(dot(vec3(_3008, _3009, _3010), vec3(_3008, _3009, _3010)));
                        float _3018 = dot(vec3(_645, _648, _651), vec3(_2987, _2988, _2989));
                        float _4334 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                        float _3021 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
                        float _3022 = dot(vec3(_645, _648, _651), vec3(_3014 * _3008, _3014 * _3009, _3014 * _3010));
                        float _4345 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
                        float _3025 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
                        float _3029 = ((_3025 * _3025) * (_3007 + (-1.0))) + 1.0;
                        float _3030 = _2965 * _3006;
                        float _3031 = _3030 * _3030;
                        float _3034 = ((1.0 - _3031) * _2955) + _3031;
                        float _4356 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
                        float _3035 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
                        float _3036 = 1.0 - _3006;
                        float _3046 = (0.5 / (((_3035 * ((_3021 * _3036) + _3006)) + 9.9999999392252902907785028219223e-09) + (((_3035 * _3036) + _3006) * _3021))) * _3035;
                        float _4367 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                        float _3057 = (((_3007 * 3.1415927410125732421875) * (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0)))) / ((_3029 * _3029) * ((_2972 * 2.1991131305694580078125) + 3.141590118408203125))) * _2961;
                        _2809 = (_2976 * _2924.x) + _2882;
                        _2810 = (_2976 * _2924.y) + _2883;
                        _2811 = (_2976 * _2924.z) + _2884;
                        _2806 = (_3057 * _2941.x) + _2879;
                        _2807 = (_3057 * _2941.y) + _2880;
                        _2808 = (_3057 * _2941.z) + _2881;
                        if (_2886 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2879 = _2806;
                            _2880 = _2807;
                            _2881 = _2808;
                            _2882 = _2809;
                            _2883 = _2810;
                            _2884 = _2811;
                            _2885 = _2886;
                        }
                    }
                    frontier_phi_66_pred = _2806;
                    frontier_phi_66_pred_1 = _2811;
                    frontier_phi_66_pred_2 = _2810;
                    frontier_phi_66_pred_3 = _2809;
                    frontier_phi_66_pred_4 = _2808;
                    frontier_phi_66_pred_5 = _2807;
                }
                _2582 = frontier_phi_66_pred;
                _2592 = frontier_phi_66_pred_1;
                _2590 = frontier_phi_66_pred_2;
                _2588 = frontier_phi_66_pred_3;
                _2586 = frontier_phi_66_pred_4;
                _2584 = frontier_phi_66_pred_5;
                uint _2741 = _2740 + 1u;
                if (_2741 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2734 = _2582;
                    _2735 = _2584;
                    _2736 = _2586;
                    _2737 = _2588;
                    _2738 = _2590;
                    _2739 = _2592;
                    _2740 = _2741;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2581 = _2582;
            _2583 = _2584;
            _2585 = _2586;
            _2587 = _2588;
            _2589 = _2590;
            _2591 = _2592;
        }
        uvec4 _2595 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2596 = _2595.z;
        uint _2598 = (_2596 >> 8u) & 15u;
        float _2702;
        float _2704;
        float _2706;
        float _2708;
        float _2710;
        float _2712;
        if (((4294967295u << _2598) & _2480) == 0u)
        {
            _2702 = _2581;
            _2704 = _2583;
            _2706 = _2585;
            _2708 = _2587;
            _2710 = _2589;
            _2712 = _2591;
        }
        else
        {
            float _2727 = inversesqrt(dot(vec3(_2434, _2435, _2436), vec3(_2434, _2435, _2436)));
            float _2728 = _2727 * _2434;
            float _2729 = _2727 * _2435;
            float _2730 = _2727 * _2436;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2598 < ((_2596 >> 12u) & 15u))
            {
                float _2703;
                float _2705;
                float _2707;
                float _2709;
                float _2711;
                float _2713;
                float _2862 = _2581;
                float _2863 = _2583;
                float _2864 = _2585;
                float _2865 = _2587;
                float _2866 = _2589;
                float _2867 = _2591;
                uint _2868 = _2598;
                uint _2877;
                bool _2878;
                for (;;)
                {
                    _2877 = texelFetch(g_lightClassification, int((((_2474 << 5u) + (_2460 << 9u)) + (_2868 << 2u)) >> 2u)).x;
                    _2878 = _2877 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2878)
                    {
                        frontier_phi_77_pred = _2867;
                        frontier_phi_77_pred_1 = _2866;
                        frontier_phi_77_pred_2 = _2865;
                        frontier_phi_77_pred_3 = _2864;
                        frontier_phi_77_pred_4 = _2863;
                        frontier_phi_77_pred_5 = _2862;
                    }
                    else
                    {
                        float _3071;
                        float _3072;
                        float _3073;
                        float _3074;
                        float _3075;
                        float _3076;
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3370;
                        float _3084 = _2862;
                        float _3085 = _2863;
                        float _3086 = _2864;
                        float _3087 = _2865;
                        float _3088 = _2866;
                        float _3089 = _2867;
                        uint _3090 = _2877;
                        uint _3091;
                        vec4 _3116;
                        float _3117;
                        vec4 _3132;
                        vec3 _3144;
                        vec4 _3160;
                        vec4 _3175;
                        float _3221;
                        bool _3222;
                        for (;;)
                        {
                            uint _3101 = ((_2868 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3090));
                            _3091 = (_3090 + 4294967295u) & _3090;
                            uint _3103 = _3101 * 40u;
                            _3116 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3103)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 3u)).x));
                            _3117 = _3116.w;
                            uint _3119 = (_3101 * 40u) + 4u;
                            _3132 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3119)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 3u)).x));
                            uint _3134 = (_3101 * 40u) + 8u;
                            _3144 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 2u)).x));
                            uint _3147 = (_3101 * 40u) + 16u;
                            _3160 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3147)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 3u)).x));
                            uint _3162 = (_3101 * 40u) + 20u;
                            _3175 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3162)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 3u)).x));
                            uint _3177 = (_3101 * 40u) + 24u;
                            vec4 _3190 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3177)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 3u)).x));
                            uint _3196 = (_3101 * 40u) + 28u;
                            vec4 _3209 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3196)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 3u)).x));
                            _3221 = fma(_2436, _3209.z, fma(_2435, _3209.y, _3209.x * _2434)) + _3209.w;
                            _3222 = !((fma(_2436, _3190.z, fma(_2435, _3190.y, _3190.x * _2434)) + _3190.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3222)
                            {
                                float _3249 = _3116.x - _2434;
                                float _3250 = _3116.y - _2435;
                                float _3251 = _3116.z - _2436;
                                float _3252 = dot(vec3(_3249, _3250, _3251), vec3(_3249, _3250, _3251));
                                float _3255 = inversesqrt(_3252);
                                float _3256 = _3255 * _3249;
                                float _3257 = _3255 * _3250;
                                float _3258 = _3255 * _3251;
                                float _3262 = 1.0 - (_3252 / (_3117 * _3117));
                                float _4378 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                                float _3263 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
                                float _3267 = sqrt(_3252) * _3132.w;
                                float _3269 = 1.39999997615814208984375 / (_3267 + 1.39999997615814208984375);
                                float _3270 = _3269 * _3269;
                                float _3273 = ((1.0 - _3270) * dot(vec3(_3256, _3257, _3258), vec3(_645, _648, _651))) + _3270;
                                float _3276 = _3267 * _3267;
                                float _3280 = (fma(_2436, _3160.z, fma(_2435, _3160.y, _3160.x * _2434)) + _3160.w) / _3221;
                                float _3281 = (fma(_2436, _3175.z, fma(_2435, _3175.y, _3175.x * _2434)) + _3175.w) / _3221;
                                float _3285 = 1.0 - dot(vec2(_3280, _3281), vec2(_3280, _3281));
                                float _4394 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                                float _3286 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
                                float _3287 = _3286 * (((isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0))) * _3263) / ((_3276 * 0.699999988079071044921875) + 1.0));
                                float _3299 = exp2(log2(1.0 / ((_3276 * 3.5) + 5.0)) * 0.25);
                                float _3300 = 1.0 - _720;
                                float _3307 = sqrt(1.0 - ((1.0 - (_3300 * _3300)) * (1.0 - (_3299 * _3299))));
                                float _3308 = _3307 * _3307;
                                float _3309 = _3308 * _3308;
                                float _3310 = _3256 - _2728;
                                float _3311 = _3257 - _2729;
                                float _3312 = _3258 - _2730;
                                float _3316 = inversesqrt(dot(vec3(_3310, _3311, _3312), vec3(_3310, _3311, _3312)));
                                float _3320 = dot(vec3(_645, _648, _651), vec3((-0.0) - _2728, (-0.0) - _2729, (-0.0) - _2730));
                                float _4405 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                                float _3323 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
                                float _3324 = dot(vec3(_645, _648, _651), vec3(_3316 * _3310, _3316 * _3311, _3316 * _3312));
                                float _4416 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                                float _3327 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
                                float _3331 = ((_3327 * _3327) * (_3309 + (-1.0))) + 1.0;
                                float _3332 = _3269 * _3308;
                                float _3333 = _3332 * _3332;
                                float _3339 = ((1.0 - _3333) * dot(vec3(_645, _648, _651), vec3(_3256, _3257, _3258))) + _3333;
                                float _4427 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                                float _3340 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
                                float _3341 = 1.0 - _3308;
                                float _3351 = (0.5 / (((_3340 * ((_3323 * _3341) + _3308)) + 9.9999999392252902907785028219223e-09) + (((_3340 * _3341) + _3308) * _3323))) * _3340;
                                float _4438 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                                float _3361 = (_3286 * _3263) * (((_3309 * 3.1415927410125732421875) * (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0)))) / ((_3331 * _3331) * ((_3276 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3287 * _3132.y;
                                frontier_phi_83_pred_1 = _3287 * _3132.x;
                                frontier_phi_83_pred_2 = _3361 * _3144.z;
                                frontier_phi_83_pred_3 = _3361 * _3144.y;
                                frontier_phi_83_pred_4 = _3361 * _3144.x;
                                frontier_phi_83_pred_5 = _3287 * _3132.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3369 = frontier_phi_83_pred;
                            _3368 = frontier_phi_83_pred_1;
                            _3367 = frontier_phi_83_pred_2;
                            _3366 = frontier_phi_83_pred_3;
                            _3365 = frontier_phi_83_pred_4;
                            _3370 = frontier_phi_83_pred_5;
                            _3074 = _3368 + _3087;
                            _3075 = _3369 + _3088;
                            _3076 = _3370 + _3089;
                            _3071 = _3365 + _3084;
                            _3072 = _3366 + _3085;
                            _3073 = _3367 + _3086;
                            if (_3091 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3084 = _3071;
                                _3085 = _3072;
                                _3086 = _3073;
                                _3087 = _3074;
                                _3088 = _3075;
                                _3089 = _3076;
                                _3090 = _3091;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3076;
                        frontier_phi_77_pred_1 = _3075;
                        frontier_phi_77_pred_2 = _3074;
                        frontier_phi_77_pred_3 = _3073;
                        frontier_phi_77_pred_4 = _3072;
                        frontier_phi_77_pred_5 = _3071;
                    }
                    _2713 = frontier_phi_77_pred;
                    _2711 = frontier_phi_77_pred_1;
                    _2709 = frontier_phi_77_pred_2;
                    _2707 = frontier_phi_77_pred_3;
                    _2705 = frontier_phi_77_pred_4;
                    _2703 = frontier_phi_77_pred_5;
                    uint _2869 = _2868 + 1u;
                    if (_2869 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2862 = _2703;
                        _2863 = _2705;
                        _2864 = _2707;
                        _2865 = _2709;
                        _2866 = _2711;
                        _2867 = _2713;
                        _2868 = _2869;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2707;
                frontier_phi_58_59_ladder_1 = _2713;
                frontier_phi_58_59_ladder_2 = _2711;
                frontier_phi_58_59_ladder_3 = _2709;
                frontier_phi_58_59_ladder_4 = _2705;
                frontier_phi_58_59_ladder_5 = _2703;
            }
            else
            {
                frontier_phi_58_59_ladder = _2585;
                frontier_phi_58_59_ladder_1 = _2591;
                frontier_phi_58_59_ladder_2 = _2589;
                frontier_phi_58_59_ladder_3 = _2587;
                frontier_phi_58_59_ladder_4 = _2583;
                frontier_phi_58_59_ladder_5 = _2581;
            }
            _2702 = frontier_phi_58_59_ladder_5;
            _2704 = frontier_phi_58_59_ladder_4;
            _2706 = frontier_phi_58_59_ladder;
            _2708 = frontier_phi_58_59_ladder_3;
            _2710 = frontier_phi_58_59_ladder_2;
            _2712 = frontier_phi_58_59_ladder_1;
        }
        float _2717 = isnan(1.0) ? _704 : (isnan(_704) ? 1.0 : min(_704, 1.0));
        _2493 = (_2717 * _2708) + _1926;
        _2495 = (_2717 * _2710) + _1928;
        _2497 = (_2717 * _2712) + _1930;
        _2499 = ((_2702 * _688) * _2717) + _2274;
        _2501 = ((_2704 * _690) * _2717) + _2276;
        _2503 = ((_2706 * _691) * _2717) + _2278;
    }
    else
    {
        _2493 = _1926;
        _2495 = _1928;
        _2497 = _1930;
        _2499 = _2274;
        _2501 = _2276;
        _2503 = _2278;
    }
    float _4454 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _4465 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _4476 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _2520 = ((isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * (_2493 + ((isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0))) * _704))) + ((_2499 + ((isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0))) * _1544)) * cbPerFrame._m0[3u].x);
    float _2521 = ((isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_2495 + ((isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0))) * _704))) + ((_2501 + ((isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))) * _1544)) * cbPerFrame._m0[3u].x);
    float _2522 = ((isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_2497 + ((isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0))) * _704))) + ((_2503 + ((isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))) * _1544)) * cbPerFrame._m0[3u].x);
    uint _2523 = _232 + 6u;
    float _2531 = _624 / cbSceneParam._m0[86u].x;
    float _2532 = _625 / cbSceneParam._m0[86u].y;
    vec4 _2546 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2531, _2532, (log2((isnan(cbSceneParam._m0[77u].w) ? _545 : (isnan(_545) ? cbSceneParam._m0[77u].w : min(_545, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2548 = _2546.x;
    float _2549 = _2546.y;
    float _2550 = _2546.z;
    float _2551 = _2546.w;
    float _2644;
    float _2646;
    float _2648;
    float _2650;
    if (_545 > cbSceneParam._m0[78u].w)
    {
        float _2606 = isnan(_545) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _545 : min(cbSceneParam._m0[80u].w, _545));
        float _2607 = _2606 / _545;
        float _2618 = _2607 * _596;
        float _2619 = _597 * _2607;
        float _2620 = (-0.0) - _2619;
        float _2622 = _2607 * _598;
        float _2624 = (cbSceneParam._m0[77u].w * _2620) / _2606;
        float _2625 = _2624 + cbSceneParam._m0[79u].w;
        float _2626 = cbSceneParam._m0[79u].w - _2619;
        float _2632 = sqrt(((_2618 * _2618) + (_2619 * _2619)) + (_2622 * _2622));
        float _2635 = (1.0 - (cbSceneParam._m0[77u].w / _2606)) * _2632;
        float _2640 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2642 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2819;
        if (abs((_2620 - _2624) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2819 = ((((_2625 > 0.0) ? exp2(_2640 * _2625) : (2.0 - exp2(_2642 * _2625))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2635;
        }
        else
        {
            float _2763 = 1.0 / cbSceneParam._m0[80u].x;
            float _2764 = isnan(_2626) ? _2625 : (isnan(_2625) ? _2626 : max(_2625, _2626));
            float _2765 = isnan(_2626) ? _2625 : (isnan(_2625) ? _2626 : min(_2625, _2626));
            float _2774 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : min(_2764, 0.0));
            float _2775 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : min(_2765, 0.0));
            _2819 = ((abs(_2632 / _2620) * cbSceneParam._m0[80u].y) * ((((_2774 - _2775) * 2.0) - ((exp2(_2640 * (isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0)))) - exp2(_2640 * (isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0))))) * _2763)) - ((exp2(_2642 * _2774) - exp2(_2642 * _2775)) * _2763))) + (_2635 * cbSceneParam._m0[80u].z);
        }
        vec4 _2821 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2531, _2532, 1.0), 0.0);
        float _2830 = exp2((_2819 * (-1.44269502162933349609375)) * (1.0 - _2821.w));
        float _2831 = log2(_2830);
        float _2847 = log2(_2551);
        _2644 = (exp2(_2847 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2831 * cbSceneParam._m0[78u].x)) * _2821.x) / cbSceneParam._m0[78u].x)) + _2548;
        _2646 = (exp2(_2847 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2831 * cbSceneParam._m0[78u].y)) * _2821.y) / cbSceneParam._m0[78u].y)) + _2549;
        _2648 = (exp2(_2847 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2831 * cbSceneParam._m0[78u].z)) * _2821.z) / cbSceneParam._m0[78u].z)) + _2550;
        _2650 = _2830 * _2551;
    }
    else
    {
        _2644 = _2548;
        _2646 = _2549;
        _2648 = _2550;
        _2650 = _2551;
    }
    bool _2857;
    vec4 _2660;
    vec4 _2682;
    float _2684;
    float _2688;
    float _2689;
    float _2690;
    float _2691;
    bool _2701;
    for (;;)
    {
        _2660 = cbMatDynParam._m0[0u];
        float _2662 = roundEven(_2660.y);
        bool _2663 = _2662 == 3.0;
        float _2664 = log2(_2650);
        float _2671 = exp2(_2664 * cbSceneParam._m0[78u].x) * _2520;
        float _2672 = exp2(_2664 * cbSceneParam._m0[78u].y) * _2521;
        float _2673 = exp2(_2664 * cbSceneParam._m0[78u].z) * _2522;
        float _2680 = _612 + (-0.5);
        _2682 = cbMtdParam._m0[1u];
        _2684 = _2682.y * _2680;
        float _2687 = (_2662 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2688 = _2687 * (_2663 ? _2671 : (_2671 + (cbSceneParam._m0[72u].w * _2644)));
        _2689 = _2687 * (_2663 ? _2672 : (_2672 + (cbSceneParam._m0[72u].w * _2646)));
        _2690 = _2687 * (_2663 ? _2673 : (_2673 + (cbSceneParam._m0[72u].w * _2648)));
        _2691 = _2680 * 0.999000012874603271484375;
        _2701 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2701)
        {
            if ((cbInstanceData._m0[_232 + 7u].x + _2691) < 0.5)
            {
                _2857 = true;
                break;
            }
        }
        uint _2798 = _664 + uint(_2660.w);
        if ((cbInstanceData._m0[_2798].w < 1.0) && ((cbInstanceData._m0[_2798].w + _2691) < 0.5))
        {
            _2857 = true;
            break;
        }
        if ((_2684 + 1.0) < _2682.x)
        {
            _2857 = true;
            break;
        }
        _2857 = false;
        break;
    }
    float _3062;
    if (_2857)
    {
        discard_state = true;
        _3062 = 0.0;
    }
    else
    {
        _3062 = cbInstanceData._m0[_2523].w;
    }
    SV_Target.x = _2688;
    SV_Target.y = _2689;
    SV_Target.z = _2690;
    SV_Target.w = _3062;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2523].w;
    discard_exit();
}


