#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1115;
float _3498;
float _3499;
float _3500;
float _3501;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _245 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _246 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3510 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3521 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3532 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    uint _256 = uint(roundEven(NORMAL.w)) * 13u;
    uint _261 = _256 + 1u;
    uint _265 = _256 + 2u;
    float _274 = sqrt(((cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x)) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x));
    float _275 = _274 * TEXCOORD.z;
    float _276 = _274 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _275) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _276) + cbTextureTilingScale._m0[13u].w));
    vec4 _312 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _317 = _312.x * cbMtdParam._m0[9u].x;
    float _318 = _312.y * cbMtdParam._m0[9u].y;
    float _319 = _312.z * cbMtdParam._m0[9u].z;
    float _323 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _289.x) * _317;
    float _326 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _289.y) * _318;
    float _329 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _289.z) * _319;
    float _336 = ((_317 - _323) * (isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0)))) + _323;
    float _337 = ((_318 - _326) * (isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0)))) + _326;
    float _338 = ((_319 - _329) * (isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0)))) + _329;
    vec4 _356 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _275) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _276) + cbTextureTilingScale._m0[20u].w));
    vec4 _382 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _386 = _382.z;
    float _390 = (_382.x * 2.0) + (-1.0);
    float _391 = (_382.y * 2.0) + (-1.0);
    float _392 = dot(vec2(_390, _391), vec2(_390, _391));
    float _3543 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _397 = sqrt(1.0 - (isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0))));
    float _402 = _390 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_356.x * 2.0) + (-1.0)));
    float _403 = _391 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_356.y * 2.0) + (-1.0)));
    vec4 _420 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _275) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _276) + cbTextureTilingScale._m0[11u].w));
    float _422 = _420.x;
    float _423 = 1.0 - _422;
    float _439 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_422 - _423) * cbMtdParam._m0[24u].z) + _423) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3554 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _440 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
    float _447 = (_440 * (cbMtdParam._m0[17u].x - _336)) + _336;
    float _448 = (_440 * (cbMtdParam._m0[17u].y - _337)) + _337;
    float _449 = (_440 * (cbMtdParam._m0[17u].z - _338)) + _338;
    vec4 _462 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _464 = _462.x;
    float _466 = _464 - (_464 * _440);
    float _471 = (((_356.z - _386) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _386;
    vec4 _484 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _275) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _276) + cbTextureTilingScale._m0[15u].w));
    float _491 = (_484.x * 2.0) + (-1.0);
    float _492 = (_484.y * 2.0) + (-1.0);
    float _493 = dot(vec2(_491, _492), vec2(_491, _492));
    float _3565 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _501 = (_440 * (_484.z - _471)) + _471;
    float _513 = (((_491 - _402) + (cbMtdParam._m0[21u].x * _402)) * _440) + _402;
    float _514 = (((_492 - _403) + (cbMtdParam._m0[21u].x * _403)) * _440) + _403;
    float _515 = (_440 * (sqrt(1.0 - (isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0)))) - _397)) + _397;
    float _517 = cbMtdParam._m0[22u].x + _382.w;
    float _520 = fma(_515, _222 * NORMAL.x, fma(_514, _229 * TANGENT.x, (_215 * _207) * _513));
    float _523 = fma(_515, _222 * NORMAL.y, fma(_514, _229 * TANGENT.y, (_215 * _208) * _513));
    float _526 = fma(_515, _222 * NORMAL.z, fma(_514, _229 * TANGENT.z, (_215 * _209) * _513));
    float _530 = inversesqrt(dot(vec3(_520, _523, _526), vec3(_520, _523, _526)));
    float _531 = _530 * _520;
    float _532 = _530 * _523;
    float _533 = _530 * _526;
    float _3576 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _534 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
    float _3587 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _3598 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _3609 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _3620 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _3631 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _539 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
    float _553 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _594 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _604 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _594);
    float _605 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _594);
    float _606 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _594);
    float _610 = inversesqrt(dot(vec3(_604, _605, _606), vec3(_604, _605, _606)));
    float _611 = _604 * _610;
    float _612 = _605 * _610;
    float _613 = _606 * _610;
    vec4 _618 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _620 = _618.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _795 = sqrt(((_604 * _604) + (_605 * _605)) + (_606 * _606));
        float _801 = (cbMatDynParam._m0[5u].x * _795) + cbMatDynParam._m0[5u].y;
        float _3642 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _802 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
        float _806 = (cbMatDynParam._m0[5u].z * _795) + cbMatDynParam._m0[5u].w;
        float _3653 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))) - _802)) + _802) < ((_620 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _632 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _633 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _653 = fma(_533, cbSceneParam._m0[5u].z, fma(_532, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _531));
    float _656 = fma(_533, cbSceneParam._m0[6u].z, fma(_532, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _531));
    float _659 = fma(_533, cbSceneParam._m0[7u].z, fma(_532, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _531));
    uint _672 = _256 + 9u;
    uint _673 = _672 + uint(cbMatDynParam._m0[0u].w);
    float _679 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0)))) * cbInstanceData._m0[_673].x;
    float _680 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0)))) * cbInstanceData._m0[_673].y;
    float _681 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0)))) * cbInstanceData._m0[_673].z;
    float _3664 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _682 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
    float _3675 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _683 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
    float _3686 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _684 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
    float _685 = 1.0 - _539;
    float _686 = _682 * _685;
    float _687 = _683 * _685;
    float _688 = _684 * _685;
    float _693 = (_682 + (-0.039999999105930328369140625)) * _539;
    float _694 = (_683 + (-0.039999999105930328369140625)) * _539;
    float _695 = (_684 + (-0.039999999105930328369140625)) * _539;
    float _696 = _693 + 0.039999999105930328369140625;
    float _698 = _694 + 0.039999999105930328369140625;
    float _699 = _695 + 0.039999999105930328369140625;
    vec4 _708 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _632, cbSceneParam._m0[86u].y * _633));
    float _712 = ((isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0))) * TEXCOORD_5.w) * _708.x;
    float _713 = dot(vec3(_531, _532, _533), vec3(_611, _612, _613));
    float _716 = _713 * 2.0;
    float _720 = (_716 * _531) - _611;
    float _721 = (_716 * _532) - _612;
    float _722 = (_716 * _533) - _613;
    float _726 = abs(dot(vec3(_611, _612, _613), vec3(_531, _532, _533)));
    float _3697 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _728 = sqrt(_534);
    float _741 = exp2((_728 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_728 * 3.0));
    float _747 = (1.0 - _741) * ((_728 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _748 = _741 * _728;
    float _776 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _780 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _784 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1114;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _839 = fma(_784, cbModelParam._m0[26u].z, fma(_780, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _776));
        float _843 = fma(_784, cbModelParam._m0[27u].z, fma(_780, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _776));
        float _847 = fma(_784, cbModelParam._m0[28u].z, fma(_780, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _776));
        float _872 = _776 + _531;
        float _873 = _780 + _532;
        float _874 = _784 + _533;
        float _884 = fma(_874, cbModelParam._m0[26u].z, fma(_873, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _872)) - _839;
        float _885 = fma(_874, cbModelParam._m0[27u].z, fma(_873, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _872)) - _843;
        float _886 = fma(_874, cbModelParam._m0[28u].z, fma(_873, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _872)) - _847;
        float _890 = inversesqrt(dot(vec3(_884, _885, _886), vec3(_884, _885, _886)));
        float _903 = ((_890 * _884) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_839 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _904 = ((_890 * _885) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_843 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _905 = ((_890 * _886) / cbModelParam._m0[34u].z) + ((((((_847 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _908 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        vec4 _915 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        vec4 _922 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        vec4 _929 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        float _942 = exp2((_908.w + (-0.5)) * 20.0) * 2.0;
        float _943 = _942 * (_908.x + (-0.5));
        float _944 = _942 * (_908.y + (-0.5));
        float _945 = _942 * (_908.z + (-0.5));
        float _952 = exp2((_915.w + (-0.5)) * 20.0) * 2.0;
        float _953 = _952 * (_915.x + (-0.5));
        float _954 = _952 * (_915.y + (-0.5));
        float _955 = _952 * (_915.z + (-0.5));
        float _962 = exp2((_922.w + (-0.5)) * 20.0) * 2.0;
        float _963 = _962 * (_922.x + (-0.5));
        float _964 = _962 * (_922.y + (-0.5));
        float _965 = _962 * (_922.z + (-0.5));
        float _972 = exp2((_929.w + (-0.5)) * 20.0) * 2.0;
        float _973 = _972 * (_929.x + (-0.5));
        float _974 = _972 * (_929.y + (-0.5));
        float _975 = _972 * (_929.z + (-0.5));
        float _976 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _977 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _978 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _979 = _943 * 0.5;
        float _980 = _953 * 0.5;
        float _981 = _963 * 0.5;
        float _982 = dot(vec3(_979, _980, _981), vec3(_979, _980, _981));
        float _987 = (_982 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_982);
        float _996 = (dot(vec3(_531, _532, _533), vec3(_987 * _979, _987 * _980, _987 * _981)) + 1.0) * 0.5;
        float _3723 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1006 = sqrt(((_980 * _980) + (_979 * _979)) + (_981 * _981)) / (_976 + 9.9999997473787516355514526367188e-06);
        float _3734 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1008 = _1007 * 2.0;
        float _1012 = (1.0 - _1007) / (_1007 + 1.0);
        float _3745 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1022 = ((((1.0 - _1013) * (_1008 + 2.0)) * exp2(log2(isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * (_1008 + 1.0))) + _1013) * _976;
        float _1023 = _944 * 0.5;
        float _1024 = _954 * 0.5;
        float _1025 = _964 * 0.5;
        float _1026 = dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025));
        float _1031 = (_1026 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1026);
        float _1039 = (dot(vec3(_531, _532, _533), vec3(_1031 * _1023, _1031 * _1024, _1031 * _1025)) + 1.0) * 0.5;
        float _3756 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1048 = sqrt(((_1024 * _1024) + (_1023 * _1023)) + (_1025 * _1025)) / (_977 + 9.9999997473787516355514526367188e-06);
        float _3767 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1050 = _1049 * 2.0;
        float _1054 = (1.0 - _1049) / (_1049 + 1.0);
        float _3778 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1064 = ((((1.0 - _1055) * (_1050 + 2.0)) * exp2(log2(isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * (_1050 + 1.0))) + _1055) * _977;
        float _1065 = _945 * 0.5;
        float _1066 = _955 * 0.5;
        float _1067 = _965 * 0.5;
        float _1068 = dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067));
        float _1073 = (_1068 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1068);
        float _1081 = (dot(vec3(_531, _532, _533), vec3(_1073 * _1065, _1073 * _1066, _1073 * _1067)) + 1.0) * 0.5;
        float _3789 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1090 = sqrt(((_1066 * _1066) + (_1065 * _1065)) + (_1067 * _1067)) / (_978 + 9.9999997473787516355514526367188e-06);
        float _3800 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1092 = _1091 * 2.0;
        float _1096 = (1.0 - _1091) / (_1091 + 1.0);
        float _3811 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1106 = ((((1.0 - _1097) * (_1092 + 2.0)) * exp2(log2(isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * (_1092 + 1.0))) + _1097) * _978;
        _1114 = _945;
        _1116 = _944;
        _1117 = _943;
        _1118 = _955;
        _1119 = _954;
        _1120 = _953;
        _1121 = _965;
        _1122 = _964;
        _1123 = _963;
        _1124 = _978;
        _1125 = _977;
        _1126 = _976;
        _1127 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0)));
        _1128 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0)));
        _1129 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)));
    }
    else
    {
        _1114 = _1115;
        _1116 = _1115;
        _1117 = _1115;
        _1118 = _1115;
        _1119 = _1115;
        _1120 = _1115;
        _1121 = _1115;
        _1122 = _1115;
        _1123 = _1115;
        _1124 = _1115;
        _1125 = _1115;
        _1126 = _1115;
        _1127 = 0.0;
        _1128 = 0.0;
        _1129 = 0.0;
    }
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1157 = fma(_784, cbModelParam._m0[30u].z, fma(_780, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _776));
        float _1161 = fma(_784, cbModelParam._m0[31u].z, fma(_780, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _776));
        float _1165 = fma(_784, cbModelParam._m0[32u].z, fma(_780, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _776));
        float _1188 = _776 + _531;
        float _1189 = _780 + _532;
        float _1190 = _784 + _533;
        float _1200 = fma(_1190, cbModelParam._m0[30u].z, fma(_1189, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1188)) - _1157;
        float _1201 = fma(_1190, cbModelParam._m0[31u].z, fma(_1189, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1188)) - _1161;
        float _1202 = fma(_1190, cbModelParam._m0[32u].z, fma(_1189, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1188)) - _1165;
        float _1206 = inversesqrt(dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202)));
        float _1219 = ((_1206 * _1200) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1157 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1220 = ((_1206 * _1201) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1161 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1221 = ((_1206 * _1202) / cbModelParam._m0[35u].z) + ((((((_1165 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1223 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1230 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        float _1256 = exp2((_1223.w + (-0.5)) * 20.0) * 2.0;
        float _1257 = _1256 * (_1223.x + (-0.5));
        float _1258 = _1256 * (_1223.y + (-0.5));
        float _1259 = _1256 * (_1223.z + (-0.5));
        float _1266 = exp2((_1230.w + (-0.5)) * 20.0) * 2.0;
        float _1267 = _1266 * (_1230.x + (-0.5));
        float _1268 = _1266 * (_1230.y + (-0.5));
        float _1269 = _1266 * (_1230.z + (-0.5));
        float _1276 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1237.x + (-0.5));
        float _1278 = _1276 * (_1237.y + (-0.5));
        float _1279 = _1276 * (_1237.z + (-0.5));
        float _1286 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1244.x + (-0.5));
        float _1288 = _1286 * (_1244.y + (-0.5));
        float _1289 = _1286 * (_1244.z + (-0.5));
        float _1290 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1291 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1292 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1293 = _1257 * 0.5;
        float _1294 = _1267 * 0.5;
        float _1295 = _1277 * 0.5;
        float _1296 = dot(vec3(_1293, _1294, _1295), vec3(_1293, _1294, _1295));
        float _1301 = (_1296 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1296);
        float _1309 = (dot(vec3(_531, _532, _533), vec3(_1301 * _1293, _1301 * _1294, _1301 * _1295)) + 1.0) * 0.5;
        float _3852 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1318 = sqrt(((_1294 * _1294) + (_1293 * _1293)) + (_1295 * _1295)) / (_1290 + 9.9999997473787516355514526367188e-06);
        float _3863 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1320 = _1319 * 2.0;
        float _1324 = (1.0 - _1319) / (_1319 + 1.0);
        float _3874 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1334 = ((((1.0 - _1325) * (_1320 + 2.0)) * exp2(log2(isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * (_1320 + 1.0))) + _1325) * _1290;
        float _1335 = _1258 * 0.5;
        float _1336 = _1268 * 0.5;
        float _1337 = _1278 * 0.5;
        float _1338 = dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337));
        float _1343 = (_1338 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1338);
        float _1351 = (dot(vec3(_531, _532, _533), vec3(_1343 * _1335, _1343 * _1336, _1343 * _1337)) + 1.0) * 0.5;
        float _3885 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1360 = sqrt(((_1336 * _1336) + (_1335 * _1335)) + (_1337 * _1337)) / (_1291 + 9.9999997473787516355514526367188e-06);
        float _3896 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1362 = _1361 * 2.0;
        float _1366 = (1.0 - _1361) / (_1361 + 1.0);
        float _3907 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1376 = ((((1.0 - _1367) * (_1362 + 2.0)) * exp2(log2(isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (_1362 + 1.0))) + _1367) * _1291;
        float _1377 = _1259 * 0.5;
        float _1378 = _1269 * 0.5;
        float _1379 = _1279 * 0.5;
        float _1380 = dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379));
        float _1385 = (_1380 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1380);
        float _1393 = (dot(vec3(_531, _532, _533), vec3(_1385 * _1377, _1385 * _1378, _1385 * _1379)) + 1.0) * 0.5;
        float _3918 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1402 = sqrt(((_1378 * _1378) + (_1377 * _1377)) + (_1379 * _1379)) / (_1292 + 9.9999997473787516355514526367188e-06);
        float _3929 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1404 = _1403 * 2.0;
        float _1408 = (1.0 - _1403) / (_1403 + 1.0);
        float _3940 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1418 = ((((1.0 - _1409) * (_1404 + 2.0)) * exp2(log2(isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * (_1404 + 1.0))) + _1409) * _1292;
        _1426 = _1259;
        _1427 = _1258;
        _1428 = _1257;
        _1429 = _1269;
        _1430 = _1268;
        _1431 = _1267;
        _1432 = _1279;
        _1433 = _1278;
        _1434 = _1277;
        _1435 = _1292;
        _1436 = _1291;
        _1437 = _1290;
        _1438 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)));
        _1439 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)));
        _1440 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)));
    }
    else
    {
        _1426 = _1115;
        _1427 = _1115;
        _1428 = _1115;
        _1429 = _1115;
        _1430 = _1115;
        _1431 = _1115;
        _1432 = _1115;
        _1433 = _1115;
        _1434 = _1115;
        _1435 = _1115;
        _1436 = _1115;
        _1437 = _1115;
        _1438 = 0.0;
        _1439 = 0.0;
        _1440 = 0.0;
    }
    float _1450 = (cbModelParam._m0[1u].x * (_1438 - _1127)) + _1127;
    float _1451 = (cbModelParam._m0[1u].x * (_1439 - _1128)) + _1128;
    float _1452 = (cbModelParam._m0[1u].x * (_1440 - _1129)) + _1129;
    float _1473 = fma(_1452, cbSceneParam._m0[89u].z, fma(_1451, cbSceneParam._m0[89u].y, _1450 * cbSceneParam._m0[89u].x));
    float _1476 = fma(_1452, cbSceneParam._m0[90u].z, fma(_1451, cbSceneParam._m0[90u].y, _1450 * cbSceneParam._m0[90u].x));
    float _1479 = fma(_1452, cbSceneParam._m0[91u].z, fma(_1451, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1450));
    float _1494 = _720 * 0.5;
    float _1495 = _721 * 0.5;
    float _1496 = _722 * 0.5;
    float _1497 = dot(vec4(_1494, _1495, _1496, 1.0), vec4(_1428, _1431, _1434, _1437));
    float _1500 = dot(vec4(_1494, _1495, _1496, 1.0), vec4(_1427, _1430, _1433, _1436));
    float _1503 = dot(vec4(_1494, _1495, _1496, 1.0), vec4(_1426, _1429, _1432, _1435));
    float _1537;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1510 = dot(vec4(_1494, _1495, _1496, 1.0), vec4(_1114, _1118, _1121, _1124));
        float _1514 = dot(vec4(_1494, _1495, _1496, 1.0), vec4(_1116, _1119, _1122, _1125));
        float _1518 = dot(vec4(_1494, _1495, _1496, 1.0), vec4(_1117, _1120, _1123, _1126));
        float _1525 = dot(vec4(cbModelParam._m0[39u]), vec4(_1494, _1495, _1496, 1.0));
        _1537 = dot(vec3(isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)), isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)), isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1525) ? 0.0 : (isnan(0.0) ? _1525 : max(0.0, _1525))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1537 = 1.0;
    }
    float _1548;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1539 = dot(vec4(cbModelParam._m0[40u]), vec4(_1494, _1495, _1496, 1.0));
        _1548 = dot(vec3(isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)), isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)), isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1539) ? 0.0 : (isnan(0.0) ? _1539 : max(0.0, _1539))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1548 = 1.0;
    }
    float _1552 = (_1548 * cbModelParam._m0[1u].x) + (_1537 * (1.0 - cbModelParam._m0[1u].x));
    float _1562 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _534);
    float _1563 = isnan(_1562) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1562 : min(cbModelParam._m0[25u].z, _1562));
    float _1644;
    float _1646;
    float _1648;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1611 = fma(_784, cbModelParam._m0[13u].z, fma(_780, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _776)) + cbModelParam._m0[13u].w;
        float _1615 = fma(_784, cbModelParam._m0[14u].z, fma(_780, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _776)) + cbModelParam._m0[14u].w;
        float _1619 = fma(_784, cbModelParam._m0[15u].z, fma(_780, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _776)) + cbModelParam._m0[15u].w;
        float _1622 = fma(_722, cbModelParam._m0[13u].z, fma(_721, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _720));
        float _1625 = fma(_722, cbModelParam._m0[14u].z, fma(_721, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _720));
        float _1628 = fma(_722, cbModelParam._m0[15u].z, fma(_721, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _720));
        float _1656;
        if (_1622 > 0.0)
        {
            _1656 = abs((1.0 - _1611) / _1622);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1622 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1611 + 1.0) / _1622);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1656 = frontier_phi_17_15_ladder;
        }
        float _1861;
        if (_1625 > 0.0)
        {
            _1861 = abs((1.0 - _1615) / _1625);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1625 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1615 + 1.0) / _1625);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1861 = frontier_phi_26_22_ladder;
        }
        float _2115;
        if (_1628 > 0.0)
        {
            _2115 = abs((1.0 - _1619) / _1628);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1628 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1619 + 1.0) / _1628);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2115 = frontier_phi_38_33_ladder;
        }
        float _2117 = isnan(_1861) ? _1656 : (isnan(_1656) ? _1861 : min(_1656, _1861));
        float _2118 = isnan(_2115) ? _2117 : (isnan(_2117) ? _2115 : min(_2117, _2115));
        float _2122 = (_2118 * _1622) + _1611;
        float _2123 = (_2118 * _1625) + _1615;
        float _2124 = (_2118 * _1628) + _1619;
        float _2125 = _2118 * 9.9999997473787516355514526367188e-05;
        float _2127 = (-1.0) - _2125;
        float _2129 = _2125 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2124 > _2129) || ((_2124 < _2127) || ((_2123 > _2129) || ((_2123 < _2127) || ((_2122 < _2127) || (_2122 > _2129))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2252 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2124, cbModelParam._m0[9u].z, fma(_2123, cbModelParam._m0[9u].y, _2122 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2124, cbModelParam._m0[10u].z, fma(_2123, cbModelParam._m0[10u].y, _2122 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2124, cbModelParam._m0[11u].z, fma(_2123, cbModelParam._m0[11u].y, _2122 * cbModelParam._m0[11u].x))), _1563);
            frontier_phi_16_38_ladder = _2252.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2252.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2252.x * cbModelParam._m0[1u].y;
        }
        _1644 = frontier_phi_16_38_ladder_2;
        _1646 = frontier_phi_16_38_ladder_1;
        _1648 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1632 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_720, _721, _722), _1563);
        _1644 = _1632.x * cbModelParam._m0[1u].y;
        _1646 = _1632.y * cbModelParam._m0[1u].y;
        _1648 = _1632.z * cbModelParam._m0[1u].y;
    }
    float _1652 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _534);
    float _1653 = isnan(_1652) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1652 : min(cbModelParam._m0[25u].w, _1652));
    float _1744;
    float _1746;
    float _1748;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1708 = fma(_784, cbModelParam._m0[21u].z, fma(_780, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _776)) + cbModelParam._m0[21u].w;
        float _1712 = fma(_784, cbModelParam._m0[22u].z, fma(_780, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _776)) + cbModelParam._m0[22u].w;
        float _1716 = fma(_784, cbModelParam._m0[23u].z, fma(_780, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _776)) + cbModelParam._m0[23u].w;
        float _1719 = fma(_722, cbModelParam._m0[21u].z, fma(_721, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _720));
        float _1722 = fma(_722, cbModelParam._m0[22u].z, fma(_721, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _720));
        float _1725 = fma(_722, cbModelParam._m0[23u].z, fma(_721, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _720));
        float _1866;
        if (_1719 > 0.0)
        {
            _1866 = abs((1.0 - _1708) / _1719);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1719 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1708 + 1.0) / _1719);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1866 = frontier_phi_28_24_ladder;
        }
        float _2142;
        if (_1722 > 0.0)
        {
            _2142 = abs((1.0 - _1712) / _1722);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1722 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1712 + 1.0) / _1722);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2142 = frontier_phi_40_35_ladder;
        }
        float _2355;
        if (_1725 > 0.0)
        {
            _2355 = abs((1.0 - _1716) / _1725);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1725 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1716 + 1.0) / _1725);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2355 = frontier_phi_49_46_ladder;
        }
        float _2357 = isnan(_2142) ? _1866 : (isnan(_1866) ? _2142 : min(_1866, _2142));
        float _2358 = isnan(_2355) ? _2357 : (isnan(_2357) ? _2355 : min(_2357, _2355));
        float _2362 = (_2358 * _1719) + _1708;
        float _2363 = (_2358 * _1722) + _1712;
        float _2364 = (_2358 * _1725) + _1716;
        float _2365 = _2358 * 9.9999997473787516355514526367188e-05;
        float _2366 = (-1.0) - _2365;
        float _2368 = _2365 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2364 > _2368) || ((_2364 < _2366) || ((_2363 > _2368) || ((_2363 < _2366) || ((_2362 < _2366) || (_2362 > _2368))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2563 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2364, cbModelParam._m0[17u].z, fma(_2363, cbModelParam._m0[17u].y, _2362 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2364, cbModelParam._m0[18u].z, fma(_2363, cbModelParam._m0[18u].y, _2362 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2364, cbModelParam._m0[19u].z, fma(_2363, cbModelParam._m0[19u].y, _2362 * cbModelParam._m0[19u].x))), _1653);
            frontier_phi_25_49_ladder = _2563.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2563.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2563.x * cbModelParam._m0[1u].z;
        }
        _1744 = frontier_phi_25_49_ladder_2;
        _1746 = frontier_phi_25_49_ladder_1;
        _1748 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1728 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_720, _721, _722), _1653);
        _1744 = _1728.x * cbModelParam._m0[1u].z;
        _1746 = _1728.y * cbModelParam._m0[1u].z;
        _1748 = _1728.z * cbModelParam._m0[1u].z;
    }
    float _1761 = (((_747 * _696) + _748) * _712) * ((cbModelParam._m0[1u].w * (_1744 - _1644)) + _1644);
    float _1763 = (((_747 * _698) + _748) * _712) * ((cbModelParam._m0[1u].w * (_1746 - _1646)) + _1646);
    float _1765 = (((_747 * _699) + _748) * _712) * ((cbModelParam._m0[1u].w * (_1748 - _1648)) + _1648);
    float _1768 = fma(_1765, cbSceneParam._m0[89u].z, fma(_1763, cbSceneParam._m0[89u].y, _1761 * cbSceneParam._m0[89u].x));
    float _1771 = fma(_1765, cbSceneParam._m0[90u].z, fma(_1763, cbSceneParam._m0[90u].y, _1761 * cbSceneParam._m0[90u].x));
    float _1774 = fma(_1765, cbSceneParam._m0[91u].z, fma(_1763, cbSceneParam._m0[91u].y, _1761 * cbSceneParam._m0[91u].x));
    uvec4 _1784 = floatBitsToUint(cbInstanceData._m0[_256 + 5u]);
    uint _1786 = _1784.x * 14u;
    uint _1787 = _1786 + 13u;
    float _1794 = _712 + (-1.0);
    float _1799 = (cbLight._m0[_1787].x * _1794) + 1.0;
    float _1800 = (cbLight._m0[_1787].y * _1794) + 1.0;
    float _1801 = (cbLight._m0[_1787].z * _1794) + 1.0;
    float _1802 = (cbLight._m0[_1787].w * _1794) + 1.0;
    uint _1803 = _1786 + 5u;
    float _1809 = isnan(1.0) ? _1800 : (isnan(_1800) ? 1.0 : min(_1800, 1.0));
    uint _1813 = _1786 + 4u;
    float _1820 = isnan(1.0) ? _1799 : (isnan(_1799) ? 1.0 : min(_1799, 1.0));
    uint _1824 = _1786 | 1u;
    float _1835 = dot(vec3(cbLight._m0[_1786].xyz), vec3(_531, _532, _533));
    float _1838 = dot(vec3(cbLight._m0[_1824].xyz), vec3(_531, _532, _533));
    float _4076 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
    float _4087 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
    float _1843 = (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * 0.3183098733425140380859375;
    float _1845 = (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * 0.3183098733425140380859375;
    float _1852 = ((cbLight._m0[_1803].x * _1809) * _1845) + ((cbLight._m0[_1813].x * _1820) * _1843);
    float _1853 = ((_1809 * cbLight._m0[_1803].y) * _1845) + ((_1820 * cbLight._m0[_1813].y) * _1843);
    float _1854 = ((_1809 * cbLight._m0[_1803].z) * _1845) + ((_1820 * cbLight._m0[_1813].z) * _1843);
    uvec4 _1858 = floatBitsToUint(cbLight._m0[_1786 + 12u]);
    bool _1860 = _1858.x == 0u;
    float _1871;
    float _1873;
    float _1875;
    if (_1860)
    {
        _1871 = _1852;
        _1873 = _1853;
        _1875 = _1854;
    }
    else
    {
        uint _1879 = _1786 + 6u;
        float _1895 = (dot(vec3(cbLight._m0[_1786 + 2u].xyz), vec3(_531, _532, _533)) * 0.5) + 0.5;
        float _1896 = _1895 * _1895;
        float _4098 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
        float _1897 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1898 = isnan(1.0) ? _1801 : (isnan(_1801) ? 1.0 : min(_1801, 1.0));
        _1871 = (((cbLight._m0[_1879].x * 0.3183098733425140380859375) * _1897) * _1898) + _1852;
        _1873 = (((cbLight._m0[_1879].y * 0.3183098733425140380859375) * _1897) * _1898) + _1853;
        _1875 = (((cbLight._m0[_1879].z * 0.3183098733425140380859375) * _1897) * _1898) + _1854;
    }
    bool _1878 = _1858.y == 0u;
    float _1916;
    float _1918;
    float _1920;
    if (_1878)
    {
        _1916 = _1871;
        _1918 = _1873;
        _1920 = _1875;
    }
    else
    {
        uint _2086 = _1786 + 7u;
        float _2102 = (dot(vec3(cbLight._m0[_1786 + 3u].xyz), vec3(_531, _532, _533)) * 0.5) + 0.5;
        float _2103 = _2102 * _2102;
        float _4114 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2104 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _2105 = isnan(1.0) ? _1802 : (isnan(_1802) ? 1.0 : min(_1802, 1.0));
        _1916 = (((cbLight._m0[_2086].x * 0.3183098733425140380859375) * _2104) * _2105) + _1871;
        _1918 = (((cbLight._m0[_2086].y * 0.3183098733425140380859375) * _2104) * _2105) + _1873;
        _1920 = (((cbLight._m0[_2086].z * 0.3183098733425140380859375) * _2104) * _2105) + _1875;
    }
    uint _1923 = _1786 + 8u;
    float _1936 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1786].w)) * _534) * 0.949999988079071044921875);
    float _1937 = _1936 * _1936;
    float _1938 = cbLight._m0[_1786].x + _611;
    float _1939 = cbLight._m0[_1786].y + _612;
    float _1940 = cbLight._m0[_1786].z + _613;
    float _1944 = inversesqrt(dot(vec3(_1938, _1939, _1940), vec3(_1938, _1939, _1940)));
    float _1945 = _1944 * _1938;
    float _1946 = _1944 * _1939;
    float _1947 = _1944 * _1940;
    float _1948 = dot(vec3(_531, _532, _533), vec3(cbLight._m0[_1786].xyz));
    float _4130 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1951 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _4141 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _1952 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _1953 = dot(vec3(_531, _532, _533), vec3(_1945, _1946, _1947));
    float _4152 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _1956 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _1957 = dot(vec3(cbLight._m0[_1786].xyz), vec3(_1945, _1946, _1947));
    float _4163 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1961 = _1937 * _1937;
    float _1965 = ((_1956 * _1956) * (_1961 + (-1.0))) + 1.0;
    float _1973 = exp2(log2(1.0 - (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) * 5.0);
    float _1974 = 0.959999978542327880859375 - _693;
    float _1976 = 0.959999978542327880859375 - _694;
    float _1977 = 0.959999978542327880859375 - _695;
    float _1984 = 1.0 - _1937;
    float _1995 = (0.5 / (((_1952 * ((_1951 * _1984) + _1937)) + 9.9999999392252902907785028219223e-09) + (((_1952 * _1984) + _1937) * _1951))) * _1951;
    float _4174 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _1997 = (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_1961 / ((_1965 * _1965) * 3.141590118408203125));
    uint _2008 = _1786 + 9u;
    float _2019 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1824].w)) * _534) * 0.949999988079071044921875);
    float _2020 = _2019 * _2019;
    float _2021 = cbLight._m0[_1824].x + _611;
    float _2022 = cbLight._m0[_1824].y + _612;
    float _2023 = cbLight._m0[_1824].z + _613;
    float _2027 = inversesqrt(dot(vec3(_2021, _2022, _2023), vec3(_2021, _2022, _2023)));
    float _2028 = _2027 * _2021;
    float _2029 = _2027 * _2022;
    float _2030 = _2027 * _2023;
    float _2031 = dot(vec3(_531, _532, _533), vec3(cbLight._m0[_1824].xyz));
    float _4185 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2034 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _2035 = dot(vec3(_531, _532, _533), vec3(_2028, _2029, _2030));
    float _4196 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
    float _2038 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
    float _2039 = dot(vec3(cbLight._m0[_1824].xyz), vec3(_2028, _2029, _2030));
    float _4207 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2043 = _2020 * _2020;
    float _2047 = ((_2038 * _2038) * (_2043 + (-1.0))) + 1.0;
    float _2054 = exp2(log2(1.0 - (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0)))) * 5.0);
    float _2061 = 1.0 - _2020;
    float _2071 = (0.5 / (((_1952 * ((_2034 * _2061) + _2020)) + 9.9999999392252902907785028219223e-09) + (((_1952 * _2061) + _2020) * _2034))) * _2034;
    float _4218 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2073 = (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_2043 / ((_2047 * _2047) * 3.141590118408203125));
    float _2083 = (((((_2054 * _1974) + _696) * cbLight._m0[_2008].x) * _2073) * _1809) + (((((_1973 * _1974) + _696) * cbLight._m0[_1923].x) * _1997) * _1820);
    float _2084 = (((((_2054 * _1976) + _698) * cbLight._m0[_2008].y) * _2073) * _1809) + (((((_1973 * _1976) + _698) * cbLight._m0[_1923].y) * _1997) * _1820);
    float _2085 = (((((_2054 * _1977) + _699) * cbLight._m0[_2008].z) * _2073) * _1809) + (((((_1973 * _1977) + _699) * cbLight._m0[_1923].z) * _1997) * _1820);
    float _2147;
    float _2149;
    float _2151;
    if (_1860)
    {
        _2147 = _2083;
        _2149 = _2084;
        _2151 = _2085;
    }
    else
    {
        uint _2153 = _1786 + 2u;
        uint _2157 = _1786 + 10u;
        float _2171 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2153].w)) * _534) * 0.949999988079071044921875);
        float _2172 = _2171 * _2171;
        float _2173 = cbLight._m0[_2153].x + _611;
        float _2174 = cbLight._m0[_2153].y + _612;
        float _2175 = cbLight._m0[_2153].z + _613;
        float _2179 = inversesqrt(dot(vec3(_2173, _2174, _2175), vec3(_2173, _2174, _2175)));
        float _2180 = _2179 * _2173;
        float _2181 = _2179 * _2174;
        float _2182 = _2179 * _2175;
        float _2183 = dot(vec3(_531, _532, _533), vec3(cbLight._m0[_2153].xyz));
        float _4229 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
        float _2186 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _2187 = dot(vec3(_531, _532, _533), vec3(_2180, _2181, _2182));
        float _4240 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        float _2190 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _2191 = dot(vec3(cbLight._m0[_2153].xyz), vec3(_2180, _2181, _2182));
        float _4251 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        float _2195 = _2172 * _2172;
        float _2199 = ((_2190 * _2190) * (_2195 + (-1.0))) + 1.0;
        float _2206 = exp2(log2(1.0 - (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0)))) * 5.0);
        float _2213 = 1.0 - _2172;
        float _2223 = (0.5 / (((_1952 * ((_2186 * _2213) + _2172)) + 9.9999999392252902907785028219223e-09) + (((_1952 * _2213) + _2172) * _2186))) * _2186;
        float _4262 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2225 = (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_2195 / ((_2199 * _2199) * 3.141590118408203125));
        float _2226 = isnan(1.0) ? _1801 : (isnan(_1801) ? 1.0 : min(_1801, 1.0));
        _2147 = (((((_2206 * _1974) + _696) * cbLight._m0[_2157].x) * _2225) * _2226) + _2083;
        _2149 = (((((_2206 * _1976) + _698) * cbLight._m0[_2157].y) * _2225) * _2226) + _2084;
        _2151 = (((((_2206 * _1977) + _699) * cbLight._m0[_2157].z) * _2225) * _2226) + _2085;
    }
    float _2261;
    float _2263;
    float _2265;
    if (_1878)
    {
        _2261 = _2147;
        _2263 = _2149;
        _2265 = _2151;
    }
    else
    {
        uint _2272 = _1786 + 3u;
        uint _2276 = _1786 + 11u;
        float _2290 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2272].w)) * _534) * 0.949999988079071044921875);
        float _2291 = _2290 * _2290;
        float _2292 = cbLight._m0[_2272].x + _611;
        float _2293 = cbLight._m0[_2272].y + _612;
        float _2294 = cbLight._m0[_2272].z + _613;
        float _2298 = inversesqrt(dot(vec3(_2292, _2293, _2294), vec3(_2292, _2293, _2294)));
        float _2299 = _2298 * _2292;
        float _2300 = _2298 * _2293;
        float _2301 = _2298 * _2294;
        float _2302 = dot(vec3(_531, _532, _533), vec3(cbLight._m0[_2272].xyz));
        float _4278 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2305 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _2306 = dot(vec3(_531, _532, _533), vec3(_2299, _2300, _2301));
        float _4289 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
        float _2309 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _2310 = dot(vec3(cbLight._m0[_2272].xyz), vec3(_2299, _2300, _2301));
        float _4300 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
        float _2314 = _2291 * _2291;
        float _2318 = ((_2309 * _2309) * (_2314 + (-1.0))) + 1.0;
        float _2325 = exp2(log2(1.0 - (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0)))) * 5.0);
        float _2332 = 1.0 - _2291;
        float _2342 = (0.5 / (((_1952 * ((_2305 * _2332) + _2291)) + 9.9999999392252902907785028219223e-09) + (((_1952 * _2332) + _2291) * _2305))) * _2305;
        float _4311 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2344 = (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_2314 / ((_2318 * _2318) * 3.141590118408203125));
        float _2345 = isnan(1.0) ? _1802 : (isnan(_1802) ? 1.0 : min(_1802, 1.0));
        _2261 = (((((_2325 * _1974) + _696) * cbLight._m0[_2276].x) * _2344) * _2345) + _2147;
        _2263 = (((((_2325 * _1976) + _698) * cbLight._m0[_2276].y) * _2344) * _2345) + _2149;
        _2265 = (((((_2325 * _1977) + _699) * cbLight._m0[_2276].z) * _2344) * _2345) + _2151;
    }
    float _2480;
    float _2482;
    float _2484;
    float _2486;
    float _2488;
    float _2490;
    if (_1784.y == 0u)
    {
        float _2420 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2421 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2420;
        float _2422 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2420;
        float _2423 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2420;
        uvec4 _2435 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2436 = _2435.x;
        uint _2447 = uint((float(_2435.y) * floor(float(uint(cbSceneParam._m0[85u].y * _633) / _2436))) + floor(float(uint(cbSceneParam._m0[85u].x * _632) / _2436)));
        float _2457 = (log2(_2423 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2458 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        uint _2461 = uint(isnan(14.0) ? _2458 : (isnan(_2458) ? 14.0 : min(_2458, 14.0)));
        uvec4 _2466 = texelFetch(g_lightClusterGridBuffer, int(((_2461 << 2u) + (_2447 << 6u)) >> 2u));
        uint _2467 = _2466.x;
        uint _2468 = _2435.z;
        float _2568;
        float _2570;
        float _2572;
        float _2574;
        float _2576;
        float _2578;
        if (((((1u << ((_2468 >> 4u) & 15u)) + 4294967295u) & _2467) == 0u) || ((_2468 & 240u) == 0u))
        {
            _2568 = 0.0;
            _2570 = 0.0;
            _2572 = 0.0;
            _2574 = 0.0;
            _2576 = 0.0;
            _2578 = 0.0;
        }
        else
        {
            float _2569;
            float _2571;
            float _2573;
            float _2575;
            float _2577;
            float _2579;
            float _2721 = 0.0;
            float _2722 = 0.0;
            float _2723 = 0.0;
            float _2724 = 0.0;
            float _2725 = 0.0;
            float _2726 = 0.0;
            uint _2727 = 0u;
            uint _2736;
            bool _2737;
            for (;;)
            {
                _2736 = texelFetch(g_lightClassification, int((((_2461 << 5u) + (_2447 << 9u)) + (_2727 << 2u)) >> 2u)).x;
                _2737 = _2736 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2737)
                {
                    frontier_phi_66_pred = _2721;
                    frontier_phi_66_pred_1 = _2726;
                    frontier_phi_66_pred_2 = _2725;
                    frontier_phi_66_pred_3 = _2724;
                    frontier_phi_66_pred_4 = _2723;
                    frontier_phi_66_pred_5 = _2722;
                }
                else
                {
                    float _2866;
                    float _2867;
                    float _2868;
                    float _2869;
                    float _2870;
                    float _2871;
                    uint _2872;
                    _2866 = _2721;
                    _2867 = _2722;
                    _2868 = _2723;
                    _2869 = _2724;
                    _2870 = _2725;
                    _2871 = _2726;
                    _2872 = _2736;
                    float _2793;
                    float _2794;
                    float _2795;
                    float _2796;
                    float _2797;
                    float _2798;
                    for (;;)
                    {
                        uint _2876 = uint(findLSB(_2872)) + (_2727 << 5u);
                        uint _2873 = (_2872 + 4294967295u) & _2872;
                        uint _2878 = _2876 * 48u;
                        vec4 _2892 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2878)).x, texelFetch(g_PointLightRenderingBuffer, int(_2878 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2878 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2878 + 3u)).x));
                        uint _2898 = (_2876 * 48u) + 4u;
                        vec4 _2911 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2898)).x, texelFetch(g_PointLightRenderingBuffer, int(_2898 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2898 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2898 + 3u)).x));
                        uint _2917 = (_2876 * 48u) + 8u;
                        vec3 _2928 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2917)).x, texelFetch(g_PointLightRenderingBuffer, int(_2917 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2917 + 2u)).x));
                        float _2932 = _2892.x - _2421;
                        float _2933 = _2892.y - _2422;
                        float _2934 = _2892.z - _2423;
                        float _2935 = dot(vec3(_2932, _2933, _2934), vec3(_2932, _2933, _2934));
                        float _2938 = inversesqrt(_2935);
                        float _2939 = _2938 * _2932;
                        float _2940 = _2938 * _2933;
                        float _2941 = _2938 * _2934;
                        float _2942 = dot(vec3(_653, _656, _659), vec3(_2939, _2940, _2941));
                        float _2947 = 1.0 - (_2935 * _2892.w);
                        float _4337 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
                        float _2948 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                        float _2949 = sqrt(_2935) * _2911.w;
                        float _2952 = 1.39999997615814208984375 / (_2949 + 1.39999997615814208984375);
                        float _2953 = _2952 * _2952;
                        float _2956 = ((1.0 - _2953) * _2942) + _2953;
                        float _2959 = _2949 * _2949;
                        float _2963 = ((isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0))) * _2948) / ((_2959 * 0.699999988079071044921875) + 1.0);
                        float _2967 = (-0.0) - _2421;
                        float _2968 = (-0.0) - _2422;
                        float _2969 = (-0.0) - _2423;
                        float _2973 = inversesqrt(dot(vec3(_2967, _2968, _2969), vec3(_2967, _2968, _2969)));
                        float _2974 = _2973 * _2967;
                        float _2975 = _2973 * _2968;
                        float _2976 = _2973 * _2969;
                        float _2984 = exp2(log2(1.0 / ((_2959 * 3.5) + 5.0)) * 0.25);
                        float _2985 = 1.0 - _728;
                        float _2992 = sqrt(1.0 - ((1.0 - (_2985 * _2985)) * (1.0 - (_2984 * _2984))));
                        float _2993 = _2992 * _2992;
                        float _2994 = _2993 * _2993;
                        float _2995 = _2974 + _2939;
                        float _2996 = _2975 + _2940;
                        float _2997 = _2976 + _2941;
                        float _3001 = inversesqrt(dot(vec3(_2995, _2996, _2997), vec3(_2995, _2996, _2997)));
                        float _3005 = dot(vec3(_653, _656, _659), vec3(_2974, _2975, _2976));
                        float _4353 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
                        float _3008 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                        float _3009 = dot(vec3(_653, _656, _659), vec3(_3001 * _2995, _3001 * _2996, _3001 * _2997));
                        float _4364 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                        float _3012 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
                        float _3016 = ((_3012 * _3012) * (_2994 + (-1.0))) + 1.0;
                        float _3017 = _2952 * _2993;
                        float _3018 = _3017 * _3017;
                        float _3021 = ((1.0 - _3018) * _2942) + _3018;
                        float _4375 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
                        float _3022 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
                        float _3023 = 1.0 - _2993;
                        float _3033 = (0.5 / (((_3022 * ((_3008 * _3023) + _2993)) + 9.9999999392252902907785028219223e-09) + (((_3022 * _3023) + _2993) * _3008))) * _3022;
                        float _4386 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                        float _3044 = (((_2994 * 3.1415927410125732421875) * (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0)))) / ((_3016 * _3016) * ((_2959 * 2.1991131305694580078125) + 3.141590118408203125))) * _2948;
                        _2796 = (_2963 * _2911.x) + _2869;
                        _2797 = (_2963 * _2911.y) + _2870;
                        _2798 = (_2963 * _2911.z) + _2871;
                        _2793 = (_3044 * _2928.x) + _2866;
                        _2794 = (_3044 * _2928.y) + _2867;
                        _2795 = (_3044 * _2928.z) + _2868;
                        if (_2873 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2866 = _2793;
                            _2867 = _2794;
                            _2868 = _2795;
                            _2869 = _2796;
                            _2870 = _2797;
                            _2871 = _2798;
                            _2872 = _2873;
                        }
                    }
                    frontier_phi_66_pred = _2793;
                    frontier_phi_66_pred_1 = _2798;
                    frontier_phi_66_pred_2 = _2797;
                    frontier_phi_66_pred_3 = _2796;
                    frontier_phi_66_pred_4 = _2795;
                    frontier_phi_66_pred_5 = _2794;
                }
                _2569 = frontier_phi_66_pred;
                _2579 = frontier_phi_66_pred_1;
                _2577 = frontier_phi_66_pred_2;
                _2575 = frontier_phi_66_pred_3;
                _2573 = frontier_phi_66_pred_4;
                _2571 = frontier_phi_66_pred_5;
                uint _2728 = _2727 + 1u;
                if (_2728 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2721 = _2569;
                    _2722 = _2571;
                    _2723 = _2573;
                    _2724 = _2575;
                    _2725 = _2577;
                    _2726 = _2579;
                    _2727 = _2728;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2568 = _2569;
            _2570 = _2571;
            _2572 = _2573;
            _2574 = _2575;
            _2576 = _2577;
            _2578 = _2579;
        }
        uvec4 _2582 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2583 = _2582.z;
        uint _2585 = (_2583 >> 8u) & 15u;
        float _2689;
        float _2691;
        float _2693;
        float _2695;
        float _2697;
        float _2699;
        if (((4294967295u << _2585) & _2467) == 0u)
        {
            _2689 = _2568;
            _2691 = _2570;
            _2693 = _2572;
            _2695 = _2574;
            _2697 = _2576;
            _2699 = _2578;
        }
        else
        {
            float _2714 = inversesqrt(dot(vec3(_2421, _2422, _2423), vec3(_2421, _2422, _2423)));
            float _2715 = _2714 * _2421;
            float _2716 = _2714 * _2422;
            float _2717 = _2714 * _2423;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2585 < ((_2583 >> 12u) & 15u))
            {
                float _2690;
                float _2692;
                float _2694;
                float _2696;
                float _2698;
                float _2700;
                float _2849 = _2568;
                float _2850 = _2570;
                float _2851 = _2572;
                float _2852 = _2574;
                float _2853 = _2576;
                float _2854 = _2578;
                uint _2855 = _2585;
                uint _2864;
                bool _2865;
                for (;;)
                {
                    _2864 = texelFetch(g_lightClassification, int((((_2461 << 5u) + (_2447 << 9u)) + (_2855 << 2u)) >> 2u)).x;
                    _2865 = _2864 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2865)
                    {
                        frontier_phi_77_pred = _2854;
                        frontier_phi_77_pred_1 = _2853;
                        frontier_phi_77_pred_2 = _2852;
                        frontier_phi_77_pred_3 = _2851;
                        frontier_phi_77_pred_4 = _2850;
                        frontier_phi_77_pred_5 = _2849;
                    }
                    else
                    {
                        float _3058;
                        float _3059;
                        float _3060;
                        float _3061;
                        float _3062;
                        float _3063;
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3071 = _2849;
                        float _3072 = _2850;
                        float _3073 = _2851;
                        float _3074 = _2852;
                        float _3075 = _2853;
                        float _3076 = _2854;
                        uint _3077 = _2864;
                        uint _3078;
                        vec4 _3103;
                        float _3104;
                        vec4 _3119;
                        vec3 _3131;
                        vec4 _3146;
                        vec4 _3161;
                        float _3207;
                        bool _3208;
                        for (;;)
                        {
                            uint _3088 = ((_2855 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3077));
                            _3078 = (_3077 + 4294967295u) & _3077;
                            uint _3090 = _3088 * 40u;
                            _3103 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3090)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 3u)).x));
                            _3104 = _3103.w;
                            uint _3106 = (_3088 * 40u) + 4u;
                            _3119 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3106)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 3u)).x));
                            uint _3121 = (_3088 * 40u) + 8u;
                            _3131 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3121)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 2u)).x));
                            uint _3133 = (_3088 * 40u) + 16u;
                            _3146 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3133)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 3u)).x));
                            uint _3148 = (_3088 * 40u) + 20u;
                            _3161 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3148)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 3u)).x));
                            uint _3163 = (_3088 * 40u) + 24u;
                            vec4 _3176 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 3u)).x));
                            uint _3182 = (_3088 * 40u) + 28u;
                            vec4 _3195 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3182)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 3u)).x));
                            _3207 = fma(_2423, _3195.z, fma(_2422, _3195.y, _3195.x * _2421)) + _3195.w;
                            _3208 = !((fma(_2423, _3176.z, fma(_2422, _3176.y, _3176.x * _2421)) + _3176.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3208)
                            {
                                float _3235 = _3103.x - _2421;
                                float _3236 = _3103.y - _2422;
                                float _3237 = _3103.z - _2423;
                                float _3238 = dot(vec3(_3235, _3236, _3237), vec3(_3235, _3236, _3237));
                                float _3241 = inversesqrt(_3238);
                                float _3242 = _3241 * _3235;
                                float _3243 = _3241 * _3236;
                                float _3244 = _3241 * _3237;
                                float _3248 = 1.0 - (_3238 / (_3104 * _3104));
                                float _4397 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                                float _3249 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
                                float _3253 = sqrt(_3238) * _3119.w;
                                float _3255 = 1.39999997615814208984375 / (_3253 + 1.39999997615814208984375);
                                float _3256 = _3255 * _3255;
                                float _3259 = ((1.0 - _3256) * dot(vec3(_3242, _3243, _3244), vec3(_653, _656, _659))) + _3256;
                                float _3262 = _3253 * _3253;
                                float _3266 = (fma(_2423, _3146.z, fma(_2422, _3146.y, _3146.x * _2421)) + _3146.w) / _3207;
                                float _3267 = (fma(_2423, _3161.z, fma(_2422, _3161.y, _3161.x * _2421)) + _3161.w) / _3207;
                                float _3271 = 1.0 - dot(vec2(_3266, _3267), vec2(_3266, _3267));
                                float _4413 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                                float _3272 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
                                float _3273 = _3272 * (((isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0))) * _3249) / ((_3262 * 0.699999988079071044921875) + 1.0));
                                float _3285 = exp2(log2(1.0 / ((_3262 * 3.5) + 5.0)) * 0.25);
                                float _3286 = 1.0 - _728;
                                float _3293 = sqrt(1.0 - ((1.0 - (_3286 * _3286)) * (1.0 - (_3285 * _3285))));
                                float _3294 = _3293 * _3293;
                                float _3295 = _3294 * _3294;
                                float _3296 = _3242 - _2715;
                                float _3297 = _3243 - _2716;
                                float _3298 = _3244 - _2717;
                                float _3302 = inversesqrt(dot(vec3(_3296, _3297, _3298), vec3(_3296, _3297, _3298)));
                                float _3306 = dot(vec3(_653, _656, _659), vec3((-0.0) - _2715, (-0.0) - _2716, (-0.0) - _2717));
                                float _4424 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                                float _3309 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
                                float _3310 = dot(vec3(_653, _656, _659), vec3(_3302 * _3296, _3302 * _3297, _3302 * _3298));
                                float _4435 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                                float _3313 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
                                float _3317 = ((_3313 * _3313) * (_3295 + (-1.0))) + 1.0;
                                float _3318 = _3255 * _3294;
                                float _3319 = _3318 * _3318;
                                float _3325 = ((1.0 - _3319) * dot(vec3(_653, _656, _659), vec3(_3242, _3243, _3244))) + _3319;
                                float _4446 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                                float _3326 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                                float _3327 = 1.0 - _3294;
                                float _3337 = (0.5 / (((_3326 * ((_3309 * _3327) + _3294)) + 9.9999999392252902907785028219223e-09) + (((_3326 * _3327) + _3294) * _3309))) * _3326;
                                float _4457 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                                float _3347 = (_3272 * _3249) * (((_3295 * 3.1415927410125732421875) * (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0)))) / ((_3317 * _3317) * ((_3262 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3273 * _3119.y;
                                frontier_phi_83_pred_1 = _3273 * _3119.x;
                                frontier_phi_83_pred_2 = _3347 * _3131.z;
                                frontier_phi_83_pred_3 = _3347 * _3131.y;
                                frontier_phi_83_pred_4 = _3347 * _3131.x;
                                frontier_phi_83_pred_5 = _3273 * _3119.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3355 = frontier_phi_83_pred;
                            _3354 = frontier_phi_83_pred_1;
                            _3353 = frontier_phi_83_pred_2;
                            _3352 = frontier_phi_83_pred_3;
                            _3351 = frontier_phi_83_pred_4;
                            _3356 = frontier_phi_83_pred_5;
                            _3061 = _3354 + _3074;
                            _3062 = _3355 + _3075;
                            _3063 = _3356 + _3076;
                            _3058 = _3351 + _3071;
                            _3059 = _3352 + _3072;
                            _3060 = _3353 + _3073;
                            if (_3078 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3071 = _3058;
                                _3072 = _3059;
                                _3073 = _3060;
                                _3074 = _3061;
                                _3075 = _3062;
                                _3076 = _3063;
                                _3077 = _3078;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3063;
                        frontier_phi_77_pred_1 = _3062;
                        frontier_phi_77_pred_2 = _3061;
                        frontier_phi_77_pred_3 = _3060;
                        frontier_phi_77_pred_4 = _3059;
                        frontier_phi_77_pred_5 = _3058;
                    }
                    _2700 = frontier_phi_77_pred;
                    _2698 = frontier_phi_77_pred_1;
                    _2696 = frontier_phi_77_pred_2;
                    _2694 = frontier_phi_77_pred_3;
                    _2692 = frontier_phi_77_pred_4;
                    _2690 = frontier_phi_77_pred_5;
                    uint _2856 = _2855 + 1u;
                    if (_2856 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2849 = _2690;
                        _2850 = _2692;
                        _2851 = _2694;
                        _2852 = _2696;
                        _2853 = _2698;
                        _2854 = _2700;
                        _2855 = _2856;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2694;
                frontier_phi_58_59_ladder_1 = _2700;
                frontier_phi_58_59_ladder_2 = _2698;
                frontier_phi_58_59_ladder_3 = _2696;
                frontier_phi_58_59_ladder_4 = _2692;
                frontier_phi_58_59_ladder_5 = _2690;
            }
            else
            {
                frontier_phi_58_59_ladder = _2572;
                frontier_phi_58_59_ladder_1 = _2578;
                frontier_phi_58_59_ladder_2 = _2576;
                frontier_phi_58_59_ladder_3 = _2574;
                frontier_phi_58_59_ladder_4 = _2570;
                frontier_phi_58_59_ladder_5 = _2568;
            }
            _2689 = frontier_phi_58_59_ladder_5;
            _2691 = frontier_phi_58_59_ladder_4;
            _2693 = frontier_phi_58_59_ladder;
            _2695 = frontier_phi_58_59_ladder_3;
            _2697 = frontier_phi_58_59_ladder_2;
            _2699 = frontier_phi_58_59_ladder_1;
        }
        float _2704 = isnan(1.0) ? _712 : (isnan(_712) ? 1.0 : min(_712, 1.0));
        _2480 = (_2704 * _2695) + _1916;
        _2482 = (_2704 * _2697) + _1918;
        _2484 = (_2704 * _2699) + _1920;
        _2486 = ((_2689 * _696) * _2704) + _2261;
        _2488 = ((_2691 * _698) * _2704) + _2263;
        _2490 = ((_2693 * _699) * _2704) + _2265;
    }
    else
    {
        _2480 = _1916;
        _2482 = _1918;
        _2484 = _1920;
        _2486 = _2261;
        _2488 = _2263;
        _2490 = _2265;
    }
    float _4473 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _4484 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _4495 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _2507 = ((isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (_2480 + ((isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0))) * _712))) + ((_2486 + ((isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))) * _1552)) * cbPerFrame._m0[3u].x);
    float _2508 = ((isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (_2482 + ((isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0))) * _712))) + ((_2488 + ((isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))) * _1552)) * cbPerFrame._m0[3u].x);
    float _2509 = ((isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_2484 + ((isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0))) * _712))) + ((_2490 + ((isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))) * _1552)) * cbPerFrame._m0[3u].x);
    uint _2510 = _256 + 6u;
    float _2518 = _632 / cbSceneParam._m0[86u].x;
    float _2519 = _633 / cbSceneParam._m0[86u].y;
    vec4 _2533 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2518, _2519, (log2((isnan(cbSceneParam._m0[77u].w) ? _553 : (isnan(_553) ? cbSceneParam._m0[77u].w : min(_553, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2535 = _2533.x;
    float _2536 = _2533.y;
    float _2537 = _2533.z;
    float _2538 = _2533.w;
    float _2631;
    float _2633;
    float _2635;
    float _2637;
    if (_553 > cbSceneParam._m0[78u].w)
    {
        float _2593 = isnan(_553) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _553 : min(cbSceneParam._m0[80u].w, _553));
        float _2594 = _2593 / _553;
        float _2605 = _2594 * _604;
        float _2606 = _605 * _2594;
        float _2607 = (-0.0) - _2606;
        float _2609 = _2594 * _606;
        float _2611 = (cbSceneParam._m0[77u].w * _2607) / _2593;
        float _2612 = _2611 + cbSceneParam._m0[79u].w;
        float _2613 = cbSceneParam._m0[79u].w - _2606;
        float _2619 = sqrt(((_2605 * _2605) + (_2606 * _2606)) + (_2609 * _2609));
        float _2622 = (1.0 - (cbSceneParam._m0[77u].w / _2593)) * _2619;
        float _2627 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2629 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2806;
        if (abs((_2607 - _2611) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2806 = ((((_2612 > 0.0) ? exp2(_2627 * _2612) : (2.0 - exp2(_2629 * _2612))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2622;
        }
        else
        {
            float _2750 = 1.0 / cbSceneParam._m0[80u].x;
            float _2751 = isnan(_2613) ? _2612 : (isnan(_2612) ? _2613 : max(_2612, _2613));
            float _2752 = isnan(_2613) ? _2612 : (isnan(_2612) ? _2613 : min(_2612, _2613));
            float _2761 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : min(_2751, 0.0));
            float _2762 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : min(_2752, 0.0));
            _2806 = ((abs(_2619 / _2607) * cbSceneParam._m0[80u].y) * ((((_2761 - _2762) * 2.0) - ((exp2(_2627 * (isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0)))) - exp2(_2627 * (isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0))))) * _2750)) - ((exp2(_2629 * _2761) - exp2(_2629 * _2762)) * _2750))) + (_2622 * cbSceneParam._m0[80u].z);
        }
        vec4 _2808 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2518, _2519, 1.0), 0.0);
        float _2817 = exp2((_2806 * (-1.44269502162933349609375)) * (1.0 - _2808.w));
        float _2818 = log2(_2817);
        float _2834 = log2(_2538);
        _2631 = (exp2(_2834 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2818 * cbSceneParam._m0[78u].x)) * _2808.x) / cbSceneParam._m0[78u].x)) + _2535;
        _2633 = (exp2(_2834 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2818 * cbSceneParam._m0[78u].y)) * _2808.y) / cbSceneParam._m0[78u].y)) + _2536;
        _2635 = (exp2(_2834 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2818 * cbSceneParam._m0[78u].z)) * _2808.z) / cbSceneParam._m0[78u].z)) + _2537;
        _2637 = _2817 * _2538;
    }
    else
    {
        _2631 = _2535;
        _2633 = _2536;
        _2635 = _2537;
        _2637 = _2538;
    }
    bool _2844;
    vec4 _2647;
    vec4 _2669;
    float _2671;
    float _2675;
    float _2676;
    float _2677;
    float _2678;
    bool _2688;
    for (;;)
    {
        _2647 = cbMatDynParam._m0[0u];
        float _2649 = roundEven(_2647.y);
        bool _2650 = _2649 == 3.0;
        float _2651 = log2(_2637);
        float _2658 = exp2(_2651 * cbSceneParam._m0[78u].x) * _2507;
        float _2659 = exp2(_2651 * cbSceneParam._m0[78u].y) * _2508;
        float _2660 = exp2(_2651 * cbSceneParam._m0[78u].z) * _2509;
        float _2667 = _620 + (-0.5);
        _2669 = cbMtdParam._m0[1u];
        _2671 = _2669.y * _2667;
        float _2674 = (_2649 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2675 = _2674 * (_2650 ? _2658 : (_2658 + (cbSceneParam._m0[72u].w * _2631)));
        _2676 = _2674 * (_2650 ? _2659 : (_2659 + (cbSceneParam._m0[72u].w * _2633)));
        _2677 = _2674 * (_2650 ? _2660 : (_2660 + (cbSceneParam._m0[72u].w * _2635)));
        _2678 = _2667 * 0.999000012874603271484375;
        _2688 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2688)
        {
            if ((cbInstanceData._m0[_256 + 7u].x + _2678) < 0.5)
            {
                _2844 = true;
                break;
            }
        }
        uint _2785 = _672 + uint(_2647.w);
        if ((cbInstanceData._m0[_2785].w < 1.0) && ((cbInstanceData._m0[_2785].w + _2678) < 0.5))
        {
            _2844 = true;
            break;
        }
        if ((_2671 + 1.0) < _2669.x)
        {
            _2844 = true;
            break;
        }
        _2844 = false;
        break;
    }
    float _3049;
    if (_2844)
    {
        discard_state = true;
        _3049 = 0.0;
    }
    else
    {
        _3049 = cbInstanceData._m0[_2510].w;
    }
    SV_Target.x = _2675;
    SV_Target.y = _2676;
    SV_Target.z = _2677;
    SV_Target.w = _3049;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2510].w;
    discard_exit();
}


