#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1326;
float _3707;
float _3708;
float _3709;
float _3710;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _228 = _227 * _219;
    float _229 = _227 * _220;
    float _230 = _227 * _221;
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = _234 * NORMAL.x;
    float _236 = _234 * NORMAL.y;
    float _237 = _234 * NORMAL.z;
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _242 = _241 * TANGENT.x;
    float _243 = _241 * TANGENT.y;
    float _244 = _241 * TANGENT.z;
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3719 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3730 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3741 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    uint _268 = uint(roundEven(NORMAL.w)) * 13u;
    uint _273 = _268 + 1u;
    uint _277 = _268 + 2u;
    float _286 = sqrt(((cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x)) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x));
    float _287 = _286 * TEXCOORD.z;
    float _288 = _286 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _287) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _288) + cbTextureTilingScale._m0[13u].w));
    vec4 _325 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _330 = _325.x * cbMtdParam._m0[11u].x;
    float _331 = _325.y * cbMtdParam._m0[11u].y;
    float _332 = _325.z * cbMtdParam._m0[11u].z;
    vec4 _351 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _287) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _288) + cbTextureTilingScale._m0[5u].w));
    vec4 _387 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _389 = _387.x;
    float _401 = dot(vec4(_389, _387.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _418 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_389 - _401) * cbMtdParam._m0[24u].y) + _401) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3752 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _419 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
    float _426 = (_419 * ((_351.x * cbMtdParam._m0[12u].x) - _330)) + _330;
    float _427 = (_419 * ((_351.y * cbMtdParam._m0[12u].y) - _331)) + _331;
    float _428 = (_419 * ((_351.z * cbMtdParam._m0[12u].z) - _332)) + _332;
    float _432 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _301.x) * _426;
    float _435 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _301.y) * _427;
    float _438 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _301.z) * _428;
    float _445 = ((_426 - _432) * (isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0)))) + _432;
    float _446 = ((_427 - _435) * (isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0)))) + _435;
    float _447 = ((_428 - _438) * (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0)))) + _438;
    vec4 _465 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _287) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _288) + cbTextureTilingScale._m0[20u].w));
    vec4 _492 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _287) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _288) + cbTextureTilingScale._m0[4u].w));
    vec4 _509 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _511 = _509.x;
    float _512 = _509.y;
    float _513 = _509.z;
    float _522 = ((_492.z - _513) * _419) + _513;
    float _525 = ((((_492.x - _511) * _419) + _511) * 2.0) + (-1.0);
    float _526 = ((((_492.y - _512) * _419) + _512) * 2.0) + (-1.0);
    float _527 = dot(vec2(_525, _526), vec2(_525, _526));
    float _3763 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _532 = sqrt(1.0 - (isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))));
    vec4 _552 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _564 = (_525 + ((((_465.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_552.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _565 = (_526 + ((((_465.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_552.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _568 = fma(_532, _235, fma(_565, _242, _564 * _228));
    float _571 = fma(_532, _236, fma(_565, _243, _564 * _229));
    float _574 = fma(_532, _237, fma(_565, _244, _564 * _230));
    float _578 = inversesqrt(dot(vec3(_568, _571, _574), vec3(_568, _571, _574)));
    vec4 _605 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _287) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _288) + cbTextureTilingScale._m0[11u].w));
    float _607 = _605.x;
    float _608 = 1.0 - _607;
    float _614 = (cbMtdParam._m0[19u].x + dot(vec4(_578 * _568, _578 * _571, _578 * _574, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_607 - _608) * cbMtdParam._m0[24u].z) + _608) * cbMtdParam._m0[21u].z);
    float _3774 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _615 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    float _622 = (_615 * (cbMtdParam._m0[17u].x - _445)) + _445;
    float _623 = (_615 * (cbMtdParam._m0[17u].y - _446)) + _446;
    float _624 = (_615 * (cbMtdParam._m0[17u].z - _447)) + _447;
    vec4 _636 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _650 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _652 = _650.x;
    float _670 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _287) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _288) + cbTextureTilingScale._m0[9u].w)).x - _652) * _419) + _652;
    float _674 = ((_636.x - _670) * cbMtdParam._m0[19u].z) + _670;
    float _676 = _674 - (_674 * _615);
    float _681 = (((_465.z - _522) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _522;
    float _685 = ((_552.z - _681) * cbMtdParam._m0[19u].w) + _681;
    vec4 _698 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _287) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _288) + cbTextureTilingScale._m0[15u].w));
    float _705 = (_698.x * 2.0) + (-1.0);
    float _706 = (_698.y * 2.0) + (-1.0);
    float _707 = dot(vec2(_705, _706), vec2(_705, _706));
    float _3785 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _715 = ((_698.z - _685) * _615) + _685;
    float _725 = ((sqrt(1.0 - (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0)))) - _532) * _615) + _532;
    float _728 = (((_705 - _564) * _615) + _564) + (cbMtdParam._m0[21u].x * _564);
    float _729 = (((_706 - _565) * _615) + _565) + (cbMtdParam._m0[21u].x * _565);
    float _731 = cbMtdParam._m0[22u].x + _552.w;
    float _734 = fma(_725, _235, fma(_729, _242, _728 * _228));
    float _737 = fma(_725, _236, fma(_729, _243, _728 * _229));
    float _740 = fma(_725, _237, fma(_729, _244, _728 * _230));
    float _744 = inversesqrt(dot(vec3(_734, _737, _740), vec3(_734, _737, _740)));
    float _745 = _744 * _734;
    float _746 = _744 * _737;
    float _747 = _744 * _740;
    float _3796 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _748 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _3807 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _3818 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _3829 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _3840 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _3851 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _753 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
    float _767 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _808 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _818 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _808);
    float _819 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _808);
    float _820 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _808);
    float _824 = inversesqrt(dot(vec3(_818, _819, _820), vec3(_818, _819, _820)));
    float _825 = _818 * _824;
    float _826 = _819 * _824;
    float _827 = _820 * _824;
    vec4 _832 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _834 = _832.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1006 = sqrt(((_818 * _818) + (_819 * _819)) + (_820 * _820));
        float _1012 = (cbMatDynParam._m0[5u].x * _1006) + cbMatDynParam._m0[5u].y;
        float _3862 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1017 = (cbMatDynParam._m0[5u].z * _1006) + cbMatDynParam._m0[5u].w;
        float _3873 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) - _1013)) + _1013) < ((_834 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _845 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _846 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _864 = fma(_747, cbSceneParam._m0[5u].z, fma(_746, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _745));
    float _867 = fma(_747, cbSceneParam._m0[6u].z, fma(_746, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _745));
    float _870 = fma(_747, cbSceneParam._m0[7u].z, fma(_746, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _745));
    uint _883 = _268 + 9u;
    uint _884 = _883 + uint(cbMatDynParam._m0[0u].w);
    float _890 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0)))) * cbInstanceData._m0[_884].x;
    float _891 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0)))) * cbInstanceData._m0[_884].y;
    float _892 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0)))) * cbInstanceData._m0[_884].z;
    float _3884 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _893 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _3895 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _894 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _3906 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _895 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _896 = 1.0 - _753;
    float _897 = _893 * _896;
    float _898 = _894 * _896;
    float _899 = _895 * _896;
    float _904 = (_893 + (-0.039999999105930328369140625)) * _753;
    float _905 = (_894 + (-0.039999999105930328369140625)) * _753;
    float _906 = (_895 + (-0.039999999105930328369140625)) * _753;
    float _907 = _904 + 0.039999999105930328369140625;
    float _909 = _905 + 0.039999999105930328369140625;
    float _910 = _906 + 0.039999999105930328369140625;
    vec4 _919 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _845, cbSceneParam._m0[86u].y * _846));
    float _923 = ((isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))) * TEXCOORD_5.w) * _919.x;
    float _924 = dot(vec3(_745, _746, _747), vec3(_825, _826, _827));
    float _927 = _924 * 2.0;
    float _931 = (_927 * _745) - _825;
    float _932 = (_927 * _746) - _826;
    float _933 = (_927 * _747) - _827;
    float _937 = abs(dot(vec3(_825, _826, _827), vec3(_745, _746, _747)));
    float _3917 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _939 = sqrt(_748);
    float _952 = exp2((_939 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_939 * 3.0));
    float _958 = (1.0 - _952) * ((_939 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _959 = _952 * _939;
    float _987 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _991 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _995 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1325;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1050 = fma(_995, cbModelParam._m0[26u].z, fma(_991, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _987));
        float _1054 = fma(_995, cbModelParam._m0[27u].z, fma(_991, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _987));
        float _1058 = fma(_995, cbModelParam._m0[28u].z, fma(_991, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _987));
        float _1083 = _987 + _745;
        float _1084 = _991 + _746;
        float _1085 = _995 + _747;
        float _1095 = fma(_1085, cbModelParam._m0[26u].z, fma(_1084, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1083)) - _1050;
        float _1096 = fma(_1085, cbModelParam._m0[27u].z, fma(_1084, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1083)) - _1054;
        float _1097 = fma(_1085, cbModelParam._m0[28u].z, fma(_1084, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1083)) - _1058;
        float _1101 = inversesqrt(dot(vec3(_1095, _1096, _1097), vec3(_1095, _1096, _1097)));
        float _1114 = ((_1101 * _1095) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1050 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1115 = ((_1101 * _1096) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1054 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1116 = ((_1101 * _1097) / cbModelParam._m0[34u].z) + ((((((_1058 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        float _1153 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1119.x + (-0.5));
        float _1155 = _1153 * (_1119.y + (-0.5));
        float _1156 = _1153 * (_1119.z + (-0.5));
        float _1163 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1126.x + (-0.5));
        float _1165 = _1163 * (_1126.y + (-0.5));
        float _1166 = _1163 * (_1126.z + (-0.5));
        float _1173 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1133.x + (-0.5));
        float _1175 = _1173 * (_1133.y + (-0.5));
        float _1176 = _1173 * (_1133.z + (-0.5));
        float _1183 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1140.x + (-0.5));
        float _1185 = _1183 * (_1140.y + (-0.5));
        float _1186 = _1183 * (_1140.z + (-0.5));
        float _1187 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1188 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1189 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1190 = _1154 * 0.5;
        float _1191 = _1164 * 0.5;
        float _1192 = _1174 * 0.5;
        float _1193 = dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192));
        float _1198 = (_1193 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1193);
        float _1207 = (dot(vec3(_745, _746, _747), vec3(_1198 * _1190, _1198 * _1191, _1198 * _1192)) + 1.0) * 0.5;
        float _3943 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1217 = sqrt(((_1191 * _1191) + (_1190 * _1190)) + (_1192 * _1192)) / (_1187 + 9.9999997473787516355514526367188e-06);
        float _3954 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1219 = _1218 * 2.0;
        float _1223 = (1.0 - _1218) / (_1218 + 1.0);
        float _3965 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1233 = ((((1.0 - _1224) * (_1219 + 2.0)) * exp2(log2(isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * (_1219 + 1.0))) + _1224) * _1187;
        float _1234 = _1155 * 0.5;
        float _1235 = _1165 * 0.5;
        float _1236 = _1175 * 0.5;
        float _1237 = dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236));
        float _1242 = (_1237 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1237);
        float _1250 = (dot(vec3(_745, _746, _747), vec3(_1242 * _1234, _1242 * _1235, _1242 * _1236)) + 1.0) * 0.5;
        float _3976 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1259 = sqrt(((_1235 * _1235) + (_1234 * _1234)) + (_1236 * _1236)) / (_1188 + 9.9999997473787516355514526367188e-06);
        float _3987 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1261 = _1260 * 2.0;
        float _1265 = (1.0 - _1260) / (_1260 + 1.0);
        float _3998 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1275 = ((((1.0 - _1266) * (_1261 + 2.0)) * exp2(log2(isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_1261 + 1.0))) + _1266) * _1188;
        float _1276 = _1156 * 0.5;
        float _1277 = _1166 * 0.5;
        float _1278 = _1176 * 0.5;
        float _1279 = dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278));
        float _1284 = (_1279 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1279);
        float _1292 = (dot(vec3(_745, _746, _747), vec3(_1284 * _1276, _1284 * _1277, _1284 * _1278)) + 1.0) * 0.5;
        float _4009 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1301 = sqrt(((_1277 * _1277) + (_1276 * _1276)) + (_1278 * _1278)) / (_1189 + 9.9999997473787516355514526367188e-06);
        float _4020 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1303 = _1302 * 2.0;
        float _1307 = (1.0 - _1302) / (_1302 + 1.0);
        float _4031 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1317 = ((((1.0 - _1308) * (_1303 + 2.0)) * exp2(log2(isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * (_1303 + 1.0))) + _1308) * _1189;
        _1325 = _1156;
        _1327 = _1155;
        _1328 = _1154;
        _1329 = _1166;
        _1330 = _1165;
        _1331 = _1164;
        _1332 = _1176;
        _1333 = _1175;
        _1334 = _1174;
        _1335 = _1189;
        _1336 = _1188;
        _1337 = _1187;
        _1338 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)));
        _1339 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)));
        _1340 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)));
    }
    else
    {
        _1325 = _1326;
        _1327 = _1326;
        _1328 = _1326;
        _1329 = _1326;
        _1330 = _1326;
        _1331 = _1326;
        _1332 = _1326;
        _1333 = _1326;
        _1334 = _1326;
        _1335 = _1326;
        _1336 = _1326;
        _1337 = _1326;
        _1338 = 0.0;
        _1339 = 0.0;
        _1340 = 0.0;
    }
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1368 = fma(_995, cbModelParam._m0[30u].z, fma(_991, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _987));
        float _1372 = fma(_995, cbModelParam._m0[31u].z, fma(_991, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _987));
        float _1376 = fma(_995, cbModelParam._m0[32u].z, fma(_991, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _987));
        float _1399 = _987 + _745;
        float _1400 = _991 + _746;
        float _1401 = _995 + _747;
        float _1411 = fma(_1401, cbModelParam._m0[30u].z, fma(_1400, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1399)) - _1368;
        float _1412 = fma(_1401, cbModelParam._m0[31u].z, fma(_1400, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1399)) - _1372;
        float _1413 = fma(_1401, cbModelParam._m0[32u].z, fma(_1400, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1399)) - _1376;
        float _1417 = inversesqrt(dot(vec3(_1411, _1412, _1413), vec3(_1411, _1412, _1413)));
        float _1430 = ((_1417 * _1411) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1368 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1431 = ((_1417 * _1412) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1372 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1432 = ((_1417 * _1413) / cbModelParam._m0[35u].z) + ((((((_1376 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1434 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1430, _1431, _1432), 0.0);
        vec4 _1441 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1430, _1431, _1432), 0.0);
        vec4 _1448 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1430, _1431, _1432), 0.0);
        vec4 _1455 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1430, _1431, _1432), 0.0);
        float _1467 = exp2((_1434.w + (-0.5)) * 20.0) * 2.0;
        float _1468 = _1467 * (_1434.x + (-0.5));
        float _1469 = _1467 * (_1434.y + (-0.5));
        float _1470 = _1467 * (_1434.z + (-0.5));
        float _1477 = exp2((_1441.w + (-0.5)) * 20.0) * 2.0;
        float _1478 = _1477 * (_1441.x + (-0.5));
        float _1479 = _1477 * (_1441.y + (-0.5));
        float _1480 = _1477 * (_1441.z + (-0.5));
        float _1487 = exp2((_1448.w + (-0.5)) * 20.0) * 2.0;
        float _1488 = _1487 * (_1448.x + (-0.5));
        float _1489 = _1487 * (_1448.y + (-0.5));
        float _1490 = _1487 * (_1448.z + (-0.5));
        float _1497 = exp2((_1455.w + (-0.5)) * 20.0) * 2.0;
        float _1498 = _1497 * (_1455.x + (-0.5));
        float _1499 = _1497 * (_1455.y + (-0.5));
        float _1500 = _1497 * (_1455.z + (-0.5));
        float _1501 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1502 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1503 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1504 = _1468 * 0.5;
        float _1505 = _1478 * 0.5;
        float _1506 = _1488 * 0.5;
        float _1507 = dot(vec3(_1504, _1505, _1506), vec3(_1504, _1505, _1506));
        float _1512 = (_1507 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1507);
        float _1520 = (dot(vec3(_745, _746, _747), vec3(_1512 * _1504, _1512 * _1505, _1512 * _1506)) + 1.0) * 0.5;
        float _4072 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1529 = sqrt(((_1505 * _1505) + (_1504 * _1504)) + (_1506 * _1506)) / (_1501 + 9.9999997473787516355514526367188e-06);
        float _4083 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1531 = _1530 * 2.0;
        float _1535 = (1.0 - _1530) / (_1530 + 1.0);
        float _4094 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1545 = ((((1.0 - _1536) * (_1531 + 2.0)) * exp2(log2(isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * (_1531 + 1.0))) + _1536) * _1501;
        float _1546 = _1469 * 0.5;
        float _1547 = _1479 * 0.5;
        float _1548 = _1489 * 0.5;
        float _1549 = dot(vec3(_1546, _1547, _1548), vec3(_1546, _1547, _1548));
        float _1554 = (_1549 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1549);
        float _1562 = (dot(vec3(_745, _746, _747), vec3(_1554 * _1546, _1554 * _1547, _1554 * _1548)) + 1.0) * 0.5;
        float _4105 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1571 = sqrt(((_1547 * _1547) + (_1546 * _1546)) + (_1548 * _1548)) / (_1502 + 9.9999997473787516355514526367188e-06);
        float _4116 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1573 = _1572 * 2.0;
        float _1577 = (1.0 - _1572) / (_1572 + 1.0);
        float _4127 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1587 = ((((1.0 - _1578) * (_1573 + 2.0)) * exp2(log2(isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_1573 + 1.0))) + _1578) * _1502;
        float _1588 = _1470 * 0.5;
        float _1589 = _1480 * 0.5;
        float _1590 = _1490 * 0.5;
        float _1591 = dot(vec3(_1588, _1589, _1590), vec3(_1588, _1589, _1590));
        float _1596 = (_1591 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1591);
        float _1604 = (dot(vec3(_745, _746, _747), vec3(_1596 * _1588, _1596 * _1589, _1596 * _1590)) + 1.0) * 0.5;
        float _4138 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1613 = sqrt(((_1589 * _1589) + (_1588 * _1588)) + (_1590 * _1590)) / (_1503 + 9.9999997473787516355514526367188e-06);
        float _4149 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1614 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1615 = _1614 * 2.0;
        float _1619 = (1.0 - _1614) / (_1614 + 1.0);
        float _4160 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1629 = ((((1.0 - _1620) * (_1615 + 2.0)) * exp2(log2(isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_1615 + 1.0))) + _1620) * _1503;
        _1637 = _1470;
        _1638 = _1469;
        _1639 = _1468;
        _1640 = _1480;
        _1641 = _1479;
        _1642 = _1478;
        _1643 = _1490;
        _1644 = _1489;
        _1645 = _1488;
        _1646 = _1503;
        _1647 = _1502;
        _1648 = _1501;
        _1649 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)));
        _1650 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)));
        _1651 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)));
    }
    else
    {
        _1637 = _1326;
        _1638 = _1326;
        _1639 = _1326;
        _1640 = _1326;
        _1641 = _1326;
        _1642 = _1326;
        _1643 = _1326;
        _1644 = _1326;
        _1645 = _1326;
        _1646 = _1326;
        _1647 = _1326;
        _1648 = _1326;
        _1649 = 0.0;
        _1650 = 0.0;
        _1651 = 0.0;
    }
    float _1661 = (cbModelParam._m0[1u].x * (_1649 - _1338)) + _1338;
    float _1662 = (cbModelParam._m0[1u].x * (_1650 - _1339)) + _1339;
    float _1663 = (cbModelParam._m0[1u].x * (_1651 - _1340)) + _1340;
    float _1684 = fma(_1663, cbSceneParam._m0[89u].z, fma(_1662, cbSceneParam._m0[89u].y, _1661 * cbSceneParam._m0[89u].x));
    float _1687 = fma(_1663, cbSceneParam._m0[90u].z, fma(_1662, cbSceneParam._m0[90u].y, _1661 * cbSceneParam._m0[90u].x));
    float _1690 = fma(_1663, cbSceneParam._m0[91u].z, fma(_1662, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1661));
    float _1705 = _931 * 0.5;
    float _1706 = _932 * 0.5;
    float _1707 = _933 * 0.5;
    float _1708 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1639, _1642, _1645, _1648));
    float _1711 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1638, _1641, _1644, _1647));
    float _1714 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1637, _1640, _1643, _1646));
    float _1748;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1721 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1325, _1329, _1332, _1335));
        float _1725 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1327, _1330, _1333, _1336));
        float _1729 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1328, _1331, _1334, _1337));
        float _1736 = dot(vec4(cbModelParam._m0[39u]), vec4(_1705, _1706, _1707, 1.0));
        _1748 = dot(vec3(isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0)), isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0)), isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1736) ? 0.0 : (isnan(0.0) ? _1736 : max(0.0, _1736))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1748 = 1.0;
    }
    float _1759;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1750 = dot(vec4(cbModelParam._m0[40u]), vec4(_1705, _1706, _1707, 1.0));
        _1759 = dot(vec3(isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0)), isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0)), isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1750) ? 0.0 : (isnan(0.0) ? _1750 : max(0.0, _1750))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1759 = 1.0;
    }
    float _1763 = (_1759 * cbModelParam._m0[1u].x) + (_1748 * (1.0 - cbModelParam._m0[1u].x));
    float _1773 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _748);
    float _1774 = isnan(_1773) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1773 : min(cbModelParam._m0[25u].z, _1773));
    float _1855;
    float _1857;
    float _1859;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1822 = fma(_995, cbModelParam._m0[13u].z, fma(_991, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _987)) + cbModelParam._m0[13u].w;
        float _1826 = fma(_995, cbModelParam._m0[14u].z, fma(_991, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _987)) + cbModelParam._m0[14u].w;
        float _1830 = fma(_995, cbModelParam._m0[15u].z, fma(_991, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _987)) + cbModelParam._m0[15u].w;
        float _1833 = fma(_933, cbModelParam._m0[13u].z, fma(_932, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _931));
        float _1836 = fma(_933, cbModelParam._m0[14u].z, fma(_932, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _931));
        float _1839 = fma(_933, cbModelParam._m0[15u].z, fma(_932, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _931));
        float _1867;
        if (_1833 > 0.0)
        {
            _1867 = abs((1.0 - _1822) / _1833);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1833 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1822 + 1.0) / _1833);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1867 = frontier_phi_17_15_ladder;
        }
        float _2070;
        if (_1836 > 0.0)
        {
            _2070 = abs((1.0 - _1826) / _1836);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1836 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1826 + 1.0) / _1836);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2070 = frontier_phi_26_22_ladder;
        }
        float _2324;
        if (_1839 > 0.0)
        {
            _2324 = abs((1.0 - _1830) / _1839);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1839 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1830 + 1.0) / _1839);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2324 = frontier_phi_38_33_ladder;
        }
        float _2326 = isnan(_2070) ? _1867 : (isnan(_1867) ? _2070 : min(_1867, _2070));
        float _2327 = isnan(_2324) ? _2326 : (isnan(_2326) ? _2324 : min(_2326, _2324));
        float _2331 = (_2327 * _1833) + _1822;
        float _2332 = (_2327 * _1836) + _1826;
        float _2333 = (_2327 * _1839) + _1830;
        float _2334 = _2327 * 9.9999997473787516355514526367188e-05;
        float _2336 = (-1.0) - _2334;
        float _2338 = _2334 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2333 > _2338) || ((_2333 < _2336) || ((_2332 > _2338) || ((_2332 < _2336) || ((_2331 < _2336) || (_2331 > _2338))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2461 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2333, cbModelParam._m0[9u].z, fma(_2332, cbModelParam._m0[9u].y, _2331 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2333, cbModelParam._m0[10u].z, fma(_2332, cbModelParam._m0[10u].y, _2331 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2333, cbModelParam._m0[11u].z, fma(_2332, cbModelParam._m0[11u].y, _2331 * cbModelParam._m0[11u].x))), _1774);
            frontier_phi_16_38_ladder = _2461.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2461.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2461.x * cbModelParam._m0[1u].y;
        }
        _1855 = frontier_phi_16_38_ladder_2;
        _1857 = frontier_phi_16_38_ladder_1;
        _1859 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1843 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_931, _932, _933), _1774);
        _1855 = _1843.x * cbModelParam._m0[1u].y;
        _1857 = _1843.y * cbModelParam._m0[1u].y;
        _1859 = _1843.z * cbModelParam._m0[1u].y;
    }
    float _1863 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _748);
    float _1864 = isnan(_1863) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1863 : min(cbModelParam._m0[25u].w, _1863));
    float _1954;
    float _1956;
    float _1958;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1918 = fma(_995, cbModelParam._m0[21u].z, fma(_991, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _987)) + cbModelParam._m0[21u].w;
        float _1922 = fma(_995, cbModelParam._m0[22u].z, fma(_991, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _987)) + cbModelParam._m0[22u].w;
        float _1926 = fma(_995, cbModelParam._m0[23u].z, fma(_991, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _987)) + cbModelParam._m0[23u].w;
        float _1929 = fma(_933, cbModelParam._m0[21u].z, fma(_932, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _931));
        float _1932 = fma(_933, cbModelParam._m0[22u].z, fma(_932, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _931));
        float _1935 = fma(_933, cbModelParam._m0[23u].z, fma(_932, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _931));
        float _2075;
        if (_1929 > 0.0)
        {
            _2075 = abs((1.0 - _1918) / _1929);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1929 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1918 + 1.0) / _1929);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2075 = frontier_phi_28_24_ladder;
        }
        float _2351;
        if (_1932 > 0.0)
        {
            _2351 = abs((1.0 - _1922) / _1932);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1932 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1922 + 1.0) / _1932);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2351 = frontier_phi_40_35_ladder;
        }
        float _2564;
        if (_1935 > 0.0)
        {
            _2564 = abs((1.0 - _1926) / _1935);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1935 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1926 + 1.0) / _1935);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2564 = frontier_phi_49_46_ladder;
        }
        float _2566 = isnan(_2351) ? _2075 : (isnan(_2075) ? _2351 : min(_2075, _2351));
        float _2567 = isnan(_2564) ? _2566 : (isnan(_2566) ? _2564 : min(_2566, _2564));
        float _2571 = (_2567 * _1929) + _1918;
        float _2572 = (_2567 * _1932) + _1922;
        float _2573 = (_2567 * _1935) + _1926;
        float _2574 = _2567 * 9.9999997473787516355514526367188e-05;
        float _2575 = (-1.0) - _2574;
        float _2577 = _2574 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2573 > _2577) || ((_2573 < _2575) || ((_2572 > _2577) || ((_2572 < _2575) || ((_2571 < _2575) || (_2571 > _2577))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2772 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2573, cbModelParam._m0[17u].z, fma(_2572, cbModelParam._m0[17u].y, _2571 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2573, cbModelParam._m0[18u].z, fma(_2572, cbModelParam._m0[18u].y, _2571 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2573, cbModelParam._m0[19u].z, fma(_2572, cbModelParam._m0[19u].y, _2571 * cbModelParam._m0[19u].x))), _1864);
            frontier_phi_25_49_ladder = _2772.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2772.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2772.x * cbModelParam._m0[1u].z;
        }
        _1954 = frontier_phi_25_49_ladder_2;
        _1956 = frontier_phi_25_49_ladder_1;
        _1958 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1938 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_931, _932, _933), _1864);
        _1954 = _1938.x * cbModelParam._m0[1u].z;
        _1956 = _1938.y * cbModelParam._m0[1u].z;
        _1958 = _1938.z * cbModelParam._m0[1u].z;
    }
    float _1971 = (((_958 * _907) + _959) * _923) * ((cbModelParam._m0[1u].w * (_1954 - _1855)) + _1855);
    float _1973 = (((_958 * _909) + _959) * _923) * ((cbModelParam._m0[1u].w * (_1956 - _1857)) + _1857);
    float _1975 = (((_958 * _910) + _959) * _923) * ((cbModelParam._m0[1u].w * (_1958 - _1859)) + _1859);
    float _1978 = fma(_1975, cbSceneParam._m0[89u].z, fma(_1973, cbSceneParam._m0[89u].y, _1971 * cbSceneParam._m0[89u].x));
    float _1981 = fma(_1975, cbSceneParam._m0[90u].z, fma(_1973, cbSceneParam._m0[90u].y, _1971 * cbSceneParam._m0[90u].x));
    float _1984 = fma(_1975, cbSceneParam._m0[91u].z, fma(_1973, cbSceneParam._m0[91u].y, _1971 * cbSceneParam._m0[91u].x));
    uvec4 _1994 = floatBitsToUint(cbInstanceData._m0[_268 + 5u]);
    uint _1996 = _1994.x * 14u;
    uint _1997 = _1996 + 13u;
    float _2004 = _923 + (-1.0);
    float _2009 = (cbLight._m0[_1997].x * _2004) + 1.0;
    float _2010 = (cbLight._m0[_1997].y * _2004) + 1.0;
    float _2011 = (cbLight._m0[_1997].z * _2004) + 1.0;
    float _2012 = (cbLight._m0[_1997].w * _2004) + 1.0;
    uint _2013 = _1996 + 5u;
    float _2019 = isnan(1.0) ? _2010 : (isnan(_2010) ? 1.0 : min(_2010, 1.0));
    uint _2023 = _1996 + 4u;
    float _2029 = isnan(1.0) ? _2009 : (isnan(_2009) ? 1.0 : min(_2009, 1.0));
    uint _2033 = _1996 | 1u;
    float _2044 = dot(vec3(cbLight._m0[_1996].xyz), vec3(_745, _746, _747));
    float _2047 = dot(vec3(cbLight._m0[_2033].xyz), vec3(_745, _746, _747));
    float _4296 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _4307 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2052 = (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * 0.3183098733425140380859375;
    float _2054 = (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * 0.3183098733425140380859375;
    float _2061 = ((cbLight._m0[_2013].x * _2019) * _2054) + ((cbLight._m0[_2023].x * _2029) * _2052);
    float _2062 = ((_2019 * cbLight._m0[_2013].y) * _2054) + ((_2029 * cbLight._m0[_2023].y) * _2052);
    float _2063 = ((_2019 * cbLight._m0[_2013].z) * _2054) + ((_2029 * cbLight._m0[_2023].z) * _2052);
    uvec4 _2067 = floatBitsToUint(cbLight._m0[_1996 + 12u]);
    bool _2069 = _2067.x == 0u;
    float _2080;
    float _2082;
    float _2084;
    if (_2069)
    {
        _2080 = _2061;
        _2082 = _2062;
        _2084 = _2063;
    }
    else
    {
        uint _2088 = _1996 + 6u;
        float _2104 = (dot(vec3(cbLight._m0[_1996 + 2u].xyz), vec3(_745, _746, _747)) * 0.5) + 0.5;
        float _2105 = _2104 * _2104;
        float _4318 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        float _2106 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _2107 = isnan(1.0) ? _2011 : (isnan(_2011) ? 1.0 : min(_2011, 1.0));
        _2080 = (((cbLight._m0[_2088].x * 0.3183098733425140380859375) * _2106) * _2107) + _2061;
        _2082 = (((cbLight._m0[_2088].y * 0.3183098733425140380859375) * _2106) * _2107) + _2062;
        _2084 = (((cbLight._m0[_2088].z * 0.3183098733425140380859375) * _2106) * _2107) + _2063;
    }
    bool _2087 = _2067.y == 0u;
    float _2125;
    float _2127;
    float _2129;
    if (_2087)
    {
        _2125 = _2080;
        _2127 = _2082;
        _2129 = _2084;
    }
    else
    {
        uint _2295 = _1996 + 7u;
        float _2311 = (dot(vec3(cbLight._m0[_1996 + 3u].xyz), vec3(_745, _746, _747)) * 0.5) + 0.5;
        float _2312 = _2311 * _2311;
        float _4334 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2313 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _2314 = isnan(1.0) ? _2012 : (isnan(_2012) ? 1.0 : min(_2012, 1.0));
        _2125 = (((cbLight._m0[_2295].x * 0.3183098733425140380859375) * _2313) * _2314) + _2080;
        _2127 = (((cbLight._m0[_2295].y * 0.3183098733425140380859375) * _2313) * _2314) + _2082;
        _2129 = (((cbLight._m0[_2295].z * 0.3183098733425140380859375) * _2313) * _2314) + _2084;
    }
    uint _2132 = _1996 + 8u;
    float _2145 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1996].w)) * _748) * 0.949999988079071044921875);
    float _2146 = _2145 * _2145;
    float _2147 = cbLight._m0[_1996].x + _825;
    float _2148 = cbLight._m0[_1996].y + _826;
    float _2149 = cbLight._m0[_1996].z + _827;
    float _2153 = inversesqrt(dot(vec3(_2147, _2148, _2149), vec3(_2147, _2148, _2149)));
    float _2154 = _2153 * _2147;
    float _2155 = _2153 * _2148;
    float _2156 = _2153 * _2149;
    float _2157 = dot(vec3(_745, _746, _747), vec3(cbLight._m0[_1996].xyz));
    float _4350 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2160 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
    float _4361 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _2161 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
    float _2162 = dot(vec3(_745, _746, _747), vec3(_2154, _2155, _2156));
    float _4372 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2165 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
    float _2166 = dot(vec3(cbLight._m0[_1996].xyz), vec3(_2154, _2155, _2156));
    float _4383 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2170 = _2146 * _2146;
    float _2174 = ((_2165 * _2165) * (_2170 + (-1.0))) + 1.0;
    float _2182 = exp2(log2(1.0 - (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0)))) * 5.0);
    float _2183 = 0.959999978542327880859375 - _904;
    float _2185 = 0.959999978542327880859375 - _905;
    float _2186 = 0.959999978542327880859375 - _906;
    float _2193 = 1.0 - _2146;
    float _2204 = (0.5 / (((_2161 * ((_2160 * _2193) + _2146)) + 9.9999999392252902907785028219223e-09) + (((_2161 * _2193) + _2146) * _2160))) * _2160;
    float _4394 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2206 = (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_2170 / ((_2174 * _2174) * 3.141590118408203125));
    uint _2217 = _1996 + 9u;
    float _2228 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2033].w)) * _748) * 0.949999988079071044921875);
    float _2229 = _2228 * _2228;
    float _2230 = cbLight._m0[_2033].x + _825;
    float _2231 = cbLight._m0[_2033].y + _826;
    float _2232 = cbLight._m0[_2033].z + _827;
    float _2236 = inversesqrt(dot(vec3(_2230, _2231, _2232), vec3(_2230, _2231, _2232)));
    float _2237 = _2236 * _2230;
    float _2238 = _2236 * _2231;
    float _2239 = _2236 * _2232;
    float _2240 = dot(vec3(_745, _746, _747), vec3(cbLight._m0[_2033].xyz));
    float _4405 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2243 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
    float _2244 = dot(vec3(_745, _746, _747), vec3(_2237, _2238, _2239));
    float _4416 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2247 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
    float _2248 = dot(vec3(cbLight._m0[_2033].xyz), vec3(_2237, _2238, _2239));
    float _4427 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2252 = _2229 * _2229;
    float _2256 = ((_2247 * _2247) * (_2252 + (-1.0))) + 1.0;
    float _2263 = exp2(log2(1.0 - (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0)))) * 5.0);
    float _2270 = 1.0 - _2229;
    float _2280 = (0.5 / (((_2161 * ((_2243 * _2270) + _2229)) + 9.9999999392252902907785028219223e-09) + (((_2161 * _2270) + _2229) * _2243))) * _2243;
    float _4438 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2282 = (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_2252 / ((_2256 * _2256) * 3.141590118408203125));
    float _2292 = (((((_2263 * _2183) + _907) * cbLight._m0[_2217].x) * _2282) * _2019) + (((((_2182 * _2183) + _907) * cbLight._m0[_2132].x) * _2206) * _2029);
    float _2293 = (((((_2263 * _2185) + _909) * cbLight._m0[_2217].y) * _2282) * _2019) + (((((_2182 * _2185) + _909) * cbLight._m0[_2132].y) * _2206) * _2029);
    float _2294 = (((((_2263 * _2186) + _910) * cbLight._m0[_2217].z) * _2282) * _2019) + (((((_2182 * _2186) + _910) * cbLight._m0[_2132].z) * _2206) * _2029);
    float _2356;
    float _2358;
    float _2360;
    if (_2069)
    {
        _2356 = _2292;
        _2358 = _2293;
        _2360 = _2294;
    }
    else
    {
        uint _2362 = _1996 + 2u;
        uint _2366 = _1996 + 10u;
        float _2380 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2362].w)) * _748) * 0.949999988079071044921875);
        float _2381 = _2380 * _2380;
        float _2382 = cbLight._m0[_2362].x + _825;
        float _2383 = cbLight._m0[_2362].y + _826;
        float _2384 = cbLight._m0[_2362].z + _827;
        float _2388 = inversesqrt(dot(vec3(_2382, _2383, _2384), vec3(_2382, _2383, _2384)));
        float _2389 = _2388 * _2382;
        float _2390 = _2388 * _2383;
        float _2391 = _2388 * _2384;
        float _2392 = dot(vec3(_745, _746, _747), vec3(cbLight._m0[_2362].xyz));
        float _4449 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2395 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _2396 = dot(vec3(_745, _746, _747), vec3(_2389, _2390, _2391));
        float _4460 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2399 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _2400 = dot(vec3(cbLight._m0[_2362].xyz), vec3(_2389, _2390, _2391));
        float _4471 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2404 = _2381 * _2381;
        float _2408 = ((_2399 * _2399) * (_2404 + (-1.0))) + 1.0;
        float _2415 = exp2(log2(1.0 - (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0)))) * 5.0);
        float _2422 = 1.0 - _2381;
        float _2432 = (0.5 / (((_2161 * ((_2395 * _2422) + _2381)) + 9.9999999392252902907785028219223e-09) + (((_2161 * _2422) + _2381) * _2395))) * _2395;
        float _4482 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2434 = (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (_2404 / ((_2408 * _2408) * 3.141590118408203125));
        float _2435 = isnan(1.0) ? _2011 : (isnan(_2011) ? 1.0 : min(_2011, 1.0));
        _2356 = (((((_2415 * _2183) + _907) * cbLight._m0[_2366].x) * _2434) * _2435) + _2292;
        _2358 = (((((_2415 * _2185) + _909) * cbLight._m0[_2366].y) * _2434) * _2435) + _2293;
        _2360 = (((((_2415 * _2186) + _910) * cbLight._m0[_2366].z) * _2434) * _2435) + _2294;
    }
    float _2470;
    float _2472;
    float _2474;
    if (_2087)
    {
        _2470 = _2356;
        _2472 = _2358;
        _2474 = _2360;
    }
    else
    {
        uint _2481 = _1996 + 3u;
        uint _2485 = _1996 + 11u;
        float _2499 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2481].w)) * _748) * 0.949999988079071044921875);
        float _2500 = _2499 * _2499;
        float _2501 = cbLight._m0[_2481].x + _825;
        float _2502 = cbLight._m0[_2481].y + _826;
        float _2503 = cbLight._m0[_2481].z + _827;
        float _2507 = inversesqrt(dot(vec3(_2501, _2502, _2503), vec3(_2501, _2502, _2503)));
        float _2508 = _2507 * _2501;
        float _2509 = _2507 * _2502;
        float _2510 = _2507 * _2503;
        float _2511 = dot(vec3(_745, _746, _747), vec3(cbLight._m0[_2481].xyz));
        float _4498 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        float _2514 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _2515 = dot(vec3(_745, _746, _747), vec3(_2508, _2509, _2510));
        float _4509 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2518 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _2519 = dot(vec3(cbLight._m0[_2481].xyz), vec3(_2508, _2509, _2510));
        float _4520 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2523 = _2500 * _2500;
        float _2527 = ((_2518 * _2518) * (_2523 + (-1.0))) + 1.0;
        float _2534 = exp2(log2(1.0 - (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0)))) * 5.0);
        float _2541 = 1.0 - _2500;
        float _2551 = (0.5 / (((_2161 * ((_2514 * _2541) + _2500)) + 9.9999999392252902907785028219223e-09) + (((_2161 * _2541) + _2500) * _2514))) * _2514;
        float _4531 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
        float _2553 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2523 / ((_2527 * _2527) * 3.141590118408203125));
        float _2554 = isnan(1.0) ? _2012 : (isnan(_2012) ? 1.0 : min(_2012, 1.0));
        _2470 = (((((_2534 * _2183) + _907) * cbLight._m0[_2485].x) * _2553) * _2554) + _2356;
        _2472 = (((((_2534 * _2185) + _909) * cbLight._m0[_2485].y) * _2553) * _2554) + _2358;
        _2474 = (((((_2534 * _2186) + _910) * cbLight._m0[_2485].z) * _2553) * _2554) + _2360;
    }
    float _2689;
    float _2691;
    float _2693;
    float _2695;
    float _2697;
    float _2699;
    if (_1994.y == 0u)
    {
        float _2629 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2630 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2629;
        float _2631 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2629;
        float _2632 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2629;
        uvec4 _2644 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2645 = _2644.x;
        uint _2656 = uint((float(_2644.y) * floor(float(uint(cbSceneParam._m0[85u].y * _846) / _2645))) + floor(float(uint(cbSceneParam._m0[85u].x * _845) / _2645)));
        float _2666 = (log2(_2632 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2667 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
        uint _2670 = uint(isnan(14.0) ? _2667 : (isnan(_2667) ? 14.0 : min(_2667, 14.0)));
        uvec4 _2675 = texelFetch(g_lightClusterGridBuffer, int(((_2670 << 2u) + (_2656 << 6u)) >> 2u));
        uint _2676 = _2675.x;
        uint _2677 = _2644.z;
        float _2777;
        float _2779;
        float _2781;
        float _2783;
        float _2785;
        float _2787;
        if (((((1u << ((_2677 >> 4u) & 15u)) + 4294967295u) & _2676) == 0u) || ((_2677 & 240u) == 0u))
        {
            _2777 = 0.0;
            _2779 = 0.0;
            _2781 = 0.0;
            _2783 = 0.0;
            _2785 = 0.0;
            _2787 = 0.0;
        }
        else
        {
            float _2778;
            float _2780;
            float _2782;
            float _2784;
            float _2786;
            float _2788;
            float _2930 = 0.0;
            float _2931 = 0.0;
            float _2932 = 0.0;
            float _2933 = 0.0;
            float _2934 = 0.0;
            float _2935 = 0.0;
            uint _2936 = 0u;
            uint _2945;
            bool _2946;
            for (;;)
            {
                _2945 = texelFetch(g_lightClassification, int((((_2670 << 5u) + (_2656 << 9u)) + (_2936 << 2u)) >> 2u)).x;
                _2946 = _2945 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2946)
                {
                    frontier_phi_66_pred = _2930;
                    frontier_phi_66_pred_1 = _2935;
                    frontier_phi_66_pred_2 = _2934;
                    frontier_phi_66_pred_3 = _2933;
                    frontier_phi_66_pred_4 = _2932;
                    frontier_phi_66_pred_5 = _2931;
                }
                else
                {
                    float _3075;
                    float _3076;
                    float _3077;
                    float _3078;
                    float _3079;
                    float _3080;
                    uint _3081;
                    _3075 = _2930;
                    _3076 = _2931;
                    _3077 = _2932;
                    _3078 = _2933;
                    _3079 = _2934;
                    _3080 = _2935;
                    _3081 = _2945;
                    float _3002;
                    float _3003;
                    float _3004;
                    float _3005;
                    float _3006;
                    float _3007;
                    for (;;)
                    {
                        uint _3085 = uint(findLSB(_3081)) + (_2936 << 5u);
                        uint _3082 = (_3081 + 4294967295u) & _3081;
                        uint _3087 = _3085 * 48u;
                        vec4 _3101 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3087)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 3u)).x));
                        uint _3107 = (_3085 * 48u) + 4u;
                        vec4 _3120 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3107)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 3u)).x));
                        uint _3126 = (_3085 * 48u) + 8u;
                        vec3 _3137 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3126)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 2u)).x));
                        float _3141 = _3101.x - _2630;
                        float _3142 = _3101.y - _2631;
                        float _3143 = _3101.z - _2632;
                        float _3144 = dot(vec3(_3141, _3142, _3143), vec3(_3141, _3142, _3143));
                        float _3147 = inversesqrt(_3144);
                        float _3148 = _3147 * _3141;
                        float _3149 = _3147 * _3142;
                        float _3150 = _3147 * _3143;
                        float _3151 = dot(vec3(_864, _867, _870), vec3(_3148, _3149, _3150));
                        float _3156 = 1.0 - (_3144 * _3101.w);
                        float _4557 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                        float _3157 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                        float _3158 = sqrt(_3144) * _3120.w;
                        float _3161 = 1.39999997615814208984375 / (_3158 + 1.39999997615814208984375);
                        float _3162 = _3161 * _3161;
                        float _3165 = ((1.0 - _3162) * _3151) + _3162;
                        float _3168 = _3158 * _3158;
                        float _3172 = ((isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0))) * _3157) / ((_3168 * 0.699999988079071044921875) + 1.0);
                        float _3176 = (-0.0) - _2630;
                        float _3177 = (-0.0) - _2631;
                        float _3178 = (-0.0) - _2632;
                        float _3182 = inversesqrt(dot(vec3(_3176, _3177, _3178), vec3(_3176, _3177, _3178)));
                        float _3183 = _3182 * _3176;
                        float _3184 = _3182 * _3177;
                        float _3185 = _3182 * _3178;
                        float _3193 = exp2(log2(1.0 / ((_3168 * 3.5) + 5.0)) * 0.25);
                        float _3194 = 1.0 - _939;
                        float _3201 = sqrt(1.0 - ((1.0 - (_3194 * _3194)) * (1.0 - (_3193 * _3193))));
                        float _3202 = _3201 * _3201;
                        float _3203 = _3202 * _3202;
                        float _3204 = _3183 + _3148;
                        float _3205 = _3184 + _3149;
                        float _3206 = _3185 + _3150;
                        float _3210 = inversesqrt(dot(vec3(_3204, _3205, _3206), vec3(_3204, _3205, _3206)));
                        float _3214 = dot(vec3(_864, _867, _870), vec3(_3183, _3184, _3185));
                        float _4573 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                        float _3217 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
                        float _3218 = dot(vec3(_864, _867, _870), vec3(_3210 * _3204, _3210 * _3205, _3210 * _3206));
                        float _4584 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
                        float _3221 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
                        float _3225 = ((_3221 * _3221) * (_3203 + (-1.0))) + 1.0;
                        float _3226 = _3161 * _3202;
                        float _3227 = _3226 * _3226;
                        float _3230 = ((1.0 - _3227) * _3151) + _3227;
                        float _4595 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                        float _3231 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
                        float _3232 = 1.0 - _3202;
                        float _3242 = (0.5 / (((_3231 * ((_3217 * _3232) + _3202)) + 9.9999999392252902907785028219223e-09) + (((_3231 * _3232) + _3202) * _3217))) * _3231;
                        float _4606 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                        float _3253 = (((_3203 * 3.1415927410125732421875) * (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0)))) / ((_3225 * _3225) * ((_3168 * 2.1991131305694580078125) + 3.141590118408203125))) * _3157;
                        _3005 = (_3172 * _3120.x) + _3078;
                        _3006 = (_3172 * _3120.y) + _3079;
                        _3007 = (_3172 * _3120.z) + _3080;
                        _3002 = (_3253 * _3137.x) + _3075;
                        _3003 = (_3253 * _3137.y) + _3076;
                        _3004 = (_3253 * _3137.z) + _3077;
                        if (_3082 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3075 = _3002;
                            _3076 = _3003;
                            _3077 = _3004;
                            _3078 = _3005;
                            _3079 = _3006;
                            _3080 = _3007;
                            _3081 = _3082;
                        }
                    }
                    frontier_phi_66_pred = _3002;
                    frontier_phi_66_pred_1 = _3007;
                    frontier_phi_66_pred_2 = _3006;
                    frontier_phi_66_pred_3 = _3005;
                    frontier_phi_66_pred_4 = _3004;
                    frontier_phi_66_pred_5 = _3003;
                }
                _2778 = frontier_phi_66_pred;
                _2788 = frontier_phi_66_pred_1;
                _2786 = frontier_phi_66_pred_2;
                _2784 = frontier_phi_66_pred_3;
                _2782 = frontier_phi_66_pred_4;
                _2780 = frontier_phi_66_pred_5;
                uint _2937 = _2936 + 1u;
                if (_2937 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2930 = _2778;
                    _2931 = _2780;
                    _2932 = _2782;
                    _2933 = _2784;
                    _2934 = _2786;
                    _2935 = _2788;
                    _2936 = _2937;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2777 = _2778;
            _2779 = _2780;
            _2781 = _2782;
            _2783 = _2784;
            _2785 = _2786;
            _2787 = _2788;
        }
        uvec4 _2791 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2792 = _2791.z;
        uint _2794 = (_2792 >> 8u) & 15u;
        float _2898;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        float _2908;
        if (((4294967295u << _2794) & _2676) == 0u)
        {
            _2898 = _2777;
            _2900 = _2779;
            _2902 = _2781;
            _2904 = _2783;
            _2906 = _2785;
            _2908 = _2787;
        }
        else
        {
            float _2923 = inversesqrt(dot(vec3(_2630, _2631, _2632), vec3(_2630, _2631, _2632)));
            float _2924 = _2923 * _2630;
            float _2925 = _2923 * _2631;
            float _2926 = _2923 * _2632;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2794 < ((_2792 >> 12u) & 15u))
            {
                float _2899;
                float _2901;
                float _2903;
                float _2905;
                float _2907;
                float _2909;
                float _3058 = _2777;
                float _3059 = _2779;
                float _3060 = _2781;
                float _3061 = _2783;
                float _3062 = _2785;
                float _3063 = _2787;
                uint _3064 = _2794;
                uint _3073;
                bool _3074;
                for (;;)
                {
                    _3073 = texelFetch(g_lightClassification, int((((_2670 << 5u) + (_2656 << 9u)) + (_3064 << 2u)) >> 2u)).x;
                    _3074 = _3073 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3074)
                    {
                        frontier_phi_77_pred = _3063;
                        frontier_phi_77_pred_1 = _3062;
                        frontier_phi_77_pred_2 = _3061;
                        frontier_phi_77_pred_3 = _3060;
                        frontier_phi_77_pred_4 = _3059;
                        frontier_phi_77_pred_5 = _3058;
                    }
                    else
                    {
                        float _3267;
                        float _3268;
                        float _3269;
                        float _3270;
                        float _3271;
                        float _3272;
                        float _3560;
                        float _3561;
                        float _3562;
                        float _3563;
                        float _3564;
                        float _3565;
                        float _3280 = _3058;
                        float _3281 = _3059;
                        float _3282 = _3060;
                        float _3283 = _3061;
                        float _3284 = _3062;
                        float _3285 = _3063;
                        uint _3286 = _3073;
                        uint _3287;
                        vec4 _3312;
                        float _3313;
                        vec4 _3328;
                        vec3 _3340;
                        vec4 _3355;
                        vec4 _3370;
                        float _3416;
                        bool _3417;
                        for (;;)
                        {
                            uint _3297 = ((_3064 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3286));
                            _3287 = (_3286 + 4294967295u) & _3286;
                            uint _3299 = _3297 * 40u;
                            _3312 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 3u)).x));
                            _3313 = _3312.w;
                            uint _3315 = (_3297 * 40u) + 4u;
                            _3328 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3315)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 3u)).x));
                            uint _3330 = (_3297 * 40u) + 8u;
                            _3340 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3330)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 2u)).x));
                            uint _3342 = (_3297 * 40u) + 16u;
                            _3355 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3342)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 3u)).x));
                            uint _3357 = (_3297 * 40u) + 20u;
                            _3370 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3357)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 3u)).x));
                            uint _3372 = (_3297 * 40u) + 24u;
                            vec4 _3385 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3372)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 3u)).x));
                            uint _3391 = (_3297 * 40u) + 28u;
                            vec4 _3404 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3391)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 3u)).x));
                            _3416 = fma(_2632, _3404.z, fma(_2631, _3404.y, _3404.x * _2630)) + _3404.w;
                            _3417 = !((fma(_2632, _3385.z, fma(_2631, _3385.y, _3385.x * _2630)) + _3385.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3417)
                            {
                                float _3444 = _3312.x - _2630;
                                float _3445 = _3312.y - _2631;
                                float _3446 = _3312.z - _2632;
                                float _3447 = dot(vec3(_3444, _3445, _3446), vec3(_3444, _3445, _3446));
                                float _3450 = inversesqrt(_3447);
                                float _3451 = _3450 * _3444;
                                float _3452 = _3450 * _3445;
                                float _3453 = _3450 * _3446;
                                float _3457 = 1.0 - (_3447 / (_3313 * _3313));
                                float _4617 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                                float _3458 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                                float _3462 = sqrt(_3447) * _3328.w;
                                float _3464 = 1.39999997615814208984375 / (_3462 + 1.39999997615814208984375);
                                float _3465 = _3464 * _3464;
                                float _3468 = ((1.0 - _3465) * dot(vec3(_3451, _3452, _3453), vec3(_864, _867, _870))) + _3465;
                                float _3471 = _3462 * _3462;
                                float _3475 = (fma(_2632, _3355.z, fma(_2631, _3355.y, _3355.x * _2630)) + _3355.w) / _3416;
                                float _3476 = (fma(_2632, _3370.z, fma(_2631, _3370.y, _3370.x * _2630)) + _3370.w) / _3416;
                                float _3480 = 1.0 - dot(vec2(_3475, _3476), vec2(_3475, _3476));
                                float _4633 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                                float _3481 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
                                float _3482 = _3481 * (((isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0))) * _3458) / ((_3471 * 0.699999988079071044921875) + 1.0));
                                float _3494 = exp2(log2(1.0 / ((_3471 * 3.5) + 5.0)) * 0.25);
                                float _3495 = 1.0 - _939;
                                float _3502 = sqrt(1.0 - ((1.0 - (_3495 * _3495)) * (1.0 - (_3494 * _3494))));
                                float _3503 = _3502 * _3502;
                                float _3504 = _3503 * _3503;
                                float _3505 = _3451 - _2924;
                                float _3506 = _3452 - _2925;
                                float _3507 = _3453 - _2926;
                                float _3511 = inversesqrt(dot(vec3(_3505, _3506, _3507), vec3(_3505, _3506, _3507)));
                                float _3515 = dot(vec3(_864, _867, _870), vec3((-0.0) - _2924, (-0.0) - _2925, (-0.0) - _2926));
                                float _4644 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                                float _3518 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                                float _3519 = dot(vec3(_864, _867, _870), vec3(_3511 * _3505, _3511 * _3506, _3511 * _3507));
                                float _4655 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0));
                                float _3522 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                                float _3526 = ((_3522 * _3522) * (_3504 + (-1.0))) + 1.0;
                                float _3527 = _3464 * _3503;
                                float _3528 = _3527 * _3527;
                                float _3534 = ((1.0 - _3528) * dot(vec3(_864, _867, _870), vec3(_3451, _3452, _3453))) + _3528;
                                float _4666 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0));
                                float _3535 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                                float _3536 = 1.0 - _3503;
                                float _3546 = (0.5 / (((_3535 * ((_3518 * _3536) + _3503)) + 9.9999999392252902907785028219223e-09) + (((_3535 * _3536) + _3503) * _3518))) * _3535;
                                float _4677 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                                float _3556 = (_3481 * _3458) * (((_3504 * 3.1415927410125732421875) * (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0)))) / ((_3526 * _3526) * ((_3471 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3482 * _3328.y;
                                frontier_phi_83_pred_1 = _3482 * _3328.x;
                                frontier_phi_83_pred_2 = _3556 * _3340.z;
                                frontier_phi_83_pred_3 = _3556 * _3340.y;
                                frontier_phi_83_pred_4 = _3556 * _3340.x;
                                frontier_phi_83_pred_5 = _3482 * _3328.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3564 = frontier_phi_83_pred;
                            _3563 = frontier_phi_83_pred_1;
                            _3562 = frontier_phi_83_pred_2;
                            _3561 = frontier_phi_83_pred_3;
                            _3560 = frontier_phi_83_pred_4;
                            _3565 = frontier_phi_83_pred_5;
                            _3270 = _3563 + _3283;
                            _3271 = _3564 + _3284;
                            _3272 = _3565 + _3285;
                            _3267 = _3560 + _3280;
                            _3268 = _3561 + _3281;
                            _3269 = _3562 + _3282;
                            if (_3287 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3280 = _3267;
                                _3281 = _3268;
                                _3282 = _3269;
                                _3283 = _3270;
                                _3284 = _3271;
                                _3285 = _3272;
                                _3286 = _3287;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3272;
                        frontier_phi_77_pred_1 = _3271;
                        frontier_phi_77_pred_2 = _3270;
                        frontier_phi_77_pred_3 = _3269;
                        frontier_phi_77_pred_4 = _3268;
                        frontier_phi_77_pred_5 = _3267;
                    }
                    _2909 = frontier_phi_77_pred;
                    _2907 = frontier_phi_77_pred_1;
                    _2905 = frontier_phi_77_pred_2;
                    _2903 = frontier_phi_77_pred_3;
                    _2901 = frontier_phi_77_pred_4;
                    _2899 = frontier_phi_77_pred_5;
                    uint _3065 = _3064 + 1u;
                    if (_3065 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3058 = _2899;
                        _3059 = _2901;
                        _3060 = _2903;
                        _3061 = _2905;
                        _3062 = _2907;
                        _3063 = _2909;
                        _3064 = _3065;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2903;
                frontier_phi_58_59_ladder_1 = _2909;
                frontier_phi_58_59_ladder_2 = _2907;
                frontier_phi_58_59_ladder_3 = _2905;
                frontier_phi_58_59_ladder_4 = _2901;
                frontier_phi_58_59_ladder_5 = _2899;
            }
            else
            {
                frontier_phi_58_59_ladder = _2781;
                frontier_phi_58_59_ladder_1 = _2787;
                frontier_phi_58_59_ladder_2 = _2785;
                frontier_phi_58_59_ladder_3 = _2783;
                frontier_phi_58_59_ladder_4 = _2779;
                frontier_phi_58_59_ladder_5 = _2777;
            }
            _2898 = frontier_phi_58_59_ladder_5;
            _2900 = frontier_phi_58_59_ladder_4;
            _2902 = frontier_phi_58_59_ladder;
            _2904 = frontier_phi_58_59_ladder_3;
            _2906 = frontier_phi_58_59_ladder_2;
            _2908 = frontier_phi_58_59_ladder_1;
        }
        float _2913 = isnan(1.0) ? _923 : (isnan(_923) ? 1.0 : min(_923, 1.0));
        _2689 = (_2913 * _2904) + _2125;
        _2691 = (_2913 * _2906) + _2127;
        _2693 = (_2913 * _2908) + _2129;
        _2695 = ((_2898 * _907) * _2913) + _2470;
        _2697 = ((_2900 * _909) * _2913) + _2472;
        _2699 = ((_2902 * _910) * _2913) + _2474;
    }
    else
    {
        _2689 = _2125;
        _2691 = _2127;
        _2693 = _2129;
        _2695 = _2470;
        _2697 = _2472;
        _2699 = _2474;
    }
    float _4693 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _4704 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _4715 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _2716 = ((isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0))) * (_2689 + ((isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))) * _923))) + ((_2695 + ((isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0))) * _1763)) * cbPerFrame._m0[3u].x);
    float _2717 = ((isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0))) * (_2691 + ((isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))) * _923))) + ((_2697 + ((isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0))) * _1763)) * cbPerFrame._m0[3u].x);
    float _2718 = ((isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0))) * (_2693 + ((isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))) * _923))) + ((_2699 + ((isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0))) * _1763)) * cbPerFrame._m0[3u].x);
    uint _2719 = _268 + 6u;
    float _2727 = _845 / cbSceneParam._m0[86u].x;
    float _2728 = _846 / cbSceneParam._m0[86u].y;
    vec4 _2742 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2727, _2728, (log2((isnan(cbSceneParam._m0[77u].w) ? _767 : (isnan(_767) ? cbSceneParam._m0[77u].w : min(_767, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2744 = _2742.x;
    float _2745 = _2742.y;
    float _2746 = _2742.z;
    float _2747 = _2742.w;
    float _2840;
    float _2842;
    float _2844;
    float _2846;
    if (_767 > cbSceneParam._m0[78u].w)
    {
        float _2802 = isnan(_767) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _767 : min(cbSceneParam._m0[80u].w, _767));
        float _2803 = _2802 / _767;
        float _2814 = _2803 * _818;
        float _2815 = _819 * _2803;
        float _2816 = (-0.0) - _2815;
        float _2818 = _2803 * _820;
        float _2820 = (cbSceneParam._m0[77u].w * _2816) / _2802;
        float _2821 = _2820 + cbSceneParam._m0[79u].w;
        float _2822 = cbSceneParam._m0[79u].w - _2815;
        float _2828 = sqrt(((_2814 * _2814) + (_2815 * _2815)) + (_2818 * _2818));
        float _2831 = (1.0 - (cbSceneParam._m0[77u].w / _2802)) * _2828;
        float _2836 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2838 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3015;
        if (abs((_2816 - _2820) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3015 = ((((_2821 > 0.0) ? exp2(_2836 * _2821) : (2.0 - exp2(_2838 * _2821))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2831;
        }
        else
        {
            float _2959 = 1.0 / cbSceneParam._m0[80u].x;
            float _2960 = isnan(_2822) ? _2821 : (isnan(_2821) ? _2822 : max(_2821, _2822));
            float _2961 = isnan(_2822) ? _2821 : (isnan(_2821) ? _2822 : min(_2821, _2822));
            float _2970 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : min(_2960, 0.0));
            float _2971 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : min(_2961, 0.0));
            _3015 = ((abs(_2828 / _2816) * cbSceneParam._m0[80u].y) * ((((_2970 - _2971) * 2.0) - ((exp2(_2836 * (isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0)))) - exp2(_2836 * (isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0))))) * _2959)) - ((exp2(_2838 * _2970) - exp2(_2838 * _2971)) * _2959))) + (_2831 * cbSceneParam._m0[80u].z);
        }
        vec4 _3017 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2727, _2728, 1.0), 0.0);
        float _3026 = exp2((_3015 * (-1.44269502162933349609375)) * (1.0 - _3017.w));
        float _3027 = log2(_3026);
        float _3043 = log2(_2747);
        _2840 = (exp2(_3043 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3027 * cbSceneParam._m0[78u].x)) * _3017.x) / cbSceneParam._m0[78u].x)) + _2744;
        _2842 = (exp2(_3043 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3027 * cbSceneParam._m0[78u].y)) * _3017.y) / cbSceneParam._m0[78u].y)) + _2745;
        _2844 = (exp2(_3043 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3027 * cbSceneParam._m0[78u].z)) * _3017.z) / cbSceneParam._m0[78u].z)) + _2746;
        _2846 = _3026 * _2747;
    }
    else
    {
        _2840 = _2744;
        _2842 = _2745;
        _2844 = _2746;
        _2846 = _2747;
    }
    bool _3053;
    vec4 _2856;
    vec4 _2878;
    float _2880;
    float _2884;
    float _2885;
    float _2886;
    float _2887;
    bool _2897;
    for (;;)
    {
        _2856 = cbMatDynParam._m0[0u];
        float _2858 = roundEven(_2856.y);
        bool _2859 = _2858 == 3.0;
        float _2860 = log2(_2846);
        float _2867 = exp2(_2860 * cbSceneParam._m0[78u].x) * _2716;
        float _2868 = exp2(_2860 * cbSceneParam._m0[78u].y) * _2717;
        float _2869 = exp2(_2860 * cbSceneParam._m0[78u].z) * _2718;
        float _2876 = _834 + (-0.5);
        _2878 = cbMtdParam._m0[1u];
        _2880 = _2878.y * _2876;
        float _2883 = (_2858 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2884 = _2883 * (_2859 ? _2867 : (_2867 + (cbSceneParam._m0[72u].w * _2840)));
        _2885 = _2883 * (_2859 ? _2868 : (_2868 + (cbSceneParam._m0[72u].w * _2842)));
        _2886 = _2883 * (_2859 ? _2869 : (_2869 + (cbSceneParam._m0[72u].w * _2844)));
        _2887 = _2876 * 0.999000012874603271484375;
        _2897 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2897)
        {
            if ((cbInstanceData._m0[_268 + 7u].x + _2887) < 0.5)
            {
                _3053 = true;
                break;
            }
        }
        uint _2994 = _883 + uint(_2856.w);
        if ((cbInstanceData._m0[_2994].w < 1.0) && ((cbInstanceData._m0[_2994].w + _2887) < 0.5))
        {
            _3053 = true;
            break;
        }
        if ((_2880 + 1.0) < _2878.x)
        {
            _3053 = true;
            break;
        }
        _3053 = false;
        break;
    }
    float _3258;
    if (_3053)
    {
        discard_state = true;
        _3258 = 0.0;
    }
    else
    {
        _3258 = cbInstanceData._m0[_2719].w;
    }
    SV_Target.x = _2884;
    SV_Target.y = _2885;
    SV_Target.z = _2886;
    SV_Target.w = _3258;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2719].w;
    discard_exit();
}


