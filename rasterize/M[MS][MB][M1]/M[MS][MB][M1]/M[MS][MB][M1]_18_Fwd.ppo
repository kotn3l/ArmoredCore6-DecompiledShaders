#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1139;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _241 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _241 + 1u;
    uint _250 = _241 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_241].x * cbInstanceData._m0[_241].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _280 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _286 = _280.x * cbMtdParam._m0[9u].x;
    float _287 = _280.y * cbMtdParam._m0[9u].y;
    float _288 = _280.z * cbMtdParam._m0[9u].z;
    vec4 _306 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _260) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _261) + cbTextureTilingScale._m0[20u].w));
    vec4 _332 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _336 = _332.z;
    float _340 = (_332.x * 2.0) + (-1.0);
    float _341 = (_332.y * 2.0) + (-1.0);
    float _342 = dot(vec2(_340, _341), vec2(_340, _341));
    float _3468 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _348 = sqrt(1.0 - (isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0))));
    float _353 = _340 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_306.x * 2.0) + (-1.0)));
    float _354 = _341 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_306.y * 2.0) + (-1.0)));
    vec4 _371 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _373 = _371.x;
    float _374 = 1.0 - _373;
    float _383 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _386 = ((isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : min(_383, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _395 = (_386 - ((((((_373 - _374) * cbMtdParam._m0[24u].z) + _374) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _386))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3489 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _396 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
    float _403 = (_396 * (cbMtdParam._m0[17u].x - _286)) + _286;
    float _404 = (_396 * (cbMtdParam._m0[17u].y - _287)) + _287;
    float _405 = (_396 * (cbMtdParam._m0[17u].z - _288)) + _288;
    vec4 _418 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _260) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _261) + cbTextureTilingScale._m0[19u].w));
    float _420 = _418.x;
    float _421 = 1.0 - _420;
    float _450 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_420 - _421) * cbMtdParam._m0[24u].w) + _421) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3500 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _451 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
    float _459 = ((((cbMtdParam._m0[10u].x - _403) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _451) + _403;
    float _460 = ((((cbMtdParam._m0[10u].y - _404) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _451) + _404;
    float _461 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _405)) * _451) + _405;
    vec4 _474 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _476 = _474.x;
    float _478 = _476 - (_476 * _396);
    float _480 = _478 - (_478 * _451);
    float _485 = (((_306.z - _336) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _336;
    vec4 _499 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _506 = (_499.x * 2.0) + (-1.0);
    float _507 = (_499.y * 2.0) + (-1.0);
    float _508 = dot(vec2(_506, _507), vec2(_506, _507));
    float _3511 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _516 = (_396 * (_499.z - _485)) + _485;
    float _519 = ((cbMtdParam._m0[23u].y - _516) * _451) + _516;
    vec4 _541 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _260) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _261) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _547 = (_541.x * 2.0) + (-1.0);
    float _548 = (_541.y * 2.0) + (-1.0);
    float _549 = dot(vec2(_547, _548), vec2(_547, _548));
    float _3522 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _566 = (((_506 - _353) + (cbMtdParam._m0[21u].x * _353)) * _396) + _353;
    float _567 = (((_507 - _354) + (cbMtdParam._m0[21u].x * _354)) * _396) + _354;
    float _568 = (_396 * (sqrt(1.0 - (isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0)))) - _348)) + _348;
    float _579 = (((_547 - _566) + (_566 * cbMtdParam._m0[22u].z)) * _451) + _566;
    float _580 = (((_548 - _567) + (_567 * cbMtdParam._m0[22u].z)) * _451) + _567;
    float _581 = ((sqrt(1.0 - (isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0)))) - _568) * _451) + _568;
    float _583 = cbMtdParam._m0[22u].x + _332.w;
    float _586 = fma(_581, _228 * NORMAL.x, fma(_580, _235 * TANGENT.x, (_221 * _213) * _579));
    float _589 = fma(_581, _228 * NORMAL.y, fma(_580, _235 * TANGENT.y, (_221 * _214) * _579));
    float _592 = fma(_581, _228 * NORMAL.z, fma(_580, _235 * TANGENT.z, (_221 * _215) * _579));
    float _596 = inversesqrt(dot(vec3(_586, _589, _592), vec3(_586, _589, _592)));
    float _597 = _596 * _586;
    float _598 = _596 * _589;
    float _599 = _596 * _592;
    float _3533 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _600 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
    float _3544 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _3555 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _3566 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _3577 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _3588 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _605 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
    float _619 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _659 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _669 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _659);
    float _670 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _659);
    float _671 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _659);
    float _675 = inversesqrt(dot(vec3(_669, _670, _671), vec3(_669, _670, _671)));
    float _676 = _669 * _675;
    float _677 = _670 * _675;
    float _678 = _671 * _675;
    float _684 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _685 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _706 = fma(_599, cbSceneParam._m0[5u].z, fma(_598, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _597));
    float _709 = fma(_599, cbSceneParam._m0[6u].z, fma(_598, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _597));
    float _712 = fma(_599, cbSceneParam._m0[7u].z, fma(_598, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _597));
    uint _726 = (_241 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _732 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0)))) * cbInstanceData._m0[_726].x;
    float _733 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0)))) * cbInstanceData._m0[_726].y;
    float _734 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0)))) * cbInstanceData._m0[_726].z;
    float _3599 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _735 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
    float _3610 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _736 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _3621 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _737 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    float _738 = 1.0 - _605;
    float _739 = _735 * _738;
    float _740 = _736 * _738;
    float _741 = _737 * _738;
    float _746 = (_735 + (-0.039999999105930328369140625)) * _605;
    float _747 = (_736 + (-0.039999999105930328369140625)) * _605;
    float _748 = (_737 + (-0.039999999105930328369140625)) * _605;
    float _749 = _746 + 0.039999999105930328369140625;
    float _751 = _747 + 0.039999999105930328369140625;
    float _752 = _748 + 0.039999999105930328369140625;
    vec4 _761 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _684, cbSceneParam._m0[86u].y * _685));
    float _765 = ((isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))) * TEXCOORD_5.w) * _761.x;
    float _766 = dot(vec3(_597, _598, _599), vec3(_676, _677, _678));
    float _769 = _766 * 2.0;
    float _773 = (_769 * _597) - _676;
    float _774 = (_769 * _598) - _677;
    float _775 = (_769 * _599) - _678;
    float _779 = abs(dot(vec3(_676, _677, _678), vec3(_597, _598, _599)));
    float _3632 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _781 = sqrt(_600);
    float _794 = exp2((_781 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_781 * 3.0));
    float _800 = (1.0 - _794) * ((_781 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _801 = _794 * _781;
    float _829 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _833 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _837 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1138;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _863 = fma(_837, cbModelParam._m0[26u].z, fma(_833, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _829));
        float _867 = fma(_837, cbModelParam._m0[27u].z, fma(_833, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _829));
        float _871 = fma(_837, cbModelParam._m0[28u].z, fma(_833, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _829));
        float _896 = _829 + _597;
        float _897 = _833 + _598;
        float _898 = _837 + _599;
        float _908 = fma(_898, cbModelParam._m0[26u].z, fma(_897, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _896)) - _863;
        float _909 = fma(_898, cbModelParam._m0[27u].z, fma(_897, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _896)) - _867;
        float _910 = fma(_898, cbModelParam._m0[28u].z, fma(_897, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _896)) - _871;
        float _914 = inversesqrt(dot(vec3(_908, _909, _910), vec3(_908, _909, _910)));
        float _927 = ((_914 * _908) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_863 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _928 = ((_914 * _909) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_867 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _929 = ((_914 * _910) / cbModelParam._m0[34u].z) + ((((((_871 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _932 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_927, _928, _929), 0.0);
        vec4 _939 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_927, _928, _929), 0.0);
        vec4 _946 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_927, _928, _929), 0.0);
        vec4 _953 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_927, _928, _929), 0.0);
        float _966 = exp2((_932.w + (-0.5)) * 20.0) * 2.0;
        float _967 = _966 * (_932.x + (-0.5));
        float _968 = _966 * (_932.y + (-0.5));
        float _969 = _966 * (_932.z + (-0.5));
        float _976 = exp2((_939.w + (-0.5)) * 20.0) * 2.0;
        float _977 = _976 * (_939.x + (-0.5));
        float _978 = _976 * (_939.y + (-0.5));
        float _979 = _976 * (_939.z + (-0.5));
        float _986 = exp2((_946.w + (-0.5)) * 20.0) * 2.0;
        float _987 = _986 * (_946.x + (-0.5));
        float _988 = _986 * (_946.y + (-0.5));
        float _989 = _986 * (_946.z + (-0.5));
        float _996 = exp2((_953.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_953.x + (-0.5));
        float _998 = _996 * (_953.y + (-0.5));
        float _999 = _996 * (_953.z + (-0.5));
        float _1000 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1001 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1002 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1003 = _967 * 0.5;
        float _1004 = _977 * 0.5;
        float _1005 = _987 * 0.5;
        float _1006 = dot(vec3(_1003, _1004, _1005), vec3(_1003, _1004, _1005));
        float _1011 = (_1006 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1006);
        float _1020 = (dot(vec3(_597, _598, _599), vec3(_1011 * _1003, _1011 * _1004, _1011 * _1005)) + 1.0) * 0.5;
        float _3658 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1030 = sqrt(((_1004 * _1004) + (_1003 * _1003)) + (_1005 * _1005)) / (_1000 + 9.9999997473787516355514526367188e-06);
        float _3669 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1032 = _1031 * 2.0;
        float _1036 = (1.0 - _1031) / (_1031 + 1.0);
        float _3680 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _1046 = ((((1.0 - _1037) * (_1032 + 2.0)) * exp2(log2(isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0))) * (_1032 + 1.0))) + _1037) * _1000;
        float _1047 = _968 * 0.5;
        float _1048 = _978 * 0.5;
        float _1049 = _988 * 0.5;
        float _1050 = dot(vec3(_1047, _1048, _1049), vec3(_1047, _1048, _1049));
        float _1055 = (_1050 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1050);
        float _1063 = (dot(vec3(_597, _598, _599), vec3(_1055 * _1047, _1055 * _1048, _1055 * _1049)) + 1.0) * 0.5;
        float _3691 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1072 = sqrt(((_1048 * _1048) + (_1047 * _1047)) + (_1049 * _1049)) / (_1001 + 9.9999997473787516355514526367188e-06);
        float _3702 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1074 = _1073 * 2.0;
        float _1078 = (1.0 - _1073) / (_1073 + 1.0);
        float _3713 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _1088 = ((((1.0 - _1079) * (_1074 + 2.0)) * exp2(log2(isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * (_1074 + 1.0))) + _1079) * _1001;
        float _1089 = _969 * 0.5;
        float _1090 = _979 * 0.5;
        float _1091 = _989 * 0.5;
        float _1092 = dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091));
        float _1097 = (_1092 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1092);
        float _1105 = (dot(vec3(_597, _598, _599), vec3(_1097 * _1089, _1097 * _1090, _1097 * _1091)) + 1.0) * 0.5;
        float _3724 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1114 = sqrt(((_1090 * _1090) + (_1089 * _1089)) + (_1091 * _1091)) / (_1002 + 9.9999997473787516355514526367188e-06);
        float _3735 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1116 = _1115 * 2.0;
        float _1120 = (1.0 - _1115) / (_1115 + 1.0);
        float _3746 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1130 = ((((1.0 - _1121) * (_1116 + 2.0)) * exp2(log2(isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * (_1116 + 1.0))) + _1121) * _1002;
        _1138 = _969;
        _1140 = _968;
        _1141 = _967;
        _1142 = _979;
        _1143 = _978;
        _1144 = _977;
        _1145 = _989;
        _1146 = _988;
        _1147 = _987;
        _1148 = _1002;
        _1149 = _1001;
        _1150 = _1000;
        _1151 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0)));
        _1152 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0)));
        _1153 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0)));
    }
    else
    {
        _1138 = _1139;
        _1140 = _1139;
        _1141 = _1139;
        _1142 = _1139;
        _1143 = _1139;
        _1144 = _1139;
        _1145 = _1139;
        _1146 = _1139;
        _1147 = _1139;
        _1148 = _1139;
        _1149 = _1139;
        _1150 = _1139;
        _1151 = 0.0;
        _1152 = 0.0;
        _1153 = 0.0;
    }
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1178 = fma(_837, cbModelParam._m0[30u].z, fma(_833, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _829));
        float _1182 = fma(_837, cbModelParam._m0[31u].z, fma(_833, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _829));
        float _1186 = fma(_837, cbModelParam._m0[32u].z, fma(_833, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _829));
        float _1209 = _829 + _597;
        float _1210 = _833 + _598;
        float _1211 = _837 + _599;
        float _1221 = fma(_1211, cbModelParam._m0[30u].z, fma(_1210, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1209)) - _1178;
        float _1222 = fma(_1211, cbModelParam._m0[31u].z, fma(_1210, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1209)) - _1182;
        float _1223 = fma(_1211, cbModelParam._m0[32u].z, fma(_1210, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1209)) - _1186;
        float _1227 = inversesqrt(dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223)));
        float _1240 = ((_1227 * _1221) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1178 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1241 = ((_1227 * _1222) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1182 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1242 = ((_1227 * _1223) / cbModelParam._m0[35u].z) + ((((((_1186 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1240, _1241, _1242), 0.0);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1240, _1241, _1242), 0.0);
        vec4 _1258 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1240, _1241, _1242), 0.0);
        vec4 _1265 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1240, _1241, _1242), 0.0);
        float _1277 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1244.x + (-0.5));
        float _1279 = _1277 * (_1244.y + (-0.5));
        float _1280 = _1277 * (_1244.z + (-0.5));
        float _1287 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1251.x + (-0.5));
        float _1289 = _1287 * (_1251.y + (-0.5));
        float _1290 = _1287 * (_1251.z + (-0.5));
        float _1297 = exp2((_1258.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1258.x + (-0.5));
        float _1299 = _1297 * (_1258.y + (-0.5));
        float _1300 = _1297 * (_1258.z + (-0.5));
        float _1307 = exp2((_1265.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1265.x + (-0.5));
        float _1309 = _1307 * (_1265.y + (-0.5));
        float _1310 = _1307 * (_1265.z + (-0.5));
        float _1311 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1312 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1313 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1314 = _1278 * 0.5;
        float _1315 = _1288 * 0.5;
        float _1316 = _1298 * 0.5;
        float _1317 = dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316));
        float _1322 = (_1317 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1317);
        float _1330 = (dot(vec3(_597, _598, _599), vec3(_1322 * _1314, _1322 * _1315, _1322 * _1316)) + 1.0) * 0.5;
        float _3787 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1339 = sqrt(((_1315 * _1315) + (_1314 * _1314)) + (_1316 * _1316)) / (_1311 + 9.9999997473787516355514526367188e-06);
        float _3798 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1341 = _1340 * 2.0;
        float _1345 = (1.0 - _1340) / (_1340 + 1.0);
        float _3809 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1355 = ((((1.0 - _1346) * (_1341 + 2.0)) * exp2(log2(isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * (_1341 + 1.0))) + _1346) * _1311;
        float _1356 = _1279 * 0.5;
        float _1357 = _1289 * 0.5;
        float _1358 = _1299 * 0.5;
        float _1359 = dot(vec3(_1356, _1357, _1358), vec3(_1356, _1357, _1358));
        float _1364 = (_1359 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1359);
        float _1372 = (dot(vec3(_597, _598, _599), vec3(_1364 * _1356, _1364 * _1357, _1364 * _1358)) + 1.0) * 0.5;
        float _3820 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1381 = sqrt(((_1357 * _1357) + (_1356 * _1356)) + (_1358 * _1358)) / (_1312 + 9.9999997473787516355514526367188e-06);
        float _3831 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1383 = _1382 * 2.0;
        float _1387 = (1.0 - _1382) / (_1382 + 1.0);
        float _3842 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1397 = ((((1.0 - _1388) * (_1383 + 2.0)) * exp2(log2(isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * (_1383 + 1.0))) + _1388) * _1312;
        float _1398 = _1280 * 0.5;
        float _1399 = _1290 * 0.5;
        float _1400 = _1300 * 0.5;
        float _1401 = dot(vec3(_1398, _1399, _1400), vec3(_1398, _1399, _1400));
        float _1406 = (_1401 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1401);
        float _1414 = (dot(vec3(_597, _598, _599), vec3(_1406 * _1398, _1406 * _1399, _1406 * _1400)) + 1.0) * 0.5;
        float _3853 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1423 = sqrt(((_1399 * _1399) + (_1398 * _1398)) + (_1400 * _1400)) / (_1313 + 9.9999997473787516355514526367188e-06);
        float _3864 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1425 = _1424 * 2.0;
        float _1429 = (1.0 - _1424) / (_1424 + 1.0);
        float _3875 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1439 = ((((1.0 - _1430) * (_1425 + 2.0)) * exp2(log2(isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (_1425 + 1.0))) + _1430) * _1313;
        _1447 = _1280;
        _1448 = _1279;
        _1449 = _1278;
        _1450 = _1290;
        _1451 = _1289;
        _1452 = _1288;
        _1453 = _1300;
        _1454 = _1299;
        _1455 = _1298;
        _1456 = _1313;
        _1457 = _1312;
        _1458 = _1311;
        _1459 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)));
        _1460 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)));
        _1461 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)));
    }
    else
    {
        _1447 = _1139;
        _1448 = _1139;
        _1449 = _1139;
        _1450 = _1139;
        _1451 = _1139;
        _1452 = _1139;
        _1453 = _1139;
        _1454 = _1139;
        _1455 = _1139;
        _1456 = _1139;
        _1457 = _1139;
        _1458 = _1139;
        _1459 = 0.0;
        _1460 = 0.0;
        _1461 = 0.0;
    }
    float _1471 = (cbModelParam._m0[1u].x * (_1459 - _1151)) + _1151;
    float _1472 = (cbModelParam._m0[1u].x * (_1460 - _1152)) + _1152;
    float _1473 = (cbModelParam._m0[1u].x * (_1461 - _1153)) + _1153;
    float _1494 = fma(_1473, cbSceneParam._m0[89u].z, fma(_1472, cbSceneParam._m0[89u].y, _1471 * cbSceneParam._m0[89u].x));
    float _1497 = fma(_1473, cbSceneParam._m0[90u].z, fma(_1472, cbSceneParam._m0[90u].y, _1471 * cbSceneParam._m0[90u].x));
    float _1500 = fma(_1473, cbSceneParam._m0[91u].z, fma(_1472, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1471));
    float _1515 = _773 * 0.5;
    float _1516 = _774 * 0.5;
    float _1517 = _775 * 0.5;
    float _1518 = dot(vec4(_1515, _1516, _1517, 1.0), vec4(_1449, _1452, _1455, _1458));
    float _1521 = dot(vec4(_1515, _1516, _1517, 1.0), vec4(_1448, _1451, _1454, _1457));
    float _1524 = dot(vec4(_1515, _1516, _1517, 1.0), vec4(_1447, _1450, _1453, _1456));
    float _1558;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1531 = dot(vec4(_1515, _1516, _1517, 1.0), vec4(_1138, _1142, _1145, _1148));
        float _1535 = dot(vec4(_1515, _1516, _1517, 1.0), vec4(_1140, _1143, _1146, _1149));
        float _1539 = dot(vec4(_1515, _1516, _1517, 1.0), vec4(_1141, _1144, _1147, _1150));
        float _1546 = dot(vec4(cbModelParam._m0[39u]), vec4(_1515, _1516, _1517, 1.0));
        _1558 = dot(vec3(isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)), isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)), isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1546) ? 0.0 : (isnan(0.0) ? _1546 : max(0.0, _1546))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1558 = 1.0;
    }
    float _1569;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1560 = dot(vec4(cbModelParam._m0[40u]), vec4(_1515, _1516, _1517, 1.0));
        _1569 = dot(vec3(isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)), isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)), isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1560) ? 0.0 : (isnan(0.0) ? _1560 : max(0.0, _1560))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1569 = 1.0;
    }
    float _1573 = (_1569 * cbModelParam._m0[1u].x) + (_1558 * (1.0 - cbModelParam._m0[1u].x));
    float _1583 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _600);
    float _1584 = isnan(_1583) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1583 : min(cbModelParam._m0[25u].z, _1583));
    float _1665;
    float _1667;
    float _1669;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1632 = fma(_837, cbModelParam._m0[13u].z, fma(_833, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _829)) + cbModelParam._m0[13u].w;
        float _1636 = fma(_837, cbModelParam._m0[14u].z, fma(_833, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _829)) + cbModelParam._m0[14u].w;
        float _1640 = fma(_837, cbModelParam._m0[15u].z, fma(_833, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _829)) + cbModelParam._m0[15u].w;
        float _1643 = fma(_775, cbModelParam._m0[13u].z, fma(_774, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _773));
        float _1646 = fma(_775, cbModelParam._m0[14u].z, fma(_774, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _773));
        float _1649 = fma(_775, cbModelParam._m0[15u].z, fma(_774, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _773));
        float _1677;
        if (_1643 > 0.0)
        {
            _1677 = abs((1.0 - _1632) / _1643);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1643 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1632 + 1.0) / _1643);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1677 = frontier_phi_14_12_ladder;
        }
        float _1881;
        if (_1646 > 0.0)
        {
            _1881 = abs((1.0 - _1636) / _1646);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1646 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1636 + 1.0) / _1646);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1881 = frontier_phi_23_19_ladder;
        }
        float _2135;
        if (_1649 > 0.0)
        {
            _2135 = abs((1.0 - _1640) / _1649);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1649 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1640 + 1.0) / _1649);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2135 = frontier_phi_35_30_ladder;
        }
        float _2137 = isnan(_1881) ? _1677 : (isnan(_1677) ? _1881 : min(_1677, _1881));
        float _2138 = isnan(_2135) ? _2137 : (isnan(_2137) ? _2135 : min(_2137, _2135));
        float _2142 = (_2138 * _1643) + _1632;
        float _2143 = (_2138 * _1646) + _1636;
        float _2144 = (_2138 * _1649) + _1640;
        float _2145 = _2138 * 9.9999997473787516355514526367188e-05;
        float _2147 = (-1.0) - _2145;
        float _2149 = _2145 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2144 > _2149) || ((_2144 < _2147) || ((_2143 > _2149) || ((_2143 < _2147) || ((_2142 < _2147) || (_2142 > _2149))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2272 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2144, cbModelParam._m0[9u].z, fma(_2143, cbModelParam._m0[9u].y, _2142 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2144, cbModelParam._m0[10u].z, fma(_2143, cbModelParam._m0[10u].y, _2142 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2144, cbModelParam._m0[11u].z, fma(_2143, cbModelParam._m0[11u].y, _2142 * cbModelParam._m0[11u].x))), _1584);
            frontier_phi_13_35_ladder = _2272.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2272.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2272.x * cbModelParam._m0[1u].y;
        }
        _1665 = frontier_phi_13_35_ladder_2;
        _1667 = frontier_phi_13_35_ladder_1;
        _1669 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1653 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_773, _774, _775), _1584);
        _1665 = _1653.x * cbModelParam._m0[1u].y;
        _1667 = _1653.y * cbModelParam._m0[1u].y;
        _1669 = _1653.z * cbModelParam._m0[1u].y;
    }
    float _1673 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _600);
    float _1674 = isnan(_1673) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1673 : min(cbModelParam._m0[25u].w, _1673));
    float _1764;
    float _1766;
    float _1768;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1728 = fma(_837, cbModelParam._m0[21u].z, fma(_833, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _829)) + cbModelParam._m0[21u].w;
        float _1732 = fma(_837, cbModelParam._m0[22u].z, fma(_833, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _829)) + cbModelParam._m0[22u].w;
        float _1736 = fma(_837, cbModelParam._m0[23u].z, fma(_833, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _829)) + cbModelParam._m0[23u].w;
        float _1739 = fma(_775, cbModelParam._m0[21u].z, fma(_774, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _773));
        float _1742 = fma(_775, cbModelParam._m0[22u].z, fma(_774, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _773));
        float _1745 = fma(_775, cbModelParam._m0[23u].z, fma(_774, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _773));
        float _1886;
        if (_1739 > 0.0)
        {
            _1886 = abs((1.0 - _1728) / _1739);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1739 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1728 + 1.0) / _1739);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1886 = frontier_phi_25_21_ladder;
        }
        float _2162;
        if (_1742 > 0.0)
        {
            _2162 = abs((1.0 - _1732) / _1742);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1742 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1732 + 1.0) / _1742);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2162 = frontier_phi_37_32_ladder;
        }
        float _2375;
        if (_1745 > 0.0)
        {
            _2375 = abs((1.0 - _1736) / _1745);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1745 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1736 + 1.0) / _1745);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2375 = frontier_phi_46_43_ladder;
        }
        float _2377 = isnan(_2162) ? _1886 : (isnan(_1886) ? _2162 : min(_1886, _2162));
        float _2378 = isnan(_2375) ? _2377 : (isnan(_2377) ? _2375 : min(_2377, _2375));
        float _2382 = (_2378 * _1739) + _1728;
        float _2383 = (_2378 * _1742) + _1732;
        float _2384 = (_2378 * _1745) + _1736;
        float _2385 = _2378 * 9.9999997473787516355514526367188e-05;
        float _2386 = (-1.0) - _2385;
        float _2388 = _2385 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2384 > _2388) || ((_2384 < _2386) || ((_2383 > _2388) || ((_2383 < _2386) || ((_2382 < _2386) || (_2382 > _2388))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2583 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2384, cbModelParam._m0[17u].z, fma(_2383, cbModelParam._m0[17u].y, _2382 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2384, cbModelParam._m0[18u].z, fma(_2383, cbModelParam._m0[18u].y, _2382 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2384, cbModelParam._m0[19u].z, fma(_2383, cbModelParam._m0[19u].y, _2382 * cbModelParam._m0[19u].x))), _1674);
            frontier_phi_22_46_ladder = _2583.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2583.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2583.x * cbModelParam._m0[1u].z;
        }
        _1764 = frontier_phi_22_46_ladder_2;
        _1766 = frontier_phi_22_46_ladder_1;
        _1768 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1748 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_773, _774, _775), _1674);
        _1764 = _1748.x * cbModelParam._m0[1u].z;
        _1766 = _1748.y * cbModelParam._m0[1u].z;
        _1768 = _1748.z * cbModelParam._m0[1u].z;
    }
    float _1781 = (((_800 * _749) + _801) * _765) * ((cbModelParam._m0[1u].w * (_1764 - _1665)) + _1665);
    float _1783 = (((_800 * _751) + _801) * _765) * ((cbModelParam._m0[1u].w * (_1766 - _1667)) + _1667);
    float _1785 = (((_800 * _752) + _801) * _765) * ((cbModelParam._m0[1u].w * (_1768 - _1669)) + _1669);
    float _1788 = fma(_1785, cbSceneParam._m0[89u].z, fma(_1783, cbSceneParam._m0[89u].y, _1781 * cbSceneParam._m0[89u].x));
    float _1791 = fma(_1785, cbSceneParam._m0[90u].z, fma(_1783, cbSceneParam._m0[90u].y, _1781 * cbSceneParam._m0[90u].x));
    float _1794 = fma(_1785, cbSceneParam._m0[91u].z, fma(_1783, cbSceneParam._m0[91u].y, _1781 * cbSceneParam._m0[91u].x));
    uvec4 _1804 = floatBitsToUint(cbInstanceData._m0[_241 + 5u]);
    uint _1806 = _1804.x * 14u;
    uint _1807 = _1806 + 13u;
    float _1814 = _765 + (-1.0);
    float _1819 = (cbLight._m0[_1807].x * _1814) + 1.0;
    float _1820 = (cbLight._m0[_1807].y * _1814) + 1.0;
    float _1821 = (cbLight._m0[_1807].z * _1814) + 1.0;
    float _1822 = (cbLight._m0[_1807].w * _1814) + 1.0;
    uint _1823 = _1806 + 5u;
    float _1829 = isnan(1.0) ? _1820 : (isnan(_1820) ? 1.0 : min(_1820, 1.0));
    uint _1833 = _1806 + 4u;
    float _1840 = isnan(1.0) ? _1819 : (isnan(_1819) ? 1.0 : min(_1819, 1.0));
    uint _1844 = _1806 | 1u;
    float _1855 = dot(vec3(cbLight._m0[_1806].xyz), vec3(_597, _598, _599));
    float _1858 = dot(vec3(cbLight._m0[_1844].xyz), vec3(_597, _598, _599));
    float _4011 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _4022 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _1863 = (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * 0.3183098733425140380859375;
    float _1865 = (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * 0.3183098733425140380859375;
    float _1872 = ((cbLight._m0[_1823].x * _1829) * _1865) + ((cbLight._m0[_1833].x * _1840) * _1863);
    float _1873 = ((_1829 * cbLight._m0[_1823].y) * _1865) + ((_1840 * cbLight._m0[_1833].y) * _1863);
    float _1874 = ((_1829 * cbLight._m0[_1823].z) * _1865) + ((_1840 * cbLight._m0[_1833].z) * _1863);
    uvec4 _1878 = floatBitsToUint(cbLight._m0[_1806 + 12u]);
    bool _1880 = _1878.x == 0u;
    float _1891;
    float _1893;
    float _1895;
    if (_1880)
    {
        _1891 = _1872;
        _1893 = _1873;
        _1895 = _1874;
    }
    else
    {
        uint _1899 = _1806 + 6u;
        float _1915 = (dot(vec3(cbLight._m0[_1806 + 2u].xyz), vec3(_597, _598, _599)) * 0.5) + 0.5;
        float _1916 = _1915 * _1915;
        float _4033 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
        float _1917 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1918 = isnan(1.0) ? _1821 : (isnan(_1821) ? 1.0 : min(_1821, 1.0));
        _1891 = (((cbLight._m0[_1899].x * 0.3183098733425140380859375) * _1917) * _1918) + _1872;
        _1893 = (((cbLight._m0[_1899].y * 0.3183098733425140380859375) * _1917) * _1918) + _1873;
        _1895 = (((cbLight._m0[_1899].z * 0.3183098733425140380859375) * _1917) * _1918) + _1874;
    }
    bool _1898 = _1878.y == 0u;
    float _1936;
    float _1938;
    float _1940;
    if (_1898)
    {
        _1936 = _1891;
        _1938 = _1893;
        _1940 = _1895;
    }
    else
    {
        uint _2106 = _1806 + 7u;
        float _2122 = (dot(vec3(cbLight._m0[_1806 + 3u].xyz), vec3(_597, _598, _599)) * 0.5) + 0.5;
        float _2123 = _2122 * _2122;
        float _4049 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
        float _2124 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _2125 = isnan(1.0) ? _1822 : (isnan(_1822) ? 1.0 : min(_1822, 1.0));
        _1936 = (((cbLight._m0[_2106].x * 0.3183098733425140380859375) * _2124) * _2125) + _1891;
        _1938 = (((cbLight._m0[_2106].y * 0.3183098733425140380859375) * _2124) * _2125) + _1893;
        _1940 = (((cbLight._m0[_2106].z * 0.3183098733425140380859375) * _2124) * _2125) + _1895;
    }
    uint _1943 = _1806 + 8u;
    float _1956 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1806].w)) * _600) * 0.949999988079071044921875);
    float _1957 = _1956 * _1956;
    float _1958 = cbLight._m0[_1806].x + _676;
    float _1959 = cbLight._m0[_1806].y + _677;
    float _1960 = cbLight._m0[_1806].z + _678;
    float _1964 = inversesqrt(dot(vec3(_1958, _1959, _1960), vec3(_1958, _1959, _1960)));
    float _1965 = _1964 * _1958;
    float _1966 = _1964 * _1959;
    float _1967 = _1964 * _1960;
    float _1968 = dot(vec3(_597, _598, _599), vec3(cbLight._m0[_1806].xyz));
    float _4065 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1971 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _4076 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _1972 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _1973 = dot(vec3(_597, _598, _599), vec3(_1965, _1966, _1967));
    float _4087 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
    float _1976 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
    float _1977 = dot(vec3(cbLight._m0[_1806].xyz), vec3(_1965, _1966, _1967));
    float _4098 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1981 = _1957 * _1957;
    float _1985 = ((_1976 * _1976) * (_1981 + (-1.0))) + 1.0;
    float _1993 = exp2(log2(1.0 - (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) * 5.0);
    float _1994 = 0.959999978542327880859375 - _746;
    float _1996 = 0.959999978542327880859375 - _747;
    float _1997 = 0.959999978542327880859375 - _748;
    float _2004 = 1.0 - _1957;
    float _2015 = (0.5 / (((_1972 * ((_1971 * _2004) + _1957)) + 9.9999999392252902907785028219223e-09) + (((_1972 * _2004) + _1957) * _1971))) * _1971;
    float _4109 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2017 = (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * (_1981 / ((_1985 * _1985) * 3.141590118408203125));
    uint _2028 = _1806 + 9u;
    float _2039 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1844].w)) * _600) * 0.949999988079071044921875);
    float _2040 = _2039 * _2039;
    float _2041 = cbLight._m0[_1844].x + _676;
    float _2042 = cbLight._m0[_1844].y + _677;
    float _2043 = cbLight._m0[_1844].z + _678;
    float _2047 = inversesqrt(dot(vec3(_2041, _2042, _2043), vec3(_2041, _2042, _2043)));
    float _2048 = _2047 * _2041;
    float _2049 = _2047 * _2042;
    float _2050 = _2047 * _2043;
    float _2051 = dot(vec3(_597, _598, _599), vec3(cbLight._m0[_1844].xyz));
    float _4120 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _2054 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _2055 = dot(vec3(_597, _598, _599), vec3(_2048, _2049, _2050));
    float _4131 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2058 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _2059 = dot(vec3(cbLight._m0[_1844].xyz), vec3(_2048, _2049, _2050));
    float _4142 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2063 = _2040 * _2040;
    float _2067 = ((_2058 * _2058) * (_2063 + (-1.0))) + 1.0;
    float _2074 = exp2(log2(1.0 - (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0)))) * 5.0);
    float _2081 = 1.0 - _2040;
    float _2091 = (0.5 / (((_1972 * ((_2054 * _2081) + _2040)) + 9.9999999392252902907785028219223e-09) + (((_1972 * _2081) + _2040) * _2054))) * _2054;
    float _4153 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2093 = (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_2063 / ((_2067 * _2067) * 3.141590118408203125));
    float _2103 = (((((_2074 * _1994) + _749) * cbLight._m0[_2028].x) * _2093) * _1829) + (((((_1993 * _1994) + _749) * cbLight._m0[_1943].x) * _2017) * _1840);
    float _2104 = (((((_2074 * _1996) + _751) * cbLight._m0[_2028].y) * _2093) * _1829) + (((((_1993 * _1996) + _751) * cbLight._m0[_1943].y) * _2017) * _1840);
    float _2105 = (((((_2074 * _1997) + _752) * cbLight._m0[_2028].z) * _2093) * _1829) + (((((_1993 * _1997) + _752) * cbLight._m0[_1943].z) * _2017) * _1840);
    float _2167;
    float _2169;
    float _2171;
    if (_1880)
    {
        _2167 = _2103;
        _2169 = _2104;
        _2171 = _2105;
    }
    else
    {
        uint _2173 = _1806 + 2u;
        uint _2177 = _1806 + 10u;
        float _2191 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2173].w)) * _600) * 0.949999988079071044921875);
        float _2192 = _2191 * _2191;
        float _2193 = cbLight._m0[_2173].x + _676;
        float _2194 = cbLight._m0[_2173].y + _677;
        float _2195 = cbLight._m0[_2173].z + _678;
        float _2199 = inversesqrt(dot(vec3(_2193, _2194, _2195), vec3(_2193, _2194, _2195)));
        float _2200 = _2199 * _2193;
        float _2201 = _2199 * _2194;
        float _2202 = _2199 * _2195;
        float _2203 = dot(vec3(_597, _598, _599), vec3(cbLight._m0[_2173].xyz));
        float _4164 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        float _2206 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _2207 = dot(vec3(_597, _598, _599), vec3(_2200, _2201, _2202));
        float _4175 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        float _2210 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _2211 = dot(vec3(cbLight._m0[_2173].xyz), vec3(_2200, _2201, _2202));
        float _4186 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        float _2215 = _2192 * _2192;
        float _2219 = ((_2210 * _2210) * (_2215 + (-1.0))) + 1.0;
        float _2226 = exp2(log2(1.0 - (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0)))) * 5.0);
        float _2233 = 1.0 - _2192;
        float _2243 = (0.5 / (((_1972 * ((_2206 * _2233) + _2192)) + 9.9999999392252902907785028219223e-09) + (((_1972 * _2233) + _2192) * _2206))) * _2206;
        float _4197 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        float _2245 = (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_2215 / ((_2219 * _2219) * 3.141590118408203125));
        float _2246 = isnan(1.0) ? _1821 : (isnan(_1821) ? 1.0 : min(_1821, 1.0));
        _2167 = (((((_2226 * _1994) + _749) * cbLight._m0[_2177].x) * _2245) * _2246) + _2103;
        _2169 = (((((_2226 * _1996) + _751) * cbLight._m0[_2177].y) * _2245) * _2246) + _2104;
        _2171 = (((((_2226 * _1997) + _752) * cbLight._m0[_2177].z) * _2245) * _2246) + _2105;
    }
    float _2281;
    float _2283;
    float _2285;
    if (_1898)
    {
        _2281 = _2167;
        _2283 = _2169;
        _2285 = _2171;
    }
    else
    {
        uint _2292 = _1806 + 3u;
        uint _2296 = _1806 + 11u;
        float _2310 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2292].w)) * _600) * 0.949999988079071044921875);
        float _2311 = _2310 * _2310;
        float _2312 = cbLight._m0[_2292].x + _676;
        float _2313 = cbLight._m0[_2292].y + _677;
        float _2314 = cbLight._m0[_2292].z + _678;
        float _2318 = inversesqrt(dot(vec3(_2312, _2313, _2314), vec3(_2312, _2313, _2314)));
        float _2319 = _2318 * _2312;
        float _2320 = _2318 * _2313;
        float _2321 = _2318 * _2314;
        float _2322 = dot(vec3(_597, _598, _599), vec3(cbLight._m0[_2292].xyz));
        float _4213 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2325 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _2326 = dot(vec3(_597, _598, _599), vec3(_2319, _2320, _2321));
        float _4224 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        float _2329 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _2330 = dot(vec3(cbLight._m0[_2292].xyz), vec3(_2319, _2320, _2321));
        float _4235 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2334 = _2311 * _2311;
        float _2338 = ((_2329 * _2329) * (_2334 + (-1.0))) + 1.0;
        float _2345 = exp2(log2(1.0 - (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0)))) * 5.0);
        float _2352 = 1.0 - _2311;
        float _2362 = (0.5 / (((_1972 * ((_2325 * _2352) + _2311)) + 9.9999999392252902907785028219223e-09) + (((_1972 * _2352) + _2311) * _2325))) * _2325;
        float _4246 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        float _2364 = (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_2334 / ((_2338 * _2338) * 3.141590118408203125));
        float _2365 = isnan(1.0) ? _1822 : (isnan(_1822) ? 1.0 : min(_1822, 1.0));
        _2281 = (((((_2345 * _1994) + _749) * cbLight._m0[_2296].x) * _2364) * _2365) + _2167;
        _2283 = (((((_2345 * _1996) + _751) * cbLight._m0[_2296].y) * _2364) * _2365) + _2169;
        _2285 = (((((_2345 * _1997) + _752) * cbLight._m0[_2296].z) * _2364) * _2365) + _2171;
    }
    float _2500;
    float _2502;
    float _2504;
    float _2506;
    float _2508;
    float _2510;
    if (_1804.y == 0u)
    {
        float _2440 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2441 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2440;
        float _2442 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2440;
        float _2443 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2440;
        uvec4 _2455 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2456 = _2455.x;
        uint _2467 = uint((float(_2455.y) * floor(float(uint(cbSceneParam._m0[85u].y * _685) / _2456))) + floor(float(uint(cbSceneParam._m0[85u].x * _684) / _2456)));
        float _2477 = (log2(_2443 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2478 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        uint _2481 = uint(isnan(14.0) ? _2478 : (isnan(_2478) ? 14.0 : min(_2478, 14.0)));
        uvec4 _2486 = texelFetch(g_lightClusterGridBuffer, int(((_2481 << 2u) + (_2467 << 6u)) >> 2u));
        uint _2487 = _2486.x;
        uint _2488 = _2455.z;
        float _2588;
        float _2590;
        float _2592;
        float _2594;
        float _2596;
        float _2598;
        if (((((1u << ((_2488 >> 4u) & 15u)) + 4294967295u) & _2487) == 0u) || ((_2488 & 240u) == 0u))
        {
            _2588 = 0.0;
            _2590 = 0.0;
            _2592 = 0.0;
            _2594 = 0.0;
            _2596 = 0.0;
            _2598 = 0.0;
        }
        else
        {
            float _2589;
            float _2591;
            float _2593;
            float _2595;
            float _2597;
            float _2599;
            float _2733 = 0.0;
            float _2734 = 0.0;
            float _2735 = 0.0;
            float _2736 = 0.0;
            float _2737 = 0.0;
            float _2738 = 0.0;
            uint _2739 = 0u;
            uint _2748;
            bool _2749;
            for (;;)
            {
                _2748 = texelFetch(g_lightClassification, int((((_2481 << 5u) + (_2467 << 9u)) + (_2739 << 2u)) >> 2u)).x;
                _2749 = _2748 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2749)
                {
                    frontier_phi_61_pred = _2733;
                    frontier_phi_61_pred_1 = _2738;
                    frontier_phi_61_pred_2 = _2737;
                    frontier_phi_61_pred_3 = _2736;
                    frontier_phi_61_pred_4 = _2735;
                    frontier_phi_61_pred_5 = _2734;
                }
                else
                {
                    float _2857;
                    float _2858;
                    float _2859;
                    float _2860;
                    float _2861;
                    float _2862;
                    uint _2863;
                    _2857 = _2733;
                    _2858 = _2734;
                    _2859 = _2735;
                    _2860 = _2736;
                    _2861 = _2737;
                    _2862 = _2738;
                    _2863 = _2748;
                    float _2789;
                    float _2790;
                    float _2791;
                    float _2792;
                    float _2793;
                    float _2794;
                    for (;;)
                    {
                        uint _2867 = uint(findLSB(_2863)) + (_2739 << 5u);
                        uint _2864 = (_2863 + 4294967295u) & _2863;
                        uint _2869 = _2867 * 48u;
                        vec4 _2883 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2869)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 3u)).x));
                        uint _2889 = (_2867 * 48u) + 4u;
                        vec4 _2902 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2889)).x, texelFetch(g_PointLightRenderingBuffer, int(_2889 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2889 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2889 + 3u)).x));
                        uint _2908 = (_2867 * 48u) + 8u;
                        vec3 _2919 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2908)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 2u)).x));
                        float _2923 = _2883.x - _2441;
                        float _2924 = _2883.y - _2442;
                        float _2925 = _2883.z - _2443;
                        float _2926 = dot(vec3(_2923, _2924, _2925), vec3(_2923, _2924, _2925));
                        float _2929 = inversesqrt(_2926);
                        float _2930 = _2929 * _2923;
                        float _2931 = _2929 * _2924;
                        float _2932 = _2929 * _2925;
                        float _2933 = dot(vec3(_706, _709, _712), vec3(_2930, _2931, _2932));
                        float _2938 = 1.0 - (_2926 * _2883.w);
                        float _4272 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
                        float _2939 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
                        float _2940 = sqrt(_2926) * _2902.w;
                        float _2943 = 1.39999997615814208984375 / (_2940 + 1.39999997615814208984375);
                        float _2944 = _2943 * _2943;
                        float _2947 = ((1.0 - _2944) * _2933) + _2944;
                        float _2950 = _2940 * _2940;
                        float _2954 = ((isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0))) * _2939) / ((_2950 * 0.699999988079071044921875) + 1.0);
                        float _2958 = (-0.0) - _2441;
                        float _2959 = (-0.0) - _2442;
                        float _2960 = (-0.0) - _2443;
                        float _2964 = inversesqrt(dot(vec3(_2958, _2959, _2960), vec3(_2958, _2959, _2960)));
                        float _2965 = _2964 * _2958;
                        float _2966 = _2964 * _2959;
                        float _2967 = _2964 * _2960;
                        float _2975 = exp2(log2(1.0 / ((_2950 * 3.5) + 5.0)) * 0.25);
                        float _2976 = 1.0 - _781;
                        float _2983 = sqrt(1.0 - ((1.0 - (_2976 * _2976)) * (1.0 - (_2975 * _2975))));
                        float _2984 = _2983 * _2983;
                        float _2985 = _2984 * _2984;
                        float _2986 = _2965 + _2930;
                        float _2987 = _2966 + _2931;
                        float _2988 = _2967 + _2932;
                        float _2992 = inversesqrt(dot(vec3(_2986, _2987, _2988), vec3(_2986, _2987, _2988)));
                        float _2996 = dot(vec3(_706, _709, _712), vec3(_2965, _2966, _2967));
                        float _4288 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
                        float _2999 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
                        float _3000 = dot(vec3(_706, _709, _712), vec3(_2992 * _2986, _2992 * _2987, _2992 * _2988));
                        float _4299 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
                        float _3003 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
                        float _3007 = ((_3003 * _3003) * (_2985 + (-1.0))) + 1.0;
                        float _3008 = _2943 * _2984;
                        float _3009 = _3008 * _3008;
                        float _3012 = ((1.0 - _3009) * _2933) + _3009;
                        float _4310 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                        float _3013 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
                        float _3014 = 1.0 - _2984;
                        float _3024 = (0.5 / (((_3013 * ((_2999 * _3014) + _2984)) + 9.9999999392252902907785028219223e-09) + (((_3013 * _3014) + _2984) * _2999))) * _3013;
                        float _4321 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                        float _3035 = (((_2985 * 3.1415927410125732421875) * (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0)))) / ((_3007 * _3007) * ((_2950 * 2.1991131305694580078125) + 3.141590118408203125))) * _2939;
                        _2792 = (_2954 * _2902.x) + _2860;
                        _2793 = (_2954 * _2902.y) + _2861;
                        _2794 = (_2954 * _2902.z) + _2862;
                        _2789 = (_3035 * _2919.x) + _2857;
                        _2790 = (_3035 * _2919.y) + _2858;
                        _2791 = (_3035 * _2919.z) + _2859;
                        if (_2864 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2857 = _2789;
                            _2858 = _2790;
                            _2859 = _2791;
                            _2860 = _2792;
                            _2861 = _2793;
                            _2862 = _2794;
                            _2863 = _2864;
                        }
                    }
                    frontier_phi_61_pred = _2789;
                    frontier_phi_61_pred_1 = _2794;
                    frontier_phi_61_pred_2 = _2793;
                    frontier_phi_61_pred_3 = _2792;
                    frontier_phi_61_pred_4 = _2791;
                    frontier_phi_61_pred_5 = _2790;
                }
                _2589 = frontier_phi_61_pred;
                _2599 = frontier_phi_61_pred_1;
                _2597 = frontier_phi_61_pred_2;
                _2595 = frontier_phi_61_pred_3;
                _2593 = frontier_phi_61_pred_4;
                _2591 = frontier_phi_61_pred_5;
                uint _2740 = _2739 + 1u;
                if (_2740 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2733 = _2589;
                    _2734 = _2591;
                    _2735 = _2593;
                    _2736 = _2595;
                    _2737 = _2597;
                    _2738 = _2599;
                    _2739 = _2740;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2588 = _2589;
            _2590 = _2591;
            _2592 = _2593;
            _2594 = _2595;
            _2596 = _2597;
            _2598 = _2599;
        }
        uvec4 _2602 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2603 = _2602.z;
        uint _2605 = (_2603 >> 8u) & 15u;
        float _2701;
        float _2703;
        float _2705;
        float _2707;
        float _2709;
        float _2711;
        if (((4294967295u << _2605) & _2487) == 0u)
        {
            _2701 = _2588;
            _2703 = _2590;
            _2705 = _2592;
            _2707 = _2594;
            _2709 = _2596;
            _2711 = _2598;
        }
        else
        {
            float _2726 = inversesqrt(dot(vec3(_2441, _2442, _2443), vec3(_2441, _2442, _2443)));
            float _2727 = _2726 * _2441;
            float _2728 = _2726 * _2442;
            float _2729 = _2726 * _2443;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2605 < ((_2603 >> 12u) & 15u))
            {
                float _2702;
                float _2704;
                float _2706;
                float _2708;
                float _2710;
                float _2712;
                float _2840 = _2588;
                float _2841 = _2590;
                float _2842 = _2592;
                float _2843 = _2594;
                float _2844 = _2596;
                float _2845 = _2598;
                uint _2846 = _2605;
                uint _2855;
                bool _2856;
                for (;;)
                {
                    _2855 = texelFetch(g_lightClassification, int((((_2481 << 5u) + (_2467 << 9u)) + (_2846 << 2u)) >> 2u)).x;
                    _2856 = _2855 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2856)
                    {
                        frontier_phi_67_pred = _2843;
                        frontier_phi_67_pred_1 = _2844;
                        frontier_phi_67_pred_2 = _2845;
                        frontier_phi_67_pred_3 = _2842;
                        frontier_phi_67_pred_4 = _2841;
                        frontier_phi_67_pred_5 = _2840;
                    }
                    else
                    {
                        float _3040;
                        float _3041;
                        float _3042;
                        float _3043;
                        float _3044;
                        float _3045;
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3053 = _2840;
                        float _3054 = _2841;
                        float _3055 = _2842;
                        float _3056 = _2843;
                        float _3057 = _2844;
                        float _3058 = _2845;
                        uint _3059 = _2855;
                        uint _3060;
                        vec4 _3085;
                        float _3086;
                        vec4 _3101;
                        vec3 _3113;
                        vec4 _3129;
                        vec4 _3144;
                        float _3190;
                        bool _3191;
                        for (;;)
                        {
                            uint _3070 = ((_2846 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3059));
                            _3060 = (_3059 + 4294967295u) & _3059;
                            uint _3072 = _3070 * 40u;
                            _3085 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3072)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 3u)).x));
                            _3086 = _3085.w;
                            uint _3088 = (_3070 * 40u) + 4u;
                            _3101 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3088)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 3u)).x));
                            uint _3103 = (_3070 * 40u) + 8u;
                            _3113 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3103)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 2u)).x));
                            uint _3116 = (_3070 * 40u) + 16u;
                            _3129 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 3u)).x));
                            uint _3131 = (_3070 * 40u) + 20u;
                            _3144 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3131)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 3u)).x));
                            uint _3146 = (_3070 * 40u) + 24u;
                            vec4 _3159 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3146)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 3u)).x));
                            uint _3165 = (_3070 * 40u) + 28u;
                            vec4 _3178 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 3u)).x));
                            _3190 = fma(_2443, _3178.z, fma(_2442, _3178.y, _3178.x * _2441)) + _3178.w;
                            _3191 = !((fma(_2443, _3159.z, fma(_2442, _3159.y, _3159.x * _2441)) + _3159.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3191)
                            {
                                float _3218 = _3085.x - _2441;
                                float _3219 = _3085.y - _2442;
                                float _3220 = _3085.z - _2443;
                                float _3221 = dot(vec3(_3218, _3219, _3220), vec3(_3218, _3219, _3220));
                                float _3224 = inversesqrt(_3221);
                                float _3225 = _3224 * _3218;
                                float _3226 = _3224 * _3219;
                                float _3227 = _3224 * _3220;
                                float _3231 = 1.0 - (_3221 / (_3086 * _3086));
                                float _4332 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                                float _3232 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
                                float _3236 = sqrt(_3221) * _3101.w;
                                float _3238 = 1.39999997615814208984375 / (_3236 + 1.39999997615814208984375);
                                float _3239 = _3238 * _3238;
                                float _3242 = ((1.0 - _3239) * dot(vec3(_3225, _3226, _3227), vec3(_706, _709, _712))) + _3239;
                                float _3245 = _3236 * _3236;
                                float _3249 = (fma(_2443, _3129.z, fma(_2442, _3129.y, _3129.x * _2441)) + _3129.w) / _3190;
                                float _3250 = (fma(_2443, _3144.z, fma(_2442, _3144.y, _3144.x * _2441)) + _3144.w) / _3190;
                                float _3254 = 1.0 - dot(vec2(_3249, _3250), vec2(_3249, _3250));
                                float _4348 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                                float _3255 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
                                float _3256 = _3255 * (((isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0))) * _3232) / ((_3245 * 0.699999988079071044921875) + 1.0));
                                float _3268 = exp2(log2(1.0 / ((_3245 * 3.5) + 5.0)) * 0.25);
                                float _3269 = 1.0 - _781;
                                float _3276 = sqrt(1.0 - ((1.0 - (_3269 * _3269)) * (1.0 - (_3268 * _3268))));
                                float _3277 = _3276 * _3276;
                                float _3278 = _3277 * _3277;
                                float _3279 = _3225 - _2727;
                                float _3280 = _3226 - _2728;
                                float _3281 = _3227 - _2729;
                                float _3285 = inversesqrt(dot(vec3(_3279, _3280, _3281), vec3(_3279, _3280, _3281)));
                                float _3289 = dot(vec3(_706, _709, _712), vec3((-0.0) - _2727, (-0.0) - _2728, (-0.0) - _2729));
                                float _4359 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                                float _3292 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
                                float _3293 = dot(vec3(_706, _709, _712), vec3(_3285 * _3279, _3285 * _3280, _3285 * _3281));
                                float _4370 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                                float _3296 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
                                float _3300 = ((_3296 * _3296) * (_3278 + (-1.0))) + 1.0;
                                float _3301 = _3238 * _3277;
                                float _3302 = _3301 * _3301;
                                float _3308 = ((1.0 - _3302) * dot(vec3(_706, _709, _712), vec3(_3225, _3226, _3227))) + _3302;
                                float _4381 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                                float _3309 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
                                float _3310 = 1.0 - _3277;
                                float _3320 = (0.5 / (((_3309 * ((_3292 * _3310) + _3277)) + 9.9999999392252902907785028219223e-09) + (((_3309 * _3310) + _3277) * _3292))) * _3309;
                                float _4392 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                                float _3330 = (_3255 * _3232) * (((_3278 * 3.1415927410125732421875) * (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0)))) / ((_3300 * _3300) * ((_3245 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3330 * _3113.x;
                                frontier_phi_73_pred_1 = _3330 * _3113.y;
                                frontier_phi_73_pred_2 = _3256 * _3101.z;
                                frontier_phi_73_pred_3 = _3256 * _3101.y;
                                frontier_phi_73_pred_4 = _3256 * _3101.x;
                                frontier_phi_73_pred_5 = _3330 * _3113.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3334 = frontier_phi_73_pred;
                            _3335 = frontier_phi_73_pred_1;
                            _3339 = frontier_phi_73_pred_2;
                            _3338 = frontier_phi_73_pred_3;
                            _3337 = frontier_phi_73_pred_4;
                            _3336 = frontier_phi_73_pred_5;
                            _3043 = _3337 + _3056;
                            _3044 = _3338 + _3057;
                            _3045 = _3339 + _3058;
                            _3040 = _3334 + _3053;
                            _3041 = _3335 + _3054;
                            _3042 = _3336 + _3055;
                            if (_3060 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3053 = _3040;
                                _3054 = _3041;
                                _3055 = _3042;
                                _3056 = _3043;
                                _3057 = _3044;
                                _3058 = _3045;
                                _3059 = _3060;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3043;
                        frontier_phi_67_pred_1 = _3044;
                        frontier_phi_67_pred_2 = _3045;
                        frontier_phi_67_pred_3 = _3042;
                        frontier_phi_67_pred_4 = _3041;
                        frontier_phi_67_pred_5 = _3040;
                    }
                    _2708 = frontier_phi_67_pred;
                    _2710 = frontier_phi_67_pred_1;
                    _2712 = frontier_phi_67_pred_2;
                    _2706 = frontier_phi_67_pred_3;
                    _2704 = frontier_phi_67_pred_4;
                    _2702 = frontier_phi_67_pred_5;
                    uint _2847 = _2846 + 1u;
                    if (_2847 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2840 = _2702;
                        _2841 = _2704;
                        _2842 = _2706;
                        _2843 = _2708;
                        _2844 = _2710;
                        _2845 = _2712;
                        _2846 = _2847;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2710;
                frontier_phi_55_56_ladder_1 = _2712;
                frontier_phi_55_56_ladder_2 = _2708;
                frontier_phi_55_56_ladder_3 = _2706;
                frontier_phi_55_56_ladder_4 = _2704;
                frontier_phi_55_56_ladder_5 = _2702;
            }
            else
            {
                frontier_phi_55_56_ladder = _2596;
                frontier_phi_55_56_ladder_1 = _2598;
                frontier_phi_55_56_ladder_2 = _2594;
                frontier_phi_55_56_ladder_3 = _2592;
                frontier_phi_55_56_ladder_4 = _2590;
                frontier_phi_55_56_ladder_5 = _2588;
            }
            _2701 = frontier_phi_55_56_ladder_5;
            _2703 = frontier_phi_55_56_ladder_4;
            _2705 = frontier_phi_55_56_ladder_3;
            _2707 = frontier_phi_55_56_ladder_2;
            _2709 = frontier_phi_55_56_ladder;
            _2711 = frontier_phi_55_56_ladder_1;
        }
        float _2716 = isnan(1.0) ? _765 : (isnan(_765) ? 1.0 : min(_765, 1.0));
        _2500 = (_2716 * _2707) + _1936;
        _2502 = (_2716 * _2709) + _1938;
        _2504 = (_2716 * _2711) + _1940;
        _2506 = ((_2701 * _749) * _2716) + _2281;
        _2508 = ((_2703 * _751) * _2716) + _2283;
        _2510 = ((_2705 * _752) * _2716) + _2285;
    }
    else
    {
        _2500 = _1936;
        _2502 = _1938;
        _2504 = _1940;
        _2506 = _2281;
        _2508 = _2283;
        _2510 = _2285;
    }
    float _4408 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _4419 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _4430 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    uint _2530 = _241 + 6u;
    float _2538 = _684 / cbSceneParam._m0[86u].x;
    float _2539 = _685 / cbSceneParam._m0[86u].y;
    vec4 _2553 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2538, _2539, (log2((isnan(cbSceneParam._m0[77u].w) ? _619 : (isnan(_619) ? cbSceneParam._m0[77u].w : min(_619, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2555 = _2553.x;
    float _2556 = _2553.y;
    float _2557 = _2553.z;
    float _2558 = _2553.w;
    float _2651;
    float _2653;
    float _2655;
    float _2657;
    if (_619 > cbSceneParam._m0[78u].w)
    {
        float _2613 = isnan(_619) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _619 : min(cbSceneParam._m0[80u].w, _619));
        float _2614 = _2613 / _619;
        float _2625 = _2614 * _669;
        float _2626 = _670 * _2614;
        float _2627 = (-0.0) - _2626;
        float _2629 = _2614 * _671;
        float _2631 = (cbSceneParam._m0[77u].w * _2627) / _2613;
        float _2632 = _2631 + cbSceneParam._m0[79u].w;
        float _2633 = cbSceneParam._m0[79u].w - _2626;
        float _2639 = sqrt(((_2625 * _2625) + (_2626 * _2626)) + (_2629 * _2629));
        float _2642 = (1.0 - (cbSceneParam._m0[77u].w / _2613)) * _2639;
        float _2647 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2649 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2802;
        if (abs((_2627 - _2631) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2802 = ((((_2632 > 0.0) ? exp2(_2647 * _2632) : (2.0 - exp2(_2649 * _2632))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2642;
        }
        else
        {
            float _2762 = 1.0 / cbSceneParam._m0[80u].x;
            float _2763 = isnan(_2633) ? _2632 : (isnan(_2632) ? _2633 : max(_2632, _2633));
            float _2764 = isnan(_2633) ? _2632 : (isnan(_2632) ? _2633 : min(_2632, _2633));
            float _2773 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : min(_2763, 0.0));
            float _2774 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : min(_2764, 0.0));
            _2802 = ((abs(_2639 / _2627) * cbSceneParam._m0[80u].y) * ((((_2773 - _2774) * 2.0) - ((exp2(_2647 * (isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0)))) - exp2(_2647 * (isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0))))) * _2762)) - ((exp2(_2649 * _2773) - exp2(_2649 * _2774)) * _2762))) + (_2642 * cbSceneParam._m0[80u].z);
        }
        vec4 _2804 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2538, _2539, 1.0), 0.0);
        float _2813 = exp2((_2802 * (-1.44269502162933349609375)) * (1.0 - _2804.w));
        float _2814 = log2(_2813);
        float _2830 = log2(_2558);
        _2651 = (exp2(_2830 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2814 * cbSceneParam._m0[78u].x)) * _2804.x) / cbSceneParam._m0[78u].x)) + _2555;
        _2653 = (exp2(_2830 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2814 * cbSceneParam._m0[78u].y)) * _2804.y) / cbSceneParam._m0[78u].y)) + _2556;
        _2655 = (exp2(_2830 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2814 * cbSceneParam._m0[78u].z)) * _2804.z) / cbSceneParam._m0[78u].z)) + _2557;
        _2657 = _2813 * _2558;
    }
    else
    {
        _2651 = _2555;
        _2653 = _2556;
        _2655 = _2557;
        _2657 = _2558;
    }
    float _2669 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2670 = _2669 == 3.0;
    float _2671 = log2(_2657);
    float _2678 = exp2(_2671 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * (_2500 + ((isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0))) * _765))) + ((_2506 + ((isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))) * _1573)) * cbPerFrame._m0[3u].x));
    float _2679 = exp2(_2671 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * (_2502 + ((isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0))) * _765))) + ((_2508 + ((isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))) * _1573)) * cbPerFrame._m0[3u].x));
    float _2680 = exp2(_2671 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_2504 + ((isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0))) * _765))) + ((_2510 + ((isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0))) * _1573)) * cbPerFrame._m0[3u].x));
    float _2689 = (_2669 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2689 * (_2670 ? _2678 : (_2678 + (cbSceneParam._m0[72u].w * _2651)));
    SV_Target.y = _2689 * (_2670 ? _2679 : (_2679 + (cbSceneParam._m0[72u].w * _2653)));
    SV_Target.z = _2689 * (_2670 ? _2680 : (_2680 + (cbSceneParam._m0[72u].w * _2655)));
    SV_Target.w = cbInstanceData._m0[_2530].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2530].w;
}


