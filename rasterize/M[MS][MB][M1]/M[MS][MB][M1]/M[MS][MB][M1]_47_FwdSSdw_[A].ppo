#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1163;
float _3567;
float _3568;
float _3569;
float _3570;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _218 = _217 * _209;
    float _219 = _217 * _210;
    float _220 = _217 * _211;
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = _224 * NORMAL.x;
    float _226 = _224 * NORMAL.y;
    float _227 = _224 * NORMAL.z;
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _232 = _231 * TANGENT.x;
    float _233 = _231 * TANGENT.y;
    float _234 = _231 * TANGENT.z;
    float _245 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _247 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _248 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3579 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3590 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3601 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    uint _258 = uint(roundEven(NORMAL.w)) * 13u;
    uint _263 = _258 + 1u;
    uint _267 = _258 + 2u;
    float _276 = sqrt(((cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x)) + (cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x));
    float _277 = _276 * TEXCOORD.z;
    float _278 = _276 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _277) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _278) + cbTextureTilingScale._m0[13u].w));
    vec4 _314 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _319 = _314.x * cbMtdParam._m0[9u].x;
    float _320 = _314.y * cbMtdParam._m0[9u].y;
    float _321 = _314.z * cbMtdParam._m0[9u].z;
    float _325 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _291.x) * _319;
    float _328 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _291.y) * _320;
    float _331 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _291.z) * _321;
    float _338 = ((_319 - _325) * (isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0)))) + _325;
    float _339 = ((_320 - _328) * (isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0)))) + _328;
    float _340 = ((_321 - _331) * (isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0)))) + _331;
    vec4 _359 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _277) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _278) + cbTextureTilingScale._m0[14u].w));
    vec4 _379 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _277) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _278) + cbTextureTilingScale._m0[20u].w));
    vec4 _405 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _409 = _405.z;
    float _413 = (_405.x * 2.0) + (-1.0);
    float _414 = (_405.y * 2.0) + (-1.0);
    float _415 = dot(vec2(_413, _414), vec2(_413, _414));
    float _3612 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _420 = sqrt(1.0 - (isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0))));
    float _425 = _413 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_379.x * 2.0) + (-1.0)));
    float _426 = _414 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_379.y * 2.0) + (-1.0)));
    float _429 = fma(_420, _225, fma(_426, _232, _425 * _218));
    float _432 = fma(_420, _226, fma(_426, _233, _425 * _219));
    float _435 = fma(_420, _227, fma(_426, _234, _425 * _220));
    float _439 = inversesqrt(dot(vec3(_429, _432, _435), vec3(_429, _432, _435)));
    vec4 _475 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _277) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _278) + cbTextureTilingScale._m0[11u].w));
    float _477 = _475.x;
    float _478 = 1.0 - _477;
    float _487 = (cbMtdParam._m0[19u].x + dot(vec4(_439 * _429, _439 * _432, _439 * _435, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_477 - _478) * cbMtdParam._m0[24u].z) + _478) * cbMtdParam._m0[21u].z);
    float _3623 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _488 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
    float _495 = (_488 * ((_359.x * cbMtdParam._m0[18u].x) - _338)) + _338;
    float _496 = (_488 * ((_359.y * cbMtdParam._m0[18u].y) - _339)) + _339;
    float _497 = (_488 * ((_359.z * cbMtdParam._m0[18u].z) - _340)) + _340;
    vec4 _510 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _512 = _510.x;
    float _514 = _512 - (_512 * _488);
    float _519 = (((_379.z - _409) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _409;
    vec4 _532 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _277) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _278) + cbTextureTilingScale._m0[15u].w));
    float _539 = (_532.x * 2.0) + (-1.0);
    float _540 = (_532.y * 2.0) + (-1.0);
    float _541 = dot(vec2(_539, _540), vec2(_539, _540));
    float _3634 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _549 = ((_532.z - _519) * _488) + _519;
    float _559 = ((sqrt(1.0 - (isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0)))) - _420) * _488) + _420;
    float _562 = (((_539 - _425) * _488) + _425) + (cbMtdParam._m0[21u].x * _425);
    float _563 = (((_540 - _426) * _488) + _426) + (cbMtdParam._m0[21u].x * _426);
    float _565 = cbMtdParam._m0[22u].x + _405.w;
    float _568 = fma(_559, _225, fma(_563, _232, _562 * _218));
    float _571 = fma(_559, _226, fma(_563, _233, _562 * _219));
    float _574 = fma(_559, _227, fma(_563, _234, _562 * _220));
    float _578 = inversesqrt(dot(vec3(_568, _571, _574), vec3(_568, _571, _574)));
    float _579 = _578 * _568;
    float _580 = _578 * _571;
    float _581 = _578 * _574;
    float _3645 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _582 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
    float _3656 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _3667 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _3678 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _3689 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _3700 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _587 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
    float _601 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _642 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _652 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _642);
    float _653 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _642);
    float _654 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _642);
    float _658 = inversesqrt(dot(vec3(_652, _653, _654), vec3(_652, _653, _654)));
    float _659 = _652 * _658;
    float _660 = _653 * _658;
    float _661 = _654 * _658;
    vec4 _666 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _668 = _666.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _843 = sqrt(((_652 * _652) + (_653 * _653)) + (_654 * _654));
        float _849 = (cbMatDynParam._m0[5u].x * _843) + cbMatDynParam._m0[5u].y;
        float _3711 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _850 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _854 = (cbMatDynParam._m0[5u].z * _843) + cbMatDynParam._m0[5u].w;
        float _3722 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) - _850)) + _850) < ((_668 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _680 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _681 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _701 = fma(_581, cbSceneParam._m0[5u].z, fma(_580, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _579));
    float _704 = fma(_581, cbSceneParam._m0[6u].z, fma(_580, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _579));
    float _707 = fma(_581, cbSceneParam._m0[7u].z, fma(_580, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _579));
    uint _720 = _258 + 9u;
    uint _721 = _720 + uint(cbMatDynParam._m0[0u].w);
    float _727 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0)))) * cbInstanceData._m0[_721].x;
    float _728 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0)))) * cbInstanceData._m0[_721].y;
    float _729 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0)))) * cbInstanceData._m0[_721].z;
    float _3733 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _730 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
    float _3744 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _731 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
    float _3755 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _732 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
    float _733 = 1.0 - _587;
    float _734 = _730 * _733;
    float _735 = _731 * _733;
    float _736 = _732 * _733;
    float _741 = (_730 + (-0.039999999105930328369140625)) * _587;
    float _742 = (_731 + (-0.039999999105930328369140625)) * _587;
    float _743 = (_732 + (-0.039999999105930328369140625)) * _587;
    float _744 = _741 + 0.039999999105930328369140625;
    float _746 = _742 + 0.039999999105930328369140625;
    float _747 = _743 + 0.039999999105930328369140625;
    vec4 _756 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _680, cbSceneParam._m0[86u].y * _681));
    float _760 = ((isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0))) * TEXCOORD_5.w) * _756.x;
    float _761 = dot(vec3(_579, _580, _581), vec3(_659, _660, _661));
    float _764 = _761 * 2.0;
    float _768 = (_764 * _579) - _659;
    float _769 = (_764 * _580) - _660;
    float _770 = (_764 * _581) - _661;
    float _774 = abs(dot(vec3(_659, _660, _661), vec3(_579, _580, _581)));
    float _3766 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _776 = sqrt(_582);
    float _789 = exp2((_776 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_776 * 3.0));
    float _795 = (1.0 - _789) * ((_776 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _796 = _789 * _776;
    float _824 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _828 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _832 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1162;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _887 = fma(_832, cbModelParam._m0[26u].z, fma(_828, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _824));
        float _891 = fma(_832, cbModelParam._m0[27u].z, fma(_828, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _824));
        float _895 = fma(_832, cbModelParam._m0[28u].z, fma(_828, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _824));
        float _920 = _824 + _579;
        float _921 = _828 + _580;
        float _922 = _832 + _581;
        float _932 = fma(_922, cbModelParam._m0[26u].z, fma(_921, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _920)) - _887;
        float _933 = fma(_922, cbModelParam._m0[27u].z, fma(_921, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _920)) - _891;
        float _934 = fma(_922, cbModelParam._m0[28u].z, fma(_921, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _920)) - _895;
        float _938 = inversesqrt(dot(vec3(_932, _933, _934), vec3(_932, _933, _934)));
        float _951 = ((_938 * _932) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_887 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _952 = ((_938 * _933) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_891 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _953 = ((_938 * _934) / cbModelParam._m0[34u].z) + ((((((_895 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _956 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        float _990 = exp2((_956.w + (-0.5)) * 20.0) * 2.0;
        float _991 = _990 * (_956.x + (-0.5));
        float _992 = _990 * (_956.y + (-0.5));
        float _993 = _990 * (_956.z + (-0.5));
        float _1000 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _1001 = _1000 * (_963.x + (-0.5));
        float _1002 = _1000 * (_963.y + (-0.5));
        float _1003 = _1000 * (_963.z + (-0.5));
        float _1010 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_970.x + (-0.5));
        float _1012 = _1010 * (_970.y + (-0.5));
        float _1013 = _1010 * (_970.z + (-0.5));
        float _1020 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_977.x + (-0.5));
        float _1022 = _1020 * (_977.y + (-0.5));
        float _1023 = _1020 * (_977.z + (-0.5));
        float _1024 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1025 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1026 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1027 = _991 * 0.5;
        float _1028 = _1001 * 0.5;
        float _1029 = _1011 * 0.5;
        float _1030 = dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029));
        float _1035 = (_1030 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1030);
        float _1044 = (dot(vec3(_579, _580, _581), vec3(_1035 * _1027, _1035 * _1028, _1035 * _1029)) + 1.0) * 0.5;
        float _3792 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1054 = sqrt(((_1028 * _1028) + (_1027 * _1027)) + (_1029 * _1029)) / (_1024 + 9.9999997473787516355514526367188e-06);
        float _3803 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1056 = _1055 * 2.0;
        float _1060 = (1.0 - _1055) / (_1055 + 1.0);
        float _3814 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1070 = ((((1.0 - _1061) * (_1056 + 2.0)) * exp2(log2(isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * (_1056 + 1.0))) + _1061) * _1024;
        float _1071 = _992 * 0.5;
        float _1072 = _1002 * 0.5;
        float _1073 = _1012 * 0.5;
        float _1074 = dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073));
        float _1079 = (_1074 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1074);
        float _1087 = (dot(vec3(_579, _580, _581), vec3(_1079 * _1071, _1079 * _1072, _1079 * _1073)) + 1.0) * 0.5;
        float _3825 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1096 = sqrt(((_1072 * _1072) + (_1071 * _1071)) + (_1073 * _1073)) / (_1025 + 9.9999997473787516355514526367188e-06);
        float _3836 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1098 = _1097 * 2.0;
        float _1102 = (1.0 - _1097) / (_1097 + 1.0);
        float _3847 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1112 = ((((1.0 - _1103) * (_1098 + 2.0)) * exp2(log2(isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) * (_1098 + 1.0))) + _1103) * _1025;
        float _1113 = _993 * 0.5;
        float _1114 = _1003 * 0.5;
        float _1115 = _1013 * 0.5;
        float _1116 = dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115));
        float _1121 = (_1116 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1116);
        float _1129 = (dot(vec3(_579, _580, _581), vec3(_1121 * _1113, _1121 * _1114, _1121 * _1115)) + 1.0) * 0.5;
        float _3858 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1138 = sqrt(((_1114 * _1114) + (_1113 * _1113)) + (_1115 * _1115)) / (_1026 + 9.9999997473787516355514526367188e-06);
        float _3869 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1140 = _1139 * 2.0;
        float _1144 = (1.0 - _1139) / (_1139 + 1.0);
        float _3880 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1154 = ((((1.0 - _1145) * (_1140 + 2.0)) * exp2(log2(isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * (_1140 + 1.0))) + _1145) * _1026;
        _1162 = _993;
        _1164 = _992;
        _1165 = _991;
        _1166 = _1003;
        _1167 = _1002;
        _1168 = _1001;
        _1169 = _1013;
        _1170 = _1012;
        _1171 = _1011;
        _1172 = _1026;
        _1173 = _1025;
        _1174 = _1024;
        _1175 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0)));
        _1176 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0)));
        _1177 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)));
    }
    else
    {
        _1162 = _1163;
        _1164 = _1163;
        _1165 = _1163;
        _1166 = _1163;
        _1167 = _1163;
        _1168 = _1163;
        _1169 = _1163;
        _1170 = _1163;
        _1171 = _1163;
        _1172 = _1163;
        _1173 = _1163;
        _1174 = _1163;
        _1175 = 0.0;
        _1176 = 0.0;
        _1177 = 0.0;
    }
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1205 = fma(_832, cbModelParam._m0[30u].z, fma(_828, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _824));
        float _1209 = fma(_832, cbModelParam._m0[31u].z, fma(_828, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _824));
        float _1213 = fma(_832, cbModelParam._m0[32u].z, fma(_828, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _824));
        float _1236 = _824 + _579;
        float _1237 = _828 + _580;
        float _1238 = _832 + _581;
        float _1248 = fma(_1238, cbModelParam._m0[30u].z, fma(_1237, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1236)) - _1205;
        float _1249 = fma(_1238, cbModelParam._m0[31u].z, fma(_1237, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1236)) - _1209;
        float _1250 = fma(_1238, cbModelParam._m0[32u].z, fma(_1237, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1236)) - _1213;
        float _1254 = inversesqrt(dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250)));
        float _1267 = ((_1254 * _1248) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1205 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1268 = ((_1254 * _1249) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1209 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1269 = ((_1254 * _1250) / cbModelParam._m0[35u].z) + ((((((_1213 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1267, _1268, _1269), 0.0);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1267, _1268, _1269), 0.0);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1267, _1268, _1269), 0.0);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1267, _1268, _1269), 0.0);
        float _1304 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1305 = _1304 * (_1271.x + (-0.5));
        float _1306 = _1304 * (_1271.y + (-0.5));
        float _1307 = _1304 * (_1271.z + (-0.5));
        float _1314 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1315 = _1314 * (_1278.x + (-0.5));
        float _1316 = _1314 * (_1278.y + (-0.5));
        float _1317 = _1314 * (_1278.z + (-0.5));
        float _1324 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1285.x + (-0.5));
        float _1326 = _1324 * (_1285.y + (-0.5));
        float _1327 = _1324 * (_1285.z + (-0.5));
        float _1334 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1292.x + (-0.5));
        float _1336 = _1334 * (_1292.y + (-0.5));
        float _1337 = _1334 * (_1292.z + (-0.5));
        float _1338 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1339 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1340 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1341 = _1305 * 0.5;
        float _1342 = _1315 * 0.5;
        float _1343 = _1325 * 0.5;
        float _1344 = dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343));
        float _1349 = (_1344 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1344);
        float _1357 = (dot(vec3(_579, _580, _581), vec3(_1349 * _1341, _1349 * _1342, _1349 * _1343)) + 1.0) * 0.5;
        float _3921 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1366 = sqrt(((_1342 * _1342) + (_1341 * _1341)) + (_1343 * _1343)) / (_1338 + 9.9999997473787516355514526367188e-06);
        float _3932 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1368 = _1367 * 2.0;
        float _1372 = (1.0 - _1367) / (_1367 + 1.0);
        float _3943 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1382 = ((((1.0 - _1373) * (_1368 + 2.0)) * exp2(log2(isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * (_1368 + 1.0))) + _1373) * _1338;
        float _1383 = _1306 * 0.5;
        float _1384 = _1316 * 0.5;
        float _1385 = _1326 * 0.5;
        float _1386 = dot(vec3(_1383, _1384, _1385), vec3(_1383, _1384, _1385));
        float _1391 = (_1386 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1386);
        float _1399 = (dot(vec3(_579, _580, _581), vec3(_1391 * _1383, _1391 * _1384, _1391 * _1385)) + 1.0) * 0.5;
        float _3954 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1408 = sqrt(((_1384 * _1384) + (_1383 * _1383)) + (_1385 * _1385)) / (_1339 + 9.9999997473787516355514526367188e-06);
        float _3965 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1410 = _1409 * 2.0;
        float _1414 = (1.0 - _1409) / (_1409 + 1.0);
        float _3976 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1424 = ((((1.0 - _1415) * (_1410 + 2.0)) * exp2(log2(isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * (_1410 + 1.0))) + _1415) * _1339;
        float _1425 = _1307 * 0.5;
        float _1426 = _1317 * 0.5;
        float _1427 = _1327 * 0.5;
        float _1428 = dot(vec3(_1425, _1426, _1427), vec3(_1425, _1426, _1427));
        float _1433 = (_1428 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1428);
        float _1441 = (dot(vec3(_579, _580, _581), vec3(_1433 * _1425, _1433 * _1426, _1433 * _1427)) + 1.0) * 0.5;
        float _3987 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1450 = sqrt(((_1426 * _1426) + (_1425 * _1425)) + (_1427 * _1427)) / (_1340 + 9.9999997473787516355514526367188e-06);
        float _3998 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1452 = _1451 * 2.0;
        float _1456 = (1.0 - _1451) / (_1451 + 1.0);
        float _4009 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1466 = ((((1.0 - _1457) * (_1452 + 2.0)) * exp2(log2(isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_1452 + 1.0))) + _1457) * _1340;
        _1474 = _1307;
        _1475 = _1306;
        _1476 = _1305;
        _1477 = _1317;
        _1478 = _1316;
        _1479 = _1315;
        _1480 = _1327;
        _1481 = _1326;
        _1482 = _1325;
        _1483 = _1340;
        _1484 = _1339;
        _1485 = _1338;
        _1486 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)));
        _1487 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)));
        _1488 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)));
    }
    else
    {
        _1474 = _1163;
        _1475 = _1163;
        _1476 = _1163;
        _1477 = _1163;
        _1478 = _1163;
        _1479 = _1163;
        _1480 = _1163;
        _1481 = _1163;
        _1482 = _1163;
        _1483 = _1163;
        _1484 = _1163;
        _1485 = _1163;
        _1486 = 0.0;
        _1487 = 0.0;
        _1488 = 0.0;
    }
    float _1498 = (cbModelParam._m0[1u].x * (_1486 - _1175)) + _1175;
    float _1499 = (cbModelParam._m0[1u].x * (_1487 - _1176)) + _1176;
    float _1500 = (cbModelParam._m0[1u].x * (_1488 - _1177)) + _1177;
    float _1521 = fma(_1500, cbSceneParam._m0[89u].z, fma(_1499, cbSceneParam._m0[89u].y, _1498 * cbSceneParam._m0[89u].x));
    float _1524 = fma(_1500, cbSceneParam._m0[90u].z, fma(_1499, cbSceneParam._m0[90u].y, _1498 * cbSceneParam._m0[90u].x));
    float _1527 = fma(_1500, cbSceneParam._m0[91u].z, fma(_1499, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1498));
    float _1542 = _768 * 0.5;
    float _1543 = _769 * 0.5;
    float _1544 = _770 * 0.5;
    float _1545 = dot(vec4(_1542, _1543, _1544, 1.0), vec4(_1476, _1479, _1482, _1485));
    float _1548 = dot(vec4(_1542, _1543, _1544, 1.0), vec4(_1475, _1478, _1481, _1484));
    float _1551 = dot(vec4(_1542, _1543, _1544, 1.0), vec4(_1474, _1477, _1480, _1483));
    float _1585;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1558 = dot(vec4(_1542, _1543, _1544, 1.0), vec4(_1162, _1166, _1169, _1172));
        float _1562 = dot(vec4(_1542, _1543, _1544, 1.0), vec4(_1164, _1167, _1170, _1173));
        float _1566 = dot(vec4(_1542, _1543, _1544, 1.0), vec4(_1165, _1168, _1171, _1174));
        float _1573 = dot(vec4(cbModelParam._m0[39u]), vec4(_1542, _1543, _1544, 1.0));
        _1585 = dot(vec3(isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)), isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)), isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1573) ? 0.0 : (isnan(0.0) ? _1573 : max(0.0, _1573))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1585 = 1.0;
    }
    float _1596;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1587 = dot(vec4(cbModelParam._m0[40u]), vec4(_1542, _1543, _1544, 1.0));
        _1596 = dot(vec3(isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)), isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)), isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1587) ? 0.0 : (isnan(0.0) ? _1587 : max(0.0, _1587))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1596 = 1.0;
    }
    float _1600 = (_1596 * cbModelParam._m0[1u].x) + (_1585 * (1.0 - cbModelParam._m0[1u].x));
    float _1610 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _582);
    float _1611 = isnan(_1610) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1610 : min(cbModelParam._m0[25u].z, _1610));
    float _1691;
    float _1693;
    float _1695;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1658 = fma(_832, cbModelParam._m0[13u].z, fma(_828, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _824)) + cbModelParam._m0[13u].w;
        float _1662 = fma(_832, cbModelParam._m0[14u].z, fma(_828, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _824)) + cbModelParam._m0[14u].w;
        float _1666 = fma(_832, cbModelParam._m0[15u].z, fma(_828, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _824)) + cbModelParam._m0[15u].w;
        float _1669 = fma(_770, cbModelParam._m0[13u].z, fma(_769, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _768));
        float _1672 = fma(_770, cbModelParam._m0[14u].z, fma(_769, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _768));
        float _1675 = fma(_770, cbModelParam._m0[15u].z, fma(_769, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _768));
        float _1703;
        if (_1669 > 0.0)
        {
            _1703 = abs((1.0 - _1658) / _1669);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1669 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1658 + 1.0) / _1669);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1703 = frontier_phi_17_15_ladder;
        }
        float _1927;
        if (_1672 > 0.0)
        {
            _1927 = abs((1.0 - _1662) / _1672);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1672 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1662 + 1.0) / _1672);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1927 = frontier_phi_26_22_ladder;
        }
        float _2184;
        if (_1675 > 0.0)
        {
            _2184 = abs((1.0 - _1666) / _1675);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1675 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1666 + 1.0) / _1675);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2184 = frontier_phi_38_33_ladder;
        }
        float _2186 = isnan(_1927) ? _1703 : (isnan(_1703) ? _1927 : min(_1703, _1927));
        float _2187 = isnan(_2184) ? _2186 : (isnan(_2186) ? _2184 : min(_2186, _2184));
        float _2191 = (_2187 * _1669) + _1658;
        float _2192 = (_2187 * _1672) + _1662;
        float _2193 = (_2187 * _1675) + _1666;
        float _2194 = _2187 * 9.9999997473787516355514526367188e-05;
        float _2196 = (-1.0) - _2194;
        float _2198 = _2194 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2193 > _2198) || ((_2193 < _2196) || ((_2192 > _2198) || ((_2192 < _2196) || ((_2191 < _2196) || (_2191 > _2198))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2321 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2193, cbModelParam._m0[9u].z, fma(_2192, cbModelParam._m0[9u].y, _2191 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2193, cbModelParam._m0[10u].z, fma(_2192, cbModelParam._m0[10u].y, _2191 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2193, cbModelParam._m0[11u].z, fma(_2192, cbModelParam._m0[11u].y, _2191 * cbModelParam._m0[11u].x))), _1611);
            frontier_phi_16_38_ladder = _2321.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2321.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2321.x * cbModelParam._m0[1u].y;
        }
        _1691 = frontier_phi_16_38_ladder_2;
        _1693 = frontier_phi_16_38_ladder_1;
        _1695 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1679 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_768, _769, _770), _1611);
        _1691 = _1679.x * cbModelParam._m0[1u].y;
        _1693 = _1679.y * cbModelParam._m0[1u].y;
        _1695 = _1679.z * cbModelParam._m0[1u].y;
    }
    float _1699 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _582);
    float _1700 = isnan(_1699) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1699 : min(cbModelParam._m0[25u].w, _1699));
    float _1789;
    float _1791;
    float _1793;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1753 = fma(_832, cbModelParam._m0[21u].z, fma(_828, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _824)) + cbModelParam._m0[21u].w;
        float _1757 = fma(_832, cbModelParam._m0[22u].z, fma(_828, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _824)) + cbModelParam._m0[22u].w;
        float _1761 = fma(_832, cbModelParam._m0[23u].z, fma(_828, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _824)) + cbModelParam._m0[23u].w;
        float _1764 = fma(_770, cbModelParam._m0[21u].z, fma(_769, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _768));
        float _1767 = fma(_770, cbModelParam._m0[22u].z, fma(_769, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _768));
        float _1770 = fma(_770, cbModelParam._m0[23u].z, fma(_769, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _768));
        float _1932;
        if (_1764 > 0.0)
        {
            _1932 = abs((1.0 - _1753) / _1764);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1764 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1753 + 1.0) / _1764);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1932 = frontier_phi_28_24_ladder;
        }
        float _2211;
        if (_1767 > 0.0)
        {
            _2211 = abs((1.0 - _1757) / _1767);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1767 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1757 + 1.0) / _1767);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2211 = frontier_phi_40_35_ladder;
        }
        float _2424;
        if (_1770 > 0.0)
        {
            _2424 = abs((1.0 - _1761) / _1770);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1770 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1761 + 1.0) / _1770);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2424 = frontier_phi_49_46_ladder;
        }
        float _2426 = isnan(_2211) ? _1932 : (isnan(_1932) ? _2211 : min(_1932, _2211));
        float _2427 = isnan(_2424) ? _2426 : (isnan(_2426) ? _2424 : min(_2426, _2424));
        float _2431 = (_2427 * _1764) + _1753;
        float _2432 = (_2427 * _1767) + _1757;
        float _2433 = (_2427 * _1770) + _1761;
        float _2434 = _2427 * 9.9999997473787516355514526367188e-05;
        float _2435 = (-1.0) - _2434;
        float _2437 = _2434 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2433 > _2437) || ((_2433 < _2435) || ((_2432 > _2437) || ((_2432 < _2435) || ((_2431 < _2435) || (_2431 > _2437))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2632 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2433, cbModelParam._m0[17u].z, fma(_2432, cbModelParam._m0[17u].y, _2431 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2433, cbModelParam._m0[18u].z, fma(_2432, cbModelParam._m0[18u].y, _2431 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2433, cbModelParam._m0[19u].z, fma(_2432, cbModelParam._m0[19u].y, _2431 * cbModelParam._m0[19u].x))), _1700);
            frontier_phi_25_49_ladder = _2632.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2632.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2632.x * cbModelParam._m0[1u].z;
        }
        _1789 = frontier_phi_25_49_ladder_2;
        _1791 = frontier_phi_25_49_ladder_1;
        _1793 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1773 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_768, _769, _770), _1700);
        _1789 = _1773.x * cbModelParam._m0[1u].z;
        _1791 = _1773.y * cbModelParam._m0[1u].z;
        _1793 = _1773.z * cbModelParam._m0[1u].z;
    }
    float _1806 = (((_795 * _744) + _796) * _760) * ((cbModelParam._m0[1u].w * (_1789 - _1691)) + _1691);
    float _1808 = (((_795 * _746) + _796) * _760) * ((cbModelParam._m0[1u].w * (_1791 - _1693)) + _1693);
    float _1810 = (((_795 * _747) + _796) * _760) * ((cbModelParam._m0[1u].w * (_1793 - _1695)) + _1695);
    float _1813 = fma(_1810, cbSceneParam._m0[89u].z, fma(_1808, cbSceneParam._m0[89u].y, _1806 * cbSceneParam._m0[89u].x));
    float _1816 = fma(_1810, cbSceneParam._m0[90u].z, fma(_1808, cbSceneParam._m0[90u].y, _1806 * cbSceneParam._m0[90u].x));
    float _1819 = fma(_1810, cbSceneParam._m0[91u].z, fma(_1808, cbSceneParam._m0[91u].y, _1806 * cbSceneParam._m0[91u].x));
    vec4 _1827 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_680, _681));
    float _1829 = _1827.w;
    float _1841 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1829);
    float _1842 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1829);
    float _1843 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1829);
    uvec4 _1847 = floatBitsToUint(cbInstanceData._m0[_258 + 5u]);
    uint _1849 = _1847.x * 14u;
    uint _1850 = _1849 + 13u;
    float _1857 = _760 + (-1.0);
    float _1862 = (cbLight._m0[_1850].x * _1857) + 1.0;
    float _1863 = (cbLight._m0[_1850].y * _1857) + 1.0;
    float _1864 = (cbLight._m0[_1850].z * _1857) + 1.0;
    float _1865 = (cbLight._m0[_1850].w * _1857) + 1.0;
    uint _1866 = _1849 + 5u;
    float _1872 = isnan(1.0) ? _1863 : (isnan(_1863) ? 1.0 : min(_1863, 1.0));
    uint _1876 = _1849 + 4u;
    float _1886 = isnan(1.0) ? _1862 : (isnan(_1862) ? 1.0 : min(_1862, 1.0));
    uint _1890 = _1849 | 1u;
    float _1901 = dot(vec3(cbLight._m0[_1849].xyz), vec3(_579, _580, _581));
    float _1904 = dot(vec3(cbLight._m0[_1890].xyz), vec3(_579, _580, _581));
    float _4145 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _4156 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
    float _1909 = (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * 0.3183098733425140380859375;
    float _1911 = (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * 0.3183098733425140380859375;
    float _1918 = ((cbLight._m0[_1866].x * _1872) * _1911) + (((cbLight._m0[_1876].x * _1841) * _1886) * _1909);
    float _1919 = ((_1872 * cbLight._m0[_1866].y) * _1911) + (((cbLight._m0[_1876].y * _1842) * _1886) * _1909);
    float _1920 = ((_1872 * cbLight._m0[_1866].z) * _1911) + (((cbLight._m0[_1876].z * _1843) * _1886) * _1909);
    uvec4 _1924 = floatBitsToUint(cbLight._m0[_1849 + 12u]);
    bool _1926 = _1924.x == 0u;
    float _1937;
    float _1939;
    float _1941;
    if (_1926)
    {
        _1937 = _1918;
        _1939 = _1919;
        _1941 = _1920;
    }
    else
    {
        uint _1945 = _1849 + 6u;
        float _1961 = (dot(vec3(cbLight._m0[_1849 + 2u].xyz), vec3(_579, _580, _581)) * 0.5) + 0.5;
        float _1962 = _1961 * _1961;
        float _4167 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
        float _1963 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1964 = isnan(1.0) ? _1864 : (isnan(_1864) ? 1.0 : min(_1864, 1.0));
        _1937 = (((cbLight._m0[_1945].x * 0.3183098733425140380859375) * _1963) * _1964) + _1918;
        _1939 = (((cbLight._m0[_1945].y * 0.3183098733425140380859375) * _1963) * _1964) + _1919;
        _1941 = (((cbLight._m0[_1945].z * 0.3183098733425140380859375) * _1963) * _1964) + _1920;
    }
    bool _1944 = _1924.y == 0u;
    float _1982;
    float _1984;
    float _1986;
    if (_1944)
    {
        _1982 = _1937;
        _1984 = _1939;
        _1986 = _1941;
    }
    else
    {
        uint _2155 = _1849 + 7u;
        float _2171 = (dot(vec3(cbLight._m0[_1849 + 3u].xyz), vec3(_579, _580, _581)) * 0.5) + 0.5;
        float _2172 = _2171 * _2171;
        float _4183 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        float _2173 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _2174 = isnan(1.0) ? _1865 : (isnan(_1865) ? 1.0 : min(_1865, 1.0));
        _1982 = (((cbLight._m0[_2155].x * 0.3183098733425140380859375) * _2173) * _2174) + _1937;
        _1984 = (((cbLight._m0[_2155].y * 0.3183098733425140380859375) * _2173) * _2174) + _1939;
        _1986 = (((cbLight._m0[_2155].z * 0.3183098733425140380859375) * _2173) * _2174) + _1941;
    }
    uint _1989 = _1849 + 8u;
    float _2002 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1849].w)) * _582) * 0.949999988079071044921875);
    float _2003 = _2002 * _2002;
    float _2004 = cbLight._m0[_1849].x + _659;
    float _2005 = cbLight._m0[_1849].y + _660;
    float _2006 = cbLight._m0[_1849].z + _661;
    float _2010 = inversesqrt(dot(vec3(_2004, _2005, _2006), vec3(_2004, _2005, _2006)));
    float _2011 = _2010 * _2004;
    float _2012 = _2010 * _2005;
    float _2013 = _2010 * _2006;
    float _2014 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_1849].xyz));
    float _4199 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2017 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
    float _4210 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _2018 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _2019 = dot(vec3(_579, _580, _581), vec3(_2011, _2012, _2013));
    float _4221 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
    float _2022 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
    float _2023 = dot(vec3(cbLight._m0[_1849].xyz), vec3(_2011, _2012, _2013));
    float _4232 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
    float _2027 = _2003 * _2003;
    float _2031 = ((_2022 * _2022) * (_2027 + (-1.0))) + 1.0;
    float _2039 = exp2(log2(1.0 - (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0)))) * 5.0);
    float _2040 = 0.959999978542327880859375 - _741;
    float _2042 = 0.959999978542327880859375 - _742;
    float _2043 = 0.959999978542327880859375 - _743;
    float _2050 = 1.0 - _2003;
    float _2061 = (0.5 / (((_2018 * ((_2017 * _2050) + _2003)) + 9.9999999392252902907785028219223e-09) + (((_2018 * _2050) + _2003) * _2017))) * _2017;
    float _4243 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
    float _2063 = (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (_2027 / ((_2031 * _2031) * 3.141590118408203125));
    uint _2077 = _1849 + 9u;
    float _2088 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1890].w)) * _582) * 0.949999988079071044921875);
    float _2089 = _2088 * _2088;
    float _2090 = cbLight._m0[_1890].x + _659;
    float _2091 = cbLight._m0[_1890].y + _660;
    float _2092 = cbLight._m0[_1890].z + _661;
    float _2096 = inversesqrt(dot(vec3(_2090, _2091, _2092), vec3(_2090, _2091, _2092)));
    float _2097 = _2096 * _2090;
    float _2098 = _2096 * _2091;
    float _2099 = _2096 * _2092;
    float _2100 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_1890].xyz));
    float _4254 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2103 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
    float _2104 = dot(vec3(_579, _580, _581), vec3(_2097, _2098, _2099));
    float _4265 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2107 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
    float _2108 = dot(vec3(cbLight._m0[_1890].xyz), vec3(_2097, _2098, _2099));
    float _4276 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2112 = _2089 * _2089;
    float _2116 = ((_2107 * _2107) * (_2112 + (-1.0))) + 1.0;
    float _2123 = exp2(log2(1.0 - (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0)))) * 5.0);
    float _2130 = 1.0 - _2089;
    float _2140 = (0.5 / (((_2018 * ((_2103 * _2130) + _2089)) + 9.9999999392252902907785028219223e-09) + (((_2018 * _2130) + _2089) * _2103))) * _2103;
    float _4287 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2142 = (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_2112 / ((_2116 * _2116) * 3.141590118408203125));
    float _2152 = (((((_2123 * _2040) + _744) * cbLight._m0[_2077].x) * _2142) * _1872) + ((((cbLight._m0[_1989].x * _1841) * ((_2039 * _2040) + _744)) * _2063) * _1886);
    float _2153 = (((((_2123 * _2042) + _746) * cbLight._m0[_2077].y) * _2142) * _1872) + ((((cbLight._m0[_1989].y * _1842) * ((_2039 * _2042) + _746)) * _2063) * _1886);
    float _2154 = (((((_2123 * _2043) + _747) * cbLight._m0[_2077].z) * _2142) * _1872) + ((((cbLight._m0[_1989].z * _1843) * ((_2039 * _2043) + _747)) * _2063) * _1886);
    float _2216;
    float _2218;
    float _2220;
    if (_1926)
    {
        _2216 = _2152;
        _2218 = _2153;
        _2220 = _2154;
    }
    else
    {
        uint _2222 = _1849 + 2u;
        uint _2226 = _1849 + 10u;
        float _2240 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2222].w)) * _582) * 0.949999988079071044921875);
        float _2241 = _2240 * _2240;
        float _2242 = cbLight._m0[_2222].x + _659;
        float _2243 = cbLight._m0[_2222].y + _660;
        float _2244 = cbLight._m0[_2222].z + _661;
        float _2248 = inversesqrt(dot(vec3(_2242, _2243, _2244), vec3(_2242, _2243, _2244)));
        float _2249 = _2248 * _2242;
        float _2250 = _2248 * _2243;
        float _2251 = _2248 * _2244;
        float _2252 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_2222].xyz));
        float _4298 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        float _2255 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _2256 = dot(vec3(_579, _580, _581), vec3(_2249, _2250, _2251));
        float _4309 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2259 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _2260 = dot(vec3(cbLight._m0[_2222].xyz), vec3(_2249, _2250, _2251));
        float _4320 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
        float _2264 = _2241 * _2241;
        float _2268 = ((_2259 * _2259) * (_2264 + (-1.0))) + 1.0;
        float _2275 = exp2(log2(1.0 - (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0)))) * 5.0);
        float _2282 = 1.0 - _2241;
        float _2292 = (0.5 / (((_2018 * ((_2255 * _2282) + _2241)) + 9.9999999392252902907785028219223e-09) + (((_2018 * _2282) + _2241) * _2255))) * _2255;
        float _4331 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
        float _2294 = (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (_2264 / ((_2268 * _2268) * 3.141590118408203125));
        float _2295 = isnan(1.0) ? _1864 : (isnan(_1864) ? 1.0 : min(_1864, 1.0));
        _2216 = (((((_2275 * _2040) + _744) * cbLight._m0[_2226].x) * _2294) * _2295) + _2152;
        _2218 = (((((_2275 * _2042) + _746) * cbLight._m0[_2226].y) * _2294) * _2295) + _2153;
        _2220 = (((((_2275 * _2043) + _747) * cbLight._m0[_2226].z) * _2294) * _2295) + _2154;
    }
    float _2330;
    float _2332;
    float _2334;
    if (_1944)
    {
        _2330 = _2216;
        _2332 = _2218;
        _2334 = _2220;
    }
    else
    {
        uint _2341 = _1849 + 3u;
        uint _2345 = _1849 + 11u;
        float _2359 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2341].w)) * _582) * 0.949999988079071044921875);
        float _2360 = _2359 * _2359;
        float _2361 = cbLight._m0[_2341].x + _659;
        float _2362 = cbLight._m0[_2341].y + _660;
        float _2363 = cbLight._m0[_2341].z + _661;
        float _2367 = inversesqrt(dot(vec3(_2361, _2362, _2363), vec3(_2361, _2362, _2363)));
        float _2368 = _2367 * _2361;
        float _2369 = _2367 * _2362;
        float _2370 = _2367 * _2363;
        float _2371 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_2341].xyz));
        float _4347 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        float _2374 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _2375 = dot(vec3(_579, _580, _581), vec3(_2368, _2369, _2370));
        float _4358 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        float _2378 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _2379 = dot(vec3(cbLight._m0[_2341].xyz), vec3(_2368, _2369, _2370));
        float _4369 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
        float _2383 = _2360 * _2360;
        float _2387 = ((_2378 * _2378) * (_2383 + (-1.0))) + 1.0;
        float _2394 = exp2(log2(1.0 - (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0)))) * 5.0);
        float _2401 = 1.0 - _2360;
        float _2411 = (0.5 / (((_2018 * ((_2374 * _2401) + _2360)) + 9.9999999392252902907785028219223e-09) + (((_2018 * _2401) + _2360) * _2374))) * _2374;
        float _4380 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
        float _2413 = (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * (_2383 / ((_2387 * _2387) * 3.141590118408203125));
        float _2414 = isnan(1.0) ? _1865 : (isnan(_1865) ? 1.0 : min(_1865, 1.0));
        _2330 = (((((_2394 * _2040) + _744) * cbLight._m0[_2345].x) * _2413) * _2414) + _2216;
        _2332 = (((((_2394 * _2042) + _746) * cbLight._m0[_2345].y) * _2413) * _2414) + _2218;
        _2334 = (((((_2394 * _2043) + _747) * cbLight._m0[_2345].z) * _2413) * _2414) + _2220;
    }
    float _2549;
    float _2551;
    float _2553;
    float _2555;
    float _2557;
    float _2559;
    if (_1847.y == 0u)
    {
        float _2489 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2490 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2489;
        float _2491 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2489;
        float _2492 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2489;
        uvec4 _2504 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2505 = _2504.x;
        uint _2516 = uint((float(_2504.y) * floor(float(uint(cbSceneParam._m0[85u].y * _681) / _2505))) + floor(float(uint(cbSceneParam._m0[85u].x * _680) / _2505)));
        float _2526 = (log2(_2492 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2527 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        uint _2530 = uint(isnan(14.0) ? _2527 : (isnan(_2527) ? 14.0 : min(_2527, 14.0)));
        uvec4 _2535 = texelFetch(g_lightClusterGridBuffer, int(((_2530 << 2u) + (_2516 << 6u)) >> 2u));
        uint _2536 = _2535.x;
        uint _2537 = _2504.z;
        float _2637;
        float _2639;
        float _2641;
        float _2643;
        float _2645;
        float _2647;
        if (((((1u << ((_2537 >> 4u) & 15u)) + 4294967295u) & _2536) == 0u) || ((_2537 & 240u) == 0u))
        {
            _2637 = 0.0;
            _2639 = 0.0;
            _2641 = 0.0;
            _2643 = 0.0;
            _2645 = 0.0;
            _2647 = 0.0;
        }
        else
        {
            float _2638;
            float _2640;
            float _2642;
            float _2644;
            float _2646;
            float _2648;
            float _2790 = 0.0;
            float _2791 = 0.0;
            float _2792 = 0.0;
            float _2793 = 0.0;
            float _2794 = 0.0;
            float _2795 = 0.0;
            uint _2796 = 0u;
            uint _2805;
            bool _2806;
            for (;;)
            {
                _2805 = texelFetch(g_lightClassification, int((((_2530 << 5u) + (_2516 << 9u)) + (_2796 << 2u)) >> 2u)).x;
                _2806 = _2805 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2806)
                {
                    frontier_phi_66_pred = _2790;
                    frontier_phi_66_pred_1 = _2795;
                    frontier_phi_66_pred_2 = _2794;
                    frontier_phi_66_pred_3 = _2793;
                    frontier_phi_66_pred_4 = _2792;
                    frontier_phi_66_pred_5 = _2791;
                }
                else
                {
                    float _2935;
                    float _2936;
                    float _2937;
                    float _2938;
                    float _2939;
                    float _2940;
                    uint _2941;
                    _2935 = _2790;
                    _2936 = _2791;
                    _2937 = _2792;
                    _2938 = _2793;
                    _2939 = _2794;
                    _2940 = _2795;
                    _2941 = _2805;
                    float _2862;
                    float _2863;
                    float _2864;
                    float _2865;
                    float _2866;
                    float _2867;
                    for (;;)
                    {
                        uint _2945 = uint(findLSB(_2941)) + (_2796 << 5u);
                        uint _2942 = (_2941 + 4294967295u) & _2941;
                        uint _2947 = _2945 * 48u;
                        vec4 _2961 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2947)).x, texelFetch(g_PointLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2947 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2947 + 3u)).x));
                        uint _2967 = (_2945 * 48u) + 4u;
                        vec4 _2980 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2967)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 3u)).x));
                        uint _2986 = (_2945 * 48u) + 8u;
                        vec3 _2997 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2986)).x, texelFetch(g_PointLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2986 + 2u)).x));
                        float _3001 = _2961.x - _2490;
                        float _3002 = _2961.y - _2491;
                        float _3003 = _2961.z - _2492;
                        float _3004 = dot(vec3(_3001, _3002, _3003), vec3(_3001, _3002, _3003));
                        float _3007 = inversesqrt(_3004);
                        float _3008 = _3007 * _3001;
                        float _3009 = _3007 * _3002;
                        float _3010 = _3007 * _3003;
                        float _3011 = dot(vec3(_701, _704, _707), vec3(_3008, _3009, _3010));
                        float _3016 = 1.0 - (_3004 * _2961.w);
                        float _4406 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
                        float _3017 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
                        float _3018 = sqrt(_3004) * _2980.w;
                        float _3021 = 1.39999997615814208984375 / (_3018 + 1.39999997615814208984375);
                        float _3022 = _3021 * _3021;
                        float _3025 = ((1.0 - _3022) * _3011) + _3022;
                        float _3028 = _3018 * _3018;
                        float _3032 = ((isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0))) * _3017) / ((_3028 * 0.699999988079071044921875) + 1.0);
                        float _3036 = (-0.0) - _2490;
                        float _3037 = (-0.0) - _2491;
                        float _3038 = (-0.0) - _2492;
                        float _3042 = inversesqrt(dot(vec3(_3036, _3037, _3038), vec3(_3036, _3037, _3038)));
                        float _3043 = _3042 * _3036;
                        float _3044 = _3042 * _3037;
                        float _3045 = _3042 * _3038;
                        float _3053 = exp2(log2(1.0 / ((_3028 * 3.5) + 5.0)) * 0.25);
                        float _3054 = 1.0 - _776;
                        float _3061 = sqrt(1.0 - ((1.0 - (_3054 * _3054)) * (1.0 - (_3053 * _3053))));
                        float _3062 = _3061 * _3061;
                        float _3063 = _3062 * _3062;
                        float _3064 = _3043 + _3008;
                        float _3065 = _3044 + _3009;
                        float _3066 = _3045 + _3010;
                        float _3070 = inversesqrt(dot(vec3(_3064, _3065, _3066), vec3(_3064, _3065, _3066)));
                        float _3074 = dot(vec3(_701, _704, _707), vec3(_3043, _3044, _3045));
                        float _4422 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
                        float _3077 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
                        float _3078 = dot(vec3(_701, _704, _707), vec3(_3070 * _3064, _3070 * _3065, _3070 * _3066));
                        float _4433 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
                        float _3081 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
                        float _3085 = ((_3081 * _3081) * (_3063 + (-1.0))) + 1.0;
                        float _3086 = _3021 * _3062;
                        float _3087 = _3086 * _3086;
                        float _3090 = ((1.0 - _3087) * _3011) + _3087;
                        float _4444 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                        float _3091 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
                        float _3092 = 1.0 - _3062;
                        float _3102 = (0.5 / (((_3091 * ((_3077 * _3092) + _3062)) + 9.9999999392252902907785028219223e-09) + (((_3091 * _3092) + _3062) * _3077))) * _3091;
                        float _4455 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
                        float _3113 = (((_3063 * 3.1415927410125732421875) * (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0)))) / ((_3085 * _3085) * ((_3028 * 2.1991131305694580078125) + 3.141590118408203125))) * _3017;
                        _2865 = (_3032 * _2980.x) + _2938;
                        _2866 = (_3032 * _2980.y) + _2939;
                        _2867 = (_3032 * _2980.z) + _2940;
                        _2862 = (_3113 * _2997.x) + _2935;
                        _2863 = (_3113 * _2997.y) + _2936;
                        _2864 = (_3113 * _2997.z) + _2937;
                        if (_2942 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2935 = _2862;
                            _2936 = _2863;
                            _2937 = _2864;
                            _2938 = _2865;
                            _2939 = _2866;
                            _2940 = _2867;
                            _2941 = _2942;
                        }
                    }
                    frontier_phi_66_pred = _2862;
                    frontier_phi_66_pred_1 = _2867;
                    frontier_phi_66_pred_2 = _2866;
                    frontier_phi_66_pred_3 = _2865;
                    frontier_phi_66_pred_4 = _2864;
                    frontier_phi_66_pred_5 = _2863;
                }
                _2638 = frontier_phi_66_pred;
                _2648 = frontier_phi_66_pred_1;
                _2646 = frontier_phi_66_pred_2;
                _2644 = frontier_phi_66_pred_3;
                _2642 = frontier_phi_66_pred_4;
                _2640 = frontier_phi_66_pred_5;
                uint _2797 = _2796 + 1u;
                if (_2797 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2790 = _2638;
                    _2791 = _2640;
                    _2792 = _2642;
                    _2793 = _2644;
                    _2794 = _2646;
                    _2795 = _2648;
                    _2796 = _2797;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2637 = _2638;
            _2639 = _2640;
            _2641 = _2642;
            _2643 = _2644;
            _2645 = _2646;
            _2647 = _2648;
        }
        uvec4 _2651 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2652 = _2651.z;
        uint _2654 = (_2652 >> 8u) & 15u;
        float _2758;
        float _2760;
        float _2762;
        float _2764;
        float _2766;
        float _2768;
        if (((4294967295u << _2654) & _2536) == 0u)
        {
            _2758 = _2637;
            _2760 = _2639;
            _2762 = _2641;
            _2764 = _2643;
            _2766 = _2645;
            _2768 = _2647;
        }
        else
        {
            float _2783 = inversesqrt(dot(vec3(_2490, _2491, _2492), vec3(_2490, _2491, _2492)));
            float _2784 = _2783 * _2490;
            float _2785 = _2783 * _2491;
            float _2786 = _2783 * _2492;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2654 < ((_2652 >> 12u) & 15u))
            {
                float _2759;
                float _2761;
                float _2763;
                float _2765;
                float _2767;
                float _2769;
                float _2918 = _2637;
                float _2919 = _2639;
                float _2920 = _2641;
                float _2921 = _2643;
                float _2922 = _2645;
                float _2923 = _2647;
                uint _2924 = _2654;
                uint _2933;
                bool _2934;
                for (;;)
                {
                    _2933 = texelFetch(g_lightClassification, int((((_2530 << 5u) + (_2516 << 9u)) + (_2924 << 2u)) >> 2u)).x;
                    _2934 = _2933 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2934)
                    {
                        frontier_phi_77_pred = _2923;
                        frontier_phi_77_pred_1 = _2922;
                        frontier_phi_77_pred_2 = _2921;
                        frontier_phi_77_pred_3 = _2920;
                        frontier_phi_77_pred_4 = _2919;
                        frontier_phi_77_pred_5 = _2918;
                    }
                    else
                    {
                        float _3127;
                        float _3128;
                        float _3129;
                        float _3130;
                        float _3131;
                        float _3132;
                        float _3420;
                        float _3421;
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3425;
                        float _3140 = _2918;
                        float _3141 = _2919;
                        float _3142 = _2920;
                        float _3143 = _2921;
                        float _3144 = _2922;
                        float _3145 = _2923;
                        uint _3146 = _2933;
                        uint _3147;
                        vec4 _3172;
                        float _3173;
                        vec4 _3188;
                        vec3 _3200;
                        vec4 _3215;
                        vec4 _3230;
                        float _3276;
                        bool _3277;
                        for (;;)
                        {
                            uint _3157 = ((_2924 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3146));
                            _3147 = (_3146 + 4294967295u) & _3146;
                            uint _3159 = _3157 * 40u;
                            _3172 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3159)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 3u)).x));
                            _3173 = _3172.w;
                            uint _3175 = (_3157 * 40u) + 4u;
                            _3188 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3175)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 3u)).x));
                            uint _3190 = (_3157 * 40u) + 8u;
                            _3200 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3190)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 2u)).x));
                            uint _3202 = (_3157 * 40u) + 16u;
                            _3215 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3202)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 3u)).x));
                            uint _3217 = (_3157 * 40u) + 20u;
                            _3230 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3217)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 3u)).x));
                            uint _3232 = (_3157 * 40u) + 24u;
                            vec4 _3245 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3232)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 3u)).x));
                            uint _3251 = (_3157 * 40u) + 28u;
                            vec4 _3264 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3251)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 3u)).x));
                            _3276 = fma(_2492, _3264.z, fma(_2491, _3264.y, _3264.x * _2490)) + _3264.w;
                            _3277 = !((fma(_2492, _3245.z, fma(_2491, _3245.y, _3245.x * _2490)) + _3245.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3277)
                            {
                                float _3304 = _3172.x - _2490;
                                float _3305 = _3172.y - _2491;
                                float _3306 = _3172.z - _2492;
                                float _3307 = dot(vec3(_3304, _3305, _3306), vec3(_3304, _3305, _3306));
                                float _3310 = inversesqrt(_3307);
                                float _3311 = _3310 * _3304;
                                float _3312 = _3310 * _3305;
                                float _3313 = _3310 * _3306;
                                float _3317 = 1.0 - (_3307 / (_3173 * _3173));
                                float _4466 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                                float _3318 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
                                float _3322 = sqrt(_3307) * _3188.w;
                                float _3324 = 1.39999997615814208984375 / (_3322 + 1.39999997615814208984375);
                                float _3325 = _3324 * _3324;
                                float _3328 = ((1.0 - _3325) * dot(vec3(_3311, _3312, _3313), vec3(_701, _704, _707))) + _3325;
                                float _3331 = _3322 * _3322;
                                float _3335 = (fma(_2492, _3215.z, fma(_2491, _3215.y, _3215.x * _2490)) + _3215.w) / _3276;
                                float _3336 = (fma(_2492, _3230.z, fma(_2491, _3230.y, _3230.x * _2490)) + _3230.w) / _3276;
                                float _3340 = 1.0 - dot(vec2(_3335, _3336), vec2(_3335, _3336));
                                float _4482 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                                float _3341 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
                                float _3342 = _3341 * (((isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0))) * _3318) / ((_3331 * 0.699999988079071044921875) + 1.0));
                                float _3354 = exp2(log2(1.0 / ((_3331 * 3.5) + 5.0)) * 0.25);
                                float _3355 = 1.0 - _776;
                                float _3362 = sqrt(1.0 - ((1.0 - (_3355 * _3355)) * (1.0 - (_3354 * _3354))));
                                float _3363 = _3362 * _3362;
                                float _3364 = _3363 * _3363;
                                float _3365 = _3311 - _2784;
                                float _3366 = _3312 - _2785;
                                float _3367 = _3313 - _2786;
                                float _3371 = inversesqrt(dot(vec3(_3365, _3366, _3367), vec3(_3365, _3366, _3367)));
                                float _3375 = dot(vec3(_701, _704, _707), vec3((-0.0) - _2784, (-0.0) - _2785, (-0.0) - _2786));
                                float _4493 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                                float _3378 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
                                float _3379 = dot(vec3(_701, _704, _707), vec3(_3371 * _3365, _3371 * _3366, _3371 * _3367));
                                float _4504 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                                float _3382 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
                                float _3386 = ((_3382 * _3382) * (_3364 + (-1.0))) + 1.0;
                                float _3387 = _3324 * _3363;
                                float _3388 = _3387 * _3387;
                                float _3394 = ((1.0 - _3388) * dot(vec3(_701, _704, _707), vec3(_3311, _3312, _3313))) + _3388;
                                float _4515 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                                float _3395 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
                                float _3396 = 1.0 - _3363;
                                float _3406 = (0.5 / (((_3395 * ((_3378 * _3396) + _3363)) + 9.9999999392252902907785028219223e-09) + (((_3395 * _3396) + _3363) * _3378))) * _3395;
                                float _4526 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                                float _3416 = (_3341 * _3318) * (((_3364 * 3.1415927410125732421875) * (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0)))) / ((_3386 * _3386) * ((_3331 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3342 * _3188.y;
                                frontier_phi_83_pred_1 = _3342 * _3188.x;
                                frontier_phi_83_pred_2 = _3416 * _3200.z;
                                frontier_phi_83_pred_3 = _3416 * _3200.y;
                                frontier_phi_83_pred_4 = _3416 * _3200.x;
                                frontier_phi_83_pred_5 = _3342 * _3188.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3424 = frontier_phi_83_pred;
                            _3423 = frontier_phi_83_pred_1;
                            _3422 = frontier_phi_83_pred_2;
                            _3421 = frontier_phi_83_pred_3;
                            _3420 = frontier_phi_83_pred_4;
                            _3425 = frontier_phi_83_pred_5;
                            _3130 = _3423 + _3143;
                            _3131 = _3424 + _3144;
                            _3132 = _3425 + _3145;
                            _3127 = _3420 + _3140;
                            _3128 = _3421 + _3141;
                            _3129 = _3422 + _3142;
                            if (_3147 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3140 = _3127;
                                _3141 = _3128;
                                _3142 = _3129;
                                _3143 = _3130;
                                _3144 = _3131;
                                _3145 = _3132;
                                _3146 = _3147;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3132;
                        frontier_phi_77_pred_1 = _3131;
                        frontier_phi_77_pred_2 = _3130;
                        frontier_phi_77_pred_3 = _3129;
                        frontier_phi_77_pred_4 = _3128;
                        frontier_phi_77_pred_5 = _3127;
                    }
                    _2769 = frontier_phi_77_pred;
                    _2767 = frontier_phi_77_pred_1;
                    _2765 = frontier_phi_77_pred_2;
                    _2763 = frontier_phi_77_pred_3;
                    _2761 = frontier_phi_77_pred_4;
                    _2759 = frontier_phi_77_pred_5;
                    uint _2925 = _2924 + 1u;
                    if (_2925 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2918 = _2759;
                        _2919 = _2761;
                        _2920 = _2763;
                        _2921 = _2765;
                        _2922 = _2767;
                        _2923 = _2769;
                        _2924 = _2925;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2763;
                frontier_phi_58_59_ladder_1 = _2769;
                frontier_phi_58_59_ladder_2 = _2767;
                frontier_phi_58_59_ladder_3 = _2765;
                frontier_phi_58_59_ladder_4 = _2761;
                frontier_phi_58_59_ladder_5 = _2759;
            }
            else
            {
                frontier_phi_58_59_ladder = _2641;
                frontier_phi_58_59_ladder_1 = _2647;
                frontier_phi_58_59_ladder_2 = _2645;
                frontier_phi_58_59_ladder_3 = _2643;
                frontier_phi_58_59_ladder_4 = _2639;
                frontier_phi_58_59_ladder_5 = _2637;
            }
            _2758 = frontier_phi_58_59_ladder_5;
            _2760 = frontier_phi_58_59_ladder_4;
            _2762 = frontier_phi_58_59_ladder;
            _2764 = frontier_phi_58_59_ladder_3;
            _2766 = frontier_phi_58_59_ladder_2;
            _2768 = frontier_phi_58_59_ladder_1;
        }
        float _2773 = isnan(1.0) ? _760 : (isnan(_760) ? 1.0 : min(_760, 1.0));
        _2549 = (_2773 * _2764) + _1982;
        _2551 = (_2773 * _2766) + _1984;
        _2553 = (_2773 * _2768) + _1986;
        _2555 = ((_2758 * _744) * _2773) + _2330;
        _2557 = ((_2760 * _746) * _2773) + _2332;
        _2559 = ((_2762 * _747) * _2773) + _2334;
    }
    else
    {
        _2549 = _1982;
        _2551 = _1984;
        _2553 = _1986;
        _2555 = _2330;
        _2557 = _2332;
        _2559 = _2334;
    }
    float _4542 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _4553 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _4564 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _2576 = ((isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))) * (_2549 + ((isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))) * _760))) + ((_2555 + ((isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))) * _1600)) * cbPerFrame._m0[3u].x);
    float _2577 = ((isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * (_2551 + ((isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0))) * _760))) + ((_2557 + ((isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))) * _1600)) * cbPerFrame._m0[3u].x);
    float _2578 = ((isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * (_2553 + ((isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0))) * _760))) + ((_2559 + ((isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))) * _1600)) * cbPerFrame._m0[3u].x);
    uint _2579 = _258 + 6u;
    float _2587 = _680 / cbSceneParam._m0[86u].x;
    float _2588 = _681 / cbSceneParam._m0[86u].y;
    vec4 _2602 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2587, _2588, (log2((isnan(cbSceneParam._m0[77u].w) ? _601 : (isnan(_601) ? cbSceneParam._m0[77u].w : min(_601, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2604 = _2602.x;
    float _2605 = _2602.y;
    float _2606 = _2602.z;
    float _2607 = _2602.w;
    float _2700;
    float _2702;
    float _2704;
    float _2706;
    if (_601 > cbSceneParam._m0[78u].w)
    {
        float _2662 = isnan(_601) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _601 : min(cbSceneParam._m0[80u].w, _601));
        float _2663 = _2662 / _601;
        float _2674 = _2663 * _652;
        float _2675 = _653 * _2663;
        float _2676 = (-0.0) - _2675;
        float _2678 = _2663 * _654;
        float _2680 = (cbSceneParam._m0[77u].w * _2676) / _2662;
        float _2681 = _2680 + cbSceneParam._m0[79u].w;
        float _2682 = cbSceneParam._m0[79u].w - _2675;
        float _2688 = sqrt(((_2674 * _2674) + (_2675 * _2675)) + (_2678 * _2678));
        float _2691 = (1.0 - (cbSceneParam._m0[77u].w / _2662)) * _2688;
        float _2696 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2698 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2875;
        if (abs((_2676 - _2680) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2875 = ((((_2681 > 0.0) ? exp2(_2696 * _2681) : (2.0 - exp2(_2698 * _2681))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2691;
        }
        else
        {
            float _2819 = 1.0 / cbSceneParam._m0[80u].x;
            float _2820 = isnan(_2682) ? _2681 : (isnan(_2681) ? _2682 : max(_2681, _2682));
            float _2821 = isnan(_2682) ? _2681 : (isnan(_2681) ? _2682 : min(_2681, _2682));
            float _2830 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : min(_2820, 0.0));
            float _2831 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : min(_2821, 0.0));
            _2875 = ((abs(_2688 / _2676) * cbSceneParam._m0[80u].y) * ((((_2830 - _2831) * 2.0) - ((exp2(_2696 * (isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0)))) - exp2(_2696 * (isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0))))) * _2819)) - ((exp2(_2698 * _2830) - exp2(_2698 * _2831)) * _2819))) + (_2691 * cbSceneParam._m0[80u].z);
        }
        vec4 _2877 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2587, _2588, 1.0), 0.0);
        float _2886 = exp2((_2875 * (-1.44269502162933349609375)) * (1.0 - _2877.w));
        float _2887 = log2(_2886);
        float _2903 = log2(_2607);
        _2700 = (exp2(_2903 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2887 * cbSceneParam._m0[78u].x)) * _2877.x) / cbSceneParam._m0[78u].x)) + _2604;
        _2702 = (exp2(_2903 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2887 * cbSceneParam._m0[78u].y)) * _2877.y) / cbSceneParam._m0[78u].y)) + _2605;
        _2704 = (exp2(_2903 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2887 * cbSceneParam._m0[78u].z)) * _2877.z) / cbSceneParam._m0[78u].z)) + _2606;
        _2706 = _2886 * _2607;
    }
    else
    {
        _2700 = _2604;
        _2702 = _2605;
        _2704 = _2606;
        _2706 = _2607;
    }
    bool _2913;
    vec4 _2716;
    vec4 _2738;
    float _2740;
    float _2744;
    float _2745;
    float _2746;
    float _2747;
    bool _2757;
    for (;;)
    {
        _2716 = cbMatDynParam._m0[0u];
        float _2718 = roundEven(_2716.y);
        bool _2719 = _2718 == 3.0;
        float _2720 = log2(_2706);
        float _2727 = exp2(_2720 * cbSceneParam._m0[78u].x) * _2576;
        float _2728 = exp2(_2720 * cbSceneParam._m0[78u].y) * _2577;
        float _2729 = exp2(_2720 * cbSceneParam._m0[78u].z) * _2578;
        float _2736 = _668 + (-0.5);
        _2738 = cbMtdParam._m0[1u];
        _2740 = _2738.y * _2736;
        float _2743 = (_2718 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2744 = _2743 * (_2719 ? _2727 : (_2727 + (cbSceneParam._m0[72u].w * _2700)));
        _2745 = _2743 * (_2719 ? _2728 : (_2728 + (cbSceneParam._m0[72u].w * _2702)));
        _2746 = _2743 * (_2719 ? _2729 : (_2729 + (cbSceneParam._m0[72u].w * _2704)));
        _2747 = _2736 * 0.999000012874603271484375;
        _2757 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2757)
        {
            if ((cbInstanceData._m0[_258 + 7u].x + _2747) < 0.5)
            {
                _2913 = true;
                break;
            }
        }
        uint _2854 = _720 + uint(_2716.w);
        if ((cbInstanceData._m0[_2854].w < 1.0) && ((cbInstanceData._m0[_2854].w + _2747) < 0.5))
        {
            _2913 = true;
            break;
        }
        if ((_2740 + 1.0) < _2738.x)
        {
            _2913 = true;
            break;
        }
        _2913 = false;
        break;
    }
    float _3118;
    if (_2913)
    {
        discard_state = true;
        _3118 = 0.0;
    }
    else
    {
        _3118 = cbInstanceData._m0[_2579].w;
    }
    SV_Target.x = _2744;
    SV_Target.y = _2745;
    SV_Target.z = _2746;
    SV_Target.w = _3118;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2579].w;
    discard_exit();
}


