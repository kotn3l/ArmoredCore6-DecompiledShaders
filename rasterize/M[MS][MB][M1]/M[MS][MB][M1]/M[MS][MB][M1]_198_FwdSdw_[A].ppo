#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1401;
float _4062;
float _4063;
float _4064;
float _4065;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _258 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _258 + 1u;
    uint _268 = _258 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _299.x * cbMtdParam._m0[11u].x;
    float _306 = _299.y * cbMtdParam._m0[11u].y;
    float _307 = _299.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _365 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _367 = _365.x;
    float _379 = dot(vec4(_367, _365.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _396 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_367 - _379) * cbMtdParam._m0[24u].y) + _379) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4074 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _397 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _404 = (_397 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305;
    float _405 = (_397 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306;
    float _406 = (_397 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307;
    vec4 _423 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _278) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _279) + cbTextureTilingScale._m0[3u].w));
    vec4 _443 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _445 = _443.x;
    float _455 = dot(vec4(_445, _443.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _469 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_445 - _455) * cbMtdParam._m0[24u].y) + _455) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4085 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _470 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _477 = (_470 * ((_423.x * cbMtdParam._m0[13u].x) - _404)) + _404;
    float _478 = (_470 * ((_423.y * cbMtdParam._m0[13u].y) - _405)) + _405;
    float _479 = (_470 * ((_423.z * cbMtdParam._m0[13u].z) - _406)) + _406;
    vec4 _498 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _278) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _279) + cbTextureTilingScale._m0[14u].w));
    vec4 _517 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _278) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _279) + cbTextureTilingScale._m0[20u].w));
    vec4 _540 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _557 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _559 = _557.x;
    float _560 = _557.y;
    float _561 = _557.z;
    float _568 = ((_540.x - _559) * _397) + _559;
    float _569 = ((_540.y - _560) * _397) + _560;
    float _570 = ((_540.z - _561) * _397) + _561;
    vec4 _582 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _278) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _279) + cbTextureTilingScale._m0[2u].w));
    float _595 = ((_582.z - _570) * _470) + _570;
    float _598 = ((((_582.x - _568) * _470) + _568) * 2.0) + (-1.0);
    float _599 = ((((_582.y - _569) * _470) + _569) * 2.0) + (-1.0);
    float _600 = dot(vec2(_598, _599), vec2(_598, _599));
    float _4096 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _605 = sqrt(1.0 - (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))));
    vec4 _619 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _644 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _646 = _644.x;
    float _647 = 1.0 - _646;
    float _660 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_646 - _647) * cbMtdParam._m0[24u].z) + _647) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4107 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _661 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _668 = (_661 * ((_498.x * cbMtdParam._m0[18u].x) - _477)) + _477;
    float _669 = (_661 * ((_498.y * cbMtdParam._m0[18u].y) - _478)) + _478;
    float _670 = (_661 * ((_498.z * cbMtdParam._m0[18u].z) - _479)) + _479;
    vec4 _682 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _696 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _698 = _696.x;
    float _716 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _278) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _279) + cbTextureTilingScale._m0[9u].w)).x - _698) * _397) + _698;
    float _733 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _278) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _279) + cbTextureTilingScale._m0[21u].w)).x - _716) * _470) + _716;
    float _737 = ((_682.x - _733) * cbMtdParam._m0[19u].z) + _733;
    float _739 = _737 - (_737 * _661);
    float _744 = (((_517.z - _595) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _595;
    float _748 = ((_619.z - _744) * cbMtdParam._m0[19u].w) + _744;
    vec4 _761 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _768 = (_761.x * 2.0) + (-1.0);
    float _769 = (_761.y * 2.0) + (-1.0);
    float _770 = dot(vec2(_768, _769), vec2(_768, _769));
    float _4118 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _778 = (_661 * (_761.z - _748)) + _748;
    float _787 = (_598 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_517.x * 2.0) + (-1.0)))) + (((_619.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _788 = (_599 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_517.y * 2.0) + (-1.0)))) + (((_619.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _800 = (((_768 - _787) + (cbMtdParam._m0[21u].x * _787)) * _661) + _787;
    float _801 = (((_769 - _788) + (cbMtdParam._m0[21u].x * _788)) * _661) + _788;
    float _802 = (_661 * (sqrt(1.0 - (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0)))) - _605)) + _605;
    float _807 = cbMtdParam._m0[22u].x + _619.w;
    float _810 = fma(_802, _245 * NORMAL.x, fma(_801, _252 * TANGENT.x, (_238 * _230) * _800));
    float _813 = fma(_802, _245 * NORMAL.y, fma(_801, _252 * TANGENT.y, (_238 * _231) * _800));
    float _816 = fma(_802, _245 * NORMAL.z, fma(_801, _252 * TANGENT.z, (_238 * _232) * _800));
    float _820 = inversesqrt(dot(vec3(_810, _813, _816), vec3(_810, _813, _816)));
    float _821 = _820 * _810;
    float _822 = _820 * _813;
    float _823 = _820 * _816;
    float _4129 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _824 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _4140 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _4151 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _4162 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _4173 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _4184 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _829 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    float _843 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _884 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _894 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _884);
    float _895 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _884);
    float _896 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _884);
    float _900 = inversesqrt(dot(vec3(_894, _895, _896), vec3(_894, _895, _896)));
    float _901 = _894 * _900;
    float _902 = _895 * _900;
    float _903 = _896 * _900;
    vec4 _908 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _910 = _908.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1082 = sqrt(((_894 * _894) + (_895 * _895)) + (_896 * _896));
        float _1088 = (cbMatDynParam._m0[5u].x * _1082) + cbMatDynParam._m0[5u].y;
        float _4195 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1093 = (cbMatDynParam._m0[5u].z * _1082) + cbMatDynParam._m0[5u].w;
        float _4206 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) - _1089)) + _1089) < ((_910 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _921 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _922 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _940 = fma(_823, cbSceneParam._m0[5u].z, fma(_822, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _821));
    float _943 = fma(_823, cbSceneParam._m0[6u].z, fma(_822, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _821));
    float _946 = fma(_823, cbSceneParam._m0[7u].z, fma(_822, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _821));
    uint _959 = _258 + 9u;
    uint _960 = _959 + uint(cbMatDynParam._m0[0u].w);
    float _966 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0)))) * cbInstanceData._m0[_960].x;
    float _967 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0)))) * cbInstanceData._m0[_960].y;
    float _968 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) * cbInstanceData._m0[_960].z;
    float _4217 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _969 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
    float _4228 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _970 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
    float _4239 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _971 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
    float _972 = 1.0 - _829;
    float _973 = _969 * _972;
    float _974 = _970 * _972;
    float _975 = _971 * _972;
    float _980 = (_969 + (-0.039999999105930328369140625)) * _829;
    float _981 = (_970 + (-0.039999999105930328369140625)) * _829;
    float _982 = (_971 + (-0.039999999105930328369140625)) * _829;
    float _983 = _980 + 0.039999999105930328369140625;
    float _985 = _981 + 0.039999999105930328369140625;
    float _986 = _982 + 0.039999999105930328369140625;
    vec4 _995 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _921, cbSceneParam._m0[86u].y * _922));
    float _999 = ((isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * TEXCOORD_5.w) * _995.x;
    float _1000 = dot(vec3(_821, _822, _823), vec3(_901, _902, _903));
    float _1003 = _1000 * 2.0;
    float _1007 = (_1003 * _821) - _901;
    float _1008 = (_1003 * _822) - _902;
    float _1009 = (_1003 * _823) - _903;
    float _1013 = abs(dot(vec3(_901, _902, _903), vec3(_821, _822, _823)));
    float _4250 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _1015 = sqrt(_824);
    float _1028 = exp2((_1015 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1015 * 3.0));
    float _1034 = (1.0 - _1028) * ((_1015 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1035 = _1028 * _1015;
    float _1063 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1067 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1071 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1400;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1125 = fma(_1071, cbModelParam._m0[26u].z, fma(_1067, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1063));
        float _1129 = fma(_1071, cbModelParam._m0[27u].z, fma(_1067, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1063));
        float _1133 = fma(_1071, cbModelParam._m0[28u].z, fma(_1067, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1063));
        float _1158 = _1063 + _821;
        float _1159 = _1067 + _822;
        float _1160 = _1071 + _823;
        float _1170 = fma(_1160, cbModelParam._m0[26u].z, fma(_1159, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1158)) - _1125;
        float _1171 = fma(_1160, cbModelParam._m0[27u].z, fma(_1159, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1158)) - _1129;
        float _1172 = fma(_1160, cbModelParam._m0[28u].z, fma(_1159, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1158)) - _1133;
        float _1176 = inversesqrt(dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172)));
        float _1189 = ((_1176 * _1170) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1125 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1190 = ((_1176 * _1171) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1129 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1191 = ((_1176 * _1172) / cbModelParam._m0[34u].z) + ((((((_1133 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        float _1228 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1194.x + (-0.5));
        float _1230 = _1228 * (_1194.y + (-0.5));
        float _1231 = _1228 * (_1194.z + (-0.5));
        float _1238 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1201.x + (-0.5));
        float _1240 = _1238 * (_1201.y + (-0.5));
        float _1241 = _1238 * (_1201.z + (-0.5));
        float _1248 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1208.x + (-0.5));
        float _1250 = _1248 * (_1208.y + (-0.5));
        float _1251 = _1248 * (_1208.z + (-0.5));
        float _1258 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1215.x + (-0.5));
        float _1260 = _1258 * (_1215.y + (-0.5));
        float _1261 = _1258 * (_1215.z + (-0.5));
        float _1262 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1263 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1264 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1265 = _1229 * 0.5;
        float _1266 = _1239 * 0.5;
        float _1267 = _1249 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1282 = (dot(vec3(_821, _822, _823), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _4276 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1292 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1262 + 9.9999997473787516355514526367188e-06);
        float _4287 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _4298 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_1294 + 1.0))) + _1299) * _1262;
        float _1309 = _1230 * 0.5;
        float _1310 = _1240 * 0.5;
        float _1311 = _1250 * 0.5;
        float _1312 = dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311));
        float _1317 = (_1312 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1312);
        float _1325 = (dot(vec3(_821, _822, _823), vec3(_1317 * _1309, _1317 * _1310, _1317 * _1311)) + 1.0) * 0.5;
        float _4309 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1334 = sqrt(((_1310 * _1310) + (_1309 * _1309)) + (_1311 * _1311)) / (_1263 + 9.9999997473787516355514526367188e-06);
        float _4320 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1336 = _1335 * 2.0;
        float _1340 = (1.0 - _1335) / (_1335 + 1.0);
        float _4331 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1350 = ((((1.0 - _1341) * (_1336 + 2.0)) * exp2(log2(isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_1336 + 1.0))) + _1341) * _1263;
        float _1351 = _1231 * 0.5;
        float _1352 = _1241 * 0.5;
        float _1353 = _1251 * 0.5;
        float _1354 = dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353));
        float _1359 = (_1354 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1354);
        float _1367 = (dot(vec3(_821, _822, _823), vec3(_1359 * _1351, _1359 * _1352, _1359 * _1353)) + 1.0) * 0.5;
        float _4342 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1376 = sqrt(((_1352 * _1352) + (_1351 * _1351)) + (_1353 * _1353)) / (_1264 + 9.9999997473787516355514526367188e-06);
        float _4353 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _1378 = _1377 * 2.0;
        float _1382 = (1.0 - _1377) / (_1377 + 1.0);
        float _4364 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _1392 = ((((1.0 - _1383) * (_1378 + 2.0)) * exp2(log2(isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_1378 + 1.0))) + _1383) * _1264;
        _1400 = _1231;
        _1402 = _1230;
        _1403 = _1229;
        _1404 = _1241;
        _1405 = _1240;
        _1406 = _1239;
        _1407 = _1251;
        _1408 = _1250;
        _1409 = _1249;
        _1410 = _1264;
        _1411 = _1263;
        _1412 = _1262;
        _1413 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
        _1414 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)));
        _1415 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)));
    }
    else
    {
        _1400 = _1401;
        _1402 = _1401;
        _1403 = _1401;
        _1404 = _1401;
        _1405 = _1401;
        _1406 = _1401;
        _1407 = _1401;
        _1408 = _1401;
        _1409 = _1401;
        _1410 = _1401;
        _1411 = _1401;
        _1412 = _1401;
        _1413 = 0.0;
        _1414 = 0.0;
        _1415 = 0.0;
    }
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1442 = fma(_1071, cbModelParam._m0[30u].z, fma(_1067, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1063));
        float _1446 = fma(_1071, cbModelParam._m0[31u].z, fma(_1067, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1063));
        float _1450 = fma(_1071, cbModelParam._m0[32u].z, fma(_1067, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1063));
        float _1473 = _1063 + _821;
        float _1474 = _1067 + _822;
        float _1475 = _1071 + _823;
        float _1485 = fma(_1475, cbModelParam._m0[30u].z, fma(_1474, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1473)) - _1442;
        float _1486 = fma(_1475, cbModelParam._m0[31u].z, fma(_1474, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1473)) - _1446;
        float _1487 = fma(_1475, cbModelParam._m0[32u].z, fma(_1474, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1473)) - _1450;
        float _1491 = inversesqrt(dot(vec3(_1485, _1486, _1487), vec3(_1485, _1486, _1487)));
        float _1504 = ((_1491 * _1485) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1442 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1505 = ((_1491 * _1486) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1446 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1506 = ((_1491 * _1487) / cbModelParam._m0[35u].z) + ((((((_1450 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1508 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1504, _1505, _1506), 0.0);
        vec4 _1515 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1504, _1505, _1506), 0.0);
        vec4 _1522 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1504, _1505, _1506), 0.0);
        vec4 _1529 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1504, _1505, _1506), 0.0);
        float _1541 = exp2((_1508.w + (-0.5)) * 20.0) * 2.0;
        float _1542 = _1541 * (_1508.x + (-0.5));
        float _1543 = _1541 * (_1508.y + (-0.5));
        float _1544 = _1541 * (_1508.z + (-0.5));
        float _1551 = exp2((_1515.w + (-0.5)) * 20.0) * 2.0;
        float _1552 = _1551 * (_1515.x + (-0.5));
        float _1553 = _1551 * (_1515.y + (-0.5));
        float _1554 = _1551 * (_1515.z + (-0.5));
        float _1561 = exp2((_1522.w + (-0.5)) * 20.0) * 2.0;
        float _1562 = _1561 * (_1522.x + (-0.5));
        float _1563 = _1561 * (_1522.y + (-0.5));
        float _1564 = _1561 * (_1522.z + (-0.5));
        float _1571 = exp2((_1529.w + (-0.5)) * 20.0) * 2.0;
        float _1572 = _1571 * (_1529.x + (-0.5));
        float _1573 = _1571 * (_1529.y + (-0.5));
        float _1574 = _1571 * (_1529.z + (-0.5));
        float _1575 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1576 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1577 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1578 = _1542 * 0.5;
        float _1579 = _1552 * 0.5;
        float _1580 = _1562 * 0.5;
        float _1581 = dot(vec3(_1578, _1579, _1580), vec3(_1578, _1579, _1580));
        float _1586 = (_1581 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1581);
        float _1594 = (dot(vec3(_821, _822, _823), vec3(_1586 * _1578, _1586 * _1579, _1586 * _1580)) + 1.0) * 0.5;
        float _4405 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1603 = sqrt(((_1579 * _1579) + (_1578 * _1578)) + (_1580 * _1580)) / (_1575 + 9.9999997473787516355514526367188e-06);
        float _4416 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _1605 = _1604 * 2.0;
        float _1609 = (1.0 - _1604) / (_1604 + 1.0);
        float _4427 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _1619 = ((((1.0 - _1610) * (_1605 + 2.0)) * exp2(log2(isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * (_1605 + 1.0))) + _1610) * _1575;
        float _1620 = _1543 * 0.5;
        float _1621 = _1553 * 0.5;
        float _1622 = _1563 * 0.5;
        float _1623 = dot(vec3(_1620, _1621, _1622), vec3(_1620, _1621, _1622));
        float _1628 = (_1623 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1623);
        float _1636 = (dot(vec3(_821, _822, _823), vec3(_1628 * _1620, _1628 * _1621, _1628 * _1622)) + 1.0) * 0.5;
        float _4438 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1645 = sqrt(((_1621 * _1621) + (_1620 * _1620)) + (_1622 * _1622)) / (_1576 + 9.9999997473787516355514526367188e-06);
        float _4449 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1646 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _1647 = _1646 * 2.0;
        float _1651 = (1.0 - _1646) / (_1646 + 1.0);
        float _4460 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _1661 = ((((1.0 - _1652) * (_1647 + 2.0)) * exp2(log2(isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_1647 + 1.0))) + _1652) * _1576;
        float _1662 = _1544 * 0.5;
        float _1663 = _1554 * 0.5;
        float _1664 = _1564 * 0.5;
        float _1665 = dot(vec3(_1662, _1663, _1664), vec3(_1662, _1663, _1664));
        float _1670 = (_1665 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1665);
        float _1678 = (dot(vec3(_821, _822, _823), vec3(_1670 * _1662, _1670 * _1663, _1670 * _1664)) + 1.0) * 0.5;
        float _4471 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1687 = sqrt(((_1663 * _1663) + (_1662 * _1662)) + (_1664 * _1664)) / (_1577 + 9.9999997473787516355514526367188e-06);
        float _4482 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _1689 = _1688 * 2.0;
        float _1693 = (1.0 - _1688) / (_1688 + 1.0);
        float _4493 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1694 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _1703 = ((((1.0 - _1694) * (_1689 + 2.0)) * exp2(log2(isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_1689 + 1.0))) + _1694) * _1577;
        _1711 = _1544;
        _1712 = _1543;
        _1713 = _1542;
        _1714 = _1554;
        _1715 = _1553;
        _1716 = _1552;
        _1717 = _1564;
        _1718 = _1563;
        _1719 = _1562;
        _1720 = _1577;
        _1721 = _1576;
        _1722 = _1575;
        _1723 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)));
        _1724 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)));
        _1725 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)));
    }
    else
    {
        _1711 = _1401;
        _1712 = _1401;
        _1713 = _1401;
        _1714 = _1401;
        _1715 = _1401;
        _1716 = _1401;
        _1717 = _1401;
        _1718 = _1401;
        _1719 = _1401;
        _1720 = _1401;
        _1721 = _1401;
        _1722 = _1401;
        _1723 = 0.0;
        _1724 = 0.0;
        _1725 = 0.0;
    }
    float _1735 = (cbModelParam._m0[1u].x * (_1723 - _1413)) + _1413;
    float _1736 = (cbModelParam._m0[1u].x * (_1724 - _1414)) + _1414;
    float _1737 = (cbModelParam._m0[1u].x * (_1725 - _1415)) + _1415;
    float _1758 = fma(_1737, cbSceneParam._m0[89u].z, fma(_1736, cbSceneParam._m0[89u].y, _1735 * cbSceneParam._m0[89u].x));
    float _1761 = fma(_1737, cbSceneParam._m0[90u].z, fma(_1736, cbSceneParam._m0[90u].y, _1735 * cbSceneParam._m0[90u].x));
    float _1764 = fma(_1737, cbSceneParam._m0[91u].z, fma(_1736, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1735));
    float _1779 = _1007 * 0.5;
    float _1780 = _1008 * 0.5;
    float _1781 = _1009 * 0.5;
    float _1782 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1713, _1716, _1719, _1722));
    float _1785 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1712, _1715, _1718, _1721));
    float _1788 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1711, _1714, _1717, _1720));
    float _1822;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1795 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1400, _1404, _1407, _1410));
        float _1799 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1402, _1405, _1408, _1411));
        float _1803 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1403, _1406, _1409, _1412));
        float _1810 = dot(vec4(cbModelParam._m0[39u]), vec4(_1779, _1780, _1781, 1.0));
        _1822 = dot(vec3(isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0)), isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0)), isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1810) ? 0.0 : (isnan(0.0) ? _1810 : max(0.0, _1810))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1822 = 1.0;
    }
    float _1833;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1824 = dot(vec4(cbModelParam._m0[40u]), vec4(_1779, _1780, _1781, 1.0));
        _1833 = dot(vec3(isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0)), isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0)), isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1824) ? 0.0 : (isnan(0.0) ? _1824 : max(0.0, _1824))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1833 = 1.0;
    }
    float _1837 = (_1833 * cbModelParam._m0[1u].x) + (_1822 * (1.0 - cbModelParam._m0[1u].x));
    float _1847 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _824);
    float _1848 = isnan(_1847) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1847 : min(cbModelParam._m0[25u].z, _1847));
    float _1928;
    float _1930;
    float _1932;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1895 = fma(_1071, cbModelParam._m0[13u].z, fma(_1067, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1063)) + cbModelParam._m0[13u].w;
        float _1899 = fma(_1071, cbModelParam._m0[14u].z, fma(_1067, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1063)) + cbModelParam._m0[14u].w;
        float _1903 = fma(_1071, cbModelParam._m0[15u].z, fma(_1067, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1063)) + cbModelParam._m0[15u].w;
        float _1906 = fma(_1009, cbModelParam._m0[13u].z, fma(_1008, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1007));
        float _1909 = fma(_1009, cbModelParam._m0[14u].z, fma(_1008, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1007));
        float _1912 = fma(_1009, cbModelParam._m0[15u].z, fma(_1008, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1007));
        float _1940;
        if (_1906 > 0.0)
        {
            _1940 = abs((1.0 - _1895) / _1906);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1906 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1895 + 1.0) / _1906);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1940 = frontier_phi_17_15_ladder;
        }
        float _2111;
        if (_1909 > 0.0)
        {
            _2111 = abs((1.0 - _1899) / _1909);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1909 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1899 + 1.0) / _1909);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2111 = frontier_phi_26_22_ladder;
        }
        float _2406;
        if (_1912 > 0.0)
        {
            _2406 = abs((1.0 - _1903) / _1912);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1912 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1903 + 1.0) / _1912);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2406 = frontier_phi_38_33_ladder;
        }
        float _2408 = isnan(_2111) ? _1940 : (isnan(_1940) ? _2111 : min(_1940, _2111));
        float _2409 = isnan(_2406) ? _2408 : (isnan(_2408) ? _2406 : min(_2408, _2406));
        float _2413 = (_2409 * _1906) + _1895;
        float _2414 = (_2409 * _1909) + _1899;
        float _2415 = (_2409 * _1912) + _1903;
        float _2416 = _2409 * 9.9999997473787516355514526367188e-05;
        float _2418 = (-1.0) - _2416;
        float _2420 = _2416 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2415 > _2420) || ((_2415 < _2418) || ((_2414 > _2420) || ((_2414 < _2418) || ((_2413 < _2418) || (_2413 > _2420))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2560 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2415, cbModelParam._m0[9u].z, fma(_2414, cbModelParam._m0[9u].y, _2413 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2415, cbModelParam._m0[10u].z, fma(_2414, cbModelParam._m0[10u].y, _2413 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2415, cbModelParam._m0[11u].z, fma(_2414, cbModelParam._m0[11u].y, _2413 * cbModelParam._m0[11u].x))), _1848);
            frontier_phi_16_38_ladder = _2560.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2560.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2560.x * cbModelParam._m0[1u].y;
        }
        _1928 = frontier_phi_16_38_ladder_2;
        _1930 = frontier_phi_16_38_ladder_1;
        _1932 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1916 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1007, _1008, _1009), _1848);
        _1928 = _1916.x * cbModelParam._m0[1u].y;
        _1930 = _1916.y * cbModelParam._m0[1u].y;
        _1932 = _1916.z * cbModelParam._m0[1u].y;
    }
    float _1936 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _824);
    float _1937 = isnan(_1936) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1936 : min(cbModelParam._m0[25u].w, _1936));
    float _2026;
    float _2028;
    float _2030;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1990 = fma(_1071, cbModelParam._m0[21u].z, fma(_1067, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1063)) + cbModelParam._m0[21u].w;
        float _1994 = fma(_1071, cbModelParam._m0[22u].z, fma(_1067, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1063)) + cbModelParam._m0[22u].w;
        float _1998 = fma(_1071, cbModelParam._m0[23u].z, fma(_1067, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1063)) + cbModelParam._m0[23u].w;
        float _2001 = fma(_1009, cbModelParam._m0[21u].z, fma(_1008, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1007));
        float _2004 = fma(_1009, cbModelParam._m0[22u].z, fma(_1008, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1007));
        float _2007 = fma(_1009, cbModelParam._m0[23u].z, fma(_1008, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1007));
        float _2116;
        if (_2001 > 0.0)
        {
            _2116 = abs((1.0 - _1990) / _2001);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2001 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1990 + 1.0) / _2001);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2116 = frontier_phi_28_24_ladder;
        }
        float _2433;
        if (_2004 > 0.0)
        {
            _2433 = abs((1.0 - _1994) / _2004);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2004 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1994 + 1.0) / _2004);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2433 = frontier_phi_40_35_ladder;
        }
        float _2771;
        if (_2007 > 0.0)
        {
            _2771 = abs((1.0 - _1998) / _2007);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2007 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1998 + 1.0) / _2007);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2771 = frontier_phi_50_47_ladder;
        }
        float _2773 = isnan(_2433) ? _2116 : (isnan(_2116) ? _2433 : min(_2116, _2433));
        float _2774 = isnan(_2771) ? _2773 : (isnan(_2773) ? _2771 : min(_2773, _2771));
        float _2778 = (_2774 * _2001) + _1990;
        float _2779 = (_2774 * _2004) + _1994;
        float _2780 = (_2774 * _2007) + _1998;
        float _2781 = _2774 * 9.9999997473787516355514526367188e-05;
        float _2782 = (-1.0) - _2781;
        float _2784 = _2781 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2780 > _2784) || ((_2780 < _2782) || ((_2779 > _2784) || ((_2779 < _2782) || ((_2778 < _2782) || (_2778 > _2784))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2902 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2780, cbModelParam._m0[17u].z, fma(_2779, cbModelParam._m0[17u].y, _2778 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2780, cbModelParam._m0[18u].z, fma(_2779, cbModelParam._m0[18u].y, _2778 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2780, cbModelParam._m0[19u].z, fma(_2779, cbModelParam._m0[19u].y, _2778 * cbModelParam._m0[19u].x))), _1937);
            frontier_phi_25_50_ladder = _2902.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2902.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2902.x * cbModelParam._m0[1u].z;
        }
        _2026 = frontier_phi_25_50_ladder_2;
        _2028 = frontier_phi_25_50_ladder_1;
        _2030 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2010 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1007, _1008, _1009), _1937);
        _2026 = _2010.x * cbModelParam._m0[1u].z;
        _2028 = _2010.y * cbModelParam._m0[1u].z;
        _2030 = _2010.z * cbModelParam._m0[1u].z;
    }
    float _2043 = (((_1034 * _983) + _1035) * _999) * ((cbModelParam._m0[1u].w * (_2026 - _1928)) + _1928);
    float _2045 = (((_1034 * _985) + _1035) * _999) * ((cbModelParam._m0[1u].w * (_2028 - _1930)) + _1930);
    float _2047 = (((_1034 * _986) + _1035) * _999) * ((cbModelParam._m0[1u].w * (_2030 - _1932)) + _1932);
    float _2050 = fma(_2047, cbSceneParam._m0[89u].z, fma(_2045, cbSceneParam._m0[89u].y, _2043 * cbSceneParam._m0[89u].x));
    float _2053 = fma(_2047, cbSceneParam._m0[90u].z, fma(_2045, cbSceneParam._m0[90u].y, _2043 * cbSceneParam._m0[90u].x));
    float _2056 = fma(_2047, cbSceneParam._m0[91u].z, fma(_2045, cbSceneParam._m0[91u].y, _2043 * cbSceneParam._m0[91u].x));
    float _2090 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2094 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2098 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2102 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2103 = _2090 / _2102;
    float _2104 = _2094 / _2102;
    float _2105 = _2098 / _2102;
    float _2252;
    float _2253;
    float _2254;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2132 = ((uint(_2105 > cbSceneParam._m0[59u].y) + uint(_2105 > cbSceneParam._m0[59u].x)) + uint(_2105 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2133 = _2132 + 43u;
        uint _2141 = _2132 + 44u;
        uint _2149 = _2132 + 45u;
        uint _2157 = _2132 + 46u;
        float _2168 = fma(_2102, cbSceneParam._m0[_2133].w, fma(_2098, cbSceneParam._m0[_2133].z, fma(_2094, cbSceneParam._m0[_2133].y, _2090 * cbSceneParam._m0[_2133].x)));
        float _2172 = fma(_2102, cbSceneParam._m0[_2141].w, fma(_2098, cbSceneParam._m0[_2141].z, fma(_2094, cbSceneParam._m0[_2141].y, _2090 * cbSceneParam._m0[_2141].x)));
        float _2180 = fma(_2102, cbSceneParam._m0[_2157].w, fma(_2098, cbSceneParam._m0[_2157].z, fma(_2094, cbSceneParam._m0[_2157].y, _2090 * cbSceneParam._m0[_2157].x)));
        float _2185 = cbSceneParam._m0[33u].z * _2180;
        float _2187 = cbSceneParam._m0[33u].w * _2180;
        float _2190 = fma(_2102, cbSceneParam._m0[_2149].w, fma(_2098, cbSceneParam._m0[_2149].z, fma(_2094, cbSceneParam._m0[_2149].y, _2090 * cbSceneParam._m0[_2149].x))) / _2180;
        float _2238 = (cbSceneParam._m0[33u].x - sqrt(((_2104 * _2104) + (_2103 * _2103)) + (_2105 * _2105))) * cbSceneParam._m0[33u].y;
        float _4619 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        float _2245 = (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2185 + _2168) / _2180, (_2187 + _2172) / _2180), _2190), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2187 + _2168) / _2180, (_2172 - _2185) / _2180), _2190), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2168 - _2185) / _2180, (_2172 - _2187) / _2180), _2190), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2168 - _2187) / _2180, (_2185 + _2172) / _2180), _2190), 0.0)).x), vec4(0.25)));
        _2252 = 1.0 - (_2245 * cbSceneParam._m0[34u].x);
        _2253 = 1.0 - (_2245 * cbSceneParam._m0[34u].y);
        _2254 = 1.0 - (_2245 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2252 = 1.0;
        _2253 = 1.0;
        _2254 = 1.0;
    }
    float _2318;
    float _2320;
    float _2322;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2306 = fma(_2102, cbSceneParam._m0[63u].w, fma(_2098, cbSceneParam._m0[63u].z, fma(_2094, cbSceneParam._m0[63u].y, _2090 * cbSceneParam._m0[63u].x)));
        float _2307 = fma(_2102, cbSceneParam._m0[60u].w, fma(_2098, cbSceneParam._m0[60u].z, fma(_2094, cbSceneParam._m0[60u].y, _2090 * cbSceneParam._m0[60u].x))) / _2306;
        float _2308 = fma(_2102, cbSceneParam._m0[61u].w, fma(_2098, cbSceneParam._m0[61u].z, fma(_2094, cbSceneParam._m0[61u].y, _2090 * cbSceneParam._m0[61u].x))) / _2306;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2307 >= cbSceneParam._m0[64u].x) && (_2308 >= cbSceneParam._m0[64u].y)) && (_2307 <= cbSceneParam._m0[64u].z)) && (_2308 <= cbSceneParam._m0[64u].w))
        {
            float _2446 = fma(_2102, cbSceneParam._m0[62u].w, fma(_2098, cbSceneParam._m0[62u].z, fma(_2094, cbSceneParam._m0[62u].y, _2090 * cbSceneParam._m0[62u].x))) / _2306;
            float _2450 = isnan(cbSceneParam._m0[41u].w) ? _2446 : (isnan(_2446) ? cbSceneParam._m0[41u].w : max(_2446, cbSceneParam._m0[41u].w));
            float _2493 = (cbSceneParam._m0[33u].x - sqrt(((_2104 * _2104) + (_2103 * _2103)) + (_2105 * _2105))) * cbSceneParam._m0[33u].y;
            float _4635 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
            float _2500 = (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2307, cbSceneParam._m0[33u].w + _2308), _2450), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2307, _2308 - cbSceneParam._m0[33u].z), _2450), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2307 - cbSceneParam._m0[33u].z, _2308 - cbSceneParam._m0[33u].w), _2450), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2307 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2308), _2450), 0.0)).x), vec4(0.25)));
            float _2504 = 1.0 - (_2500 * cbSceneParam._m0[34u].x);
            float _2505 = 1.0 - (_2500 * cbSceneParam._m0[34u].y);
            float _2506 = 1.0 - (_2500 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2506) ? _2254 : (isnan(_2254) ? _2506 : min(_2254, _2506));
            frontier_phi_37_36_ladder_1 = isnan(_2505) ? _2253 : (isnan(_2253) ? _2505 : min(_2253, _2505));
            frontier_phi_37_36_ladder_2 = isnan(_2504) ? _2252 : (isnan(_2252) ? _2504 : min(_2252, _2504));
        }
        else
        {
            frontier_phi_37_36_ladder = _2254;
            frontier_phi_37_36_ladder_1 = _2253;
            frontier_phi_37_36_ladder_2 = _2252;
        }
        _2318 = frontier_phi_37_36_ladder_2;
        _2320 = frontier_phi_37_36_ladder_1;
        _2322 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2318 = _2252;
        _2320 = _2253;
        _2322 = _2254;
    }
    uvec4 _2327 = floatBitsToUint(cbInstanceData._m0[_258 + 5u]);
    uint _2329 = _2327.x * 14u;
    uint _2330 = _2329 + 13u;
    float _2337 = _999 + (-1.0);
    float _2342 = (cbLight._m0[_2330].x * _2337) + 1.0;
    float _2343 = (cbLight._m0[_2330].y * _2337) + 1.0;
    float _2344 = (cbLight._m0[_2330].z * _2337) + 1.0;
    float _2345 = (cbLight._m0[_2330].w * _2337) + 1.0;
    uint _2346 = _2329 + 5u;
    float _2352 = isnan(1.0) ? _2343 : (isnan(_2343) ? 1.0 : min(_2343, 1.0));
    uint _2356 = _2329 + 4u;
    float _2365 = isnan(1.0) ? _2342 : (isnan(_2342) ? 1.0 : min(_2342, 1.0));
    uint _2369 = _2329 | 1u;
    float _2380 = dot(vec3(cbLight._m0[_2329].xyz), vec3(_821, _822, _823));
    float _2383 = dot(vec3(cbLight._m0[_2369].xyz), vec3(_821, _822, _823));
    float _4671 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _4682 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _2388 = (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0))) * 0.3183098733425140380859375;
    float _2390 = (isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0))) * 0.3183098733425140380859375;
    float _2397 = ((cbLight._m0[_2346].x * _2352) * _2390) + (((cbLight._m0[_2356].x * _2318) * _2365) * _2388);
    float _2398 = ((_2352 * cbLight._m0[_2346].y) * _2390) + (((cbLight._m0[_2356].y * _2320) * _2365) * _2388);
    float _2399 = ((_2352 * cbLight._m0[_2346].z) * _2390) + (((cbLight._m0[_2356].z * _2322) * _2365) * _2388);
    uvec4 _2403 = floatBitsToUint(cbLight._m0[_2329 + 12u]);
    bool _2405 = _2403.x == 0u;
    float _2507;
    float _2509;
    float _2511;
    if (_2405)
    {
        _2507 = _2397;
        _2509 = _2398;
        _2511 = _2399;
    }
    else
    {
        uint _2515 = _2329 + 6u;
        float _2531 = (dot(vec3(cbLight._m0[_2329 + 2u].xyz), vec3(_821, _822, _823)) * 0.5) + 0.5;
        float _2532 = _2531 * _2531;
        float _4693 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
        float _2533 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
        float _2534 = isnan(1.0) ? _2344 : (isnan(_2344) ? 1.0 : min(_2344, 1.0));
        _2507 = (((cbLight._m0[_2515].x * 0.3183098733425140380859375) * _2533) * _2534) + _2397;
        _2509 = (((cbLight._m0[_2515].y * 0.3183098733425140380859375) * _2533) * _2534) + _2398;
        _2511 = (((cbLight._m0[_2515].z * 0.3183098733425140380859375) * _2533) * _2534) + _2399;
    }
    bool _2514 = _2403.y == 0u;
    float _2569;
    float _2571;
    float _2573;
    if (_2514)
    {
        _2569 = _2507;
        _2571 = _2509;
        _2573 = _2511;
    }
    else
    {
        uint _2742 = _2329 + 7u;
        float _2758 = (dot(vec3(cbLight._m0[_2329 + 3u].xyz), vec3(_821, _822, _823)) * 0.5) + 0.5;
        float _2759 = _2758 * _2758;
        float _4709 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
        float _2760 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
        float _2761 = isnan(1.0) ? _2345 : (isnan(_2345) ? 1.0 : min(_2345, 1.0));
        _2569 = (((cbLight._m0[_2742].x * 0.3183098733425140380859375) * _2760) * _2761) + _2507;
        _2571 = (((cbLight._m0[_2742].y * 0.3183098733425140380859375) * _2760) * _2761) + _2509;
        _2573 = (((cbLight._m0[_2742].z * 0.3183098733425140380859375) * _2760) * _2761) + _2511;
    }
    uint _2576 = _2329 + 8u;
    float _2589 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2329].w)) * _824) * 0.949999988079071044921875);
    float _2590 = _2589 * _2589;
    float _2591 = cbLight._m0[_2329].x + _901;
    float _2592 = cbLight._m0[_2329].y + _902;
    float _2593 = cbLight._m0[_2329].z + _903;
    float _2597 = inversesqrt(dot(vec3(_2591, _2592, _2593), vec3(_2591, _2592, _2593)));
    float _2598 = _2597 * _2591;
    float _2599 = _2597 * _2592;
    float _2600 = _2597 * _2593;
    float _2601 = dot(vec3(_821, _822, _823), vec3(cbLight._m0[_2329].xyz));
    float _4725 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
    float _2604 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
    float _4736 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _2605 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
    float _2606 = dot(vec3(_821, _822, _823), vec3(_2598, _2599, _2600));
    float _4747 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
    float _2609 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
    float _2610 = dot(vec3(cbLight._m0[_2329].xyz), vec3(_2598, _2599, _2600));
    float _4758 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
    float _2614 = _2590 * _2590;
    float _2618 = ((_2609 * _2609) * (_2614 + (-1.0))) + 1.0;
    float _2626 = exp2(log2(1.0 - (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0)))) * 5.0);
    float _2627 = 0.959999978542327880859375 - _980;
    float _2629 = 0.959999978542327880859375 - _981;
    float _2630 = 0.959999978542327880859375 - _982;
    float _2637 = 1.0 - _2590;
    float _2648 = (0.5 / (((_2605 * ((_2604 * _2637) + _2590)) + 9.9999999392252902907785028219223e-09) + (((_2605 * _2637) + _2590) * _2604))) * _2604;
    float _4769 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
    float _2650 = (isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0))) * (_2614 / ((_2618 * _2618) * 3.141590118408203125));
    uint _2664 = _2329 + 9u;
    float _2675 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2369].w)) * _824) * 0.949999988079071044921875);
    float _2676 = _2675 * _2675;
    float _2677 = cbLight._m0[_2369].x + _901;
    float _2678 = cbLight._m0[_2369].y + _902;
    float _2679 = cbLight._m0[_2369].z + _903;
    float _2683 = inversesqrt(dot(vec3(_2677, _2678, _2679), vec3(_2677, _2678, _2679)));
    float _2684 = _2683 * _2677;
    float _2685 = _2683 * _2678;
    float _2686 = _2683 * _2679;
    float _2687 = dot(vec3(_821, _822, _823), vec3(cbLight._m0[_2369].xyz));
    float _4780 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
    float _2690 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
    float _2691 = dot(vec3(_821, _822, _823), vec3(_2684, _2685, _2686));
    float _4791 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
    float _2694 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
    float _2695 = dot(vec3(cbLight._m0[_2369].xyz), vec3(_2684, _2685, _2686));
    float _4802 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
    float _2699 = _2676 * _2676;
    float _2703 = ((_2694 * _2694) * (_2699 + (-1.0))) + 1.0;
    float _2710 = exp2(log2(1.0 - (isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0)))) * 5.0);
    float _2717 = 1.0 - _2676;
    float _2727 = (0.5 / (((_2605 * ((_2690 * _2717) + _2676)) + 9.9999999392252902907785028219223e-09) + (((_2605 * _2717) + _2676) * _2690))) * _2690;
    float _4813 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
    float _2729 = (isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0))) * (_2699 / ((_2703 * _2703) * 3.141590118408203125));
    float _2739 = (((((_2710 * _2627) + _983) * cbLight._m0[_2664].x) * _2729) * _2352) + ((((cbLight._m0[_2576].x * _2318) * ((_2626 * _2627) + _983)) * _2650) * _2365);
    float _2740 = (((((_2710 * _2629) + _985) * cbLight._m0[_2664].y) * _2729) * _2352) + ((((cbLight._m0[_2576].y * _2320) * ((_2626 * _2629) + _985)) * _2650) * _2365);
    float _2741 = (((((_2710 * _2630) + _986) * cbLight._m0[_2664].z) * _2729) * _2352) + ((((cbLight._m0[_2576].z * _2322) * ((_2626 * _2630) + _986)) * _2650) * _2365);
    float _2797;
    float _2799;
    float _2801;
    if (_2405)
    {
        _2797 = _2739;
        _2799 = _2740;
        _2801 = _2741;
    }
    else
    {
        uint _2803 = _2329 + 2u;
        uint _2807 = _2329 + 10u;
        float _2821 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2803].w)) * _824) * 0.949999988079071044921875);
        float _2822 = _2821 * _2821;
        float _2823 = cbLight._m0[_2803].x + _901;
        float _2824 = cbLight._m0[_2803].y + _902;
        float _2825 = cbLight._m0[_2803].z + _903;
        float _2829 = inversesqrt(dot(vec3(_2823, _2824, _2825), vec3(_2823, _2824, _2825)));
        float _2830 = _2829 * _2823;
        float _2831 = _2829 * _2824;
        float _2832 = _2829 * _2825;
        float _2833 = dot(vec3(_821, _822, _823), vec3(cbLight._m0[_2803].xyz));
        float _4824 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
        float _2836 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
        float _2837 = dot(vec3(_821, _822, _823), vec3(_2830, _2831, _2832));
        float _4835 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
        float _2840 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
        float _2841 = dot(vec3(cbLight._m0[_2803].xyz), vec3(_2830, _2831, _2832));
        float _4846 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
        float _2845 = _2822 * _2822;
        float _2849 = ((_2840 * _2840) * (_2845 + (-1.0))) + 1.0;
        float _2856 = exp2(log2(1.0 - (isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0)))) * 5.0);
        float _2863 = 1.0 - _2822;
        float _2873 = (0.5 / (((_2605 * ((_2836 * _2863) + _2822)) + 9.9999999392252902907785028219223e-09) + (((_2605 * _2863) + _2822) * _2836))) * _2836;
        float _4857 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
        float _2875 = (isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0))) * (_2845 / ((_2849 * _2849) * 3.141590118408203125));
        float _2876 = isnan(1.0) ? _2344 : (isnan(_2344) ? 1.0 : min(_2344, 1.0));
        _2797 = (((((_2856 * _2627) + _983) * cbLight._m0[_2807].x) * _2875) * _2876) + _2739;
        _2799 = (((((_2856 * _2629) + _985) * cbLight._m0[_2807].y) * _2875) * _2876) + _2740;
        _2801 = (((((_2856 * _2630) + _986) * cbLight._m0[_2807].z) * _2875) * _2876) + _2741;
    }
    float _2907;
    float _2909;
    float _2911;
    if (_2514)
    {
        _2907 = _2797;
        _2909 = _2799;
        _2911 = _2801;
    }
    else
    {
        uint _2918 = _2329 + 3u;
        uint _2922 = _2329 + 11u;
        float _2936 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2918].w)) * _824) * 0.949999988079071044921875);
        float _2937 = _2936 * _2936;
        float _2938 = cbLight._m0[_2918].x + _901;
        float _2939 = cbLight._m0[_2918].y + _902;
        float _2940 = cbLight._m0[_2918].z + _903;
        float _2944 = inversesqrt(dot(vec3(_2938, _2939, _2940), vec3(_2938, _2939, _2940)));
        float _2945 = _2944 * _2938;
        float _2946 = _2944 * _2939;
        float _2947 = _2944 * _2940;
        float _2948 = dot(vec3(_821, _822, _823), vec3(cbLight._m0[_2918].xyz));
        float _4873 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
        float _2951 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
        float _2952 = dot(vec3(_821, _822, _823), vec3(_2945, _2946, _2947));
        float _4884 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
        float _2955 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
        float _2956 = dot(vec3(cbLight._m0[_2918].xyz), vec3(_2945, _2946, _2947));
        float _4895 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
        float _2960 = _2937 * _2937;
        float _2964 = ((_2955 * _2955) * (_2960 + (-1.0))) + 1.0;
        float _2971 = exp2(log2(1.0 - (isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0)))) * 5.0);
        float _2978 = 1.0 - _2937;
        float _2988 = (0.5 / (((_2605 * ((_2951 * _2978) + _2937)) + 9.9999999392252902907785028219223e-09) + (((_2605 * _2978) + _2937) * _2951))) * _2951;
        float _4906 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
        float _2990 = (isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0))) * (_2960 / ((_2964 * _2964) * 3.141590118408203125));
        float _2991 = isnan(1.0) ? _2345 : (isnan(_2345) ? 1.0 : min(_2345, 1.0));
        _2907 = (((((_2971 * _2627) + _983) * cbLight._m0[_2922].x) * _2990) * _2991) + _2797;
        _2909 = (((((_2971 * _2629) + _985) * cbLight._m0[_2922].y) * _2990) * _2991) + _2799;
        _2911 = (((((_2971 * _2630) + _986) * cbLight._m0[_2922].z) * _2990) * _2991) + _2801;
    }
    float _3057;
    float _3059;
    float _3061;
    float _3063;
    float _3065;
    float _3067;
    if (_2327.y == 0u)
    {
        uvec4 _3012 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3013 = _3012.x;
        uint _3024 = uint((float(_3012.y) * floor(float(uint(cbSceneParam._m0[85u].y * _922) / _3013))) + floor(float(uint(cbSceneParam._m0[85u].x * _921) / _3013)));
        float _3034 = (log2(_2105 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3035 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
        uint _3038 = uint(isnan(14.0) ? _3035 : (isnan(_3035) ? 14.0 : min(_3035, 14.0)));
        uvec4 _3043 = texelFetch(g_lightClusterGridBuffer, int(((_3038 << 2u) + (_3024 << 6u)) >> 2u));
        uint _3044 = _3043.x;
        uint _3045 = _3012.z;
        float _3124;
        float _3126;
        float _3128;
        float _3130;
        float _3132;
        float _3134;
        if (((((1u << ((_3045 >> 4u) & 15u)) + 4294967295u) & _3044) == 0u) || ((_3045 & 240u) == 0u))
        {
            _3124 = 0.0;
            _3126 = 0.0;
            _3128 = 0.0;
            _3130 = 0.0;
            _3132 = 0.0;
            _3134 = 0.0;
        }
        else
        {
            float _3125;
            float _3127;
            float _3129;
            float _3131;
            float _3133;
            float _3135;
            float _3277 = 0.0;
            float _3278 = 0.0;
            float _3279 = 0.0;
            float _3280 = 0.0;
            float _3281 = 0.0;
            float _3282 = 0.0;
            uint _3283 = 0u;
            uint _3292;
            bool _3293;
            for (;;)
            {
                _3292 = texelFetch(g_lightClassification, int((((_3038 << 5u) + (_3024 << 9u)) + (_3283 << 2u)) >> 2u)).x;
                _3293 = _3292 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3293)
                {
                    frontier_phi_71_pred = _3282;
                    frontier_phi_71_pred_1 = _3281;
                    frontier_phi_71_pred_2 = _3280;
                    frontier_phi_71_pred_3 = _3279;
                    frontier_phi_71_pred_4 = _3278;
                    frontier_phi_71_pred_5 = _3277;
                }
                else
                {
                    float _3422;
                    float _3423;
                    float _3424;
                    float _3425;
                    float _3426;
                    float _3427;
                    uint _3428;
                    _3422 = _3277;
                    _3423 = _3278;
                    _3424 = _3279;
                    _3425 = _3280;
                    _3426 = _3281;
                    _3427 = _3282;
                    _3428 = _3292;
                    float _3349;
                    float _3350;
                    float _3351;
                    float _3352;
                    float _3353;
                    float _3354;
                    for (;;)
                    {
                        uint _3432 = uint(findLSB(_3428)) + (_3283 << 5u);
                        uint _3429 = (_3428 + 4294967295u) & _3428;
                        uint _3434 = _3432 * 48u;
                        vec4 _3448 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3434)).x, texelFetch(g_PointLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3434 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3434 + 3u)).x));
                        uint _3454 = (_3432 * 48u) + 4u;
                        vec4 _3467 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3454)).x, texelFetch(g_PointLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3454 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3454 + 3u)).x));
                        uint _3473 = (_3432 * 48u) + 8u;
                        vec3 _3484 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3473)).x, texelFetch(g_PointLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3473 + 2u)).x));
                        float _3488 = _3448.x - _2103;
                        float _3489 = _3448.y - _2104;
                        float _3490 = _3448.z - _2105;
                        float _3491 = dot(vec3(_3488, _3489, _3490), vec3(_3488, _3489, _3490));
                        float _3494 = inversesqrt(_3491);
                        float _3495 = _3494 * _3488;
                        float _3496 = _3494 * _3489;
                        float _3497 = _3494 * _3490;
                        float _3498 = dot(vec3(_940, _943, _946), vec3(_3495, _3496, _3497));
                        float _3503 = 1.0 - (_3491 * _3448.w);
                        float _4932 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                        float _3504 = isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0));
                        float _3505 = sqrt(_3491) * _3467.w;
                        float _3508 = 1.39999997615814208984375 / (_3505 + 1.39999997615814208984375);
                        float _3509 = _3508 * _3508;
                        float _3512 = ((1.0 - _3509) * _3498) + _3509;
                        float _3515 = _3505 * _3505;
                        float _3519 = ((isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0))) * _3504) / ((_3515 * 0.699999988079071044921875) + 1.0);
                        float _3523 = (-0.0) - _2103;
                        float _3524 = (-0.0) - _2104;
                        float _3525 = (-0.0) - _2105;
                        float _3529 = inversesqrt(dot(vec3(_3523, _3524, _3525), vec3(_3523, _3524, _3525)));
                        float _3530 = _3529 * _3523;
                        float _3531 = _3529 * _3524;
                        float _3532 = _3529 * _3525;
                        float _3539 = exp2(log2(1.0 / ((_3515 * 3.5) + 5.0)) * 0.25);
                        float _3540 = 1.0 - _1015;
                        float _3547 = sqrt(1.0 - ((1.0 - (_3540 * _3540)) * (1.0 - (_3539 * _3539))));
                        float _3548 = _3547 * _3547;
                        float _3549 = _3548 * _3548;
                        float _3550 = _3530 + _3495;
                        float _3551 = _3531 + _3496;
                        float _3552 = _3532 + _3497;
                        float _3556 = inversesqrt(dot(vec3(_3550, _3551, _3552), vec3(_3550, _3551, _3552)));
                        float _3560 = dot(vec3(_940, _943, _946), vec3(_3530, _3531, _3532));
                        float _4948 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                        float _3563 = isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0));
                        float _3564 = dot(vec3(_940, _943, _946), vec3(_3556 * _3550, _3556 * _3551, _3556 * _3552));
                        float _4959 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                        float _3567 = isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0));
                        float _3571 = ((_3567 * _3567) * (_3549 + (-1.0))) + 1.0;
                        float _3572 = _3508 * _3548;
                        float _3573 = _3572 * _3572;
                        float _3576 = ((1.0 - _3573) * _3498) + _3573;
                        float _4970 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                        float _3577 = isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0));
                        float _3578 = 1.0 - _3548;
                        float _3588 = (0.5 / (((_3577 * ((_3563 * _3578) + _3548)) + 9.9999999392252902907785028219223e-09) + (((_3577 * _3578) + _3548) * _3563))) * _3577;
                        float _4981 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                        float _3599 = (((_3549 * 3.1415927410125732421875) * (isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0)))) / ((_3571 * _3571) * ((_3515 * 2.1991131305694580078125) + 3.141590118408203125))) * _3504;
                        _3352 = (_3519 * _3467.x) + _3425;
                        _3353 = (_3519 * _3467.y) + _3426;
                        _3354 = (_3519 * _3467.z) + _3427;
                        _3349 = (_3599 * _3484.x) + _3422;
                        _3350 = (_3599 * _3484.y) + _3423;
                        _3351 = (_3599 * _3484.z) + _3424;
                        if (_3429 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3422 = _3349;
                            _3423 = _3350;
                            _3424 = _3351;
                            _3425 = _3352;
                            _3426 = _3353;
                            _3427 = _3354;
                            _3428 = _3429;
                        }
                    }
                    frontier_phi_71_pred = _3354;
                    frontier_phi_71_pred_1 = _3353;
                    frontier_phi_71_pred_2 = _3352;
                    frontier_phi_71_pred_3 = _3351;
                    frontier_phi_71_pred_4 = _3350;
                    frontier_phi_71_pred_5 = _3349;
                }
                _3135 = frontier_phi_71_pred;
                _3133 = frontier_phi_71_pred_1;
                _3131 = frontier_phi_71_pred_2;
                _3129 = frontier_phi_71_pred_3;
                _3127 = frontier_phi_71_pred_4;
                _3125 = frontier_phi_71_pred_5;
                uint _3284 = _3283 + 1u;
                if (_3284 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3277 = _3125;
                    _3278 = _3127;
                    _3279 = _3129;
                    _3280 = _3131;
                    _3281 = _3133;
                    _3282 = _3135;
                    _3283 = _3284;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3124 = _3125;
            _3126 = _3127;
            _3128 = _3129;
            _3130 = _3131;
            _3132 = _3133;
            _3134 = _3135;
        }
        uvec4 _3138 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3139 = _3138.z;
        uint _3141 = (_3139 >> 8u) & 15u;
        float _3245;
        float _3247;
        float _3249;
        float _3251;
        float _3253;
        float _3255;
        if (((4294967295u << _3141) & _3044) == 0u)
        {
            _3245 = _3124;
            _3247 = _3126;
            _3249 = _3128;
            _3251 = _3130;
            _3253 = _3132;
            _3255 = _3134;
        }
        else
        {
            float _3270 = inversesqrt(dot(vec3(_2103, _2104, _2105), vec3(_2103, _2104, _2105)));
            float _3271 = _3270 * _2103;
            float _3272 = _3270 * _2104;
            float _3273 = _3270 * _2105;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3141 < ((_3139 >> 12u) & 15u))
            {
                float _3246;
                float _3248;
                float _3250;
                float _3252;
                float _3254;
                float _3256;
                float _3405 = _3124;
                float _3406 = _3126;
                float _3407 = _3128;
                float _3408 = _3130;
                float _3409 = _3132;
                float _3410 = _3134;
                uint _3411 = _3141;
                uint _3420;
                bool _3421;
                for (;;)
                {
                    _3420 = texelFetch(g_lightClassification, int((((_3038 << 5u) + (_3024 << 9u)) + (_3411 << 2u)) >> 2u)).x;
                    _3421 = _3420 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3421)
                    {
                        frontier_phi_82_pred = _3410;
                        frontier_phi_82_pred_1 = _3409;
                        frontier_phi_82_pred_2 = _3408;
                        frontier_phi_82_pred_3 = _3407;
                        frontier_phi_82_pred_4 = _3406;
                        frontier_phi_82_pred_5 = _3405;
                    }
                    else
                    {
                        float _3613;
                        float _3614;
                        float _3615;
                        float _3616;
                        float _3617;
                        float _3618;
                        float _3906;
                        float _3907;
                        float _3908;
                        float _3909;
                        float _3910;
                        float _3911;
                        float _3626 = _3405;
                        float _3627 = _3406;
                        float _3628 = _3407;
                        float _3629 = _3408;
                        float _3630 = _3409;
                        float _3631 = _3410;
                        uint _3632 = _3420;
                        uint _3633;
                        vec4 _3658;
                        float _3659;
                        vec4 _3674;
                        vec3 _3686;
                        vec4 _3701;
                        vec4 _3716;
                        float _3762;
                        bool _3763;
                        for (;;)
                        {
                            uint _3643 = ((_3411 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3632));
                            _3633 = (_3632 + 4294967295u) & _3632;
                            uint _3645 = _3643 * 40u;
                            _3658 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3645)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 3u)).x));
                            _3659 = _3658.w;
                            uint _3661 = (_3643 * 40u) + 4u;
                            _3674 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3661)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 3u)).x));
                            uint _3676 = (_3643 * 40u) + 8u;
                            _3686 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3676)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 2u)).x));
                            uint _3688 = (_3643 * 40u) + 16u;
                            _3701 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3688)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 3u)).x));
                            uint _3703 = (_3643 * 40u) + 20u;
                            _3716 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3703)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 3u)).x));
                            uint _3718 = (_3643 * 40u) + 24u;
                            vec4 _3731 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3718)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 3u)).x));
                            uint _3737 = (_3643 * 40u) + 28u;
                            vec4 _3750 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3737)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3737 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3737 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3737 + 3u)).x));
                            _3762 = fma(_2105, _3750.z, fma(_2104, _3750.y, _3750.x * _2103)) + _3750.w;
                            _3763 = !((fma(_2105, _3731.z, fma(_2104, _3731.y, _3731.x * _2103)) + _3731.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3763)
                            {
                                float _3790 = _3658.x - _2103;
                                float _3791 = _3658.y - _2104;
                                float _3792 = _3658.z - _2105;
                                float _3793 = dot(vec3(_3790, _3791, _3792), vec3(_3790, _3791, _3792));
                                float _3796 = inversesqrt(_3793);
                                float _3797 = _3796 * _3790;
                                float _3798 = _3796 * _3791;
                                float _3799 = _3796 * _3792;
                                float _3803 = 1.0 - (_3793 / (_3659 * _3659));
                                float _4992 = isnan(0.0) ? _3803 : (isnan(_3803) ? 0.0 : max(_3803, 0.0));
                                float _3804 = isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0));
                                float _3808 = sqrt(_3793) * _3674.w;
                                float _3810 = 1.39999997615814208984375 / (_3808 + 1.39999997615814208984375);
                                float _3811 = _3810 * _3810;
                                float _3814 = ((1.0 - _3811) * dot(vec3(_3797, _3798, _3799), vec3(_940, _943, _946))) + _3811;
                                float _3817 = _3808 * _3808;
                                float _3821 = (fma(_2105, _3701.z, fma(_2104, _3701.y, _3701.x * _2103)) + _3701.w) / _3762;
                                float _3822 = (fma(_2105, _3716.z, fma(_2104, _3716.y, _3716.x * _2103)) + _3716.w) / _3762;
                                float _3826 = 1.0 - dot(vec2(_3821, _3822), vec2(_3821, _3822));
                                float _5008 = isnan(0.0) ? _3826 : (isnan(_3826) ? 0.0 : max(_3826, 0.0));
                                float _3827 = isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0));
                                float _3828 = _3827 * (((isnan(0.0) ? _3814 : (isnan(_3814) ? 0.0 : max(_3814, 0.0))) * _3804) / ((_3817 * 0.699999988079071044921875) + 1.0));
                                float _3840 = exp2(log2(1.0 / ((_3817 * 3.5) + 5.0)) * 0.25);
                                float _3841 = 1.0 - _1015;
                                float _3848 = sqrt(1.0 - ((1.0 - (_3841 * _3841)) * (1.0 - (_3840 * _3840))));
                                float _3849 = _3848 * _3848;
                                float _3850 = _3849 * _3849;
                                float _3851 = _3797 - _3271;
                                float _3852 = _3798 - _3272;
                                float _3853 = _3799 - _3273;
                                float _3857 = inversesqrt(dot(vec3(_3851, _3852, _3853), vec3(_3851, _3852, _3853)));
                                float _3861 = dot(vec3(_940, _943, _946), vec3((-0.0) - _3271, (-0.0) - _3272, (-0.0) - _3273));
                                float _5019 = isnan(0.0) ? _3861 : (isnan(_3861) ? 0.0 : max(_3861, 0.0));
                                float _3864 = isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0));
                                float _3865 = dot(vec3(_940, _943, _946), vec3(_3857 * _3851, _3857 * _3852, _3857 * _3853));
                                float _5030 = isnan(0.0) ? _3865 : (isnan(_3865) ? 0.0 : max(_3865, 0.0));
                                float _3868 = isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0));
                                float _3872 = ((_3868 * _3868) * (_3850 + (-1.0))) + 1.0;
                                float _3873 = _3810 * _3849;
                                float _3874 = _3873 * _3873;
                                float _3880 = ((1.0 - _3874) * dot(vec3(_940, _943, _946), vec3(_3797, _3798, _3799))) + _3874;
                                float _5041 = isnan(0.0) ? _3880 : (isnan(_3880) ? 0.0 : max(_3880, 0.0));
                                float _3881 = isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0));
                                float _3882 = 1.0 - _3849;
                                float _3892 = (0.5 / (((_3881 * ((_3864 * _3882) + _3849)) + 9.9999999392252902907785028219223e-09) + (((_3881 * _3882) + _3849) * _3864))) * _3881;
                                float _5052 = isnan(0.0) ? _3892 : (isnan(_3892) ? 0.0 : max(_3892, 0.0));
                                float _3902 = (_3827 * _3804) * (((_3850 * 3.1415927410125732421875) * (isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0)))) / ((_3872 * _3872) * ((_3817 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3828 * _3674.z;
                                frontier_phi_88_pred_1 = _3828 * _3674.y;
                                frontier_phi_88_pred_2 = _3828 * _3674.x;
                                frontier_phi_88_pred_3 = _3902 * _3686.z;
                                frontier_phi_88_pred_4 = _3902 * _3686.y;
                                frontier_phi_88_pred_5 = _3902 * _3686.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3911 = frontier_phi_88_pred;
                            _3910 = frontier_phi_88_pred_1;
                            _3909 = frontier_phi_88_pred_2;
                            _3908 = frontier_phi_88_pred_3;
                            _3907 = frontier_phi_88_pred_4;
                            _3906 = frontier_phi_88_pred_5;
                            _3616 = _3909 + _3629;
                            _3617 = _3910 + _3630;
                            _3618 = _3911 + _3631;
                            _3613 = _3906 + _3626;
                            _3614 = _3907 + _3627;
                            _3615 = _3908 + _3628;
                            if (_3633 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3626 = _3613;
                                _3627 = _3614;
                                _3628 = _3615;
                                _3629 = _3616;
                                _3630 = _3617;
                                _3631 = _3618;
                                _3632 = _3633;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3618;
                        frontier_phi_82_pred_1 = _3617;
                        frontier_phi_82_pred_2 = _3616;
                        frontier_phi_82_pred_3 = _3615;
                        frontier_phi_82_pred_4 = _3614;
                        frontier_phi_82_pred_5 = _3613;
                    }
                    _3256 = frontier_phi_82_pred;
                    _3254 = frontier_phi_82_pred_1;
                    _3252 = frontier_phi_82_pred_2;
                    _3250 = frontier_phi_82_pred_3;
                    _3248 = frontier_phi_82_pred_4;
                    _3246 = frontier_phi_82_pred_5;
                    uint _3412 = _3411 + 1u;
                    if (_3412 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3405 = _3246;
                        _3406 = _3248;
                        _3407 = _3250;
                        _3408 = _3252;
                        _3409 = _3254;
                        _3410 = _3256;
                        _3411 = _3412;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3252;
                frontier_phi_63_64_ladder_1 = _3256;
                frontier_phi_63_64_ladder_2 = _3254;
                frontier_phi_63_64_ladder_3 = _3250;
                frontier_phi_63_64_ladder_4 = _3248;
                frontier_phi_63_64_ladder_5 = _3246;
            }
            else
            {
                frontier_phi_63_64_ladder = _3130;
                frontier_phi_63_64_ladder_1 = _3134;
                frontier_phi_63_64_ladder_2 = _3132;
                frontier_phi_63_64_ladder_3 = _3128;
                frontier_phi_63_64_ladder_4 = _3126;
                frontier_phi_63_64_ladder_5 = _3124;
            }
            _3245 = frontier_phi_63_64_ladder_5;
            _3247 = frontier_phi_63_64_ladder_4;
            _3249 = frontier_phi_63_64_ladder_3;
            _3251 = frontier_phi_63_64_ladder;
            _3253 = frontier_phi_63_64_ladder_2;
            _3255 = frontier_phi_63_64_ladder_1;
        }
        float _3260 = isnan(1.0) ? _999 : (isnan(_999) ? 1.0 : min(_999, 1.0));
        _3057 = (_3260 * _3251) + _2569;
        _3059 = (_3260 * _3253) + _2571;
        _3061 = (_3260 * _3255) + _2573;
        _3063 = ((_3245 * _983) * _3260) + _2907;
        _3065 = ((_3247 * _985) * _3260) + _2909;
        _3067 = ((_3249 * _986) * _3260) + _2911;
    }
    else
    {
        _3057 = _2569;
        _3059 = _2571;
        _3061 = _2573;
        _3063 = _2907;
        _3065 = _2909;
        _3067 = _2911;
    }
    float _5068 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _5079 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _5090 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _3084 = ((isnan(1.0) ? _5068 : (isnan(_5068) ? 1.0 : min(_5068, 1.0))) * (_3057 + ((isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))) * _999))) + ((_3063 + ((isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0))) * _1837)) * cbPerFrame._m0[3u].x);
    float _3085 = ((isnan(1.0) ? _5079 : (isnan(_5079) ? 1.0 : min(_5079, 1.0))) * (_3059 + ((isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))) * _999))) + ((_3065 + ((isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0))) * _1837)) * cbPerFrame._m0[3u].x);
    float _3086 = ((isnan(1.0) ? _5090 : (isnan(_5090) ? 1.0 : min(_5090, 1.0))) * (_3061 + ((isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))) * _999))) + ((_3067 + ((isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0))) * _1837)) * cbPerFrame._m0[3u].x);
    uint _3087 = _258 + 6u;
    float _3095 = _921 / cbSceneParam._m0[86u].x;
    float _3096 = _922 / cbSceneParam._m0[86u].y;
    vec4 _3110 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3095, _3096, (log2((isnan(cbSceneParam._m0[77u].w) ? _843 : (isnan(_843) ? cbSceneParam._m0[77u].w : min(_843, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3112 = _3110.x;
    float _3113 = _3110.y;
    float _3114 = _3110.z;
    float _3115 = _3110.w;
    float _3187;
    float _3189;
    float _3191;
    float _3193;
    if (_843 > cbSceneParam._m0[78u].w)
    {
        float _3149 = isnan(_843) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _843 : min(cbSceneParam._m0[80u].w, _843));
        float _3150 = _3149 / _843;
        float _3161 = _3150 * _894;
        float _3162 = _895 * _3150;
        float _3163 = (-0.0) - _3162;
        float _3165 = _3150 * _896;
        float _3167 = (cbSceneParam._m0[77u].w * _3163) / _3149;
        float _3168 = _3167 + cbSceneParam._m0[79u].w;
        float _3169 = cbSceneParam._m0[79u].w - _3162;
        float _3175 = sqrt(((_3161 * _3161) + (_3162 * _3162)) + (_3165 * _3165));
        float _3178 = (1.0 - (cbSceneParam._m0[77u].w / _3149)) * _3175;
        float _3183 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3185 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3362;
        if (abs((_3163 - _3167) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3362 = ((((_3168 > 0.0) ? exp2(_3183 * _3168) : (2.0 - exp2(_3185 * _3168))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3178;
        }
        else
        {
            float _3306 = 1.0 / cbSceneParam._m0[80u].x;
            float _3307 = isnan(_3169) ? _3168 : (isnan(_3168) ? _3169 : max(_3168, _3169));
            float _3308 = isnan(_3169) ? _3168 : (isnan(_3168) ? _3169 : min(_3168, _3169));
            float _3317 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : min(_3307, 0.0));
            float _3318 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : min(_3308, 0.0));
            _3362 = ((abs(_3175 / _3163) * cbSceneParam._m0[80u].y) * ((((_3317 - _3318) * 2.0) - ((exp2(_3183 * (isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0)))) - exp2(_3183 * (isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0))))) * _3306)) - ((exp2(_3185 * _3317) - exp2(_3185 * _3318)) * _3306))) + (_3178 * cbSceneParam._m0[80u].z);
        }
        vec4 _3364 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3095, _3096, 1.0), 0.0);
        float _3373 = exp2((_3362 * (-1.44269502162933349609375)) * (1.0 - _3364.w));
        float _3374 = log2(_3373);
        float _3390 = log2(_3115);
        _3187 = (exp2(_3390 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3374 * cbSceneParam._m0[78u].x)) * _3364.x) / cbSceneParam._m0[78u].x)) + _3112;
        _3189 = (exp2(_3390 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3374 * cbSceneParam._m0[78u].y)) * _3364.y) / cbSceneParam._m0[78u].y)) + _3113;
        _3191 = (exp2(_3390 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3374 * cbSceneParam._m0[78u].z)) * _3364.z) / cbSceneParam._m0[78u].z)) + _3114;
        _3193 = _3373 * _3115;
    }
    else
    {
        _3187 = _3112;
        _3189 = _3113;
        _3191 = _3114;
        _3193 = _3115;
    }
    bool _3400;
    vec4 _3203;
    vec4 _3225;
    float _3227;
    float _3231;
    float _3232;
    float _3233;
    float _3234;
    bool _3244;
    for (;;)
    {
        _3203 = cbMatDynParam._m0[0u];
        float _3205 = roundEven(_3203.y);
        bool _3206 = _3205 == 3.0;
        float _3207 = log2(_3193);
        float _3214 = exp2(_3207 * cbSceneParam._m0[78u].x) * _3084;
        float _3215 = exp2(_3207 * cbSceneParam._m0[78u].y) * _3085;
        float _3216 = exp2(_3207 * cbSceneParam._m0[78u].z) * _3086;
        float _3223 = _910 + (-0.5);
        _3225 = cbMtdParam._m0[1u];
        _3227 = _3225.y * _3223;
        float _3230 = (_3205 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3231 = _3230 * (_3206 ? _3214 : (_3214 + (cbSceneParam._m0[72u].w * _3187)));
        _3232 = _3230 * (_3206 ? _3215 : (_3215 + (cbSceneParam._m0[72u].w * _3189)));
        _3233 = _3230 * (_3206 ? _3216 : (_3216 + (cbSceneParam._m0[72u].w * _3191)));
        _3234 = _3223 * 0.999000012874603271484375;
        _3244 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3244)
        {
            if ((cbInstanceData._m0[_258 + 7u].x + _3234) < 0.5)
            {
                _3400 = true;
                break;
            }
        }
        uint _3341 = _959 + uint(_3203.w);
        if ((cbInstanceData._m0[_3341].w < 1.0) && ((cbInstanceData._m0[_3341].w + _3234) < 0.5))
        {
            _3400 = true;
            break;
        }
        if ((_3227 + 1.0) < _3225.x)
        {
            _3400 = true;
            break;
        }
        _3400 = false;
        break;
    }
    float _3604;
    if (_3400)
    {
        discard_state = true;
        _3604 = 0.0;
    }
    else
    {
        _3604 = cbInstanceData._m0[_3087].w;
    }
    SV_Target.x = _3231;
    SV_Target.y = _3232;
    SV_Target.z = _3233;
    SV_Target.w = _3604;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3087].w;
    discard_exit();
}


